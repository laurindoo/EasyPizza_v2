
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e578  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800e688  0800e688  0001e688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea94  0800ea94  00020260  2**0
                  CONTENTS
  4 .ARM          00000000  0800ea94  0800ea94  00020260  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ea94  0800ea94  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea94  0800ea94  0001ea94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea98  0800ea98  0001ea98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800ea9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cb8  20000260  0800ecfc  00020260  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002f18  0800ecfc  00022f18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020289  2**0
                  CONTENTS, READONLY
 13 .debug_info   000228f7  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005440  00000000  00000000  00042bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b68  00000000  00000000  00048008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000154f  00000000  00000000  00049b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dd6d  00000000  00000000  0004b0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024186  00000000  00000000  00068e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a05de  00000000  00000000  0008cfb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007994  00000000  00000000  0012d590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00134f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000260 	.word	0x20000260
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e670 	.word	0x0800e670

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000264 	.word	0x20000264
 800014c:	0800e670 	.word	0x0800e670

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <BluetoothInit>:
CRC_short 			CRCReceive;

extern osThreadId TaskBluetoothHandle;


uint8_t BluetoothInit(Bluetooth *ble, UART_HandleTypeDef *bluetoothUARTHandle, DMA_HandleTypeDef *bluetoothUARTDMAHandle, osMessageQId *filaRX, osMessageQId *filaTX){
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
	//Pass the used UART handle to the struct
	ble->UARTHandle 	= bluetoothUARTHandle;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	601a      	str	r2, [r3, #0]
	ble->UARTDMAHandle 	= bluetoothUARTDMAHandle;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	605a      	str	r2, [r3, #4]

	UARTHandle 			= ble->UARTHandle;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <BluetoothInit+0x54>)
 8000fc8:	6013      	str	r3, [r2, #0]
	UARTDMAHandle 		= ble->UARTDMAHandle;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <BluetoothInit+0x58>)
 8000fd0:	6013      	str	r3, [r2, #0]

	//Pass the used queue to the struct
	ble->filaComandosRX = filaRX;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
	ble->filaComandosTX = filaTX;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c

	//Start the component count variable from zero
	ble->_BleCommCount  = 0;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	ble->JanelaConexao = 120;//120 segundos
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2278      	movs	r2, #120	; 0x78
 8000fea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	//Return OK
	return 0;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000294 	.word	0x20000294
 8001000:	20000298 	.word	0x20000298

08001004 <BluetoothAddComp>:

uint8_t BluetoothAddComp(Bluetooth* ble, BleComando* _blecomm, char* objectname, uint8_t __comando, TypeComandoBle __tipo){
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_blecomm->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff f89c 	bl	8000150 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	3301      	adds	r3, #1
 800101c:	4618      	mov	r0, r3
 800101e:	f00c fdc5 	bl	800dbac <malloc>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	605a      	str	r2, [r3, #4]
	//Pass the object name to the struct
	strcpy(_blecomm->objname, objectname);
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	f00c ff73 	bl	800df1c <strcpy>

	//Pass the corresponding data from component to component struct
	_blecomm->_comando = __comando;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	78fa      	ldrb	r2, [r7, #3]
 800103a:	701a      	strb	r2, [r3, #0]
	_blecomm->_tipo = __tipo;
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	7e3a      	ldrb	r2, [r7, #24]
 8001040:	705a      	strb	r2, [r3, #1]

	//Add the component struct to the list on the Nextion Struct
	ble->_BleCommArr[ble->_BleCommCount] = _blecomm;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001048:	461a      	mov	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3222      	adds	r2, #34	; 0x22
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ble->_BleCommCount++;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800105a:	3301      	adds	r3, #1
 800105c:	b2da      	uxtb	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	//Return OK
	return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <BluetoothPutFila>:

void BluetoothPutFila(Bluetooth* ble){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

	//Varregura pelos comandos -----------------------------
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e06b      	b.n	8001156 <BluetoothPutFila+0xe6>

		//Detecta por comando--------------------------------
		if( ble->_RxDataArr[1] == (ble->_BleCommArr[i]->_comando)){
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8001084:	7bf9      	ldrb	r1, [r7, #15]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3122      	adds	r1, #34	; 0x22
 800108a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d15d      	bne.n	8001150 <BluetoothPutFila+0xe0>

			//Validacao de CRC-----------------------------------
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	3b02      	subs	r3, #2
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	4619      	mov	r1, r3
 80010a8:	4610      	mov	r0, r2
 80010aa:	f000 fab7 	bl	800161c <CRC16>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <BluetoothPutFila+0xf8>)
 80010b4:	801a      	strh	r2, [r3, #0]
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 80010b6:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <BluetoothPutFila+0xf8>)
 80010b8:	781a      	ldrb	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010c0:	3b02      	subs	r3, #2
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	440b      	add	r3, r1
 80010c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d10b      	bne.n	80010e6 <BluetoothPutFila+0x76>
					(CRCReceive.byte.lo != ble->_RxDataArr[ble->RxSize-1]))	{
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <BluetoothPutFila+0xf8>)
 80010d0:	785a      	ldrb	r2, [r3, #1]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010d8:	3b01      	subs	r3, #1
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	440b      	add	r3, r1
 80010de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d002      	beq.n	80010ec <BluetoothPutFila+0x7c>
				BluetoothErroCRC();//erro de CRC
 80010e6:	f000 fce1 	bl	8001aac <BluetoothErroCRC>
				return; //ENCERRA
 80010ea:	e03a      	b.n	8001162 <BluetoothPutFila+0xf2>
			}

			if(ble->_BleCommArr[i]->_tipo == ComandoBasico ){
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3222      	adds	r2, #34	; 0x22
 80010f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f6:	785b      	ldrb	r3, [r3, #1]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d10e      	bne.n	800111a <BluetoothPutFila+0xaa>

				osMessagePut(*ble->filaComandosRX, ble->_BleCommArr[i]->_comando, osWaitForever);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3222      	adds	r2, #34	; 0x22
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f04f 32ff 	mov.w	r2, #4294967295
 8001112:	4619      	mov	r1, r3
 8001114:	f009 fb82 	bl	800a81c <osMessagePut>
				return;
 8001118:	e023      	b.n	8001162 <BluetoothPutFila+0xf2>
			}

			else if(ble->_BleCommArr[i]->_tipo == ComandoCritico ){
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3222      	adds	r2, #34	; 0x22
 8001120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d112      	bne.n	8001150 <BluetoothPutFila+0xe0>
				if(ble->SistemaEmErro){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00d      	beq.n	8001150 <BluetoothPutFila+0xe0>
					osMessagePut(*ble->filaComandosRX, ble->_BleCommArr[i]->_comando, osWaitForever);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3222      	adds	r2, #34	; 0x22
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	f04f 32ff 	mov.w	r2, #4294967295
 800114a:	4619      	mov	r1, r3
 800114c:	f009 fb66 	bl	800a81c <osMessagePut>
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	3301      	adds	r3, #1
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	429a      	cmp	r2, r3
 8001160:	d38d      	bcc.n	800107e <BluetoothPutFila+0xe>
					//TX_COMANDO_NEGADO
				}
			}
		}
	}
}
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000029c 	.word	0x2000029c

0800116c <BLEUSART_IrqHandler>:

void BLEUSART_IrqHandler(Bluetooth *ble)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	if (UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <BLEUSART_IrqHandler+0x78>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	2b00      	cmp	r3, #0
 8001182:	d02a      	beq.n	80011da <BLEUSART_IrqHandler+0x6e>
		__IO uint32_t __attribute__((unused))tmp;      	/* Must be volatile to prevent optimizations */

		tmp = UARTHandle->Instance->SR;                 /* Read status register */
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <BLEUSART_IrqHandler+0x78>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
		tmp = UARTHandle->Instance->DR;                 /* Read data register */
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <BLEUSART_IrqHandler+0x78>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	60fb      	str	r3, [r7, #12]
		__HAL_DMA_DISABLE (UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <BLEUSART_IrqHandler+0x7c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <BLEUSART_IrqHandler+0x7c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

		__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);		// HABILITA idle line INTERRUPT
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <BLEUSART_IrqHandler+0x78>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <BLEUSART_IrqHandler+0x78>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0210 	orr.w	r2, r2, #16
 80011be:	60da      	str	r2, [r3, #12]
		__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);		// HABILITA O DMA Tx cplt INTERRUPT
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <BLEUSART_IrqHandler+0x7c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <BLEUSART_IrqHandler+0x7c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0202 	orr.w	r2, r2, #2
 80011d2:	601a      	str	r2, [r3, #0]

		BLEDMA_IrqHandler (ble);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f809 	bl	80011ec <BLEDMA_IrqHandler>
	}
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000294 	.word	0x20000294
 80011e8:	20000298 	.word	0x20000298

080011ec <BLEDMA_IrqHandler>:

void BLEDMA_IrqHandler (Bluetooth *ble)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	if(__HAL_DMA_GET_IT_SOURCE(UARTDMAHandle, DMA_IT_TC) != RESET){   // if the source is TC
 80011f4:	4b9c      	ldr	r3, [pc, #624]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b02      	cmp	r3, #2
 8001202:	f040 8168 	bne.w	80014d6 <BLEDMA_IrqHandler+0x2ea>

		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(UARTDMAHandle));
 8001206:	4b98      	ldr	r3, [pc, #608]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a97      	ldr	r2, [pc, #604]	; (800146c <BLEDMA_IrqHandler+0x280>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d02e      	beq.n	8001270 <BLEDMA_IrqHandler+0x84>
 8001212:	4b95      	ldr	r3, [pc, #596]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a95      	ldr	r2, [pc, #596]	; (8001470 <BLEDMA_IrqHandler+0x284>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d026      	beq.n	800126c <BLEDMA_IrqHandler+0x80>
 800121e:	4b92      	ldr	r3, [pc, #584]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a93      	ldr	r2, [pc, #588]	; (8001474 <BLEDMA_IrqHandler+0x288>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01d      	beq.n	8001266 <BLEDMA_IrqHandler+0x7a>
 800122a:	4b8f      	ldr	r3, [pc, #572]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a91      	ldr	r2, [pc, #580]	; (8001478 <BLEDMA_IrqHandler+0x28c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d014      	beq.n	8001260 <BLEDMA_IrqHandler+0x74>
 8001236:	4b8c      	ldr	r3, [pc, #560]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a8f      	ldr	r2, [pc, #572]	; (800147c <BLEDMA_IrqHandler+0x290>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00b      	beq.n	800125a <BLEDMA_IrqHandler+0x6e>
 8001242:	4b89      	ldr	r3, [pc, #548]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a8d      	ldr	r2, [pc, #564]	; (8001480 <BLEDMA_IrqHandler+0x294>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d102      	bne.n	8001254 <BLEDMA_IrqHandler+0x68>
 800124e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001252:	e00e      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 8001254:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001258:	e00b      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 800125a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800125e:	e008      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 8001260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001264:	e005      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 8001266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800126a:	e002      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 800126c:	2320      	movs	r3, #32
 800126e:	e000      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 8001270:	2302      	movs	r3, #2
 8001272:	4a84      	ldr	r2, [pc, #528]	; (8001484 <BLEDMA_IrqHandler+0x298>)
 8001274:	6053      	str	r3, [r2, #4]

		//zera contador de inatividade
		ble->msIdle=0;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

		//calculo do tamanho da string recebida
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - UARTDMAHandle->Instance->CNDTR;
 800127e:	4b7a      	ldr	r3, [pc, #488]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800128c:	b2da      	uxtb	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

		//verifica se nao caiu conexao
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3330      	adds	r3, #48	; 0x30
 800129e:	461a      	mov	r2, r3
 80012a0:	4979      	ldr	r1, [pc, #484]	; (8001488 <BLEDMA_IrqHandler+0x29c>)
 80012a2:	f00c fd6b 	bl	800dd7c <siprintf>

		//zera contador de mensagem, pois recebeu mensagem
		ble->msDesconectado = 0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54


		//-------------------------MAQUINA CONEXAO--------------------------
		switch(ble->MaquinaConexao){
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d007      	beq.n	80012c8 <BLEDMA_IrqHandler+0xdc>
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f2c0 80d2 	blt.w	8001462 <BLEDMA_IrqHandler+0x276>
 80012be:	3b01      	subs	r3, #1
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	f200 80ce 	bhi.w	8001462 <BLEDMA_IrqHandler+0x276>
 80012c6:	e0a1      	b.n	800140c <BLEDMA_IrqHandler+0x220>
		case RX_DESCONECTADO:

			/*---   C O N E C T O U  ---*/
			ble->StatusSenha = false;//chave de validacao
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			ble->ss = NULL;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "OK+CONN");
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	335c      	adds	r3, #92	; 0x5c
 80012dc:	496b      	ldr	r1, [pc, #428]	; (800148c <BLEDMA_IrqHandler+0x2a0>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f00c fd74 	bl	800ddcc <strstr>
 80012e4:	4602      	mov	r2, r0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if ((ble->ss != NULL  && ble->RxSize == 7) || MACRO_LE_BT_STATUS){
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <BLEDMA_IrqHandler+0x114>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012fc:	2b07      	cmp	r3, #7
 80012fe:	d007      	beq.n	8001310 <BLEDMA_IrqHandler+0x124>
 8001300:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001304:	4862      	ldr	r0, [pc, #392]	; (8001490 <BLEDMA_IrqHandler+0x2a4>)
 8001306:	f004 ff85 	bl	8006214 <HAL_GPIO_ReadPin>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d007      	beq.n	8001320 <BLEDMA_IrqHandler+0x134>
				ble->MaquinaConexao = RX_CONECTADO;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				ble->StatusConexao 	= true;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
			}

			/*---   A D D R  ---*/
			ble->ss = NULL;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "OK+ADDR:");
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	335c      	adds	r3, #92	; 0x5c
 800132c:	4959      	ldr	r1, [pc, #356]	; (8001494 <BLEDMA_IrqHandler+0x2a8>)
 800132e:	4618      	mov	r0, r3
 8001330:	f00c fd4c 	bl	800ddcc <strstr>
 8001334:	4602      	mov	r2, r0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if (ble->ss != NULL){
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 80b0 	beq.w	80014a8 <BLEDMA_IrqHandler+0x2bc>
				ble->PontoExato = ble->ss - ble->StringRecebida;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	335c      	adds	r3, #92	; 0x5c
 8001352:	1ad2      	subs	r2, r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	67da      	str	r2, [r3, #124]	; 0x7c
				for (int i = 0; i < 12; i++) {
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e010      	b.n	8001380 <BLEDMA_IrqHandler+0x194>
					addr8Bits[i] = ble->_RxDataArr[i+ble->PontoExato+8];
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4413      	add	r3, r2
 8001366:	3308      	adds	r3, #8
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001370:	4a49      	ldr	r2, [pc, #292]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	460a      	mov	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 12; i++) {
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3301      	adds	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b0b      	cmp	r3, #11
 8001384:	ddeb      	ble.n	800135e <BLEDMA_IrqHandler+0x172>
				}

				addr32Bits[0] = (addr8Bits[0]<<24)+(addr8Bits[1]<<16)+(addr8Bits[2]<<8)+(addr8Bits[3]);
 8001386:	4b44      	ldr	r3, [pc, #272]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	061a      	lsls	r2, r3, #24
 800138c:	4b42      	ldr	r3, [pc, #264]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 800138e:	785b      	ldrb	r3, [r3, #1]
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	441a      	add	r2, r3
 8001394:	4b40      	ldr	r3, [pc, #256]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 8001396:	789b      	ldrb	r3, [r3, #2]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	4413      	add	r3, r2
 800139c:	4a3e      	ldr	r2, [pc, #248]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 800139e:	78d2      	ldrb	r2, [r2, #3]
 80013a0:	4413      	add	r3, r2
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b3d      	ldr	r3, [pc, #244]	; (800149c <BLEDMA_IrqHandler+0x2b0>)
 80013a6:	601a      	str	r2, [r3, #0]
				addr32Bits[1] = (addr8Bits[4]<<24)+(addr8Bits[5]<<16)+(addr8Bits[6]<<8)+(addr8Bits[7]);
 80013a8:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013aa:	791b      	ldrb	r3, [r3, #4]
 80013ac:	061a      	lsls	r2, r3, #24
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013b0:	795b      	ldrb	r3, [r3, #5]
 80013b2:	041b      	lsls	r3, r3, #16
 80013b4:	441a      	add	r2, r3
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013b8:	799b      	ldrb	r3, [r3, #6]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	4413      	add	r3, r2
 80013be:	4a36      	ldr	r2, [pc, #216]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013c0:	79d2      	ldrb	r2, [r2, #7]
 80013c2:	4413      	add	r3, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <BLEDMA_IrqHandler+0x2b0>)
 80013c8:	605a      	str	r2, [r3, #4]
				addr32Bits[2] = (addr8Bits[8]<<24)+(addr8Bits[9]<<16)+(addr8Bits[10]<<8)+(addr8Bits[11]);
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013cc:	7a1b      	ldrb	r3, [r3, #8]
 80013ce:	061a      	lsls	r2, r3, #24
 80013d0:	4b31      	ldr	r3, [pc, #196]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013d2:	7a5b      	ldrb	r3, [r3, #9]
 80013d4:	041b      	lsls	r3, r3, #16
 80013d6:	441a      	add	r2, r3
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013da:	7a9b      	ldrb	r3, [r3, #10]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	4413      	add	r3, r2
 80013e0:	4a2d      	ldr	r2, [pc, #180]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013e2:	7ad2      	ldrb	r2, [r2, #11]
 80013e4:	4413      	add	r3, r2
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b2c      	ldr	r3, [pc, #176]	; (800149c <BLEDMA_IrqHandler+0x2b0>)
 80013ea:	609a      	str	r2, [r3, #8]

				ble->chave = CRC16(addr8Bits,12);
 80013ec:	210c      	movs	r1, #12
 80013ee:	482a      	ldr	r0, [pc, #168]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013f0:	f000 f914 	bl	800161c <CRC16>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

				osSignalSet(TaskBluetoothHandle, CHEGOU_ADDR_BLE);
 80013fe:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <BLEDMA_IrqHandler+0x2b4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	21bf      	movs	r1, #191	; 0xbf
 8001404:	4618      	mov	r0, r3
 8001406:	f009 f923 	bl	800a650 <osSignalSet>
			}
			break;
 800140a:	e04d      	b.n	80014a8 <BLEDMA_IrqHandler+0x2bc>
		case RX_VALIDADO:
		case RX_CONECTADO:
			/*---   D E S C O N E C T O U  ---*/
			ble->ss = NULL;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "LOST");
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	335c      	adds	r3, #92	; 0x5c
 8001418:	4922      	ldr	r1, [pc, #136]	; (80014a4 <BLEDMA_IrqHandler+0x2b8>)
 800141a:	4618      	mov	r0, r3
 800141c:	f00c fcd6 	bl	800ddcc <strstr>
 8001420:	4602      	mov	r2, r0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if (ble->ss != NULL || !MACRO_LE_BT_STATUS){
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800142e:	2b00      	cmp	r3, #0
 8001430:	d107      	bne.n	8001442 <BLEDMA_IrqHandler+0x256>
 8001432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001436:	4816      	ldr	r0, [pc, #88]	; (8001490 <BLEDMA_IrqHandler+0x2a4>)
 8001438:	f004 feec 	bl	8006214 <HAL_GPIO_ReadPin>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10b      	bne.n	800145a <BLEDMA_IrqHandler+0x26e>
				ble->StatusSenha 		= false;//chave de validacao
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				ble->StatusConexao 		= false;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
			}


			BluetoothPutFila(ble);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fe08 	bl	8001070 <BluetoothPutFila>

			break;
 8001460:	e023      	b.n	80014aa <BLEDMA_IrqHandler+0x2be>

		default:
			break;
 8001462:	bf00      	nop
 8001464:	e021      	b.n	80014aa <BLEDMA_IrqHandler+0x2be>
 8001466:	bf00      	nop
 8001468:	20000298 	.word	0x20000298
 800146c:	40020008 	.word	0x40020008
 8001470:	4002001c 	.word	0x4002001c
 8001474:	40020030 	.word	0x40020030
 8001478:	40020044 	.word	0x40020044
 800147c:	40020058 	.word	0x40020058
 8001480:	4002006c 	.word	0x4002006c
 8001484:	40020000 	.word	0x40020000
 8001488:	0800e688 	.word	0x0800e688
 800148c:	0800e68c 	.word	0x0800e68c
 8001490:	40010c00 	.word	0x40010c00
 8001494:	0800e694 	.word	0x0800e694
 8001498:	2000027c 	.word	0x2000027c
 800149c:	20000288 	.word	0x20000288
 80014a0:	20000c64 	.word	0x20000c64
 80014a4:	0800e6a0 	.word	0x0800e6a0
			break;
 80014a8:	bf00      	nop
		}
		/* Prepare DMA for next transfer */
		/* Important! DMA stream won't start if all flags are not cleared first */
		UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <BLEDMA_IrqHandler+0x2f4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60da      	str	r2, [r3, #12]
		UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <BLEDMA_IrqHandler+0x2f4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2240      	movs	r2, #64	; 0x40
 80014c0:	605a      	str	r2, [r3, #4]
		UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <BLEDMA_IrqHandler+0x2f4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <BLEDMA_IrqHandler+0x2f4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
	}
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000298 	.word	0x20000298

080014e4 <BluetoothEnviaComando>:

void BluetoothEnviaComando(unsigned char _out[], int size)
{
 80014e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014e8:	b087      	sub	sp, #28
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
 80014f0:	466b      	mov	r3, sp
 80014f2:	461e      	mov	r6, r3
	uint8_t	TX_Buffer		[size+3];
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	1cd9      	adds	r1, r3, #3
 80014f8:	1e4b      	subs	r3, r1, #1
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	460a      	mov	r2, r1
 80014fe:	2300      	movs	r3, #0
 8001500:	4690      	mov	r8, r2
 8001502:	4699      	mov	r9, r3
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001510:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001514:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001518:	460a      	mov	r2, r1
 800151a:	2300      	movs	r3, #0
 800151c:	4614      	mov	r4, r2
 800151e:	461d      	mov	r5, r3
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	00eb      	lsls	r3, r5, #3
 800152a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800152e:	00e2      	lsls	r2, r4, #3
 8001530:	460b      	mov	r3, r1
 8001532:	3307      	adds	r3, #7
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	ebad 0d03 	sub.w	sp, sp, r3
 800153c:	466b      	mov	r3, sp
 800153e:	3300      	adds	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
	unsigned short CRCVar;

	//varredura para local
	for (int i = 0; i <= size; ++i) {
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e00b      	b.n	8001560 <BluetoothEnviaComando+0x7c>
		TX_Buffer[i]=_out[i];
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	7819      	ldrb	r1, [r3, #0]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	4413      	add	r3, r2
 8001556:	460a      	mov	r2, r1
 8001558:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= size; ++i) {
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	ddef      	ble.n	8001548 <BluetoothEnviaComando+0x64>
	}

	//calculo e atribuicao do crc
	CRCVar = CRC16(_out,size+1);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	3301      	adds	r3, #1
 800156e:	b29b      	uxth	r3, r3
 8001570:	4619      	mov	r1, r3
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f852 	bl	800161c <CRC16>
 8001578:	4603      	mov	r3, r0
 800157a:	817b      	strh	r3, [r7, #10]
	TX_Buffer[size+2] = (unsigned char) (CRCVar >> 8);
 800157c:	897b      	ldrh	r3, [r7, #10]
 800157e:	0a1b      	lsrs	r3, r3, #8
 8001580:	b29a      	uxth	r2, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	3302      	adds	r3, #2
 8001586:	b2d1      	uxtb	r1, r2
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	54d1      	strb	r1, [r2, r3]
	TX_Buffer[size+1] = (unsigned char) (CRCVar & 0x00FF);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	897a      	ldrh	r2, [r7, #10]
 8001592:	b2d1      	uxtb	r1, r2
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	54d1      	strb	r1, [r2, r3]

	Envia_bytes_UART((uint8_t *)TX_Buffer,size+3);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3303      	adds	r3, #3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	4619      	mov	r1, r3
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f806 	bl	80015b4 <Envia_bytes_UART>
 80015a8:	46b5      	mov	sp, r6
}
 80015aa:	bf00      	nop
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080015b4 <Envia_bytes_UART>:

void Envia_bytes_UART(unsigned char _out[], uint8_t size){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(UARTHandle, (uint8_t *)_out, size,50);
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <Envia_bytes_UART+0x24>)
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	2332      	movs	r3, #50	; 0x32
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	f007 fdb4 	bl	8009138 <HAL_UART_Transmit>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000294 	.word	0x20000294

080015dc <Envia_texto_UART>:

void Envia_texto_UART(char _out[], uint16_t delay){
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(UARTHandle, (uint8_t *) _out, strlen(_out));
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <Envia_texto_UART+0x3c>)
 80015ea:	681c      	ldr	r4, [r3, #0]
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7fe fdaf 	bl	8000150 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4620      	mov	r0, r4
 80015fc:	f007 fe1f 	bl	800923e <HAL_UART_Transmit_IT>
	if(delay != 0){
 8001600:	887b      	ldrh	r3, [r7, #2]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <Envia_texto_UART+0x32>
		osDelay(delay);
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	4618      	mov	r0, r3
 800160a:	f008 ff95 	bl	800a538 <osDelay>
	}
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	bf00      	nop
 8001618:	20000294 	.word	0x20000294

0800161c <CRC16>:

unsigned short CRC16 (unsigned char *puchMsg, unsigned short usDataLen)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
			0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
			0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
			0x40
	};

	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001628:	23ff      	movs	r3, #255	; 0xff
 800162a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800162c:	23ff      	movs	r3, #255	; 0xff
 800162e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001630:	e013      	b.n	800165a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	781a      	ldrb	r2, [r3, #0]
 800163a:	7bbb      	ldrb	r3, [r7, #14]
 800163c:	4053      	eors	r3, r2
 800163e:	b2db      	uxtb	r3, r3
 8001640:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001642:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <CRC16+0x64>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4413      	add	r3, r2
 8001648:	781a      	ldrb	r2, [r3, #0]
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	4053      	eors	r3, r2
 800164e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <CRC16+0x68>)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4413      	add	r3, r2
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800165a:	887b      	ldrh	r3, [r7, #2]
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	807a      	strh	r2, [r7, #2]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e6      	bne.n	8001632 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	b21a      	sxth	r2, r3
 800166a:	7bbb      	ldrb	r3, [r7, #14]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21b      	sxth	r3, r3
 8001672:	b29b      	uxth	r3, r3
}//---END---//
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000000 	.word	0x20000000
 8001684:	20000100 	.word	0x20000100

08001688 <iniciaBleHm10>:

void iniciaBleHm10(Bluetooth* ble){
 8001688:	b580      	push	{r7, lr}
 800168a:	b092      	sub	sp, #72	; 0x48
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
		redefineBle=2,
		capturaAddr=3,
		final=4,
		erro=5,
	} sequenciaBle;
	sequenciaBle sequenciaBLE = inicio;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


	while(sequenciaBLE!=final || sequenciaBLE!=erro){
 8001696:	e1f5      	b.n	8001a84 <iniciaBleHm10+0x3fc>
		switch (sequenciaBLE) {
 8001698:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800169c:	2b05      	cmp	r3, #5
 800169e:	f200 81ec 	bhi.w	8001a7a <iniciaBleHm10+0x3f2>
 80016a2:	a201      	add	r2, pc, #4	; (adr r2, 80016a8 <iniciaBleHm10+0x20>)
 80016a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a8:	080016c1 	.word	0x080016c1
 80016ac:	08001751 	.word	0x08001751
 80016b0:	080017f1 	.word	0x080017f1
 80016b4:	08001a1b 	.word	0x08001a1b
 80016b8:	08001a3d 	.word	0x08001a3d
 80016bc:	08001a77 	.word	0x08001a77
		case inicio:
			HAL_Delay(50);
 80016c0:	2032      	movs	r0, #50	; 0x32
 80016c2:	f003 fb71 	bl	8004da8 <HAL_Delay>
			SETUP_UART(115200)
 80016c6:	4bbd      	ldr	r3, [pc, #756]	; (80019bc <iniciaBleHm10+0x334>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f007 fe12 	bl	80092f4 <HAL_UART_Abort_IT>
 80016d0:	4bba      	ldr	r3, [pc, #744]	; (80019bc <iniciaBleHm10+0x334>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f007 fcfd 	bl	80090d4 <HAL_UART_DeInit>
 80016da:	2032      	movs	r0, #50	; 0x32
 80016dc:	f003 fb64 	bl	8004da8 <HAL_Delay>
 80016e0:	4bb6      	ldr	r3, [pc, #728]	; (80019bc <iniciaBleHm10+0x334>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	4bb4      	ldr	r3, [pc, #720]	; (80019bc <iniciaBleHm10+0x334>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f007 fca0 	bl	8009034 <HAL_UART_Init>
 80016f4:	2032      	movs	r0, #50	; 0x32
 80016f6:	f003 fb57 	bl	8004da8 <HAL_Delay>
			HAL_Delay(50);
 80016fa:	2032      	movs	r0, #50	; 0x32
 80016fc:	f003 fb54 	bl	8004da8 <HAL_Delay>
			Envia_texto_UART("AT",50);	//
 8001700:	2132      	movs	r1, #50	; 0x32
 8001702:	48af      	ldr	r0, [pc, #700]	; (80019c0 <iniciaBleHm10+0x338>)
 8001704:	f7ff ff6a 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT",50);	//
 8001708:	2132      	movs	r1, #50	; 0x32
 800170a:	48ad      	ldr	r0, [pc, #692]	; (80019c0 <iniciaBleHm10+0x338>)
 800170c:	f7ff ff66 	bl	80015dc <Envia_texto_UART>

			/*---HABILITA INTERRUPÇÃO---*/
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);							// HABILITA idle line INTERRUPT
 8001710:	4baa      	ldr	r3, [pc, #680]	; (80019bc <iniciaBleHm10+0x334>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	4ba8      	ldr	r3, [pc, #672]	; (80019bc <iniciaBleHm10+0x334>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0210 	orr.w	r2, r2, #16
 8001722:	60da      	str	r2, [r3, #12]
			__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);							// HABILITA O DMA Tx cplt INTERRUPT
 8001724:	4ba7      	ldr	r3, [pc, #668]	; (80019c4 <iniciaBleHm10+0x33c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4ba5      	ldr	r3, [pc, #660]	; (80019c4 <iniciaBleHm10+0x33c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0202 	orr.w	r2, r2, #2
 8001736:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 8001738:	4ba0      	ldr	r3, [pc, #640]	; (80019bc <iniciaBleHm10+0x334>)
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3330      	adds	r3, #48	; 0x30
 8001740:	2240      	movs	r2, #64	; 0x40
 8001742:	4619      	mov	r1, r3
 8001744:	f007 fdb0 	bl	80092a8 <HAL_UART_Receive_DMA>
			sequenciaBLE = verificaNome;
 8001748:	2301      	movs	r3, #1
 800174a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800174e:	e199      	b.n	8001a84 <iniciaBleHm10+0x3fc>

			continue;
		case verificaNome:
			static uint8_t tryingName=0;
			const uint8_t max_attempts = 5;
 8001750:	2305      	movs	r3, #5
 8001752:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			const uint32_t delay_between_attempts_ms = 1000;
 8001756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175a:	643b      	str	r3, [r7, #64]	; 0x40

			while (tryingName < max_attempts) {
 800175c:	bf00      	nop
 800175e:	4b9a      	ldr	r3, [pc, #616]	; (80019c8 <iniciaBleHm10+0x340>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001766:	429a      	cmp	r2, r3
 8001768:	d937      	bls.n	80017da <iniciaBleHm10+0x152>
				Envia_texto_UART("AT+NAME?", 100);
 800176a:	2164      	movs	r1, #100	; 0x64
 800176c:	4897      	ldr	r0, [pc, #604]	; (80019cc <iniciaBleHm10+0x344>)
 800176e:	f7ff ff35 	bl	80015dc <Envia_texto_UART>

				HAL_Delay(delay_between_attempts_ms);
 8001772:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001774:	f003 fb18 	bl	8004da8 <HAL_Delay>
				ble->ss = NULL;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				ble->ss = strstr(ble->StringRecebida, "NAME");
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	335c      	adds	r3, #92	; 0x5c
 8001784:	4992      	ldr	r1, [pc, #584]	; (80019d0 <iniciaBleHm10+0x348>)
 8001786:	4618      	mov	r0, r3
 8001788:	f00c fb20 	bl	800ddcc <strstr>
 800178c:	4602      	mov	r2, r0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				if (ble->ss != NULL){
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800179a:	2b00      	cmp	r3, #0
 800179c:	d016      	beq.n	80017cc <iniciaBleHm10+0x144>
					ble->ss = strstr(ble->StringRecebida, BLE_DEVICE_NAME);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	335c      	adds	r3, #92	; 0x5c
 80017a2:	498c      	ldr	r1, [pc, #560]	; (80019d4 <iniciaBleHm10+0x34c>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00c fb11 	bl	800ddcc <strstr>
 80017aa:	4602      	mov	r2, r0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					if (ble->ss != NULL){
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <iniciaBleHm10+0x13c>
						sequenciaBLE = capturaAddr;
 80017bc:	2303      	movs	r3, #3
 80017be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
 80017c2:	e00a      	b.n	80017da <iniciaBleHm10+0x152>
					} else {
						sequenciaBLE = redefineBle;
 80017c4:	2302      	movs	r3, #2
 80017c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
 80017ca:	e006      	b.n	80017da <iniciaBleHm10+0x152>
					}
				} else {
					tryingName++;
 80017cc:	4b7e      	ldr	r3, [pc, #504]	; (80019c8 <iniciaBleHm10+0x340>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b7c      	ldr	r3, [pc, #496]	; (80019c8 <iniciaBleHm10+0x340>)
 80017d6:	701a      	strb	r2, [r3, #0]
					break;
 80017d8:	bf00      	nop
				}
			}

			if(tryingName >= max_attempts)
 80017da:	4b7b      	ldr	r3, [pc, #492]	; (80019c8 <iniciaBleHm10+0x340>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80017e2:	429a      	cmp	r2, r3
 80017e4:	f200 814b 	bhi.w	8001a7e <iniciaBleHm10+0x3f6>
				sequenciaBLE = redefineBle;//extrapolou as tentativas
 80017e8:	2302      	movs	r3, #2
 80017ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 80017ee:	e146      	b.n	8001a7e <iniciaBleHm10+0x3f6>
		case redefineBle:
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017f6:	4878      	ldr	r0, [pc, #480]	; (80019d8 <iniciaBleHm10+0x350>)
 80017f8:	f004 fd23 	bl	8006242 <HAL_GPIO_WritePin>
 80017fc:	20c8      	movs	r0, #200	; 0xc8
 80017fe:	f003 fad3 	bl	8004da8 <HAL_Delay>
 8001802:	2201      	movs	r2, #1
 8001804:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001808:	4873      	ldr	r0, [pc, #460]	; (80019d8 <iniciaBleHm10+0x350>)
 800180a:	f004 fd1a 	bl	8006242 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800180e:	2064      	movs	r0, #100	; 0x64
 8001810:	f003 faca 	bl	8004da8 <HAL_Delay>

			//seta em 115200
			SETUP_UART(115200)
 8001814:	4b69      	ldr	r3, [pc, #420]	; (80019bc <iniciaBleHm10+0x334>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f007 fd6b 	bl	80092f4 <HAL_UART_Abort_IT>
 800181e:	4b67      	ldr	r3, [pc, #412]	; (80019bc <iniciaBleHm10+0x334>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f007 fc56 	bl	80090d4 <HAL_UART_DeInit>
 8001828:	2032      	movs	r0, #50	; 0x32
 800182a:	f003 fabd 	bl	8004da8 <HAL_Delay>
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <iniciaBleHm10+0x334>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	4b60      	ldr	r3, [pc, #384]	; (80019bc <iniciaBleHm10+0x334>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f007 fbf9 	bl	8009034 <HAL_UART_Init>
 8001842:	2032      	movs	r0, #50	; 0x32
 8001844:	f003 fab0 	bl	8004da8 <HAL_Delay>
			Envia_texto_UART("AT",100);	//
 8001848:	2164      	movs	r1, #100	; 0x64
 800184a:	485d      	ldr	r0, [pc, #372]	; (80019c0 <iniciaBleHm10+0x338>)
 800184c:	f7ff fec6 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 8001850:	2164      	movs	r1, #100	; 0x64
 8001852:	485b      	ldr	r0, [pc, #364]	; (80019c0 <iniciaBleHm10+0x338>)
 8001854:	f7ff fec2 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 8001858:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800185c:	485f      	ldr	r0, [pc, #380]	; (80019dc <iniciaBleHm10+0x354>)
 800185e:	f7ff febd 	bl	80015dc <Envia_texto_UART>
			//seta em 9600
			SETUP_UART(9600)
 8001862:	4b56      	ldr	r3, [pc, #344]	; (80019bc <iniciaBleHm10+0x334>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f007 fd44 	bl	80092f4 <HAL_UART_Abort_IT>
 800186c:	4b53      	ldr	r3, [pc, #332]	; (80019bc <iniciaBleHm10+0x334>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f007 fc2f 	bl	80090d4 <HAL_UART_DeInit>
 8001876:	2032      	movs	r0, #50	; 0x32
 8001878:	f003 fa96 	bl	8004da8 <HAL_Delay>
 800187c:	4b4f      	ldr	r3, [pc, #316]	; (80019bc <iniciaBleHm10+0x334>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	4b4d      	ldr	r3, [pc, #308]	; (80019bc <iniciaBleHm10+0x334>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f007 fbd2 	bl	8009034 <HAL_UART_Init>
 8001890:	2032      	movs	r0, #50	; 0x32
 8001892:	f003 fa89 	bl	8004da8 <HAL_Delay>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 8001896:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800189a:	4850      	ldr	r0, [pc, #320]	; (80019dc <iniciaBleHm10+0x354>)
 800189c:	f7ff fe9e 	bl	80015dc <Envia_texto_UART>

			Envia_texto_UART("AT",100);	//
 80018a0:	2164      	movs	r1, #100	; 0x64
 80018a2:	4847      	ldr	r0, [pc, #284]	; (80019c0 <iniciaBleHm10+0x338>)
 80018a4:	f7ff fe9a 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 80018a8:	2164      	movs	r1, #100	; 0x64
 80018aa:	4845      	ldr	r0, [pc, #276]	; (80019c0 <iniciaBleHm10+0x338>)
 80018ac:	f7ff fe96 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+ADTY3",300);	//BLOQUEIA CONEXAO
 80018b0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80018b4:	484a      	ldr	r0, [pc, #296]	; (80019e0 <iniciaBleHm10+0x358>)
 80018b6:	f7ff fe91 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+BAUD4",300);	//COLOCA BAUD EM 115200
 80018ba:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80018be:	4849      	ldr	r0, [pc, #292]	; (80019e4 <iniciaBleHm10+0x35c>)
 80018c0:	f7ff fe8c 	bl	80015dc <Envia_texto_UART>

			//seta em 115200
			SETUP_UART(115200)
 80018c4:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <iniciaBleHm10+0x334>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f007 fd13 	bl	80092f4 <HAL_UART_Abort_IT>
 80018ce:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <iniciaBleHm10+0x334>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f007 fbfe 	bl	80090d4 <HAL_UART_DeInit>
 80018d8:	2032      	movs	r0, #50	; 0x32
 80018da:	f003 fa65 	bl	8004da8 <HAL_Delay>
 80018de:	4b37      	ldr	r3, [pc, #220]	; (80019bc <iniciaBleHm10+0x334>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	4b34      	ldr	r3, [pc, #208]	; (80019bc <iniciaBleHm10+0x334>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f007 fba1 	bl	8009034 <HAL_UART_Init>
 80018f2:	2032      	movs	r0, #50	; 0x32
 80018f4:	f003 fa58 	bl	8004da8 <HAL_Delay>
			//	M_BLE_RESET
			MACRO_RESET_BLE
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018fe:	4836      	ldr	r0, [pc, #216]	; (80019d8 <iniciaBleHm10+0x350>)
 8001900:	f004 fc9f 	bl	8006242 <HAL_GPIO_WritePin>
 8001904:	20c8      	movs	r0, #200	; 0xc8
 8001906:	f003 fa4f 	bl	8004da8 <HAL_Delay>
 800190a:	2201      	movs	r2, #1
 800190c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001910:	4831      	ldr	r0, [pc, #196]	; (80019d8 <iniciaBleHm10+0x350>)
 8001912:	f004 fc96 	bl	8006242 <HAL_GPIO_WritePin>

			//CONFIGURA CENTRAL
			Envia_texto_UART("AT",100);	//
 8001916:	2164      	movs	r1, #100	; 0x64
 8001918:	4829      	ldr	r0, [pc, #164]	; (80019c0 <iniciaBleHm10+0x338>)
 800191a:	f7ff fe5f 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 800191e:	2164      	movs	r1, #100	; 0x64
 8001920:	4827      	ldr	r0, [pc, #156]	; (80019c0 <iniciaBleHm10+0x338>)
 8001922:	f7ff fe5b 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+POWE3",300);	//POTENCIA MAXIMA
 8001926:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800192a:	482f      	ldr	r0, [pc, #188]	; (80019e8 <iniciaBleHm10+0x360>)
 800192c:	f7ff fe56 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+SHOW3",300);	//MOSTRA O NOME e rssi
 8001930:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001934:	482d      	ldr	r0, [pc, #180]	; (80019ec <iniciaBleHm10+0x364>)
 8001936:	f7ff fe51 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+GAIN1",300);	//INSERE GANHO
 800193a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800193e:	482c      	ldr	r0, [pc, #176]	; (80019f0 <iniciaBleHm10+0x368>)
 8001940:	f7ff fe4c 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+NOTI1",300);	//NOTIFICA QUE CONECTOU
 8001944:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001948:	482a      	ldr	r0, [pc, #168]	; (80019f4 <iniciaBleHm10+0x36c>)
 800194a:	f7ff fe47 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+PIO11",300);	//1 - CONECT = 1  \  DISC = 0
 800194e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001952:	4829      	ldr	r0, [pc, #164]	; (80019f8 <iniciaBleHm10+0x370>)
 8001954:	f7ff fe42 	bl	80015dc <Envia_texto_UART>
			M_BLE_RESET
 8001958:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800195c:	4827      	ldr	r0, [pc, #156]	; (80019fc <iniciaBleHm10+0x374>)
 800195e:	f7ff fe3d 	bl	80015dc <Envia_texto_UART>

			char comando[COMANDO_BUFFER_SIZE]; // Buffer para o comando AT
			snprintf(comando, sizeof(comando), "AT+NAME%s", BLE_DEVICE_NAME);
 8001962:	f107 000c 	add.w	r0, r7, #12
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <iniciaBleHm10+0x34c>)
 8001968:	4a25      	ldr	r2, [pc, #148]	; (8001a00 <iniciaBleHm10+0x378>)
 800196a:	2132      	movs	r1, #50	; 0x32
 800196c:	f00c f9d2 	bl	800dd14 <sniprintf>
			Envia_texto_UART(comando, 400); // Configura o nome no dispositivo
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fe2f 	bl	80015dc <Envia_texto_UART>


			Envia_texto_UART("AT+ADTY0",300);				//DESBLOQUEIA CONEXA
 800197e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001982:	4820      	ldr	r0, [pc, #128]	; (8001a04 <iniciaBleHm10+0x37c>)
 8001984:	f7ff fe2a 	bl	80015dc <Envia_texto_UART>
			M_BLE_RESET
 8001988:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800198c:	481b      	ldr	r0, [pc, #108]	; (80019fc <iniciaBleHm10+0x374>)
 800198e:	f7ff fe25 	bl	80015dc <Envia_texto_UART>
			sequenciaBLE = capturaAddr;
 8001992:	2303      	movs	r3, #3
 8001994:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8001998:	e074      	b.n	8001a84 <iniciaBleHm10+0x3fc>
		case capturaAddr:
			static uint8_t tryingAddr=0;

			while (tryingAddr < max_attempts) {

				Envia_texto_UART("AT+ADDR?",300);//pede addr
 800199a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800199e:	481a      	ldr	r0, [pc, #104]	; (8001a08 <iniciaBleHm10+0x380>)
 80019a0:	f7ff fe1c 	bl	80015dc <Envia_texto_UART>
				HAL_Delay(delay_between_attempts_ms);
 80019a4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80019a6:	f003 f9ff 	bl	8004da8 <HAL_Delay>

				if (ble->chave != 0){
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d02b      	beq.n	8001a0c <iniciaBleHm10+0x384>
					sequenciaBLE = final;
 80019b4:	2304      	movs	r3, #4
 80019b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
 80019ba:	e035      	b.n	8001a28 <iniciaBleHm10+0x3a0>
 80019bc:	20000294 	.word	0x20000294
 80019c0:	0800e6a8 	.word	0x0800e6a8
 80019c4:	20000298 	.word	0x20000298
 80019c8:	2000029e 	.word	0x2000029e
 80019cc:	0800e6ac 	.word	0x0800e6ac
 80019d0:	0800e6b8 	.word	0x0800e6b8
 80019d4:	0800e6c0 	.word	0x0800e6c0
 80019d8:	40010c00 	.word	0x40010c00
 80019dc:	0800e6cc 	.word	0x0800e6cc
 80019e0:	0800e6d8 	.word	0x0800e6d8
 80019e4:	0800e6e4 	.word	0x0800e6e4
 80019e8:	0800e6f0 	.word	0x0800e6f0
 80019ec:	0800e6fc 	.word	0x0800e6fc
 80019f0:	0800e708 	.word	0x0800e708
 80019f4:	0800e714 	.word	0x0800e714
 80019f8:	0800e720 	.word	0x0800e720
 80019fc:	0800e72c 	.word	0x0800e72c
 8001a00:	0800e738 	.word	0x0800e738
 8001a04:	0800e744 	.word	0x0800e744
 8001a08:	0800e750 	.word	0x0800e750
				} else {
					tryingAddr++;
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <iniciaBleHm10+0x418>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <iniciaBleHm10+0x418>)
 8001a16:	701a      	strb	r2, [r3, #0]
					break;
 8001a18:	e006      	b.n	8001a28 <iniciaBleHm10+0x3a0>
			while (tryingAddr < max_attempts) {
 8001a1a:	bf00      	nop
 8001a1c:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <iniciaBleHm10+0x418>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d8b8      	bhi.n	800199a <iniciaBleHm10+0x312>
				}
			}

			if(tryingAddr >= max_attempts)
 8001a28:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <iniciaBleHm10+0x418>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d826      	bhi.n	8001a82 <iniciaBleHm10+0x3fa>
				sequenciaBLE = erro;//extrapolou as tentativas
 8001a34:	2305      	movs	r3, #5
 8001a36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8001a3a:	e022      	b.n	8001a82 <iniciaBleHm10+0x3fa>
		case final:
			/*---HABILITA INTERRUPÇÃO---*/
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <iniciaBleHm10+0x41c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <iniciaBleHm10+0x41c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0210 	orr.w	r2, r2, #16
 8001a4e:	60da      	str	r2, [r3, #12]
			__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <iniciaBleHm10+0x420>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <iniciaBleHm10+0x420>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0202 	orr.w	r2, r2, #2
 8001a62:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <iniciaBleHm10+0x41c>)
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3330      	adds	r3, #48	; 0x30
 8001a6c:	2240      	movs	r2, #64	; 0x40
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f007 fc1a 	bl	80092a8 <HAL_UART_Receive_DMA>
 8001a74:	e010      	b.n	8001a98 <iniciaBleHm10+0x410>
			return;
			break;
		case erro:
			//			sequenciaBLE = final;
			__NOP();
 8001a76:	bf00      	nop
			break;
 8001a78:	e004      	b.n	8001a84 <iniciaBleHm10+0x3fc>
		default:
			break;
 8001a7a:	bf00      	nop
 8001a7c:	e002      	b.n	8001a84 <iniciaBleHm10+0x3fc>
			break;
 8001a7e:	bf00      	nop
 8001a80:	e000      	b.n	8001a84 <iniciaBleHm10+0x3fc>
			break;
 8001a82:	bf00      	nop
	while(sequenciaBLE!=final || sequenciaBLE!=erro){
 8001a84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	f47f ae05 	bne.w	8001698 <iniciaBleHm10+0x10>
 8001a8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	f47f ae00 	bne.w	8001698 <iniciaBleHm10+0x10>
		}
	}
}
 8001a98:	3748      	adds	r7, #72	; 0x48
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000029f 	.word	0x2000029f
 8001aa4:	20000294 	.word	0x20000294
 8001aa8:	20000298 	.word	0x20000298

08001aac <BluetoothErroCRC>:

void BluetoothErroCRC(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
	unsigned char	TXCRC[3];
	TXCRC[0] = 0x01;\
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	713b      	strb	r3, [r7, #4]
	TXCRC[1] = 0xEE;\
 8001ab6:	23ee      	movs	r3, #238	; 0xee
 8001ab8:	717b      	strb	r3, [r7, #5]
	TXCRC[2] = 0xEE;\
 8001aba:	23ee      	movs	r3, #238	; 0xee
 8001abc:	71bb      	strb	r3, [r7, #6]
	Envia_bytes_UART(TXCRC,3);
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2103      	movs	r1, #3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fd76 	bl	80015b4 <Envia_bytes_UART>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <BluetoothDescon>:

void BluetoothDescon(Bluetooth* ble){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

	osDelay(30);
 8001ad8:	201e      	movs	r0, #30
 8001ada:	f008 fd2d 	bl	800a538 <osDelay>
	Envia_texto_UART("AT",50);//DESCONECTA
 8001ade:	2132      	movs	r1, #50	; 0x32
 8001ae0:	480e      	ldr	r0, [pc, #56]	; (8001b1c <BluetoothDescon+0x4c>)
 8001ae2:	f7ff fd7b 	bl	80015dc <Envia_texto_UART>

	/* Prepare DMA for next transfer */
	/* Important! DMA stream won't start if all flags are not cleared first */
	UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <BluetoothDescon+0x50>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	60da      	str	r2, [r3, #12]
	UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <BluetoothDescon+0x50>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2240      	movs	r2, #64	; 0x40
 8001afc:	605a      	str	r2, [r3, #4]
	UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <BluetoothDescon+0x50>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <BluetoothDescon+0x50>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0201 	orr.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	0800e6a8 	.word	0x0800e6a8
 8001b20:	20000298 	.word	0x20000298

08001b24 <bluetooth10ms>:

void bluetooth10ms(Bluetooth* ble){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

	/*INCREMENTO DE INATIVIDADE-------------------*/
	(ble->msIdle<240)?ble->msIdle++:0;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b32:	2bef      	cmp	r3, #239	; 0xef
 8001b34:	d807      	bhi.n	8001b46 <bluetooth10ms+0x22>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	/*MONITOR INATIVIDADE-------------------------*/
	if(ble->JanelaConexao>0){
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <bluetooth10ms+0x3e>
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_HIGH)	{
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b56:	2bc8      	cmp	r3, #200	; 0xc8
 8001b58:	d90b      	bls.n	8001b72 <bluetooth10ms+0x4e>
			BluetoothDescon(ble);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffb8 	bl	8001ad0 <BluetoothDescon>
	else{
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_LOW)	{
			BluetoothDescon(ble);
		}
	}
}
 8001b60:	e007      	b.n	8001b72 <bluetooth10ms+0x4e>
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_LOW)	{
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b68:	2bc8      	cmp	r3, #200	; 0xc8
 8001b6a:	d902      	bls.n	8001b72 <bluetooth10ms+0x4e>
			BluetoothDescon(ble);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ffaf 	bl	8001ad0 <BluetoothDescon>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <bluetooth1000ms>:

void bluetooth1000ms(Bluetooth* ble){
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
	if(ble->JanelaConexao>0)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d007      	beq.n	8001b9c <bluetooth1000ms+0x22>
		ble->JanelaConexao--;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <EepromInit>:
//variaveis globais da EEprom
#ifndef INC_EEPROM_C_
#define INC_EEPROM_C_

uint8_t EepromInit(Eeprom *eeprom, I2C_HandleTypeDef *i2c, osMessageQId *fila)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
	//Pass the used I2C handle to the struct
	eeprom->i2cHandle = i2c;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	601a      	str	r2, [r3, #0]

	//Pass the used queue to the struct
	eeprom->filaComandos = fila;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	605a      	str	r2, [r3, #4]

	//Start the component count variable from zero
	eeprom->_EepromVarCount  = 0;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

	//Return OK
	return 0;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <EepromAddVar>:
	}
}

//variaveis de eeprom que serao manipuladas
uint8_t EepromAddVar(Eeprom *eeprom, EepromVariaveis* _eepromvar, char* objectname,uint8_t __addreeprom,TypeTamData tamanho,uint32_t minimo,uint32_t padrao,uint32_t maximo, uint32_t *addrVar)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_eepromvar->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7fe fab5 	bl	8000150 <strlen>
 8001be6:	4603      	mov	r3, r0
 8001be8:	3301      	adds	r3, #1
 8001bea:	4618      	mov	r0, r3
 8001bec:	f00b ffde 	bl	800dbac <malloc>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	615a      	str	r2, [r3, #20]

	//Pass the object name to the struct
	strcpy(_eepromvar->objname, objectname);
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f00c f98c 	bl	800df1c <strcpy>

	//Pass the corresponding data from component to component struct
	_eepromvar->_addrEprom = __addreeprom;
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	801a      	strh	r2, [r3, #0]

	//definindo minimos maximos e default
	_eepromvar->minValue 		= minimo;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	60da      	str	r2, [r3, #12]
	_eepromvar->defaultValue 	= padrao;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	6a3a      	ldr	r2, [r7, #32]
 8001c16:	609a      	str	r2, [r3, #8]
	_eepromvar->maxValue 		= maximo;
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1c:	611a      	str	r2, [r3, #16]

	//passando o tamnho da variavel
	_eepromvar->_sizeType = tamanho;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	7e3a      	ldrb	r2, [r7, #24]
 8001c22:	761a      	strb	r2, [r3, #24]

	//Add the component struct to the list on the Nextion Struct
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _eepromvar;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	3202      	adds	r2, #2
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	eeprom->_EepromVarCount++;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc


	if(!addrVar)
 8001c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <EepromAddVar+0x7e>
		return 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e016      	b.n	8001c7e <EepromAddVar+0xac>
	switch (tamanho) {
 8001c50:	7e3b      	ldrb	r3, [r7, #24]
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d00e      	beq.n	8001c74 <EepromAddVar+0xa2>
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	dc10      	bgt.n	8001c7c <EepromAddVar+0xaa>
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d002      	beq.n	8001c64 <EepromAddVar+0x92>
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d004      	beq.n	8001c6c <EepromAddVar+0x9a>
 8001c62:	e00b      	b.n	8001c7c <EepromAddVar+0xaa>
	case DATA8BITS:
		_eepromvar->ptr8=(uint8_t *)addrVar;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c68:	61da      	str	r2, [r3, #28]
		break;
 8001c6a:	e007      	b.n	8001c7c <EepromAddVar+0xaa>
	case DATA16BITS:
		_eepromvar->ptr16=(uint16_t *)addrVar;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c70:	621a      	str	r2, [r3, #32]
		break;
 8001c72:	e003      	b.n	8001c7c <EepromAddVar+0xaa>
	case DATA32BITS:
		_eepromvar->ptr32=(uint32_t *)addrVar;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8001c7a:	bf00      	nop
	}
	return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <EepromSetVar>:

bool EepromSetVar(Eeprom *eeprom, EepromVariaveis *eepromvar, uint32_t valor)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	; 0x30
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef result;
	uint8_t buffer0[1];
	uint8_t buffer1[2];
	uint8_t buffer2[4];
	//envio para memoria pagina 1
	LIBERA_EEPROM
 8001c94:	2200      	movs	r2, #0
 8001c96:	2180      	movs	r1, #128	; 0x80
 8001c98:	4896      	ldr	r0, [pc, #600]	; (8001ef4 <EepromSetVar+0x26c>)
 8001c9a:	f004 fad2 	bl	8006242 <HAL_GPIO_WritePin>
 8001c9e:	2005      	movs	r0, #5
 8001ca0:	f003 f882 	bl	8004da8 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,30,HAL_MAX_DELAY);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	221e      	movs	r2, #30
 8001cae:	21a2      	movs	r1, #162	; 0xa2
 8001cb0:	f004 fd1e 	bl	80066f0 <HAL_I2C_IsDeviceReady>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	77fb      	strb	r3, [r7, #31]
	if (result==HAL_OK)
 8001cb8:	7ffb      	ldrb	r3, [r7, #31]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 810d 	bne.w	8001eda <EepromSetVar+0x252>
	{
		if(valor!=0){ //valor recebido
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d07e      	beq.n	8001dc4 <EepromSetVar+0x13c>
			switch (eepromvar->_sizeType) {
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	7e1b      	ldrb	r3, [r3, #24]
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d04f      	beq.n	8001d6e <EepromSetVar+0xe6>
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	f300 8103 	bgt.w	8001eda <EepromSetVar+0x252>
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d002      	beq.n	8001cde <EepromSetVar+0x56>
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d022      	beq.n	8001d22 <EepromSetVar+0x9a>
 8001cdc:	e0fd      	b.n	8001eda <EepromSetVar+0x252>
			case DATA8BITS:
				eepromvar->valor = (uint8_t)valor;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	605a      	str	r2, [r3, #4]
				buffer0[0] = (uint8_t)valor;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	773b      	strb	r3, [r7, #28]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	881a      	ldrh	r2, [r3, #0]
 8001cf6:	23c8      	movs	r3, #200	; 0xc8
 8001cf8:	9302      	str	r3, [sp, #8]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2310      	movs	r3, #16
 8001d06:	21a2      	movs	r1, #162	; 0xa2
 8001d08:	f004 fbf8 	bl	80064fc <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr8)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 80d7 	beq.w	8001ec4 <EepromSetVar+0x23c>
					break;
				*eepromvar->ptr8 = (uint8_t)valor;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	701a      	strb	r2, [r3, #0]

				break;
 8001d20:	e0db      	b.n	8001eda <EepromSetVar+0x252>
			case DATA16BITS:
				eepromvar->valor = (uint16_t)valor;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	605a      	str	r2, [r3, #4]
				buffer1[0] = (uint8_t)(valor >> 8);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	763b      	strb	r3, [r7, #24]
				buffer1[1] = (uint8_t)(valor & 0xFF);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	767b      	strb	r3, [r7, #25]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer1, 2, 200);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	881a      	ldrh	r2, [r3, #0]
 8001d42:	23c8      	movs	r3, #200	; 0xc8
 8001d44:	9302      	str	r3, [sp, #8]
 8001d46:	2302      	movs	r3, #2
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	f107 0318 	add.w	r3, r7, #24
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2310      	movs	r3, #16
 8001d52:	21a2      	movs	r1, #162	; 0xa2
 8001d54:	f004 fbd2 	bl	80064fc <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr16)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80b3 	beq.w	8001ec8 <EepromSetVar+0x240>
					break;
				*eepromvar->ptr16 = (uint16_t)valor;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	b292      	uxth	r2, r2
 8001d6a:	801a      	strh	r2, [r3, #0]
				break;
 8001d6c:	e0b5      	b.n	8001eda <EepromSetVar+0x252>
			case DATA32BITS:
				eepromvar->valor = (uint32_t)valor;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	605a      	str	r2, [r3, #4]
				buffer2[0] = (uint8_t)(valor >> 24);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	0e1b      	lsrs	r3, r3, #24
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	753b      	strb	r3, [r7, #20]
				buffer2[1] = (uint8_t)(valor >> 16);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	0c1b      	lsrs	r3, r3, #16
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	757b      	strb	r3, [r7, #21]
				buffer2[2] = (uint8_t)(valor >> 8);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	75bb      	strb	r3, [r7, #22]
				buffer2[3] = (uint8_t)(valor & 0xFF);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	75fb      	strb	r3, [r7, #23]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	881a      	ldrh	r2, [r3, #0]
 8001d9a:	23c8      	movs	r3, #200	; 0xc8
 8001d9c:	9302      	str	r3, [sp, #8]
 8001d9e:	2304      	movs	r3, #4
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2310      	movs	r3, #16
 8001daa:	21a2      	movs	r1, #162	; 0xa2
 8001dac:	f004 fba6 	bl	80064fc <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr32)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 8089 	beq.w	8001ecc <EepromSetVar+0x244>
					break;
				*eepromvar->ptr32 = (uint32_t)valor;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	601a      	str	r2, [r3, #0]
				break;
 8001dc2:	e08a      	b.n	8001eda <EepromSetVar+0x252>
			}
		}else{ //usar valor da var local
			switch (eepromvar->_sizeType) {
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	7e1b      	ldrb	r3, [r3, #24]
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d04b      	beq.n	8001e64 <EepromSetVar+0x1dc>
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	f300 8084 	bgt.w	8001eda <EepromSetVar+0x252>
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d002      	beq.n	8001ddc <EepromSetVar+0x154>
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d01e      	beq.n	8001e18 <EepromSetVar+0x190>
 8001dda:	e07e      	b.n	8001eda <EepromSetVar+0x252>
			case DATA8BITS:
				if(!eepromvar->ptr8)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d075      	beq.n	8001ed0 <EepromSetVar+0x248>
					break;
				eepromvar->valor = *eepromvar->ptr8;
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	605a      	str	r2, [r3, #4]
				buffer0[0] = *eepromvar->ptr8;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	773b      	strb	r3, [r7, #28]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	881a      	ldrh	r2, [r3, #0]
 8001e00:	23c8      	movs	r3, #200	; 0xc8
 8001e02:	9302      	str	r3, [sp, #8]
 8001e04:	2301      	movs	r3, #1
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2310      	movs	r3, #16
 8001e10:	21a2      	movs	r1, #162	; 0xa2
 8001e12:	f004 fb73 	bl	80064fc <HAL_I2C_Mem_Write>

				break;
 8001e16:	e060      	b.n	8001eda <EepromSetVar+0x252>
			case DATA16BITS:
				if(!eepromvar->ptr16)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d059      	beq.n	8001ed4 <EepromSetVar+0x24c>
					break;
				eepromvar->valor = *eepromvar->ptr16;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	605a      	str	r2, [r3, #4]
				buffer1[0] = (uint8_t)(*eepromvar->ptr16 >> 8);
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	763b      	strb	r3, [r7, #24]
				buffer1[1] = (uint8_t)(*eepromvar->ptr16 & 0xFF);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	767b      	strb	r3, [r7, #25]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer1, 2, 200);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	881a      	ldrh	r2, [r3, #0]
 8001e4c:	23c8      	movs	r3, #200	; 0xc8
 8001e4e:	9302      	str	r3, [sp, #8]
 8001e50:	2302      	movs	r3, #2
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	f107 0318 	add.w	r3, r7, #24
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	2310      	movs	r3, #16
 8001e5c:	21a2      	movs	r1, #162	; 0xa2
 8001e5e:	f004 fb4d 	bl	80064fc <HAL_I2C_Mem_Write>
				break;
 8001e62:	e03a      	b.n	8001eda <EepromSetVar+0x252>
			case DATA32BITS:
				if(!eepromvar->ptr32)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d035      	beq.n	8001ed8 <EepromSetVar+0x250>
					break;
				eepromvar->valor = *eepromvar->ptr32;
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	605a      	str	r2, [r3, #4]
				buffer2[0] = (uint8_t)(*eepromvar->ptr32 >> 24);
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	0e1b      	lsrs	r3, r3, #24
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	753b      	strb	r3, [r7, #20]
				buffer2[1] = (uint8_t)(*eepromvar->ptr32 >> 16);
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	757b      	strb	r3, [r7, #21]
				buffer2[2] = (uint8_t)(*eepromvar->ptr32 >> 8);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	75bb      	strb	r3, [r7, #22]
				buffer2[3] = (uint8_t)(*eepromvar->ptr32 & 0xFF);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	75fb      	strb	r3, [r7, #23]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	881a      	ldrh	r2, [r3, #0]
 8001eac:	23c8      	movs	r3, #200	; 0xc8
 8001eae:	9302      	str	r3, [sp, #8]
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2310      	movs	r3, #16
 8001ebc:	21a2      	movs	r1, #162	; 0xa2
 8001ebe:	f004 fb1d 	bl	80064fc <HAL_I2C_Mem_Write>
				break;
 8001ec2:	e00a      	b.n	8001eda <EepromSetVar+0x252>
					break;
 8001ec4:	bf00      	nop
 8001ec6:	e008      	b.n	8001eda <EepromSetVar+0x252>
					break;
 8001ec8:	bf00      	nop
 8001eca:	e006      	b.n	8001eda <EepromSetVar+0x252>
					break;
 8001ecc:	bf00      	nop
 8001ece:	e004      	b.n	8001eda <EepromSetVar+0x252>
					break;
 8001ed0:	bf00      	nop
 8001ed2:	e002      	b.n	8001eda <EepromSetVar+0x252>
					break;
 8001ed4:	bf00      	nop
 8001ed6:	e000      	b.n	8001eda <EepromSetVar+0x252>
					break;
 8001ed8:	bf00      	nop
	//			break;
	//		}
	//	}
	//
	//	return result;
	TRAVA_EEPROM
 8001eda:	2005      	movs	r0, #5
 8001edc:	f002 ff64 	bl	8004da8 <HAL_Delay>
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <EepromSetVar+0x26c>)
 8001ee6:	f004 f9ac 	bl	8006242 <HAL_GPIO_WritePin>
	return 1;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40010c00 	.word	0x40010c00

08001ef8 <RestauraPadraoTudo>:
		HAL_Delay(10);
	}
}

void RestauraPadraoTudo(Eeprom *eeprom)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	//redefine para default
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	e014      	b.n	8001f30 <RestauraPadraoTudo+0x38>
		EepromSetVar(eeprom, eeprom->_EepromVarArr[i], eeprom->_EepromVarArr[i]->defaultValue);
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3202      	adds	r2, #2
 8001f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3202      	adds	r2, #2
 8001f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff feb2 	bl	8001c88 <EepromSetVar>
		HAL_Delay(10);
 8001f24:	200a      	movs	r0, #10
 8001f26:	f002 ff3f 	bl	8004da8 <HAL_Delay>
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d3e4      	bcc.n	8001f06 <RestauraPadraoTudo+0xe>
	}
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <vApplicationGetIdleTaskMemory+0x28>)
 8001f58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2280      	movs	r2, #128	; 0x80
 8001f64:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	200002a0 	.word	0x200002a0
 8001f74:	20000340 	.word	0x20000340

08001f78 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <vApplicationGetTimerTaskMemory+0x2c>)
 8001f88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <vApplicationGetTimerTaskMemory+0x30>)
 8001f8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f96:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000540 	.word	0x20000540
 8001fa8:	200005e0 	.word	0x200005e0

08001fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fac:	b5b0      	push	{r4, r5, r7, lr}
 8001fae:	b0ba      	sub	sp, #232	; 0xe8
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fb2:	f002 fec7 	bl	8004d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fb6:	f000 f929 	bl	800220c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fba:	f000 fbe7 	bl	800278c <MX_GPIO_Init>
  MX_DMA_Init();
 8001fbe:	f000 fbb7 	bl	8002730 <MX_DMA_Init>
  MX_ADC1_Init();
 8001fc2:	f000 f97f 	bl	80022c4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001fc6:	f000 f9d9 	bl	800237c <MX_I2C1_Init>
  MX_TIM3_Init();
 8001fca:	f000 fac5 	bl	8002558 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001fce:	f000 fa4d 	bl	800246c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001fd2:	f000 fb59 	bl	8002688 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001fd6:	f000 fb81 	bl	80026dc <MX_USART3_UART_Init>
  MX_RTC_Init();
 8001fda:	f000 f9fd 	bl	80023d8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 3	);// ADC_DMA
 8001fde:	2203      	movs	r2, #3
 8001fe0:	4971      	ldr	r1, [pc, #452]	; (80021a8 <main+0x1fc>)
 8001fe2:	4872      	ldr	r0, [pc, #456]	; (80021ac <main+0x200>)
 8001fe4:	f002 ffdc 	bl	8004fa0 <HAL_ADC_Start_DMA>

	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_3);
 8001fe8:	2108      	movs	r1, #8
 8001fea:	4871      	ldr	r0, [pc, #452]	; (80021b0 <main+0x204>)
 8001fec:	f006 f952 	bl	8008294 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_4);
 8001ff0:	210c      	movs	r1, #12
 8001ff2:	486f      	ldr	r0, [pc, #444]	; (80021b0 <main+0x204>)
 8001ff4:	f006 f94e 	bl	8008294 <HAL_TIM_PWM_Start>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSemUartTx */
  osSemaphoreDef(BinSemUartTx);
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8002004:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002008:	2101      	movs	r1, #1
 800200a:	4618      	mov	r0, r3
 800200c:	f008 fbac 	bl	800a768 <osSemaphoreCreate>
 8002010:	4603      	mov	r3, r0
 8002012:	4a68      	ldr	r2, [pc, #416]	; (80021b4 <main+0x208>)
 8002014:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of timer10ms */
  osTimerDef(timer10ms, CBTimer10ms);
 8002016:	4b68      	ldr	r3, [pc, #416]	; (80021b8 <main+0x20c>)
 8002018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 8002022:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002026:	2200      	movs	r2, #0
 8002028:	2101      	movs	r1, #1
 800202a:	4618      	mov	r0, r3
 800202c:	f008 fa98 	bl	800a560 <osTimerCreate>
 8002030:	4603      	mov	r3, r0
 8002032:	4a62      	ldr	r2, [pc, #392]	; (80021bc <main+0x210>)
 8002034:	6013      	str	r3, [r2, #0]

  /* definition and creation of timer1000ms */
  osTimerDef(timer1000ms, CBTimer1000ms);
 8002036:	4b62      	ldr	r3, [pc, #392]	; (80021c0 <main+0x214>)
 8002038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002042:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002046:	2200      	movs	r2, #0
 8002048:	2101      	movs	r1, #1
 800204a:	4618      	mov	r0, r3
 800204c:	f008 fa88 	bl	800a560 <osTimerCreate>
 8002050:	4603      	mov	r3, r0
 8002052:	4a5c      	ldr	r2, [pc, #368]	; (80021c4 <main+0x218>)
 8002054:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of FilaComando */
  osMessageQDef(FilaComando, 10, uint16_t);
 8002056:	4b5c      	ldr	r3, [pc, #368]	; (80021c8 <main+0x21c>)
 8002058:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 800205c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800205e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaComandoHandle = osMessageCreate(osMessageQ(FilaComando), NULL);
 8002062:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f008 fbaf 	bl	800a7cc <osMessageCreate>
 800206e:	4603      	mov	r3, r0
 8002070:	4a56      	ldr	r2, [pc, #344]	; (80021cc <main+0x220>)
 8002072:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaTXBluetooth */
  osMessageQDef(FilaTXBluetooth, 16, uint32_t);
 8002074:	4b56      	ldr	r3, [pc, #344]	; (80021d0 <main+0x224>)
 8002076:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 800207a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800207c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaTXBluetoothHandle = osMessageCreate(osMessageQ(FilaTXBluetooth), NULL);
 8002080:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f008 fba0 	bl	800a7cc <osMessageCreate>
 800208c:	4603      	mov	r3, r0
 800208e:	4a51      	ldr	r2, [pc, #324]	; (80021d4 <main+0x228>)
 8002090:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaRXBluetooth */
  osMessageQDef(FilaRXBluetooth, 10, uint8_t);
 8002092:	4b51      	ldr	r3, [pc, #324]	; (80021d8 <main+0x22c>)
 8002094:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8002098:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800209a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaRXBluetoothHandle = osMessageCreate(osMessageQ(FilaRXBluetooth), NULL);
 800209e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f008 fb91 	bl	800a7cc <osMessageCreate>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a4b      	ldr	r2, [pc, #300]	; (80021dc <main+0x230>)
 80020ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaEeprom */
  osMessageQDef(FilaEeprom, 10, uint16_t);
 80020b0:	4b45      	ldr	r3, [pc, #276]	; (80021c8 <main+0x21c>)
 80020b2:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80020b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 80020bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f008 fb82 	bl	800a7cc <osMessageCreate>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4a45      	ldr	r2, [pc, #276]	; (80021e0 <main+0x234>)
 80020cc:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskBluetooth */
  osThreadDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 128);
 80020ce:	4b45      	ldr	r3, [pc, #276]	; (80021e4 <main+0x238>)
 80020d0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80020d4:	461d      	mov	r5, r3
 80020d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 80020e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f008 f9c6 	bl	800a47a <osThreadCreate>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4a3d      	ldr	r2, [pc, #244]	; (80021e8 <main+0x23c>)
 80020f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTemperatura */
  osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 80020f4:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <main+0x240>)
 80020f6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80020fa:	461d      	mov	r5, r3
 80020fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002100:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002104:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8002108:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f008 f9b3 	bl	800a47a <osThreadCreate>
 8002114:	4603      	mov	r3, r0
 8002116:	4a36      	ldr	r2, [pc, #216]	; (80021f0 <main+0x244>)
 8002118:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskBuzzer */
  osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 800211a:	4b36      	ldr	r3, [pc, #216]	; (80021f4 <main+0x248>)
 800211c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002120:	461d      	mov	r5, r3
 8002122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002126:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800212a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 800212e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f008 f9a0 	bl	800a47a <osThreadCreate>
 800213a:	4603      	mov	r3, r0
 800213c:	4a2e      	ldr	r2, [pc, #184]	; (80021f8 <main+0x24c>)
 800213e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTimer */
  osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8002140:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <main+0x250>)
 8002142:	f107 0420 	add.w	r4, r7, #32
 8002146:	461d      	mov	r5, r3
 8002148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800214a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800214c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002150:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8002154:	f107 0320 	add.w	r3, r7, #32
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f008 f98d 	bl	800a47a <osThreadCreate>
 8002160:	4603      	mov	r3, r0
 8002162:	4a27      	ldr	r2, [pc, #156]	; (8002200 <main+0x254>)
 8002164:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskEeprom */
  osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 8002166:	4b27      	ldr	r3, [pc, #156]	; (8002204 <main+0x258>)
 8002168:	1d3c      	adds	r4, r7, #4
 800216a:	461d      	mov	r5, r3
 800216c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800216e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002170:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002174:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskEepromHandle = osThreadCreate(osThread(TaskEeprom), NULL);
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f008 f97c 	bl	800a47a <osThreadCreate>
 8002182:	4603      	mov	r3, r0
 8002184:	4a20      	ldr	r2, [pc, #128]	; (8002208 <main+0x25c>)
 8002186:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

  osTimerStart(timer10msHandle,10);
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <main+0x210>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	210a      	movs	r1, #10
 800218e:	4618      	mov	r0, r3
 8002190:	f008 fa1a 	bl	800a5c8 <osTimerStart>
  osTimerStart(timer1000msHandle,1000);
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <main+0x218>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800219c:	4618      	mov	r0, r3
 800219e:	f008 fa13 	bl	800a5c8 <osTimerStart>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80021a2:	f008 f963 	bl	800a46c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80021a6:	e7fe      	b.n	80021a6 <main+0x1fa>
 80021a8:	20001318 	.word	0x20001318
 80021ac:	200009e0 	.word	0x200009e0
 80021b0:	20000b04 	.word	0x20000b04
 80021b4:	200011d0 	.word	0x200011d0
 80021b8:	08002b11 	.word	0x08002b11
 80021bc:	200011c8 	.word	0x200011c8
 80021c0:	08002b2d 	.word	0x08002b2d
 80021c4:	200011cc 	.word	0x200011cc
 80021c8:	0800e75c 	.word	0x0800e75c
 80021cc:	200011b8 	.word	0x200011b8
 80021d0:	0800e76c 	.word	0x0800e76c
 80021d4:	200011bc 	.word	0x200011bc
 80021d8:	0800e77c 	.word	0x0800e77c
 80021dc:	200011c0 	.word	0x200011c0
 80021e0:	200011c4 	.word	0x200011c4
 80021e4:	0800e79c 	.word	0x0800e79c
 80021e8:	20000c64 	.word	0x20000c64
 80021ec:	0800e7c8 	.word	0x0800e7c8
 80021f0:	20000c68 	.word	0x20000c68
 80021f4:	0800e7f0 	.word	0x0800e7f0
 80021f8:	20000c6c 	.word	0x20000c6c
 80021fc:	0800e818 	.word	0x0800e818
 8002200:	20000f10 	.word	0x20000f10
 8002204:	0800e840 	.word	0x0800e840
 8002208:	200011b4 	.word	0x200011b4

0800220c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b094      	sub	sp, #80	; 0x50
 8002210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002216:	2228      	movs	r2, #40	; 0x28
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f00b fdce 	bl	800ddbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800223c:	230a      	movs	r3, #10
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002240:	2301      	movs	r3, #1
 8002242:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002244:	2310      	movs	r3, #16
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002248:	2301      	movs	r3, #1
 800224a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800224c:	2302      	movs	r3, #2
 800224e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002250:	2300      	movs	r3, #0
 8002252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8002254:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002258:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800225a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800225e:	4618      	mov	r0, r3
 8002260:	f004 fdee 	bl	8006e40 <HAL_RCC_OscConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800226a:	f000 fc8d 	bl	8002b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800226e:	230f      	movs	r3, #15
 8002270:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002272:	2302      	movs	r3, #2
 8002274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800227a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800227e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2101      	movs	r1, #1
 800228a:	4618      	mov	r0, r3
 800228c:	f005 f85a 	bl	8007344 <HAL_RCC_ClockConfig>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002296:	f000 fc77 	bl	8002b88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800229a:	2303      	movs	r3, #3
 800229c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800229e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80022a4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80022a8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	4618      	mov	r0, r3
 80022ae:	f005 fa07 	bl	80076c0 <HAL_RCCEx_PeriphCLKConfig>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80022b8:	f000 fc66 	bl	8002b88 <Error_Handler>
  }
}
 80022bc:	bf00      	nop
 80022be:	3750      	adds	r7, #80	; 0x50
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <MX_ADC1_Init+0xb0>)
 80022d6:	4a28      	ldr	r2, [pc, #160]	; (8002378 <MX_ADC1_Init+0xb4>)
 80022d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <MX_ADC1_Init+0xb0>)
 80022dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022e2:	4b24      	ldr	r3, [pc, #144]	; (8002374 <MX_ADC1_Init+0xb0>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <MX_ADC1_Init+0xb0>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <MX_ADC1_Init+0xb0>)
 80022f0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80022f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022f6:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <MX_ADC1_Init+0xb0>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <MX_ADC1_Init+0xb0>)
 80022fe:	2203      	movs	r2, #3
 8002300:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002302:	481c      	ldr	r0, [pc, #112]	; (8002374 <MX_ADC1_Init+0xb0>)
 8002304:	f002 fd74 	bl	8004df0 <HAL_ADC_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800230e:	f000 fc3b 	bl	8002b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002316:	2301      	movs	r3, #1
 8002318:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800231a:	2306      	movs	r3, #6
 800231c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	4619      	mov	r1, r3
 8002322:	4814      	ldr	r0, [pc, #80]	; (8002374 <MX_ADC1_Init+0xb0>)
 8002324:	f002 ff2c 	bl	8005180 <HAL_ADC_ConfigChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800232e:	f000 fc2b 	bl	8002b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002332:	2301      	movs	r3, #1
 8002334:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002336:	2302      	movs	r3, #2
 8002338:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	4619      	mov	r1, r3
 800233e:	480d      	ldr	r0, [pc, #52]	; (8002374 <MX_ADC1_Init+0xb0>)
 8002340:	f002 ff1e 	bl	8005180 <HAL_ADC_ConfigChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800234a:	f000 fc1d 	bl	8002b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800234e:	2310      	movs	r3, #16
 8002350:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002352:	2303      	movs	r3, #3
 8002354:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4619      	mov	r1, r3
 800235a:	4806      	ldr	r0, [pc, #24]	; (8002374 <MX_ADC1_Init+0xb0>)
 800235c:	f002 ff10 	bl	8005180 <HAL_ADC_ConfigChannel>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002366:	f000 fc0f 	bl	8002b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200009e0 	.word	0x200009e0
 8002378:	40012400 	.word	0x40012400

0800237c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <MX_I2C1_Init+0x50>)
 8002382:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <MX_I2C1_Init+0x54>)
 8002384:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <MX_I2C1_Init+0x50>)
 8002388:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <MX_I2C1_Init+0x58>)
 800238a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <MX_I2C1_Init+0x50>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <MX_I2C1_Init+0x50>)
 8002394:	2200      	movs	r2, #0
 8002396:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <MX_I2C1_Init+0x50>)
 800239a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800239e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023a0:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <MX_I2C1_Init+0x50>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <MX_I2C1_Init+0x50>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023ac:	4b07      	ldr	r3, [pc, #28]	; (80023cc <MX_I2C1_Init+0x50>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <MX_I2C1_Init+0x50>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023b8:	4804      	ldr	r0, [pc, #16]	; (80023cc <MX_I2C1_Init+0x50>)
 80023ba:	f003 ff5b 	bl	8006274 <HAL_I2C_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023c4:	f000 fbe0 	bl	8002b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000a54 	.word	0x20000a54
 80023d0:	40005400 	.word	0x40005400
 80023d4:	000186a0 	.word	0x000186a0

080023d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	2100      	movs	r1, #0
 80023e2:	460a      	mov	r2, r1
 80023e4:	801a      	strh	r2, [r3, #0]
 80023e6:	460a      	mov	r2, r1
 80023e8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80023ea:	2300      	movs	r3, #0
 80023ec:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <MX_RTC_Init+0x8c>)
 80023f0:	4a1d      	ldr	r2, [pc, #116]	; (8002468 <MX_RTC_Init+0x90>)
 80023f2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <MX_RTC_Init+0x8c>)
 80023f6:	f04f 32ff 	mov.w	r2, #4294967295
 80023fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <MX_RTC_Init+0x8c>)
 80023fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002402:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002404:	4817      	ldr	r0, [pc, #92]	; (8002464 <MX_RTC_Init+0x8c>)
 8002406:	f005 fac7 	bl	8007998 <HAL_RTC_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8002410:	f000 fbba 	bl	8002b88 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002414:	2300      	movs	r3, #0
 8002416:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002418:	2300      	movs	r3, #0
 800241a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800241c:	2300      	movs	r3, #0
 800241e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	2201      	movs	r2, #1
 8002424:	4619      	mov	r1, r3
 8002426:	480f      	ldr	r0, [pc, #60]	; (8002464 <MX_RTC_Init+0x8c>)
 8002428:	f005 fb42 	bl	8007ab0 <HAL_RTC_SetTime>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002432:	f000 fba9 	bl	8002b88 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002436:	2301      	movs	r3, #1
 8002438:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800243a:	2301      	movs	r3, #1
 800243c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800243e:	2301      	movs	r3, #1
 8002440:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8002442:	2300      	movs	r3, #0
 8002444:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002446:	463b      	mov	r3, r7
 8002448:	2201      	movs	r2, #1
 800244a:	4619      	mov	r1, r3
 800244c:	4805      	ldr	r0, [pc, #20]	; (8002464 <MX_RTC_Init+0x8c>)
 800244e:	f005 fbc7 	bl	8007be0 <HAL_RTC_SetDate>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002458:	f000 fb96 	bl	8002b88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000aa8 	.word	0x20000aa8
 8002468:	40002800 	.word	0x40002800

0800246c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08e      	sub	sp, #56	; 0x38
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002480:	f107 0320 	add.w	r3, r7, #32
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
 8002498:	615a      	str	r2, [r3, #20]
 800249a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800249c:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <MX_TIM2_Init+0xe8>)
 800249e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1200-1;
 80024a4:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024a6:	f240 42af 	movw	r2, #1199	; 0x4af
 80024aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ac:	4b29      	ldr	r3, [pc, #164]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80024b2:	4b28      	ldr	r3, [pc, #160]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024b4:	2263      	movs	r2, #99	; 0x63
 80024b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024be:	4b25      	ldr	r3, [pc, #148]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024c4:	4823      	ldr	r0, [pc, #140]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024c6:	f005 fdeb 	bl	80080a0 <HAL_TIM_Base_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80024d0:	f000 fb5a 	bl	8002b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024de:	4619      	mov	r1, r3
 80024e0:	481c      	ldr	r0, [pc, #112]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024e2:	f006 f9a7 	bl	8008834 <HAL_TIM_ConfigClockSource>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80024ec:	f000 fb4c 	bl	8002b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024f0:	4818      	ldr	r0, [pc, #96]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024f2:	f005 fe77 	bl	80081e4 <HAL_TIM_PWM_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80024fc:	f000 fb44 	bl	8002b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002500:	2300      	movs	r3, #0
 8002502:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002508:	f107 0320 	add.w	r3, r7, #32
 800250c:	4619      	mov	r1, r3
 800250e:	4811      	ldr	r0, [pc, #68]	; (8002554 <MX_TIM2_Init+0xe8>)
 8002510:	f006 fd20 	bl	8008f54 <HAL_TIMEx_MasterConfigSynchronization>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800251a:	f000 fb35 	bl	8002b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251e:	2360      	movs	r3, #96	; 0x60
 8002520:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8002522:	2332      	movs	r3, #50	; 0x32
 8002524:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	220c      	movs	r2, #12
 8002532:	4619      	mov	r1, r3
 8002534:	4807      	ldr	r0, [pc, #28]	; (8002554 <MX_TIM2_Init+0xe8>)
 8002536:	f006 f8bb 	bl	80086b0 <HAL_TIM_PWM_ConfigChannel>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002540:	f000 fb22 	bl	8002b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002544:	4803      	ldr	r0, [pc, #12]	; (8002554 <MX_TIM2_Init+0xe8>)
 8002546:	f000 ff87 	bl	8003458 <HAL_TIM_MspPostInit>

}
 800254a:	bf00      	nop
 800254c:	3738      	adds	r7, #56	; 0x38
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000abc 	.word	0x20000abc

08002558 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08e      	sub	sp, #56	; 0x38
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800255e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800256c:	f107 0320 	add.w	r3, r7, #32
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
 8002584:	615a      	str	r2, [r3, #20]
 8002586:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002588:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <MX_TIM3_Init+0x128>)
 800258a:	4a3e      	ldr	r2, [pc, #248]	; (8002684 <MX_TIM3_Init+0x12c>)
 800258c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4000-1;
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <MX_TIM3_Init+0x128>)
 8002590:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002594:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002596:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <MX_TIM3_Init+0x128>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800259c:	4b38      	ldr	r3, [pc, #224]	; (8002680 <MX_TIM3_Init+0x128>)
 800259e:	2263      	movs	r2, #99	; 0x63
 80025a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a2:	4b37      	ldr	r3, [pc, #220]	; (8002680 <MX_TIM3_Init+0x128>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a8:	4b35      	ldr	r3, [pc, #212]	; (8002680 <MX_TIM3_Init+0x128>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025ae:	4834      	ldr	r0, [pc, #208]	; (8002680 <MX_TIM3_Init+0x128>)
 80025b0:	f005 fd76 	bl	80080a0 <HAL_TIM_Base_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80025ba:	f000 fae5 	bl	8002b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025c8:	4619      	mov	r1, r3
 80025ca:	482d      	ldr	r0, [pc, #180]	; (8002680 <MX_TIM3_Init+0x128>)
 80025cc:	f006 f932 	bl	8008834 <HAL_TIM_ConfigClockSource>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80025d6:	f000 fad7 	bl	8002b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025da:	4829      	ldr	r0, [pc, #164]	; (8002680 <MX_TIM3_Init+0x128>)
 80025dc:	f005 fe02 	bl	80081e4 <HAL_TIM_PWM_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80025e6:	f000 facf 	bl	8002b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025f2:	f107 0320 	add.w	r3, r7, #32
 80025f6:	4619      	mov	r1, r3
 80025f8:	4821      	ldr	r0, [pc, #132]	; (8002680 <MX_TIM3_Init+0x128>)
 80025fa:	f006 fcab 	bl	8008f54 <HAL_TIMEx_MasterConfigSynchronization>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002604:	f000 fac0 	bl	8002b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002608:	2360      	movs	r3, #96	; 0x60
 800260a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002614:	2304      	movs	r3, #4
 8002616:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	2200      	movs	r2, #0
 800261c:	4619      	mov	r1, r3
 800261e:	4818      	ldr	r0, [pc, #96]	; (8002680 <MX_TIM3_Init+0x128>)
 8002620:	f006 f846 	bl	80086b0 <HAL_TIM_PWM_ConfigChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800262a:	f000 faad 	bl	8002b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	2204      	movs	r2, #4
 8002632:	4619      	mov	r1, r3
 8002634:	4812      	ldr	r0, [pc, #72]	; (8002680 <MX_TIM3_Init+0x128>)
 8002636:	f006 f83b 	bl	80086b0 <HAL_TIM_PWM_ConfigChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002640:	f000 faa2 	bl	8002b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	2208      	movs	r2, #8
 8002648:	4619      	mov	r1, r3
 800264a:	480d      	ldr	r0, [pc, #52]	; (8002680 <MX_TIM3_Init+0x128>)
 800264c:	f006 f830 	bl	80086b0 <HAL_TIM_PWM_ConfigChannel>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002656:	f000 fa97 	bl	8002b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	220c      	movs	r2, #12
 800265e:	4619      	mov	r1, r3
 8002660:	4807      	ldr	r0, [pc, #28]	; (8002680 <MX_TIM3_Init+0x128>)
 8002662:	f006 f825 	bl	80086b0 <HAL_TIM_PWM_ConfigChannel>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800266c:	f000 fa8c 	bl	8002b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002670:	4803      	ldr	r0, [pc, #12]	; (8002680 <MX_TIM3_Init+0x128>)
 8002672:	f000 fef1 	bl	8003458 <HAL_TIM_MspPostInit>

}
 8002676:	bf00      	nop
 8002678:	3738      	adds	r7, #56	; 0x38
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000b04 	.word	0x20000b04
 8002684:	40000400 	.word	0x40000400

08002688 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 800268e:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <MX_USART1_UART_Init+0x50>)
 8002690:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 8002694:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002698:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026ae:	220c      	movs	r2, #12
 80026b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026be:	4805      	ldr	r0, [pc, #20]	; (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026c0:	f006 fcb8 	bl	8009034 <HAL_UART_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026ca:	f000 fa5d 	bl	8002b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000b4c 	.word	0x20000b4c
 80026d8:	40013800 	.word	0x40013800

080026dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <MX_USART3_UART_Init+0x4c>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <MX_USART3_UART_Init+0x50>)
 80026e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <MX_USART3_UART_Init+0x4c>)
 80026e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <MX_USART3_UART_Init+0x4c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <MX_USART3_UART_Init+0x4c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <MX_USART3_UART_Init+0x4c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <MX_USART3_UART_Init+0x4c>)
 8002702:	220c      	movs	r2, #12
 8002704:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <MX_USART3_UART_Init+0x4c>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <MX_USART3_UART_Init+0x4c>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002712:	4805      	ldr	r0, [pc, #20]	; (8002728 <MX_USART3_UART_Init+0x4c>)
 8002714:	f006 fc8e 	bl	8009034 <HAL_UART_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800271e:	f000 fa33 	bl	8002b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000b94 	.word	0x20000b94
 800272c:	40004800 	.word	0x40004800

08002730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002736:	4b14      	ldr	r3, [pc, #80]	; (8002788 <MX_DMA_Init+0x58>)
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	4a13      	ldr	r2, [pc, #76]	; (8002788 <MX_DMA_Init+0x58>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6153      	str	r3, [r2, #20]
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <MX_DMA_Init+0x58>)
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2105      	movs	r1, #5
 8002752:	200b      	movs	r0, #11
 8002754:	f002 ffe7 	bl	8005726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002758:	200b      	movs	r0, #11
 800275a:	f003 f800 	bl	800575e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2105      	movs	r1, #5
 8002762:	200d      	movs	r0, #13
 8002764:	f002 ffdf 	bl	8005726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002768:	200d      	movs	r0, #13
 800276a:	f002 fff8 	bl	800575e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2105      	movs	r1, #5
 8002772:	200f      	movs	r0, #15
 8002774:	f002 ffd7 	bl	8005726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002778:	200f      	movs	r0, #15
 800277a:	f002 fff0 	bl	800575e <HAL_NVIC_EnableIRQ>

}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000

0800278c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002792:	f107 0308 	add.w	r3, r7, #8
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a0:	4b39      	ldr	r3, [pc, #228]	; (8002888 <MX_GPIO_Init+0xfc>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4a38      	ldr	r2, [pc, #224]	; (8002888 <MX_GPIO_Init+0xfc>)
 80027a6:	f043 0304 	orr.w	r3, r3, #4
 80027aa:	6193      	str	r3, [r2, #24]
 80027ac:	4b36      	ldr	r3, [pc, #216]	; (8002888 <MX_GPIO_Init+0xfc>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b8:	4b33      	ldr	r3, [pc, #204]	; (8002888 <MX_GPIO_Init+0xfc>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	4a32      	ldr	r2, [pc, #200]	; (8002888 <MX_GPIO_Init+0xfc>)
 80027be:	f043 0308 	orr.w	r3, r3, #8
 80027c2:	6193      	str	r3, [r2, #24]
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <MX_GPIO_Init+0xfc>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 80027d0:	2201      	movs	r2, #1
 80027d2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80027d6:	482d      	ldr	r0, [pc, #180]	; (800288c <MX_GPIO_Init+0x100>)
 80027d8:	f003 fd33 	bl	8006242 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 80027dc:	2200      	movs	r2, #0
 80027de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027e2:	482b      	ldr	r0, [pc, #172]	; (8002890 <MX_GPIO_Init+0x104>)
 80027e4:	f003 fd2d 	bl	8006242 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin
 80027e8:	2200      	movs	r2, #0
 80027ea:	21f8      	movs	r1, #248	; 0xf8
 80027ec:	4827      	ldr	r0, [pc, #156]	; (800288c <MX_GPIO_Init+0x100>)
 80027ee:	f003 fd28 	bl	8006242 <HAL_GPIO_WritePin>
                          |EEPROM_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BLE_EN_Pin BLE_RESET_Pin RELE_2_Pin RELE_3_Pin
                           RELE_4_Pin RELE_5_Pin */
  GPIO_InitStruct.Pin = BLE_EN_Pin|BLE_RESET_Pin|RELE_2_Pin|RELE_3_Pin
 80027f2:	f246 0378 	movw	r3, #24696	; 0x6078
 80027f6:	60bb      	str	r3, [r7, #8]
                          |RELE_4_Pin|RELE_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f8:	2301      	movs	r3, #1
 80027fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2302      	movs	r3, #2
 8002802:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002804:	f107 0308 	add.w	r3, r7, #8
 8002808:	4619      	mov	r1, r3
 800280a:	4820      	ldr	r0, [pc, #128]	; (800288c <MX_GPIO_Init+0x100>)
 800280c:	f003 fac2 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATUS_Pin */
  GPIO_InitStruct.Pin = BLE_STATUS_Pin;
 8002810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002814:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002816:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <MX_GPIO_Init+0x108>)
 8002818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 800281e:	f107 0308 	add.w	r3, r7, #8
 8002822:	4619      	mov	r1, r3
 8002824:	4819      	ldr	r0, [pc, #100]	; (800288c <MX_GPIO_Init+0x100>)
 8002826:	f003 fab5 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTAO_BLE_Pin */
  GPIO_InitStruct.Pin = BOTAO_BLE_Pin;
 800282a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002830:	4b18      	ldr	r3, [pc, #96]	; (8002894 <MX_GPIO_Init+0x108>)
 8002832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 8002838:	f107 0308 	add.w	r3, r7, #8
 800283c:	4619      	mov	r1, r3
 800283e:	4814      	ldr	r0, [pc, #80]	; (8002890 <MX_GPIO_Init+0x104>)
 8002840:	f003 faa8 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELE_1_Pin */
  GPIO_InitStruct.Pin = RELE_1_Pin;
 8002844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002848:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284a:	2301      	movs	r3, #1
 800284c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002852:	2302      	movs	r3, #2
 8002854:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 8002856:	f107 0308 	add.w	r3, r7, #8
 800285a:	4619      	mov	r1, r3
 800285c:	480c      	ldr	r0, [pc, #48]	; (8002890 <MX_GPIO_Init+0x104>)
 800285e:	f003 fa99 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_EN_Pin */
  GPIO_InitStruct.Pin = EEPROM_EN_Pin;
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002866:	2301      	movs	r3, #1
 8002868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800286a:	2302      	movs	r3, #2
 800286c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2302      	movs	r3, #2
 8002870:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 8002872:	f107 0308 	add.w	r3, r7, #8
 8002876:	4619      	mov	r1, r3
 8002878:	4804      	ldr	r0, [pc, #16]	; (800288c <MX_GPIO_Init+0x100>)
 800287a:	f003 fa8b 	bl	8005d94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800287e:	bf00      	nop
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	40010c00 	.word	0x40010c00
 8002890:	40010800 	.word	0x40010800
 8002894:	10110000 	.word	0x10110000

08002898 <desligaForno>:

/* USER CODE BEGIN 4 */

void desligaForno(void){
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
	PrimitiveStates.RTTimerMinutos 	= 0;
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <desligaForno+0x40>)
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	PrimitiveStates.RTTimerSegundos = 0;
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <desligaForno+0x40>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	PrimitiveStates.SetPointLastro 	= 0;
 80028ac:	490a      	ldr	r1, [pc, #40]	; (80028d8 <desligaForno+0x40>)
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PrimitiveStates.SetPointTeto 	= 0;
 80028ba:	4907      	ldr	r1, [pc, #28]	; (80028d8 <desligaForno+0x40>)
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	PrimitiveStates.stateMaquina 	= inicial;
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <desligaForno+0x40>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	20001328 	.word	0x20001328
 80028dc:	00000000 	.word	0x00000000

080028e0 <leTempInterna>:

void leTempInterna(void){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
#define Avg_slope .0043
#define V25_	1.43
#define VSENSE 3.3/4096 //12bit

	tempInterna = ((V25_ - VSENSE*buffer_ADC[2])/Avg_slope)+25;
 80028e4:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <leTempInterna+0x78>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fd7b 	bl	80003e4 <__aeabi_ui2d>
 80028ee:	a314      	add	r3, pc, #80	; (adr r3, 8002940 <leTempInterna+0x60>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd fdf0 	bl	80004d8 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	a112      	add	r1, pc, #72	; (adr r1, 8002948 <leTempInterna+0x68>)
 80028fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002902:	f7fd fc31 	bl	8000168 <__aeabi_dsub>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4610      	mov	r0, r2
 800290c:	4619      	mov	r1, r3
 800290e:	a310      	add	r3, pc, #64	; (adr r3, 8002950 <leTempInterna+0x70>)
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f7fd ff0a 	bl	800072c <__aeabi_ddiv>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <leTempInterna+0x7c>)
 8002926:	f7fd fc21 	bl	800016c <__adddf3>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	f7fe f88b 	bl	8000a4c <__aeabi_d2f>
 8002936:	4603      	mov	r3, r0
 8002938:	4a09      	ldr	r2, [pc, #36]	; (8002960 <leTempInterna+0x80>)
 800293a:	6013      	str	r3, [r2, #0]
}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}
 8002940:	66666666 	.word	0x66666666
 8002944:	3f4a6666 	.word	0x3f4a6666
 8002948:	ae147ae1 	.word	0xae147ae1
 800294c:	3ff6e147 	.word	0x3ff6e147
 8002950:	75f6fd22 	.word	0x75f6fd22
 8002954:	3f719ce0 	.word	0x3f719ce0
 8002958:	20001318 	.word	0x20001318
 800295c:	40390000 	.word	0x40390000
 8002960:	200011d4 	.word	0x200011d4
 8002964:	00000000 	.word	0x00000000

08002968 <controleCooler>:

void controleCooler(void){
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
	if(PrimitiveStates.RealtimeLastro>200 || PrimitiveStates.RealtimeTeto>200){
 800296c:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <controleCooler+0x90>)
 800296e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	4b21      	ldr	r3, [pc, #132]	; (80029fc <controleCooler+0x94>)
 8002978:	f7fe f83e 	bl	80009f8 <__aeabi_dcmpgt>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10a      	bne.n	8002998 <controleCooler+0x30>
 8002982:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <controleCooler+0x90>)
 8002984:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <controleCooler+0x94>)
 800298e:	f7fe f833 	bl	80009f8 <__aeabi_dcmpgt>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <controleCooler+0x42>
		COOLER_ON
 8002998:	2201      	movs	r2, #1
 800299a:	2120      	movs	r1, #32
 800299c:	4818      	ldr	r0, [pc, #96]	; (8002a00 <controleCooler+0x98>)
 800299e:	f003 fc50 	bl	8006242 <HAL_GPIO_WritePin>
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <controleCooler+0x90>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	711a      	strb	r2, [r3, #4]
	}else 	if(PrimitiveStates.RealtimeLastro<195 && PrimitiveStates.RealtimeTeto<195){
		COOLER_OFF
	}
}
 80029a8:	e01f      	b.n	80029ea <controleCooler+0x82>
	}else 	if(PrimitiveStates.RealtimeLastro<195 && PrimitiveStates.RealtimeTeto<195){
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <controleCooler+0x90>)
 80029ac:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80029b0:	a30f      	add	r3, pc, #60	; (adr r3, 80029f0 <controleCooler+0x88>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	f7fe f801 	bl	80009bc <__aeabi_dcmplt>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d100      	bne.n	80029c2 <controleCooler+0x5a>
}
 80029c0:	e013      	b.n	80029ea <controleCooler+0x82>
	}else 	if(PrimitiveStates.RealtimeLastro<195 && PrimitiveStates.RealtimeTeto<195){
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <controleCooler+0x90>)
 80029c4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80029c8:	a309      	add	r3, pc, #36	; (adr r3, 80029f0 <controleCooler+0x88>)
 80029ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ce:	f7fd fff5 	bl	80009bc <__aeabi_dcmplt>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d100      	bne.n	80029da <controleCooler+0x72>
}
 80029d8:	e007      	b.n	80029ea <controleCooler+0x82>
		COOLER_OFF
 80029da:	2200      	movs	r2, #0
 80029dc:	2120      	movs	r1, #32
 80029de:	4808      	ldr	r0, [pc, #32]	; (8002a00 <controleCooler+0x98>)
 80029e0:	f003 fc2f 	bl	8006242 <HAL_GPIO_WritePin>
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <controleCooler+0x90>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	711a      	strb	r2, [r3, #4]
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	00000000 	.word	0x00000000
 80029f4:	40686000 	.word	0x40686000
 80029f8:	20001328 	.word	0x20001328
 80029fc:	40690000 	.word	0x40690000
 8002a00:	40010c00 	.word	0x40010c00

08002a04 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	double TempTeto, TempLastro;
	static long somatorio1,somatorio2;
	static uint16_t i = 0;


	leTempInterna();
 8002a0c:	f7ff ff68 	bl	80028e0 <leTempInterna>

	if(i<TAM){
 8002a10:	4b38      	ldr	r3, [pc, #224]	; (8002af4 <HAL_ADC_ConvCpltCallback+0xf0>)
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a18:	d216      	bcs.n	8002a48 <HAL_ADC_ConvCpltCallback+0x44>
		somatorio1+=buffer_ADC[1]; // somatorio
 8002a1a:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <HAL_ADC_ConvCpltCallback+0xf4>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a37      	ldr	r2, [pc, #220]	; (8002afc <HAL_ADC_ConvCpltCallback+0xf8>)
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b35      	ldr	r3, [pc, #212]	; (8002afc <HAL_ADC_ConvCpltCallback+0xf8>)
 8002a28:	601a      	str	r2, [r3, #0]
		somatorio2+=buffer_ADC[0]; // somatorio
 8002a2a:	4b33      	ldr	r3, [pc, #204]	; (8002af8 <HAL_ADC_ConvCpltCallback+0xf4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a34      	ldr	r2, [pc, #208]	; (8002b00 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	4413      	add	r3, r2
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002a38:	601a      	str	r2, [r3, #0]
		i++;
 8002a3a:	4b2e      	ldr	r3, [pc, #184]	; (8002af4 <HAL_ADC_ConvCpltCallback+0xf0>)
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	4b2c      	ldr	r3, [pc, #176]	; (8002af4 <HAL_ADC_ConvCpltCallback+0xf0>)
 8002a44:	801a      	strh	r2, [r3, #0]
	//	// Handles the IRQ of ADC1. EOC flag is cleared by reading data register
	//	static uint32_t temp = 0;
	//	temp = ADC1->DR;
	//	TempInterna = (temp-V25)/(AVG_SLOPE)+25;

}
 8002a46:	e050      	b.n	8002aea <HAL_ADC_ConvCpltCallback+0xe6>
		somatorio1 = somatorio1 / TAM; //calc media
 8002a48:	4b2c      	ldr	r3, [pc, #176]	; (8002afc <HAL_ADC_ConvCpltCallback+0xf8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2d      	ldr	r2, [pc, #180]	; (8002b04 <HAL_ADC_ConvCpltCallback+0x100>)
 8002a4e:	fb82 1203 	smull	r1, r2, r2, r3
 8002a52:	1152      	asrs	r2, r2, #5
 8002a54:	17db      	asrs	r3, r3, #31
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	4a28      	ldr	r2, [pc, #160]	; (8002afc <HAL_ADC_ConvCpltCallback+0xf8>)
 8002a5a:	6013      	str	r3, [r2, #0]
		somatorio2 = somatorio2 / TAM; //calc media
 8002a5c:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a28      	ldr	r2, [pc, #160]	; (8002b04 <HAL_ADC_ConvCpltCallback+0x100>)
 8002a62:	fb82 1203 	smull	r1, r2, r2, r3
 8002a66:	1152      	asrs	r2, r2, #5
 8002a68:	17db      	asrs	r3, r3, #31
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	4a24      	ldr	r2, [pc, #144]	; (8002b00 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002a6e:	6013      	str	r3, [r2, #0]
		Temp1 = somatorio1*16; //calc valor final
 8002a70:	4b22      	ldr	r3, [pc, #136]	; (8002afc <HAL_ADC_ConvCpltCallback+0xf8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe f8f2 	bl	8000c60 <__aeabi_i2f>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	61fb      	str	r3, [r7, #28]
		Temp1 = Temp1/100;
 8002a80:	4921      	ldr	r1, [pc, #132]	; (8002b08 <HAL_ADC_ConvCpltCallback+0x104>)
 8002a82:	69f8      	ldr	r0, [r7, #28]
 8002a84:	f7fe f9f4 	bl	8000e70 <__aeabi_fdiv>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	61fb      	str	r3, [r7, #28]
		somatorio1 = 0; 		//zera somatorio
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_ADC_ConvCpltCallback+0xf8>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
		Temp2 = somatorio2*16; 	//calc valor final
 8002a92:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe f8e1 	bl	8000c60 <__aeabi_i2f>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	61bb      	str	r3, [r7, #24]
		Temp2 = Temp2/100;
 8002aa2:	4919      	ldr	r1, [pc, #100]	; (8002b08 <HAL_ADC_ConvCpltCallback+0x104>)
 8002aa4:	69b8      	ldr	r0, [r7, #24]
 8002aa6:	f7fe f9e3 	bl	8000e70 <__aeabi_fdiv>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	61bb      	str	r3, [r7, #24]
		somatorio2 = 0; 		//zera somatorio
 8002aae:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
		TempLastro=(double)Temp1;
 8002ab4:	69f8      	ldr	r0, [r7, #28]
 8002ab6:	f7fd fcb7 	bl	8000428 <__aeabi_f2d>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TempTeto=(double)Temp2;
 8002ac2:	69b8      	ldr	r0, [r7, #24]
 8002ac4:	f7fd fcb0 	bl	8000428 <__aeabi_f2d>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	e9c7 2302 	strd	r2, r3, [r7, #8]
		PrimitiveStates.RealtimeTeto = TempTeto;
 8002ad0:	490e      	ldr	r1, [pc, #56]	; (8002b0c <HAL_ADC_ConvCpltCallback+0x108>)
 8002ad2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad6:	e9c1 2302 	strd	r2, r3, [r1, #8]
		PrimitiveStates.RealtimeLastro = TempLastro;
 8002ada:	490c      	ldr	r1, [pc, #48]	; (8002b0c <HAL_ADC_ConvCpltCallback+0x108>)
 8002adc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ae0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		i=0;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <HAL_ADC_ConvCpltCallback+0xf0>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	801a      	strh	r2, [r3, #0]
}
 8002aea:	bf00      	nop
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2000136a 	.word	0x2000136a
 8002af8:	20001318 	.word	0x20001318
 8002afc:	2000136c 	.word	0x2000136c
 8002b00:	20001370 	.word	0x20001370
 8002b04:	10624dd3 	.word	0x10624dd3
 8002b08:	42c80000 	.word	0x42c80000
 8002b0c:	20001328 	.word	0x20001328

08002b10 <CBTimer10ms>:
  /* USER CODE END StartEeprom */
}

/* CBTimer10ms function */
void CBTimer10ms(void const * argument)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CBTimer10ms */

	bluetooth10ms(&bluetooth);
 8002b18:	4803      	ldr	r0, [pc, #12]	; (8002b28 <CBTimer10ms+0x18>)
 8002b1a:	f7ff f803 	bl	8001b24 <bluetooth10ms>

  /* USER CODE END CBTimer10ms */
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200011d8 	.word	0x200011d8

08002b2c <CBTimer1000ms>:

/* CBTimer1000ms function */
void CBTimer1000ms(void const * argument)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CBTimer1000ms */

	bluetooth1000ms(&bluetooth);
 8002b34:	4809      	ldr	r0, [pc, #36]	; (8002b5c <CBTimer1000ms+0x30>)
 8002b36:	f7ff f820 	bl	8001b7a <bluetooth1000ms>

	taskTemperatura1sec();
 8002b3a:	f001 ffdb 	bl	8004af4 <taskTemperatura1sec>

	taskBluetooth1sec();
 8002b3e:	f000 ff57 	bl	80039f0 <taskBluetooth1sec>

	controleCooler();
 8002b42:	f7ff ff11 	bl	8002968 <controleCooler>

	//se existir erros do tipo abaixo, o forno é desligado
	if(PrimitiveStates.Erro.byte != 0){
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <CBTimer1000ms+0x34>)
 8002b48:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <CBTimer1000ms+0x28>
		desligaForno();
 8002b50:	f7ff fea2 	bl	8002898 <desligaForno>
	}
  /* USER CODE END CBTimer1000ms */
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	200011d8 	.word	0x200011d8
 8002b60:	20001328 	.word	0x20001328

08002b64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d101      	bne.n	8002b7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b76:	f002 f8fb 	bl	8004d70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40012c00 	.word	0x40012c00

08002b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b8c:	b672      	cpsid	i
}
 8002b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002b90:	e7fe      	b.n	8002b90 <Error_Handler+0x8>

08002b92 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002bc2:	f7fd ff19 	bl	80009f8 <__aeabi_dcmpgt>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d006      	beq.n	8002bda <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8002bd8:	e011      	b.n	8002bfe <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002be6:	f7fd fee9 	bl	80009bc <__aeabi_dcmplt>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d100      	bne.n	8002bf2 <PID_Init+0x60>
}
 8002bf0:	e005      	b.n	8002bfe <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	; 0x28
 8002c0c:	af06      	add	r7, sp, #24
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8002c2e:	a318      	add	r3, pc, #96	; (adr r3, 8002c90 <PID+0x88>)
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	e9cd 2300 	strd	r2, r3, [sp]
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f931 	bl	8002ea8 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2264      	movs	r2, #100	; 0x64
 8002c4a:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8002c4c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002c50:	4619      	mov	r1, r3
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fa38 	bl	80030c8 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8002c58:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002c5c:	9304      	str	r3, [sp, #16]
 8002c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c6a:	e9cd 2300 	strd	r2, r3, [sp]
 8002c6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f984 	bl	8002f80 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002c78:	f002 f88c 	bl	8004d94 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	1ad2      	subs	r2, r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	605a      	str	r2, [r3, #4]
	
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	00000000 	.word	0x00000000
 8002c94:	406fe000 	.word	0x406fe000

08002c98 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002c98:	b5b0      	push	{r4, r5, r7, lr}
 8002c9a:	b08c      	sub	sp, #48	; 0x30
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	785b      	ldrb	r3, [r3, #1]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <PID_Compute+0x14>
	{
		return _FALSE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e0db      	b.n	8002e64 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8002cac:	f002 f872 	bl	8004d94 <HAL_GetTick>
 8002cb0:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	6a3a      	ldr	r2, [r7, #32]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	f0c0 80cd 	bcc.w	8002e62 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce0:	f7fd fa42 	bl	8000168 <__aeabi_dsub>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002cf2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cf6:	f7fd fa37 	bl	8000168 <__aeabi_dsub>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002d0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d12:	f7fd fbe1 	bl	80004d8 <__aeabi_dmul>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	f7fd fa25 	bl	800016c <__adddf3>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d114      	bne.n	8002d5e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d44:	f7fd fbc8 	bl	80004d8 <__aeabi_dmul>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	4629      	mov	r1, r5
 8002d50:	f7fd fa0a 	bl	8000168 <__aeabi_dsub>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d6a:	f7fd fe45 	bl	80009f8 <__aeabi_dcmpgt>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d006      	beq.n	8002d82 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002d80:	e010      	b.n	8002da4 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d8e:	f7fd fe15 	bl	80009bc <__aeabi_dcmplt>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002db2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002db6:	f7fd fb8f 	bl	80004d8 <__aeabi_dmul>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002dc2:	e005      	b.n	8002dd0 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002de0:	f7fd fb7a 	bl	80004d8 <__aeabi_dmul>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4620      	mov	r0, r4
 8002dea:	4629      	mov	r1, r5
 8002dec:	f7fd f9bc 	bl	8000168 <__aeabi_dsub>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002df8:	f7fd f9b8 	bl	800016c <__adddf3>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002e0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e0e:	f7fd fdf3 	bl	80009f8 <__aeabi_dcmpgt>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002e1e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002e22:	e00e      	b.n	8002e42 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002e2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e2e:	f7fd fdc5 	bl	80009bc <__aeabi_dcmplt>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d004      	beq.n	8002e42 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002e3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e4a:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e54:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5c:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8002e62:	2300      	movs	r3, #0
	}
	
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3730      	adds	r7, #48	; 0x30
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bdb0      	pop	{r4, r5, r7, pc}

08002e6c <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	bf0c      	ite	eq
 8002e7e:	2301      	moveq	r3, #1
 8002e80:	2300      	movne	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d006      	beq.n	8002e9a <PID_SetMode+0x2e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	785b      	ldrb	r3, [r3, #1]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff fe7c 	bl	8002b92 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	705a      	strb	r2, [r3, #1]
	
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002eb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ebc:	f7fd fd92 	bl	80009e4 <__aeabi_dcmpge>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d158      	bne.n	8002f78 <PID_SetOutputLimits+0xd0>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8002ec6:	68f9      	ldr	r1, [r7, #12]
 8002ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ecc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8002ed0:	68f9      	ldr	r1, [r7, #12]
 8002ed2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	785b      	ldrb	r3, [r3, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d04b      	beq.n	8002f7a <PID_SetOutputLimits+0xd2>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002ef0:	f7fd fd82 	bl	80009f8 <__aeabi_dcmpgt>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002f04:	e9c1 2300 	strd	r2, r3, [r1]
 8002f08:	e012      	b.n	8002f30 <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002f18:	f7fd fd50 	bl	80009bc <__aeabi_dcmplt>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002f2c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002f3c:	f7fd fd5c 	bl	80009f8 <__aeabi_dcmpgt>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d006      	beq.n	8002f54 <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002f4c:	68f9      	ldr	r1, [r7, #12]
 8002f4e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002f52:	e012      	b.n	8002f7a <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002f60:	f7fd fd2c 	bl	80009bc <__aeabi_dcmplt>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002f70:	68f9      	ldr	r1, [r7, #12]
 8002f72:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002f76:	e000      	b.n	8002f7a <PID_SetOutputLimits+0xd2>
		return;
 8002f78:	bf00      	nop
		}
		else { }
		
	}
	
}
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	e9c7 2300 	strd	r2, r3, [r7]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f98:	f7fd fd10 	bl	80009bc <__aeabi_dcmplt>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f040 808b 	bne.w	80030ba <PID_SetTunings2+0x13a>
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002fb0:	f7fd fd04 	bl	80009bc <__aeabi_dcmplt>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d17f      	bne.n	80030ba <PID_SetTunings2+0x13a>
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fc6:	f7fd fcf9 	bl	80009bc <__aeabi_dcmplt>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d174      	bne.n	80030ba <PID_SetTunings2+0x13a>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002fd6:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002fd8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8002fec:	68f9      	ldr	r1, [r7, #12]
 8002fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ff2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002ff6:	68f9      	ldr	r1, [r7, #12]
 8002ff8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ffc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8003000:	68f9      	ldr	r1, [r7, #12]
 8003002:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003006:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd f9e8 	bl	80003e4 <__aeabi_ui2d>
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	4b2a      	ldr	r3, [pc, #168]	; (80030c4 <PID_SetTunings2+0x144>)
 800301a:	f7fd fb87 	bl	800072c <__aeabi_ddiv>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	e9c7 2304 	strd	r2, r3, [r7, #16]
	
	uPID->Kp = Kp;
 8003026:	68f9      	ldr	r1, [r7, #12]
 8003028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800302c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8003030:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003034:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003038:	f7fd fa4e 	bl	80004d8 <__aeabi_dmul>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	68f9      	ldr	r1, [r7, #12]
 8003042:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8003046:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800304a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800304e:	f7fd fb6d 	bl	800072c <__aeabi_ddiv>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	68f9      	ldr	r1, [r7, #12]
 8003058:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	78db      	ldrb	r3, [r3, #3]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d12b      	bne.n	80030bc <PID_SetTunings2+0x13c>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800306a:	f04f 0000 	mov.w	r0, #0
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	f7fd f879 	bl	8000168 <__aeabi_dsub>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	68f9      	ldr	r1, [r7, #12]
 800307c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003086:	f04f 0000 	mov.w	r0, #0
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	f7fd f86b 	bl	8000168 <__aeabi_dsub>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	68f9      	ldr	r1, [r7, #12]
 8003098:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	f7fd f85d 	bl	8000168 <__aeabi_dsub>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	68f9      	ldr	r1, [r7, #12]
 80030b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80030b8:	e000      	b.n	80030bc <PID_SetTunings2+0x13c>
		return;
 80030ba:	bf00      	nop
		
	}
	
}
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	408f4000 	.word	0x408f4000

080030c8 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	785b      	ldrb	r3, [r3, #1]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d02e      	beq.n	800313a <PID_SetControllerDirection+0x72>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	78db      	ldrb	r3, [r3, #3]
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d029      	beq.n	800313a <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80030ec:	f04f 0000 	mov.w	r0, #0
 80030f0:	f04f 0100 	mov.w	r1, #0
 80030f4:	f7fd f838 	bl	8000168 <__aeabi_dsub>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003108:	f04f 0000 	mov.w	r0, #0
 800310c:	f04f 0100 	mov.w	r1, #0
 8003110:	f7fd f82a 	bl	8000168 <__aeabi_dsub>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003124:	f04f 0000 	mov.w	r0, #0
 8003128:	f04f 0100 	mov.w	r1, #0
 800312c:	f7fd f81c 	bl	8000168 <__aeabi_dsub>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	70da      	strb	r2, [r3, #3]
	
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8003148:	b5b0      	push	{r4, r5, r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	dd2e      	ble.n	80031b6 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8003158:	6838      	ldr	r0, [r7, #0]
 800315a:	f7fd f953 	bl	8000404 <__aeabi_i2d>
 800315e:	4604      	mov	r4, r0
 8003160:	460d      	mov	r5, r1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd f93c 	bl	80003e4 <__aeabi_ui2d>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4620      	mov	r0, r4
 8003172:	4629      	mov	r1, r5
 8003174:	f7fd fada 	bl	800072c <__aeabi_ddiv>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003186:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800318a:	f7fd f9a5 	bl	80004d8 <__aeabi_dmul>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800319e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031a2:	f7fd fac3 	bl	800072c <__aeabi_ddiv>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	609a      	str	r2, [r3, #8]
		
	}
	
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080031c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80031c6:	4b18      	ldr	r3, [pc, #96]	; (8003228 <HAL_MspInit+0x68>)
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	4a17      	ldr	r2, [pc, #92]	; (8003228 <HAL_MspInit+0x68>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6193      	str	r3, [r2, #24]
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <HAL_MspInit+0x68>)
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_MspInit+0x68>)
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	4a11      	ldr	r2, [pc, #68]	; (8003228 <HAL_MspInit+0x68>)
 80031e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e8:	61d3      	str	r3, [r2, #28]
 80031ea:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_MspInit+0x68>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	607b      	str	r3, [r7, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	210f      	movs	r1, #15
 80031fa:	f06f 0001 	mvn.w	r0, #1
 80031fe:	f002 fa92 	bl	8005726 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_MspInit+0x6c>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <HAL_MspInit+0x6c>)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000
 800322c:	40010000 	.word	0x40010000

08003230 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003238:	f107 0310 	add.w	r3, r7, #16
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a28      	ldr	r2, [pc, #160]	; (80032ec <HAL_ADC_MspInit+0xbc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d149      	bne.n	80032e4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <HAL_ADC_MspInit+0xc0>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	4a26      	ldr	r2, [pc, #152]	; (80032f0 <HAL_ADC_MspInit+0xc0>)
 8003256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800325a:	6193      	str	r3, [r2, #24]
 800325c:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <HAL_ADC_MspInit+0xc0>)
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003268:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <HAL_ADC_MspInit+0xc0>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	4a20      	ldr	r2, [pc, #128]	; (80032f0 <HAL_ADC_MspInit+0xc0>)
 800326e:	f043 0304 	orr.w	r3, r3, #4
 8003272:	6193      	str	r3, [r2, #24]
 8003274:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <HAL_ADC_MspInit+0xc0>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003280:	2303      	movs	r3, #3
 8003282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003284:	2303      	movs	r3, #3
 8003286:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003288:	f107 0310 	add.w	r3, r7, #16
 800328c:	4619      	mov	r1, r3
 800328e:	4819      	ldr	r0, [pc, #100]	; (80032f4 <HAL_ADC_MspInit+0xc4>)
 8003290:	f002 fd80 	bl	8005d94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003294:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <HAL_ADC_MspInit+0xc8>)
 8003296:	4a19      	ldr	r2, [pc, #100]	; (80032fc <HAL_ADC_MspInit+0xcc>)
 8003298:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800329a:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <HAL_ADC_MspInit+0xc8>)
 800329c:	2200      	movs	r2, #0
 800329e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a0:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <HAL_ADC_MspInit+0xc8>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <HAL_ADC_MspInit+0xc8>)
 80032a8:	2280      	movs	r2, #128	; 0x80
 80032aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <HAL_ADC_MspInit+0xc8>)
 80032ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032b4:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <HAL_ADC_MspInit+0xc8>)
 80032b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <HAL_ADC_MspInit+0xc8>)
 80032be:	2220      	movs	r2, #32
 80032c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80032c2:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <HAL_ADC_MspInit+0xc8>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032c8:	480b      	ldr	r0, [pc, #44]	; (80032f8 <HAL_ADC_MspInit+0xc8>)
 80032ca:	f002 fa65 	bl	8005798 <HAL_DMA_Init>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80032d4:	f7ff fc58 	bl	8002b88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a07      	ldr	r2, [pc, #28]	; (80032f8 <HAL_ADC_MspInit+0xc8>)
 80032dc:	621a      	str	r2, [r3, #32]
 80032de:	4a06      	ldr	r2, [pc, #24]	; (80032f8 <HAL_ADC_MspInit+0xc8>)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032e4:	bf00      	nop
 80032e6:	3720      	adds	r7, #32
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40012400 	.word	0x40012400
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40010800 	.word	0x40010800
 80032f8:	20000a10 	.word	0x20000a10
 80032fc:	40020008 	.word	0x40020008

08003300 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1d      	ldr	r2, [pc, #116]	; (8003390 <HAL_I2C_MspInit+0x90>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d132      	bne.n	8003386 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003320:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <HAL_I2C_MspInit+0x94>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <HAL_I2C_MspInit+0x94>)
 8003326:	f043 0308 	orr.w	r3, r3, #8
 800332a:	6193      	str	r3, [r2, #24]
 800332c:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_I2C_MspInit+0x94>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003338:	f44f 7340 	mov.w	r3, #768	; 0x300
 800333c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800333e:	2312      	movs	r3, #18
 8003340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003342:	2303      	movs	r3, #3
 8003344:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003346:	f107 0314 	add.w	r3, r7, #20
 800334a:	4619      	mov	r1, r3
 800334c:	4812      	ldr	r0, [pc, #72]	; (8003398 <HAL_I2C_MspInit+0x98>)
 800334e:	f002 fd21 	bl	8005d94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_I2C_MspInit+0x9c>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	f043 0302 	orr.w	r3, r3, #2
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
 8003368:	4a0c      	ldr	r2, [pc, #48]	; (800339c <HAL_I2C_MspInit+0x9c>)
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_I2C_MspInit+0x94>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4a08      	ldr	r2, [pc, #32]	; (8003394 <HAL_I2C_MspInit+0x94>)
 8003374:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003378:	61d3      	str	r3, [r2, #28]
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_I2C_MspInit+0x94>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003386:	bf00      	nop
 8003388:	3728      	adds	r7, #40	; 0x28
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40005400 	.word	0x40005400
 8003394:	40021000 	.word	0x40021000
 8003398:	40010c00 	.word	0x40010c00
 800339c:	40010000 	.word	0x40010000

080033a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0b      	ldr	r2, [pc, #44]	; (80033dc <HAL_RTC_MspInit+0x3c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d110      	bne.n	80033d4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80033b2:	f003 fd39 	bl	8006e28 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <HAL_RTC_MspInit+0x40>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <HAL_RTC_MspInit+0x40>)
 80033bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033c0:	61d3      	str	r3, [r2, #28]
 80033c2:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <HAL_RTC_MspInit+0x40>)
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RTC_MspInit+0x44>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40002800 	.word	0x40002800
 80033e0:	40021000 	.word	0x40021000
 80033e4:	4242043c 	.word	0x4242043c

080033e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f8:	d10c      	bne.n	8003414 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <HAL_TIM_Base_MspInit+0x68>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	4a14      	ldr	r2, [pc, #80]	; (8003450 <HAL_TIM_Base_MspInit+0x68>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	61d3      	str	r3, [r2, #28]
 8003406:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_TIM_Base_MspInit+0x68>)
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003412:	e018      	b.n	8003446 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0e      	ldr	r2, [pc, #56]	; (8003454 <HAL_TIM_Base_MspInit+0x6c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d113      	bne.n	8003446 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800341e:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <HAL_TIM_Base_MspInit+0x68>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4a0b      	ldr	r2, [pc, #44]	; (8003450 <HAL_TIM_Base_MspInit+0x68>)
 8003424:	f043 0302 	orr.w	r3, r3, #2
 8003428:	61d3      	str	r3, [r2, #28]
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_TIM_Base_MspInit+0x68>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	2105      	movs	r1, #5
 800343a:	201d      	movs	r0, #29
 800343c:	f002 f973 	bl	8005726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003440:	201d      	movs	r0, #29
 8003442:	f002 f98c 	bl	800575e <HAL_NVIC_EnableIRQ>
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	40000400 	.word	0x40000400

08003458 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	f107 0318 	add.w	r3, r7, #24
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003476:	d118      	bne.n	80034aa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003478:	4b28      	ldr	r3, [pc, #160]	; (800351c <HAL_TIM_MspPostInit+0xc4>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	4a27      	ldr	r2, [pc, #156]	; (800351c <HAL_TIM_MspPostInit+0xc4>)
 800347e:	f043 0304 	orr.w	r3, r3, #4
 8003482:	6193      	str	r3, [r2, #24]
 8003484:	4b25      	ldr	r3, [pc, #148]	; (800351c <HAL_TIM_MspPostInit+0xc4>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003490:	2308      	movs	r3, #8
 8003492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003494:	2302      	movs	r3, #2
 8003496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003498:	2302      	movs	r3, #2
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349c:	f107 0318 	add.w	r3, r7, #24
 80034a0:	4619      	mov	r1, r3
 80034a2:	481f      	ldr	r0, [pc, #124]	; (8003520 <HAL_TIM_MspPostInit+0xc8>)
 80034a4:	f002 fc76 	bl	8005d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80034a8:	e034      	b.n	8003514 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <HAL_TIM_MspPostInit+0xcc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d12f      	bne.n	8003514 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_TIM_MspPostInit+0xc4>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	4a18      	ldr	r2, [pc, #96]	; (800351c <HAL_TIM_MspPostInit+0xc4>)
 80034ba:	f043 0304 	orr.w	r3, r3, #4
 80034be:	6193      	str	r3, [r2, #24]
 80034c0:	4b16      	ldr	r3, [pc, #88]	; (800351c <HAL_TIM_MspPostInit+0xc4>)
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034cc:	4b13      	ldr	r3, [pc, #76]	; (800351c <HAL_TIM_MspPostInit+0xc4>)
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	4a12      	ldr	r2, [pc, #72]	; (800351c <HAL_TIM_MspPostInit+0xc4>)
 80034d2:	f043 0308 	orr.w	r3, r3, #8
 80034d6:	6193      	str	r3, [r2, #24]
 80034d8:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_TIM_MspPostInit+0xc4>)
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034e4:	23c0      	movs	r3, #192	; 0xc0
 80034e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e8:	2302      	movs	r3, #2
 80034ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ec:	2302      	movs	r3, #2
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f0:	f107 0318 	add.w	r3, r7, #24
 80034f4:	4619      	mov	r1, r3
 80034f6:	480a      	ldr	r0, [pc, #40]	; (8003520 <HAL_TIM_MspPostInit+0xc8>)
 80034f8:	f002 fc4c 	bl	8005d94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034fc:	2303      	movs	r3, #3
 80034fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003500:	2302      	movs	r3, #2
 8003502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	2302      	movs	r3, #2
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003508:	f107 0318 	add.w	r3, r7, #24
 800350c:	4619      	mov	r1, r3
 800350e:	4806      	ldr	r0, [pc, #24]	; (8003528 <HAL_TIM_MspPostInit+0xd0>)
 8003510:	f002 fc40 	bl	8005d94 <HAL_GPIO_Init>
}
 8003514:	bf00      	nop
 8003516:	3728      	adds	r7, #40	; 0x28
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40021000 	.word	0x40021000
 8003520:	40010800 	.word	0x40010800
 8003524:	40000400 	.word	0x40000400
 8003528:	40010c00 	.word	0x40010c00

0800352c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	; 0x28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003534:	f107 0318 	add.w	r3, r7, #24
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a62      	ldr	r2, [pc, #392]	; (80036d0 <HAL_UART_MspInit+0x1a4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d160      	bne.n	800360e <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800354c:	4b61      	ldr	r3, [pc, #388]	; (80036d4 <HAL_UART_MspInit+0x1a8>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	4a60      	ldr	r2, [pc, #384]	; (80036d4 <HAL_UART_MspInit+0x1a8>)
 8003552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003556:	6193      	str	r3, [r2, #24]
 8003558:	4b5e      	ldr	r3, [pc, #376]	; (80036d4 <HAL_UART_MspInit+0x1a8>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003564:	4b5b      	ldr	r3, [pc, #364]	; (80036d4 <HAL_UART_MspInit+0x1a8>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	4a5a      	ldr	r2, [pc, #360]	; (80036d4 <HAL_UART_MspInit+0x1a8>)
 800356a:	f043 0304 	orr.w	r3, r3, #4
 800356e:	6193      	str	r3, [r2, #24]
 8003570:	4b58      	ldr	r3, [pc, #352]	; (80036d4 <HAL_UART_MspInit+0x1a8>)
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800357c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003582:	2302      	movs	r3, #2
 8003584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003586:	2303      	movs	r3, #3
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358a:	f107 0318 	add.w	r3, r7, #24
 800358e:	4619      	mov	r1, r3
 8003590:	4851      	ldr	r0, [pc, #324]	; (80036d8 <HAL_UART_MspInit+0x1ac>)
 8003592:	f002 fbff 	bl	8005d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800359a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a4:	f107 0318 	add.w	r3, r7, #24
 80035a8:	4619      	mov	r1, r3
 80035aa:	484b      	ldr	r0, [pc, #300]	; (80036d8 <HAL_UART_MspInit+0x1ac>)
 80035ac:	f002 fbf2 	bl	8005d94 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80035b0:	4b4a      	ldr	r3, [pc, #296]	; (80036dc <HAL_UART_MspInit+0x1b0>)
 80035b2:	4a4b      	ldr	r2, [pc, #300]	; (80036e0 <HAL_UART_MspInit+0x1b4>)
 80035b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035b6:	4b49      	ldr	r3, [pc, #292]	; (80036dc <HAL_UART_MspInit+0x1b0>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035bc:	4b47      	ldr	r3, [pc, #284]	; (80036dc <HAL_UART_MspInit+0x1b0>)
 80035be:	2200      	movs	r2, #0
 80035c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035c2:	4b46      	ldr	r3, [pc, #280]	; (80036dc <HAL_UART_MspInit+0x1b0>)
 80035c4:	2280      	movs	r2, #128	; 0x80
 80035c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035c8:	4b44      	ldr	r3, [pc, #272]	; (80036dc <HAL_UART_MspInit+0x1b0>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035ce:	4b43      	ldr	r3, [pc, #268]	; (80036dc <HAL_UART_MspInit+0x1b0>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80035d4:	4b41      	ldr	r3, [pc, #260]	; (80036dc <HAL_UART_MspInit+0x1b0>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035da:	4b40      	ldr	r3, [pc, #256]	; (80036dc <HAL_UART_MspInit+0x1b0>)
 80035dc:	2200      	movs	r2, #0
 80035de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035e0:	483e      	ldr	r0, [pc, #248]	; (80036dc <HAL_UART_MspInit+0x1b0>)
 80035e2:	f002 f8d9 	bl	8005798 <HAL_DMA_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80035ec:	f7ff facc 	bl	8002b88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a3a      	ldr	r2, [pc, #232]	; (80036dc <HAL_UART_MspInit+0x1b0>)
 80035f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80035f6:	4a39      	ldr	r2, [pc, #228]	; (80036dc <HAL_UART_MspInit+0x1b0>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80035fc:	2200      	movs	r2, #0
 80035fe:	2105      	movs	r1, #5
 8003600:	2025      	movs	r0, #37	; 0x25
 8003602:	f002 f890 	bl	8005726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003606:	2025      	movs	r0, #37	; 0x25
 8003608:	f002 f8a9 	bl	800575e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800360c:	e05c      	b.n	80036c8 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART3)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a34      	ldr	r2, [pc, #208]	; (80036e4 <HAL_UART_MspInit+0x1b8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d157      	bne.n	80036c8 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003618:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <HAL_UART_MspInit+0x1a8>)
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	4a2d      	ldr	r2, [pc, #180]	; (80036d4 <HAL_UART_MspInit+0x1a8>)
 800361e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003622:	61d3      	str	r3, [r2, #28]
 8003624:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <HAL_UART_MspInit+0x1a8>)
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003630:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <HAL_UART_MspInit+0x1a8>)
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	4a27      	ldr	r2, [pc, #156]	; (80036d4 <HAL_UART_MspInit+0x1a8>)
 8003636:	f043 0308 	orr.w	r3, r3, #8
 800363a:	6193      	str	r3, [r2, #24]
 800363c:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <HAL_UART_MspInit+0x1a8>)
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800364c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364e:	2302      	movs	r3, #2
 8003650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003652:	2303      	movs	r3, #3
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003656:	f107 0318 	add.w	r3, r7, #24
 800365a:	4619      	mov	r1, r3
 800365c:	4822      	ldr	r0, [pc, #136]	; (80036e8 <HAL_UART_MspInit+0x1bc>)
 800365e:	f002 fb99 	bl	8005d94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366c:	2300      	movs	r3, #0
 800366e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003670:	f107 0318 	add.w	r3, r7, #24
 8003674:	4619      	mov	r1, r3
 8003676:	481c      	ldr	r0, [pc, #112]	; (80036e8 <HAL_UART_MspInit+0x1bc>)
 8003678:	f002 fb8c 	bl	8005d94 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800367c:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <HAL_UART_MspInit+0x1c0>)
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_UART_MspInit+0x1c4>)
 8003680:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003682:	4b1a      	ldr	r3, [pc, #104]	; (80036ec <HAL_UART_MspInit+0x1c0>)
 8003684:	2200      	movs	r2, #0
 8003686:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003688:	4b18      	ldr	r3, [pc, #96]	; (80036ec <HAL_UART_MspInit+0x1c0>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800368e:	4b17      	ldr	r3, [pc, #92]	; (80036ec <HAL_UART_MspInit+0x1c0>)
 8003690:	2280      	movs	r2, #128	; 0x80
 8003692:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003694:	4b15      	ldr	r3, [pc, #84]	; (80036ec <HAL_UART_MspInit+0x1c0>)
 8003696:	2200      	movs	r2, #0
 8003698:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800369a:	4b14      	ldr	r3, [pc, #80]	; (80036ec <HAL_UART_MspInit+0x1c0>)
 800369c:	2200      	movs	r2, #0
 800369e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80036a0:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_UART_MspInit+0x1c0>)
 80036a2:	2220      	movs	r2, #32
 80036a4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036a6:	4b11      	ldr	r3, [pc, #68]	; (80036ec <HAL_UART_MspInit+0x1c0>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80036ac:	480f      	ldr	r0, [pc, #60]	; (80036ec <HAL_UART_MspInit+0x1c0>)
 80036ae:	f002 f873 	bl	8005798 <HAL_DMA_Init>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_UART_MspInit+0x190>
      Error_Handler();
 80036b8:	f7ff fa66 	bl	8002b88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a0b      	ldr	r2, [pc, #44]	; (80036ec <HAL_UART_MspInit+0x1c0>)
 80036c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80036c2:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <HAL_UART_MspInit+0x1c0>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80036c8:	bf00      	nop
 80036ca:	3728      	adds	r7, #40	; 0x28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40013800 	.word	0x40013800
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40010800 	.word	0x40010800
 80036dc:	20000bdc 	.word	0x20000bdc
 80036e0:	40020058 	.word	0x40020058
 80036e4:	40004800 	.word	0x40004800
 80036e8:	40010c00 	.word	0x40010c00
 80036ec:	20000c20 	.word	0x20000c20
 80036f0:	40020030 	.word	0x40020030

080036f4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a17      	ldr	r2, [pc, #92]	; (8003760 <HAL_UART_MspDeInit+0x6c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d113      	bne.n	800372e <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003706:	4b17      	ldr	r3, [pc, #92]	; (8003764 <HAL_UART_MspDeInit+0x70>)
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	4a16      	ldr	r2, [pc, #88]	; (8003764 <HAL_UART_MspDeInit+0x70>)
 800370c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003710:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003712:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003716:	4814      	ldr	r0, [pc, #80]	; (8003768 <HAL_UART_MspDeInit+0x74>)
 8003718:	f002 fcc0 	bl	800609c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	4618      	mov	r0, r3
 8003722:	f002 f893 	bl	800584c <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003726:	2025      	movs	r0, #37	; 0x25
 8003728:	f002 f827 	bl	800577a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800372c:	e014      	b.n	8003758 <HAL_UART_MspDeInit+0x64>
  else if(huart->Instance==USART3)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a0e      	ldr	r2, [pc, #56]	; (800376c <HAL_UART_MspDeInit+0x78>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d10f      	bne.n	8003758 <HAL_UART_MspDeInit+0x64>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_UART_MspDeInit+0x70>)
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	4a09      	ldr	r2, [pc, #36]	; (8003764 <HAL_UART_MspDeInit+0x70>)
 800373e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003742:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8003744:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003748:	4809      	ldr	r0, [pc, #36]	; (8003770 <HAL_UART_MspDeInit+0x7c>)
 800374a:	f002 fca7 	bl	800609c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003752:	4618      	mov	r0, r3
 8003754:	f002 f87a 	bl	800584c <HAL_DMA_DeInit>
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40013800 	.word	0x40013800
 8003764:	40021000 	.word	0x40021000
 8003768:	40010800 	.word	0x40010800
 800376c:	40004800 	.word	0x40004800
 8003770:	40010c00 	.word	0x40010c00

08003774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08c      	sub	sp, #48	; 0x30
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800378a:	4b2e      	ldr	r3, [pc, #184]	; (8003844 <HAL_InitTick+0xd0>)
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	4a2d      	ldr	r2, [pc, #180]	; (8003844 <HAL_InitTick+0xd0>)
 8003790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003794:	6193      	str	r3, [r2, #24]
 8003796:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <HAL_InitTick+0xd0>)
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037a2:	f107 020c 	add.w	r2, r7, #12
 80037a6:	f107 0310 	add.w	r3, r7, #16
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f003 ff39 	bl	8007624 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80037b2:	f003 ff23 	bl	80075fc <HAL_RCC_GetPCLK2Freq>
 80037b6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	4a23      	ldr	r2, [pc, #140]	; (8003848 <HAL_InitTick+0xd4>)
 80037bc:	fba2 2303 	umull	r2, r3, r2, r3
 80037c0:	0c9b      	lsrs	r3, r3, #18
 80037c2:	3b01      	subs	r3, #1
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80037c6:	4b21      	ldr	r3, [pc, #132]	; (800384c <HAL_InitTick+0xd8>)
 80037c8:	4a21      	ldr	r2, [pc, #132]	; (8003850 <HAL_InitTick+0xdc>)
 80037ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80037cc:	4b1f      	ldr	r3, [pc, #124]	; (800384c <HAL_InitTick+0xd8>)
 80037ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037d2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80037d4:	4a1d      	ldr	r2, [pc, #116]	; (800384c <HAL_InitTick+0xd8>)
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <HAL_InitTick+0xd8>)
 80037dc:	2200      	movs	r2, #0
 80037de:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e0:	4b1a      	ldr	r3, [pc, #104]	; (800384c <HAL_InitTick+0xd8>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037e6:	4b19      	ldr	r3, [pc, #100]	; (800384c <HAL_InitTick+0xd8>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80037ec:	4817      	ldr	r0, [pc, #92]	; (800384c <HAL_InitTick+0xd8>)
 80037ee:	f004 fc57 	bl	80080a0 <HAL_TIM_Base_Init>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80037f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d11b      	bne.n	8003838 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003800:	4812      	ldr	r0, [pc, #72]	; (800384c <HAL_InitTick+0xd8>)
 8003802:	f004 fc9d 	bl	8008140 <HAL_TIM_Base_Start_IT>
 8003806:	4603      	mov	r3, r0
 8003808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800380c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003810:	2b00      	cmp	r3, #0
 8003812:	d111      	bne.n	8003838 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003814:	2019      	movs	r0, #25
 8003816:	f001 ffa2 	bl	800575e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b0f      	cmp	r3, #15
 800381e:	d808      	bhi.n	8003832 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8003820:	2200      	movs	r2, #0
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	2019      	movs	r0, #25
 8003826:	f001 ff7e 	bl	8005726 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800382a:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <HAL_InitTick+0xe0>)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	e002      	b.n	8003838 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003838:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800383c:	4618      	mov	r0, r3
 800383e:	3730      	adds	r7, #48	; 0x30
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	431bde83 	.word	0x431bde83
 800384c:	20001374 	.word	0x20001374
 8003850:	40012c00 	.word	0x40012c00
 8003854:	20000204 	.word	0x20000204

08003858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800385c:	e7fe      	b.n	800385c <NMI_Handler+0x4>

0800385e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003862:	e7fe      	b.n	8003862 <HardFault_Handler+0x4>

08003864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003868:	e7fe      	b.n	8003868 <MemManage_Handler+0x4>

0800386a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800386e:	e7fe      	b.n	800386e <BusFault_Handler+0x4>

08003870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003874:	e7fe      	b.n	8003874 <UsageFault_Handler+0x4>

08003876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
	...

08003884 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003888:	4802      	ldr	r0, [pc, #8]	; (8003894 <DMA1_Channel1_IRQHandler+0x10>)
 800388a:	f002 f94f 	bl	8005b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000a10 	.word	0x20000a10

08003898 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800389c:	4802      	ldr	r0, [pc, #8]	; (80038a8 <DMA1_Channel3_IRQHandler+0x10>)
 800389e:	f002 f945 	bl	8005b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000c20 	.word	0x20000c20

080038ac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80038b0:	4803      	ldr	r0, [pc, #12]	; (80038c0 <DMA1_Channel5_IRQHandler+0x14>)
 80038b2:	f002 f93b 	bl	8005b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  BLEDMA_IrqHandler(&bluetooth);
 80038b6:	4803      	ldr	r0, [pc, #12]	; (80038c4 <DMA1_Channel5_IRQHandler+0x18>)
 80038b8:	f7fd fc98 	bl	80011ec <BLEDMA_IrqHandler>
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80038bc:	bf00      	nop
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000bdc 	.word	0x20000bdc
 80038c4:	200011d8 	.word	0x200011d8

080038c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038cc:	4802      	ldr	r0, [pc, #8]	; (80038d8 <TIM1_UP_IRQHandler+0x10>)
 80038ce:	f004 fde7 	bl	80084a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20001374 	.word	0x20001374

080038dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038e0:	4802      	ldr	r0, [pc, #8]	; (80038ec <TIM3_IRQHandler+0x10>)
 80038e2:	f004 fddd 	bl	80084a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000b04 	.word	0x20000b04

080038f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038f4:	4803      	ldr	r0, [pc, #12]	; (8003904 <USART1_IRQHandler+0x14>)
 80038f6:	f005 fe11 	bl	800951c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  BLEUSART_IrqHandler(&bluetooth);
 80038fa:	4803      	ldr	r0, [pc, #12]	; (8003908 <USART1_IRQHandler+0x18>)
 80038fc:	f7fd fc36 	bl	800116c <BLEUSART_IrqHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000b4c 	.word	0x20000b4c
 8003908:	200011d8 	.word	0x200011d8

0800390c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003914:	4a14      	ldr	r2, [pc, #80]	; (8003968 <_sbrk+0x5c>)
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <_sbrk+0x60>)
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <_sbrk+0x64>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <_sbrk+0x64>)
 800392a:	4a12      	ldr	r2, [pc, #72]	; (8003974 <_sbrk+0x68>)
 800392c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <_sbrk+0x64>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	429a      	cmp	r2, r3
 800393a:	d207      	bcs.n	800394c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800393c:	f00a fac2 	bl	800dec4 <__errno>
 8003940:	4603      	mov	r3, r0
 8003942:	220c      	movs	r2, #12
 8003944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
 800394a:	e009      	b.n	8003960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <_sbrk+0x64>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <_sbrk+0x64>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	4a05      	ldr	r2, [pc, #20]	; (8003970 <_sbrk+0x64>)
 800395c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800395e:	68fb      	ldr	r3, [r7, #12]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20005000 	.word	0x20005000
 800396c:	00000400 	.word	0x00000400
 8003970:	200013bc 	.word	0x200013bc
 8003974:	20002f18 	.word	0x20002f18

08003978 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800397c:	bf00      	nop
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr

08003984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003984:	f7ff fff8 	bl	8003978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003988:	480b      	ldr	r0, [pc, #44]	; (80039b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800398a:	490c      	ldr	r1, [pc, #48]	; (80039bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800398c:	4a0c      	ldr	r2, [pc, #48]	; (80039c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800398e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003990:	e002      	b.n	8003998 <LoopCopyDataInit>

08003992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003996:	3304      	adds	r3, #4

08003998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800399a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800399c:	d3f9      	bcc.n	8003992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80039a0:	4c09      	ldr	r4, [pc, #36]	; (80039c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039a4:	e001      	b.n	80039aa <LoopFillZerobss>

080039a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039a8:	3204      	adds	r2, #4

080039aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039ac:	d3fb      	bcc.n	80039a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039ae:	f00a fa8f 	bl	800ded0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039b2:	f7fe fafb 	bl	8001fac <main>
  bx lr
 80039b6:	4770      	bx	lr
  ldr r0, =_sdata
 80039b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039bc:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 80039c0:	0800ea9c 	.word	0x0800ea9c
  ldr r2, =_sbss
 80039c4:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 80039c8:	20002f18 	.word	0x20002f18

080039cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039cc:	e7fe      	b.n	80039cc <ADC1_2_IRQHandler>

080039ce <StartBluetooth>:
BleComando BLEAtualizaDataHora,BLEAlteraLimiteTemp,BLERestaura,BLESPTeto,BLESPLastro,BLESPtempo,BLEToggleTempo,BLEReceita,BLESPTempo,BLELightOn,BLELightOff;
BleComando BLEPedeSenha,BLERecebeuSenha,BLESetaLampada,BLECancelaProcesso;


void StartBluetooth(void const * argument)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
	initBluetooth();
 80039d6:	f000 f81f 	bl	8003a18 <initBluetooth>

	for(;;)
	{
		rxBluetooth();
 80039da:	f000 fa6b 	bl	8003eb4 <rxBluetooth>

		txBluetooth();
 80039de:	f000 f8f7 	bl	8003bd0 <txBluetooth>

		osThreadYield();
 80039e2:	f006 fd97 	bl	800a514 <osThreadYield>
		osDelay(50);
 80039e6:	2032      	movs	r0, #50	; 0x32
 80039e8:	f006 fda6 	bl	800a538 <osDelay>
		rxBluetooth();
 80039ec:	e7f5      	b.n	80039da <StartBluetooth+0xc>
	...

080039f0 <taskBluetooth1sec>:
}

static uint16_t tempoSemAtividade;
#define MACRO_ANULA_INATIVIDADE tempoSemAtividade = 0;

void taskBluetooth1sec(void){
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <taskBluetooth1sec+0x24>)
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80039fc:	d302      	bcc.n	8003a04 <taskBluetooth1sec+0x14>
		desligaForno();
 80039fe:	f7fe ff4b 	bl	8002898 <desligaForno>
	}else
		tempoSemAtividade++;
}
 8003a02:	e005      	b.n	8003a10 <taskBluetooth1sec+0x20>
		tempoSemAtividade++;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <taskBluetooth1sec+0x24>)
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	4b01      	ldr	r3, [pc, #4]	; (8003a14 <taskBluetooth1sec+0x24>)
 8003a0e:	801a      	strh	r2, [r3, #0]
}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20001440 	.word	0x20001440

08003a18 <initBluetooth>:

void initBluetooth(void){
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af02      	add	r7, sp, #8
	//inicializacao do bluetooth
	BluetoothInit(&bluetooth, &huart1, &hdma_usart1_rx, &FilaRXBluetoothHandle,FilaTXBluetoothHandle);
 8003a1e:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <initBluetooth+0x124>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	4b46      	ldr	r3, [pc, #280]	; (8003b40 <initBluetooth+0x128>)
 8003a26:	4a47      	ldr	r2, [pc, #284]	; (8003b44 <initBluetooth+0x12c>)
 8003a28:	4947      	ldr	r1, [pc, #284]	; (8003b48 <initBluetooth+0x130>)
 8003a2a:	4848      	ldr	r0, [pc, #288]	; (8003b4c <initBluetooth+0x134>)
 8003a2c:	f7fd fabc 	bl	8000fa8 <BluetoothInit>

	//inicializacao do hardware
	iniciaBleHm10(&bluetooth);
 8003a30:	4846      	ldr	r0, [pc, #280]	; (8003b4c <initBluetooth+0x134>)
 8003a32:	f7fd fe29 	bl	8001688 <iniciaBleHm10>

	//possiveis comandos a serem recebidos pelo bluetooth
	BluetoothAddComp(&bluetooth, &BLEAtualizaRealtime, 	"RX_SOLICITA_REALTIME", 	RX_SOLICITA_REALTIME, 		ComandoBasico);
 8003a36:	2301      	movs	r3, #1
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	2315      	movs	r3, #21
 8003a3c:	4a44      	ldr	r2, [pc, #272]	; (8003b50 <initBluetooth+0x138>)
 8003a3e:	4945      	ldr	r1, [pc, #276]	; (8003b54 <initBluetooth+0x13c>)
 8003a40:	4842      	ldr	r0, [pc, #264]	; (8003b4c <initBluetooth+0x134>)
 8003a42:	f7fd fadf 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESolicitaSincronia,	"RX_SOLICITA_SINCRONIA", 	RX_SOLICITA_SINCRONIA, 		ComandoBasico);
 8003a46:	2301      	movs	r3, #1
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	2317      	movs	r3, #23
 8003a4c:	4a42      	ldr	r2, [pc, #264]	; (8003b58 <initBluetooth+0x140>)
 8003a4e:	4943      	ldr	r1, [pc, #268]	; (8003b5c <initBluetooth+0x144>)
 8003a50:	483e      	ldr	r0, [pc, #248]	; (8003b4c <initBluetooth+0x134>)
 8003a52:	f7fd fad7 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAlteraLimiteTemp, 	"RX_ALTERA_VALOR_LIMITE", 	RX_LIMITE_TEMPERATURA,		ComandoBasico);
 8003a56:	2301      	movs	r3, #1
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	2326      	movs	r3, #38	; 0x26
 8003a5c:	4a40      	ldr	r2, [pc, #256]	; (8003b60 <initBluetooth+0x148>)
 8003a5e:	4941      	ldr	r1, [pc, #260]	; (8003b64 <initBluetooth+0x14c>)
 8003a60:	483a      	ldr	r0, [pc, #232]	; (8003b4c <initBluetooth+0x134>)
 8003a62:	f7fd facf 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAtualizaDataHora, 	"RX_ATUALIZA_HORA", 		RX_ATUALIZA_HORA,			ComandoBasico);
 8003a66:	2301      	movs	r3, #1
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	4a3e      	ldr	r2, [pc, #248]	; (8003b68 <initBluetooth+0x150>)
 8003a6e:	493f      	ldr	r1, [pc, #252]	; (8003b6c <initBluetooth+0x154>)
 8003a70:	4836      	ldr	r0, [pc, #216]	; (8003b4c <initBluetooth+0x134>)
 8003a72:	f7fd fac7 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERestaura, 			"RX_RESTAURA", 				RX_RESTAURA,				ComandoBasico);
 8003a76:	2301      	movs	r3, #1
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2310      	movs	r3, #16
 8003a7c:	4a3c      	ldr	r2, [pc, #240]	; (8003b70 <initBluetooth+0x158>)
 8003a7e:	493d      	ldr	r1, [pc, #244]	; (8003b74 <initBluetooth+0x15c>)
 8003a80:	4832      	ldr	r0, [pc, #200]	; (8003b4c <initBluetooth+0x134>)
 8003a82:	f7fd fabf 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEPedeSenha,   		"RX_PEDE_SENHA",  			RX_PEDE_SENHA,   			ComandoBasico);
 8003a86:	2301      	movs	r3, #1
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	2342      	movs	r3, #66	; 0x42
 8003a8c:	4a3a      	ldr	r2, [pc, #232]	; (8003b78 <initBluetooth+0x160>)
 8003a8e:	493b      	ldr	r1, [pc, #236]	; (8003b7c <initBluetooth+0x164>)
 8003a90:	482e      	ldr	r0, [pc, #184]	; (8003b4c <initBluetooth+0x134>)
 8003a92:	f7fd fab7 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERecebeuSenha,     	"RX_RECEBEU_SENHA",        	RX_RECEBEU_SENHA,          	ComandoBasico);
 8003a96:	2301      	movs	r3, #1
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	2340      	movs	r3, #64	; 0x40
 8003a9c:	4a38      	ldr	r2, [pc, #224]	; (8003b80 <initBluetooth+0x168>)
 8003a9e:	4939      	ldr	r1, [pc, #228]	; (8003b84 <initBluetooth+0x16c>)
 8003aa0:	482a      	ldr	r0, [pc, #168]	; (8003b4c <initBluetooth+0x134>)
 8003aa2:	f7fd faaf 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTeto,     		"RX_SP_TEMP_TETO",        	RX_SP_TEMP_TETO,          	ComandoBasico);
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	2321      	movs	r3, #33	; 0x21
 8003aac:	4a36      	ldr	r2, [pc, #216]	; (8003b88 <initBluetooth+0x170>)
 8003aae:	4937      	ldr	r1, [pc, #220]	; (8003b8c <initBluetooth+0x174>)
 8003ab0:	4826      	ldr	r0, [pc, #152]	; (8003b4c <initBluetooth+0x134>)
 8003ab2:	f7fd faa7 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPLastro,     		"RX_SP_TEMP_LASTRO",       	RX_SP_TEMP_LASTRO,          ComandoBasico);
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2322      	movs	r3, #34	; 0x22
 8003abc:	4a34      	ldr	r2, [pc, #208]	; (8003b90 <initBluetooth+0x178>)
 8003abe:	4935      	ldr	r1, [pc, #212]	; (8003b94 <initBluetooth+0x17c>)
 8003ac0:	4822      	ldr	r0, [pc, #136]	; (8003b4c <initBluetooth+0x134>)
 8003ac2:	f7fd fa9f 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTempo,     		"RX_SP_TEMPO",       		RX_SP_TEMPO,        		ComandoBasico);
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	2323      	movs	r3, #35	; 0x23
 8003acc:	4a32      	ldr	r2, [pc, #200]	; (8003b98 <initBluetooth+0x180>)
 8003ace:	4933      	ldr	r1, [pc, #204]	; (8003b9c <initBluetooth+0x184>)
 8003ad0:	481e      	ldr	r0, [pc, #120]	; (8003b4c <initBluetooth+0x134>)
 8003ad2:	f7fd fa97 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEToggleTempo,     	"RX_TOGGLE_TEMPO",       	RX_TOGGLE_TEMPO,        	ComandoBasico);
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	2324      	movs	r3, #36	; 0x24
 8003adc:	4a30      	ldr	r2, [pc, #192]	; (8003ba0 <initBluetooth+0x188>)
 8003ade:	4931      	ldr	r1, [pc, #196]	; (8003ba4 <initBluetooth+0x18c>)
 8003ae0:	481a      	ldr	r0, [pc, #104]	; (8003b4c <initBluetooth+0x134>)
 8003ae2:	f7fd fa8f 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEReceita,     		"RX_RECEITA",     		  	RX_RECEITA,        			ComandoBasico);
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	2325      	movs	r3, #37	; 0x25
 8003aec:	4a2e      	ldr	r2, [pc, #184]	; (8003ba8 <initBluetooth+0x190>)
 8003aee:	492f      	ldr	r1, [pc, #188]	; (8003bac <initBluetooth+0x194>)
 8003af0:	4816      	ldr	r0, [pc, #88]	; (8003b4c <initBluetooth+0x134>)
 8003af2:	f7fd fa87 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOn,     		"RX_LIGA_LAMADA",     	  	RX_LIGA_LAMPADA,     		ComandoBasico);
 8003af6:	2301      	movs	r3, #1
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	2327      	movs	r3, #39	; 0x27
 8003afc:	4a2c      	ldr	r2, [pc, #176]	; (8003bb0 <initBluetooth+0x198>)
 8003afe:	492d      	ldr	r1, [pc, #180]	; (8003bb4 <initBluetooth+0x19c>)
 8003b00:	4812      	ldr	r0, [pc, #72]	; (8003b4c <initBluetooth+0x134>)
 8003b02:	f7fd fa7f 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOff,     		"RX_DESLIGA_LAMPADA",    	RX_DESLIGA_LAMPADA,  		ComandoBasico);
 8003b06:	2301      	movs	r3, #1
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2328      	movs	r3, #40	; 0x28
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <initBluetooth+0x1a0>)
 8003b0e:	492b      	ldr	r1, [pc, #172]	; (8003bbc <initBluetooth+0x1a4>)
 8003b10:	480e      	ldr	r0, [pc, #56]	; (8003b4c <initBluetooth+0x134>)
 8003b12:	f7fd fa77 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESetaLampada,     	"RX_LIMITE_LAMPADA",    	RX_LIMITE_LAMPADA,  		ComandoBasico);
 8003b16:	2301      	movs	r3, #1
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	2330      	movs	r3, #48	; 0x30
 8003b1c:	4a28      	ldr	r2, [pc, #160]	; (8003bc0 <initBluetooth+0x1a8>)
 8003b1e:	4929      	ldr	r1, [pc, #164]	; (8003bc4 <initBluetooth+0x1ac>)
 8003b20:	480a      	ldr	r0, [pc, #40]	; (8003b4c <initBluetooth+0x134>)
 8003b22:	f7fd fa6f 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLECancelaProcesso,  	"RX_CANCELA_PROCESSO",    	RX_CANCELA_PROCESSO,  		ComandoBasico);
 8003b26:	2301      	movs	r3, #1
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2329      	movs	r3, #41	; 0x29
 8003b2c:	4a26      	ldr	r2, [pc, #152]	; (8003bc8 <initBluetooth+0x1b0>)
 8003b2e:	4927      	ldr	r1, [pc, #156]	; (8003bcc <initBluetooth+0x1b4>)
 8003b30:	4806      	ldr	r0, [pc, #24]	; (8003b4c <initBluetooth+0x134>)
 8003b32:	f7fd fa67 	bl	8001004 <BluetoothAddComp>
}
 8003b36:	bf00      	nop
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200011bc 	.word	0x200011bc
 8003b40:	200011c0 	.word	0x200011c0
 8003b44:	20000bdc 	.word	0x20000bdc
 8003b48:	20000b4c 	.word	0x20000b4c
 8003b4c:	200011d8 	.word	0x200011d8
 8003b50:	0800e85c 	.word	0x0800e85c
 8003b54:	200013c0 	.word	0x200013c0
 8003b58:	0800e874 	.word	0x0800e874
 8003b5c:	200013c8 	.word	0x200013c8
 8003b60:	0800e88c 	.word	0x0800e88c
 8003b64:	200013d8 	.word	0x200013d8
 8003b68:	0800e8a4 	.word	0x0800e8a4
 8003b6c:	200013d0 	.word	0x200013d0
 8003b70:	0800e8b8 	.word	0x0800e8b8
 8003b74:	200013e0 	.word	0x200013e0
 8003b78:	0800e8c4 	.word	0x0800e8c4
 8003b7c:	20001420 	.word	0x20001420
 8003b80:	0800e8d4 	.word	0x0800e8d4
 8003b84:	20001428 	.word	0x20001428
 8003b88:	0800e8e8 	.word	0x0800e8e8
 8003b8c:	200013e8 	.word	0x200013e8
 8003b90:	0800e8f8 	.word	0x0800e8f8
 8003b94:	200013f0 	.word	0x200013f0
 8003b98:	0800e90c 	.word	0x0800e90c
 8003b9c:	20001408 	.word	0x20001408
 8003ba0:	0800e918 	.word	0x0800e918
 8003ba4:	200013f8 	.word	0x200013f8
 8003ba8:	0800e928 	.word	0x0800e928
 8003bac:	20001400 	.word	0x20001400
 8003bb0:	0800e934 	.word	0x0800e934
 8003bb4:	20001410 	.word	0x20001410
 8003bb8:	0800e944 	.word	0x0800e944
 8003bbc:	20001418 	.word	0x20001418
 8003bc0:	0800e958 	.word	0x0800e958
 8003bc4:	20001430 	.word	0x20001430
 8003bc8:	0800e96c 	.word	0x0800e96c
 8003bcc:	20001438 	.word	0x20001438

08003bd0 <txBluetooth>:

void txBluetooth(void){
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08c      	sub	sp, #48	; 0x30
 8003bd4:	af00      	add	r7, sp, #0
	unsigned char	Buffer		[BLUETOOTH_MAX_BUFF_LEN];
	osEvent  evttx;
	evttx = osMessageGet(FilaTXBluetoothHandle, 0);
 8003bd6:	4bac      	ldr	r3, [pc, #688]	; (8003e88 <txBluetooth+0x2b8>)
 8003bd8:	6819      	ldr	r1, [r3, #0]
 8003bda:	1d3b      	adds	r3, r7, #4
 8003bdc:	2200      	movs	r2, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f006 fe5c 	bl	800a89c <osMessageGet>
	if (evttx.status == osEventMessage) {
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b10      	cmp	r3, #16
 8003be8:	f040 814a 	bne.w	8003e80 <txBluetooth+0x2b0>
		switch ((unsigned int)evttx.value.p) {
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b8e      	cmp	r3, #142	; 0x8e
 8003bf0:	f200 8146 	bhi.w	8003e80 <txBluetooth+0x2b0>
 8003bf4:	2b8b      	cmp	r3, #139	; 0x8b
 8003bf6:	d20b      	bcs.n	8003c10 <txBluetooth+0x40>
 8003bf8:	2b18      	cmp	r3, #24
 8003bfa:	f000 80c2 	beq.w	8003d82 <txBluetooth+0x1b2>
 8003bfe:	2b18      	cmp	r3, #24
 8003c00:	f200 813e 	bhi.w	8003e80 <txBluetooth+0x2b0>
 8003c04:	2b16      	cmp	r3, #22
 8003c06:	d013      	beq.n	8003c30 <txBluetooth+0x60>
 8003c08:	2b17      	cmp	r3, #23
 8003c0a:	f000 808e 	beq.w	8003d2a <txBluetooth+0x15a>
			HAL_Delay(30);
			Envia_texto_UART("AT",50);//DESCONECTA
			break;
		}
	}
}
 8003c0e:	e137      	b.n	8003e80 <txBluetooth+0x2b0>
		switch ((unsigned int)evttx.value.p) {
 8003c10:	3b8b      	subs	r3, #139	; 0x8b
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	f200 8134 	bhi.w	8003e80 <txBluetooth+0x2b0>
 8003c18:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <txBluetooth+0x50>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003dd5 	.word	0x08003dd5
 8003c24:	08003e0b 	.word	0x08003e0b
 8003c28:	08003e37 	.word	0x08003e37
 8003c2c:	08003e55 	.word	0x08003e55
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003c30:	2301      	movs	r3, #1
 8003c32:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x16;									// FUNÇÃO -
 8003c34:	2316      	movs	r3, #22
 8003c36:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= PrimitiveStates.Erro.byte;							// Conjunto de erros
 8003c38:	4b94      	ldr	r3, [pc, #592]	; (8003e8c <txBluetooth+0x2bc>)
 8003c3a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003c3e:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= PrimitiveStates.stateMaquina;			// State da maquina
 8003c40:	4b92      	ldr	r3, [pc, #584]	; (8003e8c <txBluetooth+0x2bc>)
 8003c42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c46:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= (uint16_t)PrimitiveStates.RealtimeTeto 	>>8;
 8003c48:	4b90      	ldr	r3, [pc, #576]	; (8003e8c <txBluetooth+0x2bc>)
 8003c4a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	f7fc fedb 	bl	8000a0c <__aeabi_d2uiz>
 8003c56:	4603      	mov	r3, r0
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= (uint16_t)PrimitiveStates.RealtimeTeto 	& 0x00FF;
 8003c62:	4b8a      	ldr	r3, [pc, #552]	; (8003e8c <txBluetooth+0x2bc>)
 8003c64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	f7fc fece 	bl	8000a0c <__aeabi_d2uiz>
 8003c70:	4603      	mov	r3, r0
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	757b      	strb	r3, [r7, #21]
			Buffer[6] 	= (uint16_t)PrimitiveStates.SetPointTeto 	>>8;
 8003c78:	4b84      	ldr	r3, [pc, #528]	; (8003e8c <txBluetooth+0x2bc>)
 8003c7a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	f7fc fec3 	bl	8000a0c <__aeabi_d2uiz>
 8003c86:	4603      	mov	r3, r0
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	75bb      	strb	r3, [r7, #22]
			Buffer[7] 	= (uint16_t)PrimitiveStates.SetPointTeto 	& 0x00FF;
 8003c92:	4b7e      	ldr	r3, [pc, #504]	; (8003e8c <txBluetooth+0x2bc>)
 8003c94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f7fc feb6 	bl	8000a0c <__aeabi_d2uiz>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	75fb      	strb	r3, [r7, #23]
			Buffer[8] 	= (uint16_t)PrimitiveStates.RealtimeLastro 	>>8;
 8003ca8:	4b78      	ldr	r3, [pc, #480]	; (8003e8c <txBluetooth+0x2bc>)
 8003caa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	f7fc feab 	bl	8000a0c <__aeabi_d2uiz>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	0a1b      	lsrs	r3, r3, #8
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	763b      	strb	r3, [r7, #24]
			Buffer[9] 	= (uint16_t)PrimitiveStates.RealtimeLastro 	& 0x00FF;
 8003cc2:	4b72      	ldr	r3, [pc, #456]	; (8003e8c <txBluetooth+0x2bc>)
 8003cc4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f7fc fe9e 	bl	8000a0c <__aeabi_d2uiz>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	767b      	strb	r3, [r7, #25]
			Buffer[10] 	= (uint16_t)PrimitiveStates.SetPointLastro 	>>8;
 8003cd8:	4b6c      	ldr	r3, [pc, #432]	; (8003e8c <txBluetooth+0x2bc>)
 8003cda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f7fc fe93 	bl	8000a0c <__aeabi_d2uiz>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	0a1b      	lsrs	r3, r3, #8
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	76bb      	strb	r3, [r7, #26]
			Buffer[11] 	= (uint16_t)PrimitiveStates.SetPointLastro 	& 0x00FF;
 8003cf2:	4b66      	ldr	r3, [pc, #408]	; (8003e8c <txBluetooth+0x2bc>)
 8003cf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	f7fc fe86 	bl	8000a0c <__aeabi_d2uiz>
 8003d00:	4603      	mov	r3, r0
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	76fb      	strb	r3, [r7, #27]
			BluetoothEnviaComando(Buffer, 11);
 8003d08:	f107 0310 	add.w	r3, r7, #16
 8003d0c:	210b      	movs	r1, #11
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fd fbe8 	bl	80014e4 <BluetoothEnviaComando>
			osDelay(10);
 8003d14:	200a      	movs	r0, #10
 8003d16:	f006 fc0f 	bl	800a538 <osDelay>
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA2, 0);
 8003d1a:	4b5b      	ldr	r3, [pc, #364]	; (8003e88 <txBluetooth+0x2b8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2117      	movs	r1, #23
 8003d22:	4618      	mov	r0, r3
 8003d24:	f006 fd7a 	bl	800a81c <osMessagePut>
			break;
 8003d28:	e0aa      	b.n	8003e80 <txBluetooth+0x2b0>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x17;									// FUNÇÃO -
 8003d2e:	2317      	movs	r3, #23
 8003d30:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= PrimitiveStates.RTTimerMinutos;
 8003d32:	4b56      	ldr	r3, [pc, #344]	; (8003e8c <txBluetooth+0x2bc>)
 8003d34:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003d38:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= PrimitiveStates.RTTimerSegundos;
 8003d3a:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <txBluetooth+0x2bc>)
 8003d3c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d40:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= PrimitiveStates.SPTimerMinutos;
 8003d42:	4b52      	ldr	r3, [pc, #328]	; (8003e8c <txBluetooth+0x2bc>)
 8003d44:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d48:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= PrimitiveStates.SPTimerSegundos;
 8003d4a:	4b50      	ldr	r3, [pc, #320]	; (8003e8c <txBluetooth+0x2bc>)
 8003d4c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003d50:	757b      	strb	r3, [r7, #21]
			Buffer[6] 	= (uint8_t)horimetroHoras.valor >> 8;
 8003d52:	4b4f      	ldr	r3, [pc, #316]	; (8003e90 <txBluetooth+0x2c0>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	121b      	asrs	r3, r3, #8
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	75bb      	strb	r3, [r7, #22]
			Buffer[7] 	= (uint8_t)horimetroHoras.valor & 0x00FF;
 8003d5e:	4b4c      	ldr	r3, [pc, #304]	; (8003e90 <txBluetooth+0x2c0>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	75fb      	strb	r3, [r7, #23]
			Buffer[8] 	= (uint8_t)horimetroMinutos.valor;
 8003d66:	4b4b      	ldr	r3, [pc, #300]	; (8003e94 <txBluetooth+0x2c4>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	763b      	strb	r3, [r7, #24]
			Buffer[9]	= PrimitiveStates.Lampada;
 8003d6e:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <txBluetooth+0x2bc>)
 8003d70:	78db      	ldrb	r3, [r3, #3]
 8003d72:	767b      	strb	r3, [r7, #25]
			BluetoothEnviaComando(Buffer, 9);
 8003d74:	f107 0310 	add.w	r3, r7, #16
 8003d78:	2109      	movs	r1, #9
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fd fbb2 	bl	80014e4 <BluetoothEnviaComando>
			break;
 8003d80:	e07e      	b.n	8003e80 <txBluetooth+0x2b0>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003d82:	2301      	movs	r3, #1
 8003d84:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x18;									// FUNÇÃO -
 8003d86:	2318      	movs	r3, #24
 8003d88:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x01;									// Modelo
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= (uint8_t)tempoDelayLuz.valor;
 8003d8e:	4b42      	ldr	r3, [pc, #264]	; (8003e98 <txBluetooth+0x2c8>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= (uint8_t)LimiteTemperatura.valor	>> 8 ;
 8003d96:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <txBluetooth+0x2cc>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	121b      	asrs	r3, r3, #8
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= (uint8_t)LimiteTemperatura.valor	& 0x00ff ;
 8003da2:	4b3e      	ldr	r3, [pc, #248]	; (8003e9c <txBluetooth+0x2cc>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	757b      	strb	r3, [r7, #21]
			Buffer[6] 	= (uint8_t)instalacaoDia.valor;
 8003daa:	4b3d      	ldr	r3, [pc, #244]	; (8003ea0 <txBluetooth+0x2d0>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	75bb      	strb	r3, [r7, #22]
			Buffer[7] 	= (uint8_t)instalacaoMes.valor;
 8003db2:	4b3c      	ldr	r3, [pc, #240]	; (8003ea4 <txBluetooth+0x2d4>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	75fb      	strb	r3, [r7, #23]
			Buffer[8] 	= (uint8_t)instalacaoAno.valor;
 8003dba:	4b3b      	ldr	r3, [pc, #236]	; (8003ea8 <txBluetooth+0x2d8>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	763b      	strb	r3, [r7, #24]
			Buffer[9]	= VERSAO;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	767b      	strb	r3, [r7, #25]
			BluetoothEnviaComando(Buffer, 9);
 8003dc6:	f107 0310 	add.w	r3, r7, #16
 8003dca:	2109      	movs	r1, #9
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fd fb89 	bl	80014e4 <BluetoothEnviaComando>
			break;
 8003dd2:	e055      	b.n	8003e80 <txBluetooth+0x2b0>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x51;									// FUNÇÃO -
 8003dd8:	2351      	movs	r3, #81	; 0x51
 8003dda:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x51;									// FUNÇÃO -
 8003ddc:	2351      	movs	r3, #81	; 0x51
 8003dde:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x01;
 8003de0:	2301      	movs	r3, #1
 8003de2:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= bluetooth.chave >> 8 		;
 8003de4:	4b31      	ldr	r3, [pc, #196]	; (8003eac <txBluetooth+0x2dc>)
 8003de6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dea:	0a1b      	lsrs	r3, r3, #8
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= bluetooth.chave & 0x00ff	;
 8003df2:	4b2e      	ldr	r3, [pc, #184]	; (8003eac <txBluetooth+0x2dc>)
 8003df4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	757b      	strb	r3, [r7, #21]
			BluetoothEnviaComando(Buffer, 5);
 8003dfc:	f107 0310 	add.w	r3, r7, #16
 8003e00:	2105      	movs	r1, #5
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fd fb6e 	bl	80014e4 <BluetoothEnviaComando>
			break;
 8003e08:	e03a      	b.n	8003e80 <txBluetooth+0x2b0>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x51;									// FUNÇÃO -
 8003e0e:	2351      	movs	r3, #81	; 0x51
 8003e10:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x51;									// FUNÇÃO -
 8003e12:	2351      	movs	r3, #81	; 0x51
 8003e14:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x00;
 8003e16:	2300      	movs	r3, #0
 8003e18:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= 0x00;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= 0x00;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	757b      	strb	r3, [r7, #21]
			BluetoothEnviaComando(Buffer, 5);
 8003e22:	f107 0310 	add.w	r3, r7, #16
 8003e26:	2105      	movs	r1, #5
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fd fb5b 	bl	80014e4 <BluetoothEnviaComando>
			BluetoothDescon(&bluetooth);
 8003e2e:	481f      	ldr	r0, [pc, #124]	; (8003eac <txBluetooth+0x2dc>)
 8003e30:	f7fd fe4e 	bl	8001ad0 <BluetoothDescon>
			break;
 8003e34:	e024      	b.n	8003e80 <txBluetooth+0x2b0>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003e36:	2301      	movs	r3, #1
 8003e38:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x52;									// FUNÇÃO -
 8003e3a:	2352      	movs	r3, #82	; 0x52
 8003e3c:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x52;									// FUNÇÃO -
 8003e3e:	2352      	movs	r3, #82	; 0x52
 8003e40:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x01;									//resultado ok
 8003e42:	2301      	movs	r3, #1
 8003e44:	74fb      	strb	r3, [r7, #19]
			BluetoothEnviaComando(Buffer, 3);
 8003e46:	f107 0310 	add.w	r3, r7, #16
 8003e4a:	2103      	movs	r1, #3
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fd fb49 	bl	80014e4 <BluetoothEnviaComando>
			break;
 8003e52:	e015      	b.n	8003e80 <txBluetooth+0x2b0>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003e54:	2301      	movs	r3, #1
 8003e56:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x52;									// FUNÇÃO -
 8003e58:	2352      	movs	r3, #82	; 0x52
 8003e5a:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x52;									// FUNÇÃO -
 8003e5c:	2352      	movs	r3, #82	; 0x52
 8003e5e:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x00;									//resultado ok
 8003e60:	2300      	movs	r3, #0
 8003e62:	74fb      	strb	r3, [r7, #19]
			BluetoothEnviaComando(Buffer, 3);
 8003e64:	f107 0310 	add.w	r3, r7, #16
 8003e68:	2103      	movs	r1, #3
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fd fb3a 	bl	80014e4 <BluetoothEnviaComando>
			HAL_Delay(30);
 8003e70:	201e      	movs	r0, #30
 8003e72:	f000 ff99 	bl	8004da8 <HAL_Delay>
			Envia_texto_UART("AT",50);//DESCONECTA
 8003e76:	2132      	movs	r1, #50	; 0x32
 8003e78:	480d      	ldr	r0, [pc, #52]	; (8003eb0 <txBluetooth+0x2e0>)
 8003e7a:	f7fd fbaf 	bl	80015dc <Envia_texto_UART>
			break;
 8003e7e:	bf00      	nop
}
 8003e80:	bf00      	nop
 8003e82:	3730      	adds	r7, #48	; 0x30
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	200011bc 	.word	0x200011bc
 8003e8c:	20001328 	.word	0x20001328
 8003e90:	20001504 	.word	0x20001504
 8003e94:	2000152c 	.word	0x2000152c
 8003e98:	2000161c 	.word	0x2000161c
 8003e9c:	200015f4 	.word	0x200015f4
 8003ea0:	20001554 	.word	0x20001554
 8003ea4:	2000157c 	.word	0x2000157c
 8003ea8:	200015a4 	.word	0x200015a4
 8003eac:	200011d8 	.word	0x200011d8
 8003eb0:	0800e980 	.word	0x0800e980

08003eb4 <rxBluetooth>:

void rxBluetooth(void){
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
	osEvent  evtrx;
	evtrx = osMessageGet(FilaRXBluetoothHandle, 0);
 8003eba:	4bc4      	ldr	r3, [pc, #784]	; (80041cc <rxBluetooth+0x318>)
 8003ebc:	6819      	ldr	r1, [r3, #0]
 8003ebe:	f107 030c 	add.w	r3, r7, #12
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f006 fce9 	bl	800a89c <osMessageGet>
	if (evtrx.status == osEventMessage) {
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b10      	cmp	r3, #16
 8003ece:	f040 82ce 	bne.w	800446e <rxBluetooth+0x5ba>
		//			switch ((unsigned int)evtrx.value.p) {
		switch (bluetooth._RxDataArr[1]) {
 8003ed2:	4bbf      	ldr	r3, [pc, #764]	; (80041d0 <rxBluetooth+0x31c>)
 8003ed4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ed8:	3b03      	subs	r3, #3
 8003eda:	2b3f      	cmp	r3, #63	; 0x3f
 8003edc:	f200 82c7 	bhi.w	800446e <rxBluetooth+0x5ba>
 8003ee0:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <rxBluetooth+0x34>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08004009 	.word	0x08004009
 8003eec:	0800446f 	.word	0x0800446f
 8003ef0:	0800446f 	.word	0x0800446f
 8003ef4:	0800446f 	.word	0x0800446f
 8003ef8:	0800446f 	.word	0x0800446f
 8003efc:	0800446f 	.word	0x0800446f
 8003f00:	0800446f 	.word	0x0800446f
 8003f04:	0800446f 	.word	0x0800446f
 8003f08:	0800446f 	.word	0x0800446f
 8003f0c:	0800446f 	.word	0x0800446f
 8003f10:	0800446f 	.word	0x0800446f
 8003f14:	0800446f 	.word	0x0800446f
 8003f18:	0800446f 	.word	0x0800446f
 8003f1c:	0800446d 	.word	0x0800446d
 8003f20:	0800446f 	.word	0x0800446f
 8003f24:	0800446f 	.word	0x0800446f
 8003f28:	0800446f 	.word	0x0800446f
 8003f2c:	0800446f 	.word	0x0800446f
 8003f30:	08003fe9 	.word	0x08003fe9
 8003f34:	0800446f 	.word	0x0800446f
 8003f38:	08003ff9 	.word	0x08003ff9
 8003f3c:	0800446f 	.word	0x0800446f
 8003f40:	0800446f 	.word	0x0800446f
 8003f44:	0800446f 	.word	0x0800446f
 8003f48:	0800446f 	.word	0x0800446f
 8003f4c:	0800446f 	.word	0x0800446f
 8003f50:	0800446f 	.word	0x0800446f
 8003f54:	0800446f 	.word	0x0800446f
 8003f58:	0800446f 	.word	0x0800446f
 8003f5c:	0800446f 	.word	0x0800446f
 8003f60:	08004065 	.word	0x08004065
 8003f64:	080040a7 	.word	0x080040a7
 8003f68:	080040e9 	.word	0x080040e9
 8003f6c:	08004175 	.word	0x08004175
 8003f70:	0800420b 	.word	0x0800420b
 8003f74:	080042d7 	.word	0x080042d7
 8003f78:	08004323 	.word	0x08004323
 8003f7c:	08004361 	.word	0x08004361
 8003f80:	080043d1 	.word	0x080043d1
 8003f84:	0800446f 	.word	0x0800446f
 8003f88:	0800446f 	.word	0x0800446f
 8003f8c:	0800446f 	.word	0x0800446f
 8003f90:	0800446f 	.word	0x0800446f
 8003f94:	0800446f 	.word	0x0800446f
 8003f98:	0800446f 	.word	0x0800446f
 8003f9c:	0800439b 	.word	0x0800439b
 8003fa0:	0800446f 	.word	0x0800446f
 8003fa4:	0800446f 	.word	0x0800446f
 8003fa8:	0800446f 	.word	0x0800446f
 8003fac:	0800446f 	.word	0x0800446f
 8003fb0:	0800446f 	.word	0x0800446f
 8003fb4:	0800446f 	.word	0x0800446f
 8003fb8:	0800446f 	.word	0x0800446f
 8003fbc:	0800446f 	.word	0x0800446f
 8003fc0:	0800446f 	.word	0x0800446f
 8003fc4:	0800446f 	.word	0x0800446f
 8003fc8:	0800446f 	.word	0x0800446f
 8003fcc:	0800446f 	.word	0x0800446f
 8003fd0:	0800446f 	.word	0x0800446f
 8003fd4:	0800446f 	.word	0x0800446f
 8003fd8:	0800446f 	.word	0x0800446f
 8003fdc:	0800441b 	.word	0x0800441b
 8003fe0:	0800446f 	.word	0x0800446f
 8003fe4:	080043f1 	.word	0x080043f1
		case RX_SOLICITA_REALTIME:
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA, 0);
 8003fe8:	4b7a      	ldr	r3, [pc, #488]	; (80041d4 <rxBluetooth+0x320>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2200      	movs	r2, #0
 8003fee:	2116      	movs	r1, #22
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f006 fc13 	bl	800a81c <osMessagePut>
			break;
 8003ff6:	e23a      	b.n	800446e <rxBluetooth+0x5ba>
		case RX_SOLICITA_SINCRONIA:
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003ff8:	4b76      	ldr	r3, [pc, #472]	; (80041d4 <rxBluetooth+0x320>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2118      	movs	r1, #24
 8004000:	4618      	mov	r0, r3
 8004002:	f006 fc0b 	bl	800a81c <osMessagePut>
			break;
 8004006:	e232      	b.n	800446e <rxBluetooth+0x5ba>
		case RX_ATUALIZA_HORA:

			RTC_DateTypeDef datetoUpdate;
			RTC_TimeTypeDef timeToUpdate;

			datetoUpdate.WeekDay 	= bluetooth._RxDataArr[2]; //Dia da semana p/atualizar
 8004008:	4b71      	ldr	r3, [pc, #452]	; (80041d0 <rxBluetooth+0x31c>)
 800400a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800400e:	723b      	strb	r3, [r7, #8]
			datetoUpdate.Date 		= bluetooth._RxDataArr[3]; //Dia do mes p/atualizar
 8004010:	4b6f      	ldr	r3, [pc, #444]	; (80041d0 <rxBluetooth+0x31c>)
 8004012:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004016:	72bb      	strb	r3, [r7, #10]
			datetoUpdate.Month 		= bluetooth._RxDataArr[4]; //mes p/atualizar
 8004018:	4b6d      	ldr	r3, [pc, #436]	; (80041d0 <rxBluetooth+0x31c>)
 800401a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800401e:	727b      	strb	r3, [r7, #9]
			datetoUpdate.Year 		= bluetooth._RxDataArr[5]; //ano p/atualizar
 8004020:	4b6b      	ldr	r3, [pc, #428]	; (80041d0 <rxBluetooth+0x31c>)
 8004022:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004026:	72fb      	strb	r3, [r7, #11]
			timeToUpdate.Hours 		= bluetooth._RxDataArr[6]; //hora p/atualizar
 8004028:	4b69      	ldr	r3, [pc, #420]	; (80041d0 <rxBluetooth+0x31c>)
 800402a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800402e:	713b      	strb	r3, [r7, #4]
			timeToUpdate.Minutes 	= bluetooth._RxDataArr[7]; //minuto p/atualizar
 8004030:	4b67      	ldr	r3, [pc, #412]	; (80041d0 <rxBluetooth+0x31c>)
 8004032:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004036:	717b      	strb	r3, [r7, #5]
			timeToUpdate.Seconds 	= bluetooth._RxDataArr[8]; //segundos p/atualizar
 8004038:	4b65      	ldr	r3, [pc, #404]	; (80041d0 <rxBluetooth+0x31c>)
 800403a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800403e:	71bb      	strb	r3, [r7, #6]

			atualizaDataEeprom(datetoUpdate, timeToUpdate);
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	68b8      	ldr	r0, [r7, #8]
 8004044:	f000 fc06 	bl	8004854 <atualizaDataEeprom>

			MACRO_ENVIA_AKNOLADGE_(RX_ATUALIZA_HORA)
 8004048:	4b61      	ldr	r3, [pc, #388]	; (80041d0 <rxBluetooth+0x31c>)
 800404a:	2201      	movs	r2, #1
 800404c:	721a      	strb	r2, [r3, #8]
 800404e:	4b60      	ldr	r3, [pc, #384]	; (80041d0 <rxBluetooth+0x31c>)
 8004050:	22ff      	movs	r2, #255	; 0xff
 8004052:	725a      	strb	r2, [r3, #9]
 8004054:	4b5e      	ldr	r3, [pc, #376]	; (80041d0 <rxBluetooth+0x31c>)
 8004056:	2203      	movs	r2, #3
 8004058:	729a      	strb	r2, [r3, #10]
 800405a:	2103      	movs	r1, #3
 800405c:	485e      	ldr	r0, [pc, #376]	; (80041d8 <rxBluetooth+0x324>)
 800405e:	f7fd faa9 	bl	80015b4 <Envia_bytes_UART>
			break;
 8004062:	e204      	b.n	800446e <rxBluetooth+0x5ba>
			//				Maquina.Maquina_eeprom = EEPROM_HARD_RESET;
			//				MACRO_ENVIA_AKNOLADGE_(RX_RESTAURA)
			break;
		case RX_SP_TEMP_TETO:
			//---------ENDEREÇO | 0x21 | SP_Teto.high | SP_Teto.low | CRC | CRC
			MACRO_ANULA_INATIVIDADE
 8004064:	4b5d      	ldr	r3, [pc, #372]	; (80041dc <rxBluetooth+0x328>)
 8004066:	2200      	movs	r2, #0
 8004068:	801a      	strh	r2, [r3, #0]

			PrimitiveStates.SetPointTeto = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 800406a:	4b59      	ldr	r3, [pc, #356]	; (80041d0 <rxBluetooth+0x31c>)
 800406c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	4a57      	ldr	r2, [pc, #348]	; (80041d0 <rxBluetooth+0x31c>)
 8004074:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8004078:	4313      	orrs	r3, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f7fc f9c2 	bl	8000404 <__aeabi_i2d>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4956      	ldr	r1, [pc, #344]	; (80041e0 <rxBluetooth+0x32c>)
 8004086:	e9c1 2306 	strd	r2, r3, [r1, #24]

			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_TETO)
 800408a:	4b51      	ldr	r3, [pc, #324]	; (80041d0 <rxBluetooth+0x31c>)
 800408c:	2201      	movs	r2, #1
 800408e:	721a      	strb	r2, [r3, #8]
 8004090:	4b4f      	ldr	r3, [pc, #316]	; (80041d0 <rxBluetooth+0x31c>)
 8004092:	22ff      	movs	r2, #255	; 0xff
 8004094:	725a      	strb	r2, [r3, #9]
 8004096:	4b4e      	ldr	r3, [pc, #312]	; (80041d0 <rxBluetooth+0x31c>)
 8004098:	2221      	movs	r2, #33	; 0x21
 800409a:	729a      	strb	r2, [r3, #10]
 800409c:	2103      	movs	r1, #3
 800409e:	484e      	ldr	r0, [pc, #312]	; (80041d8 <rxBluetooth+0x324>)
 80040a0:	f7fd fa88 	bl	80015b4 <Envia_bytes_UART>
			break;
 80040a4:	e1e3      	b.n	800446e <rxBluetooth+0x5ba>
		case RX_SP_TEMP_LASTRO:
			//---------ENDEREÇO | 0x22 | SP_Lastro.high | SP_Lastro.low | CRC | CRC
			MACRO_ANULA_INATIVIDADE
 80040a6:	4b4d      	ldr	r3, [pc, #308]	; (80041dc <rxBluetooth+0x328>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	801a      	strh	r2, [r3, #0]

			PrimitiveStates.SetPointLastro = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 80040ac:	4b48      	ldr	r3, [pc, #288]	; (80041d0 <rxBluetooth+0x31c>)
 80040ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	4a46      	ldr	r2, [pc, #280]	; (80041d0 <rxBluetooth+0x31c>)
 80040b6:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 80040ba:	4313      	orrs	r3, r2
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc f9a1 	bl	8000404 <__aeabi_i2d>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4946      	ldr	r1, [pc, #280]	; (80041e0 <rxBluetooth+0x32c>)
 80040c8:	e9c1 2308 	strd	r2, r3, [r1, #32]

			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_LASTRO)
 80040cc:	4b40      	ldr	r3, [pc, #256]	; (80041d0 <rxBluetooth+0x31c>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	721a      	strb	r2, [r3, #8]
 80040d2:	4b3f      	ldr	r3, [pc, #252]	; (80041d0 <rxBluetooth+0x31c>)
 80040d4:	22ff      	movs	r2, #255	; 0xff
 80040d6:	725a      	strb	r2, [r3, #9]
 80040d8:	4b3d      	ldr	r3, [pc, #244]	; (80041d0 <rxBluetooth+0x31c>)
 80040da:	2222      	movs	r2, #34	; 0x22
 80040dc:	729a      	strb	r2, [r3, #10]
 80040de:	2103      	movs	r1, #3
 80040e0:	483d      	ldr	r0, [pc, #244]	; (80041d8 <rxBluetooth+0x324>)
 80040e2:	f7fd fa67 	bl	80015b4 <Envia_bytes_UART>
			break;
 80040e6:	e1c2      	b.n	800446e <rxBluetooth+0x5ba>
		case RX_SP_TEMPO:
		{	//---------ENDEREÇO | 0x23 | TimerMinutos | TimerSegundos |CRC | CRC
			MACRO_ANULA_INATIVIDADE
 80040e8:	4b3c      	ldr	r3, [pc, #240]	; (80041dc <rxBluetooth+0x328>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	801a      	strh	r2, [r3, #0]

			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 80040ee:	4b38      	ldr	r3, [pc, #224]	; (80041d0 <rxBluetooth+0x31c>)
 80040f0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80040f4:	4b3a      	ldr	r3, [pc, #232]	; (80041e0 <rxBluetooth+0x32c>)
 80040f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 80040fa:	4b35      	ldr	r3, [pc, #212]	; (80041d0 <rxBluetooth+0x31c>)
 80040fc:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8004100:	4b37      	ldr	r3, [pc, #220]	; (80041e0 <rxBluetooth+0x32c>)
 8004102:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8004106:	4b36      	ldr	r3, [pc, #216]	; (80041e0 <rxBluetooth+0x32c>)
 8004108:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800410c:	4b34      	ldr	r3, [pc, #208]	; (80041e0 <rxBluetooth+0x32c>)
 800410e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8004112:	4b33      	ldr	r3, [pc, #204]	; (80041e0 <rxBluetooth+0x32c>)
 8004114:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004118:	4b31      	ldr	r3, [pc, #196]	; (80041e0 <rxBluetooth+0x32c>)
 800411a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

			switch (PrimitiveStates.stateMaquina) {
 800411e:	4b30      	ldr	r3, [pc, #192]	; (80041e0 <rxBluetooth+0x32c>)
 8004120:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004124:	2b01      	cmp	r3, #1
 8004126:	dc02      	bgt.n	800412e <rxBluetooth+0x27a>
 8004128:	2b00      	cmp	r3, #0
 800412a:	da04      	bge.n	8004136 <rxBluetooth+0x282>
 800412c:	e014      	b.n	8004158 <rxBluetooth+0x2a4>
 800412e:	3b02      	subs	r3, #2
 8004130:	2b02      	cmp	r3, #2
 8004132:	d811      	bhi.n	8004158 <rxBluetooth+0x2a4>
 8004134:	e001      	b.n	800413a <rxBluetooth+0x286>
			case inicial:
			case aquecendo:
				//nao executa nada
				__NOP();
 8004136:	bf00      	nop
				break;
 8004138:	e00e      	b.n	8004158 <rxBluetooth+0x2a4>
			case aquecido:
			case decrementando:
			case pausado:
				if(PrimitiveStates.MaquinaAquecimento == mantendoTemp){
 800413a:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <rxBluetooth+0x32c>)
 800413c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004140:	2b01      	cmp	r3, #1
 8004142:	d104      	bne.n	800414e <rxBluetooth+0x29a>
					PrimitiveStates.stateMaquina 	= decrementando;
 8004144:	4b26      	ldr	r3, [pc, #152]	; (80041e0 <rxBluetooth+0x32c>)
 8004146:	2203      	movs	r2, #3
 8004148:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				}else{
					PrimitiveStates.stateMaquina = aquecendo;
				}
				break;
 800414c:	e003      	b.n	8004156 <rxBluetooth+0x2a2>
					PrimitiveStates.stateMaquina = aquecendo;
 800414e:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <rxBluetooth+0x32c>)
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 8004156:	bf00      	nop
			}

			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMPO)
 8004158:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <rxBluetooth+0x31c>)
 800415a:	2201      	movs	r2, #1
 800415c:	721a      	strb	r2, [r3, #8]
 800415e:	4b1c      	ldr	r3, [pc, #112]	; (80041d0 <rxBluetooth+0x31c>)
 8004160:	22ff      	movs	r2, #255	; 0xff
 8004162:	725a      	strb	r2, [r3, #9]
 8004164:	4b1a      	ldr	r3, [pc, #104]	; (80041d0 <rxBluetooth+0x31c>)
 8004166:	2223      	movs	r2, #35	; 0x23
 8004168:	729a      	strb	r2, [r3, #10]
 800416a:	2103      	movs	r1, #3
 800416c:	481a      	ldr	r0, [pc, #104]	; (80041d8 <rxBluetooth+0x324>)
 800416e:	f7fd fa21 	bl	80015b4 <Envia_bytes_UART>
		}
		break;
 8004172:	e17c      	b.n	800446e <rxBluetooth+0x5ba>
		case RX_TOGGLE_TEMPO:
		{
			//---------ENDEREÇO | 0x24 | 0x24 | TimerSegundos |CRC | CRC
			MACRO_ANULA_INATIVIDADE
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <rxBluetooth+0x328>)
 8004176:	2200      	movs	r2, #0
 8004178:	801a      	strh	r2, [r3, #0]

			switch (PrimitiveStates.stateMaquina) {
 800417a:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <rxBluetooth+0x32c>)
 800417c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004180:	2b04      	cmp	r3, #4
 8004182:	d834      	bhi.n	80041ee <rxBluetooth+0x33a>
 8004184:	a201      	add	r2, pc, #4	; (adr r2, 800418c <rxBluetooth+0x2d8>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	080041a1 	.word	0x080041a1
 8004190:	080041a1 	.word	0x080041a1
 8004194:	080041a5 	.word	0x080041a5
 8004198:	080041af 	.word	0x080041af
 800419c:	080041b9 	.word	0x080041b9
			case inicial:
			case aquecendo:
				//nao executa nada
				__NOP();
 80041a0:	bf00      	nop
				break;
 80041a2:	e024      	b.n	80041ee <rxBluetooth+0x33a>
			case aquecido:
				PrimitiveStates.stateMaquina = decrementando;
 80041a4:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <rxBluetooth+0x32c>)
 80041a6:	2203      	movs	r2, #3
 80041a8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 80041ac:	e01f      	b.n	80041ee <rxBluetooth+0x33a>
			case decrementando:
				PrimitiveStates.stateMaquina = pausado;
 80041ae:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <rxBluetooth+0x32c>)
 80041b0:	2204      	movs	r2, #4
 80041b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 80041b6:	e01a      	b.n	80041ee <rxBluetooth+0x33a>
			case pausado:
				if(PrimitiveStates.MaquinaAquecimento == mantendoTemp){
 80041b8:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <rxBluetooth+0x32c>)
 80041ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d110      	bne.n	80041e4 <rxBluetooth+0x330>
					PrimitiveStates.stateMaquina = decrementando;
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <rxBluetooth+0x32c>)
 80041c4:	2203      	movs	r2, #3
 80041c6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				}else{
					PrimitiveStates.stateMaquina = aquecendo;
				}
				break;
 80041ca:	e00f      	b.n	80041ec <rxBluetooth+0x338>
 80041cc:	200011c0 	.word	0x200011c0
 80041d0:	200011d8 	.word	0x200011d8
 80041d4:	200011bc 	.word	0x200011bc
 80041d8:	200011e0 	.word	0x200011e0
 80041dc:	20001440 	.word	0x20001440
 80041e0:	20001328 	.word	0x20001328
					PrimitiveStates.stateMaquina = aquecendo;
 80041e4:	4ba4      	ldr	r3, [pc, #656]	; (8004478 <rxBluetooth+0x5c4>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 80041ec:	bf00      	nop
			}

			MACRO_ENVIA_AKNOLADGE_(RX_TOGGLE_TEMPO)
 80041ee:	4ba3      	ldr	r3, [pc, #652]	; (800447c <rxBluetooth+0x5c8>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	721a      	strb	r2, [r3, #8]
 80041f4:	4ba1      	ldr	r3, [pc, #644]	; (800447c <rxBluetooth+0x5c8>)
 80041f6:	22ff      	movs	r2, #255	; 0xff
 80041f8:	725a      	strb	r2, [r3, #9]
 80041fa:	4ba0      	ldr	r3, [pc, #640]	; (800447c <rxBluetooth+0x5c8>)
 80041fc:	2224      	movs	r2, #36	; 0x24
 80041fe:	729a      	strb	r2, [r3, #10]
 8004200:	2103      	movs	r1, #3
 8004202:	489f      	ldr	r0, [pc, #636]	; (8004480 <rxBluetooth+0x5cc>)
 8004204:	f7fd f9d6 	bl	80015b4 <Envia_bytes_UART>
		}
		break;
 8004208:	e131      	b.n	800446e <rxBluetooth+0x5ba>
		case RX_RECEITA:
		{
			MACRO_ANULA_INATIVIDADE
 800420a:	4b9e      	ldr	r3, [pc, #632]	; (8004484 <rxBluetooth+0x5d0>)
 800420c:	2200      	movs	r2, #0
 800420e:	801a      	strh	r2, [r3, #0]
			//---------ENDEREÇO | 0x25 | TemperaturaTeto.hi~.lo | TemperaturaLastro.hi~.lo | Minutos | Segundos | CRC | CRC
			PrimitiveStates.SetPointTeto = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 8004210:	4b9a      	ldr	r3, [pc, #616]	; (800447c <rxBluetooth+0x5c8>)
 8004212:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	4a98      	ldr	r2, [pc, #608]	; (800447c <rxBluetooth+0x5c8>)
 800421a:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 800421e:	4313      	orrs	r3, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f7fc f8ef 	bl	8000404 <__aeabi_i2d>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4993      	ldr	r1, [pc, #588]	; (8004478 <rxBluetooth+0x5c4>)
 800422c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro = (bluetooth._RxDataArr[4]<< 8) | bluetooth._RxDataArr[5];
 8004230:	4b92      	ldr	r3, [pc, #584]	; (800447c <rxBluetooth+0x5c8>)
 8004232:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	4a90      	ldr	r2, [pc, #576]	; (800447c <rxBluetooth+0x5c8>)
 800423a:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 800423e:	4313      	orrs	r3, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f7fc f8df 	bl	8000404 <__aeabi_i2d>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	498b      	ldr	r1, [pc, #556]	; (8004478 <rxBluetooth+0x5c4>)
 800424c:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8004250:	4b8a      	ldr	r3, [pc, #552]	; (800447c <rxBluetooth+0x5c8>)
 8004252:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8004256:	4b88      	ldr	r3, [pc, #544]	; (8004478 <rxBluetooth+0x5c4>)
 8004258:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 800425c:	4b87      	ldr	r3, [pc, #540]	; (800447c <rxBluetooth+0x5c8>)
 800425e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8004262:	4b85      	ldr	r3, [pc, #532]	; (8004478 <rxBluetooth+0x5c4>)
 8004264:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

			//atribuicao para disparar decremento
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8004268:	4b83      	ldr	r3, [pc, #524]	; (8004478 <rxBluetooth+0x5c4>)
 800426a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800426e:	4b82      	ldr	r3, [pc, #520]	; (8004478 <rxBluetooth+0x5c4>)
 8004270:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8004274:	4b80      	ldr	r3, [pc, #512]	; (8004478 <rxBluetooth+0x5c4>)
 8004276:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800427a:	4b7f      	ldr	r3, [pc, #508]	; (8004478 <rxBluetooth+0x5c4>)
 800427c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


			switch (PrimitiveStates.stateMaquina) {
 8004280:	4b7d      	ldr	r3, [pc, #500]	; (8004478 <rxBluetooth+0x5c4>)
 8004282:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004286:	2b01      	cmp	r3, #1
 8004288:	dc02      	bgt.n	8004290 <rxBluetooth+0x3dc>
 800428a:	2b00      	cmp	r3, #0
 800428c:	da04      	bge.n	8004298 <rxBluetooth+0x3e4>
 800428e:	e014      	b.n	80042ba <rxBluetooth+0x406>
 8004290:	3b02      	subs	r3, #2
 8004292:	2b02      	cmp	r3, #2
 8004294:	d811      	bhi.n	80042ba <rxBluetooth+0x406>
 8004296:	e001      	b.n	800429c <rxBluetooth+0x3e8>
			case inicial:
			case aquecendo:
				//nao executa nada
				__NOP();
 8004298:	bf00      	nop
				break;
 800429a:	e00e      	b.n	80042ba <rxBluetooth+0x406>
			case aquecido:
			case decrementando:
			case pausado:
				if(PrimitiveStates.MaquinaAquecimento == mantendoTemp){
 800429c:	4b76      	ldr	r3, [pc, #472]	; (8004478 <rxBluetooth+0x5c4>)
 800429e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d104      	bne.n	80042b0 <rxBluetooth+0x3fc>
					PrimitiveStates.stateMaquina 	= decrementando;
 80042a6:	4b74      	ldr	r3, [pc, #464]	; (8004478 <rxBluetooth+0x5c4>)
 80042a8:	2203      	movs	r2, #3
 80042aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				}else{
					PrimitiveStates.stateMaquina = aquecendo;
				}
				break;
 80042ae:	e003      	b.n	80042b8 <rxBluetooth+0x404>
					PrimitiveStates.stateMaquina = aquecendo;
 80042b0:	4b71      	ldr	r3, [pc, #452]	; (8004478 <rxBluetooth+0x5c4>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 80042b8:	bf00      	nop
			}
			MACRO_ENVIA_AKNOLADGE_(RX_RECEITA)
 80042ba:	4b70      	ldr	r3, [pc, #448]	; (800447c <rxBluetooth+0x5c8>)
 80042bc:	2201      	movs	r2, #1
 80042be:	721a      	strb	r2, [r3, #8]
 80042c0:	4b6e      	ldr	r3, [pc, #440]	; (800447c <rxBluetooth+0x5c8>)
 80042c2:	22ff      	movs	r2, #255	; 0xff
 80042c4:	725a      	strb	r2, [r3, #9]
 80042c6:	4b6d      	ldr	r3, [pc, #436]	; (800447c <rxBluetooth+0x5c8>)
 80042c8:	2225      	movs	r2, #37	; 0x25
 80042ca:	729a      	strb	r2, [r3, #10]
 80042cc:	2103      	movs	r1, #3
 80042ce:	486c      	ldr	r0, [pc, #432]	; (8004480 <rxBluetooth+0x5cc>)
 80042d0:	f7fd f970 	bl	80015b4 <Envia_bytes_UART>
		}
		break;
 80042d4:	e0cb      	b.n	800446e <rxBluetooth+0x5ba>
		case RX_LIMITE_TEMPERATURA:
			//---------ENDEREÇO | 0x26 | TemperaturaTeto.hi~.lo | TemperaturaLastro.hi~.lo | CRC | CRC
			MACRO_ANULA_INATIVIDADE
 80042d6:	4b6b      	ldr	r3, [pc, #428]	; (8004484 <rxBluetooth+0x5d0>)
 80042d8:	2200      	movs	r2, #0
 80042da:	801a      	strh	r2, [r3, #0]

			PrimitiveStates.LimiteTemp = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 80042dc:	4b67      	ldr	r3, [pc, #412]	; (800447c <rxBluetooth+0x5c8>)
 80042de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	b21a      	sxth	r2, r3
 80042e6:	4b65      	ldr	r3, [pc, #404]	; (800447c <rxBluetooth+0x5c8>)
 80042e8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80042ec:	b21b      	sxth	r3, r3
 80042ee:	4313      	orrs	r3, r2
 80042f0:	b21b      	sxth	r3, r3
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	4b60      	ldr	r3, [pc, #384]	; (8004478 <rxBluetooth+0x5c4>)
 80042f6:	861a      	strh	r2, [r3, #48]	; 0x30
			osMessagePut(FilaEepromHandle, CEepromLimiteTemp, 0);
 80042f8:	4b63      	ldr	r3, [pc, #396]	; (8004488 <rxBluetooth+0x5d4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2200      	movs	r2, #0
 80042fe:	2105      	movs	r1, #5
 8004300:	4618      	mov	r0, r3
 8004302:	f006 fa8b 	bl	800a81c <osMessagePut>

			MACRO_ENVIA_AKNOLADGE_(RX_LIMITE_TEMPERATURA)
 8004306:	4b5d      	ldr	r3, [pc, #372]	; (800447c <rxBluetooth+0x5c8>)
 8004308:	2201      	movs	r2, #1
 800430a:	721a      	strb	r2, [r3, #8]
 800430c:	4b5b      	ldr	r3, [pc, #364]	; (800447c <rxBluetooth+0x5c8>)
 800430e:	22ff      	movs	r2, #255	; 0xff
 8004310:	725a      	strb	r2, [r3, #9]
 8004312:	4b5a      	ldr	r3, [pc, #360]	; (800447c <rxBluetooth+0x5c8>)
 8004314:	2226      	movs	r2, #38	; 0x26
 8004316:	729a      	strb	r2, [r3, #10]
 8004318:	2103      	movs	r1, #3
 800431a:	4859      	ldr	r0, [pc, #356]	; (8004480 <rxBluetooth+0x5cc>)
 800431c:	f7fd f94a 	bl	80015b4 <Envia_bytes_UART>
			break;
 8004320:	e0a5      	b.n	800446e <rxBluetooth+0x5ba>
		case RX_LIGA_LAMPADA:
			//---------ENDEREÇO | 0x27 | 0x27 | CRC | CRC
			MACRO_ANULA_INATIVIDADE
 8004322:	4b58      	ldr	r3, [pc, #352]	; (8004484 <rxBluetooth+0x5d0>)
 8004324:	2200      	movs	r2, #0
 8004326:	801a      	strh	r2, [r3, #0]
			PrimitiveStates.RTLampada=PrimitiveStates.SPLampada;
 8004328:	4b53      	ldr	r3, [pc, #332]	; (8004478 <rxBluetooth+0x5c4>)
 800432a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800432e:	4b52      	ldr	r3, [pc, #328]	; (8004478 <rxBluetooth+0x5c4>)
 8004330:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			LAMPADA_ON
 8004334:	2201      	movs	r2, #1
 8004336:	2140      	movs	r1, #64	; 0x40
 8004338:	4854      	ldr	r0, [pc, #336]	; (800448c <rxBluetooth+0x5d8>)
 800433a:	f001 ff82 	bl	8006242 <HAL_GPIO_WritePin>
 800433e:	4b4e      	ldr	r3, [pc, #312]	; (8004478 <rxBluetooth+0x5c4>)
 8004340:	2201      	movs	r2, #1
 8004342:	70da      	strb	r2, [r3, #3]
			MACRO_ENVIA_AKNOLADGE_(RX_LIGA_LAMPADA)
 8004344:	4b4d      	ldr	r3, [pc, #308]	; (800447c <rxBluetooth+0x5c8>)
 8004346:	2201      	movs	r2, #1
 8004348:	721a      	strb	r2, [r3, #8]
 800434a:	4b4c      	ldr	r3, [pc, #304]	; (800447c <rxBluetooth+0x5c8>)
 800434c:	22ff      	movs	r2, #255	; 0xff
 800434e:	725a      	strb	r2, [r3, #9]
 8004350:	4b4a      	ldr	r3, [pc, #296]	; (800447c <rxBluetooth+0x5c8>)
 8004352:	2227      	movs	r2, #39	; 0x27
 8004354:	729a      	strb	r2, [r3, #10]
 8004356:	2103      	movs	r1, #3
 8004358:	4849      	ldr	r0, [pc, #292]	; (8004480 <rxBluetooth+0x5cc>)
 800435a:	f7fd f92b 	bl	80015b4 <Envia_bytes_UART>
			break;
 800435e:	e086      	b.n	800446e <rxBluetooth+0x5ba>
		case RX_DESLIGA_LAMPADA:
			//---------ENDEREÇO | 0x28 | 0x28 | CRC | CRC
			MACRO_ANULA_INATIVIDADE
 8004360:	4b48      	ldr	r3, [pc, #288]	; (8004484 <rxBluetooth+0x5d0>)
 8004362:	2200      	movs	r2, #0
 8004364:	801a      	strh	r2, [r3, #0]
			LAMPADA_OFF
 8004366:	2200      	movs	r2, #0
 8004368:	2140      	movs	r1, #64	; 0x40
 800436a:	4848      	ldr	r0, [pc, #288]	; (800448c <rxBluetooth+0x5d8>)
 800436c:	f001 ff69 	bl	8006242 <HAL_GPIO_WritePin>
 8004370:	4b41      	ldr	r3, [pc, #260]	; (8004478 <rxBluetooth+0x5c4>)
 8004372:	2200      	movs	r2, #0
 8004374:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8004378:	4b3f      	ldr	r3, [pc, #252]	; (8004478 <rxBluetooth+0x5c4>)
 800437a:	2200      	movs	r2, #0
 800437c:	70da      	strb	r2, [r3, #3]
			MACRO_ENVIA_AKNOLADGE_(RX_DESLIGA_LAMPADA)
 800437e:	4b3f      	ldr	r3, [pc, #252]	; (800447c <rxBluetooth+0x5c8>)
 8004380:	2201      	movs	r2, #1
 8004382:	721a      	strb	r2, [r3, #8]
 8004384:	4b3d      	ldr	r3, [pc, #244]	; (800447c <rxBluetooth+0x5c8>)
 8004386:	22ff      	movs	r2, #255	; 0xff
 8004388:	725a      	strb	r2, [r3, #9]
 800438a:	4b3c      	ldr	r3, [pc, #240]	; (800447c <rxBluetooth+0x5c8>)
 800438c:	2228      	movs	r2, #40	; 0x28
 800438e:	729a      	strb	r2, [r3, #10]
 8004390:	2103      	movs	r1, #3
 8004392:	483b      	ldr	r0, [pc, #236]	; (8004480 <rxBluetooth+0x5cc>)
 8004394:	f7fd f90e 	bl	80015b4 <Envia_bytes_UART>
			break;
 8004398:	e069      	b.n	800446e <rxBluetooth+0x5ba>
		case RX_LIMITE_LAMPADA:
			//---------ENDEREÇO | 0x30 | 0x30 | SPLampada | CRC | CRC
			PrimitiveStates.SPLampada = bluetooth._RxDataArr[2];
 800439a:	4b38      	ldr	r3, [pc, #224]	; (800447c <rxBluetooth+0x5c8>)
 800439c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80043a0:	4b35      	ldr	r3, [pc, #212]	; (8004478 <rxBluetooth+0x5c4>)
 80043a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 80043a6:	4b38      	ldr	r3, [pc, #224]	; (8004488 <rxBluetooth+0x5d4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2200      	movs	r2, #0
 80043ac:	2106      	movs	r1, #6
 80043ae:	4618      	mov	r0, r3
 80043b0:	f006 fa34 	bl	800a81c <osMessagePut>
			MACRO_ENVIA_AKNOLADGE_(RX_LIMITE_LAMPADA)
 80043b4:	4b31      	ldr	r3, [pc, #196]	; (800447c <rxBluetooth+0x5c8>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	721a      	strb	r2, [r3, #8]
 80043ba:	4b30      	ldr	r3, [pc, #192]	; (800447c <rxBluetooth+0x5c8>)
 80043bc:	22ff      	movs	r2, #255	; 0xff
 80043be:	725a      	strb	r2, [r3, #9]
 80043c0:	4b2e      	ldr	r3, [pc, #184]	; (800447c <rxBluetooth+0x5c8>)
 80043c2:	2230      	movs	r2, #48	; 0x30
 80043c4:	729a      	strb	r2, [r3, #10]
 80043c6:	2103      	movs	r1, #3
 80043c8:	482d      	ldr	r0, [pc, #180]	; (8004480 <rxBluetooth+0x5cc>)
 80043ca:	f7fd f8f3 	bl	80015b4 <Envia_bytes_UART>
			break;
 80043ce:	e04e      	b.n	800446e <rxBluetooth+0x5ba>
		case RX_CANCELA_PROCESSO:
			//---------ENDEREÇO | 0x29 | 0x29 | CRC | CRC
			desligaForno();
 80043d0:	f7fe fa62 	bl	8002898 <desligaForno>
			MACRO_ENVIA_AKNOLADGE_(RX_CANCELA_PROCESSO)
 80043d4:	4b29      	ldr	r3, [pc, #164]	; (800447c <rxBluetooth+0x5c8>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	721a      	strb	r2, [r3, #8]
 80043da:	4b28      	ldr	r3, [pc, #160]	; (800447c <rxBluetooth+0x5c8>)
 80043dc:	22ff      	movs	r2, #255	; 0xff
 80043de:	725a      	strb	r2, [r3, #9]
 80043e0:	4b26      	ldr	r3, [pc, #152]	; (800447c <rxBluetooth+0x5c8>)
 80043e2:	2229      	movs	r2, #41	; 0x29
 80043e4:	729a      	strb	r2, [r3, #10]
 80043e6:	2103      	movs	r1, #3
 80043e8:	4825      	ldr	r0, [pc, #148]	; (8004480 <rxBluetooth+0x5cc>)
 80043ea:	f7fd f8e3 	bl	80015b4 <Envia_bytes_UART>
			break;
 80043ee:	e03e      	b.n	800446e <rxBluetooth+0x5ba>
		case RX_PEDE_SENHA:
			if(bluetooth.JanelaConexao > 0)
 80043f0:	4b22      	ldr	r3, [pc, #136]	; (800447c <rxBluetooth+0x5c8>)
 80043f2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <rxBluetooth+0x556>
				osMessagePut(FilaTXBluetoothHandle, TX_CHAVE, 0);
 80043fa:	4b25      	ldr	r3, [pc, #148]	; (8004490 <rxBluetooth+0x5dc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2200      	movs	r2, #0
 8004400:	218b      	movs	r1, #139	; 0x8b
 8004402:	4618      	mov	r0, r3
 8004404:	f006 fa0a 	bl	800a81c <osMessagePut>
			else{
				osMessagePut(FilaTXBluetoothHandle, TX_CHAVE_ERRO, 0);
			}
			break;
 8004408:	e031      	b.n	800446e <rxBluetooth+0x5ba>
				osMessagePut(FilaTXBluetoothHandle, TX_CHAVE_ERRO, 0);
 800440a:	4b21      	ldr	r3, [pc, #132]	; (8004490 <rxBluetooth+0x5dc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2200      	movs	r2, #0
 8004410:	218c      	movs	r1, #140	; 0x8c
 8004412:	4618      	mov	r0, r3
 8004414:	f006 fa02 	bl	800a81c <osMessagePut>
			break;
 8004418:	e029      	b.n	800446e <rxBluetooth+0x5ba>
		case RX_RECEBEU_SENHA:
			if(		bluetooth._RxDataArr[3] == (bluetooth.chave >> 8) &&
 800441a:	4b18      	ldr	r3, [pc, #96]	; (800447c <rxBluetooth+0x5c8>)
 800441c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004420:	b29a      	uxth	r2, r3
 8004422:	4b16      	ldr	r3, [pc, #88]	; (800447c <rxBluetooth+0x5c8>)
 8004424:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004428:	0a1b      	lsrs	r3, r3, #8
 800442a:	b29b      	uxth	r3, r3
 800442c:	429a      	cmp	r2, r3
 800442e:	d115      	bne.n	800445c <rxBluetooth+0x5a8>
					bluetooth._RxDataArr[4] == (bluetooth.chave & 0x00ff) ){
 8004430:	4b12      	ldr	r3, [pc, #72]	; (800447c <rxBluetooth+0x5c8>)
 8004432:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004436:	461a      	mov	r2, r3
 8004438:	4b10      	ldr	r3, [pc, #64]	; (800447c <rxBluetooth+0x5c8>)
 800443a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800443e:	b2db      	uxtb	r3, r3
			if(		bluetooth._RxDataArr[3] == (bluetooth.chave >> 8) &&
 8004440:	429a      	cmp	r2, r3
 8004442:	d10b      	bne.n	800445c <rxBluetooth+0x5a8>
				//--->	CHAVE CORRETA
				bluetooth.MaquinaConexao	= RX_VALIDADO;
 8004444:	4b0d      	ldr	r3, [pc, #52]	; (800447c <rxBluetooth+0x5c8>)
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				osMessagePut(FilaTXBluetoothHandle, TX_RESULTADO_CHAVE_OK, 0);
 800444c:	4b10      	ldr	r3, [pc, #64]	; (8004490 <rxBluetooth+0x5dc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2200      	movs	r2, #0
 8004452:	218d      	movs	r1, #141	; 0x8d
 8004454:	4618      	mov	r0, r3
 8004456:	f006 f9e1 	bl	800a81c <osMessagePut>
				break;
 800445a:	e008      	b.n	800446e <rxBluetooth+0x5ba>
			}else{
				//--->	CHAVE ERRADA
				osMessagePut(FilaTXBluetoothHandle, TX_RESULTADO_CHAVE_ERRO, 0);
 800445c:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <rxBluetooth+0x5dc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2200      	movs	r2, #0
 8004462:	218e      	movs	r1, #142	; 0x8e
 8004464:	4618      	mov	r0, r3
 8004466:	f006 f9d9 	bl	800a81c <osMessagePut>
			}
			break;
 800446a:	e000      	b.n	800446e <rxBluetooth+0x5ba>
			break;
 800446c:	bf00      	nop
		}
	}
}
 800446e:	bf00      	nop
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20001328 	.word	0x20001328
 800447c:	200011d8 	.word	0x200011d8
 8004480:	200011e0 	.word	0x200011e0
 8004484:	20001440 	.word	0x20001440
 8004488:	200011c4 	.word	0x200011c4
 800448c:	40010c00 	.word	0x40010c00
 8004490:	200011bc 	.word	0x200011bc

08004494 <StartBuzzer>:
void sequencia1Buzzer(void);

extern osThreadId TaskBuzzerHandle;

void StartBuzzer(void const * argument)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{
		//todo sequencia de piscar até receber o comando de iniciar ou de parar completamente
		sequencia1Buzzer();
 800449c:	f000 f80e 	bl	80044bc <sequencia1Buzzer>

		osThreadSuspend(TaskBuzzerHandle);
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <StartBuzzer+0x24>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f006 fa6d 	bl	800a984 <osThreadSuspend>
		osThreadYield();
 80044aa:	f006 f833 	bl	800a514 <osThreadYield>
		osDelay(100);
 80044ae:	2064      	movs	r0, #100	; 0x64
 80044b0:	f006 f842 	bl	800a538 <osDelay>
		sequencia1Buzzer();
 80044b4:	e7f2      	b.n	800449c <StartBuzzer+0x8>
 80044b6:	bf00      	nop
 80044b8:	20000c6c 	.word	0x20000c6c

080044bc <sequencia1Buzzer>:
	}
	/* USER CODE END StartTaskBuzzer */
}

void sequencia1Buzzer(void){
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
	M_BUZZER_ON
 80044c0:	210c      	movs	r1, #12
 80044c2:	4821      	ldr	r0, [pc, #132]	; (8004548 <sequencia1Buzzer+0x8c>)
 80044c4:	f003 fee6 	bl	8008294 <HAL_TIM_PWM_Start>
	LAMPADA_ON
 80044c8:	2201      	movs	r2, #1
 80044ca:	2140      	movs	r1, #64	; 0x40
 80044cc:	481f      	ldr	r0, [pc, #124]	; (800454c <sequencia1Buzzer+0x90>)
 80044ce:	f001 feb8 	bl	8006242 <HAL_GPIO_WritePin>
 80044d2:	4b1f      	ldr	r3, [pc, #124]	; (8004550 <sequencia1Buzzer+0x94>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	70da      	strb	r2, [r3, #3]
	osDelay(300);
 80044d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80044dc:	f006 f82c 	bl	800a538 <osDelay>
	M_BUZZER_OFF
 80044e0:	210c      	movs	r1, #12
 80044e2:	4819      	ldr	r0, [pc, #100]	; (8004548 <sequencia1Buzzer+0x8c>)
 80044e4:	f003 ff78 	bl	80083d8 <HAL_TIM_PWM_Stop>
	LAMPADA_OFF
 80044e8:	2200      	movs	r2, #0
 80044ea:	2140      	movs	r1, #64	; 0x40
 80044ec:	4817      	ldr	r0, [pc, #92]	; (800454c <sequencia1Buzzer+0x90>)
 80044ee:	f001 fea8 	bl	8006242 <HAL_GPIO_WritePin>
 80044f2:	4b17      	ldr	r3, [pc, #92]	; (8004550 <sequencia1Buzzer+0x94>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80044fa:	4b15      	ldr	r3, [pc, #84]	; (8004550 <sequencia1Buzzer+0x94>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	70da      	strb	r2, [r3, #3]
	osDelay(50);
 8004500:	2032      	movs	r0, #50	; 0x32
 8004502:	f006 f819 	bl	800a538 <osDelay>
	M_BUZZER_ON
 8004506:	210c      	movs	r1, #12
 8004508:	480f      	ldr	r0, [pc, #60]	; (8004548 <sequencia1Buzzer+0x8c>)
 800450a:	f003 fec3 	bl	8008294 <HAL_TIM_PWM_Start>
	LAMPADA_ON
 800450e:	2201      	movs	r2, #1
 8004510:	2140      	movs	r1, #64	; 0x40
 8004512:	480e      	ldr	r0, [pc, #56]	; (800454c <sequencia1Buzzer+0x90>)
 8004514:	f001 fe95 	bl	8006242 <HAL_GPIO_WritePin>
 8004518:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <sequencia1Buzzer+0x94>)
 800451a:	2201      	movs	r2, #1
 800451c:	70da      	strb	r2, [r3, #3]
	osDelay(250);
 800451e:	20fa      	movs	r0, #250	; 0xfa
 8004520:	f006 f80a 	bl	800a538 <osDelay>
	M_BUZZER_OFF
 8004524:	210c      	movs	r1, #12
 8004526:	4808      	ldr	r0, [pc, #32]	; (8004548 <sequencia1Buzzer+0x8c>)
 8004528:	f003 ff56 	bl	80083d8 <HAL_TIM_PWM_Stop>
	LAMPADA_OFF
 800452c:	2200      	movs	r2, #0
 800452e:	2140      	movs	r1, #64	; 0x40
 8004530:	4806      	ldr	r0, [pc, #24]	; (800454c <sequencia1Buzzer+0x90>)
 8004532:	f001 fe86 	bl	8006242 <HAL_GPIO_WritePin>
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <sequencia1Buzzer+0x94>)
 8004538:	2200      	movs	r2, #0
 800453a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800453e:	4b04      	ldr	r3, [pc, #16]	; (8004550 <sequencia1Buzzer+0x94>)
 8004540:	2200      	movs	r2, #0
 8004542:	70da      	strb	r2, [r3, #3]
}
 8004544:	bf00      	nop
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000abc 	.word	0x20000abc
 800454c:	40010c00 	.word	0x40010c00
 8004550:	20001328 	.word	0x20001328

08004554 <StartEeprom>:

RTC_DateTypeDef datetoUpdate;
RTC_TimeTypeDef timeToUpdate;

void StartEeprom(void const * argument)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	initEeprom();
 800455c:	f000 f80a 	bl	8004574 <initEeprom>

	for(;;)
	{
		processaEeprom();
 8004560:	f000 f8cc 	bl	80046fc <processaEeprom>
		osThreadYield();
 8004564:	f005 ffd6 	bl	800a514 <osThreadYield>
		osDelay(500);
 8004568:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800456c:	f005 ffe4 	bl	800a538 <osDelay>
		processaEeprom();
 8004570:	e7f6      	b.n	8004560 <StartEeprom+0xc>
	...

08004574 <initEeprom>:
	}
}

void initEeprom(void){
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af06      	add	r7, sp, #24
	//inicializacao ad eeprom
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 800457a:	4a45      	ldr	r2, [pc, #276]	; (8004690 <initEeprom+0x11c>)
 800457c:	4945      	ldr	r1, [pc, #276]	; (8004694 <initEeprom+0x120>)
 800457e:	4846      	ldr	r0, [pc, #280]	; (8004698 <initEeprom+0x124>)
 8004580:	f7fd fb11 	bl	8001ba6 <EepromInit>
	//	zeraTodosMeses(&eeprom);

	//criacao dos objetos variaveis
	EepromAddVar(&eeprom, &tempoDelayLuz, 			"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA8BITS,	5,		35,		250		,(uint32_t *)&PrimitiveStates.SPLampada);
 8004584:	4b45      	ldr	r3, [pc, #276]	; (800469c <initEeprom+0x128>)
 8004586:	9304      	str	r3, [sp, #16]
 8004588:	23fa      	movs	r3, #250	; 0xfa
 800458a:	9303      	str	r3, [sp, #12]
 800458c:	2323      	movs	r3, #35	; 0x23
 800458e:	9302      	str	r3, [sp, #8]
 8004590:	2305      	movs	r3, #5
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	2301      	movs	r3, #1
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	2304      	movs	r3, #4
 800459a:	4a41      	ldr	r2, [pc, #260]	; (80046a0 <initEeprom+0x12c>)
 800459c:	4941      	ldr	r1, [pc, #260]	; (80046a4 <initEeprom+0x130>)
 800459e:	483e      	ldr	r0, [pc, #248]	; (8004698 <initEeprom+0x124>)
 80045a0:	f7fd fb17 	bl	8001bd2 <EepromAddVar>
	EepromAddVar(&eeprom, &horimetroHoras, 			"addrHORIMETRO", 		addrHORIMETRO,		DATA16BITS,	0,		0,		0		,(uint32_t *)&Calendario.Horimetro_horas);
 80045a4:	4b40      	ldr	r3, [pc, #256]	; (80046a8 <initEeprom+0x134>)
 80045a6:	9304      	str	r3, [sp, #16]
 80045a8:	2300      	movs	r3, #0
 80045aa:	9303      	str	r3, [sp, #12]
 80045ac:	2300      	movs	r3, #0
 80045ae:	9302      	str	r3, [sp, #8]
 80045b0:	2300      	movs	r3, #0
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	2302      	movs	r3, #2
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	2305      	movs	r3, #5
 80045ba:	4a3c      	ldr	r2, [pc, #240]	; (80046ac <initEeprom+0x138>)
 80045bc:	493c      	ldr	r1, [pc, #240]	; (80046b0 <initEeprom+0x13c>)
 80045be:	4836      	ldr	r0, [pc, #216]	; (8004698 <initEeprom+0x124>)
 80045c0:	f7fd fb07 	bl	8001bd2 <EepromAddVar>
	EepromAddVar(&eeprom, &horimetroMinutos, 		"addrMINUTIMETRO", 		addrMINUTIMETRO,	DATA8BITS,	0,		0,		0		,(uint32_t *)&Calendario.Horimetro_parcial_min);
 80045c4:	4b3b      	ldr	r3, [pc, #236]	; (80046b4 <initEeprom+0x140>)
 80045c6:	9304      	str	r3, [sp, #16]
 80045c8:	2300      	movs	r3, #0
 80045ca:	9303      	str	r3, [sp, #12]
 80045cc:	2300      	movs	r3, #0
 80045ce:	9302      	str	r3, [sp, #8]
 80045d0:	2300      	movs	r3, #0
 80045d2:	9301      	str	r3, [sp, #4]
 80045d4:	2301      	movs	r3, #1
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	2306      	movs	r3, #6
 80045da:	4a37      	ldr	r2, [pc, #220]	; (80046b8 <initEeprom+0x144>)
 80045dc:	4937      	ldr	r1, [pc, #220]	; (80046bc <initEeprom+0x148>)
 80045de:	482e      	ldr	r0, [pc, #184]	; (8004698 <initEeprom+0x124>)
 80045e0:	f7fd faf7 	bl	8001bd2 <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoDia, 			"addrINST_DIA", 		addrINST_DIA,		DATA8BITS,	1,		0,		31		,(uint32_t *)&Calendario.Data_instalacao.Date);
 80045e4:	4b36      	ldr	r3, [pc, #216]	; (80046c0 <initEeprom+0x14c>)
 80045e6:	9304      	str	r3, [sp, #16]
 80045e8:	231f      	movs	r3, #31
 80045ea:	9303      	str	r3, [sp, #12]
 80045ec:	2300      	movs	r3, #0
 80045ee:	9302      	str	r3, [sp, #8]
 80045f0:	2301      	movs	r3, #1
 80045f2:	9301      	str	r3, [sp, #4]
 80045f4:	2301      	movs	r3, #1
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	230c      	movs	r3, #12
 80045fa:	4a32      	ldr	r2, [pc, #200]	; (80046c4 <initEeprom+0x150>)
 80045fc:	4932      	ldr	r1, [pc, #200]	; (80046c8 <initEeprom+0x154>)
 80045fe:	4826      	ldr	r0, [pc, #152]	; (8004698 <initEeprom+0x124>)
 8004600:	f7fd fae7 	bl	8001bd2 <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoMes, 			"addrINST_MES", 		addrINST_MES,		DATA8BITS,	1,		1,		12		,(uint32_t *)&Calendario.Data_instalacao.Month);
 8004604:	4b31      	ldr	r3, [pc, #196]	; (80046cc <initEeprom+0x158>)
 8004606:	9304      	str	r3, [sp, #16]
 8004608:	230c      	movs	r3, #12
 800460a:	9303      	str	r3, [sp, #12]
 800460c:	2301      	movs	r3, #1
 800460e:	9302      	str	r3, [sp, #8]
 8004610:	2301      	movs	r3, #1
 8004612:	9301      	str	r3, [sp, #4]
 8004614:	2301      	movs	r3, #1
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	230d      	movs	r3, #13
 800461a:	4a2d      	ldr	r2, [pc, #180]	; (80046d0 <initEeprom+0x15c>)
 800461c:	492d      	ldr	r1, [pc, #180]	; (80046d4 <initEeprom+0x160>)
 800461e:	481e      	ldr	r0, [pc, #120]	; (8004698 <initEeprom+0x124>)
 8004620:	f7fd fad7 	bl	8001bd2 <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoAno, 			"addrINST_ANO", 		addrINST_ANO,		DATA8BITS,	23,		23,		99		,(uint32_t *)&Calendario.Data_instalacao.Year);
 8004624:	4b2c      	ldr	r3, [pc, #176]	; (80046d8 <initEeprom+0x164>)
 8004626:	9304      	str	r3, [sp, #16]
 8004628:	2363      	movs	r3, #99	; 0x63
 800462a:	9303      	str	r3, [sp, #12]
 800462c:	2317      	movs	r3, #23
 800462e:	9302      	str	r3, [sp, #8]
 8004630:	2317      	movs	r3, #23
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	2301      	movs	r3, #1
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	230e      	movs	r3, #14
 800463a:	4a28      	ldr	r2, [pc, #160]	; (80046dc <initEeprom+0x168>)
 800463c:	4928      	ldr	r1, [pc, #160]	; (80046e0 <initEeprom+0x16c>)
 800463e:	4816      	ldr	r0, [pc, #88]	; (8004698 <initEeprom+0x124>)
 8004640:	f7fd fac7 	bl	8001bd2 <EepromAddVar>
	EepromAddVar(&eeprom, &totalCiclos, 			"addrTOTAL_GERAL", 		addrTOTAL_GERAL,	DATA16BITS,	0,		0,		0		,(uint32_t *)&Calendario.TotalCiclos);
 8004644:	4b27      	ldr	r3, [pc, #156]	; (80046e4 <initEeprom+0x170>)
 8004646:	9304      	str	r3, [sp, #16]
 8004648:	2300      	movs	r3, #0
 800464a:	9303      	str	r3, [sp, #12]
 800464c:	2300      	movs	r3, #0
 800464e:	9302      	str	r3, [sp, #8]
 8004650:	2300      	movs	r3, #0
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	2302      	movs	r3, #2
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	230f      	movs	r3, #15
 800465a:	4a23      	ldr	r2, [pc, #140]	; (80046e8 <initEeprom+0x174>)
 800465c:	4923      	ldr	r1, [pc, #140]	; (80046ec <initEeprom+0x178>)
 800465e:	480e      	ldr	r0, [pc, #56]	; (8004698 <initEeprom+0x124>)
 8004660:	f7fd fab7 	bl	8001bd2 <EepromAddVar>
	EepromAddVar(&eeprom, &LimiteTemperatura, 		"addrLIMITE_TEMP", 		addrLIMITE_TEMP,	DATA16BITS,	0,		0,		0		,(uint32_t *)&PrimitiveStates.LimiteTemp);
 8004664:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <initEeprom+0x17c>)
 8004666:	9304      	str	r3, [sp, #16]
 8004668:	2300      	movs	r3, #0
 800466a:	9303      	str	r3, [sp, #12]
 800466c:	2300      	movs	r3, #0
 800466e:	9302      	str	r3, [sp, #8]
 8004670:	2300      	movs	r3, #0
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	2302      	movs	r3, #2
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2314      	movs	r3, #20
 800467a:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <initEeprom+0x180>)
 800467c:	491e      	ldr	r1, [pc, #120]	; (80046f8 <initEeprom+0x184>)
 800467e:	4806      	ldr	r0, [pc, #24]	; (8004698 <initEeprom+0x124>)
 8004680:	f7fd faa7 	bl	8001bd2 <EepromAddVar>

	RestauraPadraoTudo(&eeprom);
 8004684:	4804      	ldr	r0, [pc, #16]	; (8004698 <initEeprom+0x124>)
 8004686:	f7fd fc37 	bl	8001ef8 <RestauraPadraoTudo>
	//faz o download dos objetos
	//	EepromDownloadValores(&eeprom);
}
 800468a:	bf00      	nop
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	200011c4 	.word	0x200011c4
 8004694:	20000a54 	.word	0x20000a54
 8004698:	20001444 	.word	0x20001444
 800469c:	20001355 	.word	0x20001355
 80046a0:	0800e984 	.word	0x0800e984
 80046a4:	2000161c 	.word	0x2000161c
 80046a8:	20001364 	.word	0x20001364
 80046ac:	0800e994 	.word	0x0800e994
 80046b0:	20001504 	.word	0x20001504
 80046b4:	20001366 	.word	0x20001366
 80046b8:	0800e9a4 	.word	0x0800e9a4
 80046bc:	2000152c 	.word	0x2000152c
 80046c0:	20001362 	.word	0x20001362
 80046c4:	0800e9b4 	.word	0x0800e9b4
 80046c8:	20001554 	.word	0x20001554
 80046cc:	20001361 	.word	0x20001361
 80046d0:	0800e9c4 	.word	0x0800e9c4
 80046d4:	2000157c 	.word	0x2000157c
 80046d8:	20001363 	.word	0x20001363
 80046dc:	0800e9d4 	.word	0x0800e9d4
 80046e0:	200015a4 	.word	0x200015a4
 80046e4:	20001368 	.word	0x20001368
 80046e8:	0800e9e4 	.word	0x0800e9e4
 80046ec:	200015cc 	.word	0x200015cc
 80046f0:	20001358 	.word	0x20001358
 80046f4:	0800e9f4 	.word	0x0800e9f4
 80046f8:	200015f4 	.word	0x200015f4

080046fc <processaEeprom>:

void processaEeprom(void){
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
	osEvent  evt;

	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 8004702:	4b46      	ldr	r3, [pc, #280]	; (800481c <processaEeprom+0x120>)
 8004704:	6819      	ldr	r1, [r3, #0]
 8004706:	1d3b      	adds	r3, r7, #4
 8004708:	f04f 32ff 	mov.w	r2, #4294967295
 800470c:	4618      	mov	r0, r3
 800470e:	f006 f8c5 	bl	800a89c <osMessageGet>
	if (evt.status == osEventMessage) {
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b10      	cmp	r3, #16
 8004716:	d17c      	bne.n	8004812 <processaEeprom+0x116>

		switch ((unsigned int)evt.value.p) {
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b07      	cmp	r3, #7
 800471c:	d874      	bhi.n	8004808 <processaEeprom+0x10c>
 800471e:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <processaEeprom+0x28>)
 8004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004724:	0800475d 	.word	0x0800475d
 8004728:	08004773 	.word	0x08004773
 800472c:	08004809 	.word	0x08004809
 8004730:	08004809 	.word	0x08004809
 8004734:	080047c7 	.word	0x080047c7
 8004738:	080047f1 	.word	0x080047f1
 800473c:	080047fd 	.word	0x080047fd
 8004740:	08004745 	.word	0x08004745

		case CEepromNewCile:
			Calendario.TotalCiclos+=1;
 8004744:	4b36      	ldr	r3, [pc, #216]	; (8004820 <processaEeprom+0x124>)
 8004746:	891b      	ldrh	r3, [r3, #8]
 8004748:	3301      	adds	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	4b34      	ldr	r3, [pc, #208]	; (8004820 <processaEeprom+0x124>)
 800474e:	811a      	strh	r2, [r3, #8]
			EepromSetVar(&eeprom, &totalCiclos, 	0);
 8004750:	2200      	movs	r2, #0
 8004752:	4934      	ldr	r1, [pc, #208]	; (8004824 <processaEeprom+0x128>)
 8004754:	4834      	ldr	r0, [pc, #208]	; (8004828 <processaEeprom+0x12c>)
 8004756:	f7fd fa97 	bl	8001c88 <EepromSetVar>
			break;
 800475a:	e05a      	b.n	8004812 <processaEeprom+0x116>
		case CEepromHorimetro:
			EepromSetVar(&eeprom, &horimetroHoras, 	0);
 800475c:	2200      	movs	r2, #0
 800475e:	4933      	ldr	r1, [pc, #204]	; (800482c <processaEeprom+0x130>)
 8004760:	4831      	ldr	r0, [pc, #196]	; (8004828 <processaEeprom+0x12c>)
 8004762:	f7fd fa91 	bl	8001c88 <EepromSetVar>
			EepromSetVar(&eeprom, &horimetroMinutos, 	0);
 8004766:	2200      	movs	r2, #0
 8004768:	4931      	ldr	r1, [pc, #196]	; (8004830 <processaEeprom+0x134>)
 800476a:	482f      	ldr	r0, [pc, #188]	; (8004828 <processaEeprom+0x12c>)
 800476c:	f7fd fa8c 	bl	8001c88 <EepromSetVar>
			break;
 8004770:	e04f      	b.n	8004812 <processaEeprom+0x116>
		case CEepromDataInstalacao:
			EepromSetVar(&eeprom, &instalacaoDia, 	datetoUpdate.Date);
 8004772:	4b30      	ldr	r3, [pc, #192]	; (8004834 <processaEeprom+0x138>)
 8004774:	789b      	ldrb	r3, [r3, #2]
 8004776:	461a      	mov	r2, r3
 8004778:	492f      	ldr	r1, [pc, #188]	; (8004838 <processaEeprom+0x13c>)
 800477a:	482b      	ldr	r0, [pc, #172]	; (8004828 <processaEeprom+0x12c>)
 800477c:	f7fd fa84 	bl	8001c88 <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoMes, 	datetoUpdate.Month);
 8004780:	4b2c      	ldr	r3, [pc, #176]	; (8004834 <processaEeprom+0x138>)
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	461a      	mov	r2, r3
 8004786:	492d      	ldr	r1, [pc, #180]	; (800483c <processaEeprom+0x140>)
 8004788:	4827      	ldr	r0, [pc, #156]	; (8004828 <processaEeprom+0x12c>)
 800478a:	f7fd fa7d 	bl	8001c88 <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoAno, 	datetoUpdate.Year);
 800478e:	4b29      	ldr	r3, [pc, #164]	; (8004834 <processaEeprom+0x138>)
 8004790:	78db      	ldrb	r3, [r3, #3]
 8004792:	461a      	mov	r2, r3
 8004794:	492a      	ldr	r1, [pc, #168]	; (8004840 <processaEeprom+0x144>)
 8004796:	4824      	ldr	r0, [pc, #144]	; (8004828 <processaEeprom+0x12c>)
 8004798:	f7fd fa76 	bl	8001c88 <EepromSetVar>
			if (HAL_RTC_SetTime(&hrtc, &timeToUpdate, RTC_FORMAT_BIN) != HAL_OK){
 800479c:	2200      	movs	r2, #0
 800479e:	4929      	ldr	r1, [pc, #164]	; (8004844 <processaEeprom+0x148>)
 80047a0:	4829      	ldr	r0, [pc, #164]	; (8004848 <processaEeprom+0x14c>)
 80047a2:	f003 f985 	bl	8007ab0 <HAL_RTC_SetTime>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <processaEeprom+0xb4>
				Error_Handler();
 80047ac:	f7fe f9ec 	bl	8002b88 <Error_Handler>
			}
			if (HAL_RTC_SetDate(&hrtc, &datetoUpdate, RTC_FORMAT_BIN) != HAL_OK){
 80047b0:	2200      	movs	r2, #0
 80047b2:	4920      	ldr	r1, [pc, #128]	; (8004834 <processaEeprom+0x138>)
 80047b4:	4824      	ldr	r0, [pc, #144]	; (8004848 <processaEeprom+0x14c>)
 80047b6:	f003 fa13 	bl	8007be0 <HAL_RTC_SetDate>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d025      	beq.n	800480c <processaEeprom+0x110>
				Error_Handler();
 80047c0:	f7fe f9e2 	bl	8002b88 <Error_Handler>
			}
			break;
 80047c4:	e022      	b.n	800480c <processaEeprom+0x110>
			break;
		case CEepromSoftReset:
			break;
		case CEepromAtualizaHora:

			if (HAL_RTC_SetTime(&hrtc, &timeToUpdate, RTC_FORMAT_BIN) != HAL_OK){
 80047c6:	2200      	movs	r2, #0
 80047c8:	491e      	ldr	r1, [pc, #120]	; (8004844 <processaEeprom+0x148>)
 80047ca:	481f      	ldr	r0, [pc, #124]	; (8004848 <processaEeprom+0x14c>)
 80047cc:	f003 f970 	bl	8007ab0 <HAL_RTC_SetTime>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <processaEeprom+0xde>
				Error_Handler();
 80047d6:	f7fe f9d7 	bl	8002b88 <Error_Handler>
			}
			if (HAL_RTC_SetDate(&hrtc, &datetoUpdate, RTC_FORMAT_BIN) != HAL_OK){
 80047da:	2200      	movs	r2, #0
 80047dc:	4915      	ldr	r1, [pc, #84]	; (8004834 <processaEeprom+0x138>)
 80047de:	481a      	ldr	r0, [pc, #104]	; (8004848 <processaEeprom+0x14c>)
 80047e0:	f003 f9fe 	bl	8007be0 <HAL_RTC_SetDate>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d012      	beq.n	8004810 <processaEeprom+0x114>
				Error_Handler();
 80047ea:	f7fe f9cd 	bl	8002b88 <Error_Handler>
			}
			break;
 80047ee:	e00f      	b.n	8004810 <processaEeprom+0x114>
		case CEepromLimiteTemp:
			EepromSetVar(&eeprom, &LimiteTemperatura, 	0);
 80047f0:	2200      	movs	r2, #0
 80047f2:	4916      	ldr	r1, [pc, #88]	; (800484c <processaEeprom+0x150>)
 80047f4:	480c      	ldr	r0, [pc, #48]	; (8004828 <processaEeprom+0x12c>)
 80047f6:	f7fd fa47 	bl	8001c88 <EepromSetVar>
			break;
 80047fa:	e00a      	b.n	8004812 <processaEeprom+0x116>
		case CEepromLimiteLuz:
			EepromSetVar(&eeprom, &tempoDelayLuz, 	0);
 80047fc:	2200      	movs	r2, #0
 80047fe:	4914      	ldr	r1, [pc, #80]	; (8004850 <processaEeprom+0x154>)
 8004800:	4809      	ldr	r0, [pc, #36]	; (8004828 <processaEeprom+0x12c>)
 8004802:	f7fd fa41 	bl	8001c88 <EepromSetVar>
			break;
 8004806:	e004      	b.n	8004812 <processaEeprom+0x116>
		default:
			break;
 8004808:	bf00      	nop
 800480a:	e002      	b.n	8004812 <processaEeprom+0x116>
			break;
 800480c:	bf00      	nop
 800480e:	e000      	b.n	8004812 <processaEeprom+0x116>
			break;
 8004810:	bf00      	nop
		}
	}
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	200011c4 	.word	0x200011c4
 8004820:	20001360 	.word	0x20001360
 8004824:	200015cc 	.word	0x200015cc
 8004828:	20001444 	.word	0x20001444
 800482c:	20001504 	.word	0x20001504
 8004830:	2000152c 	.word	0x2000152c
 8004834:	20001644 	.word	0x20001644
 8004838:	20001554 	.word	0x20001554
 800483c:	2000157c 	.word	0x2000157c
 8004840:	200015a4 	.word	0x200015a4
 8004844:	20001648 	.word	0x20001648
 8004848:	20000aa8 	.word	0x20000aa8
 800484c:	200015f4 	.word	0x200015f4
 8004850:	2000161c 	.word	0x2000161c

08004854 <atualizaDataEeprom>:

void atualizaDataEeprom(RTC_DateTypeDef data, RTC_TimeTypeDef hora){
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
	datetoUpdate = data;
 800485e:	4a1b      	ldr	r2, [pc, #108]	; (80048cc <atualizaDataEeprom+0x78>)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6013      	str	r3, [r2, #0]
	timeToUpdate = hora;
 8004864:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <atualizaDataEeprom+0x7c>)
 8004866:	463a      	mov	r2, r7
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	4611      	mov	r1, r2
 800486c:	8019      	strh	r1, [r3, #0]
 800486e:	3302      	adds	r3, #2
 8004870:	0c12      	lsrs	r2, r2, #16
 8004872:	701a      	strb	r2, [r3, #0]

	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 8004874:	4b17      	ldr	r3, [pc, #92]	; (80048d4 <atualizaDataEeprom+0x80>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <atualizaDataEeprom+0x30>
 800487c:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <atualizaDataEeprom+0x80>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2b1f      	cmp	r3, #31
 8004882:	d917      	bls.n	80048b4 <atualizaDataEeprom+0x60>
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 8004884:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <atualizaDataEeprom+0x84>)
 8004886:	685b      	ldr	r3, [r3, #4]
	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <atualizaDataEeprom+0x40>
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 800488c:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <atualizaDataEeprom+0x84>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b0c      	cmp	r3, #12
 8004892:	d90f      	bls.n	80048b4 <atualizaDataEeprom+0x60>
			(instalacaoAno.valor == 0 || instalacaoAno.valor > 200)){
 8004894:	4b11      	ldr	r3, [pc, #68]	; (80048dc <atualizaDataEeprom+0x88>)
 8004896:	685b      	ldr	r3, [r3, #4]
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <atualizaDataEeprom+0x50>
			(instalacaoAno.valor == 0 || instalacaoAno.valor > 200)){
 800489c:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <atualizaDataEeprom+0x88>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2bc8      	cmp	r3, #200	; 0xc8
 80048a2:	d907      	bls.n	80048b4 <atualizaDataEeprom+0x60>
		//primeiro recebimento de data
		osMessagePut(FilaEepromHandle, CEepromDataInstalacao, 0);
 80048a4:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <atualizaDataEeprom+0x8c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2200      	movs	r2, #0
 80048aa:	2101      	movs	r1, #1
 80048ac:	4618      	mov	r0, r3
 80048ae:	f005 ffb5 	bl	800a81c <osMessagePut>
 80048b2:	e007      	b.n	80048c4 <atualizaDataEeprom+0x70>
	}else{
		//gravacao padrao de data e hora
		osMessagePut(FilaEepromHandle, CEepromAtualizaHora, 0);
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <atualizaDataEeprom+0x8c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2200      	movs	r2, #0
 80048ba:	2104      	movs	r1, #4
 80048bc:	4618      	mov	r0, r3
 80048be:	f005 ffad 	bl	800a81c <osMessagePut>
	}
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20001644 	.word	0x20001644
 80048d0:	20001648 	.word	0x20001648
 80048d4:	20001554 	.word	0x20001554
 80048d8:	2000157c 	.word	0x2000157c
 80048dc:	200015a4 	.word	0x200015a4
 80048e0:	200011c4 	.word	0x200011c4

080048e4 <StartTemperatura>:
//---variaveis PID
double TempTeto, TempLastro, PIDOutTeto, PIDOutLastro;
PID_TypeDef TPIDTeto,TPIDLastro;


void StartTemperatura(void const * argument){
 80048e4:	b5b0      	push	{r4, r5, r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]

	initPID();
 80048ec:	f000 f858 	bl	80049a0 <initPID>

	for(;;)	{

		computaPID();
 80048f0:	f000 f8d6 	bl	8004aa0 <computaPID>
		osThreadYield();
 80048f4:	f005 fe0e 	bl	800a514 <osThreadYield>

		/*	-Em aquecimento
		 * 		podendo:
		 * 			->resetar timers realtime
		 * 			->no else, vindo do aquecimento gera notificacao de temperatura alcancada	*/
		if(PrimitiveStates.RealtimeTeto<(PrimitiveStates.SetPointTeto)-5 ||
 80048f8:	4b27      	ldr	r3, [pc, #156]	; (8004998 <StartTemperatura+0xb4>)
 80048fa:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80048fe:	4b26      	ldr	r3, [pc, #152]	; (8004998 <StartTemperatura+0xb4>)
 8004900:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	4b24      	ldr	r3, [pc, #144]	; (800499c <StartTemperatura+0xb8>)
 800490a:	f7fb fc2d 	bl	8000168 <__aeabi_dsub>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4620      	mov	r0, r4
 8004914:	4629      	mov	r1, r5
 8004916:	f7fc f851 	bl	80009bc <__aeabi_dcmplt>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d113      	bne.n	8004948 <StartTemperatura+0x64>
				PrimitiveStates.RealtimeLastro<(PrimitiveStates.SetPointLastro)-5){
 8004920:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <StartTemperatura+0xb4>)
 8004922:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004926:	4b1c      	ldr	r3, [pc, #112]	; (8004998 <StartTemperatura+0xb4>)
 8004928:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	4b1a      	ldr	r3, [pc, #104]	; (800499c <StartTemperatura+0xb8>)
 8004932:	f7fb fc19 	bl	8000168 <__aeabi_dsub>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
		if(PrimitiveStates.RealtimeTeto<(PrimitiveStates.SetPointTeto)-5 ||
 800493a:	4620      	mov	r0, r4
 800493c:	4629      	mov	r1, r5
 800493e:	f7fc f83d 	bl	80009bc <__aeabi_dcmplt>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <StartTemperatura+0x76>

			PrimitiveStates.MaquinaAquecimento 	= buscandoTemp;
 8004948:	4b13      	ldr	r3, [pc, #76]	; (8004998 <StartTemperatura+0xb4>)
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			PrimitiveStates.stateMaquina 		= aquecendo;
 8004950:	4b11      	ldr	r3, [pc, #68]	; (8004998 <StartTemperatura+0xb4>)
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8004958:	e019      	b.n	800498e <StartTemperatura+0xaa>

		}else 	if(PrimitiveStates.RealtimeTeto>=PrimitiveStates.SetPointTeto ||
 800495a:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <StartTemperatura+0xb4>)
 800495c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <StartTemperatura+0xb4>)
 8004962:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004966:	f7fc f83d 	bl	80009e4 <__aeabi_dcmpge>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10a      	bne.n	8004986 <StartTemperatura+0xa2>
				PrimitiveStates.RealtimeLastro>=PrimitiveStates.SetPointLastro){
 8004970:	4b09      	ldr	r3, [pc, #36]	; (8004998 <StartTemperatura+0xb4>)
 8004972:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <StartTemperatura+0xb4>)
 8004978:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
		}else 	if(PrimitiveStates.RealtimeTeto>=PrimitiveStates.SetPointTeto ||
 800497c:	f7fc f832 	bl	80009e4 <__aeabi_dcmpge>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <StartTemperatura+0xaa>

			PrimitiveStates.MaquinaAquecimento = mantendoTemp;
 8004986:	4b04      	ldr	r3, [pc, #16]	; (8004998 <StartTemperatura+0xb4>)
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		}

		osDelay(TIME_PID_CALC);
 800498e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004992:	f005 fdd1 	bl	800a538 <osDelay>
		computaPID();
 8004996:	e7ab      	b.n	80048f0 <StartTemperatura+0xc>
 8004998:	20001328 	.word	0x20001328
 800499c:	40140000 	.word	0x40140000

080049a0 <initPID>:
	}
}


void initPID(void){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af08      	add	r7, sp, #32

	PID(&TPIDTeto, 		&PrimitiveStates.RealtimeTeto, 		&PIDOutTeto, 	&PrimitiveStates.SetPointTeto, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 80049a6:	2300      	movs	r3, #0
 80049a8:	9307      	str	r3, [sp, #28]
 80049aa:	2301      	movs	r3, #1
 80049ac:	9306      	str	r3, [sp, #24]
 80049ae:	a32e      	add	r3, pc, #184	; (adr r3, 8004a68 <initPID+0xc8>)
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049b8:	a32d      	add	r3, pc, #180	; (adr r3, 8004a70 <initPID+0xd0>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	4b2c      	ldr	r3, [pc, #176]	; (8004a78 <initPID+0xd8>)
 80049c8:	e9cd 2300 	strd	r2, r3, [sp]
 80049cc:	4b2b      	ldr	r3, [pc, #172]	; (8004a7c <initPID+0xdc>)
 80049ce:	4a2c      	ldr	r2, [pc, #176]	; (8004a80 <initPID+0xe0>)
 80049d0:	492c      	ldr	r1, [pc, #176]	; (8004a84 <initPID+0xe4>)
 80049d2:	482d      	ldr	r0, [pc, #180]	; (8004a88 <initPID+0xe8>)
 80049d4:	f7fe f918 	bl	8002c08 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.RealtimeLastro, 	&PIDOutLastro, 	&PrimitiveStates.SetPointLastro, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 80049d8:	2300      	movs	r3, #0
 80049da:	9307      	str	r3, [sp, #28]
 80049dc:	2301      	movs	r3, #1
 80049de:	9306      	str	r3, [sp, #24]
 80049e0:	a321      	add	r3, pc, #132	; (adr r3, 8004a68 <initPID+0xc8>)
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049ea:	a321      	add	r3, pc, #132	; (adr r3, 8004a70 <initPID+0xd0>)
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	4b1f      	ldr	r3, [pc, #124]	; (8004a78 <initPID+0xd8>)
 80049fa:	e9cd 2300 	strd	r2, r3, [sp]
 80049fe:	4b23      	ldr	r3, [pc, #140]	; (8004a8c <initPID+0xec>)
 8004a00:	4a23      	ldr	r2, [pc, #140]	; (8004a90 <initPID+0xf0>)
 8004a02:	4924      	ldr	r1, [pc, #144]	; (8004a94 <initPID+0xf4>)
 8004a04:	4824      	ldr	r0, [pc, #144]	; (8004a98 <initPID+0xf8>)
 8004a06:	f7fe f8ff 	bl	8002c08 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	481e      	ldr	r0, [pc, #120]	; (8004a88 <initPID+0xe8>)
 8004a0e:	f7fe fa2d 	bl	8002e6c <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 8004a12:	2101      	movs	r1, #1
 8004a14:	4820      	ldr	r0, [pc, #128]	; (8004a98 <initPID+0xf8>)
 8004a16:	f7fe fa29 	bl	8002e6c <PID_SetMode>

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 8004a1a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004a1e:	481a      	ldr	r0, [pc, #104]	; (8004a88 <initPID+0xe8>)
 8004a20:	f7fe fb92 	bl	8003148 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 8004a24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004a28:	481b      	ldr	r0, [pc, #108]	; (8004a98 <initPID+0xf8>)
 8004a2a:	f7fe fb8d 	bl	8003148 <PID_SetSampleTime>

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <initPID+0xfc>)
 8004a34:	e9cd 2300 	strd	r2, r3, [sp]
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	4811      	ldr	r0, [pc, #68]	; (8004a88 <initPID+0xe8>)
 8004a42:	f7fe fa31 	bl	8002ea8 <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <initPID+0xfc>)
 8004a4c:	e9cd 2300 	strd	r2, r3, [sp]
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	480f      	ldr	r0, [pc, #60]	; (8004a98 <initPID+0xf8>)
 8004a5a:	f7fe fa25 	bl	8002ea8 <PID_SetOutputLimits>
}
 8004a5e:	bf00      	nop
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	f3af 8000 	nop.w
 8004a68:	33333333 	.word	0x33333333
 8004a6c:	3fd33333 	.word	0x3fd33333
 8004a70:	47ae147b 	.word	0x47ae147b
 8004a74:	3f847ae1 	.word	0x3f847ae1
 8004a78:	403e0000 	.word	0x403e0000
 8004a7c:	20001340 	.word	0x20001340
 8004a80:	20001650 	.word	0x20001650
 8004a84:	20001330 	.word	0x20001330
 8004a88:	20001660 	.word	0x20001660
 8004a8c:	20001348 	.word	0x20001348
 8004a90:	20001658 	.word	0x20001658
 8004a94:	20001338 	.word	0x20001338
 8004a98:	200016d0 	.word	0x200016d0
 8004a9c:	40590000 	.word	0x40590000

08004aa0 <computaPID>:
void computaPID(void){
 8004aa0:	b598      	push	{r3, r4, r7, lr}
 8004aa2:	af00      	add	r7, sp, #0

	PID_Compute(&TPIDTeto);
 8004aa4:	480e      	ldr	r0, [pc, #56]	; (8004ae0 <computaPID+0x40>)
 8004aa6:	f7fe f8f7 	bl	8002c98 <PID_Compute>
	PID_Compute(&TPIDLastro);
 8004aaa:	480e      	ldr	r0, [pc, #56]	; (8004ae4 <computaPID+0x44>)
 8004aac:	f7fe f8f4 	bl	8002c98 <PID_Compute>

	htim3.Instance->CCR3 = PIDOutTeto;
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <computaPID+0x48>)
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	490d      	ldr	r1, [pc, #52]	; (8004aec <computaPID+0x4c>)
 8004ab8:	680c      	ldr	r4, [r1, #0]
 8004aba:	4610      	mov	r0, r2
 8004abc:	4619      	mov	r1, r3
 8004abe:	f7fb ffa5 	bl	8000a0c <__aeabi_d2uiz>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	63e3      	str	r3, [r4, #60]	; 0x3c
	htim3.Instance->CCR4 = PIDOutLastro;
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <computaPID+0x50>)
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	4907      	ldr	r1, [pc, #28]	; (8004aec <computaPID+0x4c>)
 8004ace:	680c      	ldr	r4, [r1, #0]
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	f7fb ff9a 	bl	8000a0c <__aeabi_d2uiz>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004adc:	bf00      	nop
 8004ade:	bd98      	pop	{r3, r4, r7, pc}
 8004ae0:	20001660 	.word	0x20001660
 8004ae4:	200016d0 	.word	0x200016d0
 8004ae8:	20001650 	.word	0x20001650
 8004aec:	20000b04 	.word	0x20000b04
 8004af0:	20001658 	.word	0x20001658

08004af4 <taskTemperatura1sec>:
void taskTemperatura1sec(void){
 8004af4:	b5b0      	push	{r4, r5, r7, lr}
 8004af6:	af00      	add	r7, sp, #0

	//MONITOR DE ERRO DE AQUECIMENTO
	static uint16_t contadorAquecimento;
	if(PrimitiveStates.stateMaquina == aquecendo){
 8004af8:	4b26      	ldr	r3, [pc, #152]	; (8004b94 <taskTemperatura1sec+0xa0>)
 8004afa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d143      	bne.n	8004b8a <taskTemperatura1sec+0x96>

		if(contadorAquecimento>=TIME_MAX_AQUECIMENTO){
 8004b02:	4b25      	ldr	r3, [pc, #148]	; (8004b98 <taskTemperatura1sec+0xa4>)
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004b0a:	d337      	bcc.n	8004b7c <taskTemperatura1sec+0x88>
			//verifica erro temperatura lastro
			if(PrimitiveStates.RealtimeLastro < PrimitiveStates.SetPointLastro-5)
 8004b0c:	4b21      	ldr	r3, [pc, #132]	; (8004b94 <taskTemperatura1sec+0xa0>)
 8004b0e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004b12:	4b20      	ldr	r3, [pc, #128]	; (8004b94 <taskTemperatura1sec+0xa0>)
 8004b14:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	4b1f      	ldr	r3, [pc, #124]	; (8004b9c <taskTemperatura1sec+0xa8>)
 8004b1e:	f7fb fb23 	bl	8000168 <__aeabi_dsub>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4620      	mov	r0, r4
 8004b28:	4629      	mov	r1, r5
 8004b2a:	f7fb ff47 	bl	80009bc <__aeabi_dcmplt>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d006      	beq.n	8004b42 <taskTemperatura1sec+0x4e>
				PrimitiveStates.Erro.bit.IdleLastro=1;
 8004b34:	4a17      	ldr	r2, [pc, #92]	; (8004b94 <taskTemperatura1sec+0xa0>)
 8004b36:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8004b3a:	f043 0308 	orr.w	r3, r3, #8
 8004b3e:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33

			//verifica erro temperatura teto
			if(PrimitiveStates.RealtimeTeto < PrimitiveStates.SetPointTeto-5)
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <taskTemperatura1sec+0xa0>)
 8004b44:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004b48:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <taskTemperatura1sec+0xa0>)
 8004b4a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <taskTemperatura1sec+0xa8>)
 8004b54:	f7fb fb08 	bl	8000168 <__aeabi_dsub>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	4629      	mov	r1, r5
 8004b60:	f7fb ff2c 	bl	80009bc <__aeabi_dcmplt>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d100      	bne.n	8004b6c <taskTemperatura1sec+0x78>
		}else{
			contadorAquecimento++;
		}
	}else
		contadorAquecimento=0;
}
 8004b6a:	e011      	b.n	8004b90 <taskTemperatura1sec+0x9c>
				PrimitiveStates.Erro.bit.IdleTeto=1;
 8004b6c:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <taskTemperatura1sec+0xa0>)
 8004b6e:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8004b72:	f043 0304 	orr.w	r3, r3, #4
 8004b76:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
}
 8004b7a:	e009      	b.n	8004b90 <taskTemperatura1sec+0x9c>
			contadorAquecimento++;
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <taskTemperatura1sec+0xa4>)
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <taskTemperatura1sec+0xa4>)
 8004b86:	801a      	strh	r2, [r3, #0]
}
 8004b88:	e002      	b.n	8004b90 <taskTemperatura1sec+0x9c>
		contadorAquecimento=0;
 8004b8a:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <taskTemperatura1sec+0xa4>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	801a      	strh	r2, [r3, #0]
}
 8004b90:	bf00      	nop
 8004b92:	bdb0      	pop	{r4, r5, r7, pc}
 8004b94:	20001328 	.word	0x20001328
 8004b98:	20001740 	.word	0x20001740
 8004b9c:	40140000 	.word	0x40140000

08004ba0 <StartTimer>:
//variaveis globais
extern GlobalPrimitiveIOStates PrimitiveStates;


void StartTimer(void const * argument)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8004ba8:	f007 fa88 	bl	800c0bc <xTaskGetTickCount>
 8004bac:	4603      	mov	r3, r0
 8004bae:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		verificaErro();
 8004bb0:	f000 f8ae 	bl	8004d10 <verificaErro>

		funcionamentoTimer();
 8004bb4:	f000 f80c 	bl	8004bd0 <funcionamentoTimer>

		funcionamentoLampada();
 8004bb8:	f000 f87a 	bl	8004cb0 <funcionamentoLampada>

		osThreadYield();
 8004bbc:	f005 fcaa 	bl	800a514 <osThreadYield>
		osDelayUntil(&xLastWakeTime,1000);
 8004bc0:	f107 030c 	add.w	r3, r7, #12
 8004bc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f005 ff09 	bl	800a9e0 <osDelayUntil>
		verificaErro();
 8004bce:	e7ef      	b.n	8004bb0 <StartTimer+0x10>

08004bd0 <funcionamentoTimer>:
	}
}

void funcionamentoTimer(void){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0

	//Decremento de minutos e segundos
	if((PrimitiveStates.RTTimerMinutos>0 && PrimitiveStates.RTTimerSegundos==0) && PrimitiveStates.stateMaquina == decrementando){
 8004bd4:	4b34      	ldr	r3, [pc, #208]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004bd6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d016      	beq.n	8004c0c <funcionamentoTimer+0x3c>
 8004bde:	4b32      	ldr	r3, [pc, #200]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004be0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d111      	bne.n	8004c0c <funcionamentoTimer+0x3c>
 8004be8:	4b2f      	ldr	r3, [pc, #188]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004bea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d10c      	bne.n	8004c0c <funcionamentoTimer+0x3c>
		PrimitiveStates.RTTimerSegundos = 59;
 8004bf2:	4b2d      	ldr	r3, [pc, #180]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004bf4:	223b      	movs	r2, #59	; 0x3b
 8004bf6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		PrimitiveStates.RTTimerMinutos--;
 8004bfa:	4b2b      	ldr	r3, [pc, #172]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004bfc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	4b28      	ldr	r3, [pc, #160]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004c06:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				PrimitiveStates.stateMaquina = aquecido;
			}
			osThreadResume(TaskBuzzerHandle);
		}
	}
}
 8004c0a:	e04a      	b.n	8004ca2 <funcionamentoTimer+0xd2>
	}else if((PrimitiveStates.RTTimerMinutos>0 || PrimitiveStates.RTTimerSegundos>0) && PrimitiveStates.stateMaquina == decrementando){
 8004c0c:	4b26      	ldr	r3, [pc, #152]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004c0e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d104      	bne.n	8004c20 <funcionamentoTimer+0x50>
 8004c16:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004c18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d040      	beq.n	8004ca2 <funcionamentoTimer+0xd2>
 8004c20:	4b21      	ldr	r3, [pc, #132]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004c22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d13b      	bne.n	8004ca2 <funcionamentoTimer+0xd2>
		PrimitiveStates.RTTimerSegundos--;
 8004c2a:	4b1f      	ldr	r3, [pc, #124]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004c2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	4b1c      	ldr	r3, [pc, #112]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004c36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if(PrimitiveStates.RTTimerSegundos==0 && PrimitiveStates.RTTimerMinutos==0){
 8004c3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004c3c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d12e      	bne.n	8004ca2 <funcionamentoTimer+0xd2>
 8004c44:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004c46:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d129      	bne.n	8004ca2 <funcionamentoTimer+0xd2>
			PrimitiveStates.SetPointTeto 	= 0;
 8004c4e:	4916      	ldr	r1, [pc, #88]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro 	= 0;
 8004c5c:	4912      	ldr	r1, [pc, #72]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PrimitiveStates.SetPointTeto	= 0;
 8004c6a:	490f      	ldr	r1, [pc, #60]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro	= 0;
 8004c78:	490b      	ldr	r1, [pc, #44]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	e9c1 2308 	strd	r2, r3, [r1, #32]
			if(PrimitiveStates.MaquinaAquecimento == mantendoTemp){
 8004c86:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d103      	bne.n	8004c98 <funcionamentoTimer+0xc8>
				PrimitiveStates.stateMaquina = aquecido;
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <funcionamentoTimer+0xd8>)
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			osThreadResume(TaskBuzzerHandle);
 8004c98:	4b04      	ldr	r3, [pc, #16]	; (8004cac <funcionamentoTimer+0xdc>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f005 fe7d 	bl	800a99c <osThreadResume>
}
 8004ca2:	bf00      	nop
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20001328 	.word	0x20001328
 8004cac:	20000c6c 	.word	0x20000c6c

08004cb0 <funcionamentoLampada>:

void funcionamentoLampada(void){
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0

	//decremento e apos desligamento lampada
	if(PrimitiveStates.RTLampada>0){
 8004cb4:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <funcionamentoLampada+0x58>)
 8004cb6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d021      	beq.n	8004d02 <funcionamentoLampada+0x52>
		PrimitiveStates.RTLampada--;
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <funcionamentoLampada+0x58>)
 8004cc0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <funcionamentoLampada+0x58>)
 8004cca:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		if(PrimitiveStates.RTLampada==0){
 8004cce:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <funcionamentoLampada+0x58>)
 8004cd0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10c      	bne.n	8004cf2 <funcionamentoLampada+0x42>
			LAMPADA_OFF
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2140      	movs	r1, #64	; 0x40
 8004cdc:	480b      	ldr	r0, [pc, #44]	; (8004d0c <funcionamentoLampada+0x5c>)
 8004cde:	f001 fab0 	bl	8006242 <HAL_GPIO_WritePin>
 8004ce2:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <funcionamentoLampada+0x58>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8004cea:	4b07      	ldr	r3, [pc, #28]	; (8004d08 <funcionamentoLampada+0x58>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	70da      	strb	r2, [r3, #3]
		}else{
			LAMPADA_ON
		}
	}
}
 8004cf0:	e007      	b.n	8004d02 <funcionamentoLampada+0x52>
			LAMPADA_ON
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	2140      	movs	r1, #64	; 0x40
 8004cf6:	4805      	ldr	r0, [pc, #20]	; (8004d0c <funcionamentoLampada+0x5c>)
 8004cf8:	f001 faa3 	bl	8006242 <HAL_GPIO_WritePin>
 8004cfc:	4b02      	ldr	r3, [pc, #8]	; (8004d08 <funcionamentoLampada+0x58>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	70da      	strb	r2, [r3, #3]
}
 8004d02:	bf00      	nop
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20001328 	.word	0x20001328
 8004d0c:	40010c00 	.word	0x40010c00

08004d10 <verificaErro>:

void verificaErro(void){
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
	osEvent evt;
	evt = osSignalWait (ERRO_CRITICO, 0);
 8004d16:	1d3b      	adds	r3, r7, #4
 8004d18:	2200      	movs	r2, #0
 8004d1a:	210f      	movs	r1, #15
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f005 fcd7 	bl	800a6d0 <osSignalWait>
	if (evt.status == osEventSignal){
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d107      	bne.n	8004d38 <verificaErro+0x28>

		if(evt.value.v == ERRO_CRITICO){
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b0f      	cmp	r3, #15
 8004d2c:	d104      	bne.n	8004d38 <verificaErro+0x28>
			osThreadSuspend(TaskTimerHandle);
 8004d2e:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <verificaErro+0x30>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f005 fe26 	bl	800a984 <osThreadSuspend>
		}
	}
}
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20000f10 	.word	0x20000f10

08004d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d48:	4b08      	ldr	r3, [pc, #32]	; (8004d6c <HAL_Init+0x28>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a07      	ldr	r2, [pc, #28]	; (8004d6c <HAL_Init+0x28>)
 8004d4e:	f043 0310 	orr.w	r3, r3, #16
 8004d52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d54:	2003      	movs	r0, #3
 8004d56:	f000 fcdb 	bl	8005710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d5a:	200f      	movs	r0, #15
 8004d5c:	f7fe fd0a 	bl	8003774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d60:	f7fe fa2e 	bl	80031c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40022000 	.word	0x40022000

08004d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d74:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <HAL_IncTick+0x1c>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <HAL_IncTick+0x20>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4413      	add	r3, r2
 8004d80:	4a03      	ldr	r2, [pc, #12]	; (8004d90 <HAL_IncTick+0x20>)
 8004d82:	6013      	str	r3, [r2, #0]
}
 8004d84:	bf00      	nop
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr
 8004d8c:	20000208 	.word	0x20000208
 8004d90:	20001744 	.word	0x20001744

08004d94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return uwTick;
 8004d98:	4b02      	ldr	r3, [pc, #8]	; (8004da4 <HAL_GetTick+0x10>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr
 8004da4:	20001744 	.word	0x20001744

08004da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004db0:	f7ff fff0 	bl	8004d94 <HAL_GetTick>
 8004db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d005      	beq.n	8004dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <HAL_Delay+0x44>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4413      	add	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004dce:	bf00      	nop
 8004dd0:	f7ff ffe0 	bl	8004d94 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d8f7      	bhi.n	8004dd0 <HAL_Delay+0x28>
  {
  }
}
 8004de0:	bf00      	nop
 8004de2:	bf00      	nop
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000208 	.word	0x20000208

08004df0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e0be      	b.n	8004f90 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d109      	bne.n	8004e34 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fe f9fe 	bl	8003230 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 faf5 	bl	8005424 <ADC_ConversionStop_Disable>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f040 8099 	bne.w	8004f7e <HAL_ADC_Init+0x18e>
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f040 8095 	bne.w	8004f7e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e5c:	f023 0302 	bic.w	r3, r3, #2
 8004e60:	f043 0202 	orr.w	r2, r3, #2
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e70:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	7b1b      	ldrb	r3, [r3, #12]
 8004e76:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004e78:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e88:	d003      	beq.n	8004e92 <HAL_ADC_Init+0xa2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d102      	bne.n	8004e98 <HAL_ADC_Init+0xa8>
 8004e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e96:	e000      	b.n	8004e9a <HAL_ADC_Init+0xaa>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	7d1b      	ldrb	r3, [r3, #20]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d119      	bne.n	8004edc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	7b1b      	ldrb	r3, [r3, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d109      	bne.n	8004ec4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	035a      	lsls	r2, r3, #13
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	e00b      	b.n	8004edc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	f043 0220 	orr.w	r2, r3, #32
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	f043 0201 	orr.w	r2, r3, #1
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	4b28      	ldr	r3, [pc, #160]	; (8004f98 <HAL_ADC_Init+0x1a8>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0c:	d003      	beq.n	8004f16 <HAL_ADC_Init+0x126>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d104      	bne.n	8004f20 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	051b      	lsls	r3, r3, #20
 8004f1e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <HAL_ADC_Init+0x1ac>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d10b      	bne.n	8004f5c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	f043 0201 	orr.w	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004f5a:	e018      	b.n	8004f8e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	f023 0312 	bic.w	r3, r3, #18
 8004f64:	f043 0210 	orr.w	r2, r3, #16
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	f043 0201 	orr.w	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004f7c:	e007      	b.n	8004f8e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f82:	f043 0210 	orr.w	r2, r3, #16
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	ffe1f7fd 	.word	0xffe1f7fd
 8004f9c:	ff1f0efe 	.word	0xff1f0efe

08004fa0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a64      	ldr	r2, [pc, #400]	; (8005148 <HAL_ADC_Start_DMA+0x1a8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d004      	beq.n	8004fc4 <HAL_ADC_Start_DMA+0x24>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a63      	ldr	r2, [pc, #396]	; (800514c <HAL_ADC_Start_DMA+0x1ac>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d106      	bne.n	8004fd2 <HAL_ADC_Start_DMA+0x32>
 8004fc4:	4b60      	ldr	r3, [pc, #384]	; (8005148 <HAL_ADC_Start_DMA+0x1a8>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f040 80b3 	bne.w	8005138 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_ADC_Start_DMA+0x40>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e0ae      	b.n	800513e <HAL_ADC_Start_DMA+0x19e>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f9c1 	bl	8005370 <ADC_Enable>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004ff2:	7dfb      	ldrb	r3, [r7, #23]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f040 809a 	bne.w	800512e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005002:	f023 0301 	bic.w	r3, r3, #1
 8005006:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a4e      	ldr	r2, [pc, #312]	; (800514c <HAL_ADC_Start_DMA+0x1ac>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d105      	bne.n	8005024 <HAL_ADC_Start_DMA+0x84>
 8005018:	4b4b      	ldr	r3, [pc, #300]	; (8005148 <HAL_ADC_Start_DMA+0x1a8>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d115      	bne.n	8005050 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503a:	2b00      	cmp	r3, #0
 800503c:	d026      	beq.n	800508c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005046:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800504e:	e01d      	b.n	800508c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a39      	ldr	r2, [pc, #228]	; (8005148 <HAL_ADC_Start_DMA+0x1a8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d004      	beq.n	8005070 <HAL_ADC_Start_DMA+0xd0>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a38      	ldr	r2, [pc, #224]	; (800514c <HAL_ADC_Start_DMA+0x1ac>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d10d      	bne.n	800508c <HAL_ADC_Start_DMA+0xec>
 8005070:	4b35      	ldr	r3, [pc, #212]	; (8005148 <HAL_ADC_Start_DMA+0x1a8>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005078:	2b00      	cmp	r3, #0
 800507a:	d007      	beq.n	800508c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005084:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d006      	beq.n	80050a6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	f023 0206 	bic.w	r2, r3, #6
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80050a4:	e002      	b.n	80050ac <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	4a25      	ldr	r2, [pc, #148]	; (8005150 <HAL_ADC_Start_DMA+0x1b0>)
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	4a24      	ldr	r2, [pc, #144]	; (8005154 <HAL_ADC_Start_DMA+0x1b4>)
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	4a23      	ldr	r2, [pc, #140]	; (8005158 <HAL_ADC_Start_DMA+0x1b8>)
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0202 	mvn.w	r2, #2
 80050d4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a18      	ldr	r0, [r3, #32]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	334c      	adds	r3, #76	; 0x4c
 80050f0:	4619      	mov	r1, r3
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f000 fc05 	bl	8005904 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005104:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005108:	d108      	bne.n	800511c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005118:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800511a:	e00f      	b.n	800513c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800512a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800512c:	e006      	b.n	800513c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8005136:	e001      	b.n	800513c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800513c:	7dfb      	ldrb	r3, [r7, #23]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40012400 	.word	0x40012400
 800514c:	40012800 	.word	0x40012800
 8005150:	080054a7 	.word	0x080054a7
 8005154:	08005523 	.word	0x08005523
 8005158:	0800553f 	.word	0x0800553f

0800515c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr

0800516e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_ADC_ConfigChannel+0x20>
 800519c:	2302      	movs	r3, #2
 800519e:	e0dc      	b.n	800535a <HAL_ADC_ConfigChannel+0x1da>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2b06      	cmp	r3, #6
 80051ae:	d81c      	bhi.n	80051ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	3b05      	subs	r3, #5
 80051c2:	221f      	movs	r2, #31
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	43db      	mvns	r3, r3
 80051ca:	4019      	ands	r1, r3
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	4613      	mov	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	3b05      	subs	r3, #5
 80051dc:	fa00 f203 	lsl.w	r2, r0, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	635a      	str	r2, [r3, #52]	; 0x34
 80051e8:	e03c      	b.n	8005264 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b0c      	cmp	r3, #12
 80051f0:	d81c      	bhi.n	800522c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	3b23      	subs	r3, #35	; 0x23
 8005204:	221f      	movs	r2, #31
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43db      	mvns	r3, r3
 800520c:	4019      	ands	r1, r3
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	3b23      	subs	r3, #35	; 0x23
 800521e:	fa00 f203 	lsl.w	r2, r0, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	631a      	str	r2, [r3, #48]	; 0x30
 800522a:	e01b      	b.n	8005264 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	4613      	mov	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	3b41      	subs	r3, #65	; 0x41
 800523e:	221f      	movs	r2, #31
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	43db      	mvns	r3, r3
 8005246:	4019      	ands	r1, r3
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	3b41      	subs	r3, #65	; 0x41
 8005258:	fa00 f203 	lsl.w	r2, r0, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b09      	cmp	r3, #9
 800526a:	d91c      	bls.n	80052a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68d9      	ldr	r1, [r3, #12]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4613      	mov	r3, r2
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	4413      	add	r3, r2
 800527c:	3b1e      	subs	r3, #30
 800527e:	2207      	movs	r2, #7
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	43db      	mvns	r3, r3
 8005286:	4019      	ands	r1, r3
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	6898      	ldr	r0, [r3, #8]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	4613      	mov	r3, r2
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	4413      	add	r3, r2
 8005296:	3b1e      	subs	r3, #30
 8005298:	fa00 f203 	lsl.w	r2, r0, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	60da      	str	r2, [r3, #12]
 80052a4:	e019      	b.n	80052da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6919      	ldr	r1, [r3, #16]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	4413      	add	r3, r2
 80052b6:	2207      	movs	r2, #7
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	43db      	mvns	r3, r3
 80052be:	4019      	ands	r1, r3
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6898      	ldr	r0, [r3, #8]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4613      	mov	r3, r2
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	4413      	add	r3, r2
 80052ce:	fa00 f203 	lsl.w	r2, r0, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d003      	beq.n	80052ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80052e6:	2b11      	cmp	r3, #17
 80052e8:	d132      	bne.n	8005350 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1d      	ldr	r2, [pc, #116]	; (8005364 <HAL_ADC_ConfigChannel+0x1e4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d125      	bne.n	8005340 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d126      	bne.n	8005350 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005310:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b10      	cmp	r3, #16
 8005318:	d11a      	bne.n	8005350 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800531a:	4b13      	ldr	r3, [pc, #76]	; (8005368 <HAL_ADC_ConfigChannel+0x1e8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a13      	ldr	r2, [pc, #76]	; (800536c <HAL_ADC_ConfigChannel+0x1ec>)
 8005320:	fba2 2303 	umull	r2, r3, r2, r3
 8005324:	0c9a      	lsrs	r2, r3, #18
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005330:	e002      	b.n	8005338 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	3b01      	subs	r3, #1
 8005336:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f9      	bne.n	8005332 <HAL_ADC_ConfigChannel+0x1b2>
 800533e:	e007      	b.n	8005350 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	f043 0220 	orr.w	r2, r3, #32
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr
 8005364:	40012400 	.word	0x40012400
 8005368:	20000200 	.word	0x20000200
 800536c:	431bde83 	.word	0x431bde83

08005370 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b01      	cmp	r3, #1
 800538c:	d040      	beq.n	8005410 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0201 	orr.w	r2, r2, #1
 800539c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800539e:	4b1f      	ldr	r3, [pc, #124]	; (800541c <ADC_Enable+0xac>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <ADC_Enable+0xb0>)
 80053a4:	fba2 2303 	umull	r2, r3, r2, r3
 80053a8:	0c9b      	lsrs	r3, r3, #18
 80053aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80053ac:	e002      	b.n	80053b4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	3b01      	subs	r3, #1
 80053b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f9      	bne.n	80053ae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80053ba:	f7ff fceb 	bl	8004d94 <HAL_GetTick>
 80053be:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80053c0:	e01f      	b.n	8005402 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80053c2:	f7ff fce7 	bl	8004d94 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d918      	bls.n	8005402 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d011      	beq.n	8005402 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	f043 0210 	orr.w	r2, r3, #16
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	f043 0201 	orr.w	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e007      	b.n	8005412 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b01      	cmp	r3, #1
 800540e:	d1d8      	bne.n	80053c2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20000200 	.word	0x20000200
 8005420:	431bde83 	.word	0x431bde83

08005424 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b01      	cmp	r3, #1
 800543c:	d12e      	bne.n	800549c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0201 	bic.w	r2, r2, #1
 800544c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800544e:	f7ff fca1 	bl	8004d94 <HAL_GetTick>
 8005452:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005454:	e01b      	b.n	800548e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005456:	f7ff fc9d 	bl	8004d94 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d914      	bls.n	800548e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b01      	cmp	r3, #1
 8005470:	d10d      	bne.n	800548e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	f043 0210 	orr.w	r2, r3, #16
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	f043 0201 	orr.w	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e007      	b.n	800549e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b01      	cmp	r3, #1
 800549a:	d0dc      	beq.n	8005456 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d127      	bne.n	8005510 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80054d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80054da:	d115      	bne.n	8005508 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d111      	bne.n	8005508 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d105      	bne.n	8005508 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	f043 0201 	orr.w	r2, r3, #1
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7fd fa7b 	bl	8002a04 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800550e:	e004      	b.n	800551a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	4798      	blx	r3
}
 800551a:	bf00      	nop
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7ff fe13 	bl	800515c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005536:	bf00      	nop
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	f043 0204 	orr.w	r2, r3, #4
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f7ff fe02 	bl	800516e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800556a:	bf00      	nop
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005584:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005590:	4013      	ands	r3, r2
 8005592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800559c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055a6:	4a04      	ldr	r2, [pc, #16]	; (80055b8 <__NVIC_SetPriorityGrouping+0x44>)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	60d3      	str	r3, [r2, #12]
}
 80055ac:	bf00      	nop
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	e000ed00 	.word	0xe000ed00

080055bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055c0:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <__NVIC_GetPriorityGrouping+0x18>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	0a1b      	lsrs	r3, r3, #8
 80055c6:	f003 0307 	and.w	r3, r3, #7
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bc80      	pop	{r7}
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	e000ed00 	.word	0xe000ed00

080055d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	db0b      	blt.n	8005602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ea:	79fb      	ldrb	r3, [r7, #7]
 80055ec:	f003 021f 	and.w	r2, r3, #31
 80055f0:	4906      	ldr	r1, [pc, #24]	; (800560c <__NVIC_EnableIRQ+0x34>)
 80055f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	2001      	movs	r0, #1
 80055fa:	fa00 f202 	lsl.w	r2, r0, r2
 80055fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr
 800560c:	e000e100 	.word	0xe000e100

08005610 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800561a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561e:	2b00      	cmp	r3, #0
 8005620:	db12      	blt.n	8005648 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	f003 021f 	and.w	r2, r3, #31
 8005628:	490a      	ldr	r1, [pc, #40]	; (8005654 <__NVIC_DisableIRQ+0x44>)
 800562a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	2001      	movs	r0, #1
 8005632:	fa00 f202 	lsl.w	r2, r0, r2
 8005636:	3320      	adds	r3, #32
 8005638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800563c:	f3bf 8f4f 	dsb	sy
}
 8005640:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005642:	f3bf 8f6f 	isb	sy
}
 8005646:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	e000e100 	.word	0xe000e100

08005658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	6039      	str	r1, [r7, #0]
 8005662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005668:	2b00      	cmp	r3, #0
 800566a:	db0a      	blt.n	8005682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	b2da      	uxtb	r2, r3
 8005670:	490c      	ldr	r1, [pc, #48]	; (80056a4 <__NVIC_SetPriority+0x4c>)
 8005672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005676:	0112      	lsls	r2, r2, #4
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	440b      	add	r3, r1
 800567c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005680:	e00a      	b.n	8005698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	b2da      	uxtb	r2, r3
 8005686:	4908      	ldr	r1, [pc, #32]	; (80056a8 <__NVIC_SetPriority+0x50>)
 8005688:	79fb      	ldrb	r3, [r7, #7]
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	3b04      	subs	r3, #4
 8005690:	0112      	lsls	r2, r2, #4
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	440b      	add	r3, r1
 8005696:	761a      	strb	r2, [r3, #24]
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	e000e100 	.word	0xe000e100
 80056a8:	e000ed00 	.word	0xe000ed00

080056ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b089      	sub	sp, #36	; 0x24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f1c3 0307 	rsb	r3, r3, #7
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	bf28      	it	cs
 80056ca:	2304      	movcs	r3, #4
 80056cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	3304      	adds	r3, #4
 80056d2:	2b06      	cmp	r3, #6
 80056d4:	d902      	bls.n	80056dc <NVIC_EncodePriority+0x30>
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	3b03      	subs	r3, #3
 80056da:	e000      	b.n	80056de <NVIC_EncodePriority+0x32>
 80056dc:	2300      	movs	r3, #0
 80056de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056e0:	f04f 32ff 	mov.w	r2, #4294967295
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	43da      	mvns	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	401a      	ands	r2, r3
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056f4:	f04f 31ff 	mov.w	r1, #4294967295
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	fa01 f303 	lsl.w	r3, r1, r3
 80056fe:	43d9      	mvns	r1, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005704:	4313      	orrs	r3, r2
         );
}
 8005706:	4618      	mov	r0, r3
 8005708:	3724      	adds	r7, #36	; 0x24
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr

08005710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff ff2b 	bl	8005574 <__NVIC_SetPriorityGrouping>
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005726:	b580      	push	{r7, lr}
 8005728:	b086      	sub	sp, #24
 800572a:	af00      	add	r7, sp, #0
 800572c:	4603      	mov	r3, r0
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	607a      	str	r2, [r7, #4]
 8005732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005738:	f7ff ff40 	bl	80055bc <__NVIC_GetPriorityGrouping>
 800573c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	6978      	ldr	r0, [r7, #20]
 8005744:	f7ff ffb2 	bl	80056ac <NVIC_EncodePriority>
 8005748:	4602      	mov	r2, r0
 800574a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff ff81 	bl	8005658 <__NVIC_SetPriority>
}
 8005756:	bf00      	nop
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	4603      	mov	r3, r0
 8005766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff ff33 	bl	80055d8 <__NVIC_EnableIRQ>
}
 8005772:	bf00      	nop
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	4603      	mov	r3, r0
 8005782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff ff41 	bl	8005610 <__NVIC_DisableIRQ>
}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e043      	b.n	8005836 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	4b22      	ldr	r3, [pc, #136]	; (8005840 <HAL_DMA_Init+0xa8>)
 80057b6:	4413      	add	r3, r2
 80057b8:	4a22      	ldr	r2, [pc, #136]	; (8005844 <HAL_DMA_Init+0xac>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	091b      	lsrs	r3, r3, #4
 80057c0:	009a      	lsls	r2, r3, #2
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a1f      	ldr	r2, [pc, #124]	; (8005848 <HAL_DMA_Init+0xb0>)
 80057ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80057e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80057e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80057f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr
 8005840:	bffdfff8 	.word	0xbffdfff8
 8005844:	cccccccd 	.word	0xcccccccd
 8005848:	40020000 	.word	0x40020000

0800584c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e046      	b.n	80058ec <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0201 	bic.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2200      	movs	r2, #0
 8005884:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2200      	movs	r2, #0
 800588c:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	4b18      	ldr	r3, [pc, #96]	; (80058f8 <HAL_DMA_DeInit+0xac>)
 8005896:	4413      	add	r3, r2
 8005898:	4a18      	ldr	r2, [pc, #96]	; (80058fc <HAL_DMA_DeInit+0xb0>)
 800589a:	fba2 2303 	umull	r2, r3, r2, r3
 800589e:	091b      	lsrs	r3, r3, #4
 80058a0:	009a      	lsls	r2, r3, #2
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a15      	ldr	r2, [pc, #84]	; (8005900 <HAL_DMA_DeInit+0xb4>)
 80058aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b4:	2101      	movs	r1, #1
 80058b6:	fa01 f202 	lsl.w	r2, r1, r2
 80058ba:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bc80      	pop	{r7}
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	bffdfff8 	.word	0xbffdfff8
 80058fc:	cccccccd 	.word	0xcccccccd
 8005900:	40020000 	.word	0x40020000

08005904 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_DMA_Start_IT+0x20>
 8005920:	2302      	movs	r3, #2
 8005922:	e04b      	b.n	80059bc <HAL_DMA_Start_IT+0xb8>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	d13a      	bne.n	80059ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0201 	bic.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f9eb 	bl	8005d38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d008      	beq.n	800597c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 020e 	orr.w	r2, r2, #14
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	e00f      	b.n	800599c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0204 	bic.w	r2, r2, #4
 800598a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 020a 	orr.w	r2, r2, #10
 800599a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	e005      	b.n	80059ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80059b6:	2302      	movs	r3, #2
 80059b8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80059ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d008      	beq.n	80059ee <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2204      	movs	r2, #4
 80059e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e020      	b.n	8005a30 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 020e 	bic.w	r2, r2, #14
 80059fc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0201 	bic.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	2101      	movs	r1, #1
 8005a18:	fa01 f202 	lsl.w	r2, r1, r2
 8005a1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr
	...

08005a3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d005      	beq.n	8005a60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2204      	movs	r2, #4
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	73fb      	strb	r3, [r7, #15]
 8005a5e:	e051      	b.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 020e 	bic.w	r2, r2, #14
 8005a6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0201 	bic.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a22      	ldr	r2, [pc, #136]	; (8005b10 <HAL_DMA_Abort_IT+0xd4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d029      	beq.n	8005ade <HAL_DMA_Abort_IT+0xa2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a21      	ldr	r2, [pc, #132]	; (8005b14 <HAL_DMA_Abort_IT+0xd8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d022      	beq.n	8005ada <HAL_DMA_Abort_IT+0x9e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1f      	ldr	r2, [pc, #124]	; (8005b18 <HAL_DMA_Abort_IT+0xdc>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d01a      	beq.n	8005ad4 <HAL_DMA_Abort_IT+0x98>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1e      	ldr	r2, [pc, #120]	; (8005b1c <HAL_DMA_Abort_IT+0xe0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d012      	beq.n	8005ace <HAL_DMA_Abort_IT+0x92>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a1c      	ldr	r2, [pc, #112]	; (8005b20 <HAL_DMA_Abort_IT+0xe4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00a      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0x8c>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a1b      	ldr	r2, [pc, #108]	; (8005b24 <HAL_DMA_Abort_IT+0xe8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d102      	bne.n	8005ac2 <HAL_DMA_Abort_IT+0x86>
 8005abc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ac0:	e00e      	b.n	8005ae0 <HAL_DMA_Abort_IT+0xa4>
 8005ac2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ac6:	e00b      	b.n	8005ae0 <HAL_DMA_Abort_IT+0xa4>
 8005ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005acc:	e008      	b.n	8005ae0 <HAL_DMA_Abort_IT+0xa4>
 8005ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ad2:	e005      	b.n	8005ae0 <HAL_DMA_Abort_IT+0xa4>
 8005ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ad8:	e002      	b.n	8005ae0 <HAL_DMA_Abort_IT+0xa4>
 8005ada:	2310      	movs	r3, #16
 8005adc:	e000      	b.n	8005ae0 <HAL_DMA_Abort_IT+0xa4>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	4a11      	ldr	r2, [pc, #68]	; (8005b28 <HAL_DMA_Abort_IT+0xec>)
 8005ae2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	4798      	blx	r3
    } 
  }
  return status;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40020008 	.word	0x40020008
 8005b14:	4002001c 	.word	0x4002001c
 8005b18:	40020030 	.word	0x40020030
 8005b1c:	40020044 	.word	0x40020044
 8005b20:	40020058 	.word	0x40020058
 8005b24:	4002006c 	.word	0x4002006c
 8005b28:	40020000 	.word	0x40020000

08005b2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	2204      	movs	r2, #4
 8005b4a:	409a      	lsls	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d04f      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0xc8>
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d04a      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d107      	bne.n	8005b7c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0204 	bic.w	r2, r2, #4
 8005b7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a66      	ldr	r2, [pc, #408]	; (8005d1c <HAL_DMA_IRQHandler+0x1f0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d029      	beq.n	8005bda <HAL_DMA_IRQHandler+0xae>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a65      	ldr	r2, [pc, #404]	; (8005d20 <HAL_DMA_IRQHandler+0x1f4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d022      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xaa>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a63      	ldr	r2, [pc, #396]	; (8005d24 <HAL_DMA_IRQHandler+0x1f8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d01a      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xa4>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a62      	ldr	r2, [pc, #392]	; (8005d28 <HAL_DMA_IRQHandler+0x1fc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d012      	beq.n	8005bca <HAL_DMA_IRQHandler+0x9e>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a60      	ldr	r2, [pc, #384]	; (8005d2c <HAL_DMA_IRQHandler+0x200>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00a      	beq.n	8005bc4 <HAL_DMA_IRQHandler+0x98>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a5f      	ldr	r2, [pc, #380]	; (8005d30 <HAL_DMA_IRQHandler+0x204>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d102      	bne.n	8005bbe <HAL_DMA_IRQHandler+0x92>
 8005bb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005bbc:	e00e      	b.n	8005bdc <HAL_DMA_IRQHandler+0xb0>
 8005bbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005bc2:	e00b      	b.n	8005bdc <HAL_DMA_IRQHandler+0xb0>
 8005bc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005bc8:	e008      	b.n	8005bdc <HAL_DMA_IRQHandler+0xb0>
 8005bca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bce:	e005      	b.n	8005bdc <HAL_DMA_IRQHandler+0xb0>
 8005bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bd4:	e002      	b.n	8005bdc <HAL_DMA_IRQHandler+0xb0>
 8005bd6:	2340      	movs	r3, #64	; 0x40
 8005bd8:	e000      	b.n	8005bdc <HAL_DMA_IRQHandler+0xb0>
 8005bda:	2304      	movs	r3, #4
 8005bdc:	4a55      	ldr	r2, [pc, #340]	; (8005d34 <HAL_DMA_IRQHandler+0x208>)
 8005bde:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8094 	beq.w	8005d12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005bf2:	e08e      	b.n	8005d12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	409a      	lsls	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d056      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x186>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d051      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0320 	and.w	r3, r3, #32
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10b      	bne.n	8005c34 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 020a 	bic.w	r2, r2, #10
 8005c2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a38      	ldr	r2, [pc, #224]	; (8005d1c <HAL_DMA_IRQHandler+0x1f0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d029      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x166>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a37      	ldr	r2, [pc, #220]	; (8005d20 <HAL_DMA_IRQHandler+0x1f4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d022      	beq.n	8005c8e <HAL_DMA_IRQHandler+0x162>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a35      	ldr	r2, [pc, #212]	; (8005d24 <HAL_DMA_IRQHandler+0x1f8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d01a      	beq.n	8005c88 <HAL_DMA_IRQHandler+0x15c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a34      	ldr	r2, [pc, #208]	; (8005d28 <HAL_DMA_IRQHandler+0x1fc>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d012      	beq.n	8005c82 <HAL_DMA_IRQHandler+0x156>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a32      	ldr	r2, [pc, #200]	; (8005d2c <HAL_DMA_IRQHandler+0x200>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00a      	beq.n	8005c7c <HAL_DMA_IRQHandler+0x150>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a31      	ldr	r2, [pc, #196]	; (8005d30 <HAL_DMA_IRQHandler+0x204>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d102      	bne.n	8005c76 <HAL_DMA_IRQHandler+0x14a>
 8005c70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c74:	e00e      	b.n	8005c94 <HAL_DMA_IRQHandler+0x168>
 8005c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c7a:	e00b      	b.n	8005c94 <HAL_DMA_IRQHandler+0x168>
 8005c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c80:	e008      	b.n	8005c94 <HAL_DMA_IRQHandler+0x168>
 8005c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c86:	e005      	b.n	8005c94 <HAL_DMA_IRQHandler+0x168>
 8005c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c8c:	e002      	b.n	8005c94 <HAL_DMA_IRQHandler+0x168>
 8005c8e:	2320      	movs	r3, #32
 8005c90:	e000      	b.n	8005c94 <HAL_DMA_IRQHandler+0x168>
 8005c92:	2302      	movs	r3, #2
 8005c94:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <HAL_DMA_IRQHandler+0x208>)
 8005c96:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d034      	beq.n	8005d12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005cb0:	e02f      	b.n	8005d12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	2208      	movs	r2, #8
 8005cb8:	409a      	lsls	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d028      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x1e8>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d023      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 020e 	bic.w	r2, r2, #14
 8005cda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8005cea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d004      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	4798      	blx	r3
    }
  }
  return;
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
}
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40020008 	.word	0x40020008
 8005d20:	4002001c 	.word	0x4002001c
 8005d24:	40020030 	.word	0x40020030
 8005d28:	40020044 	.word	0x40020044
 8005d2c:	40020058 	.word	0x40020058
 8005d30:	4002006c 	.word	0x4002006c
 8005d34:	40020000 	.word	0x40020000

08005d38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4e:	2101      	movs	r1, #1
 8005d50:	fa01 f202 	lsl.w	r2, r1, r2
 8005d54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b10      	cmp	r3, #16
 8005d64:	d108      	bne.n	8005d78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d76:	e007      	b.n	8005d88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	60da      	str	r2, [r3, #12]
}
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr
	...

08005d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b08b      	sub	sp, #44	; 0x2c
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005da2:	2300      	movs	r3, #0
 8005da4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005da6:	e169      	b.n	800607c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005da8:	2201      	movs	r2, #1
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	4013      	ands	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	f040 8158 	bne.w	8006076 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	4a9a      	ldr	r2, [pc, #616]	; (8006034 <HAL_GPIO_Init+0x2a0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d05e      	beq.n	8005e8e <HAL_GPIO_Init+0xfa>
 8005dd0:	4a98      	ldr	r2, [pc, #608]	; (8006034 <HAL_GPIO_Init+0x2a0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d875      	bhi.n	8005ec2 <HAL_GPIO_Init+0x12e>
 8005dd6:	4a98      	ldr	r2, [pc, #608]	; (8006038 <HAL_GPIO_Init+0x2a4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d058      	beq.n	8005e8e <HAL_GPIO_Init+0xfa>
 8005ddc:	4a96      	ldr	r2, [pc, #600]	; (8006038 <HAL_GPIO_Init+0x2a4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d86f      	bhi.n	8005ec2 <HAL_GPIO_Init+0x12e>
 8005de2:	4a96      	ldr	r2, [pc, #600]	; (800603c <HAL_GPIO_Init+0x2a8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d052      	beq.n	8005e8e <HAL_GPIO_Init+0xfa>
 8005de8:	4a94      	ldr	r2, [pc, #592]	; (800603c <HAL_GPIO_Init+0x2a8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d869      	bhi.n	8005ec2 <HAL_GPIO_Init+0x12e>
 8005dee:	4a94      	ldr	r2, [pc, #592]	; (8006040 <HAL_GPIO_Init+0x2ac>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d04c      	beq.n	8005e8e <HAL_GPIO_Init+0xfa>
 8005df4:	4a92      	ldr	r2, [pc, #584]	; (8006040 <HAL_GPIO_Init+0x2ac>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d863      	bhi.n	8005ec2 <HAL_GPIO_Init+0x12e>
 8005dfa:	4a92      	ldr	r2, [pc, #584]	; (8006044 <HAL_GPIO_Init+0x2b0>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d046      	beq.n	8005e8e <HAL_GPIO_Init+0xfa>
 8005e00:	4a90      	ldr	r2, [pc, #576]	; (8006044 <HAL_GPIO_Init+0x2b0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d85d      	bhi.n	8005ec2 <HAL_GPIO_Init+0x12e>
 8005e06:	2b12      	cmp	r3, #18
 8005e08:	d82a      	bhi.n	8005e60 <HAL_GPIO_Init+0xcc>
 8005e0a:	2b12      	cmp	r3, #18
 8005e0c:	d859      	bhi.n	8005ec2 <HAL_GPIO_Init+0x12e>
 8005e0e:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <HAL_GPIO_Init+0x80>)
 8005e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e14:	08005e8f 	.word	0x08005e8f
 8005e18:	08005e69 	.word	0x08005e69
 8005e1c:	08005e7b 	.word	0x08005e7b
 8005e20:	08005ebd 	.word	0x08005ebd
 8005e24:	08005ec3 	.word	0x08005ec3
 8005e28:	08005ec3 	.word	0x08005ec3
 8005e2c:	08005ec3 	.word	0x08005ec3
 8005e30:	08005ec3 	.word	0x08005ec3
 8005e34:	08005ec3 	.word	0x08005ec3
 8005e38:	08005ec3 	.word	0x08005ec3
 8005e3c:	08005ec3 	.word	0x08005ec3
 8005e40:	08005ec3 	.word	0x08005ec3
 8005e44:	08005ec3 	.word	0x08005ec3
 8005e48:	08005ec3 	.word	0x08005ec3
 8005e4c:	08005ec3 	.word	0x08005ec3
 8005e50:	08005ec3 	.word	0x08005ec3
 8005e54:	08005ec3 	.word	0x08005ec3
 8005e58:	08005e71 	.word	0x08005e71
 8005e5c:	08005e85 	.word	0x08005e85
 8005e60:	4a79      	ldr	r2, [pc, #484]	; (8006048 <HAL_GPIO_Init+0x2b4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005e66:	e02c      	b.n	8005ec2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	623b      	str	r3, [r7, #32]
          break;
 8005e6e:	e029      	b.n	8005ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	3304      	adds	r3, #4
 8005e76:	623b      	str	r3, [r7, #32]
          break;
 8005e78:	e024      	b.n	8005ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	623b      	str	r3, [r7, #32]
          break;
 8005e82:	e01f      	b.n	8005ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	330c      	adds	r3, #12
 8005e8a:	623b      	str	r3, [r7, #32]
          break;
 8005e8c:	e01a      	b.n	8005ec4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d102      	bne.n	8005e9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005e96:	2304      	movs	r3, #4
 8005e98:	623b      	str	r3, [r7, #32]
          break;
 8005e9a:	e013      	b.n	8005ec4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d105      	bne.n	8005eb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005ea4:	2308      	movs	r3, #8
 8005ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	611a      	str	r2, [r3, #16]
          break;
 8005eae:	e009      	b.n	8005ec4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	615a      	str	r2, [r3, #20]
          break;
 8005eba:	e003      	b.n	8005ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	623b      	str	r3, [r7, #32]
          break;
 8005ec0:	e000      	b.n	8005ec4 <HAL_GPIO_Init+0x130>
          break;
 8005ec2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2bff      	cmp	r3, #255	; 0xff
 8005ec8:	d801      	bhi.n	8005ece <HAL_GPIO_Init+0x13a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	e001      	b.n	8005ed2 <HAL_GPIO_Init+0x13e>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	2bff      	cmp	r3, #255	; 0xff
 8005ed8:	d802      	bhi.n	8005ee0 <HAL_GPIO_Init+0x14c>
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	e002      	b.n	8005ee6 <HAL_GPIO_Init+0x152>
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	3b08      	subs	r3, #8
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	210f      	movs	r1, #15
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	6a39      	ldr	r1, [r7, #32]
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	fa01 f303 	lsl.w	r3, r1, r3
 8005f00:	431a      	orrs	r2, r3
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 80b1 	beq.w	8006076 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005f14:	4b4d      	ldr	r3, [pc, #308]	; (800604c <HAL_GPIO_Init+0x2b8>)
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	4a4c      	ldr	r2, [pc, #304]	; (800604c <HAL_GPIO_Init+0x2b8>)
 8005f1a:	f043 0301 	orr.w	r3, r3, #1
 8005f1e:	6193      	str	r3, [r2, #24]
 8005f20:	4b4a      	ldr	r3, [pc, #296]	; (800604c <HAL_GPIO_Init+0x2b8>)
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	60bb      	str	r3, [r7, #8]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005f2c:	4a48      	ldr	r2, [pc, #288]	; (8006050 <HAL_GPIO_Init+0x2bc>)
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	089b      	lsrs	r3, r3, #2
 8005f32:	3302      	adds	r3, #2
 8005f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	f003 0303 	and.w	r3, r3, #3
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	220f      	movs	r2, #15
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a40      	ldr	r2, [pc, #256]	; (8006054 <HAL_GPIO_Init+0x2c0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d013      	beq.n	8005f80 <HAL_GPIO_Init+0x1ec>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a3f      	ldr	r2, [pc, #252]	; (8006058 <HAL_GPIO_Init+0x2c4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00d      	beq.n	8005f7c <HAL_GPIO_Init+0x1e8>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a3e      	ldr	r2, [pc, #248]	; (800605c <HAL_GPIO_Init+0x2c8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d007      	beq.n	8005f78 <HAL_GPIO_Init+0x1e4>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a3d      	ldr	r2, [pc, #244]	; (8006060 <HAL_GPIO_Init+0x2cc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d101      	bne.n	8005f74 <HAL_GPIO_Init+0x1e0>
 8005f70:	2303      	movs	r3, #3
 8005f72:	e006      	b.n	8005f82 <HAL_GPIO_Init+0x1ee>
 8005f74:	2304      	movs	r3, #4
 8005f76:	e004      	b.n	8005f82 <HAL_GPIO_Init+0x1ee>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e002      	b.n	8005f82 <HAL_GPIO_Init+0x1ee>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e000      	b.n	8005f82 <HAL_GPIO_Init+0x1ee>
 8005f80:	2300      	movs	r3, #0
 8005f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f84:	f002 0203 	and.w	r2, r2, #3
 8005f88:	0092      	lsls	r2, r2, #2
 8005f8a:	4093      	lsls	r3, r2
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005f92:	492f      	ldr	r1, [pc, #188]	; (8006050 <HAL_GPIO_Init+0x2bc>)
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	089b      	lsrs	r3, r3, #2
 8005f98:	3302      	adds	r3, #2
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d006      	beq.n	8005fba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005fac:	4b2d      	ldr	r3, [pc, #180]	; (8006064 <HAL_GPIO_Init+0x2d0>)
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	492c      	ldr	r1, [pc, #176]	; (8006064 <HAL_GPIO_Init+0x2d0>)
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	608b      	str	r3, [r1, #8]
 8005fb8:	e006      	b.n	8005fc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005fba:	4b2a      	ldr	r3, [pc, #168]	; (8006064 <HAL_GPIO_Init+0x2d0>)
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	4928      	ldr	r1, [pc, #160]	; (8006064 <HAL_GPIO_Init+0x2d0>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d006      	beq.n	8005fe2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005fd4:	4b23      	ldr	r3, [pc, #140]	; (8006064 <HAL_GPIO_Init+0x2d0>)
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	4922      	ldr	r1, [pc, #136]	; (8006064 <HAL_GPIO_Init+0x2d0>)
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60cb      	str	r3, [r1, #12]
 8005fe0:	e006      	b.n	8005ff0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005fe2:	4b20      	ldr	r3, [pc, #128]	; (8006064 <HAL_GPIO_Init+0x2d0>)
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	491e      	ldr	r1, [pc, #120]	; (8006064 <HAL_GPIO_Init+0x2d0>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d006      	beq.n	800600a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005ffc:	4b19      	ldr	r3, [pc, #100]	; (8006064 <HAL_GPIO_Init+0x2d0>)
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	4918      	ldr	r1, [pc, #96]	; (8006064 <HAL_GPIO_Init+0x2d0>)
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	4313      	orrs	r3, r2
 8006006:	604b      	str	r3, [r1, #4]
 8006008:	e006      	b.n	8006018 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800600a:	4b16      	ldr	r3, [pc, #88]	; (8006064 <HAL_GPIO_Init+0x2d0>)
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	43db      	mvns	r3, r3
 8006012:	4914      	ldr	r1, [pc, #80]	; (8006064 <HAL_GPIO_Init+0x2d0>)
 8006014:	4013      	ands	r3, r2
 8006016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d021      	beq.n	8006068 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006024:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <HAL_GPIO_Init+0x2d0>)
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	490e      	ldr	r1, [pc, #56]	; (8006064 <HAL_GPIO_Init+0x2d0>)
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	4313      	orrs	r3, r2
 800602e:	600b      	str	r3, [r1, #0]
 8006030:	e021      	b.n	8006076 <HAL_GPIO_Init+0x2e2>
 8006032:	bf00      	nop
 8006034:	10320000 	.word	0x10320000
 8006038:	10310000 	.word	0x10310000
 800603c:	10220000 	.word	0x10220000
 8006040:	10210000 	.word	0x10210000
 8006044:	10120000 	.word	0x10120000
 8006048:	10110000 	.word	0x10110000
 800604c:	40021000 	.word	0x40021000
 8006050:	40010000 	.word	0x40010000
 8006054:	40010800 	.word	0x40010800
 8006058:	40010c00 	.word	0x40010c00
 800605c:	40011000 	.word	0x40011000
 8006060:	40011400 	.word	0x40011400
 8006064:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006068:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <HAL_GPIO_Init+0x304>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	43db      	mvns	r3, r3
 8006070:	4909      	ldr	r1, [pc, #36]	; (8006098 <HAL_GPIO_Init+0x304>)
 8006072:	4013      	ands	r3, r2
 8006074:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	3301      	adds	r3, #1
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	fa22 f303 	lsr.w	r3, r2, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	f47f ae8e 	bne.w	8005da8 <HAL_GPIO_Init+0x14>
  }
}
 800608c:	bf00      	nop
 800608e:	bf00      	nop
 8006090:	372c      	adds	r7, #44	; 0x2c
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr
 8006098:	40010400 	.word	0x40010400

0800609c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800609c:	b480      	push	{r7}
 800609e:	b089      	sub	sp, #36	; 0x24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060a6:	2300      	movs	r3, #0
 80060a8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80060aa:	e09a      	b.n	80061e2 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80060ac:	2201      	movs	r2, #1
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	4013      	ands	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 808d 	beq.w	80061dc <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80060c2:	4a4e      	ldr	r2, [pc, #312]	; (80061fc <HAL_GPIO_DeInit+0x160>)
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	089b      	lsrs	r3, r3, #2
 80060c8:	3302      	adds	r3, #2
 80060ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ce:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	220f      	movs	r2, #15
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4013      	ands	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a46      	ldr	r2, [pc, #280]	; (8006200 <HAL_GPIO_DeInit+0x164>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d013      	beq.n	8006114 <HAL_GPIO_DeInit+0x78>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a45      	ldr	r2, [pc, #276]	; (8006204 <HAL_GPIO_DeInit+0x168>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00d      	beq.n	8006110 <HAL_GPIO_DeInit+0x74>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a44      	ldr	r2, [pc, #272]	; (8006208 <HAL_GPIO_DeInit+0x16c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d007      	beq.n	800610c <HAL_GPIO_DeInit+0x70>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a43      	ldr	r2, [pc, #268]	; (800620c <HAL_GPIO_DeInit+0x170>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d101      	bne.n	8006108 <HAL_GPIO_DeInit+0x6c>
 8006104:	2303      	movs	r3, #3
 8006106:	e006      	b.n	8006116 <HAL_GPIO_DeInit+0x7a>
 8006108:	2304      	movs	r3, #4
 800610a:	e004      	b.n	8006116 <HAL_GPIO_DeInit+0x7a>
 800610c:	2302      	movs	r3, #2
 800610e:	e002      	b.n	8006116 <HAL_GPIO_DeInit+0x7a>
 8006110:	2301      	movs	r3, #1
 8006112:	e000      	b.n	8006116 <HAL_GPIO_DeInit+0x7a>
 8006114:	2300      	movs	r3, #0
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	f002 0203 	and.w	r2, r2, #3
 800611c:	0092      	lsls	r2, r2, #2
 800611e:	4093      	lsls	r3, r2
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	429a      	cmp	r2, r3
 8006124:	d132      	bne.n	800618c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8006126:	4b3a      	ldr	r3, [pc, #232]	; (8006210 <HAL_GPIO_DeInit+0x174>)
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	43db      	mvns	r3, r3
 800612e:	4938      	ldr	r1, [pc, #224]	; (8006210 <HAL_GPIO_DeInit+0x174>)
 8006130:	4013      	ands	r3, r2
 8006132:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006134:	4b36      	ldr	r3, [pc, #216]	; (8006210 <HAL_GPIO_DeInit+0x174>)
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	43db      	mvns	r3, r3
 800613c:	4934      	ldr	r1, [pc, #208]	; (8006210 <HAL_GPIO_DeInit+0x174>)
 800613e:	4013      	ands	r3, r2
 8006140:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8006142:	4b33      	ldr	r3, [pc, #204]	; (8006210 <HAL_GPIO_DeInit+0x174>)
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	43db      	mvns	r3, r3
 800614a:	4931      	ldr	r1, [pc, #196]	; (8006210 <HAL_GPIO_DeInit+0x174>)
 800614c:	4013      	ands	r3, r2
 800614e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8006150:	4b2f      	ldr	r3, [pc, #188]	; (8006210 <HAL_GPIO_DeInit+0x174>)
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	43db      	mvns	r3, r3
 8006158:	492d      	ldr	r1, [pc, #180]	; (8006210 <HAL_GPIO_DeInit+0x174>)
 800615a:	4013      	ands	r3, r2
 800615c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	f003 0303 	and.w	r3, r3, #3
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	220f      	movs	r2, #15
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800616e:	4a23      	ldr	r2, [pc, #140]	; (80061fc <HAL_GPIO_DeInit+0x160>)
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	089b      	lsrs	r3, r3, #2
 8006174:	3302      	adds	r3, #2
 8006176:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	43da      	mvns	r2, r3
 800617e:	481f      	ldr	r0, [pc, #124]	; (80061fc <HAL_GPIO_DeInit+0x160>)
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	089b      	lsrs	r3, r3, #2
 8006184:	400a      	ands	r2, r1
 8006186:	3302      	adds	r3, #2
 8006188:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	2bff      	cmp	r3, #255	; 0xff
 8006190:	d801      	bhi.n	8006196 <HAL_GPIO_DeInit+0xfa>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	e001      	b.n	800619a <HAL_GPIO_DeInit+0xfe>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3304      	adds	r3, #4
 800619a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	2bff      	cmp	r3, #255	; 0xff
 80061a0:	d802      	bhi.n	80061a8 <HAL_GPIO_DeInit+0x10c>
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	e002      	b.n	80061ae <HAL_GPIO_DeInit+0x112>
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	3b08      	subs	r3, #8
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	210f      	movs	r1, #15
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	fa01 f303 	lsl.w	r3, r1, r3
 80061bc:	43db      	mvns	r3, r3
 80061be:	401a      	ands	r2, r3
 80061c0:	2104      	movs	r1, #4
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	fa01 f303 	lsl.w	r3, r1, r3
 80061c8:	431a      	orrs	r2, r3
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	43db      	mvns	r3, r3
 80061d6:	401a      	ands	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	60da      	str	r2, [r3, #12]
    }

    position++;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	3301      	adds	r3, #1
 80061e0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f47f af5e 	bne.w	80060ac <HAL_GPIO_DeInit+0x10>
  }
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	3724      	adds	r7, #36	; 0x24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr
 80061fc:	40010000 	.word	0x40010000
 8006200:	40010800 	.word	0x40010800
 8006204:	40010c00 	.word	0x40010c00
 8006208:	40011000 	.word	0x40011000
 800620c:	40011400 	.word	0x40011400
 8006210:	40010400 	.word	0x40010400

08006214 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	887b      	ldrh	r3, [r7, #2]
 8006226:	4013      	ands	r3, r2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
 8006230:	e001      	b.n	8006236 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006232:	2300      	movs	r3, #0
 8006234:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006236:	7bfb      	ldrb	r3, [r7, #15]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr

08006242 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	807b      	strh	r3, [r7, #2]
 800624e:	4613      	mov	r3, r2
 8006250:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006252:	787b      	ldrb	r3, [r7, #1]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006258:	887a      	ldrh	r2, [r7, #2]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800625e:	e003      	b.n	8006268 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006260:	887b      	ldrh	r3, [r7, #2]
 8006262:	041a      	lsls	r2, r3, #16
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	611a      	str	r2, [r3, #16]
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	bc80      	pop	{r7}
 8006270:	4770      	bx	lr
	...

08006274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e12b      	b.n	80064de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7fd f830 	bl	8003300 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2224      	movs	r2, #36	; 0x24
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0201 	bic.w	r2, r2, #1
 80062b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062d8:	f001 f97c 	bl	80075d4 <HAL_RCC_GetPCLK1Freq>
 80062dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	4a81      	ldr	r2, [pc, #516]	; (80064e8 <HAL_I2C_Init+0x274>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d807      	bhi.n	80062f8 <HAL_I2C_Init+0x84>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4a80      	ldr	r2, [pc, #512]	; (80064ec <HAL_I2C_Init+0x278>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	bf94      	ite	ls
 80062f0:	2301      	movls	r3, #1
 80062f2:	2300      	movhi	r3, #0
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	e006      	b.n	8006306 <HAL_I2C_Init+0x92>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4a7d      	ldr	r2, [pc, #500]	; (80064f0 <HAL_I2C_Init+0x27c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	bf94      	ite	ls
 8006300:	2301      	movls	r3, #1
 8006302:	2300      	movhi	r3, #0
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e0e7      	b.n	80064de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4a78      	ldr	r2, [pc, #480]	; (80064f4 <HAL_I2C_Init+0x280>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	0c9b      	lsrs	r3, r3, #18
 8006318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	4a6a      	ldr	r2, [pc, #424]	; (80064e8 <HAL_I2C_Init+0x274>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d802      	bhi.n	8006348 <HAL_I2C_Init+0xd4>
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	3301      	adds	r3, #1
 8006346:	e009      	b.n	800635c <HAL_I2C_Init+0xe8>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800634e:	fb02 f303 	mul.w	r3, r2, r3
 8006352:	4a69      	ldr	r2, [pc, #420]	; (80064f8 <HAL_I2C_Init+0x284>)
 8006354:	fba2 2303 	umull	r2, r3, r2, r3
 8006358:	099b      	lsrs	r3, r3, #6
 800635a:	3301      	adds	r3, #1
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	430b      	orrs	r3, r1
 8006362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800636e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	495c      	ldr	r1, [pc, #368]	; (80064e8 <HAL_I2C_Init+0x274>)
 8006378:	428b      	cmp	r3, r1
 800637a:	d819      	bhi.n	80063b0 <HAL_I2C_Init+0x13c>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	1e59      	subs	r1, r3, #1
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	fbb1 f3f3 	udiv	r3, r1, r3
 800638a:	1c59      	adds	r1, r3, #1
 800638c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006390:	400b      	ands	r3, r1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <HAL_I2C_Init+0x138>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	1e59      	subs	r1, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80063a4:	3301      	adds	r3, #1
 80063a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063aa:	e051      	b.n	8006450 <HAL_I2C_Init+0x1dc>
 80063ac:	2304      	movs	r3, #4
 80063ae:	e04f      	b.n	8006450 <HAL_I2C_Init+0x1dc>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d111      	bne.n	80063dc <HAL_I2C_Init+0x168>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	1e58      	subs	r0, r3, #1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6859      	ldr	r1, [r3, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	440b      	add	r3, r1
 80063c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80063ca:	3301      	adds	r3, #1
 80063cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	bf0c      	ite	eq
 80063d4:	2301      	moveq	r3, #1
 80063d6:	2300      	movne	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	e012      	b.n	8006402 <HAL_I2C_Init+0x18e>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	1e58      	subs	r0, r3, #1
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6859      	ldr	r1, [r3, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	0099      	lsls	r1, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80063f2:	3301      	adds	r3, #1
 80063f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	bf0c      	ite	eq
 80063fc:	2301      	moveq	r3, #1
 80063fe:	2300      	movne	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <HAL_I2C_Init+0x196>
 8006406:	2301      	movs	r3, #1
 8006408:	e022      	b.n	8006450 <HAL_I2C_Init+0x1dc>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10e      	bne.n	8006430 <HAL_I2C_Init+0x1bc>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1e58      	subs	r0, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6859      	ldr	r1, [r3, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	440b      	add	r3, r1
 8006420:	fbb0 f3f3 	udiv	r3, r0, r3
 8006424:	3301      	adds	r3, #1
 8006426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800642a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642e:	e00f      	b.n	8006450 <HAL_I2C_Init+0x1dc>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	1e58      	subs	r0, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6859      	ldr	r1, [r3, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	0099      	lsls	r1, r3, #2
 8006440:	440b      	add	r3, r1
 8006442:	fbb0 f3f3 	udiv	r3, r0, r3
 8006446:	3301      	adds	r3, #1
 8006448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800644c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	6809      	ldr	r1, [r1, #0]
 8006454:	4313      	orrs	r3, r2
 8006456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69da      	ldr	r2, [r3, #28]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	431a      	orrs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800647e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6911      	ldr	r1, [r2, #16]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	68d2      	ldr	r2, [r2, #12]
 800648a:	4311      	orrs	r1, r2
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6812      	ldr	r2, [r2, #0]
 8006490:	430b      	orrs	r3, r1
 8006492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695a      	ldr	r2, [r3, #20]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0201 	orr.w	r2, r2, #1
 80064be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	000186a0 	.word	0x000186a0
 80064ec:	001e847f 	.word	0x001e847f
 80064f0:	003d08ff 	.word	0x003d08ff
 80064f4:	431bde83 	.word	0x431bde83
 80064f8:	10624dd3 	.word	0x10624dd3

080064fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	4608      	mov	r0, r1
 8006506:	4611      	mov	r1, r2
 8006508:	461a      	mov	r2, r3
 800650a:	4603      	mov	r3, r0
 800650c:	817b      	strh	r3, [r7, #10]
 800650e:	460b      	mov	r3, r1
 8006510:	813b      	strh	r3, [r7, #8]
 8006512:	4613      	mov	r3, r2
 8006514:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006516:	f7fe fc3d 	bl	8004d94 <HAL_GetTick>
 800651a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b20      	cmp	r3, #32
 8006526:	f040 80d9 	bne.w	80066dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	2319      	movs	r3, #25
 8006530:	2201      	movs	r2, #1
 8006532:	496d      	ldr	r1, [pc, #436]	; (80066e8 <HAL_I2C_Mem_Write+0x1ec>)
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fa9f 	bl	8006a78 <I2C_WaitOnFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006540:	2302      	movs	r3, #2
 8006542:	e0cc      	b.n	80066de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <HAL_I2C_Mem_Write+0x56>
 800654e:	2302      	movs	r3, #2
 8006550:	e0c5      	b.n	80066de <HAL_I2C_Mem_Write+0x1e2>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b01      	cmp	r3, #1
 8006566:	d007      	beq.n	8006578 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0201 	orr.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006586:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2221      	movs	r2, #33	; 0x21
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2240      	movs	r2, #64	; 0x40
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a3a      	ldr	r2, [r7, #32]
 80065a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4a4d      	ldr	r2, [pc, #308]	; (80066ec <HAL_I2C_Mem_Write+0x1f0>)
 80065b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065ba:	88f8      	ldrh	r0, [r7, #6]
 80065bc:	893a      	ldrh	r2, [r7, #8]
 80065be:	8979      	ldrh	r1, [r7, #10]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	4603      	mov	r3, r0
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 f9be 	bl	800694c <I2C_RequestMemoryWrite>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d052      	beq.n	800667c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e081      	b.n	80066de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 fb64 	bl	8006cac <I2C_WaitOnTXEFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00d      	beq.n	8006606 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d107      	bne.n	8006602 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006600:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e06b      	b.n	80066de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	781a      	ldrb	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662c:	b29b      	uxth	r3, r3
 800662e:	3b01      	subs	r3, #1
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b04      	cmp	r3, #4
 8006642:	d11b      	bne.n	800667c <HAL_I2C_Mem_Write+0x180>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006648:	2b00      	cmp	r3, #0
 800664a:	d017      	beq.n	800667c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	781a      	ldrb	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006666:	3b01      	subs	r3, #1
 8006668:	b29a      	uxth	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1aa      	bne.n	80065da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 fb57 	bl	8006d3c <I2C_WaitOnBTFFlagUntilTimeout>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00d      	beq.n	80066b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	2b04      	cmp	r3, #4
 800669a:	d107      	bne.n	80066ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e016      	b.n	80066de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	e000      	b.n	80066de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80066dc:	2302      	movs	r3, #2
  }
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	00100002 	.word	0x00100002
 80066ec:	ffff0000 	.word	0xffff0000

080066f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08a      	sub	sp, #40	; 0x28
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	607a      	str	r2, [r7, #4]
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	460b      	mov	r3, r1
 80066fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006700:	f7fe fb48 	bl	8004d94 <HAL_GetTick>
 8006704:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b20      	cmp	r3, #32
 8006714:	f040 8111 	bne.w	800693a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	2319      	movs	r3, #25
 800671e:	2201      	movs	r2, #1
 8006720:	4988      	ldr	r1, [pc, #544]	; (8006944 <HAL_I2C_IsDeviceReady+0x254>)
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 f9a8 	bl	8006a78 <I2C_WaitOnFlagUntilTimeout>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800672e:	2302      	movs	r3, #2
 8006730:	e104      	b.n	800693c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_I2C_IsDeviceReady+0x50>
 800673c:	2302      	movs	r3, #2
 800673e:	e0fd      	b.n	800693c <HAL_I2C_IsDeviceReady+0x24c>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b01      	cmp	r3, #1
 8006754:	d007      	beq.n	8006766 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0201 	orr.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006774:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2224      	movs	r2, #36	; 0x24
 800677a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4a70      	ldr	r2, [pc, #448]	; (8006948 <HAL_I2C_IsDeviceReady+0x258>)
 8006788:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006798:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f966 	bl	8006a78 <I2C_WaitOnFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00d      	beq.n	80067ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c0:	d103      	bne.n	80067ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e0b6      	b.n	800693c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067ce:	897b      	ldrh	r3, [r7, #10]
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	461a      	mov	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80067de:	f7fe fad9 	bl	8004d94 <HAL_GetTick>
 80067e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	bf0c      	ite	eq
 80067f2:	2301      	moveq	r3, #1
 80067f4:	2300      	movne	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006808:	bf0c      	ite	eq
 800680a:	2301      	moveq	r3, #1
 800680c:	2300      	movne	r3, #0
 800680e:	b2db      	uxtb	r3, r3
 8006810:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006812:	e025      	b.n	8006860 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006814:	f7fe fabe 	bl	8004d94 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d302      	bcc.n	800682a <HAL_I2C_IsDeviceReady+0x13a>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d103      	bne.n	8006832 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	22a0      	movs	r2, #160	; 0xa0
 800682e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b02      	cmp	r3, #2
 800683e:	bf0c      	ite	eq
 8006840:	2301      	moveq	r3, #1
 8006842:	2300      	movne	r3, #0
 8006844:	b2db      	uxtb	r3, r3
 8006846:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006856:	bf0c      	ite	eq
 8006858:	2301      	moveq	r3, #1
 800685a:	2300      	movne	r3, #0
 800685c:	b2db      	uxtb	r3, r3
 800685e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2ba0      	cmp	r3, #160	; 0xa0
 800686a:	d005      	beq.n	8006878 <HAL_I2C_IsDeviceReady+0x188>
 800686c:	7dfb      	ldrb	r3, [r7, #23]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d102      	bne.n	8006878 <HAL_I2C_IsDeviceReady+0x188>
 8006872:	7dbb      	ldrb	r3, [r7, #22]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0cd      	beq.n	8006814 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2220      	movs	r2, #32
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b02      	cmp	r3, #2
 800688c:	d129      	bne.n	80068e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800689c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800689e:	2300      	movs	r3, #0
 80068a0:	613b      	str	r3, [r7, #16]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	613b      	str	r3, [r7, #16]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	2319      	movs	r3, #25
 80068ba:	2201      	movs	r2, #1
 80068bc:	4921      	ldr	r1, [pc, #132]	; (8006944 <HAL_I2C_IsDeviceReady+0x254>)
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 f8da 	bl	8006a78 <I2C_WaitOnFlagUntilTimeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e036      	b.n	800693c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	e02c      	b.n	800693c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	2319      	movs	r3, #25
 8006902:	2201      	movs	r2, #1
 8006904:	490f      	ldr	r1, [pc, #60]	; (8006944 <HAL_I2C_IsDeviceReady+0x254>)
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 f8b6 	bl	8006a78 <I2C_WaitOnFlagUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e012      	b.n	800693c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	3301      	adds	r3, #1
 800691a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	429a      	cmp	r2, r3
 8006922:	f4ff af32 	bcc.w	800678a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2220      	movs	r2, #32
 800692a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800693a:	2302      	movs	r3, #2
  }
}
 800693c:	4618      	mov	r0, r3
 800693e:	3720      	adds	r7, #32
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	00100002 	.word	0x00100002
 8006948:	ffff0000 	.word	0xffff0000

0800694c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af02      	add	r7, sp, #8
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	4608      	mov	r0, r1
 8006956:	4611      	mov	r1, r2
 8006958:	461a      	mov	r2, r3
 800695a:	4603      	mov	r3, r0
 800695c:	817b      	strh	r3, [r7, #10]
 800695e:	460b      	mov	r3, r1
 8006960:	813b      	strh	r3, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006974:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	2200      	movs	r2, #0
 800697e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 f878 	bl	8006a78 <I2C_WaitOnFlagUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00d      	beq.n	80069aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699c:	d103      	bne.n	80069a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e05f      	b.n	8006a6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069aa:	897b      	ldrh	r3, [r7, #10]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	461a      	mov	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	6a3a      	ldr	r2, [r7, #32]
 80069be:	492d      	ldr	r1, [pc, #180]	; (8006a74 <I2C_RequestMemoryWrite+0x128>)
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f8d3 	bl	8006b6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e04c      	b.n	8006a6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069d0:	2300      	movs	r3, #0
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e8:	6a39      	ldr	r1, [r7, #32]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f95e 	bl	8006cac <I2C_WaitOnTXEFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00d      	beq.n	8006a12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d107      	bne.n	8006a0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e02b      	b.n	8006a6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a12:	88fb      	ldrh	r3, [r7, #6]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d105      	bne.n	8006a24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a18:	893b      	ldrh	r3, [r7, #8]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	611a      	str	r2, [r3, #16]
 8006a22:	e021      	b.n	8006a68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a24:	893b      	ldrh	r3, [r7, #8]
 8006a26:	0a1b      	lsrs	r3, r3, #8
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a34:	6a39      	ldr	r1, [r7, #32]
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 f938 	bl	8006cac <I2C_WaitOnTXEFlagUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00d      	beq.n	8006a5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d107      	bne.n	8006a5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e005      	b.n	8006a6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a5e:	893b      	ldrh	r3, [r7, #8]
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	00010002 	.word	0x00010002

08006a78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	603b      	str	r3, [r7, #0]
 8006a84:	4613      	mov	r3, r2
 8006a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a88:	e048      	b.n	8006b1c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a90:	d044      	beq.n	8006b1c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a92:	f7fe f97f 	bl	8004d94 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d302      	bcc.n	8006aa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d139      	bne.n	8006b1c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	0c1b      	lsrs	r3, r3, #16
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d10d      	bne.n	8006ace <I2C_WaitOnFlagUntilTimeout+0x56>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	43da      	mvns	r2, r3
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	4013      	ands	r3, r2
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	bf0c      	ite	eq
 8006ac4:	2301      	moveq	r3, #1
 8006ac6:	2300      	movne	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	461a      	mov	r2, r3
 8006acc:	e00c      	b.n	8006ae8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	43da      	mvns	r2, r3
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	bf0c      	ite	eq
 8006ae0:	2301      	moveq	r3, #1
 8006ae2:	2300      	movne	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	79fb      	ldrb	r3, [r7, #7]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d116      	bne.n	8006b1c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	f043 0220 	orr.w	r2, r3, #32
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e023      	b.n	8006b64 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	0c1b      	lsrs	r3, r3, #16
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d10d      	bne.n	8006b42 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	43da      	mvns	r2, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	4013      	ands	r3, r2
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	bf0c      	ite	eq
 8006b38:	2301      	moveq	r3, #1
 8006b3a:	2300      	movne	r3, #0
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	461a      	mov	r2, r3
 8006b40:	e00c      	b.n	8006b5c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	43da      	mvns	r2, r3
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	bf0c      	ite	eq
 8006b54:	2301      	moveq	r3, #1
 8006b56:	2300      	movne	r3, #0
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d093      	beq.n	8006a8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b7a:	e071      	b.n	8006c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b8a:	d123      	bne.n	8006bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b9a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ba4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	f043 0204 	orr.w	r2, r3, #4
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e067      	b.n	8006ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d041      	beq.n	8006c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bdc:	f7fe f8da 	bl	8004d94 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d302      	bcc.n	8006bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d136      	bne.n	8006c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	0c1b      	lsrs	r3, r3, #16
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d10c      	bne.n	8006c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	43da      	mvns	r2, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4013      	ands	r3, r2
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	bf14      	ite	ne
 8006c0e:	2301      	movne	r3, #1
 8006c10:	2300      	moveq	r3, #0
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	e00b      	b.n	8006c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	43da      	mvns	r2, r3
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	4013      	ands	r3, r2
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	bf14      	ite	ne
 8006c28:	2301      	movne	r3, #1
 8006c2a:	2300      	moveq	r3, #0
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d016      	beq.n	8006c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4c:	f043 0220 	orr.w	r2, r3, #32
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e021      	b.n	8006ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	0c1b      	lsrs	r3, r3, #16
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d10c      	bne.n	8006c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	43da      	mvns	r2, r3
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	4013      	ands	r3, r2
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	bf14      	ite	ne
 8006c7c:	2301      	movne	r3, #1
 8006c7e:	2300      	moveq	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	e00b      	b.n	8006c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	43da      	mvns	r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	bf14      	ite	ne
 8006c96:	2301      	movne	r3, #1
 8006c98:	2300      	moveq	r3, #0
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f47f af6d 	bne.w	8006b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cb8:	e034      	b.n	8006d24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 f886 	bl	8006dcc <I2C_IsAcknowledgeFailed>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e034      	b.n	8006d34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd0:	d028      	beq.n	8006d24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cd2:	f7fe f85f 	bl	8004d94 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d302      	bcc.n	8006ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d11d      	bne.n	8006d24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf2:	2b80      	cmp	r3, #128	; 0x80
 8006cf4:	d016      	beq.n	8006d24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	f043 0220 	orr.w	r2, r3, #32
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e007      	b.n	8006d34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2e:	2b80      	cmp	r3, #128	; 0x80
 8006d30:	d1c3      	bne.n	8006cba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d48:	e034      	b.n	8006db4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 f83e 	bl	8006dcc <I2C_IsAcknowledgeFailed>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e034      	b.n	8006dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d028      	beq.n	8006db4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d62:	f7fe f817 	bl	8004d94 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d302      	bcc.n	8006d78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d11d      	bne.n	8006db4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	d016      	beq.n	8006db4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	f043 0220 	orr.w	r2, r3, #32
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e007      	b.n	8006dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	f003 0304 	and.w	r3, r3, #4
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d1c3      	bne.n	8006d4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de2:	d11b      	bne.n	8006e1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e08:	f043 0204 	orr.w	r2, r3, #4
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e000      	b.n	8006e1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bc80      	pop	{r7}
 8006e26:	4770      	bx	lr

08006e28 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006e2c:	4b03      	ldr	r3, [pc, #12]	; (8006e3c <HAL_PWR_EnableBkUpAccess+0x14>)
 8006e2e:	2201      	movs	r2, #1
 8006e30:	601a      	str	r2, [r3, #0]
}
 8006e32:	bf00      	nop
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	420e0020 	.word	0x420e0020

08006e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e272      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 8087 	beq.w	8006f6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e60:	4b92      	ldr	r3, [pc, #584]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f003 030c 	and.w	r3, r3, #12
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d00c      	beq.n	8006e86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e6c:	4b8f      	ldr	r3, [pc, #572]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f003 030c 	and.w	r3, r3, #12
 8006e74:	2b08      	cmp	r3, #8
 8006e76:	d112      	bne.n	8006e9e <HAL_RCC_OscConfig+0x5e>
 8006e78:	4b8c      	ldr	r3, [pc, #560]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e84:	d10b      	bne.n	8006e9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e86:	4b89      	ldr	r3, [pc, #548]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d06c      	beq.n	8006f6c <HAL_RCC_OscConfig+0x12c>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d168      	bne.n	8006f6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e24c      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea6:	d106      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x76>
 8006ea8:	4b80      	ldr	r3, [pc, #512]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a7f      	ldr	r2, [pc, #508]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	e02e      	b.n	8006f14 <HAL_RCC_OscConfig+0xd4>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10c      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x98>
 8006ebe:	4b7b      	ldr	r3, [pc, #492]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a7a      	ldr	r2, [pc, #488]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	4b78      	ldr	r3, [pc, #480]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a77      	ldr	r2, [pc, #476]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	e01d      	b.n	8006f14 <HAL_RCC_OscConfig+0xd4>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ee0:	d10c      	bne.n	8006efc <HAL_RCC_OscConfig+0xbc>
 8006ee2:	4b72      	ldr	r3, [pc, #456]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a71      	ldr	r2, [pc, #452]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	4b6f      	ldr	r3, [pc, #444]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a6e      	ldr	r2, [pc, #440]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	e00b      	b.n	8006f14 <HAL_RCC_OscConfig+0xd4>
 8006efc:	4b6b      	ldr	r3, [pc, #428]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a6a      	ldr	r2, [pc, #424]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	4b68      	ldr	r3, [pc, #416]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a67      	ldr	r2, [pc, #412]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d013      	beq.n	8006f44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f1c:	f7fd ff3a 	bl	8004d94 <HAL_GetTick>
 8006f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f22:	e008      	b.n	8006f36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f24:	f7fd ff36 	bl	8004d94 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b64      	cmp	r3, #100	; 0x64
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e200      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f36:	4b5d      	ldr	r3, [pc, #372]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0f0      	beq.n	8006f24 <HAL_RCC_OscConfig+0xe4>
 8006f42:	e014      	b.n	8006f6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f44:	f7fd ff26 	bl	8004d94 <HAL_GetTick>
 8006f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f4c:	f7fd ff22 	bl	8004d94 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b64      	cmp	r3, #100	; 0x64
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e1ec      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f5e:	4b53      	ldr	r3, [pc, #332]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f0      	bne.n	8006f4c <HAL_RCC_OscConfig+0x10c>
 8006f6a:	e000      	b.n	8006f6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d063      	beq.n	8007042 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f7a:	4b4c      	ldr	r3, [pc, #304]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f003 030c 	and.w	r3, r3, #12
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00b      	beq.n	8006f9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006f86:	4b49      	ldr	r3, [pc, #292]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f003 030c 	and.w	r3, r3, #12
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	d11c      	bne.n	8006fcc <HAL_RCC_OscConfig+0x18c>
 8006f92:	4b46      	ldr	r3, [pc, #280]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d116      	bne.n	8006fcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f9e:	4b43      	ldr	r3, [pc, #268]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x176>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d001      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e1c0      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fb6:	4b3d      	ldr	r3, [pc, #244]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	4939      	ldr	r1, [pc, #228]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fca:	e03a      	b.n	8007042 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d020      	beq.n	8007016 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fd4:	4b36      	ldr	r3, [pc, #216]	; (80070b0 <HAL_RCC_OscConfig+0x270>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fda:	f7fd fedb 	bl	8004d94 <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fe2:	f7fd fed7 	bl	8004d94 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e1a1      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff4:	4b2d      	ldr	r3, [pc, #180]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0f0      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007000:	4b2a      	ldr	r3, [pc, #168]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	4927      	ldr	r1, [pc, #156]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8007010:	4313      	orrs	r3, r2
 8007012:	600b      	str	r3, [r1, #0]
 8007014:	e015      	b.n	8007042 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007016:	4b26      	ldr	r3, [pc, #152]	; (80070b0 <HAL_RCC_OscConfig+0x270>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800701c:	f7fd feba 	bl	8004d94 <HAL_GetTick>
 8007020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007024:	f7fd feb6 	bl	8004d94 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e180      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007036:	4b1d      	ldr	r3, [pc, #116]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f0      	bne.n	8007024 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d03a      	beq.n	80070c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d019      	beq.n	800708a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007056:	4b17      	ldr	r3, [pc, #92]	; (80070b4 <HAL_RCC_OscConfig+0x274>)
 8007058:	2201      	movs	r2, #1
 800705a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800705c:	f7fd fe9a 	bl	8004d94 <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007064:	f7fd fe96 	bl	8004d94 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e160      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007076:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0f0      	beq.n	8007064 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007082:	2001      	movs	r0, #1
 8007084:	f000 fafe 	bl	8007684 <RCC_Delay>
 8007088:	e01c      	b.n	80070c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800708a:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <HAL_RCC_OscConfig+0x274>)
 800708c:	2200      	movs	r2, #0
 800708e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007090:	f7fd fe80 	bl	8004d94 <HAL_GetTick>
 8007094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007096:	e00f      	b.n	80070b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007098:	f7fd fe7c 	bl	8004d94 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d908      	bls.n	80070b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e146      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
 80070aa:	bf00      	nop
 80070ac:	40021000 	.word	0x40021000
 80070b0:	42420000 	.word	0x42420000
 80070b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070b8:	4b92      	ldr	r3, [pc, #584]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e9      	bne.n	8007098 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 80a6 	beq.w	800721e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070d2:	2300      	movs	r3, #0
 80070d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070d6:	4b8b      	ldr	r3, [pc, #556]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10d      	bne.n	80070fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070e2:	4b88      	ldr	r3, [pc, #544]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	4a87      	ldr	r2, [pc, #540]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80070e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ec:	61d3      	str	r3, [r2, #28]
 80070ee:	4b85      	ldr	r3, [pc, #532]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070f6:	60bb      	str	r3, [r7, #8]
 80070f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070fa:	2301      	movs	r3, #1
 80070fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070fe:	4b82      	ldr	r3, [pc, #520]	; (8007308 <HAL_RCC_OscConfig+0x4c8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007106:	2b00      	cmp	r3, #0
 8007108:	d118      	bne.n	800713c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800710a:	4b7f      	ldr	r3, [pc, #508]	; (8007308 <HAL_RCC_OscConfig+0x4c8>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a7e      	ldr	r2, [pc, #504]	; (8007308 <HAL_RCC_OscConfig+0x4c8>)
 8007110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007116:	f7fd fe3d 	bl	8004d94 <HAL_GetTick>
 800711a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800711c:	e008      	b.n	8007130 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800711e:	f7fd fe39 	bl	8004d94 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b64      	cmp	r3, #100	; 0x64
 800712a:	d901      	bls.n	8007130 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e103      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007130:	4b75      	ldr	r3, [pc, #468]	; (8007308 <HAL_RCC_OscConfig+0x4c8>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007138:	2b00      	cmp	r3, #0
 800713a:	d0f0      	beq.n	800711e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d106      	bne.n	8007152 <HAL_RCC_OscConfig+0x312>
 8007144:	4b6f      	ldr	r3, [pc, #444]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	4a6e      	ldr	r2, [pc, #440]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800714a:	f043 0301 	orr.w	r3, r3, #1
 800714e:	6213      	str	r3, [r2, #32]
 8007150:	e02d      	b.n	80071ae <HAL_RCC_OscConfig+0x36e>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10c      	bne.n	8007174 <HAL_RCC_OscConfig+0x334>
 800715a:	4b6a      	ldr	r3, [pc, #424]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	4a69      	ldr	r2, [pc, #420]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007160:	f023 0301 	bic.w	r3, r3, #1
 8007164:	6213      	str	r3, [r2, #32]
 8007166:	4b67      	ldr	r3, [pc, #412]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	4a66      	ldr	r2, [pc, #408]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800716c:	f023 0304 	bic.w	r3, r3, #4
 8007170:	6213      	str	r3, [r2, #32]
 8007172:	e01c      	b.n	80071ae <HAL_RCC_OscConfig+0x36e>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	2b05      	cmp	r3, #5
 800717a:	d10c      	bne.n	8007196 <HAL_RCC_OscConfig+0x356>
 800717c:	4b61      	ldr	r3, [pc, #388]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	4a60      	ldr	r2, [pc, #384]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007182:	f043 0304 	orr.w	r3, r3, #4
 8007186:	6213      	str	r3, [r2, #32]
 8007188:	4b5e      	ldr	r3, [pc, #376]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	4a5d      	ldr	r2, [pc, #372]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800718e:	f043 0301 	orr.w	r3, r3, #1
 8007192:	6213      	str	r3, [r2, #32]
 8007194:	e00b      	b.n	80071ae <HAL_RCC_OscConfig+0x36e>
 8007196:	4b5b      	ldr	r3, [pc, #364]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	4a5a      	ldr	r2, [pc, #360]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800719c:	f023 0301 	bic.w	r3, r3, #1
 80071a0:	6213      	str	r3, [r2, #32]
 80071a2:	4b58      	ldr	r3, [pc, #352]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	4a57      	ldr	r2, [pc, #348]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80071a8:	f023 0304 	bic.w	r3, r3, #4
 80071ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d015      	beq.n	80071e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071b6:	f7fd fded 	bl	8004d94 <HAL_GetTick>
 80071ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071bc:	e00a      	b.n	80071d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071be:	f7fd fde9 	bl	8004d94 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d901      	bls.n	80071d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e0b1      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d4:	4b4b      	ldr	r3, [pc, #300]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0ee      	beq.n	80071be <HAL_RCC_OscConfig+0x37e>
 80071e0:	e014      	b.n	800720c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071e2:	f7fd fdd7 	bl	8004d94 <HAL_GetTick>
 80071e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071e8:	e00a      	b.n	8007200 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ea:	f7fd fdd3 	bl	8004d94 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d901      	bls.n	8007200 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e09b      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007200:	4b40      	ldr	r3, [pc, #256]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1ee      	bne.n	80071ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800720c:	7dfb      	ldrb	r3, [r7, #23]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d105      	bne.n	800721e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007212:	4b3c      	ldr	r3, [pc, #240]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	4a3b      	ldr	r2, [pc, #236]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800721c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 8087 	beq.w	8007336 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007228:	4b36      	ldr	r3, [pc, #216]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f003 030c 	and.w	r3, r3, #12
 8007230:	2b08      	cmp	r3, #8
 8007232:	d061      	beq.n	80072f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	2b02      	cmp	r3, #2
 800723a:	d146      	bne.n	80072ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800723c:	4b33      	ldr	r3, [pc, #204]	; (800730c <HAL_RCC_OscConfig+0x4cc>)
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007242:	f7fd fda7 	bl	8004d94 <HAL_GetTick>
 8007246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007248:	e008      	b.n	800725c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800724a:	f7fd fda3 	bl	8004d94 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e06d      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800725c:	4b29      	ldr	r3, [pc, #164]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1f0      	bne.n	800724a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007270:	d108      	bne.n	8007284 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007272:	4b24      	ldr	r3, [pc, #144]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	4921      	ldr	r1, [pc, #132]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007280:	4313      	orrs	r3, r2
 8007282:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007284:	4b1f      	ldr	r3, [pc, #124]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a19      	ldr	r1, [r3, #32]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	430b      	orrs	r3, r1
 8007296:	491b      	ldr	r1, [pc, #108]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007298:	4313      	orrs	r3, r2
 800729a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800729c:	4b1b      	ldr	r3, [pc, #108]	; (800730c <HAL_RCC_OscConfig+0x4cc>)
 800729e:	2201      	movs	r2, #1
 80072a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072a2:	f7fd fd77 	bl	8004d94 <HAL_GetTick>
 80072a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072a8:	e008      	b.n	80072bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072aa:	f7fd fd73 	bl	8004d94 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e03d      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072bc:	4b11      	ldr	r3, [pc, #68]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0f0      	beq.n	80072aa <HAL_RCC_OscConfig+0x46a>
 80072c8:	e035      	b.n	8007336 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ca:	4b10      	ldr	r3, [pc, #64]	; (800730c <HAL_RCC_OscConfig+0x4cc>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072d0:	f7fd fd60 	bl	8004d94 <HAL_GetTick>
 80072d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072d6:	e008      	b.n	80072ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072d8:	f7fd fd5c 	bl	8004d94 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e026      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072ea:	4b06      	ldr	r3, [pc, #24]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1f0      	bne.n	80072d8 <HAL_RCC_OscConfig+0x498>
 80072f6:	e01e      	b.n	8007336 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d107      	bne.n	8007310 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e019      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
 8007304:	40021000 	.word	0x40021000
 8007308:	40007000 	.word	0x40007000
 800730c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007310:	4b0b      	ldr	r3, [pc, #44]	; (8007340 <HAL_RCC_OscConfig+0x500>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	429a      	cmp	r2, r3
 8007322:	d106      	bne.n	8007332 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800732e:	429a      	cmp	r2, r3
 8007330:	d001      	beq.n	8007336 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	40021000 	.word	0x40021000

08007344 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e0d0      	b.n	80074fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007358:	4b6a      	ldr	r3, [pc, #424]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	429a      	cmp	r2, r3
 8007364:	d910      	bls.n	8007388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007366:	4b67      	ldr	r3, [pc, #412]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f023 0207 	bic.w	r2, r3, #7
 800736e:	4965      	ldr	r1, [pc, #404]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	4313      	orrs	r3, r2
 8007374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007376:	4b63      	ldr	r3, [pc, #396]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0307 	and.w	r3, r3, #7
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d001      	beq.n	8007388 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e0b8      	b.n	80074fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d020      	beq.n	80073d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	d005      	beq.n	80073ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073a0:	4b59      	ldr	r3, [pc, #356]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	4a58      	ldr	r2, [pc, #352]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80073a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80073aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d005      	beq.n	80073c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073b8:	4b53      	ldr	r3, [pc, #332]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	4a52      	ldr	r2, [pc, #328]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80073be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80073c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073c4:	4b50      	ldr	r3, [pc, #320]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	494d      	ldr	r1, [pc, #308]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d040      	beq.n	8007464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d107      	bne.n	80073fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ea:	4b47      	ldr	r3, [pc, #284]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d115      	bne.n	8007422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e07f      	b.n	80074fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d107      	bne.n	8007412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007402:	4b41      	ldr	r3, [pc, #260]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e073      	b.n	80074fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007412:	4b3d      	ldr	r3, [pc, #244]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e06b      	b.n	80074fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007422:	4b39      	ldr	r3, [pc, #228]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f023 0203 	bic.w	r2, r3, #3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	4936      	ldr	r1, [pc, #216]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 8007430:	4313      	orrs	r3, r2
 8007432:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007434:	f7fd fcae 	bl	8004d94 <HAL_GetTick>
 8007438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800743a:	e00a      	b.n	8007452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800743c:	f7fd fcaa 	bl	8004d94 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	f241 3288 	movw	r2, #5000	; 0x1388
 800744a:	4293      	cmp	r3, r2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e053      	b.n	80074fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007452:	4b2d      	ldr	r3, [pc, #180]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f003 020c 	and.w	r2, r3, #12
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	429a      	cmp	r2, r3
 8007462:	d1eb      	bne.n	800743c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007464:	4b27      	ldr	r3, [pc, #156]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d210      	bcs.n	8007494 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007472:	4b24      	ldr	r3, [pc, #144]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f023 0207 	bic.w	r2, r3, #7
 800747a:	4922      	ldr	r1, [pc, #136]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	4313      	orrs	r3, r2
 8007480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007482:	4b20      	ldr	r3, [pc, #128]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0307 	and.w	r3, r3, #7
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	429a      	cmp	r2, r3
 800748e:	d001      	beq.n	8007494 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e032      	b.n	80074fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b00      	cmp	r3, #0
 800749e:	d008      	beq.n	80074b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074a0:	4b19      	ldr	r3, [pc, #100]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	4916      	ldr	r1, [pc, #88]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0308 	and.w	r3, r3, #8
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d009      	beq.n	80074d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80074be:	4b12      	ldr	r3, [pc, #72]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	490e      	ldr	r1, [pc, #56]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80074d2:	f000 f821 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 80074d6:	4602      	mov	r2, r0
 80074d8:	4b0b      	ldr	r3, [pc, #44]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	091b      	lsrs	r3, r3, #4
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	490a      	ldr	r1, [pc, #40]	; (800750c <HAL_RCC_ClockConfig+0x1c8>)
 80074e4:	5ccb      	ldrb	r3, [r1, r3]
 80074e6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ea:	4a09      	ldr	r2, [pc, #36]	; (8007510 <HAL_RCC_ClockConfig+0x1cc>)
 80074ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <HAL_RCC_ClockConfig+0x1d0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fc f93e 	bl	8003774 <HAL_InitTick>

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	40022000 	.word	0x40022000
 8007508:	40021000 	.word	0x40021000
 800750c:	0800ea20 	.word	0x0800ea20
 8007510:	20000200 	.word	0x20000200
 8007514:	20000204 	.word	0x20000204

08007518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	60fb      	str	r3, [r7, #12]
 8007522:	2300      	movs	r3, #0
 8007524:	60bb      	str	r3, [r7, #8]
 8007526:	2300      	movs	r3, #0
 8007528:	617b      	str	r3, [r7, #20]
 800752a:	2300      	movs	r3, #0
 800752c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007532:	4b1e      	ldr	r3, [pc, #120]	; (80075ac <HAL_RCC_GetSysClockFreq+0x94>)
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f003 030c 	and.w	r3, r3, #12
 800753e:	2b04      	cmp	r3, #4
 8007540:	d002      	beq.n	8007548 <HAL_RCC_GetSysClockFreq+0x30>
 8007542:	2b08      	cmp	r3, #8
 8007544:	d003      	beq.n	800754e <HAL_RCC_GetSysClockFreq+0x36>
 8007546:	e027      	b.n	8007598 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007548:	4b19      	ldr	r3, [pc, #100]	; (80075b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800754a:	613b      	str	r3, [r7, #16]
      break;
 800754c:	e027      	b.n	800759e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	0c9b      	lsrs	r3, r3, #18
 8007552:	f003 030f 	and.w	r3, r3, #15
 8007556:	4a17      	ldr	r2, [pc, #92]	; (80075b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007558:	5cd3      	ldrb	r3, [r2, r3]
 800755a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d010      	beq.n	8007588 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007566:	4b11      	ldr	r3, [pc, #68]	; (80075ac <HAL_RCC_GetSysClockFreq+0x94>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	0c5b      	lsrs	r3, r3, #17
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	4a11      	ldr	r2, [pc, #68]	; (80075b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007572:	5cd3      	ldrb	r3, [r2, r3]
 8007574:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a0d      	ldr	r2, [pc, #52]	; (80075b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800757a:	fb03 f202 	mul.w	r2, r3, r2
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	fbb2 f3f3 	udiv	r3, r2, r3
 8007584:	617b      	str	r3, [r7, #20]
 8007586:	e004      	b.n	8007592 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a0c      	ldr	r2, [pc, #48]	; (80075bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800758c:	fb02 f303 	mul.w	r3, r2, r3
 8007590:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	613b      	str	r3, [r7, #16]
      break;
 8007596:	e002      	b.n	800759e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007598:	4b05      	ldr	r3, [pc, #20]	; (80075b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800759a:	613b      	str	r3, [r7, #16]
      break;
 800759c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800759e:	693b      	ldr	r3, [r7, #16]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bc80      	pop	{r7}
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	40021000 	.word	0x40021000
 80075b0:	007a1200 	.word	0x007a1200
 80075b4:	0800ea38 	.word	0x0800ea38
 80075b8:	0800ea48 	.word	0x0800ea48
 80075bc:	003d0900 	.word	0x003d0900

080075c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075c0:	b480      	push	{r7}
 80075c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075c4:	4b02      	ldr	r3, [pc, #8]	; (80075d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80075c6:	681b      	ldr	r3, [r3, #0]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bc80      	pop	{r7}
 80075ce:	4770      	bx	lr
 80075d0:	20000200 	.word	0x20000200

080075d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075d8:	f7ff fff2 	bl	80075c0 <HAL_RCC_GetHCLKFreq>
 80075dc:	4602      	mov	r2, r0
 80075de:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	0a1b      	lsrs	r3, r3, #8
 80075e4:	f003 0307 	and.w	r3, r3, #7
 80075e8:	4903      	ldr	r1, [pc, #12]	; (80075f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075ea:	5ccb      	ldrb	r3, [r1, r3]
 80075ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	40021000 	.word	0x40021000
 80075f8:	0800ea30 	.word	0x0800ea30

080075fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007600:	f7ff ffde 	bl	80075c0 <HAL_RCC_GetHCLKFreq>
 8007604:	4602      	mov	r2, r0
 8007606:	4b05      	ldr	r3, [pc, #20]	; (800761c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	0adb      	lsrs	r3, r3, #11
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	4903      	ldr	r1, [pc, #12]	; (8007620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007612:	5ccb      	ldrb	r3, [r1, r3]
 8007614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007618:	4618      	mov	r0, r3
 800761a:	bd80      	pop	{r7, pc}
 800761c:	40021000 	.word	0x40021000
 8007620:	0800ea30 	.word	0x0800ea30

08007624 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	220f      	movs	r2, #15
 8007632:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007634:	4b11      	ldr	r3, [pc, #68]	; (800767c <HAL_RCC_GetClockConfig+0x58>)
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f003 0203 	and.w	r2, r3, #3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007640:	4b0e      	ldr	r3, [pc, #56]	; (800767c <HAL_RCC_GetClockConfig+0x58>)
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800764c:	4b0b      	ldr	r3, [pc, #44]	; (800767c <HAL_RCC_GetClockConfig+0x58>)
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007658:	4b08      	ldr	r3, [pc, #32]	; (800767c <HAL_RCC_GetClockConfig+0x58>)
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	08db      	lsrs	r3, r3, #3
 800765e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007666:	4b06      	ldr	r3, [pc, #24]	; (8007680 <HAL_RCC_GetClockConfig+0x5c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0207 	and.w	r2, r3, #7
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	bc80      	pop	{r7}
 800767a:	4770      	bx	lr
 800767c:	40021000 	.word	0x40021000
 8007680:	40022000 	.word	0x40022000

08007684 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800768c:	4b0a      	ldr	r3, [pc, #40]	; (80076b8 <RCC_Delay+0x34>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <RCC_Delay+0x38>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	0a5b      	lsrs	r3, r3, #9
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	fb02 f303 	mul.w	r3, r2, r3
 800769e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80076a0:	bf00      	nop
  }
  while (Delay --);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	1e5a      	subs	r2, r3, #1
 80076a6:	60fa      	str	r2, [r7, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1f9      	bne.n	80076a0 <RCC_Delay+0x1c>
}
 80076ac:	bf00      	nop
 80076ae:	bf00      	nop
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bc80      	pop	{r7}
 80076b6:	4770      	bx	lr
 80076b8:	20000200 	.word	0x20000200
 80076bc:	10624dd3 	.word	0x10624dd3

080076c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	613b      	str	r3, [r7, #16]
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d07d      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80076dc:	2300      	movs	r3, #0
 80076de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076e0:	4b4f      	ldr	r3, [pc, #316]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10d      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076ec:	4b4c      	ldr	r3, [pc, #304]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	4a4b      	ldr	r2, [pc, #300]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076f6:	61d3      	str	r3, [r2, #28]
 80076f8:	4b49      	ldr	r3, [pc, #292]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007700:	60bb      	str	r3, [r7, #8]
 8007702:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007704:	2301      	movs	r3, #1
 8007706:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007708:	4b46      	ldr	r3, [pc, #280]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007710:	2b00      	cmp	r3, #0
 8007712:	d118      	bne.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007714:	4b43      	ldr	r3, [pc, #268]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a42      	ldr	r2, [pc, #264]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800771a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800771e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007720:	f7fd fb38 	bl	8004d94 <HAL_GetTick>
 8007724:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007726:	e008      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007728:	f7fd fb34 	bl	8004d94 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	2b64      	cmp	r3, #100	; 0x64
 8007734:	d901      	bls.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e06d      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800773a:	4b3a      	ldr	r3, [pc, #232]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007742:	2b00      	cmp	r3, #0
 8007744:	d0f0      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007746:	4b36      	ldr	r3, [pc, #216]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800774e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d02e      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	429a      	cmp	r2, r3
 8007762:	d027      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007764:	4b2e      	ldr	r3, [pc, #184]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800776c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800776e:	4b2e      	ldr	r3, [pc, #184]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007770:	2201      	movs	r2, #1
 8007772:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007774:	4b2c      	ldr	r3, [pc, #176]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800777a:	4a29      	ldr	r2, [pc, #164]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d014      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800778a:	f7fd fb03 	bl	8004d94 <HAL_GetTick>
 800778e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007790:	e00a      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007792:	f7fd faff 	bl	8004d94 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	f241 3288 	movw	r2, #5000	; 0x1388
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d901      	bls.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e036      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077a8:	4b1d      	ldr	r3, [pc, #116]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077aa:	6a1b      	ldr	r3, [r3, #32]
 80077ac:	f003 0302 	and.w	r3, r3, #2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0ee      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077b4:	4b1a      	ldr	r3, [pc, #104]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	4917      	ldr	r1, [pc, #92]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d105      	bne.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077cc:	4b14      	ldr	r3, [pc, #80]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	4a13      	ldr	r2, [pc, #76]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d008      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077e4:	4b0e      	ldr	r3, [pc, #56]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	490b      	ldr	r1, [pc, #44]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0310 	and.w	r3, r3, #16
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d008      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007802:	4b07      	ldr	r3, [pc, #28]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	4904      	ldr	r1, [pc, #16]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007810:	4313      	orrs	r3, r2
 8007812:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	40021000 	.word	0x40021000
 8007824:	40007000 	.word	0x40007000
 8007828:	42420440 	.word	0x42420440

0800782c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	617b      	str	r3, [r7, #20]
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]
 800783c:	2300      	movs	r3, #0
 800783e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	2300      	movs	r3, #0
 8007846:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b10      	cmp	r3, #16
 800784c:	d00a      	beq.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b10      	cmp	r3, #16
 8007852:	f200 808a 	bhi.w	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d045      	beq.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b02      	cmp	r3, #2
 8007860:	d075      	beq.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007862:	e082      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8007864:	4b46      	ldr	r3, [pc, #280]	; (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800786a:	4b45      	ldr	r3, [pc, #276]	; (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d07b      	beq.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	0c9b      	lsrs	r3, r3, #18
 800787a:	f003 030f 	and.w	r3, r3, #15
 800787e:	4a41      	ldr	r2, [pc, #260]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007880:	5cd3      	ldrb	r3, [r2, r3]
 8007882:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d015      	beq.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800788e:	4b3c      	ldr	r3, [pc, #240]	; (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	0c5b      	lsrs	r3, r3, #17
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	4a3b      	ldr	r2, [pc, #236]	; (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800789a:	5cd3      	ldrb	r3, [r2, r3]
 800789c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00d      	beq.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80078a8:	4a38      	ldr	r2, [pc, #224]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	fb02 f303 	mul.w	r3, r2, r3
 80078b6:	61fb      	str	r3, [r7, #28]
 80078b8:	e004      	b.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	4a34      	ldr	r2, [pc, #208]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80078be:	fb02 f303 	mul.w	r3, r2, r3
 80078c2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80078c4:	4b2e      	ldr	r3, [pc, #184]	; (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078d0:	d102      	bne.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	61bb      	str	r3, [r7, #24]
      break;
 80078d6:	e04a      	b.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	4a2d      	ldr	r2, [pc, #180]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80078de:	fba2 2303 	umull	r2, r3, r2, r3
 80078e2:	085b      	lsrs	r3, r3, #1
 80078e4:	61bb      	str	r3, [r7, #24]
      break;
 80078e6:	e042      	b.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80078e8:	4b25      	ldr	r3, [pc, #148]	; (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f8:	d108      	bne.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d003      	beq.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8007904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007908:	61bb      	str	r3, [r7, #24]
 800790a:	e01f      	b.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007916:	d109      	bne.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007918:	4b19      	ldr	r3, [pc, #100]	; (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8007924:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007928:	61bb      	str	r3, [r7, #24]
 800792a:	e00f      	b.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007936:	d11c      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007938:	4b11      	ldr	r3, [pc, #68]	; (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d016      	beq.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8007944:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007948:	61bb      	str	r3, [r7, #24]
      break;
 800794a:	e012      	b.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800794c:	e011      	b.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800794e:	f7ff fe55 	bl	80075fc <HAL_RCC_GetPCLK2Freq>
 8007952:	4602      	mov	r2, r0
 8007954:	4b0a      	ldr	r3, [pc, #40]	; (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	0b9b      	lsrs	r3, r3, #14
 800795a:	f003 0303 	and.w	r3, r3, #3
 800795e:	3301      	adds	r3, #1
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	fbb2 f3f3 	udiv	r3, r2, r3
 8007966:	61bb      	str	r3, [r7, #24]
      break;
 8007968:	e004      	b.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800796a:	bf00      	nop
 800796c:	e002      	b.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800796e:	bf00      	nop
 8007970:	e000      	b.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007972:	bf00      	nop
    }
  }
  return (frequency);
 8007974:	69bb      	ldr	r3, [r7, #24]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3720      	adds	r7, #32
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	40021000 	.word	0x40021000
 8007984:	0800ea4c 	.word	0x0800ea4c
 8007988:	0800ea5c 	.word	0x0800ea5c
 800798c:	007a1200 	.word	0x007a1200
 8007990:	003d0900 	.word	0x003d0900
 8007994:	aaaaaaab 	.word	0xaaaaaaab

08007998 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e07a      	b.n	8007aa4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	7c5b      	ldrb	r3, [r3, #17]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d105      	bne.n	80079c4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fb fcee 	bl	80033a0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2202      	movs	r2, #2
 80079c8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f9be 	bl	8007d4c <HAL_RTC_WaitForSynchro>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d004      	beq.n	80079e0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2204      	movs	r2, #4
 80079da:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e061      	b.n	8007aa4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa77 	bl	8007ed4 <RTC_EnterInitMode>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d004      	beq.n	80079f6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2204      	movs	r2, #4
 80079f0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e056      	b.n	8007aa4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0207 	bic.w	r2, r2, #7
 8007a04:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007a0e:	4b27      	ldr	r3, [pc, #156]	; (8007aac <HAL_RTC_Init+0x114>)
 8007a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a12:	4a26      	ldr	r2, [pc, #152]	; (8007aac <HAL_RTC_Init+0x114>)
 8007a14:	f023 0301 	bic.w	r3, r3, #1
 8007a18:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007a1a:	4b24      	ldr	r3, [pc, #144]	; (8007aac <HAL_RTC_Init+0x114>)
 8007a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	4921      	ldr	r1, [pc, #132]	; (8007aac <HAL_RTC_Init+0x114>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a34:	d003      	beq.n	8007a3e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	e00e      	b.n	8007a5c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007a3e:	2001      	movs	r0, #1
 8007a40:	f7ff fef4 	bl	800782c <HAL_RCCEx_GetPeriphCLKFreq>
 8007a44:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d104      	bne.n	8007a56 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2204      	movs	r2, #4
 8007a50:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e026      	b.n	8007aa4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	0c1a      	lsrs	r2, r3, #16
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f002 020f 	and.w	r2, r2, #15
 8007a68:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	b292      	uxth	r2, r2
 8007a72:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fa55 	bl	8007f24 <RTC_ExitInitMode>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2204      	movs	r2, #4
 8007a84:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e00c      	b.n	8007aa4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
  }
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	40006c00 	.word	0x40006c00

08007ab0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007ab0:	b590      	push	{r4, r7, lr}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <HAL_RTC_SetTime+0x20>
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e080      	b.n	8007bd6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	7c1b      	ldrb	r3, [r3, #16]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_RTC_SetTime+0x30>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e07a      	b.n	8007bd6 <HAL_RTC_SetTime+0x126>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2202      	movs	r2, #2
 8007aea:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d113      	bne.n	8007b1a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007afc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	785b      	ldrb	r3, [r3, #1]
 8007b04:	4619      	mov	r1, r3
 8007b06:	460b      	mov	r3, r1
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	1a5b      	subs	r3, r3, r1
 8007b0c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007b0e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007b14:	4413      	add	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]
 8007b18:	e01e      	b.n	8007b58 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fa28 	bl	8007f74 <RTC_Bcd2ToByte>
 8007b24:	4603      	mov	r3, r0
 8007b26:	461a      	mov	r2, r3
 8007b28:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007b2c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	785b      	ldrb	r3, [r3, #1]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 fa1d 	bl	8007f74 <RTC_Bcd2ToByte>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	4613      	mov	r3, r2
 8007b40:	011b      	lsls	r3, r3, #4
 8007b42:	1a9b      	subs	r3, r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007b46:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	789b      	ldrb	r3, [r3, #2]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 fa11 	bl	8007f74 <RTC_Bcd2ToByte>
 8007b52:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007b54:	4423      	add	r3, r4
 8007b56:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007b58:	6979      	ldr	r1, [r7, #20]
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f000 f953 	bl	8007e06 <RTC_WriteTimeCounter>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d007      	beq.n	8007b76 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2204      	movs	r2, #4
 8007b6a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e02f      	b.n	8007bd6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0205 	bic.w	r2, r2, #5
 8007b84:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 f964 	bl	8007e54 <RTC_ReadAlarmCounter>
 8007b8c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b94:	d018      	beq.n	8007bc8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d214      	bcs.n	8007bc8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8007ba4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007ba8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007baa:	6939      	ldr	r1, [r7, #16]
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 f96a 	bl	8007e86 <RTC_WriteAlarmCounter>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d007      	beq.n	8007bc8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2204      	movs	r2, #4
 8007bbc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e006      	b.n	8007bd6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
  }
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	371c      	adds	r7, #28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd90      	pop	{r4, r7, pc}
	...

08007be0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	61fb      	str	r3, [r7, #28]
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	61bb      	str	r3, [r7, #24]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <HAL_RTC_SetDate+0x24>
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e097      	b.n	8007d38 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	7c1b      	ldrb	r3, [r3, #16]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d101      	bne.n	8007c14 <HAL_RTC_SetDate+0x34>
 8007c10:	2302      	movs	r3, #2
 8007c12:	e091      	b.n	8007d38 <HAL_RTC_SetDate+0x158>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2201      	movs	r2, #1
 8007c18:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10c      	bne.n	8007c40 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	78da      	ldrb	r2, [r3, #3]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	785a      	ldrb	r2, [r3, #1]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	789a      	ldrb	r2, [r3, #2]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	739a      	strb	r2, [r3, #14]
 8007c3e:	e01a      	b.n	8007c76 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	78db      	ldrb	r3, [r3, #3]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 f995 	bl	8007f74 <RTC_Bcd2ToByte>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	785b      	ldrb	r3, [r3, #1]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 f98c 	bl	8007f74 <RTC_Bcd2ToByte>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	789b      	ldrb	r3, [r3, #2]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 f983 	bl	8007f74 <RTC_Bcd2ToByte>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	461a      	mov	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	7bdb      	ldrb	r3, [r3, #15]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	7b59      	ldrb	r1, [r3, #13]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	7b9b      	ldrb	r3, [r3, #14]
 8007c84:	461a      	mov	r2, r3
 8007c86:	f000 f993 	bl	8007fb0 <RTC_WeekDayNum>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	7b1a      	ldrb	r2, [r3, #12]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 f883 	bl	8007da6 <RTC_ReadTimeCounter>
 8007ca0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	4a26      	ldr	r2, [pc, #152]	; (8007d40 <HAL_RTC_SetDate+0x160>)
 8007ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8007caa:	0adb      	lsrs	r3, r3, #11
 8007cac:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2b18      	cmp	r3, #24
 8007cb2:	d93a      	bls.n	8007d2a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	4a23      	ldr	r2, [pc, #140]	; (8007d44 <HAL_RTC_SetDate+0x164>)
 8007cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cbc:	091b      	lsrs	r3, r3, #4
 8007cbe:	4a22      	ldr	r2, [pc, #136]	; (8007d48 <HAL_RTC_SetDate+0x168>)
 8007cc0:	fb02 f303 	mul.w	r3, r2, r3
 8007cc4:	69fa      	ldr	r2, [r7, #28]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007cca:	69f9      	ldr	r1, [r7, #28]
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 f89a 	bl	8007e06 <RTC_WriteTimeCounter>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d007      	beq.n	8007ce8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2204      	movs	r2, #4
 8007cdc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e027      	b.n	8007d38 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 f8b3 	bl	8007e54 <RTC_ReadAlarmCounter>
 8007cee:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf6:	d018      	beq.n	8007d2a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d214      	bcs.n	8007d2a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8007d06:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007d0a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007d0c:	69b9      	ldr	r1, [r7, #24]
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 f8b9 	bl	8007e86 <RTC_WriteAlarmCounter>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d007      	beq.n	8007d2a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2204      	movs	r2, #4
 8007d1e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e006      	b.n	8007d38 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3720      	adds	r7, #32
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	91a2b3c5 	.word	0x91a2b3c5
 8007d44:	aaaaaaab 	.word	0xaaaaaaab
 8007d48:	00015180 	.word	0x00015180

08007d4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e01d      	b.n	8007d9e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 0208 	bic.w	r2, r2, #8
 8007d70:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007d72:	f7fd f80f 	bl	8004d94 <HAL_GetTick>
 8007d76:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007d78:	e009      	b.n	8007d8e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007d7a:	f7fd f80b 	bl	8004d94 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d88:	d901      	bls.n	8007d8e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e007      	b.n	8007d9e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f003 0308 	and.w	r3, r3, #8
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d0ee      	beq.n	8007d7a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b087      	sub	sp, #28
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8007dae:	2300      	movs	r3, #0
 8007db0:	827b      	strh	r3, [r7, #18]
 8007db2:	2300      	movs	r3, #0
 8007db4:	823b      	strh	r3, [r7, #16]
 8007db6:	2300      	movs	r3, #0
 8007db8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8007dd6:	8a7a      	ldrh	r2, [r7, #18]
 8007dd8:	8a3b      	ldrh	r3, [r7, #16]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d008      	beq.n	8007df0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8007dde:	8a3b      	ldrh	r3, [r7, #16]
 8007de0:	041a      	lsls	r2, r3, #16
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	4313      	orrs	r3, r2
 8007dec:	617b      	str	r3, [r7, #20]
 8007dee:	e004      	b.n	8007dfa <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8007df0:	8a7b      	ldrh	r3, [r7, #18]
 8007df2:	041a      	lsls	r2, r3, #16
 8007df4:	89fb      	ldrh	r3, [r7, #14]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8007dfa:	697b      	ldr	r3, [r7, #20]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	371c      	adds	r7, #28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bc80      	pop	{r7}
 8007e04:	4770      	bx	lr

08007e06 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f85d 	bl	8007ed4 <RTC_EnterInitMode>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	73fb      	strb	r3, [r7, #15]
 8007e24:	e011      	b.n	8007e4a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	0c12      	lsrs	r2, r2, #16
 8007e2e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	b292      	uxth	r2, r2
 8007e38:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f872 	bl	8007f24 <RTC_ExitInitMode>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	81fb      	strh	r3, [r7, #14]
 8007e60:	2300      	movs	r3, #0
 8007e62:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8007e74:	89fb      	ldrh	r3, [r7, #14]
 8007e76:	041a      	lsls	r2, r3, #16
 8007e78:	89bb      	ldrh	r3, [r7, #12]
 8007e7a:	4313      	orrs	r3, r2
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr

08007e86 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f81d 	bl	8007ed4 <RTC_EnterInitMode>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	73fb      	strb	r3, [r7, #15]
 8007ea4:	e011      	b.n	8007eca <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	0c12      	lsrs	r2, r2, #16
 8007eae:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	b292      	uxth	r2, r2
 8007eb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f832 	bl	8007f24 <RTC_ExitInitMode>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007ee0:	f7fc ff58 	bl	8004d94 <HAL_GetTick>
 8007ee4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007ee6:	e009      	b.n	8007efc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007ee8:	f7fc ff54 	bl	8004d94 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ef6:	d901      	bls.n	8007efc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e00f      	b.n	8007f1c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0ee      	beq.n	8007ee8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f042 0210 	orr.w	r2, r2, #16
 8007f18:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0210 	bic.w	r2, r2, #16
 8007f3e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007f40:	f7fc ff28 	bl	8004d94 <HAL_GetTick>
 8007f44:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007f46:	e009      	b.n	8007f5c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007f48:	f7fc ff24 	bl	8004d94 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f56:	d901      	bls.n	8007f5c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e007      	b.n	8007f6c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f003 0320 	and.w	r3, r3, #32
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d0ee      	beq.n	8007f48 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8007f82:	79fb      	ldrb	r3, [r7, #7]
 8007f84:	091b      	lsrs	r3, r3, #4
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	461a      	mov	r2, r3
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	4413      	add	r3, r2
 8007fa2:	b2db      	uxtb	r3, r3
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bc80      	pop	{r7}
 8007fac:	4770      	bx	lr
	...

08007fb0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60bb      	str	r3, [r7, #8]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007fce:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8007fd0:	78fb      	ldrb	r3, [r7, #3]
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d82d      	bhi.n	8008032 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8007fd6:	78fa      	ldrb	r2, [r7, #3]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	4413      	add	r3, r2
 8007fde:	00db      	lsls	r3, r3, #3
 8007fe0:	1a9b      	subs	r3, r3, r2
 8007fe2:	4a2c      	ldr	r2, [pc, #176]	; (8008094 <RTC_WeekDayNum+0xe4>)
 8007fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe8:	085a      	lsrs	r2, r3, #1
 8007fea:	78bb      	ldrb	r3, [r7, #2]
 8007fec:	441a      	add	r2, r3
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	441a      	add	r2, r3
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	089b      	lsrs	r3, r3, #2
 8007ff8:	441a      	add	r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	4926      	ldr	r1, [pc, #152]	; (8008098 <RTC_WeekDayNum+0xe8>)
 8008000:	fba1 1303 	umull	r1, r3, r1, r3
 8008004:	095b      	lsrs	r3, r3, #5
 8008006:	1ad2      	subs	r2, r2, r3
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	3b01      	subs	r3, #1
 800800c:	4922      	ldr	r1, [pc, #136]	; (8008098 <RTC_WeekDayNum+0xe8>)
 800800e:	fba1 1303 	umull	r1, r3, r1, r3
 8008012:	09db      	lsrs	r3, r3, #7
 8008014:	4413      	add	r3, r2
 8008016:	1d1a      	adds	r2, r3, #4
 8008018:	4b20      	ldr	r3, [pc, #128]	; (800809c <RTC_WeekDayNum+0xec>)
 800801a:	fba3 1302 	umull	r1, r3, r3, r2
 800801e:	1ad1      	subs	r1, r2, r3
 8008020:	0849      	lsrs	r1, r1, #1
 8008022:	440b      	add	r3, r1
 8008024:	0899      	lsrs	r1, r3, #2
 8008026:	460b      	mov	r3, r1
 8008028:	00db      	lsls	r3, r3, #3
 800802a:	1a5b      	subs	r3, r3, r1
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	e029      	b.n	8008086 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8008032:	78fa      	ldrb	r2, [r7, #3]
 8008034:	4613      	mov	r3, r2
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	4413      	add	r3, r2
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	1a9b      	subs	r3, r3, r2
 800803e:	4a15      	ldr	r2, [pc, #84]	; (8008094 <RTC_WeekDayNum+0xe4>)
 8008040:	fba2 2303 	umull	r2, r3, r2, r3
 8008044:	085a      	lsrs	r2, r3, #1
 8008046:	78bb      	ldrb	r3, [r7, #2]
 8008048:	441a      	add	r2, r3
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	441a      	add	r2, r3
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	089b      	lsrs	r3, r3, #2
 8008052:	441a      	add	r2, r3
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	4910      	ldr	r1, [pc, #64]	; (8008098 <RTC_WeekDayNum+0xe8>)
 8008058:	fba1 1303 	umull	r1, r3, r1, r3
 800805c:	095b      	lsrs	r3, r3, #5
 800805e:	1ad2      	subs	r2, r2, r3
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	490d      	ldr	r1, [pc, #52]	; (8008098 <RTC_WeekDayNum+0xe8>)
 8008064:	fba1 1303 	umull	r1, r3, r1, r3
 8008068:	09db      	lsrs	r3, r3, #7
 800806a:	4413      	add	r3, r2
 800806c:	1c9a      	adds	r2, r3, #2
 800806e:	4b0b      	ldr	r3, [pc, #44]	; (800809c <RTC_WeekDayNum+0xec>)
 8008070:	fba3 1302 	umull	r1, r3, r3, r2
 8008074:	1ad1      	subs	r1, r2, r3
 8008076:	0849      	lsrs	r1, r1, #1
 8008078:	440b      	add	r3, r1
 800807a:	0899      	lsrs	r1, r3, #2
 800807c:	460b      	mov	r3, r1
 800807e:	00db      	lsls	r3, r3, #3
 8008080:	1a5b      	subs	r3, r3, r1
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	b2db      	uxtb	r3, r3
}
 800808a:	4618      	mov	r0, r3
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	bc80      	pop	{r7}
 8008092:	4770      	bx	lr
 8008094:	38e38e39 	.word	0x38e38e39
 8008098:	51eb851f 	.word	0x51eb851f
 800809c:	24924925 	.word	0x24924925

080080a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e041      	b.n	8008136 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d106      	bne.n	80080cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7fb f98e 	bl	80033e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3304      	adds	r3, #4
 80080dc:	4619      	mov	r1, r3
 80080de:	4610      	mov	r0, r2
 80080e0:	f000 fc94 	bl	8008a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b01      	cmp	r3, #1
 8008152:	d001      	beq.n	8008158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e03a      	b.n	80081ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f042 0201 	orr.w	r2, r2, #1
 800816e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a18      	ldr	r2, [pc, #96]	; (80081d8 <HAL_TIM_Base_Start_IT+0x98>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d00e      	beq.n	8008198 <HAL_TIM_Base_Start_IT+0x58>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008182:	d009      	beq.n	8008198 <HAL_TIM_Base_Start_IT+0x58>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a14      	ldr	r2, [pc, #80]	; (80081dc <HAL_TIM_Base_Start_IT+0x9c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d004      	beq.n	8008198 <HAL_TIM_Base_Start_IT+0x58>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a13      	ldr	r2, [pc, #76]	; (80081e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d111      	bne.n	80081bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f003 0307 	and.w	r3, r3, #7
 80081a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b06      	cmp	r3, #6
 80081a8:	d010      	beq.n	80081cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f042 0201 	orr.w	r2, r2, #1
 80081b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ba:	e007      	b.n	80081cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f042 0201 	orr.w	r2, r2, #1
 80081ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bc80      	pop	{r7}
 80081d6:	4770      	bx	lr
 80081d8:	40012c00 	.word	0x40012c00
 80081dc:	40000400 	.word	0x40000400
 80081e0:	40000800 	.word	0x40000800

080081e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e041      	b.n	800827a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f839 	bl	8008282 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3304      	adds	r3, #4
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f000 fbf2 	bl	8008a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800828a:	bf00      	nop
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	bc80      	pop	{r7}
 8008292:	4770      	bx	lr

08008294 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d109      	bne.n	80082b8 <HAL_TIM_PWM_Start+0x24>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	bf14      	ite	ne
 80082b0:	2301      	movne	r3, #1
 80082b2:	2300      	moveq	r3, #0
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	e022      	b.n	80082fe <HAL_TIM_PWM_Start+0x6a>
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	2b04      	cmp	r3, #4
 80082bc:	d109      	bne.n	80082d2 <HAL_TIM_PWM_Start+0x3e>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	bf14      	ite	ne
 80082ca:	2301      	movne	r3, #1
 80082cc:	2300      	moveq	r3, #0
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	e015      	b.n	80082fe <HAL_TIM_PWM_Start+0x6a>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	d109      	bne.n	80082ec <HAL_TIM_PWM_Start+0x58>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	bf14      	ite	ne
 80082e4:	2301      	movne	r3, #1
 80082e6:	2300      	moveq	r3, #0
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	e008      	b.n	80082fe <HAL_TIM_PWM_Start+0x6a>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	bf14      	ite	ne
 80082f8:	2301      	movne	r3, #1
 80082fa:	2300      	moveq	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e05e      	b.n	80083c4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d104      	bne.n	8008316 <HAL_TIM_PWM_Start+0x82>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008314:	e013      	b.n	800833e <HAL_TIM_PWM_Start+0xaa>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b04      	cmp	r3, #4
 800831a:	d104      	bne.n	8008326 <HAL_TIM_PWM_Start+0x92>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008324:	e00b      	b.n	800833e <HAL_TIM_PWM_Start+0xaa>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b08      	cmp	r3, #8
 800832a:	d104      	bne.n	8008336 <HAL_TIM_PWM_Start+0xa2>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008334:	e003      	b.n	800833e <HAL_TIM_PWM_Start+0xaa>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2202      	movs	r2, #2
 800833a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2201      	movs	r2, #1
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f000 fde0 	bl	8008f0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a1e      	ldr	r2, [pc, #120]	; (80083cc <HAL_TIM_PWM_Start+0x138>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d107      	bne.n	8008366 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008364:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a18      	ldr	r2, [pc, #96]	; (80083cc <HAL_TIM_PWM_Start+0x138>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d00e      	beq.n	800838e <HAL_TIM_PWM_Start+0xfa>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008378:	d009      	beq.n	800838e <HAL_TIM_PWM_Start+0xfa>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a14      	ldr	r2, [pc, #80]	; (80083d0 <HAL_TIM_PWM_Start+0x13c>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d004      	beq.n	800838e <HAL_TIM_PWM_Start+0xfa>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a12      	ldr	r2, [pc, #72]	; (80083d4 <HAL_TIM_PWM_Start+0x140>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d111      	bne.n	80083b2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b06      	cmp	r3, #6
 800839e:	d010      	beq.n	80083c2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0201 	orr.w	r2, r2, #1
 80083ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b0:	e007      	b.n	80083c2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f042 0201 	orr.w	r2, r2, #1
 80083c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40012c00 	.word	0x40012c00
 80083d0:	40000400 	.word	0x40000400
 80083d4:	40000800 	.word	0x40000800

080083d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2200      	movs	r2, #0
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 fd8e 	bl	8008f0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a29      	ldr	r2, [pc, #164]	; (800849c <HAL_TIM_PWM_Stop+0xc4>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d117      	bne.n	800842a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6a1a      	ldr	r2, [r3, #32]
 8008400:	f241 1311 	movw	r3, #4369	; 0x1111
 8008404:	4013      	ands	r3, r2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10f      	bne.n	800842a <HAL_TIM_PWM_Stop+0x52>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6a1a      	ldr	r2, [r3, #32]
 8008410:	f240 4344 	movw	r3, #1092	; 0x444
 8008414:	4013      	ands	r3, r2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d107      	bne.n	800842a <HAL_TIM_PWM_Stop+0x52>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008428:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	6a1a      	ldr	r2, [r3, #32]
 8008430:	f241 1311 	movw	r3, #4369	; 0x1111
 8008434:	4013      	ands	r3, r2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10f      	bne.n	800845a <HAL_TIM_PWM_Stop+0x82>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	6a1a      	ldr	r2, [r3, #32]
 8008440:	f240 4344 	movw	r3, #1092	; 0x444
 8008444:	4013      	ands	r3, r2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d107      	bne.n	800845a <HAL_TIM_PWM_Stop+0x82>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f022 0201 	bic.w	r2, r2, #1
 8008458:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d104      	bne.n	800846a <HAL_TIM_PWM_Stop+0x92>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008468:	e013      	b.n	8008492 <HAL_TIM_PWM_Stop+0xba>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b04      	cmp	r3, #4
 800846e:	d104      	bne.n	800847a <HAL_TIM_PWM_Stop+0xa2>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008478:	e00b      	b.n	8008492 <HAL_TIM_PWM_Stop+0xba>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b08      	cmp	r3, #8
 800847e:	d104      	bne.n	800848a <HAL_TIM_PWM_Stop+0xb2>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008488:	e003      	b.n	8008492 <HAL_TIM_PWM_Stop+0xba>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	40012c00 	.word	0x40012c00

080084a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	f003 0302 	and.w	r3, r3, #2
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d122      	bne.n	80084fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d11b      	bne.n	80084fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f06f 0202 	mvn.w	r2, #2
 80084cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	f003 0303 	and.w	r3, r3, #3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fa76 	bl	80089d4 <HAL_TIM_IC_CaptureCallback>
 80084e8:	e005      	b.n	80084f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa69 	bl	80089c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fa78 	bl	80089e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	f003 0304 	and.w	r3, r3, #4
 8008506:	2b04      	cmp	r3, #4
 8008508:	d122      	bne.n	8008550 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b04      	cmp	r3, #4
 8008516:	d11b      	bne.n	8008550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f06f 0204 	mvn.w	r2, #4
 8008520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2202      	movs	r2, #2
 8008526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fa4c 	bl	80089d4 <HAL_TIM_IC_CaptureCallback>
 800853c:	e005      	b.n	800854a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fa3f 	bl	80089c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fa4e 	bl	80089e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	f003 0308 	and.w	r3, r3, #8
 800855a:	2b08      	cmp	r3, #8
 800855c:	d122      	bne.n	80085a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f003 0308 	and.w	r3, r3, #8
 8008568:	2b08      	cmp	r3, #8
 800856a:	d11b      	bne.n	80085a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f06f 0208 	mvn.w	r2, #8
 8008574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2204      	movs	r2, #4
 800857a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fa22 	bl	80089d4 <HAL_TIM_IC_CaptureCallback>
 8008590:	e005      	b.n	800859e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fa15 	bl	80089c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fa24 	bl	80089e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	f003 0310 	and.w	r3, r3, #16
 80085ae:	2b10      	cmp	r3, #16
 80085b0:	d122      	bne.n	80085f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	f003 0310 	and.w	r3, r3, #16
 80085bc:	2b10      	cmp	r3, #16
 80085be:	d11b      	bne.n	80085f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f06f 0210 	mvn.w	r2, #16
 80085c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2208      	movs	r2, #8
 80085ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f9f8 	bl	80089d4 <HAL_TIM_IC_CaptureCallback>
 80085e4:	e005      	b.n	80085f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f9eb 	bl	80089c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f9fa 	bl	80089e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	2b01      	cmp	r3, #1
 8008604:	d10e      	bne.n	8008624 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	2b01      	cmp	r3, #1
 8008612:	d107      	bne.n	8008624 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f06f 0201 	mvn.w	r2, #1
 800861c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7fa faa0 	bl	8002b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800862e:	2b80      	cmp	r3, #128	; 0x80
 8008630:	d10e      	bne.n	8008650 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800863c:	2b80      	cmp	r3, #128	; 0x80
 800863e:	d107      	bne.n	8008650 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fce9 	bl	8009022 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865a:	2b40      	cmp	r3, #64	; 0x40
 800865c:	d10e      	bne.n	800867c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008668:	2b40      	cmp	r3, #64	; 0x40
 800866a:	d107      	bne.n	800867c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f9be 	bl	80089f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	f003 0320 	and.w	r3, r3, #32
 8008686:	2b20      	cmp	r3, #32
 8008688:	d10e      	bne.n	80086a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f003 0320 	and.w	r3, r3, #32
 8008694:	2b20      	cmp	r3, #32
 8008696:	d107      	bne.n	80086a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f06f 0220 	mvn.w	r2, #32
 80086a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fcb4 	bl	8009010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086a8:	bf00      	nop
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d101      	bne.n	80086ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086ca:	2302      	movs	r3, #2
 80086cc:	e0ae      	b.n	800882c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b0c      	cmp	r3, #12
 80086da:	f200 809f 	bhi.w	800881c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80086de:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80086e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e4:	08008719 	.word	0x08008719
 80086e8:	0800881d 	.word	0x0800881d
 80086ec:	0800881d 	.word	0x0800881d
 80086f0:	0800881d 	.word	0x0800881d
 80086f4:	08008759 	.word	0x08008759
 80086f8:	0800881d 	.word	0x0800881d
 80086fc:	0800881d 	.word	0x0800881d
 8008700:	0800881d 	.word	0x0800881d
 8008704:	0800879b 	.word	0x0800879b
 8008708:	0800881d 	.word	0x0800881d
 800870c:	0800881d 	.word	0x0800881d
 8008710:	0800881d 	.word	0x0800881d
 8008714:	080087db 	.word	0x080087db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68b9      	ldr	r1, [r7, #8]
 800871e:	4618      	mov	r0, r3
 8008720:	f000 f9d6 	bl	8008ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699a      	ldr	r2, [r3, #24]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f042 0208 	orr.w	r2, r2, #8
 8008732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699a      	ldr	r2, [r3, #24]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f022 0204 	bic.w	r2, r2, #4
 8008742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6999      	ldr	r1, [r3, #24]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	691a      	ldr	r2, [r3, #16]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	430a      	orrs	r2, r1
 8008754:	619a      	str	r2, [r3, #24]
      break;
 8008756:	e064      	b.n	8008822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	4618      	mov	r0, r3
 8008760:	f000 fa1c 	bl	8008b9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	699a      	ldr	r2, [r3, #24]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	699a      	ldr	r2, [r3, #24]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6999      	ldr	r1, [r3, #24]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	021a      	lsls	r2, r3, #8
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	619a      	str	r2, [r3, #24]
      break;
 8008798:	e043      	b.n	8008822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68b9      	ldr	r1, [r7, #8]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 fa65 	bl	8008c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	69da      	ldr	r2, [r3, #28]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f042 0208 	orr.w	r2, r2, #8
 80087b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	69da      	ldr	r2, [r3, #28]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0204 	bic.w	r2, r2, #4
 80087c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69d9      	ldr	r1, [r3, #28]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	691a      	ldr	r2, [r3, #16]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	61da      	str	r2, [r3, #28]
      break;
 80087d8:	e023      	b.n	8008822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68b9      	ldr	r1, [r7, #8]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 faaf 	bl	8008d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69da      	ldr	r2, [r3, #28]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	69da      	ldr	r2, [r3, #28]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69d9      	ldr	r1, [r3, #28]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	021a      	lsls	r2, r3, #8
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	430a      	orrs	r2, r1
 8008818:	61da      	str	r2, [r3, #28]
      break;
 800881a:	e002      	b.n	8008822 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	75fb      	strb	r3, [r7, #23]
      break;
 8008820:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800882a:	7dfb      	ldrb	r3, [r7, #23]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3718      	adds	r7, #24
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008848:	2b01      	cmp	r3, #1
 800884a:	d101      	bne.n	8008850 <HAL_TIM_ConfigClockSource+0x1c>
 800884c:	2302      	movs	r3, #2
 800884e:	e0b4      	b.n	80089ba <HAL_TIM_ConfigClockSource+0x186>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800886e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008888:	d03e      	beq.n	8008908 <HAL_TIM_ConfigClockSource+0xd4>
 800888a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800888e:	f200 8087 	bhi.w	80089a0 <HAL_TIM_ConfigClockSource+0x16c>
 8008892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008896:	f000 8086 	beq.w	80089a6 <HAL_TIM_ConfigClockSource+0x172>
 800889a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800889e:	d87f      	bhi.n	80089a0 <HAL_TIM_ConfigClockSource+0x16c>
 80088a0:	2b70      	cmp	r3, #112	; 0x70
 80088a2:	d01a      	beq.n	80088da <HAL_TIM_ConfigClockSource+0xa6>
 80088a4:	2b70      	cmp	r3, #112	; 0x70
 80088a6:	d87b      	bhi.n	80089a0 <HAL_TIM_ConfigClockSource+0x16c>
 80088a8:	2b60      	cmp	r3, #96	; 0x60
 80088aa:	d050      	beq.n	800894e <HAL_TIM_ConfigClockSource+0x11a>
 80088ac:	2b60      	cmp	r3, #96	; 0x60
 80088ae:	d877      	bhi.n	80089a0 <HAL_TIM_ConfigClockSource+0x16c>
 80088b0:	2b50      	cmp	r3, #80	; 0x50
 80088b2:	d03c      	beq.n	800892e <HAL_TIM_ConfigClockSource+0xfa>
 80088b4:	2b50      	cmp	r3, #80	; 0x50
 80088b6:	d873      	bhi.n	80089a0 <HAL_TIM_ConfigClockSource+0x16c>
 80088b8:	2b40      	cmp	r3, #64	; 0x40
 80088ba:	d058      	beq.n	800896e <HAL_TIM_ConfigClockSource+0x13a>
 80088bc:	2b40      	cmp	r3, #64	; 0x40
 80088be:	d86f      	bhi.n	80089a0 <HAL_TIM_ConfigClockSource+0x16c>
 80088c0:	2b30      	cmp	r3, #48	; 0x30
 80088c2:	d064      	beq.n	800898e <HAL_TIM_ConfigClockSource+0x15a>
 80088c4:	2b30      	cmp	r3, #48	; 0x30
 80088c6:	d86b      	bhi.n	80089a0 <HAL_TIM_ConfigClockSource+0x16c>
 80088c8:	2b20      	cmp	r3, #32
 80088ca:	d060      	beq.n	800898e <HAL_TIM_ConfigClockSource+0x15a>
 80088cc:	2b20      	cmp	r3, #32
 80088ce:	d867      	bhi.n	80089a0 <HAL_TIM_ConfigClockSource+0x16c>
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d05c      	beq.n	800898e <HAL_TIM_ConfigClockSource+0x15a>
 80088d4:	2b10      	cmp	r3, #16
 80088d6:	d05a      	beq.n	800898e <HAL_TIM_ConfigClockSource+0x15a>
 80088d8:	e062      	b.n	80089a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088ea:	f000 faf0 	bl	8008ece <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80088fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	609a      	str	r2, [r3, #8]
      break;
 8008906:	e04f      	b.n	80089a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008918:	f000 fad9 	bl	8008ece <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689a      	ldr	r2, [r3, #8]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800892a:	609a      	str	r2, [r3, #8]
      break;
 800892c:	e03c      	b.n	80089a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800893a:	461a      	mov	r2, r3
 800893c:	f000 fa50 	bl	8008de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2150      	movs	r1, #80	; 0x50
 8008946:	4618      	mov	r0, r3
 8008948:	f000 faa7 	bl	8008e9a <TIM_ITRx_SetConfig>
      break;
 800894c:	e02c      	b.n	80089a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800895a:	461a      	mov	r2, r3
 800895c:	f000 fa6e 	bl	8008e3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2160      	movs	r1, #96	; 0x60
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fa97 	bl	8008e9a <TIM_ITRx_SetConfig>
      break;
 800896c:	e01c      	b.n	80089a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800897a:	461a      	mov	r2, r3
 800897c:	f000 fa30 	bl	8008de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2140      	movs	r1, #64	; 0x40
 8008986:	4618      	mov	r0, r3
 8008988:	f000 fa87 	bl	8008e9a <TIM_ITRx_SetConfig>
      break;
 800898c:	e00c      	b.n	80089a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4619      	mov	r1, r3
 8008998:	4610      	mov	r0, r2
 800899a:	f000 fa7e 	bl	8008e9a <TIM_ITRx_SetConfig>
      break;
 800899e:	e003      	b.n	80089a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	73fb      	strb	r3, [r7, #15]
      break;
 80089a4:	e000      	b.n	80089a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80089a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089ca:	bf00      	nop
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bc80      	pop	{r7}
 80089d2:	4770      	bx	lr

080089d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bc80      	pop	{r7}
 80089e4:	4770      	bx	lr

080089e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b083      	sub	sp, #12
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089ee:	bf00      	nop
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bc80      	pop	{r7}
 80089f6:	4770      	bx	lr

080089f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bc80      	pop	{r7}
 8008a08:	4770      	bx	lr
	...

08008a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a29      	ldr	r2, [pc, #164]	; (8008ac4 <TIM_Base_SetConfig+0xb8>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d00b      	beq.n	8008a3c <TIM_Base_SetConfig+0x30>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a2a:	d007      	beq.n	8008a3c <TIM_Base_SetConfig+0x30>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a26      	ldr	r2, [pc, #152]	; (8008ac8 <TIM_Base_SetConfig+0xbc>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d003      	beq.n	8008a3c <TIM_Base_SetConfig+0x30>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a25      	ldr	r2, [pc, #148]	; (8008acc <TIM_Base_SetConfig+0xc0>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d108      	bne.n	8008a4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a1c      	ldr	r2, [pc, #112]	; (8008ac4 <TIM_Base_SetConfig+0xb8>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d00b      	beq.n	8008a6e <TIM_Base_SetConfig+0x62>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a5c:	d007      	beq.n	8008a6e <TIM_Base_SetConfig+0x62>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a19      	ldr	r2, [pc, #100]	; (8008ac8 <TIM_Base_SetConfig+0xbc>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d003      	beq.n	8008a6e <TIM_Base_SetConfig+0x62>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a18      	ldr	r2, [pc, #96]	; (8008acc <TIM_Base_SetConfig+0xc0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d108      	bne.n	8008a80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a07      	ldr	r2, [pc, #28]	; (8008ac4 <TIM_Base_SetConfig+0xb8>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d103      	bne.n	8008ab4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	691a      	ldr	r2, [r3, #16]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	615a      	str	r2, [r3, #20]
}
 8008aba:	bf00      	nop
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bc80      	pop	{r7}
 8008ac2:	4770      	bx	lr
 8008ac4:	40012c00 	.word	0x40012c00
 8008ac8:	40000400 	.word	0x40000400
 8008acc:	40000800 	.word	0x40000800

08008ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
 8008ae4:	f023 0201 	bic.w	r2, r3, #1
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f023 0303 	bic.w	r3, r3, #3
 8008b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f023 0302 	bic.w	r3, r3, #2
 8008b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a1c      	ldr	r2, [pc, #112]	; (8008b98 <TIM_OC1_SetConfig+0xc8>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d10c      	bne.n	8008b46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f023 0308 	bic.w	r3, r3, #8
 8008b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f023 0304 	bic.w	r3, r3, #4
 8008b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a13      	ldr	r2, [pc, #76]	; (8008b98 <TIM_OC1_SetConfig+0xc8>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d111      	bne.n	8008b72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	621a      	str	r2, [r3, #32]
}
 8008b8c:	bf00      	nop
 8008b8e:	371c      	adds	r7, #28
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bc80      	pop	{r7}
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	40012c00 	.word	0x40012c00

08008b9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b087      	sub	sp, #28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a1b      	ldr	r3, [r3, #32]
 8008bb0:	f023 0210 	bic.w	r2, r3, #16
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	021b      	lsls	r3, r3, #8
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f023 0320 	bic.w	r3, r3, #32
 8008be6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	011b      	lsls	r3, r3, #4
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a1d      	ldr	r2, [pc, #116]	; (8008c6c <TIM_OC2_SetConfig+0xd0>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d10d      	bne.n	8008c18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	011b      	lsls	r3, r3, #4
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a14      	ldr	r2, [pc, #80]	; (8008c6c <TIM_OC2_SetConfig+0xd0>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d113      	bne.n	8008c48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	695b      	ldr	r3, [r3, #20]
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	621a      	str	r2, [r3, #32]
}
 8008c62:	bf00      	nop
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bc80      	pop	{r7}
 8008c6a:	4770      	bx	lr
 8008c6c:	40012c00 	.word	0x40012c00

08008c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a1b      	ldr	r3, [r3, #32]
 8008c84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f023 0303 	bic.w	r3, r3, #3
 8008ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	021b      	lsls	r3, r3, #8
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a1d      	ldr	r2, [pc, #116]	; (8008d40 <TIM_OC3_SetConfig+0xd0>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d10d      	bne.n	8008cea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	021b      	lsls	r3, r3, #8
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a14      	ldr	r2, [pc, #80]	; (8008d40 <TIM_OC3_SetConfig+0xd0>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d113      	bne.n	8008d1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	621a      	str	r2, [r3, #32]
}
 8008d34:	bf00      	nop
 8008d36:	371c      	adds	r7, #28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bc80      	pop	{r7}
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	40012c00 	.word	0x40012c00

08008d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	021b      	lsls	r3, r3, #8
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	031b      	lsls	r3, r3, #12
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a0f      	ldr	r2, [pc, #60]	; (8008ddc <TIM_OC4_SetConfig+0x98>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d109      	bne.n	8008db8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	019b      	lsls	r3, r3, #6
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	621a      	str	r2, [r3, #32]
}
 8008dd2:	bf00      	nop
 8008dd4:	371c      	adds	r7, #28
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bc80      	pop	{r7}
 8008dda:	4770      	bx	lr
 8008ddc:	40012c00 	.word	0x40012c00

08008de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	f023 0201 	bic.w	r2, r3, #1
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	011b      	lsls	r3, r3, #4
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f023 030a 	bic.w	r3, r3, #10
 8008e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	621a      	str	r2, [r3, #32]
}
 8008e32:	bf00      	nop
 8008e34:	371c      	adds	r7, #28
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bc80      	pop	{r7}
 8008e3a:	4770      	bx	lr

08008e3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6a1b      	ldr	r3, [r3, #32]
 8008e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	f023 0210 	bic.w	r2, r3, #16
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	031b      	lsls	r3, r3, #12
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	621a      	str	r2, [r3, #32]
}
 8008e90:	bf00      	nop
 8008e92:	371c      	adds	r7, #28
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bc80      	pop	{r7}
 8008e98:	4770      	bx	lr

08008e9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b085      	sub	sp, #20
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	f043 0307 	orr.w	r3, r3, #7
 8008ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	609a      	str	r2, [r3, #8]
}
 8008ec4:	bf00      	nop
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bc80      	pop	{r7}
 8008ecc:	4770      	bx	lr

08008ece <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b087      	sub	sp, #28
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	607a      	str	r2, [r7, #4]
 8008eda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ee8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	021a      	lsls	r2, r3, #8
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	609a      	str	r2, [r3, #8]
}
 8008f02:	bf00      	nop
 8008f04:	371c      	adds	r7, #28
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bc80      	pop	{r7}
 8008f0a:	4770      	bx	lr

08008f0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f003 031f 	and.w	r3, r3, #31
 8008f1e:	2201      	movs	r2, #1
 8008f20:	fa02 f303 	lsl.w	r3, r2, r3
 8008f24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6a1a      	ldr	r2, [r3, #32]
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	43db      	mvns	r3, r3
 8008f2e:	401a      	ands	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6a1a      	ldr	r2, [r3, #32]
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	f003 031f 	and.w	r3, r3, #31
 8008f3e:	6879      	ldr	r1, [r7, #4]
 8008f40:	fa01 f303 	lsl.w	r3, r1, r3
 8008f44:	431a      	orrs	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	621a      	str	r2, [r3, #32]
}
 8008f4a:	bf00      	nop
 8008f4c:	371c      	adds	r7, #28
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bc80      	pop	{r7}
 8008f52:	4770      	bx	lr

08008f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d101      	bne.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e046      	b.n	8008ffa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a16      	ldr	r2, [pc, #88]	; (8009004 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d00e      	beq.n	8008fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb8:	d009      	beq.n	8008fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a12      	ldr	r2, [pc, #72]	; (8009008 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d004      	beq.n	8008fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a10      	ldr	r2, [pc, #64]	; (800900c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d10c      	bne.n	8008fe8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bc80      	pop	{r7}
 8009002:	4770      	bx	lr
 8009004:	40012c00 	.word	0x40012c00
 8009008:	40000400 	.word	0x40000400
 800900c:	40000800 	.word	0x40000800

08009010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	bc80      	pop	{r7}
 8009020:	4770      	bx	lr

08009022 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009022:	b480      	push	{r7}
 8009024:	b083      	sub	sp, #12
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800902a:	bf00      	nop
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	bc80      	pop	{r7}
 8009032:	4770      	bx	lr

08009034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e042      	b.n	80090cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d106      	bne.n	8009060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7fa fa66 	bl	800352c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2224      	movs	r2, #36	; 0x24
 8009064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68da      	ldr	r2, [r3, #12]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f001 f941 	bl	800a300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	691a      	ldr	r2, [r3, #16]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800908c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	695a      	ldr	r2, [r3, #20]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800909c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	68da      	ldr	r2, [r3, #12]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2220      	movs	r2, #32
 80090c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e024      	b.n	8009130 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2224      	movs	r2, #36	; 0x24
 80090ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090fc:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7fa faf8 	bl	80036f4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08a      	sub	sp, #40	; 0x28
 800913c:	af02      	add	r7, sp, #8
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	603b      	str	r3, [r7, #0]
 8009144:	4613      	mov	r3, r2
 8009146:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009148:	2300      	movs	r3, #0
 800914a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b20      	cmp	r3, #32
 8009156:	d16d      	bne.n	8009234 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <HAL_UART_Transmit+0x2c>
 800915e:	88fb      	ldrh	r3, [r7, #6]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e066      	b.n	8009236 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2221      	movs	r2, #33	; 0x21
 8009172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009176:	f7fb fe0d 	bl	8004d94 <HAL_GetTick>
 800917a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	88fa      	ldrh	r2, [r7, #6]
 8009180:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	88fa      	ldrh	r2, [r7, #6]
 8009186:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009190:	d108      	bne.n	80091a4 <HAL_UART_Transmit+0x6c>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d104      	bne.n	80091a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800919a:	2300      	movs	r3, #0
 800919c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	61bb      	str	r3, [r7, #24]
 80091a2:	e003      	b.n	80091ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091a8:	2300      	movs	r3, #0
 80091aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80091ac:	e02a      	b.n	8009204 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2200      	movs	r2, #0
 80091b6:	2180      	movs	r1, #128	; 0x80
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 fd77 	bl	8009cac <UART_WaitOnFlagUntilTimeout>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e036      	b.n	8009236 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10b      	bne.n	80091e6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	3302      	adds	r3, #2
 80091e2:	61bb      	str	r3, [r7, #24]
 80091e4:	e007      	b.n	80091f6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	781a      	ldrb	r2, [r3, #0]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	3301      	adds	r3, #1
 80091f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	3b01      	subs	r3, #1
 80091fe:	b29a      	uxth	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009208:	b29b      	uxth	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1cf      	bne.n	80091ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2200      	movs	r2, #0
 8009216:	2140      	movs	r1, #64	; 0x40
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 fd47 	bl	8009cac <UART_WaitOnFlagUntilTimeout>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e006      	b.n	8009236 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2220      	movs	r2, #32
 800922c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	e000      	b.n	8009236 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009234:	2302      	movs	r3, #2
  }
}
 8009236:	4618      	mov	r0, r3
 8009238:	3720      	adds	r7, #32
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800923e:	b480      	push	{r7}
 8009240:	b085      	sub	sp, #20
 8009242:	af00      	add	r7, sp, #0
 8009244:	60f8      	str	r0, [r7, #12]
 8009246:	60b9      	str	r1, [r7, #8]
 8009248:	4613      	mov	r3, r2
 800924a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b20      	cmp	r3, #32
 8009256:	d121      	bne.n	800929c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <HAL_UART_Transmit_IT+0x26>
 800925e:	88fb      	ldrh	r3, [r7, #6]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e01a      	b.n	800929e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	88fa      	ldrh	r2, [r7, #6]
 8009272:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	88fa      	ldrh	r2, [r7, #6]
 8009278:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2221      	movs	r2, #33	; 0x21
 8009284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68da      	ldr	r2, [r3, #12]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009296:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	e000      	b.n	800929e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800929c:	2302      	movs	r3, #2
  }
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3714      	adds	r7, #20
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bc80      	pop	{r7}
 80092a6:	4770      	bx	lr

080092a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	4613      	mov	r3, r2
 80092b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b20      	cmp	r3, #32
 80092c0:	d112      	bne.n	80092e8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d002      	beq.n	80092ce <HAL_UART_Receive_DMA+0x26>
 80092c8:	88fb      	ldrh	r3, [r7, #6]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d101      	bne.n	80092d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e00b      	b.n	80092ea <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80092d8:	88fb      	ldrh	r3, [r7, #6]
 80092da:	461a      	mov	r2, r3
 80092dc:	68b9      	ldr	r1, [r7, #8]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 fd52 	bl	8009d88 <UART_Start_Receive_DMA>
 80092e4:	4603      	mov	r3, r0
 80092e6:	e000      	b.n	80092ea <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80092e8:	2302      	movs	r3, #2
  }
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
	...

080092f4 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b0a2      	sub	sp, #136	; 0x88
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80092fc:	2301      	movs	r3, #1
 80092fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	330c      	adds	r3, #12
 8009308:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009314:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8009318:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	330c      	adds	r3, #12
 8009322:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009326:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009328:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800932c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e3      	bne.n	8009302 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3314      	adds	r3, #20
 8009340:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009344:	e853 3f00 	ldrex	r3, [r3]
 8009348:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800934a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800934c:	f023 0301 	bic.w	r3, r3, #1
 8009350:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	3314      	adds	r3, #20
 8009358:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800935a:	65ba      	str	r2, [r7, #88]	; 0x58
 800935c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009360:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e5      	bne.n	800933a <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009372:	2b01      	cmp	r3, #1
 8009374:	d119      	bne.n	80093aa <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	330c      	adds	r3, #12
 800937c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009380:	e853 3f00 	ldrex	r3, [r3]
 8009384:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009388:	f023 0310 	bic.w	r3, r3, #16
 800938c:	67bb      	str	r3, [r7, #120]	; 0x78
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	330c      	adds	r3, #12
 8009394:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009396:	647a      	str	r2, [r7, #68]	; 0x44
 8009398:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800939c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800939e:	e841 2300 	strex	r3, r2, [r1]
 80093a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1e5      	bne.n	8009376 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00f      	beq.n	80093d2 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d004      	beq.n	80093ca <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c4:	4a53      	ldr	r2, [pc, #332]	; (8009514 <HAL_UART_Abort_IT+0x220>)
 80093c6:	635a      	str	r2, [r3, #52]	; 0x34
 80093c8:	e003      	b.n	80093d2 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ce:	2200      	movs	r2, #0
 80093d0:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00f      	beq.n	80093fa <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	695b      	ldr	r3, [r3, #20]
 80093e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d004      	beq.n	80093f2 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ec:	4a4a      	ldr	r2, [pc, #296]	; (8009518 <HAL_UART_Abort_IT+0x224>)
 80093ee:	635a      	str	r2, [r3, #52]	; 0x34
 80093f0:	e003      	b.n	80093fa <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f6:	2200      	movs	r2, #0
 80093f8:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009404:	2b00      	cmp	r3, #0
 8009406:	d02d      	beq.n	8009464 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3314      	adds	r3, #20
 800940e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	e853 3f00 	ldrex	r3, [r3]
 8009416:	623b      	str	r3, [r7, #32]
   return(result);
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800941e:	677b      	str	r3, [r7, #116]	; 0x74
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3314      	adds	r3, #20
 8009426:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009428:	633a      	str	r2, [r7, #48]	; 0x30
 800942a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800942e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009430:	e841 2300 	strex	r3, r2, [r1]
 8009434:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1e5      	bne.n	8009408 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00f      	beq.n	8009464 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009448:	4618      	mov	r0, r3
 800944a:	f7fc faf7 	bl	8005a3c <HAL_DMA_Abort_IT>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d004      	beq.n	800945e <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009458:	2200      	movs	r2, #0
 800945a:	635a      	str	r2, [r3, #52]	; 0x34
 800945c:	e002      	b.n	8009464 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 800945e:	2300      	movs	r3, #0
 8009460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946e:	2b00      	cmp	r3, #0
 8009470:	d030      	beq.n	80094d4 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3314      	adds	r3, #20
 8009478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	e853 3f00 	ldrex	r3, [r3]
 8009480:	60fb      	str	r3, [r7, #12]
   return(result);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009488:	673b      	str	r3, [r7, #112]	; 0x70
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3314      	adds	r3, #20
 8009490:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009492:	61fa      	str	r2, [r7, #28]
 8009494:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009496:	69b9      	ldr	r1, [r7, #24]
 8009498:	69fa      	ldr	r2, [r7, #28]
 800949a:	e841 2300 	strex	r3, r2, [r1]
 800949e:	617b      	str	r3, [r7, #20]
   return(result);
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e5      	bne.n	8009472 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d012      	beq.n	80094d4 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fc fac2 	bl	8005a3c <HAL_DMA_Abort_IT>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d007      	beq.n	80094ce <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c2:	2200      	movs	r2, #0
 80094c4:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 80094c6:	2301      	movs	r3, #1
 80094c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094cc:	e002      	b.n	80094d4 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80094d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d116      	bne.n	800950a <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fabf 	bl	8009a88 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3788      	adds	r7, #136	; 0x88
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	08009ff7 	.word	0x08009ff7
 8009518:	0800a057 	.word	0x0800a057

0800951c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b0ba      	sub	sp, #232	; 0xe8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009542:	2300      	movs	r3, #0
 8009544:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009548:	2300      	movs	r3, #0
 800954a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800954e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009552:	f003 030f 	and.w	r3, r3, #15
 8009556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800955a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10f      	bne.n	8009582 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009566:	f003 0320 	and.w	r3, r3, #32
 800956a:	2b00      	cmp	r3, #0
 800956c:	d009      	beq.n	8009582 <HAL_UART_IRQHandler+0x66>
 800956e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009572:	f003 0320 	and.w	r3, r3, #32
 8009576:	2b00      	cmp	r3, #0
 8009578:	d003      	beq.n	8009582 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fe02 	bl	800a184 <UART_Receive_IT>
      return;
 8009580:	e25b      	b.n	8009a3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 80de 	beq.w	8009748 <HAL_UART_IRQHandler+0x22c>
 800958c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009590:	f003 0301 	and.w	r3, r3, #1
 8009594:	2b00      	cmp	r3, #0
 8009596:	d106      	bne.n	80095a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800959c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f000 80d1 	beq.w	8009748 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80095a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00b      	beq.n	80095ca <HAL_UART_IRQHandler+0xae>
 80095b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d005      	beq.n	80095ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c2:	f043 0201 	orr.w	r2, r3, #1
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ce:	f003 0304 	and.w	r3, r3, #4
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00b      	beq.n	80095ee <HAL_UART_IRQHandler+0xd2>
 80095d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d005      	beq.n	80095ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e6:	f043 0202 	orr.w	r2, r3, #2
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095f2:	f003 0302 	and.w	r3, r3, #2
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00b      	beq.n	8009612 <HAL_UART_IRQHandler+0xf6>
 80095fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	2b00      	cmp	r3, #0
 8009604:	d005      	beq.n	8009612 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800960a:	f043 0204 	orr.w	r2, r3, #4
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009616:	f003 0308 	and.w	r3, r3, #8
 800961a:	2b00      	cmp	r3, #0
 800961c:	d011      	beq.n	8009642 <HAL_UART_IRQHandler+0x126>
 800961e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009622:	f003 0320 	and.w	r3, r3, #32
 8009626:	2b00      	cmp	r3, #0
 8009628:	d105      	bne.n	8009636 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800962a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b00      	cmp	r3, #0
 8009634:	d005      	beq.n	8009642 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800963a:	f043 0208 	orr.w	r2, r3, #8
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 81f2 	beq.w	8009a30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800964c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009650:	f003 0320 	and.w	r3, r3, #32
 8009654:	2b00      	cmp	r3, #0
 8009656:	d008      	beq.n	800966a <HAL_UART_IRQHandler+0x14e>
 8009658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800965c:	f003 0320 	and.w	r3, r3, #32
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fd8d 	bl	800a184 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	695b      	ldr	r3, [r3, #20]
 8009670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009674:	2b00      	cmp	r3, #0
 8009676:	bf14      	ite	ne
 8009678:	2301      	movne	r3, #1
 800967a:	2300      	moveq	r3, #0
 800967c:	b2db      	uxtb	r3, r3
 800967e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009686:	f003 0308 	and.w	r3, r3, #8
 800968a:	2b00      	cmp	r3, #0
 800968c:	d103      	bne.n	8009696 <HAL_UART_IRQHandler+0x17a>
 800968e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009692:	2b00      	cmp	r3, #0
 8009694:	d04f      	beq.n	8009736 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fc37 	bl	8009f0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d041      	beq.n	800972e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	3314      	adds	r3, #20
 80096b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096b8:	e853 3f00 	ldrex	r3, [r3]
 80096bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80096c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3314      	adds	r3, #20
 80096d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80096e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80096e6:	e841 2300 	strex	r3, r2, [r1]
 80096ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80096ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1d9      	bne.n	80096aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d013      	beq.n	8009726 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009702:	4a7e      	ldr	r2, [pc, #504]	; (80098fc <HAL_UART_IRQHandler+0x3e0>)
 8009704:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800970a:	4618      	mov	r0, r3
 800970c:	f7fc f996 	bl	8005a3c <HAL_DMA_Abort_IT>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d016      	beq.n	8009744 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009720:	4610      	mov	r0, r2
 8009722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009724:	e00e      	b.n	8009744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f9a5 	bl	8009a76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800972c:	e00a      	b.n	8009744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f9a1 	bl	8009a76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009734:	e006      	b.n	8009744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f99d 	bl	8009a76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8009742:	e175      	b.n	8009a30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009744:	bf00      	nop
    return;
 8009746:	e173      	b.n	8009a30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974c:	2b01      	cmp	r3, #1
 800974e:	f040 814f 	bne.w	80099f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009756:	f003 0310 	and.w	r3, r3, #16
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 8148 	beq.w	80099f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009764:	f003 0310 	and.w	r3, r3, #16
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 8141 	beq.w	80099f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800976e:	2300      	movs	r3, #0
 8009770:	60bb      	str	r3, [r7, #8]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	60bb      	str	r3, [r7, #8]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	60bb      	str	r3, [r7, #8]
 8009782:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 80b6 	beq.w	8009900 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 8145 	beq.w	8009a34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80097ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097b2:	429a      	cmp	r2, r3
 80097b4:	f080 813e 	bcs.w	8009a34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	2b20      	cmp	r3, #32
 80097c8:	f000 8088 	beq.w	80098dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	330c      	adds	r3, #12
 80097d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097da:	e853 3f00 	ldrex	r3, [r3]
 80097de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80097e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	330c      	adds	r3, #12
 80097f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80097f8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009800:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009804:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009808:	e841 2300 	strex	r3, r2, [r1]
 800980c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009810:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1d9      	bne.n	80097cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	3314      	adds	r3, #20
 800981e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009822:	e853 3f00 	ldrex	r3, [r3]
 8009826:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009828:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800982a:	f023 0301 	bic.w	r3, r3, #1
 800982e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3314      	adds	r3, #20
 8009838:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800983c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009840:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009842:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009844:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009848:	e841 2300 	strex	r3, r2, [r1]
 800984c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800984e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1e1      	bne.n	8009818 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	3314      	adds	r3, #20
 800985a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800985e:	e853 3f00 	ldrex	r3, [r3]
 8009862:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800986a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	3314      	adds	r3, #20
 8009874:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009878:	66fa      	str	r2, [r7, #108]	; 0x6c
 800987a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800987e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009880:	e841 2300 	strex	r3, r2, [r1]
 8009884:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1e3      	bne.n	8009854 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2220      	movs	r2, #32
 8009890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	330c      	adds	r3, #12
 80098a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098ac:	f023 0310 	bic.w	r3, r3, #16
 80098b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	330c      	adds	r3, #12
 80098ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80098be:	65ba      	str	r2, [r7, #88]	; 0x58
 80098c0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098c6:	e841 2300 	strex	r3, r2, [r1]
 80098ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1e3      	bne.n	800989a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fc f874 	bl	80059c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2202      	movs	r2, #2
 80098e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	4619      	mov	r1, r3
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f8d1 	bl	8009a9a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098f8:	e09c      	b.n	8009a34 <HAL_UART_IRQHandler+0x518>
 80098fa:	bf00      	nop
 80098fc:	08009fcf 	.word	0x08009fcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009908:	b29b      	uxth	r3, r3
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009914:	b29b      	uxth	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 808e 	beq.w	8009a38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800991c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009920:	2b00      	cmp	r3, #0
 8009922:	f000 8089 	beq.w	8009a38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	330c      	adds	r3, #12
 800992c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009930:	e853 3f00 	ldrex	r3, [r3]
 8009934:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009938:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800993c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	330c      	adds	r3, #12
 8009946:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800994a:	647a      	str	r2, [r7, #68]	; 0x44
 800994c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009950:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009952:	e841 2300 	strex	r3, r2, [r1]
 8009956:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1e3      	bne.n	8009926 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3314      	adds	r3, #20
 8009964:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	623b      	str	r3, [r7, #32]
   return(result);
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	f023 0301 	bic.w	r3, r3, #1
 8009974:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3314      	adds	r3, #20
 800997e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009982:	633a      	str	r2, [r7, #48]	; 0x30
 8009984:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800998a:	e841 2300 	strex	r3, r2, [r1]
 800998e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1e3      	bne.n	800995e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2220      	movs	r2, #32
 800999a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	330c      	adds	r3, #12
 80099aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	e853 3f00 	ldrex	r3, [r3]
 80099b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f023 0310 	bic.w	r3, r3, #16
 80099ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	330c      	adds	r3, #12
 80099c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80099c8:	61fa      	str	r2, [r7, #28]
 80099ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	69b9      	ldr	r1, [r7, #24]
 80099ce:	69fa      	ldr	r2, [r7, #28]
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	617b      	str	r3, [r7, #20]
   return(result);
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e3      	bne.n	80099a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2202      	movs	r2, #2
 80099e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099e6:	4619      	mov	r1, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f856 	bl	8009a9a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80099ee:	e023      	b.n	8009a38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80099f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d009      	beq.n	8009a10 <HAL_UART_IRQHandler+0x4f4>
 80099fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d003      	beq.n	8009a10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fb54 	bl	800a0b6 <UART_Transmit_IT>
    return;
 8009a0e:	e014      	b.n	8009a3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00e      	beq.n	8009a3a <HAL_UART_IRQHandler+0x51e>
 8009a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d008      	beq.n	8009a3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fb93 	bl	800a154 <UART_EndTransmit_IT>
    return;
 8009a2e:	e004      	b.n	8009a3a <HAL_UART_IRQHandler+0x51e>
    return;
 8009a30:	bf00      	nop
 8009a32:	e002      	b.n	8009a3a <HAL_UART_IRQHandler+0x51e>
      return;
 8009a34:	bf00      	nop
 8009a36:	e000      	b.n	8009a3a <HAL_UART_IRQHandler+0x51e>
      return;
 8009a38:	bf00      	nop
  }
}
 8009a3a:	37e8      	adds	r7, #232	; 0xe8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a48:	bf00      	nop
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bc80      	pop	{r7}
 8009a50:	4770      	bx	lr

08009a52 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b083      	sub	sp, #12
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009a5a:	bf00      	nop
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bc80      	pop	{r7}
 8009a62:	4770      	bx	lr

08009a64 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bc80      	pop	{r7}
 8009a74:	4770      	bx	lr

08009a76 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a76:	b480      	push	{r7}
 8009a78:	b083      	sub	sp, #12
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a7e:	bf00      	nop
 8009a80:	370c      	adds	r7, #12
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bc80      	pop	{r7}
 8009a86:	4770      	bx	lr

08009a88 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bc80      	pop	{r7}
 8009a98:	4770      	bx	lr

08009a9a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009aa6:	bf00      	nop
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bc80      	pop	{r7}
 8009aae:	4770      	bx	lr

08009ab0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b09c      	sub	sp, #112	; 0x70
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 0320 	and.w	r3, r3, #32
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d172      	bne.n	8009bb2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ace:	2200      	movs	r2, #0
 8009ad0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	330c      	adds	r3, #12
 8009ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009adc:	e853 3f00 	ldrex	r3, [r3]
 8009ae0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ae8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	330c      	adds	r3, #12
 8009af0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009af2:	65ba      	str	r2, [r7, #88]	; 0x58
 8009af4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009af8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009afa:	e841 2300 	strex	r3, r2, [r1]
 8009afe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1e5      	bne.n	8009ad2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3314      	adds	r3, #20
 8009b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b10:	e853 3f00 	ldrex	r3, [r3]
 8009b14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b18:	f023 0301 	bic.w	r3, r3, #1
 8009b1c:	667b      	str	r3, [r7, #100]	; 0x64
 8009b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3314      	adds	r3, #20
 8009b24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b26:	647a      	str	r2, [r7, #68]	; 0x44
 8009b28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b2e:	e841 2300 	strex	r3, r2, [r1]
 8009b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1e5      	bne.n	8009b06 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3314      	adds	r3, #20
 8009b40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b44:	e853 3f00 	ldrex	r3, [r3]
 8009b48:	623b      	str	r3, [r7, #32]
   return(result);
 8009b4a:	6a3b      	ldr	r3, [r7, #32]
 8009b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b50:	663b      	str	r3, [r7, #96]	; 0x60
 8009b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	3314      	adds	r3, #20
 8009b58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b5a:	633a      	str	r2, [r7, #48]	; 0x30
 8009b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b62:	e841 2300 	strex	r3, r2, [r1]
 8009b66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1e5      	bne.n	8009b3a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b70:	2220      	movs	r2, #32
 8009b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d119      	bne.n	8009bb2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	330c      	adds	r3, #12
 8009b84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	e853 3f00 	ldrex	r3, [r3]
 8009b8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f023 0310 	bic.w	r3, r3, #16
 8009b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	330c      	adds	r3, #12
 8009b9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b9e:	61fa      	str	r2, [r7, #28]
 8009ba0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba2:	69b9      	ldr	r1, [r7, #24]
 8009ba4:	69fa      	ldr	r2, [r7, #28]
 8009ba6:	e841 2300 	strex	r3, r2, [r1]
 8009baa:	617b      	str	r3, [r7, #20]
   return(result);
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1e5      	bne.n	8009b7e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d106      	bne.n	8009bce <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009bc8:	f7ff ff67 	bl	8009a9a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009bcc:	e002      	b.n	8009bd4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009bce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009bd0:	f7ff ff3f 	bl	8009a52 <HAL_UART_RxCpltCallback>
}
 8009bd4:	bf00      	nop
 8009bd6:	3770      	adds	r7, #112	; 0x70
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2201      	movs	r2, #1
 8009bee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d108      	bne.n	8009c0a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bfc:	085b      	lsrs	r3, r3, #1
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	4619      	mov	r1, r3
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f7ff ff49 	bl	8009a9a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c08:	e002      	b.n	8009c10 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f7ff ff2a 	bl	8009a64 <HAL_UART_RxHalfCpltCallback>
}
 8009c10:	bf00      	nop
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009c20:	2300      	movs	r3, #0
 8009c22:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	695b      	ldr	r3, [r3, #20]
 8009c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	bf14      	ite	ne
 8009c38:	2301      	movne	r3, #1
 8009c3a:	2300      	moveq	r3, #0
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b21      	cmp	r3, #33	; 0x21
 8009c4a:	d108      	bne.n	8009c5e <UART_DMAError+0x46>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d005      	beq.n	8009c5e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2200      	movs	r2, #0
 8009c56:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009c58:	68b8      	ldr	r0, [r7, #8]
 8009c5a:	f000 f92f 	bl	8009ebc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	695b      	ldr	r3, [r3, #20]
 8009c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bf14      	ite	ne
 8009c6c:	2301      	movne	r3, #1
 8009c6e:	2300      	moveq	r3, #0
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b22      	cmp	r3, #34	; 0x22
 8009c7e:	d108      	bne.n	8009c92 <UART_DMAError+0x7a>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d005      	beq.n	8009c92 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009c8c:	68b8      	ldr	r0, [r7, #8]
 8009c8e:	f000 f93c 	bl	8009f0a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c96:	f043 0210 	orr.w	r2, r3, #16
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c9e:	68b8      	ldr	r0, [r7, #8]
 8009ca0:	f7ff fee9 	bl	8009a76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ca4:	bf00      	nop
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b090      	sub	sp, #64	; 0x40
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	603b      	str	r3, [r7, #0]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cbc:	e050      	b.n	8009d60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc4:	d04c      	beq.n	8009d60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d007      	beq.n	8009cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8009ccc:	f7fb f862 	bl	8004d94 <HAL_GetTick>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d241      	bcs.n	8009d60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	330c      	adds	r3, #12
 8009ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce6:	e853 3f00 	ldrex	r3, [r3]
 8009cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	330c      	adds	r3, #12
 8009cfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009cfc:	637a      	str	r2, [r7, #52]	; 0x34
 8009cfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d04:	e841 2300 	strex	r3, r2, [r1]
 8009d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1e5      	bne.n	8009cdc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3314      	adds	r3, #20
 8009d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	e853 3f00 	ldrex	r3, [r3]
 8009d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	f023 0301 	bic.w	r3, r3, #1
 8009d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	3314      	adds	r3, #20
 8009d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d30:	623a      	str	r2, [r7, #32]
 8009d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d34:	69f9      	ldr	r1, [r7, #28]
 8009d36:	6a3a      	ldr	r2, [r7, #32]
 8009d38:	e841 2300 	strex	r3, r2, [r1]
 8009d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1e5      	bne.n	8009d10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2220      	movs	r2, #32
 8009d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2220      	movs	r2, #32
 8009d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e00f      	b.n	8009d80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	4013      	ands	r3, r2
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	bf0c      	ite	eq
 8009d70:	2301      	moveq	r3, #1
 8009d72:	2300      	movne	r3, #0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	461a      	mov	r2, r3
 8009d78:	79fb      	ldrb	r3, [r7, #7]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d09f      	beq.n	8009cbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3740      	adds	r7, #64	; 0x40
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b098      	sub	sp, #96	; 0x60
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	4613      	mov	r3, r2
 8009d94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	88fa      	ldrh	r2, [r7, #6]
 8009da0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2222      	movs	r2, #34	; 0x22
 8009dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009db4:	4a3e      	ldr	r2, [pc, #248]	; (8009eb0 <UART_Start_Receive_DMA+0x128>)
 8009db6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dbc:	4a3d      	ldr	r2, [pc, #244]	; (8009eb4 <UART_Start_Receive_DMA+0x12c>)
 8009dbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc4:	4a3c      	ldr	r2, [pc, #240]	; (8009eb8 <UART_Start_Receive_DMA+0x130>)
 8009dc6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dcc:	2200      	movs	r2, #0
 8009dce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009dd0:	f107 0308 	add.w	r3, r7, #8
 8009dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3304      	adds	r3, #4
 8009de0:	4619      	mov	r1, r3
 8009de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	88fb      	ldrh	r3, [r7, #6]
 8009de8:	f7fb fd8c 	bl	8005904 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009dec:	2300      	movs	r3, #0
 8009dee:	613b      	str	r3, [r7, #16]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	613b      	str	r3, [r7, #16]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	613b      	str	r3, [r7, #16]
 8009e00:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d019      	beq.n	8009e3e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	330c      	adds	r3, #12
 8009e10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e14:	e853 3f00 	ldrex	r3, [r3]
 8009e18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e20:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	330c      	adds	r3, #12
 8009e28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e2a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009e2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009e30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e32:	e841 2300 	strex	r3, r2, [r1]
 8009e36:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1e5      	bne.n	8009e0a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3314      	adds	r3, #20
 8009e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e48:	e853 3f00 	ldrex	r3, [r3]
 8009e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e50:	f043 0301 	orr.w	r3, r3, #1
 8009e54:	657b      	str	r3, [r7, #84]	; 0x54
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3314      	adds	r3, #20
 8009e5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e5e:	63ba      	str	r2, [r7, #56]	; 0x38
 8009e60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e66:	e841 2300 	strex	r3, r2, [r1]
 8009e6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1e5      	bne.n	8009e3e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3314      	adds	r3, #20
 8009e78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	e853 3f00 	ldrex	r3, [r3]
 8009e80:	617b      	str	r3, [r7, #20]
   return(result);
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e88:	653b      	str	r3, [r7, #80]	; 0x50
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3314      	adds	r3, #20
 8009e90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e92:	627a      	str	r2, [r7, #36]	; 0x24
 8009e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e96:	6a39      	ldr	r1, [r7, #32]
 8009e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e9a:	e841 2300 	strex	r3, r2, [r1]
 8009e9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e5      	bne.n	8009e72 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3760      	adds	r7, #96	; 0x60
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	08009ab1 	.word	0x08009ab1
 8009eb4:	08009bdd 	.word	0x08009bdd
 8009eb8:	08009c19 	.word	0x08009c19

08009ebc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b089      	sub	sp, #36	; 0x24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	330c      	adds	r3, #12
 8009eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	e853 3f00 	ldrex	r3, [r3]
 8009ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009eda:	61fb      	str	r3, [r7, #28]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	330c      	adds	r3, #12
 8009ee2:	69fa      	ldr	r2, [r7, #28]
 8009ee4:	61ba      	str	r2, [r7, #24]
 8009ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee8:	6979      	ldr	r1, [r7, #20]
 8009eea:	69ba      	ldr	r2, [r7, #24]
 8009eec:	e841 2300 	strex	r3, r2, [r1]
 8009ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1e5      	bne.n	8009ec4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2220      	movs	r2, #32
 8009efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8009f00:	bf00      	nop
 8009f02:	3724      	adds	r7, #36	; 0x24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bc80      	pop	{r7}
 8009f08:	4770      	bx	lr

08009f0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b095      	sub	sp, #84	; 0x54
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	330c      	adds	r3, #12
 8009f18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f1c:	e853 3f00 	ldrex	r3, [r3]
 8009f20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	330c      	adds	r3, #12
 8009f30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f32:	643a      	str	r2, [r7, #64]	; 0x40
 8009f34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f3a:	e841 2300 	strex	r3, r2, [r1]
 8009f3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1e5      	bne.n	8009f12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	3314      	adds	r3, #20
 8009f4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4e:	6a3b      	ldr	r3, [r7, #32]
 8009f50:	e853 3f00 	ldrex	r3, [r3]
 8009f54:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	f023 0301 	bic.w	r3, r3, #1
 8009f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3314      	adds	r3, #20
 8009f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f6e:	e841 2300 	strex	r3, r2, [r1]
 8009f72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1e5      	bne.n	8009f46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d119      	bne.n	8009fb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	330c      	adds	r3, #12
 8009f88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	e853 3f00 	ldrex	r3, [r3]
 8009f90:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	f023 0310 	bic.w	r3, r3, #16
 8009f98:	647b      	str	r3, [r7, #68]	; 0x44
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	330c      	adds	r3, #12
 8009fa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fa2:	61ba      	str	r2, [r7, #24]
 8009fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa6:	6979      	ldr	r1, [r7, #20]
 8009fa8:	69ba      	ldr	r2, [r7, #24]
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	613b      	str	r3, [r7, #16]
   return(result);
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1e5      	bne.n	8009f82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009fc4:	bf00      	nop
 8009fc6:	3754      	adds	r7, #84	; 0x54
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bc80      	pop	{r7}
 8009fcc:	4770      	bx	lr

08009fce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f7ff fd44 	bl	8009a76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fee:	bf00      	nop
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b084      	sub	sp, #16
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a002:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a008:	2200      	movs	r2, #0
 800a00a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a010:	2b00      	cmp	r3, #0
 800a012:	d004      	beq.n	800a01e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d117      	bne.n	800a04e <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2220      	movs	r2, #32
 800a034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2220      	movs	r2, #32
 800a03c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f7ff fd1e 	bl	8009a88 <HAL_UART_AbortCpltCallback>
 800a04c:	e000      	b.n	800a050 <UART_DMATxAbortCallback+0x5a>
      return;
 800a04e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a062:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a068:	2200      	movs	r2, #0
 800a06a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a070:	2b00      	cmp	r3, #0
 800a072:	d004      	beq.n	800a07e <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d117      	bne.n	800a0ae <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2220      	movs	r2, #32
 800a094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2220      	movs	r2, #32
 800a09c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f7ff fcee 	bl	8009a88 <HAL_UART_AbortCpltCallback>
 800a0ac:	e000      	b.n	800a0b0 <UART_DMARxAbortCallback+0x5a>
      return;
 800a0ae:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	b085      	sub	sp, #20
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	2b21      	cmp	r3, #33	; 0x21
 800a0c8:	d13e      	bne.n	800a148 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0d2:	d114      	bne.n	800a0fe <UART_Transmit_IT+0x48>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d110      	bne.n	800a0fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a1b      	ldr	r3, [r3, #32]
 800a0e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	881b      	ldrh	r3, [r3, #0]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a1b      	ldr	r3, [r3, #32]
 800a0f6:	1c9a      	adds	r2, r3, #2
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	621a      	str	r2, [r3, #32]
 800a0fc:	e008      	b.n	800a110 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a1b      	ldr	r3, [r3, #32]
 800a102:	1c59      	adds	r1, r3, #1
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	6211      	str	r1, [r2, #32]
 800a108:	781a      	ldrb	r2, [r3, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a114:	b29b      	uxth	r3, r3
 800a116:	3b01      	subs	r3, #1
 800a118:	b29b      	uxth	r3, r3
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	4619      	mov	r1, r3
 800a11e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10f      	bne.n	800a144 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a132:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68da      	ldr	r2, [r3, #12]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a142:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	e000      	b.n	800a14a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a148:	2302      	movs	r3, #2
  }
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	bc80      	pop	{r7}
 800a152:	4770      	bx	lr

0800a154 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68da      	ldr	r2, [r3, #12]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a16a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2220      	movs	r2, #32
 800a170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff fc63 	bl	8009a40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b08c      	sub	sp, #48	; 0x30
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b22      	cmp	r3, #34	; 0x22
 800a196:	f040 80ae 	bne.w	800a2f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1a2:	d117      	bne.n	800a1d4 <UART_Receive_IT+0x50>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d113      	bne.n	800a1d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1cc:	1c9a      	adds	r2, r3, #2
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	629a      	str	r2, [r3, #40]	; 0x28
 800a1d2:	e026      	b.n	800a222 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1e6:	d007      	beq.n	800a1f8 <UART_Receive_IT+0x74>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10a      	bne.n	800a206 <UART_Receive_IT+0x82>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d106      	bne.n	800a206 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	b2da      	uxtb	r2, r3
 800a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a202:	701a      	strb	r2, [r3, #0]
 800a204:	e008      	b.n	800a218 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a212:	b2da      	uxtb	r2, r3
 800a214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a216:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21c:	1c5a      	adds	r2, r3, #1
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a226:	b29b      	uxth	r3, r3
 800a228:	3b01      	subs	r3, #1
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	4619      	mov	r1, r3
 800a230:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a232:	2b00      	cmp	r3, #0
 800a234:	d15d      	bne.n	800a2f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68da      	ldr	r2, [r3, #12]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f022 0220 	bic.w	r2, r2, #32
 800a244:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68da      	ldr	r2, [r3, #12]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a254:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	695a      	ldr	r2, [r3, #20]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0201 	bic.w	r2, r2, #1
 800a264:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2220      	movs	r2, #32
 800a26a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d135      	bne.n	800a2e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	330c      	adds	r3, #12
 800a288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	e853 3f00 	ldrex	r3, [r3]
 800a290:	613b      	str	r3, [r7, #16]
   return(result);
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f023 0310 	bic.w	r3, r3, #16
 800a298:	627b      	str	r3, [r7, #36]	; 0x24
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	330c      	adds	r3, #12
 800a2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a2:	623a      	str	r2, [r7, #32]
 800a2a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a6:	69f9      	ldr	r1, [r7, #28]
 800a2a8:	6a3a      	ldr	r2, [r7, #32]
 800a2aa:	e841 2300 	strex	r3, r2, [r1]
 800a2ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1e5      	bne.n	800a282 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0310 	and.w	r3, r3, #16
 800a2c0:	2b10      	cmp	r3, #16
 800a2c2:	d10a      	bne.n	800a2da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	60fb      	str	r3, [r7, #12]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	60fb      	str	r3, [r7, #12]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a2de:	4619      	mov	r1, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f7ff fbda 	bl	8009a9a <HAL_UARTEx_RxEventCallback>
 800a2e6:	e002      	b.n	800a2ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff fbb2 	bl	8009a52 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	e002      	b.n	800a2f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	e000      	b.n	800a2f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a2f6:	2302      	movs	r3, #2
  }
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3730      	adds	r7, #48	; 0x30
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	68da      	ldr	r2, [r3, #12]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	430a      	orrs	r2, r1
 800a31c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	689a      	ldr	r2, [r3, #8]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	431a      	orrs	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a33a:	f023 030c 	bic.w	r3, r3, #12
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	6812      	ldr	r2, [r2, #0]
 800a342:	68b9      	ldr	r1, [r7, #8]
 800a344:	430b      	orrs	r3, r1
 800a346:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	695b      	ldr	r3, [r3, #20]
 800a34e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	699a      	ldr	r2, [r3, #24]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a2c      	ldr	r2, [pc, #176]	; (800a414 <UART_SetConfig+0x114>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d103      	bne.n	800a370 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a368:	f7fd f948 	bl	80075fc <HAL_RCC_GetPCLK2Freq>
 800a36c:	60f8      	str	r0, [r7, #12]
 800a36e:	e002      	b.n	800a376 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a370:	f7fd f930 	bl	80075d4 <HAL_RCC_GetPCLK1Freq>
 800a374:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	4613      	mov	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	009a      	lsls	r2, r3, #2
 800a380:	441a      	add	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	fbb2 f3f3 	udiv	r3, r2, r3
 800a38c:	4a22      	ldr	r2, [pc, #136]	; (800a418 <UART_SetConfig+0x118>)
 800a38e:	fba2 2303 	umull	r2, r3, r2, r3
 800a392:	095b      	lsrs	r3, r3, #5
 800a394:	0119      	lsls	r1, r3, #4
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	4613      	mov	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	009a      	lsls	r2, r3, #2
 800a3a0:	441a      	add	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3ac:	4b1a      	ldr	r3, [pc, #104]	; (800a418 <UART_SetConfig+0x118>)
 800a3ae:	fba3 0302 	umull	r0, r3, r3, r2
 800a3b2:	095b      	lsrs	r3, r3, #5
 800a3b4:	2064      	movs	r0, #100	; 0x64
 800a3b6:	fb00 f303 	mul.w	r3, r0, r3
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	011b      	lsls	r3, r3, #4
 800a3be:	3332      	adds	r3, #50	; 0x32
 800a3c0:	4a15      	ldr	r2, [pc, #84]	; (800a418 <UART_SetConfig+0x118>)
 800a3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c6:	095b      	lsrs	r3, r3, #5
 800a3c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3cc:	4419      	add	r1, r3
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	4413      	add	r3, r2
 800a3d6:	009a      	lsls	r2, r3, #2
 800a3d8:	441a      	add	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3e4:	4b0c      	ldr	r3, [pc, #48]	; (800a418 <UART_SetConfig+0x118>)
 800a3e6:	fba3 0302 	umull	r0, r3, r3, r2
 800a3ea:	095b      	lsrs	r3, r3, #5
 800a3ec:	2064      	movs	r0, #100	; 0x64
 800a3ee:	fb00 f303 	mul.w	r3, r0, r3
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	011b      	lsls	r3, r3, #4
 800a3f6:	3332      	adds	r3, #50	; 0x32
 800a3f8:	4a07      	ldr	r2, [pc, #28]	; (800a418 <UART_SetConfig+0x118>)
 800a3fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a3fe:	095b      	lsrs	r3, r3, #5
 800a400:	f003 020f 	and.w	r2, r3, #15
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	440a      	add	r2, r1
 800a40a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a40c:	bf00      	nop
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	40013800 	.word	0x40013800
 800a418:	51eb851f 	.word	0x51eb851f

0800a41c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	4603      	mov	r3, r0
 800a424:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a426:	2300      	movs	r3, #0
 800a428:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a42a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a42e:	2b84      	cmp	r3, #132	; 0x84
 800a430:	d005      	beq.n	800a43e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a432:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	4413      	add	r3, r2
 800a43a:	3303      	adds	r3, #3
 800a43c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a43e:	68fb      	ldr	r3, [r7, #12]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3714      	adds	r7, #20
 800a444:	46bd      	mov	sp, r7
 800a446:	bc80      	pop	{r7}
 800a448:	4770      	bx	lr

0800a44a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b083      	sub	sp, #12
 800a44e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a450:	f3ef 8305 	mrs	r3, IPSR
 800a454:	607b      	str	r3, [r7, #4]
  return(result);
 800a456:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a458:	2b00      	cmp	r3, #0
 800a45a:	bf14      	ite	ne
 800a45c:	2301      	movne	r3, #1
 800a45e:	2300      	moveq	r3, #0
 800a460:	b2db      	uxtb	r3, r3
}
 800a462:	4618      	mov	r0, r3
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	bc80      	pop	{r7}
 800a46a:	4770      	bx	lr

0800a46c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a470:	f001 fd0a 	bl	800be88 <vTaskStartScheduler>
  
  return osOK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	bd80      	pop	{r7, pc}

0800a47a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a47a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a47c:	b089      	sub	sp, #36	; 0x24
 800a47e:	af04      	add	r7, sp, #16
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d020      	beq.n	800a4ce <osThreadCreate+0x54>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	699b      	ldr	r3, [r3, #24]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d01c      	beq.n	800a4ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685c      	ldr	r4, [r3, #4]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	691e      	ldr	r6, [r3, #16]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7ff ffb8 	bl	800a41c <makeFreeRtosPriority>
 800a4ac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	695b      	ldr	r3, [r3, #20]
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4b6:	9202      	str	r2, [sp, #8]
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	9100      	str	r1, [sp, #0]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	4632      	mov	r2, r6
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f001 f8f0 	bl	800b6a8 <xTaskCreateStatic>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	e01c      	b.n	800a508 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	685c      	ldr	r4, [r3, #4]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4da:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7ff ff9a 	bl	800a41c <makeFreeRtosPriority>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	f107 030c 	add.w	r3, r7, #12
 800a4ee:	9301      	str	r3, [sp, #4]
 800a4f0:	9200      	str	r2, [sp, #0]
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f001 f931 	bl	800b760 <xTaskCreate>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b01      	cmp	r3, #1
 800a502:	d001      	beq.n	800a508 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a504:	2300      	movs	r3, #0
 800a506:	e000      	b.n	800a50a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a508:	68fb      	ldr	r3, [r7, #12]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a514 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 800a514:	b480      	push	{r7}
 800a516:	af00      	add	r7, sp, #0
  taskYIELD();
 800a518:	4b06      	ldr	r3, [pc, #24]	; (800a534 <osThreadYield+0x20>)
 800a51a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a51e:	601a      	str	r2, [r3, #0]
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	f3bf 8f6f 	isb	sy
  
  return osOK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bc80      	pop	{r7}
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	e000ed04 	.word	0xe000ed04

0800a538 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <osDelay+0x16>
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	e000      	b.n	800a550 <osDelay+0x18>
 800a54e:	2301      	movs	r3, #1
 800a550:	4618      	mov	r0, r3
 800a552:	f001 fac9 	bl	800bae8 <vTaskDelay>
  
  return osOK;
 800a556:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af02      	add	r7, sp, #8
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	460b      	mov	r3, r1
 800a56a:	607a      	str	r2, [r7, #4]
 800a56c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d013      	beq.n	800a59e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800a576:	7afb      	ldrb	r3, [r7, #11]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d101      	bne.n	800a580 <osTimerCreate+0x20>
 800a57c:	2101      	movs	r1, #1
 800a57e:	e000      	b.n	800a582 <osTimerCreate+0x22>
 800a580:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800a58a:	9201      	str	r2, [sp, #4]
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	460a      	mov	r2, r1
 800a592:	2101      	movs	r1, #1
 800a594:	480b      	ldr	r0, [pc, #44]	; (800a5c4 <osTimerCreate+0x64>)
 800a596:	f002 fc20 	bl	800cdda <xTimerCreateStatic>
 800a59a:	4603      	mov	r3, r0
 800a59c:	e00e      	b.n	800a5bc <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800a59e:	7afb      	ldrb	r3, [r7, #11]
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d101      	bne.n	800a5a8 <osTimerCreate+0x48>
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	e000      	b.n	800a5aa <osTimerCreate+0x4a>
 800a5a8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	4803      	ldr	r0, [pc, #12]	; (800a5c4 <osTimerCreate+0x64>)
 800a5b6:	f002 fbef 	bl	800cd98 <xTimerCreate>
 800a5ba:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	0800ea04 	.word	0x0800ea04

0800a5c8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b088      	sub	sp, #32
 800a5cc:	af02      	add	r7, sp, #8
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d101      	bne.n	800a5e8 <osTimerStart+0x20>
    ticks = 1;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800a5e8:	f7ff ff2f 	bl	800a44a <inHandlerMode>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d01a      	beq.n	800a628 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800a5f2:	f107 030c 	add.w	r3, r7, #12
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	9200      	str	r2, [sp, #0]
 800a5fa:	693a      	ldr	r2, [r7, #16]
 800a5fc:	2109      	movs	r1, #9
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f002 fc5a 	bl	800ceb8 <xTimerGenericCommand>
 800a604:	4603      	mov	r3, r0
 800a606:	2b01      	cmp	r3, #1
 800a608:	d002      	beq.n	800a610 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800a60a:	23ff      	movs	r3, #255	; 0xff
 800a60c:	617b      	str	r3, [r7, #20]
 800a60e:	e018      	b.n	800a642 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d015      	beq.n	800a642 <osTimerStart+0x7a>
 800a616:	4b0d      	ldr	r3, [pc, #52]	; (800a64c <osTimerStart+0x84>)
 800a618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a61c:	601a      	str	r2, [r3, #0]
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	e00c      	b.n	800a642 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800a628:	2300      	movs	r3, #0
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	2300      	movs	r3, #0
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	2104      	movs	r1, #4
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f002 fc40 	bl	800ceb8 <xTimerGenericCommand>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d001      	beq.n	800a642 <osTimerStart+0x7a>
      result = osErrorOS;
 800a63e:	23ff      	movs	r3, #255	; 0xff
 800a640:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800a642:	697b      	ldr	r3, [r7, #20]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3718      	adds	r7, #24
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	e000ed04 	.word	0xe000ed04

0800a650 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af02      	add	r7, sp, #8
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a65a:	2300      	movs	r3, #0
 800a65c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800a662:	f7ff fef2 	bl	800a44a <inHandlerMode>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d01c      	beq.n	800a6a6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	f107 0208 	add.w	r2, r7, #8
 800a672:	f107 030c 	add.w	r3, r7, #12
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	4613      	mov	r3, r2
 800a67a:	2201      	movs	r2, #1
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f002 fa0d 	bl	800ca9c <xTaskGenericNotifyFromISR>
 800a682:	4603      	mov	r3, r0
 800a684:	2b01      	cmp	r3, #1
 800a686:	d002      	beq.n	800a68e <osSignalSet+0x3e>
      return 0x80000000;
 800a688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a68c:	e019      	b.n	800a6c2 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d015      	beq.n	800a6c0 <osSignalSet+0x70>
 800a694:	4b0d      	ldr	r3, [pc, #52]	; (800a6cc <osSignalSet+0x7c>)
 800a696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	f3bf 8f6f 	isb	sy
 800a6a4:	e00c      	b.n	800a6c0 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	f107 0308 	add.w	r3, r7, #8
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f002 f94a 	bl	800c948 <xTaskGenericNotify>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d002      	beq.n	800a6c0 <osSignalSet+0x70>
    return 0x80000000;
 800a6ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6be:	e000      	b.n	800a6c2 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800a6c0:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	e000ed04 	.word	0xe000ed04

0800a6d0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800a6d0:	b590      	push	{r4, r7, lr}
 800a6d2:	b089      	sub	sp, #36	; 0x24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800a6dc:	2300      	movs	r3, #0
 800a6de:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ea:	d103      	bne.n	800a6f4 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800a6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f0:	61fb      	str	r3, [r7, #28]
 800a6f2:	e009      	b.n	800a708 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d006      	beq.n	800a708 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d101      	bne.n	800a708 <osSignalWait+0x38>
      ticks = 1;
 800a704:	2301      	movs	r3, #1
 800a706:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800a708:	f7ff fe9f 	bl	800a44a <inHandlerMode>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d002      	beq.n	800a718 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800a712:	2382      	movs	r3, #130	; 0x82
 800a714:	613b      	str	r3, [r7, #16]
 800a716:	e01b      	b.n	800a750 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800a718:	68b9      	ldr	r1, [r7, #8]
 800a71a:	f107 0310 	add.w	r3, r7, #16
 800a71e:	1d1a      	adds	r2, r3, #4
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	2000      	movs	r0, #0
 800a724:	f002 f8b0 	bl	800c888 <xTaskNotifyWait>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d008      	beq.n	800a740 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d102      	bne.n	800a73a <osSignalWait+0x6a>
 800a734:	2300      	movs	r3, #0
 800a736:	613b      	str	r3, [r7, #16]
 800a738:	e00a      	b.n	800a750 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800a73a:	2340      	movs	r3, #64	; 0x40
 800a73c:	613b      	str	r3, [r7, #16]
 800a73e:	e007      	b.n	800a750 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	2b00      	cmp	r3, #0
 800a744:	da02      	bge.n	800a74c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800a746:	2386      	movs	r3, #134	; 0x86
 800a748:	613b      	str	r3, [r7, #16]
 800a74a:	e001      	b.n	800a750 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800a74c:	2308      	movs	r3, #8
 800a74e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	461c      	mov	r4, r3
 800a754:	f107 0310 	add.w	r3, r7, #16
 800a758:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a75c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	3724      	adds	r7, #36	; 0x24
 800a764:	46bd      	mov	sp, r7
 800a766:	bd90      	pop	{r4, r7, pc}

0800a768 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af02      	add	r7, sp, #8
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00f      	beq.n	800a79a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d10a      	bne.n	800a796 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	2203      	movs	r2, #3
 800a786:	9200      	str	r2, [sp, #0]
 800a788:	2200      	movs	r2, #0
 800a78a:	2100      	movs	r1, #0
 800a78c:	2001      	movs	r0, #1
 800a78e:	f000 fa55 	bl	800ac3c <xQueueGenericCreateStatic>
 800a792:	4603      	mov	r3, r0
 800a794:	e016      	b.n	800a7c4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a796:	2300      	movs	r3, #0
 800a798:	e014      	b.n	800a7c4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d110      	bne.n	800a7c2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a7a0:	2203      	movs	r2, #3
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	2001      	movs	r0, #1
 800a7a6:	f000 fac0 	bl	800ad2a <xQueueGenericCreate>
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d005      	beq.n	800a7be <osSemaphoreCreate+0x56>
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f000 fb13 	bl	800ade4 <xQueueGenericSend>
      return sema;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	e000      	b.n	800a7c4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a7c2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a7cc:	b590      	push	{r4, r7, lr}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af02      	add	r7, sp, #8
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d011      	beq.n	800a802 <osMessageCreate+0x36>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00d      	beq.n	800a802 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6818      	ldr	r0, [r3, #0]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6859      	ldr	r1, [r3, #4]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	689a      	ldr	r2, [r3, #8]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	2400      	movs	r4, #0
 800a7f8:	9400      	str	r4, [sp, #0]
 800a7fa:	f000 fa1f 	bl	800ac3c <xQueueGenericCreateStatic>
 800a7fe:	4603      	mov	r3, r0
 800a800:	e008      	b.n	800a814 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6818      	ldr	r0, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	4619      	mov	r1, r3
 800a80e:	f000 fa8c 	bl	800ad2a <xQueueGenericCreate>
 800a812:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a814:	4618      	mov	r0, r3
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd90      	pop	{r4, r7, pc}

0800a81c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a828:	2300      	movs	r3, #0
 800a82a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d101      	bne.n	800a83a <osMessagePut+0x1e>
    ticks = 1;
 800a836:	2301      	movs	r3, #1
 800a838:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a83a:	f7ff fe06 	bl	800a44a <inHandlerMode>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d018      	beq.n	800a876 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a844:	f107 0210 	add.w	r2, r7, #16
 800a848:	f107 0108 	add.w	r1, r7, #8
 800a84c:	2300      	movs	r3, #0
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 fbc6 	bl	800afe0 <xQueueGenericSendFromISR>
 800a854:	4603      	mov	r3, r0
 800a856:	2b01      	cmp	r3, #1
 800a858:	d001      	beq.n	800a85e <osMessagePut+0x42>
      return osErrorOS;
 800a85a:	23ff      	movs	r3, #255	; 0xff
 800a85c:	e018      	b.n	800a890 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d014      	beq.n	800a88e <osMessagePut+0x72>
 800a864:	4b0c      	ldr	r3, [pc, #48]	; (800a898 <osMessagePut+0x7c>)
 800a866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	e00b      	b.n	800a88e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a876:	f107 0108 	add.w	r1, r7, #8
 800a87a:	2300      	movs	r3, #0
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f000 fab0 	bl	800ade4 <xQueueGenericSend>
 800a884:	4603      	mov	r3, r0
 800a886:	2b01      	cmp	r3, #1
 800a888:	d001      	beq.n	800a88e <osMessagePut+0x72>
      return osErrorOS;
 800a88a:	23ff      	movs	r3, #255	; 0xff
 800a88c:	e000      	b.n	800a890 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3718      	adds	r7, #24
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	e000ed04 	.word	0xe000ed04

0800a89c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a89c:	b590      	push	{r4, r7, lr}
 800a89e:	b08b      	sub	sp, #44	; 0x2c
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10a      	bne.n	800a8cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a8b6:	2380      	movs	r3, #128	; 0x80
 800a8b8:	617b      	str	r3, [r7, #20]
    return event;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	461c      	mov	r4, r3
 800a8be:	f107 0314 	add.w	r3, r7, #20
 800a8c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a8c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a8ca:	e054      	b.n	800a976 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8da:	d103      	bne.n	800a8e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a8e2:	e009      	b.n	800a8f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d006      	beq.n	800a8f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <osMessageGet+0x5c>
      ticks = 1;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a8f8:	f7ff fda7 	bl	800a44a <inHandlerMode>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d01c      	beq.n	800a93c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a902:	f107 0220 	add.w	r2, r7, #32
 800a906:	f107 0314 	add.w	r3, r7, #20
 800a90a:	3304      	adds	r3, #4
 800a90c:	4619      	mov	r1, r3
 800a90e:	68b8      	ldr	r0, [r7, #8]
 800a910:	f000 fcde 	bl	800b2d0 <xQueueReceiveFromISR>
 800a914:	4603      	mov	r3, r0
 800a916:	2b01      	cmp	r3, #1
 800a918:	d102      	bne.n	800a920 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a91a:	2310      	movs	r3, #16
 800a91c:	617b      	str	r3, [r7, #20]
 800a91e:	e001      	b.n	800a924 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a920:	2300      	movs	r3, #0
 800a922:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d01d      	beq.n	800a966 <osMessageGet+0xca>
 800a92a:	4b15      	ldr	r3, [pc, #84]	; (800a980 <osMessageGet+0xe4>)
 800a92c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a930:	601a      	str	r2, [r3, #0]
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	e014      	b.n	800a966 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a93c:	f107 0314 	add.w	r3, r7, #20
 800a940:	3304      	adds	r3, #4
 800a942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a944:	4619      	mov	r1, r3
 800a946:	68b8      	ldr	r0, [r7, #8]
 800a948:	f000 fbe2 	bl	800b110 <xQueueReceive>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d102      	bne.n	800a958 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a952:	2310      	movs	r3, #16
 800a954:	617b      	str	r3, [r7, #20]
 800a956:	e006      	b.n	800a966 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d101      	bne.n	800a962 <osMessageGet+0xc6>
 800a95e:	2300      	movs	r3, #0
 800a960:	e000      	b.n	800a964 <osMessageGet+0xc8>
 800a962:	2340      	movs	r3, #64	; 0x40
 800a964:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	461c      	mov	r4, r3
 800a96a:	f107 0314 	add.w	r3, r7, #20
 800a96e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	372c      	adds	r7, #44	; 0x2c
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd90      	pop	{r4, r7, pc}
 800a97e:	bf00      	nop
 800a980:	e000ed04 	.word	0xe000ed04

0800a984 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f001 f8df 	bl	800bb50 <vTaskSuspend>
  
  return osOK;
 800a992:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800a994:	4618      	mov	r0, r3
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 800a9a4:	f7ff fd51 	bl	800a44a <inHandlerMode>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00e      	beq.n	800a9cc <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f001 f9f8 	bl	800bda4 <xTaskResumeFromISR>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d10b      	bne.n	800a9d2 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800a9ba:	4b08      	ldr	r3, [pc, #32]	; (800a9dc <osThreadResume+0x40>)
 800a9bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9c0:	601a      	str	r2, [r3, #0]
 800a9c2:	f3bf 8f4f 	dsb	sy
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	e002      	b.n	800a9d2 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f001 f98b 	bl	800bce8 <vTaskResume>
  }
  return osOK;
 800a9d2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3708      	adds	r7, #8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	e000ed04 	.word	0xe000ed04

0800a9e0 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <osDelayUntil+0x18>
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	e000      	b.n	800a9fa <osDelayUntil+0x1a>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fff5 	bl	800b9ec <vTaskDelayUntil>
  
  return osOK;
 800aa02:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f103 0208 	add.w	r2, r3, #8
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f04f 32ff 	mov.w	r2, #4294967295
 800aa24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f103 0208 	add.w	r2, r3, #8
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f103 0208 	add.w	r2, r3, #8
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bc80      	pop	{r7}
 800aa48:	4770      	bx	lr

0800aa4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b083      	sub	sp, #12
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bc80      	pop	{r7}
 800aa60:	4770      	bx	lr

0800aa62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa62:	b480      	push	{r7}
 800aa64:	b085      	sub	sp, #20
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	689a      	ldr	r2, [r3, #8]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	683a      	ldr	r2, [r7, #0]
 800aa8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	1c5a      	adds	r2, r3, #1
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	601a      	str	r2, [r3, #0]
}
 800aa9e:	bf00      	nop
 800aaa0:	3714      	adds	r7, #20
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bc80      	pop	{r7}
 800aaa6:	4770      	bx	lr

0800aaa8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aabe:	d103      	bne.n	800aac8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	60fb      	str	r3, [r7, #12]
 800aac6:	e00c      	b.n	800aae2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	3308      	adds	r3, #8
 800aacc:	60fb      	str	r3, [r7, #12]
 800aace:	e002      	b.n	800aad6 <vListInsert+0x2e>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	60fb      	str	r3, [r7, #12]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d2f6      	bcs.n	800aad0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	1c5a      	adds	r2, r3, #1
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	601a      	str	r2, [r3, #0]
}
 800ab0e:	bf00      	nop
 800ab10:	3714      	adds	r7, #20
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bc80      	pop	{r7}
 800ab16:	4770      	bx	lr

0800ab18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	6892      	ldr	r2, [r2, #8]
 800ab2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	6852      	ldr	r2, [r2, #4]
 800ab38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d103      	bne.n	800ab4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	689a      	ldr	r2, [r3, #8]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	1e5a      	subs	r2, r3, #1
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bc80      	pop	{r7}
 800ab68:	4770      	bx	lr
	...

0800ab6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10a      	bne.n	800ab96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab92:	bf00      	nop
 800ab94:	e7fe      	b.n	800ab94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab96:	f002 fd31 	bl	800d5fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba2:	68f9      	ldr	r1, [r7, #12]
 800aba4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aba6:	fb01 f303 	mul.w	r3, r1, r3
 800abaa:	441a      	add	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc6:	3b01      	subs	r3, #1
 800abc8:	68f9      	ldr	r1, [r7, #12]
 800abca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abcc:	fb01 f303 	mul.w	r3, r1, r3
 800abd0:	441a      	add	r2, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	22ff      	movs	r2, #255	; 0xff
 800abda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	22ff      	movs	r2, #255	; 0xff
 800abe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d114      	bne.n	800ac16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d01a      	beq.n	800ac2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	3310      	adds	r3, #16
 800abf8:	4618      	mov	r0, r3
 800abfa:	f001 fbdd 	bl	800c3b8 <xTaskRemoveFromEventList>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d012      	beq.n	800ac2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac04:	4b0c      	ldr	r3, [pc, #48]	; (800ac38 <xQueueGenericReset+0xcc>)
 800ac06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac0a:	601a      	str	r2, [r3, #0]
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	f3bf 8f6f 	isb	sy
 800ac14:	e009      	b.n	800ac2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	3310      	adds	r3, #16
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7ff fef6 	bl	800aa0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	3324      	adds	r3, #36	; 0x24
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7ff fef1 	bl	800aa0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac2a:	f002 fd17 	bl	800d65c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac2e:	2301      	movs	r3, #1
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3710      	adds	r7, #16
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	e000ed04 	.word	0xe000ed04

0800ac3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b08e      	sub	sp, #56	; 0x38
 800ac40:	af02      	add	r7, sp, #8
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
 800ac48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10a      	bne.n	800ac66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac62:	bf00      	nop
 800ac64:	e7fe      	b.n	800ac64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10a      	bne.n	800ac82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac7e:	bf00      	nop
 800ac80:	e7fe      	b.n	800ac80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d002      	beq.n	800ac8e <xQueueGenericCreateStatic+0x52>
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <xQueueGenericCreateStatic+0x56>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e000      	b.n	800ac94 <xQueueGenericCreateStatic+0x58>
 800ac92:	2300      	movs	r3, #0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10a      	bne.n	800acae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9c:	f383 8811 	msr	BASEPRI, r3
 800aca0:	f3bf 8f6f 	isb	sy
 800aca4:	f3bf 8f4f 	dsb	sy
 800aca8:	623b      	str	r3, [r7, #32]
}
 800acaa:	bf00      	nop
 800acac:	e7fe      	b.n	800acac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d102      	bne.n	800acba <xQueueGenericCreateStatic+0x7e>
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d101      	bne.n	800acbe <xQueueGenericCreateStatic+0x82>
 800acba:	2301      	movs	r3, #1
 800acbc:	e000      	b.n	800acc0 <xQueueGenericCreateStatic+0x84>
 800acbe:	2300      	movs	r3, #0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10a      	bne.n	800acda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	61fb      	str	r3, [r7, #28]
}
 800acd6:	bf00      	nop
 800acd8:	e7fe      	b.n	800acd8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800acda:	2348      	movs	r3, #72	; 0x48
 800acdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	2b48      	cmp	r3, #72	; 0x48
 800ace2:	d00a      	beq.n	800acfa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ace4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	61bb      	str	r3, [r7, #24]
}
 800acf6:	bf00      	nop
 800acf8:	e7fe      	b.n	800acf8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800acfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00d      	beq.n	800ad20 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad0c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ad10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	4613      	mov	r3, r2
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	68b9      	ldr	r1, [r7, #8]
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f000 f843 	bl	800ada6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ad20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3730      	adds	r7, #48	; 0x30
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b08a      	sub	sp, #40	; 0x28
 800ad2e:	af02      	add	r7, sp, #8
 800ad30:	60f8      	str	r0, [r7, #12]
 800ad32:	60b9      	str	r1, [r7, #8]
 800ad34:	4613      	mov	r3, r2
 800ad36:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	613b      	str	r3, [r7, #16]
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d102      	bne.n	800ad60 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	61fb      	str	r3, [r7, #28]
 800ad5e:	e004      	b.n	800ad6a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	68ba      	ldr	r2, [r7, #8]
 800ad64:	fb02 f303 	mul.w	r3, r2, r3
 800ad68:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	3348      	adds	r3, #72	; 0x48
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f002 fd44 	bl	800d7fc <pvPortMalloc>
 800ad74:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00f      	beq.n	800ad9c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	3348      	adds	r3, #72	; 0x48
 800ad80:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad8a:	79fa      	ldrb	r2, [r7, #7]
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	4613      	mov	r3, r2
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	68b9      	ldr	r1, [r7, #8]
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 f805 	bl	800ada6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ad9c:	69bb      	ldr	r3, [r7, #24]
	}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3720      	adds	r7, #32
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b084      	sub	sp, #16
 800adaa:	af00      	add	r7, sp, #0
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	60b9      	str	r1, [r7, #8]
 800adb0:	607a      	str	r2, [r7, #4]
 800adb2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d103      	bne.n	800adc2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	69ba      	ldr	r2, [r7, #24]
 800adbe:	601a      	str	r2, [r3, #0]
 800adc0:	e002      	b.n	800adc8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	68ba      	ldr	r2, [r7, #8]
 800add2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800add4:	2101      	movs	r1, #1
 800add6:	69b8      	ldr	r0, [r7, #24]
 800add8:	f7ff fec8 	bl	800ab6c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800addc:	bf00      	nop
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b08e      	sub	sp, #56	; 0x38
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800adf2:	2300      	movs	r3, #0
 800adf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d10a      	bne.n	800ae16 <xQueueGenericSend+0x32>
	__asm volatile
 800ae00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae04:	f383 8811 	msr	BASEPRI, r3
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	f3bf 8f4f 	dsb	sy
 800ae10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae12:	bf00      	nop
 800ae14:	e7fe      	b.n	800ae14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d103      	bne.n	800ae24 <xQueueGenericSend+0x40>
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <xQueueGenericSend+0x44>
 800ae24:	2301      	movs	r3, #1
 800ae26:	e000      	b.n	800ae2a <xQueueGenericSend+0x46>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10a      	bne.n	800ae44 <xQueueGenericSend+0x60>
	__asm volatile
 800ae2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae40:	bf00      	nop
 800ae42:	e7fe      	b.n	800ae42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d103      	bne.n	800ae52 <xQueueGenericSend+0x6e>
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d101      	bne.n	800ae56 <xQueueGenericSend+0x72>
 800ae52:	2301      	movs	r3, #1
 800ae54:	e000      	b.n	800ae58 <xQueueGenericSend+0x74>
 800ae56:	2300      	movs	r3, #0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d10a      	bne.n	800ae72 <xQueueGenericSend+0x8e>
	__asm volatile
 800ae5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae60:	f383 8811 	msr	BASEPRI, r3
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	623b      	str	r3, [r7, #32]
}
 800ae6e:	bf00      	nop
 800ae70:	e7fe      	b.n	800ae70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae72:	f001 fc65 	bl	800c740 <xTaskGetSchedulerState>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d102      	bne.n	800ae82 <xQueueGenericSend+0x9e>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d101      	bne.n	800ae86 <xQueueGenericSend+0xa2>
 800ae82:	2301      	movs	r3, #1
 800ae84:	e000      	b.n	800ae88 <xQueueGenericSend+0xa4>
 800ae86:	2300      	movs	r3, #0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10a      	bne.n	800aea2 <xQueueGenericSend+0xbe>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	61fb      	str	r3, [r7, #28]
}
 800ae9e:	bf00      	nop
 800aea0:	e7fe      	b.n	800aea0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aea2:	f002 fbab 	bl	800d5fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d302      	bcc.n	800aeb8 <xQueueGenericSend+0xd4>
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d129      	bne.n	800af0c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aeb8:	683a      	ldr	r2, [r7, #0]
 800aeba:	68b9      	ldr	r1, [r7, #8]
 800aebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aebe:	f000 fa87 	bl	800b3d0 <prvCopyDataToQueue>
 800aec2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d010      	beq.n	800aeee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	3324      	adds	r3, #36	; 0x24
 800aed0:	4618      	mov	r0, r3
 800aed2:	f001 fa71 	bl	800c3b8 <xTaskRemoveFromEventList>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d013      	beq.n	800af04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aedc:	4b3f      	ldr	r3, [pc, #252]	; (800afdc <xQueueGenericSend+0x1f8>)
 800aede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	f3bf 8f6f 	isb	sy
 800aeec:	e00a      	b.n	800af04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aeee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d007      	beq.n	800af04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aef4:	4b39      	ldr	r3, [pc, #228]	; (800afdc <xQueueGenericSend+0x1f8>)
 800aef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	f3bf 8f4f 	dsb	sy
 800af00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af04:	f002 fbaa 	bl	800d65c <vPortExitCritical>
				return pdPASS;
 800af08:	2301      	movs	r3, #1
 800af0a:	e063      	b.n	800afd4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d103      	bne.n	800af1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af12:	f002 fba3 	bl	800d65c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af16:	2300      	movs	r3, #0
 800af18:	e05c      	b.n	800afd4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d106      	bne.n	800af2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af20:	f107 0314 	add.w	r3, r7, #20
 800af24:	4618      	mov	r0, r3
 800af26:	f001 faa9 	bl	800c47c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af2a:	2301      	movs	r3, #1
 800af2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af2e:	f002 fb95 	bl	800d65c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af32:	f001 f819 	bl	800bf68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af36:	f002 fb61 	bl	800d5fc <vPortEnterCritical>
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af40:	b25b      	sxtb	r3, r3
 800af42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af46:	d103      	bne.n	800af50 <xQueueGenericSend+0x16c>
 800af48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af56:	b25b      	sxtb	r3, r3
 800af58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af5c:	d103      	bne.n	800af66 <xQueueGenericSend+0x182>
 800af5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af60:	2200      	movs	r2, #0
 800af62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af66:	f002 fb79 	bl	800d65c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af6a:	1d3a      	adds	r2, r7, #4
 800af6c:	f107 0314 	add.w	r3, r7, #20
 800af70:	4611      	mov	r1, r2
 800af72:	4618      	mov	r0, r3
 800af74:	f001 fa98 	bl	800c4a8 <xTaskCheckForTimeOut>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d124      	bne.n	800afc8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af80:	f000 fb1e 	bl	800b5c0 <prvIsQueueFull>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d018      	beq.n	800afbc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8c:	3310      	adds	r3, #16
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	4611      	mov	r1, r2
 800af92:	4618      	mov	r0, r3
 800af94:	f001 f9c0 	bl	800c318 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af9a:	f000 faa9 	bl	800b4f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af9e:	f000 fff1 	bl	800bf84 <xTaskResumeAll>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f47f af7c 	bne.w	800aea2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800afaa:	4b0c      	ldr	r3, [pc, #48]	; (800afdc <xQueueGenericSend+0x1f8>)
 800afac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	e772      	b.n	800aea2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800afbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afbe:	f000 fa97 	bl	800b4f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afc2:	f000 ffdf 	bl	800bf84 <xTaskResumeAll>
 800afc6:	e76c      	b.n	800aea2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800afc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afca:	f000 fa91 	bl	800b4f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afce:	f000 ffd9 	bl	800bf84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800afd2:	2300      	movs	r3, #0
		}
	}
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3738      	adds	r7, #56	; 0x38
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	e000ed04 	.word	0xe000ed04

0800afe0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b08e      	sub	sp, #56	; 0x38
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]
 800afec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10a      	bne.n	800b00e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affc:	f383 8811 	msr	BASEPRI, r3
 800b000:	f3bf 8f6f 	isb	sy
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b00a:	bf00      	nop
 800b00c:	e7fe      	b.n	800b00c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d103      	bne.n	800b01c <xQueueGenericSendFromISR+0x3c>
 800b014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <xQueueGenericSendFromISR+0x40>
 800b01c:	2301      	movs	r3, #1
 800b01e:	e000      	b.n	800b022 <xQueueGenericSendFromISR+0x42>
 800b020:	2300      	movs	r3, #0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d10a      	bne.n	800b03c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02a:	f383 8811 	msr	BASEPRI, r3
 800b02e:	f3bf 8f6f 	isb	sy
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	623b      	str	r3, [r7, #32]
}
 800b038:	bf00      	nop
 800b03a:	e7fe      	b.n	800b03a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d103      	bne.n	800b04a <xQueueGenericSendFromISR+0x6a>
 800b042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b046:	2b01      	cmp	r3, #1
 800b048:	d101      	bne.n	800b04e <xQueueGenericSendFromISR+0x6e>
 800b04a:	2301      	movs	r3, #1
 800b04c:	e000      	b.n	800b050 <xQueueGenericSendFromISR+0x70>
 800b04e:	2300      	movs	r3, #0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10a      	bne.n	800b06a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b058:	f383 8811 	msr	BASEPRI, r3
 800b05c:	f3bf 8f6f 	isb	sy
 800b060:	f3bf 8f4f 	dsb	sy
 800b064:	61fb      	str	r3, [r7, #28]
}
 800b066:	bf00      	nop
 800b068:	e7fe      	b.n	800b068 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b06a:	f002 fb89 	bl	800d780 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b06e:	f3ef 8211 	mrs	r2, BASEPRI
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	61ba      	str	r2, [r7, #24]
 800b084:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b086:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b088:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b092:	429a      	cmp	r2, r3
 800b094:	d302      	bcc.n	800b09c <xQueueGenericSendFromISR+0xbc>
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d12c      	bne.n	800b0f6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0a6:	683a      	ldr	r2, [r7, #0]
 800b0a8:	68b9      	ldr	r1, [r7, #8]
 800b0aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0ac:	f000 f990 	bl	800b3d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b8:	d112      	bne.n	800b0e0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d016      	beq.n	800b0f0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c4:	3324      	adds	r3, #36	; 0x24
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f001 f976 	bl	800c3b8 <xTaskRemoveFromEventList>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00e      	beq.n	800b0f0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d00b      	beq.n	800b0f0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	601a      	str	r2, [r3, #0]
 800b0de:	e007      	b.n	800b0f0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	b25a      	sxtb	r2, r3
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b0f4:	e001      	b.n	800b0fa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	637b      	str	r3, [r7, #52]	; 0x34
 800b0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b104:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3738      	adds	r7, #56	; 0x38
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b08c      	sub	sp, #48	; 0x30
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b11c:	2300      	movs	r3, #0
 800b11e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	2b00      	cmp	r3, #0
 800b128:	d10a      	bne.n	800b140 <xQueueReceive+0x30>
	__asm volatile
 800b12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	623b      	str	r3, [r7, #32]
}
 800b13c:	bf00      	nop
 800b13e:	e7fe      	b.n	800b13e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d103      	bne.n	800b14e <xQueueReceive+0x3e>
 800b146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <xQueueReceive+0x42>
 800b14e:	2301      	movs	r3, #1
 800b150:	e000      	b.n	800b154 <xQueueReceive+0x44>
 800b152:	2300      	movs	r3, #0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d10a      	bne.n	800b16e <xQueueReceive+0x5e>
	__asm volatile
 800b158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15c:	f383 8811 	msr	BASEPRI, r3
 800b160:	f3bf 8f6f 	isb	sy
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	61fb      	str	r3, [r7, #28]
}
 800b16a:	bf00      	nop
 800b16c:	e7fe      	b.n	800b16c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b16e:	f001 fae7 	bl	800c740 <xTaskGetSchedulerState>
 800b172:	4603      	mov	r3, r0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d102      	bne.n	800b17e <xQueueReceive+0x6e>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d101      	bne.n	800b182 <xQueueReceive+0x72>
 800b17e:	2301      	movs	r3, #1
 800b180:	e000      	b.n	800b184 <xQueueReceive+0x74>
 800b182:	2300      	movs	r3, #0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d10a      	bne.n	800b19e <xQueueReceive+0x8e>
	__asm volatile
 800b188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18c:	f383 8811 	msr	BASEPRI, r3
 800b190:	f3bf 8f6f 	isb	sy
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	61bb      	str	r3, [r7, #24]
}
 800b19a:	bf00      	nop
 800b19c:	e7fe      	b.n	800b19c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b19e:	f002 fa2d 	bl	800d5fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d01f      	beq.n	800b1ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1b2:	f000 f977 	bl	800b4a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	1e5a      	subs	r2, r3, #1
 800b1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00f      	beq.n	800b1e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c8:	3310      	adds	r3, #16
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f001 f8f4 	bl	800c3b8 <xTaskRemoveFromEventList>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d007      	beq.n	800b1e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b1d6:	4b3d      	ldr	r3, [pc, #244]	; (800b2cc <xQueueReceive+0x1bc>)
 800b1d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1dc:	601a      	str	r2, [r3, #0]
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b1e6:	f002 fa39 	bl	800d65c <vPortExitCritical>
				return pdPASS;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e069      	b.n	800b2c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d103      	bne.n	800b1fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1f4:	f002 fa32 	bl	800d65c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	e062      	b.n	800b2c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d106      	bne.n	800b210 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b202:	f107 0310 	add.w	r3, r7, #16
 800b206:	4618      	mov	r0, r3
 800b208:	f001 f938 	bl	800c47c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b20c:	2301      	movs	r3, #1
 800b20e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b210:	f002 fa24 	bl	800d65c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b214:	f000 fea8 	bl	800bf68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b218:	f002 f9f0 	bl	800d5fc <vPortEnterCritical>
 800b21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b222:	b25b      	sxtb	r3, r3
 800b224:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b228:	d103      	bne.n	800b232 <xQueueReceive+0x122>
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b238:	b25b      	sxtb	r3, r3
 800b23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23e:	d103      	bne.n	800b248 <xQueueReceive+0x138>
 800b240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b242:	2200      	movs	r2, #0
 800b244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b248:	f002 fa08 	bl	800d65c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b24c:	1d3a      	adds	r2, r7, #4
 800b24e:	f107 0310 	add.w	r3, r7, #16
 800b252:	4611      	mov	r1, r2
 800b254:	4618      	mov	r0, r3
 800b256:	f001 f927 	bl	800c4a8 <xTaskCheckForTimeOut>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d123      	bne.n	800b2a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b262:	f000 f997 	bl	800b594 <prvIsQueueEmpty>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d017      	beq.n	800b29c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26e:	3324      	adds	r3, #36	; 0x24
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	4611      	mov	r1, r2
 800b274:	4618      	mov	r0, r3
 800b276:	f001 f84f 	bl	800c318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b27a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b27c:	f000 f938 	bl	800b4f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b280:	f000 fe80 	bl	800bf84 <xTaskResumeAll>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d189      	bne.n	800b19e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b28a:	4b10      	ldr	r3, [pc, #64]	; (800b2cc <xQueueReceive+0x1bc>)
 800b28c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	e780      	b.n	800b19e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b29c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b29e:	f000 f927 	bl	800b4f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2a2:	f000 fe6f 	bl	800bf84 <xTaskResumeAll>
 800b2a6:	e77a      	b.n	800b19e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b2a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2aa:	f000 f921 	bl	800b4f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2ae:	f000 fe69 	bl	800bf84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2b4:	f000 f96e 	bl	800b594 <prvIsQueueEmpty>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f43f af6f 	beq.w	800b19e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3730      	adds	r7, #48	; 0x30
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	e000ed04 	.word	0xe000ed04

0800b2d0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b08e      	sub	sp, #56	; 0x38
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10a      	bne.n	800b2fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ea:	f383 8811 	msr	BASEPRI, r3
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	623b      	str	r3, [r7, #32]
}
 800b2f8:	bf00      	nop
 800b2fa:	e7fe      	b.n	800b2fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d103      	bne.n	800b30a <xQueueReceiveFromISR+0x3a>
 800b302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b306:	2b00      	cmp	r3, #0
 800b308:	d101      	bne.n	800b30e <xQueueReceiveFromISR+0x3e>
 800b30a:	2301      	movs	r3, #1
 800b30c:	e000      	b.n	800b310 <xQueueReceiveFromISR+0x40>
 800b30e:	2300      	movs	r3, #0
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	61fb      	str	r3, [r7, #28]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b32a:	f002 fa29 	bl	800d780 <vPortValidateInterruptPriority>
	__asm volatile
 800b32e:	f3ef 8211 	mrs	r2, BASEPRI
 800b332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	61ba      	str	r2, [r7, #24]
 800b344:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b346:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b348:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b352:	2b00      	cmp	r3, #0
 800b354:	d02f      	beq.n	800b3b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b35c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b360:	68b9      	ldr	r1, [r7, #8]
 800b362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b364:	f000 f89e 	bl	800b4a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36a:	1e5a      	subs	r2, r3, #1
 800b36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b370:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b378:	d112      	bne.n	800b3a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d016      	beq.n	800b3b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b384:	3310      	adds	r3, #16
 800b386:	4618      	mov	r0, r3
 800b388:	f001 f816 	bl	800c3b8 <xTaskRemoveFromEventList>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00e      	beq.n	800b3b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00b      	beq.n	800b3b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	e007      	b.n	800b3b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	b25a      	sxtb	r2, r3
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b3b4:	e001      	b.n	800b3ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	f383 8811 	msr	BASEPRI, r3
}
 800b3c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3738      	adds	r7, #56	; 0x38
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b086      	sub	sp, #24
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10d      	bne.n	800b40a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d14d      	bne.n	800b492 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f001 f9be 	bl	800c77c <xTaskPriorityDisinherit>
 800b400:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	605a      	str	r2, [r3, #4]
 800b408:	e043      	b.n	800b492 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d119      	bne.n	800b444 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6898      	ldr	r0, [r3, #8]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b418:	461a      	mov	r2, r3
 800b41a:	68b9      	ldr	r1, [r7, #8]
 800b41c:	f002 fd86 	bl	800df2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	689a      	ldr	r2, [r3, #8]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b428:	441a      	add	r2, r3
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	689a      	ldr	r2, [r3, #8]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	429a      	cmp	r2, r3
 800b438:	d32b      	bcc.n	800b492 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	609a      	str	r2, [r3, #8]
 800b442:	e026      	b.n	800b492 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	68d8      	ldr	r0, [r3, #12]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44c:	461a      	mov	r2, r3
 800b44e:	68b9      	ldr	r1, [r7, #8]
 800b450:	f002 fd6c 	bl	800df2c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	68da      	ldr	r2, [r3, #12]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b45c:	425b      	negs	r3, r3
 800b45e:	441a      	add	r2, r3
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	68da      	ldr	r2, [r3, #12]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d207      	bcs.n	800b480 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	685a      	ldr	r2, [r3, #4]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b478:	425b      	negs	r3, r3
 800b47a:	441a      	add	r2, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2b02      	cmp	r3, #2
 800b484:	d105      	bne.n	800b492 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	3b01      	subs	r3, #1
 800b490:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	1c5a      	adds	r2, r3, #1
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b49a:	697b      	ldr	r3, [r7, #20]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3718      	adds	r7, #24
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d018      	beq.n	800b4e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	68da      	ldr	r2, [r3, #12]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4be:	441a      	add	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	68da      	ldr	r2, [r3, #12]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d303      	bcc.n	800b4d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68d9      	ldr	r1, [r3, #12]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	6838      	ldr	r0, [r7, #0]
 800b4e4:	f002 fd22 	bl	800df2c <memcpy>
	}
}
 800b4e8:	bf00      	nop
 800b4ea:	3708      	adds	r7, #8
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b4f8:	f002 f880 	bl	800d5fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b502:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b504:	e011      	b.n	800b52a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d012      	beq.n	800b534 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	3324      	adds	r3, #36	; 0x24
 800b512:	4618      	mov	r0, r3
 800b514:	f000 ff50 	bl	800c3b8 <xTaskRemoveFromEventList>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d001      	beq.n	800b522 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b51e:	f001 f825 	bl	800c56c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b522:	7bfb      	ldrb	r3, [r7, #15]
 800b524:	3b01      	subs	r3, #1
 800b526:	b2db      	uxtb	r3, r3
 800b528:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b52a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	dce9      	bgt.n	800b506 <prvUnlockQueue+0x16>
 800b532:	e000      	b.n	800b536 <prvUnlockQueue+0x46>
					break;
 800b534:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	22ff      	movs	r2, #255	; 0xff
 800b53a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b53e:	f002 f88d 	bl	800d65c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b542:	f002 f85b 	bl	800d5fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b54c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b54e:	e011      	b.n	800b574 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d012      	beq.n	800b57e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	3310      	adds	r3, #16
 800b55c:	4618      	mov	r0, r3
 800b55e:	f000 ff2b 	bl	800c3b8 <xTaskRemoveFromEventList>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d001      	beq.n	800b56c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b568:	f001 f800 	bl	800c56c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b56c:	7bbb      	ldrb	r3, [r7, #14]
 800b56e:	3b01      	subs	r3, #1
 800b570:	b2db      	uxtb	r3, r3
 800b572:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	dce9      	bgt.n	800b550 <prvUnlockQueue+0x60>
 800b57c:	e000      	b.n	800b580 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b57e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	22ff      	movs	r2, #255	; 0xff
 800b584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b588:	f002 f868 	bl	800d65c <vPortExitCritical>
}
 800b58c:	bf00      	nop
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b59c:	f002 f82e 	bl	800d5fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d102      	bne.n	800b5ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	60fb      	str	r3, [r7, #12]
 800b5ac:	e001      	b.n	800b5b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b5b2:	f002 f853 	bl	800d65c <vPortExitCritical>

	return xReturn;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b5c8:	f002 f818 	bl	800d5fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d102      	bne.n	800b5de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	60fb      	str	r3, [r7, #12]
 800b5dc:	e001      	b.n	800b5e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b5e2:	f002 f83b 	bl	800d65c <vPortExitCritical>

	return xReturn;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	e014      	b.n	800b62a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b600:	4a0e      	ldr	r2, [pc, #56]	; (800b63c <vQueueAddToRegistry+0x4c>)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10b      	bne.n	800b624 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b60c:	490b      	ldr	r1, [pc, #44]	; (800b63c <vQueueAddToRegistry+0x4c>)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	683a      	ldr	r2, [r7, #0]
 800b612:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b616:	4a09      	ldr	r2, [pc, #36]	; (800b63c <vQueueAddToRegistry+0x4c>)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	00db      	lsls	r3, r3, #3
 800b61c:	4413      	add	r3, r2
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b622:	e006      	b.n	800b632 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	3301      	adds	r3, #1
 800b628:	60fb      	str	r3, [r7, #12]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2b07      	cmp	r3, #7
 800b62e:	d9e7      	bls.n	800b600 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b630:	bf00      	nop
 800b632:	bf00      	nop
 800b634:	3714      	adds	r7, #20
 800b636:	46bd      	mov	sp, r7
 800b638:	bc80      	pop	{r7}
 800b63a:	4770      	bx	lr
 800b63c:	20001748 	.word	0x20001748

0800b640 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b650:	f001 ffd4 	bl	800d5fc <vPortEnterCritical>
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b65a:	b25b      	sxtb	r3, r3
 800b65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b660:	d103      	bne.n	800b66a <vQueueWaitForMessageRestricted+0x2a>
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2200      	movs	r2, #0
 800b666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b670:	b25b      	sxtb	r3, r3
 800b672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b676:	d103      	bne.n	800b680 <vQueueWaitForMessageRestricted+0x40>
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b680:	f001 ffec 	bl	800d65c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d106      	bne.n	800b69a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	3324      	adds	r3, #36	; 0x24
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	68b9      	ldr	r1, [r7, #8]
 800b694:	4618      	mov	r0, r3
 800b696:	f000 fe63 	bl	800c360 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b69a:	6978      	ldr	r0, [r7, #20]
 800b69c:	f7ff ff28 	bl	800b4f0 <prvUnlockQueue>
	}
 800b6a0:	bf00      	nop
 800b6a2:	3718      	adds	r7, #24
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b08e      	sub	sp, #56	; 0x38
 800b6ac:	af04      	add	r7, sp, #16
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
 800b6b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10a      	bne.n	800b6d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	623b      	str	r3, [r7, #32]
}
 800b6ce:	bf00      	nop
 800b6d0:	e7fe      	b.n	800b6d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d10a      	bne.n	800b6ee <xTaskCreateStatic+0x46>
	__asm volatile
 800b6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6dc:	f383 8811 	msr	BASEPRI, r3
 800b6e0:	f3bf 8f6f 	isb	sy
 800b6e4:	f3bf 8f4f 	dsb	sy
 800b6e8:	61fb      	str	r3, [r7, #28]
}
 800b6ea:	bf00      	nop
 800b6ec:	e7fe      	b.n	800b6ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b6ee:	23a0      	movs	r3, #160	; 0xa0
 800b6f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	2ba0      	cmp	r3, #160	; 0xa0
 800b6f6:	d00a      	beq.n	800b70e <xTaskCreateStatic+0x66>
	__asm volatile
 800b6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fc:	f383 8811 	msr	BASEPRI, r3
 800b700:	f3bf 8f6f 	isb	sy
 800b704:	f3bf 8f4f 	dsb	sy
 800b708:	61bb      	str	r3, [r7, #24]
}
 800b70a:	bf00      	nop
 800b70c:	e7fe      	b.n	800b70c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b710:	2b00      	cmp	r3, #0
 800b712:	d01e      	beq.n	800b752 <xTaskCreateStatic+0xaa>
 800b714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b716:	2b00      	cmp	r3, #0
 800b718:	d01b      	beq.n	800b752 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b722:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	2202      	movs	r2, #2
 800b728:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b72c:	2300      	movs	r3, #0
 800b72e:	9303      	str	r3, [sp, #12]
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	9302      	str	r3, [sp, #8]
 800b734:	f107 0314 	add.w	r3, r7, #20
 800b738:	9301      	str	r3, [sp, #4]
 800b73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	68b9      	ldr	r1, [r7, #8]
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f000 f851 	bl	800b7ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b74a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b74c:	f000 f8e4 	bl	800b918 <prvAddNewTaskToReadyList>
 800b750:	e001      	b.n	800b756 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b752:	2300      	movs	r3, #0
 800b754:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b756:	697b      	ldr	r3, [r7, #20]
	}
 800b758:	4618      	mov	r0, r3
 800b75a:	3728      	adds	r7, #40	; 0x28
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b760:	b580      	push	{r7, lr}
 800b762:	b08c      	sub	sp, #48	; 0x30
 800b764:	af04      	add	r7, sp, #16
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	603b      	str	r3, [r7, #0]
 800b76c:	4613      	mov	r3, r2
 800b76e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b770:	88fb      	ldrh	r3, [r7, #6]
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	4618      	mov	r0, r3
 800b776:	f002 f841 	bl	800d7fc <pvPortMalloc>
 800b77a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00e      	beq.n	800b7a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b782:	20a0      	movs	r0, #160	; 0xa0
 800b784:	f002 f83a 	bl	800d7fc <pvPortMalloc>
 800b788:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d003      	beq.n	800b798 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	631a      	str	r2, [r3, #48]	; 0x30
 800b796:	e005      	b.n	800b7a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b798:	6978      	ldr	r0, [r7, #20]
 800b79a:	f002 f8f3 	bl	800d984 <vPortFree>
 800b79e:	e001      	b.n	800b7a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d017      	beq.n	800b7da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b7b2:	88fa      	ldrh	r2, [r7, #6]
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	9303      	str	r3, [sp, #12]
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	9302      	str	r3, [sp, #8]
 800b7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7be:	9301      	str	r3, [sp, #4]
 800b7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	68b9      	ldr	r1, [r7, #8]
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f000 f80f 	bl	800b7ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7ce:	69f8      	ldr	r0, [r7, #28]
 800b7d0:	f000 f8a2 	bl	800b918 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	61bb      	str	r3, [r7, #24]
 800b7d8:	e002      	b.n	800b7e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b7da:	f04f 33ff 	mov.w	r3, #4294967295
 800b7de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b7e0:	69bb      	ldr	r3, [r7, #24]
	}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3720      	adds	r7, #32
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
	...

0800b7ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b088      	sub	sp, #32
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
 800b7f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b804:	3b01      	subs	r3, #1
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	4413      	add	r3, r2
 800b80a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	f023 0307 	bic.w	r3, r3, #7
 800b812:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	f003 0307 	and.w	r3, r3, #7
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00a      	beq.n	800b834 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	617b      	str	r3, [r7, #20]
}
 800b830:	bf00      	nop
 800b832:	e7fe      	b.n	800b832 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b834:	2300      	movs	r3, #0
 800b836:	61fb      	str	r3, [r7, #28]
 800b838:	e012      	b.n	800b860 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b83a:	68ba      	ldr	r2, [r7, #8]
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	4413      	add	r3, r2
 800b840:	7819      	ldrb	r1, [r3, #0]
 800b842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	4413      	add	r3, r2
 800b848:	3334      	adds	r3, #52	; 0x34
 800b84a:	460a      	mov	r2, r1
 800b84c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	4413      	add	r3, r2
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d006      	beq.n	800b868 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	3301      	adds	r3, #1
 800b85e:	61fb      	str	r3, [r7, #28]
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	2b0f      	cmp	r3, #15
 800b864:	d9e9      	bls.n	800b83a <prvInitialiseNewTask+0x4e>
 800b866:	e000      	b.n	800b86a <prvInitialiseNewTask+0x7e>
		{
			break;
 800b868:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86c:	2200      	movs	r2, #0
 800b86e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b874:	2b06      	cmp	r3, #6
 800b876:	d901      	bls.n	800b87c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b878:	2306      	movs	r3, #6
 800b87a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b880:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b886:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88a:	2200      	movs	r2, #0
 800b88c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	3304      	adds	r3, #4
 800b892:	4618      	mov	r0, r3
 800b894:	f7ff f8d9 	bl	800aa4a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89a:	3318      	adds	r3, #24
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7ff f8d4 	bl	800aa4a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8aa:	f1c3 0207 	rsb	r2, r3, #7
 800b8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ca:	334c      	adds	r3, #76	; 0x4c
 800b8cc:	224c      	movs	r2, #76	; 0x4c
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f002 fa73 	bl	800ddbc <memset>
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	4a0c      	ldr	r2, [pc, #48]	; (800b90c <prvInitialiseNewTask+0x120>)
 800b8da:	651a      	str	r2, [r3, #80]	; 0x50
 800b8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8de:	4a0c      	ldr	r2, [pc, #48]	; (800b910 <prvInitialiseNewTask+0x124>)
 800b8e0:	655a      	str	r2, [r3, #84]	; 0x54
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	4a0b      	ldr	r2, [pc, #44]	; (800b914 <prvInitialiseNewTask+0x128>)
 800b8e6:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b8e8:	683a      	ldr	r2, [r7, #0]
 800b8ea:	68f9      	ldr	r1, [r7, #12]
 800b8ec:	69b8      	ldr	r0, [r7, #24]
 800b8ee:	f001 fd93 	bl	800d418 <pxPortInitialiseStack>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b902:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b904:	bf00      	nop
 800b906:	3720      	adds	r7, #32
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	20002dd8 	.word	0x20002dd8
 800b910:	20002e40 	.word	0x20002e40
 800b914:	20002ea8 	.word	0x20002ea8

0800b918 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b920:	f001 fe6c 	bl	800d5fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b924:	4b2a      	ldr	r3, [pc, #168]	; (800b9d0 <prvAddNewTaskToReadyList+0xb8>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	3301      	adds	r3, #1
 800b92a:	4a29      	ldr	r2, [pc, #164]	; (800b9d0 <prvAddNewTaskToReadyList+0xb8>)
 800b92c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b92e:	4b29      	ldr	r3, [pc, #164]	; (800b9d4 <prvAddNewTaskToReadyList+0xbc>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d109      	bne.n	800b94a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b936:	4a27      	ldr	r2, [pc, #156]	; (800b9d4 <prvAddNewTaskToReadyList+0xbc>)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b93c:	4b24      	ldr	r3, [pc, #144]	; (800b9d0 <prvAddNewTaskToReadyList+0xb8>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b01      	cmp	r3, #1
 800b942:	d110      	bne.n	800b966 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b944:	f000 fe36 	bl	800c5b4 <prvInitialiseTaskLists>
 800b948:	e00d      	b.n	800b966 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b94a:	4b23      	ldr	r3, [pc, #140]	; (800b9d8 <prvAddNewTaskToReadyList+0xc0>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d109      	bne.n	800b966 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b952:	4b20      	ldr	r3, [pc, #128]	; (800b9d4 <prvAddNewTaskToReadyList+0xbc>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d802      	bhi.n	800b966 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b960:	4a1c      	ldr	r2, [pc, #112]	; (800b9d4 <prvAddNewTaskToReadyList+0xbc>)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b966:	4b1d      	ldr	r3, [pc, #116]	; (800b9dc <prvAddNewTaskToReadyList+0xc4>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	3301      	adds	r3, #1
 800b96c:	4a1b      	ldr	r2, [pc, #108]	; (800b9dc <prvAddNewTaskToReadyList+0xc4>)
 800b96e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b974:	2201      	movs	r2, #1
 800b976:	409a      	lsls	r2, r3
 800b978:	4b19      	ldr	r3, [pc, #100]	; (800b9e0 <prvAddNewTaskToReadyList+0xc8>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	4a18      	ldr	r2, [pc, #96]	; (800b9e0 <prvAddNewTaskToReadyList+0xc8>)
 800b980:	6013      	str	r3, [r2, #0]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b986:	4613      	mov	r3, r2
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	4413      	add	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4a15      	ldr	r2, [pc, #84]	; (800b9e4 <prvAddNewTaskToReadyList+0xcc>)
 800b990:	441a      	add	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	3304      	adds	r3, #4
 800b996:	4619      	mov	r1, r3
 800b998:	4610      	mov	r0, r2
 800b99a:	f7ff f862 	bl	800aa62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b99e:	f001 fe5d 	bl	800d65c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b9a2:	4b0d      	ldr	r3, [pc, #52]	; (800b9d8 <prvAddNewTaskToReadyList+0xc0>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00e      	beq.n	800b9c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b9aa:	4b0a      	ldr	r3, [pc, #40]	; (800b9d4 <prvAddNewTaskToReadyList+0xbc>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d207      	bcs.n	800b9c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b9b8:	4b0b      	ldr	r3, [pc, #44]	; (800b9e8 <prvAddNewTaskToReadyList+0xd0>)
 800b9ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9be:	601a      	str	r2, [r3, #0]
 800b9c0:	f3bf 8f4f 	dsb	sy
 800b9c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9c8:	bf00      	nop
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	20001888 	.word	0x20001888
 800b9d4:	20001788 	.word	0x20001788
 800b9d8:	20001894 	.word	0x20001894
 800b9dc:	200018a4 	.word	0x200018a4
 800b9e0:	20001890 	.word	0x20001890
 800b9e4:	2000178c 	.word	0x2000178c
 800b9e8:	e000ed04 	.word	0xe000ed04

0800b9ec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b08a      	sub	sp, #40	; 0x28
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10a      	bne.n	800ba16 <vTaskDelayUntil+0x2a>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	617b      	str	r3, [r7, #20]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10a      	bne.n	800ba32 <vTaskDelayUntil+0x46>
	__asm volatile
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	613b      	str	r3, [r7, #16]
}
 800ba2e:	bf00      	nop
 800ba30:	e7fe      	b.n	800ba30 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800ba32:	4b2a      	ldr	r3, [pc, #168]	; (800badc <vTaskDelayUntil+0xf0>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00a      	beq.n	800ba50 <vTaskDelayUntil+0x64>
	__asm volatile
 800ba3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	60fb      	str	r3, [r7, #12]
}
 800ba4c:	bf00      	nop
 800ba4e:	e7fe      	b.n	800ba4e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800ba50:	f000 fa8a 	bl	800bf68 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ba54:	4b22      	ldr	r3, [pc, #136]	; (800bae0 <vTaskDelayUntil+0xf4>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	4413      	add	r3, r2
 800ba62:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	6a3a      	ldr	r2, [r7, #32]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d20b      	bcs.n	800ba86 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	69fa      	ldr	r2, [r7, #28]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d211      	bcs.n	800ba9c <vTaskDelayUntil+0xb0>
 800ba78:	69fa      	ldr	r2, [r7, #28]
 800ba7a:	6a3b      	ldr	r3, [r7, #32]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d90d      	bls.n	800ba9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ba80:	2301      	movs	r3, #1
 800ba82:	627b      	str	r3, [r7, #36]	; 0x24
 800ba84:	e00a      	b.n	800ba9c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	69fa      	ldr	r2, [r7, #28]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d303      	bcc.n	800ba98 <vTaskDelayUntil+0xac>
 800ba90:	69fa      	ldr	r2, [r7, #28]
 800ba92:	6a3b      	ldr	r3, [r7, #32]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d901      	bls.n	800ba9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	69fa      	ldr	r2, [r7, #28]
 800baa0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800baa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d006      	beq.n	800bab6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800baa8:	69fa      	ldr	r2, [r7, #28]
 800baaa:	6a3b      	ldr	r3, [r7, #32]
 800baac:	1ad3      	subs	r3, r2, r3
 800baae:	2100      	movs	r1, #0
 800bab0:	4618      	mov	r0, r3
 800bab2:	f001 f8c3 	bl	800cc3c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800bab6:	f000 fa65 	bl	800bf84 <xTaskResumeAll>
 800baba:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d107      	bne.n	800bad2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800bac2:	4b08      	ldr	r3, [pc, #32]	; (800bae4 <vTaskDelayUntil+0xf8>)
 800bac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bac8:	601a      	str	r2, [r3, #0]
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bad2:	bf00      	nop
 800bad4:	3728      	adds	r7, #40	; 0x28
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	200018b0 	.word	0x200018b0
 800bae0:	2000188c 	.word	0x2000188c
 800bae4:	e000ed04 	.word	0xe000ed04

0800bae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800baf0:	2300      	movs	r3, #0
 800baf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d017      	beq.n	800bb2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bafa:	4b13      	ldr	r3, [pc, #76]	; (800bb48 <vTaskDelay+0x60>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00a      	beq.n	800bb18 <vTaskDelay+0x30>
	__asm volatile
 800bb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	60bb      	str	r3, [r7, #8]
}
 800bb14:	bf00      	nop
 800bb16:	e7fe      	b.n	800bb16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb18:	f000 fa26 	bl	800bf68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f001 f88c 	bl	800cc3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb24:	f000 fa2e 	bl	800bf84 <xTaskResumeAll>
 800bb28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d107      	bne.n	800bb40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bb30:	4b06      	ldr	r3, [pc, #24]	; (800bb4c <vTaskDelay+0x64>)
 800bb32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb36:	601a      	str	r2, [r3, #0]
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb40:	bf00      	nop
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	200018b0 	.word	0x200018b0
 800bb4c:	e000ed04 	.word	0xe000ed04

0800bb50 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800bb58:	f001 fd50 	bl	800d5fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d102      	bne.n	800bb68 <vTaskSuspend+0x18>
 800bb62:	4b3c      	ldr	r3, [pc, #240]	; (800bc54 <vTaskSuspend+0x104>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	e000      	b.n	800bb6a <vTaskSuspend+0x1a>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	3304      	adds	r3, #4
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7fe ffd1 	bl	800ab18 <uxListRemove>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d115      	bne.n	800bba8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb80:	4935      	ldr	r1, [pc, #212]	; (800bc58 <vTaskSuspend+0x108>)
 800bb82:	4613      	mov	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4413      	add	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	440b      	add	r3, r1
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10a      	bne.n	800bba8 <vTaskSuspend+0x58>
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb96:	2201      	movs	r2, #1
 800bb98:	fa02 f303 	lsl.w	r3, r2, r3
 800bb9c:	43da      	mvns	r2, r3
 800bb9e:	4b2f      	ldr	r3, [pc, #188]	; (800bc5c <vTaskSuspend+0x10c>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4013      	ands	r3, r2
 800bba4:	4a2d      	ldr	r2, [pc, #180]	; (800bc5c <vTaskSuspend+0x10c>)
 800bba6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d004      	beq.n	800bbba <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	3318      	adds	r3, #24
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7fe ffaf 	bl	800ab18 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	3304      	adds	r3, #4
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	4827      	ldr	r0, [pc, #156]	; (800bc60 <vTaskSuspend+0x110>)
 800bbc2:	f7fe ff4e 	bl	800aa62 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d103      	bne.n	800bbda <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800bbda:	f001 fd3f 	bl	800d65c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800bbde:	4b21      	ldr	r3, [pc, #132]	; (800bc64 <vTaskSuspend+0x114>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d005      	beq.n	800bbf2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800bbe6:	f001 fd09 	bl	800d5fc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800bbea:	f000 fd85 	bl	800c6f8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800bbee:	f001 fd35 	bl	800d65c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800bbf2:	4b18      	ldr	r3, [pc, #96]	; (800bc54 <vTaskSuspend+0x104>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d127      	bne.n	800bc4c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800bbfc:	4b19      	ldr	r3, [pc, #100]	; (800bc64 <vTaskSuspend+0x114>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d017      	beq.n	800bc34 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800bc04:	4b18      	ldr	r3, [pc, #96]	; (800bc68 <vTaskSuspend+0x118>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00a      	beq.n	800bc22 <vTaskSuspend+0xd2>
	__asm volatile
 800bc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc10:	f383 8811 	msr	BASEPRI, r3
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	60bb      	str	r3, [r7, #8]
}
 800bc1e:	bf00      	nop
 800bc20:	e7fe      	b.n	800bc20 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800bc22:	4b12      	ldr	r3, [pc, #72]	; (800bc6c <vTaskSuspend+0x11c>)
 800bc24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc28:	601a      	str	r2, [r3, #0]
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc32:	e00b      	b.n	800bc4c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800bc34:	4b0a      	ldr	r3, [pc, #40]	; (800bc60 <vTaskSuspend+0x110>)
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	4b0d      	ldr	r3, [pc, #52]	; (800bc70 <vTaskSuspend+0x120>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d103      	bne.n	800bc48 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800bc40:	4b04      	ldr	r3, [pc, #16]	; (800bc54 <vTaskSuspend+0x104>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	601a      	str	r2, [r3, #0]
	}
 800bc46:	e001      	b.n	800bc4c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800bc48:	f000 fb04 	bl	800c254 <vTaskSwitchContext>
	}
 800bc4c:	bf00      	nop
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	20001788 	.word	0x20001788
 800bc58:	2000178c 	.word	0x2000178c
 800bc5c:	20001890 	.word	0x20001890
 800bc60:	20001874 	.word	0x20001874
 800bc64:	20001894 	.word	0x20001894
 800bc68:	200018b0 	.word	0x200018b0
 800bc6c:	e000ed04 	.word	0xe000ed04
 800bc70:	20001888 	.word	0x20001888

0800bc74 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800bc74:	b480      	push	{r7}
 800bc76:	b087      	sub	sp, #28
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d10a      	bne.n	800bca0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800bc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8e:	f383 8811 	msr	BASEPRI, r3
 800bc92:	f3bf 8f6f 	isb	sy
 800bc96:	f3bf 8f4f 	dsb	sy
 800bc9a:	60fb      	str	r3, [r7, #12]
}
 800bc9c:	bf00      	nop
 800bc9e:	e7fe      	b.n	800bc9e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	695b      	ldr	r3, [r3, #20]
 800bca4:	4a0e      	ldr	r2, [pc, #56]	; (800bce0 <prvTaskIsTaskSuspended+0x6c>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d101      	bne.n	800bcae <prvTaskIsTaskSuspended+0x3a>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e000      	b.n	800bcb0 <prvTaskIsTaskSuspended+0x3c>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00f      	beq.n	800bcd4 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb8:	4a0a      	ldr	r2, [pc, #40]	; (800bce4 <prvTaskIsTaskSuspended+0x70>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d00a      	beq.n	800bcd4 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <prvTaskIsTaskSuspended+0x56>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e000      	b.n	800bccc <prvTaskIsTaskSuspended+0x58>
 800bcca:	2300      	movs	r3, #0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d001      	beq.n	800bcd4 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bcd4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	371c      	adds	r7, #28
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bc80      	pop	{r7}
 800bcde:	4770      	bx	lr
 800bce0:	20001874 	.word	0x20001874
 800bce4:	20001848 	.word	0x20001848

0800bce8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10a      	bne.n	800bd10 <vTaskResume+0x28>
	__asm volatile
 800bcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfe:	f383 8811 	msr	BASEPRI, r3
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	f3bf 8f4f 	dsb	sy
 800bd0a:	60bb      	str	r3, [r7, #8]
}
 800bd0c:	bf00      	nop
 800bd0e:	e7fe      	b.n	800bd0e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d039      	beq.n	800bd8a <vTaskResume+0xa2>
 800bd16:	4b1f      	ldr	r3, [pc, #124]	; (800bd94 <vTaskResume+0xac>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d034      	beq.n	800bd8a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800bd20:	f001 fc6c 	bl	800d5fc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f7ff ffa5 	bl	800bc74 <prvTaskIsTaskSuspended>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d02a      	beq.n	800bd86 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3304      	adds	r3, #4
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7fe feef 	bl	800ab18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3e:	2201      	movs	r2, #1
 800bd40:	409a      	lsls	r2, r3
 800bd42:	4b15      	ldr	r3, [pc, #84]	; (800bd98 <vTaskResume+0xb0>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4313      	orrs	r3, r2
 800bd48:	4a13      	ldr	r2, [pc, #76]	; (800bd98 <vTaskResume+0xb0>)
 800bd4a:	6013      	str	r3, [r2, #0]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd50:	4613      	mov	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	4413      	add	r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	4a10      	ldr	r2, [pc, #64]	; (800bd9c <vTaskResume+0xb4>)
 800bd5a:	441a      	add	r2, r3
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	3304      	adds	r3, #4
 800bd60:	4619      	mov	r1, r3
 800bd62:	4610      	mov	r0, r2
 800bd64:	f7fe fe7d 	bl	800aa62 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd6c:	4b09      	ldr	r3, [pc, #36]	; (800bd94 <vTaskResume+0xac>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d307      	bcc.n	800bd86 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800bd76:	4b0a      	ldr	r3, [pc, #40]	; (800bda0 <vTaskResume+0xb8>)
 800bd78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd7c:	601a      	str	r2, [r3, #0]
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800bd86:	f001 fc69 	bl	800d65c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd8a:	bf00      	nop
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20001788 	.word	0x20001788
 800bd98:	20001890 	.word	0x20001890
 800bd9c:	2000178c 	.word	0x2000178c
 800bda0:	e000ed04 	.word	0xe000ed04

0800bda4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b08a      	sub	sp, #40	; 0x28
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800bdac:	2300      	movs	r3, #0
 800bdae:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d10a      	bne.n	800bdd0 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800bdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	61bb      	str	r3, [r7, #24]
}
 800bdcc:	bf00      	nop
 800bdce:	e7fe      	b.n	800bdce <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdd0:	f001 fcd6 	bl	800d780 <vPortValidateInterruptPriority>
	__asm volatile
 800bdd4:	f3ef 8211 	mrs	r2, BASEPRI
 800bdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bddc:	f383 8811 	msr	BASEPRI, r3
 800bde0:	f3bf 8f6f 	isb	sy
 800bde4:	f3bf 8f4f 	dsb	sy
 800bde8:	617a      	str	r2, [r7, #20]
 800bdea:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bdec:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bdee:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800bdf0:	6a38      	ldr	r0, [r7, #32]
 800bdf2:	f7ff ff3f 	bl	800bc74 <prvTaskIsTaskSuspended>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d02f      	beq.n	800be5c <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdfc:	4b1d      	ldr	r3, [pc, #116]	; (800be74 <xTaskResumeFromISR+0xd0>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d125      	bne.n	800be50 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be04:	6a3b      	ldr	r3, [r7, #32]
 800be06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be08:	4b1b      	ldr	r3, [pc, #108]	; (800be78 <xTaskResumeFromISR+0xd4>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be0e:	429a      	cmp	r2, r3
 800be10:	d301      	bcc.n	800be16 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800be12:	2301      	movs	r3, #1
 800be14:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be16:	6a3b      	ldr	r3, [r7, #32]
 800be18:	3304      	adds	r3, #4
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fe fe7c 	bl	800ab18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be20:	6a3b      	ldr	r3, [r7, #32]
 800be22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be24:	2201      	movs	r2, #1
 800be26:	409a      	lsls	r2, r3
 800be28:	4b14      	ldr	r3, [pc, #80]	; (800be7c <xTaskResumeFromISR+0xd8>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	4a13      	ldr	r2, [pc, #76]	; (800be7c <xTaskResumeFromISR+0xd8>)
 800be30:	6013      	str	r3, [r2, #0]
 800be32:	6a3b      	ldr	r3, [r7, #32]
 800be34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be36:	4613      	mov	r3, r2
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	4413      	add	r3, r2
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4a10      	ldr	r2, [pc, #64]	; (800be80 <xTaskResumeFromISR+0xdc>)
 800be40:	441a      	add	r2, r3
 800be42:	6a3b      	ldr	r3, [r7, #32]
 800be44:	3304      	adds	r3, #4
 800be46:	4619      	mov	r1, r3
 800be48:	4610      	mov	r0, r2
 800be4a:	f7fe fe0a 	bl	800aa62 <vListInsertEnd>
 800be4e:	e005      	b.n	800be5c <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800be50:	6a3b      	ldr	r3, [r7, #32]
 800be52:	3318      	adds	r3, #24
 800be54:	4619      	mov	r1, r3
 800be56:	480b      	ldr	r0, [pc, #44]	; (800be84 <xTaskResumeFromISR+0xe0>)
 800be58:	f7fe fe03 	bl	800aa62 <vListInsertEnd>
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f383 8811 	msr	BASEPRI, r3
}
 800be66:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3728      	adds	r7, #40	; 0x28
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	200018b0 	.word	0x200018b0
 800be78:	20001788 	.word	0x20001788
 800be7c:	20001890 	.word	0x20001890
 800be80:	2000178c 	.word	0x2000178c
 800be84:	20001848 	.word	0x20001848

0800be88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b08a      	sub	sp, #40	; 0x28
 800be8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800be8e:	2300      	movs	r3, #0
 800be90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800be92:	2300      	movs	r3, #0
 800be94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800be96:	463a      	mov	r2, r7
 800be98:	1d39      	adds	r1, r7, #4
 800be9a:	f107 0308 	add.w	r3, r7, #8
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7f6 f852 	bl	8001f48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	68ba      	ldr	r2, [r7, #8]
 800beaa:	9202      	str	r2, [sp, #8]
 800beac:	9301      	str	r3, [sp, #4]
 800beae:	2300      	movs	r3, #0
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	2300      	movs	r3, #0
 800beb4:	460a      	mov	r2, r1
 800beb6:	4924      	ldr	r1, [pc, #144]	; (800bf48 <vTaskStartScheduler+0xc0>)
 800beb8:	4824      	ldr	r0, [pc, #144]	; (800bf4c <vTaskStartScheduler+0xc4>)
 800beba:	f7ff fbf5 	bl	800b6a8 <xTaskCreateStatic>
 800bebe:	4603      	mov	r3, r0
 800bec0:	4a23      	ldr	r2, [pc, #140]	; (800bf50 <vTaskStartScheduler+0xc8>)
 800bec2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bec4:	4b22      	ldr	r3, [pc, #136]	; (800bf50 <vTaskStartScheduler+0xc8>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800becc:	2301      	movs	r3, #1
 800bece:	617b      	str	r3, [r7, #20]
 800bed0:	e001      	b.n	800bed6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bed2:	2300      	movs	r3, #0
 800bed4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d102      	bne.n	800bee2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bedc:	f000 ff14 	bl	800cd08 <xTimerCreateTimerTask>
 800bee0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d11b      	bne.n	800bf20 <vTaskStartScheduler+0x98>
	__asm volatile
 800bee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	613b      	str	r3, [r7, #16]
}
 800befa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800befc:	4b15      	ldr	r3, [pc, #84]	; (800bf54 <vTaskStartScheduler+0xcc>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	334c      	adds	r3, #76	; 0x4c
 800bf02:	4a15      	ldr	r2, [pc, #84]	; (800bf58 <vTaskStartScheduler+0xd0>)
 800bf04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf06:	4b15      	ldr	r3, [pc, #84]	; (800bf5c <vTaskStartScheduler+0xd4>)
 800bf08:	f04f 32ff 	mov.w	r2, #4294967295
 800bf0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf0e:	4b14      	ldr	r3, [pc, #80]	; (800bf60 <vTaskStartScheduler+0xd8>)
 800bf10:	2201      	movs	r2, #1
 800bf12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800bf14:	4b13      	ldr	r3, [pc, #76]	; (800bf64 <vTaskStartScheduler+0xdc>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf1a:	f001 fafd 	bl	800d518 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf1e:	e00e      	b.n	800bf3e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf26:	d10a      	bne.n	800bf3e <vTaskStartScheduler+0xb6>
	__asm volatile
 800bf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	60fb      	str	r3, [r7, #12]
}
 800bf3a:	bf00      	nop
 800bf3c:	e7fe      	b.n	800bf3c <vTaskStartScheduler+0xb4>
}
 800bf3e:	bf00      	nop
 800bf40:	3718      	adds	r7, #24
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	0800ea08 	.word	0x0800ea08
 800bf4c:	0800c585 	.word	0x0800c585
 800bf50:	200018ac 	.word	0x200018ac
 800bf54:	20001788 	.word	0x20001788
 800bf58:	2000025c 	.word	0x2000025c
 800bf5c:	200018a8 	.word	0x200018a8
 800bf60:	20001894 	.word	0x20001894
 800bf64:	2000188c 	.word	0x2000188c

0800bf68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bf68:	b480      	push	{r7}
 800bf6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bf6c:	4b04      	ldr	r3, [pc, #16]	; (800bf80 <vTaskSuspendAll+0x18>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	3301      	adds	r3, #1
 800bf72:	4a03      	ldr	r2, [pc, #12]	; (800bf80 <vTaskSuspendAll+0x18>)
 800bf74:	6013      	str	r3, [r2, #0]
}
 800bf76:	bf00      	nop
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bc80      	pop	{r7}
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	200018b0 	.word	0x200018b0

0800bf84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bf92:	4b41      	ldr	r3, [pc, #260]	; (800c098 <xTaskResumeAll+0x114>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d10a      	bne.n	800bfb0 <xTaskResumeAll+0x2c>
	__asm volatile
 800bf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	603b      	str	r3, [r7, #0]
}
 800bfac:	bf00      	nop
 800bfae:	e7fe      	b.n	800bfae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bfb0:	f001 fb24 	bl	800d5fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bfb4:	4b38      	ldr	r3, [pc, #224]	; (800c098 <xTaskResumeAll+0x114>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	4a37      	ldr	r2, [pc, #220]	; (800c098 <xTaskResumeAll+0x114>)
 800bfbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfbe:	4b36      	ldr	r3, [pc, #216]	; (800c098 <xTaskResumeAll+0x114>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d161      	bne.n	800c08a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bfc6:	4b35      	ldr	r3, [pc, #212]	; (800c09c <xTaskResumeAll+0x118>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d05d      	beq.n	800c08a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfce:	e02e      	b.n	800c02e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800bfd0:	4b33      	ldr	r3, [pc, #204]	; (800c0a0 <xTaskResumeAll+0x11c>)
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	3318      	adds	r3, #24
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7fe fd9b 	bl	800ab18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fe fd96 	bl	800ab18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff0:	2201      	movs	r2, #1
 800bff2:	409a      	lsls	r2, r3
 800bff4:	4b2b      	ldr	r3, [pc, #172]	; (800c0a4 <xTaskResumeAll+0x120>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4313      	orrs	r3, r2
 800bffa:	4a2a      	ldr	r2, [pc, #168]	; (800c0a4 <xTaskResumeAll+0x120>)
 800bffc:	6013      	str	r3, [r2, #0]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c002:	4613      	mov	r3, r2
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	4413      	add	r3, r2
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4a27      	ldr	r2, [pc, #156]	; (800c0a8 <xTaskResumeAll+0x124>)
 800c00c:	441a      	add	r2, r3
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	3304      	adds	r3, #4
 800c012:	4619      	mov	r1, r3
 800c014:	4610      	mov	r0, r2
 800c016:	f7fe fd24 	bl	800aa62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01e:	4b23      	ldr	r3, [pc, #140]	; (800c0ac <xTaskResumeAll+0x128>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c024:	429a      	cmp	r2, r3
 800c026:	d302      	bcc.n	800c02e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c028:	4b21      	ldr	r3, [pc, #132]	; (800c0b0 <xTaskResumeAll+0x12c>)
 800c02a:	2201      	movs	r2, #1
 800c02c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c02e:	4b1c      	ldr	r3, [pc, #112]	; (800c0a0 <xTaskResumeAll+0x11c>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1cc      	bne.n	800bfd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d001      	beq.n	800c040 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c03c:	f000 fb5c 	bl	800c6f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c040:	4b1c      	ldr	r3, [pc, #112]	; (800c0b4 <xTaskResumeAll+0x130>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d010      	beq.n	800c06e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c04c:	f000 f844 	bl	800c0d8 <xTaskIncrementTick>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d002      	beq.n	800c05c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c056:	4b16      	ldr	r3, [pc, #88]	; (800c0b0 <xTaskResumeAll+0x12c>)
 800c058:	2201      	movs	r2, #1
 800c05a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	3b01      	subs	r3, #1
 800c060:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1f1      	bne.n	800c04c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c068:	4b12      	ldr	r3, [pc, #72]	; (800c0b4 <xTaskResumeAll+0x130>)
 800c06a:	2200      	movs	r2, #0
 800c06c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c06e:	4b10      	ldr	r3, [pc, #64]	; (800c0b0 <xTaskResumeAll+0x12c>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d009      	beq.n	800c08a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c076:	2301      	movs	r3, #1
 800c078:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c07a:	4b0f      	ldr	r3, [pc, #60]	; (800c0b8 <xTaskResumeAll+0x134>)
 800c07c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c080:	601a      	str	r2, [r3, #0]
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c08a:	f001 fae7 	bl	800d65c <vPortExitCritical>

	return xAlreadyYielded;
 800c08e:	68bb      	ldr	r3, [r7, #8]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	200018b0 	.word	0x200018b0
 800c09c:	20001888 	.word	0x20001888
 800c0a0:	20001848 	.word	0x20001848
 800c0a4:	20001890 	.word	0x20001890
 800c0a8:	2000178c 	.word	0x2000178c
 800c0ac:	20001788 	.word	0x20001788
 800c0b0:	2000189c 	.word	0x2000189c
 800c0b4:	20001898 	.word	0x20001898
 800c0b8:	e000ed04 	.word	0xe000ed04

0800c0bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c0c2:	4b04      	ldr	r3, [pc, #16]	; (800c0d4 <xTaskGetTickCount+0x18>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c0c8:	687b      	ldr	r3, [r7, #4]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	370c      	adds	r7, #12
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bc80      	pop	{r7}
 800c0d2:	4770      	bx	lr
 800c0d4:	2000188c 	.word	0x2000188c

0800c0d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0e2:	4b51      	ldr	r3, [pc, #324]	; (800c228 <xTaskIncrementTick+0x150>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f040 808d 	bne.w	800c206 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c0ec:	4b4f      	ldr	r3, [pc, #316]	; (800c22c <xTaskIncrementTick+0x154>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c0f4:	4a4d      	ldr	r2, [pc, #308]	; (800c22c <xTaskIncrementTick+0x154>)
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d120      	bne.n	800c142 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c100:	4b4b      	ldr	r3, [pc, #300]	; (800c230 <xTaskIncrementTick+0x158>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00a      	beq.n	800c120 <xTaskIncrementTick+0x48>
	__asm volatile
 800c10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10e:	f383 8811 	msr	BASEPRI, r3
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	603b      	str	r3, [r7, #0]
}
 800c11c:	bf00      	nop
 800c11e:	e7fe      	b.n	800c11e <xTaskIncrementTick+0x46>
 800c120:	4b43      	ldr	r3, [pc, #268]	; (800c230 <xTaskIncrementTick+0x158>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	60fb      	str	r3, [r7, #12]
 800c126:	4b43      	ldr	r3, [pc, #268]	; (800c234 <xTaskIncrementTick+0x15c>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a41      	ldr	r2, [pc, #260]	; (800c230 <xTaskIncrementTick+0x158>)
 800c12c:	6013      	str	r3, [r2, #0]
 800c12e:	4a41      	ldr	r2, [pc, #260]	; (800c234 <xTaskIncrementTick+0x15c>)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6013      	str	r3, [r2, #0]
 800c134:	4b40      	ldr	r3, [pc, #256]	; (800c238 <xTaskIncrementTick+0x160>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	3301      	adds	r3, #1
 800c13a:	4a3f      	ldr	r2, [pc, #252]	; (800c238 <xTaskIncrementTick+0x160>)
 800c13c:	6013      	str	r3, [r2, #0]
 800c13e:	f000 fadb 	bl	800c6f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c142:	4b3e      	ldr	r3, [pc, #248]	; (800c23c <xTaskIncrementTick+0x164>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	693a      	ldr	r2, [r7, #16]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d34d      	bcc.n	800c1e8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c14c:	4b38      	ldr	r3, [pc, #224]	; (800c230 <xTaskIncrementTick+0x158>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d101      	bne.n	800c15a <xTaskIncrementTick+0x82>
 800c156:	2301      	movs	r3, #1
 800c158:	e000      	b.n	800c15c <xTaskIncrementTick+0x84>
 800c15a:	2300      	movs	r3, #0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d004      	beq.n	800c16a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c160:	4b36      	ldr	r3, [pc, #216]	; (800c23c <xTaskIncrementTick+0x164>)
 800c162:	f04f 32ff 	mov.w	r2, #4294967295
 800c166:	601a      	str	r2, [r3, #0]
					break;
 800c168:	e03e      	b.n	800c1e8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c16a:	4b31      	ldr	r3, [pc, #196]	; (800c230 <xTaskIncrementTick+0x158>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c17a:	693a      	ldr	r2, [r7, #16]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d203      	bcs.n	800c18a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c182:	4a2e      	ldr	r2, [pc, #184]	; (800c23c <xTaskIncrementTick+0x164>)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6013      	str	r3, [r2, #0]
						break;
 800c188:	e02e      	b.n	800c1e8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	3304      	adds	r3, #4
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fe fcc2 	bl	800ab18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d004      	beq.n	800c1a6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	3318      	adds	r3, #24
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7fe fcb9 	bl	800ab18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	409a      	lsls	r2, r3
 800c1ae:	4b24      	ldr	r3, [pc, #144]	; (800c240 <xTaskIncrementTick+0x168>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	4a22      	ldr	r2, [pc, #136]	; (800c240 <xTaskIncrementTick+0x168>)
 800c1b6:	6013      	str	r3, [r2, #0]
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1bc:	4613      	mov	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	4413      	add	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4a1f      	ldr	r2, [pc, #124]	; (800c244 <xTaskIncrementTick+0x16c>)
 800c1c6:	441a      	add	r2, r3
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	4610      	mov	r0, r2
 800c1d0:	f7fe fc47 	bl	800aa62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d8:	4b1b      	ldr	r3, [pc, #108]	; (800c248 <xTaskIncrementTick+0x170>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d3b4      	bcc.n	800c14c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1e6:	e7b1      	b.n	800c14c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c1e8:	4b17      	ldr	r3, [pc, #92]	; (800c248 <xTaskIncrementTick+0x170>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ee:	4915      	ldr	r1, [pc, #84]	; (800c244 <xTaskIncrementTick+0x16c>)
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	440b      	add	r3, r1
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d907      	bls.n	800c210 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800c200:	2301      	movs	r3, #1
 800c202:	617b      	str	r3, [r7, #20]
 800c204:	e004      	b.n	800c210 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c206:	4b11      	ldr	r3, [pc, #68]	; (800c24c <xTaskIncrementTick+0x174>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3301      	adds	r3, #1
 800c20c:	4a0f      	ldr	r2, [pc, #60]	; (800c24c <xTaskIncrementTick+0x174>)
 800c20e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c210:	4b0f      	ldr	r3, [pc, #60]	; (800c250 <xTaskIncrementTick+0x178>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d001      	beq.n	800c21c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800c218:	2301      	movs	r3, #1
 800c21a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c21c:	697b      	ldr	r3, [r7, #20]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3718      	adds	r7, #24
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	200018b0 	.word	0x200018b0
 800c22c:	2000188c 	.word	0x2000188c
 800c230:	20001840 	.word	0x20001840
 800c234:	20001844 	.word	0x20001844
 800c238:	200018a0 	.word	0x200018a0
 800c23c:	200018a8 	.word	0x200018a8
 800c240:	20001890 	.word	0x20001890
 800c244:	2000178c 	.word	0x2000178c
 800c248:	20001788 	.word	0x20001788
 800c24c:	20001898 	.word	0x20001898
 800c250:	2000189c 	.word	0x2000189c

0800c254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c254:	b480      	push	{r7}
 800c256:	b087      	sub	sp, #28
 800c258:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c25a:	4b29      	ldr	r3, [pc, #164]	; (800c300 <vTaskSwitchContext+0xac>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d003      	beq.n	800c26a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c262:	4b28      	ldr	r3, [pc, #160]	; (800c304 <vTaskSwitchContext+0xb0>)
 800c264:	2201      	movs	r2, #1
 800c266:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c268:	e044      	b.n	800c2f4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c26a:	4b26      	ldr	r3, [pc, #152]	; (800c304 <vTaskSwitchContext+0xb0>)
 800c26c:	2200      	movs	r2, #0
 800c26e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c270:	4b25      	ldr	r3, [pc, #148]	; (800c308 <vTaskSwitchContext+0xb4>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	fab3 f383 	clz	r3, r3
 800c27c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c27e:	7afb      	ldrb	r3, [r7, #11]
 800c280:	f1c3 031f 	rsb	r3, r3, #31
 800c284:	617b      	str	r3, [r7, #20]
 800c286:	4921      	ldr	r1, [pc, #132]	; (800c30c <vTaskSwitchContext+0xb8>)
 800c288:	697a      	ldr	r2, [r7, #20]
 800c28a:	4613      	mov	r3, r2
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	4413      	add	r3, r2
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	440b      	add	r3, r1
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d10a      	bne.n	800c2b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	607b      	str	r3, [r7, #4]
}
 800c2ac:	bf00      	nop
 800c2ae:	e7fe      	b.n	800c2ae <vTaskSwitchContext+0x5a>
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	4413      	add	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4a14      	ldr	r2, [pc, #80]	; (800c30c <vTaskSwitchContext+0xb8>)
 800c2bc:	4413      	add	r3, r2
 800c2be:	613b      	str	r3, [r7, #16]
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	685a      	ldr	r2, [r3, #4]
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	605a      	str	r2, [r3, #4]
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	685a      	ldr	r2, [r3, #4]
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	3308      	adds	r3, #8
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d104      	bne.n	800c2e0 <vTaskSwitchContext+0x8c>
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	685a      	ldr	r2, [r3, #4]
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	605a      	str	r2, [r3, #4]
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	4a0a      	ldr	r2, [pc, #40]	; (800c310 <vTaskSwitchContext+0xbc>)
 800c2e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c2ea:	4b09      	ldr	r3, [pc, #36]	; (800c310 <vTaskSwitchContext+0xbc>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	334c      	adds	r3, #76	; 0x4c
 800c2f0:	4a08      	ldr	r2, [pc, #32]	; (800c314 <vTaskSwitchContext+0xc0>)
 800c2f2:	6013      	str	r3, [r2, #0]
}
 800c2f4:	bf00      	nop
 800c2f6:	371c      	adds	r7, #28
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bc80      	pop	{r7}
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	200018b0 	.word	0x200018b0
 800c304:	2000189c 	.word	0x2000189c
 800c308:	20001890 	.word	0x20001890
 800c30c:	2000178c 	.word	0x2000178c
 800c310:	20001788 	.word	0x20001788
 800c314:	2000025c 	.word	0x2000025c

0800c318 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d10a      	bne.n	800c33e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32c:	f383 8811 	msr	BASEPRI, r3
 800c330:	f3bf 8f6f 	isb	sy
 800c334:	f3bf 8f4f 	dsb	sy
 800c338:	60fb      	str	r3, [r7, #12]
}
 800c33a:	bf00      	nop
 800c33c:	e7fe      	b.n	800c33c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c33e:	4b07      	ldr	r3, [pc, #28]	; (800c35c <vTaskPlaceOnEventList+0x44>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	3318      	adds	r3, #24
 800c344:	4619      	mov	r1, r3
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f7fe fbae 	bl	800aaa8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c34c:	2101      	movs	r1, #1
 800c34e:	6838      	ldr	r0, [r7, #0]
 800c350:	f000 fc74 	bl	800cc3c <prvAddCurrentTaskToDelayedList>
}
 800c354:	bf00      	nop
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	20001788 	.word	0x20001788

0800c360 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d10a      	bne.n	800c388 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c376:	f383 8811 	msr	BASEPRI, r3
 800c37a:	f3bf 8f6f 	isb	sy
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	617b      	str	r3, [r7, #20]
}
 800c384:	bf00      	nop
 800c386:	e7fe      	b.n	800c386 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c388:	4b0a      	ldr	r3, [pc, #40]	; (800c3b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	3318      	adds	r3, #24
 800c38e:	4619      	mov	r1, r3
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f7fe fb66 	bl	800aa62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d002      	beq.n	800c3a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c39c:	f04f 33ff 	mov.w	r3, #4294967295
 800c3a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c3a2:	6879      	ldr	r1, [r7, #4]
 800c3a4:	68b8      	ldr	r0, [r7, #8]
 800c3a6:	f000 fc49 	bl	800cc3c <prvAddCurrentTaskToDelayedList>
	}
 800c3aa:	bf00      	nop
 800c3ac:	3718      	adds	r7, #24
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	20001788 	.word	0x20001788

0800c3b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10a      	bne.n	800c3e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	60fb      	str	r3, [r7, #12]
}
 800c3e0:	bf00      	nop
 800c3e2:	e7fe      	b.n	800c3e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	3318      	adds	r3, #24
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fe fb95 	bl	800ab18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3ee:	4b1d      	ldr	r3, [pc, #116]	; (800c464 <xTaskRemoveFromEventList+0xac>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d11c      	bne.n	800c430 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fe fb8c 	bl	800ab18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	2201      	movs	r2, #1
 800c406:	409a      	lsls	r2, r3
 800c408:	4b17      	ldr	r3, [pc, #92]	; (800c468 <xTaskRemoveFromEventList+0xb0>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	4a16      	ldr	r2, [pc, #88]	; (800c468 <xTaskRemoveFromEventList+0xb0>)
 800c410:	6013      	str	r3, [r2, #0]
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c416:	4613      	mov	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4413      	add	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4a13      	ldr	r2, [pc, #76]	; (800c46c <xTaskRemoveFromEventList+0xb4>)
 800c420:	441a      	add	r2, r3
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	3304      	adds	r3, #4
 800c426:	4619      	mov	r1, r3
 800c428:	4610      	mov	r0, r2
 800c42a:	f7fe fb1a 	bl	800aa62 <vListInsertEnd>
 800c42e:	e005      	b.n	800c43c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	3318      	adds	r3, #24
 800c434:	4619      	mov	r1, r3
 800c436:	480e      	ldr	r0, [pc, #56]	; (800c470 <xTaskRemoveFromEventList+0xb8>)
 800c438:	f7fe fb13 	bl	800aa62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c440:	4b0c      	ldr	r3, [pc, #48]	; (800c474 <xTaskRemoveFromEventList+0xbc>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c446:	429a      	cmp	r2, r3
 800c448:	d905      	bls.n	800c456 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c44a:	2301      	movs	r3, #1
 800c44c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c44e:	4b0a      	ldr	r3, [pc, #40]	; (800c478 <xTaskRemoveFromEventList+0xc0>)
 800c450:	2201      	movs	r2, #1
 800c452:	601a      	str	r2, [r3, #0]
 800c454:	e001      	b.n	800c45a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c456:	2300      	movs	r3, #0
 800c458:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800c45a:	697b      	ldr	r3, [r7, #20]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3718      	adds	r7, #24
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	200018b0 	.word	0x200018b0
 800c468:	20001890 	.word	0x20001890
 800c46c:	2000178c 	.word	0x2000178c
 800c470:	20001848 	.word	0x20001848
 800c474:	20001788 	.word	0x20001788
 800c478:	2000189c 	.word	0x2000189c

0800c47c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c484:	4b06      	ldr	r3, [pc, #24]	; (800c4a0 <vTaskInternalSetTimeOutState+0x24>)
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c48c:	4b05      	ldr	r3, [pc, #20]	; (800c4a4 <vTaskInternalSetTimeOutState+0x28>)
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	605a      	str	r2, [r3, #4]
}
 800c494:	bf00      	nop
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	bc80      	pop	{r7}
 800c49c:	4770      	bx	lr
 800c49e:	bf00      	nop
 800c4a0:	200018a0 	.word	0x200018a0
 800c4a4:	2000188c 	.word	0x2000188c

0800c4a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b088      	sub	sp, #32
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d10a      	bne.n	800c4ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4bc:	f383 8811 	msr	BASEPRI, r3
 800c4c0:	f3bf 8f6f 	isb	sy
 800c4c4:	f3bf 8f4f 	dsb	sy
 800c4c8:	613b      	str	r3, [r7, #16]
}
 800c4ca:	bf00      	nop
 800c4cc:	e7fe      	b.n	800c4cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d10a      	bne.n	800c4ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	60fb      	str	r3, [r7, #12]
}
 800c4e6:	bf00      	nop
 800c4e8:	e7fe      	b.n	800c4e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c4ea:	f001 f887 	bl	800d5fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c4ee:	4b1d      	ldr	r3, [pc, #116]	; (800c564 <xTaskCheckForTimeOut+0xbc>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	69ba      	ldr	r2, [r7, #24]
 800c4fa:	1ad3      	subs	r3, r2, r3
 800c4fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c506:	d102      	bne.n	800c50e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c508:	2300      	movs	r3, #0
 800c50a:	61fb      	str	r3, [r7, #28]
 800c50c:	e023      	b.n	800c556 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	4b15      	ldr	r3, [pc, #84]	; (800c568 <xTaskCheckForTimeOut+0xc0>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	429a      	cmp	r2, r3
 800c518:	d007      	beq.n	800c52a <xTaskCheckForTimeOut+0x82>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	69ba      	ldr	r2, [r7, #24]
 800c520:	429a      	cmp	r2, r3
 800c522:	d302      	bcc.n	800c52a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c524:	2301      	movs	r3, #1
 800c526:	61fb      	str	r3, [r7, #28]
 800c528:	e015      	b.n	800c556 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	697a      	ldr	r2, [r7, #20]
 800c530:	429a      	cmp	r2, r3
 800c532:	d20b      	bcs.n	800c54c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	1ad2      	subs	r2, r2, r3
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f7ff ff9b 	bl	800c47c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c546:	2300      	movs	r3, #0
 800c548:	61fb      	str	r3, [r7, #28]
 800c54a:	e004      	b.n	800c556 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	2200      	movs	r2, #0
 800c550:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c552:	2301      	movs	r3, #1
 800c554:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c556:	f001 f881 	bl	800d65c <vPortExitCritical>

	return xReturn;
 800c55a:	69fb      	ldr	r3, [r7, #28]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3720      	adds	r7, #32
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	2000188c 	.word	0x2000188c
 800c568:	200018a0 	.word	0x200018a0

0800c56c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c56c:	b480      	push	{r7}
 800c56e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c570:	4b03      	ldr	r3, [pc, #12]	; (800c580 <vTaskMissedYield+0x14>)
 800c572:	2201      	movs	r2, #1
 800c574:	601a      	str	r2, [r3, #0]
}
 800c576:	bf00      	nop
 800c578:	46bd      	mov	sp, r7
 800c57a:	bc80      	pop	{r7}
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	2000189c 	.word	0x2000189c

0800c584 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c58c:	f000 f852 	bl	800c634 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c590:	4b06      	ldr	r3, [pc, #24]	; (800c5ac <prvIdleTask+0x28>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2b01      	cmp	r3, #1
 800c596:	d9f9      	bls.n	800c58c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c598:	4b05      	ldr	r3, [pc, #20]	; (800c5b0 <prvIdleTask+0x2c>)
 800c59a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c59e:	601a      	str	r2, [r3, #0]
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c5a8:	e7f0      	b.n	800c58c <prvIdleTask+0x8>
 800c5aa:	bf00      	nop
 800c5ac:	2000178c 	.word	0x2000178c
 800c5b0:	e000ed04 	.word	0xe000ed04

0800c5b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	607b      	str	r3, [r7, #4]
 800c5be:	e00c      	b.n	800c5da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	4413      	add	r3, r2
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	4a12      	ldr	r2, [pc, #72]	; (800c614 <prvInitialiseTaskLists+0x60>)
 800c5cc:	4413      	add	r3, r2
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7fe fa1c 	bl	800aa0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	607b      	str	r3, [r7, #4]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2b06      	cmp	r3, #6
 800c5de:	d9ef      	bls.n	800c5c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c5e0:	480d      	ldr	r0, [pc, #52]	; (800c618 <prvInitialiseTaskLists+0x64>)
 800c5e2:	f7fe fa13 	bl	800aa0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c5e6:	480d      	ldr	r0, [pc, #52]	; (800c61c <prvInitialiseTaskLists+0x68>)
 800c5e8:	f7fe fa10 	bl	800aa0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c5ec:	480c      	ldr	r0, [pc, #48]	; (800c620 <prvInitialiseTaskLists+0x6c>)
 800c5ee:	f7fe fa0d 	bl	800aa0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c5f2:	480c      	ldr	r0, [pc, #48]	; (800c624 <prvInitialiseTaskLists+0x70>)
 800c5f4:	f7fe fa0a 	bl	800aa0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c5f8:	480b      	ldr	r0, [pc, #44]	; (800c628 <prvInitialiseTaskLists+0x74>)
 800c5fa:	f7fe fa07 	bl	800aa0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c5fe:	4b0b      	ldr	r3, [pc, #44]	; (800c62c <prvInitialiseTaskLists+0x78>)
 800c600:	4a05      	ldr	r2, [pc, #20]	; (800c618 <prvInitialiseTaskLists+0x64>)
 800c602:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c604:	4b0a      	ldr	r3, [pc, #40]	; (800c630 <prvInitialiseTaskLists+0x7c>)
 800c606:	4a05      	ldr	r2, [pc, #20]	; (800c61c <prvInitialiseTaskLists+0x68>)
 800c608:	601a      	str	r2, [r3, #0]
}
 800c60a:	bf00      	nop
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	2000178c 	.word	0x2000178c
 800c618:	20001818 	.word	0x20001818
 800c61c:	2000182c 	.word	0x2000182c
 800c620:	20001848 	.word	0x20001848
 800c624:	2000185c 	.word	0x2000185c
 800c628:	20001874 	.word	0x20001874
 800c62c:	20001840 	.word	0x20001840
 800c630:	20001844 	.word	0x20001844

0800c634 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c63a:	e019      	b.n	800c670 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c63c:	f000 ffde 	bl	800d5fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c640:	4b10      	ldr	r3, [pc, #64]	; (800c684 <prvCheckTasksWaitingTermination+0x50>)
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	68db      	ldr	r3, [r3, #12]
 800c646:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	3304      	adds	r3, #4
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7fe fa63 	bl	800ab18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c652:	4b0d      	ldr	r3, [pc, #52]	; (800c688 <prvCheckTasksWaitingTermination+0x54>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	3b01      	subs	r3, #1
 800c658:	4a0b      	ldr	r2, [pc, #44]	; (800c688 <prvCheckTasksWaitingTermination+0x54>)
 800c65a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c65c:	4b0b      	ldr	r3, [pc, #44]	; (800c68c <prvCheckTasksWaitingTermination+0x58>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	3b01      	subs	r3, #1
 800c662:	4a0a      	ldr	r2, [pc, #40]	; (800c68c <prvCheckTasksWaitingTermination+0x58>)
 800c664:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c666:	f000 fff9 	bl	800d65c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f810 	bl	800c690 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c670:	4b06      	ldr	r3, [pc, #24]	; (800c68c <prvCheckTasksWaitingTermination+0x58>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1e1      	bne.n	800c63c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c678:	bf00      	nop
 800c67a:	bf00      	nop
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	2000185c 	.word	0x2000185c
 800c688:	20001888 	.word	0x20001888
 800c68c:	20001870 	.word	0x20001870

0800c690 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	334c      	adds	r3, #76	; 0x4c
 800c69c:	4618      	mov	r0, r3
 800c69e:	f001 fbab 	bl	800ddf8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d108      	bne.n	800c6be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f001 f967 	bl	800d984 <vPortFree>
				vPortFree( pxTCB );
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f001 f964 	bl	800d984 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c6bc:	e018      	b.n	800c6f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d103      	bne.n	800c6d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f001 f95b 	bl	800d984 <vPortFree>
	}
 800c6ce:	e00f      	b.n	800c6f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d00a      	beq.n	800c6f0 <prvDeleteTCB+0x60>
	__asm volatile
 800c6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6de:	f383 8811 	msr	BASEPRI, r3
 800c6e2:	f3bf 8f6f 	isb	sy
 800c6e6:	f3bf 8f4f 	dsb	sy
 800c6ea:	60fb      	str	r3, [r7, #12]
}
 800c6ec:	bf00      	nop
 800c6ee:	e7fe      	b.n	800c6ee <prvDeleteTCB+0x5e>
	}
 800c6f0:	bf00      	nop
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6fe:	4b0e      	ldr	r3, [pc, #56]	; (800c738 <prvResetNextTaskUnblockTime+0x40>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d101      	bne.n	800c70c <prvResetNextTaskUnblockTime+0x14>
 800c708:	2301      	movs	r3, #1
 800c70a:	e000      	b.n	800c70e <prvResetNextTaskUnblockTime+0x16>
 800c70c:	2300      	movs	r3, #0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d004      	beq.n	800c71c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c712:	4b0a      	ldr	r3, [pc, #40]	; (800c73c <prvResetNextTaskUnblockTime+0x44>)
 800c714:	f04f 32ff 	mov.w	r2, #4294967295
 800c718:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c71a:	e008      	b.n	800c72e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c71c:	4b06      	ldr	r3, [pc, #24]	; (800c738 <prvResetNextTaskUnblockTime+0x40>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	4a04      	ldr	r2, [pc, #16]	; (800c73c <prvResetNextTaskUnblockTime+0x44>)
 800c72c:	6013      	str	r3, [r2, #0]
}
 800c72e:	bf00      	nop
 800c730:	370c      	adds	r7, #12
 800c732:	46bd      	mov	sp, r7
 800c734:	bc80      	pop	{r7}
 800c736:	4770      	bx	lr
 800c738:	20001840 	.word	0x20001840
 800c73c:	200018a8 	.word	0x200018a8

0800c740 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c746:	4b0b      	ldr	r3, [pc, #44]	; (800c774 <xTaskGetSchedulerState+0x34>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d102      	bne.n	800c754 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c74e:	2301      	movs	r3, #1
 800c750:	607b      	str	r3, [r7, #4]
 800c752:	e008      	b.n	800c766 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c754:	4b08      	ldr	r3, [pc, #32]	; (800c778 <xTaskGetSchedulerState+0x38>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d102      	bne.n	800c762 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c75c:	2302      	movs	r3, #2
 800c75e:	607b      	str	r3, [r7, #4]
 800c760:	e001      	b.n	800c766 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c762:	2300      	movs	r3, #0
 800c764:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c766:	687b      	ldr	r3, [r7, #4]
	}
 800c768:	4618      	mov	r0, r3
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bc80      	pop	{r7}
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	20001894 	.word	0x20001894
 800c778:	200018b0 	.word	0x200018b0

0800c77c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b086      	sub	sp, #24
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c788:	2300      	movs	r3, #0
 800c78a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d06e      	beq.n	800c870 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c792:	4b3a      	ldr	r3, [pc, #232]	; (800c87c <xTaskPriorityDisinherit+0x100>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	693a      	ldr	r2, [r7, #16]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d00a      	beq.n	800c7b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a0:	f383 8811 	msr	BASEPRI, r3
 800c7a4:	f3bf 8f6f 	isb	sy
 800c7a8:	f3bf 8f4f 	dsb	sy
 800c7ac:	60fb      	str	r3, [r7, #12]
}
 800c7ae:	bf00      	nop
 800c7b0:	e7fe      	b.n	800c7b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d10a      	bne.n	800c7d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7be:	f383 8811 	msr	BASEPRI, r3
 800c7c2:	f3bf 8f6f 	isb	sy
 800c7c6:	f3bf 8f4f 	dsb	sy
 800c7ca:	60bb      	str	r3, [r7, #8]
}
 800c7cc:	bf00      	nop
 800c7ce:	e7fe      	b.n	800c7ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7d4:	1e5a      	subs	r2, r3, #1
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d044      	beq.n	800c870 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d140      	bne.n	800c870 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	3304      	adds	r3, #4
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7fe f990 	bl	800ab18 <uxListRemove>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d115      	bne.n	800c82a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c802:	491f      	ldr	r1, [pc, #124]	; (800c880 <xTaskPriorityDisinherit+0x104>)
 800c804:	4613      	mov	r3, r2
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	4413      	add	r3, r2
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	440b      	add	r3, r1
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d10a      	bne.n	800c82a <xTaskPriorityDisinherit+0xae>
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c818:	2201      	movs	r2, #1
 800c81a:	fa02 f303 	lsl.w	r3, r2, r3
 800c81e:	43da      	mvns	r2, r3
 800c820:	4b18      	ldr	r3, [pc, #96]	; (800c884 <xTaskPriorityDisinherit+0x108>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4013      	ands	r3, r2
 800c826:	4a17      	ldr	r2, [pc, #92]	; (800c884 <xTaskPriorityDisinherit+0x108>)
 800c828:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c836:	f1c3 0207 	rsb	r2, r3, #7
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c842:	2201      	movs	r2, #1
 800c844:	409a      	lsls	r2, r3
 800c846:	4b0f      	ldr	r3, [pc, #60]	; (800c884 <xTaskPriorityDisinherit+0x108>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	4a0d      	ldr	r2, [pc, #52]	; (800c884 <xTaskPriorityDisinherit+0x108>)
 800c84e:	6013      	str	r3, [r2, #0]
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c854:	4613      	mov	r3, r2
 800c856:	009b      	lsls	r3, r3, #2
 800c858:	4413      	add	r3, r2
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	4a08      	ldr	r2, [pc, #32]	; (800c880 <xTaskPriorityDisinherit+0x104>)
 800c85e:	441a      	add	r2, r3
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	3304      	adds	r3, #4
 800c864:	4619      	mov	r1, r3
 800c866:	4610      	mov	r0, r2
 800c868:	f7fe f8fb 	bl	800aa62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c86c:	2301      	movs	r3, #1
 800c86e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c870:	697b      	ldr	r3, [r7, #20]
	}
 800c872:	4618      	mov	r0, r3
 800c874:	3718      	adds	r7, #24
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	bf00      	nop
 800c87c:	20001788 	.word	0x20001788
 800c880:	2000178c 	.word	0x2000178c
 800c884:	20001890 	.word	0x20001890

0800c888 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b086      	sub	sp, #24
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
 800c894:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c896:	f000 feb1 	bl	800d5fc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c89a:	4b29      	ldr	r3, [pc, #164]	; (800c940 <xTaskNotifyWait+0xb8>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d01c      	beq.n	800c8e2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c8a8:	4b25      	ldr	r3, [pc, #148]	; (800c940 <xTaskNotifyWait+0xb8>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	43d2      	mvns	r2, r2
 800c8b4:	400a      	ands	r2, r1
 800c8b6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c8ba:	4b21      	ldr	r3, [pc, #132]	; (800c940 <xTaskNotifyWait+0xb8>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00b      	beq.n	800c8e2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c8ca:	2101      	movs	r1, #1
 800c8cc:	6838      	ldr	r0, [r7, #0]
 800c8ce:	f000 f9b5 	bl	800cc3c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c8d2:	4b1c      	ldr	r3, [pc, #112]	; (800c944 <xTaskNotifyWait+0xbc>)
 800c8d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8d8:	601a      	str	r2, [r3, #0]
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c8e2:	f000 febb 	bl	800d65c <vPortExitCritical>

		taskENTER_CRITICAL();
 800c8e6:	f000 fe89 	bl	800d5fc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d005      	beq.n	800c8fc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c8f0:	4b13      	ldr	r3, [pc, #76]	; (800c940 <xTaskNotifyWait+0xb8>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c8fc:	4b10      	ldr	r3, [pc, #64]	; (800c940 <xTaskNotifyWait+0xb8>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c904:	b2db      	uxtb	r3, r3
 800c906:	2b02      	cmp	r3, #2
 800c908:	d002      	beq.n	800c910 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c90a:	2300      	movs	r3, #0
 800c90c:	617b      	str	r3, [r7, #20]
 800c90e:	e00a      	b.n	800c926 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c910:	4b0b      	ldr	r3, [pc, #44]	; (800c940 <xTaskNotifyWait+0xb8>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	43d2      	mvns	r2, r2
 800c91c:	400a      	ands	r2, r1
 800c91e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800c922:	2301      	movs	r3, #1
 800c924:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c926:	4b06      	ldr	r3, [pc, #24]	; (800c940 <xTaskNotifyWait+0xb8>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800c930:	f000 fe94 	bl	800d65c <vPortExitCritical>

		return xReturn;
 800c934:	697b      	ldr	r3, [r7, #20]
	}
 800c936:	4618      	mov	r0, r3
 800c938:	3718      	adds	r7, #24
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	20001788 	.word	0x20001788
 800c944:	e000ed04 	.word	0xe000ed04

0800c948 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b08a      	sub	sp, #40	; 0x28
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	603b      	str	r3, [r7, #0]
 800c954:	4613      	mov	r3, r2
 800c956:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c958:	2301      	movs	r3, #1
 800c95a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d10a      	bne.n	800c978 <xTaskGenericNotify+0x30>
	__asm volatile
 800c962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c966:	f383 8811 	msr	BASEPRI, r3
 800c96a:	f3bf 8f6f 	isb	sy
 800c96e:	f3bf 8f4f 	dsb	sy
 800c972:	61bb      	str	r3, [r7, #24]
}
 800c974:	bf00      	nop
 800c976:	e7fe      	b.n	800c976 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c97c:	f000 fe3e 	bl	800d5fc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d004      	beq.n	800c990 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c986:	6a3b      	ldr	r3, [r7, #32]
 800c988:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c990:	6a3b      	ldr	r3, [r7, #32]
 800c992:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c996:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c998:	6a3b      	ldr	r3, [r7, #32]
 800c99a:	2202      	movs	r2, #2
 800c99c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800c9a0:	79fb      	ldrb	r3, [r7, #7]
 800c9a2:	2b04      	cmp	r3, #4
 800c9a4:	d82d      	bhi.n	800ca02 <xTaskGenericNotify+0xba>
 800c9a6:	a201      	add	r2, pc, #4	; (adr r2, 800c9ac <xTaskGenericNotify+0x64>)
 800c9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ac:	0800ca03 	.word	0x0800ca03
 800c9b0:	0800c9c1 	.word	0x0800c9c1
 800c9b4:	0800c9d3 	.word	0x0800c9d3
 800c9b8:	0800c9e3 	.word	0x0800c9e3
 800c9bc:	0800c9ed 	.word	0x0800c9ed
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c9c0:	6a3b      	ldr	r3, [r7, #32]
 800c9c2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	431a      	orrs	r2, r3
 800c9ca:	6a3b      	ldr	r3, [r7, #32]
 800c9cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c9d0:	e017      	b.n	800ca02 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c9d2:	6a3b      	ldr	r3, [r7, #32]
 800c9d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c9d8:	1c5a      	adds	r2, r3, #1
 800c9da:	6a3b      	ldr	r3, [r7, #32]
 800c9dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c9e0:	e00f      	b.n	800ca02 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c9e2:	6a3b      	ldr	r3, [r7, #32]
 800c9e4:	68ba      	ldr	r2, [r7, #8]
 800c9e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c9ea:	e00a      	b.n	800ca02 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c9ec:	7ffb      	ldrb	r3, [r7, #31]
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d004      	beq.n	800c9fc <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c9f2:	6a3b      	ldr	r3, [r7, #32]
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c9fa:	e001      	b.n	800ca00 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800ca00:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ca02:	7ffb      	ldrb	r3, [r7, #31]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d139      	bne.n	800ca7c <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca08:	6a3b      	ldr	r3, [r7, #32]
 800ca0a:	3304      	adds	r3, #4
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7fe f883 	bl	800ab18 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ca12:	6a3b      	ldr	r3, [r7, #32]
 800ca14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca16:	2201      	movs	r2, #1
 800ca18:	409a      	lsls	r2, r3
 800ca1a:	4b1c      	ldr	r3, [pc, #112]	; (800ca8c <xTaskGenericNotify+0x144>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	4a1a      	ldr	r2, [pc, #104]	; (800ca8c <xTaskGenericNotify+0x144>)
 800ca22:	6013      	str	r3, [r2, #0]
 800ca24:	6a3b      	ldr	r3, [r7, #32]
 800ca26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca28:	4613      	mov	r3, r2
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	4413      	add	r3, r2
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	4a17      	ldr	r2, [pc, #92]	; (800ca90 <xTaskGenericNotify+0x148>)
 800ca32:	441a      	add	r2, r3
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	3304      	adds	r3, #4
 800ca38:	4619      	mov	r1, r3
 800ca3a:	4610      	mov	r0, r2
 800ca3c:	f7fe f811 	bl	800aa62 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ca40:	6a3b      	ldr	r3, [r7, #32]
 800ca42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00a      	beq.n	800ca5e <xTaskGenericNotify+0x116>
	__asm volatile
 800ca48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4c:	f383 8811 	msr	BASEPRI, r3
 800ca50:	f3bf 8f6f 	isb	sy
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	617b      	str	r3, [r7, #20]
}
 800ca5a:	bf00      	nop
 800ca5c:	e7fe      	b.n	800ca5c <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca5e:	6a3b      	ldr	r3, [r7, #32]
 800ca60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca62:	4b0c      	ldr	r3, [pc, #48]	; (800ca94 <xTaskGenericNotify+0x14c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d907      	bls.n	800ca7c <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ca6c:	4b0a      	ldr	r3, [pc, #40]	; (800ca98 <xTaskGenericNotify+0x150>)
 800ca6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca72:	601a      	str	r2, [r3, #0]
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ca7c:	f000 fdee 	bl	800d65c <vPortExitCritical>

		return xReturn;
 800ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3728      	adds	r7, #40	; 0x28
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	20001890 	.word	0x20001890
 800ca90:	2000178c 	.word	0x2000178c
 800ca94:	20001788 	.word	0x20001788
 800ca98:	e000ed04 	.word	0xe000ed04

0800ca9c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b08e      	sub	sp, #56	; 0x38
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	603b      	str	r3, [r7, #0]
 800caa8:	4613      	mov	r3, r2
 800caaa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800caac:	2301      	movs	r3, #1
 800caae:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d10a      	bne.n	800cacc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800cab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caba:	f383 8811 	msr	BASEPRI, r3
 800cabe:	f3bf 8f6f 	isb	sy
 800cac2:	f3bf 8f4f 	dsb	sy
 800cac6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cac8:	bf00      	nop
 800caca:	e7fe      	b.n	800caca <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cacc:	f000 fe58 	bl	800d780 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800cad4:	f3ef 8211 	mrs	r2, BASEPRI
 800cad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cadc:	f383 8811 	msr	BASEPRI, r3
 800cae0:	f3bf 8f6f 	isb	sy
 800cae4:	f3bf 8f4f 	dsb	sy
 800cae8:	623a      	str	r2, [r7, #32]
 800caea:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800caec:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800caee:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d004      	beq.n	800cb00 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800caf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb02:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800cb06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0c:	2202      	movs	r2, #2
 800cb0e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800cb12:	79fb      	ldrb	r3, [r7, #7]
 800cb14:	2b04      	cmp	r3, #4
 800cb16:	d82f      	bhi.n	800cb78 <xTaskGenericNotifyFromISR+0xdc>
 800cb18:	a201      	add	r2, pc, #4	; (adr r2, 800cb20 <xTaskGenericNotifyFromISR+0x84>)
 800cb1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1e:	bf00      	nop
 800cb20:	0800cb79 	.word	0x0800cb79
 800cb24:	0800cb35 	.word	0x0800cb35
 800cb28:	0800cb47 	.word	0x0800cb47
 800cb2c:	0800cb57 	.word	0x0800cb57
 800cb30:	0800cb61 	.word	0x0800cb61
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb36:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	431a      	orrs	r2, r3
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800cb44:	e018      	b.n	800cb78 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cb4c:	1c5a      	adds	r2, r3, #1
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800cb54:	e010      	b.n	800cb78 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb58:	68ba      	ldr	r2, [r7, #8]
 800cb5a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800cb5e:	e00b      	b.n	800cb78 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cb60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	d004      	beq.n	800cb72 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6a:	68ba      	ldr	r2, [r7, #8]
 800cb6c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cb70:	e001      	b.n	800cb76 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 800cb72:	2300      	movs	r3, #0
 800cb74:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800cb76:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cb78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d146      	bne.n	800cc0e <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00a      	beq.n	800cb9e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800cb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8c:	f383 8811 	msr	BASEPRI, r3
 800cb90:	f3bf 8f6f 	isb	sy
 800cb94:	f3bf 8f4f 	dsb	sy
 800cb98:	61bb      	str	r3, [r7, #24]
}
 800cb9a:	bf00      	nop
 800cb9c:	e7fe      	b.n	800cb9c <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb9e:	4b21      	ldr	r3, [pc, #132]	; (800cc24 <xTaskGenericNotifyFromISR+0x188>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d11c      	bne.n	800cbe0 <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba8:	3304      	adds	r3, #4
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7fd ffb4 	bl	800ab18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	409a      	lsls	r2, r3
 800cbb8:	4b1b      	ldr	r3, [pc, #108]	; (800cc28 <xTaskGenericNotifyFromISR+0x18c>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	4a1a      	ldr	r2, [pc, #104]	; (800cc28 <xTaskGenericNotifyFromISR+0x18c>)
 800cbc0:	6013      	str	r3, [r2, #0]
 800cbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	4413      	add	r3, r2
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	4a17      	ldr	r2, [pc, #92]	; (800cc2c <xTaskGenericNotifyFromISR+0x190>)
 800cbd0:	441a      	add	r2, r3
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd4:	3304      	adds	r3, #4
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	4610      	mov	r0, r2
 800cbda:	f7fd ff42 	bl	800aa62 <vListInsertEnd>
 800cbde:	e005      	b.n	800cbec <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800cbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe2:	3318      	adds	r3, #24
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	4812      	ldr	r0, [pc, #72]	; (800cc30 <xTaskGenericNotifyFromISR+0x194>)
 800cbe8:	f7fd ff3b 	bl	800aa62 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbf0:	4b10      	ldr	r3, [pc, #64]	; (800cc34 <xTaskGenericNotifyFromISR+0x198>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d909      	bls.n	800cc0e <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800cbfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d003      	beq.n	800cc08 <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800cc00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc02:	2201      	movs	r2, #1
 800cc04:	601a      	str	r2, [r3, #0]
 800cc06:	e002      	b.n	800cc0e <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800cc08:	4b0b      	ldr	r3, [pc, #44]	; (800cc38 <xTaskGenericNotifyFromISR+0x19c>)
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	601a      	str	r2, [r3, #0]
 800cc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc10:	617b      	str	r3, [r7, #20]
	__asm volatile
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	f383 8811 	msr	BASEPRI, r3
}
 800cc18:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800cc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3738      	adds	r7, #56	; 0x38
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	200018b0 	.word	0x200018b0
 800cc28:	20001890 	.word	0x20001890
 800cc2c:	2000178c 	.word	0x2000178c
 800cc30:	20001848 	.word	0x20001848
 800cc34:	20001788 	.word	0x20001788
 800cc38:	2000189c 	.word	0x2000189c

0800cc3c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc46:	4b29      	ldr	r3, [pc, #164]	; (800ccec <prvAddCurrentTaskToDelayedList+0xb0>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc4c:	4b28      	ldr	r3, [pc, #160]	; (800ccf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	3304      	adds	r3, #4
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fd ff60 	bl	800ab18 <uxListRemove>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d10b      	bne.n	800cc76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800cc5e:	4b24      	ldr	r3, [pc, #144]	; (800ccf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc64:	2201      	movs	r2, #1
 800cc66:	fa02 f303 	lsl.w	r3, r2, r3
 800cc6a:	43da      	mvns	r2, r3
 800cc6c:	4b21      	ldr	r3, [pc, #132]	; (800ccf4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4013      	ands	r3, r2
 800cc72:	4a20      	ldr	r2, [pc, #128]	; (800ccf4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cc74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc7c:	d10a      	bne.n	800cc94 <prvAddCurrentTaskToDelayedList+0x58>
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d007      	beq.n	800cc94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc84:	4b1a      	ldr	r3, [pc, #104]	; (800ccf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	3304      	adds	r3, #4
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	481a      	ldr	r0, [pc, #104]	; (800ccf8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cc8e:	f7fd fee8 	bl	800aa62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc92:	e026      	b.n	800cce2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	4413      	add	r3, r2
 800cc9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cc9c:	4b14      	ldr	r3, [pc, #80]	; (800ccf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	68ba      	ldr	r2, [r7, #8]
 800cca2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cca4:	68ba      	ldr	r2, [r7, #8]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d209      	bcs.n	800ccc0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccac:	4b13      	ldr	r3, [pc, #76]	; (800ccfc <prvAddCurrentTaskToDelayedList+0xc0>)
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	4b0f      	ldr	r3, [pc, #60]	; (800ccf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	3304      	adds	r3, #4
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	4610      	mov	r0, r2
 800ccba:	f7fd fef5 	bl	800aaa8 <vListInsert>
}
 800ccbe:	e010      	b.n	800cce2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccc0:	4b0f      	ldr	r3, [pc, #60]	; (800cd00 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	4b0a      	ldr	r3, [pc, #40]	; (800ccf0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	3304      	adds	r3, #4
 800ccca:	4619      	mov	r1, r3
 800cccc:	4610      	mov	r0, r2
 800ccce:	f7fd feeb 	bl	800aaa8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ccd2:	4b0c      	ldr	r3, [pc, #48]	; (800cd04 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	68ba      	ldr	r2, [r7, #8]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d202      	bcs.n	800cce2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ccdc:	4a09      	ldr	r2, [pc, #36]	; (800cd04 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	6013      	str	r3, [r2, #0]
}
 800cce2:	bf00      	nop
 800cce4:	3710      	adds	r7, #16
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	2000188c 	.word	0x2000188c
 800ccf0:	20001788 	.word	0x20001788
 800ccf4:	20001890 	.word	0x20001890
 800ccf8:	20001874 	.word	0x20001874
 800ccfc:	20001844 	.word	0x20001844
 800cd00:	20001840 	.word	0x20001840
 800cd04:	200018a8 	.word	0x200018a8

0800cd08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08a      	sub	sp, #40	; 0x28
 800cd0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cd12:	f000 fb41 	bl	800d398 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cd16:	4b1c      	ldr	r3, [pc, #112]	; (800cd88 <xTimerCreateTimerTask+0x80>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d021      	beq.n	800cd62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cd22:	2300      	movs	r3, #0
 800cd24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cd26:	1d3a      	adds	r2, r7, #4
 800cd28:	f107 0108 	add.w	r1, r7, #8
 800cd2c:	f107 030c 	add.w	r3, r7, #12
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7f5 f921 	bl	8001f78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cd36:	6879      	ldr	r1, [r7, #4]
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	9202      	str	r2, [sp, #8]
 800cd3e:	9301      	str	r3, [sp, #4]
 800cd40:	2302      	movs	r3, #2
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	2300      	movs	r3, #0
 800cd46:	460a      	mov	r2, r1
 800cd48:	4910      	ldr	r1, [pc, #64]	; (800cd8c <xTimerCreateTimerTask+0x84>)
 800cd4a:	4811      	ldr	r0, [pc, #68]	; (800cd90 <xTimerCreateTimerTask+0x88>)
 800cd4c:	f7fe fcac 	bl	800b6a8 <xTaskCreateStatic>
 800cd50:	4603      	mov	r3, r0
 800cd52:	4a10      	ldr	r2, [pc, #64]	; (800cd94 <xTimerCreateTimerTask+0x8c>)
 800cd54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cd56:	4b0f      	ldr	r3, [pc, #60]	; (800cd94 <xTimerCreateTimerTask+0x8c>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d001      	beq.n	800cd62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10a      	bne.n	800cd7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6c:	f383 8811 	msr	BASEPRI, r3
 800cd70:	f3bf 8f6f 	isb	sy
 800cd74:	f3bf 8f4f 	dsb	sy
 800cd78:	613b      	str	r3, [r7, #16]
}
 800cd7a:	bf00      	nop
 800cd7c:	e7fe      	b.n	800cd7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cd7e:	697b      	ldr	r3, [r7, #20]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3718      	adds	r7, #24
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	200018e4 	.word	0x200018e4
 800cd8c:	0800ea10 	.word	0x0800ea10
 800cd90:	0800cfd5 	.word	0x0800cfd5
 800cd94:	200018e8 	.word	0x200018e8

0800cd98 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b088      	sub	sp, #32
 800cd9c:	af02      	add	r7, sp, #8
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	607a      	str	r2, [r7, #4]
 800cda4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800cda6:	202c      	movs	r0, #44	; 0x2c
 800cda8:	f000 fd28 	bl	800d7fc <pvPortMalloc>
 800cdac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00d      	beq.n	800cdd0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	9301      	str	r3, [sp, #4]
 800cdb8:	6a3b      	ldr	r3, [r7, #32]
 800cdba:	9300      	str	r3, [sp, #0]
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	68b9      	ldr	r1, [r7, #8]
 800cdc2:	68f8      	ldr	r0, [r7, #12]
 800cdc4:	f000 f846 	bl	800ce54 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800cdd0:	697b      	ldr	r3, [r7, #20]
	}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3718      	adds	r7, #24
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b08a      	sub	sp, #40	; 0x28
 800cdde:	af02      	add	r7, sp, #8
 800cde0:	60f8      	str	r0, [r7, #12]
 800cde2:	60b9      	str	r1, [r7, #8]
 800cde4:	607a      	str	r2, [r7, #4]
 800cde6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800cde8:	232c      	movs	r3, #44	; 0x2c
 800cdea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	2b2c      	cmp	r3, #44	; 0x2c
 800cdf0:	d00a      	beq.n	800ce08 <xTimerCreateStatic+0x2e>
	__asm volatile
 800cdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf6:	f383 8811 	msr	BASEPRI, r3
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	61bb      	str	r3, [r7, #24]
}
 800ce04:	bf00      	nop
 800ce06:	e7fe      	b.n	800ce06 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10a      	bne.n	800ce24 <xTimerCreateStatic+0x4a>
	__asm volatile
 800ce0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	617b      	str	r3, [r7, #20]
}
 800ce20:	bf00      	nop
 800ce22:	e7fe      	b.n	800ce22 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce26:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00d      	beq.n	800ce4a <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	9301      	str	r3, [sp, #4]
 800ce32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce34:	9300      	str	r3, [sp, #0]
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	68b9      	ldr	r1, [r7, #8]
 800ce3c:	68f8      	ldr	r0, [r7, #12]
 800ce3e:	f000 f809 	bl	800ce54 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800ce42:	69fb      	ldr	r3, [r7, #28]
 800ce44:	2201      	movs	r2, #1
 800ce46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800ce4a:	69fb      	ldr	r3, [r7, #28]
	}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3720      	adds	r7, #32
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	607a      	str	r2, [r7, #4]
 800ce60:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10a      	bne.n	800ce7e <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ce68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6c:	f383 8811 	msr	BASEPRI, r3
 800ce70:	f3bf 8f6f 	isb	sy
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	617b      	str	r3, [r7, #20]
}
 800ce7a:	bf00      	nop
 800ce7c:	e7fe      	b.n	800ce7c <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d015      	beq.n	800ceb0 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ce84:	f000 fa88 	bl	800d398 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ce8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800ce94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9c:	683a      	ldr	r2, [r7, #0]
 800ce9e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800cea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea2:	6a3a      	ldr	r2, [r7, #32]
 800cea4:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800cea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea8:	3304      	adds	r3, #4
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7fd fdcd 	bl	800aa4a <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ceb0:	bf00      	nop
 800ceb2:	3718      	adds	r7, #24
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b08a      	sub	sp, #40	; 0x28
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
 800cec4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cec6:	2300      	movs	r3, #0
 800cec8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d10a      	bne.n	800cee6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ced0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced4:	f383 8811 	msr	BASEPRI, r3
 800ced8:	f3bf 8f6f 	isb	sy
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	623b      	str	r3, [r7, #32]
}
 800cee2:	bf00      	nop
 800cee4:	e7fe      	b.n	800cee4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cee6:	4b1a      	ldr	r3, [pc, #104]	; (800cf50 <xTimerGenericCommand+0x98>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d02a      	beq.n	800cf44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	2b05      	cmp	r3, #5
 800cefe:	dc18      	bgt.n	800cf32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cf00:	f7ff fc1e 	bl	800c740 <xTaskGetSchedulerState>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b02      	cmp	r3, #2
 800cf08:	d109      	bne.n	800cf1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cf0a:	4b11      	ldr	r3, [pc, #68]	; (800cf50 <xTimerGenericCommand+0x98>)
 800cf0c:	6818      	ldr	r0, [r3, #0]
 800cf0e:	f107 0114 	add.w	r1, r7, #20
 800cf12:	2300      	movs	r3, #0
 800cf14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf16:	f7fd ff65 	bl	800ade4 <xQueueGenericSend>
 800cf1a:	6278      	str	r0, [r7, #36]	; 0x24
 800cf1c:	e012      	b.n	800cf44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf1e:	4b0c      	ldr	r3, [pc, #48]	; (800cf50 <xTimerGenericCommand+0x98>)
 800cf20:	6818      	ldr	r0, [r3, #0]
 800cf22:	f107 0114 	add.w	r1, r7, #20
 800cf26:	2300      	movs	r3, #0
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f7fd ff5b 	bl	800ade4 <xQueueGenericSend>
 800cf2e:	6278      	str	r0, [r7, #36]	; 0x24
 800cf30:	e008      	b.n	800cf44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cf32:	4b07      	ldr	r3, [pc, #28]	; (800cf50 <xTimerGenericCommand+0x98>)
 800cf34:	6818      	ldr	r0, [r3, #0]
 800cf36:	f107 0114 	add.w	r1, r7, #20
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	683a      	ldr	r2, [r7, #0]
 800cf3e:	f7fe f84f 	bl	800afe0 <xQueueGenericSendFromISR>
 800cf42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3728      	adds	r7, #40	; 0x28
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	200018e4 	.word	0x200018e4

0800cf54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b088      	sub	sp, #32
 800cf58:	af02      	add	r7, sp, #8
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf5e:	4b1c      	ldr	r3, [pc, #112]	; (800cfd0 <prvProcessExpiredTimer+0x7c>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	3304      	adds	r3, #4
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7fd fdd3 	bl	800ab18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	69db      	ldr	r3, [r3, #28]
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d122      	bne.n	800cfc0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	699a      	ldr	r2, [r3, #24]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	18d1      	adds	r1, r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	683a      	ldr	r2, [r7, #0]
 800cf86:	6978      	ldr	r0, [r7, #20]
 800cf88:	f000 f8c8 	bl	800d11c <prvInsertTimerInActiveList>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d016      	beq.n	800cfc0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf92:	2300      	movs	r3, #0
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	2300      	movs	r3, #0
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	6978      	ldr	r0, [r7, #20]
 800cf9e:	f7ff ff8b 	bl	800ceb8 <xTimerGenericCommand>
 800cfa2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d10a      	bne.n	800cfc0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800cfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfae:	f383 8811 	msr	BASEPRI, r3
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	f3bf 8f4f 	dsb	sy
 800cfba:	60fb      	str	r3, [r7, #12]
}
 800cfbc:	bf00      	nop
 800cfbe:	e7fe      	b.n	800cfbe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc4:	6978      	ldr	r0, [r7, #20]
 800cfc6:	4798      	blx	r3
}
 800cfc8:	bf00      	nop
 800cfca:	3718      	adds	r7, #24
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	200018dc 	.word	0x200018dc

0800cfd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cfdc:	f107 0308 	add.w	r3, r7, #8
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f000 f857 	bl	800d094 <prvGetNextExpireTime>
 800cfe6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	4619      	mov	r1, r3
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f000 f803 	bl	800cff8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cff2:	f000 f8d5 	bl	800d1a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cff6:	e7f1      	b.n	800cfdc <prvTimerTask+0x8>

0800cff8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d002:	f7fe ffb1 	bl	800bf68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d006:	f107 0308 	add.w	r3, r7, #8
 800d00a:	4618      	mov	r0, r3
 800d00c:	f000 f866 	bl	800d0dc <prvSampleTimeNow>
 800d010:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d130      	bne.n	800d07a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d10a      	bne.n	800d034 <prvProcessTimerOrBlockTask+0x3c>
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	429a      	cmp	r2, r3
 800d024:	d806      	bhi.n	800d034 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d026:	f7fe ffad 	bl	800bf84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d02a:	68f9      	ldr	r1, [r7, #12]
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7ff ff91 	bl	800cf54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d032:	e024      	b.n	800d07e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d008      	beq.n	800d04c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d03a:	4b13      	ldr	r3, [pc, #76]	; (800d088 <prvProcessTimerOrBlockTask+0x90>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	bf0c      	ite	eq
 800d044:	2301      	moveq	r3, #1
 800d046:	2300      	movne	r3, #0
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d04c:	4b0f      	ldr	r3, [pc, #60]	; (800d08c <prvProcessTimerOrBlockTask+0x94>)
 800d04e:	6818      	ldr	r0, [r3, #0]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	1ad3      	subs	r3, r2, r3
 800d056:	683a      	ldr	r2, [r7, #0]
 800d058:	4619      	mov	r1, r3
 800d05a:	f7fe faf1 	bl	800b640 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d05e:	f7fe ff91 	bl	800bf84 <xTaskResumeAll>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d10a      	bne.n	800d07e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d068:	4b09      	ldr	r3, [pc, #36]	; (800d090 <prvProcessTimerOrBlockTask+0x98>)
 800d06a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d06e:	601a      	str	r2, [r3, #0]
 800d070:	f3bf 8f4f 	dsb	sy
 800d074:	f3bf 8f6f 	isb	sy
}
 800d078:	e001      	b.n	800d07e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d07a:	f7fe ff83 	bl	800bf84 <xTaskResumeAll>
}
 800d07e:	bf00      	nop
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	200018e0 	.word	0x200018e0
 800d08c:	200018e4 	.word	0x200018e4
 800d090:	e000ed04 	.word	0xe000ed04

0800d094 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d094:	b480      	push	{r7}
 800d096:	b085      	sub	sp, #20
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d09c:	4b0e      	ldr	r3, [pc, #56]	; (800d0d8 <prvGetNextExpireTime+0x44>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	bf0c      	ite	eq
 800d0a6:	2301      	moveq	r3, #1
 800d0a8:	2300      	movne	r3, #0
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d105      	bne.n	800d0c6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0ba:	4b07      	ldr	r3, [pc, #28]	; (800d0d8 <prvGetNextExpireTime+0x44>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	60fb      	str	r3, [r7, #12]
 800d0c4:	e001      	b.n	800d0ca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3714      	adds	r7, #20
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bc80      	pop	{r7}
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	200018dc 	.word	0x200018dc

0800d0dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d0e4:	f7fe ffea 	bl	800c0bc <xTaskGetTickCount>
 800d0e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d0ea:	4b0b      	ldr	r3, [pc, #44]	; (800d118 <prvSampleTimeNow+0x3c>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	68fa      	ldr	r2, [r7, #12]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d205      	bcs.n	800d100 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d0f4:	f000 f8ee 	bl	800d2d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	601a      	str	r2, [r3, #0]
 800d0fe:	e002      	b.n	800d106 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d106:	4a04      	ldr	r2, [pc, #16]	; (800d118 <prvSampleTimeNow+0x3c>)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d10c:	68fb      	ldr	r3, [r7, #12]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	200018ec 	.word	0x200018ec

0800d11c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b086      	sub	sp, #24
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
 800d128:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d12a:	2300      	movs	r3, #0
 800d12c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	68ba      	ldr	r2, [r7, #8]
 800d132:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	68fa      	ldr	r2, [r7, #12]
 800d138:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d812      	bhi.n	800d168 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	1ad2      	subs	r2, r2, r3
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	699b      	ldr	r3, [r3, #24]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d302      	bcc.n	800d156 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d150:	2301      	movs	r3, #1
 800d152:	617b      	str	r3, [r7, #20]
 800d154:	e01b      	b.n	800d18e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d156:	4b10      	ldr	r3, [pc, #64]	; (800d198 <prvInsertTimerInActiveList+0x7c>)
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	3304      	adds	r3, #4
 800d15e:	4619      	mov	r1, r3
 800d160:	4610      	mov	r0, r2
 800d162:	f7fd fca1 	bl	800aaa8 <vListInsert>
 800d166:	e012      	b.n	800d18e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d206      	bcs.n	800d17e <prvInsertTimerInActiveList+0x62>
 800d170:	68ba      	ldr	r2, [r7, #8]
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	429a      	cmp	r2, r3
 800d176:	d302      	bcc.n	800d17e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d178:	2301      	movs	r3, #1
 800d17a:	617b      	str	r3, [r7, #20]
 800d17c:	e007      	b.n	800d18e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d17e:	4b07      	ldr	r3, [pc, #28]	; (800d19c <prvInsertTimerInActiveList+0x80>)
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	3304      	adds	r3, #4
 800d186:	4619      	mov	r1, r3
 800d188:	4610      	mov	r0, r2
 800d18a:	f7fd fc8d 	bl	800aaa8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d18e:	697b      	ldr	r3, [r7, #20]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3718      	adds	r7, #24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	200018e0 	.word	0x200018e0
 800d19c:	200018dc 	.word	0x200018dc

0800d1a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b08c      	sub	sp, #48	; 0x30
 800d1a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d1a6:	e081      	b.n	800d2ac <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	db7e      	blt.n	800d2ac <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b4:	695b      	ldr	r3, [r3, #20]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d004      	beq.n	800d1c4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1bc:	3304      	adds	r3, #4
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fd fcaa 	bl	800ab18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d1c4:	1d3b      	adds	r3, r7, #4
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7ff ff88 	bl	800d0dc <prvSampleTimeNow>
 800d1cc:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	2b09      	cmp	r3, #9
 800d1d2:	d86a      	bhi.n	800d2aa <prvProcessReceivedCommands+0x10a>
 800d1d4:	a201      	add	r2, pc, #4	; (adr r2, 800d1dc <prvProcessReceivedCommands+0x3c>)
 800d1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1da:	bf00      	nop
 800d1dc:	0800d205 	.word	0x0800d205
 800d1e0:	0800d205 	.word	0x0800d205
 800d1e4:	0800d205 	.word	0x0800d205
 800d1e8:	0800d2ad 	.word	0x0800d2ad
 800d1ec:	0800d261 	.word	0x0800d261
 800d1f0:	0800d299 	.word	0x0800d299
 800d1f4:	0800d205 	.word	0x0800d205
 800d1f8:	0800d205 	.word	0x0800d205
 800d1fc:	0800d2ad 	.word	0x0800d2ad
 800d200:	0800d261 	.word	0x0800d261
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d208:	699b      	ldr	r3, [r3, #24]
 800d20a:	18d1      	adds	r1, r2, r3
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6a3a      	ldr	r2, [r7, #32]
 800d210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d212:	f7ff ff83 	bl	800d11c <prvInsertTimerInActiveList>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d047      	beq.n	800d2ac <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d222:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d226:	69db      	ldr	r3, [r3, #28]
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d13f      	bne.n	800d2ac <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d230:	699b      	ldr	r3, [r3, #24]
 800d232:	441a      	add	r2, r3
 800d234:	2300      	movs	r3, #0
 800d236:	9300      	str	r3, [sp, #0]
 800d238:	2300      	movs	r3, #0
 800d23a:	2100      	movs	r1, #0
 800d23c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d23e:	f7ff fe3b 	bl	800ceb8 <xTimerGenericCommand>
 800d242:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d130      	bne.n	800d2ac <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800d24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24e:	f383 8811 	msr	BASEPRI, r3
 800d252:	f3bf 8f6f 	isb	sy
 800d256:	f3bf 8f4f 	dsb	sy
 800d25a:	61bb      	str	r3, [r7, #24]
}
 800d25c:	bf00      	nop
 800d25e:	e7fe      	b.n	800d25e <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d260:	68fa      	ldr	r2, [r7, #12]
 800d262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d264:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d268:	699b      	ldr	r3, [r3, #24]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d10a      	bne.n	800d284 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800d26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d272:	f383 8811 	msr	BASEPRI, r3
 800d276:	f3bf 8f6f 	isb	sy
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	617b      	str	r3, [r7, #20]
}
 800d280:	bf00      	nop
 800d282:	e7fe      	b.n	800d282 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d286:	699a      	ldr	r2, [r3, #24]
 800d288:	6a3b      	ldr	r3, [r7, #32]
 800d28a:	18d1      	adds	r1, r2, r3
 800d28c:	6a3b      	ldr	r3, [r7, #32]
 800d28e:	6a3a      	ldr	r2, [r7, #32]
 800d290:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d292:	f7ff ff43 	bl	800d11c <prvInsertTimerInActiveList>
					break;
 800d296:	e009      	b.n	800d2ac <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d104      	bne.n	800d2ac <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800d2a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2a4:	f000 fb6e 	bl	800d984 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d2a8:	e000      	b.n	800d2ac <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 800d2aa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d2ac:	4b08      	ldr	r3, [pc, #32]	; (800d2d0 <prvProcessReceivedCommands+0x130>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f107 0108 	add.w	r1, r7, #8
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7fd ff2a 	bl	800b110 <xQueueReceive>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f47f af72 	bne.w	800d1a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d2c4:	bf00      	nop
 800d2c6:	bf00      	nop
 800d2c8:	3728      	adds	r7, #40	; 0x28
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	200018e4 	.word	0x200018e4

0800d2d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b088      	sub	sp, #32
 800d2d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d2da:	e045      	b.n	800d368 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2dc:	4b2c      	ldr	r3, [pc, #176]	; (800d390 <prvSwitchTimerLists+0xbc>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2e6:	4b2a      	ldr	r3, [pc, #168]	; (800d390 <prvSwitchTimerLists+0xbc>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	3304      	adds	r3, #4
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7fd fc0f 	bl	800ab18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	69db      	ldr	r3, [r3, #28]
 800d306:	2b01      	cmp	r3, #1
 800d308:	d12e      	bne.n	800d368 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	699b      	ldr	r3, [r3, #24]
 800d30e:	693a      	ldr	r2, [r7, #16]
 800d310:	4413      	add	r3, r2
 800d312:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d314:	68ba      	ldr	r2, [r7, #8]
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d90e      	bls.n	800d33a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	68ba      	ldr	r2, [r7, #8]
 800d320:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	68fa      	ldr	r2, [r7, #12]
 800d326:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d328:	4b19      	ldr	r3, [pc, #100]	; (800d390 <prvSwitchTimerLists+0xbc>)
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	3304      	adds	r3, #4
 800d330:	4619      	mov	r1, r3
 800d332:	4610      	mov	r0, r2
 800d334:	f7fd fbb8 	bl	800aaa8 <vListInsert>
 800d338:	e016      	b.n	800d368 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d33a:	2300      	movs	r3, #0
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	2300      	movs	r3, #0
 800d340:	693a      	ldr	r2, [r7, #16]
 800d342:	2100      	movs	r1, #0
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f7ff fdb7 	bl	800ceb8 <xTimerGenericCommand>
 800d34a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d10a      	bne.n	800d368 <prvSwitchTimerLists+0x94>
	__asm volatile
 800d352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d356:	f383 8811 	msr	BASEPRI, r3
 800d35a:	f3bf 8f6f 	isb	sy
 800d35e:	f3bf 8f4f 	dsb	sy
 800d362:	603b      	str	r3, [r7, #0]
}
 800d364:	bf00      	nop
 800d366:	e7fe      	b.n	800d366 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d368:	4b09      	ldr	r3, [pc, #36]	; (800d390 <prvSwitchTimerLists+0xbc>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d1b4      	bne.n	800d2dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d372:	4b07      	ldr	r3, [pc, #28]	; (800d390 <prvSwitchTimerLists+0xbc>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d378:	4b06      	ldr	r3, [pc, #24]	; (800d394 <prvSwitchTimerLists+0xc0>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a04      	ldr	r2, [pc, #16]	; (800d390 <prvSwitchTimerLists+0xbc>)
 800d37e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d380:	4a04      	ldr	r2, [pc, #16]	; (800d394 <prvSwitchTimerLists+0xc0>)
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	6013      	str	r3, [r2, #0]
}
 800d386:	bf00      	nop
 800d388:	3718      	adds	r7, #24
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	200018dc 	.word	0x200018dc
 800d394:	200018e0 	.word	0x200018e0

0800d398 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d39e:	f000 f92d 	bl	800d5fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d3a2:	4b15      	ldr	r3, [pc, #84]	; (800d3f8 <prvCheckForValidListAndQueue+0x60>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d120      	bne.n	800d3ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d3aa:	4814      	ldr	r0, [pc, #80]	; (800d3fc <prvCheckForValidListAndQueue+0x64>)
 800d3ac:	f7fd fb2e 	bl	800aa0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d3b0:	4813      	ldr	r0, [pc, #76]	; (800d400 <prvCheckForValidListAndQueue+0x68>)
 800d3b2:	f7fd fb2b 	bl	800aa0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d3b6:	4b13      	ldr	r3, [pc, #76]	; (800d404 <prvCheckForValidListAndQueue+0x6c>)
 800d3b8:	4a10      	ldr	r2, [pc, #64]	; (800d3fc <prvCheckForValidListAndQueue+0x64>)
 800d3ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d3bc:	4b12      	ldr	r3, [pc, #72]	; (800d408 <prvCheckForValidListAndQueue+0x70>)
 800d3be:	4a10      	ldr	r2, [pc, #64]	; (800d400 <prvCheckForValidListAndQueue+0x68>)
 800d3c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	4b11      	ldr	r3, [pc, #68]	; (800d40c <prvCheckForValidListAndQueue+0x74>)
 800d3c8:	4a11      	ldr	r2, [pc, #68]	; (800d410 <prvCheckForValidListAndQueue+0x78>)
 800d3ca:	210c      	movs	r1, #12
 800d3cc:	200a      	movs	r0, #10
 800d3ce:	f7fd fc35 	bl	800ac3c <xQueueGenericCreateStatic>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	4a08      	ldr	r2, [pc, #32]	; (800d3f8 <prvCheckForValidListAndQueue+0x60>)
 800d3d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d3d8:	4b07      	ldr	r3, [pc, #28]	; (800d3f8 <prvCheckForValidListAndQueue+0x60>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d005      	beq.n	800d3ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d3e0:	4b05      	ldr	r3, [pc, #20]	; (800d3f8 <prvCheckForValidListAndQueue+0x60>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	490b      	ldr	r1, [pc, #44]	; (800d414 <prvCheckForValidListAndQueue+0x7c>)
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fe f902 	bl	800b5f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3ec:	f000 f936 	bl	800d65c <vPortExitCritical>
}
 800d3f0:	bf00      	nop
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	200018e4 	.word	0x200018e4
 800d3fc:	200018b4 	.word	0x200018b4
 800d400:	200018c8 	.word	0x200018c8
 800d404:	200018dc 	.word	0x200018dc
 800d408:	200018e0 	.word	0x200018e0
 800d40c:	20001968 	.word	0x20001968
 800d410:	200018f0 	.word	0x200018f0
 800d414:	0800ea18 	.word	0x0800ea18

0800d418 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d418:	b480      	push	{r7}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	3b04      	subs	r3, #4
 800d428:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	3b04      	subs	r3, #4
 800d436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	f023 0201 	bic.w	r2, r3, #1
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	3b04      	subs	r3, #4
 800d446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d448:	4a08      	ldr	r2, [pc, #32]	; (800d46c <pxPortInitialiseStack+0x54>)
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	3b14      	subs	r3, #20
 800d452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	3b20      	subs	r3, #32
 800d45e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d460:	68fb      	ldr	r3, [r7, #12]
}
 800d462:	4618      	mov	r0, r3
 800d464:	3714      	adds	r7, #20
 800d466:	46bd      	mov	sp, r7
 800d468:	bc80      	pop	{r7}
 800d46a:	4770      	bx	lr
 800d46c:	0800d471 	.word	0x0800d471

0800d470 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800d476:	2300      	movs	r3, #0
 800d478:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d47a:	4b12      	ldr	r3, [pc, #72]	; (800d4c4 <prvTaskExitError+0x54>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d482:	d00a      	beq.n	800d49a <prvTaskExitError+0x2a>
	__asm volatile
 800d484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d488:	f383 8811 	msr	BASEPRI, r3
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	60fb      	str	r3, [r7, #12]
}
 800d496:	bf00      	nop
 800d498:	e7fe      	b.n	800d498 <prvTaskExitError+0x28>
	__asm volatile
 800d49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49e:	f383 8811 	msr	BASEPRI, r3
 800d4a2:	f3bf 8f6f 	isb	sy
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	60bb      	str	r3, [r7, #8]
}
 800d4ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d4ae:	bf00      	nop
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d0fc      	beq.n	800d4b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d4b6:	bf00      	nop
 800d4b8:	bf00      	nop
 800d4ba:	3714      	adds	r7, #20
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bc80      	pop	{r7}
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop
 800d4c4:	2000020c 	.word	0x2000020c
	...

0800d4d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d4d0:	4b07      	ldr	r3, [pc, #28]	; (800d4f0 <pxCurrentTCBConst2>)
 800d4d2:	6819      	ldr	r1, [r3, #0]
 800d4d4:	6808      	ldr	r0, [r1, #0]
 800d4d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d4da:	f380 8809 	msr	PSP, r0
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f04f 0000 	mov.w	r0, #0
 800d4e6:	f380 8811 	msr	BASEPRI, r0
 800d4ea:	f04e 0e0d 	orr.w	lr, lr, #13
 800d4ee:	4770      	bx	lr

0800d4f0 <pxCurrentTCBConst2>:
 800d4f0:	20001788 	.word	0x20001788
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d4f4:	bf00      	nop
 800d4f6:	bf00      	nop

0800d4f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800d4f8:	4806      	ldr	r0, [pc, #24]	; (800d514 <prvPortStartFirstTask+0x1c>)
 800d4fa:	6800      	ldr	r0, [r0, #0]
 800d4fc:	6800      	ldr	r0, [r0, #0]
 800d4fe:	f380 8808 	msr	MSP, r0
 800d502:	b662      	cpsie	i
 800d504:	b661      	cpsie	f
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	df00      	svc	0
 800d510:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d512:	bf00      	nop
 800d514:	e000ed08 	.word	0xe000ed08

0800d518 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d51e:	4b32      	ldr	r3, [pc, #200]	; (800d5e8 <xPortStartScheduler+0xd0>)
 800d520:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	b2db      	uxtb	r3, r3
 800d528:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	22ff      	movs	r2, #255	; 0xff
 800d52e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	b2db      	uxtb	r3, r3
 800d536:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d538:	78fb      	ldrb	r3, [r7, #3]
 800d53a:	b2db      	uxtb	r3, r3
 800d53c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d540:	b2da      	uxtb	r2, r3
 800d542:	4b2a      	ldr	r3, [pc, #168]	; (800d5ec <xPortStartScheduler+0xd4>)
 800d544:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d546:	4b2a      	ldr	r3, [pc, #168]	; (800d5f0 <xPortStartScheduler+0xd8>)
 800d548:	2207      	movs	r2, #7
 800d54a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d54c:	e009      	b.n	800d562 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d54e:	4b28      	ldr	r3, [pc, #160]	; (800d5f0 <xPortStartScheduler+0xd8>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	3b01      	subs	r3, #1
 800d554:	4a26      	ldr	r2, [pc, #152]	; (800d5f0 <xPortStartScheduler+0xd8>)
 800d556:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d558:	78fb      	ldrb	r3, [r7, #3]
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	005b      	lsls	r3, r3, #1
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d562:	78fb      	ldrb	r3, [r7, #3]
 800d564:	b2db      	uxtb	r3, r3
 800d566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d56a:	2b80      	cmp	r3, #128	; 0x80
 800d56c:	d0ef      	beq.n	800d54e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d56e:	4b20      	ldr	r3, [pc, #128]	; (800d5f0 <xPortStartScheduler+0xd8>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f1c3 0307 	rsb	r3, r3, #7
 800d576:	2b04      	cmp	r3, #4
 800d578:	d00a      	beq.n	800d590 <xPortStartScheduler+0x78>
	__asm volatile
 800d57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57e:	f383 8811 	msr	BASEPRI, r3
 800d582:	f3bf 8f6f 	isb	sy
 800d586:	f3bf 8f4f 	dsb	sy
 800d58a:	60bb      	str	r3, [r7, #8]
}
 800d58c:	bf00      	nop
 800d58e:	e7fe      	b.n	800d58e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d590:	4b17      	ldr	r3, [pc, #92]	; (800d5f0 <xPortStartScheduler+0xd8>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	021b      	lsls	r3, r3, #8
 800d596:	4a16      	ldr	r2, [pc, #88]	; (800d5f0 <xPortStartScheduler+0xd8>)
 800d598:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d59a:	4b15      	ldr	r3, [pc, #84]	; (800d5f0 <xPortStartScheduler+0xd8>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d5a2:	4a13      	ldr	r2, [pc, #76]	; (800d5f0 <xPortStartScheduler+0xd8>)
 800d5a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d5ae:	4b11      	ldr	r3, [pc, #68]	; (800d5f4 <xPortStartScheduler+0xdc>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4a10      	ldr	r2, [pc, #64]	; (800d5f4 <xPortStartScheduler+0xdc>)
 800d5b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d5b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d5ba:	4b0e      	ldr	r3, [pc, #56]	; (800d5f4 <xPortStartScheduler+0xdc>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4a0d      	ldr	r2, [pc, #52]	; (800d5f4 <xPortStartScheduler+0xdc>)
 800d5c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d5c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d5c6:	f000 f8b9 	bl	800d73c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d5ca:	4b0b      	ldr	r3, [pc, #44]	; (800d5f8 <xPortStartScheduler+0xe0>)
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d5d0:	f7ff ff92 	bl	800d4f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d5d4:	f7fe fe3e 	bl	800c254 <vTaskSwitchContext>
	prvTaskExitError();
 800d5d8:	f7ff ff4a 	bl	800d470 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3710      	adds	r7, #16
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	e000e400 	.word	0xe000e400
 800d5ec:	200019b0 	.word	0x200019b0
 800d5f0:	200019b4 	.word	0x200019b4
 800d5f4:	e000ed20 	.word	0xe000ed20
 800d5f8:	2000020c 	.word	0x2000020c

0800d5fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
	__asm volatile
 800d602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d606:	f383 8811 	msr	BASEPRI, r3
 800d60a:	f3bf 8f6f 	isb	sy
 800d60e:	f3bf 8f4f 	dsb	sy
 800d612:	607b      	str	r3, [r7, #4]
}
 800d614:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d616:	4b0f      	ldr	r3, [pc, #60]	; (800d654 <vPortEnterCritical+0x58>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	3301      	adds	r3, #1
 800d61c:	4a0d      	ldr	r2, [pc, #52]	; (800d654 <vPortEnterCritical+0x58>)
 800d61e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d620:	4b0c      	ldr	r3, [pc, #48]	; (800d654 <vPortEnterCritical+0x58>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2b01      	cmp	r3, #1
 800d626:	d10f      	bne.n	800d648 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d628:	4b0b      	ldr	r3, [pc, #44]	; (800d658 <vPortEnterCritical+0x5c>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00a      	beq.n	800d648 <vPortEnterCritical+0x4c>
	__asm volatile
 800d632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d636:	f383 8811 	msr	BASEPRI, r3
 800d63a:	f3bf 8f6f 	isb	sy
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	603b      	str	r3, [r7, #0]
}
 800d644:	bf00      	nop
 800d646:	e7fe      	b.n	800d646 <vPortEnterCritical+0x4a>
	}
}
 800d648:	bf00      	nop
 800d64a:	370c      	adds	r7, #12
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bc80      	pop	{r7}
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	2000020c 	.word	0x2000020c
 800d658:	e000ed04 	.word	0xe000ed04

0800d65c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d662:	4b11      	ldr	r3, [pc, #68]	; (800d6a8 <vPortExitCritical+0x4c>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d10a      	bne.n	800d680 <vPortExitCritical+0x24>
	__asm volatile
 800d66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	607b      	str	r3, [r7, #4]
}
 800d67c:	bf00      	nop
 800d67e:	e7fe      	b.n	800d67e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d680:	4b09      	ldr	r3, [pc, #36]	; (800d6a8 <vPortExitCritical+0x4c>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	3b01      	subs	r3, #1
 800d686:	4a08      	ldr	r2, [pc, #32]	; (800d6a8 <vPortExitCritical+0x4c>)
 800d688:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d68a:	4b07      	ldr	r3, [pc, #28]	; (800d6a8 <vPortExitCritical+0x4c>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d105      	bne.n	800d69e <vPortExitCritical+0x42>
 800d692:	2300      	movs	r3, #0
 800d694:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	f383 8811 	msr	BASEPRI, r3
}
 800d69c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d69e:	bf00      	nop
 800d6a0:	370c      	adds	r7, #12
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bc80      	pop	{r7}
 800d6a6:	4770      	bx	lr
 800d6a8:	2000020c 	.word	0x2000020c
 800d6ac:	00000000 	.word	0x00000000

0800d6b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d6b0:	f3ef 8009 	mrs	r0, PSP
 800d6b4:	f3bf 8f6f 	isb	sy
 800d6b8:	4b0d      	ldr	r3, [pc, #52]	; (800d6f0 <pxCurrentTCBConst>)
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d6c0:	6010      	str	r0, [r2, #0]
 800d6c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800d6c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d6ca:	f380 8811 	msr	BASEPRI, r0
 800d6ce:	f7fe fdc1 	bl	800c254 <vTaskSwitchContext>
 800d6d2:	f04f 0000 	mov.w	r0, #0
 800d6d6:	f380 8811 	msr	BASEPRI, r0
 800d6da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d6de:	6819      	ldr	r1, [r3, #0]
 800d6e0:	6808      	ldr	r0, [r1, #0]
 800d6e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d6e6:	f380 8809 	msr	PSP, r0
 800d6ea:	f3bf 8f6f 	isb	sy
 800d6ee:	4770      	bx	lr

0800d6f0 <pxCurrentTCBConst>:
 800d6f0:	20001788 	.word	0x20001788
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d6f4:	bf00      	nop
 800d6f6:	bf00      	nop

0800d6f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d702:	f383 8811 	msr	BASEPRI, r3
 800d706:	f3bf 8f6f 	isb	sy
 800d70a:	f3bf 8f4f 	dsb	sy
 800d70e:	607b      	str	r3, [r7, #4]
}
 800d710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d712:	f7fe fce1 	bl	800c0d8 <xTaskIncrementTick>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d003      	beq.n	800d724 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d71c:	4b06      	ldr	r3, [pc, #24]	; (800d738 <SysTick_Handler+0x40>)
 800d71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d722:	601a      	str	r2, [r3, #0]
 800d724:	2300      	movs	r3, #0
 800d726:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	f383 8811 	msr	BASEPRI, r3
}
 800d72e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d730:	bf00      	nop
 800d732:	3708      	adds	r7, #8
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	e000ed04 	.word	0xe000ed04

0800d73c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d73c:	b480      	push	{r7}
 800d73e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d740:	4b0a      	ldr	r3, [pc, #40]	; (800d76c <vPortSetupTimerInterrupt+0x30>)
 800d742:	2200      	movs	r2, #0
 800d744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d746:	4b0a      	ldr	r3, [pc, #40]	; (800d770 <vPortSetupTimerInterrupt+0x34>)
 800d748:	2200      	movs	r2, #0
 800d74a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d74c:	4b09      	ldr	r3, [pc, #36]	; (800d774 <vPortSetupTimerInterrupt+0x38>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a09      	ldr	r2, [pc, #36]	; (800d778 <vPortSetupTimerInterrupt+0x3c>)
 800d752:	fba2 2303 	umull	r2, r3, r2, r3
 800d756:	099b      	lsrs	r3, r3, #6
 800d758:	4a08      	ldr	r2, [pc, #32]	; (800d77c <vPortSetupTimerInterrupt+0x40>)
 800d75a:	3b01      	subs	r3, #1
 800d75c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d75e:	4b03      	ldr	r3, [pc, #12]	; (800d76c <vPortSetupTimerInterrupt+0x30>)
 800d760:	2207      	movs	r2, #7
 800d762:	601a      	str	r2, [r3, #0]
}
 800d764:	bf00      	nop
 800d766:	46bd      	mov	sp, r7
 800d768:	bc80      	pop	{r7}
 800d76a:	4770      	bx	lr
 800d76c:	e000e010 	.word	0xe000e010
 800d770:	e000e018 	.word	0xe000e018
 800d774:	20000200 	.word	0x20000200
 800d778:	10624dd3 	.word	0x10624dd3
 800d77c:	e000e014 	.word	0xe000e014

0800d780 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d780:	b480      	push	{r7}
 800d782:	b085      	sub	sp, #20
 800d784:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d786:	f3ef 8305 	mrs	r3, IPSR
 800d78a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2b0f      	cmp	r3, #15
 800d790:	d914      	bls.n	800d7bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d792:	4a16      	ldr	r2, [pc, #88]	; (800d7ec <vPortValidateInterruptPriority+0x6c>)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	4413      	add	r3, r2
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d79c:	4b14      	ldr	r3, [pc, #80]	; (800d7f0 <vPortValidateInterruptPriority+0x70>)
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	7afa      	ldrb	r2, [r7, #11]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d20a      	bcs.n	800d7bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7aa:	f383 8811 	msr	BASEPRI, r3
 800d7ae:	f3bf 8f6f 	isb	sy
 800d7b2:	f3bf 8f4f 	dsb	sy
 800d7b6:	607b      	str	r3, [r7, #4]
}
 800d7b8:	bf00      	nop
 800d7ba:	e7fe      	b.n	800d7ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d7bc:	4b0d      	ldr	r3, [pc, #52]	; (800d7f4 <vPortValidateInterruptPriority+0x74>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d7c4:	4b0c      	ldr	r3, [pc, #48]	; (800d7f8 <vPortValidateInterruptPriority+0x78>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d90a      	bls.n	800d7e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d0:	f383 8811 	msr	BASEPRI, r3
 800d7d4:	f3bf 8f6f 	isb	sy
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	603b      	str	r3, [r7, #0]
}
 800d7de:	bf00      	nop
 800d7e0:	e7fe      	b.n	800d7e0 <vPortValidateInterruptPriority+0x60>
	}
 800d7e2:	bf00      	nop
 800d7e4:	3714      	adds	r7, #20
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bc80      	pop	{r7}
 800d7ea:	4770      	bx	lr
 800d7ec:	e000e3f0 	.word	0xe000e3f0
 800d7f0:	200019b0 	.word	0x200019b0
 800d7f4:	e000ed0c 	.word	0xe000ed0c
 800d7f8:	200019b4 	.word	0x200019b4

0800d7fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b08a      	sub	sp, #40	; 0x28
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d804:	2300      	movs	r3, #0
 800d806:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d808:	f7fe fbae 	bl	800bf68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d80c:	4b58      	ldr	r3, [pc, #352]	; (800d970 <pvPortMalloc+0x174>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d101      	bne.n	800d818 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d814:	f000 f910 	bl	800da38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d818:	4b56      	ldr	r3, [pc, #344]	; (800d974 <pvPortMalloc+0x178>)
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	4013      	ands	r3, r2
 800d820:	2b00      	cmp	r3, #0
 800d822:	f040 808e 	bne.w	800d942 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d01d      	beq.n	800d868 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d82c:	2208      	movs	r2, #8
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4413      	add	r3, r2
 800d832:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f003 0307 	and.w	r3, r3, #7
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d014      	beq.n	800d868 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f023 0307 	bic.w	r3, r3, #7
 800d844:	3308      	adds	r3, #8
 800d846:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f003 0307 	and.w	r3, r3, #7
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d00a      	beq.n	800d868 <pvPortMalloc+0x6c>
	__asm volatile
 800d852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d856:	f383 8811 	msr	BASEPRI, r3
 800d85a:	f3bf 8f6f 	isb	sy
 800d85e:	f3bf 8f4f 	dsb	sy
 800d862:	617b      	str	r3, [r7, #20]
}
 800d864:	bf00      	nop
 800d866:	e7fe      	b.n	800d866 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d069      	beq.n	800d942 <pvPortMalloc+0x146>
 800d86e:	4b42      	ldr	r3, [pc, #264]	; (800d978 <pvPortMalloc+0x17c>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	429a      	cmp	r2, r3
 800d876:	d864      	bhi.n	800d942 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d878:	4b40      	ldr	r3, [pc, #256]	; (800d97c <pvPortMalloc+0x180>)
 800d87a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d87c:	4b3f      	ldr	r3, [pc, #252]	; (800d97c <pvPortMalloc+0x180>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d882:	e004      	b.n	800d88e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d886:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	429a      	cmp	r2, r3
 800d896:	d903      	bls.n	800d8a0 <pvPortMalloc+0xa4>
 800d898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d1f1      	bne.n	800d884 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d8a0:	4b33      	ldr	r3, [pc, #204]	; (800d970 <pvPortMalloc+0x174>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d04b      	beq.n	800d942 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d8aa:	6a3b      	ldr	r3, [r7, #32]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2208      	movs	r2, #8
 800d8b0:	4413      	add	r3, r2
 800d8b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	6a3b      	ldr	r3, [r7, #32]
 800d8ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8be:	685a      	ldr	r2, [r3, #4]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	1ad2      	subs	r2, r2, r3
 800d8c4:	2308      	movs	r3, #8
 800d8c6:	005b      	lsls	r3, r3, #1
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d91f      	bls.n	800d90c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	f003 0307 	and.w	r3, r3, #7
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d00a      	beq.n	800d8f4 <pvPortMalloc+0xf8>
	__asm volatile
 800d8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e2:	f383 8811 	msr	BASEPRI, r3
 800d8e6:	f3bf 8f6f 	isb	sy
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	613b      	str	r3, [r7, #16]
}
 800d8f0:	bf00      	nop
 800d8f2:	e7fe      	b.n	800d8f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f6:	685a      	ldr	r2, [r3, #4]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	1ad2      	subs	r2, r2, r3
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d906:	69b8      	ldr	r0, [r7, #24]
 800d908:	f000 f8f8 	bl	800dafc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d90c:	4b1a      	ldr	r3, [pc, #104]	; (800d978 <pvPortMalloc+0x17c>)
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	1ad3      	subs	r3, r2, r3
 800d916:	4a18      	ldr	r2, [pc, #96]	; (800d978 <pvPortMalloc+0x17c>)
 800d918:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d91a:	4b17      	ldr	r3, [pc, #92]	; (800d978 <pvPortMalloc+0x17c>)
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	4b18      	ldr	r3, [pc, #96]	; (800d980 <pvPortMalloc+0x184>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	429a      	cmp	r2, r3
 800d924:	d203      	bcs.n	800d92e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d926:	4b14      	ldr	r3, [pc, #80]	; (800d978 <pvPortMalloc+0x17c>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a15      	ldr	r2, [pc, #84]	; (800d980 <pvPortMalloc+0x184>)
 800d92c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d930:	685a      	ldr	r2, [r3, #4]
 800d932:	4b10      	ldr	r3, [pc, #64]	; (800d974 <pvPortMalloc+0x178>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	431a      	orrs	r2, r3
 800d938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93e:	2200      	movs	r2, #0
 800d940:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d942:	f7fe fb1f 	bl	800bf84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	f003 0307 	and.w	r3, r3, #7
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d00a      	beq.n	800d966 <pvPortMalloc+0x16a>
	__asm volatile
 800d950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d954:	f383 8811 	msr	BASEPRI, r3
 800d958:	f3bf 8f6f 	isb	sy
 800d95c:	f3bf 8f4f 	dsb	sy
 800d960:	60fb      	str	r3, [r7, #12]
}
 800d962:	bf00      	nop
 800d964:	e7fe      	b.n	800d964 <pvPortMalloc+0x168>
	return pvReturn;
 800d966:	69fb      	ldr	r3, [r7, #28]
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3728      	adds	r7, #40	; 0x28
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	20002dc0 	.word	0x20002dc0
 800d974:	20002dcc 	.word	0x20002dcc
 800d978:	20002dc4 	.word	0x20002dc4
 800d97c:	20002db8 	.word	0x20002db8
 800d980:	20002dc8 	.word	0x20002dc8

0800d984 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b086      	sub	sp, #24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d048      	beq.n	800da28 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d996:	2308      	movs	r3, #8
 800d998:	425b      	negs	r3, r3
 800d99a:	697a      	ldr	r2, [r7, #20]
 800d99c:	4413      	add	r3, r2
 800d99e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	685a      	ldr	r2, [r3, #4]
 800d9a8:	4b21      	ldr	r3, [pc, #132]	; (800da30 <vPortFree+0xac>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4013      	ands	r3, r2
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d10a      	bne.n	800d9c8 <vPortFree+0x44>
	__asm volatile
 800d9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b6:	f383 8811 	msr	BASEPRI, r3
 800d9ba:	f3bf 8f6f 	isb	sy
 800d9be:	f3bf 8f4f 	dsb	sy
 800d9c2:	60fb      	str	r3, [r7, #12]
}
 800d9c4:	bf00      	nop
 800d9c6:	e7fe      	b.n	800d9c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00a      	beq.n	800d9e6 <vPortFree+0x62>
	__asm volatile
 800d9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d4:	f383 8811 	msr	BASEPRI, r3
 800d9d8:	f3bf 8f6f 	isb	sy
 800d9dc:	f3bf 8f4f 	dsb	sy
 800d9e0:	60bb      	str	r3, [r7, #8]
}
 800d9e2:	bf00      	nop
 800d9e4:	e7fe      	b.n	800d9e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	685a      	ldr	r2, [r3, #4]
 800d9ea:	4b11      	ldr	r3, [pc, #68]	; (800da30 <vPortFree+0xac>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	4013      	ands	r3, r2
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d019      	beq.n	800da28 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d115      	bne.n	800da28 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	685a      	ldr	r2, [r3, #4]
 800da00:	4b0b      	ldr	r3, [pc, #44]	; (800da30 <vPortFree+0xac>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	43db      	mvns	r3, r3
 800da06:	401a      	ands	r2, r3
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800da0c:	f7fe faac 	bl	800bf68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	685a      	ldr	r2, [r3, #4]
 800da14:	4b07      	ldr	r3, [pc, #28]	; (800da34 <vPortFree+0xb0>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4413      	add	r3, r2
 800da1a:	4a06      	ldr	r2, [pc, #24]	; (800da34 <vPortFree+0xb0>)
 800da1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800da1e:	6938      	ldr	r0, [r7, #16]
 800da20:	f000 f86c 	bl	800dafc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800da24:	f7fe faae 	bl	800bf84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800da28:	bf00      	nop
 800da2a:	3718      	adds	r7, #24
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	20002dcc 	.word	0x20002dcc
 800da34:	20002dc4 	.word	0x20002dc4

0800da38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800da3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800da42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800da44:	4b27      	ldr	r3, [pc, #156]	; (800dae4 <prvHeapInit+0xac>)
 800da46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f003 0307 	and.w	r3, r3, #7
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d00c      	beq.n	800da6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	3307      	adds	r3, #7
 800da56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f023 0307 	bic.w	r3, r3, #7
 800da5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800da60:	68ba      	ldr	r2, [r7, #8]
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	1ad3      	subs	r3, r2, r3
 800da66:	4a1f      	ldr	r2, [pc, #124]	; (800dae4 <prvHeapInit+0xac>)
 800da68:	4413      	add	r3, r2
 800da6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800da70:	4a1d      	ldr	r2, [pc, #116]	; (800dae8 <prvHeapInit+0xb0>)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800da76:	4b1c      	ldr	r3, [pc, #112]	; (800dae8 <prvHeapInit+0xb0>)
 800da78:	2200      	movs	r2, #0
 800da7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	68ba      	ldr	r2, [r7, #8]
 800da80:	4413      	add	r3, r2
 800da82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800da84:	2208      	movs	r2, #8
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	1a9b      	subs	r3, r3, r2
 800da8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	f023 0307 	bic.w	r3, r3, #7
 800da92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	4a15      	ldr	r2, [pc, #84]	; (800daec <prvHeapInit+0xb4>)
 800da98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800da9a:	4b14      	ldr	r3, [pc, #80]	; (800daec <prvHeapInit+0xb4>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2200      	movs	r2, #0
 800daa0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800daa2:	4b12      	ldr	r3, [pc, #72]	; (800daec <prvHeapInit+0xb4>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2200      	movs	r2, #0
 800daa8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	1ad2      	subs	r2, r2, r3
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dab8:	4b0c      	ldr	r3, [pc, #48]	; (800daec <prvHeapInit+0xb4>)
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	4a0a      	ldr	r2, [pc, #40]	; (800daf0 <prvHeapInit+0xb8>)
 800dac6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	4a09      	ldr	r2, [pc, #36]	; (800daf4 <prvHeapInit+0xbc>)
 800dace:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dad0:	4b09      	ldr	r3, [pc, #36]	; (800daf8 <prvHeapInit+0xc0>)
 800dad2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dad6:	601a      	str	r2, [r3, #0]
}
 800dad8:	bf00      	nop
 800dada:	3714      	adds	r7, #20
 800dadc:	46bd      	mov	sp, r7
 800dade:	bc80      	pop	{r7}
 800dae0:	4770      	bx	lr
 800dae2:	bf00      	nop
 800dae4:	200019b8 	.word	0x200019b8
 800dae8:	20002db8 	.word	0x20002db8
 800daec:	20002dc0 	.word	0x20002dc0
 800daf0:	20002dc8 	.word	0x20002dc8
 800daf4:	20002dc4 	.word	0x20002dc4
 800daf8:	20002dcc 	.word	0x20002dcc

0800dafc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800db04:	4b27      	ldr	r3, [pc, #156]	; (800dba4 <prvInsertBlockIntoFreeList+0xa8>)
 800db06:	60fb      	str	r3, [r7, #12]
 800db08:	e002      	b.n	800db10 <prvInsertBlockIntoFreeList+0x14>
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	60fb      	str	r3, [r7, #12]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	687a      	ldr	r2, [r7, #4]
 800db16:	429a      	cmp	r2, r3
 800db18:	d8f7      	bhi.n	800db0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	68ba      	ldr	r2, [r7, #8]
 800db24:	4413      	add	r3, r2
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d108      	bne.n	800db3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	685a      	ldr	r2, [r3, #4]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	441a      	add	r2, r3
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	68ba      	ldr	r2, [r7, #8]
 800db48:	441a      	add	r2, r3
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d118      	bne.n	800db84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	4b14      	ldr	r3, [pc, #80]	; (800dba8 <prvInsertBlockIntoFreeList+0xac>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d00d      	beq.n	800db7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	685a      	ldr	r2, [r3, #4]
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	441a      	add	r2, r3
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	681a      	ldr	r2, [r3, #0]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	601a      	str	r2, [r3, #0]
 800db78:	e008      	b.n	800db8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800db7a:	4b0b      	ldr	r3, [pc, #44]	; (800dba8 <prvInsertBlockIntoFreeList+0xac>)
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	601a      	str	r2, [r3, #0]
 800db82:	e003      	b.n	800db8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db8c:	68fa      	ldr	r2, [r7, #12]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	429a      	cmp	r2, r3
 800db92:	d002      	beq.n	800db9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db9a:	bf00      	nop
 800db9c:	3714      	adds	r7, #20
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bc80      	pop	{r7}
 800dba2:	4770      	bx	lr
 800dba4:	20002db8 	.word	0x20002db8
 800dba8:	20002dc0 	.word	0x20002dc0

0800dbac <malloc>:
 800dbac:	4b02      	ldr	r3, [pc, #8]	; (800dbb8 <malloc+0xc>)
 800dbae:	4601      	mov	r1, r0
 800dbb0:	6818      	ldr	r0, [r3, #0]
 800dbb2:	f000 b823 	b.w	800dbfc <_malloc_r>
 800dbb6:	bf00      	nop
 800dbb8:	2000025c 	.word	0x2000025c

0800dbbc <sbrk_aligned>:
 800dbbc:	b570      	push	{r4, r5, r6, lr}
 800dbbe:	4e0e      	ldr	r6, [pc, #56]	; (800dbf8 <sbrk_aligned+0x3c>)
 800dbc0:	460c      	mov	r4, r1
 800dbc2:	6831      	ldr	r1, [r6, #0]
 800dbc4:	4605      	mov	r5, r0
 800dbc6:	b911      	cbnz	r1, 800dbce <sbrk_aligned+0x12>
 800dbc8:	f000 f96c 	bl	800dea4 <_sbrk_r>
 800dbcc:	6030      	str	r0, [r6, #0]
 800dbce:	4621      	mov	r1, r4
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	f000 f967 	bl	800dea4 <_sbrk_r>
 800dbd6:	1c43      	adds	r3, r0, #1
 800dbd8:	d00a      	beq.n	800dbf0 <sbrk_aligned+0x34>
 800dbda:	1cc4      	adds	r4, r0, #3
 800dbdc:	f024 0403 	bic.w	r4, r4, #3
 800dbe0:	42a0      	cmp	r0, r4
 800dbe2:	d007      	beq.n	800dbf4 <sbrk_aligned+0x38>
 800dbe4:	1a21      	subs	r1, r4, r0
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	f000 f95c 	bl	800dea4 <_sbrk_r>
 800dbec:	3001      	adds	r0, #1
 800dbee:	d101      	bne.n	800dbf4 <sbrk_aligned+0x38>
 800dbf0:	f04f 34ff 	mov.w	r4, #4294967295
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	bd70      	pop	{r4, r5, r6, pc}
 800dbf8:	20002dd4 	.word	0x20002dd4

0800dbfc <_malloc_r>:
 800dbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc00:	1ccd      	adds	r5, r1, #3
 800dc02:	f025 0503 	bic.w	r5, r5, #3
 800dc06:	3508      	adds	r5, #8
 800dc08:	2d0c      	cmp	r5, #12
 800dc0a:	bf38      	it	cc
 800dc0c:	250c      	movcc	r5, #12
 800dc0e:	2d00      	cmp	r5, #0
 800dc10:	4607      	mov	r7, r0
 800dc12:	db01      	blt.n	800dc18 <_malloc_r+0x1c>
 800dc14:	42a9      	cmp	r1, r5
 800dc16:	d905      	bls.n	800dc24 <_malloc_r+0x28>
 800dc18:	230c      	movs	r3, #12
 800dc1a:	2600      	movs	r6, #0
 800dc1c:	603b      	str	r3, [r7, #0]
 800dc1e:	4630      	mov	r0, r6
 800dc20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dcf8 <_malloc_r+0xfc>
 800dc28:	f000 f868 	bl	800dcfc <__malloc_lock>
 800dc2c:	f8d8 3000 	ldr.w	r3, [r8]
 800dc30:	461c      	mov	r4, r3
 800dc32:	bb5c      	cbnz	r4, 800dc8c <_malloc_r+0x90>
 800dc34:	4629      	mov	r1, r5
 800dc36:	4638      	mov	r0, r7
 800dc38:	f7ff ffc0 	bl	800dbbc <sbrk_aligned>
 800dc3c:	1c43      	adds	r3, r0, #1
 800dc3e:	4604      	mov	r4, r0
 800dc40:	d155      	bne.n	800dcee <_malloc_r+0xf2>
 800dc42:	f8d8 4000 	ldr.w	r4, [r8]
 800dc46:	4626      	mov	r6, r4
 800dc48:	2e00      	cmp	r6, #0
 800dc4a:	d145      	bne.n	800dcd8 <_malloc_r+0xdc>
 800dc4c:	2c00      	cmp	r4, #0
 800dc4e:	d048      	beq.n	800dce2 <_malloc_r+0xe6>
 800dc50:	6823      	ldr	r3, [r4, #0]
 800dc52:	4631      	mov	r1, r6
 800dc54:	4638      	mov	r0, r7
 800dc56:	eb04 0903 	add.w	r9, r4, r3
 800dc5a:	f000 f923 	bl	800dea4 <_sbrk_r>
 800dc5e:	4581      	cmp	r9, r0
 800dc60:	d13f      	bne.n	800dce2 <_malloc_r+0xe6>
 800dc62:	6821      	ldr	r1, [r4, #0]
 800dc64:	4638      	mov	r0, r7
 800dc66:	1a6d      	subs	r5, r5, r1
 800dc68:	4629      	mov	r1, r5
 800dc6a:	f7ff ffa7 	bl	800dbbc <sbrk_aligned>
 800dc6e:	3001      	adds	r0, #1
 800dc70:	d037      	beq.n	800dce2 <_malloc_r+0xe6>
 800dc72:	6823      	ldr	r3, [r4, #0]
 800dc74:	442b      	add	r3, r5
 800dc76:	6023      	str	r3, [r4, #0]
 800dc78:	f8d8 3000 	ldr.w	r3, [r8]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d038      	beq.n	800dcf2 <_malloc_r+0xf6>
 800dc80:	685a      	ldr	r2, [r3, #4]
 800dc82:	42a2      	cmp	r2, r4
 800dc84:	d12b      	bne.n	800dcde <_malloc_r+0xe2>
 800dc86:	2200      	movs	r2, #0
 800dc88:	605a      	str	r2, [r3, #4]
 800dc8a:	e00f      	b.n	800dcac <_malloc_r+0xb0>
 800dc8c:	6822      	ldr	r2, [r4, #0]
 800dc8e:	1b52      	subs	r2, r2, r5
 800dc90:	d41f      	bmi.n	800dcd2 <_malloc_r+0xd6>
 800dc92:	2a0b      	cmp	r2, #11
 800dc94:	d917      	bls.n	800dcc6 <_malloc_r+0xca>
 800dc96:	1961      	adds	r1, r4, r5
 800dc98:	42a3      	cmp	r3, r4
 800dc9a:	6025      	str	r5, [r4, #0]
 800dc9c:	bf18      	it	ne
 800dc9e:	6059      	strne	r1, [r3, #4]
 800dca0:	6863      	ldr	r3, [r4, #4]
 800dca2:	bf08      	it	eq
 800dca4:	f8c8 1000 	streq.w	r1, [r8]
 800dca8:	5162      	str	r2, [r4, r5]
 800dcaa:	604b      	str	r3, [r1, #4]
 800dcac:	4638      	mov	r0, r7
 800dcae:	f104 060b 	add.w	r6, r4, #11
 800dcb2:	f000 f829 	bl	800dd08 <__malloc_unlock>
 800dcb6:	f026 0607 	bic.w	r6, r6, #7
 800dcba:	1d23      	adds	r3, r4, #4
 800dcbc:	1af2      	subs	r2, r6, r3
 800dcbe:	d0ae      	beq.n	800dc1e <_malloc_r+0x22>
 800dcc0:	1b9b      	subs	r3, r3, r6
 800dcc2:	50a3      	str	r3, [r4, r2]
 800dcc4:	e7ab      	b.n	800dc1e <_malloc_r+0x22>
 800dcc6:	42a3      	cmp	r3, r4
 800dcc8:	6862      	ldr	r2, [r4, #4]
 800dcca:	d1dd      	bne.n	800dc88 <_malloc_r+0x8c>
 800dccc:	f8c8 2000 	str.w	r2, [r8]
 800dcd0:	e7ec      	b.n	800dcac <_malloc_r+0xb0>
 800dcd2:	4623      	mov	r3, r4
 800dcd4:	6864      	ldr	r4, [r4, #4]
 800dcd6:	e7ac      	b.n	800dc32 <_malloc_r+0x36>
 800dcd8:	4634      	mov	r4, r6
 800dcda:	6876      	ldr	r6, [r6, #4]
 800dcdc:	e7b4      	b.n	800dc48 <_malloc_r+0x4c>
 800dcde:	4613      	mov	r3, r2
 800dce0:	e7cc      	b.n	800dc7c <_malloc_r+0x80>
 800dce2:	230c      	movs	r3, #12
 800dce4:	4638      	mov	r0, r7
 800dce6:	603b      	str	r3, [r7, #0]
 800dce8:	f000 f80e 	bl	800dd08 <__malloc_unlock>
 800dcec:	e797      	b.n	800dc1e <_malloc_r+0x22>
 800dcee:	6025      	str	r5, [r4, #0]
 800dcf0:	e7dc      	b.n	800dcac <_malloc_r+0xb0>
 800dcf2:	605b      	str	r3, [r3, #4]
 800dcf4:	deff      	udf	#255	; 0xff
 800dcf6:	bf00      	nop
 800dcf8:	20002dd0 	.word	0x20002dd0

0800dcfc <__malloc_lock>:
 800dcfc:	4801      	ldr	r0, [pc, #4]	; (800dd04 <__malloc_lock+0x8>)
 800dcfe:	f000 b90b 	b.w	800df18 <__retarget_lock_acquire_recursive>
 800dd02:	bf00      	nop
 800dd04:	20002f14 	.word	0x20002f14

0800dd08 <__malloc_unlock>:
 800dd08:	4801      	ldr	r0, [pc, #4]	; (800dd10 <__malloc_unlock+0x8>)
 800dd0a:	f000 b906 	b.w	800df1a <__retarget_lock_release_recursive>
 800dd0e:	bf00      	nop
 800dd10:	20002f14 	.word	0x20002f14

0800dd14 <sniprintf>:
 800dd14:	b40c      	push	{r2, r3}
 800dd16:	b530      	push	{r4, r5, lr}
 800dd18:	4b17      	ldr	r3, [pc, #92]	; (800dd78 <sniprintf+0x64>)
 800dd1a:	1e0c      	subs	r4, r1, #0
 800dd1c:	681d      	ldr	r5, [r3, #0]
 800dd1e:	b09d      	sub	sp, #116	; 0x74
 800dd20:	da08      	bge.n	800dd34 <sniprintf+0x20>
 800dd22:	238b      	movs	r3, #139	; 0x8b
 800dd24:	f04f 30ff 	mov.w	r0, #4294967295
 800dd28:	602b      	str	r3, [r5, #0]
 800dd2a:	b01d      	add	sp, #116	; 0x74
 800dd2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd30:	b002      	add	sp, #8
 800dd32:	4770      	bx	lr
 800dd34:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dd38:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dd3c:	bf0c      	ite	eq
 800dd3e:	4623      	moveq	r3, r4
 800dd40:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dd44:	9304      	str	r3, [sp, #16]
 800dd46:	9307      	str	r3, [sp, #28]
 800dd48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd4c:	9002      	str	r0, [sp, #8]
 800dd4e:	9006      	str	r0, [sp, #24]
 800dd50:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dd54:	4628      	mov	r0, r5
 800dd56:	ab21      	add	r3, sp, #132	; 0x84
 800dd58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dd5a:	a902      	add	r1, sp, #8
 800dd5c:	9301      	str	r3, [sp, #4]
 800dd5e:	f000 f995 	bl	800e08c <_svfiprintf_r>
 800dd62:	1c43      	adds	r3, r0, #1
 800dd64:	bfbc      	itt	lt
 800dd66:	238b      	movlt	r3, #139	; 0x8b
 800dd68:	602b      	strlt	r3, [r5, #0]
 800dd6a:	2c00      	cmp	r4, #0
 800dd6c:	d0dd      	beq.n	800dd2a <sniprintf+0x16>
 800dd6e:	2200      	movs	r2, #0
 800dd70:	9b02      	ldr	r3, [sp, #8]
 800dd72:	701a      	strb	r2, [r3, #0]
 800dd74:	e7d9      	b.n	800dd2a <sniprintf+0x16>
 800dd76:	bf00      	nop
 800dd78:	2000025c 	.word	0x2000025c

0800dd7c <siprintf>:
 800dd7c:	b40e      	push	{r1, r2, r3}
 800dd7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dd82:	b500      	push	{lr}
 800dd84:	b09c      	sub	sp, #112	; 0x70
 800dd86:	ab1d      	add	r3, sp, #116	; 0x74
 800dd88:	9002      	str	r0, [sp, #8]
 800dd8a:	9006      	str	r0, [sp, #24]
 800dd8c:	9107      	str	r1, [sp, #28]
 800dd8e:	9104      	str	r1, [sp, #16]
 800dd90:	4808      	ldr	r0, [pc, #32]	; (800ddb4 <siprintf+0x38>)
 800dd92:	4909      	ldr	r1, [pc, #36]	; (800ddb8 <siprintf+0x3c>)
 800dd94:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd98:	9105      	str	r1, [sp, #20]
 800dd9a:	6800      	ldr	r0, [r0, #0]
 800dd9c:	a902      	add	r1, sp, #8
 800dd9e:	9301      	str	r3, [sp, #4]
 800dda0:	f000 f974 	bl	800e08c <_svfiprintf_r>
 800dda4:	2200      	movs	r2, #0
 800dda6:	9b02      	ldr	r3, [sp, #8]
 800dda8:	701a      	strb	r2, [r3, #0]
 800ddaa:	b01c      	add	sp, #112	; 0x70
 800ddac:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddb0:	b003      	add	sp, #12
 800ddb2:	4770      	bx	lr
 800ddb4:	2000025c 	.word	0x2000025c
 800ddb8:	ffff0208 	.word	0xffff0208

0800ddbc <memset>:
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	4402      	add	r2, r0
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d100      	bne.n	800ddc6 <memset+0xa>
 800ddc4:	4770      	bx	lr
 800ddc6:	f803 1b01 	strb.w	r1, [r3], #1
 800ddca:	e7f9      	b.n	800ddc0 <memset+0x4>

0800ddcc <strstr>:
 800ddcc:	780a      	ldrb	r2, [r1, #0]
 800ddce:	b570      	push	{r4, r5, r6, lr}
 800ddd0:	b96a      	cbnz	r2, 800ddee <strstr+0x22>
 800ddd2:	bd70      	pop	{r4, r5, r6, pc}
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d109      	bne.n	800ddec <strstr+0x20>
 800ddd8:	460c      	mov	r4, r1
 800ddda:	4605      	mov	r5, r0
 800dddc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d0f6      	beq.n	800ddd2 <strstr+0x6>
 800dde4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800dde8:	429e      	cmp	r6, r3
 800ddea:	d0f7      	beq.n	800dddc <strstr+0x10>
 800ddec:	3001      	adds	r0, #1
 800ddee:	7803      	ldrb	r3, [r0, #0]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d1ef      	bne.n	800ddd4 <strstr+0x8>
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	e7ec      	b.n	800ddd2 <strstr+0x6>

0800ddf8 <_reclaim_reent>:
 800ddf8:	4b29      	ldr	r3, [pc, #164]	; (800dea0 <_reclaim_reent+0xa8>)
 800ddfa:	b570      	push	{r4, r5, r6, lr}
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4604      	mov	r4, r0
 800de00:	4283      	cmp	r3, r0
 800de02:	d04b      	beq.n	800de9c <_reclaim_reent+0xa4>
 800de04:	69c3      	ldr	r3, [r0, #28]
 800de06:	b143      	cbz	r3, 800de1a <_reclaim_reent+0x22>
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d144      	bne.n	800de98 <_reclaim_reent+0xa0>
 800de0e:	69e3      	ldr	r3, [r4, #28]
 800de10:	6819      	ldr	r1, [r3, #0]
 800de12:	b111      	cbz	r1, 800de1a <_reclaim_reent+0x22>
 800de14:	4620      	mov	r0, r4
 800de16:	f000 f897 	bl	800df48 <_free_r>
 800de1a:	6961      	ldr	r1, [r4, #20]
 800de1c:	b111      	cbz	r1, 800de24 <_reclaim_reent+0x2c>
 800de1e:	4620      	mov	r0, r4
 800de20:	f000 f892 	bl	800df48 <_free_r>
 800de24:	69e1      	ldr	r1, [r4, #28]
 800de26:	b111      	cbz	r1, 800de2e <_reclaim_reent+0x36>
 800de28:	4620      	mov	r0, r4
 800de2a:	f000 f88d 	bl	800df48 <_free_r>
 800de2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800de30:	b111      	cbz	r1, 800de38 <_reclaim_reent+0x40>
 800de32:	4620      	mov	r0, r4
 800de34:	f000 f888 	bl	800df48 <_free_r>
 800de38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de3a:	b111      	cbz	r1, 800de42 <_reclaim_reent+0x4a>
 800de3c:	4620      	mov	r0, r4
 800de3e:	f000 f883 	bl	800df48 <_free_r>
 800de42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800de44:	b111      	cbz	r1, 800de4c <_reclaim_reent+0x54>
 800de46:	4620      	mov	r0, r4
 800de48:	f000 f87e 	bl	800df48 <_free_r>
 800de4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800de4e:	b111      	cbz	r1, 800de56 <_reclaim_reent+0x5e>
 800de50:	4620      	mov	r0, r4
 800de52:	f000 f879 	bl	800df48 <_free_r>
 800de56:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800de58:	b111      	cbz	r1, 800de60 <_reclaim_reent+0x68>
 800de5a:	4620      	mov	r0, r4
 800de5c:	f000 f874 	bl	800df48 <_free_r>
 800de60:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800de62:	b111      	cbz	r1, 800de6a <_reclaim_reent+0x72>
 800de64:	4620      	mov	r0, r4
 800de66:	f000 f86f 	bl	800df48 <_free_r>
 800de6a:	6a23      	ldr	r3, [r4, #32]
 800de6c:	b1b3      	cbz	r3, 800de9c <_reclaim_reent+0xa4>
 800de6e:	4620      	mov	r0, r4
 800de70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de74:	4718      	bx	r3
 800de76:	5949      	ldr	r1, [r1, r5]
 800de78:	b941      	cbnz	r1, 800de8c <_reclaim_reent+0x94>
 800de7a:	3504      	adds	r5, #4
 800de7c:	69e3      	ldr	r3, [r4, #28]
 800de7e:	2d80      	cmp	r5, #128	; 0x80
 800de80:	68d9      	ldr	r1, [r3, #12]
 800de82:	d1f8      	bne.n	800de76 <_reclaim_reent+0x7e>
 800de84:	4620      	mov	r0, r4
 800de86:	f000 f85f 	bl	800df48 <_free_r>
 800de8a:	e7c0      	b.n	800de0e <_reclaim_reent+0x16>
 800de8c:	680e      	ldr	r6, [r1, #0]
 800de8e:	4620      	mov	r0, r4
 800de90:	f000 f85a 	bl	800df48 <_free_r>
 800de94:	4631      	mov	r1, r6
 800de96:	e7ef      	b.n	800de78 <_reclaim_reent+0x80>
 800de98:	2500      	movs	r5, #0
 800de9a:	e7ef      	b.n	800de7c <_reclaim_reent+0x84>
 800de9c:	bd70      	pop	{r4, r5, r6, pc}
 800de9e:	bf00      	nop
 800dea0:	2000025c 	.word	0x2000025c

0800dea4 <_sbrk_r>:
 800dea4:	b538      	push	{r3, r4, r5, lr}
 800dea6:	2300      	movs	r3, #0
 800dea8:	4d05      	ldr	r5, [pc, #20]	; (800dec0 <_sbrk_r+0x1c>)
 800deaa:	4604      	mov	r4, r0
 800deac:	4608      	mov	r0, r1
 800deae:	602b      	str	r3, [r5, #0]
 800deb0:	f7f5 fd2c 	bl	800390c <_sbrk>
 800deb4:	1c43      	adds	r3, r0, #1
 800deb6:	d102      	bne.n	800debe <_sbrk_r+0x1a>
 800deb8:	682b      	ldr	r3, [r5, #0]
 800deba:	b103      	cbz	r3, 800debe <_sbrk_r+0x1a>
 800debc:	6023      	str	r3, [r4, #0]
 800debe:	bd38      	pop	{r3, r4, r5, pc}
 800dec0:	20002f10 	.word	0x20002f10

0800dec4 <__errno>:
 800dec4:	4b01      	ldr	r3, [pc, #4]	; (800decc <__errno+0x8>)
 800dec6:	6818      	ldr	r0, [r3, #0]
 800dec8:	4770      	bx	lr
 800deca:	bf00      	nop
 800decc:	2000025c 	.word	0x2000025c

0800ded0 <__libc_init_array>:
 800ded0:	b570      	push	{r4, r5, r6, lr}
 800ded2:	2600      	movs	r6, #0
 800ded4:	4d0c      	ldr	r5, [pc, #48]	; (800df08 <__libc_init_array+0x38>)
 800ded6:	4c0d      	ldr	r4, [pc, #52]	; (800df0c <__libc_init_array+0x3c>)
 800ded8:	1b64      	subs	r4, r4, r5
 800deda:	10a4      	asrs	r4, r4, #2
 800dedc:	42a6      	cmp	r6, r4
 800dede:	d109      	bne.n	800def4 <__libc_init_array+0x24>
 800dee0:	f000 fbc6 	bl	800e670 <_init>
 800dee4:	2600      	movs	r6, #0
 800dee6:	4d0a      	ldr	r5, [pc, #40]	; (800df10 <__libc_init_array+0x40>)
 800dee8:	4c0a      	ldr	r4, [pc, #40]	; (800df14 <__libc_init_array+0x44>)
 800deea:	1b64      	subs	r4, r4, r5
 800deec:	10a4      	asrs	r4, r4, #2
 800deee:	42a6      	cmp	r6, r4
 800def0:	d105      	bne.n	800defe <__libc_init_array+0x2e>
 800def2:	bd70      	pop	{r4, r5, r6, pc}
 800def4:	f855 3b04 	ldr.w	r3, [r5], #4
 800def8:	4798      	blx	r3
 800defa:	3601      	adds	r6, #1
 800defc:	e7ee      	b.n	800dedc <__libc_init_array+0xc>
 800defe:	f855 3b04 	ldr.w	r3, [r5], #4
 800df02:	4798      	blx	r3
 800df04:	3601      	adds	r6, #1
 800df06:	e7f2      	b.n	800deee <__libc_init_array+0x1e>
 800df08:	0800ea94 	.word	0x0800ea94
 800df0c:	0800ea94 	.word	0x0800ea94
 800df10:	0800ea94 	.word	0x0800ea94
 800df14:	0800ea98 	.word	0x0800ea98

0800df18 <__retarget_lock_acquire_recursive>:
 800df18:	4770      	bx	lr

0800df1a <__retarget_lock_release_recursive>:
 800df1a:	4770      	bx	lr

0800df1c <strcpy>:
 800df1c:	4603      	mov	r3, r0
 800df1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df22:	f803 2b01 	strb.w	r2, [r3], #1
 800df26:	2a00      	cmp	r2, #0
 800df28:	d1f9      	bne.n	800df1e <strcpy+0x2>
 800df2a:	4770      	bx	lr

0800df2c <memcpy>:
 800df2c:	440a      	add	r2, r1
 800df2e:	4291      	cmp	r1, r2
 800df30:	f100 33ff 	add.w	r3, r0, #4294967295
 800df34:	d100      	bne.n	800df38 <memcpy+0xc>
 800df36:	4770      	bx	lr
 800df38:	b510      	push	{r4, lr}
 800df3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df3e:	4291      	cmp	r1, r2
 800df40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df44:	d1f9      	bne.n	800df3a <memcpy+0xe>
 800df46:	bd10      	pop	{r4, pc}

0800df48 <_free_r>:
 800df48:	b538      	push	{r3, r4, r5, lr}
 800df4a:	4605      	mov	r5, r0
 800df4c:	2900      	cmp	r1, #0
 800df4e:	d040      	beq.n	800dfd2 <_free_r+0x8a>
 800df50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df54:	1f0c      	subs	r4, r1, #4
 800df56:	2b00      	cmp	r3, #0
 800df58:	bfb8      	it	lt
 800df5a:	18e4      	addlt	r4, r4, r3
 800df5c:	f7ff fece 	bl	800dcfc <__malloc_lock>
 800df60:	4a1c      	ldr	r2, [pc, #112]	; (800dfd4 <_free_r+0x8c>)
 800df62:	6813      	ldr	r3, [r2, #0]
 800df64:	b933      	cbnz	r3, 800df74 <_free_r+0x2c>
 800df66:	6063      	str	r3, [r4, #4]
 800df68:	6014      	str	r4, [r2, #0]
 800df6a:	4628      	mov	r0, r5
 800df6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df70:	f7ff beca 	b.w	800dd08 <__malloc_unlock>
 800df74:	42a3      	cmp	r3, r4
 800df76:	d908      	bls.n	800df8a <_free_r+0x42>
 800df78:	6820      	ldr	r0, [r4, #0]
 800df7a:	1821      	adds	r1, r4, r0
 800df7c:	428b      	cmp	r3, r1
 800df7e:	bf01      	itttt	eq
 800df80:	6819      	ldreq	r1, [r3, #0]
 800df82:	685b      	ldreq	r3, [r3, #4]
 800df84:	1809      	addeq	r1, r1, r0
 800df86:	6021      	streq	r1, [r4, #0]
 800df88:	e7ed      	b.n	800df66 <_free_r+0x1e>
 800df8a:	461a      	mov	r2, r3
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	b10b      	cbz	r3, 800df94 <_free_r+0x4c>
 800df90:	42a3      	cmp	r3, r4
 800df92:	d9fa      	bls.n	800df8a <_free_r+0x42>
 800df94:	6811      	ldr	r1, [r2, #0]
 800df96:	1850      	adds	r0, r2, r1
 800df98:	42a0      	cmp	r0, r4
 800df9a:	d10b      	bne.n	800dfb4 <_free_r+0x6c>
 800df9c:	6820      	ldr	r0, [r4, #0]
 800df9e:	4401      	add	r1, r0
 800dfa0:	1850      	adds	r0, r2, r1
 800dfa2:	4283      	cmp	r3, r0
 800dfa4:	6011      	str	r1, [r2, #0]
 800dfa6:	d1e0      	bne.n	800df6a <_free_r+0x22>
 800dfa8:	6818      	ldr	r0, [r3, #0]
 800dfaa:	685b      	ldr	r3, [r3, #4]
 800dfac:	4408      	add	r0, r1
 800dfae:	6010      	str	r0, [r2, #0]
 800dfb0:	6053      	str	r3, [r2, #4]
 800dfb2:	e7da      	b.n	800df6a <_free_r+0x22>
 800dfb4:	d902      	bls.n	800dfbc <_free_r+0x74>
 800dfb6:	230c      	movs	r3, #12
 800dfb8:	602b      	str	r3, [r5, #0]
 800dfba:	e7d6      	b.n	800df6a <_free_r+0x22>
 800dfbc:	6820      	ldr	r0, [r4, #0]
 800dfbe:	1821      	adds	r1, r4, r0
 800dfc0:	428b      	cmp	r3, r1
 800dfc2:	bf01      	itttt	eq
 800dfc4:	6819      	ldreq	r1, [r3, #0]
 800dfc6:	685b      	ldreq	r3, [r3, #4]
 800dfc8:	1809      	addeq	r1, r1, r0
 800dfca:	6021      	streq	r1, [r4, #0]
 800dfcc:	6063      	str	r3, [r4, #4]
 800dfce:	6054      	str	r4, [r2, #4]
 800dfd0:	e7cb      	b.n	800df6a <_free_r+0x22>
 800dfd2:	bd38      	pop	{r3, r4, r5, pc}
 800dfd4:	20002dd0 	.word	0x20002dd0

0800dfd8 <__ssputs_r>:
 800dfd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfdc:	461f      	mov	r7, r3
 800dfde:	688e      	ldr	r6, [r1, #8]
 800dfe0:	4682      	mov	sl, r0
 800dfe2:	42be      	cmp	r6, r7
 800dfe4:	460c      	mov	r4, r1
 800dfe6:	4690      	mov	r8, r2
 800dfe8:	680b      	ldr	r3, [r1, #0]
 800dfea:	d82c      	bhi.n	800e046 <__ssputs_r+0x6e>
 800dfec:	898a      	ldrh	r2, [r1, #12]
 800dfee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dff2:	d026      	beq.n	800e042 <__ssputs_r+0x6a>
 800dff4:	6965      	ldr	r5, [r4, #20]
 800dff6:	6909      	ldr	r1, [r1, #16]
 800dff8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dffc:	eba3 0901 	sub.w	r9, r3, r1
 800e000:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e004:	1c7b      	adds	r3, r7, #1
 800e006:	444b      	add	r3, r9
 800e008:	106d      	asrs	r5, r5, #1
 800e00a:	429d      	cmp	r5, r3
 800e00c:	bf38      	it	cc
 800e00e:	461d      	movcc	r5, r3
 800e010:	0553      	lsls	r3, r2, #21
 800e012:	d527      	bpl.n	800e064 <__ssputs_r+0x8c>
 800e014:	4629      	mov	r1, r5
 800e016:	f7ff fdf1 	bl	800dbfc <_malloc_r>
 800e01a:	4606      	mov	r6, r0
 800e01c:	b360      	cbz	r0, 800e078 <__ssputs_r+0xa0>
 800e01e:	464a      	mov	r2, r9
 800e020:	6921      	ldr	r1, [r4, #16]
 800e022:	f7ff ff83 	bl	800df2c <memcpy>
 800e026:	89a3      	ldrh	r3, [r4, #12]
 800e028:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e02c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e030:	81a3      	strh	r3, [r4, #12]
 800e032:	6126      	str	r6, [r4, #16]
 800e034:	444e      	add	r6, r9
 800e036:	6026      	str	r6, [r4, #0]
 800e038:	463e      	mov	r6, r7
 800e03a:	6165      	str	r5, [r4, #20]
 800e03c:	eba5 0509 	sub.w	r5, r5, r9
 800e040:	60a5      	str	r5, [r4, #8]
 800e042:	42be      	cmp	r6, r7
 800e044:	d900      	bls.n	800e048 <__ssputs_r+0x70>
 800e046:	463e      	mov	r6, r7
 800e048:	4632      	mov	r2, r6
 800e04a:	4641      	mov	r1, r8
 800e04c:	6820      	ldr	r0, [r4, #0]
 800e04e:	f000 faaf 	bl	800e5b0 <memmove>
 800e052:	2000      	movs	r0, #0
 800e054:	68a3      	ldr	r3, [r4, #8]
 800e056:	1b9b      	subs	r3, r3, r6
 800e058:	60a3      	str	r3, [r4, #8]
 800e05a:	6823      	ldr	r3, [r4, #0]
 800e05c:	4433      	add	r3, r6
 800e05e:	6023      	str	r3, [r4, #0]
 800e060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e064:	462a      	mov	r2, r5
 800e066:	f000 facb 	bl	800e600 <_realloc_r>
 800e06a:	4606      	mov	r6, r0
 800e06c:	2800      	cmp	r0, #0
 800e06e:	d1e0      	bne.n	800e032 <__ssputs_r+0x5a>
 800e070:	4650      	mov	r0, sl
 800e072:	6921      	ldr	r1, [r4, #16]
 800e074:	f7ff ff68 	bl	800df48 <_free_r>
 800e078:	230c      	movs	r3, #12
 800e07a:	f8ca 3000 	str.w	r3, [sl]
 800e07e:	89a3      	ldrh	r3, [r4, #12]
 800e080:	f04f 30ff 	mov.w	r0, #4294967295
 800e084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e088:	81a3      	strh	r3, [r4, #12]
 800e08a:	e7e9      	b.n	800e060 <__ssputs_r+0x88>

0800e08c <_svfiprintf_r>:
 800e08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e090:	4698      	mov	r8, r3
 800e092:	898b      	ldrh	r3, [r1, #12]
 800e094:	4607      	mov	r7, r0
 800e096:	061b      	lsls	r3, r3, #24
 800e098:	460d      	mov	r5, r1
 800e09a:	4614      	mov	r4, r2
 800e09c:	b09d      	sub	sp, #116	; 0x74
 800e09e:	d50e      	bpl.n	800e0be <_svfiprintf_r+0x32>
 800e0a0:	690b      	ldr	r3, [r1, #16]
 800e0a2:	b963      	cbnz	r3, 800e0be <_svfiprintf_r+0x32>
 800e0a4:	2140      	movs	r1, #64	; 0x40
 800e0a6:	f7ff fda9 	bl	800dbfc <_malloc_r>
 800e0aa:	6028      	str	r0, [r5, #0]
 800e0ac:	6128      	str	r0, [r5, #16]
 800e0ae:	b920      	cbnz	r0, 800e0ba <_svfiprintf_r+0x2e>
 800e0b0:	230c      	movs	r3, #12
 800e0b2:	603b      	str	r3, [r7, #0]
 800e0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0b8:	e0d0      	b.n	800e25c <_svfiprintf_r+0x1d0>
 800e0ba:	2340      	movs	r3, #64	; 0x40
 800e0bc:	616b      	str	r3, [r5, #20]
 800e0be:	2300      	movs	r3, #0
 800e0c0:	9309      	str	r3, [sp, #36]	; 0x24
 800e0c2:	2320      	movs	r3, #32
 800e0c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0c8:	2330      	movs	r3, #48	; 0x30
 800e0ca:	f04f 0901 	mov.w	r9, #1
 800e0ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0d2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800e274 <_svfiprintf_r+0x1e8>
 800e0d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0da:	4623      	mov	r3, r4
 800e0dc:	469a      	mov	sl, r3
 800e0de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0e2:	b10a      	cbz	r2, 800e0e8 <_svfiprintf_r+0x5c>
 800e0e4:	2a25      	cmp	r2, #37	; 0x25
 800e0e6:	d1f9      	bne.n	800e0dc <_svfiprintf_r+0x50>
 800e0e8:	ebba 0b04 	subs.w	fp, sl, r4
 800e0ec:	d00b      	beq.n	800e106 <_svfiprintf_r+0x7a>
 800e0ee:	465b      	mov	r3, fp
 800e0f0:	4622      	mov	r2, r4
 800e0f2:	4629      	mov	r1, r5
 800e0f4:	4638      	mov	r0, r7
 800e0f6:	f7ff ff6f 	bl	800dfd8 <__ssputs_r>
 800e0fa:	3001      	adds	r0, #1
 800e0fc:	f000 80a9 	beq.w	800e252 <_svfiprintf_r+0x1c6>
 800e100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e102:	445a      	add	r2, fp
 800e104:	9209      	str	r2, [sp, #36]	; 0x24
 800e106:	f89a 3000 	ldrb.w	r3, [sl]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	f000 80a1 	beq.w	800e252 <_svfiprintf_r+0x1c6>
 800e110:	2300      	movs	r3, #0
 800e112:	f04f 32ff 	mov.w	r2, #4294967295
 800e116:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e11a:	f10a 0a01 	add.w	sl, sl, #1
 800e11e:	9304      	str	r3, [sp, #16]
 800e120:	9307      	str	r3, [sp, #28]
 800e122:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e126:	931a      	str	r3, [sp, #104]	; 0x68
 800e128:	4654      	mov	r4, sl
 800e12a:	2205      	movs	r2, #5
 800e12c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e130:	4850      	ldr	r0, [pc, #320]	; (800e274 <_svfiprintf_r+0x1e8>)
 800e132:	f000 fa57 	bl	800e5e4 <memchr>
 800e136:	9a04      	ldr	r2, [sp, #16]
 800e138:	b9d8      	cbnz	r0, 800e172 <_svfiprintf_r+0xe6>
 800e13a:	06d0      	lsls	r0, r2, #27
 800e13c:	bf44      	itt	mi
 800e13e:	2320      	movmi	r3, #32
 800e140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e144:	0711      	lsls	r1, r2, #28
 800e146:	bf44      	itt	mi
 800e148:	232b      	movmi	r3, #43	; 0x2b
 800e14a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e14e:	f89a 3000 	ldrb.w	r3, [sl]
 800e152:	2b2a      	cmp	r3, #42	; 0x2a
 800e154:	d015      	beq.n	800e182 <_svfiprintf_r+0xf6>
 800e156:	4654      	mov	r4, sl
 800e158:	2000      	movs	r0, #0
 800e15a:	f04f 0c0a 	mov.w	ip, #10
 800e15e:	9a07      	ldr	r2, [sp, #28]
 800e160:	4621      	mov	r1, r4
 800e162:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e166:	3b30      	subs	r3, #48	; 0x30
 800e168:	2b09      	cmp	r3, #9
 800e16a:	d94d      	bls.n	800e208 <_svfiprintf_r+0x17c>
 800e16c:	b1b0      	cbz	r0, 800e19c <_svfiprintf_r+0x110>
 800e16e:	9207      	str	r2, [sp, #28]
 800e170:	e014      	b.n	800e19c <_svfiprintf_r+0x110>
 800e172:	eba0 0308 	sub.w	r3, r0, r8
 800e176:	fa09 f303 	lsl.w	r3, r9, r3
 800e17a:	4313      	orrs	r3, r2
 800e17c:	46a2      	mov	sl, r4
 800e17e:	9304      	str	r3, [sp, #16]
 800e180:	e7d2      	b.n	800e128 <_svfiprintf_r+0x9c>
 800e182:	9b03      	ldr	r3, [sp, #12]
 800e184:	1d19      	adds	r1, r3, #4
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	9103      	str	r1, [sp, #12]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	bfbb      	ittet	lt
 800e18e:	425b      	neglt	r3, r3
 800e190:	f042 0202 	orrlt.w	r2, r2, #2
 800e194:	9307      	strge	r3, [sp, #28]
 800e196:	9307      	strlt	r3, [sp, #28]
 800e198:	bfb8      	it	lt
 800e19a:	9204      	strlt	r2, [sp, #16]
 800e19c:	7823      	ldrb	r3, [r4, #0]
 800e19e:	2b2e      	cmp	r3, #46	; 0x2e
 800e1a0:	d10c      	bne.n	800e1bc <_svfiprintf_r+0x130>
 800e1a2:	7863      	ldrb	r3, [r4, #1]
 800e1a4:	2b2a      	cmp	r3, #42	; 0x2a
 800e1a6:	d134      	bne.n	800e212 <_svfiprintf_r+0x186>
 800e1a8:	9b03      	ldr	r3, [sp, #12]
 800e1aa:	3402      	adds	r4, #2
 800e1ac:	1d1a      	adds	r2, r3, #4
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	9203      	str	r2, [sp, #12]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	bfb8      	it	lt
 800e1b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1ba:	9305      	str	r3, [sp, #20]
 800e1bc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800e278 <_svfiprintf_r+0x1ec>
 800e1c0:	2203      	movs	r2, #3
 800e1c2:	4650      	mov	r0, sl
 800e1c4:	7821      	ldrb	r1, [r4, #0]
 800e1c6:	f000 fa0d 	bl	800e5e4 <memchr>
 800e1ca:	b138      	cbz	r0, 800e1dc <_svfiprintf_r+0x150>
 800e1cc:	2240      	movs	r2, #64	; 0x40
 800e1ce:	9b04      	ldr	r3, [sp, #16]
 800e1d0:	eba0 000a 	sub.w	r0, r0, sl
 800e1d4:	4082      	lsls	r2, r0
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	3401      	adds	r4, #1
 800e1da:	9304      	str	r3, [sp, #16]
 800e1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1e0:	2206      	movs	r2, #6
 800e1e2:	4826      	ldr	r0, [pc, #152]	; (800e27c <_svfiprintf_r+0x1f0>)
 800e1e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1e8:	f000 f9fc 	bl	800e5e4 <memchr>
 800e1ec:	2800      	cmp	r0, #0
 800e1ee:	d038      	beq.n	800e262 <_svfiprintf_r+0x1d6>
 800e1f0:	4b23      	ldr	r3, [pc, #140]	; (800e280 <_svfiprintf_r+0x1f4>)
 800e1f2:	bb1b      	cbnz	r3, 800e23c <_svfiprintf_r+0x1b0>
 800e1f4:	9b03      	ldr	r3, [sp, #12]
 800e1f6:	3307      	adds	r3, #7
 800e1f8:	f023 0307 	bic.w	r3, r3, #7
 800e1fc:	3308      	adds	r3, #8
 800e1fe:	9303      	str	r3, [sp, #12]
 800e200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e202:	4433      	add	r3, r6
 800e204:	9309      	str	r3, [sp, #36]	; 0x24
 800e206:	e768      	b.n	800e0da <_svfiprintf_r+0x4e>
 800e208:	460c      	mov	r4, r1
 800e20a:	2001      	movs	r0, #1
 800e20c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e210:	e7a6      	b.n	800e160 <_svfiprintf_r+0xd4>
 800e212:	2300      	movs	r3, #0
 800e214:	f04f 0c0a 	mov.w	ip, #10
 800e218:	4619      	mov	r1, r3
 800e21a:	3401      	adds	r4, #1
 800e21c:	9305      	str	r3, [sp, #20]
 800e21e:	4620      	mov	r0, r4
 800e220:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e224:	3a30      	subs	r2, #48	; 0x30
 800e226:	2a09      	cmp	r2, #9
 800e228:	d903      	bls.n	800e232 <_svfiprintf_r+0x1a6>
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d0c6      	beq.n	800e1bc <_svfiprintf_r+0x130>
 800e22e:	9105      	str	r1, [sp, #20]
 800e230:	e7c4      	b.n	800e1bc <_svfiprintf_r+0x130>
 800e232:	4604      	mov	r4, r0
 800e234:	2301      	movs	r3, #1
 800e236:	fb0c 2101 	mla	r1, ip, r1, r2
 800e23a:	e7f0      	b.n	800e21e <_svfiprintf_r+0x192>
 800e23c:	ab03      	add	r3, sp, #12
 800e23e:	9300      	str	r3, [sp, #0]
 800e240:	462a      	mov	r2, r5
 800e242:	4638      	mov	r0, r7
 800e244:	4b0f      	ldr	r3, [pc, #60]	; (800e284 <_svfiprintf_r+0x1f8>)
 800e246:	a904      	add	r1, sp, #16
 800e248:	f3af 8000 	nop.w
 800e24c:	1c42      	adds	r2, r0, #1
 800e24e:	4606      	mov	r6, r0
 800e250:	d1d6      	bne.n	800e200 <_svfiprintf_r+0x174>
 800e252:	89ab      	ldrh	r3, [r5, #12]
 800e254:	065b      	lsls	r3, r3, #25
 800e256:	f53f af2d 	bmi.w	800e0b4 <_svfiprintf_r+0x28>
 800e25a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e25c:	b01d      	add	sp, #116	; 0x74
 800e25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e262:	ab03      	add	r3, sp, #12
 800e264:	9300      	str	r3, [sp, #0]
 800e266:	462a      	mov	r2, r5
 800e268:	4638      	mov	r0, r7
 800e26a:	4b06      	ldr	r3, [pc, #24]	; (800e284 <_svfiprintf_r+0x1f8>)
 800e26c:	a904      	add	r1, sp, #16
 800e26e:	f000 f87d 	bl	800e36c <_printf_i>
 800e272:	e7eb      	b.n	800e24c <_svfiprintf_r+0x1c0>
 800e274:	0800ea5e 	.word	0x0800ea5e
 800e278:	0800ea64 	.word	0x0800ea64
 800e27c:	0800ea68 	.word	0x0800ea68
 800e280:	00000000 	.word	0x00000000
 800e284:	0800dfd9 	.word	0x0800dfd9

0800e288 <_printf_common>:
 800e288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e28c:	4616      	mov	r6, r2
 800e28e:	4699      	mov	r9, r3
 800e290:	688a      	ldr	r2, [r1, #8]
 800e292:	690b      	ldr	r3, [r1, #16]
 800e294:	4607      	mov	r7, r0
 800e296:	4293      	cmp	r3, r2
 800e298:	bfb8      	it	lt
 800e29a:	4613      	movlt	r3, r2
 800e29c:	6033      	str	r3, [r6, #0]
 800e29e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e2a2:	460c      	mov	r4, r1
 800e2a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e2a8:	b10a      	cbz	r2, 800e2ae <_printf_common+0x26>
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	6033      	str	r3, [r6, #0]
 800e2ae:	6823      	ldr	r3, [r4, #0]
 800e2b0:	0699      	lsls	r1, r3, #26
 800e2b2:	bf42      	ittt	mi
 800e2b4:	6833      	ldrmi	r3, [r6, #0]
 800e2b6:	3302      	addmi	r3, #2
 800e2b8:	6033      	strmi	r3, [r6, #0]
 800e2ba:	6825      	ldr	r5, [r4, #0]
 800e2bc:	f015 0506 	ands.w	r5, r5, #6
 800e2c0:	d106      	bne.n	800e2d0 <_printf_common+0x48>
 800e2c2:	f104 0a19 	add.w	sl, r4, #25
 800e2c6:	68e3      	ldr	r3, [r4, #12]
 800e2c8:	6832      	ldr	r2, [r6, #0]
 800e2ca:	1a9b      	subs	r3, r3, r2
 800e2cc:	42ab      	cmp	r3, r5
 800e2ce:	dc2b      	bgt.n	800e328 <_printf_common+0xa0>
 800e2d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e2d4:	1e13      	subs	r3, r2, #0
 800e2d6:	6822      	ldr	r2, [r4, #0]
 800e2d8:	bf18      	it	ne
 800e2da:	2301      	movne	r3, #1
 800e2dc:	0692      	lsls	r2, r2, #26
 800e2de:	d430      	bmi.n	800e342 <_printf_common+0xba>
 800e2e0:	4649      	mov	r1, r9
 800e2e2:	4638      	mov	r0, r7
 800e2e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e2e8:	47c0      	blx	r8
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	d023      	beq.n	800e336 <_printf_common+0xae>
 800e2ee:	6823      	ldr	r3, [r4, #0]
 800e2f0:	6922      	ldr	r2, [r4, #16]
 800e2f2:	f003 0306 	and.w	r3, r3, #6
 800e2f6:	2b04      	cmp	r3, #4
 800e2f8:	bf14      	ite	ne
 800e2fa:	2500      	movne	r5, #0
 800e2fc:	6833      	ldreq	r3, [r6, #0]
 800e2fe:	f04f 0600 	mov.w	r6, #0
 800e302:	bf08      	it	eq
 800e304:	68e5      	ldreq	r5, [r4, #12]
 800e306:	f104 041a 	add.w	r4, r4, #26
 800e30a:	bf08      	it	eq
 800e30c:	1aed      	subeq	r5, r5, r3
 800e30e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e312:	bf08      	it	eq
 800e314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e318:	4293      	cmp	r3, r2
 800e31a:	bfc4      	itt	gt
 800e31c:	1a9b      	subgt	r3, r3, r2
 800e31e:	18ed      	addgt	r5, r5, r3
 800e320:	42b5      	cmp	r5, r6
 800e322:	d11a      	bne.n	800e35a <_printf_common+0xd2>
 800e324:	2000      	movs	r0, #0
 800e326:	e008      	b.n	800e33a <_printf_common+0xb2>
 800e328:	2301      	movs	r3, #1
 800e32a:	4652      	mov	r2, sl
 800e32c:	4649      	mov	r1, r9
 800e32e:	4638      	mov	r0, r7
 800e330:	47c0      	blx	r8
 800e332:	3001      	adds	r0, #1
 800e334:	d103      	bne.n	800e33e <_printf_common+0xb6>
 800e336:	f04f 30ff 	mov.w	r0, #4294967295
 800e33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e33e:	3501      	adds	r5, #1
 800e340:	e7c1      	b.n	800e2c6 <_printf_common+0x3e>
 800e342:	2030      	movs	r0, #48	; 0x30
 800e344:	18e1      	adds	r1, r4, r3
 800e346:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e34a:	1c5a      	adds	r2, r3, #1
 800e34c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e350:	4422      	add	r2, r4
 800e352:	3302      	adds	r3, #2
 800e354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e358:	e7c2      	b.n	800e2e0 <_printf_common+0x58>
 800e35a:	2301      	movs	r3, #1
 800e35c:	4622      	mov	r2, r4
 800e35e:	4649      	mov	r1, r9
 800e360:	4638      	mov	r0, r7
 800e362:	47c0      	blx	r8
 800e364:	3001      	adds	r0, #1
 800e366:	d0e6      	beq.n	800e336 <_printf_common+0xae>
 800e368:	3601      	adds	r6, #1
 800e36a:	e7d9      	b.n	800e320 <_printf_common+0x98>

0800e36c <_printf_i>:
 800e36c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e370:	7e0f      	ldrb	r7, [r1, #24]
 800e372:	4691      	mov	r9, r2
 800e374:	2f78      	cmp	r7, #120	; 0x78
 800e376:	4680      	mov	r8, r0
 800e378:	460c      	mov	r4, r1
 800e37a:	469a      	mov	sl, r3
 800e37c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e37e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e382:	d807      	bhi.n	800e394 <_printf_i+0x28>
 800e384:	2f62      	cmp	r7, #98	; 0x62
 800e386:	d80a      	bhi.n	800e39e <_printf_i+0x32>
 800e388:	2f00      	cmp	r7, #0
 800e38a:	f000 80d5 	beq.w	800e538 <_printf_i+0x1cc>
 800e38e:	2f58      	cmp	r7, #88	; 0x58
 800e390:	f000 80c1 	beq.w	800e516 <_printf_i+0x1aa>
 800e394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e398:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e39c:	e03a      	b.n	800e414 <_printf_i+0xa8>
 800e39e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e3a2:	2b15      	cmp	r3, #21
 800e3a4:	d8f6      	bhi.n	800e394 <_printf_i+0x28>
 800e3a6:	a101      	add	r1, pc, #4	; (adr r1, 800e3ac <_printf_i+0x40>)
 800e3a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3ac:	0800e405 	.word	0x0800e405
 800e3b0:	0800e419 	.word	0x0800e419
 800e3b4:	0800e395 	.word	0x0800e395
 800e3b8:	0800e395 	.word	0x0800e395
 800e3bc:	0800e395 	.word	0x0800e395
 800e3c0:	0800e395 	.word	0x0800e395
 800e3c4:	0800e419 	.word	0x0800e419
 800e3c8:	0800e395 	.word	0x0800e395
 800e3cc:	0800e395 	.word	0x0800e395
 800e3d0:	0800e395 	.word	0x0800e395
 800e3d4:	0800e395 	.word	0x0800e395
 800e3d8:	0800e51f 	.word	0x0800e51f
 800e3dc:	0800e445 	.word	0x0800e445
 800e3e0:	0800e4d9 	.word	0x0800e4d9
 800e3e4:	0800e395 	.word	0x0800e395
 800e3e8:	0800e395 	.word	0x0800e395
 800e3ec:	0800e541 	.word	0x0800e541
 800e3f0:	0800e395 	.word	0x0800e395
 800e3f4:	0800e445 	.word	0x0800e445
 800e3f8:	0800e395 	.word	0x0800e395
 800e3fc:	0800e395 	.word	0x0800e395
 800e400:	0800e4e1 	.word	0x0800e4e1
 800e404:	682b      	ldr	r3, [r5, #0]
 800e406:	1d1a      	adds	r2, r3, #4
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	602a      	str	r2, [r5, #0]
 800e40c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e414:	2301      	movs	r3, #1
 800e416:	e0a0      	b.n	800e55a <_printf_i+0x1ee>
 800e418:	6820      	ldr	r0, [r4, #0]
 800e41a:	682b      	ldr	r3, [r5, #0]
 800e41c:	0607      	lsls	r7, r0, #24
 800e41e:	f103 0104 	add.w	r1, r3, #4
 800e422:	6029      	str	r1, [r5, #0]
 800e424:	d501      	bpl.n	800e42a <_printf_i+0xbe>
 800e426:	681e      	ldr	r6, [r3, #0]
 800e428:	e003      	b.n	800e432 <_printf_i+0xc6>
 800e42a:	0646      	lsls	r6, r0, #25
 800e42c:	d5fb      	bpl.n	800e426 <_printf_i+0xba>
 800e42e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e432:	2e00      	cmp	r6, #0
 800e434:	da03      	bge.n	800e43e <_printf_i+0xd2>
 800e436:	232d      	movs	r3, #45	; 0x2d
 800e438:	4276      	negs	r6, r6
 800e43a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e43e:	230a      	movs	r3, #10
 800e440:	4859      	ldr	r0, [pc, #356]	; (800e5a8 <_printf_i+0x23c>)
 800e442:	e012      	b.n	800e46a <_printf_i+0xfe>
 800e444:	682b      	ldr	r3, [r5, #0]
 800e446:	6820      	ldr	r0, [r4, #0]
 800e448:	1d19      	adds	r1, r3, #4
 800e44a:	6029      	str	r1, [r5, #0]
 800e44c:	0605      	lsls	r5, r0, #24
 800e44e:	d501      	bpl.n	800e454 <_printf_i+0xe8>
 800e450:	681e      	ldr	r6, [r3, #0]
 800e452:	e002      	b.n	800e45a <_printf_i+0xee>
 800e454:	0641      	lsls	r1, r0, #25
 800e456:	d5fb      	bpl.n	800e450 <_printf_i+0xe4>
 800e458:	881e      	ldrh	r6, [r3, #0]
 800e45a:	2f6f      	cmp	r7, #111	; 0x6f
 800e45c:	bf0c      	ite	eq
 800e45e:	2308      	moveq	r3, #8
 800e460:	230a      	movne	r3, #10
 800e462:	4851      	ldr	r0, [pc, #324]	; (800e5a8 <_printf_i+0x23c>)
 800e464:	2100      	movs	r1, #0
 800e466:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e46a:	6865      	ldr	r5, [r4, #4]
 800e46c:	2d00      	cmp	r5, #0
 800e46e:	bfa8      	it	ge
 800e470:	6821      	ldrge	r1, [r4, #0]
 800e472:	60a5      	str	r5, [r4, #8]
 800e474:	bfa4      	itt	ge
 800e476:	f021 0104 	bicge.w	r1, r1, #4
 800e47a:	6021      	strge	r1, [r4, #0]
 800e47c:	b90e      	cbnz	r6, 800e482 <_printf_i+0x116>
 800e47e:	2d00      	cmp	r5, #0
 800e480:	d04b      	beq.n	800e51a <_printf_i+0x1ae>
 800e482:	4615      	mov	r5, r2
 800e484:	fbb6 f1f3 	udiv	r1, r6, r3
 800e488:	fb03 6711 	mls	r7, r3, r1, r6
 800e48c:	5dc7      	ldrb	r7, [r0, r7]
 800e48e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e492:	4637      	mov	r7, r6
 800e494:	42bb      	cmp	r3, r7
 800e496:	460e      	mov	r6, r1
 800e498:	d9f4      	bls.n	800e484 <_printf_i+0x118>
 800e49a:	2b08      	cmp	r3, #8
 800e49c:	d10b      	bne.n	800e4b6 <_printf_i+0x14a>
 800e49e:	6823      	ldr	r3, [r4, #0]
 800e4a0:	07de      	lsls	r6, r3, #31
 800e4a2:	d508      	bpl.n	800e4b6 <_printf_i+0x14a>
 800e4a4:	6923      	ldr	r3, [r4, #16]
 800e4a6:	6861      	ldr	r1, [r4, #4]
 800e4a8:	4299      	cmp	r1, r3
 800e4aa:	bfde      	ittt	le
 800e4ac:	2330      	movle	r3, #48	; 0x30
 800e4ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e4b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e4b6:	1b52      	subs	r2, r2, r5
 800e4b8:	6122      	str	r2, [r4, #16]
 800e4ba:	464b      	mov	r3, r9
 800e4bc:	4621      	mov	r1, r4
 800e4be:	4640      	mov	r0, r8
 800e4c0:	f8cd a000 	str.w	sl, [sp]
 800e4c4:	aa03      	add	r2, sp, #12
 800e4c6:	f7ff fedf 	bl	800e288 <_printf_common>
 800e4ca:	3001      	adds	r0, #1
 800e4cc:	d14a      	bne.n	800e564 <_printf_i+0x1f8>
 800e4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d2:	b004      	add	sp, #16
 800e4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4d8:	6823      	ldr	r3, [r4, #0]
 800e4da:	f043 0320 	orr.w	r3, r3, #32
 800e4de:	6023      	str	r3, [r4, #0]
 800e4e0:	2778      	movs	r7, #120	; 0x78
 800e4e2:	4832      	ldr	r0, [pc, #200]	; (800e5ac <_printf_i+0x240>)
 800e4e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e4e8:	6823      	ldr	r3, [r4, #0]
 800e4ea:	6829      	ldr	r1, [r5, #0]
 800e4ec:	061f      	lsls	r7, r3, #24
 800e4ee:	f851 6b04 	ldr.w	r6, [r1], #4
 800e4f2:	d402      	bmi.n	800e4fa <_printf_i+0x18e>
 800e4f4:	065f      	lsls	r7, r3, #25
 800e4f6:	bf48      	it	mi
 800e4f8:	b2b6      	uxthmi	r6, r6
 800e4fa:	07df      	lsls	r7, r3, #31
 800e4fc:	bf48      	it	mi
 800e4fe:	f043 0320 	orrmi.w	r3, r3, #32
 800e502:	6029      	str	r1, [r5, #0]
 800e504:	bf48      	it	mi
 800e506:	6023      	strmi	r3, [r4, #0]
 800e508:	b91e      	cbnz	r6, 800e512 <_printf_i+0x1a6>
 800e50a:	6823      	ldr	r3, [r4, #0]
 800e50c:	f023 0320 	bic.w	r3, r3, #32
 800e510:	6023      	str	r3, [r4, #0]
 800e512:	2310      	movs	r3, #16
 800e514:	e7a6      	b.n	800e464 <_printf_i+0xf8>
 800e516:	4824      	ldr	r0, [pc, #144]	; (800e5a8 <_printf_i+0x23c>)
 800e518:	e7e4      	b.n	800e4e4 <_printf_i+0x178>
 800e51a:	4615      	mov	r5, r2
 800e51c:	e7bd      	b.n	800e49a <_printf_i+0x12e>
 800e51e:	682b      	ldr	r3, [r5, #0]
 800e520:	6826      	ldr	r6, [r4, #0]
 800e522:	1d18      	adds	r0, r3, #4
 800e524:	6961      	ldr	r1, [r4, #20]
 800e526:	6028      	str	r0, [r5, #0]
 800e528:	0635      	lsls	r5, r6, #24
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	d501      	bpl.n	800e532 <_printf_i+0x1c6>
 800e52e:	6019      	str	r1, [r3, #0]
 800e530:	e002      	b.n	800e538 <_printf_i+0x1cc>
 800e532:	0670      	lsls	r0, r6, #25
 800e534:	d5fb      	bpl.n	800e52e <_printf_i+0x1c2>
 800e536:	8019      	strh	r1, [r3, #0]
 800e538:	2300      	movs	r3, #0
 800e53a:	4615      	mov	r5, r2
 800e53c:	6123      	str	r3, [r4, #16]
 800e53e:	e7bc      	b.n	800e4ba <_printf_i+0x14e>
 800e540:	682b      	ldr	r3, [r5, #0]
 800e542:	2100      	movs	r1, #0
 800e544:	1d1a      	adds	r2, r3, #4
 800e546:	602a      	str	r2, [r5, #0]
 800e548:	681d      	ldr	r5, [r3, #0]
 800e54a:	6862      	ldr	r2, [r4, #4]
 800e54c:	4628      	mov	r0, r5
 800e54e:	f000 f849 	bl	800e5e4 <memchr>
 800e552:	b108      	cbz	r0, 800e558 <_printf_i+0x1ec>
 800e554:	1b40      	subs	r0, r0, r5
 800e556:	6060      	str	r0, [r4, #4]
 800e558:	6863      	ldr	r3, [r4, #4]
 800e55a:	6123      	str	r3, [r4, #16]
 800e55c:	2300      	movs	r3, #0
 800e55e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e562:	e7aa      	b.n	800e4ba <_printf_i+0x14e>
 800e564:	462a      	mov	r2, r5
 800e566:	4649      	mov	r1, r9
 800e568:	4640      	mov	r0, r8
 800e56a:	6923      	ldr	r3, [r4, #16]
 800e56c:	47d0      	blx	sl
 800e56e:	3001      	adds	r0, #1
 800e570:	d0ad      	beq.n	800e4ce <_printf_i+0x162>
 800e572:	6823      	ldr	r3, [r4, #0]
 800e574:	079b      	lsls	r3, r3, #30
 800e576:	d413      	bmi.n	800e5a0 <_printf_i+0x234>
 800e578:	68e0      	ldr	r0, [r4, #12]
 800e57a:	9b03      	ldr	r3, [sp, #12]
 800e57c:	4298      	cmp	r0, r3
 800e57e:	bfb8      	it	lt
 800e580:	4618      	movlt	r0, r3
 800e582:	e7a6      	b.n	800e4d2 <_printf_i+0x166>
 800e584:	2301      	movs	r3, #1
 800e586:	4632      	mov	r2, r6
 800e588:	4649      	mov	r1, r9
 800e58a:	4640      	mov	r0, r8
 800e58c:	47d0      	blx	sl
 800e58e:	3001      	adds	r0, #1
 800e590:	d09d      	beq.n	800e4ce <_printf_i+0x162>
 800e592:	3501      	adds	r5, #1
 800e594:	68e3      	ldr	r3, [r4, #12]
 800e596:	9903      	ldr	r1, [sp, #12]
 800e598:	1a5b      	subs	r3, r3, r1
 800e59a:	42ab      	cmp	r3, r5
 800e59c:	dcf2      	bgt.n	800e584 <_printf_i+0x218>
 800e59e:	e7eb      	b.n	800e578 <_printf_i+0x20c>
 800e5a0:	2500      	movs	r5, #0
 800e5a2:	f104 0619 	add.w	r6, r4, #25
 800e5a6:	e7f5      	b.n	800e594 <_printf_i+0x228>
 800e5a8:	0800ea6f 	.word	0x0800ea6f
 800e5ac:	0800ea80 	.word	0x0800ea80

0800e5b0 <memmove>:
 800e5b0:	4288      	cmp	r0, r1
 800e5b2:	b510      	push	{r4, lr}
 800e5b4:	eb01 0402 	add.w	r4, r1, r2
 800e5b8:	d902      	bls.n	800e5c0 <memmove+0x10>
 800e5ba:	4284      	cmp	r4, r0
 800e5bc:	4623      	mov	r3, r4
 800e5be:	d807      	bhi.n	800e5d0 <memmove+0x20>
 800e5c0:	1e43      	subs	r3, r0, #1
 800e5c2:	42a1      	cmp	r1, r4
 800e5c4:	d008      	beq.n	800e5d8 <memmove+0x28>
 800e5c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e5ce:	e7f8      	b.n	800e5c2 <memmove+0x12>
 800e5d0:	4601      	mov	r1, r0
 800e5d2:	4402      	add	r2, r0
 800e5d4:	428a      	cmp	r2, r1
 800e5d6:	d100      	bne.n	800e5da <memmove+0x2a>
 800e5d8:	bd10      	pop	{r4, pc}
 800e5da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5e2:	e7f7      	b.n	800e5d4 <memmove+0x24>

0800e5e4 <memchr>:
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	b510      	push	{r4, lr}
 800e5e8:	b2c9      	uxtb	r1, r1
 800e5ea:	4402      	add	r2, r0
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	d101      	bne.n	800e5f6 <memchr+0x12>
 800e5f2:	2000      	movs	r0, #0
 800e5f4:	e003      	b.n	800e5fe <memchr+0x1a>
 800e5f6:	7804      	ldrb	r4, [r0, #0]
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	428c      	cmp	r4, r1
 800e5fc:	d1f6      	bne.n	800e5ec <memchr+0x8>
 800e5fe:	bd10      	pop	{r4, pc}

0800e600 <_realloc_r>:
 800e600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e604:	4680      	mov	r8, r0
 800e606:	4614      	mov	r4, r2
 800e608:	460e      	mov	r6, r1
 800e60a:	b921      	cbnz	r1, 800e616 <_realloc_r+0x16>
 800e60c:	4611      	mov	r1, r2
 800e60e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e612:	f7ff baf3 	b.w	800dbfc <_malloc_r>
 800e616:	b92a      	cbnz	r2, 800e624 <_realloc_r+0x24>
 800e618:	f7ff fc96 	bl	800df48 <_free_r>
 800e61c:	4625      	mov	r5, r4
 800e61e:	4628      	mov	r0, r5
 800e620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e624:	f000 f81b 	bl	800e65e <_malloc_usable_size_r>
 800e628:	4284      	cmp	r4, r0
 800e62a:	4607      	mov	r7, r0
 800e62c:	d802      	bhi.n	800e634 <_realloc_r+0x34>
 800e62e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e632:	d812      	bhi.n	800e65a <_realloc_r+0x5a>
 800e634:	4621      	mov	r1, r4
 800e636:	4640      	mov	r0, r8
 800e638:	f7ff fae0 	bl	800dbfc <_malloc_r>
 800e63c:	4605      	mov	r5, r0
 800e63e:	2800      	cmp	r0, #0
 800e640:	d0ed      	beq.n	800e61e <_realloc_r+0x1e>
 800e642:	42bc      	cmp	r4, r7
 800e644:	4622      	mov	r2, r4
 800e646:	4631      	mov	r1, r6
 800e648:	bf28      	it	cs
 800e64a:	463a      	movcs	r2, r7
 800e64c:	f7ff fc6e 	bl	800df2c <memcpy>
 800e650:	4631      	mov	r1, r6
 800e652:	4640      	mov	r0, r8
 800e654:	f7ff fc78 	bl	800df48 <_free_r>
 800e658:	e7e1      	b.n	800e61e <_realloc_r+0x1e>
 800e65a:	4635      	mov	r5, r6
 800e65c:	e7df      	b.n	800e61e <_realloc_r+0x1e>

0800e65e <_malloc_usable_size_r>:
 800e65e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e662:	1f18      	subs	r0, r3, #4
 800e664:	2b00      	cmp	r3, #0
 800e666:	bfbc      	itt	lt
 800e668:	580b      	ldrlt	r3, [r1, r0]
 800e66a:	18c0      	addlt	r0, r0, r3
 800e66c:	4770      	bx	lr
	...

0800e670 <_init>:
 800e670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e672:	bf00      	nop
 800e674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e676:	bc08      	pop	{r3}
 800e678:	469e      	mov	lr, r3
 800e67a:	4770      	bx	lr

0800e67c <_fini>:
 800e67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e67e:	bf00      	nop
 800e680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e682:	bc08      	pop	{r3}
 800e684:	469e      	mov	lr, r3
 800e686:	4770      	bx	lr
