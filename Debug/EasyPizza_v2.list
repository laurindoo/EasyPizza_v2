
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b174  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800b284  0800b284  0001b284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b97c  0800b97c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b97c  0800b97c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b97c  0800b97c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b97c  0800b97c  0001b97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b980  0800b980  0001b980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800b984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004684  20000070  0800b9f0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200046f4  0800b9f0  000246f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033625  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007109  00000000  00000000  000536fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f778  00000000  00000000  0005a806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001870  00000000  00000000  00069f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a2e  00000000  00000000  0006b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ef0f  00000000  00000000  0006d21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ff5c  00000000  00000000  0008c12d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a20c7  00000000  00000000  000bc089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000058c8  00000000  00000000  0015e150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00163a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b26c 	.word	0x0800b26c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800b26c 	.word	0x0800b26c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <BluetoothAddComp>:
	BluetoothAddComp(ble, &ble->BLERecebeuSenha,	"RX_RECEBEU_SENHA", RX_RECEBEU_SENHA,	ComandoConexao);

	//Return OK
	return 0;
}
uint8_t BluetoothAddComp(Bluetooth* ble, BleComando* _blecomm, char* objectname, uint8_t __comando, TypeComandoBle __tipo){
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	4605      	mov	r5, r0

	//Make space before passing the object name to the nexcomp struct
	_blecomm->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8001098:	4610      	mov	r0, r2
uint8_t BluetoothAddComp(Bluetooth* ble, BleComando* _blecomm, char* objectname, uint8_t __comando, TypeComandoBle __tipo){
 800109a:	460c      	mov	r4, r1
 800109c:	4616      	mov	r6, r2
 800109e:	461f      	mov	r7, r3
	_blecomm->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 80010a0:	f7ff f856 	bl	8000150 <strlen>
 80010a4:	3001      	adds	r0, #1
 80010a6:	f008 fedf 	bl	8009e68 <malloc>
	//Pass the object name to the struct
	strcpy(_blecomm->objname, objectname);
 80010aa:	4631      	mov	r1, r6
	_blecomm->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 80010ac:	6060      	str	r0, [r4, #4]
	strcpy(_blecomm->objname, objectname);
 80010ae:	f009 fac2 	bl	800a636 <strcpy>

	//Pass the corresponding data from component to component struct
	_blecomm->_comando = __comando;
	_blecomm->_tipo = __tipo;
 80010b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
	_blecomm->_comando = __comando;
 80010b6:	7027      	strb	r7, [r4, #0]
	_blecomm->_tipo = __tipo;
 80010b8:	7063      	strb	r3, [r4, #1]

	//Add the component struct to the list on the Nextion Struct
	ble->_BleCommArr[ble->_BleCommCount] = _blecomm;
 80010ba:	f895 3158 	ldrb.w	r3, [r5, #344]	; 0x158
	ble->_BleCommCount++;

	//Return OK
	return 0;
}
 80010be:	2000      	movs	r0, #0
	ble->_BleCommArr[ble->_BleCommCount] = _blecomm;
 80010c0:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	ble->_BleCommCount++;
 80010c4:	3301      	adds	r3, #1
	ble->_BleCommArr[ble->_BleCommCount] = _blecomm;
 80010c6:	f8c2 40a4 	str.w	r4, [r2, #164]	; 0xa4
	ble->_BleCommCount++;
 80010ca:	f885 3158 	strb.w	r3, [r5, #344]	; 0x158
}
 80010ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080010d0 <Envia_bytes_UART>:
	TX_Buffer[size+1] = (unsigned char) (CRCVar & 0x00FF);

	Envia_bytes_UART(ble,(uint8_t *)TX_Buffer,size+3);
}
void Envia_bytes_UART(Bluetooth *ble, unsigned char _out[], uint8_t size){
	HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)_out, size,50);
 80010d0:	2332      	movs	r3, #50	; 0x32
 80010d2:	6800      	ldr	r0, [r0, #0]
 80010d4:	f006 b9ff 	b.w	80074d6 <HAL_UART_Transmit>

080010d8 <Envia_texto_UART>:
}
void Envia_texto_UART(Bluetooth *ble, char _out[], uint16_t delay){
 80010d8:	b570      	push	{r4, r5, r6, lr}
 80010da:	4606      	mov	r6, r0
	HAL_UART_Transmit(ble->UARTHandle, (uint8_t *) _out, strlen(_out),100);
 80010dc:	4608      	mov	r0, r1
void Envia_texto_UART(Bluetooth *ble, char _out[], uint16_t delay){
 80010de:	4614      	mov	r4, r2
 80010e0:	460d      	mov	r5, r1
	HAL_UART_Transmit(ble->UARTHandle, (uint8_t *) _out, strlen(_out),100);
 80010e2:	f7ff f835 	bl	8000150 <strlen>
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	b282      	uxth	r2, r0
 80010ea:	4629      	mov	r1, r5
 80010ec:	6830      	ldr	r0, [r6, #0]
 80010ee:	f006 f9f2 	bl	80074d6 <HAL_UART_Transmit>
	if(delay != 0){
 80010f2:	b124      	cbz	r4, 80010fe <Envia_texto_UART+0x26>
		osDelay(delay);
 80010f4:	4620      	mov	r0, r4
	}
}
 80010f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(delay);
 80010fa:	f006 bdb9 	b.w	8007c70 <osDelay>
}
 80010fe:	bd70      	pop	{r4, r5, r6, pc}

08001100 <CRC16>:
			0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
			0x40
	};

	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001100:	23ff      	movs	r3, #255	; 0xff
{
 8001102:	b570      	push	{r4, r5, r6, lr}
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001104:	461c      	mov	r4, r3
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001106:	4d07      	ldr	r5, [pc, #28]	; (8001124 <CRC16+0x24>)
		uchCRCHi = auchCRCLo[uIndex] ;
 8001108:	4e07      	ldr	r6, [pc, #28]	; (8001128 <CRC16+0x28>)
 800110a:	4401      	add	r1, r0
	while (usDataLen--) /* pass through message buffer */
 800110c:	4281      	cmp	r1, r0
 800110e:	d102      	bne.n	8001116 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
}//---END---//
 8001110:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 8001114:	bd70      	pop	{r4, r5, r6, pc}
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001116:	f810 2b01 	ldrb.w	r2, [r0], #1
 800111a:	405a      	eors	r2, r3
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800111c:	5cab      	ldrb	r3, [r5, r2]
 800111e:	4063      	eors	r3, r4
		uchCRCHi = auchCRCLo[uIndex] ;
 8001120:	5cb4      	ldrb	r4, [r6, r2]
 8001122:	e7f3      	b.n	800110c <CRC16+0xc>
 8001124:	0800b40d 	.word	0x0800b40d
 8001128:	0800b50d 	.word	0x0800b50d

0800112c <BluetoothEnviaComando>:
{
 800112c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001130:	4688      	mov	r8, r1
	uint8_t	TX_Buffer		[size+3];
 8001132:	f102 030a 	add.w	r3, r2, #10
 8001136:	f023 0307 	bic.w	r3, r3, #7
		TX_Buffer[i]=_out[i];
 800113a:	1c56      	adds	r6, r2, #1
{
 800113c:	af00      	add	r7, sp, #0
	uint8_t	TX_Buffer		[size+3];
 800113e:	ebad 0d03 	sub.w	sp, sp, r3
		TX_Buffer[i]=_out[i];
 8001142:	1c53      	adds	r3, r2, #1
{
 8001144:	4614      	mov	r4, r2
 8001146:	4605      	mov	r5, r0
		TX_Buffer[i]=_out[i];
 8001148:	bfac      	ite	ge
 800114a:	4632      	movge	r2, r6
 800114c:	2200      	movlt	r2, #0
 800114e:	4668      	mov	r0, sp
 8001150:	f009 fa79 	bl	800a646 <memcpy>
	CRCVar = CRC16(_out,size+1);
 8001154:	b2b1      	uxth	r1, r6
 8001156:	4640      	mov	r0, r8
 8001158:	f7ff ffd2 	bl	8001100 <CRC16>
	TX_Buffer[size+2] = (unsigned char) (CRCVar >> 8);
 800115c:	eb0d 0304 	add.w	r3, sp, r4
 8001160:	0a02      	lsrs	r2, r0, #8
 8001162:	709a      	strb	r2, [r3, #2]
	Envia_bytes_UART(ble,(uint8_t *)TX_Buffer,size+3);
 8001164:	1ce2      	adds	r2, r4, #3
	TX_Buffer[size+1] = (unsigned char) (CRCVar & 0x00FF);
 8001166:	f80d 0006 	strb.w	r0, [sp, r6]
	Envia_bytes_UART(ble,(uint8_t *)TX_Buffer,size+3);
 800116a:	4669      	mov	r1, sp
 800116c:	4628      	mov	r0, r5
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	f7ff ffae 	bl	80010d0 <Envia_bytes_UART>
}
 8001174:	46bd      	mov	sp, r7
 8001176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800117a <BluetoothErroCRC>:
	}
}
void BluetoothErroCRC(Bluetooth* ble)
{
	unsigned char	TXCRC[3];
	TXCRC[0] = 0x01;\
 800117a:	f64e 6301 	movw	r3, #60929	; 0xee01
{
 800117e:	b507      	push	{r0, r1, r2, lr}
	TXCRC[0] = 0x01;\
 8001180:	f8ad 3004 	strh.w	r3, [sp, #4]
	TXCRC[1] = 0xEE;\
	TXCRC[2] = 0xEE;\
 8001184:	23ee      	movs	r3, #238	; 0xee
	Envia_bytes_UART(ble,TXCRC,3);
 8001186:	2203      	movs	r2, #3
 8001188:	a901      	add	r1, sp, #4
	TXCRC[2] = 0xEE;\
 800118a:	f88d 3006 	strb.w	r3, [sp, #6]
	Envia_bytes_UART(ble,TXCRC,3);
 800118e:	f7ff ff9f 	bl	80010d0 <Envia_bytes_UART>
}
 8001192:	b003      	add	sp, #12
 8001194:	f85d fb04 	ldr.w	pc, [sp], #4

08001198 <BluetoothDescon>:
void BluetoothDescon(Bluetooth* ble){
 8001198:	b538      	push	{r3, r4, r5, lr}
 800119a:	4604      	mov	r4, r0

	Envia_texto_UART(ble,"AT",50);//DESCONECTA
 800119c:	4d0a      	ldr	r5, [pc, #40]	; (80011c8 <BluetoothDescon+0x30>)
 800119e:	2232      	movs	r2, #50	; 0x32
 80011a0:	4629      	mov	r1, r5
 80011a2:	f7ff ff99 	bl	80010d8 <Envia_texto_UART>
	Envia_texto_UART(ble,"AT",50);//DESCONECTA
 80011a6:	2232      	movs	r2, #50	; 0x32
 80011a8:	4620      	mov	r0, r4
 80011aa:	4629      	mov	r1, r5
 80011ac:	f7ff ff94 	bl	80010d8 <Envia_texto_UART>

	/* Prepare DMA for next transfer */
	/* Important! DMA stream won't start if all flags are not cleared first */
	ble->UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
	ble->UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 80011b0:	2240      	movs	r2, #64	; 0x40
	ble->UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
 80011b2:	6863      	ldr	r3, [r4, #4]
 80011b4:	3434      	adds	r4, #52	; 0x34
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60dc      	str	r4, [r3, #12]
	ble->UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 80011ba:	605a      	str	r2, [r3, #4]
	ble->UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	f042 0201 	orr.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
}
 80011c4:	bd38      	pop	{r3, r4, r5, pc}
 80011c6:	bf00      	nop
 80011c8:	0800b350 	.word	0x0800b350

080011cc <txBleComando>:
void txBleComando(Bluetooth *ble){
 80011cc:	b510      	push	{r4, lr}
	evttx = osMessageGet(*ble->filaComandoInternoTX, 0);
 80011ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
void txBleComando(Bluetooth *ble){
 80011d0:	b08c      	sub	sp, #48	; 0x30
	evttx = osMessageGet(*ble->filaComandoInternoTX, 0);
 80011d2:	6819      	ldr	r1, [r3, #0]
void txBleComando(Bluetooth *ble){
 80011d4:	4604      	mov	r4, r0
	evttx = osMessageGet(*ble->filaComandoInternoTX, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	a801      	add	r0, sp, #4
 80011da:	f006 fe3c 	bl	8007e56 <osMessageGet>
	if (evttx.status == osEventMessage) {
 80011de:	9b01      	ldr	r3, [sp, #4]
 80011e0:	2b10      	cmp	r3, #16
 80011e2:	d104      	bne.n	80011ee <txBleComando+0x22>
		switch ((unsigned int)evttx.value.p) {
 80011e4:	9b02      	ldr	r3, [sp, #8]
 80011e6:	2b8a      	cmp	r3, #138	; 0x8a
 80011e8:	d003      	beq.n	80011f2 <txBleComando+0x26>
 80011ea:	2b8b      	cmp	r3, #139	; 0x8b
 80011ec:	d014      	beq.n	8001218 <txBleComando+0x4c>
}
 80011ee:	b00c      	add	sp, #48	; 0x30
 80011f0:	bd10      	pop	{r4, pc}
			if(ble->JanelaConexao > 0){
 80011f2:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 80011f6:	b163      	cbz	r3, 8001212 <txBleComando+0x46>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <txBleComando+0x88>)
 80011fa:	9304      	str	r3, [sp, #16]
				Buffer[4] 	= ble->chave >> 8 		;
 80011fc:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8001200:	ba5b      	rev16	r3, r3
				BluetoothEnviaComando(ble,Buffer, 5);
 8001202:	2205      	movs	r2, #5
				Buffer[4] 	= 0x00;
 8001204:	f8ad 3014 	strh.w	r3, [sp, #20]
				BluetoothEnviaComando(ble,Buffer, 3);
 8001208:	4620      	mov	r0, r4
 800120a:	a904      	add	r1, sp, #16
 800120c:	f7ff ff8e 	bl	800112c <BluetoothEnviaComando>
 8001210:	e7ed      	b.n	80011ee <txBleComando+0x22>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8001212:	4a11      	ldr	r2, [pc, #68]	; (8001258 <txBleComando+0x8c>)
 8001214:	9204      	str	r2, [sp, #16]
 8001216:	e7f4      	b.n	8001202 <txBleComando+0x36>
			if(		ble->_RxDataArr[3] == (ble->chave >> 8) &&
 8001218:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800121c:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 8001220:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
 8001224:	d10b      	bne.n	800123e <txBleComando+0x72>
					ble->_RxDataArr[4] == (ble->chave & 0x00ff) ){
 8001226:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800122a:	b2db      	uxtb	r3, r3
			if(		ble->_RxDataArr[3] == (ble->chave >> 8) &&
 800122c:	429a      	cmp	r2, r3
 800122e:	d106      	bne.n	800123e <txBleComando+0x72>
				ble->MaquinaConexao	= RX_VALIDADO;
 8001230:	2302      	movs	r3, #2
 8001232:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <txBleComando+0x90>)
				BluetoothEnviaComando(ble,Buffer, 3);
 8001238:	2203      	movs	r2, #3
				Buffer[0] 	= 0x01;									// ENDEREÇO
 800123a:	9304      	str	r3, [sp, #16]
				BluetoothEnviaComando(ble,Buffer, 3);
 800123c:	e7e4      	b.n	8001208 <txBleComando+0x3c>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <txBleComando+0x94>)
				BluetoothEnviaComando(ble,Buffer, 3);
 8001240:	4620      	mov	r0, r4
 8001242:	2203      	movs	r2, #3
 8001244:	a904      	add	r1, sp, #16
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8001246:	9304      	str	r3, [sp, #16]
				BluetoothEnviaComando(ble,Buffer, 3);
 8001248:	f7ff ff70 	bl	800112c <BluetoothEnviaComando>
				BluetoothDescon(ble);
 800124c:	4620      	mov	r0, r4
 800124e:	f7ff ffa3 	bl	8001198 <BluetoothDescon>
}
 8001252:	e7cc      	b.n	80011ee <txBleComando+0x22>
 8001254:	01515101 	.word	0x01515101
 8001258:	00515101 	.word	0x00515101
 800125c:	01525201 	.word	0x01525201
 8001260:	00525201 	.word	0x00525201

08001264 <iniciaBleHm10>:
uint8_t iniciaBleHm10(Bluetooth* ble){
 8001264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001268:	4604      	mov	r4, r0
			while (tryingName < max_attempts) {
 800126a:	4ebd      	ldr	r6, [pc, #756]	; (8001560 <iniciaBleHm10+0x2fc>)
				Envia_texto_UART(ble,"AT+NAME?", 100);
 800126c:	4fbd      	ldr	r7, [pc, #756]	; (8001564 <iniciaBleHm10+0x300>)
uint8_t iniciaBleHm10(Bluetooth* ble){
 800126e:	b08e      	sub	sp, #56	; 0x38
		switch (ble->sequenciaBLE) {
 8001270:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8001274:	2b05      	cmp	r3, #5
 8001276:	d8fb      	bhi.n	8001270 <iniciaBleHm10+0xc>
 8001278:	e8df f013 	tbh	[pc, r3, lsl #1]
 800127c:	004c0006 	.word	0x004c0006
 8001280:	013b0087 	.word	0x013b0087
 8001284:	01c30196 	.word	0x01c30196
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128e:	48b6      	ldr	r0, [pc, #728]	; (8001568 <iniciaBleHm10+0x304>)
 8001290:	f004 fa1a 	bl	80056c8 <HAL_GPIO_WritePin>
 8001294:	20c8      	movs	r0, #200	; 0xc8
 8001296:	f006 fceb 	bl	8007c70 <osDelay>
 800129a:	2201      	movs	r2, #1
 800129c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012a0:	48b1      	ldr	r0, [pc, #708]	; (8001568 <iniciaBleHm10+0x304>)
 80012a2:	f004 fa11 	bl	80056c8 <HAL_GPIO_WritePin>
			Envia_texto_UART(ble,"AT+ADTY3",100);	//BLOQUEIA CONEXAO
 80012a6:	2264      	movs	r2, #100	; 0x64
 80012a8:	4620      	mov	r0, r4
 80012aa:	49b0      	ldr	r1, [pc, #704]	; (800156c <iniciaBleHm10+0x308>)
 80012ac:	f7ff ff14 	bl	80010d8 <Envia_texto_UART>
			Envia_texto_UART(ble,"AT+ADTY3",100);	//BLOQUEIA CONEXAO
 80012b0:	2264      	movs	r2, #100	; 0x64
 80012b2:	49ae      	ldr	r1, [pc, #696]	; (800156c <iniciaBleHm10+0x308>)
 80012b4:	4620      	mov	r0, r4
 80012b6:	f7ff ff0f 	bl	80010d8 <Envia_texto_UART>
			SETUP_UART(115200)
 80012ba:	6820      	ldr	r0, [r4, #0]
 80012bc:	f006 f990 	bl	80075e0 <HAL_UART_Abort_IT>
 80012c0:	6820      	ldr	r0, [r4, #0]
 80012c2:	f006 f8ee 	bl	80074a2 <HAL_UART_DeInit>
 80012c6:	2032      	movs	r0, #50	; 0x32
 80012c8:	f006 fcd2 	bl	8007c70 <osDelay>
 80012cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80012d0:	6820      	ldr	r0, [r4, #0]
 80012d2:	6043      	str	r3, [r0, #4]
 80012d4:	f006 f8b6 	bl	8007444 <HAL_UART_Init>
 80012d8:	2032      	movs	r0, #50	; 0x32
 80012da:	f006 fcc9 	bl	8007c70 <osDelay>
			BluetoothDescon(ble);
 80012de:	4620      	mov	r0, r4
 80012e0:	f7ff ff5a 	bl	8001198 <BluetoothDescon>
			MACRO_DEFINE_INTERRUPT
 80012e4:	6820      	ldr	r0, [r4, #0]
 80012e6:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80012ea:	6802      	ldr	r2, [r0, #0]
 80012ec:	68d3      	ldr	r3, [r2, #12]
 80012ee:	f043 0310 	orr.w	r3, r3, #16
 80012f2:	60d3      	str	r3, [r2, #12]
 80012f4:	6863      	ldr	r3, [r4, #4]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	6813      	ldr	r3, [r2, #0]
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	2240      	movs	r2, #64	; 0x40
 8001302:	f006 fc6b 	bl	8007bdc <HAL_UART_Receive_DMA>
				ble->sequenciaBLE = redefineBle;//extrapolou as tentativas
 8001306:	2302      	movs	r3, #2
				ble->sequenciaBLE = erro;//extrapolou as tentativas
 8001308:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		switch (ble->sequenciaBLE) {
 800130c:	e7b0      	b.n	8001270 <iniciaBleHm10+0xc>
					tryingName++;
 800130e:	7833      	ldrb	r3, [r6, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	7033      	strb	r3, [r6, #0]
			while (tryingName < max_attempts) {
 8001314:	7833      	ldrb	r3, [r6, #0]
 8001316:	2b0e      	cmp	r3, #14
 8001318:	d8f5      	bhi.n	8001306 <iniciaBleHm10+0xa2>
				Envia_texto_UART(ble,"AT+NAME?", 100);
 800131a:	2264      	movs	r2, #100	; 0x64
 800131c:	4639      	mov	r1, r7
 800131e:	4620      	mov	r0, r4
 8001320:	f7ff feda 	bl	80010d8 <Envia_texto_UART>
				MACRO_DEFINE_INTERRUPT
 8001324:	6820      	ldr	r0, [r4, #0]
 8001326:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800132a:	6802      	ldr	r2, [r0, #0]
				ble->ss = strstr(ble->StringRecebida, "NAME");
 800132c:	f104 0562 	add.w	r5, r4, #98	; 0x62
				MACRO_DEFINE_INTERRUPT
 8001330:	68d3      	ldr	r3, [r2, #12]
 8001332:	f043 0310 	orr.w	r3, r3, #16
 8001336:	60d3      	str	r3, [r2, #12]
 8001338:	6863      	ldr	r3, [r4, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	6813      	ldr	r3, [r2, #0]
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	2240      	movs	r2, #64	; 0x40
 8001346:	f006 fc49 	bl	8007bdc <HAL_UART_Receive_DMA>
				osDelay(delay_between_attempts_ms);
 800134a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800134e:	f006 fc8f 	bl	8007c70 <osDelay>
				ble->ss = NULL;
 8001352:	2300      	movs	r3, #0
				ble->ss = strstr(ble->StringRecebida, "NAME");
 8001354:	4628      	mov	r0, r5
 8001356:	4986      	ldr	r1, [pc, #536]	; (8001570 <iniciaBleHm10+0x30c>)
				ble->ss = NULL;
 8001358:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
				ble->ss = strstr(ble->StringRecebida, "NAME");
 800135c:	f009 f87c 	bl	800a458 <strstr>
 8001360:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
				if (ble->ss != NULL){
 8001364:	2800      	cmp	r0, #0
 8001366:	d0d2      	beq.n	800130e <iniciaBleHm10+0xaa>
					ble->ss = strstr(ble->StringRecebida, BLE_DEVICE_NAME);
 8001368:	4628      	mov	r0, r5
 800136a:	4982      	ldr	r1, [pc, #520]	; (8001574 <iniciaBleHm10+0x310>)
 800136c:	f009 f874 	bl	800a458 <strstr>
					if (ble->ss != NULL){
 8001370:	2800      	cmp	r0, #0
 8001372:	bf14      	ite	ne
 8001374:	2303      	movne	r3, #3
 8001376:	2302      	moveq	r3, #2
						ble->sequenciaBLE = capturaAddr;
 8001378:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			if(tryingName >= max_attempts)
 800137c:	7833      	ldrb	r3, [r6, #0]
					ble->ss = strstr(ble->StringRecebida, BLE_DEVICE_NAME);
 800137e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
			if(tryingName >= max_attempts)
 8001382:	2b0e      	cmp	r3, #14
 8001384:	f67f af74 	bls.w	8001270 <iniciaBleHm10+0xc>
 8001388:	e7bd      	b.n	8001306 <iniciaBleHm10+0xa2>
			SETUP_UART(115200)
 800138a:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
 800138e:	6820      	ldr	r0, [r4, #0]
 8001390:	f006 f926 	bl	80075e0 <HAL_UART_Abort_IT>
 8001394:	6820      	ldr	r0, [r4, #0]
 8001396:	f006 f884 	bl	80074a2 <HAL_UART_DeInit>
 800139a:	2032      	movs	r0, #50	; 0x32
 800139c:	f006 fc68 	bl	8007c70 <osDelay>
 80013a0:	6820      	ldr	r0, [r4, #0]
 80013a2:	6045      	str	r5, [r0, #4]
 80013a4:	f006 f84e 	bl	8007444 <HAL_UART_Init>
 80013a8:	2032      	movs	r0, #50	; 0x32
 80013aa:	f006 fc61 	bl	8007c70 <osDelay>
			Envia_texto_UART(ble,"AT",100);	//
 80013ae:	2264      	movs	r2, #100	; 0x64
 80013b0:	4620      	mov	r0, r4
 80013b2:	4971      	ldr	r1, [pc, #452]	; (8001578 <iniciaBleHm10+0x314>)
 80013b4:	f7ff fe90 	bl	80010d8 <Envia_texto_UART>
			Envia_texto_UART(ble,"AT",100);	//
 80013b8:	2264      	movs	r2, #100	; 0x64
 80013ba:	4620      	mov	r0, r4
 80013bc:	496e      	ldr	r1, [pc, #440]	; (8001578 <iniciaBleHm10+0x314>)
 80013be:	f7ff fe8b 	bl	80010d8 <Envia_texto_UART>
			Envia_texto_UART(ble,"AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 80013c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013c6:	496d      	ldr	r1, [pc, #436]	; (800157c <iniciaBleHm10+0x318>)
 80013c8:	4620      	mov	r0, r4
 80013ca:	f7ff fe85 	bl	80010d8 <Envia_texto_UART>
			SETUP_UART(9600)
 80013ce:	6820      	ldr	r0, [r4, #0]
 80013d0:	f006 f906 	bl	80075e0 <HAL_UART_Abort_IT>
 80013d4:	6820      	ldr	r0, [r4, #0]
 80013d6:	f006 f864 	bl	80074a2 <HAL_UART_DeInit>
 80013da:	2032      	movs	r0, #50	; 0x32
 80013dc:	f006 fc48 	bl	8007c70 <osDelay>
 80013e0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80013e4:	6820      	ldr	r0, [r4, #0]
 80013e6:	6043      	str	r3, [r0, #4]
 80013e8:	f006 f82c 	bl	8007444 <HAL_UART_Init>
 80013ec:	2032      	movs	r0, #50	; 0x32
 80013ee:	f006 fc3f 	bl	8007c70 <osDelay>
			Envia_texto_UART(ble,"AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 80013f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013f6:	4620      	mov	r0, r4
 80013f8:	4960      	ldr	r1, [pc, #384]	; (800157c <iniciaBleHm10+0x318>)
 80013fa:	f7ff fe6d 	bl	80010d8 <Envia_texto_UART>
			Envia_texto_UART(ble,"AT",100);	//
 80013fe:	2264      	movs	r2, #100	; 0x64
 8001400:	4620      	mov	r0, r4
 8001402:	495d      	ldr	r1, [pc, #372]	; (8001578 <iniciaBleHm10+0x314>)
 8001404:	f7ff fe68 	bl	80010d8 <Envia_texto_UART>
			Envia_texto_UART(ble,"AT",100);	//
 8001408:	2264      	movs	r2, #100	; 0x64
 800140a:	4620      	mov	r0, r4
 800140c:	495a      	ldr	r1, [pc, #360]	; (8001578 <iniciaBleHm10+0x314>)
 800140e:	f7ff fe63 	bl	80010d8 <Envia_texto_UART>
			Envia_texto_UART(ble,"AT+ADTY3",300);	//BLOQUEIA CONEXAO
 8001412:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001416:	4620      	mov	r0, r4
 8001418:	4954      	ldr	r1, [pc, #336]	; (800156c <iniciaBleHm10+0x308>)
 800141a:	f7ff fe5d 	bl	80010d8 <Envia_texto_UART>
			Envia_texto_UART(ble,"AT+BAUD4",300);	//COLOCA BAUD EM 115200
 800141e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001422:	4957      	ldr	r1, [pc, #348]	; (8001580 <iniciaBleHm10+0x31c>)
 8001424:	4620      	mov	r0, r4
 8001426:	f7ff fe57 	bl	80010d8 <Envia_texto_UART>
			SETUP_UART(115200)
 800142a:	6820      	ldr	r0, [r4, #0]
 800142c:	f006 f8d8 	bl	80075e0 <HAL_UART_Abort_IT>
 8001430:	6820      	ldr	r0, [r4, #0]
 8001432:	f006 f836 	bl	80074a2 <HAL_UART_DeInit>
 8001436:	2032      	movs	r0, #50	; 0x32
 8001438:	f006 fc1a 	bl	8007c70 <osDelay>
 800143c:	6820      	ldr	r0, [r4, #0]
 800143e:	6045      	str	r5, [r0, #4]
 8001440:	f006 f800 	bl	8007444 <HAL_UART_Init>
 8001444:	2032      	movs	r0, #50	; 0x32
 8001446:	f006 fc13 	bl	8007c70 <osDelay>
			MACRO_RESET_BLE
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001450:	4845      	ldr	r0, [pc, #276]	; (8001568 <iniciaBleHm10+0x304>)
 8001452:	f004 f939 	bl	80056c8 <HAL_GPIO_WritePin>
 8001456:	20c8      	movs	r0, #200	; 0xc8
 8001458:	f006 fc0a 	bl	8007c70 <osDelay>
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001462:	4841      	ldr	r0, [pc, #260]	; (8001568 <iniciaBleHm10+0x304>)
 8001464:	f004 f930 	bl	80056c8 <HAL_GPIO_WritePin>
			Envia_texto_UART(ble,"AT",100);	//
 8001468:	2264      	movs	r2, #100	; 0x64
 800146a:	4620      	mov	r0, r4
 800146c:	4942      	ldr	r1, [pc, #264]	; (8001578 <iniciaBleHm10+0x314>)
 800146e:	f7ff fe33 	bl	80010d8 <Envia_texto_UART>
			Envia_texto_UART(ble,"AT",100);	//
 8001472:	2264      	movs	r2, #100	; 0x64
 8001474:	4620      	mov	r0, r4
 8001476:	4940      	ldr	r1, [pc, #256]	; (8001578 <iniciaBleHm10+0x314>)
 8001478:	f7ff fe2e 	bl	80010d8 <Envia_texto_UART>
			Envia_texto_UART(ble,"AT+POWE3",300);	//POTENCIA MAXIMA
 800147c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001480:	4620      	mov	r0, r4
 8001482:	4940      	ldr	r1, [pc, #256]	; (8001584 <iniciaBleHm10+0x320>)
 8001484:	f7ff fe28 	bl	80010d8 <Envia_texto_UART>
			Envia_texto_UART(ble,"AT+SHOW3",300);	//MOSTRA O NOME e rssi
 8001488:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800148c:	4620      	mov	r0, r4
 800148e:	493e      	ldr	r1, [pc, #248]	; (8001588 <iniciaBleHm10+0x324>)
 8001490:	f7ff fe22 	bl	80010d8 <Envia_texto_UART>
			Envia_texto_UART(ble,"AT+GAIN1",300);	//INSERE GANHO
 8001494:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001498:	4620      	mov	r0, r4
 800149a:	493c      	ldr	r1, [pc, #240]	; (800158c <iniciaBleHm10+0x328>)
 800149c:	f7ff fe1c 	bl	80010d8 <Envia_texto_UART>
			Envia_texto_UART(ble,"AT+NOTI1",300);	//NOTIFICA QUE CONECTOU
 80014a0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014a4:	4620      	mov	r0, r4
 80014a6:	493a      	ldr	r1, [pc, #232]	; (8001590 <iniciaBleHm10+0x32c>)
 80014a8:	f7ff fe16 	bl	80010d8 <Envia_texto_UART>
			Envia_texto_UART(ble,"AT+PIO11",300);	//1 - CONECT = 1  \  DISC = 0
 80014ac:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014b0:	4620      	mov	r0, r4
 80014b2:	4938      	ldr	r1, [pc, #224]	; (8001594 <iniciaBleHm10+0x330>)
 80014b4:	f7ff fe10 	bl	80010d8 <Envia_texto_UART>
			snprintf(comando, sizeof(comando), "AT+NAME%s", BLE_DEVICE_NAME);
 80014b8:	4b2e      	ldr	r3, [pc, #184]	; (8001574 <iniciaBleHm10+0x310>)
 80014ba:	2132      	movs	r1, #50	; 0x32
 80014bc:	4a36      	ldr	r2, [pc, #216]	; (8001598 <iniciaBleHm10+0x334>)
 80014be:	a801      	add	r0, sp, #4
 80014c0:	f008 feb6 	bl	800a230 <sniprintf>
			Envia_texto_UART(ble,comando, 400); // Configura o nome no dispositivo
 80014c4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80014c8:	4620      	mov	r0, r4
 80014ca:	a901      	add	r1, sp, #4
 80014cc:	f7ff fe04 	bl	80010d8 <Envia_texto_UART>
			M_BLE_RESET
 80014d0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80014d4:	4620      	mov	r0, r4
 80014d6:	4931      	ldr	r1, [pc, #196]	; (800159c <iniciaBleHm10+0x338>)
 80014d8:	f7ff fdfe 	bl	80010d8 <Envia_texto_UART>
			ble->sequenciaBLE = capturaAddr;
 80014dc:	2303      	movs	r3, #3
 80014de:	e713      	b.n	8001308 <iniciaBleHm10+0xa4>
					tryingAddr++;
 80014e0:	782b      	ldrb	r3, [r5, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	b2db      	uxtb	r3, r3
			if(tryingAddr >= max_attempts){
 80014e6:	2b0e      	cmp	r3, #14
					tryingAddr++;
 80014e8:	702b      	strb	r3, [r5, #0]
			if(tryingAddr >= max_attempts){
 80014ea:	f67f aec1 	bls.w	8001270 <iniciaBleHm10+0xc>
				ble->sequenciaBLE = erro;//extrapolou as tentativas
 80014ee:	2305      	movs	r3, #5
 80014f0:	e70a      	b.n	8001308 <iniciaBleHm10+0xa4>
			while (tryingAddr < max_attempts) {
 80014f2:	4d2b      	ldr	r5, [pc, #172]	; (80015a0 <iniciaBleHm10+0x33c>)
 80014f4:	782b      	ldrb	r3, [r5, #0]
 80014f6:	2b0e      	cmp	r3, #14
 80014f8:	d8f9      	bhi.n	80014ee <iniciaBleHm10+0x28a>
				Envia_texto_UART(ble,"AT+ADDR?",300);//pede addr
 80014fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014fe:	4620      	mov	r0, r4
 8001500:	4928      	ldr	r1, [pc, #160]	; (80015a4 <iniciaBleHm10+0x340>)
 8001502:	f7ff fde9 	bl	80010d8 <Envia_texto_UART>
				MACRO_DEFINE_INTERRUPT
 8001506:	6820      	ldr	r0, [r4, #0]
 8001508:	f104 0834 	add.w	r8, r4, #52	; 0x34
 800150c:	6802      	ldr	r2, [r0, #0]
 800150e:	4641      	mov	r1, r8
 8001510:	68d3      	ldr	r3, [r2, #12]
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	60d3      	str	r3, [r2, #12]
 8001518:	6863      	ldr	r3, [r4, #4]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	6813      	ldr	r3, [r2, #0]
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	2240      	movs	r2, #64	; 0x40
 8001526:	f006 fb59 	bl	8007bdc <HAL_UART_Receive_DMA>
				if (ble->chave != 0){
 800152a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0d6      	beq.n	80014e0 <iniciaBleHm10+0x27c>
					ble->sequenciaBLE = final;
 8001532:	2304      	movs	r3, #4
					MACRO_DEFINE_INTERRUPT
 8001534:	6820      	ldr	r0, [r4, #0]
					ble->sequenciaBLE = final;
 8001536:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
					MACRO_DEFINE_INTERRUPT
 800153a:	6802      	ldr	r2, [r0, #0]
 800153c:	4641      	mov	r1, r8
 800153e:	68d3      	ldr	r3, [r2, #12]
 8001540:	f043 0310 	orr.w	r3, r3, #16
 8001544:	60d3      	str	r3, [r2, #12]
 8001546:	6863      	ldr	r3, [r4, #4]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	2240      	movs	r2, #64	; 0x40
 8001554:	f006 fb42 	bl	8007bdc <HAL_UART_Receive_DMA>
					tryingAddr=0;
 8001558:	2300      	movs	r3, #0
 800155a:	702b      	strb	r3, [r5, #0]
			if(tryingAddr >= max_attempts){
 800155c:	e688      	b.n	8001270 <iniciaBleHm10+0xc>
 800155e:	bf00      	nop
 8001560:	2000008d 	.word	0x2000008d
 8001564:	0800b35c 	.word	0x0800b35c
 8001568:	40010c00 	.word	0x40010c00
 800156c:	0800b353 	.word	0x0800b353
 8001570:	0800b365 	.word	0x0800b365
 8001574:	0800b36a 	.word	0x0800b36a
 8001578:	0800b350 	.word	0x0800b350
 800157c:	0800b374 	.word	0x0800b374
 8001580:	0800b37d 	.word	0x0800b37d
 8001584:	0800b386 	.word	0x0800b386
 8001588:	0800b38f 	.word	0x0800b38f
 800158c:	0800b398 	.word	0x0800b398
 8001590:	0800b3a1 	.word	0x0800b3a1
 8001594:	0800b3aa 	.word	0x0800b3aa
 8001598:	0800b3b3 	.word	0x0800b3b3
 800159c:	0800b3bd 	.word	0x0800b3bd
 80015a0:	2000008c 	.word	0x2000008c
 80015a4:	0800b3c6 	.word	0x0800b3c6
			Envia_texto_UART(ble,"AT+ADTY0",300);	//DESBLOQUEIA CONEXA
 80015a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ac:	4620      	mov	r0, r4
 80015ae:	4916      	ldr	r1, [pc, #88]	; (8001608 <iniciaBleHm10+0x3a4>)
 80015b0:	f7ff fd92 	bl	80010d8 <Envia_texto_UART>
			MACRO_RESET_BLE
 80015b4:	2200      	movs	r2, #0
 80015b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ba:	4814      	ldr	r0, [pc, #80]	; (800160c <iniciaBleHm10+0x3a8>)
 80015bc:	f004 f884 	bl	80056c8 <HAL_GPIO_WritePin>
 80015c0:	20c8      	movs	r0, #200	; 0xc8
 80015c2:	f006 fb55 	bl	8007c70 <osDelay>
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015cc:	480f      	ldr	r0, [pc, #60]	; (800160c <iniciaBleHm10+0x3a8>)
 80015ce:	f004 f87b 	bl	80056c8 <HAL_GPIO_WritePin>
			__HAL_UART_ENABLE_IT 	(ble->UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 80015d2:	6820      	ldr	r0, [r4, #0]
			HAL_UART_Receive_DMA 	(ble->UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 80015d4:	f104 0134 	add.w	r1, r4, #52	; 0x34
			__HAL_UART_ENABLE_IT 	(ble->UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 80015d8:	6802      	ldr	r2, [r0, #0]
 80015da:	68d3      	ldr	r3, [r2, #12]
 80015dc:	f043 0310 	orr.w	r3, r3, #16
 80015e0:	60d3      	str	r3, [r2, #12]
			__HAL_DMA_ENABLE_IT 	(ble->UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
 80015e2:	6863      	ldr	r3, [r4, #4]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	6813      	ldr	r3, [r2, #0]
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_DMA 	(ble->UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 80015ee:	2240      	movs	r2, #64	; 0x40
 80015f0:	f006 faf4 	bl	8007bdc <HAL_UART_Receive_DMA>
			ble->SistemaInit = 1;
 80015f4:	2301      	movs	r3, #1
			return 0;
 80015f6:	2000      	movs	r0, #0
			ble->SistemaInit = 1;
 80015f8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
}
 80015fc:	b00e      	add	sp, #56	; 0x38
 80015fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (ble->sequenciaBLE) {
 8001602:	2002      	movs	r0, #2
 8001604:	e7fa      	b.n	80015fc <iniciaBleHm10+0x398>
 8001606:	bf00      	nop
 8001608:	0800b3cf 	.word	0x0800b3cf
 800160c:	40010c00 	.word	0x40010c00

08001610 <BluetoothInit>:
uint8_t BluetoothInit(Bluetooth *ble, UART_HandleTypeDef *bluetoothUARTHandle, DMA_HandleTypeDef *bluetoothUARTDMAHandle, osMessageQId *_filaRX, osMessageQId *_filaTX, osMessageQId *_filaComandoInternoTX){
 8001610:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ble->filaComandosRX 		= _filaRX;
 8001612:	6283      	str	r3, [r0, #40]	; 0x28
	ble->filaComandosTX 		= _filaTX;
 8001614:	9b06      	ldr	r3, [sp, #24]
	ble->_BleCommCount  = 0;
 8001616:	2500      	movs	r5, #0
	ble->filaComandosTX 		= _filaTX;
 8001618:	62c3      	str	r3, [r0, #44]	; 0x2c
	ble->filaComandoInternoTX 	= _filaComandoInternoTX;
 800161a:	9b07      	ldr	r3, [sp, #28]
uint8_t BluetoothInit(Bluetooth *ble, UART_HandleTypeDef *bluetoothUARTHandle, DMA_HandleTypeDef *bluetoothUARTDMAHandle, osMessageQId *_filaRX, osMessageQId *_filaTX, osMessageQId *_filaComandoInternoTX){
 800161c:	4604      	mov	r4, r0
	ble->filaComandoInternoTX 	= _filaComandoInternoTX;
 800161e:	6303      	str	r3, [r0, #48]	; 0x30
	ble->JanelaConexao = 120;//120 segundos
 8001620:	2378      	movs	r3, #120	; 0x78
	BluetoothAddComp(ble, &ble->BLEPedeSenha,   	"RX_PEDE_SENHA",	RX_PEDE_SENHA,   	ComandoConexao);
 8001622:	2602      	movs	r6, #2
	ble->UARTDMAHandle 	= bluetoothUARTDMAHandle;
 8001624:	e9c0 1200 	strd	r1, r2, [r0]
	ble->_BleCommCount  = 0;
 8001628:	f880 5158 	strb.w	r5, [r0, #344]	; 0x158
	ble->JanelaConexao = 120;//120 segundos
 800162c:	f880 3057 	strb.w	r3, [r0, #87]	; 0x57
	iniciaBleHm10(ble);
 8001630:	f7ff fe18 	bl	8001264 <iniciaBleHm10>
	BluetoothAddComp(ble, &ble->BLEPedeSenha,   	"RX_PEDE_SENHA",	RX_PEDE_SENHA,   	ComandoConexao);
 8001634:	f104 0194 	add.w	r1, r4, #148	; 0x94
 8001638:	2342      	movs	r3, #66	; 0x42
 800163a:	4620      	mov	r0, r4
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <BluetoothInit+0x4c>)
 800163e:	9600      	str	r6, [sp, #0]
 8001640:	f7ff fd28 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(ble, &ble->BLERecebeuSenha,	"RX_RECEBEU_SENHA", RX_RECEBEU_SENHA,	ComandoConexao);
 8001644:	2340      	movs	r3, #64	; 0x40
 8001646:	4620      	mov	r0, r4
 8001648:	4a05      	ldr	r2, [pc, #20]	; (8001660 <BluetoothInit+0x50>)
 800164a:	9600      	str	r6, [sp, #0]
 800164c:	f104 019c 	add.w	r1, r4, #156	; 0x9c
 8001650:	f7ff fd20 	bl	8001094 <BluetoothAddComp>
}
 8001654:	4628      	mov	r0, r5
 8001656:	b002      	add	sp, #8
 8001658:	bd70      	pop	{r4, r5, r6, pc}
 800165a:	bf00      	nop
 800165c:	0800b3d8 	.word	0x0800b3d8
 8001660:	0800b3e6 	.word	0x0800b3e6

08001664 <bluetooth10ms>:
void bluetooth10ms(Bluetooth* ble){
 8001664:	b510      	push	{r4, lr}

	/*INCREMENTO DE INATIVIDADE-------------------*/
	(ble->msIdle<=DEF_TEMPO_MAX_S_MSG_LOW)?ble->msIdle++:0;
 8001666:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
void bluetooth10ms(Bluetooth* ble){
 800166a:	4604      	mov	r4, r0
	(ble->msIdle<=DEF_TEMPO_MAX_S_MSG_LOW)?ble->msIdle++:0;
 800166c:	2b78      	cmp	r3, #120	; 0x78
 800166e:	bf9c      	itt	ls
 8001670:	3301      	addls	r3, #1
 8001672:	f8a0 305a 	strhls.w	r3, [r0, #90]	; 0x5a

	/*MONITOR INATIVIDADE-------------------------*/
	if(ble->JanelaConexao>0){
 8001676:	f890 3057 	ldrb.w	r3, [r0, #87]	; 0x57
 800167a:	b17b      	cbz	r3, 800169c <bluetooth10ms+0x38>
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_HIGH)	{
 800167c:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8001680:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001684:	d901      	bls.n	800168a <bluetooth10ms+0x26>
			BluetoothDescon(ble);
 8001686:	f7ff fd87 	bl	8001198 <BluetoothDescon>
	}
	else{
		__NOP();
	}

	if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_LOW)	{
 800168a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800168e:	2b78      	cmp	r3, #120	; 0x78
 8001690:	d906      	bls.n	80016a0 <bluetooth10ms+0x3c>
		BluetoothDescon(ble);
 8001692:	4620      	mov	r0, r4
	}
}
 8001694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BluetoothDescon(ble);
 8001698:	f7ff bd7e 	b.w	8001198 <BluetoothDescon>
		__NOP();
 800169c:	bf00      	nop
 800169e:	e7f4      	b.n	800168a <bluetooth10ms+0x26>
}
 80016a0:	bd10      	pop	{r4, pc}

080016a2 <bluetooth1000ms>:
void bluetooth1000ms(Bluetooth* ble){
	if(ble->JanelaConexao>0)
 80016a2:	f890 3057 	ldrb.w	r3, [r0, #87]	; 0x57
 80016a6:	b113      	cbz	r3, 80016ae <bluetooth1000ms+0xc>
		ble->JanelaConexao--;
 80016a8:	3b01      	subs	r3, #1
 80016aa:	f880 3057 	strb.w	r3, [r0, #87]	; 0x57
}
 80016ae:	4770      	bx	lr

080016b0 <cancelaAntecipacao>:
void cancelaAntecipacao(Bluetooth* ble){
	if(!ble->SistemaInit)
 80016b0:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
 80016b4:	b90b      	cbnz	r3, 80016ba <cancelaAntecipacao+0xa>
		BluetoothDescon(ble);
 80016b6:	f7ff bd6f 	b.w	8001198 <BluetoothDescon>
}
 80016ba:	4770      	bx	lr

080016bc <BluetoothPutFila>:
void BluetoothPutFila(Bluetooth* ble){
 80016bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016c0:	4604      	mov	r4, r0
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 80016c2:	2600      	movs	r6, #0
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 80016c4:	f100 0734 	add.w	r7, r0, #52	; 0x34
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 80016c8:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
 80016cc:	b2f5      	uxtb	r5, r6
 80016ce:	42ab      	cmp	r3, r5
 80016d0:	d801      	bhi.n	80016d6 <BluetoothPutFila+0x1a>
}
 80016d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if( ble->_RxDataArr[1] == (ble->_BleCommArr[i]->_comando)){
 80016d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80016da:	f8d5 90a4 	ldr.w	r9, [r5, #164]	; 0xa4
 80016de:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80016e2:	f899 3000 	ldrb.w	r3, [r9]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d12c      	bne.n	8001744 <BluetoothPutFila+0x88>
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 80016ea:	f894 8055 	ldrb.w	r8, [r4, #85]	; 0x55
 80016ee:	4638      	mov	r0, r7
 80016f0:	f1a8 0102 	sub.w	r1, r8, #2
 80016f4:	b289      	uxth	r1, r1
 80016f6:	f7ff fd03 	bl	8001100 <CRC16>
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 80016fa:	44a0      	add	r8, r4
 80016fc:	f898 2032 	ldrb.w	r2, [r8, #50]	; 0x32
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 8001700:	b203      	sxth	r3, r0
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 8001702:	b2c0      	uxtb	r0, r0
 8001704:	4282      	cmp	r2, r0
 8001706:	d105      	bne.n	8001714 <BluetoothPutFila+0x58>
 8001708:	f898 2033 	ldrb.w	r2, [r8, #51]	; 0x33
 800170c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001710:	429a      	cmp	r2, r3
 8001712:	d004      	beq.n	800171e <BluetoothPutFila+0x62>
				BluetoothErroCRC(ble);//erro de CRC
 8001714:	4620      	mov	r0, r4
}
 8001716:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
				BluetoothErroCRC(ble);//erro de CRC
 800171a:	f7ff bd2e 	b.w	800117a <BluetoothErroCRC>
			if(ble->_BleCommArr[i]->_tipo == ComandoConexao ){
 800171e:	f899 3001 	ldrb.w	r3, [r9, #1]
				cancelaAntecipacao(ble);
 8001722:	4620      	mov	r0, r4
			if(ble->_BleCommArr[i]->_tipo == ComandoConexao ){
 8001724:	2b02      	cmp	r3, #2
 8001726:	d113      	bne.n	8001750 <BluetoothPutFila+0x94>
				cancelaAntecipacao(ble);
 8001728:	f7ff ffc2 	bl	80016b0 <cancelaAntecipacao>
				switch (ble->_RxDataArr[1]) {
 800172c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001730:	2b40      	cmp	r3, #64	; 0x40
 8001732:	d009      	beq.n	8001748 <BluetoothPutFila+0x8c>
 8001734:	2b42      	cmp	r3, #66	; 0x42
 8001736:	d105      	bne.n	8001744 <BluetoothPutFila+0x88>
					osMessagePut(*ble->filaComandoInternoTX, COMANDO_SOLICITACAO_SENHA, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	218a      	movs	r1, #138	; 0x8a
 800173c:	6b23      	ldr	r3, [r4, #48]	; 0x30
					osMessagePut(*ble->filaComandoInternoTX, COMANDO_AVALIACAO_CHAVE, 0);
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	f006 fb61 	bl	8007e06 <osMessagePut>
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 8001744:	3601      	adds	r6, #1
 8001746:	e7bf      	b.n	80016c8 <BluetoothPutFila+0xc>
					osMessagePut(*ble->filaComandoInternoTX, COMANDO_AVALIACAO_CHAVE, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	218b      	movs	r1, #139	; 0x8b
 800174c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800174e:	e7f6      	b.n	800173e <BluetoothPutFila+0x82>
			}else if(ble->_BleCommArr[i]->_tipo == ComandoBasico && ble->MaquinaConexao == RX_VALIDADO ){
 8001750:	2b01      	cmp	r3, #1
 8001752:	d10b      	bne.n	800176c <BluetoothPutFila+0xb0>
 8001754:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8001758:	2b02      	cmp	r3, #2
 800175a:	d107      	bne.n	800176c <BluetoothPutFila+0xb0>
				cancelaAntecipacao(ble);
 800175c:	f7ff ffa8 	bl	80016b0 <cancelaAntecipacao>
				osMessagePut(*ble->filaComandosRX, ble->_BleCommArr[i]->_comando, 0);
 8001760:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8001764:	2200      	movs	r2, #0
 8001766:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001768:	7809      	ldrb	r1, [r1, #0]
 800176a:	e7e8      	b.n	800173e <BluetoothPutFila+0x82>
				BluetoothDescon(ble);
 800176c:	f7ff fd14 	bl	8001198 <BluetoothDescon>
 8001770:	e7e8      	b.n	8001744 <BluetoothPutFila+0x88>
	...

08001774 <BLEDMA_IrqHandler>:
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){   // if the source is TC
 8001774:	6843      	ldr	r3, [r0, #4]
{
 8001776:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){   // if the source is TC
 8001778:	681b      	ldr	r3, [r3, #0]
{
 800177a:	4604      	mov	r4, r0
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){   // if the source is TC
 800177c:	681a      	ldr	r2, [r3, #0]
{
 800177e:	b085      	sub	sp, #20
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){   // if the source is TC
 8001780:	0792      	lsls	r2, r2, #30
 8001782:	d538      	bpl.n	80017f6 <BLEDMA_IrqHandler+0x82>
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 8001784:	4a50      	ldr	r2, [pc, #320]	; (80018c8 <BLEDMA_IrqHandler+0x154>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d037      	beq.n	80017fa <BLEDMA_IrqHandler+0x86>
 800178a:	3214      	adds	r2, #20
 800178c:	4293      	cmp	r3, r2
 800178e:	d036      	beq.n	80017fe <BLEDMA_IrqHandler+0x8a>
 8001790:	3214      	adds	r2, #20
 8001792:	4293      	cmp	r3, r2
 8001794:	d035      	beq.n	8001802 <BLEDMA_IrqHandler+0x8e>
 8001796:	3214      	adds	r2, #20
 8001798:	4293      	cmp	r3, r2
 800179a:	d035      	beq.n	8001808 <BLEDMA_IrqHandler+0x94>
 800179c:	3214      	adds	r2, #20
 800179e:	4293      	cmp	r3, r2
 80017a0:	d035      	beq.n	800180e <BLEDMA_IrqHandler+0x9a>
 80017a2:	3214      	adds	r2, #20
 80017a4:	4293      	cmp	r3, r2
 80017a6:	bf0c      	ite	eq
 80017a8:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 80017ac:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
		ble->msIdle=0;
 80017b0:	2700      	movs	r7, #0
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 80017b2:	4946      	ldr	r1, [pc, #280]	; (80018cc <BLEDMA_IrqHandler+0x158>)
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 80017b4:	f104 0662 	add.w	r6, r4, #98	; 0x62
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 80017b8:	604a      	str	r2, [r1, #4]
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - ble->UARTDMAHandle->Instance->CNDTR;
 80017ba:	685b      	ldr	r3, [r3, #4]
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 80017bc:	f104 0534 	add.w	r5, r4, #52	; 0x34
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - ble->UARTDMAHandle->Instance->CNDTR;
 80017c0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80017c4:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 80017c8:	4629      	mov	r1, r5
 80017ca:	4630      	mov	r0, r6
		ble->msIdle=0;
 80017cc:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 80017d0:	f008 ff31 	bl	800a636 <strcpy>
		switch(ble->MaquinaConexao){
 80017d4:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
		ble->msDesconectado = 0;
 80017d8:	f884 7058 	strb.w	r7, [r4, #88]	; 0x58
		switch(ble->MaquinaConexao){
 80017dc:	b1d3      	cbz	r3, 8001814 <BLEDMA_IrqHandler+0xa0>
 80017de:	3b01      	subs	r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d953      	bls.n	800188c <BLEDMA_IrqHandler+0x118>
		ble->UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 80017e4:	2240      	movs	r2, #64	; 0x40
		ble->UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
 80017e6:	6863      	ldr	r3, [r4, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60dd      	str	r5, [r3, #12]
		ble->UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 80017ec:	605a      	str	r2, [r3, #4]
		ble->UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
}
 80017f6:	b005      	add	sp, #20
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 80017fa:	2202      	movs	r2, #2
 80017fc:	e7d8      	b.n	80017b0 <BLEDMA_IrqHandler+0x3c>
 80017fe:	2220      	movs	r2, #32
 8001800:	e7d6      	b.n	80017b0 <BLEDMA_IrqHandler+0x3c>
 8001802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001806:	e7d3      	b.n	80017b0 <BLEDMA_IrqHandler+0x3c>
 8001808:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800180c:	e7d0      	b.n	80017b0 <BLEDMA_IrqHandler+0x3c>
 800180e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001812:	e7cd      	b.n	80017b0 <BLEDMA_IrqHandler+0x3c>
			ble->ss = strstr(ble->StringRecebida, "OK+CONN");
 8001814:	4630      	mov	r0, r6
 8001816:	492e      	ldr	r1, [pc, #184]	; (80018d0 <BLEDMA_IrqHandler+0x15c>)
			ble->StatusSenha = false;//chave de validacao
 8001818:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
			ble->ss = NULL;
 800181c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
			ble->ss = strstr(ble->StringRecebida, "OK+CONN");
 8001820:	f008 fe1a 	bl	800a458 <strstr>
 8001824:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
			if (((ble->ss != NULL  && ble->RxSize == 7) || MACRO_LE_BT_STATUS) && ble->SistemaInit){
 8001828:	b310      	cbz	r0, 8001870 <BLEDMA_IrqHandler+0xfc>
 800182a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800182e:	2b07      	cmp	r3, #7
 8001830:	d11e      	bne.n	8001870 <BLEDMA_IrqHandler+0xfc>
 8001832:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8001836:	bb1b      	cbnz	r3, 8001880 <BLEDMA_IrqHandler+0x10c>
			ble->ss = NULL;
 8001838:	2300      	movs	r3, #0
			ble->ss = strstr(ble->StringRecebida, "OK+ADDR:");
 800183a:	4630      	mov	r0, r6
 800183c:	4925      	ldr	r1, [pc, #148]	; (80018d4 <BLEDMA_IrqHandler+0x160>)
			ble->ss = NULL;
 800183e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
			ble->ss = strstr(ble->StringRecebida, "OK+ADDR:");
 8001842:	f008 fe09 	bl	800a458 <strstr>
 8001846:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
			if (ble->ss != NULL){
 800184a:	2800      	cmp	r0, #0
 800184c:	d0ca      	beq.n	80017e4 <BLEDMA_IrqHandler+0x70>
				ble->PontoExato = ble->ss - ble->StringRecebida;
 800184e:	1b80      	subs	r0, r0, r6
 8001850:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					addr8Bits[i] = ble->_RxDataArr[i+ble->PontoExato+8];
 8001854:	1823      	adds	r3, r4, r0
 8001856:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001858:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800185a:	aa01      	add	r2, sp, #4
 800185c:	c203      	stmia	r2!, {r0, r1}
 800185e:	6c58      	ldr	r0, [r3, #68]	; 0x44
				ble->chave = CRC16(addr8Bits,12);
 8001860:	210c      	movs	r1, #12
					addr8Bits[i] = ble->_RxDataArr[i+ble->PontoExato+8];
 8001862:	6010      	str	r0, [r2, #0]
				ble->chave = CRC16(addr8Bits,12);
 8001864:	a801      	add	r0, sp, #4
 8001866:	f7ff fc4b 	bl	8001100 <CRC16>
 800186a:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
 800186e:	e7b9      	b.n	80017e4 <BLEDMA_IrqHandler+0x70>
			if (((ble->ss != NULL  && ble->RxSize == 7) || MACRO_LE_BT_STATUS) && ble->SistemaInit){
 8001870:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001874:	4818      	ldr	r0, [pc, #96]	; (80018d8 <BLEDMA_IrqHandler+0x164>)
 8001876:	f003 ff21 	bl	80056bc <HAL_GPIO_ReadPin>
 800187a:	2800      	cmp	r0, #0
 800187c:	d1d9      	bne.n	8001832 <BLEDMA_IrqHandler+0xbe>
 800187e:	e7db      	b.n	8001838 <BLEDMA_IrqHandler+0xc4>
				ble->MaquinaConexao = RX_CONECTADO;
 8001880:	2301      	movs	r3, #1
 8001882:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
				ble->StatusConexao 	= true;
 8001886:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 800188a:	e7d5      	b.n	8001838 <BLEDMA_IrqHandler+0xc4>
			ble->ss = strstr(ble->StringRecebida, "LOST");
 800188c:	4630      	mov	r0, r6
 800188e:	4913      	ldr	r1, [pc, #76]	; (80018dc <BLEDMA_IrqHandler+0x168>)
			ble->ss = NULL;
 8001890:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
			ble->ss = strstr(ble->StringRecebida, "LOST");
 8001894:	f008 fde0 	bl	800a458 <strstr>
 8001898:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
			if (ble->ss != NULL || !MACRO_LE_BT_STATUS){
 800189c:	b128      	cbz	r0, 80018aa <BLEDMA_IrqHandler+0x136>
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 800189e:	2300      	movs	r3, #0
 80018a0:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
				ble->StatusSenha 		= false;//chave de validacao
 80018a4:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
				ble->StatusConexao 		= false;
 80018a8:	e79c      	b.n	80017e4 <BLEDMA_IrqHandler+0x70>
			if (ble->ss != NULL || !MACRO_LE_BT_STATUS){
 80018aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ae:	480a      	ldr	r0, [pc, #40]	; (80018d8 <BLEDMA_IrqHandler+0x164>)
 80018b0:	f003 ff04 	bl	80056bc <HAL_GPIO_ReadPin>
 80018b4:	2800      	cmp	r0, #0
 80018b6:	d0f2      	beq.n	800189e <BLEDMA_IrqHandler+0x12a>
			}else if(ble->SistemaInit){
 80018b8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d091      	beq.n	80017e4 <BLEDMA_IrqHandler+0x70>
				BluetoothPutFila(ble);
 80018c0:	4620      	mov	r0, r4
 80018c2:	f7ff fefb 	bl	80016bc <BluetoothPutFila>
 80018c6:	e78d      	b.n	80017e4 <BLEDMA_IrqHandler+0x70>
 80018c8:	40020008 	.word	0x40020008
 80018cc:	40020000 	.word	0x40020000
 80018d0:	0800b3f7 	.word	0x0800b3f7
 80018d4:	0800b3ff 	.word	0x0800b3ff
 80018d8:	40010c00 	.word	0x40010c00
 80018dc:	0800b408 	.word	0x0800b408

080018e0 <BLEUSART_IrqHandler>:
void BLEUSART_IrqHandler(Bluetooth *ble)
{ //todo comentar melhor
	if (ble->UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 80018e0:	6803      	ldr	r3, [r0, #0]
{ //todo comentar melhor
 80018e2:	b082      	sub	sp, #8
	if (ble->UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6819      	ldr	r1, [r3, #0]
 80018e8:	06c9      	lsls	r1, r1, #27
 80018ea:	d514      	bpl.n	8001916 <BLEUSART_IrqHandler+0x36>
		__IO uint32_t __attribute__((unused))tmp;      	/* Must be volatile to prevent optimizations */

		tmp = ble->UARTHandle->Instance->SR;                 /* Read status register */
 80018ec:	6819      	ldr	r1, [r3, #0]
		tmp = ble->UARTHandle->Instance->DR;                 /* Read data register */
		__HAL_DMA_DISABLE (ble->UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 80018ee:	6842      	ldr	r2, [r0, #4]
		tmp = ble->UARTHandle->Instance->SR;                 /* Read status register */
 80018f0:	9101      	str	r1, [sp, #4]
		tmp = ble->UARTHandle->Instance->DR;                 /* Read data register */
 80018f2:	6859      	ldr	r1, [r3, #4]
		__HAL_DMA_DISABLE (ble->UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 80018f4:	6812      	ldr	r2, [r2, #0]
		tmp = ble->UARTHandle->Instance->DR;                 /* Read data register */
 80018f6:	9101      	str	r1, [sp, #4]
		__HAL_DMA_DISABLE (ble->UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 80018f8:	6811      	ldr	r1, [r2, #0]
 80018fa:	f021 0101 	bic.w	r1, r1, #1
 80018fe:	6011      	str	r1, [r2, #0]

		__HAL_UART_ENABLE_IT 	(ble->UARTHandle, UART_IT_IDLE);		// HABILITA idle line INTERRUPT
 8001900:	68d9      	ldr	r1, [r3, #12]
 8001902:	f041 0110 	orr.w	r1, r1, #16
 8001906:	60d9      	str	r1, [r3, #12]
		__HAL_DMA_ENABLE_IT 	(ble->UARTDMAHandle, DMA_IT_TC);		// HABILITA O DMA Tx cplt INTERRUPT
 8001908:	6813      	ldr	r3, [r2, #0]
 800190a:	f043 0302 	orr.w	r3, r3, #2
 800190e:	6013      	str	r3, [r2, #0]

		BLEDMA_IrqHandler (ble);
	}
}
 8001910:	b002      	add	sp, #8
		BLEDMA_IrqHandler (ble);
 8001912:	f7ff bf2f 	b.w	8001774 <BLEDMA_IrqHandler>
}
 8001916:	b002      	add	sp, #8
 8001918:	4770      	bx	lr
	...

0800191c <vetor4b_TO_Double>:
 *  Created on: Dec 6, 2023
 *      Author: lucas
 */
#include "Conversoes.h"

void vetor4b_TO_Double(double *destino, uint8_t *vetor, uint8_t inicio) {
 800191c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001920:	4605      	mov	r5, r0
	// Verificar se o destino e o vetor não são nulos
	floatAsBytes myValue;

	// Copia os bytes do double para o vetor, um por vez, começando no índice 'inicio'
	for (int i = 0; i < 4; ++i) {
 8001922:	2600      	movs	r6, #0
		myValue.bytes[i] = vetor[inicio + i] ;
		printf("%d \n",myValue.bytes[i]);
 8001924:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8001950 <vetor4b_TO_Double+0x34>
 8001928:	188c      	adds	r4, r1, r2
 800192a:	af01      	add	r7, sp, #4
		myValue.bytes[i] = vetor[inicio + i] ;
 800192c:	f814 1b01 	ldrb.w	r1, [r4], #1
		printf("%d \n",myValue.bytes[i]);
 8001930:	4640      	mov	r0, r8
	for (int i = 0; i < 4; ++i) {
 8001932:	3601      	adds	r6, #1
		myValue.bytes[i] = vetor[inicio + i] ;
 8001934:	f807 1b01 	strb.w	r1, [r7], #1
		printf("%d \n",myValue.bytes[i]);
 8001938:	f008 fc0c 	bl	800a154 <iprintf>
	for (int i = 0; i < 4; ++i) {
 800193c:	2e04      	cmp	r6, #4
 800193e:	d1f5      	bne.n	800192c <vetor4b_TO_Double+0x10>
	}

	*destino = (double)myValue.value;
 8001940:	9801      	ldr	r0, [sp, #4]
 8001942:	f7fe fd71 	bl	8000428 <__aeabi_f2d>
 8001946:	e9c5 0100 	strd	r0, r1, [r5]
}
 800194a:	b002      	add	sp, #8
 800194c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001950:	0800b60d 	.word	0x0800b60d

08001954 <vetor2b_TO_uint16>:
void vetor2b_TO_uint16(uint16_t *destino, uint8_t *vetor, uint8_t inicio) {
 8001954:	b410      	push	{r4}

	// Verificar se o destino e o vetor não são nulos
	if (destino == NULL || vetor == NULL) {
 8001956:	b100      	cbz	r0, 800195a <vetor2b_TO_uint16+0x6>
 8001958:	b919      	cbnz	r1, 8001962 <vetor2b_TO_uint16+0xe>
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 800195a:	4806      	ldr	r0, [pc, #24]	; (8001974 <vetor2b_TO_uint16+0x20>)
		return;
	}

	*destino = vetor[inicio] << 8 | vetor[inicio+1];
}
 800195c:	bc10      	pop	{r4}
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 800195e:	f008 bc5f 	b.w	800a220 <puts>
	*destino = vetor[inicio] << 8 | vetor[inicio+1];
 8001962:	5c8c      	ldrb	r4, [r1, r2]
 8001964:	4411      	add	r1, r2
 8001966:	784b      	ldrb	r3, [r1, #1]
 8001968:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800196c:	8003      	strh	r3, [r0, #0]
}
 800196e:	bc10      	pop	{r4}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	0800b612 	.word	0x0800b612

08001978 <vetor2b_TO_Double>:
void vetor2b_TO_Double(double *destino, uint8_t *vetor, uint8_t inicio) {
 8001978:	b510      	push	{r4, lr}

	// Verificar se o destino e o vetor não são nulos
	if (destino == NULL || vetor == NULL) {
 800197a:	4604      	mov	r4, r0
 800197c:	b100      	cbz	r0, 8001980 <vetor2b_TO_Double+0x8>
 800197e:	b921      	cbnz	r1, 800198a <vetor2b_TO_Double+0x12>
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
		return;
	}

	*destino = vetor[inicio] << 8 | vetor[inicio+1];
}
 8001980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 8001984:	4806      	ldr	r0, [pc, #24]	; (80019a0 <vetor2b_TO_Double+0x28>)
 8001986:	f008 bc4b 	b.w	800a220 <puts>
	*destino = vetor[inicio] << 8 | vetor[inicio+1];
 800198a:	5c88      	ldrb	r0, [r1, r2]
 800198c:	4411      	add	r1, r2
 800198e:	784b      	ldrb	r3, [r1, #1]
 8001990:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001994:	f7fe fd36 	bl	8000404 <__aeabi_i2d>
 8001998:	e9c4 0100 	strd	r0, r1, [r4]
}
 800199c:	bd10      	pop	{r4, pc}
 800199e:	bf00      	nop
 80019a0:	0800b612 	.word	0x0800b612

080019a4 <float_TO_vetor4b>:
		myValue.bytes[i] = vetor[inicio + i];
	}

	*destino = myValue.value;
}
void float_TO_vetor4b(double valor, uint8_t *vetor, uint8_t inicio) {
 80019a4:	b538      	push	{r3, r4, r5, lr}
 80019a6:	4615      	mov	r5, r2
 80019a8:	461c      	mov	r4, r3

	// Cria uma união e armazena o valor float nela
	floatAsBytes myValue;
	myValue.value = (float)valor;
 80019aa:	f7ff f84f 	bl	8000a4c <__aeabi_d2f>

	// Copia os bytes do float para o vetor, um por vez, começando no índice 'inicio'
	for (int i = 0; i < sizeof(myValue.value); ++i) {
		vetor[inicio + i] = myValue.bytes[i];
 80019ae:	5128      	str	r0, [r5, r4]
	}
}
 80019b0:	bd38      	pop	{r3, r4, r5, pc}

080019b2 <EepromAddVar>:
		default:
			break;
		}
	}
}
uint8_t EepromAddVar(Eeprom *eeprom, bool resetavel, EepromVariaveis* _var, char* _name, uint16_t addr, TypeData tipo, uint32_t minimo, uint32_t padrao,uint32_t maximo, void *_addrVar){
 80019b2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b6:	4699      	mov	r9, r3
 80019b8:	e9dd 530e 	ldrd	r5, r3, [sp, #56]	; 0x38
 80019bc:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	; 0x30
 80019c0:	4680      	mov	r8, r0
	//todo implementar erros e tratar de alguma forma
	//Make space before passing the object name to the nexcomp struct
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 80019c2:	4648      	mov	r0, r9
uint8_t EepromAddVar(Eeprom *eeprom, bool resetavel, EepromVariaveis* _var, char* _name, uint16_t addr, TypeData tipo, uint32_t minimo, uint32_t padrao,uint32_t maximo, void *_addrVar){
 80019c4:	4614      	mov	r4, r2
 80019c6:	468a      	mov	sl, r1
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 80019c8:	f7fe fbc2 	bl	8000150 <strlen>
 80019cc:	3001      	adds	r0, #1
uint8_t EepromAddVar(Eeprom *eeprom, bool resetavel, EepromVariaveis* _var, char* _name, uint16_t addr, TypeData tipo, uint32_t minimo, uint32_t padrao,uint32_t maximo, void *_addrVar){
 80019ce:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 80019d2:	f008 fa49 	bl	8009e68 <malloc>

	//Nome do objeto
	strcpy(_var->objname, _name);
 80019d6:	4649      	mov	r1, r9
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 80019d8:	6060      	str	r0, [r4, #4]
	strcpy(_var->objname, _name);
 80019da:	f008 fe2c 	bl	800a636 <strcpy>

	//Endereco
	_var->_addrEprom = addr;
 80019de:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28

	//torna nao resetavel ao softreset
	_var->flagResetavel = resetavel;


	switch (tipo) {
 80019e2:	f1bb 0f02 	cmp.w	fp, #2
 80019e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	_var->_addrEprom = addr;
 80019e8:	8122      	strh	r2, [r4, #8]
	_var->_sizeType = tipo;
 80019ea:	f884 b01c 	strb.w	fp, [r4, #28]
	_var->flagResetavel = resetavel;
 80019ee:	f884 a000 	strb.w	sl, [r4]
	switch (tipo) {
 80019f2:	d017      	beq.n	8001a24 <EepromAddVar+0x72>
 80019f4:	f1bb 0f04 	cmp.w	fp, #4
 80019f8:	d01c      	beq.n	8001a34 <EepromAddVar+0x82>
 80019fa:	f1bb 0f01 	cmp.w	fp, #1
 80019fe:	d106      	bne.n	8001a0e <EepromAddVar+0x5c>
	case DATA8BITS:
		//definindo minimos maximos e default
		_var->minValue 		= (uint8_t)minimo;
 8001a00:	b2ff      	uxtb	r7, r7
		_var->defaultValue 	= (uint8_t)padrao;
 8001a02:	b2f6      	uxtb	r6, r6
		_var->maxValue 		= (uint8_t)maximo;
 8001a04:	b2ed      	uxtb	r5, r5
		_var->minValue 		= (uint8_t)minimo;
 8001a06:	6167      	str	r7, [r4, #20]
		_var->defaultValue 	= (uint8_t)padrao;
 8001a08:	6126      	str	r6, [r4, #16]
		_var->maxValue 		= (uint8_t)maximo;
 8001a0a:	61a5      	str	r5, [r4, #24]
		_var->ptr8			= (uint8_t *)_addrVar;
 8001a0c:	6223      	str	r3, [r4, #32]
		//erro, parametro errado
		break;
	}

	//Adiciona o componente na respectiva estrutura
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _var;
 8001a0e:	f898 3124 	ldrb.w	r3, [r8, #292]	; 0x124
	eeprom->_EepromVarCount++;

	return 0;
}
 8001a12:	2000      	movs	r0, #0
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _var;
 8001a14:	eb08 0283 	add.w	r2, r8, r3, lsl #2
	eeprom->_EepromVarCount++;
 8001a18:	3301      	adds	r3, #1
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _var;
 8001a1a:	6354      	str	r4, [r2, #52]	; 0x34
	eeprom->_EepromVarCount++;
 8001a1c:	f888 3124 	strb.w	r3, [r8, #292]	; 0x124
}
 8001a20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		_var->minValue 		= (uint16_t)minimo;
 8001a24:	b2bf      	uxth	r7, r7
		_var->defaultValue 	= (uint16_t)padrao;
 8001a26:	b2b6      	uxth	r6, r6
		_var->maxValue 		= (uint16_t)maximo;
 8001a28:	b2ad      	uxth	r5, r5
		_var->minValue 		= (uint16_t)minimo;
 8001a2a:	6167      	str	r7, [r4, #20]
		_var->defaultValue 	= (uint16_t)padrao;
 8001a2c:	6126      	str	r6, [r4, #16]
		_var->maxValue 		= (uint16_t)maximo;
 8001a2e:	61a5      	str	r5, [r4, #24]
		_var->ptr16			= (uint16_t *)_addrVar;
 8001a30:	6263      	str	r3, [r4, #36]	; 0x24
		break;
 8001a32:	e7ec      	b.n	8001a0e <EepromAddVar+0x5c>
		_var->defaultValue 	= (uint32_t)padrao;
 8001a34:	e9c4 6704 	strd	r6, r7, [r4, #16]
		_var->maxValue 		= (uint32_t)maximo;
 8001a38:	61a5      	str	r5, [r4, #24]
		_var->ptr32			= (uint32_t *)_addrVar;
 8001a3a:	62a3      	str	r3, [r4, #40]	; 0x28
		break;
 8001a3c:	e7e7      	b.n	8001a0e <EepromAddVar+0x5c>
	...

08001a40 <EepromInit>:
uint8_t EepromInit	(Eeprom *eeprom, I2C_HandleTypeDef *i2c, osMessageQId *fila){
 8001a40:	b530      	push	{r4, r5, lr}
	EepromAddVar(eeprom, 0, &eeprom->RefFlag,	"addrREF_MEM_FLAG",	addrREF_MEM_FLAG,	DATA8BITS,	0,	STD_REF_MEM	,254	,0);
 8001a42:	2325      	movs	r3, #37	; 0x25
	eeprom->filaComandos = fila;
 8001a44:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
	eeprom->_EepromVarCount  = 0;
 8001a48:	2500      	movs	r5, #0
	EepromAddVar(eeprom, 0, &eeprom->RefFlag,	"addrREF_MEM_FLAG",	addrREF_MEM_FLAG,	DATA8BITS,	0,	STD_REF_MEM	,254	,0);
 8001a4a:	22fe      	movs	r2, #254	; 0xfe
uint8_t EepromInit	(Eeprom *eeprom, I2C_HandleTypeDef *i2c, osMessageQId *fila){
 8001a4c:	b087      	sub	sp, #28
	eeprom->_EepromVarCount  = 0;
 8001a4e:	f8a0 5124 	strh.w	r5, [r0, #292]	; 0x124
	EepromAddVar(eeprom, 0, &eeprom->RefFlag,	"addrREF_MEM_FLAG",	addrREF_MEM_FLAG,	DATA8BITS,	0,	STD_REF_MEM	,254	,0);
 8001a52:	2101      	movs	r1, #1
 8001a54:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8001a58:	234d      	movs	r3, #77	; 0x4d
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	e9cd 3100 	strd	r3, r1, [sp]
 8001a60:	9505      	str	r5, [sp, #20]
 8001a62:	4629      	mov	r1, r5
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <EepromInit+0x34>)
 8001a66:	9502      	str	r5, [sp, #8]
 8001a68:	f7ff ffa3 	bl	80019b2 <EepromAddVar>
}
 8001a6c:	4628      	mov	r0, r5
 8001a6e:	b007      	add	sp, #28
 8001a70:	bd30      	pop	{r4, r5, pc}
 8001a72:	bf00      	nop
 8001a74:	0800b657 	.word	0x0800b657

08001a78 <EepromAddVarFloating>:
uint8_t EepromAddVarFloating(Eeprom *eeprom, bool resetavel, EepromVarFloating* _var, char* _name,uint16_t addr,TypeDataFloating tipo,double minimo,double padrao,double maximo, void *_addrVar)
{
 8001a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a7c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8001a80:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8001a84:	4604      	mov	r4, r0
	//todo implementar erros e tratar de alguma forma
	//Make space before passing the object name to the nexcomp struct
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001a86:	4618      	mov	r0, r3
{
 8001a88:	4693      	mov	fp, r2
 8001a8a:	460d      	mov	r5, r1
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	f7fe fb5f 	bl	8000150 <strlen>
 8001a92:	3001      	adds	r0, #1
{
 8001a94:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001a98:	f008 f9e6 	bl	8009e68 <malloc>

	//Nome do objeto
	strcpy(_var->objname, _name);
 8001a9c:	9901      	ldr	r1, [sp, #4]
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001a9e:	f8cb 0004 	str.w	r0, [fp, #4]
	strcpy(_var->objname, _name);
 8001aa2:	f008 fdc8 	bl	800a636 <strcpy>

	//Endereco
	_var->_addrEprom = addr;
 8001aa6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	//passando o tamnho da variavel
	_var->_sizeType = tipo;

	//torna nao resetavel ao softreset
	_var->flagResetavel = resetavel;
	switch (tipo) {
 8001aaa:	f1ba 0f20 	cmp.w	sl, #32
	_var->_addrEprom = addr;
 8001aae:	f8ab 3008 	strh.w	r3, [fp, #8]
	_var->_sizeType = tipo;
 8001ab2:	f88b a038 	strb.w	sl, [fp, #56]	; 0x38
	_var->flagResetavel = resetavel;
 8001ab6:	f88b 5000 	strb.w	r5, [fp]
	switch (tipo) {
 8001aba:	d00f      	beq.n	8001adc <EepromAddVarFloating+0x64>
 8001abc:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8001ac0:	d028      	beq.n	8001b14 <EepromAddVarFloating+0x9c>
	//Adiciona o componente na respectiva estrutura
	eeprom->_EepromVarFloatingArr[eeprom->_EepromVarFloatingCount] = _var;
	eeprom->_EepromVarFloatingCount++;

	return 0;
}
 8001ac2:	2000      	movs	r0, #0
	eeprom->_EepromVarFloatingArr[eeprom->_EepromVarFloatingCount] = _var;
 8001ac4:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
 8001ac8:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	eeprom->_EepromVarFloatingCount++;
 8001acc:	3301      	adds	r3, #1
	eeprom->_EepromVarFloatingArr[eeprom->_EepromVarFloatingCount] = _var;
 8001ace:	f8c2 b0ac 	str.w	fp, [r2, #172]	; 0xac
	eeprom->_EepromVarFloatingCount++;
 8001ad2:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
}
 8001ad6:	b003      	add	sp, #12
 8001ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		_var->minValue 		= (float)minimo;
 8001adc:	4649      	mov	r1, r9
 8001ade:	4640      	mov	r0, r8
 8001ae0:	f7fe ffb4 	bl	8000a4c <__aeabi_d2f>
 8001ae4:	f7fe fca0 	bl	8000428 <__aeabi_f2d>
 8001ae8:	e9cb 010a 	strd	r0, r1, [fp, #40]	; 0x28
		_var->defaultValue 	= (float)padrao;
 8001aec:	4639      	mov	r1, r7
 8001aee:	4630      	mov	r0, r6
 8001af0:	f7fe ffac 	bl	8000a4c <__aeabi_d2f>
 8001af4:	f7fe fc98 	bl	8000428 <__aeabi_f2d>
 8001af8:	e9cb 0108 	strd	r0, r1, [fp, #32]
		_var->maxValue 		= (float)maximo;
 8001afc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8001b00:	f7fe ffa4 	bl	8000a4c <__aeabi_d2f>
 8001b04:	f7fe fc90 	bl	8000428 <__aeabi_f2d>
		_var->ptrFloat		= (float *)_addrVar;
 8001b08:	9b14      	ldr	r3, [sp, #80]	; 0x50
		_var->maxValue 		= (float)maximo;
 8001b0a:	e9cb 010c 	strd	r0, r1, [fp, #48]	; 0x30
		_var->ptrFloat		= (float *)_addrVar;
 8001b0e:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
		break;
 8001b12:	e7d6      	b.n	8001ac2 <EepromAddVarFloating+0x4a>
		_var->maxValue 		= (double)maximo;
 8001b14:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8001b18:	e9cb 230c 	strd	r2, r3, [fp, #48]	; 0x30
		_var->ptrDouble		= (double *)_addrVar;
 8001b1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
		_var->minValue 		= (double)minimo;
 8001b1e:	e9cb 890a 	strd	r8, r9, [fp, #40]	; 0x28
		_var->defaultValue 	= (double)padrao;
 8001b22:	e9cb 6708 	strd	r6, r7, [fp, #32]
		_var->ptrDouble		= (double *)_addrVar;
 8001b26:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
		break;
 8001b2a:	e7ca      	b.n	8001ac2 <EepromAddVarFloating+0x4a>

08001b2c <EepromSetVar>:
bool EepromSetVar	(Eeprom *eeprom, EepromVariaveis *_var, uint32_t valor){
 8001b2c:	b530      	push	{r4, r5, lr}
 8001b2e:	4605      	mov	r5, r0
	HAL_StatusTypeDef result;
	uint8_t 		buffer1b[1];
	shortAsBytes 	buffer2b;
	uint32AsBytes	buffer4b;

	LIBERA_EEPROM
 8001b30:	2200      	movs	r2, #0
bool EepromSetVar	(Eeprom *eeprom, EepromVariaveis *_var, uint32_t valor){
 8001b32:	b089      	sub	sp, #36	; 0x24
	LIBERA_EEPROM
 8001b34:	4823      	ldr	r0, [pc, #140]	; (8001bc4 <EepromSetVar+0x98>)
bool EepromSetVar	(Eeprom *eeprom, EepromVariaveis *_var, uint32_t valor){
 8001b36:	460c      	mov	r4, r1
	LIBERA_EEPROM
 8001b38:	2180      	movs	r1, #128	; 0x80
 8001b3a:	f003 fdc5 	bl	80056c8 <HAL_GPIO_WritePin>
 8001b3e:	2005      	movs	r0, #5
 8001b40:	f003 f842 	bl	8004bc8 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,50,HAL_MAX_DELAY);
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
 8001b48:	2232      	movs	r2, #50	; 0x32
 8001b4a:	21a2      	movs	r1, #162	; 0xa2
 8001b4c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001b4e:	f004 fa33 	bl	8005fb8 <HAL_I2C_IsDeviceReady>
	if (result==HAL_OK)
 8001b52:	b9b0      	cbnz	r0, 8001b82 <EepromSetVar+0x56>
	{
		switch (_var->_sizeType) {
 8001b54:	7f23      	ldrb	r3, [r4, #28]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d021      	beq.n	8001b9e <EepromSetVar+0x72>
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d029      	beq.n	8001bb2 <EepromSetVar+0x86>
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d10f      	bne.n	8001b82 <EepromSetVar+0x56>
		case DATA8BITS:
			_var->valor = *_var->ptr8;
 8001b62:	6a22      	ldr	r2, [r4, #32]
 8001b64:	7812      	ldrb	r2, [r2, #0]
 8001b66:	60e2      	str	r2, [r4, #12]

			//grava na memoria
			buffer1b[0] 		= (uint8_t)_var->valor;
 8001b68:	f88d 2014 	strb.w	r2, [sp, #20]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b, 1, 200);
 8001b6c:	22c8      	movs	r2, #200	; 0xc8
 8001b6e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001b72:	ab05      	add	r3, sp, #20
		case DATA32BITS:
			_var->valor = *_var->ptr32;

			//grava na memoria
			buffer4b.value 		= (uint32_t)_var->valor;
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	21a2      	movs	r1, #162	; 0xa2
 8001b78:	2310      	movs	r3, #16
 8001b7a:	8922      	ldrh	r2, [r4, #8]
 8001b7c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001b7e:	f004 f84d 	bl	8005c1c <HAL_I2C_Mem_Write>

			break;
		}
	}
	osDelay(20);
 8001b82:	2014      	movs	r0, #20
 8001b84:	f006 f874 	bl	8007c70 <osDelay>
	TRAVA_EEPROM
 8001b88:	2005      	movs	r0, #5
 8001b8a:	f003 f81d 	bl	8004bc8 <HAL_Delay>
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <EepromSetVar+0x98>)
 8001b94:	f003 fd98 	bl	80056c8 <HAL_GPIO_WritePin>
	return 1;
}
 8001b98:	2001      	movs	r0, #1
 8001b9a:	b009      	add	sp, #36	; 0x24
 8001b9c:	bd30      	pop	{r4, r5, pc}
			_var->valor = *_var->ptr16;
 8001b9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ba0:	8812      	ldrh	r2, [r2, #0]
 8001ba2:	60e2      	str	r2, [r4, #12]
			buffer2b.value 		= (uint16_t)_var->valor;
 8001ba4:	f8ad 2018 	strh.w	r2, [sp, #24]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2b.bytes, 2, 200);
 8001ba8:	22c8      	movs	r2, #200	; 0xc8
 8001baa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001bae:	ab06      	add	r3, sp, #24
 8001bb0:	e7e0      	b.n	8001b74 <EepromSetVar+0x48>
			_var->valor = *_var->ptr32;
 8001bb2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	60e2      	str	r2, [r4, #12]
			buffer4b.value 		= (uint32_t)_var->valor;
 8001bb8:	9207      	str	r2, [sp, #28]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
 8001bba:	22c8      	movs	r2, #200	; 0xc8
 8001bbc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001bc0:	ab07      	add	r3, sp, #28
 8001bc2:	e7d7      	b.n	8001b74 <EepromSetVar+0x48>
 8001bc4:	40010c00 	.word	0x40010c00

08001bc8 <EepromSetVarFloating>:
bool EepromSetVarFloating	(Eeprom *eeprom, EepromVarFloating *_var, double valor){
 8001bc8:	b530      	push	{r4, r5, lr}
 8001bca:	4605      	mov	r5, r0
 8001bcc:	b089      	sub	sp, #36	; 0x24
	//retomar leitura direto da variavel interna no objeto
	__IO HAL_StatusTypeDef result;
	__IO floatAsBytes	floatBuff;
	__IO doubleAsBytes 	doubleBuff;

	LIBERA_EEPROM
 8001bce:	2200      	movs	r2, #0
 8001bd0:	4822      	ldr	r0, [pc, #136]	; (8001c5c <EepromSetVarFloating+0x94>)
bool EepromSetVarFloating	(Eeprom *eeprom, EepromVarFloating *_var, double valor){
 8001bd2:	460c      	mov	r4, r1
	LIBERA_EEPROM
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	f003 fd77 	bl	80056c8 <HAL_GPIO_WritePin>
 8001bda:	2005      	movs	r0, #5
 8001bdc:	f002 fff4 	bl	8004bc8 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,50,HAL_MAX_DELAY);
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
 8001be4:	2232      	movs	r2, #50	; 0x32
 8001be6:	21a2      	movs	r1, #162	; 0xa2
 8001be8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001bea:	f004 f9e5 	bl	8005fb8 <HAL_I2C_IsDeviceReady>
 8001bee:	f88d 0013 	strb.w	r0, [sp, #19]
	if (result==HAL_OK)
 8001bf2:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8001bf6:	b92b      	cbnz	r3, 8001c04 <EepromSetVarFloating+0x3c>
	{
		switch (_var->_sizeType) {
 8001bf8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d00f      	beq.n	8001c20 <EepromSetVarFloating+0x58>
 8001c00:	2b40      	cmp	r3, #64	; 0x40
 8001c02:	d01e      	beq.n	8001c42 <EepromSetVarFloating+0x7a>
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);

			break;
		}
	}
	osDelay(30);
 8001c04:	201e      	movs	r0, #30
 8001c06:	f006 f833 	bl	8007c70 <osDelay>
	TRAVA_EEPROM
 8001c0a:	2005      	movs	r0, #5
 8001c0c:	f002 ffdc 	bl	8004bc8 <HAL_Delay>
 8001c10:	2201      	movs	r2, #1
 8001c12:	2180      	movs	r1, #128	; 0x80
 8001c14:	4811      	ldr	r0, [pc, #68]	; (8001c5c <EepromSetVarFloating+0x94>)
 8001c16:	f003 fd57 	bl	80056c8 <HAL_GPIO_WritePin>
	return 1;
}
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	b009      	add	sp, #36	; 0x24
 8001c1e:	bd30      	pop	{r4, r5, pc}
			_var->valorFloat = *_var->ptrFloat;
 8001c20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200);
 8001c22:	21c8      	movs	r1, #200	; 0xc8
			_var->valorFloat = *_var->ptrFloat;
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	61a3      	str	r3, [r4, #24]
			floatBuff.value = (float)_var->valorFloat;
 8001c28:	9305      	str	r3, [sp, #20]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200);
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001c30:	ab05      	add	r3, sp, #20
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	21a2      	movs	r1, #162	; 0xa2
 8001c36:	2310      	movs	r3, #16
 8001c38:	8922      	ldrh	r2, [r4, #8]
 8001c3a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001c3c:	f003 ffee 	bl	8005c1c <HAL_I2C_Mem_Write>
			break;
 8001c40:	e7e0      	b.n	8001c04 <EepromSetVarFloating+0x3c>
			_var->valorDouble = *_var->ptrDouble;
 8001c42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	e9c4 2304 	strd	r2, r3, [r4, #16]
			doubleBuff.value = (double)_var->valorDouble;
 8001c4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);
 8001c50:	2308      	movs	r3, #8
 8001c52:	22c8      	movs	r2, #200	; 0xc8
 8001c54:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001c58:	ab06      	add	r3, sp, #24
 8001c5a:	e7ea      	b.n	8001c32 <EepromSetVarFloating+0x6a>
 8001c5c:	40010c00 	.word	0x40010c00

08001c60 <RestauraEeprom>:
			RestauraEeprom(eeprom, hardReset);
			return;
		}
	}
}
void RestauraEeprom			(Eeprom *eeprom ,TypeRestauracao tipo){
 8001c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c64:	4604      	mov	r4, r0
	__IO shortAsBytes 	buffer2b;
	__IO uint32AsBytes	buffer4b;
	__IO floatAsBytes	floatBuff;
	__IO doubleAsBytes 	doubleBuff;

	LIBERA_EEPROM
 8001c66:	2200      	movs	r2, #0
void RestauraEeprom			(Eeprom *eeprom ,TypeRestauracao tipo){
 8001c68:	b08b      	sub	sp, #44	; 0x2c
	LIBERA_EEPROM
 8001c6a:	485a      	ldr	r0, [pc, #360]	; (8001dd4 <RestauraEeprom+0x174>)
void RestauraEeprom			(Eeprom *eeprom ,TypeRestauracao tipo){
 8001c6c:	460e      	mov	r6, r1
	LIBERA_EEPROM
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	f003 fd2a 	bl	80056c8 <HAL_GPIO_WritePin>
 8001c74:	2005      	movs	r0, #5
 8001c76:	f002 ffa7 	bl	8004bc8 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,30,HAL_MAX_DELAY);
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7e:	221e      	movs	r2, #30
 8001c80:	21a2      	movs	r1, #162	; 0xa2
 8001c82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001c84:	f004 f998 	bl	8005fb8 <HAL_I2C_IsDeviceReady>
	if (result==HAL_OK){
 8001c88:	4605      	mov	r5, r0
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	d066      	beq.n	8001d5c <RestauraEeprom+0xfc>
		buffer1b.value					= (uint8_t)STD_REF_MEM;
		eeprom->RefFlag.valor			= buffer1b.value;
		HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->RefFlag._addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b.bytes, 1, 200);
		osDelay(40);
	}
	TRAVA_EEPROM
 8001c8e:	2005      	movs	r0, #5
 8001c90:	f002 ff9a 	bl	8004bc8 <HAL_Delay>
 8001c94:	2201      	movs	r2, #1
 8001c96:	2180      	movs	r1, #128	; 0x80
 8001c98:	484e      	ldr	r0, [pc, #312]	; (8001dd4 <RestauraEeprom+0x174>)
 8001c9a:	f003 fd15 	bl	80056c8 <HAL_GPIO_WritePin>
}
 8001c9e:	b00b      	add	sp, #44	; 0x2c
 8001ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(!eeprom->_EepromVarArr[i]->flagResetavel || tipo == hardReset){
 8001ca4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	b10a      	cbz	r2, 8001cb2 <RestauraEeprom+0x52>
 8001cae:	2e01      	cmp	r6, #1
 8001cb0:	d120      	bne.n	8001cf4 <RestauraEeprom+0x94>
				switch (eeprom->_EepromVarArr[i]->_sizeType) {
 8001cb2:	7f19      	ldrb	r1, [r3, #28]
 8001cb4:	2902      	cmp	r1, #2
 8001cb6:	d00e      	beq.n	8001cd6 <RestauraEeprom+0x76>
 8001cb8:	2904      	cmp	r1, #4
 8001cba:	d047      	beq.n	8001d4c <RestauraEeprom+0xec>
 8001cbc:	2901      	cmp	r1, #1
 8001cbe:	d119      	bne.n	8001cf4 <RestauraEeprom+0x94>
					buffer1b.value 					= (uint8_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001cc0:	7c1a      	ldrb	r2, [r3, #16]
					buffer1b.value					=0x00;
 8001cc2:	f88d 7010 	strb.w	r7, [sp, #16]
					buffer1b.value 					= (uint8_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001cc6:	f88d 2010 	strb.w	r2, [sp, #16]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b.bytes, 1, 200);
 8001cca:	891a      	ldrh	r2, [r3, #8]
 8001ccc:	e9cd 1801 	strd	r1, r8, [sp, #4]
 8001cd0:	ab04      	add	r3, sp, #16
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	e009      	b.n	8001cea <RestauraEeprom+0x8a>
					buffer2b.value 					= (uint16_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001cd6:	8a1a      	ldrh	r2, [r3, #16]
					buffer2b.value					=0x0000;
 8001cd8:	f8ad 7014 	strh.w	r7, [sp, #20]
					buffer2b.value 					= (uint16_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001cdc:	f8ad 2014 	strh.w	r2, [sp, #20]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2b.bytes, 2, 200);
 8001ce0:	891a      	ldrh	r2, [r3, #8]
 8001ce2:	e9cd 1801 	strd	r1, r8, [sp, #4]
 8001ce6:	f8cd 9000 	str.w	r9, [sp]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
 8001cea:	2310      	movs	r3, #16
 8001cec:	21a2      	movs	r1, #162	; 0xa2
 8001cee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001cf0:	f003 ff94 	bl	8005c1c <HAL_I2C_Mem_Write>
			osDelay(20);
 8001cf4:	2014      	movs	r0, #20
 8001cf6:	f005 ffbb 	bl	8007c70 <osDelay>
		for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001cfa:	3501      	adds	r5, #1
 8001cfc:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 8001d00:	b2eb      	uxtb	r3, r5
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d8ce      	bhi.n	8001ca4 <RestauraEeprom+0x44>
 8001d06:	2500      	movs	r5, #0
					floatBuff.value 							= 0x0000;
 8001d08:	f04f 0a00 	mov.w	sl, #0
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200);
 8001d0c:	27c8      	movs	r7, #200	; 0xc8
					doubleBuff.value 							= 0x00000000;
 8001d0e:	f04f 0800 	mov.w	r8, #0
 8001d12:	f04f 0900 	mov.w	r9, #0
		for(uint8_t k = 0; k < eeprom->_EepromVarFloatingCount; k++){
 8001d16:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8001d1a:	b2eb      	uxtb	r3, r5
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d823      	bhi.n	8001d68 <RestauraEeprom+0x108>
		buffer1b.value					= (uint8_t)STD_REF_MEM;
 8001d20:	2325      	movs	r3, #37	; 0x25
 8001d22:	f88d 3010 	strb.w	r3, [sp, #16]
		eeprom->RefFlag.valor			= buffer1b.value;
 8001d26:	f89d 3010 	ldrb.w	r3, [sp, #16]
		HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->RefFlag._addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b.bytes, 1, 200);
 8001d2a:	22c8      	movs	r2, #200	; 0xc8
		eeprom->RefFlag.valor			= buffer1b.value;
 8001d2c:	60e3      	str	r3, [r4, #12]
		HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->RefFlag._addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b.bytes, 1, 200);
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001d34:	ab04      	add	r3, sp, #16
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	21a2      	movs	r1, #162	; 0xa2
 8001d3a:	2310      	movs	r3, #16
 8001d3c:	8922      	ldrh	r2, [r4, #8]
 8001d3e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001d40:	f003 ff6c 	bl	8005c1c <HAL_I2C_Mem_Write>
		osDelay(40);
 8001d44:	2028      	movs	r0, #40	; 0x28
 8001d46:	f005 ff93 	bl	8007c70 <osDelay>
 8001d4a:	e7a0      	b.n	8001c8e <RestauraEeprom+0x2e>
					buffer4b.value 					= (uint32_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001d4c:	691a      	ldr	r2, [r3, #16]
					buffer4b.value					=0x00000000;
 8001d4e:	9706      	str	r7, [sp, #24]
					buffer4b.value 					= (uint32_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001d50:	9206      	str	r2, [sp, #24]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
 8001d52:	891a      	ldrh	r2, [r3, #8]
 8001d54:	e9cd 1801 	strd	r1, r8, [sp, #4]
 8001d58:	ab06      	add	r3, sp, #24
 8001d5a:	e7ba      	b.n	8001cd2 <RestauraEeprom+0x72>
					buffer2b.value					=0x0000;
 8001d5c:	4607      	mov	r7, r0
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2b.bytes, 2, 200);
 8001d5e:	f04f 08c8 	mov.w	r8, #200	; 0xc8
 8001d62:	f10d 0914 	add.w	r9, sp, #20
 8001d66:	e7c9      	b.n	8001cfc <RestauraEeprom+0x9c>
			if(!eeprom->_EepromVarFloatingArr[k]->flagResetavel || tipo == hardReset){
 8001d68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001d6c:	f8d3 b0ac 	ldr.w	fp, [r3, #172]	; 0xac
 8001d70:	f89b 3000 	ldrb.w	r3, [fp]
 8001d74:	b10b      	cbz	r3, 8001d7a <RestauraEeprom+0x11a>
 8001d76:	2e01      	cmp	r6, #1
 8001d78:	d105      	bne.n	8001d86 <RestauraEeprom+0x126>
				switch (eeprom->_EepromVarFloatingArr[k]->_sizeType) {
 8001d7a:	f89b 3038 	ldrb.w	r3, [fp, #56]	; 0x38
 8001d7e:	2b20      	cmp	r3, #32
 8001d80:	d006      	beq.n	8001d90 <RestauraEeprom+0x130>
 8001d82:	2b40      	cmp	r3, #64	; 0x40
 8001d84:	d018      	beq.n	8001db8 <RestauraEeprom+0x158>
			osDelay(40);
 8001d86:	2028      	movs	r0, #40	; 0x28
 8001d88:	f005 ff72 	bl	8007c70 <osDelay>
		for(uint8_t k = 0; k < eeprom->_EepromVarFloatingCount; k++){
 8001d8c:	3501      	adds	r5, #1
 8001d8e:	e7c2      	b.n	8001d16 <RestauraEeprom+0xb6>
					floatBuff.value 							= (float)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001d90:	e9db 0108 	ldrd	r0, r1, [fp, #32]
					floatBuff.value 							= 0x0000;
 8001d94:	f8cd a01c 	str.w	sl, [sp, #28]
					floatBuff.value 							= (float)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001d98:	f7fe fe58 	bl	8000a4c <__aeabi_d2f>
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200);
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	f8bb 2008 	ldrh.w	r2, [fp, #8]
					floatBuff.value 							= (float)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001da2:	9007      	str	r0, [sp, #28]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200);
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	9702      	str	r7, [sp, #8]
 8001da8:	ab07      	add	r3, sp, #28
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	21a2      	movs	r1, #162	; 0xa2
 8001dae:	2310      	movs	r3, #16
 8001db0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001db2:	f003 ff33 	bl	8005c1c <HAL_I2C_Mem_Write>
					break;
 8001db6:	e7e6      	b.n	8001d86 <RestauraEeprom+0x126>
					doubleBuff.value 							= (double)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001db8:	e9db 2308 	ldrd	r2, r3, [fp, #32]
					doubleBuff.value 							= 0x00000000;
 8001dbc:	e9cd 8908 	strd	r8, r9, [sp, #32]
					doubleBuff.value 							= (double)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001dc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	9702      	str	r7, [sp, #8]
 8001dce:	ab08      	add	r3, sp, #32
 8001dd0:	e7eb      	b.n	8001daa <RestauraEeprom+0x14a>
 8001dd2:	bf00      	nop
 8001dd4:	40010c00 	.word	0x40010c00

08001dd8 <EepromDownloadValores>:
void EepromDownloadValores	(Eeprom *eeprom){
 8001dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ddc:	4604      	mov	r4, r0
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001dde:	f04f 0a00 	mov.w	sl, #0
void EepromDownloadValores	(Eeprom *eeprom){
 8001de2:	b08b      	sub	sp, #44	; 0x2c
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001de4:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8001de8:	fa5f f58a 	uxtb.w	r5, sl
 8001dec:	42ab      	cmp	r3, r5
 8001dee:	d942      	bls.n	8001e76 <EepromDownloadValores+0x9e>
		if (HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_READ_ADDR,50,HAL_MAX_DELAY)==HAL_OK){
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
 8001df4:	2232      	movs	r2, #50	; 0x32
 8001df6:	21a3      	movs	r1, #163	; 0xa3
 8001df8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001dfa:	f004 f8dd 	bl	8005fb8 <HAL_I2C_IsDeviceReady>
 8001dfe:	bb48      	cbnz	r0, 8001e54 <EepromDownloadValores+0x7c>
			switch (eeprom->_EepromVarArr[i]->_sizeType) {
 8001e00:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8001e04:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001e06:	7f13      	ldrb	r3, [r2, #28]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d037      	beq.n	8001e7c <EepromDownloadValores+0xa4>
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d049      	beq.n	8001ea4 <EepromDownloadValores+0xcc>
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d111      	bne.n	8001e38 <EepromDownloadValores+0x60>
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR,eeprom->_EepromVarArr[i]->_addrEprom,I2C_MEMADD_SIZE_16BIT,buffer1b.bytes, 1, 200);
 8001e14:	21c8      	movs	r1, #200	; 0xc8
 8001e16:	8912      	ldrh	r2, [r2, #8]
 8001e18:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001e1c:	ab04      	add	r3, sp, #16
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	21a3      	movs	r1, #163	; 0xa3
 8001e22:	2310      	movs	r3, #16
 8001e24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e26:	f003 ff89 	bl	8005d3c <HAL_I2C_Mem_Read>
				eeprom->_EepromVarArr[i]->valor = buffer1b.value;
 8001e2a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001e2c:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8001e30:	60da      	str	r2, [r3, #12]
				if(eeprom->_EepromVarArr[i]->ptr8 !=0){
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	b103      	cbz	r3, 8001e38 <EepromDownloadValores+0x60>
					*eeprom->_EepromVarArr[i]->ptr8 = eeprom->_EepromVarArr[i]->valor;
 8001e36:	701a      	strb	r2, [r3, #0]
			if(eeprom->_EepromVarArr[i]->defaultValue>0 && (eeprom->_EepromVarArr[i]->valor == 0 || eeprom->_EepromVarArr[i]->valor > eeprom->_EepromVarArr[i]->maxValue || eeprom->_EepromVarArr[i]->valor < eeprom->_EepromVarArr[i]->minValue))
 8001e38:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001e3a:	690a      	ldr	r2, [r1, #16]
 8001e3c:	b152      	cbz	r2, 8001e54 <EepromDownloadValores+0x7c>
 8001e3e:	68cb      	ldr	r3, [r1, #12]
 8001e40:	b12b      	cbz	r3, 8001e4e <EepromDownloadValores+0x76>
 8001e42:	6988      	ldr	r0, [r1, #24]
 8001e44:	4283      	cmp	r3, r0
 8001e46:	d802      	bhi.n	8001e4e <EepromDownloadValores+0x76>
 8001e48:	6948      	ldr	r0, [r1, #20]
 8001e4a:	4283      	cmp	r3, r0
 8001e4c:	d202      	bcs.n	8001e54 <EepromDownloadValores+0x7c>
				EepromSetVar(eeprom, eeprom->_EepromVarArr[i], eeprom->_EepromVarArr[i]->defaultValue);
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f7ff fe6c 	bl	8001b2c <EepromSetVar>
void EepromDownloadValores	(Eeprom *eeprom){
 8001e54:	f04f 0b00 	mov.w	fp, #0
		for(uint8_t y = 0; y < eeprom->_EepromVarFloatingCount; y++){
 8001e58:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
 8001e5c:	fa5f f58b 	uxtb.w	r5, fp
 8001e60:	42ab      	cmp	r3, r5
 8001e62:	d832      	bhi.n	8001eca <EepromDownloadValores+0xf2>
		if(eeprom->RefFlag.valor != STD_REF_MEM)
 8001e64:	68e3      	ldr	r3, [r4, #12]
 8001e66:	f10a 0a01 	add.w	sl, sl, #1
 8001e6a:	2b25      	cmp	r3, #37	; 0x25
 8001e6c:	d0ba      	beq.n	8001de4 <EepromDownloadValores+0xc>
			RestauraEeprom(eeprom, hardReset);
 8001e6e:	2101      	movs	r1, #1
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff fef5 	bl	8001c60 <RestauraEeprom>
}
 8001e76:	b00b      	add	sp, #44	; 0x2c
 8001e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR,eeprom->_EepromVarArr[i]->_addrEprom,I2C_MEMADD_SIZE_16BIT,buffer2b.bytes, 2, 200);//tentar usar o & todo
 8001e7c:	21c8      	movs	r1, #200	; 0xc8
 8001e7e:	8912      	ldrh	r2, [r2, #8]
 8001e80:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001e84:	ab05      	add	r3, sp, #20
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	21a3      	movs	r1, #163	; 0xa3
 8001e8a:	2310      	movs	r3, #16
 8001e8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e8e:	f003 ff55 	bl	8005d3c <HAL_I2C_Mem_Read>
				eeprom->_EepromVarArr[i]->valor = buffer2b.value;
 8001e92:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001e94:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8001e98:	60da      	str	r2, [r3, #12]
				if(eeprom->_EepromVarArr[i]->ptr16 !=0){
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0cb      	beq.n	8001e38 <EepromDownloadValores+0x60>
					*eeprom->_EepromVarArr[i]->ptr16 = eeprom->_EepromVarArr[i]->valor;
 8001ea0:	801a      	strh	r2, [r3, #0]
 8001ea2:	e7c9      	b.n	8001e38 <EepromDownloadValores+0x60>
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR,eeprom->_EepromVarArr[i]->_addrEprom,I2C_MEMADD_SIZE_16BIT,buffer4b.bytes, 4, 200);
 8001ea4:	21c8      	movs	r1, #200	; 0xc8
 8001ea6:	8912      	ldrh	r2, [r2, #8]
 8001ea8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001eac:	ab06      	add	r3, sp, #24
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	21a3      	movs	r1, #163	; 0xa3
 8001eb2:	2310      	movs	r3, #16
 8001eb4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001eb6:	f003 ff41 	bl	8005d3c <HAL_I2C_Mem_Read>
				eeprom->_EepromVarArr[i]->valor =  buffer4b.value;
 8001eba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001ebc:	9a06      	ldr	r2, [sp, #24]
 8001ebe:	60da      	str	r2, [r3, #12]
				if(eeprom->_EepromVarArr[i]->ptr32 !=0){
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0b8      	beq.n	8001e38 <EepromDownloadValores+0x60>
					*eeprom->_EepromVarArr[i]->ptr32 = eeprom->_EepromVarArr[i]->valor;
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	e7b6      	b.n	8001e38 <EepromDownloadValores+0x60>
			if (HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_READ_ADDR,30,HAL_MAX_DELAY)==HAL_OK){
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	221e      	movs	r2, #30
 8001ed0:	21a3      	movs	r1, #163	; 0xa3
 8001ed2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001ed4:	f004 f870 	bl	8005fb8 <HAL_I2C_IsDeviceReady>
 8001ed8:	b948      	cbnz	r0, 8001eee <EepromDownloadValores+0x116>
				switch (eeprom->_EepromVarFloatingArr[y]->_sizeType) {
 8001eda:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8001ede:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8001ee2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001ee6:	2a20      	cmp	r2, #32
 8001ee8:	d004      	beq.n	8001ef4 <EepromDownloadValores+0x11c>
 8001eea:	2a40      	cmp	r2, #64	; 0x40
 8001eec:	d044      	beq.n	8001f78 <EepromDownloadValores+0x1a0>
		for(uint8_t y = 0; y < eeprom->_EepromVarFloatingCount; y++){
 8001eee:	f10b 0b01 	add.w	fp, fp, #1
 8001ef2:	e7b1      	b.n	8001e58 <EepromDownloadValores+0x80>
					HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, eeprom->_EepromVarFloatingArr[y]->_addrEprom, I2C_MEMADD_SIZE_16BIT, floatBuff.bytes, 4, 200);
 8001ef4:	891a      	ldrh	r2, [r3, #8]
 8001ef6:	20c8      	movs	r0, #200	; 0xc8
 8001ef8:	2304      	movs	r3, #4
 8001efa:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8001efe:	ab07      	add	r3, sp, #28
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	21a3      	movs	r1, #163	; 0xa3
 8001f04:	2310      	movs	r3, #16
 8001f06:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f08:	f003 ff18 	bl	8005d3c <HAL_I2C_Mem_Read>
					eeprom->_EepromVarFloatingArr[y]->valorFloat =  floatBuff.value;
 8001f0c:	f8d5 50ac 	ldr.w	r5, [r5, #172]	; 0xac
 8001f10:	9a07      	ldr	r2, [sp, #28]
					if (eeprom->_EepromVarFloatingArr[y]->ptrFloat != 0) {
 8001f12:	6beb      	ldr	r3, [r5, #60]	; 0x3c
					eeprom->_EepromVarFloatingArr[y]->valorFloat =  floatBuff.value;
 8001f14:	61aa      	str	r2, [r5, #24]
					if (eeprom->_EepromVarFloatingArr[y]->ptrFloat != 0) {
 8001f16:	b103      	cbz	r3, 8001f1a <EepromDownloadValores+0x142>
						*eeprom->_EepromVarFloatingArr[y]->ptrFloat = eeprom->_EepromVarFloatingArr[y]->valorFloat;
 8001f18:	601a      	str	r2, [r3, #0]
					if(eeprom->_EepromVarFloatingArr[y]->defaultValue>0 && (eeprom->_EepromVarFloatingArr[y]->valorFloat == 0 || eeprom->_EepromVarFloatingArr[y]->valorFloat > eeprom->_EepromVarFloatingArr[y]->maxValue || eeprom->_EepromVarFloatingArr[y]->valorFloat < eeprom->_EepromVarFloatingArr[y]->minValue))
 8001f1a:	e9d5 8908 	ldrd	r8, r9, [r5, #32]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2300      	movs	r3, #0
 8001f22:	4640      	mov	r0, r8
 8001f24:	4649      	mov	r1, r9
 8001f26:	f7fe fd67 	bl	80009f8 <__aeabi_dcmpgt>
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d0df      	beq.n	8001eee <EepromDownloadValores+0x116>
 8001f2e:	69ae      	ldr	r6, [r5, #24]
 8001f30:	2100      	movs	r1, #0
 8001f32:	4630      	mov	r0, r6
 8001f34:	f7ff f87c 	bl	8001030 <__aeabi_fcmpeq>
 8001f38:	b988      	cbnz	r0, 8001f5e <EepromDownloadValores+0x186>
 8001f3a:	4630      	mov	r0, r6
 8001f3c:	f7fe fa74 	bl	8000428 <__aeabi_f2d>
 8001f40:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8001f44:	4606      	mov	r6, r0
 8001f46:	460f      	mov	r7, r1
 8001f48:	f7fe fd56 	bl	80009f8 <__aeabi_dcmpgt>
 8001f4c:	b938      	cbnz	r0, 8001f5e <EepromDownloadValores+0x186>
 8001f4e:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 8001f52:	4630      	mov	r0, r6
 8001f54:	4639      	mov	r1, r7
 8001f56:	f7fe fd31 	bl	80009bc <__aeabi_dcmplt>
 8001f5a:	2800      	cmp	r0, #0
 8001f5c:	d0c7      	beq.n	8001eee <EepromDownloadValores+0x116>
						EepromSetVarFloating(eeprom, eeprom->_EepromVarFloatingArr[y], (float)eeprom->_EepromVarFloatingArr[y]->defaultValue);
 8001f5e:	4649      	mov	r1, r9
 8001f60:	4640      	mov	r0, r8
 8001f62:	f7fe fd73 	bl	8000a4c <__aeabi_d2f>
 8001f66:	f7fe fa5f 	bl	8000428 <__aeabi_f2d>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
						EepromSetVarFloating(eeprom, eeprom->_EepromVarFloatingArr[y], (double)eeprom->_EepromVarFloatingArr[y]->defaultValue);
 8001f6e:	4629      	mov	r1, r5
 8001f70:	4620      	mov	r0, r4
 8001f72:	f7ff fe29 	bl	8001bc8 <EepromSetVarFloating>
 8001f76:	e7ba      	b.n	8001eee <EepromDownloadValores+0x116>
					HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, eeprom->_EepromVarFloatingArr[y]->_addrEprom, I2C_MEMADD_SIZE_16BIT, doubleBuff.bytes, 8, 200);
 8001f78:	891a      	ldrh	r2, [r3, #8]
 8001f7a:	21c8      	movs	r1, #200	; 0xc8
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001f82:	ab08      	add	r3, sp, #32
 8001f84:	21a3      	movs	r1, #163	; 0xa3
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f8a:	2310      	movs	r3, #16
 8001f8c:	f003 fed6 	bl	8005d3c <HAL_I2C_Mem_Read>
					eeprom->_EepromVarFloatingArr[y]->valorDouble =  doubleBuff.value;
 8001f90:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001f94:	f8d5 50ac 	ldr.w	r5, [r5, #172]	; 0xac
					if (eeprom->_EepromVarFloatingArr[y]->ptrDouble != 0) {
 8001f98:	6c2b      	ldr	r3, [r5, #64]	; 0x40
					eeprom->_EepromVarFloatingArr[y]->valorDouble =  doubleBuff.value;
 8001f9a:	e9c5 0104 	strd	r0, r1, [r5, #16]
					if (eeprom->_EepromVarFloatingArr[y]->ptrDouble != 0) {
 8001f9e:	b10b      	cbz	r3, 8001fa4 <EepromDownloadValores+0x1cc>
						*eeprom->_EepromVarFloatingArr[y]->ptrDouble = eeprom->_EepromVarFloatingArr[y]->valorDouble;
 8001fa0:	e9c3 0100 	strd	r0, r1, [r3]
					if(eeprom->_EepromVarFloatingArr[y]->defaultValue>0 && (eeprom->_EepromVarFloatingArr[y]->valorDouble == 0 || eeprom->_EepromVarFloatingArr[y]->valorDouble > eeprom->_EepromVarFloatingArr[y]->maxValue || eeprom->_EepromVarFloatingArr[y]->valorDouble < eeprom->_EepromVarFloatingArr[y]->minValue))
 8001fa4:	e9d5 8908 	ldrd	r8, r9, [r5, #32]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2300      	movs	r3, #0
 8001fac:	4640      	mov	r0, r8
 8001fae:	4649      	mov	r1, r9
 8001fb0:	f7fe fd22 	bl	80009f8 <__aeabi_dcmpgt>
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	d09a      	beq.n	8001eee <EepromDownloadValores+0x116>
 8001fb8:	e9d5 6704 	ldrd	r6, r7, [r5, #16]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	4630      	mov	r0, r6
 8001fc2:	4639      	mov	r1, r7
 8001fc4:	f7fe fcf0 	bl	80009a8 <__aeabi_dcmpeq>
 8001fc8:	b970      	cbnz	r0, 8001fe8 <EepromDownloadValores+0x210>
 8001fca:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8001fce:	4630      	mov	r0, r6
 8001fd0:	4639      	mov	r1, r7
 8001fd2:	f7fe fd11 	bl	80009f8 <__aeabi_dcmpgt>
 8001fd6:	b938      	cbnz	r0, 8001fe8 <EepromDownloadValores+0x210>
 8001fd8:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 8001fdc:	4630      	mov	r0, r6
 8001fde:	4639      	mov	r1, r7
 8001fe0:	f7fe fcec 	bl	80009bc <__aeabi_dcmplt>
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d082      	beq.n	8001eee <EepromDownloadValores+0x116>
						EepromSetVarFloating(eeprom, eeprom->_EepromVarFloatingArr[y], (double)eeprom->_EepromVarFloatingArr[y]->defaultValue);
 8001fe8:	4642      	mov	r2, r8
 8001fea:	464b      	mov	r3, r9
 8001fec:	e7bf      	b.n	8001f6e <EepromDownloadValores+0x196>

08001fee <OutputAddDigital>:
 *      Author: lucas
 */
#include "OutputDigital.h"

uint8_t OutputAddDigital(OutputDigital* Output,IndviduoOutput* _individ, uint16_t _pinoOUT,GPIO_TypeDef *_portaOUT,
		void (*callback)(),uint16_t limitOn,uint16_t limitOff){
 8001fee:	b510      	push	{r4, lr}

	//montando a fila
	Output->_OutDigitalArr[Output->_DigitalCount] = _individ;
 8001ff0:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
 8001ff4:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
	Output->_DigitalCount++;
 8001ff8:	3401      	adds	r4, #1
 8001ffa:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28

	//definicao dos pinos
	_individ->GPIO_Pin	=	_pinoOUT;
	_individ->GPIOx		=	_portaOUT;
 8001ffe:	604b      	str	r3, [r1, #4]

	//Bind the correct callback functions together
	_individ->timeOut = callback;
 8002000:	9b02      	ldr	r3, [sp, #8]
	_individ->limitOff = limitOff;


	//Return OK
	return 0;
}
 8002002:	2000      	movs	r0, #0
	_individ->timeOut = callback;
 8002004:	614b      	str	r3, [r1, #20]
	_individ->limitOn = limitOn;
 8002006:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	_individ->GPIO_Pin	=	_pinoOUT;
 800200a:	800a      	strh	r2, [r1, #0]
	_individ->limitOn = limitOn;
 800200c:	81cb      	strh	r3, [r1, #14]
	_individ->limitOff = limitOff;
 800200e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8002012:	820b      	strh	r3, [r1, #16]
}
 8002014:	bd10      	pop	{r4, pc}

08002016 <OutputAddPID>:
uint8_t OutputAddPID(OutputDigital* Output,IndviduoPID* _individ, TIM_HandleTypeDef *htim, uint32_t Channel, double Kp, double Ki, double Kd, uint16_t histerese,
		uint16_t limit_on,void (*callback)()){
 8002016:	b530      	push	{r4, r5, lr}

	//montando a fila
	Output->_OutPidArr[Output->_PidCount] = _individ;
 8002018:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
 800201c:	1da5      	adds	r5, r4, #6
	Output->_PidCount++;
 800201e:	3401      	adds	r4, #1
	Output->_OutPidArr[Output->_PidCount] = _individ;
 8002020:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
	Output->_PidCount++;
 8002024:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29

	//definicao do timer
	_individ->TimHandle = htim;
	_individ->Channel   = Channel;
 8002028:	e9c1 2300 	strd	r2, r3, [r1]

	//tunning de PID
	_individ->kp	= Kp;
 800202c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8002030:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_individ->ki	= Ki;
 8002034:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8002038:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_individ->kd	= Kd;
 800203c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002040:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_individ->histerese	= histerese;
 8002044:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
	//Bind the correct callback functions together
	_individ->timeOut = callback;

	//Return OK
	return 0;
}
 8002048:	2000      	movs	r0, #0
	_individ->histerese	= histerese;
 800204a:	874b      	strh	r3, [r1, #58]	; 0x3a
	_individ->timeOut = callback;
 800204c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800204e:	644b      	str	r3, [r1, #68]	; 0x44
}
 8002050:	bd30      	pop	{r4, r5, pc}

08002052 <onDigital>:
void onDigital(IndviduoOutput* outPut) {
 8002052:	b510      	push	{r4, lr}
	// Implementação do método ON.
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_SET);
 8002054:	8801      	ldrh	r1, [r0, #0]
void onDigital(IndviduoOutput* outPut) {
 8002056:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_SET);
 8002058:	2201      	movs	r2, #1
 800205a:	6840      	ldr	r0, [r0, #4]
 800205c:	f003 fb34 	bl	80056c8 <HAL_GPIO_WritePin>
	outPut->_state = on; // Exemplo hipotético
 8002060:	2301      	movs	r3, #1
 8002062:	7223      	strb	r3, [r4, #8]
}
 8002064:	bd10      	pop	{r4, pc}

08002066 <offDigital>:
void offDigital(IndviduoOutput* outPut) {
 8002066:	b510      	push	{r4, lr}
	// Implementação do método OFF.
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_RESET);
 8002068:	8801      	ldrh	r1, [r0, #0]
void offDigital(IndviduoOutput* outPut) {
 800206a:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_RESET);
 800206c:	2200      	movs	r2, #0
 800206e:	6840      	ldr	r0, [r0, #4]
 8002070:	f003 fb2a 	bl	80056c8 <HAL_GPIO_WritePin>
	outPut->_state = off; // Exemplo hipotético
 8002074:	2300      	movs	r3, #0
 8002076:	7223      	strb	r3, [r4, #8]
}
 8002078:	bd10      	pop	{r4, pc}

0800207a <contadorOutput>:
void contadorOutput(OutputDigital* Output){
 800207a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//chamar essa funcao em um timer com passo de 1 segundo

	//Varregura pelas saidas -------------DIGITAIS----------------
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 800207e:	2400      	movs	r4, #0
void contadorOutput(OutputDigital* Output){
 8002080:	4605      	mov	r5, r0
 8002082:	4626      	mov	r6, r4
 8002084:	f64f 77ff 	movw	r7, #65535	; 0xffff
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 8002088:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800208c:	fa5f f884 	uxtb.w	r8, r4
 8002090:	4543      	cmp	r3, r8
 8002092:	d80b      	bhi.n	80020ac <contadorOutput+0x32>
 8002094:	f04f 0a00 	mov.w	sl, #0
#ifndef CALCULA_POR_PWMOUT
		//---CATEGORIZA STATE
		if(Output->_OutPidArr[i]->realtime >=  Output->_OutPidArr[i]->setPoint ){
			Output->_OutPidArr[i]->_PWMstate = idle;
		}else if(Output->_OutPidArr[i]->realtime + Output->_OutPidArr[i]->histerese >  Output->_OutPidArr[i]->setPoint ){
			Output->_OutPidArr[i]->_PWMstate = mantendo;
 8002098:	f04f 0b02 	mov.w	fp, #2
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 800209c:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80020a0:	fa5f f38a 	uxtb.w	r3, sl
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d825      	bhi.n	80020f4 <contadorOutput+0x7a>
				//chama callback de timeout
				Output->_OutPidArr[i]->timeOut();
			}
		}
	}
}
 80020a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(Output->_OutDigitalArr[i]->_state == on){
 80020ac:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 80020b0:	7a1a      	ldrb	r2, [r3, #8]
 80020b2:	2a01      	cmp	r2, #1
 80020b4:	d117      	bne.n	80020e6 <contadorOutput+0x6c>
			(Output->_OutDigitalArr[i]->timeOn<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOn++:0;
 80020b6:	895a      	ldrh	r2, [r3, #10]
			Output->_OutDigitalArr[i]->timeOff = 0;
 80020b8:	819e      	strh	r6, [r3, #12]
			(Output->_OutDigitalArr[i]->timeOn<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOn++:0;
 80020ba:	42ba      	cmp	r2, r7
 80020bc:	d001      	beq.n	80020c2 <contadorOutput+0x48>
 80020be:	3201      	adds	r2, #1
 80020c0:	815a      	strh	r2, [r3, #10]
		if(Output->_OutDigitalArr[i]->limitOn != 0){
 80020c2:	89da      	ldrh	r2, [r3, #14]
 80020c4:	b122      	cbz	r2, 80020d0 <contadorOutput+0x56>
			if(Output->_OutDigitalArr[i]->timeOn >= Output->_OutDigitalArr[i]->limitOn){
 80020c6:	8959      	ldrh	r1, [r3, #10]
 80020c8:	4291      	cmp	r1, r2
 80020ca:	d301      	bcc.n	80020d0 <contadorOutput+0x56>
				Output->_OutDigitalArr[i]->timeOut();
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	4798      	blx	r3
		if(Output->_OutDigitalArr[i]->limitOff != 0){
 80020d0:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 80020d4:	8a1a      	ldrh	r2, [r3, #16]
 80020d6:	b122      	cbz	r2, 80020e2 <contadorOutput+0x68>
			if(Output->_OutDigitalArr[i]->timeOff >= Output->_OutDigitalArr[i]->limitOff){
 80020d8:	8999      	ldrh	r1, [r3, #12]
 80020da:	4291      	cmp	r1, r2
 80020dc:	d301      	bcc.n	80020e2 <contadorOutput+0x68>
				Output->_OutDigitalArr[i]->timeOut();
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	4798      	blx	r3
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 80020e2:	3401      	adds	r4, #1
 80020e4:	e7d0      	b.n	8002088 <contadorOutput+0xe>
			(Output->_OutDigitalArr[i]->timeOff<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOff++:0;
 80020e6:	899a      	ldrh	r2, [r3, #12]
			Output->_OutDigitalArr[i]->timeOn = 0;
 80020e8:	815e      	strh	r6, [r3, #10]
			(Output->_OutDigitalArr[i]->timeOff<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOff++:0;
 80020ea:	42ba      	cmp	r2, r7
 80020ec:	bf1c      	itt	ne
 80020ee:	3201      	addne	r2, #1
 80020f0:	819a      	strhne	r2, [r3, #12]
 80020f2:	e7e6      	b.n	80020c2 <contadorOutput+0x48>
		if(Output->_OutPidArr[i]->realtime >=  Output->_OutPidArr[i]->setPoint ){
 80020f4:	3306      	adds	r3, #6
 80020f6:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 80020fa:	e9d4 890a 	ldrd	r8, r9, [r4, #40]	; 0x28
 80020fe:	e9d4 670c 	ldrd	r6, r7, [r4, #48]	; 0x30
 8002102:	4640      	mov	r0, r8
 8002104:	4632      	mov	r2, r6
 8002106:	463b      	mov	r3, r7
 8002108:	4649      	mov	r1, r9
 800210a:	f7fe fc6b 	bl	80009e4 <__aeabi_dcmpge>
 800210e:	bb08      	cbnz	r0, 8002154 <contadorOutput+0xda>
		}else if(Output->_OutPidArr[i]->realtime + Output->_OutPidArr[i]->histerese >  Output->_OutPidArr[i]->setPoint ){
 8002110:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
 8002112:	f7fe f977 	bl	8000404 <__aeabi_i2d>
 8002116:	4642      	mov	r2, r8
 8002118:	464b      	mov	r3, r9
 800211a:	f7fe f827 	bl	800016c <__adddf3>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4630      	mov	r0, r6
 8002124:	4639      	mov	r1, r7
 8002126:	f7fe fc49 	bl	80009bc <__aeabi_dcmplt>
 800212a:	b1c8      	cbz	r0, 8002160 <contadorOutput+0xe6>
			(Output->_OutPidArr[i]->timeOn<UINT16_MAX)?Output->_OutPidArr[i]->timeOn++:0;
 800212c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002130:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			Output->_OutPidArr[i]->_PWMstate = mantendo;
 8002132:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
			(Output->_OutPidArr[i]->timeOn<UINT16_MAX)?Output->_OutPidArr[i]->timeOn++:0;
 8002136:	4293      	cmp	r3, r2
 8002138:	d001      	beq.n	800213e <contadorOutput+0xc4>
 800213a:	3301      	adds	r3, #1
 800213c:	87e3      	strh	r3, [r4, #62]	; 0x3e
		if(Output->_OutPidArr[i]->limiteOn != 0){
 800213e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8002142:	b123      	cbz	r3, 800214e <contadorOutput+0xd4>
			if(Output->_OutPidArr[i]->timeOn >= Output->_OutPidArr[i]->limiteOn){
 8002144:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002146:	429a      	cmp	r2, r3
 8002148:	d301      	bcc.n	800214e <contadorOutput+0xd4>
				Output->_OutPidArr[i]->timeOut();
 800214a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800214c:	4798      	blx	r3
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 800214e:	f10a 0a01 	add.w	sl, sl, #1
 8002152:	e7a3      	b.n	800209c <contadorOutput+0x22>
 8002154:	2300      	movs	r3, #0
			Output->_OutPidArr[i]->_PWMstate = buscando;
 8002156:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			Output->_OutPidArr[i]->timeOn=0;
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	e7ed      	b.n	800213c <contadorOutput+0xc2>
 8002160:	2301      	movs	r3, #1
 8002162:	e7f8      	b.n	8002156 <contadorOutput+0xdc>

08002164 <IndviduoPID_SetPWMValue>:
void IndviduoPID_SetPWMValue(IndviduoPID *pid, double pwmValue) {
 8002164:	b5d0      	push	{r4, r6, r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	4604      	mov	r4, r0
 800216a:	461f      	mov	r7, r3
 800216c:	4616      	mov	r6, r2
	TIM_OC_InitTypeDef sConfigOC = {0};
 800216e:	2100      	movs	r1, #0
 8002170:	2214      	movs	r2, #20
 8002172:	a803      	add	r0, sp, #12
 8002174:	f008 f968 	bl	800a448 <memset>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002178:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 800217a:	4639      	mov	r1, r7
 800217c:	4630      	mov	r0, r6
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800217e:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 8002180:	f7fe fc44 	bl	8000a0c <__aeabi_d2uiz>
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(pid->TimHandle, &sConfigOC, pid->Channel) != HAL_OK) {
 8002184:	6862      	ldr	r2, [r4, #4]
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 8002186:	9002      	str	r0, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(pid->TimHandle, &sConfigOC, pid->Channel) != HAL_OK) {
 8002188:	a901      	add	r1, sp, #4
 800218a:	6820      	ldr	r0, [r4, #0]
 800218c:	f004 fef4 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
		// Tratamento de erro
	}

	if (HAL_TIM_PWM_Start(pid->TimHandle, pid->Channel) != HAL_OK) {
 8002190:	e9d4 0100 	ldrd	r0, r1, [r4]
 8002194:	f005 f84a 	bl	800722c <HAL_TIM_PWM_Start>
		// Tratamento de erro
	}
}
 8002198:	b008      	add	sp, #32
 800219a:	bdd0      	pop	{r4, r6, r7, pc}

0800219c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <vApplicationGetIdleTaskMemory+0x10>)
 800219e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <vApplicationGetIdleTaskMemory+0x14>)
 80021a2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000290 	.word	0x20000290
 80021b0:	20000090 	.word	0x20000090

080021b4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <vApplicationGetTimerTaskMemory+0x10>)
 80021b6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <vApplicationGetTimerTaskMemory+0x14>)
 80021ba:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80021bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c0:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80021c2:	4770      	bx	lr
 80021c4:	20000730 	.word	0x20000730
 80021c8:	20000330 	.word	0x20000330

080021cc <timeoutAquecimento>:
		PrimitiveStates.Lastro.realtime = TempLastro-34;
		i=0;
	}
}

void timeoutAquecimento (void){
 80021cc:	b510      	push	{r4, lr}
	//verifica erro temperatura lastro
	if(PrimitiveStates.Lastro.realtime < PrimitiveStates.Lastro.setPoint-5)
 80021ce:	4c14      	ldr	r4, [pc, #80]	; (8002220 <timeoutAquecimento+0x54>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	e9d4 0148 	ldrd	r0, r1, [r4, #288]	; 0x120
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <timeoutAquecimento+0x58>)
 80021d8:	f7fd ffc6 	bl	8000168 <__aeabi_dsub>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	e9d4 0146 	ldrd	r0, r1, [r4, #280]	; 0x118
 80021e4:	f7fe fbea 	bl	80009bc <__aeabi_dcmplt>
 80021e8:	b128      	cbz	r0, 80021f6 <timeoutAquecimento+0x2a>
		PrimitiveStates.Erro.bit.IdleLastro=1;
 80021ea:	f894 313f 	ldrb.w	r3, [r4, #319]	; 0x13f
 80021ee:	f043 0308 	orr.w	r3, r3, #8
 80021f2:	f884 313f 	strb.w	r3, [r4, #319]	; 0x13f

	//verifica erro temperatura teto
	if(PrimitiveStates.Teto.realtime < PrimitiveStates.Teto.setPoint-5)
 80021f6:	2200      	movs	r2, #0
 80021f8:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <timeoutAquecimento+0x58>)
 80021fe:	f7fd ffb3 	bl	8000168 <__aeabi_dsub>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
 800220a:	f7fe fbd7 	bl	80009bc <__aeabi_dcmplt>
 800220e:	b128      	cbz	r0, 800221c <timeoutAquecimento+0x50>
		PrimitiveStates.Erro.bit.IdleTeto=1;
 8002210:	f894 313f 	ldrb.w	r3, [r4, #319]	; 0x13f
 8002214:	f043 0304 	orr.w	r3, r3, #4
 8002218:	f884 313f 	strb.w	r3, [r4, #319]	; 0x13f
}
 800221c:	bd10      	pop	{r4, pc}
 800221e:	bf00      	nop
 8002220:	200008d0 	.word	0x200008d0
 8002224:	40140000 	.word	0x40140000

08002228 <timeoutDesligaLampada>:

void timeoutDesligaLampada(void){

	offDigital(&PrimitiveStates.Lampada);
 8002228:	4801      	ldr	r0, [pc, #4]	; (8002230 <timeoutDesligaLampada+0x8>)
 800222a:	f7ff bf1c 	b.w	8002066 <offDigital>
 800222e:	bf00      	nop
 8002230:	200008fc 	.word	0x200008fc

08002234 <CBTimer10ms>:
/* CBTimer10ms function */
void CBTimer10ms(void const * argument)
{
  /* USER CODE BEGIN CBTimer10ms */

	bluetooth10ms(&bluetooth);
 8002234:	4801      	ldr	r0, [pc, #4]	; (800223c <CBTimer10ms+0x8>)
 8002236:	f7ff ba15 	b.w	8001664 <bluetooth10ms>
 800223a:	bf00      	nop
 800223c:	20002004 	.word	0x20002004

08002240 <SystemClock_Config>:
{
 8002240:	b530      	push	{r4, r5, lr}
 8002242:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002244:	2220      	movs	r2, #32
 8002246:	2100      	movs	r1, #0
 8002248:	a80b      	add	r0, sp, #44	; 0x2c
 800224a:	f008 f8fd 	bl	800a448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800224e:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002250:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002252:	2100      	movs	r1, #0
 8002254:	eb0d 0002 	add.w	r0, sp, r2
 8002258:	f008 f8f6 	bl	800a448 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800225c:	462a      	mov	r2, r5
 800225e:	2100      	movs	r1, #0
 8002260:	a801      	add	r0, sp, #4
 8002262:	f008 f8f1 	bl	800a448 <memset>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002266:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002268:	230a      	movs	r3, #10
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800226a:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800226e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002270:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8002272:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002276:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002278:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800227a:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 800227c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800227e:	f003 ff51 	bl	8006124 <HAL_RCC_OscConfig>
 8002282:	b108      	cbz	r0, 8002288 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002286:	e7fe      	b.n	8002286 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002288:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800228a:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800228e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002292:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002294:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002298:	4621      	mov	r1, r4
 800229a:	a805      	add	r0, sp, #20
 800229c:	f004 f904 	bl	80064a8 <HAL_RCC_ClockConfig>
 80022a0:	b108      	cbz	r0, 80022a6 <SystemClock_Config+0x66>
 80022a2:	b672      	cpsid	i
	while (1)
 80022a4:	e7fe      	b.n	80022a4 <SystemClock_Config+0x64>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022aa:	2203      	movs	r2, #3
 80022ac:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80022b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022b4:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80022b6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022b8:	f004 f9d0 	bl	800665c <HAL_RCCEx_PeriphCLKConfig>
 80022bc:	b108      	cbz	r0, 80022c2 <SystemClock_Config+0x82>
 80022be:	b672      	cpsid	i
	while (1)
 80022c0:	e7fe      	b.n	80022c0 <SystemClock_Config+0x80>
}
 80022c2:	b015      	add	sp, #84	; 0x54
 80022c4:	bd30      	pop	{r4, r5, pc}
	...

080022c8 <main>:
{
 80022c8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	2710      	movs	r7, #16
{
 80022ce:	b0c7      	sub	sp, #284	; 0x11c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d0:	4dab      	ldr	r5, [pc, #684]	; (8002580 <main+0x2b8>)
  HAL_Init();
 80022d2:	f002 fc55 	bl	8004b80 <HAL_Init>
  SystemClock_Config();
 80022d6:	f7ff ffb3 	bl	8002240 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022da:	463a      	mov	r2, r7
 80022dc:	2100      	movs	r1, #0
 80022de:	a83f      	add	r0, sp, #252	; 0xfc
 80022e0:	f008 f8b2 	bl	800a448 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 80022e6:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	61ab      	str	r3, [r5, #24]
 80022ee:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 80022f0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80022fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fc:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 80022fe:	48a1      	ldr	r0, [pc, #644]	; (8002584 <main+0x2bc>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002300:	f043 0308 	orr.w	r3, r3, #8
 8002304:	61ab      	str	r3, [r5, #24]
 8002306:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	930c      	str	r3, [sp, #48]	; 0x30
 8002310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 8002312:	f003 f9d9 	bl	80056c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800231c:	489a      	ldr	r0, [pc, #616]	; (8002588 <main+0x2c0>)
 800231e:	f003 f9d3 	bl	80056c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin
 8002322:	2200      	movs	r2, #0
 8002324:	21f8      	movs	r1, #248	; 0xf8
 8002326:	4897      	ldr	r0, [pc, #604]	; (8002584 <main+0x2bc>)
 8002328:	f003 f9ce 	bl	80056c8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232c:	f04f 0801 	mov.w	r8, #1
 8002330:	f246 0378 	movw	r3, #24696	; 0x6078
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002338:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
  GPIO_InitStruct.Pin = BOTAO_BLE_Pin;
 800233c:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002340:	4890      	ldr	r0, [pc, #576]	; (8002584 <main+0x2bc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002342:	f8df b248 	ldr.w	fp, [pc, #584]	; 800258c <main+0x2c4>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002346:	a93f      	add	r1, sp, #252	; 0xfc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002348:	e9cd 383f 	strd	r3, r8, [sp, #252]	; 0xfc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	e9cd 4941 	strd	r4, r9, [sp, #260]	; 0x104
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002350:	f003 f86c 	bl	800542c <HAL_GPIO_Init>
  HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002354:	488b      	ldr	r0, [pc, #556]	; (8002584 <main+0x2bc>)
 8002356:	a93f      	add	r1, sp, #252	; 0xfc
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	9441      	str	r4, [sp, #260]	; 0x104
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800235a:	e9cd ab3f 	strd	sl, fp, [sp, #252]	; 0xfc
  HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 800235e:	f003 f865 	bl	800542c <HAL_GPIO_Init>
  HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 8002362:	4889      	ldr	r0, [pc, #548]	; (8002588 <main+0x2c0>)
 8002364:	a93f      	add	r1, sp, #252	; 0xfc
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	9441      	str	r4, [sp, #260]	; 0x104
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002368:	e9cd 6b3f 	strd	r6, fp, [sp, #252]	; 0xfc
  HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 800236c:	f003 f85e 	bl	800542c <HAL_GPIO_Init>
  HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 8002370:	4885      	ldr	r0, [pc, #532]	; (8002588 <main+0x2c0>)
 8002372:	a93f      	add	r1, sp, #252	; 0xfc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002374:	e9cd 4941 	strd	r4, r9, [sp, #260]	; 0x104
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002378:	e9cd a83f 	strd	sl, r8, [sp, #252]	; 0xfc
  HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 800237c:	f003 f856 	bl	800542c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EEPROM_EN_Pin;
 8002380:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 8002382:	4880      	ldr	r0, [pc, #512]	; (8002584 <main+0x2bc>)
 8002384:	a93f      	add	r1, sp, #252	; 0xfc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	e9cd 383f 	strd	r3, r8, [sp, #252]	; 0xfc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	e9cd 9941 	strd	r9, r9, [sp, #260]	; 0x104
  HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 800238e:	f003 f84d 	bl	800542c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002392:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002394:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002396:	ea43 0308 	orr.w	r3, r3, r8
 800239a:	616b      	str	r3, [r5, #20]
 800239c:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800239e:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023a0:	ea03 0308 	and.w	r3, r3, r8
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80023a4:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023a6:	930a      	str	r3, [sp, #40]	; 0x28
 80023a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80023aa:	f002 fe59 	bl	8005060 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80023ae:	200b      	movs	r0, #11
 80023b0:	f002 fe86 	bl	80050c0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80023b4:	4622      	mov	r2, r4
 80023b6:	2105      	movs	r1, #5
 80023b8:	200d      	movs	r0, #13
 80023ba:	f002 fe51 	bl	8005060 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80023be:	200d      	movs	r0, #13
 80023c0:	f002 fe7e 	bl	80050c0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80023c4:	4622      	mov	r2, r4
 80023c6:	2105      	movs	r1, #5
 80023c8:	200f      	movs	r0, #15
 80023ca:	f002 fe49 	bl	8005060 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80023ce:	200f      	movs	r0, #15
 80023d0:	f002 fe76 	bl	80050c0 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 80023d4:	4d6e      	ldr	r5, [pc, #440]	; (8002590 <main+0x2c8>)
 80023d6:	4b6f      	ldr	r3, [pc, #444]	; (8002594 <main+0x2cc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80023d8:	e9cd 443f 	strd	r4, r4, [sp, #252]	; 0xfc
  hadc1.Instance = ADC1;
 80023dc:	602b      	str	r3, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80023de:	f44f 7380 	mov.w	r3, #256	; 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 80023e2:	9441      	str	r4, [sp, #260]	; 0x104
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80023e4:	60ab      	str	r3, [r5, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023e6:	752c      	strb	r4, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023e8:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023ec:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 3;
 80023ee:	2403      	movs	r4, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023f0:	4628      	mov	r0, r5
  hadc1.Init.ContinuousConvMode = ENABLE;
 80023f2:	f885 800c 	strb.w	r8, [r5, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023f6:	61eb      	str	r3, [r5, #28]
  hadc1.Init.NbrOfConversion = 3;
 80023f8:	612c      	str	r4, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023fa:	f002 fda1 	bl	8004f40 <HAL_ADC_Init>
 80023fe:	b108      	cbz	r0, 8002404 <main+0x13c>
 8002400:	b672      	cpsid	i
	while (1)
 8002402:	e7fe      	b.n	8002402 <main+0x13a>
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002404:	2306      	movs	r3, #6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002406:	e9cd 083f 	strd	r0, r8, [sp, #252]	; 0xfc
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800240a:	a93f      	add	r1, sp, #252	; 0xfc
 800240c:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800240e:	9341      	str	r3, [sp, #260]	; 0x104
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002410:	f002 fc28 	bl	8004c64 <HAL_ADC_ConfigChannel>
 8002414:	b108      	cbz	r0, 800241a <main+0x152>
 8002416:	b672      	cpsid	i
	while (1)
 8002418:	e7fe      	b.n	8002418 <main+0x150>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800241a:	4628      	mov	r0, r5
 800241c:	a93f      	add	r1, sp, #252	; 0xfc
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800241e:	e9cd 893f 	strd	r8, r9, [sp, #252]	; 0xfc
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002422:	f002 fc1f 	bl	8004c64 <HAL_ADC_ConfigChannel>
 8002426:	b108      	cbz	r0, 800242c <main+0x164>
 8002428:	b672      	cpsid	i
	while (1)
 800242a:	e7fe      	b.n	800242a <main+0x162>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800242c:	4628      	mov	r0, r5
 800242e:	a93f      	add	r1, sp, #252	; 0xfc
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002430:	e9cd 743f 	strd	r7, r4, [sp, #252]	; 0xfc
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002434:	f002 fc16 	bl	8004c64 <HAL_ADC_ConfigChannel>
 8002438:	4603      	mov	r3, r0
 800243a:	b108      	cbz	r0, 8002440 <main+0x178>
 800243c:	b672      	cpsid	i
	while (1)
 800243e:	e7fe      	b.n	800243e <main+0x176>
  hi2c1.Instance = I2C1;
 8002440:	4855      	ldr	r0, [pc, #340]	; (8002598 <main+0x2d0>)
  hi2c1.Init.ClockSpeed = 100000;
 8002442:	f8df c158 	ldr.w	ip, [pc, #344]	; 800259c <main+0x2d4>
 8002446:	4a56      	ldr	r2, [pc, #344]	; (80025a0 <main+0x2d8>)
  hi2c1.Init.OwnAddress1 = 0;
 8002448:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 800244c:	e9c0 c200 	strd	ip, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002450:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002454:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002458:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800245c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800245e:	f003 fb35 	bl	8005acc <HAL_I2C_Init>
 8002462:	4605      	mov	r5, r0
 8002464:	b108      	cbz	r0, 800246a <main+0x1a2>
 8002466:	b672      	cpsid	i
	while (1)
 8002468:	e7fe      	b.n	8002468 <main+0x1a0>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800246a:	463a      	mov	r2, r7
 800246c:	4601      	mov	r1, r0
 800246e:	a838      	add	r0, sp, #224	; 0xe0
 8002470:	f007 ffea 	bl	800a448 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002474:	221c      	movs	r2, #28
 8002476:	4629      	mov	r1, r5
 8002478:	a83f      	add	r0, sp, #252	; 0xfc
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247a:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
  TIM_OC_InitTypeDef sConfigOC = {0};
 800247e:	f007 ffe3 	bl	800a448 <memset>
  htim3.Init.Prescaler = 4000-1;
 8002482:	f640 739f 	movw	r3, #3999	; 0xf9f
  htim3.Instance = TIM3;
 8002486:	4c47      	ldr	r4, [pc, #284]	; (80025a4 <main+0x2dc>)
  htim3.Init.Prescaler = 4000-1;
 8002488:	4f47      	ldr	r7, [pc, #284]	; (80025a8 <main+0x2e0>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800248a:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 4000-1;
 800248c:	e9c4 7300 	strd	r7, r3, [r4]
  htim3.Init.Period = 100-1;
 8002490:	2363      	movs	r3, #99	; 0x63
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002492:	60a5      	str	r5, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002494:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002498:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800249a:	f004 fce9 	bl	8006e70 <HAL_TIM_Base_Init>
 800249e:	b108      	cbz	r0, 80024a4 <main+0x1dc>
 80024a0:	b672      	cpsid	i
	while (1)
 80024a2:	e7fe      	b.n	80024a2 <main+0x1da>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024a4:	4620      	mov	r0, r4
 80024a6:	a938      	add	r1, sp, #224	; 0xe0
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a8:	9638      	str	r6, [sp, #224]	; 0xe0
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024aa:	f004 fdc8 	bl	800703e <HAL_TIM_ConfigClockSource>
 80024ae:	b108      	cbz	r0, 80024b4 <main+0x1ec>
 80024b0:	b672      	cpsid	i
	while (1)
 80024b2:	e7fe      	b.n	80024b2 <main+0x1ea>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024b4:	4620      	mov	r0, r4
 80024b6:	f004 fd07 	bl	8006ec8 <HAL_TIM_PWM_Init>
 80024ba:	b108      	cbz	r0, 80024c0 <main+0x1f8>
 80024bc:	b672      	cpsid	i
	while (1)
 80024be:	e7fe      	b.n	80024be <main+0x1f6>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c0:	e9cd 0031 	strd	r0, r0, [sp, #196]	; 0xc4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024c4:	a931      	add	r1, sp, #196	; 0xc4
 80024c6:	4620      	mov	r0, r4
 80024c8:	f004 feee 	bl	80072a8 <HAL_TIMEx_MasterConfigSynchronization>
 80024cc:	4602      	mov	r2, r0
 80024ce:	b108      	cbz	r0, 80024d4 <main+0x20c>
 80024d0:	b672      	cpsid	i
	while (1)
 80024d2:	e7fe      	b.n	80024d2 <main+0x20a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d4:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80024d6:	e9cd 303f 	strd	r3, r0, [sp, #252]	; 0xfc
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80024da:	2304      	movs	r3, #4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024dc:	9041      	str	r0, [sp, #260]	; 0x104
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024de:	a93f      	add	r1, sp, #252	; 0xfc
 80024e0:	4620      	mov	r0, r4
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80024e2:	9343      	str	r3, [sp, #268]	; 0x10c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024e4:	f004 fd48 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 80024e8:	b108      	cbz	r0, 80024ee <main+0x226>
 80024ea:	b672      	cpsid	i
	while (1)
 80024ec:	e7fe      	b.n	80024ec <main+0x224>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024ee:	2204      	movs	r2, #4
 80024f0:	482c      	ldr	r0, [pc, #176]	; (80025a4 <main+0x2dc>)
 80024f2:	a93f      	add	r1, sp, #252	; 0xfc
 80024f4:	f004 fd40 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 80024f8:	b108      	cbz	r0, 80024fe <main+0x236>
 80024fa:	b672      	cpsid	i
	while (1)
 80024fc:	e7fe      	b.n	80024fc <main+0x234>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024fe:	2208      	movs	r2, #8
 8002500:	4828      	ldr	r0, [pc, #160]	; (80025a4 <main+0x2dc>)
 8002502:	a93f      	add	r1, sp, #252	; 0xfc
 8002504:	f004 fd38 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 8002508:	b108      	cbz	r0, 800250e <main+0x246>
 800250a:	b672      	cpsid	i
	while (1)
 800250c:	e7fe      	b.n	800250c <main+0x244>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800250e:	220c      	movs	r2, #12
 8002510:	4824      	ldr	r0, [pc, #144]	; (80025a4 <main+0x2dc>)
 8002512:	a93f      	add	r1, sp, #252	; 0xfc
 8002514:	f004 fd30 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 8002518:	4605      	mov	r5, r0
 800251a:	b108      	cbz	r0, 8002520 <main+0x258>
 800251c:	b672      	cpsid	i
	while (1)
 800251e:	e7fe      	b.n	800251e <main+0x256>
  HAL_TIM_MspPostInit(&htim3);
 8002520:	4820      	ldr	r0, [pc, #128]	; (80025a4 <main+0x2dc>)
 8002522:	f000 fe43 	bl	80031ac <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002526:	2210      	movs	r2, #16
 8002528:	4629      	mov	r1, r5
 800252a:	a838      	add	r0, sp, #224	; 0xe0
 800252c:	f007 ff8c 	bl	800a448 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002530:	221c      	movs	r2, #28
 8002532:	4629      	mov	r1, r5
 8002534:	a83f      	add	r0, sp, #252	; 0xfc
  htim2.Init.Prescaler = 165-1;
 8002536:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800253a:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
  TIM_OC_InitTypeDef sConfigOC = {0};
 800253e:	f007 ff83 	bl	800a448 <memset>
  htim2.Init.Prescaler = 165-1;
 8002542:	23a4      	movs	r3, #164	; 0xa4
  htim2.Instance = TIM2;
 8002544:	4c19      	ldr	r4, [pc, #100]	; (80025ac <main+0x2e4>)
  htim2.Init.Prescaler = 165-1;
 8002546:	e9c4 6300 	strd	r6, r3, [r4]
  htim2.Init.Period = 100-1;
 800254a:	2363      	movs	r3, #99	; 0x63
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800254c:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254e:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002552:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002554:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002556:	f004 fc8b 	bl	8006e70 <HAL_TIM_Base_Init>
 800255a:	b108      	cbz	r0, 8002560 <main+0x298>
 800255c:	b672      	cpsid	i
	while (1)
 800255e:	e7fe      	b.n	800255e <main+0x296>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002564:	4620      	mov	r0, r4
 8002566:	a938      	add	r1, sp, #224	; 0xe0
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002568:	9338      	str	r3, [sp, #224]	; 0xe0
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800256a:	f004 fd68 	bl	800703e <HAL_TIM_ConfigClockSource>
 800256e:	b108      	cbz	r0, 8002574 <main+0x2ac>
 8002570:	b672      	cpsid	i
	while (1)
 8002572:	e7fe      	b.n	8002572 <main+0x2aa>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002574:	4620      	mov	r0, r4
 8002576:	f004 fca7 	bl	8006ec8 <HAL_TIM_PWM_Init>
 800257a:	b1c8      	cbz	r0, 80025b0 <main+0x2e8>
 800257c:	b672      	cpsid	i
	while (1)
 800257e:	e7fe      	b.n	800257e <main+0x2b6>
 8002580:	40021000 	.word	0x40021000
 8002584:	40010c00 	.word	0x40010c00
 8002588:	40010800 	.word	0x40010800
 800258c:	10110000 	.word	0x10110000
 8002590:	2000216c 	.word	0x2000216c
 8002594:	40012400 	.word	0x40012400
 8002598:	20002268 	.word	0x20002268
 800259c:	40005400 	.word	0x40005400
 80025a0:	000186a0 	.word	0x000186a0
 80025a4:	20002318 	.word	0x20002318
 80025a8:	40000400 	.word	0x40000400
 80025ac:	200022d0 	.word	0x200022d0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b0:	e9cd 0031 	strd	r0, r0, [sp, #196]	; 0xc4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025b4:	a931      	add	r1, sp, #196	; 0xc4
 80025b6:	4620      	mov	r0, r4
 80025b8:	f004 fe76 	bl	80072a8 <HAL_TIMEx_MasterConfigSynchronization>
 80025bc:	b108      	cbz	r0, 80025c2 <main+0x2fa>
 80025be:	b672      	cpsid	i
	while (1)
 80025c0:	e7fe      	b.n	80025c0 <main+0x2f8>
  sConfigOC.Pulse = 50;
 80025c2:	2560      	movs	r5, #96	; 0x60
 80025c4:	2332      	movs	r3, #50	; 0x32
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025c6:	9041      	str	r0, [sp, #260]	; 0x104
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c8:	9043      	str	r0, [sp, #268]	; 0x10c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025ca:	220c      	movs	r2, #12
 80025cc:	4620      	mov	r0, r4
 80025ce:	a93f      	add	r1, sp, #252	; 0xfc
  sConfigOC.Pulse = 50;
 80025d0:	e9cd 533f 	strd	r5, r3, [sp, #252]	; 0xfc
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025d4:	f004 fcd0 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 80025d8:	4605      	mov	r5, r0
 80025da:	b108      	cbz	r0, 80025e0 <main+0x318>
 80025dc:	b672      	cpsid	i
	while (1)
 80025de:	e7fe      	b.n	80025de <main+0x316>
  HAL_TIM_MspPostInit(&htim2);
 80025e0:	4620      	mov	r0, r4
 80025e2:	f000 fde3 	bl	80031ac <HAL_TIM_MspPostInit>
  huart1.Init.BaudRate = 9600;
 80025e6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 80025ea:	4827      	ldr	r0, [pc, #156]	; (8002688 <main+0x3c0>)
  huart1.Init.BaudRate = 9600;
 80025ec:	4c27      	ldr	r4, [pc, #156]	; (800268c <main+0x3c4>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025ee:	e9c0 5502 	strd	r5, r5, [r0, #8]
  huart1.Init.BaudRate = 9600;
 80025f2:	e9c0 4300 	strd	r4, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025f6:	240c      	movs	r4, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 80025f8:	6105      	str	r5, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025fa:	e9c0 4505 	strd	r4, r5, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025fe:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002600:	f004 ff20 	bl	8007444 <HAL_UART_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	b108      	cbz	r0, 800260c <main+0x344>
 8002608:	b672      	cpsid	i
	while (1)
 800260a:	e7fe      	b.n	800260a <main+0x342>
  huart3.Init.BaudRate = 115200;
 800260c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart3.Instance = USART3;
 8002610:	481f      	ldr	r0, [pc, #124]	; (8002690 <main+0x3c8>)
  huart3.Init.BaudRate = 115200;
 8002612:	4920      	ldr	r1, [pc, #128]	; (8002694 <main+0x3cc>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002614:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8002618:	e9c0 1200 	strd	r1, r2, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800261c:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002620:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002624:	f004 ff0e 	bl	8007444 <HAL_UART_Init>
 8002628:	b108      	cbz	r0, 800262e <main+0x366>
 800262a:	b672      	cpsid	i
	while (1)
 800262c:	e7fe      	b.n	800262c <main+0x364>
  RTC_TimeTypeDef sTime = {0};
 800262e:	2300      	movs	r3, #0
 8002630:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
 8002634:	f88d 30e2 	strb.w	r3, [sp, #226]	; 0xe2
  RTC_DateTypeDef DateToUpdate = {0};
 8002638:	933f      	str	r3, [sp, #252]	; 0xfc
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance = RTC;
 800263e:	4c16      	ldr	r4, [pc, #88]	; (8002698 <main+0x3d0>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002640:	4a16      	ldr	r2, [pc, #88]	; (800269c <main+0x3d4>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002642:	4620      	mov	r0, r4
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002644:	e9c4 2300 	strd	r2, r3, [r4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800264c:	60a3      	str	r3, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800264e:	f004 fa49 	bl	8006ae4 <HAL_RTC_Init>
 8002652:	b108      	cbz	r0, 8002658 <main+0x390>
 8002654:	b672      	cpsid	i
	while (1)
 8002656:	e7fe      	b.n	8002656 <main+0x38e>
  sTime.Hours = 0x0;
 8002658:	f8ad 00e0 	strh.w	r0, [sp, #224]	; 0xe0
  sTime.Seconds = 0x0;
 800265c:	f88d 00e2 	strb.w	r0, [sp, #226]	; 0xe2
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002660:	2201      	movs	r2, #1
 8002662:	4620      	mov	r0, r4
 8002664:	a938      	add	r1, sp, #224	; 0xe0
 8002666:	f004 f97a 	bl	800695e <HAL_RTC_SetTime>
 800266a:	b108      	cbz	r0, 8002670 <main+0x3a8>
 800266c:	b672      	cpsid	i
	while (1)
 800266e:	e7fe      	b.n	800266e <main+0x3a6>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <main+0x3d8>)
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002672:	4620      	mov	r0, r4
 8002674:	2201      	movs	r2, #1
 8002676:	a93f      	add	r1, sp, #252	; 0xfc
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002678:	933f      	str	r3, [sp, #252]	; 0xfc
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800267a:	f004 f9c1 	bl	8006a00 <HAL_RTC_SetDate>
 800267e:	4604      	mov	r4, r0
 8002680:	b180      	cbz	r0, 80026a4 <main+0x3dc>
 8002682:	b672      	cpsid	i
	while (1)
 8002684:	e7fe      	b.n	8002684 <main+0x3bc>
 8002686:	bf00      	nop
 8002688:	20002360 	.word	0x20002360
 800268c:	40013800 	.word	0x40013800
 8002690:	200023a8 	.word	0x200023a8
 8002694:	40004800 	.word	0x40004800
 8002698:	200022bc 	.word	0x200022bc
 800269c:	40002800 	.word	0x40002800
 80026a0:	00010101 	.word	0x00010101
	HAL_Delay(1000);
 80026a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	OutputAddPID(&PrimitiveStates.outPuts,&PrimitiveStates.Teto		,&htim3	,TIM_CHANNEL_4	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 80026a8:	f20f 2944 	addw	r9, pc, #580	; 0x244
 80026ac:	e9d9 8900 	ldrd	r8, r9, [r9]
 80026b0:	a791      	add	r7, pc, #580	; (adr r7, 80028f8 <main+0x630>)
 80026b2:	e9d7 6700 	ldrd	r6, r7, [r7]
	HAL_Delay(1000);
 80026b6:	f002 fa87 	bl	8004bc8 <HAL_Delay>
	HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 3	);// ADC_DMA
 80026ba:	2203      	movs	r2, #3
 80026bc:	4990      	ldr	r1, [pc, #576]	; (8002900 <main+0x638>)
 80026be:	4891      	ldr	r0, [pc, #580]	; (8002904 <main+0x63c>)
 80026c0:	f002 fb8a 	bl	8004dd8 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_3);
 80026c4:	2108      	movs	r1, #8
 80026c6:	4890      	ldr	r0, [pc, #576]	; (8002908 <main+0x640>)
 80026c8:	f004 fdb0 	bl	800722c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_4);
 80026cc:	210c      	movs	r1, #12
 80026ce:	488e      	ldr	r0, [pc, #568]	; (8002908 <main+0x640>)
 80026d0:	f004 fdac 	bl	800722c <HAL_TIM_PWM_Start>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.Lampada		,RELE_1_Pin	,RELE_1_GPIO_Port	,timeoutDesligaLampada	,45	,0);
 80026d4:	232d      	movs	r3, #45	; 0x2d
 80026d6:	498d      	ldr	r1, [pc, #564]	; (800290c <main+0x644>)
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	4b8d      	ldr	r3, [pc, #564]	; (8002910 <main+0x648>)
 80026dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	f1a1 002c 	sub.w	r0, r1, #44	; 0x2c
 80026e6:	4b8b      	ldr	r3, [pc, #556]	; (8002914 <main+0x64c>)
 80026e8:	9402      	str	r4, [sp, #8]
 80026ea:	f7ff fc80 	bl	8001fee <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.Cooler		,RELE_2_Pin	,RELE_2_GPIO_Port	,0	,0	,0);
 80026ee:	498a      	ldr	r1, [pc, #552]	; (8002918 <main+0x650>)
 80026f0:	2208      	movs	r2, #8
 80026f2:	4b8a      	ldr	r3, [pc, #552]	; (800291c <main+0x654>)
 80026f4:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
 80026f8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80026fc:	9400      	str	r4, [sp, #0]
 80026fe:	f7ff fc76 	bl	8001fee <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.LedLastro	,RELE_3_Pin	,RELE_3_GPIO_Port	,0	,0	,0);
 8002702:	4987      	ldr	r1, [pc, #540]	; (8002920 <main+0x658>)
 8002704:	2210      	movs	r2, #16
 8002706:	4b85      	ldr	r3, [pc, #532]	; (800291c <main+0x654>)
 8002708:	f1a1 008c 	sub.w	r0, r1, #140	; 0x8c
 800270c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002710:	9400      	str	r4, [sp, #0]
 8002712:	f7ff fc6c 	bl	8001fee <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.LedTeto		,RELE_4_Pin	,RELE_4_GPIO_Port	,0	,0	,0);
 8002716:	4983      	ldr	r1, [pc, #524]	; (8002924 <main+0x65c>)
 8002718:	2220      	movs	r2, #32
 800271a:	4b80      	ldr	r3, [pc, #512]	; (800291c <main+0x654>)
 800271c:	f1a1 0074 	sub.w	r0, r1, #116	; 0x74
 8002720:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002724:	9400      	str	r4, [sp, #0]
 8002726:	f7ff fc62 	bl	8001fee <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.LedVerde		,RELE_5_Pin	,RELE_5_GPIO_Port	,0	,0	,0);
 800272a:	497f      	ldr	r1, [pc, #508]	; (8002928 <main+0x660>)
 800272c:	2240      	movs	r2, #64	; 0x40
 800272e:	4b7b      	ldr	r3, [pc, #492]	; (800291c <main+0x654>)
 8002730:	f1a1 005c 	sub.w	r0, r1, #92	; 0x5c
 8002734:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002738:	9400      	str	r4, [sp, #0]
 800273a:	f7ff fc58 	bl	8001fee <OutputAddDigital>
	OutputAddPID(&PrimitiveStates.outPuts,&PrimitiveStates.Teto		,&htim3	,TIM_CHANNEL_4	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 800273e:	2503      	movs	r5, #3
 8002740:	f44f 7a16 	mov.w	sl, #600	; 0x258
 8002744:	2200      	movs	r2, #0
 8002746:	4979      	ldr	r1, [pc, #484]	; (800292c <main+0x664>)
 8002748:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8002930 <main+0x668>
 800274c:	4b79      	ldr	r3, [pc, #484]	; (8002934 <main+0x66c>)
 800274e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002752:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002756:	e9cd 2300 	strd	r2, r3, [sp]
 800275a:	e9cd 5a06 	strd	r5, sl, [sp, #24]
 800275e:	230c      	movs	r3, #12
 8002760:	4a69      	ldr	r2, [pc, #420]	; (8002908 <main+0x640>)
 8002762:	f1a1 00a8 	sub.w	r0, r1, #168	; 0xa8
 8002766:	f8cd b020 	str.w	fp, [sp, #32]
 800276a:	f7ff fc54 	bl	8002016 <OutputAddPID>
	OutputAddPID(&PrimitiveStates.outPuts,&PrimitiveStates.Lastro	,&htim3	,TIM_CHANNEL_3	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 800276e:	2200      	movs	r2, #0
 8002770:	4971      	ldr	r1, [pc, #452]	; (8002938 <main+0x670>)
 8002772:	4b70      	ldr	r3, [pc, #448]	; (8002934 <main+0x66c>)
 8002774:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002778:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800277c:	e9cd 2300 	strd	r2, r3, [sp]
 8002780:	9506      	str	r5, [sp, #24]
 8002782:	2308      	movs	r3, #8
 8002784:	4a60      	ldr	r2, [pc, #384]	; (8002908 <main+0x640>)
 8002786:	f1a1 00f0 	sub.w	r0, r1, #240	; 0xf0
 800278a:	e9cd ab07 	strd	sl, fp, [sp, #28]
 800278e:	f7ff fc42 	bl	8002016 <OutputAddPID>
  BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8002792:	2101      	movs	r1, #1
 8002794:	a80d      	add	r0, sp, #52	; 0x34
  osSemaphoreDef(BinSemUartTx);
 8002796:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 800279a:	f005 faff 	bl	8007d9c <osSemaphoreCreate>
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <main+0x674>)
  timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 80027a0:	4622      	mov	r2, r4
  BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 80027a2:	6018      	str	r0, [r3, #0]
  osTimerDef(timer10ms, CBTimer10ms);
 80027a4:	4b66      	ldr	r3, [pc, #408]	; (8002940 <main+0x678>)
  timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 80027a6:	2101      	movs	r1, #1
 80027a8:	a80f      	add	r0, sp, #60	; 0x3c
  osTimerDef(timer10ms, CBTimer10ms);
 80027aa:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
  timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 80027ae:	f005 fa67 	bl	8007c80 <osTimerCreate>
 80027b2:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8002944 <main+0x67c>
  osTimerDef(timer1000ms, CBTimer1000ms);
 80027b6:	4b64      	ldr	r3, [pc, #400]	; (8002948 <main+0x680>)
  timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 80027b8:	4622      	mov	r2, r4
 80027ba:	2101      	movs	r1, #1
  timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 80027bc:	f8c8 0000 	str.w	r0, [r8]
  timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 80027c0:	a811      	add	r0, sp, #68	; 0x44
  osTimerDef(timer1000ms, CBTimer1000ms);
 80027c2:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
  timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 80027c6:	f005 fa5b 	bl	8007c80 <osTimerCreate>
  osMessageQDef(FilaBleComando, 5, uint8_t);
 80027ca:	4d60      	ldr	r5, [pc, #384]	; (800294c <main+0x684>)
  timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 80027cc:	4f60      	ldr	r7, [pc, #384]	; (8002950 <main+0x688>)
  osMessageQDef(FilaBleComando, 5, uint8_t);
 80027ce:	ae13      	add	r6, sp, #76	; 0x4c
  timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 80027d0:	6038      	str	r0, [r7, #0]
  osMessageQDef(FilaBleComando, 5, uint8_t);
 80027d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027d6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  FilaBleComandoHandle = osMessageCreate(osMessageQ(FilaBleComando), NULL);
 80027da:	4621      	mov	r1, r4
 80027dc:	4630      	mov	r0, r6
 80027de:	f005 fb00 	bl	8007de2 <osMessageCreate>
 80027e2:	4b5c      	ldr	r3, [pc, #368]	; (8002954 <main+0x68c>)
  osMessageQStaticDef(FilaTXBluetooth, 16, uint32_t, FilaTXBluetoothBuffer, &FilaTXBluetoothControlBlock);
 80027e4:	ae17      	add	r6, sp, #92	; 0x5c
  FilaBleComandoHandle = osMessageCreate(osMessageQ(FilaBleComando), NULL);
 80027e6:	6018      	str	r0, [r3, #0]
  osMessageQStaticDef(FilaTXBluetooth, 16, uint32_t, FilaTXBluetoothBuffer, &FilaTXBluetoothControlBlock);
 80027e8:	f105 0310 	add.w	r3, r5, #16
 80027ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ee:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  FilaTXBluetoothHandle = osMessageCreate(osMessageQ(FilaTXBluetooth), NULL);
 80027f2:	4621      	mov	r1, r4
 80027f4:	4630      	mov	r0, r6
 80027f6:	f005 faf4 	bl	8007de2 <osMessageCreate>
 80027fa:	4b57      	ldr	r3, [pc, #348]	; (8002958 <main+0x690>)
  osMessageQStaticDef(FilaRXBluetooth, 10, uint8_t, FilaRXBluetoothBuffer, &FilaRXBluetoothControlBlock);
 80027fc:	ae1b      	add	r6, sp, #108	; 0x6c
  FilaTXBluetoothHandle = osMessageCreate(osMessageQ(FilaTXBluetooth), NULL);
 80027fe:	6018      	str	r0, [r3, #0]
  osMessageQStaticDef(FilaRXBluetooth, 10, uint8_t, FilaRXBluetoothBuffer, &FilaRXBluetoothControlBlock);
 8002800:	f105 0320 	add.w	r3, r5, #32
 8002804:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002806:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  FilaRXBluetoothHandle = osMessageCreate(osMessageQ(FilaRXBluetooth), NULL);
 800280a:	4621      	mov	r1, r4
 800280c:	4630      	mov	r0, r6
 800280e:	f005 fae8 	bl	8007de2 <osMessageCreate>
 8002812:	4b52      	ldr	r3, [pc, #328]	; (800295c <main+0x694>)
  osMessageQDef(FilaEeprom, 10, uint16_t);
 8002814:	ae1f      	add	r6, sp, #124	; 0x7c
  FilaRXBluetoothHandle = osMessageCreate(osMessageQ(FilaRXBluetooth), NULL);
 8002816:	6018      	str	r0, [r3, #0]
  osMessageQDef(FilaEeprom, 10, uint16_t);
 8002818:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800281c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800281e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8002822:	4621      	mov	r1, r4
 8002824:	4630      	mov	r0, r6
 8002826:	f005 fadc 	bl	8007de2 <osMessageCreate>
 800282a:	4b4d      	ldr	r3, [pc, #308]	; (8002960 <main+0x698>)
  osThreadStaticDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 1024, TaskBluetoothBuffer, &TaskBluetoothControlBlock);
 800282c:	f105 0c40 	add.w	ip, r5, #64	; 0x40
 8002830:	ae23      	add	r6, sp, #140	; 0x8c
  FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8002832:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 1024, TaskBluetoothBuffer, &TaskBluetoothControlBlock);
 8002834:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002838:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800283a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800283e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 8002842:	4621      	mov	r1, r4
 8002844:	a823      	add	r0, sp, #140	; 0x8c
 8002846:	f005 f9df 	bl	8007c08 <osThreadCreate>
 800284a:	4b46      	ldr	r3, [pc, #280]	; (8002964 <main+0x69c>)
  osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 800284c:	f105 0c5c 	add.w	ip, r5, #92	; 0x5c
 8002850:	ae2a      	add	r6, sp, #168	; 0xa8
  TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 8002852:	6018      	str	r0, [r3, #0]
  osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 8002854:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002858:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800285a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800285e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8002862:	4621      	mov	r1, r4
 8002864:	a82a      	add	r0, sp, #168	; 0xa8
 8002866:	f005 f9cf 	bl	8007c08 <osThreadCreate>
 800286a:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002968 <main+0x6a0>
  osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 800286e:	f105 0c78 	add.w	ip, r5, #120	; 0x78
 8002872:	ae31      	add	r6, sp, #196	; 0xc4
  TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8002874:	f8c9 0000 	str.w	r0, [r9]
  osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8002878:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800287c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800287e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002882:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8002886:	4621      	mov	r1, r4
 8002888:	a831      	add	r0, sp, #196	; 0xc4
 800288a:	f005 f9bd 	bl	8007c08 <osThreadCreate>
 800288e:	4b37      	ldr	r3, [pc, #220]	; (800296c <main+0x6a4>)
  osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8002890:	f105 0c94 	add.w	ip, r5, #148	; 0x94
 8002894:	ae38      	add	r6, sp, #224	; 0xe0
  TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8002896:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8002898:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800289c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800289e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80028a2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 80028a6:	4621      	mov	r1, r4
 80028a8:	a838      	add	r0, sp, #224	; 0xe0
 80028aa:	f005 f9ad 	bl	8007c08 <osThreadCreate>
 80028ae:	4b30      	ldr	r3, [pc, #192]	; (8002970 <main+0x6a8>)
  osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 80028b0:	ae3f      	add	r6, sp, #252	; 0xfc
 80028b2:	35b0      	adds	r5, #176	; 0xb0
  TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 80028b4:	6018      	str	r0, [r3, #0]
  osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 80028b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80028ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028be:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TaskEepromHandle = osThreadCreate(osThread(TaskEeprom), NULL);
 80028c2:	4621      	mov	r1, r4
 80028c4:	a83f      	add	r0, sp, #252	; 0xfc
 80028c6:	f005 f99f 	bl	8007c08 <osThreadCreate>
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <main+0x6ac>)
 80028cc:	6018      	str	r0, [r3, #0]
	osThreadSuspend(TaskTemperaturaHandle); //só é liberada após taskeeprom
 80028ce:	f8d9 0000 	ldr.w	r0, [r9]
 80028d2:	f005 fafa 	bl	8007eca <osThreadSuspend>
	osTimerStart(timer10msHandle,10);
 80028d6:	210a      	movs	r1, #10
 80028d8:	f8d8 0000 	ldr.w	r0, [r8]
 80028dc:	f005 f9e8 	bl	8007cb0 <osTimerStart>
	osTimerStart(timer1000msHandle,1000);
 80028e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028e4:	6838      	ldr	r0, [r7, #0]
 80028e6:	f005 f9e3 	bl	8007cb0 <osTimerStart>
  osKernelStart();
 80028ea:	f005 f988 	bl	8007bfe <osKernelStart>
	while (1)
 80028ee:	e7fe      	b.n	80028ee <main+0x626>
 80028f0:	33333333 	.word	0x33333333
 80028f4:	3fd33333 	.word	0x3fd33333
 80028f8:	47ae147b 	.word	0x47ae147b
 80028fc:	3f847ae1 	.word	0x3f847ae1
 8002900:	20002160 	.word	0x20002160
 8002904:	2000216c 	.word	0x2000216c
 8002908:	20002318 	.word	0x20002318
 800290c:	200008fc 	.word	0x200008fc
 8002910:	08002229 	.word	0x08002229
 8002914:	40010800 	.word	0x40010800
 8002918:	20000914 	.word	0x20000914
 800291c:	40010c00 	.word	0x40010c00
 8002920:	2000095c 	.word	0x2000095c
 8002924:	20000944 	.word	0x20000944
 8002928:	2000092c 	.word	0x2000092c
 800292c:	20000978 	.word	0x20000978
 8002930:	080021cd 	.word	0x080021cd
 8002934:	403e0000 	.word	0x403e0000
 8002938:	200009c0 	.word	0x200009c0
 800293c:	200007d0 	.word	0x200007d0
 8002940:	08002235 	.word	0x08002235
 8002944:	20002404 	.word	0x20002404
 8002948:	08002a85 	.word	0x08002a85
 800294c:	0800b284 	.word	0x0800b284
 8002950:	20002400 	.word	0x20002400
 8002954:	200007e4 	.word	0x200007e4
 8002958:	200008cc 	.word	0x200008cc
 800295c:	20000840 	.word	0x20000840
 8002960:	200007e8 	.word	0x200007e8
 8002964:	20001ab0 	.word	0x20001ab0
 8002968:	20001d5c 	.word	0x20001d5c
 800296c:	20001d54 	.word	0x20001d54
 8002970:	20002000 	.word	0x20002000
 8002974:	20001d58 	.word	0x20001d58

08002978 <desligaForno>:
	PrimitiveStates.SPTimerMinutos 	= 0;
 8002978:	2200      	movs	r2, #0
	PrimitiveStates.Lastro.setPoint	= 0;
 800297a:	2000      	movs	r0, #0
 800297c:	2100      	movs	r1, #0
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <desligaForno+0x20>)
 8002980:	e9c3 0148 	strd	r0, r1, [r3, #288]	; 0x120
	PrimitiveStates.Teto.setPoint 	= 0;
 8002984:	e9c3 0136 	strd	r0, r1, [r3, #216]	; 0xd8
	PrimitiveStates.SPTimerMinutos 	= 0;
 8002988:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
	PrimitiveStates.RTTimerMinutos 	= 0;
 800298c:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
	PrimitiveStates.stateTimer 		= TIMER_idle;
 8002990:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	200008d0 	.word	0x200008d0
 800299c:	00000000 	.word	0x00000000

080029a0 <leTempInterna>:
void leTempInterna(void){
 80029a0:	b508      	push	{r3, lr}
	tempInterna = ((V25_ - VSENSE*buffer_ADC[2])/Avg_slope)+25;
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <leTempInterna+0x58>)
 80029a4:	6898      	ldr	r0, [r3, #8]
 80029a6:	f7fd fd1d 	bl	80003e4 <__aeabi_ui2d>
 80029aa:	a30d      	add	r3, pc, #52	; (adr r3, 80029e0 <leTempInterna+0x40>)
 80029ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b0:	f7fd fd92 	bl	80004d8 <__aeabi_dmul>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	a10b      	add	r1, pc, #44	; (adr r1, 80029e8 <leTempInterna+0x48>)
 80029ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029be:	f7fd fbd3 	bl	8000168 <__aeabi_dsub>
 80029c2:	a30b      	add	r3, pc, #44	; (adr r3, 80029f0 <leTempInterna+0x50>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fd feb0 	bl	800072c <__aeabi_ddiv>
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <leTempInterna+0x5c>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	f7fd fbcc 	bl	800016c <__adddf3>
 80029d4:	f7fe f83a 	bl	8000a4c <__aeabi_d2f>
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <leTempInterna+0x60>)
 80029da:	6018      	str	r0, [r3, #0]
}
 80029dc:	bd08      	pop	{r3, pc}
 80029de:	bf00      	nop
 80029e0:	66666666 	.word	0x66666666
 80029e4:	3f4a6666 	.word	0x3f4a6666
 80029e8:	ae147ae1 	.word	0xae147ae1
 80029ec:	3ff6e147 	.word	0x3ff6e147
 80029f0:	75f6fd22 	.word	0x75f6fd22
 80029f4:	3f719ce0 	.word	0x3f719ce0
 80029f8:	20002160 	.word	0x20002160
 80029fc:	40390000 	.word	0x40390000
 8002a00:	200023fc 	.word	0x200023fc
 8002a04:	00000000 	.word	0x00000000

08002a08 <controleCooler>:
void controleCooler(void){
 8002a08:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
	if(PrimitiveStates.Lastro.realtime>200 || PrimitiveStates.Teto.realtime>200){
 8002a0c:	4c1a      	ldr	r4, [pc, #104]	; (8002a78 <controleCooler+0x70>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	e9d4 8946 	ldrd	r8, r9, [r4, #280]	; 0x118
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <controleCooler+0x74>)
 8002a16:	4640      	mov	r0, r8
 8002a18:	4649      	mov	r1, r9
 8002a1a:	f7fd ffed 	bl	80009f8 <__aeabi_dcmpgt>
 8002a1e:	b940      	cbnz	r0, 8002a32 <controleCooler+0x2a>
 8002a20:	e9d4 6734 	ldrd	r6, r7, [r4, #208]	; 0xd0
 8002a24:	2200      	movs	r2, #0
 8002a26:	4630      	mov	r0, r6
 8002a28:	4639      	mov	r1, r7
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <controleCooler+0x74>)
 8002a2c:	f7fd ffe4 	bl	80009f8 <__aeabi_dcmpgt>
 8002a30:	b120      	cbz	r0, 8002a3c <controleCooler+0x34>
}
 8002a32:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
		onDigital(&PrimitiveStates.Cooler);
 8002a36:	4812      	ldr	r0, [pc, #72]	; (8002a80 <controleCooler+0x78>)
 8002a38:	f7ff bb0b 	b.w	8002052 <onDigital>
	}else 	if(PrimitiveStates.Lastro.realtime<195 && PrimitiveStates.Teto.realtime<195){
 8002a3c:	4640      	mov	r0, r8
 8002a3e:	a30c      	add	r3, pc, #48	; (adr r3, 8002a70 <controleCooler+0x68>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	4649      	mov	r1, r9
 8002a46:	f7fd ffb9 	bl	80009bc <__aeabi_dcmplt>
 8002a4a:	b168      	cbz	r0, 8002a68 <controleCooler+0x60>
 8002a4c:	a308      	add	r3, pc, #32	; (adr r3, 8002a70 <controleCooler+0x68>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	4630      	mov	r0, r6
 8002a54:	4639      	mov	r1, r7
 8002a56:	f7fd ffb1 	bl	80009bc <__aeabi_dcmplt>
 8002a5a:	b128      	cbz	r0, 8002a68 <controleCooler+0x60>
		offDigital(&PrimitiveStates.Cooler);
 8002a5c:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
 8002a60:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
		offDigital(&PrimitiveStates.Cooler);
 8002a64:	f7ff baff 	b.w	8002066 <offDigital>
}
 8002a68:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8002a6c:	f3af 8000 	nop.w
 8002a70:	00000000 	.word	0x00000000
 8002a74:	40686000 	.word	0x40686000
 8002a78:	200008d0 	.word	0x200008d0
 8002a7c:	40690000 	.word	0x40690000
 8002a80:	20000914 	.word	0x20000914

08002a84 <CBTimer1000ms>:
{
 8002a84:	b510      	push	{r4, lr}
	contadorOutput(&PrimitiveStates.outPuts);
 8002a86:	4c0a      	ldr	r4, [pc, #40]	; (8002ab0 <CBTimer1000ms+0x2c>)
	bluetooth1000ms(&bluetooth);
 8002a88:	480a      	ldr	r0, [pc, #40]	; (8002ab4 <CBTimer1000ms+0x30>)
 8002a8a:	f7fe fe0a 	bl	80016a2 <bluetooth1000ms>
	taskTemperatura1sec();
 8002a8e:	f002 f805 	bl	8004a9c <taskTemperatura1sec>
	taskBluetooth1sec();
 8002a92:	f000 fe8b 	bl	80037ac <taskBluetooth1sec>
	controleCooler();
 8002a96:	f7ff ffb7 	bl	8002a08 <controleCooler>
	contadorOutput(&PrimitiveStates.outPuts);
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f7ff faed 	bl	800207a <contadorOutput>
	if(PrimitiveStates.Erro.byte != 0){
 8002aa0:	f894 313f 	ldrb.w	r3, [r4, #319]	; 0x13f
 8002aa4:	b11b      	cbz	r3, 8002aae <CBTimer1000ms+0x2a>
}
 8002aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		desligaForno();
 8002aaa:	f7ff bf65 	b.w	8002978 <desligaForno>
}
 8002aae:	bd10      	pop	{r4, pc}
 8002ab0:	200008d0 	.word	0x200008d0
 8002ab4:	20002004 	.word	0x20002004

08002ab8 <HAL_ADC_ConvCpltCallback>:
{
 8002ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(i<TAM){
 8002abc:	4e25      	ldr	r6, [pc, #148]	; (8002b54 <HAL_ADC_ConvCpltCallback+0x9c>)
	leTempInterna();
 8002abe:	f7ff ff6f 	bl	80029a0 <leTempInterna>
	if(i<TAM){
 8002ac2:	8834      	ldrh	r4, [r6, #0]
		somatorio1+=buffer_ADC[1]; // somatorio
 8002ac4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8002b58 <HAL_ADC_ConvCpltCallback+0xa0>
		somatorio2+=buffer_ADC[0]; // somatorio
 8002ac8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8002b5c <HAL_ADC_ConvCpltCallback+0xa4>
	if(i<TAM){
 8002acc:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
		somatorio1+=buffer_ADC[1]; // somatorio
 8002ad0:	f8d9 0000 	ldr.w	r0, [r9]
		somatorio2+=buffer_ADC[0]; // somatorio
 8002ad4:	f8d8 5000 	ldr.w	r5, [r8]
	if(i<TAM){
 8002ad8:	d20d      	bcs.n	8002af6 <HAL_ADC_ConvCpltCallback+0x3e>
		somatorio1+=buffer_ADC[1]; // somatorio
 8002ada:	4a21      	ldr	r2, [pc, #132]	; (8002b60 <HAL_ADC_ConvCpltCallback+0xa8>)
		i++;
 8002adc:	3401      	adds	r4, #1
		somatorio1+=buffer_ADC[1]; // somatorio
 8002ade:	6853      	ldr	r3, [r2, #4]
		i++;
 8002ae0:	b2a4      	uxth	r4, r4
		somatorio1+=buffer_ADC[1]; // somatorio
 8002ae2:	4403      	add	r3, r0
 8002ae4:	f8c9 3000 	str.w	r3, [r9]
		somatorio2+=buffer_ADC[0]; // somatorio
 8002ae8:	6813      	ldr	r3, [r2, #0]
 8002aea:	442b      	add	r3, r5
 8002aec:	f8c8 3000 	str.w	r3, [r8]
		i++;
 8002af0:	8034      	strh	r4, [r6, #0]
}
 8002af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		somatorio1 = somatorio1 / TAM; //calc media
 8002af6:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
 8002afa:	fb90 f0fa 	sdiv	r0, r0, sl
		Temp1 = somatorio1*16; //calc valor final
 8002afe:	0100      	lsls	r0, r0, #4
 8002b00:	f7fe f8ae 	bl	8000c60 <__aeabi_i2f>
		somatorio2 = somatorio2 / TAM; //calc media
 8002b04:	fb95 f5fa 	sdiv	r5, r5, sl
		somatorio1 = 0; 		//zera somatorio
 8002b08:	2400      	movs	r4, #0
		Temp1 = somatorio1*16; //calc valor final
 8002b0a:	4607      	mov	r7, r0
		Temp2 = somatorio2*16; 	//calc valor final
 8002b0c:	0128      	lsls	r0, r5, #4
		somatorio1 = 0; 		//zera somatorio
 8002b0e:	f8c9 4000 	str.w	r4, [r9]
		Temp2 = somatorio2*16; 	//calc valor final
 8002b12:	f7fe f8a5 	bl	8000c60 <__aeabi_i2f>
		Temp1 = Temp1/100;
 8002b16:	4913      	ldr	r1, [pc, #76]	; (8002b64 <HAL_ADC_ConvCpltCallback+0xac>)
		Temp2 = somatorio2*16; 	//calc valor final
 8002b18:	4605      	mov	r5, r0
		somatorio2 = 0; 		//zera somatorio
 8002b1a:	f8c8 4000 	str.w	r4, [r8]
		Temp1 = Temp1/100;
 8002b1e:	4638      	mov	r0, r7
 8002b20:	f7fe f9a6 	bl	8000e70 <__aeabi_fdiv>
		TempTeto=(double)Temp1;
 8002b24:	f7fd fc80 	bl	8000428 <__aeabi_f2d>
		PrimitiveStates.Teto.realtime = TempTeto-34;
 8002b28:	2200      	movs	r2, #0
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002b2c:	f7fd fb1c 	bl	8000168 <__aeabi_dsub>
 8002b30:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8002b6c <HAL_ADC_ConvCpltCallback+0xb4>
 8002b34:	e9c8 0134 	strd	r0, r1, [r8, #208]	; 0xd0
		Temp2 = Temp2/100;
 8002b38:	490a      	ldr	r1, [pc, #40]	; (8002b64 <HAL_ADC_ConvCpltCallback+0xac>)
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	f7fe f998 	bl	8000e70 <__aeabi_fdiv>
		TempLastro=(double)Temp2;
 8002b40:	f7fd fc72 	bl	8000428 <__aeabi_f2d>
		PrimitiveStates.Lastro.realtime = TempLastro-34;
 8002b44:	2200      	movs	r2, #0
 8002b46:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002b48:	f7fd fb0e 	bl	8000168 <__aeabi_dsub>
 8002b4c:	e9c8 0146 	strd	r0, r1, [r8, #280]	; 0x118
		i=0;
 8002b50:	e7ce      	b.n	8002af0 <HAL_ADC_ConvCpltCallback+0x38>
 8002b52:	bf00      	nop
 8002b54:	200023f0 	.word	0x200023f0
 8002b58:	200023f4 	.word	0x200023f4
 8002b5c:	200023f8 	.word	0x200023f8
 8002b60:	20002160 	.word	0x20002160
 8002b64:	42c80000 	.word	0x42c80000
 8002b68:	40410000 	.word	0x40410000
 8002b6c:	200008d0 	.word	0x200008d0

08002b70 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8002b70:	6802      	ldr	r2, [r0, #0]
 8002b72:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d101      	bne.n	8002b7c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002b78:	f002 b814 	b.w	8004ba4 <HAL_IncTick>
}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40012c00 	.word	0x40012c00

08002b84 <Error_Handler>:
 8002b84:	b672      	cpsid	i
	while (1)
 8002b86:	e7fe      	b.n	8002b86 <Error_Handler+0x2>

08002b88 <PID_Init>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002b88:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8002b8a:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
	uPID->OutputSum = *uPID->MyOutput;
 8002b8e:	e9d3 6700 	ldrd	r6, r7, [r3]
	uPID->LastInput = *uPID->MyInput;
	
	if (uPID->OutputSum > uPID->OutMax)
 8002b92:	e9d0 891a 	ldrd	r8, r9, [r0, #104]	; 0x68
	uPID->OutputSum = *uPID->MyOutput;
 8002b96:	e9c0 6714 	strd	r6, r7, [r0, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8002b9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8002b9c:	4604      	mov	r4, r0
	uPID->LastInput = *uPID->MyInput;
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (uPID->OutputSum > uPID->OutMax)
 8002ba2:	4639      	mov	r1, r7
	uPID->LastInput = *uPID->MyInput;
 8002ba4:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
	if (uPID->OutputSum > uPID->OutMax)
 8002ba8:	4642      	mov	r2, r8
 8002baa:	464b      	mov	r3, r9
 8002bac:	4630      	mov	r0, r6
 8002bae:	f7fd ff23 	bl	80009f8 <__aeabi_dcmpgt>
 8002bb2:	b110      	cbz	r0, 8002bba <PID_Init+0x32>
	{
		uPID->OutputSum = uPID->OutMax;
	}
	else if (uPID->OutputSum < uPID->OutMin)
	{
		uPID->OutputSum = uPID->OutMin;
 8002bb4:	e9c4 8914 	strd	r8, r9, [r4, #80]	; 0x50
	}
	else { }
	
}
 8002bb8:	e009      	b.n	8002bce <PID_Init+0x46>
	else if (uPID->OutputSum < uPID->OutMin)
 8002bba:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
 8002bbe:	4630      	mov	r0, r6
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	464b      	mov	r3, r9
 8002bc4:	4639      	mov	r1, r7
 8002bc6:	f7fd fef9 	bl	80009bc <__aeabi_dcmplt>
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d1f2      	bne.n	8002bb4 <PID_Init+0x2c>
}
 8002bce:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}

08002bd2 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002bd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002bd6:	7843      	ldrb	r3, [r0, #1]
{
 8002bd8:	4604      	mov	r4, r0
 8002bda:	b089      	sub	sp, #36	; 0x24
	if (!uPID->InAuto)
 8002bdc:	b91b      	cbnz	r3, 8002be6 <PID_Compute+0x14>
	{
		return _FALSE;
 8002bde:	2000      	movs	r0, #0
	else
	{
		return _FALSE;
	}
	
}
 8002be0:	b009      	add	sp, #36	; 0x24
 8002be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	now        = GetTime();
 8002be6:	f001 ffe9 	bl	8004bbc <HAL_GetTick>
	timeChange = (now - uPID->LastTime);
 8002bea:	6863      	ldr	r3, [r4, #4]
	if (timeChange >= uPID->SampleTime)
 8002bec:	68a2      	ldr	r2, [r4, #8]
	timeChange = (now - uPID->LastTime);
 8002bee:	1ac3      	subs	r3, r0, r3
	if (timeChange >= uPID->SampleTime)
 8002bf0:	429a      	cmp	r2, r3
	now        = GetTime();
 8002bf2:	4605      	mov	r5, r0
	if (timeChange >= uPID->SampleTime)
 8002bf4:	d8f3      	bhi.n	8002bde <PID_Compute+0xc>
		input   = *uPID->MyInput;
 8002bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
		error   = *uPID->MySetpoint - input;
 8002bf8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
		input   = *uPID->MyInput;
 8002bfa:	e9d3 ab00 	ldrd	sl, fp, [r3]
		error   = *uPID->MySetpoint - input;
 8002bfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c02:	4652      	mov	r2, sl
 8002c04:	465b      	mov	r3, fp
 8002c06:	f7fd faaf 	bl	8000168 <__aeabi_dsub>
		dInput  = (input - uPID->LastInput);
 8002c0a:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
		error   = *uPID->MySetpoint - input;
 8002c0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
		dInput  = (input - uPID->LastInput);
 8002c12:	4650      	mov	r0, sl
 8002c14:	4659      	mov	r1, fp
 8002c16:	f7fd faa7 	bl	8000168 <__aeabi_dsub>
		uPID->OutputSum     += (uPID->Ki * error);
 8002c1a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
		dInput  = (input - uPID->LastInput);
 8002c1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
		uPID->OutputSum     += (uPID->Ki * error);
 8002c22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002c26:	f7fd fc57 	bl	80004d8 <__aeabi_dmul>
 8002c2a:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 8002c2e:	f7fd fa9d 	bl	800016c <__adddf3>
 8002c32:	4606      	mov	r6, r0
 8002c34:	460f      	mov	r7, r1
		if (!uPID->POnE)
 8002c36:	7823      	ldrb	r3, [r4, #0]
		uPID->OutputSum     += (uPID->Ki * error);
 8002c38:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (!uPID->POnE)
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	b96b      	cbnz	r3, 8002c5c <PID_Compute+0x8a>
			uPID->OutputSum -= uPID->Kp * dInput;
 8002c40:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8002c44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c48:	f7fd fc46 	bl	80004d8 <__aeabi_dmul>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4630      	mov	r0, r6
 8002c52:	4639      	mov	r1, r7
 8002c54:	f7fd fa88 	bl	8000168 <__aeabi_dsub>
 8002c58:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
		if (uPID->OutputSum > uPID->OutMax)
 8002c5c:	e9d4 8914 	ldrd	r8, r9, [r4, #80]	; 0x50
 8002c60:	e9d4 671a 	ldrd	r6, r7, [r4, #104]	; 0x68
 8002c64:	4640      	mov	r0, r8
 8002c66:	4632      	mov	r2, r6
 8002c68:	463b      	mov	r3, r7
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	f7fd fec4 	bl	80009f8 <__aeabi_dcmpgt>
 8002c70:	2800      	cmp	r0, #0
 8002c72:	d038      	beq.n	8002ce6 <PID_Compute+0x114>
			uPID->OutputSum = uPID->OutMax;
 8002c74:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (uPID->POnE)
 8002c78:	9b01      	ldr	r3, [sp, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d042      	beq.n	8002d04 <PID_Compute+0x132>
			output = uPID->Kp * error;
 8002c7e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8002c82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002c86:	f7fd fc27 	bl	80004d8 <__aeabi_dmul>
 8002c8a:	4680      	mov	r8, r0
 8002c8c:	4689      	mov	r9, r1
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002c8e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8002c92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c96:	f7fd fc1f 	bl	80004d8 <__aeabi_dmul>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8002ca2:	f7fd fa61 	bl	8000168 <__aeabi_dsub>
 8002ca6:	4642      	mov	r2, r8
 8002ca8:	464b      	mov	r3, r9
 8002caa:	f7fd fa5f 	bl	800016c <__adddf3>
 8002cae:	4680      	mov	r8, r0
 8002cb0:	4689      	mov	r9, r1
		if (output > uPID->OutMax)
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	4639      	mov	r1, r7
 8002cba:	f7fd fe7f 	bl	80009bc <__aeabi_dcmplt>
 8002cbe:	b950      	cbnz	r0, 8002cd6 <PID_Compute+0x104>
		else if (output < uPID->OutMin)
 8002cc0:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 8002cc4:	4642      	mov	r2, r8
 8002cc6:	464b      	mov	r3, r9
 8002cc8:	4630      	mov	r0, r6
 8002cca:	4639      	mov	r1, r7
 8002ccc:	f7fd fe94 	bl	80009f8 <__aeabi_dcmpgt>
 8002cd0:	b908      	cbnz	r0, 8002cd6 <PID_Compute+0x104>
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002cd2:	4646      	mov	r6, r8
 8002cd4:	464f      	mov	r7, r9
		*uPID->MyOutput = output;
 8002cd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
		return _TRUE;
 8002cd8:	2001      	movs	r0, #1
		*uPID->MyOutput = output;
 8002cda:	e9c3 6700 	strd	r6, r7, [r3]
		uPID->LastInput = input;
 8002cde:	e9c4 ab16 	strd	sl, fp, [r4, #88]	; 0x58
		uPID->LastTime = now;
 8002ce2:	6065      	str	r5, [r4, #4]
		return _TRUE;
 8002ce4:	e77c      	b.n	8002be0 <PID_Compute+0xe>
		else if (uPID->OutputSum < uPID->OutMin)
 8002ce6:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 8002cea:	4640      	mov	r0, r8
 8002cec:	4649      	mov	r1, r9
 8002cee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002cf2:	f7fd fe63 	bl	80009bc <__aeabi_dcmplt>
 8002cf6:	2800      	cmp	r0, #0
 8002cf8:	d0be      	beq.n	8002c78 <PID_Compute+0xa6>
			uPID->OutputSum = uPID->OutMin;
 8002cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002cfe:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8002d02:	e7b9      	b.n	8002c78 <PID_Compute+0xa6>
			output = 0;
 8002d04:	f04f 0800 	mov.w	r8, #0
 8002d08:	f04f 0900 	mov.w	r9, #0
 8002d0c:	e7bf      	b.n	8002c8e <PID_Compute+0xbc>

08002d0e <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002d0e:	2901      	cmp	r1, #1
{
 8002d10:	b538      	push	{r3, r4, r5, lr}
 8002d12:	4604      	mov	r4, r0
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002d14:	bf0c      	ite	eq
 8002d16:	2501      	moveq	r5, #1
 8002d18:	2500      	movne	r5, #0
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002d1a:	d103      	bne.n	8002d24 <PID_SetMode+0x16>
 8002d1c:	7843      	ldrb	r3, [r0, #1]
 8002d1e:	b90b      	cbnz	r3, 8002d24 <PID_SetMode+0x16>
	{
		PID_Init(uPID);
 8002d20:	f7ff ff32 	bl	8002b88 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002d24:	7065      	strb	r5, [r4, #1]
	
}
 8002d26:	bd38      	pop	{r3, r4, r5, pc}

08002d28 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002d28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d2c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8002d30:	4614      	mov	r4, r2
 8002d32:	461d      	mov	r5, r3
 8002d34:	4682      	mov	sl, r0
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002d36:	4632      	mov	r2, r6
 8002d38:	463b      	mov	r3, r7
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	f7fd fe51 	bl	80009e4 <__aeabi_dcmpge>
 8002d42:	2800      	cmp	r0, #0
 8002d44:	d137      	bne.n	8002db6 <PID_SetOutputLimits+0x8e>
	
	uPID->OutMin = Min;
	uPID->OutMax = Max;
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002d46:	f89a 3001 	ldrb.w	r3, [sl, #1]
	uPID->OutMin = Min;
 8002d4a:	e9ca 4518 	strd	r4, r5, [sl, #96]	; 0x60
	uPID->OutMax = Max;
 8002d4e:	e9ca 671a 	strd	r6, r7, [sl, #104]	; 0x68
	if (uPID->InAuto)
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d02f      	beq.n	8002db6 <PID_SetOutputLimits+0x8e>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002d56:	f8da b044 	ldr.w	fp, [sl, #68]	; 0x44
 8002d5a:	4632      	mov	r2, r6
 8002d5c:	e9db 8900 	ldrd	r8, r9, [fp]
 8002d60:	463b      	mov	r3, r7
 8002d62:	4640      	mov	r0, r8
 8002d64:	4649      	mov	r1, r9
 8002d66:	f7fd fe47 	bl	80009f8 <__aeabi_dcmpgt>
 8002d6a:	b178      	cbz	r0, 8002d8c <PID_SetOutputLimits+0x64>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002d6c:	e9cb 6700 	strd	r6, r7, [fp]
			*uPID->MyOutput = uPID->OutMin;
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002d70:	e9da 6714 	ldrd	r6, r7, [sl, #80]	; 0x50
 8002d74:	e9da 451a 	ldrd	r4, r5, [sl, #104]	; 0x68
 8002d78:	4630      	mov	r0, r6
 8002d7a:	4622      	mov	r2, r4
 8002d7c:	462b      	mov	r3, r5
 8002d7e:	4639      	mov	r1, r7
 8002d80:	f7fd fe3a 	bl	80009f8 <__aeabi_dcmpgt>
 8002d84:	b168      	cbz	r0, 8002da2 <PID_SetOutputLimits+0x7a>
		{
			uPID->OutputSum = uPID->OutMax;
		}
		else if (uPID->OutputSum < uPID->OutMin)
		{
			uPID->OutputSum = uPID->OutMin;
 8002d86:	e9ca 4514 	strd	r4, r5, [sl, #80]	; 0x50
		}
		else { }
 8002d8a:	e014      	b.n	8002db6 <PID_SetOutputLimits+0x8e>
		else if (*uPID->MyOutput < uPID->OutMin)
 8002d8c:	4622      	mov	r2, r4
 8002d8e:	462b      	mov	r3, r5
 8002d90:	4640      	mov	r0, r8
 8002d92:	4649      	mov	r1, r9
 8002d94:	f7fd fe12 	bl	80009bc <__aeabi_dcmplt>
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	d0e9      	beq.n	8002d70 <PID_SetOutputLimits+0x48>
			*uPID->MyOutput = uPID->OutMin;
 8002d9c:	e9cb 4500 	strd	r4, r5, [fp]
 8002da0:	e7e6      	b.n	8002d70 <PID_SetOutputLimits+0x48>
		else if (uPID->OutputSum < uPID->OutMin)
 8002da2:	e9da 4518 	ldrd	r4, r5, [sl, #96]	; 0x60
 8002da6:	4630      	mov	r0, r6
 8002da8:	4622      	mov	r2, r4
 8002daa:	462b      	mov	r3, r5
 8002dac:	4639      	mov	r1, r7
 8002dae:	f7fd fe05 	bl	80009bc <__aeabi_dcmplt>
 8002db2:	2800      	cmp	r0, #0
 8002db4:	d1e7      	bne.n	8002d86 <PID_SetOutputLimits+0x5e>
		
	}
	
}
 8002db6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002dbc <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dc0:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	4682      	mov	sl, r0
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2300      	movs	r3, #0
 8002dce:	4620      	mov	r0, r4
 8002dd0:	4629      	mov	r1, r5
{
 8002dd2:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002dd6:	f7fd fdf1 	bl	80009bc <__aeabi_dcmplt>
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	d15a      	bne.n	8002e94 <PID_SetTunings2+0xd8>
 8002dde:	2200      	movs	r2, #0
 8002de0:	2300      	movs	r3, #0
 8002de2:	4640      	mov	r0, r8
 8002de4:	4649      	mov	r1, r9
 8002de6:	f7fd fde9 	bl	80009bc <__aeabi_dcmplt>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d152      	bne.n	8002e94 <PID_SetTunings2+0xd8>
 8002dee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002df2:	2200      	movs	r2, #0
 8002df4:	2300      	movs	r3, #0
 8002df6:	f7fd fde1 	bl	80009bc <__aeabi_dcmplt>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	d14a      	bne.n	8002e94 <PID_SetTunings2+0xd8>
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002dfe:	1e73      	subs	r3, r6, #1
	uPID->POn    = POn;
 8002e00:	f88a 6002 	strb.w	r6, [sl, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002e04:	425e      	negs	r6, r3
 8002e06:	415e      	adcs	r6, r3

	uPID->DispKp = Kp;
	uPID->DispKi = Ki;
 8002e08:	e9ca 8906 	strd	r8, r9, [sl, #24]
	uPID->DispKd = Kd;
 8002e0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002e10:	f88a 6000 	strb.w	r6, [sl]
	uPID->DispKd = Kd;
 8002e14:	e9ca 2308 	strd	r2, r3, [sl, #32]
	uPID->DispKp = Kp;
 8002e18:	e9ca 4504 	strd	r4, r5, [sl, #16]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002e1c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8002e20:	f7fd fae0 	bl	80003e4 <__aeabi_ui2d>
 8002e24:	2200      	movs	r2, #0
 8002e26:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <PID_SetTunings2+0xdc>)
 8002e28:	f7fd fc80 	bl	800072c <__aeabi_ddiv>
	
	uPID->Kp = Kp;
 8002e2c:	e9ca 450a 	strd	r4, r5, [sl, #40]	; 0x28
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002e30:	4606      	mov	r6, r0
 8002e32:	460f      	mov	r7, r1
	uPID->Ki = Ki * SampleTimeInSec;
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4640      	mov	r0, r8
 8002e3a:	4649      	mov	r1, r9
 8002e3c:	f7fd fb4c 	bl	80004d8 <__aeabi_dmul>
 8002e40:	4680      	mov	r8, r0
 8002e42:	4689      	mov	r9, r1
	uPID->Kd = Kd / SampleTimeInSec;
 8002e44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002e48:	463b      	mov	r3, r7
 8002e4a:	4632      	mov	r2, r6
	uPID->Ki = Ki * SampleTimeInSec;
 8002e4c:	e9ca 890c 	strd	r8, r9, [sl, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002e50:	f7fd fc6c 	bl	800072c <__aeabi_ddiv>
 8002e54:	4606      	mov	r6, r0
 8002e56:	460f      	mov	r7, r1
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002e58:	f89a 3003 	ldrb.w	r3, [sl, #3]
	uPID->Kd = Kd / SampleTimeInSec;
 8002e5c:	e9ca 670e 	strd	r6, r7, [sl, #56]	; 0x38
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d117      	bne.n	8002e94 <PID_SetTunings2+0xd8>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002e64:	4622      	mov	r2, r4
 8002e66:	462b      	mov	r3, r5
 8002e68:	2000      	movs	r0, #0
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	f7fd f97c 	bl	8000168 <__aeabi_dsub>
		uPID->Ki = (0 - uPID->Ki);
 8002e70:	4642      	mov	r2, r8
		uPID->Kp = (0 - uPID->Kp);
 8002e72:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002e76:	464b      	mov	r3, r9
 8002e78:	2000      	movs	r0, #0
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	f7fd f974 	bl	8000168 <__aeabi_dsub>
		uPID->Kd = (0 - uPID->Kd);
 8002e80:	4632      	mov	r2, r6
		uPID->Ki = (0 - uPID->Ki);
 8002e82:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002e86:	463b      	mov	r3, r7
 8002e88:	2000      	movs	r0, #0
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	f7fd f96c 	bl	8000168 <__aeabi_dsub>
 8002e90:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
		
	}
	
}
 8002e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e98:	408f4000 	.word	0x408f4000

08002e9c <PID_SetTunings>:
{
 8002e9c:	b530      	push	{r4, r5, lr}
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8002e9e:	7881      	ldrb	r1, [r0, #2]
{
 8002ea0:	b087      	sub	sp, #28
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8002ea2:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8002ea6:	9104      	str	r1, [sp, #16]
 8002ea8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002eac:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 8002eb0:	e9cd 4500 	strd	r4, r5, [sp]
 8002eb4:	f7ff ff82 	bl	8002dbc <PID_SetTunings2>
}
 8002eb8:	b007      	add	sp, #28
 8002eba:	bd30      	pop	{r4, r5, pc}

08002ebc <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002ebc:	b538      	push	{r3, r4, r5, lr}
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002ebe:	7843      	ldrb	r3, [r0, #1]
{
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	460d      	mov	r5, r1
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002ec4:	b1d3      	cbz	r3, 8002efc <PID_SetControllerDirection+0x40>
 8002ec6:	78c3      	ldrb	r3, [r0, #3]
 8002ec8:	428b      	cmp	r3, r1
 8002eca:	d017      	beq.n	8002efc <PID_SetControllerDirection+0x40>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002ecc:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7fd f948 	bl	8000168 <__aeabi_dsub>
		uPID->Ki = (0 - uPID->Ki);
 8002ed8:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
		uPID->Kp = (0 - uPID->Kp);
 8002edc:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	f7fd f940 	bl	8000168 <__aeabi_dsub>
		uPID->Kd = (0 - uPID->Kd);
 8002ee8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
		uPID->Ki = (0 - uPID->Ki);
 8002eec:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	f7fd f938 	bl	8000168 <__aeabi_dsub>
 8002ef8:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8002efc:	70e5      	strb	r5, [r4, #3]
	
}
 8002efe:	bd38      	pop	{r3, r4, r5, pc}

08002f00 <PID>:
{
 8002f00:	b510      	push	{r4, lr}
	uPID->MySetpoint = Setpoint;
 8002f02:	6483      	str	r3, [r0, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002f04:	2300      	movs	r3, #0
	uPID->MyInput    = Input;
 8002f06:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002f0a:	7043      	strb	r3, [r0, #1]
	uPID->OutMin = Min;
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60
	uPID->OutMax = Max;
 8002f14:	a312      	add	r3, pc, #72	; (adr r3, 8002f60 <PID+0x60>)
 8002f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1a:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002f1e:	2364      	movs	r3, #100	; 0x64
{
 8002f20:	4604      	mov	r4, r0
 8002f22:	b086      	sub	sp, #24
	PID_SetControllerDirection(uPID, ControllerDirection);
 8002f24:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002f28:	6083      	str	r3, [r0, #8]
	PID_SetControllerDirection(uPID, ControllerDirection);
 8002f2a:	f7ff ffc7 	bl	8002ebc <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8002f2e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002f32:	4620      	mov	r0, r4
 8002f34:	9304      	str	r3, [sp, #16]
 8002f36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002f3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f3e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f42:	e9cd 2300 	strd	r2, r3, [sp]
 8002f46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002f4a:	f7ff ff37 	bl	8002dbc <PID_SetTunings2>
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002f4e:	f001 fe35 	bl	8004bbc <HAL_GetTick>
 8002f52:	68a3      	ldr	r3, [r4, #8]
 8002f54:	1ac0      	subs	r0, r0, r3
 8002f56:	6060      	str	r0, [r4, #4]
}
 8002f58:	b006      	add	sp, #24
 8002f5a:	bd10      	pop	{r4, pc}
 8002f5c:	f3af 8000 	nop.w
 8002f60:	00000000 	.word	0x00000000
 8002f64:	406fe000 	.word	0x406fe000

08002f68 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002f6a:	1e0d      	subs	r5, r1, #0
{
 8002f6c:	4604      	mov	r4, r0
	if (NewSampleTime > 0)
 8002f6e:	dd20      	ble.n	8002fb2 <PID_SetSampleTime+0x4a>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002f70:	4628      	mov	r0, r5
 8002f72:	f7fd fa47 	bl	8000404 <__aeabi_i2d>
 8002f76:	4606      	mov	r6, r0
 8002f78:	68a0      	ldr	r0, [r4, #8]
 8002f7a:	460f      	mov	r7, r1
 8002f7c:	f7fd fa32 	bl	80003e4 <__aeabi_ui2d>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4630      	mov	r0, r6
 8002f86:	4639      	mov	r1, r7
 8002f88:	f7fd fbd0 	bl	800072c <__aeabi_ddiv>
		
		uPID->Ki *= ratio;
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002f90:	4606      	mov	r6, r0
 8002f92:	460f      	mov	r7, r1
		uPID->Ki *= ratio;
 8002f94:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8002f98:	f7fd fa9e 	bl	80004d8 <__aeabi_dmul>
		uPID->Kd /= ratio;
 8002f9c:	4632      	mov	r2, r6
		uPID->Ki *= ratio;
 8002f9e:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd /= ratio;
 8002fa2:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8002fa6:	463b      	mov	r3, r7
 8002fa8:	f7fd fbc0 	bl	800072c <__aeabi_ddiv>
 8002fac:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8002fb0:	60a5      	str	r5, [r4, #8]
		
	}
	
}
 8002fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002fb4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_MspInit+0x48>)
{
 8002fb6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fb8:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fba:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	619a      	str	r2, [r3, #24]
 8002fc2:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fc4:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fc8:	f002 0201 	and.w	r2, r2, #1
 8002fcc:	9200      	str	r2, [sp, #0]
 8002fce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd0:	69da      	ldr	r2, [r3, #28]
 8002fd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fd6:	61da      	str	r2, [r3, #28]
 8002fd8:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fda:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fe4:	f002 f83c 	bl	8005060 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fe8:	4a05      	ldr	r2, [pc, #20]	; (8003000 <HAL_MspInit+0x4c>)
 8002fea:	6853      	ldr	r3, [r2, #4]
 8002fec:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ff0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ff4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ff6:	b003      	add	sp, #12
 8002ff8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40010000 	.word	0x40010000

08003004 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003004:	b530      	push	{r4, r5, lr}
 8003006:	4605      	mov	r5, r0
 8003008:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300a:	2210      	movs	r2, #16
 800300c:	2100      	movs	r1, #0
 800300e:	a802      	add	r0, sp, #8
 8003010:	f007 fa1a 	bl	800a448 <memset>
  if(hadc->Instance==ADC1)
 8003014:	682a      	ldr	r2, [r5, #0]
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_ADC_MspInit+0x84>)
 8003018:	429a      	cmp	r2, r3
 800301a:	d133      	bne.n	8003084 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800301c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003020:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003022:	481a      	ldr	r0, [pc, #104]	; (800308c <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003028:	619a      	str	r2, [r3, #24]
 800302a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800302e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003032:	9200      	str	r2, [sp, #0]
 8003034:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003036:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003038:	4c15      	ldr	r4, [pc, #84]	; (8003090 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303a:	f042 0204 	orr.w	r2, r2, #4
 800303e:	619a      	str	r2, [r3, #24]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800304a:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800304c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003050:	f002 f9ec 	bl	800542c <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003054:	2300      	movs	r3, #0
 8003056:	4a0f      	ldr	r2, [pc, #60]	; (8003094 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003058:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800305a:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800305e:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003062:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003066:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800306a:	2220      	movs	r2, #32
 800306c:	e9c4 0205 	strd	r0, r2, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003070:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003072:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003074:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003076:	f002 f843 	bl	8005100 <HAL_DMA_Init>
 800307a:	b108      	cbz	r0, 8003080 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 800307c:	f7ff fd82 	bl	8002b84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003080:	622c      	str	r4, [r5, #32]
 8003082:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003084:	b007      	add	sp, #28
 8003086:	bd30      	pop	{r4, r5, pc}
 8003088:	40012400 	.word	0x40012400
 800308c:	40010800 	.word	0x40010800
 8003090:	2000219c 	.word	0x2000219c
 8003094:	40020008 	.word	0x40020008

08003098 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003098:	b510      	push	{r4, lr}
 800309a:	4604      	mov	r4, r0
 800309c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309e:	2210      	movs	r2, #16
 80030a0:	2100      	movs	r1, #0
 80030a2:	a802      	add	r0, sp, #8
 80030a4:	f007 f9d0 	bl	800a448 <memset>
  if(hi2c->Instance==I2C1)
 80030a8:	6822      	ldr	r2, [r4, #0]
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <HAL_I2C_MspInit+0x68>)
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d124      	bne.n	80030fa <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b0:	4c14      	ldr	r4, [pc, #80]	; (8003104 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030b2:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b8:	4813      	ldr	r0, [pc, #76]	; (8003108 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ba:	f043 0308 	orr.w	r3, r3, #8
 80030be:	61a3      	str	r3, [r4, #24]
 80030c0:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030cc:	2312      	movs	r3, #18
 80030ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030d2:	2303      	movs	r3, #3
 80030d4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d6:	f002 f9a9 	bl	800542c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80030da:	4a0c      	ldr	r2, [pc, #48]	; (800310c <HAL_I2C_MspInit+0x74>)
 80030dc:	6853      	ldr	r3, [r2, #4]
 80030de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80030e2:	f043 0302 	orr.w	r3, r3, #2
 80030e6:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030e8:	69e3      	ldr	r3, [r4, #28]
 80030ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030ee:	61e3      	str	r3, [r4, #28]
 80030f0:	69e3      	ldr	r3, [r4, #28]
 80030f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030fa:	b006      	add	sp, #24
 80030fc:	bd10      	pop	{r4, pc}
 80030fe:	bf00      	nop
 8003100:	40005400 	.word	0x40005400
 8003104:	40021000 	.word	0x40021000
 8003108:	40010c00 	.word	0x40010c00
 800310c:	40010000 	.word	0x40010000

08003110 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003110:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 8003112:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RTC_MspInit+0x30>)
 8003114:	6802      	ldr	r2, [r0, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d10f      	bne.n	800313a <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800311a:	f002 fffd 	bl	8006118 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RTC_MspInit+0x34>)
 8003120:	69da      	ldr	r2, [r3, #28]
 8003122:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003126:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003128:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003130:	9301      	str	r3, [sp, #4]
 8003132:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8003134:	4b04      	ldr	r3, [pc, #16]	; (8003148 <HAL_RTC_MspInit+0x38>)
 8003136:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800313a:	b003      	add	sp, #12
 800313c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003140:	40002800 	.word	0x40002800
 8003144:	40021000 	.word	0x40021000
 8003148:	42420000 	.word	0x42420000

0800314c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800314c:	6803      	ldr	r3, [r0, #0]
{
 800314e:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8003150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003154:	d10d      	bne.n	8003172 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003156:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	f042 0201 	orr.w	r2, r2, #1
 8003160:	61da      	str	r2, [r3, #28]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800316c:	b003      	add	sp, #12
 800316e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 8003172:	4a0c      	ldr	r2, [pc, #48]	; (80031a4 <HAL_TIM_Base_MspInit+0x58>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d1f9      	bne.n	800316c <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_TIM_Base_MspInit+0x5c>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800317a:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 800317c:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800317e:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003180:	f042 0202 	orr.w	r2, r2, #2
 8003184:	61da      	str	r2, [r3, #28]
 8003186:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003188:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003192:	f001 ff65 	bl	8005060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003196:	201d      	movs	r0, #29
}
 8003198:	b003      	add	sp, #12
 800319a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800319e:	f001 bf8f 	b.w	80050c0 <HAL_NVIC_EnableIRQ>
 80031a2:	bf00      	nop
 80031a4:	40000400 	.word	0x40000400
 80031a8:	40021000 	.word	0x40021000

080031ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	2210      	movs	r2, #16
{
 80031ae:	b510      	push	{r4, lr}
 80031b0:	4604      	mov	r4, r0
 80031b2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b4:	2100      	movs	r1, #0
 80031b6:	eb0d 0002 	add.w	r0, sp, r2
 80031ba:	f007 f945 	bl	800a448 <memset>
  if(htim->Instance==TIM2)
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c4:	d115      	bne.n	80031f2 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80031ca:	699a      	ldr	r2, [r3, #24]
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031cc:	481c      	ldr	r0, [pc, #112]	; (8003240 <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ce:	f042 0204 	orr.w	r2, r2, #4
 80031d2:	619a      	str	r2, [r3, #24]
 80031d4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2208      	movs	r2, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e0:	2302      	movs	r3, #2
 80031e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e8:	a904      	add	r1, sp, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ea:	f002 f91f 	bl	800542c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031ee:	b008      	add	sp, #32
 80031f0:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM3)
 80031f2:	4a14      	ldr	r2, [pc, #80]	; (8003244 <HAL_TIM_MspPostInit+0x98>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d1fa      	bne.n	80031ee <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f8:	4b13      	ldr	r3, [pc, #76]	; (8003248 <HAL_TIM_MspPostInit+0x9c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fe:	4810      	ldr	r0, [pc, #64]	; (8003240 <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003200:	f042 0204 	orr.w	r2, r2, #4
 8003204:	619a      	str	r2, [r3, #24]
 8003206:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003208:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320a:	f002 0204 	and.w	r2, r2, #4
 800320e:	9202      	str	r2, [sp, #8]
 8003210:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003212:	699a      	ldr	r2, [r3, #24]
 8003214:	f042 0208 	orr.w	r2, r2, #8
 8003218:	619a      	str	r2, [r3, #24]
 800321a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321c:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	9303      	str	r3, [sp, #12]
 8003224:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	23c0      	movs	r3, #192	; 0xc0
 8003228:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322c:	f002 f8fe 	bl	800542c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003230:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003232:	4806      	ldr	r0, [pc, #24]	; (800324c <HAL_TIM_MspPostInit+0xa0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323a:	a904      	add	r1, sp, #16
 800323c:	e7d5      	b.n	80031ea <HAL_TIM_MspPostInit+0x3e>
 800323e:	bf00      	nop
 8003240:	40010800 	.word	0x40010800
 8003244:	40000400 	.word	0x40000400
 8003248:	40021000 	.word	0x40021000
 800324c:	40010c00 	.word	0x40010c00

08003250 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	2210      	movs	r2, #16
{
 8003252:	b570      	push	{r4, r5, r6, lr}
 8003254:	4606      	mov	r6, r0
 8003256:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	eb0d 0002 	add.w	r0, sp, r2
 800325c:	2100      	movs	r1, #0
 800325e:	f007 f8f3 	bl	800a448 <memset>
  if(huart->Instance==USART1)
 8003262:	6833      	ldr	r3, [r6, #0]
 8003264:	4a43      	ldr	r2, [pc, #268]	; (8003374 <HAL_UART_MspInit+0x124>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d144      	bne.n	80032f4 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800326a:	4b43      	ldr	r3, [pc, #268]	; (8003378 <HAL_UART_MspInit+0x128>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326c:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8003270:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003272:	4842      	ldr	r0, [pc, #264]	; (800337c <HAL_UART_MspInit+0x12c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003274:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003278:	619a      	str	r2, [r3, #24]
 800327a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800327c:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 800327e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003282:	9200      	str	r2, [sp, #0]
 8003284:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003286:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003288:	4c3d      	ldr	r4, [pc, #244]	; (8003380 <HAL_UART_MspInit+0x130>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328a:	f042 0204 	orr.w	r2, r2, #4
 800328e:	619a      	str	r2, [r3, #24]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032a0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a6:	f002 f8c1 	bl	800542c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ae:	4833      	ldr	r0, [pc, #204]	; (800337c <HAL_UART_MspInit+0x12c>)
 80032b0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032b2:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b8:	f002 f8b8 	bl	800542c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80032bc:	4b31      	ldr	r3, [pc, #196]	; (8003384 <HAL_UART_MspInit+0x134>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80032be:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032c0:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032c4:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80032c6:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032ca:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ce:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032d0:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80032d2:	f001 ff15 	bl	8005100 <HAL_DMA_Init>
 80032d6:	b108      	cbz	r0, 80032dc <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 80032d8:	f7ff fc54 	bl	8002b84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80032dc:	2025      	movs	r0, #37	; 0x25
 80032de:	2200      	movs	r2, #0
 80032e0:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80032e2:	63f4      	str	r4, [r6, #60]	; 0x3c
 80032e4:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80032e6:	f001 febb 	bl	8005060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032ea:	2025      	movs	r0, #37	; 0x25
 80032ec:	f001 fee8 	bl	80050c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80032f0:	b008      	add	sp, #32
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART3)
 80032f4:	4a24      	ldr	r2, [pc, #144]	; (8003388 <HAL_UART_MspInit+0x138>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d1fa      	bne.n	80032f0 <HAL_UART_MspInit+0xa0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032fa:	4b1f      	ldr	r3, [pc, #124]	; (8003378 <HAL_UART_MspInit+0x128>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fc:	4823      	ldr	r0, [pc, #140]	; (800338c <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80032fe:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003300:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8003302:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003306:	61da      	str	r2, [r3, #28]
 8003308:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800330a:	2500      	movs	r5, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 800330c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003310:	9202      	str	r2, [sp, #8]
 8003312:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003314:	699a      	ldr	r2, [r3, #24]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003316:	4c1e      	ldr	r4, [pc, #120]	; (8003390 <HAL_UART_MspInit+0x140>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003318:	f042 0208 	orr.w	r2, r2, #8
 800331c:	619a      	str	r2, [r3, #24]
 800331e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003320:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	9303      	str	r3, [sp, #12]
 800332a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003332:	2303      	movs	r3, #3
 8003334:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003336:	f002 f879 	bl	800542c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800333a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333e:	4813      	ldr	r0, [pc, #76]	; (800338c <HAL_UART_MspInit+0x13c>)
 8003340:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003342:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003348:	f002 f870 	bl	800542c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_UART_MspInit+0x144>)
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800334e:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003350:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003354:	2380      	movs	r3, #128	; 0x80
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003356:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800335a:	2320      	movs	r3, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800335c:	60a5      	str	r5, [r4, #8]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800335e:	e9c4 3506 	strd	r3, r5, [r4, #24]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003362:	6165      	str	r5, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003364:	f001 fecc 	bl	8005100 <HAL_DMA_Init>
 8003368:	b108      	cbz	r0, 800336e <HAL_UART_MspInit+0x11e>
      Error_Handler();
 800336a:	f7ff fc0b 	bl	8002b84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800336e:	63f4      	str	r4, [r6, #60]	; 0x3c
 8003370:	6266      	str	r6, [r4, #36]	; 0x24
}
 8003372:	e7bd      	b.n	80032f0 <HAL_UART_MspInit+0xa0>
 8003374:	40013800 	.word	0x40013800
 8003378:	40021000 	.word	0x40021000
 800337c:	40010800 	.word	0x40010800
 8003380:	200021e0 	.word	0x200021e0
 8003384:	40020058 	.word	0x40020058
 8003388:	40004800 	.word	0x40004800
 800338c:	40010c00 	.word	0x40010c00
 8003390:	20002224 	.word	0x20002224
 8003394:	40020030 	.word	0x40020030

08003398 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART1)
 8003398:	6803      	ldr	r3, [r0, #0]
 800339a:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <HAL_UART_MspDeInit+0x5c>)
{
 800339c:	b510      	push	{r4, lr}
  if(huart->Instance==USART1)
 800339e:	4293      	cmp	r3, r2
{
 80033a0:	4604      	mov	r4, r0
  if(huart->Instance==USART1)
 80033a2:	d112      	bne.n	80033ca <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80033a4:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80033a8:	6993      	ldr	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80033aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 80033ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80033b2:	4811      	ldr	r0, [pc, #68]	; (80033f8 <HAL_UART_MspDeInit+0x60>)
    __HAL_RCC_USART1_CLK_DISABLE();
 80033b4:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80033b6:	f002 f913 	bl	80055e0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80033ba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80033bc:	f001 fed2 	bl	8005164 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80033c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80033c4:	2025      	movs	r0, #37	; 0x25
 80033c6:	f001 be89 	b.w	80050dc <HAL_NVIC_DisableIRQ>
  else if(huart->Instance==USART3)
 80033ca:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <HAL_UART_MspDeInit+0x64>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d10f      	bne.n	80033f0 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART3_CLK_DISABLE();
 80033d0:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80033d4:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80033d6:	480a      	ldr	r0, [pc, #40]	; (8003400 <HAL_UART_MspDeInit+0x68>)
    __HAL_RCC_USART3_CLK_DISABLE();
 80033d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80033dc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    __HAL_RCC_USART3_CLK_DISABLE();
 80033e0:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80033e2:	f002 f8fd 	bl	80055e0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80033e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 80033e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(huart->hdmarx);
 80033ec:	f001 beba 	b.w	8005164 <HAL_DMA_DeInit>
}
 80033f0:	bd10      	pop	{r4, pc}
 80033f2:	bf00      	nop
 80033f4:	40013800 	.word	0x40013800
 80033f8:	40010800 	.word	0x40010800
 80033fc:	40004800 	.word	0x40004800
 8003400:	40010c00 	.word	0x40010c00

08003404 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003404:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <HAL_InitTick+0x7c>)
{
 8003406:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003408:	699a      	ldr	r2, [r3, #24]
{
 800340a:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 800340c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003410:	619a      	str	r2, [r3, #24]
 8003412:	699b      	ldr	r3, [r3, #24]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003414:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800341a:	9302      	str	r3, [sp, #8]
{
 800341c:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800341e:	a803      	add	r0, sp, #12

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003420:	4d18      	ldr	r5, [pc, #96]	; (8003484 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003422:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003424:	f003 f8fc 	bl	8006620 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003428:	f003 f8ea 	bl	8006600 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800342c:	4b16      	ldr	r3, [pc, #88]	; (8003488 <HAL_InitTick+0x84>)
 800342e:	602b      	str	r3, [r5, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003430:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003434:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_InitTick+0x88>)
 8003438:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800343c:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800343e:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8003440:	6068      	str	r0, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8003442:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 8003444:	612b      	str	r3, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003446:	60ab      	str	r3, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003448:	61ab      	str	r3, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 800344a:	f003 fd11 	bl	8006e70 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800344e:	4604      	mov	r4, r0
 8003450:	b980      	cbnz	r0, 8003474 <HAL_InitTick+0x70>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003452:	4628      	mov	r0, r5
 8003454:	f003 fc02 	bl	8006c5c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8003458:	4604      	mov	r4, r0
 800345a:	b958      	cbnz	r0, 8003474 <HAL_InitTick+0x70>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800345c:	2019      	movs	r0, #25
 800345e:	f001 fe2f 	bl	80050c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003462:	2e0f      	cmp	r6, #15
 8003464:	d809      	bhi.n	800347a <HAL_InitTick+0x76>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8003466:	4622      	mov	r2, r4
 8003468:	4631      	mov	r1, r6
 800346a:	2019      	movs	r0, #25
 800346c:	f001 fdf8 	bl	8005060 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003470:	4b07      	ldr	r3, [pc, #28]	; (8003490 <HAL_InitTick+0x8c>)
 8003472:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8003474:	4620      	mov	r0, r4
 8003476:	b008      	add	sp, #32
 8003478:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 800347a:	2401      	movs	r4, #1
 800347c:	e7fa      	b.n	8003474 <HAL_InitTick+0x70>
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	20002408 	.word	0x20002408
 8003488:	40012c00 	.word	0x40012c00
 800348c:	000f4240 	.word	0x000f4240
 8003490:	20000008 	.word	0x20000008

08003494 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003494:	e7fe      	b.n	8003494 <NMI_Handler>

08003496 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003496:	e7fe      	b.n	8003496 <HardFault_Handler>

08003498 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003498:	e7fe      	b.n	8003498 <MemManage_Handler>

0800349a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800349a:	e7fe      	b.n	800349a <BusFault_Handler>

0800349c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800349c:	e7fe      	b.n	800349c <UsageFault_Handler>

0800349e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800349e:	4770      	bx	lr

080034a0 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034a0:	4801      	ldr	r0, [pc, #4]	; (80034a8 <DMA1_Channel1_IRQHandler+0x8>)
 80034a2:	f001 bf2f 	b.w	8005304 <HAL_DMA_IRQHandler>
 80034a6:	bf00      	nop
 80034a8:	2000219c 	.word	0x2000219c

080034ac <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80034ac:	4801      	ldr	r0, [pc, #4]	; (80034b4 <DMA1_Channel3_IRQHandler+0x8>)
 80034ae:	f001 bf29 	b.w	8005304 <HAL_DMA_IRQHandler>
 80034b2:	bf00      	nop
 80034b4:	20002224 	.word	0x20002224

080034b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80034b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80034ba:	4804      	ldr	r0, [pc, #16]	; (80034cc <DMA1_Channel5_IRQHandler+0x14>)
 80034bc:	f001 ff22 	bl	8005304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  BLEDMA_IrqHandler(&bluetooth);
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80034c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BLEDMA_IrqHandler(&bluetooth);
 80034c4:	4802      	ldr	r0, [pc, #8]	; (80034d0 <DMA1_Channel5_IRQHandler+0x18>)
 80034c6:	f7fe b955 	b.w	8001774 <BLEDMA_IrqHandler>
 80034ca:	bf00      	nop
 80034cc:	200021e0 	.word	0x200021e0
 80034d0:	20002004 	.word	0x20002004

080034d4 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034d4:	4801      	ldr	r0, [pc, #4]	; (80034dc <TIM1_UP_IRQHandler+0x8>)
 80034d6:	f003 bbf0 	b.w	8006cba <HAL_TIM_IRQHandler>
 80034da:	bf00      	nop
 80034dc:	20002408 	.word	0x20002408

080034e0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034e0:	4801      	ldr	r0, [pc, #4]	; (80034e8 <TIM3_IRQHandler+0x8>)
 80034e2:	f003 bbea 	b.w	8006cba <HAL_TIM_IRQHandler>
 80034e6:	bf00      	nop
 80034e8:	20002318 	.word	0x20002318

080034ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034ee:	4804      	ldr	r0, [pc, #16]	; (8003500 <USART1_IRQHandler+0x14>)
 80034f0:	f004 f9de 	bl	80078b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  BLEUSART_IrqHandler(&bluetooth);
  /* USER CODE END USART1_IRQn 1 */
}
 80034f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BLEUSART_IrqHandler(&bluetooth);
 80034f8:	4802      	ldr	r0, [pc, #8]	; (8003504 <USART1_IRQHandler+0x18>)
 80034fa:	f7fe b9f1 	b.w	80018e0 <BLEUSART_IrqHandler>
 80034fe:	bf00      	nop
 8003500:	20002360 	.word	0x20002360
 8003504:	20002004 	.word	0x20002004

08003508 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	460d      	mov	r5, r1
 800350c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350e:	460e      	mov	r6, r1
 8003510:	1b73      	subs	r3, r6, r5
 8003512:	429c      	cmp	r4, r3
 8003514:	dc01      	bgt.n	800351a <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8003516:	4620      	mov	r0, r4
 8003518:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800351a:	f3af 8000 	nop.w
 800351e:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003522:	e7f5      	b.n	8003510 <_read+0x8>

08003524 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	460d      	mov	r5, r1
 8003528:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800352a:	460e      	mov	r6, r1
 800352c:	1b73      	subs	r3, r6, r5
 800352e:	429c      	cmp	r4, r3
 8003530:	dc01      	bgt.n	8003536 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8003532:	4620      	mov	r0, r4
 8003534:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8003536:	f816 0b01 	ldrb.w	r0, [r6], #1
 800353a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800353e:	e7f5      	b.n	800352c <_write+0x8>

08003540 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003540:	f04f 30ff 	mov.w	r0, #4294967295
 8003544:	4770      	bx	lr

08003546 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 800354a:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800354c:	604b      	str	r3, [r1, #4]
}
 800354e:	4770      	bx	lr

08003550 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003550:	2001      	movs	r0, #1
 8003552:	4770      	bx	lr

08003554 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003554:	2000      	movs	r0, #0
 8003556:	4770      	bx	lr

08003558 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003558:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <_sbrk+0x30>)
{
 800355a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800355c:	6811      	ldr	r1, [r2, #0]
{
 800355e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003560:	b909      	cbnz	r1, 8003566 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8003562:	490a      	ldr	r1, [pc, #40]	; (800358c <_sbrk+0x34>)
 8003564:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003566:	6810      	ldr	r0, [r2, #0]
 8003568:	4909      	ldr	r1, [pc, #36]	; (8003590 <_sbrk+0x38>)
 800356a:	4c0a      	ldr	r4, [pc, #40]	; (8003594 <_sbrk+0x3c>)
 800356c:	4403      	add	r3, r0
 800356e:	1b09      	subs	r1, r1, r4
 8003570:	428b      	cmp	r3, r1
 8003572:	d906      	bls.n	8003582 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8003574:	f007 f832 	bl	800a5dc <__errno>
 8003578:	230c      	movs	r3, #12
 800357a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800357c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003580:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003582:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8003584:	e7fc      	b.n	8003580 <_sbrk+0x28>
 8003586:	bf00      	nop
 8003588:	20002450 	.word	0x20002450
 800358c:	200046f8 	.word	0x200046f8
 8003590:	20005000 	.word	0x20005000
 8003594:	00000400 	.word	0x00000400

08003598 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003598:	4770      	bx	lr
	...

0800359c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800359c:	f7ff fffc 	bl	8003598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035a0:	480b      	ldr	r0, [pc, #44]	; (80035d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80035a2:	490c      	ldr	r1, [pc, #48]	; (80035d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80035a4:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80035a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035a8:	e002      	b.n	80035b0 <LoopCopyDataInit>

080035aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ae:	3304      	adds	r3, #4

080035b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035b4:	d3f9      	bcc.n	80035aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035b6:	4a09      	ldr	r2, [pc, #36]	; (80035dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80035b8:	4c09      	ldr	r4, [pc, #36]	; (80035e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035bc:	e001      	b.n	80035c2 <LoopFillZerobss>

080035be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035c0:	3204      	adds	r2, #4

080035c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035c4:	d3fb      	bcc.n	80035be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035c6:	f007 f80f 	bl	800a5e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035ca:	f7fe fe7d 	bl	80022c8 <main>
  bx lr
 80035ce:	4770      	bx	lr
  ldr r0, =_sdata
 80035d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035d4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80035d8:	0800b984 	.word	0x0800b984
  ldr r2, =_sbss
 80035dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80035e0:	200046f4 	.word	0x200046f4

080035e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035e4:	e7fe      	b.n	80035e4 <ADC1_2_IRQHandler>
	...

080035e8 <initBluetooth>:

		osThreadYield();
		osDelay(40);
	}
}
void initBluetooth(void){
 80035e8:	b537      	push	{r0, r1, r2, r4, r5, lr}

	//inicializacao do bluetooth
	BluetoothInit(&bluetooth, &huart1, &hdma_usart1_rx, &FilaRXBluetoothHandle,&FilaTXBluetoothHandle,&FilaBleComandoHandle);

	//possiveis comandos a serem recebidos pelo bluetooth
	BluetoothAddComp(&bluetooth, &BLEAtualizaRealtime, 	"RX_SOLICITA_REALTIME", 	RX_SOLICITA_REALTIME, 		ComandoBasico);
 80035ea:	2501      	movs	r5, #1
	BluetoothInit(&bluetooth, &huart1, &hdma_usart1_rx, &FilaRXBluetoothHandle,&FilaTXBluetoothHandle,&FilaBleComandoHandle);
 80035ec:	4b45      	ldr	r3, [pc, #276]	; (8003704 <initBluetooth+0x11c>)
 80035ee:	4c46      	ldr	r4, [pc, #280]	; (8003708 <initBluetooth+0x120>)
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	4b46      	ldr	r3, [pc, #280]	; (800370c <initBluetooth+0x124>)
 80035f4:	4620      	mov	r0, r4
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	4a45      	ldr	r2, [pc, #276]	; (8003710 <initBluetooth+0x128>)
 80035fa:	4b46      	ldr	r3, [pc, #280]	; (8003714 <initBluetooth+0x12c>)
 80035fc:	4946      	ldr	r1, [pc, #280]	; (8003718 <initBluetooth+0x130>)
 80035fe:	f7fe f807 	bl	8001610 <BluetoothInit>
	BluetoothAddComp(&bluetooth, &BLEAtualizaRealtime, 	"RX_SOLICITA_REALTIME", 	RX_SOLICITA_REALTIME, 		ComandoBasico);
 8003602:	2315      	movs	r3, #21
 8003604:	4620      	mov	r0, r4
 8003606:	4a45      	ldr	r2, [pc, #276]	; (800371c <initBluetooth+0x134>)
 8003608:	4945      	ldr	r1, [pc, #276]	; (8003720 <initBluetooth+0x138>)
 800360a:	9500      	str	r5, [sp, #0]
 800360c:	f7fd fd42 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESolicitaSincronia,	"RX_SOLICITA_SINCRONIA", 	RX_SOLICITA_SINCRONIA, 		ComandoBasico);
 8003610:	2317      	movs	r3, #23
 8003612:	4620      	mov	r0, r4
 8003614:	4a43      	ldr	r2, [pc, #268]	; (8003724 <initBluetooth+0x13c>)
 8003616:	4944      	ldr	r1, [pc, #272]	; (8003728 <initBluetooth+0x140>)
 8003618:	9500      	str	r5, [sp, #0]
 800361a:	f7fd fd3b 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAlteraLimiteTemp, 	"RX_ALTERA_VALOR_LIMITE", 	RX_LIMITE_TEMPERATURA,		ComandoBasico);
 800361e:	2326      	movs	r3, #38	; 0x26
 8003620:	4620      	mov	r0, r4
 8003622:	4a42      	ldr	r2, [pc, #264]	; (800372c <initBluetooth+0x144>)
 8003624:	4942      	ldr	r1, [pc, #264]	; (8003730 <initBluetooth+0x148>)
 8003626:	9500      	str	r5, [sp, #0]
 8003628:	f7fd fd34 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAtualizaDataHora, 	"RX_ATUALIZA_HORA", 		RX_ATUALIZA_HORA,			ComandoBasico);
 800362c:	2303      	movs	r3, #3
 800362e:	4620      	mov	r0, r4
 8003630:	4a40      	ldr	r2, [pc, #256]	; (8003734 <initBluetooth+0x14c>)
 8003632:	4941      	ldr	r1, [pc, #260]	; (8003738 <initBluetooth+0x150>)
 8003634:	9500      	str	r5, [sp, #0]
 8003636:	f7fd fd2d 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERestaura, 			"RX_RESTAURA", 				RX_RESTAURA,				ComandoBasico);
 800363a:	2310      	movs	r3, #16
 800363c:	4620      	mov	r0, r4
 800363e:	4a3f      	ldr	r2, [pc, #252]	; (800373c <initBluetooth+0x154>)
 8003640:	493f      	ldr	r1, [pc, #252]	; (8003740 <initBluetooth+0x158>)
 8003642:	9500      	str	r5, [sp, #0]
 8003644:	f7fd fd26 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERestauraHard, 		"RX_RESTAURA_HARD", 		RX_RESTAURA_HARD,			ComandoBasico);
 8003648:	2309      	movs	r3, #9
 800364a:	4620      	mov	r0, r4
 800364c:	4a3d      	ldr	r2, [pc, #244]	; (8003744 <initBluetooth+0x15c>)
 800364e:	493e      	ldr	r1, [pc, #248]	; (8003748 <initBluetooth+0x160>)
 8003650:	9500      	str	r5, [sp, #0]
 8003652:	f7fd fd1f 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTeto,     		"RX_SP_TEMP_TETO",        	RX_SP_TEMP_TETO,          	ComandoBasico);
 8003656:	2321      	movs	r3, #33	; 0x21
 8003658:	4620      	mov	r0, r4
 800365a:	4a3c      	ldr	r2, [pc, #240]	; (800374c <initBluetooth+0x164>)
 800365c:	493c      	ldr	r1, [pc, #240]	; (8003750 <initBluetooth+0x168>)
 800365e:	9500      	str	r5, [sp, #0]
 8003660:	f7fd fd18 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPLastro,     		"RX_SP_TEMP_LASTRO",       	RX_SP_TEMP_LASTRO,          ComandoBasico);
 8003664:	2322      	movs	r3, #34	; 0x22
 8003666:	4620      	mov	r0, r4
 8003668:	4a3a      	ldr	r2, [pc, #232]	; (8003754 <initBluetooth+0x16c>)
 800366a:	493b      	ldr	r1, [pc, #236]	; (8003758 <initBluetooth+0x170>)
 800366c:	9500      	str	r5, [sp, #0]
 800366e:	f7fd fd11 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTempo,     		"RX_SP_TEMPO",       		RX_SP_TEMPO,        		ComandoBasico);
 8003672:	2323      	movs	r3, #35	; 0x23
 8003674:	4620      	mov	r0, r4
 8003676:	4a39      	ldr	r2, [pc, #228]	; (800375c <initBluetooth+0x174>)
 8003678:	4939      	ldr	r1, [pc, #228]	; (8003760 <initBluetooth+0x178>)
 800367a:	9500      	str	r5, [sp, #0]
 800367c:	f7fd fd0a 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEToggleTempo,     	"RX_TOGGLE_TEMPO",       	RX_TOGGLE_TEMPO,        	ComandoBasico);
 8003680:	2324      	movs	r3, #36	; 0x24
 8003682:	4620      	mov	r0, r4
 8003684:	4a37      	ldr	r2, [pc, #220]	; (8003764 <initBluetooth+0x17c>)
 8003686:	4938      	ldr	r1, [pc, #224]	; (8003768 <initBluetooth+0x180>)
 8003688:	9500      	str	r5, [sp, #0]
 800368a:	f7fd fd03 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEReceita,     		"RX_RECEITA",     		  	RX_RECEITA,        			ComandoBasico);
 800368e:	2325      	movs	r3, #37	; 0x25
 8003690:	4620      	mov	r0, r4
 8003692:	4a36      	ldr	r2, [pc, #216]	; (800376c <initBluetooth+0x184>)
 8003694:	4936      	ldr	r1, [pc, #216]	; (8003770 <initBluetooth+0x188>)
 8003696:	9500      	str	r5, [sp, #0]
 8003698:	f7fd fcfc 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOn,     		"RX_LIGA_LAMADA",     	  	RX_LIGA_LAMPADA,     		ComandoBasico);
 800369c:	2327      	movs	r3, #39	; 0x27
 800369e:	4620      	mov	r0, r4
 80036a0:	4a34      	ldr	r2, [pc, #208]	; (8003774 <initBluetooth+0x18c>)
 80036a2:	4935      	ldr	r1, [pc, #212]	; (8003778 <initBluetooth+0x190>)
 80036a4:	9500      	str	r5, [sp, #0]
 80036a6:	f7fd fcf5 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOff,     		"RX_DESLIGA_LAMPADA",    	RX_DESLIGA_LAMPADA,  		ComandoBasico);
 80036aa:	2328      	movs	r3, #40	; 0x28
 80036ac:	4620      	mov	r0, r4
 80036ae:	4a33      	ldr	r2, [pc, #204]	; (800377c <initBluetooth+0x194>)
 80036b0:	4933      	ldr	r1, [pc, #204]	; (8003780 <initBluetooth+0x198>)
 80036b2:	9500      	str	r5, [sp, #0]
 80036b4:	f7fd fcee 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESetaLampada,     	"RX_LIMITE_LAMPADA",    	RX_LIMITE_LAMPADA,  		ComandoBasico);
 80036b8:	2330      	movs	r3, #48	; 0x30
 80036ba:	4620      	mov	r0, r4
 80036bc:	4a31      	ldr	r2, [pc, #196]	; (8003784 <initBluetooth+0x19c>)
 80036be:	4932      	ldr	r1, [pc, #200]	; (8003788 <initBluetooth+0x1a0>)
 80036c0:	9500      	str	r5, [sp, #0]
 80036c2:	f7fd fce7 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLECancelaProcesso,  	"RX_CANCELA_PROCESSO",    	RX_CANCELA_PROCESSO,  		ComandoBasico);
 80036c6:	2329      	movs	r3, #41	; 0x29
 80036c8:	4620      	mov	r0, r4
 80036ca:	4a30      	ldr	r2, [pc, #192]	; (800378c <initBluetooth+0x1a4>)
 80036cc:	4930      	ldr	r1, [pc, #192]	; (8003790 <initBluetooth+0x1a8>)
 80036ce:	9500      	str	r5, [sp, #0]
 80036d0:	f7fd fce0 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLETunningTeto,     	"RX_TUNNING_TETO",    		RX_TUNNING_TETO,  			ComandoBasico);
 80036d4:	2333      	movs	r3, #51	; 0x33
 80036d6:	4620      	mov	r0, r4
 80036d8:	4a2e      	ldr	r2, [pc, #184]	; (8003794 <initBluetooth+0x1ac>)
 80036da:	492f      	ldr	r1, [pc, #188]	; (8003798 <initBluetooth+0x1b0>)
 80036dc:	9500      	str	r5, [sp, #0]
 80036de:	f7fd fcd9 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLETunningLastro,  	"RX_TUNNING_LASTRO",    	RX_TUNNING_LASTRO,  		ComandoBasico);
 80036e2:	2334      	movs	r3, #52	; 0x34
 80036e4:	4620      	mov	r0, r4
 80036e6:	4a2d      	ldr	r2, [pc, #180]	; (800379c <initBluetooth+0x1b4>)
 80036e8:	492d      	ldr	r1, [pc, #180]	; (80037a0 <initBluetooth+0x1b8>)
 80036ea:	9500      	str	r5, [sp, #0]
 80036ec:	f7fd fcd2 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEToggleBuzzer,  	"RX_TOGGLE_BUZZER",    		RX_TOGGLE_BUZZER,  			ComandoBasico);
 80036f0:	2335      	movs	r3, #53	; 0x35
 80036f2:	4620      	mov	r0, r4
 80036f4:	4a2b      	ldr	r2, [pc, #172]	; (80037a4 <initBluetooth+0x1bc>)
 80036f6:	492c      	ldr	r1, [pc, #176]	; (80037a8 <initBluetooth+0x1c0>)
 80036f8:	9500      	str	r5, [sp, #0]
 80036fa:	f7fd fccb 	bl	8001094 <BluetoothAddComp>

}
 80036fe:	b003      	add	sp, #12
 8003700:	bd30      	pop	{r4, r5, pc}
 8003702:	bf00      	nop
 8003704:	200007e4 	.word	0x200007e4
 8003708:	20002004 	.word	0x20002004
 800370c:	200008cc 	.word	0x200008cc
 8003710:	200021e0 	.word	0x200021e0
 8003714:	20000840 	.word	0x20000840
 8003718:	20002360 	.word	0x20002360
 800371c:	0800b6be 	.word	0x0800b6be
 8003720:	20002464 	.word	0x20002464
 8003724:	0800b6d3 	.word	0x0800b6d3
 8003728:	200024bc 	.word	0x200024bc
 800372c:	0800b6e9 	.word	0x0800b6e9
 8003730:	20002454 	.word	0x20002454
 8003734:	0800b700 	.word	0x0800b700
 8003738:	2000245c 	.word	0x2000245c
 800373c:	0800b711 	.word	0x0800b711
 8003740:	2000248c 	.word	0x2000248c
 8003744:	0800b71d 	.word	0x0800b71d
 8003748:	20002494 	.word	0x20002494
 800374c:	0800b72e 	.word	0x0800b72e
 8003750:	200024ac 	.word	0x200024ac
 8003754:	0800b73e 	.word	0x0800b73e
 8003758:	2000249c 	.word	0x2000249c
 800375c:	0800b750 	.word	0x0800b750
 8003760:	200024a4 	.word	0x200024a4
 8003764:	0800b75c 	.word	0x0800b75c
 8003768:	200024cc 	.word	0x200024cc
 800376c:	0800b76c 	.word	0x0800b76c
 8003770:	20002484 	.word	0x20002484
 8003774:	0800b777 	.word	0x0800b777
 8003778:	2000247c 	.word	0x2000247c
 800377c:	0800b786 	.word	0x0800b786
 8003780:	20002474 	.word	0x20002474
 8003784:	0800b799 	.word	0x0800b799
 8003788:	200024b4 	.word	0x200024b4
 800378c:	0800b7ab 	.word	0x0800b7ab
 8003790:	2000246c 	.word	0x2000246c
 8003794:	0800b7bf 	.word	0x0800b7bf
 8003798:	200024dc 	.word	0x200024dc
 800379c:	0800b7cf 	.word	0x0800b7cf
 80037a0:	200024d4 	.word	0x200024d4
 80037a4:	0800b7e1 	.word	0x0800b7e1
 80037a8:	200024c4 	.word	0x200024c4

080037ac <taskBluetooth1sec>:
void taskBluetooth1sec(void){

	//---monitor de inatividade
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 80037ac:	4a0b      	ldr	r2, [pc, #44]	; (80037dc <taskBluetooth1sec+0x30>)
void taskBluetooth1sec(void){
 80037ae:	b508      	push	{r3, lr}
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 80037b0:	8813      	ldrh	r3, [r2, #0]
 80037b2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80037b6:	d309      	bcc.n	80037cc <taskBluetooth1sec+0x20>
		desligaForno();
 80037b8:	f7ff f8de 	bl	8002978 <desligaForno>
	}else if(PrimitiveStates.stateTimer != TIMER_decrementando){
		tempoSemAtividade++;
	}

	//---sequenciamento de envio de sincronia
	if(bluetooth.MaquinaConexao == RX_DESCONECTADO){
 80037bc:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <taskBluetooth1sec+0x34>)
 80037be:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80037c2:	b913      	cbnz	r3, 80037ca <taskBluetooth1sec+0x1e>
		FlagSincronia.cont=0;
 80037c4:	4a07      	ldr	r2, [pc, #28]	; (80037e4 <taskBluetooth1sec+0x38>)
 80037c6:	7053      	strb	r3, [r2, #1]
		FlagSincronia.flag=0;
 80037c8:	7013      	strb	r3, [r2, #0]
	}
	/*
	 * ao conectar, seta a FlagSincronia
	 * ao desconectar, reseta a FlagSincronia
	 * */
}
 80037ca:	bd08      	pop	{r3, pc}
	}else if(PrimitiveStates.stateTimer != TIMER_decrementando){
 80037cc:	4906      	ldr	r1, [pc, #24]	; (80037e8 <taskBluetooth1sec+0x3c>)
 80037ce:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
 80037d2:	2901      	cmp	r1, #1
		tempoSemAtividade++;
 80037d4:	bf1c      	itt	ne
 80037d6:	3301      	addne	r3, #1
 80037d8:	8013      	strhne	r3, [r2, #0]
 80037da:	e7ef      	b.n	80037bc <taskBluetooth1sec+0x10>
 80037dc:	200024e6 	.word	0x200024e6
 80037e0:	20002004 	.word	0x20002004
 80037e4:	200024e4 	.word	0x200024e4
 80037e8:	200008d0 	.word	0x200008d0

080037ec <txBluetooth>:
void txBluetooth(void){
 80037ec:	b510      	push	{r4, lr}
	unsigned char	Buffer		[BLUETOOTH_MAX_BUFF_LEN];
	osEvent  evttx;
	evttx = osMessageGet(FilaTXBluetoothHandle, 10);
 80037ee:	4b86      	ldr	r3, [pc, #536]	; (8003a08 <txBluetooth+0x21c>)
void txBluetooth(void){
 80037f0:	b08c      	sub	sp, #48	; 0x30
	evttx = osMessageGet(FilaTXBluetoothHandle, 10);
 80037f2:	6819      	ldr	r1, [r3, #0]
 80037f4:	220a      	movs	r2, #10
 80037f6:	a801      	add	r0, sp, #4
 80037f8:	f004 fb2d 	bl	8007e56 <osMessageGet>
	if (evttx.status == osEventMessage) {
 80037fc:	9b01      	ldr	r3, [sp, #4]
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d115      	bne.n	800382e <txBluetooth+0x42>
		switch ((unsigned int)evttx.value.p) {
 8003802:	9b02      	ldr	r3, [sp, #8]
 8003804:	2b20      	cmp	r3, #32
 8003806:	d80c      	bhi.n	8003822 <txBluetooth+0x36>
 8003808:	2b15      	cmp	r3, #21
 800380a:	d910      	bls.n	800382e <txBluetooth+0x42>
 800380c:	3b16      	subs	r3, #22
 800380e:	2b0a      	cmp	r3, #10
 8003810:	d80d      	bhi.n	800382e <txBluetooth+0x42>
 8003812:	e8df f003 	tbb	[pc, r3]
 8003816:	510e      	.short	0x510e
 8003818:	0c0ca983 	.word	0x0c0ca983
 800381c:	0c0c0c0c 	.word	0x0c0c0c0c
 8003820:	cc          	.byte	0xcc
 8003821:	00          	.byte	0x00
 8003822:	2b29      	cmp	r3, #41	; 0x29
 8003824:	f000 80e2 	beq.w	80039ec <txBluetooth+0x200>
 8003828:	2b30      	cmp	r3, #48	; 0x30
 800382a:	f000 80e7 	beq.w	80039fc <txBluetooth+0x210>
			BluetoothEnviaComando(&bluetooth,Buffer, 2);

			break;
		}
	}
}
 800382e:	b00c      	add	sp, #48	; 0x30
 8003830:	bd10      	pop	{r4, pc}
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003832:	f241 6301 	movw	r3, #5633	; 0x1601
			Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003836:	4c75      	ldr	r4, [pc, #468]	; (8003a0c <txBluetooth+0x220>)
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003838:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 800383c:	f894 313f 	ldrb.w	r3, [r4, #319]	; 0x13f
			Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003840:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
			Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003844:	f88d 3012 	strb.w	r3, [sp, #18]
			Buffer[3] 	= PrimitiveStates.Teto._PWMstate;
 8003848:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 800384c:	f88d 3013 	strb.w	r3, [sp, #19]
			Buffer[4] 	= PrimitiveStates.Lastro._PWMstate;
 8003850:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8003854:	f88d 3014 	strb.w	r3, [sp, #20]
			Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003858:	f7fd f8d8 	bl	8000a0c <__aeabi_d2uiz>
 800385c:	f3c0 2307 	ubfx	r3, r0, #8, #8
			Buffer[6] 	= (uint16_t)PrimitiveStates.Teto.realtime 		& 0x00FF;
 8003860:	f88d 0016 	strb.w	r0, [sp, #22]
			Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003864:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
			Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003868:	f88d 3015 	strb.w	r3, [sp, #21]
			Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 800386c:	f7fd f8ce 	bl	8000a0c <__aeabi_d2uiz>
 8003870:	f3c0 2307 	ubfx	r3, r0, #8, #8
			Buffer[8] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		& 0x00FF;
 8003874:	f88d 0018 	strb.w	r0, [sp, #24]
			Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 8003878:	e9d4 0146 	ldrd	r0, r1, [r4, #280]	; 0x118
			Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 800387c:	f88d 3017 	strb.w	r3, [sp, #23]
			Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 8003880:	f7fd f8c4 	bl	8000a0c <__aeabi_d2uiz>
 8003884:	f3c0 2307 	ubfx	r3, r0, #8, #8
			Buffer[10] 	= (uint16_t)PrimitiveStates.Lastro.realtime 	& 0x00FF;
 8003888:	f88d 001a 	strb.w	r0, [sp, #26]
			Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 800388c:	e9d4 0148 	ldrd	r0, r1, [r4, #288]	; 0x120
			Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 8003890:	f88d 3019 	strb.w	r3, [sp, #25]
			Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 8003894:	f7fd f8ba 	bl	8000a0c <__aeabi_d2uiz>
			BluetoothEnviaComando(&bluetooth,Buffer, 13);
 8003898:	220d      	movs	r2, #13
			Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 800389a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800389e:	f88d 301b 	strb.w	r3, [sp, #27]
			Buffer[13] 	= PrimitiveStates.Buzzer;
 80038a2:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
			Buffer[12] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	& 0x00FF;
 80038a6:	f88d 001c 	strb.w	r0, [sp, #28]
			Buffer[13] 	= PrimitiveStates.Buzzer;
 80038aa:	f88d 301d 	strb.w	r3, [sp, #29]
			BluetoothEnviaComando(&bluetooth,Buffer, 2);
 80038ae:	4858      	ldr	r0, [pc, #352]	; (8003a10 <txBluetooth+0x224>)
 80038b0:	a904      	add	r1, sp, #16
 80038b2:	f7fd fc3b 	bl	800112c <BluetoothEnviaComando>
}
 80038b6:	e7ba      	b.n	800382e <txBluetooth+0x42>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80038b8:	f241 7301 	movw	r3, #5889	; 0x1701
 80038bc:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= PrimitiveStates.stateTimer;			// State da maquina de timer
 80038c0:	4b52      	ldr	r3, [pc, #328]	; (8003a0c <txBluetooth+0x220>)
 80038c2:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 80038c6:	f88d 2012 	strb.w	r2, [sp, #18]
			Buffer[3] 	= PrimitiveStates.RTTimerMinutos;
 80038ca:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 80038ce:	f88d 2013 	strb.w	r2, [sp, #19]
			Buffer[4] 	= PrimitiveStates.RTTimerSegundos;
 80038d2:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 80038d6:	f88d 2014 	strb.w	r2, [sp, #20]
			Buffer[5] 	= PrimitiveStates.SPTimerMinutos;
 80038da:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 80038de:	f88d 2015 	strb.w	r2, [sp, #21]
			Buffer[6] 	= PrimitiveStates.SPTimerSegundos;
 80038e2:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
			Buffer[10]	= PrimitiveStates.Lampada._state;
 80038e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
			Buffer[6] 	= PrimitiveStates.SPTimerSegundos;
 80038ea:	f88d 2016 	strb.w	r2, [sp, #22]
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 80038ee:	4a49      	ldr	r2, [pc, #292]	; (8003a14 <txBluetooth+0x228>)
			Buffer[10]	= PrimitiveStates.Lampada._state;
 80038f0:	f88d 301a 	strb.w	r3, [sp, #26]
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 80038f4:	68d2      	ldr	r2, [r2, #12]
			Buffer[11] 	= (uint16_t)Calendario.TotalCiclos >> 8;
 80038f6:	4b48      	ldr	r3, [pc, #288]	; (8003a18 <txBluetooth+0x22c>)
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 80038f8:	f3c2 2107 	ubfx	r1, r2, #8, #8
			Buffer[8] 	= (uint16_t)horimetroHoras.valor & 0x00FF;
 80038fc:	f88d 2018 	strb.w	r2, [sp, #24]
			Buffer[9] 	= (uint8_t)horimetroMinutos.valor;
 8003900:	4a46      	ldr	r2, [pc, #280]	; (8003a1c <txBluetooth+0x230>)
			Buffer[11] 	= (uint16_t)Calendario.TotalCiclos >> 8;
 8003902:	891b      	ldrh	r3, [r3, #8]
			Buffer[9] 	= (uint8_t)horimetroMinutos.valor;
 8003904:	68d2      	ldr	r2, [r2, #12]
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 8003906:	f88d 1017 	strb.w	r1, [sp, #23]
			Buffer[9] 	= (uint8_t)horimetroMinutos.valor;
 800390a:	f88d 2019 	strb.w	r2, [sp, #25]
			Buffer[11] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 800390e:	0a1a      	lsrs	r2, r3, #8
 8003910:	f88d 201b 	strb.w	r2, [sp, #27]
			Buffer[12] 	= (uint16_t)Calendario.ContMaxLastro & 0x00FF;
 8003914:	f88d 301c 	strb.w	r3, [sp, #28]
			BluetoothEnviaComando(&bluetooth,Buffer, 12);
 8003918:	220c      	movs	r2, #12
 800391a:	e7c8      	b.n	80038ae <txBluetooth+0xc2>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 800391c:	f641 0301 	movw	r3, #6145	; 0x1801
 8003920:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= 0x01;									// Modelo
 8003924:	2301      	movs	r3, #1
 8003926:	f88d 3012 	strb.w	r3, [sp, #18]
			Buffer[3] 	= (uint16_t)PrimitiveStates.Lampada.limitOn >> 8;
 800392a:	4b38      	ldr	r3, [pc, #224]	; (8003a0c <txBluetooth+0x220>)
 800392c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800392e:	0a1a      	lsrs	r2, r3, #8
			Buffer[4] 	= (uint16_t)PrimitiveStates.Lampada.limitOn & 0x00FF;
 8003930:	f88d 3014 	strb.w	r3, [sp, #20]
			Buffer[5] 	= (uint8_t)instalacaoDia.valor;
 8003934:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <txBluetooth+0x234>)
			Buffer[3] 	= (uint16_t)PrimitiveStates.Lampada.limitOn >> 8;
 8003936:	f88d 2013 	strb.w	r2, [sp, #19]
			Buffer[5] 	= (uint8_t)instalacaoDia.valor;
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f88d 3015 	strb.w	r3, [sp, #21]
			Buffer[6] 	= (uint8_t)instalacaoMes.valor;
 8003940:	4b38      	ldr	r3, [pc, #224]	; (8003a24 <txBluetooth+0x238>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f88d 3016 	strb.w	r3, [sp, #22]
			Buffer[7] 	= (uint8_t)instalacaoAno.valor;
 8003948:	4b37      	ldr	r3, [pc, #220]	; (8003a28 <txBluetooth+0x23c>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f88d 3017 	strb.w	r3, [sp, #23]
			Buffer[8]	= VERSAO;
 8003950:	2302      	movs	r3, #2
 8003952:	f88d 3018 	strb.w	r3, [sp, #24]
			Buffer[9] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 8003956:	4b30      	ldr	r3, [pc, #192]	; (8003a18 <txBluetooth+0x22c>)
 8003958:	895a      	ldrh	r2, [r3, #10]
			Buffer[11] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 800395a:	899b      	ldrh	r3, [r3, #12]
			Buffer[9] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 800395c:	0a11      	lsrs	r1, r2, #8
 800395e:	f88d 1019 	strb.w	r1, [sp, #25]
			Buffer[10] 	= (uint16_t)Calendario.ContMaxTeto & 0x00FF;
 8003962:	f88d 201a 	strb.w	r2, [sp, #26]
			Buffer[11] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 8003966:	e7d2      	b.n	800390e <txBluetooth+0x122>
			Buffer[0] = 0x01;
 8003968:	f641 1301 	movw	r3, #6401	; 0x1901
			float_TO_vetor4b(PrimitiveStates.Teto.kp, Buffer, 2);
 800396c:	4c27      	ldr	r4, [pc, #156]	; (8003a0c <txBluetooth+0x220>)
			Buffer[0] = 0x01;
 800396e:	f8ad 3010 	strh.w	r3, [sp, #16]
			float_TO_vetor4b(PrimitiveStates.Teto.kp, Buffer, 2);
 8003972:	aa04      	add	r2, sp, #16
 8003974:	2302      	movs	r3, #2
 8003976:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
 800397a:	f7fe f813 	bl	80019a4 <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Teto.ki, Buffer, 6);
 800397e:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
 8003982:	2306      	movs	r3, #6
 8003984:	aa04      	add	r2, sp, #16
 8003986:	f7fe f80d 	bl	80019a4 <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Teto.kd, Buffer, 10);
 800398a:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	; 0xc0
 800398e:	230a      	movs	r3, #10
 8003990:	aa04      	add	r2, sp, #16
 8003992:	f7fe f807 	bl	80019a4 <float_TO_vetor4b>
			Buffer[14] 	= (uint16_t)PrimitiveStates.Teto.histerese 	>>8;
 8003996:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
 800399a:	ba5b      	rev16	r3, r3
 800399c:	f8ad 301e 	strh.w	r3, [sp, #30]
			Buffer[16] 	= (uint16_t)PrimitiveStates.Teto.limite 		>>8;
 80039a0:	f8b4 30e0 	ldrh.w	r3, [r4, #224]	; 0xe0
			Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 80039a4:	ba5b      	rev16	r3, r3
			BluetoothEnviaComando(&bluetooth,Buffer, 17);
 80039a6:	2211      	movs	r2, #17
			Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 80039a8:	f8ad 3020 	strh.w	r3, [sp, #32]
			BluetoothEnviaComando(&bluetooth,Buffer, 17);
 80039ac:	e77f      	b.n	80038ae <txBluetooth+0xc2>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80039ae:	f242 0301 	movw	r3, #8193	; 0x2001
			float_TO_vetor4b(PrimitiveStates.Lastro.kp, Buffer, 2);
 80039b2:	4c16      	ldr	r4, [pc, #88]	; (8003a0c <txBluetooth+0x220>)
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80039b4:	f8ad 3010 	strh.w	r3, [sp, #16]
			float_TO_vetor4b(PrimitiveStates.Lastro.kp, Buffer, 2);
 80039b8:	aa04      	add	r2, sp, #16
 80039ba:	2302      	movs	r3, #2
 80039bc:	e9d4 013e 	ldrd	r0, r1, [r4, #248]	; 0xf8
 80039c0:	f7fd fff0 	bl	80019a4 <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Lastro.ki, Buffer, 6);
 80039c4:	e9d4 0140 	ldrd	r0, r1, [r4, #256]	; 0x100
 80039c8:	2306      	movs	r3, #6
 80039ca:	aa04      	add	r2, sp, #16
 80039cc:	f7fd ffea 	bl	80019a4 <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Lastro.kd, Buffer, 10);
 80039d0:	e9d4 0142 	ldrd	r0, r1, [r4, #264]	; 0x108
 80039d4:	230a      	movs	r3, #10
 80039d6:	aa04      	add	r2, sp, #16
 80039d8:	f7fd ffe4 	bl	80019a4 <float_TO_vetor4b>
			Buffer[14] 	= (uint16_t)PrimitiveStates.Lastro.histerese 	>>8;
 80039dc:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80039e0:	ba5b      	rev16	r3, r3
 80039e2:	f8ad 301e 	strh.w	r3, [sp, #30]
			Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 80039e6:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 80039ea:	e7db      	b.n	80039a4 <txBluetooth+0x1b8>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80039ec:	f642 1201 	movw	r2, #10497	; 0x2901
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80039f0:	f8ad 2010 	strh.w	r2, [sp, #16]
			Buffer[2] 	= 0x30;									// FUNÇÃO -
 80039f4:	f88d 3012 	strb.w	r3, [sp, #18]
			BluetoothEnviaComando(&bluetooth,Buffer, 2);
 80039f8:	2202      	movs	r2, #2
 80039fa:	e758      	b.n	80038ae <txBluetooth+0xc2>
			FlagSincronia.flag=0;
 80039fc:	2100      	movs	r1, #0
 80039fe:	4a0b      	ldr	r2, [pc, #44]	; (8003a2c <txBluetooth+0x240>)
 8003a00:	7011      	strb	r1, [r2, #0]
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003a02:	f243 0201 	movw	r2, #12289	; 0x3001
 8003a06:	e7f3      	b.n	80039f0 <txBluetooth+0x204>
 8003a08:	200008cc 	.word	0x200008cc
 8003a0c:	200008d0 	.word	0x200008d0
 8003a10:	20002004 	.word	0x20002004
 8003a14:	200026f0 	.word	0x200026f0
 8003a18:	200007d4 	.word	0x200007d4
 8003a1c:	2000271c 	.word	0x2000271c
 8003a20:	20002774 	.word	0x20002774
 8003a24:	200027a0 	.word	0x200027a0
 8003a28:	20002748 	.word	0x20002748
 8003a2c:	200024e4 	.word	0x200024e4

08003a30 <verificaLimiteSetpoint>:

			break;
		}
	}
}
void verificaLimiteSetpoint(IndviduoPID	*canal){
 8003a30:	b538      	push	{r3, r4, r5, lr}
	if(canal->setPoint < canal->limite)
 8003a32:	8f05      	ldrh	r5, [r0, #56]	; 0x38
void verificaLimiteSetpoint(IndviduoPID	*canal){
 8003a34:	4604      	mov	r4, r0
	if(canal->setPoint < canal->limite)
 8003a36:	4628      	mov	r0, r5
 8003a38:	f7fc fce4 	bl	8000404 <__aeabi_i2d>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8003a44:	f7fc ffba 	bl	80009bc <__aeabi_dcmplt>
 8003a48:	b920      	cbnz	r0, 8003a54 <verificaLimiteSetpoint+0x24>
		return;

	canal->setPoint = canal->limite;
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	f7fc fcca 	bl	80003e4 <__aeabi_ui2d>
 8003a50:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
	return;
}
 8003a54:	bd38      	pop	{r3, r4, r5, pc}
	...

08003a58 <sincAutomatico>:
bool sincAutomatico(void){ //1==permite 0==recusa

	//envia sincronia junto do realtime apenas 3 vezes por reconexao
	if(!FlagSincronia.flag){
 8003a58:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <sincAutomatico+0x20>)
 8003a5a:	7818      	ldrb	r0, [r3, #0]
 8003a5c:	b950      	cbnz	r0, 8003a74 <sincAutomatico+0x1c>
		if(FlagSincronia.cont<3){
 8003a5e:	2101      	movs	r1, #1
 8003a60:	785a      	ldrb	r2, [r3, #1]
 8003a62:	2a02      	cmp	r2, #2
			FlagSincronia.cont++; //permite 3 envios antes de resetar a flag
 8003a64:	bf9d      	ittte	ls
 8003a66:	1852      	addls	r2, r2, r1
			return 1;
 8003a68:	4608      	movls	r0, r1
			FlagSincronia.cont++; //permite 3 envios antes de resetar a flag
 8003a6a:	705a      	strbls	r2, [r3, #1]
		}else{
			FlagSincronia.cont = 0; //zera o contador
 8003a6c:	7058      	strbhi	r0, [r3, #1]
			FlagSincronia.flag = 1; //reseta a flag
 8003a6e:	bf88      	it	hi
 8003a70:	7019      	strbhi	r1, [r3, #0]
			return 0;
 8003a72:	4770      	bx	lr
		}
	}
	return 0;
 8003a74:	2000      	movs	r0, #0
}
 8003a76:	4770      	bx	lr
 8003a78:	200024e4 	.word	0x200024e4

08003a7c <rxBluetooth>:
void rxBluetooth(void){
 8003a7c:	b530      	push	{r4, r5, lr}
	evtrx = osMessageGet(FilaRXBluetoothHandle, 10);
 8003a7e:	4bb0      	ldr	r3, [pc, #704]	; (8003d40 <rxBluetooth+0x2c4>)
void rxBluetooth(void){
 8003a80:	b087      	sub	sp, #28
	evtrx = osMessageGet(FilaRXBluetoothHandle, 10);
 8003a82:	6819      	ldr	r1, [r3, #0]
 8003a84:	220a      	movs	r2, #10
 8003a86:	a803      	add	r0, sp, #12
 8003a88:	f004 f9e5 	bl	8007e56 <osMessageGet>
	if (evtrx.status == osEventMessage) {
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	f040 8231 	bne.w	8003ef6 <rxBluetooth+0x47a>
		switch (bluetooth._RxDataArr[1]) {
 8003a94:	4cab      	ldr	r4, [pc, #684]	; (8003d44 <rxBluetooth+0x2c8>)
 8003a96:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003a9a:	3b03      	subs	r3, #3
 8003a9c:	2b32      	cmp	r3, #50	; 0x32
 8003a9e:	f200 822a 	bhi.w	8003ef6 <rxBluetooth+0x47a>
 8003aa2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003aa6:	005a      	.short	0x005a
 8003aa8:	02280228 	.word	0x02280228
 8003aac:	02280228 	.word	0x02280228
 8003ab0:	00820228 	.word	0x00820228
 8003ab4:	02280228 	.word	0x02280228
 8003ab8:	02280228 	.word	0x02280228
 8003abc:	02280228 	.word	0x02280228
 8003ac0:	0228008b 	.word	0x0228008b
 8003ac4:	02280228 	.word	0x02280228
 8003ac8:	00330228 	.word	0x00330228
 8003acc:	00550228 	.word	0x00550228
 8003ad0:	02280228 	.word	0x02280228
 8003ad4:	02280228 	.word	0x02280228
 8003ad8:	02280228 	.word	0x02280228
 8003adc:	02280228 	.word	0x02280228
 8003ae0:	008e0228 	.word	0x008e0228
 8003ae4:	00b000a0 	.word	0x00b000a0
 8003ae8:	011500d7 	.word	0x011500d7
 8003aec:	016c0228 	.word	0x016c0228
 8003af0:	01b20182 	.word	0x01b20182
 8003af4:	02280228 	.word	0x02280228
 8003af8:	02280228 	.word	0x02280228
 8003afc:	02280228 	.word	0x02280228
 8003b00:	02280198 	.word	0x02280198
 8003b04:	01be0228 	.word	0x01be0228
 8003b08:	020e01e6 	.word	0x020e01e6
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA, 0);
 8003b0c:	4c8e      	ldr	r4, [pc, #568]	; (8003d48 <rxBluetooth+0x2cc>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2116      	movs	r1, #22
 8003b12:	6820      	ldr	r0, [r4, #0]
 8003b14:	f004 f977 	bl	8007e06 <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA2, 0);
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2117      	movs	r1, #23
 8003b1c:	6820      	ldr	r0, [r4, #0]
 8003b1e:	f004 f972 	bl	8007e06 <osMessagePut>
			if(sincAutomatico()){
 8003b22:	f7ff ff99 	bl	8003a58 <sincAutomatico>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	f000 81e5 	beq.w	8003ef6 <rxBluetooth+0x47a>
				osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA,  0);
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2118      	movs	r1, #24
 8003b30:	6820      	ldr	r0, [r4, #0]
 8003b32:	f004 f968 	bl	8007e06 <osMessagePut>
				osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA2, 0);
 8003b36:	2200      	movs	r2, #0
 8003b38:	2119      	movs	r1, #25
 8003b3a:	6820      	ldr	r0, [r4, #0]
 8003b3c:	f004 f963 	bl	8007e06 <osMessagePut>
				osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA3, 0);
 8003b40:	2200      	movs	r2, #0
 8003b42:	2120      	movs	r1, #32
 8003b44:	6820      	ldr	r0, [r4, #0]
}
 8003b46:	b007      	add	sp, #28
 8003b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			osMessagePut(FilaEepromHandle, CEepromToogleBuzzer, 0);
 8003b4c:	f004 b95b 	b.w	8007e06 <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003b50:	2200      	movs	r2, #0
 8003b52:	2118      	movs	r1, #24
			osMessagePut(FilaTXBluetoothHandle, TX_RESETANDO, 0);
 8003b54:	4b7c      	ldr	r3, [pc, #496]	; (8003d48 <rxBluetooth+0x2cc>)
			osMessagePut(FilaEepromHandle, CEepromToogleBuzzer, 0);
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	e7f5      	b.n	8003b46 <rxBluetooth+0xca>
			datetoUpdate.WeekDay 	= bluetooth._RxDataArr[2]; //Dia da semana p/atualizar
 8003b5a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
			timeToUpdate.Hours 		= bluetooth._RxDataArr[6]; //hora p/atualizar
 8003b5e:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
			datetoUpdate.WeekDay 	= bluetooth._RxDataArr[2]; //Dia da semana p/atualizar
 8003b60:	f88d 3008 	strb.w	r3, [sp, #8]
			datetoUpdate.Date 		= bluetooth._RxDataArr[3]; //Dia do mes p/atualizar
 8003b64:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
			timeToUpdate.Hours 		= bluetooth._RxDataArr[6]; //hora p/atualizar
 8003b68:	f8ad 2004 	strh.w	r2, [sp, #4]
			datetoUpdate.Date 		= bluetooth._RxDataArr[3]; //Dia do mes p/atualizar
 8003b6c:	f88d 300a 	strb.w	r3, [sp, #10]
			datetoUpdate.Month 		= bluetooth._RxDataArr[4]; //mes p/atualizar
 8003b70:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003b74:	f88d 3009 	strb.w	r3, [sp, #9]
			datetoUpdate.Year 		= bluetooth._RxDataArr[5]; //ano p/atualizar
 8003b78:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003b7c:	f88d 300b 	strb.w	r3, [sp, #11]
			timeToUpdate.Seconds 	= bluetooth._RxDataArr[8]; //segundos p/atualizar
 8003b80:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003b84:	f88d 3006 	strb.w	r3, [sp, #6]
			atualizaDataEeprom(datetoUpdate, timeToUpdate);
 8003b88:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8003b8c:	f000 fdc8 	bl	8004720 <atualizaDataEeprom>
			MACRO_ENVIA_AKNOLADGE_(RX_ATUALIZA_HORA)
 8003b90:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003b94:	2203      	movs	r2, #3
 8003b96:	8123      	strh	r3, [r4, #8]
 8003b98:	72a2      	strb	r2, [r4, #10]
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_TETO)
 8003b9a:	496c      	ldr	r1, [pc, #432]	; (8003d4c <rxBluetooth+0x2d0>)
 8003b9c:	f1a1 0008 	sub.w	r0, r1, #8
}
 8003ba0:	b007      	add	sp, #28
 8003ba2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_TETO)
 8003ba6:	f7fd ba93 	b.w	80010d0 <Envia_bytes_UART>
			osMessagePut(FilaEepromHandle, CEepromHardReset, 0);
 8003baa:	2200      	movs	r2, #0
 8003bac:	2102      	movs	r1, #2
 8003bae:	4b68      	ldr	r3, [pc, #416]	; (8003d50 <rxBluetooth+0x2d4>)
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	f004 f928 	bl	8007e06 <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_RESETANDO, 0);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2129      	movs	r1, #41	; 0x29
 8003bba:	e7cb      	b.n	8003b54 <rxBluetooth+0xd8>
			osMessagePut(FilaEepromHandle, CEepromSoftReset, 0);
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2103      	movs	r1, #3
 8003bc0:	e7f5      	b.n	8003bae <rxBluetooth+0x132>
			MACRO_ANULA_INATIVIDADE
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	4b63      	ldr	r3, [pc, #396]	; (8003d54 <rxBluetooth+0x2d8>)
			vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr,2);
 8003bc6:	4964      	ldr	r1, [pc, #400]	; (8003d58 <rxBluetooth+0x2dc>)
			MACRO_ANULA_INATIVIDADE
 8003bc8:	801a      	strh	r2, [r3, #0]
			vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr,2);
 8003bca:	4864      	ldr	r0, [pc, #400]	; (8003d5c <rxBluetooth+0x2e0>)
 8003bcc:	2202      	movs	r2, #2
 8003bce:	f7fd fed3 	bl	8001978 <vetor2b_TO_Double>
			verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8003bd2:	4863      	ldr	r0, [pc, #396]	; (8003d60 <rxBluetooth+0x2e4>)
 8003bd4:	f7ff ff2c 	bl	8003a30 <verificaLimiteSetpoint>
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_TETO)
 8003bd8:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003bdc:	8123      	strh	r3, [r4, #8]
 8003bde:	2321      	movs	r3, #33	; 0x21
 8003be0:	2203      	movs	r2, #3
 8003be2:	72a3      	strb	r3, [r4, #10]
 8003be4:	e7d9      	b.n	8003b9a <rxBluetooth+0x11e>
			MACRO_ANULA_INATIVIDADE
 8003be6:	2200      	movs	r2, #0
 8003be8:	4b5a      	ldr	r3, [pc, #360]	; (8003d54 <rxBluetooth+0x2d8>)
			vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr,2);
 8003bea:	495b      	ldr	r1, [pc, #364]	; (8003d58 <rxBluetooth+0x2dc>)
			MACRO_ANULA_INATIVIDADE
 8003bec:	801a      	strh	r2, [r3, #0]
			vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr,2);
 8003bee:	485d      	ldr	r0, [pc, #372]	; (8003d64 <rxBluetooth+0x2e8>)
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f7fd fec1 	bl	8001978 <vetor2b_TO_Double>
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8003bf6:	485c      	ldr	r0, [pc, #368]	; (8003d68 <rxBluetooth+0x2ec>)
 8003bf8:	f7ff ff1a 	bl	8003a30 <verificaLimiteSetpoint>
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_LASTRO)
 8003bfc:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003c00:	8123      	strh	r3, [r4, #8]
 8003c02:	2322      	movs	r3, #34	; 0x22
 8003c04:	e7ec      	b.n	8003be0 <rxBluetooth+0x164>
			MACRO_ANULA_INATIVIDADE
 8003c06:	2200      	movs	r2, #0
 8003c08:	4b52      	ldr	r3, [pc, #328]	; (8003d54 <rxBluetooth+0x2d8>)
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003c0a:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
			MACRO_ANULA_INATIVIDADE
 8003c0e:	801a      	strh	r2, [r3, #0]
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003c10:	4b56      	ldr	r3, [pc, #344]	; (8003d6c <rxBluetooth+0x2f0>)
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8003c12:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003c16:	f883 113a 	strb.w	r1, [r3, #314]	; 0x13a
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8003c1a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003c1e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003c22:	4a53      	ldr	r2, [pc, #332]	; (8003d70 <rxBluetooth+0x2f4>)
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8003c24:	f883 113c 	strb.w	r1, [r3, #316]	; 0x13c
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003c28:	6810      	ldr	r0, [r2, #0]
			if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003c2a:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8003c2e:	2a01      	cmp	r2, #1
 8003c30:	d00e      	beq.n	8003c50 <rxBluetooth+0x1d4>
 8003c32:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 8003c36:	2a01      	cmp	r2, #1
 8003c38:	d00a      	beq.n	8003c50 <rxBluetooth+0x1d4>
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003c3a:	2201      	movs	r2, #1
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003c3c:	2104      	movs	r1, #4
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003c3e:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003c42:	f004 f85e 	bl	8007d02 <osSignalSet>
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMPO)
 8003c46:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003c4a:	8123      	strh	r3, [r4, #8]
 8003c4c:	2323      	movs	r3, #35	; 0x23
 8003c4e:	e7c7      	b.n	8003be0 <rxBluetooth+0x164>
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003c50:	2102      	movs	r1, #2
 8003c52:	e7f6      	b.n	8003c42 <rxBluetooth+0x1c6>
			MACRO_ANULA_INATIVIDADE
 8003c54:	2200      	movs	r2, #0
 8003c56:	4b3f      	ldr	r3, [pc, #252]	; (8003d54 <rxBluetooth+0x2d8>)
 8003c58:	801a      	strh	r2, [r3, #0]
			switch (PrimitiveStates.stateTimer) {
 8003c5a:	4b44      	ldr	r3, [pc, #272]	; (8003d6c <rxBluetooth+0x2f0>)
 8003c5c:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8003c60:	2a01      	cmp	r2, #1
 8003c62:	d033      	beq.n	8003ccc <rxBluetooth+0x250>
 8003c64:	2a02      	cmp	r2, #2
 8003c66:	d01a      	beq.n	8003c9e <rxBluetooth+0x222>
 8003c68:	bb5a      	cbnz	r2, 8003cc2 <rxBluetooth+0x246>
				PrimitiveStates.RTTimerMinutos 	= PrimitiveStates.SPTimerMinutos;
 8003c6a:	f8b3 213a 	ldrh.w	r2, [r3, #314]	; 0x13a
 8003c6e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003c72:	4a3f      	ldr	r2, [pc, #252]	; (8003d70 <rxBluetooth+0x2f4>)
 8003c74:	6810      	ldr	r0, [r2, #0]
				if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003c76:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8003c7a:	2a01      	cmp	r2, #1
 8003c7c:	d00a      	beq.n	8003c94 <rxBluetooth+0x218>
 8003c7e:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 8003c82:	2a01      	cmp	r2, #1
 8003c84:	d006      	beq.n	8003c94 <rxBluetooth+0x218>
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003c86:	2201      	movs	r2, #1
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003c88:	2104      	movs	r1, #4
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003c8a:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003c8e:	f004 f838 	bl	8007d02 <osSignalSet>
				break;
 8003c92:	e016      	b.n	8003cc2 <rxBluetooth+0x246>
					PrimitiveStates.stateTimer = TIMER_idle;
 8003c94:	2200      	movs	r2, #0
					osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003c96:	2102      	movs	r1, #2
					PrimitiveStates.stateTimer = TIMER_idle;
 8003c98:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
					osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003c9c:	e7f7      	b.n	8003c8e <rxBluetooth+0x212>
				if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003c9e:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8003ca2:	2a01      	cmp	r2, #1
 8003ca4:	d00a      	beq.n	8003cbc <rxBluetooth+0x240>
 8003ca6:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 8003caa:	2a01      	cmp	r2, #1
 8003cac:	d006      	beq.n	8003cbc <rxBluetooth+0x240>
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003cae:	2201      	movs	r2, #1
				PrimitiveStates.stateTimer 	= TIMER_pausado;
 8003cb0:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003cb4:	4b2e      	ldr	r3, [pc, #184]	; (8003d70 <rxBluetooth+0x2f4>)
 8003cb6:	2104      	movs	r1, #4
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	e7e8      	b.n	8003c8e <rxBluetooth+0x212>
					PrimitiveStates.stateTimer = TIMER_idle;
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
			MACRO_ENVIA_AKNOLADGE_(RX_TOGGLE_TEMPO)
 8003cc2:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003cc6:	8123      	strh	r3, [r4, #8]
 8003cc8:	2324      	movs	r3, #36	; 0x24
 8003cca:	e789      	b.n	8003be0 <rxBluetooth+0x164>
				PrimitiveStates.stateTimer 	= TIMER_pausado;
 8003ccc:	2202      	movs	r2, #2
 8003cce:	e7ef      	b.n	8003cb0 <rxBluetooth+0x234>
			MACRO_ANULA_INATIVIDADE
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <rxBluetooth+0x2d8>)
			vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr	,2);
 8003cd4:	4920      	ldr	r1, [pc, #128]	; (8003d58 <rxBluetooth+0x2dc>)
			MACRO_ANULA_INATIVIDADE
 8003cd6:	801a      	strh	r2, [r3, #0]
			vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr	,2);
 8003cd8:	4820      	ldr	r0, [pc, #128]	; (8003d5c <rxBluetooth+0x2e0>)
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f7fd fe4c 	bl	8001978 <vetor2b_TO_Double>
			vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr	,4);
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	491d      	ldr	r1, [pc, #116]	; (8003d58 <rxBluetooth+0x2dc>)
 8003ce4:	481f      	ldr	r0, [pc, #124]	; (8003d64 <rxBluetooth+0x2e8>)
 8003ce6:	f7fd fe47 	bl	8001978 <vetor2b_TO_Double>
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8003cea:	481f      	ldr	r0, [pc, #124]	; (8003d68 <rxBluetooth+0x2ec>)
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8003cec:	4d1f      	ldr	r5, [pc, #124]	; (8003d6c <rxBluetooth+0x2f0>)
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8003cee:	f7ff fe9f 	bl	8003a30 <verificaLimiteSetpoint>
			verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8003cf2:	481b      	ldr	r0, [pc, #108]	; (8003d60 <rxBluetooth+0x2e4>)
 8003cf4:	f7ff fe9c 	bl	8003a30 <verificaLimiteSetpoint>
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 8003cf8:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8003cfc:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
			contadorOutput(&PrimitiveStates.outPuts);
 8003d00:	4628      	mov	r0, r5
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 8003d02:	f885 313b 	strb.w	r3, [r5, #315]	; 0x13b
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003d06:	f885 313d 	strb.w	r3, [r5, #317]	; 0x13d
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8003d0a:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8003d0e:	f885 213c 	strb.w	r2, [r5, #316]	; 0x13c
			contadorOutput(&PrimitiveStates.outPuts);
 8003d12:	f7fe f9b2 	bl	800207a <contadorOutput>
			if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003d16:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <rxBluetooth+0x2f4>)
 8003d1e:	d029      	beq.n	8003d74 <rxBluetooth+0x2f8>
 8003d20:	f895 20e4 	ldrb.w	r2, [r5, #228]	; 0xe4
 8003d24:	2a01      	cmp	r2, #1
 8003d26:	d025      	beq.n	8003d74 <rxBluetooth+0x2f8>
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003d28:	2201      	movs	r2, #1
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003d2a:	2104      	movs	r1, #4
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003d2c:	f885 213e 	strb.w	r2, [r5, #318]	; 0x13e
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	f003 ffe6 	bl	8007d02 <osSignalSet>
			MACRO_ENVIA_AKNOLADGE_(RX_RECEITA)
 8003d36:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003d3a:	8123      	strh	r3, [r4, #8]
 8003d3c:	2325      	movs	r3, #37	; 0x25
 8003d3e:	e74f      	b.n	8003be0 <rxBluetooth+0x164>
 8003d40:	20000840 	.word	0x20000840
 8003d44:	20002004 	.word	0x20002004
 8003d48:	200008cc 	.word	0x200008cc
 8003d4c:	2000200c 	.word	0x2000200c
 8003d50:	200007e8 	.word	0x200007e8
 8003d54:	200024e6 	.word	0x200024e6
 8003d58:	20002038 	.word	0x20002038
 8003d5c:	200009a8 	.word	0x200009a8
 8003d60:	20000978 	.word	0x20000978
 8003d64:	200009f0 	.word	0x200009f0
 8003d68:	200009c0 	.word	0x200009c0
 8003d6c:	200008d0 	.word	0x200008d0
 8003d70:	20001d54 	.word	0x20001d54
				PrimitiveStates.stateTimer = TIMER_idle;
 8003d74:	2200      	movs	r2, #0
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003d76:	2102      	movs	r1, #2
				PrimitiveStates.stateTimer = TIMER_idle;
 8003d78:	f885 213e 	strb.w	r2, [r5, #318]	; 0x13e
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003d7c:	e7d8      	b.n	8003d30 <rxBluetooth+0x2b4>
			MACRO_ANULA_INATIVIDADE
 8003d7e:	2500      	movs	r5, #0
 8003d80:	4b5e      	ldr	r3, [pc, #376]	; (8003efc <rxBluetooth+0x480>)
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003d82:	2104      	movs	r1, #4
			MACRO_ANULA_INATIVIDADE
 8003d84:	801d      	strh	r5, [r3, #0]
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003d86:	4b5e      	ldr	r3, [pc, #376]	; (8003f00 <rxBluetooth+0x484>)
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	f003 ffba 	bl	8007d02 <osSignalSet>
			onDigital(&PrimitiveStates.Lampada);
 8003d8e:	485d      	ldr	r0, [pc, #372]	; (8003f04 <rxBluetooth+0x488>)
 8003d90:	f7fe f95f 	bl	8002052 <onDigital>
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA2, 0);
 8003d94:	4b5c      	ldr	r3, [pc, #368]	; (8003f08 <rxBluetooth+0x48c>)
 8003d96:	462a      	mov	r2, r5
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	2117      	movs	r1, #23
 8003d9c:	f004 f833 	bl	8007e06 <osMessagePut>
			MACRO_ENVIA_AKNOLADGE_(RX_LIGA_LAMPADA)
 8003da0:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003da4:	8123      	strh	r3, [r4, #8]
 8003da6:	2327      	movs	r3, #39	; 0x27
 8003da8:	e71a      	b.n	8003be0 <rxBluetooth+0x164>
			MACRO_ANULA_INATIVIDADE
 8003daa:	2500      	movs	r5, #0
 8003dac:	4b53      	ldr	r3, [pc, #332]	; (8003efc <rxBluetooth+0x480>)
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003dae:	2104      	movs	r1, #4
			MACRO_ANULA_INATIVIDADE
 8003db0:	801d      	strh	r5, [r3, #0]
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003db2:	4b53      	ldr	r3, [pc, #332]	; (8003f00 <rxBluetooth+0x484>)
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	f003 ffa4 	bl	8007d02 <osSignalSet>
			offDigital(&PrimitiveStates.Lampada);
 8003dba:	4852      	ldr	r0, [pc, #328]	; (8003f04 <rxBluetooth+0x488>)
 8003dbc:	f7fe f953 	bl	8002066 <offDigital>
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA2, 0);
 8003dc0:	4b51      	ldr	r3, [pc, #324]	; (8003f08 <rxBluetooth+0x48c>)
 8003dc2:	462a      	mov	r2, r5
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	2117      	movs	r1, #23
 8003dc8:	f004 f81d 	bl	8007e06 <osMessagePut>
			MACRO_ENVIA_AKNOLADGE_(RX_DESLIGA_LAMPADA)
 8003dcc:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003dd0:	8123      	strh	r3, [r4, #8]
 8003dd2:	2328      	movs	r3, #40	; 0x28
 8003dd4:	e704      	b.n	8003be0 <rxBluetooth+0x164>
			PrimitiveStates.Lampada.limitOn = bluetooth._RxDataArr[3];
 8003dd6:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 8003dda:	4b4c      	ldr	r3, [pc, #304]	; (8003f0c <rxBluetooth+0x490>)
			osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 8003ddc:	2106      	movs	r1, #6
			PrimitiveStates.Lampada.limitOn = bluetooth._RxDataArr[3];
 8003dde:	875a      	strh	r2, [r3, #58]	; 0x3a
			osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 8003de0:	4b4b      	ldr	r3, [pc, #300]	; (8003f10 <rxBluetooth+0x494>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	f004 f80e 	bl	8007e06 <osMessagePut>
			FlagSincronia.cont=0;
 8003dea:	2200      	movs	r2, #0
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003dec:	2118      	movs	r1, #24
			FlagSincronia.cont=0;
 8003dee:	4b49      	ldr	r3, [pc, #292]	; (8003f14 <rxBluetooth+0x498>)
 8003df0:	705a      	strb	r2, [r3, #1]
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA3, 0);
 8003df2:	4b45      	ldr	r3, [pc, #276]	; (8003f08 <rxBluetooth+0x48c>)
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	f004 f806 	bl	8007e06 <osMessagePut>
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003dfa:	2104      	movs	r1, #4
 8003dfc:	4b40      	ldr	r3, [pc, #256]	; (8003f00 <rxBluetooth+0x484>)
 8003dfe:	6818      	ldr	r0, [r3, #0]
}
 8003e00:	b007      	add	sp, #28
 8003e02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003e06:	f003 bf7c 	b.w	8007d02 <osSignalSet>
			desligaForno();
 8003e0a:	f7fe fdb5 	bl	8002978 <desligaForno>
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003e0e:	4b3c      	ldr	r3, [pc, #240]	; (8003f00 <rxBluetooth+0x484>)
 8003e10:	2104      	movs	r1, #4
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	f003 ff75 	bl	8007d02 <osSignalSet>
			MACRO_ENVIA_AKNOLADGE_(RX_CANCELA_PROCESSO)
 8003e18:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003e1c:	8123      	strh	r3, [r4, #8]
 8003e1e:	2329      	movs	r3, #41	; 0x29
 8003e20:	e6de      	b.n	8003be0 <rxBluetooth+0x164>
			MACRO_ANULA_INATIVIDADE
 8003e22:	2400      	movs	r4, #0
 8003e24:	4b35      	ldr	r3, [pc, #212]	; (8003efc <rxBluetooth+0x480>)
			vetor4b_TO_Double(&PrimitiveStates.Teto.kp,bluetooth._RxDataArr,2);
 8003e26:	2202      	movs	r2, #2
 8003e28:	493b      	ldr	r1, [pc, #236]	; (8003f18 <rxBluetooth+0x49c>)
 8003e2a:	483c      	ldr	r0, [pc, #240]	; (8003f1c <rxBluetooth+0x4a0>)
			MACRO_ANULA_INATIVIDADE
 8003e2c:	801c      	strh	r4, [r3, #0]
			vetor4b_TO_Double(&PrimitiveStates.Teto.kp,bluetooth._RxDataArr,2);
 8003e2e:	f7fd fd75 	bl	800191c <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Teto.ki,bluetooth._RxDataArr,6);
 8003e32:	2206      	movs	r2, #6
 8003e34:	4938      	ldr	r1, [pc, #224]	; (8003f18 <rxBluetooth+0x49c>)
 8003e36:	483a      	ldr	r0, [pc, #232]	; (8003f20 <rxBluetooth+0x4a4>)
 8003e38:	f7fd fd70 	bl	800191c <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Teto.kd,bluetooth._RxDataArr,10);
 8003e3c:	220a      	movs	r2, #10
 8003e3e:	4936      	ldr	r1, [pc, #216]	; (8003f18 <rxBluetooth+0x49c>)
 8003e40:	4838      	ldr	r0, [pc, #224]	; (8003f24 <rxBluetooth+0x4a8>)
 8003e42:	f7fd fd6b 	bl	800191c <vetor4b_TO_Double>
			vetor2b_TO_uint16(&PrimitiveStates.Teto.histerese,bluetooth._RxDataArr,14);
 8003e46:	220e      	movs	r2, #14
 8003e48:	4933      	ldr	r1, [pc, #204]	; (8003f18 <rxBluetooth+0x49c>)
 8003e4a:	4837      	ldr	r0, [pc, #220]	; (8003f28 <rxBluetooth+0x4ac>)
 8003e4c:	f7fd fd82 	bl	8001954 <vetor2b_TO_uint16>
			vetor2b_TO_uint16(&PrimitiveStates.Teto.limite ,bluetooth._RxDataArr,16);
 8003e50:	2210      	movs	r2, #16
 8003e52:	4931      	ldr	r1, [pc, #196]	; (8003f18 <rxBluetooth+0x49c>)
 8003e54:	4835      	ldr	r0, [pc, #212]	; (8003f2c <rxBluetooth+0x4b0>)
 8003e56:	f7fd fd7d 	bl	8001954 <vetor2b_TO_uint16>
			verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8003e5a:	4835      	ldr	r0, [pc, #212]	; (8003f30 <rxBluetooth+0x4b4>)
 8003e5c:	f7ff fde8 	bl	8003a30 <verificaLimiteSetpoint>
			osMessagePut(FilaEepromHandle, CEepromTunning, 0);
 8003e60:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <rxBluetooth+0x494>)
 8003e62:	4622      	mov	r2, r4
 8003e64:	210a      	movs	r1, #10
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	f003 ffcd 	bl	8007e06 <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA2, 0);
 8003e6c:	4622      	mov	r2, r4
 8003e6e:	2119      	movs	r1, #25
 8003e70:	e7bf      	b.n	8003df2 <rxBluetooth+0x376>
			MACRO_ANULA_INATIVIDADE
 8003e72:	2400      	movs	r4, #0
 8003e74:	4b21      	ldr	r3, [pc, #132]	; (8003efc <rxBluetooth+0x480>)
			vetor4b_TO_Double(&PrimitiveStates.Lastro.kp,bluetooth._RxDataArr,2);
 8003e76:	2202      	movs	r2, #2
 8003e78:	4927      	ldr	r1, [pc, #156]	; (8003f18 <rxBluetooth+0x49c>)
 8003e7a:	482e      	ldr	r0, [pc, #184]	; (8003f34 <rxBluetooth+0x4b8>)
			MACRO_ANULA_INATIVIDADE
 8003e7c:	801c      	strh	r4, [r3, #0]
			vetor4b_TO_Double(&PrimitiveStates.Lastro.kp,bluetooth._RxDataArr,2);
 8003e7e:	f7fd fd4d 	bl	800191c <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Lastro.ki,bluetooth._RxDataArr,6);
 8003e82:	2206      	movs	r2, #6
 8003e84:	4924      	ldr	r1, [pc, #144]	; (8003f18 <rxBluetooth+0x49c>)
 8003e86:	482c      	ldr	r0, [pc, #176]	; (8003f38 <rxBluetooth+0x4bc>)
 8003e88:	f7fd fd48 	bl	800191c <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Lastro.kd,bluetooth._RxDataArr,10);
 8003e8c:	220a      	movs	r2, #10
 8003e8e:	4922      	ldr	r1, [pc, #136]	; (8003f18 <rxBluetooth+0x49c>)
 8003e90:	482a      	ldr	r0, [pc, #168]	; (8003f3c <rxBluetooth+0x4c0>)
 8003e92:	f7fd fd43 	bl	800191c <vetor4b_TO_Double>
			vetor2b_TO_uint16(&PrimitiveStates.Lastro.histerese,bluetooth._RxDataArr,14);
 8003e96:	220e      	movs	r2, #14
 8003e98:	491f      	ldr	r1, [pc, #124]	; (8003f18 <rxBluetooth+0x49c>)
 8003e9a:	4829      	ldr	r0, [pc, #164]	; (8003f40 <rxBluetooth+0x4c4>)
 8003e9c:	f7fd fd5a 	bl	8001954 <vetor2b_TO_uint16>
			vetor2b_TO_uint16(&PrimitiveStates.Lastro.limite ,bluetooth._RxDataArr,16);
 8003ea0:	2210      	movs	r2, #16
 8003ea2:	491d      	ldr	r1, [pc, #116]	; (8003f18 <rxBluetooth+0x49c>)
 8003ea4:	4827      	ldr	r0, [pc, #156]	; (8003f44 <rxBluetooth+0x4c8>)
 8003ea6:	f7fd fd55 	bl	8001954 <vetor2b_TO_uint16>
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8003eaa:	4827      	ldr	r0, [pc, #156]	; (8003f48 <rxBluetooth+0x4cc>)
 8003eac:	f7ff fdc0 	bl	8003a30 <verificaLimiteSetpoint>
			osMessagePut(FilaEepromHandle, CEepromTunning, 0);
 8003eb0:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <rxBluetooth+0x494>)
 8003eb2:	4622      	mov	r2, r4
 8003eb4:	210a      	movs	r1, #10
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	f003 ffa5 	bl	8007e06 <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA3, 0);
 8003ebc:	4622      	mov	r2, r4
 8003ebe:	2120      	movs	r1, #32
 8003ec0:	e797      	b.n	8003df2 <rxBluetooth+0x376>
			MACRO_ANULA_INATIVIDADE
 8003ec2:	2200      	movs	r2, #0
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003ec4:	4c0e      	ldr	r4, [pc, #56]	; (8003f00 <rxBluetooth+0x484>)
			MACRO_ANULA_INATIVIDADE
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <rxBluetooth+0x480>)
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003ec8:	2104      	movs	r1, #4
 8003eca:	6820      	ldr	r0, [r4, #0]
			MACRO_ANULA_INATIVIDADE
 8003ecc:	801a      	strh	r2, [r3, #0]
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003ece:	f003 ff18 	bl	8007d02 <osSignalSet>
			PrimitiveStates.Buzzer = !PrimitiveStates.Buzzer;
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <rxBluetooth+0x490>)
 8003ed4:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 8003ed8:	2a00      	cmp	r2, #0
 8003eda:	bf0c      	ite	eq
 8003edc:	2201      	moveq	r2, #1
 8003ede:	2200      	movne	r2, #0
 8003ee0:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
			if(PrimitiveStates.Buzzer){
 8003ee4:	d103      	bne.n	8003eee <rxBluetooth+0x472>
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003ee6:	2104      	movs	r1, #4
 8003ee8:	6820      	ldr	r0, [r4, #0]
 8003eea:	f003 ff0a 	bl	8007d02 <osSignalSet>
			osMessagePut(FilaEepromHandle, CEepromToogleBuzzer, 0);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	210b      	movs	r1, #11
 8003ef2:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <rxBluetooth+0x494>)
 8003ef4:	e62f      	b.n	8003b56 <rxBluetooth+0xda>
}
 8003ef6:	b007      	add	sp, #28
 8003ef8:	bd30      	pop	{r4, r5, pc}
 8003efa:	bf00      	nop
 8003efc:	200024e6 	.word	0x200024e6
 8003f00:	20001d54 	.word	0x20001d54
 8003f04:	200008fc 	.word	0x200008fc
 8003f08:	200008cc 	.word	0x200008cc
 8003f0c:	200008d0 	.word	0x200008d0
 8003f10:	200007e8 	.word	0x200007e8
 8003f14:	200024e4 	.word	0x200024e4
 8003f18:	20002038 	.word	0x20002038
 8003f1c:	20000980 	.word	0x20000980
 8003f20:	20000988 	.word	0x20000988
 8003f24:	20000990 	.word	0x20000990
 8003f28:	200009b2 	.word	0x200009b2
 8003f2c:	200009b0 	.word	0x200009b0
 8003f30:	20000978 	.word	0x20000978
 8003f34:	200009c8 	.word	0x200009c8
 8003f38:	200009d0 	.word	0x200009d0
 8003f3c:	200009d8 	.word	0x200009d8
 8003f40:	200009fa 	.word	0x200009fa
 8003f44:	200009f8 	.word	0x200009f8
 8003f48:	200009c0 	.word	0x200009c0

08003f4c <StartBluetooth>:
{
 8003f4c:	b508      	push	{r3, lr}
	initBluetooth();
 8003f4e:	f7ff fb4b 	bl	80035e8 <initBluetooth>
		txBleComando(&bluetooth);
 8003f52:	4c07      	ldr	r4, [pc, #28]	; (8003f70 <StartBluetooth+0x24>)
 8003f54:	4620      	mov	r0, r4
 8003f56:	f7fd f939 	bl	80011cc <txBleComando>
		rxBluetooth();
 8003f5a:	f7ff fd8f 	bl	8003a7c <rxBluetooth>
		txBluetooth();
 8003f5e:	f7ff fc45 	bl	80037ec <txBluetooth>
		osThreadYield();
 8003f62:	f003 fe79 	bl	8007c58 <osThreadYield>
		osDelay(40);
 8003f66:	2028      	movs	r0, #40	; 0x28
 8003f68:	f003 fe82 	bl	8007c70 <osDelay>
	for(;;)
 8003f6c:	e7f2      	b.n	8003f54 <StartBluetooth+0x8>
 8003f6e:	bf00      	nop
 8003f70:	20002004 	.word	0x20002004

08003f74 <sequencia2Buzzer>:
		M_BUZZER_OFF
		offDigital(&PrimitiveStates.Lampada);
		osDelay(100);
	}
}
void sequencia2Buzzer(void){
 8003f74:	b538      	push	{r3, r4, r5, lr}
	M_BUZZER_ON
 8003f76:	4d0a      	ldr	r5, [pc, #40]	; (8003fa0 <sequencia2Buzzer+0x2c>)
	onDigital(&PrimitiveStates.Lampada);
 8003f78:	4c0a      	ldr	r4, [pc, #40]	; (8003fa4 <sequencia2Buzzer+0x30>)
	M_BUZZER_ON
 8003f7a:	210c      	movs	r1, #12
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f003 f955 	bl	800722c <HAL_TIM_PWM_Start>
	onDigital(&PrimitiveStates.Lampada);
 8003f82:	4620      	mov	r0, r4
 8003f84:	f7fe f865 	bl	8002052 <onDigital>
	osDelay(100);
 8003f88:	2064      	movs	r0, #100	; 0x64
 8003f8a:	f003 fe71 	bl	8007c70 <osDelay>
	M_BUZZER_OFF
 8003f8e:	4628      	mov	r0, r5
 8003f90:	210c      	movs	r1, #12
 8003f92:	f003 f987 	bl	80072a4 <HAL_TIM_PWM_Stop>
	offDigital(&PrimitiveStates.Lampada);
 8003f96:	4620      	mov	r0, r4
}
 8003f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	offDigital(&PrimitiveStates.Lampada);
 8003f9c:	f7fe b863 	b.w	8002066 <offDigital>
 8003fa0:	200022d0 	.word	0x200022d0
 8003fa4:	200008fc 	.word	0x200008fc

08003fa8 <waitBuzzerSignal>:
void waitBuzzerSignal(void){
 8003fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003faa:	b085      	sub	sp, #20
	const int32_t signals = SINAL_TEMP_REACH | SINAL_COMFIRMA | SINAL_NEGADO | SINAL_PRONTO;
	osEvent evt;

	// Aguarde até que qualquer um dos sinais seja recebido
	evt = osSignalWait(signals, osWaitForever);
 8003fac:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb0:	210f      	movs	r1, #15
 8003fb2:	a801      	add	r0, sp, #4
 8003fb4:	f003 fece 	bl	8007d54 <osSignalWait>

	// Verifique os sinais
	if (evt.status == osEventSignal) {
 8003fb8:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d17a      	bne.n	80040b6 <waitBuzzerSignal+0x10e>

		if (evt.value.signals & SINAL_TEMP_REACH) {
 8003fc0:	07e0      	lsls	r0, r4, #31
 8003fc2:	d518      	bpl.n	8003ff6 <waitBuzzerSignal+0x4e>
 8003fc4:	2505      	movs	r5, #5
			// execute o padrão de buzzer para SINAL_TEMP_REACH
			for (int i = 0; i < 5; ++i) {
				M_BUZZER_ON
 8003fc6:	4f3d      	ldr	r7, [pc, #244]	; (80040bc <waitBuzzerSignal+0x114>)
				onDigital(&PrimitiveStates.Lampada);
 8003fc8:	4e3d      	ldr	r6, [pc, #244]	; (80040c0 <waitBuzzerSignal+0x118>)
				M_BUZZER_ON
 8003fca:	210c      	movs	r1, #12
 8003fcc:	4638      	mov	r0, r7
 8003fce:	f003 f92d 	bl	800722c <HAL_TIM_PWM_Start>
				onDigital(&PrimitiveStates.Lampada);
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	f7fe f83d 	bl	8002052 <onDigital>
				osDelay(50);
 8003fd8:	2032      	movs	r0, #50	; 0x32
 8003fda:	f003 fe49 	bl	8007c70 <osDelay>
				M_BUZZER_OFF
 8003fde:	210c      	movs	r1, #12
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	f003 f95f 	bl	80072a4 <HAL_TIM_PWM_Stop>
				offDigital(&PrimitiveStates.Lampada);
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	f7fe f83d 	bl	8002066 <offDigital>
				osDelay(30);
 8003fec:	201e      	movs	r0, #30
 8003fee:	f003 fe3f 	bl	8007c70 <osDelay>
			for (int i = 0; i < 5; ++i) {
 8003ff2:	3d01      	subs	r5, #1
 8003ff4:	d1e9      	bne.n	8003fca <waitBuzzerSignal+0x22>
			}
		}

		if (evt.value.signals & SINAL_COMFIRMA) {
 8003ff6:	0761      	lsls	r1, r4, #29
 8003ff8:	d519      	bpl.n	800402e <waitBuzzerSignal+0x86>
			//retorna caso buzzer desabilitado
			if(!PrimitiveStates.Buzzer){
 8003ffa:	4b32      	ldr	r3, [pc, #200]	; (80040c4 <waitBuzzerSignal+0x11c>)
 8003ffc:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8004000:	b933      	cbnz	r3, 8004010 <waitBuzzerSignal+0x68>
				M_BUZZER_OFF
 8004002:	210c      	movs	r1, #12
 8004004:	482d      	ldr	r0, [pc, #180]	; (80040bc <waitBuzzerSignal+0x114>)
				osDelay(100);
			}
			onDigital(&PrimitiveStates.Lampada);//DEIXA LAMPADA LIGADA
		}
	}
}
 8004006:	b005      	add	sp, #20
 8004008:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				M_BUZZER_OFF
 800400c:	f003 b94a 	b.w	80072a4 <HAL_TIM_PWM_Stop>
			M_BUZZER_ON
 8004010:	210c      	movs	r1, #12
 8004012:	482a      	ldr	r0, [pc, #168]	; (80040bc <waitBuzzerSignal+0x114>)
 8004014:	f003 f90a 	bl	800722c <HAL_TIM_PWM_Start>
			osDelay(70);
 8004018:	2046      	movs	r0, #70	; 0x46
 800401a:	f003 fe29 	bl	8007c70 <osDelay>
			M_BUZZER_OFF
 800401e:	210c      	movs	r1, #12
 8004020:	4826      	ldr	r0, [pc, #152]	; (80040bc <waitBuzzerSignal+0x114>)
 8004022:	f003 f93f 	bl	80072a4 <HAL_TIM_PWM_Stop>
			osDelay(500);
 8004026:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800402a:	f003 fe21 	bl	8007c70 <osDelay>
		if (evt.value.signals & SINAL_NEGADO) {
 800402e:	07a2      	lsls	r2, r4, #30
 8004030:	d520      	bpl.n	8004074 <waitBuzzerSignal+0xcc>
			if(!PrimitiveStates.Buzzer){
 8004032:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <waitBuzzerSignal+0x11c>)
 8004034:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0e2      	beq.n	8004002 <waitBuzzerSignal+0x5a>
				M_BUZZER_ON
 800403c:	210c      	movs	r1, #12
 800403e:	481f      	ldr	r0, [pc, #124]	; (80040bc <waitBuzzerSignal+0x114>)
 8004040:	f003 f8f4 	bl	800722c <HAL_TIM_PWM_Start>
				osDelay(70);
 8004044:	2046      	movs	r0, #70	; 0x46
 8004046:	f003 fe13 	bl	8007c70 <osDelay>
				M_BUZZER_OFF
 800404a:	210c      	movs	r1, #12
 800404c:	481b      	ldr	r0, [pc, #108]	; (80040bc <waitBuzzerSignal+0x114>)
 800404e:	f003 f929 	bl	80072a4 <HAL_TIM_PWM_Stop>
				osDelay(50);
 8004052:	2032      	movs	r0, #50	; 0x32
 8004054:	f003 fe0c 	bl	8007c70 <osDelay>
				M_BUZZER_ON
 8004058:	210c      	movs	r1, #12
 800405a:	4818      	ldr	r0, [pc, #96]	; (80040bc <waitBuzzerSignal+0x114>)
 800405c:	f003 f8e6 	bl	800722c <HAL_TIM_PWM_Start>
				osDelay(70);
 8004060:	2046      	movs	r0, #70	; 0x46
 8004062:	f003 fe05 	bl	8007c70 <osDelay>
				M_BUZZER_OFF
 8004066:	210c      	movs	r1, #12
 8004068:	4814      	ldr	r0, [pc, #80]	; (80040bc <waitBuzzerSignal+0x114>)
 800406a:	f003 f91b 	bl	80072a4 <HAL_TIM_PWM_Stop>
				osDelay(50);
 800406e:	2032      	movs	r0, #50	; 0x32
 8004070:	f003 fdfe 	bl	8007c70 <osDelay>
		if (evt.value.signals & SINAL_PRONTO) {
 8004074:	0723      	lsls	r3, r4, #28
 8004076:	d51e      	bpl.n	80040b6 <waitBuzzerSignal+0x10e>
 8004078:	240a      	movs	r4, #10
				M_BUZZER_ON
 800407a:	4e10      	ldr	r6, [pc, #64]	; (80040bc <waitBuzzerSignal+0x114>)
				onDigital(&PrimitiveStates.Lampada);
 800407c:	4d10      	ldr	r5, [pc, #64]	; (80040c0 <waitBuzzerSignal+0x118>)
				M_BUZZER_ON
 800407e:	210c      	movs	r1, #12
 8004080:	4630      	mov	r0, r6
 8004082:	f003 f8d3 	bl	800722c <HAL_TIM_PWM_Start>
				onDigital(&PrimitiveStates.Lampada);
 8004086:	4628      	mov	r0, r5
 8004088:	f7fd ffe3 	bl	8002052 <onDigital>
				osDelay(250);
 800408c:	20fa      	movs	r0, #250	; 0xfa
 800408e:	f003 fdef 	bl	8007c70 <osDelay>
				M_BUZZER_OFF
 8004092:	210c      	movs	r1, #12
 8004094:	4630      	mov	r0, r6
 8004096:	f003 f905 	bl	80072a4 <HAL_TIM_PWM_Stop>
				offDigital(&PrimitiveStates.Lampada);
 800409a:	4628      	mov	r0, r5
 800409c:	f7fd ffe3 	bl	8002066 <offDigital>
				osDelay(100);
 80040a0:	2064      	movs	r0, #100	; 0x64
 80040a2:	f003 fde5 	bl	8007c70 <osDelay>
			for (int i = 0; i < 10; ++i) {
 80040a6:	3c01      	subs	r4, #1
 80040a8:	d1e9      	bne.n	800407e <waitBuzzerSignal+0xd6>
			onDigital(&PrimitiveStates.Lampada);//DEIXA LAMPADA LIGADA
 80040aa:	4805      	ldr	r0, [pc, #20]	; (80040c0 <waitBuzzerSignal+0x118>)
}
 80040ac:	b005      	add	sp, #20
 80040ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			onDigital(&PrimitiveStates.Lampada);//DEIXA LAMPADA LIGADA
 80040b2:	f7fd bfce 	b.w	8002052 <onDigital>
}
 80040b6:	b005      	add	sp, #20
 80040b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200022d0 	.word	0x200022d0
 80040c0:	200008fc 	.word	0x200008fc
 80040c4:	200008d0 	.word	0x200008d0

080040c8 <StartBuzzer>:
{
 80040c8:	b508      	push	{r3, lr}
	sequencia2Buzzer();
 80040ca:	f7ff ff53 	bl	8003f74 <sequencia2Buzzer>
		waitBuzzerSignal();
 80040ce:	f7ff ff6b 	bl	8003fa8 <waitBuzzerSignal>
		osThreadYield();
 80040d2:	f003 fdc1 	bl	8007c58 <osThreadYield>
		osDelay(100);
 80040d6:	2064      	movs	r0, #100	; 0x64
 80040d8:	f003 fdca 	bl	8007c70 <osDelay>
	for(;;)
 80040dc:	e7f7      	b.n	80040ce <StartBuzzer+0x6>
	...

080040e0 <initEeprom>:
		osThreadYield();
		osDelay(500);
	}
}

void initEeprom(void){
 80040e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	//inicializacao ad eeprom
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 80040e4:	4dc0      	ldr	r5, [pc, #768]	; (80043e8 <initEeprom+0x308>)
void initEeprom(void){
 80040e6:	b08b      	sub	sp, #44	; 0x2c
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 80040e8:	4628      	mov	r0, r5
 80040ea:	4ac0      	ldr	r2, [pc, #768]	; (80043ec <initEeprom+0x30c>)
 80040ec:	49c0      	ldr	r1, [pc, #768]	; (80043f0 <initEeprom+0x310>)

	//criacao dos objetos variaveis
	EepromAddVar(&eeprom,0,&tempoDelayLuz, 		"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA16BITS,	0,		45,		60000	,&PrimitiveStates.Lampada.limitOn);
 80040ee:	2400      	movs	r4, #0
 80040f0:	2601      	movs	r6, #1
 80040f2:	f04f 0802 	mov.w	r8, #2
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 80040f6:	f7fd fca3 	bl	8001a40 <EepromInit>
	EepromAddVar(&eeprom,0,&tempoDelayLuz, 		"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA16BITS,	0,		45,		60000	,&PrimitiveStates.Lampada.limitOn);
 80040fa:	f64e 2960 	movw	r9, #60000	; 0xea60
 80040fe:	232d      	movs	r3, #45	; 0x2d
	EepromAddVar(&eeprom,1,&horimetroHoras, 	"addrHORIMETRO", 		addrHORIMETRO,		DATA16BITS,	0,		0,		60000	,&Calendario.Horimetro_horas);
 8004100:	f04f 0b03 	mov.w	fp, #3
	EepromAddVar(&eeprom,0,&tempoDelayLuz, 		"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA16BITS,	0,		45,		60000	,&PrimitiveStates.Lampada.limitOn);
 8004104:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 80043f4 <initEeprom+0x314>
	EepromAddVar(&eeprom,1,&horimetroHoras, 	"addrHORIMETRO", 		addrHORIMETRO,		DATA16BITS,	0,		0,		60000	,&Calendario.Horimetro_horas);
 8004108:	4fbb      	ldr	r7, [pc, #748]	; (80043f8 <initEeprom+0x318>)
	EepromAddVar(&eeprom,0,&tempoDelayLuz, 		"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA16BITS,	0,		45,		60000	,&PrimitiveStates.Lampada.limitOn);
 800410a:	e9cd 3903 	strd	r3, r9, [sp, #12]
 800410e:	4621      	mov	r1, r4
 8004110:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8004114:	9600      	str	r6, [sp, #0]
 8004116:	4628      	mov	r0, r5
 8004118:	4bb8      	ldr	r3, [pc, #736]	; (80043fc <initEeprom+0x31c>)
 800411a:	4ab9      	ldr	r2, [pc, #740]	; (8004400 <initEeprom+0x320>)
 800411c:	f8cd a014 	str.w	sl, [sp, #20]
 8004120:	f7fd fc47 	bl	80019b2 <EepromAddVar>
	EepromAddVar(&eeprom,1,&horimetroHoras, 	"addrHORIMETRO", 		addrHORIMETRO,		DATA16BITS,	0,		0,		60000	,&Calendario.Horimetro_horas);
 8004124:	e9cd 9704 	strd	r9, r7, [sp, #16]
 8004128:	4631      	mov	r1, r6
 800412a:	f8cd 8004 	str.w	r8, [sp, #4]
 800412e:	f8cd b000 	str.w	fp, [sp]
 8004132:	4628      	mov	r0, r5
 8004134:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004138:	4bb2      	ldr	r3, [pc, #712]	; (8004404 <initEeprom+0x324>)
 800413a:	4ab3      	ldr	r2, [pc, #716]	; (8004408 <initEeprom+0x328>)
 800413c:	f7fd fc39 	bl	80019b2 <EepromAddVar>
	EepromAddVar(&eeprom,1,&horimetroMinutos, 	"addrMINUTIMETRO", 		addrMINUTIMETRO,	DATA8BITS,	0,		0,		254		,&Calendario.Horimetro_parcial_min);
 8004140:	eb07 0308 	add.w	r3, r7, r8
 8004144:	9305      	str	r3, [sp, #20]
 8004146:	23fe      	movs	r3, #254	; 0xfe
 8004148:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800414c:	2305      	movs	r3, #5
 800414e:	4631      	mov	r1, r6
 8004150:	e9cd 6401 	strd	r6, r4, [sp, #4]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	4628      	mov	r0, r5
 8004158:	4bac      	ldr	r3, [pc, #688]	; (800440c <initEeprom+0x32c>)
 800415a:	4aad      	ldr	r2, [pc, #692]	; (8004410 <initEeprom+0x330>)
 800415c:	f7fd fc29 	bl	80019b2 <EepromAddVar>
	EepromAddVar(&eeprom,1,&instalacaoDia, 		"addrINST_DIA", 		addrINST_DIA,		DATA8BITS,	1,		0,		31		,&Calendario.Data_instalacao.Date);
 8004160:	1ebb      	subs	r3, r7, #2
 8004162:	9305      	str	r3, [sp, #20]
 8004164:	231f      	movs	r3, #31
 8004166:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800416a:	2306      	movs	r3, #6
 800416c:	4631      	mov	r1, r6
 800416e:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	4628      	mov	r0, r5
 8004176:	4ba7      	ldr	r3, [pc, #668]	; (8004414 <initEeprom+0x334>)
 8004178:	4aa7      	ldr	r2, [pc, #668]	; (8004418 <initEeprom+0x338>)
 800417a:	f7fd fc1a 	bl	80019b2 <EepromAddVar>
	EepromAddVar(&eeprom,1,&instalacaoMes, 		"addrINST_MES", 		addrINST_MES,		DATA8BITS,	1,		1,		12		,&Calendario.Data_instalacao.Month);
 800417e:	1efb      	subs	r3, r7, #3
 8004180:	9305      	str	r3, [sp, #20]
 8004182:	230c      	movs	r3, #12
 8004184:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8004188:	2307      	movs	r3, #7
 800418a:	4631      	mov	r1, r6
 800418c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	4628      	mov	r0, r5
 8004194:	4ba1      	ldr	r3, [pc, #644]	; (800441c <initEeprom+0x33c>)
 8004196:	4aa2      	ldr	r2, [pc, #648]	; (8004420 <initEeprom+0x340>)
 8004198:	f7fd fc0b 	bl	80019b2 <EepromAddVar>
	EepromAddVar(&eeprom,1,&instalacaoAno, 		"addrINST_ANO", 		addrINST_ANO,		DATA8BITS,	23,		23,		99		,&Calendario.Data_instalacao.Year);
 800419c:	1e7b      	subs	r3, r7, #1
 800419e:	9305      	str	r3, [sp, #20]
 80041a0:	2263      	movs	r2, #99	; 0x63
 80041a2:	2317      	movs	r3, #23
 80041a4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80041a8:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80041ac:	2308      	movs	r3, #8
 80041ae:	4631      	mov	r1, r6
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	4628      	mov	r0, r5
 80041b4:	4b9b      	ldr	r3, [pc, #620]	; (8004424 <initEeprom+0x344>)
 80041b6:	4a9c      	ldr	r2, [pc, #624]	; (8004428 <initEeprom+0x348>)
 80041b8:	f7fd fbfb 	bl	80019b2 <EepromAddVar>
	EepromAddVar(&eeprom,1,&totalCiclos, 		"addrTOTAL_GERAL", 		addrTOTAL_GERAL,	DATA16BITS,	0,		0,		60000	,&Calendario.TotalCiclos);
 80041bc:	1d3b      	adds	r3, r7, #4
 80041be:	e9cd 9304 	strd	r9, r3, [sp, #16]
 80041c2:	2309      	movs	r3, #9
 80041c4:	4631      	mov	r1, r6
 80041c6:	f8cd 8004 	str.w	r8, [sp, #4]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	4628      	mov	r0, r5
 80041ce:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80041d2:	4b96      	ldr	r3, [pc, #600]	; (800442c <initEeprom+0x34c>)
 80041d4:	4a96      	ldr	r2, [pc, #600]	; (8004430 <initEeprom+0x350>)
 80041d6:	f7fd fbec 	bl	80019b2 <EepromAddVar>
	EepromAddVar(&eeprom,1,&ContTetoMax, 		"addrCONT_MAX_TETO", 	addrCONT_MAX_TETO,	DATA16BITS,	0,		0,		60000	,&Calendario.ContMaxTeto);
 80041da:	1dbb      	adds	r3, r7, #6
 80041dc:	e9cd 9304 	strd	r9, r3, [sp, #16]
 80041e0:	230b      	movs	r3, #11
 80041e2:	4631      	mov	r1, r6
 80041e4:	f8cd 8004 	str.w	r8, [sp, #4]
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	4628      	mov	r0, r5
 80041ec:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80041f0:	4b90      	ldr	r3, [pc, #576]	; (8004434 <initEeprom+0x354>)
 80041f2:	4a91      	ldr	r2, [pc, #580]	; (8004438 <initEeprom+0x358>)
 80041f4:	f7fd fbdd 	bl	80019b2 <EepromAddVar>
	EepromAddVar(&eeprom,1,&ContLastroMax, 		"addrCONT_MAX_LASTRO", 	addrCONT_MAX_LASTRO,DATA16BITS,	0,		0,		60000	,&Calendario.ContMaxLastro);
 80041f8:	230d      	movs	r3, #13
 80041fa:	3708      	adds	r7, #8
 80041fc:	e9cd 9704 	strd	r9, r7, [sp, #16]
 8004200:	4631      	mov	r1, r6
 8004202:	f8cd 8004 	str.w	r8, [sp, #4]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	4628      	mov	r0, r5
 800420a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800420e:	4b8b      	ldr	r3, [pc, #556]	; (800443c <initEeprom+0x35c>)
 8004210:	4a8b      	ldr	r2, [pc, #556]	; (8004440 <initEeprom+0x360>)
 8004212:	f7fd fbce 	bl	80019b2 <EepromAddVar>

	EepromAddVar(&eeprom,0,&hitereseStateTeto, 	"addrTETO_HIST", 		addrTETO_HIST,		DATA16BITS,	0,		STD_HISTERESE,10	,&PrimitiveStates.Teto.histerese);
 8004216:	f10a 03a8 	add.w	r3, sl, #168	; 0xa8
 800421a:	f04f 090a 	mov.w	r9, #10
 800421e:	9305      	str	r3, [sp, #20]
 8004220:	2329      	movs	r3, #41	; 0x29
 8004222:	e9cd b903 	strd	fp, r9, [sp, #12]
 8004226:	4621      	mov	r1, r4
 8004228:	e9cd 8401 	strd	r8, r4, [sp, #4]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	4628      	mov	r0, r5
 8004230:	4b84      	ldr	r3, [pc, #528]	; (8004444 <initEeprom+0x364>)
 8004232:	4a85      	ldr	r2, [pc, #532]	; (8004448 <initEeprom+0x368>)
 8004234:	f7fd fbbd 	bl	80019b2 <EepromAddVar>
	EepromAddVar(&eeprom,0,&limiteTeto, 		"addrTETO_LIMIT", 		addrTETO_LIMIT,		DATA16BITS,	0,		475			,500	,&PrimitiveStates.Teto.limite);
 8004238:	f10a 03a6 	add.w	r3, sl, #166	; 0xa6
 800423c:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 8004240:	9305      	str	r3, [sp, #20]
 8004242:	f240 13db 	movw	r3, #475	; 0x1db
 8004246:	e9cd 3703 	strd	r3, r7, [sp, #12]
 800424a:	232b      	movs	r3, #43	; 0x2b
 800424c:	4621      	mov	r1, r4
 800424e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	4628      	mov	r0, r5
 8004256:	4b7d      	ldr	r3, [pc, #500]	; (800444c <initEeprom+0x36c>)
 8004258:	4a7d      	ldr	r2, [pc, #500]	; (8004450 <initEeprom+0x370>)
 800425a:	f7fd fbaa 	bl	80019b2 <EepromAddVar>
	EepromAddVar(&eeprom,0,&hitereseStateLastro,"addrLASTRO_HIST", 		addrLASTRO_HIST,	DATA16BITS,	0,		STD_HISTERESE,10	,&PrimitiveStates.Lastro.histerese);
 800425e:	f10a 03f0 	add.w	r3, sl, #240	; 0xf0
 8004262:	e9cd 9304 	strd	r9, r3, [sp, #16]
 8004266:	2349      	movs	r3, #73	; 0x49
 8004268:	4621      	mov	r1, r4
 800426a:	e9cd 4b02 	strd	r4, fp, [sp, #8]
 800426e:	f8cd 8004 	str.w	r8, [sp, #4]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	4628      	mov	r0, r5
 8004276:	4b77      	ldr	r3, [pc, #476]	; (8004454 <initEeprom+0x374>)
 8004278:	4a77      	ldr	r2, [pc, #476]	; (8004458 <initEeprom+0x378>)
 800427a:	f7fd fb9a 	bl	80019b2 <EepromAddVar>
	EepromAddVar(&eeprom,0,&limiteLastro,		"addrLASTRO_LIMIT", 	addrLASTRO_LIMIT,	DATA16BITS,	0,		STD_LIMITE	,500	,&PrimitiveStates.Lastro.limite);
 800427e:	f10a 03ee 	add.w	r3, sl, #238	; 0xee
 8004282:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8004286:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800428a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800428e:	234b      	movs	r3, #75	; 0x4b
 8004290:	4621      	mov	r1, r4
 8004292:	f8cd 8004 	str.w	r8, [sp, #4]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	4628      	mov	r0, r5
 800429a:	4b70      	ldr	r3, [pc, #448]	; (800445c <initEeprom+0x37c>)
 800429c:	4a70      	ldr	r2, [pc, #448]	; (8004460 <initEeprom+0x380>)
 800429e:	f7fd fb88 	bl	80019b2 <EepromAddVar>
	EepromAddVar(&eeprom,0,&FlagBuzzer,			"addrBUZZER", 			addrBUZZER,			DATA8BITS,	0,		1			,1  	,&PrimitiveStates.Buzzer);
 80042a2:	f10a 03ff 	add.w	r3, sl, #255	; 0xff
 80042a6:	e9cd 6304 	strd	r6, r3, [sp, #16]
 80042aa:	233d      	movs	r3, #61	; 0x3d
 80042ac:	4621      	mov	r1, r4
 80042ae:	e9cd 4602 	strd	r4, r6, [sp, #8]
 80042b2:	9601      	str	r6, [sp, #4]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	4628      	mov	r0, r5
 80042b8:	4b6a      	ldr	r3, [pc, #424]	; (8004464 <initEeprom+0x384>)
 80042ba:	4a6b      	ldr	r2, [pc, #428]	; (8004468 <initEeprom+0x388>)
 80042bc:	f7fd fb79 	bl	80019b2 <EepromAddVar>

	EepromAddVarFloating(&eeprom, 0, &kPTeto, 	"addrTETO_KP", 			addrTETO_KP,		DATADOUBLE,	0,		STD_KP		,1000	,&PrimitiveStates.Teto.kp);
 80042c0:	2200      	movs	r2, #0
 80042c2:	f10a 0376 	add.w	r3, sl, #118	; 0x76
 80042c6:	9308      	str	r3, [sp, #32]
 80042c8:	4b68      	ldr	r3, [pc, #416]	; (800446c <initEeprom+0x38c>)
 80042ca:	2600      	movs	r6, #0
 80042cc:	f04f 0800 	mov.w	r8, #0
 80042d0:	f04f 0900 	mov.w	r9, #0
 80042d4:	f04f 0b40 	mov.w	fp, #64	; 0x40
 80042d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80042dc:	230f      	movs	r3, #15
 80042de:	4f64      	ldr	r7, [pc, #400]	; (8004470 <initEeprom+0x390>)
 80042e0:	4621      	mov	r1, r4
 80042e2:	e9cd 3b00 	strd	r3, fp, [sp]
 80042e6:	4628      	mov	r0, r5
 80042e8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80042ec:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80042f0:	4b60      	ldr	r3, [pc, #384]	; (8004474 <initEeprom+0x394>)
 80042f2:	4a61      	ldr	r2, [pc, #388]	; (8004478 <initEeprom+0x398>)
 80042f4:	f7fd fbc0 	bl	8001a78 <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kITeto, 	"addrTETO_KI", 			addrTETO_KI,		DATADOUBLE,	0,		STD_KI		,1000	,&PrimitiveStates.Teto.ki);
 80042f8:	a237      	add	r2, pc, #220	; (adr r2, 80043d8 <initEeprom+0x2f8>)
 80042fa:	e9d2 1200 	ldrd	r1, r2, [r2]
 80042fe:	f10a 037e 	add.w	r3, sl, #126	; 0x7e
 8004302:	9308      	str	r3, [sp, #32]
 8004304:	2317      	movs	r3, #23
 8004306:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	4621      	mov	r1, r4
 800430e:	4628      	mov	r0, r5
 8004310:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004314:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004318:	4b58      	ldr	r3, [pc, #352]	; (800447c <initEeprom+0x39c>)
 800431a:	4a59      	ldr	r2, [pc, #356]	; (8004480 <initEeprom+0x3a0>)
 800431c:	f8cd b004 	str.w	fp, [sp, #4]
 8004320:	f7fd fbaa 	bl	8001a78 <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kDTeto, 	"addrTETO_KD", 			addrTETO_KD,		DATADOUBLE,	0,		STD_KD		,1000	,&PrimitiveStates.Teto.kd);
 8004324:	a12e      	add	r1, pc, #184	; (adr r1, 80043e0 <initEeprom+0x300>)
 8004326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800432a:	f10a 0386 	add.w	r3, sl, #134	; 0x86
 800432e:	9308      	str	r3, [sp, #32]
 8004330:	2321      	movs	r3, #33	; 0x21
 8004332:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	4621      	mov	r1, r4
 800433a:	4628      	mov	r0, r5
 800433c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004340:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004344:	4b4f      	ldr	r3, [pc, #316]	; (8004484 <initEeprom+0x3a4>)
 8004346:	4a50      	ldr	r2, [pc, #320]	; (8004488 <initEeprom+0x3a8>)
 8004348:	f8cd b004 	str.w	fp, [sp, #4]
 800434c:	f7fd fb94 	bl	8001a78 <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kPLastro,	"addrLASTRO_KP", 		addrLASTRO_KP,		DATADOUBLE,	0,		STD_KP		,1000	,&PrimitiveStates.Lastro.kp);
 8004350:	2200      	movs	r2, #0
 8004352:	f10a 03be 	add.w	r3, sl, #190	; 0xbe
 8004356:	9308      	str	r3, [sp, #32]
 8004358:	4b44      	ldr	r3, [pc, #272]	; (800446c <initEeprom+0x38c>)
 800435a:	4621      	mov	r1, r4
 800435c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004360:	232d      	movs	r3, #45	; 0x2d
 8004362:	4628      	mov	r0, r5
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800436a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800436e:	4b47      	ldr	r3, [pc, #284]	; (800448c <initEeprom+0x3ac>)
 8004370:	4a47      	ldr	r2, [pc, #284]	; (8004490 <initEeprom+0x3b0>)
 8004372:	f8cd b004 	str.w	fp, [sp, #4]
 8004376:	f7fd fb7f 	bl	8001a78 <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kILastro,	"addrLASTRO_KI", 		addrLASTRO_KI,		DATADOUBLE,	0,		STD_KI		,1000	,&PrimitiveStates.Lastro.ki);
 800437a:	a217      	add	r2, pc, #92	; (adr r2, 80043d8 <initEeprom+0x2f8>)
 800437c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004380:	f10a 03c6 	add.w	r3, sl, #198	; 0xc6
 8004384:	9308      	str	r3, [sp, #32]
 8004386:	2335      	movs	r3, #53	; 0x35
 8004388:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	4621      	mov	r1, r4
 8004390:	4628      	mov	r0, r5
 8004392:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004396:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800439a:	4b3e      	ldr	r3, [pc, #248]	; (8004494 <initEeprom+0x3b4>)
 800439c:	4a3e      	ldr	r2, [pc, #248]	; (8004498 <initEeprom+0x3b8>)
 800439e:	f8cd b004 	str.w	fp, [sp, #4]
 80043a2:	f7fd fb69 	bl	8001a78 <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kDLastro,	"addrLASTRO_KD", 		addrLASTRO_KD,		DATADOUBLE,	0,		STD_KD		,1000	,&PrimitiveStates.Lastro.kd);
 80043a6:	a10e      	add	r1, pc, #56	; (adr r1, 80043e0 <initEeprom+0x300>)
 80043a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043ac:	f10a 03ce 	add.w	r3, sl, #206	; 0xce
 80043b0:	9308      	str	r3, [sp, #32]
 80043b2:	2341      	movs	r3, #65	; 0x41
 80043b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	4621      	mov	r1, r4
 80043bc:	4628      	mov	r0, r5
 80043be:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80043c2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80043c6:	4b35      	ldr	r3, [pc, #212]	; (800449c <initEeprom+0x3bc>)
 80043c8:	4a35      	ldr	r2, [pc, #212]	; (80044a0 <initEeprom+0x3c0>)
 80043ca:	f8cd b004 	str.w	fp, [sp, #4]
 80043ce:	f7fd fb53 	bl	8001a78 <EepromAddVarFloating>
	//todo altera funcao setavar e retirar possibilidade de alterar o valor por ela
	//todo criar uma funcao que restaure tudo

	//	RestauraSoft(&eeprom);

	__NOP();
 80043d2:	bf00      	nop

	//faz o download dos objetos
	EepromDownloadValores(&eeprom);
 80043d4:	4628      	mov	r0, r5
 80043d6:	e065      	b.n	80044a4 <initEeprom+0x3c4>
 80043d8:	47ae147b 	.word	0x47ae147b
 80043dc:	3f847ae1 	.word	0x3f847ae1
 80043e0:	33333333 	.word	0x33333333
 80043e4:	3fd33333 	.word	0x3fd33333
 80043e8:	20002570 	.word	0x20002570
 80043ec:	200007e8 	.word	0x200007e8
 80043f0:	20002268 	.word	0x20002268
 80043f4:	2000090a 	.word	0x2000090a
 80043f8:	200007d8 	.word	0x200007d8
 80043fc:	0800b7f2 	.word	0x0800b7f2
 8004400:	200029d8 	.word	0x200029d8
 8004404:	0800b800 	.word	0x0800b800
 8004408:	200026f0 	.word	0x200026f0
 800440c:	0800b80e 	.word	0x0800b80e
 8004410:	2000271c 	.word	0x2000271c
 8004414:	0800b81e 	.word	0x0800b81e
 8004418:	20002774 	.word	0x20002774
 800441c:	0800b82b 	.word	0x0800b82b
 8004420:	200027a0 	.word	0x200027a0
 8004424:	0800b838 	.word	0x0800b838
 8004428:	20002748 	.word	0x20002748
 800442c:	0800b845 	.word	0x0800b845
 8004430:	20002a08 	.word	0x20002a08
 8004434:	0800b855 	.word	0x0800b855
 8004438:	20002514 	.word	0x20002514
 800443c:	0800b867 	.word	0x0800b867
 8004440:	200024e8 	.word	0x200024e8
 8004444:	0800b87b 	.word	0x0800b87b
 8004448:	200026c4 	.word	0x200026c4
 800444c:	0800b889 	.word	0x0800b889
 8004450:	200029ac 	.word	0x200029ac
 8004454:	0800b898 	.word	0x0800b898
 8004458:	20002698 	.word	0x20002698
 800445c:	0800b8a8 	.word	0x0800b8a8
 8004460:	20002980 	.word	0x20002980
 8004464:	0800b8b9 	.word	0x0800b8b9
 8004468:	20002540 	.word	0x20002540
 800446c:	403e0000 	.word	0x403e0000
 8004470:	408f4000 	.word	0x408f4000
 8004474:	0800b8c4 	.word	0x0800b8c4
 8004478:	20002938 	.word	0x20002938
 800447c:	0800b8d0 	.word	0x0800b8d0
 8004480:	200028a8 	.word	0x200028a8
 8004484:	0800b8dc 	.word	0x0800b8dc
 8004488:	20002818 	.word	0x20002818
 800448c:	0800b8e8 	.word	0x0800b8e8
 8004490:	200028f0 	.word	0x200028f0
 8004494:	0800b8f6 	.word	0x0800b8f6
 8004498:	20002860 	.word	0x20002860
 800449c:	0800b904 	.word	0x0800b904
 80044a0:	200027d0 	.word	0x200027d0
 80044a4:	f7fd fc98 	bl	8001dd8 <EepromDownloadValores>

	__NOP();
 80044a8:	bf00      	nop

	//	RestauraSoft(&eeprom);

	__NOP();
 80044aa:	bf00      	nop

	osThreadResume(TaskTemperaturaHandle);
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <initEeprom+0x3dc>)
 80044ae:	6818      	ldr	r0, [r3, #0]
}
 80044b0:	b00b      	add	sp, #44	; 0x2c
 80044b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	osThreadResume(TaskTemperaturaHandle);
 80044b6:	f003 bd0d 	b.w	8007ed4 <osThreadResume>
 80044ba:	bf00      	nop
 80044bc:	20001d5c 	.word	0x20001d5c

080044c0 <processaEeprom>:

void processaEeprom(void){
 80044c0:	b510      	push	{r4, lr}
	osEvent  evt;

	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 80044c2:	4b73      	ldr	r3, [pc, #460]	; (8004690 <processaEeprom+0x1d0>)
void processaEeprom(void){
 80044c4:	b088      	sub	sp, #32
	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 80044c6:	6819      	ldr	r1, [r3, #0]
 80044c8:	f04f 32ff 	mov.w	r2, #4294967295
 80044cc:	a805      	add	r0, sp, #20
 80044ce:	f003 fcc2 	bl	8007e56 <osMessageGet>
	if (evt.status == osEventMessage) {
 80044d2:	9b05      	ldr	r3, [sp, #20]
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	f040 80d5 	bne.w	8004684 <processaEeprom+0x1c4>

		switch ((unsigned int)evt.value.p) {
 80044da:	9b06      	ldr	r3, [sp, #24]
 80044dc:	2b0b      	cmp	r3, #11
 80044de:	f200 80d1 	bhi.w	8004684 <processaEeprom+0x1c4>
 80044e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80044e6:	0018      	.short	0x0018
 80044e8:	0061002c 	.word	0x0061002c
 80044ec:	003c0051 	.word	0x003c0051
 80044f0:	006b0063 	.word	0x006b0063
 80044f4:	006e000c 	.word	0x006e000c
 80044f8:	007c0075 	.word	0x007c0075
 80044fc:	00d1      	.short	0x00d1

		case CEepromNewCile:
			Calendario.TotalCiclos+=1;
 80044fe:	4a65      	ldr	r2, [pc, #404]	; (8004694 <processaEeprom+0x1d4>)
			EepromSetVar(&eeprom, &totalCiclos, 	0);
 8004500:	4965      	ldr	r1, [pc, #404]	; (8004698 <processaEeprom+0x1d8>)
			Calendario.TotalCiclos+=1;
 8004502:	8913      	ldrh	r3, [r2, #8]
 8004504:	3301      	adds	r3, #1
 8004506:	8113      	strh	r3, [r2, #8]
			EepromSetVar(&eeprom, &totalCiclos, 	0);
 8004508:	2200      	movs	r2, #0
			EepromSetVar(&eeprom, &limiteLastro, 	0);
			PID_SetTunings(&TPIDLastro, PrimitiveStates.Lastro.kp, PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd);

			break;
		case CEepromToogleBuzzer:
			EepromSetVar(&eeprom, &FlagBuzzer, 0);
 800450a:	4864      	ldr	r0, [pc, #400]	; (800469c <processaEeprom+0x1dc>)
			break;
		default:
			break;
		}
	}
}
 800450c:	b008      	add	sp, #32
 800450e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			EepromSetVar(&eeprom, &FlagBuzzer, 0);
 8004512:	f7fd bb0b 	b.w	8001b2c <EepromSetVar>
			if(Calendario.Horimetro_parcial_min<59){
 8004516:	4b5f      	ldr	r3, [pc, #380]	; (8004694 <processaEeprom+0x1d4>)
			EepromSetVar(&eeprom, &horimetroHoras, 		0);
 8004518:	4961      	ldr	r1, [pc, #388]	; (80046a0 <processaEeprom+0x1e0>)
			if(Calendario.Horimetro_parcial_min<59){
 800451a:	799a      	ldrb	r2, [r3, #6]
			EepromSetVar(&eeprom, &horimetroHoras, 		0);
 800451c:	485f      	ldr	r0, [pc, #380]	; (800469c <processaEeprom+0x1dc>)
			if(Calendario.Horimetro_parcial_min<59){
 800451e:	2a3a      	cmp	r2, #58	; 0x3a
				Calendario.Horimetro_parcial_min=0;
 8004520:	bf83      	ittte	hi
 8004522:	2200      	movhi	r2, #0
 8004524:	719a      	strbhi	r2, [r3, #6]
				Calendario.Horimetro_horas++;
 8004526:	889a      	ldrhhi	r2, [r3, #4]
				Calendario.Horimetro_parcial_min++;
 8004528:	3201      	addls	r2, #1
				Calendario.Horimetro_horas++;
 800452a:	bf8a      	itet	hi
 800452c:	3201      	addhi	r2, #1
				Calendario.Horimetro_parcial_min++;
 800452e:	719a      	strbls	r2, [r3, #6]
				Calendario.Horimetro_horas++;
 8004530:	809a      	strhhi	r2, [r3, #4]
			EepromSetVar(&eeprom, &horimetroHoras, 		0);
 8004532:	2200      	movs	r2, #0
 8004534:	f7fd fafa 	bl	8001b2c <EepromSetVar>
			EepromSetVar(&eeprom, &horimetroMinutos, 	0);
 8004538:	2200      	movs	r2, #0
 800453a:	495a      	ldr	r1, [pc, #360]	; (80046a4 <processaEeprom+0x1e4>)
 800453c:	e7e5      	b.n	800450a <processaEeprom+0x4a>
			EepromSetVar(&eeprom, &instalacaoDia, 	datetoUpdate.Date);
 800453e:	4c5a      	ldr	r4, [pc, #360]	; (80046a8 <processaEeprom+0x1e8>)
 8004540:	495a      	ldr	r1, [pc, #360]	; (80046ac <processaEeprom+0x1ec>)
 8004542:	78a2      	ldrb	r2, [r4, #2]
 8004544:	4855      	ldr	r0, [pc, #340]	; (800469c <processaEeprom+0x1dc>)
 8004546:	f7fd faf1 	bl	8001b2c <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoMes, 	datetoUpdate.Month);
 800454a:	7862      	ldrb	r2, [r4, #1]
 800454c:	4958      	ldr	r1, [pc, #352]	; (80046b0 <processaEeprom+0x1f0>)
 800454e:	4853      	ldr	r0, [pc, #332]	; (800469c <processaEeprom+0x1dc>)
 8004550:	f7fd faec 	bl	8001b2c <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoAno, 	datetoUpdate.Year);
 8004554:	78e2      	ldrb	r2, [r4, #3]
 8004556:	4957      	ldr	r1, [pc, #348]	; (80046b4 <processaEeprom+0x1f4>)
 8004558:	4850      	ldr	r0, [pc, #320]	; (800469c <processaEeprom+0x1dc>)
 800455a:	f7fd fae7 	bl	8001b2c <EepromSetVar>
			if (HAL_RTC_SetTime(&hrtc, &timeToUpdate, RTC_FORMAT_BIN) != HAL_OK){
 800455e:	2200      	movs	r2, #0
 8004560:	4955      	ldr	r1, [pc, #340]	; (80046b8 <processaEeprom+0x1f8>)
 8004562:	4856      	ldr	r0, [pc, #344]	; (80046bc <processaEeprom+0x1fc>)
 8004564:	f002 f9fb 	bl	800695e <HAL_RTC_SetTime>
 8004568:	b108      	cbz	r0, 800456e <processaEeprom+0xae>
				Error_Handler();
 800456a:	f7fe fb0b 	bl	8002b84 <Error_Handler>
			if (HAL_RTC_SetDate(&hrtc, &datetoUpdate, RTC_FORMAT_BIN) != HAL_OK){
 800456e:	2200      	movs	r2, #0
 8004570:	494d      	ldr	r1, [pc, #308]	; (80046a8 <processaEeprom+0x1e8>)
 8004572:	4852      	ldr	r0, [pc, #328]	; (80046bc <processaEeprom+0x1fc>)
 8004574:	f002 fa44 	bl	8006a00 <HAL_RTC_SetDate>
 8004578:	2800      	cmp	r0, #0
 800457a:	f000 8083 	beq.w	8004684 <processaEeprom+0x1c4>
}
 800457e:	b008      	add	sp, #32
 8004580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				Error_Handler();
 8004584:	f7fe bafe 	b.w	8002b84 <Error_Handler>
			RestauraEeprom(&eeprom,softReset);	// restaura
 8004588:	2100      	movs	r1, #0
			RestauraEeprom(&eeprom,hardReset); 	// restaura
 800458a:	4844      	ldr	r0, [pc, #272]	; (800469c <processaEeprom+0x1dc>)
 800458c:	f7fd fb68 	bl	8001c60 <RestauraEeprom>
			EepromDownloadValores(&eeprom);		// le
 8004590:	4842      	ldr	r0, [pc, #264]	; (800469c <processaEeprom+0x1dc>)
 8004592:	f7fd fc21 	bl	8001dd8 <EepromDownloadValores>
			osMessagePut(FilaTXBluetoothHandle, TX_RESETADO_OK, 0);
 8004596:	2200      	movs	r2, #0
 8004598:	2130      	movs	r1, #48	; 0x30
 800459a:	4b49      	ldr	r3, [pc, #292]	; (80046c0 <processaEeprom+0x200>)
 800459c:	6818      	ldr	r0, [r3, #0]
}
 800459e:	b008      	add	sp, #32
 80045a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			osMessagePut(FilaTXBluetoothHandle, TX_RESETADO_OK, 0);
 80045a4:	f003 bc2f 	b.w	8007e06 <osMessagePut>
			RestauraEeprom(&eeprom,hardReset); 	// restaura
 80045a8:	2101      	movs	r1, #1
 80045aa:	e7ee      	b.n	800458a <processaEeprom+0xca>
			EepromSetVar(&eeprom, &limiteTeto, 	0);
 80045ac:	2200      	movs	r2, #0
 80045ae:	4945      	ldr	r1, [pc, #276]	; (80046c4 <processaEeprom+0x204>)
 80045b0:	483a      	ldr	r0, [pc, #232]	; (800469c <processaEeprom+0x1dc>)
 80045b2:	f7fd fabb 	bl	8001b2c <EepromSetVar>
			EepromSetVar(&eeprom, &limiteLastro, 	0);
 80045b6:	2200      	movs	r2, #0
 80045b8:	4943      	ldr	r1, [pc, #268]	; (80046c8 <processaEeprom+0x208>)
 80045ba:	e7a6      	b.n	800450a <processaEeprom+0x4a>
			EepromSetVar(&eeprom, &tempoDelayLuz, 	0);
 80045bc:	2200      	movs	r2, #0
 80045be:	4943      	ldr	r1, [pc, #268]	; (80046cc <processaEeprom+0x20c>)
 80045c0:	e7a3      	b.n	800450a <processaEeprom+0x4a>
			Calendario.ContMaxTeto+=1;
 80045c2:	4a34      	ldr	r2, [pc, #208]	; (8004694 <processaEeprom+0x1d4>)
			EepromSetVar(&eeprom, &ContTetoMax, 	0);
 80045c4:	4942      	ldr	r1, [pc, #264]	; (80046d0 <processaEeprom+0x210>)
			Calendario.ContMaxTeto+=1;
 80045c6:	8953      	ldrh	r3, [r2, #10]
 80045c8:	3301      	adds	r3, #1
 80045ca:	8153      	strh	r3, [r2, #10]
			EepromSetVar(&eeprom, &ContTetoMax, 	0);
 80045cc:	2200      	movs	r2, #0
 80045ce:	e79c      	b.n	800450a <processaEeprom+0x4a>
			Calendario.ContMaxLastro+=1;
 80045d0:	4a30      	ldr	r2, [pc, #192]	; (8004694 <processaEeprom+0x1d4>)
			EepromSetVar(&eeprom, &ContLastroMax, 	0);
 80045d2:	4940      	ldr	r1, [pc, #256]	; (80046d4 <processaEeprom+0x214>)
			Calendario.ContMaxLastro+=1;
 80045d4:	8993      	ldrh	r3, [r2, #12]
 80045d6:	3301      	adds	r3, #1
 80045d8:	8193      	strh	r3, [r2, #12]
			EepromSetVar(&eeprom, &ContLastroMax, 	0);
 80045da:	2200      	movs	r2, #0
 80045dc:	e795      	b.n	800450a <processaEeprom+0x4a>
			EepromSetVar(&eeprom, &hitereseStateTeto, 	0);
 80045de:	2200      	movs	r2, #0
 80045e0:	493d      	ldr	r1, [pc, #244]	; (80046d8 <processaEeprom+0x218>)
 80045e2:	482e      	ldr	r0, [pc, #184]	; (800469c <processaEeprom+0x1dc>)
 80045e4:	f7fd faa2 	bl	8001b2c <EepromSetVar>
			EepromSetVarFloating(&eeprom, &kPTeto, 	0);
 80045e8:	2200      	movs	r2, #0
 80045ea:	2300      	movs	r3, #0
 80045ec:	493b      	ldr	r1, [pc, #236]	; (80046dc <processaEeprom+0x21c>)
 80045ee:	482b      	ldr	r0, [pc, #172]	; (800469c <processaEeprom+0x1dc>)
 80045f0:	f7fd faea 	bl	8001bc8 <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kITeto, 	0);
 80045f4:	2200      	movs	r2, #0
 80045f6:	2300      	movs	r3, #0
 80045f8:	4939      	ldr	r1, [pc, #228]	; (80046e0 <processaEeprom+0x220>)
 80045fa:	4828      	ldr	r0, [pc, #160]	; (800469c <processaEeprom+0x1dc>)
			PID_SetTunings(&TPIDTeto, PrimitiveStates.Teto.kp, PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd);
 80045fc:	4c39      	ldr	r4, [pc, #228]	; (80046e4 <processaEeprom+0x224>)
			EepromSetVarFloating(&eeprom, &kITeto, 	0);
 80045fe:	f7fd fae3 	bl	8001bc8 <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kDTeto, 	0);
 8004602:	2300      	movs	r3, #0
 8004604:	2200      	movs	r2, #0
 8004606:	4938      	ldr	r1, [pc, #224]	; (80046e8 <processaEeprom+0x228>)
 8004608:	4824      	ldr	r0, [pc, #144]	; (800469c <processaEeprom+0x1dc>)
 800460a:	f7fd fadd 	bl	8001bc8 <EepromSetVarFloating>
			EepromSetVar(&eeprom, &limiteTeto, 	0);
 800460e:	492d      	ldr	r1, [pc, #180]	; (80046c4 <processaEeprom+0x204>)
 8004610:	2200      	movs	r2, #0
 8004612:	4822      	ldr	r0, [pc, #136]	; (800469c <processaEeprom+0x1dc>)
 8004614:	f7fd fa8a 	bl	8001b2c <EepromSetVar>
			PID_SetTunings(&TPIDTeto, PrimitiveStates.Teto.kp, PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd);
 8004618:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
 800461c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004620:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
 8004624:	e9cd 2300 	strd	r2, r3, [sp]
 8004628:	4830      	ldr	r0, [pc, #192]	; (80046ec <processaEeprom+0x22c>)
 800462a:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
 800462e:	f7fe fc35 	bl	8002e9c <PID_SetTunings>
			EepromSetVar(&eeprom, &hitereseStateLastro, 0);
 8004632:	2200      	movs	r2, #0
 8004634:	492e      	ldr	r1, [pc, #184]	; (80046f0 <processaEeprom+0x230>)
 8004636:	4819      	ldr	r0, [pc, #100]	; (800469c <processaEeprom+0x1dc>)
 8004638:	f7fd fa78 	bl	8001b2c <EepromSetVar>
			EepromSetVarFloating(&eeprom, &kPLastro, 	0);
 800463c:	2200      	movs	r2, #0
 800463e:	2300      	movs	r3, #0
 8004640:	492c      	ldr	r1, [pc, #176]	; (80046f4 <processaEeprom+0x234>)
 8004642:	4816      	ldr	r0, [pc, #88]	; (800469c <processaEeprom+0x1dc>)
 8004644:	f7fd fac0 	bl	8001bc8 <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kILastro, 	0);
 8004648:	2200      	movs	r2, #0
 800464a:	2300      	movs	r3, #0
 800464c:	492a      	ldr	r1, [pc, #168]	; (80046f8 <processaEeprom+0x238>)
 800464e:	4813      	ldr	r0, [pc, #76]	; (800469c <processaEeprom+0x1dc>)
 8004650:	f7fd faba 	bl	8001bc8 <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kDLastro, 	0);
 8004654:	2300      	movs	r3, #0
 8004656:	2200      	movs	r2, #0
 8004658:	4928      	ldr	r1, [pc, #160]	; (80046fc <processaEeprom+0x23c>)
 800465a:	4810      	ldr	r0, [pc, #64]	; (800469c <processaEeprom+0x1dc>)
 800465c:	f7fd fab4 	bl	8001bc8 <EepromSetVarFloating>
			EepromSetVar(&eeprom, &limiteLastro, 	0);
 8004660:	2200      	movs	r2, #0
 8004662:	4919      	ldr	r1, [pc, #100]	; (80046c8 <processaEeprom+0x208>)
 8004664:	480d      	ldr	r0, [pc, #52]	; (800469c <processaEeprom+0x1dc>)
 8004666:	f7fd fa61 	bl	8001b2c <EepromSetVar>
			PID_SetTunings(&TPIDLastro, PrimitiveStates.Lastro.kp, PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd);
 800466a:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
 800466e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004672:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	; 0x100
 8004676:	e9cd 2300 	strd	r2, r3, [sp]
 800467a:	4821      	ldr	r0, [pc, #132]	; (8004700 <processaEeprom+0x240>)
 800467c:	e9d4 233e 	ldrd	r2, r3, [r4, #248]	; 0xf8
 8004680:	f7fe fc0c 	bl	8002e9c <PID_SetTunings>
}
 8004684:	b008      	add	sp, #32
 8004686:	bd10      	pop	{r4, pc}
			EepromSetVar(&eeprom, &FlagBuzzer, 0);
 8004688:	2200      	movs	r2, #0
 800468a:	491e      	ldr	r1, [pc, #120]	; (8004704 <processaEeprom+0x244>)
 800468c:	e73d      	b.n	800450a <processaEeprom+0x4a>
 800468e:	bf00      	nop
 8004690:	200007e8 	.word	0x200007e8
 8004694:	200007d4 	.word	0x200007d4
 8004698:	20002a08 	.word	0x20002a08
 800469c:	20002570 	.word	0x20002570
 80046a0:	200026f0 	.word	0x200026f0
 80046a4:	2000271c 	.word	0x2000271c
 80046a8:	2000256c 	.word	0x2000256c
 80046ac:	20002774 	.word	0x20002774
 80046b0:	200027a0 	.word	0x200027a0
 80046b4:	20002748 	.word	0x20002748
 80046b8:	20002a04 	.word	0x20002a04
 80046bc:	200022bc 	.word	0x200022bc
 80046c0:	200008cc 	.word	0x200008cc
 80046c4:	200029ac 	.word	0x200029ac
 80046c8:	20002980 	.word	0x20002980
 80046cc:	200029d8 	.word	0x200029d8
 80046d0:	20002514 	.word	0x20002514
 80046d4:	200024e8 	.word	0x200024e8
 80046d8:	200026c4 	.word	0x200026c4
 80046dc:	20002938 	.word	0x20002938
 80046e0:	200028a8 	.word	0x200028a8
 80046e4:	200008d0 	.word	0x200008d0
 80046e8:	20002818 	.word	0x20002818
 80046ec:	20002aa8 	.word	0x20002aa8
 80046f0:	20002698 	.word	0x20002698
 80046f4:	200028f0 	.word	0x200028f0
 80046f8:	20002860 	.word	0x20002860
 80046fc:	200027d0 	.word	0x200027d0
 8004700:	20002a38 	.word	0x20002a38
 8004704:	20002540 	.word	0x20002540

08004708 <StartEeprom>:
{
 8004708:	b508      	push	{r3, lr}
	initEeprom();
 800470a:	f7ff fce9 	bl	80040e0 <initEeprom>
		processaEeprom();
 800470e:	f7ff fed7 	bl	80044c0 <processaEeprom>
		osThreadYield();
 8004712:	f003 faa1 	bl	8007c58 <osThreadYield>
		osDelay(500);
 8004716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800471a:	f003 faa9 	bl	8007c70 <osDelay>
	for(;;)
 800471e:	e7f6      	b.n	800470e <StartEeprom+0x6>

08004720 <atualizaDataEeprom>:

void atualizaDataEeprom(RTC_DateTypeDef data, RTC_TimeTypeDef hora){
 8004720:	b082      	sub	sp, #8
 8004722:	e9cd 1000 	strd	r1, r0, [sp]
	datetoUpdate = data;
 8004726:	4b11      	ldr	r3, [pc, #68]	; (800476c <atualizaDataEeprom+0x4c>)
	timeToUpdate = hora;
 8004728:	f8bd 1000 	ldrh.w	r1, [sp]
	datetoUpdate = data;
 800472c:	6018      	str	r0, [r3, #0]
	timeToUpdate = hora;
 800472e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8004732:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <atualizaDataEeprom+0x50>)
 8004734:	8019      	strh	r1, [r3, #0]
 8004736:	709a      	strb	r2, [r3, #2]

	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
			(instalacaoAno.valor == 0 || instalacaoAno.valor > 200)){
		//primeiro recebimento de data
		osMessagePut(FilaEepromHandle, CEepromDataInstalacao, 0);
 8004738:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <atualizaDataEeprom+0x54>)
 800473a:	6818      	ldr	r0, [r3, #0]
	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 800473c:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <atualizaDataEeprom+0x58>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	3b01      	subs	r3, #1
 8004742:	2b1e      	cmp	r3, #30
 8004744:	d90e      	bls.n	8004764 <atualizaDataEeprom+0x44>
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 8004746:	4b0d      	ldr	r3, [pc, #52]	; (800477c <atualizaDataEeprom+0x5c>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	3b01      	subs	r3, #1
	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 800474c:	2b0b      	cmp	r3, #11
 800474e:	d909      	bls.n	8004764 <atualizaDataEeprom+0x44>
			(instalacaoAno.valor == 0 || instalacaoAno.valor > 200)){
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <atualizaDataEeprom+0x60>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	3b01      	subs	r3, #1
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 8004756:	2bc7      	cmp	r3, #199	; 0xc7
 8004758:	d904      	bls.n	8004764 <atualizaDataEeprom+0x44>
		osMessagePut(FilaEepromHandle, CEepromDataInstalacao, 0);
 800475a:	2200      	movs	r2, #0
 800475c:	2101      	movs	r1, #1
	}else{
		//gravacao padrao de data e hora
		osMessagePut(FilaEepromHandle, CEepromAtualizaHora, 0);
	}
}
 800475e:	b002      	add	sp, #8
		osMessagePut(FilaEepromHandle, CEepromAtualizaHora, 0);
 8004760:	f003 bb51 	b.w	8007e06 <osMessagePut>
 8004764:	2200      	movs	r2, #0
 8004766:	2104      	movs	r1, #4
 8004768:	e7f9      	b.n	800475e <atualizaDataEeprom+0x3e>
 800476a:	bf00      	nop
 800476c:	2000256c 	.word	0x2000256c
 8004770:	20002a04 	.word	0x20002a04
 8004774:	200007e8 	.word	0x200007e8
 8004778:	20002774 	.word	0x20002774
 800477c:	200027a0 	.word	0x200027a0
 8004780:	20002748 	.word	0x20002748

08004784 <initPID>:

	}
}


void initPID(void){
 8004784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	PID(&TPIDTeto, 		&PrimitiveStates.Teto.realtime, 	&PrimitiveStates.Teto.PWMOut, 	&PrimitiveStates.Teto.setPoint, 	PrimitiveStates.Teto.kp,PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004788:	f04f 0801 	mov.w	r8, #1
 800478c:	f04f 0900 	mov.w	r9, #0
void initPID(void){
 8004790:	b089      	sub	sp, #36	; 0x24
	PID(&TPIDTeto, 		&PrimitiveStates.Teto.realtime, 	&PrimitiveStates.Teto.PWMOut, 	&PrimitiveStates.Teto.setPoint, 	PrimitiveStates.Teto.kp,PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004792:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004796:	4c2b      	ldr	r4, [pc, #172]	; (8004844 <initPID+0xc0>)
 8004798:	4f2b      	ldr	r7, [pc, #172]	; (8004848 <initPID+0xc4>)
 800479a:	e954 2306 	ldrd	r2, r3, [r4, #-24]
 800479e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047a2:	e954 2308 	ldrd	r2, r3, [r4, #-32]
 80047a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047aa:	4638      	mov	r0, r7
 80047ac:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80047b0:	f1a4 0108 	sub.w	r1, r4, #8
 80047b4:	e9cd 2300 	strd	r2, r3, [sp]
 80047b8:	4623      	mov	r3, r4
 80047ba:	f1a4 0210 	sub.w	r2, r4, #16
 80047be:	f7fe fb9f 	bl	8002f00 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.Lastro.realtime, 	&PrimitiveStates.Lastro.PWMOut,	&PrimitiveStates.Lastro.setPoint, 	PrimitiveStates.Lastro.kp,PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80047c2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80047c6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80047ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047ce:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80047d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047d6:	4e1d      	ldr	r6, [pc, #116]	; (800484c <initPID+0xc8>)
 80047d8:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80047dc:	4630      	mov	r0, r6
 80047de:	e9cd 2300 	strd	r2, r3, [sp]
 80047e2:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80047e6:	f104 0348 	add.w	r3, r4, #72	; 0x48
 80047ea:	f104 0238 	add.w	r2, r4, #56	; 0x38
 80047ee:	f7fe fb87 	bl	8002f00 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 80047f2:	4641      	mov	r1, r8
 80047f4:	4638      	mov	r0, r7
 80047f6:	f7fe fa8a 	bl	8002d0e <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 80047fa:	2400      	movs	r4, #0
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 80047fc:	4641      	mov	r1, r8
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 80047fe:	2500      	movs	r5, #0
 8004800:	f04f 0800 	mov.w	r8, #0
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 8004804:	4630      	mov	r0, r6
 8004806:	f7fe fa82 	bl	8002d0e <PID_SetMode>
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 800480a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004850 <initPID+0xcc>
	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 800480e:	4638      	mov	r0, r7
 8004810:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004814:	f7fe fba8 	bl	8002f68 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 8004818:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800481c:	4630      	mov	r0, r6
 800481e:	f7fe fba3 	bl	8002f68 <PID_SetSampleTime>
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8004822:	4622      	mov	r2, r4
 8004824:	462b      	mov	r3, r5
 8004826:	4638      	mov	r0, r7
 8004828:	e9cd 8900 	strd	r8, r9, [sp]
 800482c:	f7fe fa7c 	bl	8002d28 <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 8004830:	4622      	mov	r2, r4
 8004832:	462b      	mov	r3, r5
 8004834:	4630      	mov	r0, r6
 8004836:	e9cd 8900 	strd	r8, r9, [sp]
 800483a:	f7fe fa75 	bl	8002d28 <PID_SetOutputLimits>
}
 800483e:	b009      	add	sp, #36	; 0x24
 8004840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004844:	200009a8 	.word	0x200009a8
 8004848:	20002aa8 	.word	0x20002aa8
 800484c:	20002a38 	.word	0x20002a38
 8004850:	40590000 	.word	0x40590000

08004854 <computaPID>:
void computaPID(void){
 8004854:	b510      	push	{r4, lr}

	PID_Compute(&TPIDTeto);
 8004856:	480a      	ldr	r0, [pc, #40]	; (8004880 <computaPID+0x2c>)
	PID_Compute(&TPIDLastro);

	//transformar para a classe realizar isso //
	IndviduoPID_SetPWMValue(&PrimitiveStates.Teto, PrimitiveStates.Teto.PWMOut);
 8004858:	4c0a      	ldr	r4, [pc, #40]	; (8004884 <computaPID+0x30>)
	PID_Compute(&TPIDTeto);
 800485a:	f7fe f9ba 	bl	8002bd2 <PID_Compute>
	PID_Compute(&TPIDLastro);
 800485e:	480a      	ldr	r0, [pc, #40]	; (8004888 <computaPID+0x34>)
 8004860:	f7fe f9b7 	bl	8002bd2 <PID_Compute>
	IndviduoPID_SetPWMValue(&PrimitiveStates.Teto, PrimitiveStates.Teto.PWMOut);
 8004864:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
 8004868:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 800486c:	f7fd fc7a 	bl	8002164 <IndviduoPID_SetPWMValue>
	IndviduoPID_SetPWMValue(&PrimitiveStates.Lastro, PrimitiveStates.Lastro.PWMOut);
 8004870:	e9d4 2344 	ldrd	r2, r3, [r4, #272]	; 0x110
 8004874:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
}
 8004878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	IndviduoPID_SetPWMValue(&PrimitiveStates.Lastro, PrimitiveStates.Lastro.PWMOut);
 800487c:	f7fd bc72 	b.w	8002164 <IndviduoPID_SetPWMValue>
 8004880:	20002aa8 	.word	0x20002aa8
 8004884:	200008d0 	.word	0x200008d0
 8004888:	20002a38 	.word	0x20002a38

0800488c <StartTemperatura>:
void StartTemperatura(void const * argument){
 800488c:	b507      	push	{r0, r1, r2, lr}
	xLastWakeTime = xTaskGetTickCount();
 800488e:	f004 f9cd 	bl	8008c2c <xTaskGetTickCount>
 8004892:	9001      	str	r0, [sp, #4]
	initPID();
 8004894:	f7ff ff76 	bl	8004784 <initPID>
		computaPID();
 8004898:	f7ff ffdc 	bl	8004854 <computaPID>
		osDelayUntil(&xLastWakeTime,TIME_PID_CALC);
 800489c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80048a0:	a801      	add	r0, sp, #4
 80048a2:	f003 fb2e 	bl	8007f02 <osDelayUntil>
		osThreadYield();
 80048a6:	f003 f9d7 	bl	8007c58 <osThreadYield>
	for(;;)	{
 80048aa:	e7f5      	b.n	8004898 <StartTemperatura+0xc>

080048ac <WatchDogLimitesTemperatura>:
	SaidasLeds();

	//Contador do horimetro
	Horimetro();
}
void WatchDogLimitesTemperatura(void){
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static bool flagMaxLastro,flagMaxTeto,flagTimer,flagTimerLastro;

	//Atingiu limite no TETO com incremento a cada ciclo
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 80048ae:	4c3a      	ldr	r4, [pc, #232]	; (8004998 <WatchDogLimitesTemperatura+0xec>)
		if(!flagMaxTeto){
 80048b0:	4e3a      	ldr	r6, [pc, #232]	; (800499c <WatchDogLimitesTemperatura+0xf0>)
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 80048b2:	f8b4 00e0 	ldrh.w	r0, [r4, #224]	; 0xe0
 80048b6:	f7fb fda5 	bl	8000404 <__aeabi_i2d>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
 80048c2:	f7fc f899 	bl	80009f8 <__aeabi_dcmpgt>
		if(!flagMaxTeto){
 80048c6:	7837      	ldrb	r7, [r6, #0]
 80048c8:	4d35      	ldr	r5, [pc, #212]	; (80049a0 <WatchDogLimitesTemperatura+0xf4>)
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 80048ca:	b1a0      	cbz	r0, 80048f6 <WatchDogLimitesTemperatura+0x4a>
		if(!flagMaxTeto){
 80048cc:	b93f      	cbnz	r7, 80048de <WatchDogLimitesTemperatura+0x32>
			flagMaxTeto = 1;
 80048ce:	2301      	movs	r3, #1
 80048d0:	7033      	strb	r3, [r6, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
 80048d2:	4b34      	ldr	r3, [pc, #208]	; (80049a4 <WatchDogLimitesTemperatura+0xf8>)
 80048d4:	463a      	mov	r2, r7
 80048d6:	2108      	movs	r1, #8
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	f003 fa94 	bl	8007e06 <osMessagePut>
		}
		if(!flagTimer && PrimitiveStates.stateTimer == TIMER_decrementando){
 80048de:	782a      	ldrb	r2, [r5, #0]
 80048e0:	b94a      	cbnz	r2, 80048f6 <WatchDogLimitesTemperatura+0x4a>
 80048e2:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d105      	bne.n	80048f6 <WatchDogLimitesTemperatura+0x4a>
			flagTimer = 1;
 80048ea:	702b      	strb	r3, [r5, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
 80048ec:	4b2d      	ldr	r3, [pc, #180]	; (80049a4 <WatchDogLimitesTemperatura+0xf8>)
 80048ee:	2108      	movs	r1, #8
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	f003 fa88 	bl	8007e06 <osMessagePut>
		}
	}
	//cancela flags
	if(flagMaxTeto && PrimitiveStates.Teto.realtime<PrimitiveStates.Teto.limite-20)
 80048f6:	7833      	ldrb	r3, [r6, #0]
 80048f8:	b16b      	cbz	r3, 8004916 <WatchDogLimitesTemperatura+0x6a>
 80048fa:	f8b4 00e0 	ldrh.w	r0, [r4, #224]	; 0xe0
 80048fe:	3814      	subs	r0, #20
 8004900:	f7fb fd80 	bl	8000404 <__aeabi_i2d>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
 800490c:	f7fc f856 	bl	80009bc <__aeabi_dcmplt>
 8004910:	b108      	cbz	r0, 8004916 <WatchDogLimitesTemperatura+0x6a>
		flagMaxTeto = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	7033      	strb	r3, [r6, #0]
	if(flagTimer && PrimitiveStates.stateTimer == TIMER_idle)
 8004916:	782b      	ldrb	r3, [r5, #0]
 8004918:	b11b      	cbz	r3, 8004922 <WatchDogLimitesTemperatura+0x76>
 800491a:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 800491e:	b903      	cbnz	r3, 8004922 <WatchDogLimitesTemperatura+0x76>
		flagTimer=0;
 8004920:	702b      	strb	r3, [r5, #0]

	//Atingiu limite no LASTRO com incremento a cada ciclo
	if(PrimitiveStates.Lastro.realtime>PrimitiveStates.Lastro.limite){
 8004922:	f8b4 0128 	ldrh.w	r0, [r4, #296]	; 0x128
 8004926:	f7fb fd6d 	bl	8000404 <__aeabi_i2d>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	e9d4 0146 	ldrd	r0, r1, [r4, #280]	; 0x118
 8004932:	f7fc f861 	bl	80009f8 <__aeabi_dcmpgt>
		if(!flagMaxLastro){
 8004936:	4e1c      	ldr	r6, [pc, #112]	; (80049a8 <WatchDogLimitesTemperatura+0xfc>)
 8004938:	4d1c      	ldr	r5, [pc, #112]	; (80049ac <WatchDogLimitesTemperatura+0x100>)
 800493a:	7837      	ldrb	r7, [r6, #0]
	if(PrimitiveStates.Lastro.realtime>PrimitiveStates.Lastro.limite){
 800493c:	b1a0      	cbz	r0, 8004968 <WatchDogLimitesTemperatura+0xbc>
		if(!flagMaxLastro){
 800493e:	b93f      	cbnz	r7, 8004950 <WatchDogLimitesTemperatura+0xa4>
			flagMaxLastro = 1;
 8004940:	2301      	movs	r3, #1
 8004942:	7033      	strb	r3, [r6, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
 8004944:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <WatchDogLimitesTemperatura+0xf8>)
 8004946:	463a      	mov	r2, r7
 8004948:	2109      	movs	r1, #9
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	f003 fa5b 	bl	8007e06 <osMessagePut>
		}
		if(!flagTimerLastro && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004950:	782a      	ldrb	r2, [r5, #0]
 8004952:	b94a      	cbnz	r2, 8004968 <WatchDogLimitesTemperatura+0xbc>
 8004954:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8004958:	2b01      	cmp	r3, #1
 800495a:	d105      	bne.n	8004968 <WatchDogLimitesTemperatura+0xbc>
			flagTimerLastro = 1;
 800495c:	702b      	strb	r3, [r5, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
 800495e:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <WatchDogLimitesTemperatura+0xf8>)
 8004960:	2109      	movs	r1, #9
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	f003 fa4f 	bl	8007e06 <osMessagePut>
		}
	}
	//cancela flags
	if(flagMaxLastro && PrimitiveStates.Lastro.realtime<PrimitiveStates.Lastro.limite-20)
 8004968:	7833      	ldrb	r3, [r6, #0]
 800496a:	b16b      	cbz	r3, 8004988 <WatchDogLimitesTemperatura+0xdc>
 800496c:	f8b4 0128 	ldrh.w	r0, [r4, #296]	; 0x128
 8004970:	3814      	subs	r0, #20
 8004972:	f7fb fd47 	bl	8000404 <__aeabi_i2d>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	e9d4 0146 	ldrd	r0, r1, [r4, #280]	; 0x118
 800497e:	f7fc f81d 	bl	80009bc <__aeabi_dcmplt>
 8004982:	b108      	cbz	r0, 8004988 <WatchDogLimitesTemperatura+0xdc>
		flagMaxLastro = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	7033      	strb	r3, [r6, #0]
	if(flagTimerLastro && PrimitiveStates.stateTimer == TIMER_idle)
 8004988:	782b      	ldrb	r3, [r5, #0]
 800498a:	b11b      	cbz	r3, 8004994 <WatchDogLimitesTemperatura+0xe8>
 800498c:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8004990:	b903      	cbnz	r3, 8004994 <WatchDogLimitesTemperatura+0xe8>
		flagTimerLastro=0;
 8004992:	702b      	strb	r3, [r5, #0]


}
 8004994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004996:	bf00      	nop
 8004998:	200008d0 	.word	0x200008d0
 800499c:	20002b1b 	.word	0x20002b1b
 80049a0:	20002b1c 	.word	0x20002b1c
 80049a4:	200007e8 	.word	0x200007e8
 80049a8:	20002b1a 	.word	0x20002b1a
 80049ac:	20002b1d 	.word	0x20002b1d

080049b0 <SaidasLeds>:
void SaidasLeds(void){
 80049b0:	b510      	push	{r4, lr}

	//LED VERDE - indica que as 2 saidas estao ok
	if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando ){
 80049b2:	4c14      	ldr	r4, [pc, #80]	; (8004a04 <SaidasLeds+0x54>)
 80049b4:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d017      	beq.n	80049ec <SaidasLeds+0x3c>
 80049bc:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d013      	beq.n	80049ec <SaidasLeds+0x3c>
		onDigital(&PrimitiveStates.LedVerde);
 80049c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80049c8:	f7fd fb43 	bl	8002052 <onDigital>
	}else{
		offDigital(&PrimitiveStates.LedVerde);
	}

	//LED VERMELHO TETO
	if(PrimitiveStates.Teto._PWMstate == buscando){
 80049cc:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
		onDigital(&PrimitiveStates.LedTeto);
 80049d0:	480d      	ldr	r0, [pc, #52]	; (8004a08 <SaidasLeds+0x58>)
	if(PrimitiveStates.Teto._PWMstate == buscando){
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d10e      	bne.n	80049f4 <SaidasLeds+0x44>
		onDigital(&PrimitiveStates.LedTeto);
 80049d6:	f7fd fb3c 	bl	8002052 <onDigital>
	}else{
		offDigital(&PrimitiveStates.LedTeto);
	}

	//LED VERMELHO LASTRO
	if(PrimitiveStates.Lastro._PWMstate == buscando){
 80049da:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
		onDigital(&PrimitiveStates.LedLastro);
 80049de:	480b      	ldr	r0, [pc, #44]	; (8004a0c <SaidasLeds+0x5c>)
	if(PrimitiveStates.Lastro._PWMstate == buscando){
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d10a      	bne.n	80049fa <SaidasLeds+0x4a>
	}else{
		offDigital(&PrimitiveStates.LedLastro);
	}
}
 80049e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		onDigital(&PrimitiveStates.LedLastro);
 80049e8:	f7fd bb33 	b.w	8002052 <onDigital>
		offDigital(&PrimitiveStates.LedVerde);
 80049ec:	4808      	ldr	r0, [pc, #32]	; (8004a10 <SaidasLeds+0x60>)
 80049ee:	f7fd fb3a 	bl	8002066 <offDigital>
 80049f2:	e7eb      	b.n	80049cc <SaidasLeds+0x1c>
		offDigital(&PrimitiveStates.LedTeto);
 80049f4:	f7fd fb37 	bl	8002066 <offDigital>
 80049f8:	e7ef      	b.n	80049da <SaidasLeds+0x2a>
}
 80049fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		offDigital(&PrimitiveStates.LedLastro);
 80049fe:	f7fd bb32 	b.w	8002066 <offDigital>
 8004a02:	bf00      	nop
 8004a04:	200008d0 	.word	0x200008d0
 8004a08:	20000944 	.word	0x20000944
 8004a0c:	2000095c 	.word	0x2000095c
 8004a10:	2000092c 	.word	0x2000092c

08004a14 <Horimetro>:
void Horimetro(void){
	static uint8_t segundos=0;
	//esperar implementacao digital output
	if(PrimitiveStates.Lastro._PWMstate != idle || PrimitiveStates.Teto._PWMstate != idle){
 8004a14:	4a0b      	ldr	r2, [pc, #44]	; (8004a44 <Horimetro+0x30>)
 8004a16:	490c      	ldr	r1, [pc, #48]	; (8004a48 <Horimetro+0x34>)
 8004a18:	f892 312c 	ldrb.w	r3, [r2, #300]	; 0x12c
 8004a1c:	f892 20e4 	ldrb.w	r2, [r2, #228]	; 0xe4
 8004a20:	4313      	orrs	r3, r2
 8004a22:	d00d      	beq.n	8004a40 <Horimetro+0x2c>
		segundos++;
 8004a24:	780b      	ldrb	r3, [r1, #0]
 8004a26:	3301      	adds	r3, #1
 8004a28:	b2db      	uxtb	r3, r3
		if(segundos == 60){
 8004a2a:	2b3c      	cmp	r3, #60	; 0x3c
 8004a2c:	d001      	beq.n	8004a32 <Horimetro+0x1e>
			segundos = 0;
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
		}

	}else{
		segundos = 1;
 8004a2e:	700b      	strb	r3, [r1, #0]
	}
}
 8004a30:	4770      	bx	lr
			segundos = 0;
 8004a32:	2200      	movs	r2, #0
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <Horimetro+0x38>)
			segundos = 0;
 8004a36:	700a      	strb	r2, [r1, #0]
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	f003 b9e3 	b.w	8007e06 <osMessagePut>
		segundos = 1;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e7f4      	b.n	8004a2e <Horimetro+0x1a>
 8004a44:	200008d0 	.word	0x200008d0
 8004a48:	20002b1e 	.word	0x20002b1e
 8004a4c:	200007e8 	.word	0x200007e8

08004a50 <sinalizacaoReachTemp>:
void sinalizacaoReachTemp(void){
 8004a50:	b570      	push	{r4, r5, r6, lr}
	static GenericPwmState __StateTeto, __StateLastro;

	//verifica se o estado anterior estava em buscando em qualquer dos dois PID
	if(__StateTeto == buscando || __StateLastro == buscando){
 8004a52:	4e0e      	ldr	r6, [pc, #56]	; (8004a8c <sinalizacaoReachTemp+0x3c>)
 8004a54:	4d0e      	ldr	r5, [pc, #56]	; (8004a90 <sinalizacaoReachTemp+0x40>)
 8004a56:	7833      	ldrb	r3, [r6, #0]
 8004a58:	4c0e      	ldr	r4, [pc, #56]	; (8004a94 <sinalizacaoReachTemp+0x44>)
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d002      	beq.n	8004a64 <sinalizacaoReachTemp+0x14>
 8004a5e:	782b      	ldrb	r3, [r5, #0]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d10c      	bne.n	8004a7e <sinalizacaoReachTemp+0x2e>
		if(PrimitiveStates.Teto._PWMstate != buscando && PrimitiveStates.Lastro._PWMstate != buscando ){
 8004a64:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d008      	beq.n	8004a7e <sinalizacaoReachTemp+0x2e>
 8004a6c:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d004      	beq.n	8004a7e <sinalizacaoReachTemp+0x2e>
			//notifica que chegou na temperatura
			osSignalSet(TaskBuzzerHandle, SINAL_TEMP_REACH);
 8004a74:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <sinalizacaoReachTemp+0x48>)
 8004a76:	2101      	movs	r1, #1
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	f003 f942 	bl	8007d02 <osSignalSet>
		}
	}
	__StateTeto 	= PrimitiveStates.Teto._PWMstate;
 8004a7e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8004a82:	7033      	strb	r3, [r6, #0]
	__StateLastro 	= PrimitiveStates.Lastro._PWMstate;
 8004a84:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8004a88:	702b      	strb	r3, [r5, #0]


}
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
 8004a8c:	20002b19 	.word	0x20002b19
 8004a90:	20002b18 	.word	0x20002b18
 8004a94:	200008d0 	.word	0x200008d0
 8004a98:	20001d54 	.word	0x20001d54

08004a9c <taskTemperatura1sec>:
void taskTemperatura1sec(void){
 8004a9c:	b508      	push	{r3, lr}
	WatchDogLimitesTemperatura();
 8004a9e:	f7ff ff05 	bl	80048ac <WatchDogLimitesTemperatura>
	sinalizacaoReachTemp();
 8004aa2:	f7ff ffd5 	bl	8004a50 <sinalizacaoReachTemp>
	SaidasLeds();
 8004aa6:	f7ff ff83 	bl	80049b0 <SaidasLeds>
}
 8004aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Horimetro();
 8004aae:	f7ff bfb1 	b.w	8004a14 <Horimetro>
	...

08004ab4 <funcionamentoTimer>:
		osThreadYield();
		osDelayUntil(&xLastWakeTime,1000);
	}
}

void funcionamentoTimer(void){
 8004ab4:	b570      	push	{r4, r5, r6, lr}

	//Decremento de minutos e segundos
	if((PrimitiveStates.RTTimerMinutos>0 && PrimitiveStates.RTTimerSegundos==0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004ab6:	4c1b      	ldr	r4, [pc, #108]	; (8004b24 <funcionamentoTimer+0x70>)
 8004ab8:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
 8004abc:	b17a      	cbz	r2, 8004ade <funcionamentoTimer+0x2a>
 8004abe:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8004ac2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ac6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ace:	d106      	bne.n	8004ade <funcionamentoTimer+0x2a>
		PrimitiveStates.RTTimerSegundos = 59;
 8004ad0:	233b      	movs	r3, #59	; 0x3b
		PrimitiveStates.RTTimerMinutos--;
 8004ad2:	3a01      	subs	r2, #1
		PrimitiveStates.RTTimerSegundos = 59;
 8004ad4:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
		PrimitiveStates.RTTimerMinutos--;
 8004ad8:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
			PrimitiveStates.stateTimer = TIMER_idle;
			osThreadResume(TaskBuzzerHandle);
		}
	}
}
 8004adc:	bd70      	pop	{r4, r5, r6, pc}
	}else if((PrimitiveStates.RTTimerMinutos>0 || PrimitiveStates.RTTimerSegundos>0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004ade:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0fa      	beq.n	8004adc <funcionamentoTimer+0x28>
 8004ae6:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d1f6      	bne.n	8004adc <funcionamentoTimer+0x28>
		PrimitiveStates.RTTimerSegundos--;
 8004aee:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
 8004af2:	3b01      	subs	r3, #1
 8004af4:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
		if(PrimitiveStates.RTTimerSegundos==0 && PrimitiveStates.RTTimerMinutos==0 && PrimitiveStates.stateTimer != TIMER_idle){
 8004af8:	f8b4 513c 	ldrh.w	r5, [r4, #316]	; 0x13c
 8004afc:	2d00      	cmp	r5, #0
 8004afe:	d1ed      	bne.n	8004adc <funcionamentoTimer+0x28>
			osMessagePut(FilaEepromHandle, CEepromNewCile, 0);
 8004b00:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <funcionamentoTimer+0x74>)
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
 8004b02:	4e0a      	ldr	r6, [pc, #40]	; (8004b2c <funcionamentoTimer+0x78>)
			osMessagePut(FilaEepromHandle, CEepromNewCile, 0);
 8004b04:	462a      	mov	r2, r5
 8004b06:	2107      	movs	r1, #7
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	f003 f97c 	bl	8007e06 <osMessagePut>
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
 8004b0e:	6830      	ldr	r0, [r6, #0]
 8004b10:	2108      	movs	r1, #8
 8004b12:	f003 f8f6 	bl	8007d02 <osSignalSet>
			osThreadResume(TaskBuzzerHandle);
 8004b16:	6830      	ldr	r0, [r6, #0]
			PrimitiveStates.stateTimer = TIMER_idle;
 8004b18:	f884 513e 	strb.w	r5, [r4, #318]	; 0x13e
}
 8004b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osThreadResume(TaskBuzzerHandle);
 8004b20:	f003 b9d8 	b.w	8007ed4 <osThreadResume>
 8004b24:	200008d0 	.word	0x200008d0
 8004b28:	200007e8 	.word	0x200007e8
 8004b2c:	20001d54 	.word	0x20001d54

08004b30 <verificaErro>:


void verificaErro(void){
 8004b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	osEvent evt;
	evt = osSignalWait (ERRO_CRITICO, 0);
 8004b32:	2200      	movs	r2, #0
 8004b34:	210f      	movs	r1, #15
 8004b36:	a801      	add	r0, sp, #4
 8004b38:	f003 f90c 	bl	8007d54 <osSignalWait>
	if (evt.status == osEventSignal){
 8004b3c:	9b01      	ldr	r3, [sp, #4]
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d109      	bne.n	8004b56 <verificaErro+0x26>

		if(evt.value.v == ERRO_CRITICO){
 8004b42:	9b02      	ldr	r3, [sp, #8]
 8004b44:	2b0f      	cmp	r3, #15
 8004b46:	d106      	bne.n	8004b56 <verificaErro+0x26>
			osThreadSuspend(TaskTimerHandle);
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <verificaErro+0x2c>)
 8004b4a:	6818      	ldr	r0, [r3, #0]
		}
	}
}
 8004b4c:	b005      	add	sp, #20
 8004b4e:	f85d eb04 	ldr.w	lr, [sp], #4
			osThreadSuspend(TaskTimerHandle);
 8004b52:	f003 b9ba 	b.w	8007eca <osThreadSuspend>
}
 8004b56:	b005      	add	sp, #20
 8004b58:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b5c:	20002000 	.word	0x20002000

08004b60 <StartTimer>:
{
 8004b60:	b507      	push	{r0, r1, r2, lr}
	xLastWakeTime = xTaskGetTickCount();
 8004b62:	f004 f863 	bl	8008c2c <xTaskGetTickCount>
 8004b66:	9001      	str	r0, [sp, #4]
		verificaErro();
 8004b68:	f7ff ffe2 	bl	8004b30 <verificaErro>
		funcionamentoTimer();
 8004b6c:	f7ff ffa2 	bl	8004ab4 <funcionamentoTimer>
		osThreadYield();
 8004b70:	f003 f872 	bl	8007c58 <osThreadYield>
		osDelayUntil(&xLastWakeTime,1000);
 8004b74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b78:	a801      	add	r0, sp, #4
 8004b7a:	f003 f9c2 	bl	8007f02 <osDelayUntil>
	for(;;)
 8004b7e:	e7f3      	b.n	8004b68 <StartTimer+0x8>

08004b80 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b80:	4a07      	ldr	r2, [pc, #28]	; (8004ba0 <HAL_Init+0x20>)
{
 8004b82:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b84:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b86:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b88:	f043 0310 	orr.w	r3, r3, #16
 8004b8c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b8e:	f000 fa55 	bl	800503c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b92:	200f      	movs	r0, #15
 8004b94:	f7fe fc36 	bl	8003404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b98:	f7fe fa0c 	bl	8002fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	bd08      	pop	{r3, pc}
 8004ba0:	40022000 	.word	0x40022000

08004ba4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004ba4:	4a03      	ldr	r2, [pc, #12]	; (8004bb4 <HAL_IncTick+0x10>)
 8004ba6:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <HAL_IncTick+0x14>)
 8004ba8:	6811      	ldr	r1, [r2, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	440b      	add	r3, r1
 8004bae:	6013      	str	r3, [r2, #0]
}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20002b20 	.word	0x20002b20
 8004bb8:	20000004 	.word	0x20000004

08004bbc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004bbc:	4b01      	ldr	r3, [pc, #4]	; (8004bc4 <HAL_GetTick+0x8>)
 8004bbe:	6818      	ldr	r0, [r3, #0]
}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20002b20 	.word	0x20002b20

08004bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004bcc:	f7ff fff6 	bl	8004bbc <HAL_GetTick>
 8004bd0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bd2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004bd4:	bf1e      	ittt	ne
 8004bd6:	4b04      	ldrne	r3, [pc, #16]	; (8004be8 <HAL_Delay+0x20>)
 8004bd8:	781b      	ldrbne	r3, [r3, #0]
 8004bda:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bdc:	f7ff ffee 	bl	8004bbc <HAL_GetTick>
 8004be0:	1b43      	subs	r3, r0, r5
 8004be2:	42a3      	cmp	r3, r4
 8004be4:	d3fa      	bcc.n	8004bdc <HAL_Delay+0x14>
  {
  }
}
 8004be6:	bd38      	pop	{r3, r4, r5, pc}
 8004be8:	20000004 	.word	0x20000004

08004bec <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bec:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004bee:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bf2:	f012 0f50 	tst.w	r2, #80	; 0x50
 8004bf6:	d11b      	bne.n	8004c30 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	6892      	ldr	r2, [r2, #8]
 8004c04:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8004c08:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8004c0c:	d10c      	bne.n	8004c28 <ADC_DMAConvCplt+0x3c>
 8004c0e:	7b1a      	ldrb	r2, [r3, #12]
 8004c10:	b952      	cbnz	r2, 8004c28 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c18:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c1c:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c1e:	bf5e      	ittt	pl
 8004c20:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8004c22:	f042 0201 	orrpl.w	r2, r2, #1
 8004c26:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fd ff45 	bl	8002ab8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004c2e:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c30:	6a1b      	ldr	r3, [r3, #32]
}
 8004c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	4718      	bx	r3

08004c3a <HAL_ADC_ConvHalfCpltCallback>:
 8004c3a:	4770      	bx	lr

08004c3c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004c3c:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004c40:	f7ff fffb 	bl	8004c3a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c44:	bd08      	pop	{r3, pc}

08004c46 <HAL_ADC_ErrorCallback>:
 8004c46:	4770      	bx	lr

08004c48 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c48:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8004c4a:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c52:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004c56:	f043 0304 	orr.w	r3, r3, #4
 8004c5a:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c5c:	f7ff fff3 	bl	8004c46 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c60:	bd08      	pop	{r3, pc}
	...

08004c64 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8004c64:	2300      	movs	r3, #0
{ 
 8004c66:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8004c68:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004c6a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8004c6e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d06c      	beq.n	8004d4e <HAL_ADC_ConfigChannel+0xea>
 8004c74:	2301      	movs	r3, #1
 8004c76:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8004c7a:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004c7c:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8004c7e:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004c80:	6808      	ldr	r0, [r1, #0]
 8004c82:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8004c86:	d822      	bhi.n	8004cce <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004c88:	261f      	movs	r6, #31
 8004c8a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8004c8c:	3b05      	subs	r3, #5
 8004c8e:	409e      	lsls	r6, r3
 8004c90:	ea25 0506 	bic.w	r5, r5, r6
 8004c94:	fa00 f303 	lsl.w	r3, r0, r3
 8004c98:	432b      	orrs	r3, r5
 8004c9a:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004c9c:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004c9e:	688b      	ldr	r3, [r1, #8]
 8004ca0:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8004ca4:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004ca8:	d929      	bls.n	8004cfe <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004caa:	68d6      	ldr	r6, [r2, #12]
 8004cac:	3d1e      	subs	r5, #30
 8004cae:	40a9      	lsls	r1, r5
 8004cb0:	ea26 0101 	bic.w	r1, r6, r1
 8004cb4:	40ab      	lsls	r3, r5
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004cba:	f1a0 0310 	sub.w	r3, r0, #16
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d925      	bls.n	8004d0e <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cc2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8004cca:	b002      	add	sp, #8
 8004ccc:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8004cce:	2d0c      	cmp	r5, #12
 8004cd0:	f04f 051f 	mov.w	r5, #31
 8004cd4:	d809      	bhi.n	8004cea <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004cd6:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8004cd8:	3b23      	subs	r3, #35	; 0x23
 8004cda:	409d      	lsls	r5, r3
 8004cdc:	ea26 0505 	bic.w	r5, r6, r5
 8004ce0:	fa00 f303 	lsl.w	r3, r0, r3
 8004ce4:	432b      	orrs	r3, r5
 8004ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce8:	e7d8      	b.n	8004c9c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004cea:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8004cec:	3b41      	subs	r3, #65	; 0x41
 8004cee:	409d      	lsls	r5, r3
 8004cf0:	ea26 0505 	bic.w	r5, r6, r5
 8004cf4:	fa00 f303 	lsl.w	r3, r0, r3
 8004cf8:	432b      	orrs	r3, r5
 8004cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cfc:	e7ce      	b.n	8004c9c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004cfe:	6910      	ldr	r0, [r2, #16]
 8004d00:	40a9      	lsls	r1, r5
 8004d02:	ea20 0101 	bic.w	r1, r0, r1
 8004d06:	40ab      	lsls	r3, r5
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	6113      	str	r3, [r2, #16]
 8004d0c:	e7d9      	b.n	8004cc2 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8004d0e:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <HAL_ADC_ConfigChannel+0xf0>)
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d116      	bne.n	8004d42 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004d14:	6893      	ldr	r3, [r2, #8]
 8004d16:	021b      	lsls	r3, r3, #8
 8004d18:	d4d3      	bmi.n	8004cc2 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004d1a:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d1c:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004d1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d22:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d24:	d1cd      	bne.n	8004cc2 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d26:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <HAL_ADC_ConfigChannel+0xf4>)
 8004d28:	4a0c      	ldr	r2, [pc, #48]	; (8004d5c <HAL_ADC_ConfigChannel+0xf8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d30:	220a      	movs	r2, #10
 8004d32:	4353      	muls	r3, r2
            wait_loop_index--;
 8004d34:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004d36:	9b01      	ldr	r3, [sp, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0c2      	beq.n	8004cc2 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8004d3c:	9b01      	ldr	r3, [sp, #4]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	e7f8      	b.n	8004d34 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8004d44:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d46:	f043 0320 	orr.w	r3, r3, #32
 8004d4a:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8004d4c:	e7ba      	b.n	8004cc4 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8004d4e:	2002      	movs	r0, #2
 8004d50:	e7bb      	b.n	8004cca <HAL_ADC_ConfigChannel+0x66>
 8004d52:	bf00      	nop
 8004d54:	40012400 	.word	0x40012400
 8004d58:	20000000 	.word	0x20000000
 8004d5c:	000f4240 	.word	0x000f4240

08004d60 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8004d60:	2300      	movs	r3, #0
{
 8004d62:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8004d64:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d66:	6803      	ldr	r3, [r0, #0]
{
 8004d68:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	07d2      	lsls	r2, r2, #31
 8004d6e:	d502      	bpl.n	8004d76 <ADC_Enable+0x16>
  return HAL_OK;
 8004d70:	2000      	movs	r0, #0
}
 8004d72:	b003      	add	sp, #12
 8004d74:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d7e:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <ADC_Enable+0x70>)
 8004d80:	4a14      	ldr	r2, [pc, #80]	; (8004dd4 <ADC_Enable+0x74>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8004d88:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8004d8a:	9b01      	ldr	r3, [sp, #4]
 8004d8c:	b9e3      	cbnz	r3, 8004dc8 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8004d8e:	f7ff ff15 	bl	8004bbc <HAL_GetTick>
 8004d92:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	07db      	lsls	r3, r3, #31
 8004d9a:	d4e9      	bmi.n	8004d70 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d9c:	f7ff ff0e 	bl	8004bbc <HAL_GetTick>
 8004da0:	1b40      	subs	r0, r0, r5
 8004da2:	2802      	cmp	r0, #2
 8004da4:	d9f6      	bls.n	8004d94 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f013 0301 	ands.w	r3, r3, #1
 8004dae:	d1f1      	bne.n	8004d94 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004db0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 8004db2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004db4:	f042 0210 	orr.w	r2, r2, #16
 8004db8:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8004dbc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dc0:	f042 0201 	orr.w	r2, r2, #1
 8004dc4:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8004dc6:	e7d4      	b.n	8004d72 <ADC_Enable+0x12>
      wait_loop_index--;
 8004dc8:	9b01      	ldr	r3, [sp, #4]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	e7dc      	b.n	8004d88 <ADC_Enable+0x28>
 8004dce:	bf00      	nop
 8004dd0:	20000000 	.word	0x20000000
 8004dd4:	000f4240 	.word	0x000f4240

08004dd8 <HAL_ADC_Start_DMA>:
{
 8004dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004ddc:	4b40      	ldr	r3, [pc, #256]	; (8004ee0 <HAL_ADC_Start_DMA+0x108>)
{
 8004dde:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004de0:	6802      	ldr	r2, [r0, #0]
{
 8004de2:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004de4:	429a      	cmp	r2, r3
{
 8004de6:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004de8:	d002      	beq.n	8004df0 <HAL_ADC_Start_DMA+0x18>
 8004dea:	493e      	ldr	r1, [pc, #248]	; (8004ee4 <HAL_ADC_Start_DMA+0x10c>)
 8004dec:	428a      	cmp	r2, r1
 8004dee:	d103      	bne.n	8004df8 <HAL_ADC_Start_DMA+0x20>
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8004df6:	d16e      	bne.n	8004ed6 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8004df8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d06c      	beq.n	8004eda <HAL_ADC_Start_DMA+0x102>
 8004e00:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8004e02:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8004e04:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8004e08:	f7ff ffaa 	bl	8004d60 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004e0c:	4606      	mov	r6, r0
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d15d      	bne.n	8004ece <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8004e12:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004e14:	6821      	ldr	r1, [r4, #0]
 8004e16:	4b33      	ldr	r3, [pc, #204]	; (8004ee4 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8004e18:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8004e1c:	f025 0501 	bic.w	r5, r5, #1
 8004e20:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004e24:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8004e26:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004e28:	d104      	bne.n	8004e34 <HAL_ADC_Start_DMA+0x5c>
 8004e2a:	4a2d      	ldr	r2, [pc, #180]	; (8004ee0 <HAL_ADC_Start_DMA+0x108>)
 8004e2c:	6853      	ldr	r3, [r2, #4]
 8004e2e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8004e32:	d13e      	bne.n	8004eb2 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004e3a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004e3c:	684b      	ldr	r3, [r1, #4]
 8004e3e:	055a      	lsls	r2, r3, #21
 8004e40:	d505      	bpl.n	8004e4e <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004e42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e4c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e50:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e52:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004e56:	bf18      	it	ne
 8004e58:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e5a:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004e5c:	bf18      	it	ne
 8004e5e:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8004e62:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8004e64:	2300      	movs	r3, #0
 8004e66:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ee8 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e6c:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e6e:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e70:	4b1e      	ldr	r3, [pc, #120]	; (8004eec <HAL_ADC_Start_DMA+0x114>)
 8004e72:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004e74:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <HAL_ADC_Start_DMA+0x118>)
 8004e76:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004e78:	f06f 0302 	mvn.w	r3, #2
 8004e7c:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004e80:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8004e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e88:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e8c:	4643      	mov	r3, r8
 8004e8e:	f000 f993 	bl	80051b8 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8004e9a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	bf0c      	ite	eq
 8004ea2:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004ea6:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8004eaa:	609a      	str	r2, [r3, #8]
}
 8004eac:	4630      	mov	r0, r6
 8004eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004eb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004eb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eb8:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004eba:	6853      	ldr	r3, [r2, #4]
 8004ebc:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ebe:	bf41      	itttt	mi
 8004ec0:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8004ec2:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8004ec6:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8004eca:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8004ecc:	e7bf      	b.n	8004e4e <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8004ed4:	e7ea      	b.n	8004eac <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8004ed6:	2601      	movs	r6, #1
 8004ed8:	e7e8      	b.n	8004eac <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8004eda:	2602      	movs	r6, #2
 8004edc:	e7e6      	b.n	8004eac <HAL_ADC_Start_DMA+0xd4>
 8004ede:	bf00      	nop
 8004ee0:	40012400 	.word	0x40012400
 8004ee4:	40012800 	.word	0x40012800
 8004ee8:	08004bed 	.word	0x08004bed
 8004eec:	08004c3d 	.word	0x08004c3d
 8004ef0:	08004c49 	.word	0x08004c49

08004ef4 <ADC_ConversionStop_Disable>:
{
 8004ef4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004ef6:	6803      	ldr	r3, [r0, #0]
{
 8004ef8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	07d1      	lsls	r1, r2, #31
 8004efe:	d401      	bmi.n	8004f04 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8004f00:	2000      	movs	r0, #0
}
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	f022 0201 	bic.w	r2, r2, #1
 8004f0a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004f0c:	f7ff fe56 	bl	8004bbc <HAL_GetTick>
 8004f10:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	07db      	lsls	r3, r3, #31
 8004f18:	d5f2      	bpl.n	8004f00 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004f1a:	f7ff fe4f 	bl	8004bbc <HAL_GetTick>
 8004f1e:	1b40      	subs	r0, r0, r5
 8004f20:	2802      	cmp	r0, #2
 8004f22:	d9f6      	bls.n	8004f12 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	07da      	lsls	r2, r3, #31
 8004f2a:	d5f2      	bpl.n	8004f12 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8004f2e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f30:	f043 0310 	orr.w	r3, r3, #16
 8004f34:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8004f3e:	e7e0      	b.n	8004f02 <ADC_ConversionStop_Disable+0xe>

08004f40 <HAL_ADC_Init>:
{
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8004f42:	4604      	mov	r4, r0
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d06d      	beq.n	8005024 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f48:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f4a:	b923      	cbnz	r3, 8004f56 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8004f4c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8004f4e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8004f52:	f7fe f857 	bl	8003004 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004f56:	4620      	mov	r0, r4
 8004f58:	f7ff ffcc 	bl	8004ef4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004f5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f5e:	f013 0310 	ands.w	r3, r3, #16
 8004f62:	d161      	bne.n	8005028 <HAL_ADC_Init+0xe8>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	d15f      	bne.n	8005028 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 8004f68:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f6a:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8004f6c:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004f70:	f022 0202 	bic.w	r2, r2, #2
 8004f74:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f78:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004f7a:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8004f7c:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004f7e:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f80:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004f82:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004f86:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004f8a:	d036      	beq.n	8004ffa <HAL_ADC_Init+0xba>
 8004f8c:	1e77      	subs	r7, r6, #1
 8004f8e:	427d      	negs	r5, r7
 8004f90:	417d      	adcs	r5, r7
 8004f92:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f94:	7d27      	ldrb	r7, [r4, #20]
 8004f96:	2f01      	cmp	r7, #1
 8004f98:	d106      	bne.n	8004fa8 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004f9a:	bb82      	cbnz	r2, 8004ffe <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004f9c:	69a2      	ldr	r2, [r4, #24]
 8004f9e:	3a01      	subs	r2, #1
 8004fa0:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8004fa4:	f442 6500 	orr.w	r5, r2, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8004fa8:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004faa:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8004fae:	6857      	ldr	r7, [r2, #4]
 8004fb0:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8004fb4:	ea45 0507 	orr.w	r5, r5, r7
 8004fb8:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8004fba:	6897      	ldr	r7, [r2, #8]
 8004fbc:	4d1d      	ldr	r5, [pc, #116]	; (8005034 <HAL_ADC_Init+0xf4>)
 8004fbe:	ea05 0507 	and.w	r5, r5, r7
 8004fc2:	ea45 0501 	orr.w	r5, r5, r1
 8004fc6:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004fc8:	d001      	beq.n	8004fce <HAL_ADC_Init+0x8e>
 8004fca:	2e01      	cmp	r6, #1
 8004fcc:	d102      	bne.n	8004fd4 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004fce:	6923      	ldr	r3, [r4, #16]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8004fd4:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8004fd6:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8004fda:	432b      	orrs	r3, r5
 8004fdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004fde:	6892      	ldr	r2, [r2, #8]
 8004fe0:	4b15      	ldr	r3, [pc, #84]	; (8005038 <HAL_ADC_Init+0xf8>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	4299      	cmp	r1, r3
 8004fe6:	d113      	bne.n	8005010 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8004fe8:	2300      	movs	r3, #0
 8004fea:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8004fec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fee:	f023 0303 	bic.w	r3, r3, #3
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8004ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004ffa:	4635      	mov	r5, r6
 8004ffc:	e7ca      	b.n	8004f94 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ffe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005000:	f042 0220 	orr.w	r2, r2, #32
 8005004:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005006:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005008:	f042 0201 	orr.w	r2, r2, #1
 800500c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800500e:	e7cb      	b.n	8004fa8 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8005010:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005012:	f023 0312 	bic.w	r3, r3, #18
 8005016:	f043 0310 	orr.w	r3, r3, #16
 800501a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800501c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8005024:	2001      	movs	r0, #1
 8005026:	e7e7      	b.n	8004ff8 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005028:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800502a:	f043 0310 	orr.w	r3, r3, #16
 800502e:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8005030:	e7f8      	b.n	8005024 <HAL_ADC_Init+0xe4>
 8005032:	bf00      	nop
 8005034:	ffe1f7fd 	.word	0xffe1f7fd
 8005038:	ff1f0efe 	.word	0xff1f0efe

0800503c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800503c:	4907      	ldr	r1, [pc, #28]	; (800505c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800503e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005040:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005042:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005046:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800504a:	0412      	lsls	r2, r2, #16
 800504c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800504e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005058:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800505a:	4770      	bx	lr
 800505c:	e000ed00 	.word	0xe000ed00

08005060 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005060:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005062:	b530      	push	{r4, r5, lr}
 8005064:	68dc      	ldr	r4, [r3, #12]
 8005066:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800506a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800506e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005070:	2b04      	cmp	r3, #4
 8005072:	bf28      	it	cs
 8005074:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005076:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005078:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800507c:	bf94      	ite	ls
 800507e:	2400      	movls	r4, #0
 8005080:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005082:	fa05 f303 	lsl.w	r3, r5, r3
 8005086:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800508a:	40a5      	lsls	r5, r4
 800508c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005090:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8005092:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005094:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005098:	bfac      	ite	ge
 800509a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800509e:	4a07      	ldrlt	r2, [pc, #28]	; (80050bc <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	bfab      	itete	ge
 80050a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ac:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80050b6:	bd30      	pop	{r4, r5, pc}
 80050b8:	e000ed00 	.word	0xe000ed00
 80050bc:	e000ed14 	.word	0xe000ed14

080050c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80050c0:	2800      	cmp	r0, #0
 80050c2:	db07      	blt.n	80050d4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050c4:	2301      	movs	r3, #1
 80050c6:	0941      	lsrs	r1, r0, #5
 80050c8:	4a03      	ldr	r2, [pc, #12]	; (80050d8 <HAL_NVIC_EnableIRQ+0x18>)
 80050ca:	f000 001f 	and.w	r0, r0, #31
 80050ce:	4083      	lsls	r3, r0
 80050d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	e000e100 	.word	0xe000e100

080050dc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80050dc:	2800      	cmp	r0, #0
 80050de:	db0c      	blt.n	80050fa <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050e0:	2201      	movs	r2, #1
 80050e2:	4906      	ldr	r1, [pc, #24]	; (80050fc <HAL_NVIC_DisableIRQ+0x20>)
 80050e4:	0943      	lsrs	r3, r0, #5
 80050e6:	f000 001f 	and.w	r0, r0, #31
 80050ea:	4082      	lsls	r2, r0
 80050ec:	3320      	adds	r3, #32
 80050ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80050f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80050f6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80050fa:	4770      	bx	lr
 80050fc:	e000e100 	.word	0xe000e100

08005100 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005100:	4603      	mov	r3, r0
{
 8005102:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8005104:	b340      	cbz	r0, 8005158 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005106:	2114      	movs	r1, #20
 8005108:	6800      	ldr	r0, [r0, #0]
 800510a:	4a14      	ldr	r2, [pc, #80]	; (800515c <HAL_DMA_Init+0x5c>)
 800510c:	4402      	add	r2, r0
 800510e:	fbb2 f2f1 	udiv	r2, r2, r1
 8005112:	0092      	lsls	r2, r2, #2
 8005114:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005116:	4a12      	ldr	r2, [pc, #72]	; (8005160 <HAL_DMA_Init+0x60>)
 8005118:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800511a:	2202      	movs	r2, #2
 800511c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005120:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8005124:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005126:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 8005128:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800512a:	4322      	orrs	r2, r4
 800512c:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800512e:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005132:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005134:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005136:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800513a:	4322      	orrs	r2, r4
 800513c:	699c      	ldr	r4, [r3, #24]
 800513e:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8005140:	69dc      	ldr	r4, [r3, #28]
 8005142:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8005144:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005146:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005148:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800514a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800514c:	6398      	str	r0, [r3, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800514e:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8005152:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
}
 8005156:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005158:	2001      	movs	r0, #1
 800515a:	e7fc      	b.n	8005156 <HAL_DMA_Init+0x56>
 800515c:	bffdfff8 	.word	0xbffdfff8
 8005160:	40020000 	.word	0x40020000

08005164 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005164:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005166:	b308      	cbz	r0, 80051ac <HAL_DMA_DeInit+0x48>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005168:	6801      	ldr	r1, [r0, #0]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800516a:	4a11      	ldr	r2, [pc, #68]	; (80051b0 <HAL_DMA_DeInit+0x4c>)
  __HAL_DMA_DISABLE(hdma);
 800516c:	680b      	ldr	r3, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800516e:	440a      	add	r2, r1
  __HAL_DMA_DISABLE(hdma);
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	600b      	str	r3, [r1, #0]
  hdma->Instance->CCR  = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	600b      	str	r3, [r1, #0]
  hdma->Instance->CNDTR = 0U;
 800517a:	604b      	str	r3, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 800517c:	608b      	str	r3, [r1, #8]
  hdma->Instance->CMAR = 0U;
 800517e:	60cb      	str	r3, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005180:	2114      	movs	r1, #20
 8005182:	fbb2 f2f1 	udiv	r2, r2, r1
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8005186:	2101      	movs	r1, #1
  hdma->DmaBaseAddress = DMA1;
 8005188:	4c0a      	ldr	r4, [pc, #40]	; (80051b4 <HAL_DMA_DeInit+0x50>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800518a:	0092      	lsls	r2, r2, #2
 800518c:	6402      	str	r2, [r0, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800518e:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8005192:	63c4      	str	r4, [r0, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8005194:	6062      	str	r2, [r4, #4]
  hdma->XferHalfCpltCallback = NULL;
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005196:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->XferHalfCpltCallback = NULL;
 8005198:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 800519c:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80051a0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80051a4:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 80051a8:	4618      	mov	r0, r3
}
 80051aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80051ac:	2001      	movs	r0, #1
 80051ae:	e7fc      	b.n	80051aa <HAL_DMA_DeInit+0x46>
 80051b0:	bffdfff8 	.word	0xbffdfff8
 80051b4:	40020000 	.word	0x40020000

080051b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ba:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051bc:	f890 0020 	ldrb.w	r0, [r0, #32]
 80051c0:	2801      	cmp	r0, #1
 80051c2:	d036      	beq.n	8005232 <HAL_DMA_Start_IT+0x7a>
 80051c4:	2001      	movs	r0, #1
 80051c6:	f885 0020 	strb.w	r0, [r5, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80051ca:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
 80051ce:	2400      	movs	r4, #0
 80051d0:	2801      	cmp	r0, #1
 80051d2:	b2c6      	uxtb	r6, r0
 80051d4:	f04f 0002 	mov.w	r0, #2
 80051d8:	d128      	bne.n	800522c <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051da:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051de:	63ac      	str	r4, [r5, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051e0:	682c      	ldr	r4, [r5, #0]
 80051e2:	6820      	ldr	r0, [r4, #0]
 80051e4:	f020 0001 	bic.w	r0, r0, #1
 80051e8:	6020      	str	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80051ea:	e9d5 700f 	ldrd	r7, r0, [r5, #60]	; 0x3c
 80051ee:	fa06 f000 	lsl.w	r0, r6, r0
 80051f2:	6078      	str	r0, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051f4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051f6:	686b      	ldr	r3, [r5, #4]
 80051f8:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80051fa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80051fc:	bf0b      	itete	eq
 80051fe:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005200:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005202:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005204:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8005206:	b14b      	cbz	r3, 800521c <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 800520e:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005210:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	6023      	str	r3, [r4, #0]
}
 800521a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	f023 0304 	bic.w	r3, r3, #4
 8005222:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	f043 030a 	orr.w	r3, r3, #10
 800522a:	e7f0      	b.n	800520e <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 800522c:	f885 4020 	strb.w	r4, [r5, #32]
    status = HAL_BUSY;
 8005230:	e7f3      	b.n	800521a <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 8005232:	2002      	movs	r0, #2
 8005234:	e7f1      	b.n	800521a <HAL_DMA_Start_IT+0x62>

08005236 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005236:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 800523a:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800523c:	2a02      	cmp	r2, #2
 800523e:	d006      	beq.n	800524e <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005240:	2204      	movs	r2, #4
 8005242:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_ERROR;
 8005244:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2020 	strb.w	r2, [r3, #32]
}
 800524c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800524e:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005250:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005252:	6811      	ldr	r1, [r2, #0]
 8005254:	f021 010e 	bic.w	r1, r1, #14
 8005258:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800525a:	6811      	ldr	r1, [r2, #0]
 800525c:	f021 0101 	bic.w	r1, r1, #1
 8005260:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005262:	2101      	movs	r1, #1
 8005264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005266:	fa01 f202 	lsl.w	r2, r1, r2
 800526a:	6042      	str	r2, [r0, #4]
  return status; 
 800526c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800526e:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  return status; 
 8005272:	e7e8      	b.n	8005246 <HAL_DMA_Abort+0x10>

08005274 <HAL_DMA_Abort_IT>:
{  
 8005274:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005276:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800527a:	2b02      	cmp	r3, #2
 800527c:	d003      	beq.n	8005286 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800527e:	2304      	movs	r3, #4
 8005280:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8005282:	2001      	movs	r0, #1
}
 8005284:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005286:	6803      	ldr	r3, [r0, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	f022 020e 	bic.w	r2, r2, #14
 800528e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005298:	4a18      	ldr	r2, [pc, #96]	; (80052fc <HAL_DMA_Abort_IT+0x88>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d01f      	beq.n	80052de <HAL_DMA_Abort_IT+0x6a>
 800529e:	3214      	adds	r2, #20
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d01e      	beq.n	80052e2 <HAL_DMA_Abort_IT+0x6e>
 80052a4:	3214      	adds	r2, #20
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d01d      	beq.n	80052e6 <HAL_DMA_Abort_IT+0x72>
 80052aa:	3214      	adds	r2, #20
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d01d      	beq.n	80052ec <HAL_DMA_Abort_IT+0x78>
 80052b0:	3214      	adds	r2, #20
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d01d      	beq.n	80052f2 <HAL_DMA_Abort_IT+0x7e>
 80052b6:	3214      	adds	r2, #20
 80052b8:	4293      	cmp	r3, r2
 80052ba:	bf0c      	ite	eq
 80052bc:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80052c0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80052c4:	4a0e      	ldr	r2, [pc, #56]	; (8005300 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80052c6:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80052c8:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80052d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80052d2:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80052d6:	b17b      	cbz	r3, 80052f8 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80052d8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80052da:	4620      	mov	r0, r4
 80052dc:	e7d2      	b.n	8005284 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80052de:	2301      	movs	r3, #1
 80052e0:	e7f0      	b.n	80052c4 <HAL_DMA_Abort_IT+0x50>
 80052e2:	2310      	movs	r3, #16
 80052e4:	e7ee      	b.n	80052c4 <HAL_DMA_Abort_IT+0x50>
 80052e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052ea:	e7eb      	b.n	80052c4 <HAL_DMA_Abort_IT+0x50>
 80052ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052f0:	e7e8      	b.n	80052c4 <HAL_DMA_Abort_IT+0x50>
 80052f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052f6:	e7e5      	b.n	80052c4 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80052f8:	4618      	mov	r0, r3
 80052fa:	e7c3      	b.n	8005284 <HAL_DMA_Abort_IT+0x10>
 80052fc:	40020008 	.word	0x40020008
 8005300:	40020000 	.word	0x40020000

08005304 <HAL_DMA_IRQHandler>:
{
 8005304:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005306:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005308:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800530a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800530c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800530e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005310:	4095      	lsls	r5, r2
 8005312:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005314:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005316:	d032      	beq.n	800537e <HAL_DMA_IRQHandler+0x7a>
 8005318:	074d      	lsls	r5, r1, #29
 800531a:	d530      	bpl.n	800537e <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005320:	bf5e      	ittt	pl
 8005322:	681a      	ldrpl	r2, [r3, #0]
 8005324:	f022 0204 	bicpl.w	r2, r2, #4
 8005328:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800532a:	4a3e      	ldr	r2, [pc, #248]	; (8005424 <HAL_DMA_IRQHandler+0x120>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d019      	beq.n	8005364 <HAL_DMA_IRQHandler+0x60>
 8005330:	3214      	adds	r2, #20
 8005332:	4293      	cmp	r3, r2
 8005334:	d018      	beq.n	8005368 <HAL_DMA_IRQHandler+0x64>
 8005336:	3214      	adds	r2, #20
 8005338:	4293      	cmp	r3, r2
 800533a:	d017      	beq.n	800536c <HAL_DMA_IRQHandler+0x68>
 800533c:	3214      	adds	r2, #20
 800533e:	4293      	cmp	r3, r2
 8005340:	d017      	beq.n	8005372 <HAL_DMA_IRQHandler+0x6e>
 8005342:	3214      	adds	r2, #20
 8005344:	4293      	cmp	r3, r2
 8005346:	d017      	beq.n	8005378 <HAL_DMA_IRQHandler+0x74>
 8005348:	3214      	adds	r2, #20
 800534a:	4293      	cmp	r3, r2
 800534c:	bf0c      	ite	eq
 800534e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8005352:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8005356:	4a34      	ldr	r2, [pc, #208]	; (8005428 <HAL_DMA_IRQHandler+0x124>)
 8005358:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800535a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800535c:	2b00      	cmp	r3, #0
 800535e:	d05e      	beq.n	800541e <HAL_DMA_IRQHandler+0x11a>
}
 8005360:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005362:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005364:	2304      	movs	r3, #4
 8005366:	e7f6      	b.n	8005356 <HAL_DMA_IRQHandler+0x52>
 8005368:	2340      	movs	r3, #64	; 0x40
 800536a:	e7f4      	b.n	8005356 <HAL_DMA_IRQHandler+0x52>
 800536c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005370:	e7f1      	b.n	8005356 <HAL_DMA_IRQHandler+0x52>
 8005372:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005376:	e7ee      	b.n	8005356 <HAL_DMA_IRQHandler+0x52>
 8005378:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800537c:	e7eb      	b.n	8005356 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800537e:	2502      	movs	r5, #2
 8005380:	4095      	lsls	r5, r2
 8005382:	4225      	tst	r5, r4
 8005384:	d035      	beq.n	80053f2 <HAL_DMA_IRQHandler+0xee>
 8005386:	078d      	lsls	r5, r1, #30
 8005388:	d533      	bpl.n	80053f2 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	0694      	lsls	r4, r2, #26
 800538e:	d406      	bmi.n	800539e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	f022 020a 	bic.w	r2, r2, #10
 8005396:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005398:	2201      	movs	r2, #1
 800539a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800539e:	4a21      	ldr	r2, [pc, #132]	; (8005424 <HAL_DMA_IRQHandler+0x120>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d019      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xd4>
 80053a4:	3214      	adds	r2, #20
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d018      	beq.n	80053dc <HAL_DMA_IRQHandler+0xd8>
 80053aa:	3214      	adds	r2, #20
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d017      	beq.n	80053e0 <HAL_DMA_IRQHandler+0xdc>
 80053b0:	3214      	adds	r2, #20
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d017      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xe2>
 80053b6:	3214      	adds	r2, #20
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d017      	beq.n	80053ec <HAL_DMA_IRQHandler+0xe8>
 80053bc:	3214      	adds	r2, #20
 80053be:	4293      	cmp	r3, r2
 80053c0:	bf0c      	ite	eq
 80053c2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80053c6:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <HAL_DMA_IRQHandler+0x124>)
 80053cc:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80053ce:	2300      	movs	r3, #0
 80053d0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80053d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80053d6:	e7c1      	b.n	800535c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80053d8:	2302      	movs	r3, #2
 80053da:	e7f6      	b.n	80053ca <HAL_DMA_IRQHandler+0xc6>
 80053dc:	2320      	movs	r3, #32
 80053de:	e7f4      	b.n	80053ca <HAL_DMA_IRQHandler+0xc6>
 80053e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053e4:	e7f1      	b.n	80053ca <HAL_DMA_IRQHandler+0xc6>
 80053e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053ea:	e7ee      	b.n	80053ca <HAL_DMA_IRQHandler+0xc6>
 80053ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053f0:	e7eb      	b.n	80053ca <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80053f2:	2508      	movs	r5, #8
 80053f4:	4095      	lsls	r5, r2
 80053f6:	4225      	tst	r5, r4
 80053f8:	d011      	beq.n	800541e <HAL_DMA_IRQHandler+0x11a>
 80053fa:	0709      	lsls	r1, r1, #28
 80053fc:	d50f      	bpl.n	800541e <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053fe:	6819      	ldr	r1, [r3, #0]
 8005400:	f021 010e 	bic.w	r1, r1, #14
 8005404:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005406:	2301      	movs	r3, #1
 8005408:	fa03 f202 	lsl.w	r2, r3, r2
 800540c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800540e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8005410:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8005414:	2300      	movs	r3, #0
 8005416:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800541a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800541c:	e79e      	b.n	800535c <HAL_DMA_IRQHandler+0x58>
}
 800541e:	bc70      	pop	{r4, r5, r6}
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40020008 	.word	0x40020008
 8005428:	40020000 	.word	0x40020000

0800542c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800542c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005430:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8005432:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005434:	4f64      	ldr	r7, [pc, #400]	; (80055c8 <HAL_GPIO_Init+0x19c>)
 8005436:	4b65      	ldr	r3, [pc, #404]	; (80055cc <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8005438:	f8df c194 	ldr.w	ip, [pc, #404]	; 80055d0 <HAL_GPIO_Init+0x1a4>
 800543c:	f8df e194 	ldr.w	lr, [pc, #404]	; 80055d4 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005440:	680d      	ldr	r5, [r1, #0]
 8005442:	fa35 f406 	lsrs.w	r4, r5, r6
 8005446:	d102      	bne.n	800544e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8005448:	b003      	add	sp, #12
 800544a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800544e:	f04f 0801 	mov.w	r8, #1
 8005452:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005456:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 800545a:	ea38 0505 	bics.w	r5, r8, r5
 800545e:	d17a      	bne.n	8005556 <HAL_GPIO_Init+0x12a>
      switch (GPIO_Init->Mode)
 8005460:	684d      	ldr	r5, [r1, #4]
 8005462:	2d03      	cmp	r5, #3
 8005464:	d807      	bhi.n	8005476 <HAL_GPIO_Init+0x4a>
 8005466:	3d01      	subs	r5, #1
 8005468:	2d02      	cmp	r5, #2
 800546a:	f200 8087 	bhi.w	800557c <HAL_GPIO_Init+0x150>
 800546e:	e8df f005 	tbb	[pc, r5]
 8005472:	9a95      	.short	0x9a95
 8005474:	a0          	.byte	0xa0
 8005475:	00          	.byte	0x00
 8005476:	2d12      	cmp	r5, #18
 8005478:	f000 8098 	beq.w	80055ac <HAL_GPIO_Init+0x180>
 800547c:	d86d      	bhi.n	800555a <HAL_GPIO_Init+0x12e>
 800547e:	2d11      	cmp	r5, #17
 8005480:	f000 808e 	beq.w	80055a0 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005484:	2cff      	cmp	r4, #255	; 0xff
 8005486:	bf98      	it	ls
 8005488:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800548a:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800548e:	bf88      	it	hi
 8005490:	f100 0a04 	addhi.w	sl, r0, #4
 8005494:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005498:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800549c:	bf88      	it	hi
 800549e:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80054a0:	fa09 fb05 	lsl.w	fp, r9, r5
 80054a4:	ea28 080b 	bic.w	r8, r8, fp
 80054a8:	fa02 f505 	lsl.w	r5, r2, r5
 80054ac:	ea48 0505 	orr.w	r5, r8, r5
 80054b0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80054b4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80054b8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80054bc:	d04b      	beq.n	8005556 <HAL_GPIO_Init+0x12a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80054be:	69bd      	ldr	r5, [r7, #24]
 80054c0:	f026 0803 	bic.w	r8, r6, #3
 80054c4:	f045 0501 	orr.w	r5, r5, #1
 80054c8:	61bd      	str	r5, [r7, #24]
 80054ca:	69bd      	ldr	r5, [r7, #24]
 80054cc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80054d0:	f005 0501 	and.w	r5, r5, #1
 80054d4:	9501      	str	r5, [sp, #4]
 80054d6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054da:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80054de:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054e0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80054e4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054e8:	fa09 f90b 	lsl.w	r9, r9, fp
 80054ec:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80054f0:	4d39      	ldr	r5, [pc, #228]	; (80055d8 <HAL_GPIO_Init+0x1ac>)
 80054f2:	42a8      	cmp	r0, r5
 80054f4:	d061      	beq.n	80055ba <HAL_GPIO_Init+0x18e>
 80054f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80054fa:	42a8      	cmp	r0, r5
 80054fc:	d05f      	beq.n	80055be <HAL_GPIO_Init+0x192>
 80054fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005502:	42a8      	cmp	r0, r5
 8005504:	d05d      	beq.n	80055c2 <HAL_GPIO_Init+0x196>
 8005506:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800550a:	42a8      	cmp	r0, r5
 800550c:	bf0c      	ite	eq
 800550e:	2503      	moveq	r5, #3
 8005510:	2504      	movne	r5, #4
 8005512:	fa05 f50b 	lsl.w	r5, r5, fp
 8005516:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800551a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800551e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005520:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8005524:	bf14      	ite	ne
 8005526:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005528:	43a5      	biceq	r5, r4
 800552a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800552c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800552e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8005532:	bf14      	ite	ne
 8005534:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005536:	43a5      	biceq	r5, r4
 8005538:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800553a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800553c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8005540:	bf14      	ite	ne
 8005542:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005544:	43a5      	biceq	r5, r4
 8005546:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8005548:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800554a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800554e:	bf14      	ite	ne
 8005550:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005552:	43a5      	biceq	r5, r4
 8005554:	601d      	str	r5, [r3, #0]
	position++;
 8005556:	3601      	adds	r6, #1
 8005558:	e772      	b.n	8005440 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 800555a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80055dc <HAL_GPIO_Init+0x1b0>
 800555e:	454d      	cmp	r5, r9
 8005560:	d00c      	beq.n	800557c <HAL_GPIO_Init+0x150>
 8005562:	d817      	bhi.n	8005594 <HAL_GPIO_Init+0x168>
 8005564:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005568:	454d      	cmp	r5, r9
 800556a:	d007      	beq.n	800557c <HAL_GPIO_Init+0x150>
 800556c:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8005570:	454d      	cmp	r5, r9
 8005572:	d003      	beq.n	800557c <HAL_GPIO_Init+0x150>
 8005574:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005578:	454d      	cmp	r5, r9
 800557a:	d183      	bne.n	8005484 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800557c:	688a      	ldr	r2, [r1, #8]
 800557e:	b1d2      	cbz	r2, 80055b6 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005580:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8005582:	bf08      	it	eq
 8005584:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005588:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800558c:	bf18      	it	ne
 800558e:	f8c0 8014 	strne.w	r8, [r0, #20]
 8005592:	e777      	b.n	8005484 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8005594:	4565      	cmp	r5, ip
 8005596:	d0f1      	beq.n	800557c <HAL_GPIO_Init+0x150>
 8005598:	4575      	cmp	r5, lr
 800559a:	e7ee      	b.n	800557a <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800559c:	68ca      	ldr	r2, [r1, #12]
          break;
 800559e:	e771      	b.n	8005484 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80055a0:	68ca      	ldr	r2, [r1, #12]
 80055a2:	3204      	adds	r2, #4
          break;
 80055a4:	e76e      	b.n	8005484 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80055a6:	68ca      	ldr	r2, [r1, #12]
 80055a8:	3208      	adds	r2, #8
          break;
 80055aa:	e76b      	b.n	8005484 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80055ac:	68ca      	ldr	r2, [r1, #12]
 80055ae:	320c      	adds	r2, #12
          break;
 80055b0:	e768      	b.n	8005484 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80055b2:	2200      	movs	r2, #0
 80055b4:	e766      	b.n	8005484 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80055b6:	2204      	movs	r2, #4
 80055b8:	e764      	b.n	8005484 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80055ba:	2500      	movs	r5, #0
 80055bc:	e7a9      	b.n	8005512 <HAL_GPIO_Init+0xe6>
 80055be:	2501      	movs	r5, #1
 80055c0:	e7a7      	b.n	8005512 <HAL_GPIO_Init+0xe6>
 80055c2:	2502      	movs	r5, #2
 80055c4:	e7a5      	b.n	8005512 <HAL_GPIO_Init+0xe6>
 80055c6:	bf00      	nop
 80055c8:	40021000 	.word	0x40021000
 80055cc:	40010400 	.word	0x40010400
 80055d0:	10310000 	.word	0x10310000
 80055d4:	10320000 	.word	0x10320000
 80055d8:	40010800 	.word	0x40010800
 80055dc:	10220000 	.word	0x10220000

080055e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80055e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80055e4:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 80055e8:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 80055ea:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80055ee:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80055f2:	eb00 030b 	add.w	r3, r0, fp
 80055f6:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80055f8:	4b2e      	ldr	r3, [pc, #184]	; (80056b4 <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 80055fa:	fa31 f402 	lsrs.w	r4, r1, r2
 80055fe:	d102      	bne.n	8005606 <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8005600:	b003      	add	sp, #12
 8005602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005606:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 800560a:	400f      	ands	r7, r1
 800560c:	d049      	beq.n	80056a2 <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 800560e:	f022 0403 	bic.w	r4, r2, #3
 8005612:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8005616:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800561a:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 800561e:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005620:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005624:	fa08 f90c 	lsl.w	r9, r8, ip
 8005628:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800562c:	4d22      	ldr	r5, [pc, #136]	; (80056b8 <HAL_GPIO_DeInit+0xd8>)
 800562e:	42a8      	cmp	r0, r5
 8005630:	d039      	beq.n	80056a6 <HAL_GPIO_DeInit+0xc6>
 8005632:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005636:	42a8      	cmp	r0, r5
 8005638:	d037      	beq.n	80056aa <HAL_GPIO_DeInit+0xca>
 800563a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800563e:	42a8      	cmp	r0, r5
 8005640:	d035      	beq.n	80056ae <HAL_GPIO_DeInit+0xce>
 8005642:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005646:	42a8      	cmp	r0, r5
 8005648:	bf0c      	ite	eq
 800564a:	2503      	moveq	r5, #3
 800564c:	2504      	movne	r5, #4
 800564e:	fa05 f50c 	lsl.w	r5, r5, ip
 8005652:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005654:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005658:	d10f      	bne.n	800567a <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800565a:	681d      	ldr	r5, [r3, #0]
 800565c:	4035      	ands	r5, r6
 800565e:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005660:	685d      	ldr	r5, [r3, #4]
 8005662:	4035      	ands	r5, r6
 8005664:	605d      	str	r5, [r3, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005666:	68dd      	ldr	r5, [r3, #12]
 8005668:	4035      	ands	r5, r6
 800566a:	60dd      	str	r5, [r3, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800566c:	689d      	ldr	r5, [r3, #8]
 800566e:	4035      	ands	r5, r6
 8005670:	609d      	str	r5, [r3, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005672:	68a5      	ldr	r5, [r4, #8]
 8005674:	ea25 0509 	bic.w	r5, r5, r9
 8005678:	60a5      	str	r5, [r4, #8]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800567a:	2fff      	cmp	r7, #255	; 0xff
 800567c:	bf94      	ite	ls
 800567e:	4607      	movls	r7, r0
 8005680:	9f01      	ldrhi	r7, [sp, #4]
 8005682:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005686:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005688:	bf88      	it	hi
 800568a:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800568c:	fa08 fc04 	lsl.w	ip, r8, r4
 8005690:	ea25 050c 	bic.w	r5, r5, ip
 8005694:	fa0b f404 	lsl.w	r4, fp, r4
 8005698:	4325      	orrs	r5, r4
 800569a:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800569c:	68c4      	ldr	r4, [r0, #12]
 800569e:	4034      	ands	r4, r6
 80056a0:	60c4      	str	r4, [r0, #12]
    position++;
 80056a2:	3201      	adds	r2, #1
 80056a4:	e7a9      	b.n	80055fa <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80056a6:	2500      	movs	r5, #0
 80056a8:	e7d1      	b.n	800564e <HAL_GPIO_DeInit+0x6e>
 80056aa:	2501      	movs	r5, #1
 80056ac:	e7cf      	b.n	800564e <HAL_GPIO_DeInit+0x6e>
 80056ae:	2502      	movs	r5, #2
 80056b0:	e7cd      	b.n	800564e <HAL_GPIO_DeInit+0x6e>
 80056b2:	bf00      	nop
 80056b4:	40010400 	.word	0x40010400
 80056b8:	40010800 	.word	0x40010800

080056bc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056bc:	6883      	ldr	r3, [r0, #8]
 80056be:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80056c0:	bf14      	ite	ne
 80056c2:	2001      	movne	r0, #1
 80056c4:	2000      	moveq	r0, #0
 80056c6:	4770      	bx	lr

080056c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056c8:	b10a      	cbz	r2, 80056ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80056ca:	6101      	str	r1, [r0, #16]
  }
}
 80056cc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80056ce:	0409      	lsls	r1, r1, #16
 80056d0:	e7fb      	b.n	80056ca <HAL_GPIO_WritePin+0x2>

080056d2 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056d2:	6801      	ldr	r1, [r0, #0]
 80056d4:	2200      	movs	r2, #0
 80056d6:	694b      	ldr	r3, [r1, #20]
 80056d8:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80056dc:	d010      	beq.n	8005700 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056de:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80056e2:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80056e4:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80056e6:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ec:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056f0:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056f6:	f043 0304 	orr.w	r3, r3, #4
 80056fa:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80056fc:	2001      	movs	r0, #1
 80056fe:	4770      	bx	lr
  }
  return HAL_OK;
 8005700:	4618      	mov	r0, r3
}
 8005702:	4770      	bx	lr

08005704 <I2C_WaitOnFlagUntilTimeout>:
{
 8005704:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8005708:	4606      	mov	r6, r0
 800570a:	460f      	mov	r7, r1
 800570c:	4691      	mov	r9, r2
 800570e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005710:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005714:	6833      	ldr	r3, [r6, #0]
 8005716:	f1ba 0f01 	cmp.w	sl, #1
 800571a:	bf0c      	ite	eq
 800571c:	695c      	ldreq	r4, [r3, #20]
 800571e:	699c      	ldrne	r4, [r3, #24]
 8005720:	ea27 0404 	bic.w	r4, r7, r4
 8005724:	b2a4      	uxth	r4, r4
 8005726:	fab4 f484 	clz	r4, r4
 800572a:	0964      	lsrs	r4, r4, #5
 800572c:	45a1      	cmp	r9, r4
 800572e:	d001      	beq.n	8005734 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8005730:	2000      	movs	r0, #0
 8005732:	e025      	b.n	8005780 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8005734:	1c6a      	adds	r2, r5, #1
 8005736:	d0ee      	beq.n	8005716 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005738:	f7ff fa40 	bl	8004bbc <HAL_GetTick>
 800573c:	9b08      	ldr	r3, [sp, #32]
 800573e:	1ac0      	subs	r0, r0, r3
 8005740:	42a8      	cmp	r0, r5
 8005742:	d801      	bhi.n	8005748 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005744:	2d00      	cmp	r5, #0
 8005746:	d1e5      	bne.n	8005714 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005748:	6833      	ldr	r3, [r6, #0]
 800574a:	f1ba 0f01 	cmp.w	sl, #1
 800574e:	bf0c      	ite	eq
 8005750:	695b      	ldreq	r3, [r3, #20]
 8005752:	699b      	ldrne	r3, [r3, #24]
 8005754:	ea27 0303 	bic.w	r3, r7, r3
 8005758:	b29b      	uxth	r3, r3
 800575a:	fab3 f383 	clz	r3, r3
 800575e:	095b      	lsrs	r3, r3, #5
 8005760:	4599      	cmp	r9, r3
 8005762:	d1d7      	bne.n	8005714 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005764:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8005766:	2220      	movs	r2, #32
          return HAL_ERROR;
 8005768:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 800576a:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800576c:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005770:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005774:	6c32      	ldr	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005776:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800577a:	f042 0220 	orr.w	r2, r2, #32
 800577e:	6432      	str	r2, [r6, #64]	; 0x40
}
 8005780:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08005784 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005788:	4604      	mov	r4, r0
 800578a:	460f      	mov	r7, r1
 800578c:	4616      	mov	r6, r2
 800578e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005790:	6825      	ldr	r5, [r4, #0]
 8005792:	6968      	ldr	r0, [r5, #20]
 8005794:	ea27 0000 	bic.w	r0, r7, r0
 8005798:	b280      	uxth	r0, r0
 800579a:	b1b8      	cbz	r0, 80057cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800579c:	696b      	ldr	r3, [r5, #20]
 800579e:	055a      	lsls	r2, r3, #21
 80057a0:	d516      	bpl.n	80057d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a2:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a4:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057aa:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ac:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80057b0:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057b2:	2300      	movs	r3, #0
 80057b4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80057c0:	f042 0204 	orr.w	r2, r2, #4
          return HAL_ERROR;
 80057c4:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057c6:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80057c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80057cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80057d0:	1c73      	adds	r3, r6, #1
 80057d2:	d0de      	beq.n	8005792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d4:	f7ff f9f2 	bl	8004bbc <HAL_GetTick>
 80057d8:	eba0 0008 	sub.w	r0, r0, r8
 80057dc:	42b0      	cmp	r0, r6
 80057de:	d801      	bhi.n	80057e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 80057e0:	2e00      	cmp	r6, #0
 80057e2:	d1d5      	bne.n	8005790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	695a      	ldr	r2, [r3, #20]
 80057e8:	ea27 0202 	bic.w	r2, r7, r2
 80057ec:	b292      	uxth	r2, r2
 80057ee:	2a00      	cmp	r2, #0
 80057f0:	d0ce      	beq.n	8005790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057f2:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 80057f4:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057f6:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057f8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005800:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005802:	f042 0220 	orr.w	r2, r2, #32
 8005806:	e7dd      	b.n	80057c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08005808 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005808:	b570      	push	{r4, r5, r6, lr}
 800580a:	4604      	mov	r4, r0
 800580c:	460d      	mov	r5, r1
 800580e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	061b      	lsls	r3, r3, #24
 8005816:	d501      	bpl.n	800581c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8005818:	2000      	movs	r0, #0
}
 800581a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800581c:	4620      	mov	r0, r4
 800581e:	f7ff ff58 	bl	80056d2 <I2C_IsAcknowledgeFailed>
 8005822:	b9c8      	cbnz	r0, 8005858 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005824:	1c6a      	adds	r2, r5, #1
 8005826:	d0f3      	beq.n	8005810 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005828:	f7ff f9c8 	bl	8004bbc <HAL_GetTick>
 800582c:	1b80      	subs	r0, r0, r6
 800582e:	42a8      	cmp	r0, r5
 8005830:	d801      	bhi.n	8005836 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005832:	2d00      	cmp	r5, #0
 8005834:	d1ec      	bne.n	8005810 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800583e:	d1e7      	bne.n	8005810 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8005840:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005842:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005844:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005848:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800584c:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 800584e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005852:	f042 0220 	orr.w	r2, r2, #32
 8005856:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005858:	2001      	movs	r0, #1
 800585a:	e7de      	b.n	800581a <I2C_WaitOnTXEFlagUntilTimeout+0x12>

0800585c <I2C_RequestMemoryWrite>:
{
 800585c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005860:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005862:	6802      	ldr	r2, [r0, #0]
{
 8005864:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005866:	6813      	ldr	r3, [r2, #0]
{
 8005868:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800586a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586e:	6013      	str	r3, [r2, #0]
{
 8005870:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8005874:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005876:	463b      	mov	r3, r7
 8005878:	2200      	movs	r2, #0
 800587a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800587e:	f8cd 8000 	str.w	r8, [sp]
{
 8005882:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005884:	f7ff ff3e 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	b138      	cbz	r0, 800589c <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	05db      	lsls	r3, r3, #23
 8005890:	d502      	bpl.n	8005898 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005896:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005898:	2003      	movs	r0, #3
 800589a:	e00a      	b.n	80058b2 <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800589c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80058a0:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058a2:	463a      	mov	r2, r7
 80058a4:	4643      	mov	r3, r8
 80058a6:	4620      	mov	r0, r4
 80058a8:	4917      	ldr	r1, [pc, #92]	; (8005908 <I2C_RequestMemoryWrite+0xac>)
 80058aa:	f7ff ff6b 	bl	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058ae:	b118      	cbz	r0, 80058b8 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 80058b0:	2001      	movs	r0, #1
}
 80058b2:	b005      	add	sp, #20
 80058b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	9003      	str	r0, [sp, #12]
 80058bc:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058be:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c0:	9203      	str	r2, [sp, #12]
 80058c2:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058c4:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c6:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058c8:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ca:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058cc:	f7ff ff9c 	bl	8005808 <I2C_WaitOnTXEFlagUntilTimeout>
 80058d0:	b140      	cbz	r0, 80058e4 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058d4:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d6:	bf01      	itttt	eq
 80058d8:	6822      	ldreq	r2, [r4, #0]
 80058da:	6813      	ldreq	r3, [r2, #0]
 80058dc:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80058e0:	6013      	streq	r3, [r2, #0]
 80058e2:	e7e5      	b.n	80058b0 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058e4:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058ea:	d102      	bne.n	80058f2 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058ec:	b2ed      	uxtb	r5, r5
 80058ee:	611d      	str	r5, [r3, #16]
 80058f0:	e7df      	b.n	80058b2 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058f2:	0a2a      	lsrs	r2, r5, #8
 80058f4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058f6:	4639      	mov	r1, r7
 80058f8:	4642      	mov	r2, r8
 80058fa:	4620      	mov	r0, r4
 80058fc:	f7ff ff84 	bl	8005808 <I2C_WaitOnTXEFlagUntilTimeout>
 8005900:	2800      	cmp	r0, #0
 8005902:	d1e6      	bne.n	80058d2 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	e7f1      	b.n	80058ec <I2C_RequestMemoryWrite+0x90>
 8005908:	00010002 	.word	0x00010002

0800590c <I2C_RequestMemoryRead>:
{
 800590c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005910:	469a      	mov	sl, r3
 8005912:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005916:	6803      	ldr	r3, [r0, #0]
{
 8005918:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800591a:	681a      	ldr	r2, [r3, #0]
{
 800591c:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800591e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005922:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005924:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005926:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800592a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800592e:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005930:	463b      	mov	r3, r7
 8005932:	2200      	movs	r2, #0
 8005934:	f8cd 8000 	str.w	r8, [sp]
{
 8005938:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800593a:	f7ff fee3 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	b148      	cbz	r0, 8005956 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005942:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005944:	05db      	lsls	r3, r3, #23
 8005946:	d502      	bpl.n	800594e <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800594c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800594e:	2003      	movs	r0, #3
}
 8005950:	b004      	add	sp, #16
 8005952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005956:	fa5f f986 	uxtb.w	r9, r6
 800595a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800595e:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005960:	463a      	mov	r2, r7
 8005962:	4643      	mov	r3, r8
 8005964:	4620      	mov	r0, r4
 8005966:	4929      	ldr	r1, [pc, #164]	; (8005a0c <I2C_RequestMemoryRead+0x100>)
 8005968:	f7ff ff0c 	bl	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800596c:	b108      	cbz	r0, 8005972 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 800596e:	2001      	movs	r0, #1
 8005970:	e7ee      	b.n	8005950 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	9003      	str	r0, [sp, #12]
 8005976:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005978:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800597a:	9203      	str	r2, [sp, #12]
 800597c:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800597e:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005980:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005982:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005984:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005986:	f7ff ff3f 	bl	8005808 <I2C_WaitOnTXEFlagUntilTimeout>
 800598a:	b140      	cbz	r0, 800599e <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800598c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800598e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005990:	bf01      	itttt	eq
 8005992:	6822      	ldreq	r2, [r4, #0]
 8005994:	6813      	ldreq	r3, [r2, #0]
 8005996:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800599a:	6013      	streq	r3, [r2, #0]
 800599c:	e7e7      	b.n	800596e <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800599e:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a2:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059a4:	d11a      	bne.n	80059dc <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059a6:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059a8:	4642      	mov	r2, r8
 80059aa:	4639      	mov	r1, r7
 80059ac:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ae:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059b0:	f7ff ff2a 	bl	8005808 <I2C_WaitOnTXEFlagUntilTimeout>
 80059b4:	4602      	mov	r2, r0
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d1e8      	bne.n	800598c <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ba:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059bc:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059be:	680b      	ldr	r3, [r1, #0]
 80059c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059c4:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059c6:	463b      	mov	r3, r7
 80059c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059cc:	f8cd 8000 	str.w	r8, [sp]
 80059d0:	f7ff fe98 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 80059d4:	6822      	ldr	r2, [r4, #0]
 80059d6:	b160      	cbz	r0, 80059f2 <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059d8:	6813      	ldr	r3, [r2, #0]
 80059da:	e7b3      	b.n	8005944 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059dc:	0a2a      	lsrs	r2, r5, #8
 80059de:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059e0:	4639      	mov	r1, r7
 80059e2:	4642      	mov	r2, r8
 80059e4:	4620      	mov	r0, r4
 80059e6:	f7ff ff0f 	bl	8005808 <I2C_WaitOnTXEFlagUntilTimeout>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d1ce      	bne.n	800598c <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	e7d9      	b.n	80059a6 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059f2:	f049 0301 	orr.w	r3, r9, #1
 80059f6:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059f8:	4620      	mov	r0, r4
 80059fa:	4643      	mov	r3, r8
 80059fc:	463a      	mov	r2, r7
 80059fe:	4903      	ldr	r1, [pc, #12]	; (8005a0c <I2C_RequestMemoryRead+0x100>)
 8005a00:	f7ff fec0 	bl	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8005a04:	3800      	subs	r0, #0
 8005a06:	bf18      	it	ne
 8005a08:	2001      	movne	r0, #1
 8005a0a:	e7a1      	b.n	8005950 <I2C_RequestMemoryRead+0x44>
 8005a0c:	00010002 	.word	0x00010002

08005a10 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	4604      	mov	r4, r0
 8005a14:	460d      	mov	r5, r1
 8005a16:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	075b      	lsls	r3, r3, #29
 8005a1e:	d501      	bpl.n	8005a24 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8005a20:	2000      	movs	r0, #0
}
 8005a22:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a24:	4620      	mov	r0, r4
 8005a26:	f7ff fe54 	bl	80056d2 <I2C_IsAcknowledgeFailed>
 8005a2a:	b9c8      	cbnz	r0, 8005a60 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005a2c:	1c6a      	adds	r2, r5, #1
 8005a2e:	d0f3      	beq.n	8005a18 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a30:	f7ff f8c4 	bl	8004bbc <HAL_GetTick>
 8005a34:	1b80      	subs	r0, r0, r6
 8005a36:	42a8      	cmp	r0, r5
 8005a38:	d801      	bhi.n	8005a3e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8005a3a:	2d00      	cmp	r5, #0
 8005a3c:	d1ec      	bne.n	8005a18 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	f013 0304 	ands.w	r3, r3, #4
 8005a46:	d1e7      	bne.n	8005a18 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a48:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4a:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a4c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a54:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005a56:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a5a:	f042 0220 	orr.w	r2, r2, #32
 8005a5e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005a60:	2001      	movs	r0, #1
 8005a62:	e7de      	b.n	8005a22 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08005a64 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005a64:	b570      	push	{r4, r5, r6, lr}
 8005a66:	4604      	mov	r4, r0
 8005a68:	460d      	mov	r5, r1
 8005a6a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a6c:	6821      	ldr	r1, [r4, #0]
 8005a6e:	694b      	ldr	r3, [r1, #20]
 8005a70:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005a74:	d001      	beq.n	8005a7a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8005a76:	2000      	movs	r0, #0
 8005a78:	e010      	b.n	8005a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a7a:	694a      	ldr	r2, [r1, #20]
 8005a7c:	06d2      	lsls	r2, r2, #27
 8005a7e:	d50e      	bpl.n	8005a9e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a80:	f06f 0210 	mvn.w	r2, #16
 8005a84:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a86:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a88:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a8a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a92:	6c22      	ldr	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005a94:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a96:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005a98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005a9c:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a9e:	f7ff f88d 	bl	8004bbc <HAL_GetTick>
 8005aa2:	1b80      	subs	r0, r0, r6
 8005aa4:	42a8      	cmp	r0, r5
 8005aa6:	d801      	bhi.n	8005aac <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8005aa8:	2d00      	cmp	r5, #0
 8005aaa:	d1df      	bne.n	8005a6c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005ab4:	d1da      	bne.n	8005a6c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ab6:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005aba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005abe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ac2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005ac4:	f042 0220 	orr.w	r2, r2, #32
 8005ac8:	e7e4      	b.n	8005a94 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08005acc <HAL_I2C_Init>:
{
 8005acc:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8005ace:	4604      	mov	r4, r0
 8005ad0:	b908      	cbnz	r0, 8005ad6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8005ad2:	2001      	movs	r0, #1
}
 8005ad4:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ad6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005ada:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005ade:	b91b      	cbnz	r3, 8005ae8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8005ae0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005ae4:	f7fd fad8 	bl	8003098 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ae8:	2324      	movs	r3, #36	; 0x24
 8005aea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	f022 0201 	bic.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005afe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b06:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b08:	f000 fd6a 	bl	80065e0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b0c:	4b3f      	ldr	r3, [pc, #252]	; (8005c0c <HAL_I2C_Init+0x140>)
 8005b0e:	6865      	ldr	r5, [r4, #4]
 8005b10:	429d      	cmp	r5, r3
 8005b12:	bf94      	ite	ls
 8005b14:	4b3e      	ldrls	r3, [pc, #248]	; (8005c10 <HAL_I2C_Init+0x144>)
 8005b16:	4b3f      	ldrhi	r3, [pc, #252]	; (8005c14 <HAL_I2C_Init+0x148>)
 8005b18:	4298      	cmp	r0, r3
 8005b1a:	bf8c      	ite	hi
 8005b1c:	2300      	movhi	r3, #0
 8005b1e:	2301      	movls	r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1d6      	bne.n	8005ad2 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b24:	4e39      	ldr	r6, [pc, #228]	; (8005c0c <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8005b26:	4b3c      	ldr	r3, [pc, #240]	; (8005c18 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b28:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8005b2a:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b2e:	bf88      	it	hi
 8005b30:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b34:	6822      	ldr	r2, [r4, #0]
 8005b36:	6851      	ldr	r1, [r2, #4]
 8005b38:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005b3c:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b40:	bf82      	ittt	hi
 8005b42:	4373      	mulhi	r3, r6
 8005b44:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8005b48:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b4c:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b4e:	6a11      	ldr	r1, [r2, #32]
 8005b50:	3301      	adds	r3, #1
 8005b52:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005b56:	430b      	orrs	r3, r1
 8005b58:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b5a:	69d1      	ldr	r1, [r2, #28]
 8005b5c:	1e43      	subs	r3, r0, #1
 8005b5e:	482b      	ldr	r0, [pc, #172]	; (8005c0c <HAL_I2C_Init+0x140>)
 8005b60:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8005b64:	4285      	cmp	r5, r0
 8005b66:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005b6a:	d832      	bhi.n	8005bd2 <HAL_I2C_Init+0x106>
 8005b6c:	006d      	lsls	r5, r5, #1
 8005b6e:	fbb3 f3f5 	udiv	r3, r3, r5
 8005b72:	f640 70fc 	movw	r0, #4092	; 0xffc
 8005b76:	3301      	adds	r3, #1
 8005b78:	4203      	tst	r3, r0
 8005b7a:	d042      	beq.n	8005c02 <HAL_I2C_Init+0x136>
 8005b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b80:	4319      	orrs	r1, r3
 8005b82:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b84:	6811      	ldr	r1, [r2, #0]
 8005b86:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8005b8a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8005b8e:	4303      	orrs	r3, r0
 8005b90:	430b      	orrs	r3, r1
 8005b92:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b94:	6891      	ldr	r1, [r2, #8]
 8005b96:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8005b9a:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8005b9e:	4303      	orrs	r3, r0
 8005ba0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ba8:	68d1      	ldr	r1, [r2, #12]
 8005baa:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8005bae:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005bb2:	4303      	orrs	r3, r0
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005bb8:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bba:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8005bbc:	f043 0301 	orr.w	r3, r3, #1
 8005bc0:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005bc2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bc4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005bc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bca:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bcc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8005bd0:	e780      	b.n	8005ad4 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bd2:	68a0      	ldr	r0, [r4, #8]
 8005bd4:	b950      	cbnz	r0, 8005bec <HAL_I2C_Init+0x120>
 8005bd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bda:	fbb3 f3f5 	udiv	r3, r3, r5
 8005bde:	3301      	adds	r3, #1
 8005be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be4:	b17b      	cbz	r3, 8005c06 <HAL_I2C_Init+0x13a>
 8005be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bea:	e7c9      	b.n	8005b80 <HAL_I2C_Init+0xb4>
 8005bec:	2019      	movs	r0, #25
 8005bee:	4368      	muls	r0, r5
 8005bf0:	fbb3 f3f0 	udiv	r3, r3, r0
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bfa:	b123      	cbz	r3, 8005c06 <HAL_I2C_Init+0x13a>
 8005bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c00:	e7be      	b.n	8005b80 <HAL_I2C_Init+0xb4>
 8005c02:	2304      	movs	r3, #4
 8005c04:	e7bc      	b.n	8005b80 <HAL_I2C_Init+0xb4>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e7ba      	b.n	8005b80 <HAL_I2C_Init+0xb4>
 8005c0a:	bf00      	nop
 8005c0c:	000186a0 	.word	0x000186a0
 8005c10:	001e847f 	.word	0x001e847f
 8005c14:	003d08ff 	.word	0x003d08ff
 8005c18:	000f4240 	.word	0x000f4240

08005c1c <HAL_I2C_Mem_Write>:
{
 8005c1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c20:	4604      	mov	r4, r0
 8005c22:	4699      	mov	r9, r3
 8005c24:	460f      	mov	r7, r1
 8005c26:	4690      	mov	r8, r2
 8005c28:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8005c2a:	f7fe ffc7 	bl	8004bbc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c2e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8005c32:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d003      	beq.n	8005c40 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8005c38:	2002      	movs	r0, #2
}
 8005c3a:	b003      	add	sp, #12
 8005c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c40:	9000      	str	r0, [sp, #0]
 8005c42:	2319      	movs	r3, #25
 8005c44:	2201      	movs	r2, #1
 8005c46:	4620      	mov	r0, r4
 8005c48:	493a      	ldr	r1, [pc, #232]	; (8005d34 <HAL_I2C_Mem_Write+0x118>)
 8005c4a:	f7ff fd5b 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	d1f2      	bne.n	8005c38 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8005c52:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d0ee      	beq.n	8005c38 <HAL_I2C_Mem_Write+0x1c>
 8005c5a:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c5c:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005c5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c62:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c64:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c66:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8005c68:	bf58      	it	pl
 8005c6a:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c6c:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8005c6e:	bf5c      	itt	pl
 8005c70:	f043 0301 	orrpl.w	r3, r3, #1
 8005c74:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c76:	6803      	ldr	r3, [r0, #0]
 8005c78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c7c:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c7e:	2321      	movs	r3, #33	; 0x21
 8005c80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c84:	2340      	movs	r3, #64	; 0x40
 8005c86:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c90:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8005c92:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c94:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c98:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 8005c9c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ca0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ca2:	4b25      	ldr	r3, [pc, #148]	; (8005d38 <HAL_I2C_Mem_Write+0x11c>)
 8005ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	f7ff fdd8 	bl	800585c <I2C_RequestMemoryWrite>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d02a      	beq.n	8005d06 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	e7c2      	b.n	8005c3a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cb4:	f7ff fda8 	bl	8005808 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cb8:	b140      	cbz	r0, 8005ccc <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cbc:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cbe:	bf01      	itttt	eq
 8005cc0:	6822      	ldreq	r2, [r4, #0]
 8005cc2:	6813      	ldreq	r3, [r2, #0]
 8005cc4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8005cc8:	6013      	streq	r3, [r2, #0]
 8005cca:	e7f1      	b.n	8005cb0 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cce:	6827      	ldr	r7, [r4, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005cd6:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8005cd8:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005cda:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005cdc:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005cde:	3a01      	subs	r2, #1
 8005ce0:	b292      	uxth	r2, r2
 8005ce2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ce4:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8005ce6:	1e48      	subs	r0, r1, #1
 8005ce8:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cea:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8005cec:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cee:	d50a      	bpl.n	8005d06 <HAL_I2C_Mem_Write+0xea>
 8005cf0:	b148      	cbz	r0, 8005d06 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cf2:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8005cf4:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cf6:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8005cf8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005cfa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005cfc:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005d02:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005d04:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d08:	462a      	mov	r2, r5
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1d0      	bne.n	8005cb4 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d12:	f7ff fe7d 	bl	8005a10 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d1cf      	bne.n	8005cba <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1a:	6822      	ldr	r2, [r4, #0]
 8005d1c:	6813      	ldr	r3, [r2, #0]
 8005d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d22:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005d24:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8005d26:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8005d2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8005d32:	e782      	b.n	8005c3a <HAL_I2C_Mem_Write+0x1e>
 8005d34:	00100002 	.word	0x00100002
 8005d38:	ffff0000 	.word	0xffff0000

08005d3c <HAL_I2C_Mem_Read>:
{
 8005d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d40:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8005d42:	2300      	movs	r3, #0
{
 8005d44:	4604      	mov	r4, r0
 8005d46:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8005d48:	9303      	str	r3, [sp, #12]
{
 8005d4a:	460d      	mov	r5, r1
 8005d4c:	4690      	mov	r8, r2
 8005d4e:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8005d50:	f7fe ff34 	bl	8004bbc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d54:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8005d58:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d004      	beq.n	8005d68 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8005d5e:	2502      	movs	r5, #2
}
 8005d60:	4628      	mov	r0, r5
 8005d62:	b009      	add	sp, #36	; 0x24
 8005d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d68:	9000      	str	r0, [sp, #0]
 8005d6a:	2319      	movs	r3, #25
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	4620      	mov	r0, r4
 8005d70:	498d      	ldr	r1, [pc, #564]	; (8005fa8 <HAL_I2C_Mem_Read+0x26c>)
 8005d72:	f7ff fcc7 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	d1f1      	bne.n	8005d5e <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8005d7a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d0ed      	beq.n	8005d5e <HAL_I2C_Mem_Read+0x22>
 8005d82:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d84:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005d86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d8a:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d8c:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d8e:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8005d90:	bf58      	it	pl
 8005d92:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d94:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8005d96:	bf5c      	itt	pl
 8005d98:	f043 0301 	orrpl.w	r3, r3, #1
 8005d9c:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d9e:	6803      	ldr	r3, [r0, #0]
 8005da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005da4:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005da6:	2322      	movs	r3, #34	; 0x22
 8005da8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005dac:	2340      	movs	r3, #64	; 0x40
 8005dae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005db2:	2300      	movs	r3, #0
 8005db4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005db6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005db8:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8005dba:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dbc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dc0:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 8005dc4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005dc8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dca:	4b78      	ldr	r3, [pc, #480]	; (8005fac <HAL_I2C_Mem_Read+0x270>)
 8005dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dce:	464b      	mov	r3, r9
 8005dd0:	f7ff fd9c 	bl	800590c <I2C_RequestMemoryRead>
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	b108      	cbz	r0, 8005ddc <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 8005dd8:	2501      	movs	r5, #1
 8005dda:	e7c1      	b.n	8005d60 <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8005ddc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dde:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8005de0:	b9c2      	cbnz	r2, 8005e14 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de2:	9004      	str	r0, [sp, #16]
 8005de4:	695a      	ldr	r2, [r3, #20]
 8005de6:	9204      	str	r2, [sp, #16]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	9204      	str	r2, [sp, #16]
 8005dec:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df4:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005df6:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8005fb0 <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005dfa:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8005fb4 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 8005dfe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d137      	bne.n	8005e74 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e04:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8005e06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8005e0a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8005e12:	e7a5      	b.n	8005d60 <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8005e14:	2a01      	cmp	r2, #1
 8005e16:	d111      	bne.n	8005e3c <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e20:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	9005      	str	r0, [sp, #20]
 8005e26:	695a      	ldr	r2, [r3, #20]
 8005e28:	9205      	str	r2, [sp, #20]
 8005e2a:	699a      	ldr	r2, [r3, #24]
 8005e2c:	9205      	str	r2, [sp, #20]
 8005e2e:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e38:	b662      	cpsie	i
}
 8005e3a:	e7dc      	b.n	8005df6 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 8005e3c:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e3e:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8005e40:	d10e      	bne.n	8005e60 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e48:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	9006      	str	r0, [sp, #24]
 8005e4e:	695a      	ldr	r2, [r3, #20]
 8005e50:	9206      	str	r2, [sp, #24]
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	9206      	str	r2, [sp, #24]
 8005e56:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5e:	e7ea      	b.n	8005e36 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e64:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e66:	9007      	str	r0, [sp, #28]
 8005e68:	695a      	ldr	r2, [r3, #20]
 8005e6a:	9207      	str	r2, [sp, #28]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	9307      	str	r3, [sp, #28]
 8005e70:	9b07      	ldr	r3, [sp, #28]
 8005e72:	e7c0      	b.n	8005df6 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d878      	bhi.n	8005f6a <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d115      	bne.n	8005ea8 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e7c:	4632      	mov	r2, r6
 8005e7e:	4639      	mov	r1, r7
 8005e80:	4620      	mov	r0, r4
 8005e82:	f7ff fdef 	bl	8005a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d1a6      	bne.n	8005dd8 <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e90:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e94:	3301      	adds	r3, #1
 8005e96:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005e98:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005e9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005ea6:	e7aa      	b.n	8005dfe <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8005ea8:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005eaa:	f04f 0200 	mov.w	r2, #0
 8005eae:	463b      	mov	r3, r7
 8005eb0:	4641      	mov	r1, r8
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8005eb6:	d118      	bne.n	8005eea <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005eb8:	f7ff fc24 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d18b      	bne.n	8005dd8 <HAL_I2C_Mem_Read+0x9c>
 8005ec0:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eca:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ed0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005ed8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005eda:	3b01      	subs	r3, #1
 8005edc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005ede:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005ee6:	b662      	cpsie	i
 8005ee8:	e7cf      	b.n	8005e8a <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005eea:	f7ff fc0b 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	f47f af72 	bne.w	8005dd8 <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef4:	6822      	ldr	r2, [r4, #0]
 8005ef6:	6813      	ldr	r3, [r2, #0]
 8005ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005efc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005efe:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f00:	f246 11a8 	movw	r1, #25000	; 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f0a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005f0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f0e:	1c53      	adds	r3, r2, #1
 8005f10:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005f12:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005f14:	3b01      	subs	r3, #1
 8005f16:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005f18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f20:	f8d9 3000 	ldr.w	r3, [r9]
 8005f24:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f28:	2123      	movs	r1, #35	; 0x23
 8005f2a:	434b      	muls	r3, r1
 8005f2c:	9303      	str	r3, [sp, #12]
            count--;
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8005f34:	9b03      	ldr	r3, [sp, #12]
 8005f36:	b96b      	cbnz	r3, 8005f54 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8005f38:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005f3a:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005f3c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f46:	f042 0220 	orr.w	r2, r2, #32
 8005f4a:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005f4c:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8005f4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8005f52:	e741      	b.n	8005dd8 <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	6959      	ldr	r1, [r3, #20]
 8005f58:	0748      	lsls	r0, r1, #29
 8005f5a:	d5e8      	bpl.n	8005f2e <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5c:	6819      	ldr	r1, [r3, #0]
 8005f5e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005f62:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	7053      	strb	r3, [r2, #1]
 8005f68:	e7b3      	b.n	8005ed2 <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f6a:	4632      	mov	r2, r6
 8005f6c:	4639      	mov	r1, r7
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f7ff fd78 	bl	8005a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	f47f af2f 	bne.w	8005dd8 <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	691a      	ldr	r2, [r3, #16]
 8005f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f80:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005f82:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f84:	1c53      	adds	r3, r2, #1
 8005f86:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005f88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005f8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	6959      	ldr	r1, [r3, #20]
 8005f9a:	0749      	lsls	r1, r1, #29
 8005f9c:	f57f af2f 	bpl.w	8005dfe <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	7053      	strb	r3, [r2, #1]
 8005fa4:	e775      	b.n	8005e92 <HAL_I2C_Mem_Read+0x156>
 8005fa6:	bf00      	nop
 8005fa8:	00100002 	.word	0x00100002
 8005fac:	ffff0000 	.word	0xffff0000
 8005fb0:	00010004 	.word	0x00010004
 8005fb4:	20000000 	.word	0x20000000

08005fb8 <HAL_I2C_IsDeviceReady>:
{
 8005fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	461f      	mov	r7, r3
 8005fc2:	4688      	mov	r8, r1
 8005fc4:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8005fc6:	f7fe fdf9 	bl	8004bbc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8005fce:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	d003      	beq.n	8005fdc <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8005fd4:	2002      	movs	r0, #2
}
 8005fd6:	b005      	add	sp, #20
 8005fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fdc:	9000      	str	r0, [sp, #0]
 8005fde:	2319      	movs	r3, #25
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	494a      	ldr	r1, [pc, #296]	; (8006110 <HAL_I2C_IsDeviceReady+0x158>)
 8005fe6:	f7ff fb8d 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d1f2      	bne.n	8005fd4 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8005fee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d0ee      	beq.n	8005fd4 <HAL_I2C_IsDeviceReady+0x1c>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ffc:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ffe:	2600      	movs	r6, #0
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006000:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006002:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8006110 <HAL_I2C_IsDeviceReady+0x158>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006006:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8006008:	bf58      	it	pl
 800600a:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800600c:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8006010:	bf5c      	itt	pl
 8006012:	f042 0201 	orrpl.w	r2, r2, #1
 8006016:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800601e:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006020:	2324      	movs	r3, #36	; 0x24
 8006022:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006026:	4b3b      	ldr	r3, [pc, #236]	; (8006114 <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006028:	6426      	str	r6, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800602a:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800602c:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800602e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006032:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006034:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800603a:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800603c:	463b      	mov	r3, r7
 800603e:	2200      	movs	r2, #0
 8006040:	9500      	str	r5, [sp, #0]
 8006042:	f7ff fb5f 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	b138      	cbz	r0, 800605a <HAL_I2C_IsDeviceReady+0xa2>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	05db      	lsls	r3, r3, #23
 800604e:	d502      	bpl.n	8006056 <HAL_I2C_IsDeviceReady+0x9e>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006054:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8006056:	2003      	movs	r0, #3
 8006058:	e7bd      	b.n	8005fd6 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800605a:	f8c3 8010 	str.w	r8, [r3, #16]
      tickstart = HAL_GetTick();
 800605e:	f7fe fdad 	bl	8004bbc <HAL_GetTick>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006062:	f04f 09a0 	mov.w	r9, #160	; 0xa0
      tickstart = HAL_GetTick();
 8006066:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800606c:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800606e:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006072:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006076:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800607a:	29a0      	cmp	r1, #160	; 0xa0
 800607c:	d001      	beq.n	8006082 <HAL_I2C_IsDeviceReady+0xca>
 800607e:	4313      	orrs	r3, r2
 8006080:	d01d      	beq.n	80060be <HAL_I2C_IsDeviceReady+0x106>
      hi2c->State = HAL_I2C_STATE_READY;
 8006082:	f04f 0920 	mov.w	r9, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006086:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8006088:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800608c:	695a      	ldr	r2, [r3, #20]
 800608e:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006098:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800609a:	d025      	beq.n	80060e8 <HAL_I2C_IsDeviceReady+0x130>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800609c:	2200      	movs	r2, #0
 800609e:	9203      	str	r2, [sp, #12]
 80060a0:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060a2:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a4:	9203      	str	r2, [sp, #12]
 80060a6:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060a8:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060aa:	9303      	str	r3, [sp, #12]
 80060ac:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060ae:	4918      	ldr	r1, [pc, #96]	; (8006110 <HAL_I2C_IsDeviceReady+0x158>)
 80060b0:	2319      	movs	r3, #25
 80060b2:	9500      	str	r5, [sp, #0]
 80060b4:	f7ff fb26 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 80060b8:	b188      	cbz	r0, 80060de <HAL_I2C_IsDeviceReady+0x126>
    return HAL_ERROR;
 80060ba:	2001      	movs	r0, #1
 80060bc:	e78b      	b.n	8005fd6 <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060be:	f7fe fd7d 	bl	8004bbc <HAL_GetTick>
 80060c2:	1b40      	subs	r0, r0, r5
 80060c4:	42b8      	cmp	r0, r7
 80060c6:	d800      	bhi.n	80060ca <HAL_I2C_IsDeviceReady+0x112>
 80060c8:	b90f      	cbnz	r7, 80060ce <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80060ca:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80060d2:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80060d4:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80060d8:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80060dc:	e7cb      	b.n	8006076 <HAL_I2C_IsDeviceReady+0xbe>
        hi2c->State = HAL_I2C_STATE_READY;
 80060de:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80060e2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 80060e6:	e776      	b.n	8005fd6 <HAL_I2C_IsDeviceReady+0x1e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060ec:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ee:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060f0:	4620      	mov	r0, r4
 80060f2:	2319      	movs	r3, #25
 80060f4:	2201      	movs	r2, #1
 80060f6:	9500      	str	r5, [sp, #0]
 80060f8:	f7ff fb04 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d1dc      	bne.n	80060ba <HAL_I2C_IsDeviceReady+0x102>
      I2C_Trials++;
 8006100:	3601      	adds	r6, #1
    while (I2C_Trials < Trials);
 8006102:	4556      	cmp	r6, sl
 8006104:	d392      	bcc.n	800602c <HAL_I2C_IsDeviceReady+0x74>
    hi2c->State = HAL_I2C_STATE_READY;
 8006106:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800610a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 800610e:	e7d4      	b.n	80060ba <HAL_I2C_IsDeviceReady+0x102>
 8006110:	00100002 	.word	0x00100002
 8006114:	ffff0000 	.word	0xffff0000

08006118 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006118:	2201      	movs	r2, #1
 800611a:	4b01      	ldr	r3, [pc, #4]	; (8006120 <HAL_PWR_EnableBkUpAccess+0x8>)
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	4770      	bx	lr
 8006120:	420e0000 	.word	0x420e0000

08006124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006124:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006128:	4605      	mov	r5, r0
 800612a:	b338      	cbz	r0, 800617c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800612c:	6803      	ldr	r3, [r0, #0]
 800612e:	07db      	lsls	r3, r3, #31
 8006130:	d410      	bmi.n	8006154 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006132:	682b      	ldr	r3, [r5, #0]
 8006134:	079f      	lsls	r7, r3, #30
 8006136:	d45e      	bmi.n	80061f6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	0719      	lsls	r1, r3, #28
 800613c:	f100 8095 	bmi.w	800626a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	075a      	lsls	r2, r3, #29
 8006144:	f100 80c1 	bmi.w	80062ca <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006148:	69e8      	ldr	r0, [r5, #28]
 800614a:	2800      	cmp	r0, #0
 800614c:	f040 812c 	bne.w	80063a8 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8006150:	2000      	movs	r0, #0
 8006152:	e029      	b.n	80061a8 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006154:	4c90      	ldr	r4, [pc, #576]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 8006156:	6863      	ldr	r3, [r4, #4]
 8006158:	f003 030c 	and.w	r3, r3, #12
 800615c:	2b04      	cmp	r3, #4
 800615e:	d007      	beq.n	8006170 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006160:	6863      	ldr	r3, [r4, #4]
 8006162:	f003 030c 	and.w	r3, r3, #12
 8006166:	2b08      	cmp	r3, #8
 8006168:	d10a      	bne.n	8006180 <HAL_RCC_OscConfig+0x5c>
 800616a:	6863      	ldr	r3, [r4, #4]
 800616c:	03de      	lsls	r6, r3, #15
 800616e:	d507      	bpl.n	8006180 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	039c      	lsls	r4, r3, #14
 8006174:	d5dd      	bpl.n	8006132 <HAL_RCC_OscConfig+0xe>
 8006176:	686b      	ldr	r3, [r5, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1da      	bne.n	8006132 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800617c:	2001      	movs	r0, #1
 800617e:	e013      	b.n	80061a8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006180:	686b      	ldr	r3, [r5, #4]
 8006182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006186:	d112      	bne.n	80061ae <HAL_RCC_OscConfig+0x8a>
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800618e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006190:	f7fe fd14 	bl	8004bbc <HAL_GetTick>
 8006194:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	0398      	lsls	r0, r3, #14
 800619a:	d4ca      	bmi.n	8006132 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800619c:	f7fe fd0e 	bl	8004bbc <HAL_GetTick>
 80061a0:	1b80      	subs	r0, r0, r6
 80061a2:	2864      	cmp	r0, #100	; 0x64
 80061a4:	d9f7      	bls.n	8006196 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80061a6:	2003      	movs	r0, #3
}
 80061a8:	b002      	add	sp, #8
 80061aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ae:	b99b      	cbnz	r3, 80061d8 <HAL_RCC_OscConfig+0xb4>
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061b6:	6023      	str	r3, [r4, #0]
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061be:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80061c0:	f7fe fcfc 	bl	8004bbc <HAL_GetTick>
 80061c4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	0399      	lsls	r1, r3, #14
 80061ca:	d5b2      	bpl.n	8006132 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061cc:	f7fe fcf6 	bl	8004bbc <HAL_GetTick>
 80061d0:	1b80      	subs	r0, r0, r6
 80061d2:	2864      	cmp	r0, #100	; 0x64
 80061d4:	d9f7      	bls.n	80061c6 <HAL_RCC_OscConfig+0xa2>
 80061d6:	e7e6      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	d103      	bne.n	80061e8 <HAL_RCC_OscConfig+0xc4>
 80061e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	e7cf      	b.n	8006188 <HAL_RCC_OscConfig+0x64>
 80061e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061f4:	e7cb      	b.n	800618e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061f6:	4c68      	ldr	r4, [pc, #416]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80061f8:	6863      	ldr	r3, [r4, #4]
 80061fa:	f013 0f0c 	tst.w	r3, #12
 80061fe:	d007      	beq.n	8006210 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006200:	6863      	ldr	r3, [r4, #4]
 8006202:	f003 030c 	and.w	r3, r3, #12
 8006206:	2b08      	cmp	r3, #8
 8006208:	d110      	bne.n	800622c <HAL_RCC_OscConfig+0x108>
 800620a:	6863      	ldr	r3, [r4, #4]
 800620c:	03da      	lsls	r2, r3, #15
 800620e:	d40d      	bmi.n	800622c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	079b      	lsls	r3, r3, #30
 8006214:	d502      	bpl.n	800621c <HAL_RCC_OscConfig+0xf8>
 8006216:	692b      	ldr	r3, [r5, #16]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d1af      	bne.n	800617c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	696a      	ldr	r2, [r5, #20]
 8006220:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006224:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	e785      	b.n	8006138 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800622c:	692a      	ldr	r2, [r5, #16]
 800622e:	4b5b      	ldr	r3, [pc, #364]	; (800639c <HAL_RCC_OscConfig+0x278>)
 8006230:	b16a      	cbz	r2, 800624e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8006232:	2201      	movs	r2, #1
 8006234:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006236:	f7fe fcc1 	bl	8004bbc <HAL_GetTick>
 800623a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	079f      	lsls	r7, r3, #30
 8006240:	d4ec      	bmi.n	800621c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006242:	f7fe fcbb 	bl	8004bbc <HAL_GetTick>
 8006246:	1b80      	subs	r0, r0, r6
 8006248:	2802      	cmp	r0, #2
 800624a:	d9f7      	bls.n	800623c <HAL_RCC_OscConfig+0x118>
 800624c:	e7ab      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800624e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006250:	f7fe fcb4 	bl	8004bbc <HAL_GetTick>
 8006254:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	0798      	lsls	r0, r3, #30
 800625a:	f57f af6d 	bpl.w	8006138 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800625e:	f7fe fcad 	bl	8004bbc <HAL_GetTick>
 8006262:	1b80      	subs	r0, r0, r6
 8006264:	2802      	cmp	r0, #2
 8006266:	d9f6      	bls.n	8006256 <HAL_RCC_OscConfig+0x132>
 8006268:	e79d      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800626a:	69aa      	ldr	r2, [r5, #24]
 800626c:	4e4a      	ldr	r6, [pc, #296]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 800626e:	4b4b      	ldr	r3, [pc, #300]	; (800639c <HAL_RCC_OscConfig+0x278>)
 8006270:	b1e2      	cbz	r2, 80062ac <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8006272:	2201      	movs	r2, #1
 8006274:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8006278:	f7fe fca0 	bl	8004bbc <HAL_GetTick>
 800627c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800627e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006280:	079b      	lsls	r3, r3, #30
 8006282:	d50d      	bpl.n	80062a0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006284:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006288:	4b45      	ldr	r3, [pc, #276]	; (80063a0 <HAL_RCC_OscConfig+0x27c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006290:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8006292:	bf00      	nop
  }
  while (Delay --);
 8006294:	9b01      	ldr	r3, [sp, #4]
 8006296:	1e5a      	subs	r2, r3, #1
 8006298:	9201      	str	r2, [sp, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1f9      	bne.n	8006292 <HAL_RCC_OscConfig+0x16e>
 800629e:	e74f      	b.n	8006140 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062a0:	f7fe fc8c 	bl	8004bbc <HAL_GetTick>
 80062a4:	1b00      	subs	r0, r0, r4
 80062a6:	2802      	cmp	r0, #2
 80062a8:	d9e9      	bls.n	800627e <HAL_RCC_OscConfig+0x15a>
 80062aa:	e77c      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80062ac:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80062b0:	f7fe fc84 	bl	8004bbc <HAL_GetTick>
 80062b4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062b6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80062b8:	079f      	lsls	r7, r3, #30
 80062ba:	f57f af41 	bpl.w	8006140 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062be:	f7fe fc7d 	bl	8004bbc <HAL_GetTick>
 80062c2:	1b00      	subs	r0, r0, r4
 80062c4:	2802      	cmp	r0, #2
 80062c6:	d9f6      	bls.n	80062b6 <HAL_RCC_OscConfig+0x192>
 80062c8:	e76d      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062ca:	4c33      	ldr	r4, [pc, #204]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80062cc:	69e3      	ldr	r3, [r4, #28]
 80062ce:	00d8      	lsls	r0, r3, #3
 80062d0:	d424      	bmi.n	800631c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80062d2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80062d4:	69e3      	ldr	r3, [r4, #28]
 80062d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062da:	61e3      	str	r3, [r4, #28]
 80062dc:	69e3      	ldr	r3, [r4, #28]
 80062de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e6:	4e2f      	ldr	r6, [pc, #188]	; (80063a4 <HAL_RCC_OscConfig+0x280>)
 80062e8:	6833      	ldr	r3, [r6, #0]
 80062ea:	05d9      	lsls	r1, r3, #23
 80062ec:	d518      	bpl.n	8006320 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062ee:	68eb      	ldr	r3, [r5, #12]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d126      	bne.n	8006342 <HAL_RCC_OscConfig+0x21e>
 80062f4:	6a23      	ldr	r3, [r4, #32]
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80062fc:	f7fe fc5e 	bl	8004bbc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006300:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006304:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006306:	6a23      	ldr	r3, [r4, #32]
 8006308:	079b      	lsls	r3, r3, #30
 800630a:	d53f      	bpl.n	800638c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800630c:	2f00      	cmp	r7, #0
 800630e:	f43f af1b 	beq.w	8006148 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006312:	69e3      	ldr	r3, [r4, #28]
 8006314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006318:	61e3      	str	r3, [r4, #28]
 800631a:	e715      	b.n	8006148 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800631c:	2700      	movs	r7, #0
 800631e:	e7e2      	b.n	80062e6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006320:	6833      	ldr	r3, [r6, #0]
 8006322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006326:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006328:	f7fe fc48 	bl	8004bbc <HAL_GetTick>
 800632c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800632e:	6833      	ldr	r3, [r6, #0]
 8006330:	05da      	lsls	r2, r3, #23
 8006332:	d4dc      	bmi.n	80062ee <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006334:	f7fe fc42 	bl	8004bbc <HAL_GetTick>
 8006338:	eba0 0008 	sub.w	r0, r0, r8
 800633c:	2864      	cmp	r0, #100	; 0x64
 800633e:	d9f6      	bls.n	800632e <HAL_RCC_OscConfig+0x20a>
 8006340:	e731      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006342:	b9ab      	cbnz	r3, 8006370 <HAL_RCC_OscConfig+0x24c>
 8006344:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006346:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800634a:	f023 0301 	bic.w	r3, r3, #1
 800634e:	6223      	str	r3, [r4, #32]
 8006350:	6a23      	ldr	r3, [r4, #32]
 8006352:	f023 0304 	bic.w	r3, r3, #4
 8006356:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006358:	f7fe fc30 	bl	8004bbc <HAL_GetTick>
 800635c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800635e:	6a23      	ldr	r3, [r4, #32]
 8006360:	0798      	lsls	r0, r3, #30
 8006362:	d5d3      	bpl.n	800630c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006364:	f7fe fc2a 	bl	8004bbc <HAL_GetTick>
 8006368:	1b80      	subs	r0, r0, r6
 800636a:	4540      	cmp	r0, r8
 800636c:	d9f7      	bls.n	800635e <HAL_RCC_OscConfig+0x23a>
 800636e:	e71a      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006370:	2b05      	cmp	r3, #5
 8006372:	6a23      	ldr	r3, [r4, #32]
 8006374:	d103      	bne.n	800637e <HAL_RCC_OscConfig+0x25a>
 8006376:	f043 0304 	orr.w	r3, r3, #4
 800637a:	6223      	str	r3, [r4, #32]
 800637c:	e7ba      	b.n	80062f4 <HAL_RCC_OscConfig+0x1d0>
 800637e:	f023 0301 	bic.w	r3, r3, #1
 8006382:	6223      	str	r3, [r4, #32]
 8006384:	6a23      	ldr	r3, [r4, #32]
 8006386:	f023 0304 	bic.w	r3, r3, #4
 800638a:	e7b6      	b.n	80062fa <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800638c:	f7fe fc16 	bl	8004bbc <HAL_GetTick>
 8006390:	1b80      	subs	r0, r0, r6
 8006392:	4540      	cmp	r0, r8
 8006394:	d9b7      	bls.n	8006306 <HAL_RCC_OscConfig+0x1e2>
 8006396:	e706      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
 8006398:	40021000 	.word	0x40021000
 800639c:	42420000 	.word	0x42420000
 80063a0:	20000000 	.word	0x20000000
 80063a4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063a8:	4c2a      	ldr	r4, [pc, #168]	; (8006454 <HAL_RCC_OscConfig+0x330>)
 80063aa:	6863      	ldr	r3, [r4, #4]
 80063ac:	f003 030c 	and.w	r3, r3, #12
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d03e      	beq.n	8006432 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063b4:	2200      	movs	r2, #0
 80063b6:	4b28      	ldr	r3, [pc, #160]	; (8006458 <HAL_RCC_OscConfig+0x334>)
 80063b8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80063ba:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063bc:	d12c      	bne.n	8006418 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80063be:	f7fe fbfd 	bl	8004bbc <HAL_GetTick>
 80063c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	0199      	lsls	r1, r3, #6
 80063c8:	d420      	bmi.n	800640c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80063ca:	6a2b      	ldr	r3, [r5, #32]
 80063cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d0:	d105      	bne.n	80063de <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80063d2:	6862      	ldr	r2, [r4, #4]
 80063d4:	68a9      	ldr	r1, [r5, #8]
 80063d6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80063da:	430a      	orrs	r2, r1
 80063dc:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063de:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80063e0:	6862      	ldr	r2, [r4, #4]
 80063e2:	430b      	orrs	r3, r1
 80063e4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80063e8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80063ea:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063ec:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80063ee:	4b1a      	ldr	r3, [pc, #104]	; (8006458 <HAL_RCC_OscConfig+0x334>)
 80063f0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80063f2:	f7fe fbe3 	bl	8004bbc <HAL_GetTick>
 80063f6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	019a      	lsls	r2, r3, #6
 80063fc:	f53f aea8 	bmi.w	8006150 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006400:	f7fe fbdc 	bl	8004bbc <HAL_GetTick>
 8006404:	1b40      	subs	r0, r0, r5
 8006406:	2802      	cmp	r0, #2
 8006408:	d9f6      	bls.n	80063f8 <HAL_RCC_OscConfig+0x2d4>
 800640a:	e6cc      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800640c:	f7fe fbd6 	bl	8004bbc <HAL_GetTick>
 8006410:	1b80      	subs	r0, r0, r6
 8006412:	2802      	cmp	r0, #2
 8006414:	d9d6      	bls.n	80063c4 <HAL_RCC_OscConfig+0x2a0>
 8006416:	e6c6      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8006418:	f7fe fbd0 	bl	8004bbc <HAL_GetTick>
 800641c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	019b      	lsls	r3, r3, #6
 8006422:	f57f ae95 	bpl.w	8006150 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006426:	f7fe fbc9 	bl	8004bbc <HAL_GetTick>
 800642a:	1b40      	subs	r0, r0, r5
 800642c:	2802      	cmp	r0, #2
 800642e:	d9f6      	bls.n	800641e <HAL_RCC_OscConfig+0x2fa>
 8006430:	e6b9      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006432:	2801      	cmp	r0, #1
 8006434:	f43f aeb8 	beq.w	80061a8 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8006438:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800643a:	6a2a      	ldr	r2, [r5, #32]
 800643c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8006440:	4291      	cmp	r1, r2
 8006442:	f47f ae9b 	bne.w	800617c <HAL_RCC_OscConfig+0x58>
 8006446:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006448:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800644c:	4293      	cmp	r3, r2
 800644e:	f43f ae7f 	beq.w	8006150 <HAL_RCC_OscConfig+0x2c>
 8006452:	e693      	b.n	800617c <HAL_RCC_OscConfig+0x58>
 8006454:	40021000 	.word	0x40021000
 8006458:	42420000 	.word	0x42420000

0800645c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800645c:	4a0d      	ldr	r2, [pc, #52]	; (8006494 <HAL_RCC_GetSysClockFreq+0x38>)
 800645e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006460:	f003 010c 	and.w	r1, r3, #12
 8006464:	2908      	cmp	r1, #8
 8006466:	d112      	bne.n	800648e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006468:	480b      	ldr	r0, [pc, #44]	; (8006498 <HAL_RCC_GetSysClockFreq+0x3c>)
 800646a:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800646e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006470:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006472:	d509      	bpl.n	8006488 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006474:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006476:	4a09      	ldr	r2, [pc, #36]	; (800649c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006478:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800647c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800647e:	4a08      	ldr	r2, [pc, #32]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x44>)
 8006480:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006482:	fbb0 f0f3 	udiv	r0, r0, r3
 8006486:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006488:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x48>)
 800648a:	4358      	muls	r0, r3
 800648c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800648e:	4803      	ldr	r0, [pc, #12]	; (800649c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40021000 	.word	0x40021000
 8006498:	0800b912 	.word	0x0800b912
 800649c:	007a1200 	.word	0x007a1200
 80064a0:	0800b922 	.word	0x0800b922
 80064a4:	003d0900 	.word	0x003d0900

080064a8 <HAL_RCC_ClockConfig>:
{
 80064a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ac:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80064ae:	4604      	mov	r4, r0
 80064b0:	b910      	cbnz	r0, 80064b8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80064b2:	2001      	movs	r0, #1
}
 80064b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064b8:	4a44      	ldr	r2, [pc, #272]	; (80065cc <HAL_RCC_ClockConfig+0x124>)
 80064ba:	6813      	ldr	r3, [r2, #0]
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	428b      	cmp	r3, r1
 80064c2:	d328      	bcc.n	8006516 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064c4:	6821      	ldr	r1, [r4, #0]
 80064c6:	078e      	lsls	r6, r1, #30
 80064c8:	d430      	bmi.n	800652c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ca:	07ca      	lsls	r2, r1, #31
 80064cc:	d443      	bmi.n	8006556 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064ce:	4a3f      	ldr	r2, [pc, #252]	; (80065cc <HAL_RCC_ClockConfig+0x124>)
 80064d0:	6813      	ldr	r3, [r2, #0]
 80064d2:	f003 0307 	and.w	r3, r3, #7
 80064d6:	42ab      	cmp	r3, r5
 80064d8:	d865      	bhi.n	80065a6 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064da:	6822      	ldr	r2, [r4, #0]
 80064dc:	4d3c      	ldr	r5, [pc, #240]	; (80065d0 <HAL_RCC_ClockConfig+0x128>)
 80064de:	f012 0f04 	tst.w	r2, #4
 80064e2:	d16c      	bne.n	80065be <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e4:	0713      	lsls	r3, r2, #28
 80064e6:	d506      	bpl.n	80064f6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064e8:	686b      	ldr	r3, [r5, #4]
 80064ea:	6922      	ldr	r2, [r4, #16]
 80064ec:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80064f0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80064f4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064f6:	f7ff ffb1 	bl	800645c <HAL_RCC_GetSysClockFreq>
 80064fa:	686b      	ldr	r3, [r5, #4]
 80064fc:	4a35      	ldr	r2, [pc, #212]	; (80065d4 <HAL_RCC_ClockConfig+0x12c>)
 80064fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006502:	5cd3      	ldrb	r3, [r2, r3]
 8006504:	40d8      	lsrs	r0, r3
 8006506:	4b34      	ldr	r3, [pc, #208]	; (80065d8 <HAL_RCC_ClockConfig+0x130>)
 8006508:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800650a:	4b34      	ldr	r3, [pc, #208]	; (80065dc <HAL_RCC_ClockConfig+0x134>)
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	f7fc ff79 	bl	8003404 <HAL_InitTick>
  return HAL_OK;
 8006512:	2000      	movs	r0, #0
 8006514:	e7ce      	b.n	80064b4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006516:	6813      	ldr	r3, [r2, #0]
 8006518:	f023 0307 	bic.w	r3, r3, #7
 800651c:	430b      	orrs	r3, r1
 800651e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006520:	6813      	ldr	r3, [r2, #0]
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	428b      	cmp	r3, r1
 8006528:	d1c3      	bne.n	80064b2 <HAL_RCC_ClockConfig+0xa>
 800652a:	e7cb      	b.n	80064c4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652c:	4b28      	ldr	r3, [pc, #160]	; (80065d0 <HAL_RCC_ClockConfig+0x128>)
 800652e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006532:	bf1e      	ittt	ne
 8006534:	685a      	ldrne	r2, [r3, #4]
 8006536:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800653a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800653c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800653e:	bf42      	ittt	mi
 8006540:	685a      	ldrmi	r2, [r3, #4]
 8006542:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8006546:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	68a0      	ldr	r0, [r4, #8]
 800654c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006550:	4302      	orrs	r2, r0
 8006552:	605a      	str	r2, [r3, #4]
 8006554:	e7b9      	b.n	80064ca <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006556:	6862      	ldr	r2, [r4, #4]
 8006558:	4e1d      	ldr	r6, [pc, #116]	; (80065d0 <HAL_RCC_ClockConfig+0x128>)
 800655a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800655c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800655e:	d11a      	bne.n	8006596 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006560:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006564:	d0a5      	beq.n	80064b2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006566:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006568:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800656c:	f023 0303 	bic.w	r3, r3, #3
 8006570:	4313      	orrs	r3, r2
 8006572:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8006574:	f7fe fb22 	bl	8004bbc <HAL_GetTick>
 8006578:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800657a:	6873      	ldr	r3, [r6, #4]
 800657c:	6862      	ldr	r2, [r4, #4]
 800657e:	f003 030c 	and.w	r3, r3, #12
 8006582:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006586:	d0a2      	beq.n	80064ce <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006588:	f7fe fb18 	bl	8004bbc <HAL_GetTick>
 800658c:	1bc0      	subs	r0, r0, r7
 800658e:	4540      	cmp	r0, r8
 8006590:	d9f3      	bls.n	800657a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8006592:	2003      	movs	r0, #3
 8006594:	e78e      	b.n	80064b4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006596:	2a02      	cmp	r2, #2
 8006598:	d102      	bne.n	80065a0 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800659a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800659e:	e7e1      	b.n	8006564 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065a0:	f013 0f02 	tst.w	r3, #2
 80065a4:	e7de      	b.n	8006564 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065a6:	6813      	ldr	r3, [r2, #0]
 80065a8:	f023 0307 	bic.w	r3, r3, #7
 80065ac:	432b      	orrs	r3, r5
 80065ae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b0:	6813      	ldr	r3, [r2, #0]
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	42ab      	cmp	r3, r5
 80065b8:	f47f af7b 	bne.w	80064b2 <HAL_RCC_ClockConfig+0xa>
 80065bc:	e78d      	b.n	80064da <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065be:	686b      	ldr	r3, [r5, #4]
 80065c0:	68e1      	ldr	r1, [r4, #12]
 80065c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80065c6:	430b      	orrs	r3, r1
 80065c8:	606b      	str	r3, [r5, #4]
 80065ca:	e78b      	b.n	80064e4 <HAL_RCC_ClockConfig+0x3c>
 80065cc:	40022000 	.word	0x40022000
 80065d0:	40021000 	.word	0x40021000
 80065d4:	0800b6a6 	.word	0x0800b6a6
 80065d8:	20000000 	.word	0x20000000
 80065dc:	20000008 	.word	0x20000008

080065e0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065e0:	4b04      	ldr	r3, [pc, #16]	; (80065f4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80065e2:	4a05      	ldr	r2, [pc, #20]	; (80065f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80065ea:	5cd3      	ldrb	r3, [r2, r3]
 80065ec:	4a03      	ldr	r2, [pc, #12]	; (80065fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80065ee:	6810      	ldr	r0, [r2, #0]
}
 80065f0:	40d8      	lsrs	r0, r3
 80065f2:	4770      	bx	lr
 80065f4:	40021000 	.word	0x40021000
 80065f8:	0800b6b6 	.word	0x0800b6b6
 80065fc:	20000000 	.word	0x20000000

08006600 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006600:	4b04      	ldr	r3, [pc, #16]	; (8006614 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006602:	4a05      	ldr	r2, [pc, #20]	; (8006618 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800660a:	5cd3      	ldrb	r3, [r2, r3]
 800660c:	4a03      	ldr	r2, [pc, #12]	; (800661c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800660e:	6810      	ldr	r0, [r2, #0]
}
 8006610:	40d8      	lsrs	r0, r3
 8006612:	4770      	bx	lr
 8006614:	40021000 	.word	0x40021000
 8006618:	0800b6b6 	.word	0x0800b6b6
 800661c:	20000000 	.word	0x20000000

08006620 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006620:	230f      	movs	r3, #15
 8006622:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <HAL_RCC_GetClockConfig+0x34>)
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	f002 0203 	and.w	r2, r2, #3
 800662c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006634:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800663c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	08db      	lsrs	r3, r3, #3
 8006642:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006646:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006648:	4b03      	ldr	r3, [pc, #12]	; (8006658 <HAL_RCC_GetClockConfig+0x38>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	600b      	str	r3, [r1, #0]
}
 8006652:	4770      	bx	lr
 8006654:	40021000 	.word	0x40021000
 8006658:	40022000 	.word	0x40022000

0800665c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800665c:	6803      	ldr	r3, [r0, #0]
{
 800665e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006662:	07d9      	lsls	r1, r3, #31
{
 8006664:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006666:	d521      	bpl.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006668:	4c36      	ldr	r4, [pc, #216]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800666a:	69e3      	ldr	r3, [r4, #28]
 800666c:	00da      	lsls	r2, r3, #3
 800666e:	d433      	bmi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8006670:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006672:	69e3      	ldr	r3, [r4, #28]
 8006674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006678:	61e3      	str	r3, [r4, #28]
 800667a:	69e3      	ldr	r3, [r4, #28]
 800667c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006684:	4f30      	ldr	r7, [pc, #192]	; (8006748 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	05db      	lsls	r3, r3, #23
 800668a:	d527      	bpl.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800668c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800668e:	686a      	ldr	r2, [r5, #4]
 8006690:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006694:	d136      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006696:	6a23      	ldr	r3, [r4, #32]
 8006698:	686a      	ldr	r2, [r5, #4]
 800669a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800669e:	4313      	orrs	r3, r2
 80066a0:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066a2:	b11e      	cbz	r6, 80066ac <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066a4:	69e3      	ldr	r3, [r4, #28]
 80066a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066aa:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066ac:	6828      	ldr	r0, [r5, #0]
 80066ae:	0783      	lsls	r3, r0, #30
 80066b0:	d506      	bpl.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066b2:	4924      	ldr	r1, [pc, #144]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80066b4:	68ab      	ldr	r3, [r5, #8]
 80066b6:	684a      	ldr	r2, [r1, #4]
 80066b8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80066bc:	431a      	orrs	r2, r3
 80066be:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066c0:	f010 0010 	ands.w	r0, r0, #16
 80066c4:	d01b      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066c6:	4a1f      	ldr	r2, [pc, #124]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80066c8:	68e9      	ldr	r1, [r5, #12]
 80066ca:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80066cc:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066ce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80066d2:	430b      	orrs	r3, r1
 80066d4:	6053      	str	r3, [r2, #4]
 80066d6:	e012      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 80066d8:	2600      	movs	r6, #0
 80066da:	e7d3      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80066e4:	f7fe fa6a 	bl	8004bbc <HAL_GetTick>
 80066e8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	05d8      	lsls	r0, r3, #23
 80066ee:	d4cd      	bmi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066f0:	f7fe fa64 	bl	8004bbc <HAL_GetTick>
 80066f4:	eba0 0008 	sub.w	r0, r0, r8
 80066f8:	2864      	cmp	r0, #100	; 0x64
 80066fa:	d9f6      	bls.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 80066fc:	2003      	movs	r0, #3
}
 80066fe:	b002      	add	sp, #8
 8006700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006704:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006708:	429a      	cmp	r2, r3
 800670a:	d0c4      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 800670c:	2001      	movs	r0, #1
 800670e:	4a0f      	ldr	r2, [pc, #60]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006710:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8006712:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006716:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006718:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800671c:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8006720:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006722:	07d9      	lsls	r1, r3, #31
 8006724:	d5b7      	bpl.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8006726:	f7fe fa49 	bl	8004bbc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800672a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800672e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006730:	6a23      	ldr	r3, [r4, #32]
 8006732:	079a      	lsls	r2, r3, #30
 8006734:	d4af      	bmi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006736:	f7fe fa41 	bl	8004bbc <HAL_GetTick>
 800673a:	1bc0      	subs	r0, r0, r7
 800673c:	4540      	cmp	r0, r8
 800673e:	d9f7      	bls.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006740:	e7dc      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8006742:	bf00      	nop
 8006744:	40021000 	.word	0x40021000
 8006748:	40007000 	.word	0x40007000
 800674c:	42420000 	.word	0x42420000

08006750 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006750:	2802      	cmp	r0, #2
{
 8006752:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8006754:	d044      	beq.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8006756:	2810      	cmp	r0, #16
 8006758:	d003      	beq.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 800675a:	2801      	cmp	r0, #1
 800675c:	d022      	beq.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 800675e:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8006760:	e034      	b.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 8006762:	4b25      	ldr	r3, [pc, #148]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006764:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800676c:	d02e      	beq.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800676e:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8006772:	4822      	ldr	r0, [pc, #136]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006774:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006776:	bf48      	it	mi
 8006778:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800677a:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800677c:	bf41      	itttt	mi
 800677e:	4920      	ldrmi	r1, [pc, #128]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006780:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8006784:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006786:	4a1f      	ldrmi	r2, [pc, #124]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006788:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800678a:	bf4c      	ite	mi
 800678c:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006790:	4a1d      	ldrpl	r2, [pc, #116]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006792:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006794:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006798:	d418      	bmi.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 800679a:	2303      	movs	r3, #3
 800679c:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800679e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80067a2:	e013      	b.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80067a4:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80067a8:	4a13      	ldr	r2, [pc, #76]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80067aa:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80067ac:	4019      	ands	r1, r3
 80067ae:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80067b2:	d01e      	beq.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80067b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067bc:	d107      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 80067be:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80067c2:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80067c4:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 80067c8:	bf18      	it	ne
 80067ca:	4618      	movne	r0, r3
}
 80067cc:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80067ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067d2:	d1c4      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 80067d4:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80067d6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80067da:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80067de:	e7f3      	b.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80067e0:	f7ff ff0e 	bl	8006600 <HAL_RCC_GetPCLK2Freq>
 80067e4:	4b04      	ldr	r3, [pc, #16]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80067ec:	3301      	adds	r3, #1
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	e7d5      	b.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 80067f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80067f6:	e7e9      	b.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80067f8:	40021000 	.word	0x40021000
 80067fc:	0800b924 	.word	0x0800b924
 8006800:	0800b934 	.word	0x0800b934
 8006804:	007a1200 	.word	0x007a1200
 8006808:	003d0900 	.word	0x003d0900

0800680c <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800680c:	6803      	ldr	r3, [r0, #0]
{
 800680e:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006810:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006812:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006814:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8006816:	b295      	uxth	r5, r2
 8006818:	b28c      	uxth	r4, r1
 800681a:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800681c:	bf17      	itett	ne
 800681e:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006820:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006822:	b280      	uxthne	r0, r0
 8006824:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006828:	bf08      	it	eq
 800682a:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 800682e:	bd30      	pop	{r4, r5, pc}

08006830 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006830:	6803      	ldr	r3, [r0, #0]
 8006832:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8006836:	b29b      	uxth	r3, r3
}
 8006838:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800683c:	4770      	bx	lr

0800683e <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 800683e:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006840:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8006842:	f000 000f 	and.w	r0, r0, #15
 8006846:	fb02 0003 	mla	r0, r2, r3, r0
}
 800684a:	b2c0      	uxtb	r0, r0
 800684c:	4770      	bx	lr

0800684e <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800684e:	b530      	push	{r4, r5, lr}
  year = 2000U + nYear;

  if (nMonth < 3U)
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006850:	2517      	movs	r5, #23
 8006852:	2309      	movs	r3, #9
 8006854:	434d      	muls	r5, r1
  if (nMonth < 3U)
 8006856:	2902      	cmp	r1, #2
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006858:	fbb5 f5f3 	udiv	r5, r5, r3
  year = 2000U + nYear;
 800685c:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
  if (nMonth < 3U)
 8006860:	d817      	bhi.n	8006892 <RTC_WeekDayNum+0x44>
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006862:	f200 73cf 	addw	r3, r0, #1999	; 0x7cf
 8006866:	1d10      	adds	r0, r2, #4
 8006868:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800686c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006870:	4420      	add	r0, r4
 8006872:	4428      	add	r0, r5
 8006874:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 8006878:	4410      	add	r0, r2
 800687a:	2264      	movs	r2, #100	; 0x64
 800687c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006880:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006882:	2307      	movs	r3, #7
 8006884:	fbb0 f3f3 	udiv	r3, r0, r3
 8006888:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800688c:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 800688e:	b2c0      	uxtb	r0, r0
 8006890:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006892:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006896:	fbb4 f3f3 	udiv	r3, r4, r3
 800689a:	1c90      	adds	r0, r2, #2
 800689c:	4420      	add	r0, r4
 800689e:	4428      	add	r0, r5
 80068a0:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 80068a4:	4418      	add	r0, r3
 80068a6:	2364      	movs	r3, #100	; 0x64
 80068a8:	fbb4 f4f3 	udiv	r4, r4, r3
 80068ac:	1b00      	subs	r0, r0, r4
 80068ae:	e7e8      	b.n	8006882 <RTC_WeekDayNum+0x34>

080068b0 <RTC_EnterInitMode>:
{
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80068b4:	f7fe f982 	bl	8004bbc <HAL_GetTick>
 80068b8:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	0692      	lsls	r2, r2, #26
 80068c0:	d505      	bpl.n	80068ce <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 80068c2:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	f042 0210 	orr.w	r2, r2, #16
 80068ca:	605a      	str	r2, [r3, #4]
}
 80068cc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80068ce:	f7fe f975 	bl	8004bbc <HAL_GetTick>
 80068d2:	1b40      	subs	r0, r0, r5
 80068d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80068d8:	d9ef      	bls.n	80068ba <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80068da:	2003      	movs	r0, #3
 80068dc:	e7f6      	b.n	80068cc <RTC_EnterInitMode+0x1c>

080068de <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068de:	6802      	ldr	r2, [r0, #0]
{
 80068e0:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068e2:	6853      	ldr	r3, [r2, #4]
{
 80068e4:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068e6:	f023 0310 	bic.w	r3, r3, #16
 80068ea:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80068ec:	f7fe f966 	bl	8004bbc <HAL_GetTick>
 80068f0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	069b      	lsls	r3, r3, #26
 80068f8:	d501      	bpl.n	80068fe <RTC_ExitInitMode+0x20>
  return HAL_OK;
 80068fa:	2000      	movs	r0, #0
}
 80068fc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80068fe:	f7fe f95d 	bl	8004bbc <HAL_GetTick>
 8006902:	1b40      	subs	r0, r0, r5
 8006904:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006908:	d9f3      	bls.n	80068f2 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 800690a:	2003      	movs	r0, #3
 800690c:	e7f6      	b.n	80068fc <RTC_ExitInitMode+0x1e>

0800690e <RTC_WriteTimeCounter>:
{
 800690e:	b538      	push	{r3, r4, r5, lr}
 8006910:	4605      	mov	r5, r0
 8006912:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006914:	f7ff ffcc 	bl	80068b0 <RTC_EnterInitMode>
 8006918:	b958      	cbnz	r0, 8006932 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800691a:	682b      	ldr	r3, [r5, #0]
 800691c:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800691e:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006920:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006922:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006924:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006926:	f7ff ffda 	bl	80068de <RTC_ExitInitMode>
    status = HAL_ERROR;
 800692a:	3800      	subs	r0, #0
 800692c:	bf18      	it	ne
 800692e:	2001      	movne	r0, #1
}
 8006930:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8006932:	2001      	movs	r0, #1
 8006934:	e7fc      	b.n	8006930 <RTC_WriteTimeCounter+0x22>

08006936 <RTC_WriteAlarmCounter>:
{
 8006936:	b538      	push	{r3, r4, r5, lr}
 8006938:	4605      	mov	r5, r0
 800693a:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800693c:	f7ff ffb8 	bl	80068b0 <RTC_EnterInitMode>
 8006940:	b958      	cbnz	r0, 800695a <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006942:	682b      	ldr	r3, [r5, #0]
 8006944:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006946:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006948:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800694a:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800694c:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800694e:	f7ff ffc6 	bl	80068de <RTC_ExitInitMode>
    status = HAL_ERROR;
 8006952:	3800      	subs	r0, #0
 8006954:	bf18      	it	ne
 8006956:	2001      	movne	r0, #1
}
 8006958:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 800695a:	2001      	movs	r0, #1
 800695c:	e7fc      	b.n	8006958 <RTC_WriteAlarmCounter+0x22>

0800695e <HAL_RTC_SetTime>:
{
 800695e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 8006960:	4604      	mov	r4, r0
 8006962:	b1e0      	cbz	r0, 800699e <HAL_RTC_SetTime+0x40>
 8006964:	b1d9      	cbz	r1, 800699e <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8006966:	7c03      	ldrb	r3, [r0, #16]
 8006968:	2502      	movs	r5, #2
 800696a:	2b01      	cmp	r3, #1
 800696c:	d045      	beq.n	80069fa <HAL_RTC_SetTime+0x9c>
 800696e:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006970:	7445      	strb	r5, [r0, #17]
  __HAL_LOCK(hrtc);
 8006972:	7403      	strb	r3, [r0, #16]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006974:	7808      	ldrb	r0, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006976:	784e      	ldrb	r6, [r1, #1]
                              ((uint32_t)sTime->Seconds));
 8006978:	788f      	ldrb	r7, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 800697a:	b992      	cbnz	r2, 80069a2 <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 800697c:	233c      	movs	r3, #60	; 0x3c
 800697e:	435e      	muls	r6, r3
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006980:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006984:	fb03 6600 	mla	r6, r3, r0, r6
 8006988:	443e      	add	r6, r7
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800698a:	4631      	mov	r1, r6
 800698c:	4620      	mov	r0, r4
 800698e:	f7ff ffbe 	bl	800690e <RTC_WriteTimeCounter>
 8006992:	4605      	mov	r5, r0
 8006994:	b1b8      	cbz	r0, 80069c6 <HAL_RTC_SetTime+0x68>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006996:	2304      	movs	r3, #4
 8006998:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 800699a:	2300      	movs	r3, #0
 800699c:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 800699e:	2501      	movs	r5, #1
 80069a0:	e02b      	b.n	80069fa <HAL_RTC_SetTime+0x9c>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80069a2:	f7ff ff4c 	bl	800683e <RTC_Bcd2ToByte>
 80069a6:	4605      	mov	r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80069a8:	4630      	mov	r0, r6
 80069aa:	f7ff ff48 	bl	800683e <RTC_Bcd2ToByte>
 80069ae:	233c      	movs	r3, #60	; 0x3c
 80069b0:	fb03 f100 	mul.w	r1, r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80069b4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80069b8:	4638      	mov	r0, r7
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80069ba:	fb03 1105 	mla	r1, r3, r5, r1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80069be:	f7ff ff3e 	bl	800683e <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80069c2:	1846      	adds	r6, r0, r1
 80069c4:	e7e1      	b.n	800698a <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80069c6:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80069c8:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80069ca:	6853      	ldr	r3, [r2, #4]
 80069cc:	f023 0305 	bic.w	r3, r3, #5
 80069d0:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80069d2:	f7ff ff2d 	bl	8006830 <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 80069d6:	4286      	cmp	r6, r0
 80069d8:	d90b      	bls.n	80069f2 <HAL_RTC_SetTime+0x94>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80069da:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80069de:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80069e2:	4620      	mov	r0, r4
 80069e4:	f7ff ffa7 	bl	8006936 <RTC_WriteAlarmCounter>
 80069e8:	b118      	cbz	r0, 80069f2 <HAL_RTC_SetTime+0x94>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80069ea:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 80069ec:	7425      	strb	r5, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 80069ee:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 80069f0:	e7d5      	b.n	800699e <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 80069f2:	2301      	movs	r3, #1
 80069f4:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 80069f6:	2300      	movs	r3, #0
 80069f8:	7423      	strb	r3, [r4, #16]
}
 80069fa:	4628      	mov	r0, r5
 80069fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a00 <HAL_RTC_SetDate>:
{
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 8006a04:	4604      	mov	r4, r0
 8006a06:	b348      	cbz	r0, 8006a5c <HAL_RTC_SetDate+0x5c>
 8006a08:	b341      	cbz	r1, 8006a5c <HAL_RTC_SetDate+0x5c>
  __HAL_LOCK(hrtc);
 8006a0a:	7c03      	ldrb	r3, [r0, #16]
 8006a0c:	2002      	movs	r0, #2
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d047      	beq.n	8006aa2 <HAL_RTC_SetDate+0xa2>
 8006a12:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a14:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 8006a16:	7423      	strb	r3, [r4, #16]
  if (Format == RTC_FORMAT_BIN)
 8006a18:	78c8      	ldrb	r0, [r1, #3]
 8006a1a:	bb0a      	cbnz	r2, 8006a60 <HAL_RTC_SetDate+0x60>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006a1c:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006a1e:	784b      	ldrb	r3, [r1, #1]
 8006a20:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006a22:	788a      	ldrb	r2, [r1, #2]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006a24:	7b61      	ldrb	r1, [r4, #13]
 8006a26:	7be0      	ldrb	r0, [r4, #15]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006a28:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006a2a:	f7ff ff10 	bl	800684e <RTC_WeekDayNum>
 8006a2e:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006a30:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006a32:	4620      	mov	r0, r4
 8006a34:	f7ff feea 	bl	800680c <RTC_ReadTimeCounter>
  if (hours > 24U)
 8006a38:	4b1a      	ldr	r3, [pc, #104]	; (8006aa4 <HAL_RTC_SetDate+0xa4>)
 8006a3a:	4298      	cmp	r0, r3
 8006a3c:	d92d      	bls.n	8006a9a <HAL_RTC_SetDate+0x9a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006a3e:	4d1a      	ldr	r5, [pc, #104]	; (8006aa8 <HAL_RTC_SetDate+0xa8>)
 8006a40:	fbb0 f2f5 	udiv	r2, r0, r5
 8006a44:	fb05 0512 	mls	r5, r5, r2, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006a48:	4620      	mov	r0, r4
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	f7ff ff5f 	bl	800690e <RTC_WriteTimeCounter>
 8006a50:	4606      	mov	r6, r0
 8006a52:	b188      	cbz	r0, 8006a78 <HAL_RTC_SetDate+0x78>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006a54:	2304      	movs	r3, #4
 8006a56:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8006a58:	2300      	movs	r3, #0
 8006a5a:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8006a5c:	2001      	movs	r0, #1
 8006a5e:	e020      	b.n	8006aa2 <HAL_RTC_SetDate+0xa2>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006a60:	f7ff feed 	bl	800683e <RTC_Bcd2ToByte>
 8006a64:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006a66:	7848      	ldrb	r0, [r1, #1]
 8006a68:	f7ff fee9 	bl	800683e <RTC_Bcd2ToByte>
 8006a6c:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006a6e:	7888      	ldrb	r0, [r1, #2]
 8006a70:	f7ff fee5 	bl	800683e <RTC_Bcd2ToByte>
 8006a74:	4602      	mov	r2, r0
 8006a76:	e7d5      	b.n	8006a24 <HAL_RTC_SetDate+0x24>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f7ff fed9 	bl	8006830 <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 8006a7e:	4285      	cmp	r5, r0
 8006a80:	d90b      	bls.n	8006a9a <HAL_RTC_SetDate+0x9a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006a82:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8006a86:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f7ff ff53 	bl	8006936 <RTC_WriteAlarmCounter>
 8006a90:	b118      	cbz	r0, 8006a9a <HAL_RTC_SetDate+0x9a>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006a92:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8006a94:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006a96:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8006a98:	e7e0      	b.n	8006a5c <HAL_RTC_SetDate+0x5c>
  hrtc->State = HAL_RTC_STATE_READY ;
 8006a9a:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8006a9c:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8006a9e:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8006aa0:	7420      	strb	r0, [r4, #16]
}
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}
 8006aa4:	00015f8f 	.word	0x00015f8f
 8006aa8:	00015180 	.word	0x00015180

08006aac <HAL_RTC_WaitForSynchro>:
{
 8006aac:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8006aae:	4604      	mov	r4, r0
 8006ab0:	b1a8      	cbz	r0, 8006ade <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006ab2:	6802      	ldr	r2, [r0, #0]
 8006ab4:	6853      	ldr	r3, [r2, #4]
 8006ab6:	f023 0308 	bic.w	r3, r3, #8
 8006aba:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8006abc:	f7fe f87e 	bl	8004bbc <HAL_GetTick>
 8006ac0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	071b      	lsls	r3, r3, #28
 8006ac8:	d501      	bpl.n	8006ace <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8006aca:	2000      	movs	r0, #0
}
 8006acc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006ace:	f7fe f875 	bl	8004bbc <HAL_GetTick>
 8006ad2:	1b40      	subs	r0, r0, r5
 8006ad4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006ad8:	d9f3      	bls.n	8006ac2 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8006ada:	2003      	movs	r0, #3
 8006adc:	e7f6      	b.n	8006acc <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8006ade:	2001      	movs	r0, #1
 8006ae0:	e7f4      	b.n	8006acc <HAL_RTC_WaitForSynchro+0x20>
	...

08006ae4 <HAL_RTC_Init>:
{
 8006ae4:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	b170      	cbz	r0, 8006b08 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006aea:	7c43      	ldrb	r3, [r0, #17]
 8006aec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006af0:	b913      	cbnz	r3, 8006af8 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8006af2:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8006af4:	f7fc fb0c 	bl	8003110 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006af8:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006afa:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006afc:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006afe:	f7ff ffd5 	bl	8006aac <HAL_RTC_WaitForSynchro>
 8006b02:	b118      	cbz	r0, 8006b0c <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b04:	2304      	movs	r3, #4
 8006b06:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8006b08:	2001      	movs	r0, #1
 8006b0a:	e02f      	b.n	8006b6c <HAL_RTC_Init+0x88>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f7ff fecf 	bl	80068b0 <RTC_EnterInitMode>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	d1f6      	bne.n	8006b04 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006b16:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006b18:	68a1      	ldr	r1, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006b1a:	6853      	ldr	r3, [r2, #4]
 8006b1c:	f023 0307 	bic.w	r3, r3, #7
 8006b20:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006b22:	4a13      	ldr	r2, [pc, #76]	; (8006b70 <HAL_RTC_Init+0x8c>)
 8006b24:	b119      	cbz	r1, 8006b2e <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006b26:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006b28:	f023 0301 	bic.w	r3, r3, #1
 8006b2c:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006b2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006b30:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8006b34:	430b      	orrs	r3, r1
 8006b36:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006b38:	6860      	ldr	r0, [r4, #4]
 8006b3a:	1c43      	adds	r3, r0, #1
 8006b3c:	d105      	bne.n	8006b4a <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006b3e:	2001      	movs	r0, #1
 8006b40:	f7ff fe06 	bl	8006750 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d0dd      	beq.n	8006b04 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8006b48:	3801      	subs	r0, #1
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	f3c0 4203 	ubfx	r2, r0, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8006b50:	b280      	uxth	r0, r0
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8006b52:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8006b54:	60d8      	str	r0, [r3, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006b56:	4620      	mov	r0, r4
 8006b58:	f7ff fec1 	bl	80068de <RTC_ExitInitMode>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	b110      	cbz	r0, 8006b66 <HAL_RTC_Init+0x82>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006b60:	2204      	movs	r2, #4
 8006b62:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8006b64:	e7d0      	b.n	8006b08 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006b66:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006b68:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8006b6a:	7463      	strb	r3, [r4, #17]
}
 8006b6c:	bd10      	pop	{r4, pc}
 8006b6e:	bf00      	nop
 8006b70:	40006c00 	.word	0x40006c00

08006b74 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b74:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b76:	6a02      	ldr	r2, [r0, #32]
{
 8006b78:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b7a:	f022 0201 	bic.w	r2, r2, #1
 8006b7e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b80:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b82:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b86:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006b8a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b8c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006b8e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8006b92:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b94:	4d0a      	ldr	r5, [pc, #40]	; (8006bc0 <TIM_OC1_SetConfig+0x4c>)
 8006b96:	42a8      	cmp	r0, r5
 8006b98:	d10b      	bne.n	8006bb2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b9a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b9c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006ba0:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ba2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ba6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006baa:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bac:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bb0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bb4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bb6:	684a      	ldr	r2, [r1, #4]
 8006bb8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bba:	6203      	str	r3, [r0, #32]
}
 8006bbc:	bd70      	pop	{r4, r5, r6, pc}
 8006bbe:	bf00      	nop
 8006bc0:	40012c00 	.word	0x40012c00

08006bc4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc4:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bc6:	6a02      	ldr	r2, [r0, #32]
{
 8006bc8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bce:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bd2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bd6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006bda:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bdc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006bde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006be2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006be6:	4d0b      	ldr	r5, [pc, #44]	; (8006c14 <TIM_OC3_SetConfig+0x50>)
 8006be8:	42a8      	cmp	r0, r5
 8006bea:	d10d      	bne.n	8006c08 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bec:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bf2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bf6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bfa:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006bfe:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c04:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c08:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c0a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c0c:	684a      	ldr	r2, [r1, #4]
 8006c0e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c10:	6203      	str	r3, [r0, #32]
}
 8006c12:	bd70      	pop	{r4, r5, r6, pc}
 8006c14:	40012c00 	.word	0x40012c00

08006c18 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c18:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c1a:	6a02      	ldr	r2, [r0, #32]
{
 8006c1c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c22:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c24:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c26:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c28:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c2a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c2e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c32:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8006c34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c38:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3c:	4d06      	ldr	r5, [pc, #24]	; (8006c58 <TIM_OC4_SetConfig+0x40>)
 8006c3e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c40:	bf02      	ittt	eq
 8006c42:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c44:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c48:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c4c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c4e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c50:	684a      	ldr	r2, [r1, #4]
 8006c52:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c54:	6203      	str	r3, [r0, #32]
}
 8006c56:	bd30      	pop	{r4, r5, pc}
 8006c58:	40012c00 	.word	0x40012c00

08006c5c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006c5c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d120      	bne.n	8006ca6 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	2302      	movs	r3, #2
 8006c66:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c6a:	6803      	ldr	r3, [r0, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	f042 0201 	orr.w	r2, r2, #1
 8006c72:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c74:	4a0d      	ldr	r2, [pc, #52]	; (8006cac <HAL_TIM_Base_Start_IT+0x50>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00a      	beq.n	8006c90 <HAL_TIM_Base_Start_IT+0x34>
 8006c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7e:	d007      	beq.n	8006c90 <HAL_TIM_Base_Start_IT+0x34>
 8006c80:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d003      	beq.n	8006c90 <HAL_TIM_Base_Start_IT+0x34>
 8006c88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d104      	bne.n	8006c9a <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c96:	2a06      	cmp	r2, #6
 8006c98:	d003      	beq.n	8006ca2 <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	f042 0201 	orr.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006ca2:	2000      	movs	r0, #0
}
 8006ca4:	4770      	bx	lr
    return HAL_ERROR;
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	40012c00 	.word	0x40012c00

08006cb0 <HAL_TIM_PWM_MspInit>:
 8006cb0:	4770      	bx	lr

08006cb2 <HAL_TIM_OC_DelayElapsedCallback>:
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_TIM_IC_CaptureCallback>:
 8006cb4:	4770      	bx	lr

08006cb6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_TIM_TriggerCallback>:
 8006cb8:	4770      	bx	lr

08006cba <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cba:	6803      	ldr	r3, [r0, #0]
{
 8006cbc:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cbe:	691a      	ldr	r2, [r3, #16]
{
 8006cc0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cc2:	0791      	lsls	r1, r2, #30
 8006cc4:	d50e      	bpl.n	8006ce4 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	0792      	lsls	r2, r2, #30
 8006cca:	d50b      	bpl.n	8006ce4 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ccc:	f06f 0202 	mvn.w	r2, #2
 8006cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	079b      	lsls	r3, r3, #30
 8006cda:	d077      	beq.n	8006dcc <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8006cdc:	f7ff ffea 	bl	8006cb4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	0750      	lsls	r0, r2, #29
 8006cea:	d510      	bpl.n	8006d0e <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	0751      	lsls	r1, r2, #29
 8006cf0:	d50d      	bpl.n	8006d0e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cf2:	f06f 0204 	mvn.w	r2, #4
 8006cf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cfc:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8006cfe:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d00:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006d04:	d068      	beq.n	8006dd8 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d06:	f7ff ffd5 	bl	8006cb4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	691a      	ldr	r2, [r3, #16]
 8006d12:	0712      	lsls	r2, r2, #28
 8006d14:	d50f      	bpl.n	8006d36 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	0710      	lsls	r0, r2, #28
 8006d1a:	d50c      	bpl.n	8006d36 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d1c:	f06f 0208 	mvn.w	r2, #8
 8006d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d22:	2204      	movs	r2, #4
 8006d24:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d26:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006d28:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d2a:	0799      	lsls	r1, r3, #30
 8006d2c:	d05a      	beq.n	8006de4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2e:	f7ff ffc1 	bl	8006cb4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d32:	2300      	movs	r3, #0
 8006d34:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	691a      	ldr	r2, [r3, #16]
 8006d3a:	06d2      	lsls	r2, r2, #27
 8006d3c:	d510      	bpl.n	8006d60 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	06d0      	lsls	r0, r2, #27
 8006d42:	d50d      	bpl.n	8006d60 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d44:	f06f 0210 	mvn.w	r2, #16
 8006d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d4a:	2208      	movs	r2, #8
 8006d4c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d4e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006d50:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d52:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006d56:	d04b      	beq.n	8006df0 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d58:	f7ff ffac 	bl	8006cb4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	691a      	ldr	r2, [r3, #16]
 8006d64:	07d1      	lsls	r1, r2, #31
 8006d66:	d508      	bpl.n	8006d7a <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	07d2      	lsls	r2, r2, #31
 8006d6c:	d505      	bpl.n	8006d7a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d6e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d74:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d76:	f7fb fefb 	bl	8002b70 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	691a      	ldr	r2, [r3, #16]
 8006d7e:	0610      	lsls	r0, r2, #24
 8006d80:	d508      	bpl.n	8006d94 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	0611      	lsls	r1, r2, #24
 8006d86:	d505      	bpl.n	8006d94 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8006d8c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d8e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006d90:	f000 fab9 	bl	8007306 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	691a      	ldr	r2, [r3, #16]
 8006d98:	0652      	lsls	r2, r2, #25
 8006d9a:	d508      	bpl.n	8006dae <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	0650      	lsls	r0, r2, #25
 8006da0:	d505      	bpl.n	8006dae <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006da2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8006da6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006da8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006daa:	f7ff ff85 	bl	8006cb8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	691a      	ldr	r2, [r3, #16]
 8006db2:	0691      	lsls	r1, r2, #26
 8006db4:	d522      	bpl.n	8006dfc <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	0692      	lsls	r2, r2, #26
 8006dba:	d51f      	bpl.n	8006dfc <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dbc:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006dc0:	4620      	mov	r0, r4
}
 8006dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dc6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006dc8:	f000 ba9c 	b.w	8007304 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dcc:	f7ff ff71 	bl	8006cb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f7ff ff70 	bl	8006cb6 <HAL_TIM_PWM_PulseFinishedCallback>
 8006dd6:	e783      	b.n	8006ce0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd8:	f7ff ff6b 	bl	8006cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f7ff ff6a 	bl	8006cb6 <HAL_TIM_PWM_PulseFinishedCallback>
 8006de2:	e792      	b.n	8006d0a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de4:	f7ff ff65 	bl	8006cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de8:	4620      	mov	r0, r4
 8006dea:	f7ff ff64 	bl	8006cb6 <HAL_TIM_PWM_PulseFinishedCallback>
 8006dee:	e7a0      	b.n	8006d32 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df0:	f7ff ff5f 	bl	8006cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df4:	4620      	mov	r0, r4
 8006df6:	f7ff ff5e 	bl	8006cb6 <HAL_TIM_PWM_PulseFinishedCallback>
 8006dfa:	e7af      	b.n	8006d5c <HAL_TIM_IRQHandler+0xa2>
}
 8006dfc:	bd10      	pop	{r4, pc}
	...

08006e00 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e00:	4a1a      	ldr	r2, [pc, #104]	; (8006e6c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8006e02:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e04:	4290      	cmp	r0, r2
 8006e06:	d00a      	beq.n	8006e1e <TIM_Base_SetConfig+0x1e>
 8006e08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006e0c:	d007      	beq.n	8006e1e <TIM_Base_SetConfig+0x1e>
 8006e0e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006e12:	4290      	cmp	r0, r2
 8006e14:	d003      	beq.n	8006e1e <TIM_Base_SetConfig+0x1e>
 8006e16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e1a:	4290      	cmp	r0, r2
 8006e1c:	d115      	bne.n	8006e4a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8006e1e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006e24:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e26:	4a11      	ldr	r2, [pc, #68]	; (8006e6c <TIM_Base_SetConfig+0x6c>)
 8006e28:	4290      	cmp	r0, r2
 8006e2a:	d00a      	beq.n	8006e42 <TIM_Base_SetConfig+0x42>
 8006e2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006e30:	d007      	beq.n	8006e42 <TIM_Base_SetConfig+0x42>
 8006e32:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006e36:	4290      	cmp	r0, r2
 8006e38:	d003      	beq.n	8006e42 <TIM_Base_SetConfig+0x42>
 8006e3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e3e:	4290      	cmp	r0, r2
 8006e40:	d103      	bne.n	8006e4a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e42:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e48:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e4a:	694a      	ldr	r2, [r1, #20]
 8006e4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e50:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006e52:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e54:	688b      	ldr	r3, [r1, #8]
 8006e56:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e58:	680b      	ldr	r3, [r1, #0]
 8006e5a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e5c:	4b03      	ldr	r3, [pc, #12]	; (8006e6c <TIM_Base_SetConfig+0x6c>)
 8006e5e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8006e60:	bf04      	itt	eq
 8006e62:	690b      	ldreq	r3, [r1, #16]
 8006e64:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006e66:	2301      	movs	r3, #1
 8006e68:	6143      	str	r3, [r0, #20]
}
 8006e6a:	4770      	bx	lr
 8006e6c:	40012c00 	.word	0x40012c00

08006e70 <HAL_TIM_Base_Init>:
{
 8006e70:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006e72:	4604      	mov	r4, r0
 8006e74:	b330      	cbz	r0, 8006ec4 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006e76:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006e7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e7e:	b91b      	cbnz	r3, 8006e88 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006e80:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006e84:	f7fc f962 	bl	800314c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006e88:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e8a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006e8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e90:	1d21      	adds	r1, r4, #4
 8006e92:	f7ff ffb5 	bl	8006e00 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e96:	2301      	movs	r3, #1
  return HAL_OK;
 8006e98:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e9a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006ea2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006ea6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006eaa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eb6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006eba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006ebe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006ec2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	e7fc      	b.n	8006ec2 <HAL_TIM_Base_Init+0x52>

08006ec8 <HAL_TIM_PWM_Init>:
{
 8006ec8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006eca:	4604      	mov	r4, r0
 8006ecc:	b330      	cbz	r0, 8006f1c <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006ece:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006ed2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006ed6:	b91b      	cbnz	r3, 8006ee0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006ed8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006edc:	f7ff fee8 	bl	8006cb0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee8:	1d21      	adds	r1, r4, #4
 8006eea:	f7ff ff89 	bl	8006e00 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eee:	2301      	movs	r3, #1
  return HAL_OK;
 8006ef0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006efa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006efe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006f02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006f12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006f16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006f1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	e7fc      	b.n	8006f1a <HAL_TIM_PWM_Init+0x52>

08006f20 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8006f20:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f22:	6a02      	ldr	r2, [r0, #32]
{
 8006f24:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f26:	f022 0210 	bic.w	r2, r2, #16
 8006f2a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006f2c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006f2e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f30:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f32:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f36:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f3a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006f3c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f40:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f44:	4d0b      	ldr	r5, [pc, #44]	; (8006f74 <TIM_OC2_SetConfig+0x54>)
 8006f46:	42a8      	cmp	r0, r5
 8006f48:	d10d      	bne.n	8006f66 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f4a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f50:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f54:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f58:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006f5c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f62:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8006f66:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006f68:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006f6a:	684a      	ldr	r2, [r1, #4]
 8006f6c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006f6e:	6203      	str	r3, [r0, #32]
}
 8006f70:	bd70      	pop	{r4, r5, r6, pc}
 8006f72:	bf00      	nop
 8006f74:	40012c00 	.word	0x40012c00

08006f78 <HAL_TIM_PWM_ConfigChannel>:
{
 8006f78:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8006f7a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8006f7e:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d050      	beq.n	8007026 <HAL_TIM_PWM_ConfigChannel+0xae>
 8006f84:	2301      	movs	r3, #1
  switch (Channel)
 8006f86:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8006f88:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006f8c:	d03b      	beq.n	8007006 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8006f8e:	d807      	bhi.n	8006fa0 <HAL_TIM_PWM_ConfigChannel+0x28>
 8006f90:	b1c2      	cbz	r2, 8006fc4 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8006f92:	2a04      	cmp	r2, #4
 8006f94:	d027      	beq.n	8006fe6 <HAL_TIM_PWM_ConfigChannel+0x6e>
 8006f96:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8006fa0:	2a0c      	cmp	r2, #12
 8006fa2:	d1f8      	bne.n	8006f96 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fa4:	6800      	ldr	r0, [r0, #0]
 8006fa6:	f7ff fe37 	bl	8006c18 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006faa:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fac:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006fb2:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fb4:	69c3      	ldr	r3, [r0, #28]
 8006fb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fba:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fbc:	69c3      	ldr	r3, [r0, #28]
 8006fbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006fc2:	e02e      	b.n	8007022 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fc4:	6800      	ldr	r0, [r0, #0]
 8006fc6:	f7ff fdd5 	bl	8006b74 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fca:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fcc:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fce:	f043 0308 	orr.w	r3, r3, #8
 8006fd2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fd4:	6983      	ldr	r3, [r0, #24]
 8006fd6:	f023 0304 	bic.w	r3, r3, #4
 8006fda:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fdc:	6983      	ldr	r3, [r0, #24]
 8006fde:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fe0:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006fe2:	2000      	movs	r0, #0
      break;
 8006fe4:	e7d8      	b.n	8006f98 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fe6:	6800      	ldr	r0, [r0, #0]
 8006fe8:	f7ff ff9a 	bl	8006f20 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fec:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fee:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ff0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ff4:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ff6:	6983      	ldr	r3, [r0, #24]
 8006ff8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ffc:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ffe:	6983      	ldr	r3, [r0, #24]
 8007000:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007004:	e7ec      	b.n	8006fe0 <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007006:	6800      	ldr	r0, [r0, #0]
 8007008:	f7ff fddc 	bl	8006bc4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800700c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800700e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007010:	f043 0308 	orr.w	r3, r3, #8
 8007014:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007016:	69c3      	ldr	r3, [r0, #28]
 8007018:	f023 0304 	bic.w	r3, r3, #4
 800701c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800701e:	69c3      	ldr	r3, [r0, #28]
 8007020:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007022:	61c3      	str	r3, [r0, #28]
 8007024:	e7dd      	b.n	8006fe2 <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 8007026:	2002      	movs	r0, #2
 8007028:	e7b9      	b.n	8006f9e <HAL_TIM_PWM_ConfigChannel+0x26>

0800702a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800702a:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800702c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800702e:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007030:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007034:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007038:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800703a:	6082      	str	r2, [r0, #8]
}
 800703c:	bd10      	pop	{r4, pc}

0800703e <HAL_TIM_ConfigClockSource>:
{
 800703e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007040:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007044:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007046:	2b01      	cmp	r3, #1
 8007048:	f04f 0002 	mov.w	r0, #2
 800704c:	f000 808e 	beq.w	800716c <HAL_TIM_ConfigClockSource+0x12e>
 8007050:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007052:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007056:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8007058:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800705c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800705e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007062:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007066:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8007068:	680b      	ldr	r3, [r1, #0]
 800706a:	2b60      	cmp	r3, #96	; 0x60
 800706c:	d04f      	beq.n	800710e <HAL_TIM_ConfigClockSource+0xd0>
 800706e:	d832      	bhi.n	80070d6 <HAL_TIM_ConfigClockSource+0x98>
 8007070:	2b40      	cmp	r3, #64	; 0x40
 8007072:	d064      	beq.n	800713e <HAL_TIM_ConfigClockSource+0x100>
 8007074:	d816      	bhi.n	80070a4 <HAL_TIM_ConfigClockSource+0x66>
 8007076:	2b20      	cmp	r3, #32
 8007078:	d00d      	beq.n	8007096 <HAL_TIM_ConfigClockSource+0x58>
 800707a:	d80a      	bhi.n	8007092 <HAL_TIM_ConfigClockSource+0x54>
 800707c:	f033 0110 	bics.w	r1, r3, #16
 8007080:	d009      	beq.n	8007096 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8007082:	2301      	movs	r3, #1
 8007084:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007088:	2300      	movs	r3, #0
 800708a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800708e:	4610      	mov	r0, r2
 8007090:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8007092:	2b30      	cmp	r3, #48	; 0x30
 8007094:	d1f5      	bne.n	8007082 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8007096:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007098:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800709c:	4313      	orrs	r3, r2
 800709e:	f043 0307 	orr.w	r3, r3, #7
 80070a2:	e028      	b.n	80070f6 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 80070a4:	2b50      	cmp	r3, #80	; 0x50
 80070a6:	d1ec      	bne.n	8007082 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 80070a8:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80070aa:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80070ac:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ae:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070b0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070b4:	f023 0301 	bic.w	r3, r3, #1
 80070b8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ba:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80070bc:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070c2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80070c6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80070c8:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80070ca:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80070cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070d0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80070d4:	e00f      	b.n	80070f6 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 80070d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070da:	d00d      	beq.n	80070f8 <HAL_TIM_ConfigClockSource+0xba>
 80070dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070e0:	d00c      	beq.n	80070fc <HAL_TIM_ConfigClockSource+0xbe>
 80070e2:	2b70      	cmp	r3, #112	; 0x70
 80070e4:	d1cd      	bne.n	8007082 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80070e6:	68cb      	ldr	r3, [r1, #12]
 80070e8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80070ec:	f7ff ff9d 	bl	800702a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80070f0:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 80070f6:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80070f8:	2200      	movs	r2, #0
 80070fa:	e7c2      	b.n	8007082 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80070fc:	68cb      	ldr	r3, [r1, #12]
 80070fe:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007102:	f7ff ff92 	bl	800702a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007106:	6883      	ldr	r3, [r0, #8]
 8007108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800710c:	e7f3      	b.n	80070f6 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 800710e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007110:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8007112:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007114:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8007118:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800711a:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800711c:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800711e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007122:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8007126:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800712a:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800712e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007130:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007132:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007138:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800713c:	e7db      	b.n	80070f6 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 800713e:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007140:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007142:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007144:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007146:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800714a:	f023 0301 	bic.w	r3, r3, #1
 800714e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007150:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8007152:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007154:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007158:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800715c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800715e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007160:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007166:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800716a:	e7c4      	b.n	80070f6 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 800716c:	4602      	mov	r2, r0
 800716e:	e78e      	b.n	800708e <HAL_TIM_ConfigClockSource+0x50>

08007170 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007170:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007172:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007174:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007176:	f001 011f 	and.w	r1, r1, #31
 800717a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800717c:	ea23 0304 	bic.w	r3, r3, r4
 8007180:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007182:	6a03      	ldr	r3, [r0, #32]
 8007184:	408a      	lsls	r2, r1
 8007186:	431a      	orrs	r2, r3
 8007188:	6202      	str	r2, [r0, #32]
}
 800718a:	bd10      	pop	{r4, pc}

0800718c <HAL_TIM_OC_Start>:
{
 800718c:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800718e:	b929      	cbnz	r1, 800719c <HAL_TIM_OC_Start+0x10>
 8007190:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007194:	2b01      	cmp	r3, #1
 8007196:	d021      	beq.n	80071dc <HAL_TIM_OC_Start+0x50>
    return HAL_ERROR;
 8007198:	2001      	movs	r0, #1
}
 800719a:	bd08      	pop	{r3, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800719c:	2904      	cmp	r1, #4
 800719e:	d107      	bne.n	80071b0 <HAL_TIM_OC_Start+0x24>
 80071a0:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d1f7      	bne.n	8007198 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071a8:	2302      	movs	r3, #2
 80071aa:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80071ae:	e018      	b.n	80071e2 <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071b0:	2908      	cmp	r1, #8
 80071b2:	d107      	bne.n	80071c4 <HAL_TIM_OC_Start+0x38>
 80071b4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d1ed      	bne.n	8007198 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071bc:	2302      	movs	r3, #2
 80071be:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80071c2:	e00e      	b.n	80071e2 <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071c4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d1e5      	bne.n	8007198 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071cc:	2904      	cmp	r1, #4
 80071ce:	d0eb      	beq.n	80071a8 <HAL_TIM_OC_Start+0x1c>
 80071d0:	2908      	cmp	r1, #8
 80071d2:	d0f3      	beq.n	80071bc <HAL_TIM_OC_Start+0x30>
 80071d4:	2302      	movs	r3, #2
 80071d6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80071da:	e002      	b.n	80071e2 <HAL_TIM_OC_Start+0x56>
 80071dc:	2302      	movs	r3, #2
 80071de:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071e2:	6800      	ldr	r0, [r0, #0]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f7ff ffc3 	bl	8007170 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071ea:	4b0e      	ldr	r3, [pc, #56]	; (8007224 <HAL_TIM_OC_Start+0x98>)
 80071ec:	4298      	cmp	r0, r3
 80071ee:	d10a      	bne.n	8007206 <HAL_TIM_OC_Start+0x7a>
    __HAL_TIM_MOE_ENABLE(htim);
 80071f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80071f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071f6:	6443      	str	r3, [r0, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071f8:	6883      	ldr	r3, [r0, #8]
 80071fa:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071fe:	2b06      	cmp	r3, #6
 8007200:	d10b      	bne.n	800721a <HAL_TIM_OC_Start+0x8e>
  return HAL_OK;
 8007202:	2000      	movs	r0, #0
 8007204:	e7c9      	b.n	800719a <HAL_TIM_OC_Start+0xe>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007206:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800720a:	d0f5      	beq.n	80071f8 <HAL_TIM_OC_Start+0x6c>
 800720c:	4b06      	ldr	r3, [pc, #24]	; (8007228 <HAL_TIM_OC_Start+0x9c>)
 800720e:	4298      	cmp	r0, r3
 8007210:	d0f2      	beq.n	80071f8 <HAL_TIM_OC_Start+0x6c>
 8007212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007216:	4298      	cmp	r0, r3
 8007218:	d0ee      	beq.n	80071f8 <HAL_TIM_OC_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 800721a:	6803      	ldr	r3, [r0, #0]
 800721c:	f043 0301 	orr.w	r3, r3, #1
 8007220:	6003      	str	r3, [r0, #0]
 8007222:	e7ee      	b.n	8007202 <HAL_TIM_OC_Start+0x76>
 8007224:	40012c00 	.word	0x40012c00
 8007228:	40000400 	.word	0x40000400

0800722c <HAL_TIM_PWM_Start>:
 800722c:	f7ff bfae 	b.w	800718c <HAL_TIM_OC_Start>

08007230 <HAL_TIM_OC_Stop>:
{
 8007230:	b538      	push	{r3, r4, r5, lr}
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007232:	2200      	movs	r2, #0
{
 8007234:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007236:	6800      	ldr	r0, [r0, #0]
{
 8007238:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800723a:	f7ff ff99 	bl	8007170 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800723e:	4b18      	ldr	r3, [pc, #96]	; (80072a0 <HAL_TIM_OC_Stop+0x70>)
 8007240:	4298      	cmp	r0, r3
 8007242:	d10d      	bne.n	8007260 <HAL_TIM_OC_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 8007244:	f241 1311 	movw	r3, #4369	; 0x1111
 8007248:	6a02      	ldr	r2, [r0, #32]
 800724a:	421a      	tst	r2, r3
 800724c:	d108      	bne.n	8007260 <HAL_TIM_OC_Stop+0x30>
 800724e:	f240 4344 	movw	r3, #1092	; 0x444
 8007252:	6a02      	ldr	r2, [r0, #32]
 8007254:	421a      	tst	r2, r3
 8007256:	bf02      	ittt	eq
 8007258:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 800725a:	f423 4300 	biceq.w	r3, r3, #32768	; 0x8000
 800725e:	6443      	streq	r3, [r0, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8007260:	f241 1311 	movw	r3, #4369	; 0x1111
 8007264:	6a02      	ldr	r2, [r0, #32]
 8007266:	421a      	tst	r2, r3
 8007268:	d108      	bne.n	800727c <HAL_TIM_OC_Stop+0x4c>
 800726a:	f240 4344 	movw	r3, #1092	; 0x444
 800726e:	6a02      	ldr	r2, [r0, #32]
 8007270:	421a      	tst	r2, r3
 8007272:	bf02      	ittt	eq
 8007274:	6803      	ldreq	r3, [r0, #0]
 8007276:	f023 0301 	biceq.w	r3, r3, #1
 800727a:	6003      	streq	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800727c:	2301      	movs	r3, #1
 800727e:	b91d      	cbnz	r5, 8007288 <HAL_TIM_OC_Stop+0x58>
 8007280:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8007284:	2000      	movs	r0, #0
 8007286:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007288:	2d04      	cmp	r5, #4
 800728a:	d102      	bne.n	8007292 <HAL_TIM_OC_Stop+0x62>
 800728c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007290:	e7f8      	b.n	8007284 <HAL_TIM_OC_Stop+0x54>
 8007292:	2d08      	cmp	r5, #8
 8007294:	bf0c      	ite	eq
 8007296:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 800729a:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 800729e:	e7f1      	b.n	8007284 <HAL_TIM_OC_Stop+0x54>
 80072a0:	40012c00 	.word	0x40012c00

080072a4 <HAL_TIM_PWM_Stop>:
 80072a4:	f7ff bfc4 	b.w	8007230 <HAL_TIM_OC_Stop>

080072a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072a8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072aa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80072ae:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	f04f 0002 	mov.w	r0, #2
 80072b6:	d022      	beq.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072b8:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80072ba:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80072be:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072c0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80072c2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072c6:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80072c8:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072ca:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072cc:	4c0c      	ldr	r4, [pc, #48]	; (8007300 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80072ce:	42a3      	cmp	r3, r4
 80072d0:	d00a      	beq.n	80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80072d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d6:	d007      	beq.n	80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80072d8:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80072dc:	42a3      	cmp	r3, r4
 80072de:	d003      	beq.n	80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80072e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	d104      	bne.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072e8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072ea:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ee:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072f0:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072f2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80072f4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80072f6:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80072fa:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 80072fe:	bd30      	pop	{r4, r5, pc}
 8007300:	40012c00 	.word	0x40012c00

08007304 <HAL_TIMEx_CommutCallback>:
 8007304:	4770      	bx	lr

08007306 <HAL_TIMEx_BreakCallback>:
 8007306:	4770      	bx	lr

08007308 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007308:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	f102 030c 	add.w	r3, r2, #12
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	320c      	adds	r2, #12
 8007318:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800731c:	6802      	ldr	r2, [r0, #0]
 800731e:	2900      	cmp	r1, #0
 8007320:	d1f2      	bne.n	8007308 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	f102 0314 	add.w	r3, r2, #20
 8007326:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732e:	f102 0c14 	add.w	ip, r2, #20
 8007332:	e84c 3100 	strex	r1, r3, [ip]
 8007336:	2900      	cmp	r1, #0
 8007338:	d1f3      	bne.n	8007322 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800733a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800733c:	2b01      	cmp	r3, #1
 800733e:	d10b      	bne.n	8007358 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	f102 030c 	add.w	r3, r2, #12
 8007344:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007348:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734c:	f102 0c0c 	add.w	ip, r2, #12
 8007350:	e84c 3100 	strex	r1, r3, [ip]
 8007354:	2900      	cmp	r1, #0
 8007356:	d1f3      	bne.n	8007340 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007358:	2320      	movs	r3, #32
 800735a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735e:	2300      	movs	r3, #0
 8007360:	6303      	str	r3, [r0, #48]	; 0x30
}
 8007362:	4770      	bx	lr

08007364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007364:	b510      	push	{r4, lr}
 8007366:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007368:	6803      	ldr	r3, [r0, #0]
 800736a:	68c1      	ldr	r1, [r0, #12]
 800736c:	691a      	ldr	r2, [r3, #16]
 800736e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007372:	430a      	orrs	r2, r1
 8007374:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007376:	6882      	ldr	r2, [r0, #8]
 8007378:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800737a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800737c:	4302      	orrs	r2, r0
 800737e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8007380:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8007384:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007388:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800738a:	430a      	orrs	r2, r1
 800738c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800738e:	695a      	ldr	r2, [r3, #20]
 8007390:	69a1      	ldr	r1, [r4, #24]
 8007392:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007396:	430a      	orrs	r2, r1
 8007398:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800739a:	4a0e      	ldr	r2, [pc, #56]	; (80073d4 <UART_SetConfig+0x70>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d115      	bne.n	80073cc <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80073a0:	f7ff f92e 	bl	8006600 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073a4:	2319      	movs	r3, #25
 80073a6:	4343      	muls	r3, r0
 80073a8:	6862      	ldr	r2, [r4, #4]
 80073aa:	6820      	ldr	r0, [r4, #0]
 80073ac:	0092      	lsls	r2, r2, #2
 80073ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80073b2:	2264      	movs	r2, #100	; 0x64
 80073b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80073b8:	fb02 3311 	mls	r3, r2, r1, r3
 80073bc:	011b      	lsls	r3, r3, #4
 80073be:	3332      	adds	r3, #50	; 0x32
 80073c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80073c4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80073c8:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80073ca:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80073cc:	f7ff f908 	bl	80065e0 <HAL_RCC_GetPCLK1Freq>
 80073d0:	e7e8      	b.n	80073a4 <UART_SetConfig+0x40>
 80073d2:	bf00      	nop
 80073d4:	40013800 	.word	0x40013800

080073d8 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	4604      	mov	r4, r0
 80073dc:	460e      	mov	r6, r1
 80073de:	4617      	mov	r7, r2
 80073e0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e2:	6822      	ldr	r2, [r4, #0]
 80073e4:	6813      	ldr	r3, [r2, #0]
 80073e6:	ea36 0303 	bics.w	r3, r6, r3
 80073ea:	d101      	bne.n	80073f0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80073ec:	2000      	movs	r0, #0
 80073ee:	e028      	b.n	8007442 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80073f0:	1c6b      	adds	r3, r5, #1
 80073f2:	d0f7      	beq.n	80073e4 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073f4:	b125      	cbz	r5, 8007400 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 80073f6:	f7fd fbe1 	bl	8004bbc <HAL_GetTick>
 80073fa:	1bc0      	subs	r0, r0, r7
 80073fc:	4285      	cmp	r5, r0
 80073fe:	d2f0      	bcs.n	80073e2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007400:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	f102 030c 	add.w	r3, r2, #12
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	320c      	adds	r2, #12
 8007410:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8007414:	6821      	ldr	r1, [r4, #0]
 8007416:	2800      	cmp	r0, #0
 8007418:	d1f2      	bne.n	8007400 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741a:	f101 0314 	add.w	r3, r1, #20
 800741e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007422:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	f101 0014 	add.w	r0, r1, #20
 800742a:	e840 3200 	strex	r2, r3, [r0]
 800742e:	2a00      	cmp	r2, #0
 8007430:	d1f3      	bne.n	800741a <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8007432:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8007434:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8007436:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 800743a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 800743e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8007442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007444 <HAL_UART_Init>:
{
 8007444:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007446:	4604      	mov	r4, r0
 8007448:	b348      	cbz	r0, 800749e <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800744a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800744e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007452:	b91b      	cbnz	r3, 800745c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8007454:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8007458:	f7fb fefa 	bl	8003250 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800745c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800745e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007460:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8007464:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8007466:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8007468:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800746c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800746e:	f7ff ff79 	bl	8007364 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007472:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007474:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800747c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800747e:	695a      	ldr	r2, [r3, #20]
 8007480:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007484:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8007486:	68da      	ldr	r2, [r3, #12]
 8007488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800748c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800748e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007490:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007492:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007496:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800749a:	6360      	str	r0, [r4, #52]	; 0x34
}
 800749c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800749e:	2001      	movs	r0, #1
 80074a0:	e7fc      	b.n	800749c <HAL_UART_Init+0x58>

080074a2 <HAL_UART_DeInit>:
{
 80074a2:	b510      	push	{r4, lr}
  if (huart == NULL)
 80074a4:	4604      	mov	r4, r0
 80074a6:	b1a0      	cbz	r0, 80074d2 <HAL_UART_DeInit+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 80074a8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80074aa:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80074ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80074b0:	68d3      	ldr	r3, [r2, #12]
 80074b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074b6:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 80074b8:	f7fb ff6e 	bl	8003398 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074bc:	2000      	movs	r0, #0
 80074be:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(huart);
 80074c0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80074c4:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80074c8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074cc:	6320      	str	r0, [r4, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074ce:	6360      	str	r0, [r4, #52]	; 0x34
}
 80074d0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80074d2:	2001      	movs	r0, #1
 80074d4:	e7fc      	b.n	80074d0 <HAL_UART_DeInit+0x2e>

080074d6 <HAL_UART_Transmit>:
{
 80074d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074da:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80074dc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80074e0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80074e2:	2b20      	cmp	r3, #32
{
 80074e4:	460e      	mov	r6, r1
 80074e6:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80074e8:	d13c      	bne.n	8007564 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 80074ea:	2900      	cmp	r1, #0
 80074ec:	d03c      	beq.n	8007568 <HAL_UART_Transmit+0x92>
 80074ee:	2a00      	cmp	r2, #0
 80074f0:	d03a      	beq.n	8007568 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074f2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f4:	2500      	movs	r5, #0
 80074f6:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074f8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 80074fc:	f7fd fb5e 	bl	8004bbc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007500:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8007502:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8007508:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800750a:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800750c:	d103      	bne.n	8007516 <HAL_UART_Transmit+0x40>
 800750e:	6923      	ldr	r3, [r4, #16]
 8007510:	b90b      	cbnz	r3, 8007516 <HAL_UART_Transmit+0x40>
 8007512:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8007514:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8007516:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007518:	b29b      	uxth	r3, r3
 800751a:	b953      	cbnz	r3, 8007532 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800751c:	464b      	mov	r3, r9
 800751e:	4642      	mov	r2, r8
 8007520:	2140      	movs	r1, #64	; 0x40
 8007522:	4620      	mov	r0, r4
 8007524:	f7ff ff58 	bl	80073d8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8007528:	b950      	cbnz	r0, 8007540 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 800752a:	2320      	movs	r3, #32
 800752c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8007530:	e007      	b.n	8007542 <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007532:	464b      	mov	r3, r9
 8007534:	4642      	mov	r2, r8
 8007536:	2180      	movs	r1, #128	; 0x80
 8007538:	4620      	mov	r0, r4
 800753a:	f7ff ff4d 	bl	80073d8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800753e:	b110      	cbz	r0, 8007546 <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8007540:	2003      	movs	r0, #3
}
 8007542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007546:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8007548:	b94e      	cbnz	r6, 800755e <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800754a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800754e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007552:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8007554:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8007556:	3901      	subs	r1, #1
 8007558:	b289      	uxth	r1, r1
 800755a:	84e1      	strh	r1, [r4, #38]	; 0x26
 800755c:	e7db      	b.n	8007516 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800755e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8007562:	e7f6      	b.n	8007552 <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8007564:	2002      	movs	r0, #2
 8007566:	e7ec      	b.n	8007542 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8007568:	2001      	movs	r0, #1
 800756a:	e7ea      	b.n	8007542 <HAL_UART_Transmit+0x6c>

0800756c <HAL_UART_TxCpltCallback>:
 800756c:	4770      	bx	lr

0800756e <HAL_UART_RxCpltCallback>:
 800756e:	4770      	bx	lr

08007570 <HAL_UART_RxHalfCpltCallback>:
 8007570:	4770      	bx	lr

08007572 <HAL_UART_ErrorCallback>:
 8007572:	4770      	bx	lr

08007574 <UART_DMAError>:
{
 8007574:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007576:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007578:	6803      	ldr	r3, [r0, #0]
 800757a:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800757c:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8007580:	2921      	cmp	r1, #33	; 0x21
 8007582:	d112      	bne.n	80075aa <UART_DMAError+0x36>
 8007584:	0612      	lsls	r2, r2, #24
 8007586:	d510      	bpl.n	80075aa <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 8007588:	2200      	movs	r2, #0
 800758a:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758c:	f103 020c 	add.w	r2, r3, #12
 8007590:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007594:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	f103 0c0c 	add.w	ip, r3, #12
 800759c:	e84c 2100 	strex	r1, r2, [ip]
 80075a0:	2900      	cmp	r1, #0
 80075a2:	d1f3      	bne.n	800758c <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 80075a4:	2220      	movs	r2, #32
 80075a6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075aa:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80075ac:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 80075b0:	2a22      	cmp	r2, #34	; 0x22
 80075b2:	d105      	bne.n	80075c0 <UART_DMAError+0x4c>
 80075b4:	065b      	lsls	r3, r3, #25
 80075b6:	d503      	bpl.n	80075c0 <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80075bc:	f7ff fea4 	bl	8007308 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80075c0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80075c2:	f043 0310 	orr.w	r3, r3, #16
 80075c6:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_UART_ErrorCallback(huart);
 80075c8:	f7ff ffd3 	bl	8007572 <HAL_UART_ErrorCallback>
}
 80075cc:	bd08      	pop	{r3, pc}

080075ce <UART_DMAAbortOnError>:
{
 80075ce:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80075d0:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80075d4:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075d6:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80075d8:	f7ff ffcb 	bl	8007572 <HAL_UART_ErrorCallback>
}
 80075dc:	bd08      	pop	{r3, pc}

080075de <HAL_UART_AbortCpltCallback>:
 80075de:	4770      	bx	lr

080075e0 <HAL_UART_Abort_IT>:
{
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80075e4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e6:	f102 030c 	add.w	r3, r2, #12
 80075ea:	e853 3f00 	ldrex	r3, [r3]
 80075ee:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	320c      	adds	r2, #12
 80075f4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	2900      	cmp	r1, #0
 80075fc:	d1f2      	bne.n	80075e4 <HAL_UART_Abort_IT+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	f103 0214 	add.w	r2, r3, #20
 8007602:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007606:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	f103 0014 	add.w	r0, r3, #20
 800760e:	e840 2100 	strex	r1, r2, [r0]
 8007612:	2900      	cmp	r1, #0
 8007614:	d1f3      	bne.n	80075fe <HAL_UART_Abort_IT+0x1e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007616:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007618:	2a01      	cmp	r2, #1
 800761a:	d035      	beq.n	8007688 <HAL_UART_Abort_IT+0xa8>
  if (huart->hdmatx != NULL)
 800761c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800761e:	2800      	cmp	r0, #0
 8007620:	d13f      	bne.n	80076a2 <HAL_UART_Abort_IT+0xc2>
  if (huart->hdmarx != NULL)
 8007622:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007624:	b129      	cbz	r1, 8007632 <HAL_UART_Abort_IT+0x52>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007626:	695a      	ldr	r2, [r3, #20]
 8007628:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800762c:	bf18      	it	ne
 800762e:	4a2d      	ldrne	r2, [pc, #180]	; (80076e4 <HAL_UART_Abort_IT+0x104>)
      huart->hdmarx->XferAbortCallback = NULL;
 8007630:	634a      	str	r2, [r1, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007632:	695a      	ldr	r2, [r3, #20]
 8007634:	0612      	lsls	r2, r2, #24
 8007636:	d43b      	bmi.n	80076b0 <HAL_UART_Abort_IT+0xd0>
  uint32_t AbortCplt = 0x01U;
 8007638:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763a:	6822      	ldr	r2, [r4, #0]
 800763c:	6953      	ldr	r3, [r2, #20]
 800763e:	065b      	lsls	r3, r3, #25
 8007640:	d54b      	bpl.n	80076da <HAL_UART_Abort_IT+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007642:	f102 0314 	add.w	r3, r2, #20
 8007646:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800764a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	f102 0114 	add.w	r1, r2, #20
 8007652:	e841 3600 	strex	r6, r3, [r1]
 8007656:	2e00      	cmp	r6, #0
 8007658:	d1f3      	bne.n	8007642 <HAL_UART_Abort_IT+0x62>
    if (huart->hdmarx != NULL)
 800765a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800765c:	2800      	cmp	r0, #0
 800765e:	d03c      	beq.n	80076da <HAL_UART_Abort_IT+0xfa>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007660:	f7fd fe08 	bl	8005274 <HAL_DMA_Abort_IT>
 8007664:	2800      	cmp	r0, #0
 8007666:	d03a      	beq.n	80076de <HAL_UART_Abort_IT+0xfe>
        huart->hdmarx->XferAbortCallback = NULL;
 8007668:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800766a:	635e      	str	r6, [r3, #52]	; 0x34
    huart->TxXferCount = 0x00U;
 800766c:	2300      	movs	r3, #0
    huart->gState  = HAL_UART_STATE_READY;
 800766e:	2220      	movs	r2, #32
    huart->TxXferCount = 0x00U;
 8007670:	84e3      	strh	r3, [r4, #38]	; 0x26
    HAL_UART_AbortCpltCallback(huart);
 8007672:	4620      	mov	r0, r4
    huart->RxXferCount = 0x00U;
 8007674:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007676:	6463      	str	r3, [r4, #68]	; 0x44
    huart->gState  = HAL_UART_STATE_READY;
 8007678:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 800767c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007680:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_UART_AbortCpltCallback(huart);
 8007682:	f7ff ffac 	bl	80075de <HAL_UART_AbortCpltCallback>
 8007686:	e02a      	b.n	80076de <HAL_UART_Abort_IT+0xfe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	f103 020c 	add.w	r2, r3, #12
 800768c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007690:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	f103 000c 	add.w	r0, r3, #12
 8007698:	e840 2100 	strex	r1, r2, [r0]
 800769c:	2900      	cmp	r1, #0
 800769e:	d1f3      	bne.n	8007688 <HAL_UART_Abort_IT+0xa8>
 80076a0:	e7bc      	b.n	800761c <HAL_UART_Abort_IT+0x3c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80076a2:	695a      	ldr	r2, [r3, #20]
 80076a4:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80076a8:	bf18      	it	ne
 80076aa:	4a0f      	ldrne	r2, [pc, #60]	; (80076e8 <HAL_UART_Abort_IT+0x108>)
      huart->hdmatx->XferAbortCallback = NULL;
 80076ac:	6342      	str	r2, [r0, #52]	; 0x34
 80076ae:	e7b8      	b.n	8007622 <HAL_UART_Abort_IT+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b0:	f103 0214 	add.w	r2, r3, #20
 80076b4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	f103 0114 	add.w	r1, r3, #20
 80076c0:	e841 2500 	strex	r5, r2, [r1]
 80076c4:	2d00      	cmp	r5, #0
 80076c6:	d1f3      	bne.n	80076b0 <HAL_UART_Abort_IT+0xd0>
    if (huart->hdmatx != NULL)
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d0b5      	beq.n	8007638 <HAL_UART_Abort_IT+0x58>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80076cc:	f7fd fdd2 	bl	8005274 <HAL_DMA_Abort_IT>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d0b2      	beq.n	800763a <HAL_UART_Abort_IT+0x5a>
        huart->hdmatx->XferAbortCallback = NULL;
 80076d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80076d6:	635d      	str	r5, [r3, #52]	; 0x34
 80076d8:	e7ae      	b.n	8007638 <HAL_UART_Abort_IT+0x58>
  if (AbortCplt == 0x01U)
 80076da:	2d01      	cmp	r5, #1
 80076dc:	d0c6      	beq.n	800766c <HAL_UART_Abort_IT+0x8c>
}
 80076de:	2000      	movs	r0, #0
 80076e0:	bd70      	pop	{r4, r5, r6, pc}
 80076e2:	bf00      	nop
 80076e4:	080076ed 	.word	0x080076ed
 80076e8:	08007717 	.word	0x08007717

080076ec <UART_DMARxAbortCallback>:
{
 80076ec:	b508      	push	{r3, lr}
  huart->hdmarx->XferAbortCallback = NULL;
 80076ee:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmarx->XferAbortCallback = NULL;
 80076f2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80076f4:	6353      	str	r3, [r2, #52]	; 0x34
  if (huart->hdmatx != NULL)
 80076f6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80076f8:	b10a      	cbz	r2, 80076fe <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 80076fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80076fc:	b952      	cbnz	r2, 8007714 <UART_DMARxAbortCallback+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 80076fe:	2220      	movs	r2, #32
  huart->TxXferCount = 0x00U;
 8007700:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8007702:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007704:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 8007706:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800770a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770e:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 8007710:	f7ff ff65 	bl	80075de <HAL_UART_AbortCpltCallback>
}
 8007714:	bd08      	pop	{r3, pc}

08007716 <UART_DMATxAbortCallback>:
{
 8007716:	b508      	push	{r3, lr}
  huart->hdmatx->XferAbortCallback = NULL;
 8007718:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800771a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmatx->XferAbortCallback = NULL;
 800771c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800771e:	6353      	str	r3, [r2, #52]	; 0x34
  if (huart->hdmarx != NULL)
 8007720:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007722:	b10a      	cbz	r2, 8007728 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8007724:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007726:	b952      	cbnz	r2, 800773e <UART_DMATxAbortCallback+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 8007728:	2220      	movs	r2, #32
  huart->TxXferCount = 0x00U;
 800772a:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800772c:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772e:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 8007730:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007734:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007738:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 800773a:	f7ff ff50 	bl	80075de <HAL_UART_AbortCpltCallback>
}
 800773e:	bd08      	pop	{r3, pc}

08007740 <HAL_UARTEx_RxEventCallback>:
}
 8007740:	4770      	bx	lr

08007742 <UART_DMARxHalfCplt>:
{
 8007742:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007744:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007746:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007748:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800774a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800774c:	2b01      	cmp	r3, #1
 800774e:	d104      	bne.n	800775a <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007750:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007752:	0849      	lsrs	r1, r1, #1
 8007754:	f7ff fff4 	bl	8007740 <HAL_UARTEx_RxEventCallback>
}
 8007758:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800775a:	f7ff ff09 	bl	8007570 <HAL_UART_RxHalfCpltCallback>
}
 800775e:	e7fb      	b.n	8007758 <UART_DMARxHalfCplt+0x16>

08007760 <UART_DMAReceiveCplt>:
{
 8007760:	b508      	push	{r3, lr}
 8007762:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007764:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007766:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f013 0320 	ands.w	r3, r3, #32
 800776e:	d137      	bne.n	80077e0 <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 8007770:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007772:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	f102 030c 	add.w	r3, r2, #12
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	320c      	adds	r2, #12
 8007782:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007786:	6803      	ldr	r3, [r0, #0]
 8007788:	2900      	cmp	r1, #0
 800778a:	d1f2      	bne.n	8007772 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778c:	f103 0214 	add.w	r2, r3, #20
 8007790:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007794:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007798:	f103 0c14 	add.w	ip, r3, #20
 800779c:	e84c 2100 	strex	r1, r2, [ip]
 80077a0:	2900      	cmp	r1, #0
 80077a2:	d1f3      	bne.n	800778c <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	f103 0214 	add.w	r2, r3, #20
 80077a8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b0:	f103 0c14 	add.w	ip, r3, #20
 80077b4:	e84c 2100 	strex	r1, r2, [ip]
 80077b8:	2900      	cmp	r1, #0
 80077ba:	d1f3      	bne.n	80077a4 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 80077bc:	2220      	movs	r2, #32
 80077be:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80077c4:	2a01      	cmp	r2, #1
 80077c6:	d10b      	bne.n	80077e0 <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	f103 020c 	add.w	r2, r3, #12
 80077cc:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	f103 0c0c 	add.w	ip, r3, #12
 80077d8:	e84c 2100 	strex	r1, r2, [ip]
 80077dc:	2900      	cmp	r1, #0
 80077de:	d1f3      	bne.n	80077c8 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077e0:	2300      	movs	r3, #0
 80077e2:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d103      	bne.n	80077f2 <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ea:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80077ec:	f7ff ffa8 	bl	8007740 <HAL_UARTEx_RxEventCallback>
}
 80077f0:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 80077f2:	f7ff febc 	bl	800756e <HAL_UART_RxCpltCallback>
}
 80077f6:	e7fb      	b.n	80077f0 <UART_DMAReceiveCplt+0x90>

080077f8 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077f8:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80077fc:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077fe:	2b22      	cmp	r3, #34	; 0x22
 8007800:	d142      	bne.n	8007888 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007802:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007804:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007806:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800780a:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800780c:	d13f      	bne.n	800788e <UART_Receive_IT.isra.0+0x96>
 800780e:	6901      	ldr	r1, [r0, #16]
 8007810:	2900      	cmp	r1, #0
 8007812:	d13f      	bne.n	8007894 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007814:	6852      	ldr	r2, [r2, #4]
 8007816:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800781a:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800781e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8007820:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8007822:	3b01      	subs	r3, #1
 8007824:	b29b      	uxth	r3, r3
 8007826:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8007828:	2b00      	cmp	r3, #0
 800782a:	d12d      	bne.n	8007888 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800782c:	6802      	ldr	r2, [r0, #0]
 800782e:	68d1      	ldr	r1, [r2, #12]
 8007830:	f021 0120 	bic.w	r1, r1, #32
 8007834:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007836:	68d1      	ldr	r1, [r2, #12]
 8007838:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800783c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800783e:	6951      	ldr	r1, [r2, #20]
 8007840:	f021 0101 	bic.w	r1, r1, #1
 8007844:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007846:	2220      	movs	r2, #32
 8007848:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800784c:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800784e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007850:	2a01      	cmp	r2, #1
 8007852:	6802      	ldr	r2, [r0, #0]
 8007854:	d128      	bne.n	80078a8 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007856:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	f102 030c 	add.w	r3, r2, #12
 800785c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007860:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	f102 0c0c 	add.w	ip, r2, #12
 8007868:	e84c 3100 	strex	r1, r3, [ip]
 800786c:	2900      	cmp	r1, #0
 800786e:	d1f3      	bne.n	8007858 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007870:	6813      	ldr	r3, [r2, #0]
 8007872:	06db      	lsls	r3, r3, #27
 8007874:	d505      	bpl.n	8007882 <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007876:	9101      	str	r1, [sp, #4]
 8007878:	6813      	ldr	r3, [r2, #0]
 800787a:	9301      	str	r3, [sp, #4]
 800787c:	6853      	ldr	r3, [r2, #4]
 800787e:	9301      	str	r3, [sp, #4]
 8007880:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007882:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007884:	f7ff ff5c 	bl	8007740 <HAL_UARTEx_RxEventCallback>
}
 8007888:	b003      	add	sp, #12
 800788a:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800788e:	b939      	cbnz	r1, 80078a0 <UART_Receive_IT.isra.0+0xa8>
 8007890:	6901      	ldr	r1, [r0, #16]
 8007892:	b929      	cbnz	r1, 80078a0 <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007894:	6852      	ldr	r2, [r2, #4]
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 800789a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800789c:	3301      	adds	r3, #1
 800789e:	e7be      	b.n	800781e <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078a0:	6852      	ldr	r2, [r2, #4]
 80078a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078a6:	e7f7      	b.n	8007898 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 80078a8:	f7ff fe61 	bl	800756e <HAL_UART_RxCpltCallback>
 80078ac:	e7ec      	b.n	8007888 <UART_Receive_IT.isra.0+0x90>
	...

080078b0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80078b0:	6803      	ldr	r3, [r0, #0]
{
 80078b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80078b4:	681a      	ldr	r2, [r3, #0]
{
 80078b6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80078b8:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078ba:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078bc:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80078be:	d108      	bne.n	80078d2 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078c0:	0696      	lsls	r6, r2, #26
 80078c2:	d568      	bpl.n	8007996 <HAL_UART_IRQHandler+0xe6>
 80078c4:	068d      	lsls	r5, r1, #26
 80078c6:	d566      	bpl.n	8007996 <HAL_UART_IRQHandler+0xe6>
}
 80078c8:	b002      	add	sp, #8
 80078ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80078ce:	f7ff bf93 	b.w	80077f8 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078d2:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078d6:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80078da:	4305      	orrs	r5, r0
 80078dc:	d05b      	beq.n	8007996 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078de:	07d6      	lsls	r6, r2, #31
 80078e0:	d505      	bpl.n	80078ee <HAL_UART_IRQHandler+0x3e>
 80078e2:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078e4:	bf42      	ittt	mi
 80078e6:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 80078e8:	f043 0301 	orrmi.w	r3, r3, #1
 80078ec:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078ee:	0753      	lsls	r3, r2, #29
 80078f0:	d504      	bpl.n	80078fc <HAL_UART_IRQHandler+0x4c>
 80078f2:	b118      	cbz	r0, 80078fc <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80078f6:	f043 0302 	orr.w	r3, r3, #2
 80078fa:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078fc:	0796      	lsls	r6, r2, #30
 80078fe:	d504      	bpl.n	800790a <HAL_UART_IRQHandler+0x5a>
 8007900:	b118      	cbz	r0, 800790a <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007902:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007904:	f043 0304 	orr.w	r3, r3, #4
 8007908:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800790a:	0715      	lsls	r5, r2, #28
 800790c:	d507      	bpl.n	800791e <HAL_UART_IRQHandler+0x6e>
 800790e:	f001 0320 	and.w	r3, r1, #32
 8007912:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007914:	bf1e      	ittt	ne
 8007916:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8007918:	f043 0308 	orrne.w	r3, r3, #8
 800791c:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800791e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007920:	2b00      	cmp	r3, #0
 8007922:	d032      	beq.n	800798a <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007924:	0692      	lsls	r2, r2, #26
 8007926:	d504      	bpl.n	8007932 <HAL_UART_IRQHandler+0x82>
 8007928:	068b      	lsls	r3, r1, #26
 800792a:	d502      	bpl.n	8007932 <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 800792c:	4620      	mov	r0, r4
 800792e:	f7ff ff63 	bl	80077f8 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007932:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8007934:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007936:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007938:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800793a:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800793e:	f002 0208 	and.w	r2, r2, #8
 8007942:	ea53 0502 	orrs.w	r5, r3, r2
 8007946:	d022      	beq.n	800798e <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8007948:	f7ff fcde 	bl	8007308 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800794c:	6973      	ldr	r3, [r6, #20]
 800794e:	065e      	lsls	r6, r3, #25
 8007950:	d518      	bpl.n	8007984 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007952:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	f102 0314 	add.w	r3, r2, #20
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	3214      	adds	r2, #20
 8007962:	e842 3100 	strex	r1, r3, [r2]
 8007966:	2900      	cmp	r1, #0
 8007968:	d1f3      	bne.n	8007952 <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 800796a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800796c:	b150      	cbz	r0, 8007984 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800796e:	4b74      	ldr	r3, [pc, #464]	; (8007b40 <HAL_UART_IRQHandler+0x290>)
 8007970:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007972:	f7fd fc7f 	bl	8005274 <HAL_DMA_Abort_IT>
 8007976:	b140      	cbz	r0, 800798a <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007978:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800797a:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800797c:	b002      	add	sp, #8
 800797e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007982:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8007984:	4620      	mov	r0, r4
 8007986:	f7ff fdf4 	bl	8007572 <HAL_UART_ErrorCallback>
}
 800798a:	b002      	add	sp, #8
 800798c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800798e:	f7ff fdf0 	bl	8007572 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007992:	6465      	str	r5, [r4, #68]	; 0x44
 8007994:	e7f9      	b.n	800798a <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007996:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007998:	2801      	cmp	r0, #1
 800799a:	f040 8094 	bne.w	8007ac6 <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800799e:	06d5      	lsls	r5, r2, #27
 80079a0:	f140 8091 	bpl.w	8007ac6 <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80079a4:	06c8      	lsls	r0, r1, #27
 80079a6:	f140 808e 	bpl.w	8007ac6 <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079aa:	2200      	movs	r2, #0
 80079ac:	9201      	str	r2, [sp, #4]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	9201      	str	r2, [sp, #4]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	9201      	str	r2, [sp, #4]
 80079b6:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b8:	695a      	ldr	r2, [r3, #20]
 80079ba:	0652      	lsls	r2, r2, #25
 80079bc:	d54d      	bpl.n	8007a5a <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079be:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80079c0:	680a      	ldr	r2, [r1, #0]
 80079c2:	6852      	ldr	r2, [r2, #4]
 80079c4:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80079c6:	2a00      	cmp	r2, #0
 80079c8:	d0df      	beq.n	800798a <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079ca:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80079cc:	4290      	cmp	r0, r2
 80079ce:	d9dc      	bls.n	800798a <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 80079d0:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079d2:	698a      	ldr	r2, [r1, #24]
 80079d4:	2a20      	cmp	r2, #32
 80079d6:	d036      	beq.n	8007a46 <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	f103 020c 	add.w	r2, r3, #12
 80079dc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	f103 000c 	add.w	r0, r3, #12
 80079e8:	e840 2100 	strex	r1, r2, [r0]
 80079ec:	2900      	cmp	r1, #0
 80079ee:	d1f3      	bne.n	80079d8 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f0:	f103 0214 	add.w	r2, r3, #20
 80079f4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	f103 0014 	add.w	r0, r3, #20
 8007a00:	e840 2100 	strex	r1, r2, [r0]
 8007a04:	2900      	cmp	r1, #0
 8007a06:	d1f3      	bne.n	80079f0 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a08:	f103 0214 	add.w	r2, r3, #20
 8007a0c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	f103 0014 	add.w	r0, r3, #20
 8007a18:	e840 2100 	strex	r1, r2, [r0]
 8007a1c:	2900      	cmp	r1, #0
 8007a1e:	d1f3      	bne.n	8007a08 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8007a20:	2220      	movs	r2, #32
 8007a22:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a26:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a28:	f103 020c 	add.w	r2, r3, #12
 8007a2c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a30:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	f103 000c 	add.w	r0, r3, #12
 8007a38:	e840 2100 	strex	r1, r2, [r0]
 8007a3c:	2900      	cmp	r1, #0
 8007a3e:	d1f3      	bne.n	8007a28 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a40:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007a42:	f7fd fbf8 	bl	8005236 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a46:	2302      	movs	r3, #2
 8007a48:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a4a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007a4c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007a4e:	1ac9      	subs	r1, r1, r3
 8007a50:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a52:	4620      	mov	r0, r4
 8007a54:	f7ff fe74 	bl	8007740 <HAL_UARTEx_RxEventCallback>
 8007a58:	e797      	b.n	800798a <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a5a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8007a5c:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a5e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 8007a60:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a62:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d090      	beq.n	800798a <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a68:	1a89      	subs	r1, r1, r2
 8007a6a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8007a6c:	2900      	cmp	r1, #0
 8007a6e:	d08c      	beq.n	800798a <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	f103 020c 	add.w	r2, r3, #12
 8007a74:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	f103 050c 	add.w	r5, r3, #12
 8007a80:	e845 2000 	strex	r0, r2, [r5]
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d1f3      	bne.n	8007a70 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	f103 0214 	add.w	r2, r3, #20
 8007a8c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a90:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	f103 0514 	add.w	r5, r3, #20
 8007a98:	e845 2000 	strex	r0, r2, [r5]
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d1f3      	bne.n	8007a88 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa6:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa8:	f103 020c 	add.w	r2, r3, #12
 8007aac:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	f103 050c 	add.w	r5, r3, #12
 8007ab8:	e845 2000 	strex	r0, r2, [r5]
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d1f3      	bne.n	8007aa8 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	6363      	str	r3, [r4, #52]	; 0x34
 8007ac4:	e7c5      	b.n	8007a52 <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ac6:	0616      	lsls	r6, r2, #24
 8007ac8:	d528      	bpl.n	8007b1c <HAL_UART_IRQHandler+0x26c>
 8007aca:	060d      	lsls	r5, r1, #24
 8007acc:	d526      	bpl.n	8007b1c <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ace:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007ad2:	2a21      	cmp	r2, #33	; 0x21
 8007ad4:	f47f af59 	bne.w	800798a <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ad8:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ada:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007adc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007ae0:	d117      	bne.n	8007b12 <HAL_UART_IRQHandler+0x262>
 8007ae2:	6921      	ldr	r1, [r4, #16]
 8007ae4:	b9a9      	cbnz	r1, 8007b12 <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ae6:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007aea:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007aee:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007af0:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8007af2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8007af4:	3a01      	subs	r2, #1
 8007af6:	b292      	uxth	r2, r2
 8007af8:	84e2      	strh	r2, [r4, #38]	; 0x26
 8007afa:	2a00      	cmp	r2, #0
 8007afc:	f47f af45 	bne.w	800798a <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b06:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b08:	68da      	ldr	r2, [r3, #12]
 8007b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b0e:	60da      	str	r2, [r3, #12]
 8007b10:	e73b      	b.n	800798a <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b12:	1c51      	adds	r1, r2, #1
 8007b14:	6221      	str	r1, [r4, #32]
 8007b16:	7812      	ldrb	r2, [r2, #0]
 8007b18:	605a      	str	r2, [r3, #4]
 8007b1a:	e7ea      	b.n	8007af2 <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b1c:	0650      	lsls	r0, r2, #25
 8007b1e:	f57f af34 	bpl.w	800798a <HAL_UART_IRQHandler+0xda>
 8007b22:	064a      	lsls	r2, r1, #25
 8007b24:	f57f af31 	bpl.w	800798a <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b28:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8007b2a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b30:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007b32:	2320      	movs	r3, #32
 8007b34:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8007b38:	f7ff fd18 	bl	800756c <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8007b3c:	e725      	b.n	800798a <HAL_UART_IRQHandler+0xda>
 8007b3e:	bf00      	nop
 8007b40:	080075cf 	.word	0x080075cf

08007b44 <UART_Start_Receive_DMA>:
{
 8007b44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b46:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 8007b48:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b4a:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b4c:	2222      	movs	r2, #34	; 0x22
{
 8007b4e:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8007b50:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b52:	6445      	str	r5, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b54:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007b58:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8007b5a:	4a1d      	ldr	r2, [pc, #116]	; (8007bd0 <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007b5c:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007b5e:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007b60:	4a1c      	ldr	r2, [pc, #112]	; (8007bd4 <UART_Start_Receive_DMA+0x90>)
 8007b62:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007b64:	4a1c      	ldr	r2, [pc, #112]	; (8007bd8 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 8007b66:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007b6a:	460a      	mov	r2, r1
 8007b6c:	1d31      	adds	r1, r6, #4
 8007b6e:	f7fd fb23 	bl	80051b8 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	9501      	str	r5, [sp, #4]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	9201      	str	r2, [sp, #4]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	9201      	str	r2, [sp, #4]
 8007b7e:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b80:	6922      	ldr	r2, [r4, #16]
 8007b82:	b15a      	cbz	r2, 8007b9c <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	f103 020c 	add.w	r2, r3, #12
 8007b88:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	f103 000c 	add.w	r0, r3, #12
 8007b94:	e840 2100 	strex	r1, r2, [r0]
 8007b98:	2900      	cmp	r1, #0
 8007b9a:	d1f3      	bne.n	8007b84 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9c:	f103 0214 	add.w	r2, r3, #20
 8007ba0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba4:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	f103 0014 	add.w	r0, r3, #20
 8007bac:	e840 2100 	strex	r1, r2, [r0]
 8007bb0:	2900      	cmp	r1, #0
 8007bb2:	d1f3      	bne.n	8007b9c <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	f103 0214 	add.w	r2, r3, #20
 8007bb8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	f103 0114 	add.w	r1, r3, #20
 8007bc4:	e841 2000 	strex	r0, r2, [r1]
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d1f3      	bne.n	8007bb4 <UART_Start_Receive_DMA+0x70>
}
 8007bcc:	b002      	add	sp, #8
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	08007761 	.word	0x08007761
 8007bd4:	08007743 	.word	0x08007743
 8007bd8:	08007575 	.word	0x08007575

08007bdc <HAL_UART_Receive_DMA>:
{
 8007bdc:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bde:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8007be2:	2e20      	cmp	r6, #32
 8007be4:	d106      	bne.n	8007bf4 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8007be6:	b141      	cbz	r1, 8007bfa <HAL_UART_Receive_DMA+0x1e>
 8007be8:	b13a      	cbz	r2, 8007bfa <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bea:	2400      	movs	r4, #0
 8007bec:	6304      	str	r4, [r0, #48]	; 0x30
}
 8007bee:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007bf0:	f7ff bfa8 	b.w	8007b44 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8007bf4:	2002      	movs	r0, #2
}
 8007bf6:	bc70      	pop	{r4, r5, r6}
 8007bf8:	4770      	bx	lr
      return HAL_ERROR;
 8007bfa:	2001      	movs	r0, #1
 8007bfc:	e7fb      	b.n	8007bf6 <HAL_UART_Receive_DMA+0x1a>

08007bfe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007bfe:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007c00:	f000 ffbc 	bl	8008b7c <vTaskStartScheduler>
  
  return osOK;
}
 8007c04:	2000      	movs	r0, #0
 8007c06:	bd08      	pop	{r3, pc}

08007c08 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007c0c:	6946      	ldr	r6, [r0, #20]
{
 8007c0e:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c10:	e9d0 1000 	ldrd	r1, r0, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c14:	692a      	ldr	r2, [r5, #16]
 8007c16:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8007c1a:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007c1c:	b176      	cbz	r6, 8007c3c <osThreadCreate+0x34>
 8007c1e:	69ad      	ldr	r5, [r5, #24]
 8007c20:	b165      	cbz	r5, 8007c3c <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8007c22:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c24:	bf0c      	ite	eq
 8007c26:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8007c28:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c2a:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8007c2e:	9400      	str	r4, [sp, #0]
 8007c30:	f000 feae 	bl	8008990 <xTaskCreateStatic>
 8007c34:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007c36:	9805      	ldr	r0, [sp, #20]
}
 8007c38:	b006      	add	sp, #24
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8007c3c:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c3e:	bf0c      	ite	eq
 8007c40:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8007c42:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c44:	ad05      	add	r5, sp, #20
 8007c46:	e9cd 4500 	strd	r4, r5, [sp]
 8007c4a:	b292      	uxth	r2, r2
 8007c4c:	f000 fed7 	bl	80089fe <xTaskCreate>
 8007c50:	2801      	cmp	r0, #1
 8007c52:	d0f0      	beq.n	8007c36 <osThreadCreate+0x2e>
      return NULL;
 8007c54:	2000      	movs	r0, #0
 8007c56:	e7ef      	b.n	8007c38 <osThreadCreate+0x30>

08007c58 <osThreadYield>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
  taskYIELD();
 8007c58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c60:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	f3bf 8f6f 	isb	sy
  
  return osOK;
}
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	4770      	bx	lr

08007c70 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007c70:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007c72:	2801      	cmp	r0, #1
 8007c74:	bf38      	it	cc
 8007c76:	2001      	movcc	r0, #1
 8007c78:	f001 f930 	bl	8008edc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	bd08      	pop	{r3, pc}

08007c80 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007c80:	b513      	push	{r0, r1, r4, lr}
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8007c82:	c811      	ldmia	r0, {r0, r4}
    return xTimerCreateStatic((const char *)"",
 8007c84:	3901      	subs	r1, #1
{
 8007c86:	4613      	mov	r3, r2
    return xTimerCreateStatic((const char *)"",
 8007c88:	424a      	negs	r2, r1
 8007c8a:	414a      	adcs	r2, r1
  if(timer_def->controlblock != NULL) {
 8007c8c:	b13c      	cbz	r4, 8007c9e <osTimerCreate+0x1e>
    return xTimerCreateStatic((const char *)"",
 8007c8e:	e9cd 0400 	strd	r0, r4, [sp]
 8007c92:	2101      	movs	r1, #1
 8007c94:	4805      	ldr	r0, [pc, #20]	; (8007cac <osTimerCreate+0x2c>)
 8007c96:	f001 fd04 	bl	80096a2 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8007c9a:	b002      	add	sp, #8
 8007c9c:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8007c9e:	9000      	str	r0, [sp, #0]
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	4802      	ldr	r0, [pc, #8]	; (8007cac <osTimerCreate+0x2c>)
 8007ca4:	f001 fcd6 	bl	8009654 <xTimerCreate>
 8007ca8:	e7f7      	b.n	8007c9a <osTimerCreate+0x1a>
 8007caa:	bf00      	nop
 8007cac:	0800b611 	.word	0x0800b611

08007cb0 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8007cb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8007cb2:	2400      	movs	r4, #0
 8007cb4:	2901      	cmp	r1, #1
 8007cb6:	460a      	mov	r2, r1
 8007cb8:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8007cba:	bf38      	it	cc
 8007cbc:	2201      	movcc	r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cbe:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 8007cc2:	b1b3      	cbz	r3, 8007cf2 <osTimerStart+0x42>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8007cc4:	2109      	movs	r1, #9
 8007cc6:	9400      	str	r4, [sp, #0]
 8007cc8:	ab03      	add	r3, sp, #12
 8007cca:	f001 fd27 	bl	800971c <xTimerGenericCommand>
 8007cce:	2801      	cmp	r0, #1
 8007cd0:	d115      	bne.n	8007cfe <osTimerStart+0x4e>
    {
      result = osErrorOS;
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8007cd2:	9b03      	ldr	r3, [sp, #12]
 8007cd4:	b913      	cbnz	r3, 8007cdc <osTimerStart+0x2c>
  osStatus result = osOK;
 8007cd6:	2000      	movs	r0, #0

#else 
  result = osErrorOS;
#endif
  return result;
}
 8007cd8:	b004      	add	sp, #16
 8007cda:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8007cdc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	e7f1      	b.n	8007cd6 <osTimerStart+0x26>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8007cf2:	2104      	movs	r1, #4
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	f001 fd11 	bl	800971c <xTimerGenericCommand>
 8007cfa:	2801      	cmp	r0, #1
 8007cfc:	d0eb      	beq.n	8007cd6 <osTimerStart+0x26>
      result = osErrorOS;
 8007cfe:	20ff      	movs	r0, #255	; 0xff
  return result;
 8007d00:	e7ea      	b.n	8007cd8 <osTimerStart+0x28>

08007d02 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8007d02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007d04:	2300      	movs	r3, #0
  uint32_t ulPreviousNotificationValue = 0;
 8007d06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d0a:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode())
 8007d0e:	b1d3      	cbz	r3, 8007d46 <osSignalSet+0x44>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8007d10:	ab02      	add	r3, sp, #8
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	2201      	movs	r2, #1
 8007d16:	ab03      	add	r3, sp, #12
 8007d18:	f001 fb94 	bl	8009444 <xTaskGenericNotifyFromISR>
 8007d1c:	2801      	cmp	r0, #1
 8007d1e:	d004      	beq.n	8007d2a <osSignalSet+0x28>
      return 0x80000000;
 8007d20:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8007d24:	b005      	add	sp, #20
 8007d26:	f85d fb04 	ldr.w	pc, [sp], #4
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007d2a:	9b02      	ldr	r3, [sp, #8]
 8007d2c:	b14b      	cbz	r3, 8007d42 <osSignalSet+0x40>
 8007d2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d36:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	f3bf 8f6f 	isb	sy
  return ulPreviousNotificationValue;
 8007d42:	9803      	ldr	r0, [sp, #12]
 8007d44:	e7ee      	b.n	8007d24 <osSignalSet+0x22>
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8007d46:	2201      	movs	r2, #1
 8007d48:	ab03      	add	r3, sp, #12
 8007d4a:	f001 fb0d 	bl	8009368 <xTaskGenericNotify>
 8007d4e:	2801      	cmp	r0, #1
 8007d50:	d0f7      	beq.n	8007d42 <osSignalSet+0x40>
 8007d52:	e7e5      	b.n	8007d20 <osSignalSet+0x1e>

08007d54 <osSignalWait>:

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8007d54:	2300      	movs	r3, #0
{
 8007d56:	b530      	push	{r4, r5, lr}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	4614      	mov	r4, r2
  ret.value.signals = 0;  
 8007d5e:	9302      	str	r3, [sp, #8]
 8007d60:	f3ef 8005 	mrs	r0, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 8007d64:	b9c0      	cbnz	r0, 8007d98 <osSignalWait+0x44>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8007d66:	4613      	mov	r3, r2
 8007d68:	aa02      	add	r2, sp, #8
 8007d6a:	f001 fab3 	bl	80092d4 <xTaskNotifyWait>
 8007d6e:	2801      	cmp	r0, #1
 8007d70:	d00c      	beq.n	8007d8c <osSignalWait+0x38>
    {
      if(ticks == 0)  ret.status = osOK;
 8007d72:	1e23      	subs	r3, r4, #0
 8007d74:	bf18      	it	ne
 8007d76:	2301      	movne	r3, #1
 8007d78:	019b      	lsls	r3, r3, #6
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8007d7a:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8007d7c:	ab04      	add	r3, sp, #16
 8007d7e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007d82:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8007d86:	4628      	mov	r0, r5
 8007d88:	b005      	add	sp, #20
 8007d8a:	bd30      	pop	{r4, r5, pc}
    else if(ret.value.signals < 0)
 8007d8c:	9b02      	ldr	r3, [sp, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	bfac      	ite	ge
 8007d92:	2308      	movge	r3, #8
 8007d94:	2386      	movlt	r3, #134	; 0x86
 8007d96:	e7f0      	b.n	8007d7a <osSignalWait+0x26>
 8007d98:	2382      	movs	r3, #130	; 0x82
 8007d9a:	e7ee      	b.n	8007d7a <osSignalWait+0x26>

08007d9c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	b513      	push	{r0, r1, r4, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007da0:	685c      	ldr	r4, [r3, #4]
{ 
 8007da2:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 8007da4:	b164      	cbz	r4, 8007dc0 <osSemaphoreCreate+0x24>
    if (count == 1) {
 8007da6:	2901      	cmp	r1, #1
 8007da8:	d119      	bne.n	8007dde <osSemaphoreCreate+0x42>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007daa:	2303      	movs	r3, #3
 8007dac:	2200      	movs	r2, #0
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	4611      	mov	r1, r2
 8007db2:	4623      	mov	r3, r4
 8007db4:	f000 f9b9 	bl	800812a <xQueueGenericCreateStatic>
 8007db8:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007dba:	4620      	mov	r0, r4
 8007dbc:	b002      	add	sp, #8
 8007dbe:	bd10      	pop	{r4, pc}
    if (count == 1) {
 8007dc0:	2901      	cmp	r1, #1
 8007dc2:	d1fa      	bne.n	8007dba <osSemaphoreCreate+0x1e>
      vSemaphoreCreateBinary(sema);
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	2203      	movs	r2, #3
 8007dc8:	f000 f9f8 	bl	80081bc <xQueueGenericCreate>
 8007dcc:	4604      	mov	r4, r0
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d0f3      	beq.n	8007dba <osSemaphoreCreate+0x1e>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	f000 fa14 	bl	8008204 <xQueueGenericSend>
 8007ddc:	e7ed      	b.n	8007dba <osSemaphoreCreate+0x1e>
      return NULL;
 8007dde:	2400      	movs	r4, #0
 8007de0:	e7eb      	b.n	8007dba <osSemaphoreCreate+0x1e>

08007de2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007de2:	4603      	mov	r3, r0
 8007de4:	b513      	push	{r0, r1, r4, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007de6:	c807      	ldmia	r0, {r0, r1, r2}
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007de8:	b10a      	cbz	r2, 8007dee <osMessageCreate+0xc>
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	b92b      	cbnz	r3, 8007dfa <osMessageCreate+0x18>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007dee:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007df0:	b002      	add	sp, #8
 8007df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007df6:	f000 b9e1 	b.w	80081bc <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007dfa:	2400      	movs	r4, #0
 8007dfc:	9400      	str	r4, [sp, #0]
 8007dfe:	f000 f994 	bl	800812a <xQueueGenericCreateStatic>
}
 8007e02:	b002      	add	sp, #8
 8007e04:	bd10      	pop	{r4, pc}

08007e06 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007e06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8007e08:	2400      	movs	r4, #0
{
 8007e0a:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007e0c:	9403      	str	r4, [sp, #12]
 8007e0e:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8007e12:	b1b3      	cbz	r3, 8007e42 <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007e14:	4623      	mov	r3, r4
 8007e16:	aa03      	add	r2, sp, #12
 8007e18:	a901      	add	r1, sp, #4
 8007e1a:	f000 faa6 	bl	800836a <xQueueGenericSendFromISR>
 8007e1e:	2801      	cmp	r0, #1
 8007e20:	d117      	bne.n	8007e52 <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007e22:	9b03      	ldr	r3, [sp, #12]
 8007e24:	b913      	cbnz	r3, 8007e2c <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8007e26:	2000      	movs	r0, #0
}
 8007e28:	b004      	add	sp, #16
 8007e2a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8007e2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	e7f1      	b.n	8007e26 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007e42:	2a01      	cmp	r2, #1
 8007e44:	bf38      	it	cc
 8007e46:	2201      	movcc	r2, #1
 8007e48:	a901      	add	r1, sp, #4
 8007e4a:	f000 f9db 	bl	8008204 <xQueueGenericSend>
 8007e4e:	2801      	cmp	r0, #1
 8007e50:	d0e9      	beq.n	8007e26 <osMessagePut+0x20>
      return osErrorOS;
 8007e52:	20ff      	movs	r0, #255	; 0xff
 8007e54:	e7e8      	b.n	8007e28 <osMessagePut+0x22>

08007e56 <osMessageGet>:
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8007e56:	2300      	movs	r3, #0
{
 8007e58:	b530      	push	{r4, r5, lr}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	4614      	mov	r4, r2
 8007e60:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8007e62:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8007e64:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8007e66:	b911      	cbnz	r1, 8007e6e <osMessageGet+0x18>
    event.status = osErrorParameter;
 8007e68:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8007e6a:	9301      	str	r3, [sp, #4]
 8007e6c:	e018      	b.n	8007ea0 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8007e74:	b1e3      	cbz	r3, 8007eb0 <osMessageGet+0x5a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007e76:	466a      	mov	r2, sp
 8007e78:	a902      	add	r1, sp, #8
 8007e7a:	f000 fb76 	bl	800856a <xQueueReceiveFromISR>
 8007e7e:	1e43      	subs	r3, r0, #1
 8007e80:	4258      	negs	r0, r3
 8007e82:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 8007e84:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007e86:	0100      	lsls	r0, r0, #4
 8007e88:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8007e8a:	b14b      	cbz	r3, 8007ea0 <osMessageGet+0x4a>
 8007e8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e94:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	f3bf 8f6f 	isb	sy
    return event;
 8007ea0:	ab04      	add	r3, sp, #16
 8007ea2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007ea6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 8007eaa:	4628      	mov	r0, r5
 8007eac:	b005      	add	sp, #20
 8007eae:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007eb0:	a902      	add	r1, sp, #8
 8007eb2:	f000 fabb 	bl	800842c <xQueueReceive>
 8007eb6:	2801      	cmp	r0, #1
 8007eb8:	d101      	bne.n	8007ebe <osMessageGet+0x68>
      event.status = osEventMessage;
 8007eba:	2310      	movs	r3, #16
 8007ebc:	e7d5      	b.n	8007e6a <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007ebe:	3c00      	subs	r4, #0
 8007ec0:	bf18      	it	ne
 8007ec2:	2401      	movne	r4, #1
 8007ec4:	01a4      	lsls	r4, r4, #6
 8007ec6:	9401      	str	r4, [sp, #4]
  return event;
 8007ec8:	e7ea      	b.n	8007ea0 <osMessageGet+0x4a>

08007eca <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8007eca:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8007ecc:	f001 f86c 	bl	8008fa8 <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	bd08      	pop	{r3, pc}

08007ed4 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8007ed4:	b508      	push	{r3, lr}
 8007ed6:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8007eda:	b17b      	cbz	r3, 8007efc <osThreadResume+0x28>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8007edc:	f000 fdfe 	bl	8008adc <xTaskResumeFromISR>
 8007ee0:	2801      	cmp	r0, #1
 8007ee2:	d109      	bne.n	8007ef8 <osThreadResume+0x24>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8007ee4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	f3bf 8f6f 	isb	sy
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 8007ef8:	2000      	movs	r0, #0
 8007efa:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 8007efc:	f000 fdac 	bl	8008a58 <vTaskResume>
 8007f00:	e7fa      	b.n	8007ef8 <osThreadResume+0x24>

08007f02 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8007f02:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8007f04:	2901      	cmp	r1, #1
 8007f06:	bf38      	it	cc
 8007f08:	2101      	movcc	r1, #1
 8007f0a:	f000 ff9d 	bl	8008e48 <vTaskDelayUntil>
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8007f0e:	2000      	movs	r0, #0
 8007f10:	bd08      	pop	{r3, pc}

08007f12 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f12:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f16:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f1a:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f1e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f20:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f26:	4770      	bx	lr

08007f28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f2c:	4770      	bx	lr

08007f2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f2e:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f30:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007f32:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f34:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f3a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007f3c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007f3e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007f40:	3301      	adds	r3, #1
 8007f42:	6003      	str	r3, [r0, #0]
}
 8007f44:	4770      	bx	lr

08007f46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f46:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f48:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f4a:	1c63      	adds	r3, r4, #1
 8007f4c:	d10a      	bne.n	8007f64 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f4e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f54:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f56:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f58:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007f5a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007f5c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007f5e:	3301      	adds	r3, #1
 8007f60:	6003      	str	r3, [r0, #0]
}
 8007f62:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f64:	f100 0208 	add.w	r2, r0, #8
 8007f68:	4613      	mov	r3, r2
 8007f6a:	6852      	ldr	r2, [r2, #4]
 8007f6c:	6815      	ldr	r5, [r2, #0]
 8007f6e:	42a5      	cmp	r5, r4
 8007f70:	d9fa      	bls.n	8007f68 <vListInsert+0x22>
 8007f72:	e7ed      	b.n	8007f50 <vListInsert+0xa>

08007f74 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007f74:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f76:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007f7a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f7c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f7e:	6859      	ldr	r1, [r3, #4]
 8007f80:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f82:	bf08      	it	eq
 8007f84:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007f86:	2200      	movs	r2, #0
 8007f88:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	3a01      	subs	r2, #1
 8007f8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f90:	6818      	ldr	r0, [r3, #0]
}
 8007f92:	4770      	bx	lr

08007f94 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f94:	b510      	push	{r4, lr}
 8007f96:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f98:	f001 fd6c 	bl	8009a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f9c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007f9e:	f001 fd89 	bl	8009ab4 <vPortExitCritical>

	return xReturn;
}
 8007fa2:	fab4 f084 	clz	r0, r4
 8007fa6:	0940      	lsrs	r0, r0, #5
 8007fa8:	bd10      	pop	{r4, pc}

08007faa <prvCopyDataToQueue>:
{
 8007faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fac:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fae:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007fb0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fb2:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fb4:	b952      	cbnz	r2, 8007fcc <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fb6:	6807      	ldr	r7, [r0, #0]
 8007fb8:	bb47      	cbnz	r7, 800800c <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007fba:	6840      	ldr	r0, [r0, #4]
 8007fbc:	f001 f93a 	bl	8009234 <xTaskPriorityDisinherit>
 8007fc0:	4605      	mov	r5, r0
				pxQueue->pxMutexHolder = NULL;
 8007fc2:	6067      	str	r7, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fc4:	3601      	adds	r6, #1
}
 8007fc6:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fc8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007fcc:	b965      	cbnz	r5, 8007fe8 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007fce:	6880      	ldr	r0, [r0, #8]
 8007fd0:	f002 fb39 	bl	800a646 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007fd4:	68a3      	ldr	r3, [r4, #8]
 8007fd6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007fd8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fda:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007fdc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d3f0      	bcc.n	8007fc4 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	60a3      	str	r3, [r4, #8]
 8007fe6:	e7ed      	b.n	8007fc4 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fe8:	68c0      	ldr	r0, [r0, #12]
 8007fea:	f002 fb2c 	bl	800a646 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007fee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007ff0:	68e3      	ldr	r3, [r4, #12]
 8007ff2:	4251      	negs	r1, r2
 8007ff4:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ff6:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007ff8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ffa:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007ffc:	bf3e      	ittt	cc
 8007ffe:	6863      	ldrcc	r3, [r4, #4]
 8008000:	185b      	addcc	r3, r3, r1
 8008002:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008004:	2d02      	cmp	r5, #2
 8008006:	d101      	bne.n	800800c <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008008:	b116      	cbz	r6, 8008010 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800800a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800800c:	2500      	movs	r5, #0
 800800e:	e7d9      	b.n	8007fc4 <prvCopyDataToQueue+0x1a>
 8008010:	4635      	mov	r5, r6
 8008012:	e7d7      	b.n	8007fc4 <prvCopyDataToQueue+0x1a>

08008014 <prvCopyDataFromQueue>:
{
 8008014:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8008018:	4608      	mov	r0, r1
 800801a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800801c:	b162      	cbz	r2, 8008038 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800801e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008020:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008022:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008024:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008026:	bf28      	it	cs
 8008028:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800802a:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800802c:	bf28      	it	cs
 800802e:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008030:	68d9      	ldr	r1, [r3, #12]
}
 8008032:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008034:	f002 bb07 	b.w	800a646 <memcpy>
}
 8008038:	bc10      	pop	{r4}
 800803a:	4770      	bx	lr

0800803c <prvUnlockQueue>:
{
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008040:	f001 fd18 	bl	8009a74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008044:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008048:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800804c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800804e:	2d00      	cmp	r5, #0
 8008050:	dc14      	bgt.n	800807c <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8008052:	23ff      	movs	r3, #255	; 0xff
 8008054:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008058:	f001 fd2c 	bl	8009ab4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800805c:	f001 fd0a 	bl	8009a74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008060:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008064:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8008068:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800806a:	2d00      	cmp	r5, #0
 800806c:	dc12      	bgt.n	8008094 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800806e:	23ff      	movs	r3, #255	; 0xff
 8008070:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8008074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008078:	f001 bd1c 	b.w	8009ab4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800807c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0e7      	beq.n	8008052 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008082:	4630      	mov	r0, r6
 8008084:	f001 f836 	bl	80090f4 <xTaskRemoveFromEventList>
 8008088:	b108      	cbz	r0, 800808e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800808a:	f001 f8bd 	bl	8009208 <vTaskMissedYield>
			--cTxLock;
 800808e:	3d01      	subs	r5, #1
 8008090:	b26d      	sxtb	r5, r5
 8008092:	e7dc      	b.n	800804e <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008094:	6923      	ldr	r3, [r4, #16]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0e9      	beq.n	800806e <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800809a:	4630      	mov	r0, r6
 800809c:	f001 f82a 	bl	80090f4 <xTaskRemoveFromEventList>
 80080a0:	b108      	cbz	r0, 80080a6 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80080a2:	f001 f8b1 	bl	8009208 <vTaskMissedYield>
				--cRxLock;
 80080a6:	3d01      	subs	r5, #1
 80080a8:	b26d      	sxtb	r5, r5
 80080aa:	e7de      	b.n	800806a <prvUnlockQueue+0x2e>

080080ac <xQueueGenericReset>:
{
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80080b0:	4604      	mov	r4, r0
 80080b2:	b940      	cbnz	r0, 80080c6 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	e7fe      	b.n	80080c4 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80080c6:	f001 fcd5 	bl	8009a74 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80080ca:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 80080ce:	434b      	muls	r3, r1
 80080d0:	6822      	ldr	r2, [r4, #0]
 80080d2:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80080d4:	1a5b      	subs	r3, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80080d6:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080d8:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080da:	2000      	movs	r0, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80080dc:	441a      	add	r2, r3
		pxQueue->cRxLock = queueUNLOCKED;
 80080de:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080e0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80080e2:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80080ec:	b9a5      	cbnz	r5, 8008118 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080ee:	6923      	ldr	r3, [r4, #16]
 80080f0:	b173      	cbz	r3, 8008110 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080f2:	f104 0010 	add.w	r0, r4, #16
 80080f6:	f000 fffd 	bl	80090f4 <xTaskRemoveFromEventList>
 80080fa:	b148      	cbz	r0, 8008110 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80080fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008104:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8008110:	f001 fcd0 	bl	8009ab4 <vPortExitCritical>
}
 8008114:	2001      	movs	r0, #1
 8008116:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008118:	f104 0010 	add.w	r0, r4, #16
 800811c:	f7ff fef9 	bl	8007f12 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008120:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008124:	f7ff fef5 	bl	8007f12 <vListInitialise>
 8008128:	e7f2      	b.n	8008110 <xQueueGenericReset+0x64>

0800812a <xQueueGenericCreateStatic>:
	{
 800812a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800812c:	460d      	mov	r5, r1
 800812e:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008130:	b940      	cbnz	r0, 8008144 <xQueueGenericCreateStatic+0x1a>
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	e7fe      	b.n	8008142 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8008144:	b943      	cbnz	r3, 8008158 <xQueueGenericCreateStatic+0x2e>
 8008146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	e7fe      	b.n	8008156 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008158:	b14a      	cbz	r2, 800816e <xQueueGenericCreateStatic+0x44>
 800815a:	b991      	cbnz	r1, 8008182 <xQueueGenericCreateStatic+0x58>
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	e7fe      	b.n	800816c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800816e:	b141      	cbz	r1, 8008182 <xQueueGenericCreateStatic+0x58>
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	e7fe      	b.n	8008180 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008182:	2348      	movs	r3, #72	; 0x48
 8008184:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008186:	9b01      	ldr	r3, [sp, #4]
 8008188:	2b48      	cmp	r3, #72	; 0x48
 800818a:	d008      	beq.n	800819e <xQueueGenericCreateStatic+0x74>
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	e7fe      	b.n	800819c <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800819e:	2101      	movs	r1, #1
	if( uxItemSize == ( UBaseType_t ) 0 )
 80081a0:	2d00      	cmp	r5, #0
 80081a2:	bf08      	it	eq
 80081a4:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80081a6:	e9c4 050f 	strd	r0, r5, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081aa:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081ae:	4620      	mov	r0, r4
 80081b0:	6022      	str	r2, [r4, #0]
 80081b2:	f7ff ff7b 	bl	80080ac <xQueueGenericReset>
	}
 80081b6:	4620      	mov	r0, r4
 80081b8:	b003      	add	sp, #12
 80081ba:	bd30      	pop	{r4, r5, pc}

080081bc <xQueueGenericCreate>:
	{
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081c0:	4606      	mov	r6, r0
 80081c2:	b940      	cbnz	r0, 80081d6 <xQueueGenericCreate+0x1a>
 80081c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	e7fe      	b.n	80081d4 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081d6:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80081d8:	3048      	adds	r0, #72	; 0x48
 80081da:	f001 fd7b 	bl	8009cd4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80081de:	4604      	mov	r4, r0
 80081e0:	b160      	cbz	r0, 80081fc <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80081e2:	2300      	movs	r3, #0
 80081e4:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80081e8:	b155      	cbz	r5, 8008200 <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80081ea:	f100 0348 	add.w	r3, r0, #72	; 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081ee:	2101      	movs	r1, #1
 80081f0:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80081f2:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 80081f6:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081f8:	f7ff ff58 	bl	80080ac <xQueueGenericReset>
	}
 80081fc:	4620      	mov	r0, r4
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
 8008200:	4603      	mov	r3, r0
 8008202:	e7f4      	b.n	80081ee <xQueueGenericCreate+0x32>

08008204 <xQueueGenericSend>:
{
 8008204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008208:	b085      	sub	sp, #20
 800820a:	4688      	mov	r8, r1
 800820c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800820e:	4604      	mov	r4, r0
{
 8008210:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008212:	b940      	cbnz	r0, 8008226 <xQueueGenericSend+0x22>
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	e7fe      	b.n	8008224 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008226:	b951      	cbnz	r1, 800823e <xQueueGenericSend+0x3a>
 8008228:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800822a:	b143      	cbz	r3, 800823e <xQueueGenericSend+0x3a>
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	e7fe      	b.n	800823c <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800823e:	2f02      	cmp	r7, #2
 8008240:	d10b      	bne.n	800825a <xQueueGenericSend+0x56>
 8008242:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008244:	2b01      	cmp	r3, #1
 8008246:	d008      	beq.n	800825a <xQueueGenericSend+0x56>
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	e7fe      	b.n	8008258 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800825a:	f000 ffdb 	bl	8009214 <xTaskGetSchedulerState>
 800825e:	4606      	mov	r6, r0
 8008260:	b950      	cbnz	r0, 8008278 <xQueueGenericSend+0x74>
 8008262:	9b01      	ldr	r3, [sp, #4]
 8008264:	b14b      	cbz	r3, 800827a <xQueueGenericSend+0x76>
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	e7fe      	b.n	8008276 <xQueueGenericSend+0x72>
 8008278:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800827a:	f04f 0900 	mov.w	r9, #0
 800827e:	e037      	b.n	80082f0 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008280:	9d01      	ldr	r5, [sp, #4]
 8008282:	b91d      	cbnz	r5, 800828c <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8008284:	f001 fc16 	bl	8009ab4 <vPortExitCritical>
			return errQUEUE_FULL;
 8008288:	2000      	movs	r0, #0
 800828a:	e052      	b.n	8008332 <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 800828c:	b916      	cbnz	r6, 8008294 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800828e:	a802      	add	r0, sp, #8
 8008290:	f000 ff72 	bl	8009178 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008294:	f001 fc0e 	bl	8009ab4 <vPortExitCritical>
		vTaskSuspendAll();
 8008298:	f000 fcc0 	bl	8008c1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800829c:	f001 fbea 	bl	8009a74 <vPortEnterCritical>
 80082a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80082a4:	2bff      	cmp	r3, #255	; 0xff
 80082a6:	bf08      	it	eq
 80082a8:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 80082ac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80082b0:	2bff      	cmp	r3, #255	; 0xff
 80082b2:	bf08      	it	eq
 80082b4:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 80082b8:	f001 fbfc 	bl	8009ab4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082bc:	a901      	add	r1, sp, #4
 80082be:	a802      	add	r0, sp, #8
 80082c0:	f000 ff66 	bl	8009190 <xTaskCheckForTimeOut>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d14a      	bne.n	800835e <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082c8:	f001 fbd4 	bl	8009a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80082ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d131      	bne.n	8008338 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80082d4:	f001 fbee 	bl	8009ab4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082d8:	9901      	ldr	r1, [sp, #4]
 80082da:	f104 0010 	add.w	r0, r4, #16
 80082de:	f000 fecf 	bl	8009080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082e2:	4620      	mov	r0, r4
 80082e4:	f7ff feaa 	bl	800803c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082e8:	f000 fd38 	bl	8008d5c <xTaskResumeAll>
 80082ec:	b360      	cbz	r0, 8008348 <xQueueGenericSend+0x144>
 80082ee:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80082f0:	f001 fbc0 	bl	8009a74 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80082f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d301      	bcc.n	8008300 <xQueueGenericSend+0xfc>
 80082fc:	2f02      	cmp	r7, #2
 80082fe:	d1bf      	bne.n	8008280 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008300:	463a      	mov	r2, r7
 8008302:	4641      	mov	r1, r8
 8008304:	4620      	mov	r0, r4
 8008306:	f7ff fe50 	bl	8007faa <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800830a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800830c:	b11b      	cbz	r3, 8008316 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800830e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008312:	f000 feef 	bl	80090f4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8008316:	b148      	cbz	r0, 800832c <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 8008318:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800831c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008320:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800832c:	f001 fbc2 	bl	8009ab4 <vPortExitCritical>
				return pdPASS;
 8008330:	2001      	movs	r0, #1
}
 8008332:	b005      	add	sp, #20
 8008334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8008338:	f001 fbbc 	bl	8009ab4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800833c:	4620      	mov	r0, r4
 800833e:	f7ff fe7d 	bl	800803c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008342:	f000 fd0b 	bl	8008d5c <xTaskResumeAll>
 8008346:	e7d2      	b.n	80082ee <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8008348:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800834c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008350:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	e7c7      	b.n	80082ee <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800835e:	4620      	mov	r0, r4
 8008360:	f7ff fe6c 	bl	800803c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008364:	f000 fcfa 	bl	8008d5c <xTaskResumeAll>
 8008368:	e78e      	b.n	8008288 <xQueueGenericSend+0x84>

0800836a <xQueueGenericSendFromISR>:
{
 800836a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800836e:	4689      	mov	r9, r1
 8008370:	4690      	mov	r8, r2
 8008372:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008374:	4604      	mov	r4, r0
 8008376:	b940      	cbnz	r0, 800838a <xQueueGenericSendFromISR+0x20>
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	e7fe      	b.n	8008388 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800838a:	b951      	cbnz	r1, 80083a2 <xQueueGenericSendFromISR+0x38>
 800838c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800838e:	b143      	cbz	r3, 80083a2 <xQueueGenericSendFromISR+0x38>
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	e7fe      	b.n	80083a0 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083a2:	2f02      	cmp	r7, #2
 80083a4:	d10b      	bne.n	80083be <xQueueGenericSendFromISR+0x54>
 80083a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d008      	beq.n	80083be <xQueueGenericSendFromISR+0x54>
 80083ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	e7fe      	b.n	80083bc <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083be:	f001 fc35 	bl	8009c2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083c2:	f3ef 8611 	mrs	r6, BASEPRI
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80083d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80083da:	429a      	cmp	r2, r3
 80083dc:	d301      	bcc.n	80083e2 <xQueueGenericSendFromISR+0x78>
 80083de:	2f02      	cmp	r7, #2
 80083e0:	d122      	bne.n	8008428 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 80083e2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083e6:	463a      	mov	r2, r7
 80083e8:	4649      	mov	r1, r9
 80083ea:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80083ec:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083ee:	f7ff fddc 	bl	8007faa <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80083f2:	1c6b      	adds	r3, r5, #1
 80083f4:	d113      	bne.n	800841e <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083f8:	b90b      	cbnz	r3, 80083fe <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 80083fa:	2001      	movs	r0, #1
 80083fc:	e00b      	b.n	8008416 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008402:	f000 fe77 	bl	80090f4 <xTaskRemoveFromEventList>
 8008406:	2800      	cmp	r0, #0
 8008408:	d0f7      	beq.n	80083fa <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 800840a:	f1b8 0f00 	cmp.w	r8, #0
 800840e:	d0f4      	beq.n	80083fa <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008410:	2001      	movs	r0, #1
 8008412:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008416:	f386 8811 	msr	BASEPRI, r6
}
 800841a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800841e:	3501      	adds	r5, #1
 8008420:	b26d      	sxtb	r5, r5
 8008422:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8008426:	e7e8      	b.n	80083fa <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 8008428:	2000      	movs	r0, #0
 800842a:	e7f4      	b.n	8008416 <xQueueGenericSendFromISR+0xac>

0800842c <xQueueReceive>:
{
 800842c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008430:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8008432:	4604      	mov	r4, r0
{
 8008434:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008436:	b940      	cbnz	r0, 800844a <xQueueReceive+0x1e>
	__asm volatile
 8008438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	e7fe      	b.n	8008448 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800844a:	b951      	cbnz	r1, 8008462 <xQueueReceive+0x36>
 800844c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800844e:	b143      	cbz	r3, 8008462 <xQueueReceive+0x36>
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	e7fe      	b.n	8008460 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008462:	f000 fed7 	bl	8009214 <xTaskGetSchedulerState>
 8008466:	4606      	mov	r6, r0
 8008468:	b950      	cbnz	r0, 8008480 <xQueueReceive+0x54>
 800846a:	9b01      	ldr	r3, [sp, #4]
 800846c:	b14b      	cbz	r3, 8008482 <xQueueReceive+0x56>
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	e7fe      	b.n	800847e <xQueueReceive+0x52>
 8008480:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008482:	f04f 0800 	mov.w	r8, #0
 8008486:	e03d      	b.n	8008504 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008488:	9d01      	ldr	r5, [sp, #4]
 800848a:	b91d      	cbnz	r5, 8008494 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 800848c:	f001 fb12 	bl	8009ab4 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8008490:	2000      	movs	r0, #0
 8008492:	e056      	b.n	8008542 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 8008494:	b916      	cbnz	r6, 800849c <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008496:	a802      	add	r0, sp, #8
 8008498:	f000 fe6e 	bl	8009178 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800849c:	f001 fb0a 	bl	8009ab4 <vPortExitCritical>
		vTaskSuspendAll();
 80084a0:	f000 fbbc 	bl	8008c1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084a4:	f001 fae6 	bl	8009a74 <vPortEnterCritical>
 80084a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80084ac:	2bff      	cmp	r3, #255	; 0xff
 80084ae:	bf08      	it	eq
 80084b0:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80084b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80084b8:	2bff      	cmp	r3, #255	; 0xff
 80084ba:	bf08      	it	eq
 80084bc:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80084c0:	f001 faf8 	bl	8009ab4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084c4:	a901      	add	r1, sp, #4
 80084c6:	a802      	add	r0, sp, #8
 80084c8:	f000 fe62 	bl	8009190 <xTaskCheckForTimeOut>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d141      	bne.n	8008554 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084d0:	4620      	mov	r0, r4
 80084d2:	f7ff fd5f 	bl	8007f94 <prvIsQueueEmpty>
 80084d6:	b3b8      	cbz	r0, 8008548 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084d8:	9901      	ldr	r1, [sp, #4]
 80084da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80084de:	f000 fdcf 	bl	8009080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084e2:	4620      	mov	r0, r4
 80084e4:	f7ff fdaa 	bl	800803c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084e8:	f000 fc38 	bl	8008d5c <xTaskResumeAll>
 80084ec:	b948      	cbnz	r0, 8008502 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 80084ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80084f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008504:	f001 fab6 	bl	8009a74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008508:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800850a:	2d00      	cmp	r5, #0
 800850c:	d0bc      	beq.n	8008488 <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800850e:	4639      	mov	r1, r7
 8008510:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008512:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008514:	f7ff fd7e 	bl	8008014 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008518:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800851a:	6923      	ldr	r3, [r4, #16]
 800851c:	b173      	cbz	r3, 800853c <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800851e:	f104 0010 	add.w	r0, r4, #16
 8008522:	f000 fde7 	bl	80090f4 <xTaskRemoveFromEventList>
 8008526:	b148      	cbz	r0, 800853c <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8008528:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800852c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008530:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800853c:	f001 faba 	bl	8009ab4 <vPortExitCritical>
				return pdPASS;
 8008540:	2001      	movs	r0, #1
}
 8008542:	b004      	add	sp, #16
 8008544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8008548:	4620      	mov	r0, r4
 800854a:	f7ff fd77 	bl	800803c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800854e:	f000 fc05 	bl	8008d5c <xTaskResumeAll>
 8008552:	e7d6      	b.n	8008502 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8008554:	4620      	mov	r0, r4
 8008556:	f7ff fd71 	bl	800803c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800855a:	f000 fbff 	bl	8008d5c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800855e:	4620      	mov	r0, r4
 8008560:	f7ff fd18 	bl	8007f94 <prvIsQueueEmpty>
 8008564:	2800      	cmp	r0, #0
 8008566:	d0cc      	beq.n	8008502 <xQueueReceive+0xd6>
 8008568:	e792      	b.n	8008490 <xQueueReceive+0x64>

0800856a <xQueueReceiveFromISR>:
{
 800856a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800856e:	4689      	mov	r9, r1
 8008570:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8008572:	4605      	mov	r5, r0
 8008574:	b940      	cbnz	r0, 8008588 <xQueueReceiveFromISR+0x1e>
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	e7fe      	b.n	8008586 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008588:	b951      	cbnz	r1, 80085a0 <xQueueReceiveFromISR+0x36>
 800858a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800858c:	b143      	cbz	r3, 80085a0 <xQueueReceiveFromISR+0x36>
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	e7fe      	b.n	800859e <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085a0:	f001 fb44 	bl	8009c2c <vPortValidateInterruptPriority>
	__asm volatile
 80085a4:	f3ef 8711 	mrs	r7, BASEPRI
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085b8:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085ba:	b31c      	cbz	r4, 8008604 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 80085bc:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085c0:	4649      	mov	r1, r9
 80085c2:	4628      	mov	r0, r5
			const int8_t cRxLock = pxQueue->cRxLock;
 80085c4:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085c6:	f7ff fd25 	bl	8008014 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085ca:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 80085cc:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085ce:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80085d0:	d113      	bne.n	80085fa <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085d2:	692b      	ldr	r3, [r5, #16]
 80085d4:	b90b      	cbnz	r3, 80085da <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 80085d6:	2001      	movs	r0, #1
 80085d8:	e00b      	b.n	80085f2 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085da:	f105 0010 	add.w	r0, r5, #16
 80085de:	f000 fd89 	bl	80090f4 <xTaskRemoveFromEventList>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d0f7      	beq.n	80085d6 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 80085e6:	f1b8 0f00 	cmp.w	r8, #0
 80085ea:	d0f4      	beq.n	80085d6 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80085ec:	2001      	movs	r0, #1
 80085ee:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80085f2:	f387 8811 	msr	BASEPRI, r7
}
 80085f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80085fa:	3601      	adds	r6, #1
 80085fc:	b276      	sxtb	r6, r6
 80085fe:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8008602:	e7e8      	b.n	80085d6 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8008604:	4620      	mov	r0, r4
 8008606:	e7f4      	b.n	80085f2 <xQueueReceiveFromISR+0x88>

08008608 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008608:	2300      	movs	r3, #0
	{
 800860a:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800860c:	4a06      	ldr	r2, [pc, #24]	; (8008628 <vQueueAddToRegistry+0x20>)
 800860e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8008612:	b92c      	cbnz	r4, 8008620 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008614:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008618:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800861c:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800861e:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008620:	3301      	adds	r3, #1
 8008622:	2b08      	cmp	r3, #8
 8008624:	d1f3      	bne.n	800860e <vQueueAddToRegistry+0x6>
 8008626:	e7fa      	b.n	800861e <vQueueAddToRegistry+0x16>
 8008628:	20002b24 	.word	0x20002b24

0800862c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800862c:	b570      	push	{r4, r5, r6, lr}
 800862e:	4604      	mov	r4, r0
 8008630:	460d      	mov	r5, r1
 8008632:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008634:	f001 fa1e 	bl	8009a74 <vPortEnterCritical>
 8008638:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800863c:	2bff      	cmp	r3, #255	; 0xff
 800863e:	bf04      	itt	eq
 8008640:	2300      	moveq	r3, #0
 8008642:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8008646:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800864a:	2bff      	cmp	r3, #255	; 0xff
 800864c:	bf04      	itt	eq
 800864e:	2300      	moveq	r3, #0
 8008650:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8008654:	f001 fa2e 	bl	8009ab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800865a:	b92b      	cbnz	r3, 8008668 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800865c:	4632      	mov	r2, r6
 800865e:	4629      	mov	r1, r5
 8008660:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008664:	f000 fd26 	bl	80090b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008668:	4620      	mov	r0, r4
	}
 800866a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800866e:	f7ff bce5 	b.w	800803c <prvUnlockQueue>
	...

08008674 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008678:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800867a:	f001 f9fb 	bl	8009a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800867e:	4b2f      	ldr	r3, [pc, #188]	; (800873c <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8008680:	4e2f      	ldr	r6, [pc, #188]	; (8008740 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	4f2f      	ldr	r7, [pc, #188]	; (8008744 <prvAddNewTaskToReadyList+0xd0>)
 8008686:	3201      	adds	r2, #1
 8008688:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800868a:	6835      	ldr	r5, [r6, #0]
 800868c:	2d00      	cmp	r5, #0
 800868e:	d14a      	bne.n	8008726 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008690:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d11f      	bne.n	80086d8 <prvAddNewTaskToReadyList+0x64>
 8008698:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800869a:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800869c:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800869e:	f7ff fc38 	bl	8007f12 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086a2:	2d07      	cmp	r5, #7
 80086a4:	f108 0814 	add.w	r8, r8, #20
 80086a8:	d1f7      	bne.n	800869a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086aa:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8008748 <prvAddNewTaskToReadyList+0xd4>
	vListInitialise( &xDelayedTaskList2 );
 80086ae:	4d27      	ldr	r5, [pc, #156]	; (800874c <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 80086b0:	4640      	mov	r0, r8
 80086b2:	f7ff fc2e 	bl	8007f12 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086b6:	4628      	mov	r0, r5
 80086b8:	f7ff fc2b 	bl	8007f12 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086bc:	4824      	ldr	r0, [pc, #144]	; (8008750 <prvAddNewTaskToReadyList+0xdc>)
 80086be:	f7ff fc28 	bl	8007f12 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086c2:	4824      	ldr	r0, [pc, #144]	; (8008754 <prvAddNewTaskToReadyList+0xe0>)
 80086c4:	f7ff fc25 	bl	8007f12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086c8:	4823      	ldr	r0, [pc, #140]	; (8008758 <prvAddNewTaskToReadyList+0xe4>)
 80086ca:	f7ff fc22 	bl	8007f12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086ce:	4b23      	ldr	r3, [pc, #140]	; (800875c <prvAddNewTaskToReadyList+0xe8>)
 80086d0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086d4:	4b22      	ldr	r3, [pc, #136]	; (8008760 <prvAddNewTaskToReadyList+0xec>)
 80086d6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80086d8:	4a22      	ldr	r2, [pc, #136]	; (8008764 <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 80086da:	4923      	ldr	r1, [pc, #140]	; (8008768 <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 80086dc:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80086de:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80086e0:	3301      	adds	r3, #1
 80086e2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80086e4:	2301      	movs	r3, #1
 80086e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80086e8:	4093      	lsls	r3, r2
 80086ea:	4303      	orrs	r3, r0
 80086ec:	2014      	movs	r0, #20
 80086ee:	600b      	str	r3, [r1, #0]
 80086f0:	fb00 7002 	mla	r0, r0, r2, r7
 80086f4:	1d21      	adds	r1, r4, #4
 80086f6:	f7ff fc1a 	bl	8007f2e <vListInsertEnd>
	taskEXIT_CRITICAL();
 80086fa:	f001 f9db 	bl	8009ab4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80086fe:	4b1b      	ldr	r3, [pc, #108]	; (800876c <prvAddNewTaskToReadyList+0xf8>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	b173      	cbz	r3, 8008722 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008704:	6833      	ldr	r3, [r6, #0]
 8008706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008708:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800870a:	429a      	cmp	r2, r3
 800870c:	d209      	bcs.n	8008722 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800870e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008716:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	f3bf 8f6f 	isb	sy
}
 8008722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008726:	4b11      	ldr	r3, [pc, #68]	; (800876c <prvAddNewTaskToReadyList+0xf8>)
 8008728:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800872a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if( xSchedulerRunning == pdFALSE )
 800872c:	2a00      	cmp	r2, #0
 800872e:	d1d3      	bne.n	80086d8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008730:	6832      	ldr	r2, [r6, #0]
 8008732:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008734:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008736:	bf98      	it	ls
 8008738:	6034      	strls	r4, [r6, #0]
 800873a:	e7cd      	b.n	80086d8 <prvAddNewTaskToReadyList+0x64>
 800873c:	20002bfc 	.word	0x20002bfc
 8008740:	20002b64 	.word	0x20002b64
 8008744:	20002b70 	.word	0x20002b70
 8008748:	20002c14 	.word	0x20002c14
 800874c:	20002c28 	.word	0x20002c28
 8008750:	20002c44 	.word	0x20002c44
 8008754:	20002c70 	.word	0x20002c70
 8008758:	20002c5c 	.word	0x20002c5c
 800875c:	20002b68 	.word	0x20002b68
 8008760:	20002b6c 	.word	0x20002b6c
 8008764:	20002c0c 	.word	0x20002c0c
 8008768:	20002c10 	.word	0x20002c10
 800876c:	20002c58 	.word	0x20002c58

08008770 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008772:	4b1a      	ldr	r3, [pc, #104]	; (80087dc <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008774:	4d1a      	ldr	r5, [pc, #104]	; (80087e0 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8008776:	4606      	mov	r6, r0
const TickType_t xConstTickCount = xTickCount;
 8008778:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800877a:	6828      	ldr	r0, [r5, #0]
{
 800877c:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800877e:	3004      	adds	r0, #4
 8008780:	f7ff fbf8 	bl	8007f74 <uxListRemove>
 8008784:	b940      	cbnz	r0, 8008798 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008786:	682a      	ldr	r2, [r5, #0]
 8008788:	4916      	ldr	r1, [pc, #88]	; (80087e4 <prvAddCurrentTaskToDelayedList+0x74>)
 800878a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800878c:	2201      	movs	r2, #1
 800878e:	680b      	ldr	r3, [r1, #0]
 8008790:	4082      	lsls	r2, r0
 8008792:	ea23 0302 	bic.w	r3, r3, r2
 8008796:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008798:	1c73      	adds	r3, r6, #1
 800879a:	d107      	bne.n	80087ac <prvAddCurrentTaskToDelayedList+0x3c>
 800879c:	b137      	cbz	r7, 80087ac <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800879e:	6829      	ldr	r1, [r5, #0]
 80087a0:	4811      	ldr	r0, [pc, #68]	; (80087e8 <prvAddCurrentTaskToDelayedList+0x78>)
 80087a2:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087a8:	f7ff bbc1 	b.w	8007f2e <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	19a4      	adds	r4, r4, r6
 80087b0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087b2:	d307      	bcc.n	80087c4 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087b4:	4b0d      	ldr	r3, [pc, #52]	; (80087ec <prvAddCurrentTaskToDelayedList+0x7c>)
 80087b6:	6818      	ldr	r0, [r3, #0]
 80087b8:	6829      	ldr	r1, [r5, #0]
}
 80087ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087be:	3104      	adds	r1, #4
 80087c0:	f7ff bbc1 	b.w	8007f46 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087c4:	4b0a      	ldr	r3, [pc, #40]	; (80087f0 <prvAddCurrentTaskToDelayedList+0x80>)
 80087c6:	6818      	ldr	r0, [r3, #0]
 80087c8:	6829      	ldr	r1, [r5, #0]
 80087ca:	3104      	adds	r1, #4
 80087cc:	f7ff fbbb 	bl	8007f46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087d0:	4b08      	ldr	r3, [pc, #32]	; (80087f4 <prvAddCurrentTaskToDelayedList+0x84>)
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80087d6:	bf88      	it	hi
 80087d8:	601c      	strhi	r4, [r3, #0]
}
 80087da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087dc:	20002c84 	.word	0x20002c84
 80087e0:	20002b64 	.word	0x20002b64
 80087e4:	20002c10 	.word	0x20002c10
 80087e8:	20002c5c 	.word	0x20002c5c
 80087ec:	20002b6c 	.word	0x20002b6c
 80087f0:	20002b68 	.word	0x20002b68
 80087f4:	20002c3c 	.word	0x20002c3c

080087f8 <prvTaskIsTaskSuspended>:
		configASSERT( xTask );
 80087f8:	b940      	cbnz	r0, 800880c <prvTaskIsTaskSuspended+0x14>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	e7fe      	b.n	800880a <prvTaskIsTaskSuspended+0x12>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800880c:	6942      	ldr	r2, [r0, #20]
 800880e:	4b06      	ldr	r3, [pc, #24]	; (8008828 <prvTaskIsTaskSuspended+0x30>)
 8008810:	429a      	cmp	r2, r3
 8008812:	d107      	bne.n	8008824 <prvTaskIsTaskSuspended+0x2c>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008814:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8008816:	4b05      	ldr	r3, [pc, #20]	; (800882c <prvTaskIsTaskSuspended+0x34>)
 8008818:	4298      	cmp	r0, r3
 800881a:	d003      	beq.n	8008824 <prvTaskIsTaskSuspended+0x2c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800881c:	fab0 f080 	clz	r0, r0
 8008820:	0940      	lsrs	r0, r0, #5
 8008822:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8008824:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008826:	4770      	bx	lr
 8008828:	20002c5c 	.word	0x20002c5c
 800882c:	20002c44 	.word	0x20002c44

08008830 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008830:	4a06      	ldr	r2, [pc, #24]	; (800884c <prvResetNextTaskUnblockTime+0x1c>)
 8008832:	6813      	ldr	r3, [r2, #0]
 8008834:	6819      	ldr	r1, [r3, #0]
 8008836:	4b06      	ldr	r3, [pc, #24]	; (8008850 <prvResetNextTaskUnblockTime+0x20>)
 8008838:	b919      	cbnz	r1, 8008842 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800883a:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800883e:	601a      	str	r2, [r3, #0]
}
 8008840:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008842:	6812      	ldr	r2, [r2, #0]
 8008844:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008846:	68d2      	ldr	r2, [r2, #12]
 8008848:	6852      	ldr	r2, [r2, #4]
 800884a:	e7f8      	b.n	800883e <prvResetNextTaskUnblockTime+0xe>
 800884c:	20002b68 	.word	0x20002b68
 8008850:	20002c3c 	.word	0x20002c3c

08008854 <prvDeleteTCB>:
	{
 8008854:	b510      	push	{r4, lr}
 8008856:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008858:	304c      	adds	r0, #76	; 0x4c
 800885a:	f001 fe23 	bl	800a4a4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800885e:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 8008862:	b93b      	cbnz	r3, 8008874 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8008864:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008866:	f001 fac7 	bl	8009df8 <vPortFree>
				vPortFree( pxTCB );
 800886a:	4620      	mov	r0, r4
	}
 800886c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008870:	f001 bac2 	b.w	8009df8 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008874:	2b01      	cmp	r3, #1
 8008876:	d0f8      	beq.n	800886a <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008878:	2b02      	cmp	r3, #2
 800887a:	d008      	beq.n	800888e <prvDeleteTCB+0x3a>
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	e7fe      	b.n	800888c <prvDeleteTCB+0x38>
	}
 800888e:	bd10      	pop	{r4, pc}

08008890 <prvIdleTask>:
{
 8008890:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008892:	4c13      	ldr	r4, [pc, #76]	; (80088e0 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008894:	4f13      	ldr	r7, [pc, #76]	; (80088e4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8008896:	4d14      	ldr	r5, [pc, #80]	; (80088e8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	b973      	cbnz	r3, 80088ba <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800889c:	4b13      	ldr	r3, [pc, #76]	; (80088ec <prvIdleTask+0x5c>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d9f8      	bls.n	8008896 <prvIdleTask+0x6>
				taskYIELD();
 80088a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80088a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	e7ed      	b.n	8008896 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80088ba:	f001 f8db 	bl	8009a74 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088c2:	1d30      	adds	r0, r6, #4
 80088c4:	f7ff fb56 	bl	8007f74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80088d4:	f001 f8ee 	bl	8009ab4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80088d8:	4630      	mov	r0, r6
 80088da:	f7ff ffbb 	bl	8008854 <prvDeleteTCB>
 80088de:	e7db      	b.n	8008898 <prvIdleTask+0x8>
 80088e0:	20002c00 	.word	0x20002c00
 80088e4:	20002c70 	.word	0x20002c70
 80088e8:	20002bfc 	.word	0x20002bfc
 80088ec:	20002b70 	.word	0x20002b70

080088f0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80088f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f4:	4607      	mov	r7, r0
 80088f6:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80088fa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80088fe:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8008900:	3a01      	subs	r2, #1
 8008902:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008906:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008908:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800890c:	1e4b      	subs	r3, r1, #1
 800890e:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8008912:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008914:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8008918:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 800891c:	b108      	cbz	r0, 8008922 <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800891e:	428b      	cmp	r3, r1
 8008920:	d1f8      	bne.n	8008914 <prvInitialiseNewTask.constprop.0+0x24>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008922:	9d08      	ldr	r5, [sp, #32]
 8008924:	f04f 0a00 	mov.w	sl, #0
 8008928:	2d06      	cmp	r5, #6
 800892a:	bf28      	it	cs
 800892c:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800892e:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8008930:	e9c4 5a11 	strd	r5, sl, [r4, #68]	; 0x44
	pxNewTCB->uxPriority = uxPriority;
 8008934:	62e5      	str	r5, [r4, #44]	; 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008936:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800893a:	f7ff faf5 	bl	8007f28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800893e:	f104 0018 	add.w	r0, r4, #24
 8008942:	f7ff faf1 	bl	8007f28 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008946:	224c      	movs	r2, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008948:	f1c5 0507 	rsb	r5, r5, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800894c:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800894e:	f8c4 a098 	str.w	sl, [r4, #152]	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008952:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008954:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008956:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008958:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800895a:	f884 a09c 	strb.w	sl, [r4, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800895e:	f001 fd73 	bl	800a448 <memset>
 8008962:	4b0a      	ldr	r3, [pc, #40]	; (800898c <prvInitialiseNewTask.constprop.0+0x9c>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008964:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008966:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800896a:	6523      	str	r3, [r4, #80]	; 0x50
 800896c:	33d0      	adds	r3, #208	; 0xd0
 800896e:	6562      	str	r2, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008970:	4630      	mov	r0, r6
 8008972:	464a      	mov	r2, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008974:	65a3      	str	r3, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008976:	f001 f853 	bl	8009a20 <pxPortInitialiseStack>
 800897a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800897c:	f1b8 0f00 	cmp.w	r8, #0
 8008980:	d001      	beq.n	8008986 <prvInitialiseNewTask.constprop.0+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008982:	f8c8 4000 	str.w	r4, [r8]
}
 8008986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800898a:	bf00      	nop
 800898c:	200045b0 	.word	0x200045b0

08008990 <xTaskCreateStatic>:
	{
 8008990:	b570      	push	{r4, r5, r6, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008998:	b945      	cbnz	r5, 80089ac <xTaskCreateStatic+0x1c>
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	e7fe      	b.n	80089aa <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80089ac:	b944      	cbnz	r4, 80089c0 <xTaskCreateStatic+0x30>
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	e7fe      	b.n	80089be <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80089c0:	26a0      	movs	r6, #160	; 0xa0
 80089c2:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089c4:	9e05      	ldr	r6, [sp, #20]
 80089c6:	2ea0      	cmp	r6, #160	; 0xa0
 80089c8:	d008      	beq.n	80089dc <xTaskCreateStatic+0x4c>
 80089ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	e7fe      	b.n	80089da <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089dc:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089de:	2502      	movs	r5, #2
 80089e0:	f884 509d 	strb.w	r5, [r4, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089e4:	ad04      	add	r5, sp, #16
 80089e6:	9501      	str	r5, [sp, #4]
 80089e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80089ea:	9402      	str	r4, [sp, #8]
 80089ec:	9500      	str	r5, [sp, #0]
 80089ee:	f7ff ff7f 	bl	80088f0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089f2:	4620      	mov	r0, r4
 80089f4:	f7ff fe3e 	bl	8008674 <prvAddNewTaskToReadyList>
	}
 80089f8:	9804      	ldr	r0, [sp, #16]
 80089fa:	b006      	add	sp, #24
 80089fc:	bd70      	pop	{r4, r5, r6, pc}

080089fe <xTaskCreate>:
	{
 80089fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a02:	4607      	mov	r7, r0
 8008a04:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a06:	0090      	lsls	r0, r2, #2
	{
 8008a08:	4688      	mov	r8, r1
 8008a0a:	4616      	mov	r6, r2
 8008a0c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a0e:	f001 f961 	bl	8009cd4 <pvPortMalloc>
			if( pxStack != NULL )
 8008a12:	4605      	mov	r5, r0
 8008a14:	b1e8      	cbz	r0, 8008a52 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008a16:	20a0      	movs	r0, #160	; 0xa0
 8008a18:	f001 f95c 	bl	8009cd4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	b1a8      	cbz	r0, 8008a4c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a20:	2300      	movs	r3, #0
 8008a22:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8008a28:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a2a:	9301      	str	r3, [sp, #4]
 8008a2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a2e:	4632      	mov	r2, r6
 8008a30:	4641      	mov	r1, r8
 8008a32:	9002      	str	r0, [sp, #8]
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	4638      	mov	r0, r7
 8008a38:	464b      	mov	r3, r9
 8008a3a:	f7ff ff59 	bl	80088f0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f7ff fe18 	bl	8008674 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a44:	2001      	movs	r0, #1
	}
 8008a46:	b005      	add	sp, #20
 8008a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	f001 f9d3 	bl	8009df8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a52:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008a56:	e7f6      	b.n	8008a46 <xTaskCreate+0x48>

08008a58 <vTaskResume>:
	{
 8008a58:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	b940      	cbnz	r0, 8008a70 <vTaskResume+0x18>
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	e7fe      	b.n	8008a6e <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8008a70:	4d17      	ldr	r5, [pc, #92]	; (8008ad0 <vTaskResume+0x78>)
 8008a72:	682b      	ldr	r3, [r5, #0]
 8008a74:	4283      	cmp	r3, r0
 8008a76:	d02a      	beq.n	8008ace <vTaskResume+0x76>
			taskENTER_CRITICAL();
 8008a78:	f000 fffc 	bl	8009a74 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f7ff febb 	bl	80087f8 <prvTaskIsTaskSuspended>
 8008a82:	b300      	cbz	r0, 8008ac6 <vTaskResume+0x6e>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008a84:	1d26      	adds	r6, r4, #4
 8008a86:	4630      	mov	r0, r6
 8008a88:	f7ff fa74 	bl	8007f74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	4911      	ldr	r1, [pc, #68]	; (8008ad4 <vTaskResume+0x7c>)
 8008a90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008a92:	6808      	ldr	r0, [r1, #0]
 8008a94:	4093      	lsls	r3, r2
 8008a96:	4303      	orrs	r3, r0
 8008a98:	2014      	movs	r0, #20
 8008a9a:	600b      	str	r3, [r1, #0]
 8008a9c:	4b0e      	ldr	r3, [pc, #56]	; (8008ad8 <vTaskResume+0x80>)
 8008a9e:	4631      	mov	r1, r6
 8008aa0:	fb00 3002 	mla	r0, r0, r2, r3
 8008aa4:	f7ff fa43 	bl	8007f2e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d309      	bcc.n	8008ac6 <vTaskResume+0x6e>
						taskYIELD_IF_USING_PREEMPTION();
 8008ab2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	f3bf 8f6f 	isb	sy
	}
 8008ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8008aca:	f000 bff3 	b.w	8009ab4 <vPortExitCritical>
	}
 8008ace:	bd70      	pop	{r4, r5, r6, pc}
 8008ad0:	20002b64 	.word	0x20002b64
 8008ad4:	20002c10 	.word	0x20002c10
 8008ad8:	20002b70 	.word	0x20002b70

08008adc <xTaskResumeFromISR>:
	{
 8008adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 8008ade:	4605      	mov	r5, r0
 8008ae0:	b940      	cbnz	r0, 8008af4 <xTaskResumeFromISR+0x18>
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	e7fe      	b.n	8008af2 <xTaskResumeFromISR+0x16>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008af4:	f001 f89a 	bl	8009c2c <vPortValidateInterruptPriority>
	__asm volatile
 8008af8:	f3ef 8711 	mrs	r7, BASEPRI
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f7ff fe73 	bl	80087f8 <prvTaskIsTaskSuspended>
 8008b12:	4604      	mov	r4, r0
 8008b14:	b1e0      	cbz	r0, 8008b50 <xTaskResumeFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b16:	4b14      	ldr	r3, [pc, #80]	; (8008b68 <xTaskResumeFromISR+0x8c>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	b9eb      	cbnz	r3, 8008b58 <xTaskResumeFromISR+0x7c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b1c:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <xTaskResumeFromISR+0x90>)
 8008b1e:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8008b20:	681b      	ldr	r3, [r3, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b22:	1d2e      	adds	r6, r5, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b26:	4630      	mov	r0, r6
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b28:	429c      	cmp	r4, r3
 8008b2a:	bf34      	ite	cc
 8008b2c:	2400      	movcc	r4, #0
 8008b2e:	2401      	movcs	r4, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b30:	f7ff fa20 	bl	8007f74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b34:	2301      	movs	r3, #1
 8008b36:	490e      	ldr	r1, [pc, #56]	; (8008b70 <xTaskResumeFromISR+0x94>)
 8008b38:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8008b3a:	6808      	ldr	r0, [r1, #0]
 8008b3c:	4093      	lsls	r3, r2
 8008b3e:	4303      	orrs	r3, r0
 8008b40:	2014      	movs	r0, #20
 8008b42:	600b      	str	r3, [r1, #0]
 8008b44:	4b0b      	ldr	r3, [pc, #44]	; (8008b74 <xTaskResumeFromISR+0x98>)
 8008b46:	4631      	mov	r1, r6
 8008b48:	fb00 3002 	mla	r0, r0, r2, r3
 8008b4c:	f7ff f9ef 	bl	8007f2e <vListInsertEnd>
	__asm volatile
 8008b50:	f387 8811 	msr	BASEPRI, r7
	}
 8008b54:	4620      	mov	r0, r4
 8008b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008b58:	4807      	ldr	r0, [pc, #28]	; (8008b78 <xTaskResumeFromISR+0x9c>)
 8008b5a:	f105 0118 	add.w	r1, r5, #24
 8008b5e:	f7ff f9e6 	bl	8007f2e <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 8008b62:	2400      	movs	r4, #0
 8008b64:	e7f4      	b.n	8008b50 <xTaskResumeFromISR+0x74>
 8008b66:	bf00      	nop
 8008b68:	20002c08 	.word	0x20002c08
 8008b6c:	20002b64 	.word	0x20002b64
 8008b70:	20002c10 	.word	0x20002c10
 8008b74:	20002b70 	.word	0x20002b70
 8008b78:	20002c44 	.word	0x20002c44

08008b7c <vTaskStartScheduler>:
{
 8008b7c:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b7e:	2400      	movs	r4, #0
{
 8008b80:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b82:	aa07      	add	r2, sp, #28
 8008b84:	a906      	add	r1, sp, #24
 8008b86:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b88:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b8c:	f7f9 fb06 	bl	800219c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b90:	9b05      	ldr	r3, [sp, #20]
 8008b92:	9a07      	ldr	r2, [sp, #28]
 8008b94:	9302      	str	r3, [sp, #8]
 8008b96:	9b06      	ldr	r3, [sp, #24]
 8008b98:	4919      	ldr	r1, [pc, #100]	; (8008c00 <vTaskStartScheduler+0x84>)
 8008b9a:	e9cd 4300 	strd	r4, r3, [sp]
 8008b9e:	4819      	ldr	r0, [pc, #100]	; (8008c04 <vTaskStartScheduler+0x88>)
 8008ba0:	4623      	mov	r3, r4
 8008ba2:	f7ff fef5 	bl	8008990 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008ba6:	b340      	cbz	r0, 8008bfa <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8008ba8:	f000 fd22 	bl	80095f0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008bac:	2801      	cmp	r0, #1
 8008bae:	d119      	bne.n	8008be4 <vTaskStartScheduler+0x68>
	__asm volatile
 8008bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb4:	f383 8811 	msr	BASEPRI, r3
 8008bb8:	f3bf 8f6f 	isb	sy
 8008bbc:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008bc0:	4b11      	ldr	r3, [pc, #68]	; (8008c08 <vTaskStartScheduler+0x8c>)
 8008bc2:	4a12      	ldr	r2, [pc, #72]	; (8008c0c <vTaskStartScheduler+0x90>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	334c      	adds	r3, #76	; 0x4c
 8008bc8:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bca:	f04f 32ff 	mov.w	r2, #4294967295
 8008bce:	4b10      	ldr	r3, [pc, #64]	; (8008c10 <vTaskStartScheduler+0x94>)
 8008bd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008bd2:	4b10      	ldr	r3, [pc, #64]	; (8008c14 <vTaskStartScheduler+0x98>)
 8008bd4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008bd6:	4b10      	ldr	r3, [pc, #64]	; (8008c18 <vTaskStartScheduler+0x9c>)
 8008bd8:	601c      	str	r4, [r3, #0]
}
 8008bda:	b008      	add	sp, #32
 8008bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008be0:	f000 bfc8 	b.w	8009b74 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008be4:	3001      	adds	r0, #1
 8008be6:	d108      	bne.n	8008bfa <vTaskStartScheduler+0x7e>
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	e7fe      	b.n	8008bf8 <vTaskStartScheduler+0x7c>
}
 8008bfa:	b008      	add	sp, #32
 8008bfc:	bd10      	pop	{r4, pc}
 8008bfe:	bf00      	nop
 8008c00:	0800b936 	.word	0x0800b936
 8008c04:	08008891 	.word	0x08008891
 8008c08:	20002b64 	.word	0x20002b64
 8008c0c:	20000068 	.word	0x20000068
 8008c10:	20002c3c 	.word	0x20002c3c
 8008c14:	20002c58 	.word	0x20002c58
 8008c18:	20002c84 	.word	0x20002c84

08008c1c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008c1c:	4a02      	ldr	r2, [pc, #8]	; (8008c28 <vTaskSuspendAll+0xc>)
 8008c1e:	6813      	ldr	r3, [r2, #0]
 8008c20:	3301      	adds	r3, #1
 8008c22:	6013      	str	r3, [r2, #0]
}
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	20002c08 	.word	0x20002c08

08008c2c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008c2c:	4b01      	ldr	r3, [pc, #4]	; (8008c34 <xTaskGetTickCount+0x8>)
 8008c2e:	6818      	ldr	r0, [r3, #0]
}
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	20002c84 	.word	0x20002c84

08008c38 <xTaskIncrementTick>:
{
 8008c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c3c:	4b3c      	ldr	r3, [pc, #240]	; (8008d30 <xTaskIncrementTick+0xf8>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d16e      	bne.n	8008d22 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c44:	4b3b      	ldr	r3, [pc, #236]	; (8008d34 <xTaskIncrementTick+0xfc>)
 8008c46:	681d      	ldr	r5, [r3, #0]
 8008c48:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008c4a:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c4c:	b9bd      	cbnz	r5, 8008c7e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008c4e:	4b3a      	ldr	r3, [pc, #232]	; (8008d38 <xTaskIncrementTick+0x100>)
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	6812      	ldr	r2, [r2, #0]
 8008c54:	b142      	cbz	r2, 8008c68 <xTaskIncrementTick+0x30>
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	e7fe      	b.n	8008c66 <xTaskIncrementTick+0x2e>
 8008c68:	4a34      	ldr	r2, [pc, #208]	; (8008d3c <xTaskIncrementTick+0x104>)
 8008c6a:	6819      	ldr	r1, [r3, #0]
 8008c6c:	6810      	ldr	r0, [r2, #0]
 8008c6e:	6018      	str	r0, [r3, #0]
 8008c70:	6011      	str	r1, [r2, #0]
 8008c72:	4a33      	ldr	r2, [pc, #204]	; (8008d40 <xTaskIncrementTick+0x108>)
 8008c74:	6813      	ldr	r3, [r2, #0]
 8008c76:	3301      	adds	r3, #1
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	f7ff fdd9 	bl	8008830 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c7e:	4e31      	ldr	r6, [pc, #196]	; (8008d44 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8008c80:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c82:	6833      	ldr	r3, [r6, #0]
 8008c84:	4f30      	ldr	r7, [pc, #192]	; (8008d48 <xTaskIncrementTick+0x110>)
 8008c86:	42ab      	cmp	r3, r5
 8008c88:	d910      	bls.n	8008cac <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c8a:	2214      	movs	r2, #20
 8008c8c:	4b2f      	ldr	r3, [pc, #188]	; (8008d4c <xTaskIncrementTick+0x114>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c92:	4353      	muls	r3, r2
 8008c94:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	bf28      	it	cs
 8008c9a:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8008c9c:	4b2c      	ldr	r3, [pc, #176]	; (8008d50 <xTaskIncrementTick+0x118>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8008ca0:	2b00      	cmp	r3, #0
}
 8008ca2:	bf0c      	ite	eq
 8008ca4:	4620      	moveq	r0, r4
 8008ca6:	2001      	movne	r0, #1
 8008ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cac:	f8df a088 	ldr.w	sl, [pc, #136]	; 8008d38 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8008cb0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8008d54 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cb4:	f8da 3000 	ldr.w	r3, [sl]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	b91b      	cbnz	r3, 8008cc4 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc0:	6033      	str	r3, [r6, #0]
					break;
 8008cc2:	e7e2      	b.n	8008c8a <xTaskIncrementTick+0x52>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008cc4:	f8da 3000 	ldr.w	r3, [sl]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cce:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008cd2:	4295      	cmp	r5, r2
 8008cd4:	d201      	bcs.n	8008cda <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8008cd6:	6032      	str	r2, [r6, #0]
						break;
 8008cd8:	e7d7      	b.n	8008c8a <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cda:	f10b 0804 	add.w	r8, fp, #4
 8008cde:	4640      	mov	r0, r8
 8008ce0:	f7ff f948 	bl	8007f74 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ce4:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8008ce8:	b11a      	cbz	r2, 8008cf2 <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cea:	f10b 0018 	add.w	r0, fp, #24
 8008cee:	f7ff f941 	bl	8007f74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8008cf8:	f8d9 3000 	ldr.w	r3, [r9]
 8008cfc:	4082      	lsls	r2, r0
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	f8c9 2000 	str.w	r2, [r9]
 8008d04:	2214      	movs	r2, #20
 8008d06:	4641      	mov	r1, r8
 8008d08:	fb02 7000 	mla	r0, r2, r0, r7
 8008d0c:	f7ff f90f 	bl	8007f2e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d10:	4b0e      	ldr	r3, [pc, #56]	; (8008d4c <xTaskIncrementTick+0x114>)
 8008d12:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8008d16:	6819      	ldr	r1, [r3, #0]
 8008d18:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	bf28      	it	cs
 8008d1e:	2401      	movcs	r4, #1
 8008d20:	e7c8      	b.n	8008cb4 <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 8008d22:	4a0d      	ldr	r2, [pc, #52]	; (8008d58 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 8008d24:	2400      	movs	r4, #0
		++uxPendedTicks;
 8008d26:	6813      	ldr	r3, [r2, #0]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	6013      	str	r3, [r2, #0]
 8008d2c:	e7b6      	b.n	8008c9c <xTaskIncrementTick+0x64>
 8008d2e:	bf00      	nop
 8008d30:	20002c08 	.word	0x20002c08
 8008d34:	20002c84 	.word	0x20002c84
 8008d38:	20002b68 	.word	0x20002b68
 8008d3c:	20002b6c 	.word	0x20002b6c
 8008d40:	20002c40 	.word	0x20002c40
 8008d44:	20002c3c 	.word	0x20002c3c
 8008d48:	20002b70 	.word	0x20002b70
 8008d4c:	20002b64 	.word	0x20002b64
 8008d50:	20002c88 	.word	0x20002c88
 8008d54:	20002c10 	.word	0x20002c10
 8008d58:	20002c04 	.word	0x20002c04

08008d5c <xTaskResumeAll>:
{
 8008d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8008d60:	4c31      	ldr	r4, [pc, #196]	; (8008e28 <xTaskResumeAll+0xcc>)
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	b943      	cbnz	r3, 8008d78 <xTaskResumeAll+0x1c>
 8008d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	e7fe      	b.n	8008d76 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008d78:	f000 fe7c 	bl	8009a74 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008d7c:	6823      	ldr	r3, [r4, #0]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d82:	6824      	ldr	r4, [r4, #0]
 8008d84:	b12c      	cbz	r4, 8008d92 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008d86:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008d88:	f000 fe94 	bl	8009ab4 <vPortExitCritical>
}
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d92:	4b26      	ldr	r3, [pc, #152]	; (8008e2c <xTaskResumeAll+0xd0>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0f5      	beq.n	8008d86 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d9a:	4d25      	ldr	r5, [pc, #148]	; (8008e30 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8008d9c:	4e25      	ldr	r6, [pc, #148]	; (8008e34 <xTaskResumeAll+0xd8>)
 8008d9e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008e38 <xTaskResumeAll+0xdc>
 8008da2:	e01f      	b.n	8008de4 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008da4:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 8008da6:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008da8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008daa:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dae:	f104 0018 	add.w	r0, r4, #24
 8008db2:	f7ff f8df 	bl	8007f74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008db6:	4648      	mov	r0, r9
 8008db8:	f7ff f8dc 	bl	8007f74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008dbc:	2014      	movs	r0, #20
 8008dbe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008dc0:	6831      	ldr	r1, [r6, #0]
 8008dc2:	fa07 f302 	lsl.w	r3, r7, r2
 8008dc6:	430b      	orrs	r3, r1
 8008dc8:	fb00 8002 	mla	r0, r0, r2, r8
 8008dcc:	4649      	mov	r1, r9
 8008dce:	6033      	str	r3, [r6, #0]
 8008dd0:	f7ff f8ad 	bl	8007f2e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dd4:	4b19      	ldr	r3, [pc, #100]	; (8008e3c <xTaskResumeAll+0xe0>)
 8008dd6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d301      	bcc.n	8008de4 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8008de0:	4b17      	ldr	r3, [pc, #92]	; (8008e40 <xTaskResumeAll+0xe4>)
 8008de2:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008de4:	682b      	ldr	r3, [r5, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1dc      	bne.n	8008da4 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008dea:	b10c      	cbz	r4, 8008df0 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8008dec:	f7ff fd20 	bl	8008830 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008df0:	4d14      	ldr	r5, [pc, #80]	; (8008e44 <xTaskResumeAll+0xe8>)
 8008df2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008df4:	b144      	cbz	r4, 8008e08 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8008df6:	2701      	movs	r7, #1
 8008df8:	4e11      	ldr	r6, [pc, #68]	; (8008e40 <xTaskResumeAll+0xe4>)
							if( xTaskIncrementTick() != pdFALSE )
 8008dfa:	f7ff ff1d 	bl	8008c38 <xTaskIncrementTick>
 8008dfe:	b100      	cbz	r0, 8008e02 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8008e00:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008e02:	3c01      	subs	r4, #1
 8008e04:	d1f9      	bne.n	8008dfa <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8008e06:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008e08:	4b0d      	ldr	r3, [pc, #52]	; (8008e40 <xTaskResumeAll+0xe4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d0ba      	beq.n	8008d86 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8008e10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e18:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008e24:	2401      	movs	r4, #1
 8008e26:	e7af      	b.n	8008d88 <xTaskResumeAll+0x2c>
 8008e28:	20002c08 	.word	0x20002c08
 8008e2c:	20002bfc 	.word	0x20002bfc
 8008e30:	20002c44 	.word	0x20002c44
 8008e34:	20002c10 	.word	0x20002c10
 8008e38:	20002b70 	.word	0x20002b70
 8008e3c:	20002b64 	.word	0x20002b64
 8008e40:	20002c88 	.word	0x20002c88
 8008e44:	20002c04 	.word	0x20002c04

08008e48 <vTaskDelayUntil>:
	{
 8008e48:	b510      	push	{r4, lr}
		configASSERT( pxPreviousWakeTime );
 8008e4a:	b940      	cbnz	r0, 8008e5e <vTaskDelayUntil+0x16>
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	e7fe      	b.n	8008e5c <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008e5e:	b941      	cbnz	r1, 8008e72 <vTaskDelayUntil+0x2a>
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	e7fe      	b.n	8008e70 <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 8008e72:	4b18      	ldr	r3, [pc, #96]	; (8008ed4 <vTaskDelayUntil+0x8c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	b143      	cbz	r3, 8008e8a <vTaskDelayUntil+0x42>
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	e7fe      	b.n	8008e88 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 8008e8a:	f7ff fec7 	bl	8008c1c <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8008e8e:	4b12      	ldr	r3, [pc, #72]	; (8008ed8 <vTaskDelayUntil+0x90>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008e90:	6804      	ldr	r4, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 8008e92:	681a      	ldr	r2, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008e94:	1863      	adds	r3, r4, r1
 8008e96:	bf2c      	ite	cs
 8008e98:	2101      	movcs	r1, #1
 8008e9a:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8008e9c:	4294      	cmp	r4, r2
 8008e9e:	d90f      	bls.n	8008ec0 <vTaskDelayUntil+0x78>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008ea0:	b979      	cbnz	r1, 8008ec2 <vTaskDelayUntil+0x7a>
			*pxPreviousWakeTime = xTimeToWake;
 8008ea2:	6003      	str	r3, [r0, #0]
		xAlreadyYielded = xTaskResumeAll();
 8008ea4:	f7ff ff5a 	bl	8008d5c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008ea8:	b948      	cbnz	r0, 8008ebe <vTaskDelayUntil+0x76>
			portYIELD_WITHIN_API();
 8008eaa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	f3bf 8f6f 	isb	sy
	}
 8008ebe:	bd10      	pop	{r4, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008ec0:	b909      	cbnz	r1, 8008ec6 <vTaskDelayUntil+0x7e>
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d2ed      	bcs.n	8008ea2 <vTaskDelayUntil+0x5a>
			*pxPreviousWakeTime = xTimeToWake;
 8008ec6:	6003      	str	r3, [r0, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008ec8:	2100      	movs	r1, #0
 8008eca:	1a98      	subs	r0, r3, r2
 8008ecc:	f7ff fc50 	bl	8008770 <prvAddCurrentTaskToDelayedList>
 8008ed0:	e7e8      	b.n	8008ea4 <vTaskDelayUntil+0x5c>
 8008ed2:	bf00      	nop
 8008ed4:	20002c08 	.word	0x20002c08
 8008ed8:	20002c84 	.word	0x20002c84

08008edc <vTaskDelay>:
	{
 8008edc:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ede:	b950      	cbnz	r0, 8008ef6 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008ee0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	f3bf 8f6f 	isb	sy
	}
 8008ef4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008ef6:	4b0a      	ldr	r3, [pc, #40]	; (8008f20 <vTaskDelay+0x44>)
 8008ef8:	6819      	ldr	r1, [r3, #0]
 8008efa:	b141      	cbz	r1, 8008f0e <vTaskDelay+0x32>
 8008efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	e7fe      	b.n	8008f0c <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008f0e:	f7ff fe85 	bl	8008c1c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f12:	f7ff fc2d 	bl	8008770 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008f16:	f7ff ff21 	bl	8008d5c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	d0e0      	beq.n	8008ee0 <vTaskDelay+0x4>
 8008f1e:	e7e9      	b.n	8008ef4 <vTaskDelay+0x18>
 8008f20:	20002c08 	.word	0x20002c08

08008f24 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f24:	4b1a      	ldr	r3, [pc, #104]	; (8008f90 <vTaskSwitchContext+0x6c>)
{
 8008f26:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4b1a      	ldr	r3, [pc, #104]	; (8008f94 <vTaskSwitchContext+0x70>)
 8008f2c:	b112      	cbz	r2, 8008f34 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008f2e:	2201      	movs	r2, #1
 8008f30:	601a      	str	r2, [r3, #0]
}
 8008f32:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8008f34:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008f36:	4b18      	ldr	r3, [pc, #96]	; (8008f98 <vTaskSwitchContext+0x74>)
 8008f38:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008f3a:	fab2 f282 	clz	r2, r2
 8008f3e:	2314      	movs	r3, #20
 8008f40:	b2d2      	uxtb	r2, r2
 8008f42:	f1c2 021f 	rsb	r2, r2, #31
 8008f46:	4353      	muls	r3, r2
 8008f48:	4914      	ldr	r1, [pc, #80]	; (8008f9c <vTaskSwitchContext+0x78>)
 8008f4a:	58cc      	ldr	r4, [r1, r3]
 8008f4c:	18c8      	adds	r0, r1, r3
 8008f4e:	b944      	cbnz	r4, 8008f62 <vTaskSwitchContext+0x3e>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	e7fe      	b.n	8008f60 <vTaskSwitchContext+0x3c>
 8008f62:	6844      	ldr	r4, [r0, #4]
 8008f64:	3308      	adds	r3, #8
 8008f66:	6864      	ldr	r4, [r4, #4]
 8008f68:	440b      	add	r3, r1
 8008f6a:	429c      	cmp	r4, r3
 8008f6c:	bf08      	it	eq
 8008f6e:	6863      	ldreq	r3, [r4, #4]
 8008f70:	6044      	str	r4, [r0, #4]
 8008f72:	bf08      	it	eq
 8008f74:	6043      	streq	r3, [r0, #4]
 8008f76:	2314      	movs	r3, #20
 8008f78:	fb03 1102 	mla	r1, r3, r2, r1
 8008f7c:	684b      	ldr	r3, [r1, #4]
 8008f7e:	68da      	ldr	r2, [r3, #12]
 8008f80:	4b07      	ldr	r3, [pc, #28]	; (8008fa0 <vTaskSwitchContext+0x7c>)
 8008f82:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a07      	ldr	r2, [pc, #28]	; (8008fa4 <vTaskSwitchContext+0x80>)
 8008f88:	334c      	adds	r3, #76	; 0x4c
 8008f8a:	6013      	str	r3, [r2, #0]
}
 8008f8c:	e7d1      	b.n	8008f32 <vTaskSwitchContext+0xe>
 8008f8e:	bf00      	nop
 8008f90:	20002c08 	.word	0x20002c08
 8008f94:	20002c88 	.word	0x20002c88
 8008f98:	20002c10 	.word	0x20002c10
 8008f9c:	20002b70 	.word	0x20002b70
 8008fa0:	20002b64 	.word	0x20002b64
 8008fa4:	20000068 	.word	0x20000068

08008fa8 <vTaskSuspend>:
	{
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	4604      	mov	r4, r0
 8008fac:	4d2d      	ldr	r5, [pc, #180]	; (8009064 <vTaskSuspend+0xbc>)
		taskENTER_CRITICAL();
 8008fae:	f000 fd61 	bl	8009a74 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008fb2:	b904      	cbnz	r4, 8008fb6 <vTaskSuspend+0xe>
 8008fb4:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fb6:	1d26      	adds	r6, r4, #4
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f7fe ffdb 	bl	8007f74 <uxListRemove>
 8008fbe:	b960      	cbnz	r0, 8008fda <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008fc0:	2314      	movs	r3, #20
 8008fc2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008fc4:	4a28      	ldr	r2, [pc, #160]	; (8009068 <vTaskSuspend+0xc0>)
 8008fc6:	4343      	muls	r3, r0
 8008fc8:	58d3      	ldr	r3, [r2, r3]
 8008fca:	b933      	cbnz	r3, 8008fda <vTaskSuspend+0x32>
 8008fcc:	2201      	movs	r2, #1
 8008fce:	4927      	ldr	r1, [pc, #156]	; (800906c <vTaskSuspend+0xc4>)
 8008fd0:	4082      	lsls	r2, r0
 8008fd2:	680b      	ldr	r3, [r1, #0]
 8008fd4:	ea23 0302 	bic.w	r3, r3, r2
 8008fd8:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008fdc:	b11b      	cbz	r3, 8008fe6 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fde:	f104 0018 	add.w	r0, r4, #24
 8008fe2:	f7fe ffc7 	bl	8007f74 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	4821      	ldr	r0, [pc, #132]	; (8009070 <vTaskSuspend+0xc8>)
 8008fea:	f7fe ffa0 	bl	8007f2e <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008fee:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
		if( xSchedulerRunning != pdFALSE )
 8008ff2:	4e20      	ldr	r6, [pc, #128]	; (8009074 <vTaskSuspend+0xcc>)
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008ff4:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ff6:	bf04      	itt	eq
 8008ff8:	2300      	moveq	r3, #0
 8008ffa:	f884 309c 	strbeq.w	r3, [r4, #156]	; 0x9c
		taskEXIT_CRITICAL();
 8008ffe:	f000 fd59 	bl	8009ab4 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8009002:	6833      	ldr	r3, [r6, #0]
 8009004:	b12b      	cbz	r3, 8009012 <vTaskSuspend+0x6a>
			taskENTER_CRITICAL();
 8009006:	f000 fd35 	bl	8009a74 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 800900a:	f7ff fc11 	bl	8008830 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 800900e:	f000 fd51 	bl	8009ab4 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 8009012:	682b      	ldr	r3, [r5, #0]
 8009014:	42a3      	cmp	r3, r4
 8009016:	d117      	bne.n	8009048 <vTaskSuspend+0xa0>
			if( xSchedulerRunning != pdFALSE )
 8009018:	6833      	ldr	r3, [r6, #0]
 800901a:	b1b3      	cbz	r3, 800904a <vTaskSuspend+0xa2>
				configASSERT( uxSchedulerSuspended == 0 );
 800901c:	4b16      	ldr	r3, [pc, #88]	; (8009078 <vTaskSuspend+0xd0>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	b143      	cbz	r3, 8009034 <vTaskSuspend+0x8c>
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	e7fe      	b.n	8009032 <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
 8009034:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800903c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	f3bf 8f6f 	isb	sy
	}
 8009048:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800904a:	4a09      	ldr	r2, [pc, #36]	; (8009070 <vTaskSuspend+0xc8>)
 800904c:	6811      	ldr	r1, [r2, #0]
 800904e:	4a0b      	ldr	r2, [pc, #44]	; (800907c <vTaskSuspend+0xd4>)
 8009050:	6812      	ldr	r2, [r2, #0]
 8009052:	4291      	cmp	r1, r2
 8009054:	d101      	bne.n	800905a <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	e7f6      	b.n	8009048 <vTaskSuspend+0xa0>
	}
 800905a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 800905e:	f7ff bf61 	b.w	8008f24 <vTaskSwitchContext>
 8009062:	bf00      	nop
 8009064:	20002b64 	.word	0x20002b64
 8009068:	20002b70 	.word	0x20002b70
 800906c:	20002c10 	.word	0x20002c10
 8009070:	20002c5c 	.word	0x20002c5c
 8009074:	20002c58 	.word	0x20002c58
 8009078:	20002c08 	.word	0x20002c08
 800907c:	20002bfc 	.word	0x20002bfc

08009080 <vTaskPlaceOnEventList>:
{
 8009080:	b510      	push	{r4, lr}
 8009082:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8009084:	b940      	cbnz	r0, 8009098 <vTaskPlaceOnEventList+0x18>
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	e7fe      	b.n	8009096 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009098:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <vTaskPlaceOnEventList+0x30>)
 800909a:	6819      	ldr	r1, [r3, #0]
 800909c:	3118      	adds	r1, #24
 800909e:	f7fe ff52 	bl	8007f46 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090a2:	4620      	mov	r0, r4
}
 80090a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090a8:	2101      	movs	r1, #1
 80090aa:	f7ff bb61 	b.w	8008770 <prvAddCurrentTaskToDelayedList>
 80090ae:	bf00      	nop
 80090b0:	20002b64 	.word	0x20002b64

080090b4 <vTaskPlaceOnEventListRestricted>:
	{
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	460d      	mov	r5, r1
 80090b8:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80090ba:	b940      	cbnz	r0, 80090ce <vTaskPlaceOnEventListRestricted+0x1a>
 80090bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	e7fe      	b.n	80090cc <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090ce:	4b08      	ldr	r3, [pc, #32]	; (80090f0 <vTaskPlaceOnEventListRestricted+0x3c>)
 80090d0:	6819      	ldr	r1, [r3, #0]
 80090d2:	3118      	adds	r1, #24
 80090d4:	f7fe ff2b 	bl	8007f2e <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80090d8:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80090da:	4621      	mov	r1, r4
 80090dc:	bf08      	it	eq
 80090de:	4628      	moveq	r0, r5
	}
 80090e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80090e4:	bf18      	it	ne
 80090e6:	f04f 30ff 	movne.w	r0, #4294967295
 80090ea:	f7ff bb41 	b.w	8008770 <prvAddCurrentTaskToDelayedList>
 80090ee:	bf00      	nop
 80090f0:	20002b64 	.word	0x20002b64

080090f4 <xTaskRemoveFromEventList>:
{
 80090f4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80090f6:	68c3      	ldr	r3, [r0, #12]
 80090f8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80090fa:	b944      	cbnz	r4, 800910e <xTaskRemoveFromEventList+0x1a>
 80090fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	e7fe      	b.n	800910c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800910e:	f104 0518 	add.w	r5, r4, #24
 8009112:	4628      	mov	r0, r5
 8009114:	f7fe ff2e 	bl	8007f74 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009118:	4b11      	ldr	r3, [pc, #68]	; (8009160 <xTaskRemoveFromEventList+0x6c>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	b9e3      	cbnz	r3, 8009158 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800911e:	1d25      	adds	r5, r4, #4
 8009120:	4628      	mov	r0, r5
 8009122:	f7fe ff27 	bl	8007f74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009126:	2301      	movs	r3, #1
 8009128:	490e      	ldr	r1, [pc, #56]	; (8009164 <xTaskRemoveFromEventList+0x70>)
 800912a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800912c:	6808      	ldr	r0, [r1, #0]
 800912e:	4093      	lsls	r3, r2
 8009130:	4303      	orrs	r3, r0
 8009132:	2014      	movs	r0, #20
 8009134:	600b      	str	r3, [r1, #0]
 8009136:	4629      	mov	r1, r5
 8009138:	4b0b      	ldr	r3, [pc, #44]	; (8009168 <xTaskRemoveFromEventList+0x74>)
 800913a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800913e:	f7fe fef6 	bl	8007f2e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009142:	4b0a      	ldr	r3, [pc, #40]	; (800916c <xTaskRemoveFromEventList+0x78>)
 8009144:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800914c:	bf85      	ittet	hi
 800914e:	2001      	movhi	r0, #1
 8009150:	4b07      	ldrhi	r3, [pc, #28]	; (8009170 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8009152:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8009154:	6018      	strhi	r0, [r3, #0]
}
 8009156:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009158:	4629      	mov	r1, r5
 800915a:	4806      	ldr	r0, [pc, #24]	; (8009174 <xTaskRemoveFromEventList+0x80>)
 800915c:	e7ef      	b.n	800913e <xTaskRemoveFromEventList+0x4a>
 800915e:	bf00      	nop
 8009160:	20002c08 	.word	0x20002c08
 8009164:	20002c10 	.word	0x20002c10
 8009168:	20002b70 	.word	0x20002b70
 800916c:	20002b64 	.word	0x20002b64
 8009170:	20002c88 	.word	0x20002c88
 8009174:	20002c44 	.word	0x20002c44

08009178 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009178:	4b03      	ldr	r3, [pc, #12]	; (8009188 <vTaskInternalSetTimeOutState+0x10>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800917e:	4b03      	ldr	r3, [pc, #12]	; (800918c <vTaskInternalSetTimeOutState+0x14>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6043      	str	r3, [r0, #4]
}
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	20002c40 	.word	0x20002c40
 800918c:	20002c84 	.word	0x20002c84

08009190 <xTaskCheckForTimeOut>:
{
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8009194:	4605      	mov	r5, r0
 8009196:	b940      	cbnz	r0, 80091aa <xTaskCheckForTimeOut+0x1a>
 8009198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919c:	f383 8811 	msr	BASEPRI, r3
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	e7fe      	b.n	80091a8 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80091aa:	b941      	cbnz	r1, 80091be <xTaskCheckForTimeOut+0x2e>
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	e7fe      	b.n	80091bc <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80091be:	f000 fc59 	bl	8009a74 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80091c2:	4b0f      	ldr	r3, [pc, #60]	; (8009200 <xTaskCheckForTimeOut+0x70>)
 80091c4:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	1c5a      	adds	r2, r3, #1
 80091ca:	d010      	beq.n	80091ee <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091cc:	480d      	ldr	r0, [pc, #52]	; (8009204 <xTaskCheckForTimeOut+0x74>)
 80091ce:	682e      	ldr	r6, [r5, #0]
 80091d0:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091d2:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091d4:	4286      	cmp	r6, r0
 80091d6:	d001      	beq.n	80091dc <xTaskCheckForTimeOut+0x4c>
 80091d8:	428a      	cmp	r2, r1
 80091da:	d90f      	bls.n	80091fc <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091dc:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091de:	4283      	cmp	r3, r0
 80091e0:	d90a      	bls.n	80091f8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80091e2:	1a5b      	subs	r3, r3, r1
 80091e4:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091e6:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80091e8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091ea:	f7ff ffc5 	bl	8009178 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80091ee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80091f0:	f000 fc60 	bl	8009ab4 <vPortExitCritical>
}
 80091f4:	4620      	mov	r0, r4
 80091f6:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80091f8:	2300      	movs	r3, #0
 80091fa:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80091fc:	2401      	movs	r4, #1
 80091fe:	e7f7      	b.n	80091f0 <xTaskCheckForTimeOut+0x60>
 8009200:	20002c84 	.word	0x20002c84
 8009204:	20002c40 	.word	0x20002c40

08009208 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009208:	2201      	movs	r2, #1
 800920a:	4b01      	ldr	r3, [pc, #4]	; (8009210 <vTaskMissedYield+0x8>)
 800920c:	601a      	str	r2, [r3, #0]
}
 800920e:	4770      	bx	lr
 8009210:	20002c88 	.word	0x20002c88

08009214 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009214:	4b05      	ldr	r3, [pc, #20]	; (800922c <xTaskGetSchedulerState+0x18>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	b133      	cbz	r3, 8009228 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800921a:	4b05      	ldr	r3, [pc, #20]	; (8009230 <xTaskGetSchedulerState+0x1c>)
 800921c:	6818      	ldr	r0, [r3, #0]
 800921e:	fab0 f080 	clz	r0, r0
 8009222:	0940      	lsrs	r0, r0, #5
 8009224:	0040      	lsls	r0, r0, #1
 8009226:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009228:	2001      	movs	r0, #1
	}
 800922a:	4770      	bx	lr
 800922c:	20002c58 	.word	0x20002c58
 8009230:	20002c08 	.word	0x20002c08

08009234 <xTaskPriorityDisinherit>:
	{
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8009236:	4604      	mov	r4, r0
 8009238:	b908      	cbnz	r0, 800923e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800923a:	2000      	movs	r0, #0
	}
 800923c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800923e:	4b22      	ldr	r3, [pc, #136]	; (80092c8 <xTaskPriorityDisinherit+0x94>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4283      	cmp	r3, r0
 8009244:	d008      	beq.n	8009258 <xTaskPriorityDisinherit+0x24>
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	e7fe      	b.n	8009256 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8009258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800925a:	b943      	cbnz	r3, 800926e <xTaskPriorityDisinherit+0x3a>
 800925c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	e7fe      	b.n	800926c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800926e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009270:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8009272:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009274:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8009276:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009278:	d0df      	beq.n	800923a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1dd      	bne.n	800923a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800927e:	1d06      	adds	r6, r0, #4
 8009280:	4630      	mov	r0, r6
 8009282:	f7fe fe77 	bl	8007f74 <uxListRemove>
 8009286:	4f11      	ldr	r7, [pc, #68]	; (80092cc <xTaskPriorityDisinherit+0x98>)
 8009288:	4a11      	ldr	r2, [pc, #68]	; (80092d0 <xTaskPriorityDisinherit+0x9c>)
 800928a:	b950      	cbnz	r0, 80092a2 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800928c:	2314      	movs	r3, #20
 800928e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009290:	434b      	muls	r3, r1
 8009292:	58fb      	ldr	r3, [r7, r3]
 8009294:	b92b      	cbnz	r3, 80092a2 <xTaskPriorityDisinherit+0x6e>
 8009296:	2501      	movs	r5, #1
 8009298:	6813      	ldr	r3, [r2, #0]
 800929a:	408d      	lsls	r5, r1
 800929c:	ea23 0305 	bic.w	r3, r3, r5
 80092a0:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 80092a4:	2014      	movs	r0, #20
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092a6:	f1c3 0107 	rsb	r1, r3, #7
 80092aa:	61a1      	str	r1, [r4, #24]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092ac:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80092ae:	2401      	movs	r4, #1
 80092b0:	6811      	ldr	r1, [r2, #0]
 80092b2:	fa04 f503 	lsl.w	r5, r4, r3
 80092b6:	fb00 7003 	mla	r0, r0, r3, r7
 80092ba:	430d      	orrs	r5, r1
 80092bc:	4631      	mov	r1, r6
 80092be:	6015      	str	r5, [r2, #0]
 80092c0:	f7fe fe35 	bl	8007f2e <vListInsertEnd>
					xReturn = pdTRUE;
 80092c4:	4620      	mov	r0, r4
		return xReturn;
 80092c6:	e7b9      	b.n	800923c <xTaskPriorityDisinherit+0x8>
 80092c8:	20002b64 	.word	0x20002b64
 80092cc:	20002b70 	.word	0x20002b70
 80092d0:	20002c10 	.word	0x20002c10

080092d4 <xTaskNotifyWait>:
	{
 80092d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80092d8:	4c22      	ldr	r4, [pc, #136]	; (8009364 <xTaskNotifyWait+0x90>)
	{
 80092da:	461e      	mov	r6, r3
 80092dc:	4680      	mov	r8, r0
 80092de:	460f      	mov	r7, r1
 80092e0:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 80092e2:	f000 fbc7 	bl	8009a74 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d018      	beq.n	8009322 <xTaskNotifyWait+0x4e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80092f0:	2101      	movs	r1, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80092f2:	6822      	ldr	r2, [r4, #0]
 80092f4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80092f8:	ea23 0308 	bic.w	r3, r3, r8
 80092fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
				if( xTicksToWait > ( TickType_t ) 0 )
 8009306:	b166      	cbz	r6, 8009322 <xTaskNotifyWait+0x4e>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009308:	4630      	mov	r0, r6
 800930a:	f7ff fa31 	bl	8008770 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800930e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009316:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 8009322:	f000 fbc7 	bl	8009ab4 <vPortExitCritical>
		taskENTER_CRITICAL();
 8009326:	f000 fba5 	bl	8009a74 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800932a:	b11d      	cbz	r5, 8009334 <xTaskNotifyWait+0x60>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800932c:	6823      	ldr	r3, [r4, #0]
 800932e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009332:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800933a:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800933c:	bf03      	ittte	eq
 800933e:	6822      	ldreq	r2, [r4, #0]
				xReturn = pdTRUE;
 8009340:	2501      	moveq	r5, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009342:	f8d2 3098 	ldreq.w	r3, [r2, #152]	; 0x98
				xReturn = pdFALSE;
 8009346:	2500      	movne	r5, #0
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009348:	bf04      	itt	eq
 800934a:	43bb      	biceq	r3, r7
 800934c:	f8c2 3098 	streq.w	r3, [r2, #152]	; 0x98
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009350:	2200      	movs	r2, #0
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		taskEXIT_CRITICAL();
 8009358:	f000 fbac 	bl	8009ab4 <vPortExitCritical>
	}
 800935c:	4628      	mov	r0, r5
 800935e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009362:	bf00      	nop
 8009364:	20002b64 	.word	0x20002b64

08009368 <xTaskGenericNotify>:
	{
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	460f      	mov	r7, r1
 800936c:	4616      	mov	r6, r2
 800936e:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8009370:	4604      	mov	r4, r0
 8009372:	b940      	cbnz	r0, 8009386 <xTaskGenericNotify+0x1e>
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	e7fe      	b.n	8009384 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 8009386:	f000 fb75 	bl	8009a74 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800938a:	b115      	cbz	r5, 8009392 <xTaskGenericNotify+0x2a>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800938c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009390:	602b      	str	r3, [r5, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009392:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009394:	f894 509c 	ldrb.w	r5, [r4, #156]	; 0x9c
			switch( eAction )
 8009398:	1e72      	subs	r2, r6, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800939a:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800939c:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
			switch( eAction )
 80093a0:	2a03      	cmp	r2, #3
 80093a2:	d808      	bhi.n	80093b6 <xTaskGenericNotify+0x4e>
 80093a4:	e8df f002 	tbb	[pc, r2]
 80093a8:	12140e02 	.word	0x12140e02
					pxTCB->ulNotifiedValue |= ulValue;
 80093ac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80093b0:	433b      	orrs	r3, r7
					( pxTCB->ulNotifiedValue )++;
 80093b2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80093b6:	2d01      	cmp	r5, #1
 80093b8:	d00d      	beq.n	80093d6 <xTaskGenericNotify+0x6e>
	{
 80093ba:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 80093bc:	f000 fb7a 	bl	8009ab4 <vPortExitCritical>
	}
 80093c0:	4628      	mov	r0, r5
 80093c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 80093c4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80093c8:	3301      	adds	r3, #1
 80093ca:	e7f2      	b.n	80093b2 <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80093cc:	2d02      	cmp	r5, #2
 80093ce:	d030      	beq.n	8009432 <xTaskGenericNotify+0xca>
						pxTCB->ulNotifiedValue = ulValue;
 80093d0:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
 80093d4:	e7ef      	b.n	80093b6 <xTaskGenericNotify+0x4e>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093d6:	1d26      	adds	r6, r4, #4
 80093d8:	4630      	mov	r0, r6
 80093da:	f7fe fdcb 	bl	8007f74 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80093de:	4916      	ldr	r1, [pc, #88]	; (8009438 <xTaskGenericNotify+0xd0>)
 80093e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80093e2:	6808      	ldr	r0, [r1, #0]
 80093e4:	fa05 f302 	lsl.w	r3, r5, r2
 80093e8:	4303      	orrs	r3, r0
 80093ea:	2014      	movs	r0, #20
 80093ec:	600b      	str	r3, [r1, #0]
 80093ee:	4b13      	ldr	r3, [pc, #76]	; (800943c <xTaskGenericNotify+0xd4>)
 80093f0:	4631      	mov	r1, r6
 80093f2:	fb00 3002 	mla	r0, r0, r2, r3
 80093f6:	f7fe fd9a 	bl	8007f2e <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80093fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80093fc:	b143      	cbz	r3, 8009410 <xTaskGenericNotify+0xa8>
 80093fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	e7fe      	b.n	800940e <xTaskGenericNotify+0xa6>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009410:	4b0b      	ldr	r3, [pc, #44]	; (8009440 <xTaskGenericNotify+0xd8>)
 8009412:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009418:	429a      	cmp	r2, r3
 800941a:	d9ce      	bls.n	80093ba <xTaskGenericNotify+0x52>
					taskYIELD_IF_USING_PREEMPTION();
 800941c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009424:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	e7c4      	b.n	80093bc <xTaskGenericNotify+0x54>
						xReturn = pdFAIL;
 8009432:	2500      	movs	r5, #0
 8009434:	e7c2      	b.n	80093bc <xTaskGenericNotify+0x54>
 8009436:	bf00      	nop
 8009438:	20002c10 	.word	0x20002c10
 800943c:	20002b70 	.word	0x20002b70
 8009440:	20002b64 	.word	0x20002b64

08009444 <xTaskGenericNotifyFromISR>:
	{
 8009444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009448:	9f08      	ldr	r7, [sp, #32]
 800944a:	4689      	mov	r9, r1
 800944c:	4690      	mov	r8, r2
 800944e:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8009450:	4604      	mov	r4, r0
 8009452:	b940      	cbnz	r0, 8009466 <xTaskGenericNotifyFromISR+0x22>
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	e7fe      	b.n	8009464 <xTaskGenericNotifyFromISR+0x20>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009466:	f000 fbe1 	bl	8009c2c <vPortValidateInterruptPriority>
	__asm volatile
 800946a:	f3ef 8611 	mrs	r6, BASEPRI
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800947e:	b115      	cbz	r5, 8009486 <xTaskGenericNotifyFromISR+0x42>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009480:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009484:	602b      	str	r3, [r5, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009486:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009488:	f894 509c 	ldrb.w	r5, [r4, #156]	; 0x9c
			switch( eAction )
 800948c:	f108 32ff 	add.w	r2, r8, #4294967295
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009490:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009492:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
			switch( eAction )
 8009496:	2a03      	cmp	r2, #3
 8009498:	d809      	bhi.n	80094ae <xTaskGenericNotifyFromISR+0x6a>
 800949a:	e8df f002 	tbb	[pc, r2]
 800949e:	0f02      	.short	0x0f02
 80094a0:	1315      	.short	0x1315
					pxTCB->ulNotifiedValue |= ulValue;
 80094a2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80094a6:	ea43 0309 	orr.w	r3, r3, r9
					( pxTCB->ulNotifiedValue )++;
 80094aa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80094ae:	2d01      	cmp	r5, #1
 80094b0:	d00d      	beq.n	80094ce <xTaskGenericNotifyFromISR+0x8a>
	{
 80094b2:	2001      	movs	r0, #1
	__asm volatile
 80094b4:	f386 8811 	msr	BASEPRI, r6
	}
 80094b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 80094bc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80094c0:	3301      	adds	r3, #1
 80094c2:	e7f2      	b.n	80094aa <xTaskGenericNotifyFromISR+0x66>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80094c4:	2d02      	cmp	r5, #2
 80094c6:	d033      	beq.n	8009530 <xTaskGenericNotifyFromISR+0xec>
						pxTCB->ulNotifiedValue = ulValue;
 80094c8:	f8c4 9098 	str.w	r9, [r4, #152]	; 0x98
 80094cc:	e7ef      	b.n	80094ae <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80094ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80094d0:	b143      	cbz	r3, 80094e4 <xTaskGenericNotifyFromISR+0xa0>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	e7fe      	b.n	80094e2 <xTaskGenericNotifyFromISR+0x9e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094e4:	4b13      	ldr	r3, [pc, #76]	; (8009534 <xTaskGenericNotifyFromISR+0xf0>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	b9db      	cbnz	r3, 8009522 <xTaskGenericNotifyFromISR+0xde>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094ea:	f104 0804 	add.w	r8, r4, #4
 80094ee:	4640      	mov	r0, r8
 80094f0:	f7fe fd40 	bl	8007f74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094f4:	4a10      	ldr	r2, [pc, #64]	; (8009538 <xTaskGenericNotifyFromISR+0xf4>)
 80094f6:	2014      	movs	r0, #20
 80094f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80094fa:	6811      	ldr	r1, [r2, #0]
 80094fc:	409d      	lsls	r5, r3
 80094fe:	430d      	orrs	r5, r1
 8009500:	4641      	mov	r1, r8
 8009502:	6015      	str	r5, [r2, #0]
 8009504:	4a0d      	ldr	r2, [pc, #52]	; (800953c <xTaskGenericNotifyFromISR+0xf8>)
 8009506:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800950a:	f7fe fd10 	bl	8007f2e <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800950e:	4b0c      	ldr	r3, [pc, #48]	; (8009540 <xTaskGenericNotifyFromISR+0xfc>)
 8009510:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009516:	429a      	cmp	r2, r3
 8009518:	d9cb      	bls.n	80094b2 <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 800951a:	2001      	movs	r0, #1
 800951c:	b12f      	cbz	r7, 800952a <xTaskGenericNotifyFromISR+0xe6>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800951e:	6038      	str	r0, [r7, #0]
 8009520:	e7c8      	b.n	80094b4 <xTaskGenericNotifyFromISR+0x70>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009522:	4808      	ldr	r0, [pc, #32]	; (8009544 <xTaskGenericNotifyFromISR+0x100>)
 8009524:	f104 0118 	add.w	r1, r4, #24
 8009528:	e7ef      	b.n	800950a <xTaskGenericNotifyFromISR+0xc6>
						xYieldPending = pdTRUE;
 800952a:	4b07      	ldr	r3, [pc, #28]	; (8009548 <xTaskGenericNotifyFromISR+0x104>)
 800952c:	6018      	str	r0, [r3, #0]
 800952e:	e7c1      	b.n	80094b4 <xTaskGenericNotifyFromISR+0x70>
						xReturn = pdFAIL;
 8009530:	2000      	movs	r0, #0
 8009532:	e7bf      	b.n	80094b4 <xTaskGenericNotifyFromISR+0x70>
 8009534:	20002c08 	.word	0x20002c08
 8009538:	20002c10 	.word	0x20002c10
 800953c:	20002b70 	.word	0x20002b70
 8009540:	20002b64 	.word	0x20002b64
 8009544:	20002c44 	.word	0x20002c44
 8009548:	20002c88 	.word	0x20002c88

0800954c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800954c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800954e:	4c11      	ldr	r4, [pc, #68]	; (8009594 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8009550:	f000 fa90 	bl	8009a74 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009554:	6825      	ldr	r5, [r4, #0]
 8009556:	b9bd      	cbnz	r5, 8009588 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009558:	4f0f      	ldr	r7, [pc, #60]	; (8009598 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800955a:	4e10      	ldr	r6, [pc, #64]	; (800959c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800955c:	4638      	mov	r0, r7
 800955e:	f7fe fcd8 	bl	8007f12 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009562:	4630      	mov	r0, r6
 8009564:	f7fe fcd5 	bl	8007f12 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009568:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800956a:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 800956c:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800956e:	4b0d      	ldr	r3, [pc, #52]	; (80095a4 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009570:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8009572:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009574:	4a0c      	ldr	r2, [pc, #48]	; (80095a8 <prvCheckForValidListAndQueue+0x5c>)
 8009576:	4b0d      	ldr	r3, [pc, #52]	; (80095ac <prvCheckForValidListAndQueue+0x60>)
 8009578:	9500      	str	r5, [sp, #0]
 800957a:	f7fe fdd6 	bl	800812a <xQueueGenericCreateStatic>
 800957e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009580:	b110      	cbz	r0, 8009588 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009582:	490b      	ldr	r1, [pc, #44]	; (80095b0 <prvCheckForValidListAndQueue+0x64>)
 8009584:	f7ff f840 	bl	8008608 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8009588:	b003      	add	sp, #12
 800958a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800958e:	f000 ba91 	b.w	8009ab4 <vPortExitCritical>
 8009592:	bf00      	nop
 8009594:	20002d80 	.word	0x20002d80
 8009598:	20002d0c 	.word	0x20002d0c
 800959c:	20002d20 	.word	0x20002d20
 80095a0:	20002c8c 	.word	0x20002c8c
 80095a4:	20002c90 	.word	0x20002c90
 80095a8:	20002c94 	.word	0x20002c94
 80095ac:	20002d38 	.word	0x20002d38
 80095b0:	0800b93b 	.word	0x0800b93b

080095b4 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80095b4:	4291      	cmp	r1, r2
{
 80095b6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095b8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095ba:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80095bc:	d80a      	bhi.n	80095d4 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095be:	1ad2      	subs	r2, r2, r3
 80095c0:	6983      	ldr	r3, [r0, #24]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d20d      	bcs.n	80095e2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095c6:	4b08      	ldr	r3, [pc, #32]	; (80095e8 <prvInsertTimerInActiveList+0x34>)
 80095c8:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095ca:	6818      	ldr	r0, [r3, #0]
 80095cc:	f7fe fcbb 	bl	8007f46 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80095d0:	2000      	movs	r0, #0
}
 80095d2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d201      	bcs.n	80095dc <prvInsertTimerInActiveList+0x28>
 80095d8:	4299      	cmp	r1, r3
 80095da:	d202      	bcs.n	80095e2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095dc:	4b03      	ldr	r3, [pc, #12]	; (80095ec <prvInsertTimerInActiveList+0x38>)
 80095de:	1d01      	adds	r1, r0, #4
 80095e0:	e7f3      	b.n	80095ca <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80095e2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80095e4:	e7f5      	b.n	80095d2 <prvInsertTimerInActiveList+0x1e>
 80095e6:	bf00      	nop
 80095e8:	20002c90 	.word	0x20002c90
 80095ec:	20002c8c 	.word	0x20002c8c

080095f0 <xTimerCreateTimerTask>:
{
 80095f0:	b510      	push	{r4, lr}
 80095f2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80095f4:	f7ff ffaa 	bl	800954c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80095f8:	4b12      	ldr	r3, [pc, #72]	; (8009644 <xTimerCreateTimerTask+0x54>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	b1b3      	cbz	r3, 800962c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095fe:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009600:	aa07      	add	r2, sp, #28
 8009602:	a906      	add	r1, sp, #24
 8009604:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009606:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800960a:	f7f8 fdd3 	bl	80021b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800960e:	9b05      	ldr	r3, [sp, #20]
 8009610:	9a07      	ldr	r2, [sp, #28]
 8009612:	9302      	str	r3, [sp, #8]
 8009614:	9b06      	ldr	r3, [sp, #24]
 8009616:	490c      	ldr	r1, [pc, #48]	; (8009648 <xTimerCreateTimerTask+0x58>)
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	2302      	movs	r3, #2
 800961c:	480b      	ldr	r0, [pc, #44]	; (800964c <xTimerCreateTimerTask+0x5c>)
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	4623      	mov	r3, r4
 8009622:	f7ff f9b5 	bl	8008990 <xTaskCreateStatic>
 8009626:	4b0a      	ldr	r3, [pc, #40]	; (8009650 <xTimerCreateTimerTask+0x60>)
 8009628:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800962a:	b940      	cbnz	r0, 800963e <xTimerCreateTimerTask+0x4e>
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800963c:	e7fe      	b.n	800963c <xTimerCreateTimerTask+0x4c>
}
 800963e:	2001      	movs	r0, #1
 8009640:	b008      	add	sp, #32
 8009642:	bd10      	pop	{r4, pc}
 8009644:	20002d80 	.word	0x20002d80
 8009648:	0800b940 	.word	0x0800b940
 800964c:	08009819 	.word	0x08009819
 8009650:	20002d84 	.word	0x20002d84

08009654 <xTimerCreate>:
	{
 8009654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009658:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800965a:	202c      	movs	r0, #44	; 0x2c
	{
 800965c:	460d      	mov	r5, r1
 800965e:	4617      	mov	r7, r2
 8009660:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009662:	f000 fb37 	bl	8009cd4 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8009666:	4604      	mov	r4, r0
 8009668:	b1c0      	cbz	r0, 800969c <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800966a:	b945      	cbnz	r5, 800967e <xTimerCreate+0x2a>
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	e7fe      	b.n	800967c <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 800967e:	f7ff ff65 	bl	800954c <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009682:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009684:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009688:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 800968a:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 800968e:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009690:	1d20      	adds	r0, r4, #4
 8009692:	f7fe fc49 	bl	8007f28 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009696:	2300      	movs	r3, #0
 8009698:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 800969c:	4620      	mov	r0, r4
 800969e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080096a2 <xTimerCreateStatic>:
	{
 80096a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80096a6:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 80096a8:	232c      	movs	r3, #44	; 0x2c
 80096aa:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 80096ac:	9b01      	ldr	r3, [sp, #4]
	{
 80096ae:	4680      	mov	r8, r0
			configASSERT( xSize == sizeof( Timer_t ) );
 80096b0:	2b2c      	cmp	r3, #44	; 0x2c
	{
 80096b2:	460d      	mov	r5, r1
 80096b4:	4617      	mov	r7, r2
 80096b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 80096b8:	d008      	beq.n	80096cc <xTimerCreateStatic+0x2a>
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	e7fe      	b.n	80096ca <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 80096cc:	b944      	cbnz	r4, 80096e0 <xTimerCreateStatic+0x3e>
 80096ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	e7fe      	b.n	80096de <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80096e0:	b941      	cbnz	r1, 80096f4 <xTimerCreateStatic+0x52>
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	e7fe      	b.n	80096f2 <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 80096f4:	f7ff ff2a 	bl	800954c <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80096f8:	9b08      	ldr	r3, [sp, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80096fa:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80096fc:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
 80096fe:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 8009702:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8009706:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009708:	f7fe fc0e 	bl	8007f28 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800970c:	2301      	movs	r3, #1
	}
 800970e:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8009710:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 8009714:	b002      	add	sp, #8
 8009716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800971c <xTimerGenericCommand>:
{
 800971c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800971e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8009720:	4604      	mov	r4, r0
{
 8009722:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009724:	b940      	cbnz	r0, 8009738 <xTimerGenericCommand+0x1c>
 8009726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	e7fe      	b.n	8009736 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8009738:	4d0c      	ldr	r5, [pc, #48]	; (800976c <xTimerGenericCommand+0x50>)
 800973a:	6828      	ldr	r0, [r5, #0]
 800973c:	b178      	cbz	r0, 800975e <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800973e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009740:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009744:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009746:	dc0c      	bgt.n	8009762 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009748:	f7ff fd64 	bl	8009214 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800974c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800974e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009750:	bf14      	ite	ne
 8009752:	461a      	movne	r2, r3
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009754:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009756:	6828      	ldr	r0, [r5, #0]
 8009758:	a901      	add	r1, sp, #4
 800975a:	f7fe fd53 	bl	8008204 <xQueueGenericSend>
}
 800975e:	b004      	add	sp, #16
 8009760:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009762:	2300      	movs	r3, #0
 8009764:	a901      	add	r1, sp, #4
 8009766:	f7fe fe00 	bl	800836a <xQueueGenericSendFromISR>
 800976a:	e7f8      	b.n	800975e <xTimerGenericCommand+0x42>
 800976c:	20002d80 	.word	0x20002d80

08009770 <prvSampleTimeNow>:
{
 8009770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009774:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8009776:	f7ff fa59 	bl	8008c2c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800977a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800980c <prvSampleTimeNow+0x9c>
	xTimeNow = xTaskGetTickCount();
 800977e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8009780:	f8d8 3000 	ldr.w	r3, [r8]
 8009784:	4283      	cmp	r3, r0
 8009786:	d90b      	bls.n	80097a0 <prvSampleTimeNow+0x30>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009788:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800978c:	4f20      	ldr	r7, [pc, #128]	; (8009810 <prvSampleTimeNow+0xa0>)
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	b96a      	cbnz	r2, 80097b0 <prvSampleTimeNow+0x40>
	pxCurrentTimerList = pxOverflowTimerList;
 8009794:	4a1f      	ldr	r2, [pc, #124]	; (8009814 <prvSampleTimeNow+0xa4>)
 8009796:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009798:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800979a:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800979c:	2301      	movs	r3, #1
 800979e:	e000      	b.n	80097a2 <prvSampleTimeNow+0x32>
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 80097a4:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80097a6:	f8c8 5000 	str.w	r5, [r8]
}
 80097aa:	b003      	add	sp, #12
 80097ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097b0:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097b2:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097b4:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097b8:	f104 0b04 	add.w	fp, r4, #4
 80097bc:	4658      	mov	r0, fp
 80097be:	f7fe fbd9 	bl	8007f74 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097c4:	4620      	mov	r0, r4
 80097c6:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80097c8:	69e3      	ldr	r3, [r4, #28]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d1df      	bne.n	800978e <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097ce:	69a3      	ldr	r3, [r4, #24]
 80097d0:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 80097d2:	459a      	cmp	sl, r3
 80097d4:	d206      	bcs.n	80097e4 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097d6:	4659      	mov	r1, fp
 80097d8:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80097da:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097dc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097de:	f7fe fbb2 	bl	8007f46 <vListInsert>
 80097e2:	e7d4      	b.n	800978e <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097e4:	2300      	movs	r3, #0
 80097e6:	4652      	mov	r2, sl
 80097e8:	4619      	mov	r1, r3
 80097ea:	4620      	mov	r0, r4
 80097ec:	f8cd 9000 	str.w	r9, [sp]
 80097f0:	f7ff ff94 	bl	800971c <xTimerGenericCommand>
				configASSERT( xResult );
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d1ca      	bne.n	800978e <prvSampleTimeNow+0x1e>
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	e7fe      	b.n	8009808 <prvSampleTimeNow+0x98>
 800980a:	bf00      	nop
 800980c:	20002d34 	.word	0x20002d34
 8009810:	20002c8c 	.word	0x20002c8c
 8009814:	20002c90 	.word	0x20002c90

08009818 <prvTimerTask>:
{
 8009818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800981c:	4e65      	ldr	r6, [pc, #404]	; (80099b4 <prvTimerTask+0x19c>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800981e:	4f66      	ldr	r7, [pc, #408]	; (80099b8 <prvTimerTask+0x1a0>)
{
 8009820:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009822:	6833      	ldr	r3, [r6, #0]
 8009824:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009826:	2d00      	cmp	r5, #0
 8009828:	d033      	beq.n	8009892 <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8009830:	f7ff f9f4 	bl	8008c1c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009834:	a803      	add	r0, sp, #12
 8009836:	f7ff ff9b 	bl	8009770 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800983a:	9c03      	ldr	r4, [sp, #12]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800983c:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800983e:	2c00      	cmp	r4, #0
 8009840:	d177      	bne.n	8009932 <prvTimerTask+0x11a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009842:	2d00      	cmp	r5, #0
 8009844:	d05a      	beq.n	80098fc <prvTimerTask+0xe4>
 8009846:	4540      	cmp	r0, r8
 8009848:	d35e      	bcc.n	8009908 <prvTimerTask+0xf0>
				( void ) xTaskResumeAll();
 800984a:	f7ff fa87 	bl	8008d5c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800984e:	6833      	ldr	r3, [r6, #0]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009854:	1d28      	adds	r0, r5, #4
 8009856:	f7fe fb8d 	bl	8007f74 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800985a:	69eb      	ldr	r3, [r5, #28]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d11a      	bne.n	8009896 <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009860:	69a9      	ldr	r1, [r5, #24]
 8009862:	4643      	mov	r3, r8
 8009864:	464a      	mov	r2, r9
 8009866:	4628      	mov	r0, r5
 8009868:	4441      	add	r1, r8
 800986a:	f7ff fea3 	bl	80095b4 <prvInsertTimerInActiveList>
 800986e:	b190      	cbz	r0, 8009896 <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009870:	4623      	mov	r3, r4
 8009872:	4642      	mov	r2, r8
 8009874:	4621      	mov	r1, r4
 8009876:	4628      	mov	r0, r5
 8009878:	9400      	str	r4, [sp, #0]
 800987a:	f7ff ff4f 	bl	800971c <xTimerGenericCommand>
			configASSERT( xResult );
 800987e:	b950      	cbnz	r0, 8009896 <prvTimerTask+0x7e>
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	e7fe      	b.n	8009890 <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 8009892:	46a8      	mov	r8, r5
 8009894:	e7cc      	b.n	8009830 <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009896:	4628      	mov	r0, r5
 8009898:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800989a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800989c:	2500      	movs	r5, #0
 800989e:	2200      	movs	r2, #0
 80098a0:	6838      	ldr	r0, [r7, #0]
 80098a2:	a903      	add	r1, sp, #12
 80098a4:	f7fe fdc2 	bl	800842c <xQueueReceive>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d0ba      	beq.n	8009822 <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098ac:	9b03      	ldr	r3, [sp, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	dbf5      	blt.n	800989e <prvTimerTask+0x86>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098b2:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098b4:	6963      	ldr	r3, [r4, #20]
 80098b6:	b113      	cbz	r3, 80098be <prvTimerTask+0xa6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098b8:	1d20      	adds	r0, r4, #4
 80098ba:	f7fe fb5b 	bl	8007f74 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098be:	a802      	add	r0, sp, #8
 80098c0:	f7ff ff56 	bl	8009770 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80098c4:	9b03      	ldr	r3, [sp, #12]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098c6:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80098c8:	2b09      	cmp	r3, #9
 80098ca:	d8e8      	bhi.n	800989e <prvTimerTask+0x86>
 80098cc:	a101      	add	r1, pc, #4	; (adr r1, 80098d4 <prvTimerTask+0xbc>)
 80098ce:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098d2:	bf00      	nop
 80098d4:	08009939 	.word	0x08009939
 80098d8:	08009939 	.word	0x08009939
 80098dc:	08009939 	.word	0x08009939
 80098e0:	0800989f 	.word	0x0800989f
 80098e4:	0800997d 	.word	0x0800997d
 80098e8:	080099a1 	.word	0x080099a1
 80098ec:	08009939 	.word	0x08009939
 80098f0:	08009939 	.word	0x08009939
 80098f4:	0800989f 	.word	0x0800989f
 80098f8:	0800997d 	.word	0x0800997d
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80098fc:	4b2f      	ldr	r3, [pc, #188]	; (80099bc <prvTimerTask+0x1a4>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681c      	ldr	r4, [r3, #0]
 8009902:	fab4 f484 	clz	r4, r4
 8009906:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009908:	4622      	mov	r2, r4
 800990a:	6838      	ldr	r0, [r7, #0]
 800990c:	eba8 0109 	sub.w	r1, r8, r9
 8009910:	f7fe fe8c 	bl	800862c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009914:	f7ff fa22 	bl	8008d5c <xTaskResumeAll>
 8009918:	2800      	cmp	r0, #0
 800991a:	d1bf      	bne.n	800989c <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 800991c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009924:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	e7b4      	b.n	800989c <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 8009932:	f7ff fa13 	bl	8008d5c <xTaskResumeAll>
 8009936:	e7b1      	b.n	800989c <prvTimerTask+0x84>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009938:	69a1      	ldr	r1, [r4, #24]
 800993a:	9b04      	ldr	r3, [sp, #16]
 800993c:	4620      	mov	r0, r4
 800993e:	4419      	add	r1, r3
 8009940:	f7ff fe38 	bl	80095b4 <prvInsertTimerInActiveList>
 8009944:	2800      	cmp	r0, #0
 8009946:	d0aa      	beq.n	800989e <prvTimerTask+0x86>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800994a:	4620      	mov	r0, r4
 800994c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800994e:	69e3      	ldr	r3, [r4, #28]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d1a4      	bne.n	800989e <prvTimerTask+0x86>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009954:	2300      	movs	r3, #0
 8009956:	69a2      	ldr	r2, [r4, #24]
 8009958:	9904      	ldr	r1, [sp, #16]
 800995a:	4620      	mov	r0, r4
 800995c:	440a      	add	r2, r1
 800995e:	9500      	str	r5, [sp, #0]
 8009960:	4619      	mov	r1, r3
 8009962:	f7ff fedb 	bl	800971c <xTimerGenericCommand>
							configASSERT( xResult );
 8009966:	2800      	cmp	r0, #0
 8009968:	d199      	bne.n	800989e <prvTimerTask+0x86>
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	e7fe      	b.n	800997a <prvTimerTask+0x162>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800997c:	9904      	ldr	r1, [sp, #16]
 800997e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009980:	b941      	cbnz	r1, 8009994 <prvTimerTask+0x17c>
 8009982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009986:	f383 8811 	msr	BASEPRI, r3
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	e7fe      	b.n	8009992 <prvTimerTask+0x17a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009994:	4603      	mov	r3, r0
 8009996:	4401      	add	r1, r0
 8009998:	4620      	mov	r0, r4
 800999a:	f7ff fe0b 	bl	80095b4 <prvInsertTimerInActiveList>
					break;
 800999e:	e77e      	b.n	800989e <prvTimerTask+0x86>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80099a0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f47f af7a 	bne.w	800989e <prvTimerTask+0x86>
							vPortFree( pxTimer );
 80099aa:	4620      	mov	r0, r4
 80099ac:	f000 fa24 	bl	8009df8 <vPortFree>
 80099b0:	e775      	b.n	800989e <prvTimerTask+0x86>
 80099b2:	bf00      	nop
 80099b4:	20002c8c 	.word	0x20002c8c
 80099b8:	20002d80 	.word	0x20002d80
 80099bc:	20002c90 	.word	0x20002c90

080099c0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80099c0:	4806      	ldr	r0, [pc, #24]	; (80099dc <prvPortStartFirstTask+0x1c>)
 80099c2:	6800      	ldr	r0, [r0, #0]
 80099c4:	6800      	ldr	r0, [r0, #0]
 80099c6:	f380 8808 	msr	MSP, r0
 80099ca:	b662      	cpsie	i
 80099cc:	b661      	cpsie	f
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	df00      	svc	0
 80099d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099da:	0000      	.short	0x0000
 80099dc:	e000ed08 	.word	0xe000ed08

080099e0 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 80099e0:	2300      	movs	r3, #0
{
 80099e2:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80099e4:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80099e6:	4b0d      	ldr	r3, [pc, #52]	; (8009a1c <prvTaskExitError+0x3c>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3301      	adds	r3, #1
 80099ec:	d008      	beq.n	8009a00 <prvTaskExitError+0x20>
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	e7fe      	b.n	80099fe <prvTaskExitError+0x1e>
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8009a10:	9b01      	ldr	r3, [sp, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0fc      	beq.n	8009a10 <prvTaskExitError+0x30>
}
 8009a16:	b002      	add	sp, #8
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	2000000c 	.word	0x2000000c

08009a20 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a24:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a28:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a2a:	f021 0101 	bic.w	r1, r1, #1
 8009a2e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a32:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a36:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8009a3a:	3840      	subs	r0, #64	; 0x40
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	080099e1 	.word	0x080099e1
	...

08009a50 <SVC_Handler>:
	__asm volatile (
 8009a50:	4b07      	ldr	r3, [pc, #28]	; (8009a70 <pxCurrentTCBConst2>)
 8009a52:	6819      	ldr	r1, [r3, #0]
 8009a54:	6808      	ldr	r0, [r1, #0]
 8009a56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009a5a:	f380 8809 	msr	PSP, r0
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f04f 0000 	mov.w	r0, #0
 8009a66:	f380 8811 	msr	BASEPRI, r0
 8009a6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009a6e:	4770      	bx	lr

08009a70 <pxCurrentTCBConst2>:
 8009a70:	20002b64 	.word	0x20002b64

08009a74 <vPortEnterCritical>:
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a84:	4a0a      	ldr	r2, [pc, #40]	; (8009ab0 <vPortEnterCritical+0x3c>)
 8009a86:	6813      	ldr	r3, [r2, #0]
 8009a88:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a8a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8009a8c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009a8e:	d10e      	bne.n	8009aae <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009a94:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	b143      	cbz	r3, 8009aae <vPortEnterCritical+0x3a>
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	e7fe      	b.n	8009aac <vPortEnterCritical+0x38>
	}
}
 8009aae:	4770      	bx	lr
 8009ab0:	2000000c 	.word	0x2000000c

08009ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8009ab4:	4a08      	ldr	r2, [pc, #32]	; (8009ad8 <vPortExitCritical+0x24>)
 8009ab6:	6813      	ldr	r3, [r2, #0]
 8009ab8:	b943      	cbnz	r3, 8009acc <vPortExitCritical+0x18>
 8009aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	e7fe      	b.n	8009aca <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009acc:	3b01      	subs	r3, #1
 8009ace:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ad0:	b90b      	cbnz	r3, 8009ad6 <vPortExitCritical+0x22>
	__asm volatile
 8009ad2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ad6:	4770      	bx	lr
 8009ad8:	2000000c 	.word	0x2000000c
 8009adc:	00000000 	.word	0x00000000

08009ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ae0:	f3ef 8009 	mrs	r0, PSP
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	4b0d      	ldr	r3, [pc, #52]	; (8009b20 <pxCurrentTCBConst>)
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009af0:	6010      	str	r0, [r2, #0]
 8009af2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009af6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009afa:	f380 8811 	msr	BASEPRI, r0
 8009afe:	f7ff fa11 	bl	8008f24 <vTaskSwitchContext>
 8009b02:	f04f 0000 	mov.w	r0, #0
 8009b06:	f380 8811 	msr	BASEPRI, r0
 8009b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009b0e:	6819      	ldr	r1, [r3, #0]
 8009b10:	6808      	ldr	r0, [r1, #0]
 8009b12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009b16:	f380 8809 	msr	PSP, r0
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	4770      	bx	lr

08009b20 <pxCurrentTCBConst>:
 8009b20:	20002b64 	.word	0x20002b64

08009b24 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b24:	b508      	push	{r3, lr}
	__asm volatile
 8009b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2a:	f383 8811 	msr	BASEPRI, r3
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b36:	f7ff f87f 	bl	8008c38 <xTaskIncrementTick>
 8009b3a:	b128      	cbz	r0, 8009b48 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b4e:	bd08      	pop	{r3, pc}

08009b50 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b50:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8009b54:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b5a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b5c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b5e:	4b04      	ldr	r3, [pc, #16]	; (8009b70 <vPortSetupTimerInterrupt+0x20>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b66:	3b01      	subs	r3, #1
 8009b68:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b6a:	2307      	movs	r3, #7
 8009b6c:	6113      	str	r3, [r2, #16]
}
 8009b6e:	4770      	bx	lr
 8009b70:	20000000 	.word	0x20000000

08009b74 <xPortStartScheduler>:
{
 8009b74:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b76:	4b29      	ldr	r3, [pc, #164]	; (8009c1c <xPortStartScheduler+0xa8>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b78:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b7a:	781a      	ldrb	r2, [r3, #0]
 8009b7c:	b2d2      	uxtb	r2, r2
 8009b7e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b80:	22ff      	movs	r2, #255	; 0xff
 8009b82:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b84:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b86:	4a26      	ldr	r2, [pc, #152]	; (8009c20 <xPortStartScheduler+0xac>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009b92:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b96:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b98:	2307      	movs	r3, #7
 8009b9a:	4a22      	ldr	r2, [pc, #136]	; (8009c24 <xPortStartScheduler+0xb0>)
 8009b9c:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b9e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009ba2:	1e5c      	subs	r4, r3, #1
 8009ba4:	0600      	lsls	r0, r0, #24
 8009ba6:	d40c      	bmi.n	8009bc2 <xPortStartScheduler+0x4e>
 8009ba8:	b111      	cbz	r1, 8009bb0 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	6013      	str	r3, [r2, #0]
 8009bae:	d011      	beq.n	8009bd4 <xPortStartScheduler+0x60>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	e7fe      	b.n	8009bc0 <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009bc2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	005b      	lsls	r3, r3, #1
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	f88d 3003 	strb.w	r3, [sp, #3]
 8009bd0:	4623      	mov	r3, r4
 8009bd2:	e7e4      	b.n	8009b9e <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009bd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009bd8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009bda:	9b01      	ldr	r3, [sp, #4]
 8009bdc:	4a0f      	ldr	r2, [pc, #60]	; (8009c1c <xPortStartScheduler+0xa8>)
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009be2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8009be6:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009be8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8009bec:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009bf0:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009bf4:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8009bf8:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8009bfc:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8009c00:	f7ff ffa6 	bl	8009b50 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009c04:	4b08      	ldr	r3, [pc, #32]	; (8009c28 <xPortStartScheduler+0xb4>)
 8009c06:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8009c08:	f7ff feda 	bl	80099c0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009c0c:	f7ff f98a 	bl	8008f24 <vTaskSwitchContext>
}
 8009c10:	4620      	mov	r0, r4
	prvTaskExitError();
 8009c12:	f7ff fee5 	bl	80099e0 <prvTaskExitError>
}
 8009c16:	b002      	add	sp, #8
 8009c18:	bd10      	pop	{r4, pc}
 8009c1a:	bf00      	nop
 8009c1c:	e000e400 	.word	0xe000e400
 8009c20:	20002d88 	.word	0x20002d88
 8009c24:	20002d8c 	.word	0x20002d8c
 8009c28:	2000000c 	.word	0x2000000c

08009c2c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c2c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c30:	2b0f      	cmp	r3, #15
 8009c32:	d90e      	bls.n	8009c52 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c34:	4a11      	ldr	r2, [pc, #68]	; (8009c7c <vPortValidateInterruptPriority+0x50>)
 8009c36:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c38:	4a11      	ldr	r2, [pc, #68]	; (8009c80 <vPortValidateInterruptPriority+0x54>)
 8009c3a:	7812      	ldrb	r2, [r2, #0]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d908      	bls.n	8009c52 <vPortValidateInterruptPriority+0x26>
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	e7fe      	b.n	8009c50 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009c56:	4a0b      	ldr	r2, [pc, #44]	; (8009c84 <vPortValidateInterruptPriority+0x58>)
 8009c58:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009c5c:	6812      	ldr	r2, [r2, #0]
 8009c5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d908      	bls.n	8009c78 <vPortValidateInterruptPriority+0x4c>
 8009c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6a:	f383 8811 	msr	BASEPRI, r3
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	e7fe      	b.n	8009c76 <vPortValidateInterruptPriority+0x4a>
	}
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	e000e3f0 	.word	0xe000e3f0
 8009c80:	20002d88 	.word	0x20002d88
 8009c84:	20002d8c 	.word	0x20002d8c

08009c88 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c88:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c8a:	4b10      	ldr	r3, [pc, #64]	; (8009ccc <prvInsertBlockIntoFreeList+0x44>)
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4283      	cmp	r3, r0
 8009c92:	d3fb      	bcc.n	8009c8c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c94:	6854      	ldr	r4, [r2, #4]
 8009c96:	1911      	adds	r1, r2, r4
 8009c98:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c9a:	bf01      	itttt	eq
 8009c9c:	6841      	ldreq	r1, [r0, #4]
 8009c9e:	4610      	moveq	r0, r2
 8009ca0:	1909      	addeq	r1, r1, r4
 8009ca2:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ca4:	6844      	ldr	r4, [r0, #4]
 8009ca6:	1901      	adds	r1, r0, r4
 8009ca8:	428b      	cmp	r3, r1
 8009caa:	d10c      	bne.n	8009cc6 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009cac:	4908      	ldr	r1, [pc, #32]	; (8009cd0 <prvInsertBlockIntoFreeList+0x48>)
 8009cae:	6809      	ldr	r1, [r1, #0]
 8009cb0:	428b      	cmp	r3, r1
 8009cb2:	d003      	beq.n	8009cbc <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009cb4:	6859      	ldr	r1, [r3, #4]
 8009cb6:	4421      	add	r1, r4
 8009cb8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009cba:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cbc:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cbe:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cc0:	bf18      	it	ne
 8009cc2:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cc4:	bd10      	pop	{r4, pc}
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	e7f8      	b.n	8009cbc <prvInsertBlockIntoFreeList+0x34>
 8009cca:	bf00      	nop
 8009ccc:	200045a0 	.word	0x200045a0
 8009cd0:	20002d90 	.word	0x20002d90

08009cd4 <pvPortMalloc>:
{
 8009cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009cda:	f7fe ff9f 	bl	8008c1c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009cde:	4940      	ldr	r1, [pc, #256]	; (8009de0 <pvPortMalloc+0x10c>)
 8009ce0:	4d40      	ldr	r5, [pc, #256]	; (8009de4 <pvPortMalloc+0x110>)
 8009ce2:	680b      	ldr	r3, [r1, #0]
 8009ce4:	bb0b      	cbnz	r3, 8009d2a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8009ce6:	4a40      	ldr	r2, [pc, #256]	; (8009de8 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ce8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cea:	bf1f      	itttt	ne
 8009cec:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cee:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cf2:	f502 52c0 	addne.w	r2, r2, #6144	; 0x1800
 8009cf6:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cf8:	bf0c      	ite	eq
 8009cfa:	f44f 53c0 	moveq.w	r3, #6144	; 0x1800
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cfe:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 8009d00:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d02:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d04:	4e39      	ldr	r6, [pc, #228]	; (8009dec <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 8009d06:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d08:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8009d0c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d0e:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8009d10:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d14:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d16:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8009d1a:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d1c:	4b34      	ldr	r3, [pc, #208]	; (8009df0 <pvPortMalloc+0x11c>)
 8009d1e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d20:	4b34      	ldr	r3, [pc, #208]	; (8009df4 <pvPortMalloc+0x120>)
 8009d22:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d28:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d2a:	682e      	ldr	r6, [r5, #0]
 8009d2c:	4226      	tst	r6, r4
 8009d2e:	d151      	bne.n	8009dd4 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8009d30:	2c00      	cmp	r4, #0
 8009d32:	d042      	beq.n	8009dba <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8009d34:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d38:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d3a:	bf1c      	itt	ne
 8009d3c:	f023 0307 	bicne.w	r3, r3, #7
 8009d40:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d046      	beq.n	8009dd4 <pvPortMalloc+0x100>
 8009d46:	4f2b      	ldr	r7, [pc, #172]	; (8009df4 <pvPortMalloc+0x120>)
 8009d48:	683c      	ldr	r4, [r7, #0]
 8009d4a:	429c      	cmp	r4, r3
 8009d4c:	d342      	bcc.n	8009dd4 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8009d4e:	4a27      	ldr	r2, [pc, #156]	; (8009dec <pvPortMalloc+0x118>)
 8009d50:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d52:	6868      	ldr	r0, [r5, #4]
 8009d54:	4298      	cmp	r0, r3
 8009d56:	d204      	bcs.n	8009d62 <pvPortMalloc+0x8e>
 8009d58:	f8d5 c000 	ldr.w	ip, [r5]
 8009d5c:	f1bc 0f00 	cmp.w	ip, #0
 8009d60:	d115      	bne.n	8009d8e <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8009d62:	6809      	ldr	r1, [r1, #0]
 8009d64:	42a9      	cmp	r1, r5
 8009d66:	d035      	beq.n	8009dd4 <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d68:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d6a:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d6e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d70:	1ac2      	subs	r2, r0, r3
 8009d72:	2a10      	cmp	r2, #16
 8009d74:	d912      	bls.n	8009d9c <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d76:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d78:	0741      	lsls	r1, r0, #29
 8009d7a:	d00b      	beq.n	8009d94 <pvPortMalloc+0xc0>
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	e7fe      	b.n	8009d8c <pvPortMalloc+0xb8>
 8009d8e:	462a      	mov	r2, r5
 8009d90:	4665      	mov	r5, ip
 8009d92:	e7de      	b.n	8009d52 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d94:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d96:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d98:	f7ff ff76 	bl	8009c88 <prvInsertBlockIntoFreeList>
					pxBlock->pxNextFreeBlock = NULL;
 8009d9c:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d9e:	4914      	ldr	r1, [pc, #80]	; (8009df0 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009da0:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009da2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009da4:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009da6:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009da8:	ea46 0602 	orr.w	r6, r6, r2
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009dac:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009dae:	bf38      	it	cc
 8009db0:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009db2:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009db4:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8009db8:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8009dba:	f7fe ffcf 	bl	8008d5c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dbe:	0763      	lsls	r3, r4, #29
 8009dc0:	d00a      	beq.n	8009dd8 <pvPortMalloc+0x104>
 8009dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	e7fe      	b.n	8009dd2 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 8009dd4:	2400      	movs	r4, #0
 8009dd6:	e7f0      	b.n	8009dba <pvPortMalloc+0xe6>
}
 8009dd8:	4620      	mov	r0, r4
 8009dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dde:	bf00      	nop
 8009de0:	20002d90 	.word	0x20002d90
 8009de4:	20004594 	.word	0x20004594
 8009de8:	20002d94 	.word	0x20002d94
 8009dec:	200045a0 	.word	0x200045a0
 8009df0:	2000459c 	.word	0x2000459c
 8009df4:	20004598 	.word	0x20004598

08009df8 <vPortFree>:
{
 8009df8:	b510      	push	{r4, lr}
	if( pv != NULL )
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	b370      	cbz	r0, 8009e5c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009dfe:	4a18      	ldr	r2, [pc, #96]	; (8009e60 <vPortFree+0x68>)
 8009e00:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009e04:	6812      	ldr	r2, [r2, #0]
 8009e06:	4213      	tst	r3, r2
 8009e08:	d108      	bne.n	8009e1c <vPortFree+0x24>
 8009e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	e7fe      	b.n	8009e1a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e1c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009e20:	b141      	cbz	r1, 8009e34 <vPortFree+0x3c>
 8009e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	e7fe      	b.n	8009e32 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e34:	ea23 0302 	bic.w	r3, r3, r2
 8009e38:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009e3c:	f7fe feee 	bl	8008c1c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e40:	4a08      	ldr	r2, [pc, #32]	; (8009e64 <vPortFree+0x6c>)
 8009e42:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009e46:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e48:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e4c:	440b      	add	r3, r1
 8009e4e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e50:	f7ff ff1a 	bl	8009c88 <prvInsertBlockIntoFreeList>
}
 8009e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8009e58:	f7fe bf80 	b.w	8008d5c <xTaskResumeAll>
}
 8009e5c:	bd10      	pop	{r4, pc}
 8009e5e:	bf00      	nop
 8009e60:	20004594 	.word	0x20004594
 8009e64:	20004598 	.word	0x20004598

08009e68 <malloc>:
 8009e68:	4b02      	ldr	r3, [pc, #8]	; (8009e74 <malloc+0xc>)
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	6818      	ldr	r0, [r3, #0]
 8009e6e:	f000 b823 	b.w	8009eb8 <_malloc_r>
 8009e72:	bf00      	nop
 8009e74:	20000068 	.word	0x20000068

08009e78 <sbrk_aligned>:
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	4e0e      	ldr	r6, [pc, #56]	; (8009eb4 <sbrk_aligned+0x3c>)
 8009e7c:	460c      	mov	r4, r1
 8009e7e:	6831      	ldr	r1, [r6, #0]
 8009e80:	4605      	mov	r5, r0
 8009e82:	b911      	cbnz	r1, 8009e8a <sbrk_aligned+0x12>
 8009e84:	f000 fb88 	bl	800a598 <_sbrk_r>
 8009e88:	6030      	str	r0, [r6, #0]
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f000 fb83 	bl	800a598 <_sbrk_r>
 8009e92:	1c43      	adds	r3, r0, #1
 8009e94:	d00a      	beq.n	8009eac <sbrk_aligned+0x34>
 8009e96:	1cc4      	adds	r4, r0, #3
 8009e98:	f024 0403 	bic.w	r4, r4, #3
 8009e9c:	42a0      	cmp	r0, r4
 8009e9e:	d007      	beq.n	8009eb0 <sbrk_aligned+0x38>
 8009ea0:	1a21      	subs	r1, r4, r0
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f000 fb78 	bl	800a598 <_sbrk_r>
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d101      	bne.n	8009eb0 <sbrk_aligned+0x38>
 8009eac:	f04f 34ff 	mov.w	r4, #4294967295
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}
 8009eb4:	200045ac 	.word	0x200045ac

08009eb8 <_malloc_r>:
 8009eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ebc:	1ccd      	adds	r5, r1, #3
 8009ebe:	f025 0503 	bic.w	r5, r5, #3
 8009ec2:	3508      	adds	r5, #8
 8009ec4:	2d0c      	cmp	r5, #12
 8009ec6:	bf38      	it	cc
 8009ec8:	250c      	movcc	r5, #12
 8009eca:	2d00      	cmp	r5, #0
 8009ecc:	4607      	mov	r7, r0
 8009ece:	db01      	blt.n	8009ed4 <_malloc_r+0x1c>
 8009ed0:	42a9      	cmp	r1, r5
 8009ed2:	d905      	bls.n	8009ee0 <_malloc_r+0x28>
 8009ed4:	230c      	movs	r3, #12
 8009ed6:	2600      	movs	r6, #0
 8009ed8:	603b      	str	r3, [r7, #0]
 8009eda:	4630      	mov	r0, r6
 8009edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ee0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009fb4 <_malloc_r+0xfc>
 8009ee4:	f000 f868 	bl	8009fb8 <__malloc_lock>
 8009ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8009eec:	461c      	mov	r4, r3
 8009eee:	bb5c      	cbnz	r4, 8009f48 <_malloc_r+0x90>
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	f7ff ffc0 	bl	8009e78 <sbrk_aligned>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	4604      	mov	r4, r0
 8009efc:	d155      	bne.n	8009faa <_malloc_r+0xf2>
 8009efe:	f8d8 4000 	ldr.w	r4, [r8]
 8009f02:	4626      	mov	r6, r4
 8009f04:	2e00      	cmp	r6, #0
 8009f06:	d145      	bne.n	8009f94 <_malloc_r+0xdc>
 8009f08:	2c00      	cmp	r4, #0
 8009f0a:	d048      	beq.n	8009f9e <_malloc_r+0xe6>
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4638      	mov	r0, r7
 8009f12:	eb04 0903 	add.w	r9, r4, r3
 8009f16:	f000 fb3f 	bl	800a598 <_sbrk_r>
 8009f1a:	4581      	cmp	r9, r0
 8009f1c:	d13f      	bne.n	8009f9e <_malloc_r+0xe6>
 8009f1e:	6821      	ldr	r1, [r4, #0]
 8009f20:	4638      	mov	r0, r7
 8009f22:	1a6d      	subs	r5, r5, r1
 8009f24:	4629      	mov	r1, r5
 8009f26:	f7ff ffa7 	bl	8009e78 <sbrk_aligned>
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d037      	beq.n	8009f9e <_malloc_r+0xe6>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	442b      	add	r3, r5
 8009f32:	6023      	str	r3, [r4, #0]
 8009f34:	f8d8 3000 	ldr.w	r3, [r8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d038      	beq.n	8009fae <_malloc_r+0xf6>
 8009f3c:	685a      	ldr	r2, [r3, #4]
 8009f3e:	42a2      	cmp	r2, r4
 8009f40:	d12b      	bne.n	8009f9a <_malloc_r+0xe2>
 8009f42:	2200      	movs	r2, #0
 8009f44:	605a      	str	r2, [r3, #4]
 8009f46:	e00f      	b.n	8009f68 <_malloc_r+0xb0>
 8009f48:	6822      	ldr	r2, [r4, #0]
 8009f4a:	1b52      	subs	r2, r2, r5
 8009f4c:	d41f      	bmi.n	8009f8e <_malloc_r+0xd6>
 8009f4e:	2a0b      	cmp	r2, #11
 8009f50:	d917      	bls.n	8009f82 <_malloc_r+0xca>
 8009f52:	1961      	adds	r1, r4, r5
 8009f54:	42a3      	cmp	r3, r4
 8009f56:	6025      	str	r5, [r4, #0]
 8009f58:	bf18      	it	ne
 8009f5a:	6059      	strne	r1, [r3, #4]
 8009f5c:	6863      	ldr	r3, [r4, #4]
 8009f5e:	bf08      	it	eq
 8009f60:	f8c8 1000 	streq.w	r1, [r8]
 8009f64:	5162      	str	r2, [r4, r5]
 8009f66:	604b      	str	r3, [r1, #4]
 8009f68:	4638      	mov	r0, r7
 8009f6a:	f104 060b 	add.w	r6, r4, #11
 8009f6e:	f000 f829 	bl	8009fc4 <__malloc_unlock>
 8009f72:	f026 0607 	bic.w	r6, r6, #7
 8009f76:	1d23      	adds	r3, r4, #4
 8009f78:	1af2      	subs	r2, r6, r3
 8009f7a:	d0ae      	beq.n	8009eda <_malloc_r+0x22>
 8009f7c:	1b9b      	subs	r3, r3, r6
 8009f7e:	50a3      	str	r3, [r4, r2]
 8009f80:	e7ab      	b.n	8009eda <_malloc_r+0x22>
 8009f82:	42a3      	cmp	r3, r4
 8009f84:	6862      	ldr	r2, [r4, #4]
 8009f86:	d1dd      	bne.n	8009f44 <_malloc_r+0x8c>
 8009f88:	f8c8 2000 	str.w	r2, [r8]
 8009f8c:	e7ec      	b.n	8009f68 <_malloc_r+0xb0>
 8009f8e:	4623      	mov	r3, r4
 8009f90:	6864      	ldr	r4, [r4, #4]
 8009f92:	e7ac      	b.n	8009eee <_malloc_r+0x36>
 8009f94:	4634      	mov	r4, r6
 8009f96:	6876      	ldr	r6, [r6, #4]
 8009f98:	e7b4      	b.n	8009f04 <_malloc_r+0x4c>
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	e7cc      	b.n	8009f38 <_malloc_r+0x80>
 8009f9e:	230c      	movs	r3, #12
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	603b      	str	r3, [r7, #0]
 8009fa4:	f000 f80e 	bl	8009fc4 <__malloc_unlock>
 8009fa8:	e797      	b.n	8009eda <_malloc_r+0x22>
 8009faa:	6025      	str	r5, [r4, #0]
 8009fac:	e7dc      	b.n	8009f68 <_malloc_r+0xb0>
 8009fae:	605b      	str	r3, [r3, #4]
 8009fb0:	deff      	udf	#255	; 0xff
 8009fb2:	bf00      	nop
 8009fb4:	200045a8 	.word	0x200045a8

08009fb8 <__malloc_lock>:
 8009fb8:	4801      	ldr	r0, [pc, #4]	; (8009fc0 <__malloc_lock+0x8>)
 8009fba:	f000 bb3a 	b.w	800a632 <__retarget_lock_acquire_recursive>
 8009fbe:	bf00      	nop
 8009fc0:	200046f0 	.word	0x200046f0

08009fc4 <__malloc_unlock>:
 8009fc4:	4801      	ldr	r0, [pc, #4]	; (8009fcc <__malloc_unlock+0x8>)
 8009fc6:	f000 bb35 	b.w	800a634 <__retarget_lock_release_recursive>
 8009fca:	bf00      	nop
 8009fcc:	200046f0 	.word	0x200046f0

08009fd0 <std>:
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	b510      	push	{r4, lr}
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	e9c0 3300 	strd	r3, r3, [r0]
 8009fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fde:	6083      	str	r3, [r0, #8]
 8009fe0:	8181      	strh	r1, [r0, #12]
 8009fe2:	6643      	str	r3, [r0, #100]	; 0x64
 8009fe4:	81c2      	strh	r2, [r0, #14]
 8009fe6:	6183      	str	r3, [r0, #24]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	2208      	movs	r2, #8
 8009fec:	305c      	adds	r0, #92	; 0x5c
 8009fee:	f000 fa2b 	bl	800a448 <memset>
 8009ff2:	4b0d      	ldr	r3, [pc, #52]	; (800a028 <std+0x58>)
 8009ff4:	6224      	str	r4, [r4, #32]
 8009ff6:	6263      	str	r3, [r4, #36]	; 0x24
 8009ff8:	4b0c      	ldr	r3, [pc, #48]	; (800a02c <std+0x5c>)
 8009ffa:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ffc:	4b0c      	ldr	r3, [pc, #48]	; (800a030 <std+0x60>)
 8009ffe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a000:	4b0c      	ldr	r3, [pc, #48]	; (800a034 <std+0x64>)
 800a002:	6323      	str	r3, [r4, #48]	; 0x30
 800a004:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <std+0x68>)
 800a006:	429c      	cmp	r4, r3
 800a008:	d006      	beq.n	800a018 <std+0x48>
 800a00a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a00e:	4294      	cmp	r4, r2
 800a010:	d002      	beq.n	800a018 <std+0x48>
 800a012:	33d0      	adds	r3, #208	; 0xd0
 800a014:	429c      	cmp	r4, r3
 800a016:	d105      	bne.n	800a024 <std+0x54>
 800a018:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a020:	f000 bb06 	b.w	800a630 <__retarget_lock_init_recursive>
 800a024:	bd10      	pop	{r4, pc}
 800a026:	bf00      	nop
 800a028:	0800a299 	.word	0x0800a299
 800a02c:	0800a2bb 	.word	0x0800a2bb
 800a030:	0800a2f3 	.word	0x0800a2f3
 800a034:	0800a317 	.word	0x0800a317
 800a038:	200045b0 	.word	0x200045b0

0800a03c <stdio_exit_handler>:
 800a03c:	4a02      	ldr	r2, [pc, #8]	; (800a048 <stdio_exit_handler+0xc>)
 800a03e:	4903      	ldr	r1, [pc, #12]	; (800a04c <stdio_exit_handler+0x10>)
 800a040:	4803      	ldr	r0, [pc, #12]	; (800a050 <stdio_exit_handler+0x14>)
 800a042:	f000 b869 	b.w	800a118 <_fwalk_sglue>
 800a046:	bf00      	nop
 800a048:	20000010 	.word	0x20000010
 800a04c:	0800b055 	.word	0x0800b055
 800a050:	2000001c 	.word	0x2000001c

0800a054 <cleanup_stdio>:
 800a054:	6841      	ldr	r1, [r0, #4]
 800a056:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <cleanup_stdio+0x34>)
 800a058:	b510      	push	{r4, lr}
 800a05a:	4299      	cmp	r1, r3
 800a05c:	4604      	mov	r4, r0
 800a05e:	d001      	beq.n	800a064 <cleanup_stdio+0x10>
 800a060:	f000 fff8 	bl	800b054 <_fflush_r>
 800a064:	68a1      	ldr	r1, [r4, #8]
 800a066:	4b09      	ldr	r3, [pc, #36]	; (800a08c <cleanup_stdio+0x38>)
 800a068:	4299      	cmp	r1, r3
 800a06a:	d002      	beq.n	800a072 <cleanup_stdio+0x1e>
 800a06c:	4620      	mov	r0, r4
 800a06e:	f000 fff1 	bl	800b054 <_fflush_r>
 800a072:	68e1      	ldr	r1, [r4, #12]
 800a074:	4b06      	ldr	r3, [pc, #24]	; (800a090 <cleanup_stdio+0x3c>)
 800a076:	4299      	cmp	r1, r3
 800a078:	d004      	beq.n	800a084 <cleanup_stdio+0x30>
 800a07a:	4620      	mov	r0, r4
 800a07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a080:	f000 bfe8 	b.w	800b054 <_fflush_r>
 800a084:	bd10      	pop	{r4, pc}
 800a086:	bf00      	nop
 800a088:	200045b0 	.word	0x200045b0
 800a08c:	20004618 	.word	0x20004618
 800a090:	20004680 	.word	0x20004680

0800a094 <global_stdio_init.part.0>:
 800a094:	b510      	push	{r4, lr}
 800a096:	4b0b      	ldr	r3, [pc, #44]	; (800a0c4 <global_stdio_init.part.0+0x30>)
 800a098:	4c0b      	ldr	r4, [pc, #44]	; (800a0c8 <global_stdio_init.part.0+0x34>)
 800a09a:	4a0c      	ldr	r2, [pc, #48]	; (800a0cc <global_stdio_init.part.0+0x38>)
 800a09c:	4620      	mov	r0, r4
 800a09e:	601a      	str	r2, [r3, #0]
 800a0a0:	2104      	movs	r1, #4
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f7ff ff94 	bl	8009fd0 <std>
 800a0a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	2109      	movs	r1, #9
 800a0b0:	f7ff ff8e 	bl	8009fd0 <std>
 800a0b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0be:	2112      	movs	r1, #18
 800a0c0:	f7ff bf86 	b.w	8009fd0 <std>
 800a0c4:	200046e8 	.word	0x200046e8
 800a0c8:	200045b0 	.word	0x200045b0
 800a0cc:	0800a03d 	.word	0x0800a03d

0800a0d0 <__sfp_lock_acquire>:
 800a0d0:	4801      	ldr	r0, [pc, #4]	; (800a0d8 <__sfp_lock_acquire+0x8>)
 800a0d2:	f000 baae 	b.w	800a632 <__retarget_lock_acquire_recursive>
 800a0d6:	bf00      	nop
 800a0d8:	200046f1 	.word	0x200046f1

0800a0dc <__sfp_lock_release>:
 800a0dc:	4801      	ldr	r0, [pc, #4]	; (800a0e4 <__sfp_lock_release+0x8>)
 800a0de:	f000 baa9 	b.w	800a634 <__retarget_lock_release_recursive>
 800a0e2:	bf00      	nop
 800a0e4:	200046f1 	.word	0x200046f1

0800a0e8 <__sinit>:
 800a0e8:	b510      	push	{r4, lr}
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	f7ff fff0 	bl	800a0d0 <__sfp_lock_acquire>
 800a0f0:	6a23      	ldr	r3, [r4, #32]
 800a0f2:	b11b      	cbz	r3, 800a0fc <__sinit+0x14>
 800a0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f8:	f7ff bff0 	b.w	800a0dc <__sfp_lock_release>
 800a0fc:	4b04      	ldr	r3, [pc, #16]	; (800a110 <__sinit+0x28>)
 800a0fe:	6223      	str	r3, [r4, #32]
 800a100:	4b04      	ldr	r3, [pc, #16]	; (800a114 <__sinit+0x2c>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1f5      	bne.n	800a0f4 <__sinit+0xc>
 800a108:	f7ff ffc4 	bl	800a094 <global_stdio_init.part.0>
 800a10c:	e7f2      	b.n	800a0f4 <__sinit+0xc>
 800a10e:	bf00      	nop
 800a110:	0800a055 	.word	0x0800a055
 800a114:	200046e8 	.word	0x200046e8

0800a118 <_fwalk_sglue>:
 800a118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a11c:	4607      	mov	r7, r0
 800a11e:	4688      	mov	r8, r1
 800a120:	4614      	mov	r4, r2
 800a122:	2600      	movs	r6, #0
 800a124:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a128:	f1b9 0901 	subs.w	r9, r9, #1
 800a12c:	d505      	bpl.n	800a13a <_fwalk_sglue+0x22>
 800a12e:	6824      	ldr	r4, [r4, #0]
 800a130:	2c00      	cmp	r4, #0
 800a132:	d1f7      	bne.n	800a124 <_fwalk_sglue+0xc>
 800a134:	4630      	mov	r0, r6
 800a136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a13a:	89ab      	ldrh	r3, [r5, #12]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d907      	bls.n	800a150 <_fwalk_sglue+0x38>
 800a140:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a144:	3301      	adds	r3, #1
 800a146:	d003      	beq.n	800a150 <_fwalk_sglue+0x38>
 800a148:	4629      	mov	r1, r5
 800a14a:	4638      	mov	r0, r7
 800a14c:	47c0      	blx	r8
 800a14e:	4306      	orrs	r6, r0
 800a150:	3568      	adds	r5, #104	; 0x68
 800a152:	e7e9      	b.n	800a128 <_fwalk_sglue+0x10>

0800a154 <iprintf>:
 800a154:	b40f      	push	{r0, r1, r2, r3}
 800a156:	b507      	push	{r0, r1, r2, lr}
 800a158:	4906      	ldr	r1, [pc, #24]	; (800a174 <iprintf+0x20>)
 800a15a:	ab04      	add	r3, sp, #16
 800a15c:	6808      	ldr	r0, [r1, #0]
 800a15e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a162:	6881      	ldr	r1, [r0, #8]
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	f000 fc45 	bl	800a9f4 <_vfiprintf_r>
 800a16a:	b003      	add	sp, #12
 800a16c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a170:	b004      	add	sp, #16
 800a172:	4770      	bx	lr
 800a174:	20000068 	.word	0x20000068

0800a178 <_puts_r>:
 800a178:	6a03      	ldr	r3, [r0, #32]
 800a17a:	b570      	push	{r4, r5, r6, lr}
 800a17c:	4605      	mov	r5, r0
 800a17e:	460e      	mov	r6, r1
 800a180:	6884      	ldr	r4, [r0, #8]
 800a182:	b90b      	cbnz	r3, 800a188 <_puts_r+0x10>
 800a184:	f7ff ffb0 	bl	800a0e8 <__sinit>
 800a188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a18a:	07db      	lsls	r3, r3, #31
 800a18c:	d405      	bmi.n	800a19a <_puts_r+0x22>
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	0598      	lsls	r0, r3, #22
 800a192:	d402      	bmi.n	800a19a <_puts_r+0x22>
 800a194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a196:	f000 fa4c 	bl	800a632 <__retarget_lock_acquire_recursive>
 800a19a:	89a3      	ldrh	r3, [r4, #12]
 800a19c:	0719      	lsls	r1, r3, #28
 800a19e:	d513      	bpl.n	800a1c8 <_puts_r+0x50>
 800a1a0:	6923      	ldr	r3, [r4, #16]
 800a1a2:	b18b      	cbz	r3, 800a1c8 <_puts_r+0x50>
 800a1a4:	3e01      	subs	r6, #1
 800a1a6:	68a3      	ldr	r3, [r4, #8]
 800a1a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	60a3      	str	r3, [r4, #8]
 800a1b0:	b9e9      	cbnz	r1, 800a1ee <_puts_r+0x76>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	da2e      	bge.n	800a214 <_puts_r+0x9c>
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	210a      	movs	r1, #10
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	f000 f8af 	bl	800a31e <__swbuf_r>
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d007      	beq.n	800a1d4 <_puts_r+0x5c>
 800a1c4:	250a      	movs	r5, #10
 800a1c6:	e007      	b.n	800a1d8 <_puts_r+0x60>
 800a1c8:	4621      	mov	r1, r4
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	f000 f8e4 	bl	800a398 <__swsetup_r>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d0e7      	beq.n	800a1a4 <_puts_r+0x2c>
 800a1d4:	f04f 35ff 	mov.w	r5, #4294967295
 800a1d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1da:	07da      	lsls	r2, r3, #31
 800a1dc:	d405      	bmi.n	800a1ea <_puts_r+0x72>
 800a1de:	89a3      	ldrh	r3, [r4, #12]
 800a1e0:	059b      	lsls	r3, r3, #22
 800a1e2:	d402      	bmi.n	800a1ea <_puts_r+0x72>
 800a1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1e6:	f000 fa25 	bl	800a634 <__retarget_lock_release_recursive>
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	bd70      	pop	{r4, r5, r6, pc}
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	da04      	bge.n	800a1fc <_puts_r+0x84>
 800a1f2:	69a2      	ldr	r2, [r4, #24]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	dc06      	bgt.n	800a206 <_puts_r+0x8e>
 800a1f8:	290a      	cmp	r1, #10
 800a1fa:	d004      	beq.n	800a206 <_puts_r+0x8e>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	1c5a      	adds	r2, r3, #1
 800a200:	6022      	str	r2, [r4, #0]
 800a202:	7019      	strb	r1, [r3, #0]
 800a204:	e7cf      	b.n	800a1a6 <_puts_r+0x2e>
 800a206:	4622      	mov	r2, r4
 800a208:	4628      	mov	r0, r5
 800a20a:	f000 f888 	bl	800a31e <__swbuf_r>
 800a20e:	3001      	adds	r0, #1
 800a210:	d1c9      	bne.n	800a1a6 <_puts_r+0x2e>
 800a212:	e7df      	b.n	800a1d4 <_puts_r+0x5c>
 800a214:	250a      	movs	r5, #10
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	1c5a      	adds	r2, r3, #1
 800a21a:	6022      	str	r2, [r4, #0]
 800a21c:	701d      	strb	r5, [r3, #0]
 800a21e:	e7db      	b.n	800a1d8 <_puts_r+0x60>

0800a220 <puts>:
 800a220:	4b02      	ldr	r3, [pc, #8]	; (800a22c <puts+0xc>)
 800a222:	4601      	mov	r1, r0
 800a224:	6818      	ldr	r0, [r3, #0]
 800a226:	f7ff bfa7 	b.w	800a178 <_puts_r>
 800a22a:	bf00      	nop
 800a22c:	20000068 	.word	0x20000068

0800a230 <sniprintf>:
 800a230:	b40c      	push	{r2, r3}
 800a232:	b530      	push	{r4, r5, lr}
 800a234:	4b17      	ldr	r3, [pc, #92]	; (800a294 <sniprintf+0x64>)
 800a236:	1e0c      	subs	r4, r1, #0
 800a238:	681d      	ldr	r5, [r3, #0]
 800a23a:	b09d      	sub	sp, #116	; 0x74
 800a23c:	da08      	bge.n	800a250 <sniprintf+0x20>
 800a23e:	238b      	movs	r3, #139	; 0x8b
 800a240:	f04f 30ff 	mov.w	r0, #4294967295
 800a244:	602b      	str	r3, [r5, #0]
 800a246:	b01d      	add	sp, #116	; 0x74
 800a248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a24c:	b002      	add	sp, #8
 800a24e:	4770      	bx	lr
 800a250:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a254:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a258:	bf0c      	ite	eq
 800a25a:	4623      	moveq	r3, r4
 800a25c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a260:	9304      	str	r3, [sp, #16]
 800a262:	9307      	str	r3, [sp, #28]
 800a264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a268:	9002      	str	r0, [sp, #8]
 800a26a:	9006      	str	r0, [sp, #24]
 800a26c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a270:	4628      	mov	r0, r5
 800a272:	ab21      	add	r3, sp, #132	; 0x84
 800a274:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a276:	a902      	add	r1, sp, #8
 800a278:	9301      	str	r3, [sp, #4]
 800a27a:	f000 fa95 	bl	800a7a8 <_svfiprintf_r>
 800a27e:	1c43      	adds	r3, r0, #1
 800a280:	bfbc      	itt	lt
 800a282:	238b      	movlt	r3, #139	; 0x8b
 800a284:	602b      	strlt	r3, [r5, #0]
 800a286:	2c00      	cmp	r4, #0
 800a288:	d0dd      	beq.n	800a246 <sniprintf+0x16>
 800a28a:	2200      	movs	r2, #0
 800a28c:	9b02      	ldr	r3, [sp, #8]
 800a28e:	701a      	strb	r2, [r3, #0]
 800a290:	e7d9      	b.n	800a246 <sniprintf+0x16>
 800a292:	bf00      	nop
 800a294:	20000068 	.word	0x20000068

0800a298 <__sread>:
 800a298:	b510      	push	{r4, lr}
 800a29a:	460c      	mov	r4, r1
 800a29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a0:	f000 f968 	bl	800a574 <_read_r>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	bfab      	itete	ge
 800a2a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a2ac:	181b      	addge	r3, r3, r0
 800a2ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2b2:	bfac      	ite	ge
 800a2b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2b6:	81a3      	strhlt	r3, [r4, #12]
 800a2b8:	bd10      	pop	{r4, pc}

0800a2ba <__swrite>:
 800a2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2be:	461f      	mov	r7, r3
 800a2c0:	898b      	ldrh	r3, [r1, #12]
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	05db      	lsls	r3, r3, #23
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	4616      	mov	r6, r2
 800a2ca:	d505      	bpl.n	800a2d8 <__swrite+0x1e>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d4:	f000 f93c 	bl	800a550 <_lseek_r>
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	4632      	mov	r2, r6
 800a2dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2e0:	81a3      	strh	r3, [r4, #12]
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	463b      	mov	r3, r7
 800a2e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ee:	f000 b963 	b.w	800a5b8 <_write_r>

0800a2f2 <__sseek>:
 800a2f2:	b510      	push	{r4, lr}
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fa:	f000 f929 	bl	800a550 <_lseek_r>
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	bf15      	itete	ne
 800a304:	6560      	strne	r0, [r4, #84]	; 0x54
 800a306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a30a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a30e:	81a3      	strheq	r3, [r4, #12]
 800a310:	bf18      	it	ne
 800a312:	81a3      	strhne	r3, [r4, #12]
 800a314:	bd10      	pop	{r4, pc}

0800a316 <__sclose>:
 800a316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31a:	f000 b8b3 	b.w	800a484 <_close_r>

0800a31e <__swbuf_r>:
 800a31e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a320:	460e      	mov	r6, r1
 800a322:	4614      	mov	r4, r2
 800a324:	4605      	mov	r5, r0
 800a326:	b118      	cbz	r0, 800a330 <__swbuf_r+0x12>
 800a328:	6a03      	ldr	r3, [r0, #32]
 800a32a:	b90b      	cbnz	r3, 800a330 <__swbuf_r+0x12>
 800a32c:	f7ff fedc 	bl	800a0e8 <__sinit>
 800a330:	69a3      	ldr	r3, [r4, #24]
 800a332:	60a3      	str	r3, [r4, #8]
 800a334:	89a3      	ldrh	r3, [r4, #12]
 800a336:	071a      	lsls	r2, r3, #28
 800a338:	d525      	bpl.n	800a386 <__swbuf_r+0x68>
 800a33a:	6923      	ldr	r3, [r4, #16]
 800a33c:	b31b      	cbz	r3, 800a386 <__swbuf_r+0x68>
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	6922      	ldr	r2, [r4, #16]
 800a342:	b2f6      	uxtb	r6, r6
 800a344:	1a98      	subs	r0, r3, r2
 800a346:	6963      	ldr	r3, [r4, #20]
 800a348:	4637      	mov	r7, r6
 800a34a:	4283      	cmp	r3, r0
 800a34c:	dc04      	bgt.n	800a358 <__swbuf_r+0x3a>
 800a34e:	4621      	mov	r1, r4
 800a350:	4628      	mov	r0, r5
 800a352:	f000 fe7f 	bl	800b054 <_fflush_r>
 800a356:	b9e0      	cbnz	r0, 800a392 <__swbuf_r+0x74>
 800a358:	68a3      	ldr	r3, [r4, #8]
 800a35a:	3b01      	subs	r3, #1
 800a35c:	60a3      	str	r3, [r4, #8]
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	1c5a      	adds	r2, r3, #1
 800a362:	6022      	str	r2, [r4, #0]
 800a364:	701e      	strb	r6, [r3, #0]
 800a366:	6962      	ldr	r2, [r4, #20]
 800a368:	1c43      	adds	r3, r0, #1
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d004      	beq.n	800a378 <__swbuf_r+0x5a>
 800a36e:	89a3      	ldrh	r3, [r4, #12]
 800a370:	07db      	lsls	r3, r3, #31
 800a372:	d506      	bpl.n	800a382 <__swbuf_r+0x64>
 800a374:	2e0a      	cmp	r6, #10
 800a376:	d104      	bne.n	800a382 <__swbuf_r+0x64>
 800a378:	4621      	mov	r1, r4
 800a37a:	4628      	mov	r0, r5
 800a37c:	f000 fe6a 	bl	800b054 <_fflush_r>
 800a380:	b938      	cbnz	r0, 800a392 <__swbuf_r+0x74>
 800a382:	4638      	mov	r0, r7
 800a384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a386:	4621      	mov	r1, r4
 800a388:	4628      	mov	r0, r5
 800a38a:	f000 f805 	bl	800a398 <__swsetup_r>
 800a38e:	2800      	cmp	r0, #0
 800a390:	d0d5      	beq.n	800a33e <__swbuf_r+0x20>
 800a392:	f04f 37ff 	mov.w	r7, #4294967295
 800a396:	e7f4      	b.n	800a382 <__swbuf_r+0x64>

0800a398 <__swsetup_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4b2a      	ldr	r3, [pc, #168]	; (800a444 <__swsetup_r+0xac>)
 800a39c:	4605      	mov	r5, r0
 800a39e:	6818      	ldr	r0, [r3, #0]
 800a3a0:	460c      	mov	r4, r1
 800a3a2:	b118      	cbz	r0, 800a3ac <__swsetup_r+0x14>
 800a3a4:	6a03      	ldr	r3, [r0, #32]
 800a3a6:	b90b      	cbnz	r3, 800a3ac <__swsetup_r+0x14>
 800a3a8:	f7ff fe9e 	bl	800a0e8 <__sinit>
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3b2:	0718      	lsls	r0, r3, #28
 800a3b4:	d422      	bmi.n	800a3fc <__swsetup_r+0x64>
 800a3b6:	06d9      	lsls	r1, r3, #27
 800a3b8:	d407      	bmi.n	800a3ca <__swsetup_r+0x32>
 800a3ba:	2309      	movs	r3, #9
 800a3bc:	602b      	str	r3, [r5, #0]
 800a3be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c6:	81a3      	strh	r3, [r4, #12]
 800a3c8:	e034      	b.n	800a434 <__swsetup_r+0x9c>
 800a3ca:	0758      	lsls	r0, r3, #29
 800a3cc:	d512      	bpl.n	800a3f4 <__swsetup_r+0x5c>
 800a3ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3d0:	b141      	cbz	r1, 800a3e4 <__swsetup_r+0x4c>
 800a3d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3d6:	4299      	cmp	r1, r3
 800a3d8:	d002      	beq.n	800a3e0 <__swsetup_r+0x48>
 800a3da:	4628      	mov	r0, r5
 800a3dc:	f000 f942 	bl	800a664 <_free_r>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	6363      	str	r3, [r4, #52]	; 0x34
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3ea:	81a3      	strh	r3, [r4, #12]
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	6063      	str	r3, [r4, #4]
 800a3f0:	6923      	ldr	r3, [r4, #16]
 800a3f2:	6023      	str	r3, [r4, #0]
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	f043 0308 	orr.w	r3, r3, #8
 800a3fa:	81a3      	strh	r3, [r4, #12]
 800a3fc:	6923      	ldr	r3, [r4, #16]
 800a3fe:	b94b      	cbnz	r3, 800a414 <__swsetup_r+0x7c>
 800a400:	89a3      	ldrh	r3, [r4, #12]
 800a402:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a40a:	d003      	beq.n	800a414 <__swsetup_r+0x7c>
 800a40c:	4621      	mov	r1, r4
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 fe6d 	bl	800b0ee <__smakebuf_r>
 800a414:	89a0      	ldrh	r0, [r4, #12]
 800a416:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a41a:	f010 0301 	ands.w	r3, r0, #1
 800a41e:	d00a      	beq.n	800a436 <__swsetup_r+0x9e>
 800a420:	2300      	movs	r3, #0
 800a422:	60a3      	str	r3, [r4, #8]
 800a424:	6963      	ldr	r3, [r4, #20]
 800a426:	425b      	negs	r3, r3
 800a428:	61a3      	str	r3, [r4, #24]
 800a42a:	6923      	ldr	r3, [r4, #16]
 800a42c:	b943      	cbnz	r3, 800a440 <__swsetup_r+0xa8>
 800a42e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a432:	d1c4      	bne.n	800a3be <__swsetup_r+0x26>
 800a434:	bd38      	pop	{r3, r4, r5, pc}
 800a436:	0781      	lsls	r1, r0, #30
 800a438:	bf58      	it	pl
 800a43a:	6963      	ldrpl	r3, [r4, #20]
 800a43c:	60a3      	str	r3, [r4, #8]
 800a43e:	e7f4      	b.n	800a42a <__swsetup_r+0x92>
 800a440:	2000      	movs	r0, #0
 800a442:	e7f7      	b.n	800a434 <__swsetup_r+0x9c>
 800a444:	20000068 	.word	0x20000068

0800a448 <memset>:
 800a448:	4603      	mov	r3, r0
 800a44a:	4402      	add	r2, r0
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d100      	bne.n	800a452 <memset+0xa>
 800a450:	4770      	bx	lr
 800a452:	f803 1b01 	strb.w	r1, [r3], #1
 800a456:	e7f9      	b.n	800a44c <memset+0x4>

0800a458 <strstr>:
 800a458:	780a      	ldrb	r2, [r1, #0]
 800a45a:	b570      	push	{r4, r5, r6, lr}
 800a45c:	b96a      	cbnz	r2, 800a47a <strstr+0x22>
 800a45e:	bd70      	pop	{r4, r5, r6, pc}
 800a460:	429a      	cmp	r2, r3
 800a462:	d109      	bne.n	800a478 <strstr+0x20>
 800a464:	460c      	mov	r4, r1
 800a466:	4605      	mov	r5, r0
 800a468:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0f6      	beq.n	800a45e <strstr+0x6>
 800a470:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a474:	429e      	cmp	r6, r3
 800a476:	d0f7      	beq.n	800a468 <strstr+0x10>
 800a478:	3001      	adds	r0, #1
 800a47a:	7803      	ldrb	r3, [r0, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1ef      	bne.n	800a460 <strstr+0x8>
 800a480:	4618      	mov	r0, r3
 800a482:	e7ec      	b.n	800a45e <strstr+0x6>

0800a484 <_close_r>:
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	2300      	movs	r3, #0
 800a488:	4d05      	ldr	r5, [pc, #20]	; (800a4a0 <_close_r+0x1c>)
 800a48a:	4604      	mov	r4, r0
 800a48c:	4608      	mov	r0, r1
 800a48e:	602b      	str	r3, [r5, #0]
 800a490:	f7f9 f856 	bl	8003540 <_close>
 800a494:	1c43      	adds	r3, r0, #1
 800a496:	d102      	bne.n	800a49e <_close_r+0x1a>
 800a498:	682b      	ldr	r3, [r5, #0]
 800a49a:	b103      	cbz	r3, 800a49e <_close_r+0x1a>
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	200046ec 	.word	0x200046ec

0800a4a4 <_reclaim_reent>:
 800a4a4:	4b29      	ldr	r3, [pc, #164]	; (800a54c <_reclaim_reent+0xa8>)
 800a4a6:	b570      	push	{r4, r5, r6, lr}
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	4283      	cmp	r3, r0
 800a4ae:	d04b      	beq.n	800a548 <_reclaim_reent+0xa4>
 800a4b0:	69c3      	ldr	r3, [r0, #28]
 800a4b2:	b143      	cbz	r3, 800a4c6 <_reclaim_reent+0x22>
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d144      	bne.n	800a544 <_reclaim_reent+0xa0>
 800a4ba:	69e3      	ldr	r3, [r4, #28]
 800a4bc:	6819      	ldr	r1, [r3, #0]
 800a4be:	b111      	cbz	r1, 800a4c6 <_reclaim_reent+0x22>
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 f8cf 	bl	800a664 <_free_r>
 800a4c6:	6961      	ldr	r1, [r4, #20]
 800a4c8:	b111      	cbz	r1, 800a4d0 <_reclaim_reent+0x2c>
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 f8ca 	bl	800a664 <_free_r>
 800a4d0:	69e1      	ldr	r1, [r4, #28]
 800a4d2:	b111      	cbz	r1, 800a4da <_reclaim_reent+0x36>
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f000 f8c5 	bl	800a664 <_free_r>
 800a4da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a4dc:	b111      	cbz	r1, 800a4e4 <_reclaim_reent+0x40>
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f000 f8c0 	bl	800a664 <_free_r>
 800a4e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4e6:	b111      	cbz	r1, 800a4ee <_reclaim_reent+0x4a>
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f000 f8bb 	bl	800a664 <_free_r>
 800a4ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a4f0:	b111      	cbz	r1, 800a4f8 <_reclaim_reent+0x54>
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f000 f8b6 	bl	800a664 <_free_r>
 800a4f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a4fa:	b111      	cbz	r1, 800a502 <_reclaim_reent+0x5e>
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f000 f8b1 	bl	800a664 <_free_r>
 800a502:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a504:	b111      	cbz	r1, 800a50c <_reclaim_reent+0x68>
 800a506:	4620      	mov	r0, r4
 800a508:	f000 f8ac 	bl	800a664 <_free_r>
 800a50c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a50e:	b111      	cbz	r1, 800a516 <_reclaim_reent+0x72>
 800a510:	4620      	mov	r0, r4
 800a512:	f000 f8a7 	bl	800a664 <_free_r>
 800a516:	6a23      	ldr	r3, [r4, #32]
 800a518:	b1b3      	cbz	r3, 800a548 <_reclaim_reent+0xa4>
 800a51a:	4620      	mov	r0, r4
 800a51c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a520:	4718      	bx	r3
 800a522:	5949      	ldr	r1, [r1, r5]
 800a524:	b941      	cbnz	r1, 800a538 <_reclaim_reent+0x94>
 800a526:	3504      	adds	r5, #4
 800a528:	69e3      	ldr	r3, [r4, #28]
 800a52a:	2d80      	cmp	r5, #128	; 0x80
 800a52c:	68d9      	ldr	r1, [r3, #12]
 800a52e:	d1f8      	bne.n	800a522 <_reclaim_reent+0x7e>
 800a530:	4620      	mov	r0, r4
 800a532:	f000 f897 	bl	800a664 <_free_r>
 800a536:	e7c0      	b.n	800a4ba <_reclaim_reent+0x16>
 800a538:	680e      	ldr	r6, [r1, #0]
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 f892 	bl	800a664 <_free_r>
 800a540:	4631      	mov	r1, r6
 800a542:	e7ef      	b.n	800a524 <_reclaim_reent+0x80>
 800a544:	2500      	movs	r5, #0
 800a546:	e7ef      	b.n	800a528 <_reclaim_reent+0x84>
 800a548:	bd70      	pop	{r4, r5, r6, pc}
 800a54a:	bf00      	nop
 800a54c:	20000068 	.word	0x20000068

0800a550 <_lseek_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4604      	mov	r4, r0
 800a554:	4608      	mov	r0, r1
 800a556:	4611      	mov	r1, r2
 800a558:	2200      	movs	r2, #0
 800a55a:	4d05      	ldr	r5, [pc, #20]	; (800a570 <_lseek_r+0x20>)
 800a55c:	602a      	str	r2, [r5, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	f7f8 fff8 	bl	8003554 <_lseek>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_lseek_r+0x1e>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_lseek_r+0x1e>
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	200046ec 	.word	0x200046ec

0800a574 <_read_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	4604      	mov	r4, r0
 800a578:	4608      	mov	r0, r1
 800a57a:	4611      	mov	r1, r2
 800a57c:	2200      	movs	r2, #0
 800a57e:	4d05      	ldr	r5, [pc, #20]	; (800a594 <_read_r+0x20>)
 800a580:	602a      	str	r2, [r5, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	f7f8 ffc0 	bl	8003508 <_read>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d102      	bne.n	800a592 <_read_r+0x1e>
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	b103      	cbz	r3, 800a592 <_read_r+0x1e>
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	bd38      	pop	{r3, r4, r5, pc}
 800a594:	200046ec 	.word	0x200046ec

0800a598 <_sbrk_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	2300      	movs	r3, #0
 800a59c:	4d05      	ldr	r5, [pc, #20]	; (800a5b4 <_sbrk_r+0x1c>)
 800a59e:	4604      	mov	r4, r0
 800a5a0:	4608      	mov	r0, r1
 800a5a2:	602b      	str	r3, [r5, #0]
 800a5a4:	f7f8 ffd8 	bl	8003558 <_sbrk>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	d102      	bne.n	800a5b2 <_sbrk_r+0x1a>
 800a5ac:	682b      	ldr	r3, [r5, #0]
 800a5ae:	b103      	cbz	r3, 800a5b2 <_sbrk_r+0x1a>
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	bd38      	pop	{r3, r4, r5, pc}
 800a5b4:	200046ec 	.word	0x200046ec

0800a5b8 <_write_r>:
 800a5b8:	b538      	push	{r3, r4, r5, lr}
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	4611      	mov	r1, r2
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	4d05      	ldr	r5, [pc, #20]	; (800a5d8 <_write_r+0x20>)
 800a5c4:	602a      	str	r2, [r5, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	f7f8 ffac 	bl	8003524 <_write>
 800a5cc:	1c43      	adds	r3, r0, #1
 800a5ce:	d102      	bne.n	800a5d6 <_write_r+0x1e>
 800a5d0:	682b      	ldr	r3, [r5, #0]
 800a5d2:	b103      	cbz	r3, 800a5d6 <_write_r+0x1e>
 800a5d4:	6023      	str	r3, [r4, #0]
 800a5d6:	bd38      	pop	{r3, r4, r5, pc}
 800a5d8:	200046ec 	.word	0x200046ec

0800a5dc <__errno>:
 800a5dc:	4b01      	ldr	r3, [pc, #4]	; (800a5e4 <__errno+0x8>)
 800a5de:	6818      	ldr	r0, [r3, #0]
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	20000068 	.word	0x20000068

0800a5e8 <__libc_init_array>:
 800a5e8:	b570      	push	{r4, r5, r6, lr}
 800a5ea:	2600      	movs	r6, #0
 800a5ec:	4d0c      	ldr	r5, [pc, #48]	; (800a620 <__libc_init_array+0x38>)
 800a5ee:	4c0d      	ldr	r4, [pc, #52]	; (800a624 <__libc_init_array+0x3c>)
 800a5f0:	1b64      	subs	r4, r4, r5
 800a5f2:	10a4      	asrs	r4, r4, #2
 800a5f4:	42a6      	cmp	r6, r4
 800a5f6:	d109      	bne.n	800a60c <__libc_init_array+0x24>
 800a5f8:	f000 fe38 	bl	800b26c <_init>
 800a5fc:	2600      	movs	r6, #0
 800a5fe:	4d0a      	ldr	r5, [pc, #40]	; (800a628 <__libc_init_array+0x40>)
 800a600:	4c0a      	ldr	r4, [pc, #40]	; (800a62c <__libc_init_array+0x44>)
 800a602:	1b64      	subs	r4, r4, r5
 800a604:	10a4      	asrs	r4, r4, #2
 800a606:	42a6      	cmp	r6, r4
 800a608:	d105      	bne.n	800a616 <__libc_init_array+0x2e>
 800a60a:	bd70      	pop	{r4, r5, r6, pc}
 800a60c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a610:	4798      	blx	r3
 800a612:	3601      	adds	r6, #1
 800a614:	e7ee      	b.n	800a5f4 <__libc_init_array+0xc>
 800a616:	f855 3b04 	ldr.w	r3, [r5], #4
 800a61a:	4798      	blx	r3
 800a61c:	3601      	adds	r6, #1
 800a61e:	e7f2      	b.n	800a606 <__libc_init_array+0x1e>
 800a620:	0800b97c 	.word	0x0800b97c
 800a624:	0800b97c 	.word	0x0800b97c
 800a628:	0800b97c 	.word	0x0800b97c
 800a62c:	0800b980 	.word	0x0800b980

0800a630 <__retarget_lock_init_recursive>:
 800a630:	4770      	bx	lr

0800a632 <__retarget_lock_acquire_recursive>:
 800a632:	4770      	bx	lr

0800a634 <__retarget_lock_release_recursive>:
 800a634:	4770      	bx	lr

0800a636 <strcpy>:
 800a636:	4603      	mov	r3, r0
 800a638:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a63c:	f803 2b01 	strb.w	r2, [r3], #1
 800a640:	2a00      	cmp	r2, #0
 800a642:	d1f9      	bne.n	800a638 <strcpy+0x2>
 800a644:	4770      	bx	lr

0800a646 <memcpy>:
 800a646:	440a      	add	r2, r1
 800a648:	4291      	cmp	r1, r2
 800a64a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a64e:	d100      	bne.n	800a652 <memcpy+0xc>
 800a650:	4770      	bx	lr
 800a652:	b510      	push	{r4, lr}
 800a654:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a658:	4291      	cmp	r1, r2
 800a65a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a65e:	d1f9      	bne.n	800a654 <memcpy+0xe>
 800a660:	bd10      	pop	{r4, pc}
	...

0800a664 <_free_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4605      	mov	r5, r0
 800a668:	2900      	cmp	r1, #0
 800a66a:	d040      	beq.n	800a6ee <_free_r+0x8a>
 800a66c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a670:	1f0c      	subs	r4, r1, #4
 800a672:	2b00      	cmp	r3, #0
 800a674:	bfb8      	it	lt
 800a676:	18e4      	addlt	r4, r4, r3
 800a678:	f7ff fc9e 	bl	8009fb8 <__malloc_lock>
 800a67c:	4a1c      	ldr	r2, [pc, #112]	; (800a6f0 <_free_r+0x8c>)
 800a67e:	6813      	ldr	r3, [r2, #0]
 800a680:	b933      	cbnz	r3, 800a690 <_free_r+0x2c>
 800a682:	6063      	str	r3, [r4, #4]
 800a684:	6014      	str	r4, [r2, #0]
 800a686:	4628      	mov	r0, r5
 800a688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a68c:	f7ff bc9a 	b.w	8009fc4 <__malloc_unlock>
 800a690:	42a3      	cmp	r3, r4
 800a692:	d908      	bls.n	800a6a6 <_free_r+0x42>
 800a694:	6820      	ldr	r0, [r4, #0]
 800a696:	1821      	adds	r1, r4, r0
 800a698:	428b      	cmp	r3, r1
 800a69a:	bf01      	itttt	eq
 800a69c:	6819      	ldreq	r1, [r3, #0]
 800a69e:	685b      	ldreq	r3, [r3, #4]
 800a6a0:	1809      	addeq	r1, r1, r0
 800a6a2:	6021      	streq	r1, [r4, #0]
 800a6a4:	e7ed      	b.n	800a682 <_free_r+0x1e>
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	b10b      	cbz	r3, 800a6b0 <_free_r+0x4c>
 800a6ac:	42a3      	cmp	r3, r4
 800a6ae:	d9fa      	bls.n	800a6a6 <_free_r+0x42>
 800a6b0:	6811      	ldr	r1, [r2, #0]
 800a6b2:	1850      	adds	r0, r2, r1
 800a6b4:	42a0      	cmp	r0, r4
 800a6b6:	d10b      	bne.n	800a6d0 <_free_r+0x6c>
 800a6b8:	6820      	ldr	r0, [r4, #0]
 800a6ba:	4401      	add	r1, r0
 800a6bc:	1850      	adds	r0, r2, r1
 800a6be:	4283      	cmp	r3, r0
 800a6c0:	6011      	str	r1, [r2, #0]
 800a6c2:	d1e0      	bne.n	800a686 <_free_r+0x22>
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	4408      	add	r0, r1
 800a6ca:	6010      	str	r0, [r2, #0]
 800a6cc:	6053      	str	r3, [r2, #4]
 800a6ce:	e7da      	b.n	800a686 <_free_r+0x22>
 800a6d0:	d902      	bls.n	800a6d8 <_free_r+0x74>
 800a6d2:	230c      	movs	r3, #12
 800a6d4:	602b      	str	r3, [r5, #0]
 800a6d6:	e7d6      	b.n	800a686 <_free_r+0x22>
 800a6d8:	6820      	ldr	r0, [r4, #0]
 800a6da:	1821      	adds	r1, r4, r0
 800a6dc:	428b      	cmp	r3, r1
 800a6de:	bf01      	itttt	eq
 800a6e0:	6819      	ldreq	r1, [r3, #0]
 800a6e2:	685b      	ldreq	r3, [r3, #4]
 800a6e4:	1809      	addeq	r1, r1, r0
 800a6e6:	6021      	streq	r1, [r4, #0]
 800a6e8:	6063      	str	r3, [r4, #4]
 800a6ea:	6054      	str	r4, [r2, #4]
 800a6ec:	e7cb      	b.n	800a686 <_free_r+0x22>
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	200045a8 	.word	0x200045a8

0800a6f4 <__ssputs_r>:
 800a6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f8:	461f      	mov	r7, r3
 800a6fa:	688e      	ldr	r6, [r1, #8]
 800a6fc:	4682      	mov	sl, r0
 800a6fe:	42be      	cmp	r6, r7
 800a700:	460c      	mov	r4, r1
 800a702:	4690      	mov	r8, r2
 800a704:	680b      	ldr	r3, [r1, #0]
 800a706:	d82c      	bhi.n	800a762 <__ssputs_r+0x6e>
 800a708:	898a      	ldrh	r2, [r1, #12]
 800a70a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a70e:	d026      	beq.n	800a75e <__ssputs_r+0x6a>
 800a710:	6965      	ldr	r5, [r4, #20]
 800a712:	6909      	ldr	r1, [r1, #16]
 800a714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a718:	eba3 0901 	sub.w	r9, r3, r1
 800a71c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a720:	1c7b      	adds	r3, r7, #1
 800a722:	444b      	add	r3, r9
 800a724:	106d      	asrs	r5, r5, #1
 800a726:	429d      	cmp	r5, r3
 800a728:	bf38      	it	cc
 800a72a:	461d      	movcc	r5, r3
 800a72c:	0553      	lsls	r3, r2, #21
 800a72e:	d527      	bpl.n	800a780 <__ssputs_r+0x8c>
 800a730:	4629      	mov	r1, r5
 800a732:	f7ff fbc1 	bl	8009eb8 <_malloc_r>
 800a736:	4606      	mov	r6, r0
 800a738:	b360      	cbz	r0, 800a794 <__ssputs_r+0xa0>
 800a73a:	464a      	mov	r2, r9
 800a73c:	6921      	ldr	r1, [r4, #16]
 800a73e:	f7ff ff82 	bl	800a646 <memcpy>
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a74c:	81a3      	strh	r3, [r4, #12]
 800a74e:	6126      	str	r6, [r4, #16]
 800a750:	444e      	add	r6, r9
 800a752:	6026      	str	r6, [r4, #0]
 800a754:	463e      	mov	r6, r7
 800a756:	6165      	str	r5, [r4, #20]
 800a758:	eba5 0509 	sub.w	r5, r5, r9
 800a75c:	60a5      	str	r5, [r4, #8]
 800a75e:	42be      	cmp	r6, r7
 800a760:	d900      	bls.n	800a764 <__ssputs_r+0x70>
 800a762:	463e      	mov	r6, r7
 800a764:	4632      	mov	r2, r6
 800a766:	4641      	mov	r1, r8
 800a768:	6820      	ldr	r0, [r4, #0]
 800a76a:	f000 fcfc 	bl	800b166 <memmove>
 800a76e:	2000      	movs	r0, #0
 800a770:	68a3      	ldr	r3, [r4, #8]
 800a772:	1b9b      	subs	r3, r3, r6
 800a774:	60a3      	str	r3, [r4, #8]
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	4433      	add	r3, r6
 800a77a:	6023      	str	r3, [r4, #0]
 800a77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a780:	462a      	mov	r2, r5
 800a782:	f000 fd3b 	bl	800b1fc <_realloc_r>
 800a786:	4606      	mov	r6, r0
 800a788:	2800      	cmp	r0, #0
 800a78a:	d1e0      	bne.n	800a74e <__ssputs_r+0x5a>
 800a78c:	4650      	mov	r0, sl
 800a78e:	6921      	ldr	r1, [r4, #16]
 800a790:	f7ff ff68 	bl	800a664 <_free_r>
 800a794:	230c      	movs	r3, #12
 800a796:	f8ca 3000 	str.w	r3, [sl]
 800a79a:	89a3      	ldrh	r3, [r4, #12]
 800a79c:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7a4:	81a3      	strh	r3, [r4, #12]
 800a7a6:	e7e9      	b.n	800a77c <__ssputs_r+0x88>

0800a7a8 <_svfiprintf_r>:
 800a7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ac:	4698      	mov	r8, r3
 800a7ae:	898b      	ldrh	r3, [r1, #12]
 800a7b0:	4607      	mov	r7, r0
 800a7b2:	061b      	lsls	r3, r3, #24
 800a7b4:	460d      	mov	r5, r1
 800a7b6:	4614      	mov	r4, r2
 800a7b8:	b09d      	sub	sp, #116	; 0x74
 800a7ba:	d50e      	bpl.n	800a7da <_svfiprintf_r+0x32>
 800a7bc:	690b      	ldr	r3, [r1, #16]
 800a7be:	b963      	cbnz	r3, 800a7da <_svfiprintf_r+0x32>
 800a7c0:	2140      	movs	r1, #64	; 0x40
 800a7c2:	f7ff fb79 	bl	8009eb8 <_malloc_r>
 800a7c6:	6028      	str	r0, [r5, #0]
 800a7c8:	6128      	str	r0, [r5, #16]
 800a7ca:	b920      	cbnz	r0, 800a7d6 <_svfiprintf_r+0x2e>
 800a7cc:	230c      	movs	r3, #12
 800a7ce:	603b      	str	r3, [r7, #0]
 800a7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d4:	e0d0      	b.n	800a978 <_svfiprintf_r+0x1d0>
 800a7d6:	2340      	movs	r3, #64	; 0x40
 800a7d8:	616b      	str	r3, [r5, #20]
 800a7da:	2300      	movs	r3, #0
 800a7dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a7de:	2320      	movs	r3, #32
 800a7e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7e4:	2330      	movs	r3, #48	; 0x30
 800a7e6:	f04f 0901 	mov.w	r9, #1
 800a7ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ee:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a990 <_svfiprintf_r+0x1e8>
 800a7f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7f6:	4623      	mov	r3, r4
 800a7f8:	469a      	mov	sl, r3
 800a7fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7fe:	b10a      	cbz	r2, 800a804 <_svfiprintf_r+0x5c>
 800a800:	2a25      	cmp	r2, #37	; 0x25
 800a802:	d1f9      	bne.n	800a7f8 <_svfiprintf_r+0x50>
 800a804:	ebba 0b04 	subs.w	fp, sl, r4
 800a808:	d00b      	beq.n	800a822 <_svfiprintf_r+0x7a>
 800a80a:	465b      	mov	r3, fp
 800a80c:	4622      	mov	r2, r4
 800a80e:	4629      	mov	r1, r5
 800a810:	4638      	mov	r0, r7
 800a812:	f7ff ff6f 	bl	800a6f4 <__ssputs_r>
 800a816:	3001      	adds	r0, #1
 800a818:	f000 80a9 	beq.w	800a96e <_svfiprintf_r+0x1c6>
 800a81c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a81e:	445a      	add	r2, fp
 800a820:	9209      	str	r2, [sp, #36]	; 0x24
 800a822:	f89a 3000 	ldrb.w	r3, [sl]
 800a826:	2b00      	cmp	r3, #0
 800a828:	f000 80a1 	beq.w	800a96e <_svfiprintf_r+0x1c6>
 800a82c:	2300      	movs	r3, #0
 800a82e:	f04f 32ff 	mov.w	r2, #4294967295
 800a832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a836:	f10a 0a01 	add.w	sl, sl, #1
 800a83a:	9304      	str	r3, [sp, #16]
 800a83c:	9307      	str	r3, [sp, #28]
 800a83e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a842:	931a      	str	r3, [sp, #104]	; 0x68
 800a844:	4654      	mov	r4, sl
 800a846:	2205      	movs	r2, #5
 800a848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a84c:	4850      	ldr	r0, [pc, #320]	; (800a990 <_svfiprintf_r+0x1e8>)
 800a84e:	f000 fcc7 	bl	800b1e0 <memchr>
 800a852:	9a04      	ldr	r2, [sp, #16]
 800a854:	b9d8      	cbnz	r0, 800a88e <_svfiprintf_r+0xe6>
 800a856:	06d0      	lsls	r0, r2, #27
 800a858:	bf44      	itt	mi
 800a85a:	2320      	movmi	r3, #32
 800a85c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a860:	0711      	lsls	r1, r2, #28
 800a862:	bf44      	itt	mi
 800a864:	232b      	movmi	r3, #43	; 0x2b
 800a866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a86a:	f89a 3000 	ldrb.w	r3, [sl]
 800a86e:	2b2a      	cmp	r3, #42	; 0x2a
 800a870:	d015      	beq.n	800a89e <_svfiprintf_r+0xf6>
 800a872:	4654      	mov	r4, sl
 800a874:	2000      	movs	r0, #0
 800a876:	f04f 0c0a 	mov.w	ip, #10
 800a87a:	9a07      	ldr	r2, [sp, #28]
 800a87c:	4621      	mov	r1, r4
 800a87e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a882:	3b30      	subs	r3, #48	; 0x30
 800a884:	2b09      	cmp	r3, #9
 800a886:	d94d      	bls.n	800a924 <_svfiprintf_r+0x17c>
 800a888:	b1b0      	cbz	r0, 800a8b8 <_svfiprintf_r+0x110>
 800a88a:	9207      	str	r2, [sp, #28]
 800a88c:	e014      	b.n	800a8b8 <_svfiprintf_r+0x110>
 800a88e:	eba0 0308 	sub.w	r3, r0, r8
 800a892:	fa09 f303 	lsl.w	r3, r9, r3
 800a896:	4313      	orrs	r3, r2
 800a898:	46a2      	mov	sl, r4
 800a89a:	9304      	str	r3, [sp, #16]
 800a89c:	e7d2      	b.n	800a844 <_svfiprintf_r+0x9c>
 800a89e:	9b03      	ldr	r3, [sp, #12]
 800a8a0:	1d19      	adds	r1, r3, #4
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	9103      	str	r1, [sp, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	bfbb      	ittet	lt
 800a8aa:	425b      	neglt	r3, r3
 800a8ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a8b0:	9307      	strge	r3, [sp, #28]
 800a8b2:	9307      	strlt	r3, [sp, #28]
 800a8b4:	bfb8      	it	lt
 800a8b6:	9204      	strlt	r2, [sp, #16]
 800a8b8:	7823      	ldrb	r3, [r4, #0]
 800a8ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a8bc:	d10c      	bne.n	800a8d8 <_svfiprintf_r+0x130>
 800a8be:	7863      	ldrb	r3, [r4, #1]
 800a8c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a8c2:	d134      	bne.n	800a92e <_svfiprintf_r+0x186>
 800a8c4:	9b03      	ldr	r3, [sp, #12]
 800a8c6:	3402      	adds	r4, #2
 800a8c8:	1d1a      	adds	r2, r3, #4
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	9203      	str	r2, [sp, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	bfb8      	it	lt
 800a8d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8d6:	9305      	str	r3, [sp, #20]
 800a8d8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a994 <_svfiprintf_r+0x1ec>
 800a8dc:	2203      	movs	r2, #3
 800a8de:	4650      	mov	r0, sl
 800a8e0:	7821      	ldrb	r1, [r4, #0]
 800a8e2:	f000 fc7d 	bl	800b1e0 <memchr>
 800a8e6:	b138      	cbz	r0, 800a8f8 <_svfiprintf_r+0x150>
 800a8e8:	2240      	movs	r2, #64	; 0x40
 800a8ea:	9b04      	ldr	r3, [sp, #16]
 800a8ec:	eba0 000a 	sub.w	r0, r0, sl
 800a8f0:	4082      	lsls	r2, r0
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	3401      	adds	r4, #1
 800a8f6:	9304      	str	r3, [sp, #16]
 800a8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8fc:	2206      	movs	r2, #6
 800a8fe:	4826      	ldr	r0, [pc, #152]	; (800a998 <_svfiprintf_r+0x1f0>)
 800a900:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a904:	f000 fc6c 	bl	800b1e0 <memchr>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d038      	beq.n	800a97e <_svfiprintf_r+0x1d6>
 800a90c:	4b23      	ldr	r3, [pc, #140]	; (800a99c <_svfiprintf_r+0x1f4>)
 800a90e:	bb1b      	cbnz	r3, 800a958 <_svfiprintf_r+0x1b0>
 800a910:	9b03      	ldr	r3, [sp, #12]
 800a912:	3307      	adds	r3, #7
 800a914:	f023 0307 	bic.w	r3, r3, #7
 800a918:	3308      	adds	r3, #8
 800a91a:	9303      	str	r3, [sp, #12]
 800a91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a91e:	4433      	add	r3, r6
 800a920:	9309      	str	r3, [sp, #36]	; 0x24
 800a922:	e768      	b.n	800a7f6 <_svfiprintf_r+0x4e>
 800a924:	460c      	mov	r4, r1
 800a926:	2001      	movs	r0, #1
 800a928:	fb0c 3202 	mla	r2, ip, r2, r3
 800a92c:	e7a6      	b.n	800a87c <_svfiprintf_r+0xd4>
 800a92e:	2300      	movs	r3, #0
 800a930:	f04f 0c0a 	mov.w	ip, #10
 800a934:	4619      	mov	r1, r3
 800a936:	3401      	adds	r4, #1
 800a938:	9305      	str	r3, [sp, #20]
 800a93a:	4620      	mov	r0, r4
 800a93c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a940:	3a30      	subs	r2, #48	; 0x30
 800a942:	2a09      	cmp	r2, #9
 800a944:	d903      	bls.n	800a94e <_svfiprintf_r+0x1a6>
 800a946:	2b00      	cmp	r3, #0
 800a948:	d0c6      	beq.n	800a8d8 <_svfiprintf_r+0x130>
 800a94a:	9105      	str	r1, [sp, #20]
 800a94c:	e7c4      	b.n	800a8d8 <_svfiprintf_r+0x130>
 800a94e:	4604      	mov	r4, r0
 800a950:	2301      	movs	r3, #1
 800a952:	fb0c 2101 	mla	r1, ip, r1, r2
 800a956:	e7f0      	b.n	800a93a <_svfiprintf_r+0x192>
 800a958:	ab03      	add	r3, sp, #12
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	462a      	mov	r2, r5
 800a95e:	4638      	mov	r0, r7
 800a960:	4b0f      	ldr	r3, [pc, #60]	; (800a9a0 <_svfiprintf_r+0x1f8>)
 800a962:	a904      	add	r1, sp, #16
 800a964:	f3af 8000 	nop.w
 800a968:	1c42      	adds	r2, r0, #1
 800a96a:	4606      	mov	r6, r0
 800a96c:	d1d6      	bne.n	800a91c <_svfiprintf_r+0x174>
 800a96e:	89ab      	ldrh	r3, [r5, #12]
 800a970:	065b      	lsls	r3, r3, #25
 800a972:	f53f af2d 	bmi.w	800a7d0 <_svfiprintf_r+0x28>
 800a976:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a978:	b01d      	add	sp, #116	; 0x74
 800a97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97e:	ab03      	add	r3, sp, #12
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	462a      	mov	r2, r5
 800a984:	4638      	mov	r0, r7
 800a986:	4b06      	ldr	r3, [pc, #24]	; (800a9a0 <_svfiprintf_r+0x1f8>)
 800a988:	a904      	add	r1, sp, #16
 800a98a:	f000 f9bf 	bl	800ad0c <_printf_i>
 800a98e:	e7eb      	b.n	800a968 <_svfiprintf_r+0x1c0>
 800a990:	0800b948 	.word	0x0800b948
 800a994:	0800b94e 	.word	0x0800b94e
 800a998:	0800b952 	.word	0x0800b952
 800a99c:	00000000 	.word	0x00000000
 800a9a0:	0800a6f5 	.word	0x0800a6f5

0800a9a4 <__sfputc_r>:
 800a9a4:	6893      	ldr	r3, [r2, #8]
 800a9a6:	b410      	push	{r4}
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	6093      	str	r3, [r2, #8]
 800a9ae:	da07      	bge.n	800a9c0 <__sfputc_r+0x1c>
 800a9b0:	6994      	ldr	r4, [r2, #24]
 800a9b2:	42a3      	cmp	r3, r4
 800a9b4:	db01      	blt.n	800a9ba <__sfputc_r+0x16>
 800a9b6:	290a      	cmp	r1, #10
 800a9b8:	d102      	bne.n	800a9c0 <__sfputc_r+0x1c>
 800a9ba:	bc10      	pop	{r4}
 800a9bc:	f7ff bcaf 	b.w	800a31e <__swbuf_r>
 800a9c0:	6813      	ldr	r3, [r2, #0]
 800a9c2:	1c58      	adds	r0, r3, #1
 800a9c4:	6010      	str	r0, [r2, #0]
 800a9c6:	7019      	strb	r1, [r3, #0]
 800a9c8:	4608      	mov	r0, r1
 800a9ca:	bc10      	pop	{r4}
 800a9cc:	4770      	bx	lr

0800a9ce <__sfputs_r>:
 800a9ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d0:	4606      	mov	r6, r0
 800a9d2:	460f      	mov	r7, r1
 800a9d4:	4614      	mov	r4, r2
 800a9d6:	18d5      	adds	r5, r2, r3
 800a9d8:	42ac      	cmp	r4, r5
 800a9da:	d101      	bne.n	800a9e0 <__sfputs_r+0x12>
 800a9dc:	2000      	movs	r0, #0
 800a9de:	e007      	b.n	800a9f0 <__sfputs_r+0x22>
 800a9e0:	463a      	mov	r2, r7
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e8:	f7ff ffdc 	bl	800a9a4 <__sfputc_r>
 800a9ec:	1c43      	adds	r3, r0, #1
 800a9ee:	d1f3      	bne.n	800a9d8 <__sfputs_r+0xa>
 800a9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9f4 <_vfiprintf_r>:
 800a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f8:	460d      	mov	r5, r1
 800a9fa:	4614      	mov	r4, r2
 800a9fc:	4698      	mov	r8, r3
 800a9fe:	4606      	mov	r6, r0
 800aa00:	b09d      	sub	sp, #116	; 0x74
 800aa02:	b118      	cbz	r0, 800aa0c <_vfiprintf_r+0x18>
 800aa04:	6a03      	ldr	r3, [r0, #32]
 800aa06:	b90b      	cbnz	r3, 800aa0c <_vfiprintf_r+0x18>
 800aa08:	f7ff fb6e 	bl	800a0e8 <__sinit>
 800aa0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa0e:	07d9      	lsls	r1, r3, #31
 800aa10:	d405      	bmi.n	800aa1e <_vfiprintf_r+0x2a>
 800aa12:	89ab      	ldrh	r3, [r5, #12]
 800aa14:	059a      	lsls	r2, r3, #22
 800aa16:	d402      	bmi.n	800aa1e <_vfiprintf_r+0x2a>
 800aa18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa1a:	f7ff fe0a 	bl	800a632 <__retarget_lock_acquire_recursive>
 800aa1e:	89ab      	ldrh	r3, [r5, #12]
 800aa20:	071b      	lsls	r3, r3, #28
 800aa22:	d501      	bpl.n	800aa28 <_vfiprintf_r+0x34>
 800aa24:	692b      	ldr	r3, [r5, #16]
 800aa26:	b99b      	cbnz	r3, 800aa50 <_vfiprintf_r+0x5c>
 800aa28:	4629      	mov	r1, r5
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	f7ff fcb4 	bl	800a398 <__swsetup_r>
 800aa30:	b170      	cbz	r0, 800aa50 <_vfiprintf_r+0x5c>
 800aa32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa34:	07dc      	lsls	r4, r3, #31
 800aa36:	d504      	bpl.n	800aa42 <_vfiprintf_r+0x4e>
 800aa38:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3c:	b01d      	add	sp, #116	; 0x74
 800aa3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa42:	89ab      	ldrh	r3, [r5, #12]
 800aa44:	0598      	lsls	r0, r3, #22
 800aa46:	d4f7      	bmi.n	800aa38 <_vfiprintf_r+0x44>
 800aa48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa4a:	f7ff fdf3 	bl	800a634 <__retarget_lock_release_recursive>
 800aa4e:	e7f3      	b.n	800aa38 <_vfiprintf_r+0x44>
 800aa50:	2300      	movs	r3, #0
 800aa52:	9309      	str	r3, [sp, #36]	; 0x24
 800aa54:	2320      	movs	r3, #32
 800aa56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa5a:	2330      	movs	r3, #48	; 0x30
 800aa5c:	f04f 0901 	mov.w	r9, #1
 800aa60:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa64:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800ac14 <_vfiprintf_r+0x220>
 800aa68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa6c:	4623      	mov	r3, r4
 800aa6e:	469a      	mov	sl, r3
 800aa70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa74:	b10a      	cbz	r2, 800aa7a <_vfiprintf_r+0x86>
 800aa76:	2a25      	cmp	r2, #37	; 0x25
 800aa78:	d1f9      	bne.n	800aa6e <_vfiprintf_r+0x7a>
 800aa7a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa7e:	d00b      	beq.n	800aa98 <_vfiprintf_r+0xa4>
 800aa80:	465b      	mov	r3, fp
 800aa82:	4622      	mov	r2, r4
 800aa84:	4629      	mov	r1, r5
 800aa86:	4630      	mov	r0, r6
 800aa88:	f7ff ffa1 	bl	800a9ce <__sfputs_r>
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	f000 80a9 	beq.w	800abe4 <_vfiprintf_r+0x1f0>
 800aa92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa94:	445a      	add	r2, fp
 800aa96:	9209      	str	r2, [sp, #36]	; 0x24
 800aa98:	f89a 3000 	ldrb.w	r3, [sl]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f000 80a1 	beq.w	800abe4 <_vfiprintf_r+0x1f0>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaac:	f10a 0a01 	add.w	sl, sl, #1
 800aab0:	9304      	str	r3, [sp, #16]
 800aab2:	9307      	str	r3, [sp, #28]
 800aab4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aab8:	931a      	str	r3, [sp, #104]	; 0x68
 800aaba:	4654      	mov	r4, sl
 800aabc:	2205      	movs	r2, #5
 800aabe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac2:	4854      	ldr	r0, [pc, #336]	; (800ac14 <_vfiprintf_r+0x220>)
 800aac4:	f000 fb8c 	bl	800b1e0 <memchr>
 800aac8:	9a04      	ldr	r2, [sp, #16]
 800aaca:	b9d8      	cbnz	r0, 800ab04 <_vfiprintf_r+0x110>
 800aacc:	06d1      	lsls	r1, r2, #27
 800aace:	bf44      	itt	mi
 800aad0:	2320      	movmi	r3, #32
 800aad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aad6:	0713      	lsls	r3, r2, #28
 800aad8:	bf44      	itt	mi
 800aada:	232b      	movmi	r3, #43	; 0x2b
 800aadc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aae0:	f89a 3000 	ldrb.w	r3, [sl]
 800aae4:	2b2a      	cmp	r3, #42	; 0x2a
 800aae6:	d015      	beq.n	800ab14 <_vfiprintf_r+0x120>
 800aae8:	4654      	mov	r4, sl
 800aaea:	2000      	movs	r0, #0
 800aaec:	f04f 0c0a 	mov.w	ip, #10
 800aaf0:	9a07      	ldr	r2, [sp, #28]
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaf8:	3b30      	subs	r3, #48	; 0x30
 800aafa:	2b09      	cmp	r3, #9
 800aafc:	d94d      	bls.n	800ab9a <_vfiprintf_r+0x1a6>
 800aafe:	b1b0      	cbz	r0, 800ab2e <_vfiprintf_r+0x13a>
 800ab00:	9207      	str	r2, [sp, #28]
 800ab02:	e014      	b.n	800ab2e <_vfiprintf_r+0x13a>
 800ab04:	eba0 0308 	sub.w	r3, r0, r8
 800ab08:	fa09 f303 	lsl.w	r3, r9, r3
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	46a2      	mov	sl, r4
 800ab10:	9304      	str	r3, [sp, #16]
 800ab12:	e7d2      	b.n	800aaba <_vfiprintf_r+0xc6>
 800ab14:	9b03      	ldr	r3, [sp, #12]
 800ab16:	1d19      	adds	r1, r3, #4
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	9103      	str	r1, [sp, #12]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	bfbb      	ittet	lt
 800ab20:	425b      	neglt	r3, r3
 800ab22:	f042 0202 	orrlt.w	r2, r2, #2
 800ab26:	9307      	strge	r3, [sp, #28]
 800ab28:	9307      	strlt	r3, [sp, #28]
 800ab2a:	bfb8      	it	lt
 800ab2c:	9204      	strlt	r2, [sp, #16]
 800ab2e:	7823      	ldrb	r3, [r4, #0]
 800ab30:	2b2e      	cmp	r3, #46	; 0x2e
 800ab32:	d10c      	bne.n	800ab4e <_vfiprintf_r+0x15a>
 800ab34:	7863      	ldrb	r3, [r4, #1]
 800ab36:	2b2a      	cmp	r3, #42	; 0x2a
 800ab38:	d134      	bne.n	800aba4 <_vfiprintf_r+0x1b0>
 800ab3a:	9b03      	ldr	r3, [sp, #12]
 800ab3c:	3402      	adds	r4, #2
 800ab3e:	1d1a      	adds	r2, r3, #4
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	9203      	str	r2, [sp, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	bfb8      	it	lt
 800ab48:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab4c:	9305      	str	r3, [sp, #20]
 800ab4e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac18 <_vfiprintf_r+0x224>
 800ab52:	2203      	movs	r2, #3
 800ab54:	4650      	mov	r0, sl
 800ab56:	7821      	ldrb	r1, [r4, #0]
 800ab58:	f000 fb42 	bl	800b1e0 <memchr>
 800ab5c:	b138      	cbz	r0, 800ab6e <_vfiprintf_r+0x17a>
 800ab5e:	2240      	movs	r2, #64	; 0x40
 800ab60:	9b04      	ldr	r3, [sp, #16]
 800ab62:	eba0 000a 	sub.w	r0, r0, sl
 800ab66:	4082      	lsls	r2, r0
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	3401      	adds	r4, #1
 800ab6c:	9304      	str	r3, [sp, #16]
 800ab6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab72:	2206      	movs	r2, #6
 800ab74:	4829      	ldr	r0, [pc, #164]	; (800ac1c <_vfiprintf_r+0x228>)
 800ab76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab7a:	f000 fb31 	bl	800b1e0 <memchr>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d03f      	beq.n	800ac02 <_vfiprintf_r+0x20e>
 800ab82:	4b27      	ldr	r3, [pc, #156]	; (800ac20 <_vfiprintf_r+0x22c>)
 800ab84:	bb1b      	cbnz	r3, 800abce <_vfiprintf_r+0x1da>
 800ab86:	9b03      	ldr	r3, [sp, #12]
 800ab88:	3307      	adds	r3, #7
 800ab8a:	f023 0307 	bic.w	r3, r3, #7
 800ab8e:	3308      	adds	r3, #8
 800ab90:	9303      	str	r3, [sp, #12]
 800ab92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab94:	443b      	add	r3, r7
 800ab96:	9309      	str	r3, [sp, #36]	; 0x24
 800ab98:	e768      	b.n	800aa6c <_vfiprintf_r+0x78>
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	2001      	movs	r0, #1
 800ab9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aba2:	e7a6      	b.n	800aaf2 <_vfiprintf_r+0xfe>
 800aba4:	2300      	movs	r3, #0
 800aba6:	f04f 0c0a 	mov.w	ip, #10
 800abaa:	4619      	mov	r1, r3
 800abac:	3401      	adds	r4, #1
 800abae:	9305      	str	r3, [sp, #20]
 800abb0:	4620      	mov	r0, r4
 800abb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abb6:	3a30      	subs	r2, #48	; 0x30
 800abb8:	2a09      	cmp	r2, #9
 800abba:	d903      	bls.n	800abc4 <_vfiprintf_r+0x1d0>
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d0c6      	beq.n	800ab4e <_vfiprintf_r+0x15a>
 800abc0:	9105      	str	r1, [sp, #20]
 800abc2:	e7c4      	b.n	800ab4e <_vfiprintf_r+0x15a>
 800abc4:	4604      	mov	r4, r0
 800abc6:	2301      	movs	r3, #1
 800abc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800abcc:	e7f0      	b.n	800abb0 <_vfiprintf_r+0x1bc>
 800abce:	ab03      	add	r3, sp, #12
 800abd0:	9300      	str	r3, [sp, #0]
 800abd2:	462a      	mov	r2, r5
 800abd4:	4630      	mov	r0, r6
 800abd6:	4b13      	ldr	r3, [pc, #76]	; (800ac24 <_vfiprintf_r+0x230>)
 800abd8:	a904      	add	r1, sp, #16
 800abda:	f3af 8000 	nop.w
 800abde:	4607      	mov	r7, r0
 800abe0:	1c78      	adds	r0, r7, #1
 800abe2:	d1d6      	bne.n	800ab92 <_vfiprintf_r+0x19e>
 800abe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abe6:	07d9      	lsls	r1, r3, #31
 800abe8:	d405      	bmi.n	800abf6 <_vfiprintf_r+0x202>
 800abea:	89ab      	ldrh	r3, [r5, #12]
 800abec:	059a      	lsls	r2, r3, #22
 800abee:	d402      	bmi.n	800abf6 <_vfiprintf_r+0x202>
 800abf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abf2:	f7ff fd1f 	bl	800a634 <__retarget_lock_release_recursive>
 800abf6:	89ab      	ldrh	r3, [r5, #12]
 800abf8:	065b      	lsls	r3, r3, #25
 800abfa:	f53f af1d 	bmi.w	800aa38 <_vfiprintf_r+0x44>
 800abfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac00:	e71c      	b.n	800aa3c <_vfiprintf_r+0x48>
 800ac02:	ab03      	add	r3, sp, #12
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	462a      	mov	r2, r5
 800ac08:	4630      	mov	r0, r6
 800ac0a:	4b06      	ldr	r3, [pc, #24]	; (800ac24 <_vfiprintf_r+0x230>)
 800ac0c:	a904      	add	r1, sp, #16
 800ac0e:	f000 f87d 	bl	800ad0c <_printf_i>
 800ac12:	e7e4      	b.n	800abde <_vfiprintf_r+0x1ea>
 800ac14:	0800b948 	.word	0x0800b948
 800ac18:	0800b94e 	.word	0x0800b94e
 800ac1c:	0800b952 	.word	0x0800b952
 800ac20:	00000000 	.word	0x00000000
 800ac24:	0800a9cf 	.word	0x0800a9cf

0800ac28 <_printf_common>:
 800ac28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac2c:	4616      	mov	r6, r2
 800ac2e:	4699      	mov	r9, r3
 800ac30:	688a      	ldr	r2, [r1, #8]
 800ac32:	690b      	ldr	r3, [r1, #16]
 800ac34:	4607      	mov	r7, r0
 800ac36:	4293      	cmp	r3, r2
 800ac38:	bfb8      	it	lt
 800ac3a:	4613      	movlt	r3, r2
 800ac3c:	6033      	str	r3, [r6, #0]
 800ac3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac42:	460c      	mov	r4, r1
 800ac44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac48:	b10a      	cbz	r2, 800ac4e <_printf_common+0x26>
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	6033      	str	r3, [r6, #0]
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	0699      	lsls	r1, r3, #26
 800ac52:	bf42      	ittt	mi
 800ac54:	6833      	ldrmi	r3, [r6, #0]
 800ac56:	3302      	addmi	r3, #2
 800ac58:	6033      	strmi	r3, [r6, #0]
 800ac5a:	6825      	ldr	r5, [r4, #0]
 800ac5c:	f015 0506 	ands.w	r5, r5, #6
 800ac60:	d106      	bne.n	800ac70 <_printf_common+0x48>
 800ac62:	f104 0a19 	add.w	sl, r4, #25
 800ac66:	68e3      	ldr	r3, [r4, #12]
 800ac68:	6832      	ldr	r2, [r6, #0]
 800ac6a:	1a9b      	subs	r3, r3, r2
 800ac6c:	42ab      	cmp	r3, r5
 800ac6e:	dc2b      	bgt.n	800acc8 <_printf_common+0xa0>
 800ac70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac74:	1e13      	subs	r3, r2, #0
 800ac76:	6822      	ldr	r2, [r4, #0]
 800ac78:	bf18      	it	ne
 800ac7a:	2301      	movne	r3, #1
 800ac7c:	0692      	lsls	r2, r2, #26
 800ac7e:	d430      	bmi.n	800ace2 <_printf_common+0xba>
 800ac80:	4649      	mov	r1, r9
 800ac82:	4638      	mov	r0, r7
 800ac84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac88:	47c0      	blx	r8
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	d023      	beq.n	800acd6 <_printf_common+0xae>
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	6922      	ldr	r2, [r4, #16]
 800ac92:	f003 0306 	and.w	r3, r3, #6
 800ac96:	2b04      	cmp	r3, #4
 800ac98:	bf14      	ite	ne
 800ac9a:	2500      	movne	r5, #0
 800ac9c:	6833      	ldreq	r3, [r6, #0]
 800ac9e:	f04f 0600 	mov.w	r6, #0
 800aca2:	bf08      	it	eq
 800aca4:	68e5      	ldreq	r5, [r4, #12]
 800aca6:	f104 041a 	add.w	r4, r4, #26
 800acaa:	bf08      	it	eq
 800acac:	1aed      	subeq	r5, r5, r3
 800acae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800acb2:	bf08      	it	eq
 800acb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acb8:	4293      	cmp	r3, r2
 800acba:	bfc4      	itt	gt
 800acbc:	1a9b      	subgt	r3, r3, r2
 800acbe:	18ed      	addgt	r5, r5, r3
 800acc0:	42b5      	cmp	r5, r6
 800acc2:	d11a      	bne.n	800acfa <_printf_common+0xd2>
 800acc4:	2000      	movs	r0, #0
 800acc6:	e008      	b.n	800acda <_printf_common+0xb2>
 800acc8:	2301      	movs	r3, #1
 800acca:	4652      	mov	r2, sl
 800accc:	4649      	mov	r1, r9
 800acce:	4638      	mov	r0, r7
 800acd0:	47c0      	blx	r8
 800acd2:	3001      	adds	r0, #1
 800acd4:	d103      	bne.n	800acde <_printf_common+0xb6>
 800acd6:	f04f 30ff 	mov.w	r0, #4294967295
 800acda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acde:	3501      	adds	r5, #1
 800ace0:	e7c1      	b.n	800ac66 <_printf_common+0x3e>
 800ace2:	2030      	movs	r0, #48	; 0x30
 800ace4:	18e1      	adds	r1, r4, r3
 800ace6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acea:	1c5a      	adds	r2, r3, #1
 800acec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acf0:	4422      	add	r2, r4
 800acf2:	3302      	adds	r3, #2
 800acf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acf8:	e7c2      	b.n	800ac80 <_printf_common+0x58>
 800acfa:	2301      	movs	r3, #1
 800acfc:	4622      	mov	r2, r4
 800acfe:	4649      	mov	r1, r9
 800ad00:	4638      	mov	r0, r7
 800ad02:	47c0      	blx	r8
 800ad04:	3001      	adds	r0, #1
 800ad06:	d0e6      	beq.n	800acd6 <_printf_common+0xae>
 800ad08:	3601      	adds	r6, #1
 800ad0a:	e7d9      	b.n	800acc0 <_printf_common+0x98>

0800ad0c <_printf_i>:
 800ad0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad10:	7e0f      	ldrb	r7, [r1, #24]
 800ad12:	4691      	mov	r9, r2
 800ad14:	2f78      	cmp	r7, #120	; 0x78
 800ad16:	4680      	mov	r8, r0
 800ad18:	460c      	mov	r4, r1
 800ad1a:	469a      	mov	sl, r3
 800ad1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad22:	d807      	bhi.n	800ad34 <_printf_i+0x28>
 800ad24:	2f62      	cmp	r7, #98	; 0x62
 800ad26:	d80a      	bhi.n	800ad3e <_printf_i+0x32>
 800ad28:	2f00      	cmp	r7, #0
 800ad2a:	f000 80d5 	beq.w	800aed8 <_printf_i+0x1cc>
 800ad2e:	2f58      	cmp	r7, #88	; 0x58
 800ad30:	f000 80c1 	beq.w	800aeb6 <_printf_i+0x1aa>
 800ad34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad3c:	e03a      	b.n	800adb4 <_printf_i+0xa8>
 800ad3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad42:	2b15      	cmp	r3, #21
 800ad44:	d8f6      	bhi.n	800ad34 <_printf_i+0x28>
 800ad46:	a101      	add	r1, pc, #4	; (adr r1, 800ad4c <_printf_i+0x40>)
 800ad48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad4c:	0800ada5 	.word	0x0800ada5
 800ad50:	0800adb9 	.word	0x0800adb9
 800ad54:	0800ad35 	.word	0x0800ad35
 800ad58:	0800ad35 	.word	0x0800ad35
 800ad5c:	0800ad35 	.word	0x0800ad35
 800ad60:	0800ad35 	.word	0x0800ad35
 800ad64:	0800adb9 	.word	0x0800adb9
 800ad68:	0800ad35 	.word	0x0800ad35
 800ad6c:	0800ad35 	.word	0x0800ad35
 800ad70:	0800ad35 	.word	0x0800ad35
 800ad74:	0800ad35 	.word	0x0800ad35
 800ad78:	0800aebf 	.word	0x0800aebf
 800ad7c:	0800ade5 	.word	0x0800ade5
 800ad80:	0800ae79 	.word	0x0800ae79
 800ad84:	0800ad35 	.word	0x0800ad35
 800ad88:	0800ad35 	.word	0x0800ad35
 800ad8c:	0800aee1 	.word	0x0800aee1
 800ad90:	0800ad35 	.word	0x0800ad35
 800ad94:	0800ade5 	.word	0x0800ade5
 800ad98:	0800ad35 	.word	0x0800ad35
 800ad9c:	0800ad35 	.word	0x0800ad35
 800ada0:	0800ae81 	.word	0x0800ae81
 800ada4:	682b      	ldr	r3, [r5, #0]
 800ada6:	1d1a      	adds	r2, r3, #4
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	602a      	str	r2, [r5, #0]
 800adac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adb4:	2301      	movs	r3, #1
 800adb6:	e0a0      	b.n	800aefa <_printf_i+0x1ee>
 800adb8:	6820      	ldr	r0, [r4, #0]
 800adba:	682b      	ldr	r3, [r5, #0]
 800adbc:	0607      	lsls	r7, r0, #24
 800adbe:	f103 0104 	add.w	r1, r3, #4
 800adc2:	6029      	str	r1, [r5, #0]
 800adc4:	d501      	bpl.n	800adca <_printf_i+0xbe>
 800adc6:	681e      	ldr	r6, [r3, #0]
 800adc8:	e003      	b.n	800add2 <_printf_i+0xc6>
 800adca:	0646      	lsls	r6, r0, #25
 800adcc:	d5fb      	bpl.n	800adc6 <_printf_i+0xba>
 800adce:	f9b3 6000 	ldrsh.w	r6, [r3]
 800add2:	2e00      	cmp	r6, #0
 800add4:	da03      	bge.n	800adde <_printf_i+0xd2>
 800add6:	232d      	movs	r3, #45	; 0x2d
 800add8:	4276      	negs	r6, r6
 800adda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adde:	230a      	movs	r3, #10
 800ade0:	4859      	ldr	r0, [pc, #356]	; (800af48 <_printf_i+0x23c>)
 800ade2:	e012      	b.n	800ae0a <_printf_i+0xfe>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	6820      	ldr	r0, [r4, #0]
 800ade8:	1d19      	adds	r1, r3, #4
 800adea:	6029      	str	r1, [r5, #0]
 800adec:	0605      	lsls	r5, r0, #24
 800adee:	d501      	bpl.n	800adf4 <_printf_i+0xe8>
 800adf0:	681e      	ldr	r6, [r3, #0]
 800adf2:	e002      	b.n	800adfa <_printf_i+0xee>
 800adf4:	0641      	lsls	r1, r0, #25
 800adf6:	d5fb      	bpl.n	800adf0 <_printf_i+0xe4>
 800adf8:	881e      	ldrh	r6, [r3, #0]
 800adfa:	2f6f      	cmp	r7, #111	; 0x6f
 800adfc:	bf0c      	ite	eq
 800adfe:	2308      	moveq	r3, #8
 800ae00:	230a      	movne	r3, #10
 800ae02:	4851      	ldr	r0, [pc, #324]	; (800af48 <_printf_i+0x23c>)
 800ae04:	2100      	movs	r1, #0
 800ae06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae0a:	6865      	ldr	r5, [r4, #4]
 800ae0c:	2d00      	cmp	r5, #0
 800ae0e:	bfa8      	it	ge
 800ae10:	6821      	ldrge	r1, [r4, #0]
 800ae12:	60a5      	str	r5, [r4, #8]
 800ae14:	bfa4      	itt	ge
 800ae16:	f021 0104 	bicge.w	r1, r1, #4
 800ae1a:	6021      	strge	r1, [r4, #0]
 800ae1c:	b90e      	cbnz	r6, 800ae22 <_printf_i+0x116>
 800ae1e:	2d00      	cmp	r5, #0
 800ae20:	d04b      	beq.n	800aeba <_printf_i+0x1ae>
 800ae22:	4615      	mov	r5, r2
 800ae24:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae28:	fb03 6711 	mls	r7, r3, r1, r6
 800ae2c:	5dc7      	ldrb	r7, [r0, r7]
 800ae2e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae32:	4637      	mov	r7, r6
 800ae34:	42bb      	cmp	r3, r7
 800ae36:	460e      	mov	r6, r1
 800ae38:	d9f4      	bls.n	800ae24 <_printf_i+0x118>
 800ae3a:	2b08      	cmp	r3, #8
 800ae3c:	d10b      	bne.n	800ae56 <_printf_i+0x14a>
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	07de      	lsls	r6, r3, #31
 800ae42:	d508      	bpl.n	800ae56 <_printf_i+0x14a>
 800ae44:	6923      	ldr	r3, [r4, #16]
 800ae46:	6861      	ldr	r1, [r4, #4]
 800ae48:	4299      	cmp	r1, r3
 800ae4a:	bfde      	ittt	le
 800ae4c:	2330      	movle	r3, #48	; 0x30
 800ae4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae52:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae56:	1b52      	subs	r2, r2, r5
 800ae58:	6122      	str	r2, [r4, #16]
 800ae5a:	464b      	mov	r3, r9
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	4640      	mov	r0, r8
 800ae60:	f8cd a000 	str.w	sl, [sp]
 800ae64:	aa03      	add	r2, sp, #12
 800ae66:	f7ff fedf 	bl	800ac28 <_printf_common>
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	d14a      	bne.n	800af04 <_printf_i+0x1f8>
 800ae6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae72:	b004      	add	sp, #16
 800ae74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae78:	6823      	ldr	r3, [r4, #0]
 800ae7a:	f043 0320 	orr.w	r3, r3, #32
 800ae7e:	6023      	str	r3, [r4, #0]
 800ae80:	2778      	movs	r7, #120	; 0x78
 800ae82:	4832      	ldr	r0, [pc, #200]	; (800af4c <_printf_i+0x240>)
 800ae84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae88:	6823      	ldr	r3, [r4, #0]
 800ae8a:	6829      	ldr	r1, [r5, #0]
 800ae8c:	061f      	lsls	r7, r3, #24
 800ae8e:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae92:	d402      	bmi.n	800ae9a <_printf_i+0x18e>
 800ae94:	065f      	lsls	r7, r3, #25
 800ae96:	bf48      	it	mi
 800ae98:	b2b6      	uxthmi	r6, r6
 800ae9a:	07df      	lsls	r7, r3, #31
 800ae9c:	bf48      	it	mi
 800ae9e:	f043 0320 	orrmi.w	r3, r3, #32
 800aea2:	6029      	str	r1, [r5, #0]
 800aea4:	bf48      	it	mi
 800aea6:	6023      	strmi	r3, [r4, #0]
 800aea8:	b91e      	cbnz	r6, 800aeb2 <_printf_i+0x1a6>
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	f023 0320 	bic.w	r3, r3, #32
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	2310      	movs	r3, #16
 800aeb4:	e7a6      	b.n	800ae04 <_printf_i+0xf8>
 800aeb6:	4824      	ldr	r0, [pc, #144]	; (800af48 <_printf_i+0x23c>)
 800aeb8:	e7e4      	b.n	800ae84 <_printf_i+0x178>
 800aeba:	4615      	mov	r5, r2
 800aebc:	e7bd      	b.n	800ae3a <_printf_i+0x12e>
 800aebe:	682b      	ldr	r3, [r5, #0]
 800aec0:	6826      	ldr	r6, [r4, #0]
 800aec2:	1d18      	adds	r0, r3, #4
 800aec4:	6961      	ldr	r1, [r4, #20]
 800aec6:	6028      	str	r0, [r5, #0]
 800aec8:	0635      	lsls	r5, r6, #24
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	d501      	bpl.n	800aed2 <_printf_i+0x1c6>
 800aece:	6019      	str	r1, [r3, #0]
 800aed0:	e002      	b.n	800aed8 <_printf_i+0x1cc>
 800aed2:	0670      	lsls	r0, r6, #25
 800aed4:	d5fb      	bpl.n	800aece <_printf_i+0x1c2>
 800aed6:	8019      	strh	r1, [r3, #0]
 800aed8:	2300      	movs	r3, #0
 800aeda:	4615      	mov	r5, r2
 800aedc:	6123      	str	r3, [r4, #16]
 800aede:	e7bc      	b.n	800ae5a <_printf_i+0x14e>
 800aee0:	682b      	ldr	r3, [r5, #0]
 800aee2:	2100      	movs	r1, #0
 800aee4:	1d1a      	adds	r2, r3, #4
 800aee6:	602a      	str	r2, [r5, #0]
 800aee8:	681d      	ldr	r5, [r3, #0]
 800aeea:	6862      	ldr	r2, [r4, #4]
 800aeec:	4628      	mov	r0, r5
 800aeee:	f000 f977 	bl	800b1e0 <memchr>
 800aef2:	b108      	cbz	r0, 800aef8 <_printf_i+0x1ec>
 800aef4:	1b40      	subs	r0, r0, r5
 800aef6:	6060      	str	r0, [r4, #4]
 800aef8:	6863      	ldr	r3, [r4, #4]
 800aefa:	6123      	str	r3, [r4, #16]
 800aefc:	2300      	movs	r3, #0
 800aefe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af02:	e7aa      	b.n	800ae5a <_printf_i+0x14e>
 800af04:	462a      	mov	r2, r5
 800af06:	4649      	mov	r1, r9
 800af08:	4640      	mov	r0, r8
 800af0a:	6923      	ldr	r3, [r4, #16]
 800af0c:	47d0      	blx	sl
 800af0e:	3001      	adds	r0, #1
 800af10:	d0ad      	beq.n	800ae6e <_printf_i+0x162>
 800af12:	6823      	ldr	r3, [r4, #0]
 800af14:	079b      	lsls	r3, r3, #30
 800af16:	d413      	bmi.n	800af40 <_printf_i+0x234>
 800af18:	68e0      	ldr	r0, [r4, #12]
 800af1a:	9b03      	ldr	r3, [sp, #12]
 800af1c:	4298      	cmp	r0, r3
 800af1e:	bfb8      	it	lt
 800af20:	4618      	movlt	r0, r3
 800af22:	e7a6      	b.n	800ae72 <_printf_i+0x166>
 800af24:	2301      	movs	r3, #1
 800af26:	4632      	mov	r2, r6
 800af28:	4649      	mov	r1, r9
 800af2a:	4640      	mov	r0, r8
 800af2c:	47d0      	blx	sl
 800af2e:	3001      	adds	r0, #1
 800af30:	d09d      	beq.n	800ae6e <_printf_i+0x162>
 800af32:	3501      	adds	r5, #1
 800af34:	68e3      	ldr	r3, [r4, #12]
 800af36:	9903      	ldr	r1, [sp, #12]
 800af38:	1a5b      	subs	r3, r3, r1
 800af3a:	42ab      	cmp	r3, r5
 800af3c:	dcf2      	bgt.n	800af24 <_printf_i+0x218>
 800af3e:	e7eb      	b.n	800af18 <_printf_i+0x20c>
 800af40:	2500      	movs	r5, #0
 800af42:	f104 0619 	add.w	r6, r4, #25
 800af46:	e7f5      	b.n	800af34 <_printf_i+0x228>
 800af48:	0800b959 	.word	0x0800b959
 800af4c:	0800b96a 	.word	0x0800b96a

0800af50 <__sflush_r>:
 800af50:	898a      	ldrh	r2, [r1, #12]
 800af52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af54:	4605      	mov	r5, r0
 800af56:	0710      	lsls	r0, r2, #28
 800af58:	460c      	mov	r4, r1
 800af5a:	d457      	bmi.n	800b00c <__sflush_r+0xbc>
 800af5c:	684b      	ldr	r3, [r1, #4]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	dc04      	bgt.n	800af6c <__sflush_r+0x1c>
 800af62:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af64:	2b00      	cmp	r3, #0
 800af66:	dc01      	bgt.n	800af6c <__sflush_r+0x1c>
 800af68:	2000      	movs	r0, #0
 800af6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af6e:	2e00      	cmp	r6, #0
 800af70:	d0fa      	beq.n	800af68 <__sflush_r+0x18>
 800af72:	2300      	movs	r3, #0
 800af74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af78:	682f      	ldr	r7, [r5, #0]
 800af7a:	6a21      	ldr	r1, [r4, #32]
 800af7c:	602b      	str	r3, [r5, #0]
 800af7e:	d032      	beq.n	800afe6 <__sflush_r+0x96>
 800af80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	075a      	lsls	r2, r3, #29
 800af86:	d505      	bpl.n	800af94 <__sflush_r+0x44>
 800af88:	6863      	ldr	r3, [r4, #4]
 800af8a:	1ac0      	subs	r0, r0, r3
 800af8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af8e:	b10b      	cbz	r3, 800af94 <__sflush_r+0x44>
 800af90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af92:	1ac0      	subs	r0, r0, r3
 800af94:	2300      	movs	r3, #0
 800af96:	4602      	mov	r2, r0
 800af98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af9a:	4628      	mov	r0, r5
 800af9c:	6a21      	ldr	r1, [r4, #32]
 800af9e:	47b0      	blx	r6
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	89a3      	ldrh	r3, [r4, #12]
 800afa4:	d106      	bne.n	800afb4 <__sflush_r+0x64>
 800afa6:	6829      	ldr	r1, [r5, #0]
 800afa8:	291d      	cmp	r1, #29
 800afaa:	d82b      	bhi.n	800b004 <__sflush_r+0xb4>
 800afac:	4a28      	ldr	r2, [pc, #160]	; (800b050 <__sflush_r+0x100>)
 800afae:	410a      	asrs	r2, r1
 800afb0:	07d6      	lsls	r6, r2, #31
 800afb2:	d427      	bmi.n	800b004 <__sflush_r+0xb4>
 800afb4:	2200      	movs	r2, #0
 800afb6:	6062      	str	r2, [r4, #4]
 800afb8:	6922      	ldr	r2, [r4, #16]
 800afba:	04d9      	lsls	r1, r3, #19
 800afbc:	6022      	str	r2, [r4, #0]
 800afbe:	d504      	bpl.n	800afca <__sflush_r+0x7a>
 800afc0:	1c42      	adds	r2, r0, #1
 800afc2:	d101      	bne.n	800afc8 <__sflush_r+0x78>
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	b903      	cbnz	r3, 800afca <__sflush_r+0x7a>
 800afc8:	6560      	str	r0, [r4, #84]	; 0x54
 800afca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afcc:	602f      	str	r7, [r5, #0]
 800afce:	2900      	cmp	r1, #0
 800afd0:	d0ca      	beq.n	800af68 <__sflush_r+0x18>
 800afd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afd6:	4299      	cmp	r1, r3
 800afd8:	d002      	beq.n	800afe0 <__sflush_r+0x90>
 800afda:	4628      	mov	r0, r5
 800afdc:	f7ff fb42 	bl	800a664 <_free_r>
 800afe0:	2000      	movs	r0, #0
 800afe2:	6360      	str	r0, [r4, #52]	; 0x34
 800afe4:	e7c1      	b.n	800af6a <__sflush_r+0x1a>
 800afe6:	2301      	movs	r3, #1
 800afe8:	4628      	mov	r0, r5
 800afea:	47b0      	blx	r6
 800afec:	1c41      	adds	r1, r0, #1
 800afee:	d1c8      	bne.n	800af82 <__sflush_r+0x32>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d0c5      	beq.n	800af82 <__sflush_r+0x32>
 800aff6:	2b1d      	cmp	r3, #29
 800aff8:	d001      	beq.n	800affe <__sflush_r+0xae>
 800affa:	2b16      	cmp	r3, #22
 800affc:	d101      	bne.n	800b002 <__sflush_r+0xb2>
 800affe:	602f      	str	r7, [r5, #0]
 800b000:	e7b2      	b.n	800af68 <__sflush_r+0x18>
 800b002:	89a3      	ldrh	r3, [r4, #12]
 800b004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b008:	81a3      	strh	r3, [r4, #12]
 800b00a:	e7ae      	b.n	800af6a <__sflush_r+0x1a>
 800b00c:	690f      	ldr	r7, [r1, #16]
 800b00e:	2f00      	cmp	r7, #0
 800b010:	d0aa      	beq.n	800af68 <__sflush_r+0x18>
 800b012:	0793      	lsls	r3, r2, #30
 800b014:	bf18      	it	ne
 800b016:	2300      	movne	r3, #0
 800b018:	680e      	ldr	r6, [r1, #0]
 800b01a:	bf08      	it	eq
 800b01c:	694b      	ldreq	r3, [r1, #20]
 800b01e:	1bf6      	subs	r6, r6, r7
 800b020:	600f      	str	r7, [r1, #0]
 800b022:	608b      	str	r3, [r1, #8]
 800b024:	2e00      	cmp	r6, #0
 800b026:	dd9f      	ble.n	800af68 <__sflush_r+0x18>
 800b028:	4633      	mov	r3, r6
 800b02a:	463a      	mov	r2, r7
 800b02c:	4628      	mov	r0, r5
 800b02e:	6a21      	ldr	r1, [r4, #32]
 800b030:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b034:	47e0      	blx	ip
 800b036:	2800      	cmp	r0, #0
 800b038:	dc06      	bgt.n	800b048 <__sflush_r+0xf8>
 800b03a:	89a3      	ldrh	r3, [r4, #12]
 800b03c:	f04f 30ff 	mov.w	r0, #4294967295
 800b040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b044:	81a3      	strh	r3, [r4, #12]
 800b046:	e790      	b.n	800af6a <__sflush_r+0x1a>
 800b048:	4407      	add	r7, r0
 800b04a:	1a36      	subs	r6, r6, r0
 800b04c:	e7ea      	b.n	800b024 <__sflush_r+0xd4>
 800b04e:	bf00      	nop
 800b050:	dfbffffe 	.word	0xdfbffffe

0800b054 <_fflush_r>:
 800b054:	b538      	push	{r3, r4, r5, lr}
 800b056:	690b      	ldr	r3, [r1, #16]
 800b058:	4605      	mov	r5, r0
 800b05a:	460c      	mov	r4, r1
 800b05c:	b913      	cbnz	r3, 800b064 <_fflush_r+0x10>
 800b05e:	2500      	movs	r5, #0
 800b060:	4628      	mov	r0, r5
 800b062:	bd38      	pop	{r3, r4, r5, pc}
 800b064:	b118      	cbz	r0, 800b06e <_fflush_r+0x1a>
 800b066:	6a03      	ldr	r3, [r0, #32]
 800b068:	b90b      	cbnz	r3, 800b06e <_fflush_r+0x1a>
 800b06a:	f7ff f83d 	bl	800a0e8 <__sinit>
 800b06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d0f3      	beq.n	800b05e <_fflush_r+0xa>
 800b076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b078:	07d0      	lsls	r0, r2, #31
 800b07a:	d404      	bmi.n	800b086 <_fflush_r+0x32>
 800b07c:	0599      	lsls	r1, r3, #22
 800b07e:	d402      	bmi.n	800b086 <_fflush_r+0x32>
 800b080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b082:	f7ff fad6 	bl	800a632 <__retarget_lock_acquire_recursive>
 800b086:	4628      	mov	r0, r5
 800b088:	4621      	mov	r1, r4
 800b08a:	f7ff ff61 	bl	800af50 <__sflush_r>
 800b08e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b090:	4605      	mov	r5, r0
 800b092:	07da      	lsls	r2, r3, #31
 800b094:	d4e4      	bmi.n	800b060 <_fflush_r+0xc>
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	059b      	lsls	r3, r3, #22
 800b09a:	d4e1      	bmi.n	800b060 <_fflush_r+0xc>
 800b09c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b09e:	f7ff fac9 	bl	800a634 <__retarget_lock_release_recursive>
 800b0a2:	e7dd      	b.n	800b060 <_fflush_r+0xc>

0800b0a4 <__swhatbuf_r>:
 800b0a4:	b570      	push	{r4, r5, r6, lr}
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ac:	4615      	mov	r5, r2
 800b0ae:	2900      	cmp	r1, #0
 800b0b0:	461e      	mov	r6, r3
 800b0b2:	b096      	sub	sp, #88	; 0x58
 800b0b4:	da0c      	bge.n	800b0d0 <__swhatbuf_r+0x2c>
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b0be:	bf0c      	ite	eq
 800b0c0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b0c4:	2340      	movne	r3, #64	; 0x40
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	6031      	str	r1, [r6, #0]
 800b0ca:	602b      	str	r3, [r5, #0]
 800b0cc:	b016      	add	sp, #88	; 0x58
 800b0ce:	bd70      	pop	{r4, r5, r6, pc}
 800b0d0:	466a      	mov	r2, sp
 800b0d2:	f000 f863 	bl	800b19c <_fstat_r>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	dbed      	blt.n	800b0b6 <__swhatbuf_r+0x12>
 800b0da:	9901      	ldr	r1, [sp, #4]
 800b0dc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b0e0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b0e4:	4259      	negs	r1, r3
 800b0e6:	4159      	adcs	r1, r3
 800b0e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ec:	e7eb      	b.n	800b0c6 <__swhatbuf_r+0x22>

0800b0ee <__smakebuf_r>:
 800b0ee:	898b      	ldrh	r3, [r1, #12]
 800b0f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0f2:	079d      	lsls	r5, r3, #30
 800b0f4:	4606      	mov	r6, r0
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	d507      	bpl.n	800b10a <__smakebuf_r+0x1c>
 800b0fa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0fe:	6023      	str	r3, [r4, #0]
 800b100:	6123      	str	r3, [r4, #16]
 800b102:	2301      	movs	r3, #1
 800b104:	6163      	str	r3, [r4, #20]
 800b106:	b002      	add	sp, #8
 800b108:	bd70      	pop	{r4, r5, r6, pc}
 800b10a:	466a      	mov	r2, sp
 800b10c:	ab01      	add	r3, sp, #4
 800b10e:	f7ff ffc9 	bl	800b0a4 <__swhatbuf_r>
 800b112:	9900      	ldr	r1, [sp, #0]
 800b114:	4605      	mov	r5, r0
 800b116:	4630      	mov	r0, r6
 800b118:	f7fe fece 	bl	8009eb8 <_malloc_r>
 800b11c:	b948      	cbnz	r0, 800b132 <__smakebuf_r+0x44>
 800b11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b122:	059a      	lsls	r2, r3, #22
 800b124:	d4ef      	bmi.n	800b106 <__smakebuf_r+0x18>
 800b126:	f023 0303 	bic.w	r3, r3, #3
 800b12a:	f043 0302 	orr.w	r3, r3, #2
 800b12e:	81a3      	strh	r3, [r4, #12]
 800b130:	e7e3      	b.n	800b0fa <__smakebuf_r+0xc>
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	6020      	str	r0, [r4, #0]
 800b136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b13a:	81a3      	strh	r3, [r4, #12]
 800b13c:	9b00      	ldr	r3, [sp, #0]
 800b13e:	6120      	str	r0, [r4, #16]
 800b140:	6163      	str	r3, [r4, #20]
 800b142:	9b01      	ldr	r3, [sp, #4]
 800b144:	b15b      	cbz	r3, 800b15e <__smakebuf_r+0x70>
 800b146:	4630      	mov	r0, r6
 800b148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b14c:	f000 f838 	bl	800b1c0 <_isatty_r>
 800b150:	b128      	cbz	r0, 800b15e <__smakebuf_r+0x70>
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	f023 0303 	bic.w	r3, r3, #3
 800b158:	f043 0301 	orr.w	r3, r3, #1
 800b15c:	81a3      	strh	r3, [r4, #12]
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	431d      	orrs	r5, r3
 800b162:	81a5      	strh	r5, [r4, #12]
 800b164:	e7cf      	b.n	800b106 <__smakebuf_r+0x18>

0800b166 <memmove>:
 800b166:	4288      	cmp	r0, r1
 800b168:	b510      	push	{r4, lr}
 800b16a:	eb01 0402 	add.w	r4, r1, r2
 800b16e:	d902      	bls.n	800b176 <memmove+0x10>
 800b170:	4284      	cmp	r4, r0
 800b172:	4623      	mov	r3, r4
 800b174:	d807      	bhi.n	800b186 <memmove+0x20>
 800b176:	1e43      	subs	r3, r0, #1
 800b178:	42a1      	cmp	r1, r4
 800b17a:	d008      	beq.n	800b18e <memmove+0x28>
 800b17c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b180:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b184:	e7f8      	b.n	800b178 <memmove+0x12>
 800b186:	4601      	mov	r1, r0
 800b188:	4402      	add	r2, r0
 800b18a:	428a      	cmp	r2, r1
 800b18c:	d100      	bne.n	800b190 <memmove+0x2a>
 800b18e:	bd10      	pop	{r4, pc}
 800b190:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b194:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b198:	e7f7      	b.n	800b18a <memmove+0x24>
	...

0800b19c <_fstat_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	2300      	movs	r3, #0
 800b1a0:	4d06      	ldr	r5, [pc, #24]	; (800b1bc <_fstat_r+0x20>)
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	4608      	mov	r0, r1
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	602b      	str	r3, [r5, #0]
 800b1aa:	f7f8 f9cc 	bl	8003546 <_fstat>
 800b1ae:	1c43      	adds	r3, r0, #1
 800b1b0:	d102      	bne.n	800b1b8 <_fstat_r+0x1c>
 800b1b2:	682b      	ldr	r3, [r5, #0]
 800b1b4:	b103      	cbz	r3, 800b1b8 <_fstat_r+0x1c>
 800b1b6:	6023      	str	r3, [r4, #0]
 800b1b8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ba:	bf00      	nop
 800b1bc:	200046ec 	.word	0x200046ec

0800b1c0 <_isatty_r>:
 800b1c0:	b538      	push	{r3, r4, r5, lr}
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	4d05      	ldr	r5, [pc, #20]	; (800b1dc <_isatty_r+0x1c>)
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	4608      	mov	r0, r1
 800b1ca:	602b      	str	r3, [r5, #0]
 800b1cc:	f7f8 f9c0 	bl	8003550 <_isatty>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_isatty_r+0x1a>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_isatty_r+0x1a>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	200046ec 	.word	0x200046ec

0800b1e0 <memchr>:
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	b510      	push	{r4, lr}
 800b1e4:	b2c9      	uxtb	r1, r1
 800b1e6:	4402      	add	r2, r0
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	d101      	bne.n	800b1f2 <memchr+0x12>
 800b1ee:	2000      	movs	r0, #0
 800b1f0:	e003      	b.n	800b1fa <memchr+0x1a>
 800b1f2:	7804      	ldrb	r4, [r0, #0]
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	428c      	cmp	r4, r1
 800b1f8:	d1f6      	bne.n	800b1e8 <memchr+0x8>
 800b1fa:	bd10      	pop	{r4, pc}

0800b1fc <_realloc_r>:
 800b1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b200:	4680      	mov	r8, r0
 800b202:	4614      	mov	r4, r2
 800b204:	460e      	mov	r6, r1
 800b206:	b921      	cbnz	r1, 800b212 <_realloc_r+0x16>
 800b208:	4611      	mov	r1, r2
 800b20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b20e:	f7fe be53 	b.w	8009eb8 <_malloc_r>
 800b212:	b92a      	cbnz	r2, 800b220 <_realloc_r+0x24>
 800b214:	f7ff fa26 	bl	800a664 <_free_r>
 800b218:	4625      	mov	r5, r4
 800b21a:	4628      	mov	r0, r5
 800b21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b220:	f000 f81b 	bl	800b25a <_malloc_usable_size_r>
 800b224:	4284      	cmp	r4, r0
 800b226:	4607      	mov	r7, r0
 800b228:	d802      	bhi.n	800b230 <_realloc_r+0x34>
 800b22a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b22e:	d812      	bhi.n	800b256 <_realloc_r+0x5a>
 800b230:	4621      	mov	r1, r4
 800b232:	4640      	mov	r0, r8
 800b234:	f7fe fe40 	bl	8009eb8 <_malloc_r>
 800b238:	4605      	mov	r5, r0
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d0ed      	beq.n	800b21a <_realloc_r+0x1e>
 800b23e:	42bc      	cmp	r4, r7
 800b240:	4622      	mov	r2, r4
 800b242:	4631      	mov	r1, r6
 800b244:	bf28      	it	cs
 800b246:	463a      	movcs	r2, r7
 800b248:	f7ff f9fd 	bl	800a646 <memcpy>
 800b24c:	4631      	mov	r1, r6
 800b24e:	4640      	mov	r0, r8
 800b250:	f7ff fa08 	bl	800a664 <_free_r>
 800b254:	e7e1      	b.n	800b21a <_realloc_r+0x1e>
 800b256:	4635      	mov	r5, r6
 800b258:	e7df      	b.n	800b21a <_realloc_r+0x1e>

0800b25a <_malloc_usable_size_r>:
 800b25a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b25e:	1f18      	subs	r0, r3, #4
 800b260:	2b00      	cmp	r3, #0
 800b262:	bfbc      	itt	lt
 800b264:	580b      	ldrlt	r3, [r1, r0]
 800b266:	18c0      	addlt	r0, r0, r3
 800b268:	4770      	bx	lr
	...

0800b26c <_init>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	bf00      	nop
 800b270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b272:	bc08      	pop	{r3}
 800b274:	469e      	mov	lr, r3
 800b276:	4770      	bx	lr

0800b278 <_fini>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	bf00      	nop
 800b27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b27e:	bc08      	pop	{r3}
 800b280:	469e      	mov	lr, r3
 800b282:	4770      	bx	lr
