
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b004  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800b114  0800b114  0001b114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b69c  0800b69c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b69c  0800b69c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b69c  0800b69c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b69c  0800b69c  0001b69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6a0  0800b6a0  0001b6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800b6a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cac  20000070  0800b710  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002d1c  0800b710  00022d1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033859  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007409  00000000  00000000  00053931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f9a1  00000000  00000000  0005ad3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001898  00000000  00000000  0006a6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a57  00000000  00000000  0006bf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f31c  00000000  00000000  0006d9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000309be  00000000  00000000  0008cceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a1d5c  00000000  00000000  000bd6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000058fc  00000000  00000000  0015f408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00164d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b0fc 	.word	0x0800b0fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800b0fc 	.word	0x0800b0fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <sendAknowladge>:
 * \param 	*ble - Ponteiro para o objeto pai.
 * \param 	Cmd - comando que esta enviando o Aknowladge.
 */
void 			sendAknowladge(Bluetooth* ble,uint8_t Cmd){
	unsigned char	TXCRC[3];
	TXCRC[0] = 0x01;
 8001094:	f64f 7301 	movw	r3, #65281	; 0xff01
void 			sendAknowladge(Bluetooth* ble,uint8_t Cmd){
 8001098:	b507      	push	{r0, r1, r2, lr}
	TXCRC[1] = 0xFF;
	TXCRC[2] = Cmd;
	HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TXCRC, 3,50);
 800109a:	2203      	movs	r2, #3
	TXCRC[0] = 0x01;
 800109c:	f8ad 3004 	strh.w	r3, [sp, #4]
	TXCRC[2] = Cmd;
 80010a0:	f88d 1006 	strb.w	r1, [sp, #6]
	HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TXCRC, 3,50);
 80010a4:	2332      	movs	r3, #50	; 0x32
 80010a6:	a901      	add	r1, sp, #4
 80010a8:	6800      	ldr	r0, [r0, #0]
 80010aa:	f006 f962 	bl	8007372 <HAL_UART_Transmit>
}
 80010ae:	b003      	add	sp, #12
 80010b0:	f85d fb04 	ldr.w	pc, [sp], #4

080010b4 <bleAddComp>:
	if (ble == NULL || _blecomm == NULL) {
 80010b4:	4603      	mov	r3, r0
BLE_ErrorCode 	bleAddComp(Bluetooth* ble, BleComando* _blecomm, uint8_t __comando){
 80010b6:	b510      	push	{r4, lr}
	if (ble == NULL || _blecomm == NULL) {
 80010b8:	b100      	cbz	r0, 80010bc <bleAddComp+0x8>
 80010ba:	b909      	cbnz	r1, 80010c0 <bleAddComp+0xc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
void 			bleError_Handler(BLE_ErrorCode erro)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010be:	e7fe      	b.n	80010be <bleAddComp+0xa>
	if(ble->contComandos>=BLUETOOTH_MAX_COMANDOS_COUNT){
 80010c0:	f890 40d0 	ldrb.w	r4, [r0, #208]	; 0xd0
 80010c4:	2c1d      	cmp	r4, #29
 80010c6:	d901      	bls.n	80010cc <bleAddComp+0x18>
 80010c8:	b672      	cpsid	i
	while (1)
 80010ca:	e7fe      	b.n	80010ca <bleAddComp+0x16>
	_blecomm->_tipo 	= ComandoBasico;
 80010cc:	2000      	movs	r0, #0
	_blecomm->_comando 	= __comando;
 80010ce:	700a      	strb	r2, [r1, #0]
	ble->_BleCommArr[ble->contComandos] = _blecomm;
 80010d0:	f104 0216 	add.w	r2, r4, #22
	ble->contComandos++;
 80010d4:	3401      	adds	r4, #1
	_blecomm->_tipo 	= ComandoBasico;
 80010d6:	7048      	strb	r0, [r1, #1]
	ble->_BleCommArr[ble->contComandos] = _blecomm;
 80010d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ble->contComandos++;
 80010dc:	f883 40d0 	strb.w	r4, [r3, #208]	; 0xd0
}
 80010e0:	bd10      	pop	{r4, pc}

080010e2 <bleAddCompConexao>:
	if (ble == NULL || _blecomm == NULL) {
 80010e2:	b100      	cbz	r0, 80010e6 <bleAddCompConexao+0x4>
 80010e4:	b909      	cbnz	r1, 80010ea <bleAddCompConexao+0x8>
 80010e6:	b672      	cpsid	i
	while (1)
 80010e8:	e7fe      	b.n	80010e8 <bleAddCompConexao+0x6>
	if(ble->contComandos>=BLUETOOTH_MAX_COMANDOS_COUNT){
 80010ea:	f890 30d0 	ldrb.w	r3, [r0, #208]	; 0xd0
 80010ee:	2b1d      	cmp	r3, #29
 80010f0:	d901      	bls.n	80010f6 <bleAddCompConexao+0x14>
 80010f2:	b672      	cpsid	i
	while (1)
 80010f4:	e7fe      	b.n	80010f4 <bleAddCompConexao+0x12>
	_blecomm->_comando 	= __comando;
 80010f6:	700a      	strb	r2, [r1, #0]
	_blecomm->_tipo 	= ComandoConexao;
 80010f8:	2201      	movs	r2, #1
 80010fa:	704a      	strb	r2, [r1, #1]
	ble->_BleCommArr[ble->contComandos] = _blecomm;
 80010fc:	f103 0216 	add.w	r2, r3, #22
	ble->contComandos++;
 8001100:	3301      	adds	r3, #1
	ble->_BleCommArr[ble->contComandos] = _blecomm;
 8001102:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	ble->contComandos++;
 8001106:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
}
 800110a:	2000      	movs	r0, #0
 800110c:	4770      	bx	lr

0800110e <bluetoothPutFila>:
BLE_ErrorCode 	bluetoothPutFila(Bluetooth* ble, TypeComandoBle tipo){
 800110e:	b510      	push	{r4, lr}
	switch (tipo) {
 8001110:	b121      	cbz	r1, 800111c <bluetoothPutFila+0xe>
 8001112:	2901      	cmp	r1, #1
 8001114:	d00d      	beq.n	8001132 <bluetoothPutFila+0x24>
 8001116:	2404      	movs	r4, #4
}
 8001118:	4620      	mov	r0, r4
 800111a:	bd10      	pop	{r4, pc}
		if(ble->ComandoAtual._tipo == ComandoBasico ){
 800111c:	f890 4052 	ldrb.w	r4, [r0, #82]	; 0x52
 8001120:	b9ec      	cbnz	r4, 800115e <bluetoothPutFila+0x50>
			osMessagePut(*ble->filaComandosRX, ble->ComandoAtual._comando, 0);
 8001122:	6a03      	ldr	r3, [r0, #32]
 8001124:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
 8001128:	4622      	mov	r2, r4
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	f006 fdb9 	bl	8007ca2 <osMessagePut>
			return BLE_SUCCESS;
 8001130:	e7f2      	b.n	8001118 <bluetoothPutFila+0xa>
		if(ble->ComandoAtual._tipo == ComandoConexao ){
 8001132:	f890 3052 	ldrb.w	r3, [r0, #82]	; 0x52
 8001136:	2b01      	cmp	r3, #1
 8001138:	d111      	bne.n	800115e <bluetoothPutFila+0x50>
			switch (ble->ComandoAtual._comando) {
 800113a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800113e:	2b40      	cmp	r3, #64	; 0x40
 8001140:	d009      	beq.n	8001156 <bluetoothPutFila+0x48>
 8001142:	2b42      	cmp	r3, #66	; 0x42
 8001144:	d10b      	bne.n	800115e <bluetoothPutFila+0x50>
				osMessagePut(*ble->filaComandoInternoTX, COMANDO_SOLICITACAO_SENHA, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	218a      	movs	r1, #138	; 0x8a
 800114a:	6a83      	ldr	r3, [r0, #40]	; 0x28
				osMessagePut(*ble->filaComandoInternoTX, COMANDO_AVALIACAO_CHAVE, 0);
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	f006 fda8 	bl	8007ca2 <osMessagePut>
				return BLE_SUCCESS;
 8001152:	2400      	movs	r4, #0
 8001154:	e7e0      	b.n	8001118 <bluetoothPutFila+0xa>
				osMessagePut(*ble->filaComandoInternoTX, COMANDO_AVALIACAO_CHAVE, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	218b      	movs	r1, #139	; 0x8b
 800115a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800115c:	e7f6      	b.n	800114c <bluetoothPutFila+0x3e>
 800115e:	2405      	movs	r4, #5
 8001160:	e7da      	b.n	8001118 <bluetoothPutFila+0xa>

08001162 <bluetoothErroCRC>:
{
 8001162:	b537      	push	{r0, r1, r2, r4, r5, lr}
	CRCKey.byte.hi	= ble->_RxDataArr[ble->RxSize-2];
 8001164:	f04f 0500 	mov.w	r5, #0
 8001168:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
{
 800116c:	4604      	mov	r4, r0
	CRCKey.byte.hi	= ble->_RxDataArr[ble->RxSize-2];
 800116e:	1843      	adds	r3, r0, r1
 8001170:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	CRCReceive = CRC16(ble->_RxDataArr,ble->RxSize-2);
 8001174:	3902      	subs	r1, #2
	CRCKey.byte.lo 	= ble->_RxDataArr[ble->RxSize-1];
 8001176:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	CRCKey.byte.hi	= ble->_RxDataArr[ble->RxSize-2];
 800117a:	f362 0507 	bfi	r5, r2, #0, #8
	CRCReceive = CRC16(ble->_RxDataArr,ble->RxSize-2);
 800117e:	b289      	uxth	r1, r1
 8001180:	302c      	adds	r0, #44	; 0x2c
	CRCKey.byte.lo 	= ble->_RxDataArr[ble->RxSize-1];
 8001182:	f363 250f 	bfi	r5, r3, #8, #8
	CRCReceive = CRC16(ble->_RxDataArr,ble->RxSize-2);
 8001186:	f000 fbed 	bl	8001964 <CRC16>
 800118a:	4601      	mov	r1, r0
	if(validaCRC(CRCKey,CRCReceive)){
 800118c:	4628      	mov	r0, r5
 800118e:	f000 fbff 	bl	8001990 <validaCRC>
 8001192:	b168      	cbz	r0, 80011b0 <bluetoothErroCRC+0x4e>
		TXCRC[0] = 0x01;
 8001194:	f64e 6301 	movw	r3, #60929	; 0xee01
 8001198:	f8ad 3004 	strh.w	r3, [sp, #4]
		TXCRC[2] = 0xEE;
 800119c:	23ee      	movs	r3, #238	; 0xee
		HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TXCRC, 3,50);
 800119e:	2203      	movs	r2, #3
		TXCRC[2] = 0xEE;
 80011a0:	f88d 3006 	strb.w	r3, [sp, #6]
		HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TXCRC, 3,50);
 80011a4:	6820      	ldr	r0, [r4, #0]
 80011a6:	2332      	movs	r3, #50	; 0x32
 80011a8:	a901      	add	r1, sp, #4
 80011aa:	f006 f8e2 	bl	8007372 <HAL_UART_Transmit>
		return BLE_CRC_INCORRETO;
 80011ae:	2003      	movs	r0, #3
}
 80011b0:	b003      	add	sp, #12
 80011b2:	bd30      	pop	{r4, r5, pc}

080011b4 <readComando>:
BLE_ErrorCode 	readComando(Bluetooth* ble, TypeComandoBle tipo){
 80011b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011b6:	4604      	mov	r4, r0
 80011b8:	460d      	mov	r5, r1
	if (bluetoothErroCRC(ble)) {
 80011ba:	f7ff ffd2 	bl	8001162 <bluetoothErroCRC>
 80011be:	b9d8      	cbnz	r0, 80011f8 <readComando+0x44>
	for(uint8_t i = 0; i < ble->contComandos; i++)	{
 80011c0:	f894 60d0 	ldrb.w	r6, [r4, #208]	; 0xd0
 80011c4:	f104 0354 	add.w	r3, r4, #84	; 0x54
 80011c8:	b2c2      	uxtb	r2, r0
 80011ca:	42b2      	cmp	r2, r6
 80011cc:	d301      	bcc.n	80011d2 <readComando+0x1e>
	return BLE_COMANDO_NAO_ENCONTRADO;
 80011ce:	2004      	movs	r0, #4
}
 80011d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		comandoRX = *ble->_BleCommArr[i];
 80011d2:	f853 1f04 	ldr.w	r1, [r3, #4]!
		if( ble->_RxDataArr[1] == comandoRX._comando){
 80011d6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
		comandoRX = *ble->_BleCommArr[i];
 80011da:	780f      	ldrb	r7, [r1, #0]
		if( ble->_RxDataArr[1] == comandoRX._comando){
 80011dc:	3001      	adds	r0, #1
 80011de:	42ba      	cmp	r2, r7
 80011e0:	d1f2      	bne.n	80011c8 <readComando+0x14>
		comandoRX = *ble->_BleCommArr[i];
 80011e2:	784b      	ldrb	r3, [r1, #1]
			ret = bluetoothPutFila(ble,tipo);
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
			ble->ComandoAtual = comandoRX;
 80011e8:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 80011ec:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
}
 80011f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			ret = bluetoothPutFila(ble,tipo);
 80011f4:	f7ff bf8b 	b.w	800110e <bluetoothPutFila>
		return BLE_CRC_INCORRETO;
 80011f8:	2003      	movs	r0, #3
 80011fa:	e7e9      	b.n	80011d0 <readComando+0x1c>

080011fc <BLEDMA_IrqHandler>:
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){
 80011fc:	6843      	ldr	r3, [r0, #4]
{
 80011fe:	b570      	push	{r4, r5, r6, lr}
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){
 8001200:	681b      	ldr	r3, [r3, #0]
{
 8001202:	4604      	mov	r4, r0
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){
 8001204:	681a      	ldr	r2, [r3, #0]
{
 8001206:	b08a      	sub	sp, #40	; 0x28
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){
 8001208:	0792      	lsls	r2, r2, #30
 800120a:	d559      	bpl.n	80012c0 <BLEDMA_IrqHandler+0xc4>
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 800120c:	4a4f      	ldr	r2, [pc, #316]	; (800134c <BLEDMA_IrqHandler+0x150>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d02b      	beq.n	800126a <BLEDMA_IrqHandler+0x6e>
 8001212:	3214      	adds	r2, #20
 8001214:	4293      	cmp	r3, r2
 8001216:	d02a      	beq.n	800126e <BLEDMA_IrqHandler+0x72>
 8001218:	3214      	adds	r2, #20
 800121a:	4293      	cmp	r3, r2
 800121c:	d029      	beq.n	8001272 <BLEDMA_IrqHandler+0x76>
 800121e:	3214      	adds	r2, #20
 8001220:	4293      	cmp	r3, r2
 8001222:	d029      	beq.n	8001278 <BLEDMA_IrqHandler+0x7c>
 8001224:	3214      	adds	r2, #20
 8001226:	4293      	cmp	r3, r2
 8001228:	d029      	beq.n	800127e <BLEDMA_IrqHandler+0x82>
 800122a:	3214      	adds	r2, #20
 800122c:	4293      	cmp	r3, r2
 800122e:	bf0c      	ite	eq
 8001230:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8001234:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8001238:	4945      	ldr	r1, [pc, #276]	; (8001350 <BLEDMA_IrqHandler+0x154>)
		sprintf(StringRecebida,"%s",ble->_RxDataArr);
 800123a:	f104 062c 	add.w	r6, r4, #44	; 0x2c
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 800123e:	604a      	str	r2, [r1, #4]
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - ble->UARTDMAHandle->Instance->CNDTR;
 8001240:	685b      	ldr	r3, [r3, #4]
		sprintf(StringRecebida,"%s",ble->_RxDataArr);
 8001242:	ad04      	add	r5, sp, #16
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - ble->UARTDMAHandle->Instance->CNDTR;
 8001244:	f1c3 0318 	rsb	r3, r3, #24
 8001248:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		sprintf(StringRecebida,"%s",ble->_RxDataArr);
 800124c:	4631      	mov	r1, r6
 800124e:	4628      	mov	r0, r5
 8001250:	f009 f939 	bl	800a4c6 <strcpy>
		ble->msDesconectado = 0;
 8001254:	2300      	movs	r3, #0
		switch(ble->MaquinaConexao){
 8001256:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
		ble->msDesconectado = 0;
 800125a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
		switch(ble->MaquinaConexao){
 800125e:	2a03      	cmp	r2, #3
 8001260:	d825      	bhi.n	80012ae <BLEDMA_IrqHandler+0xb2>
 8001262:	e8df f002 	tbb	[pc, r2]
 8001266:	2f0f      	.short	0x2f0f
 8001268:	6148      	.short	0x6148
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 800126a:	2202      	movs	r2, #2
 800126c:	e7e4      	b.n	8001238 <BLEDMA_IrqHandler+0x3c>
 800126e:	2220      	movs	r2, #32
 8001270:	e7e2      	b.n	8001238 <BLEDMA_IrqHandler+0x3c>
 8001272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001276:	e7df      	b.n	8001238 <BLEDMA_IrqHandler+0x3c>
 8001278:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800127c:	e7dc      	b.n	8001238 <BLEDMA_IrqHandler+0x3c>
 800127e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001282:	e7d9      	b.n	8001238 <BLEDMA_IrqHandler+0x3c>
			ss = strstr(StringRecebida, "OK+ADDR:");
 8001284:	4628      	mov	r0, r5
 8001286:	4933      	ldr	r1, [pc, #204]	; (8001354 <BLEDMA_IrqHandler+0x158>)
			ble->msIdle=0;
 8001288:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
			ss = strstr(StringRecebida, "OK+ADDR:");
 800128c:	f009 f82c 	bl	800a2e8 <strstr>
			if (ss != NULL){
 8001290:	b168      	cbz	r0, 80012ae <BLEDMA_IrqHandler+0xb2>
				PontoExato = ss - StringRecebida;
 8001292:	1b40      	subs	r0, r0, r5
					addr8Bits[i] = ble->_RxDataArr[i+PontoExato+8];
 8001294:	1823      	adds	r3, r4, r0
 8001296:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001298:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800129a:	aa01      	add	r2, sp, #4
 800129c:	c203      	stmia	r2!, {r0, r1}
 800129e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
				ble->chave = CRC16(addr8Bits,12);
 80012a0:	210c      	movs	r1, #12
					addr8Bits[i] = ble->_RxDataArr[i+PontoExato+8];
 80012a2:	6010      	str	r0, [r2, #0]
				ble->chave = CRC16(addr8Bits,12);
 80012a4:	a801      	add	r0, sp, #4
 80012a6:	f000 fb5d 	bl	8001964 <CRC16>
 80012aa:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
		ble->UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    	/* Set number of bytes to receive */
 80012ae:	2218      	movs	r2, #24
		ble->UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr; /* Set memory address for DMA again */
 80012b0:	6863      	ldr	r3, [r4, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60de      	str	r6, [r3, #12]
		ble->UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    	/* Set number of bytes to receive */
 80012b6:	605a      	str	r2, [r3, #4]
		ble->UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            	/* Start DMA transfer */
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	f042 0201 	orr.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]
}
 80012c0:	b00a      	add	sp, #40	; 0x28
 80012c2:	bd70      	pop	{r4, r5, r6, pc}
			ss = strstr(StringRecebida, "OK+CONN");
 80012c4:	4628      	mov	r0, r5
 80012c6:	4924      	ldr	r1, [pc, #144]	; (8001358 <BLEDMA_IrqHandler+0x15c>)
			ble->msIdle=0;
 80012c8:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
			ble->StatusSenha = false;
 80012cc:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
			ss = strstr(StringRecebida, "OK+CONN");
 80012d0:	f009 f80a 	bl	800a2e8 <strstr>
			if ((ss != NULL  && ble->RxSize == TAMANHO_MENSAGEM_CONECTOU) || MACRO_LE_BT_STATUS){
 80012d4:	b138      	cbz	r0, 80012e6 <BLEDMA_IrqHandler+0xea>
 80012d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80012da:	2b07      	cmp	r3, #7
 80012dc:	d103      	bne.n	80012e6 <BLEDMA_IrqHandler+0xea>
				ble->MaquinaConexao = RX_CONECTADO;
 80012de:	2302      	movs	r3, #2
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 80012e0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80012e4:	e7e3      	b.n	80012ae <BLEDMA_IrqHandler+0xb2>
			if ((ss != NULL  && ble->RxSize == TAMANHO_MENSAGEM_CONECTOU) || MACRO_LE_BT_STATUS){
 80012e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ea:	481c      	ldr	r0, [pc, #112]	; (800135c <BLEDMA_IrqHandler+0x160>)
 80012ec:	f004 f934 	bl	8005558 <HAL_GPIO_ReadPin>
 80012f0:	2800      	cmp	r0, #0
 80012f2:	d1f4      	bne.n	80012de <BLEDMA_IrqHandler+0xe2>
 80012f4:	e7db      	b.n	80012ae <BLEDMA_IrqHandler+0xb2>
			ss = strstr(StringRecebida, "LOST");
 80012f6:	4628      	mov	r0, r5
 80012f8:	4919      	ldr	r1, [pc, #100]	; (8001360 <BLEDMA_IrqHandler+0x164>)
 80012fa:	f008 fff5 	bl	800a2e8 <strstr>
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 80012fe:	b120      	cbz	r0, 800130a <BLEDMA_IrqHandler+0x10e>
				ble->StatusSenha 		= false;
 8001300:	2300      	movs	r3, #0
 8001302:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 8001306:	2301      	movs	r3, #1
 8001308:	e7ea      	b.n	80012e0 <BLEDMA_IrqHandler+0xe4>
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 800130a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800130e:	4813      	ldr	r0, [pc, #76]	; (800135c <BLEDMA_IrqHandler+0x160>)
 8001310:	f004 f922 	bl	8005558 <HAL_GPIO_ReadPin>
 8001314:	2800      	cmp	r0, #0
 8001316:	d0f3      	beq.n	8001300 <BLEDMA_IrqHandler+0x104>
				if(readComando(ble,ComandoConexao)!=0)	{
 8001318:	2101      	movs	r1, #1
				if(readComando(ble,ComandoBasico)!=0)	{
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff ff4a 	bl	80011b4 <readComando>
 8001320:	2800      	cmp	r0, #0
 8001322:	d0c4      	beq.n	80012ae <BLEDMA_IrqHandler+0xb2>
					__NOP();//ERRO todo tratar esse erro.
 8001324:	bf00      	nop
 8001326:	e7c2      	b.n	80012ae <BLEDMA_IrqHandler+0xb2>
			ss = strstr(StringRecebida, "LOST");
 8001328:	4628      	mov	r0, r5
 800132a:	490d      	ldr	r1, [pc, #52]	; (8001360 <BLEDMA_IrqHandler+0x164>)
			ble->msIdle=0;
 800132c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
			ss = strstr(StringRecebida, "LOST");
 8001330:	f008 ffda 	bl	800a2e8 <strstr>
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 8001334:	4605      	mov	r5, r0
 8001336:	2800      	cmp	r0, #0
 8001338:	d1e2      	bne.n	8001300 <BLEDMA_IrqHandler+0x104>
 800133a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <BLEDMA_IrqHandler+0x160>)
 8001340:	f004 f90a 	bl	8005558 <HAL_GPIO_ReadPin>
 8001344:	2800      	cmp	r0, #0
 8001346:	d0db      	beq.n	8001300 <BLEDMA_IrqHandler+0x104>
				if(readComando(ble,ComandoBasico)!=0)	{
 8001348:	4629      	mov	r1, r5
 800134a:	e7e6      	b.n	800131a <BLEDMA_IrqHandler+0x11e>
 800134c:	40020008 	.word	0x40020008
 8001350:	40020000 	.word	0x40020000
 8001354:	0800b1d0 	.word	0x0800b1d0
 8001358:	0800b1d9 	.word	0x0800b1d9
 800135c:	40010c00 	.word	0x40010c00
 8001360:	0800b1e1 	.word	0x0800b1e1

08001364 <bluetoothEnviaComando>:
{
 8001364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001368:	4614      	mov	r4, r2
 800136a:	4688      	mov	r8, r1
	uint8_t	TX_Buffer		[size+3];
 800136c:	f102 030a 	add.w	r3, r2, #10
 8001370:	f023 0307 	bic.w	r3, r3, #7
{
 8001374:	af00      	add	r7, sp, #0
		TX_Buffer[i]=_out[i];
 8001376:	f102 0901 	add.w	r9, r2, #1
	uint8_t	TX_Buffer		[size+3];
 800137a:	ebad 0d03 	sub.w	sp, sp, r3
		TX_Buffer[i]=_out[i];
 800137e:	1c53      	adds	r3, r2, #1
 8001380:	bfac      	ite	ge
 8001382:	464a      	movge	r2, r9
 8001384:	2200      	movlt	r2, #0
	CRCVar = CRC16(_out,size+1);
 8001386:	b2a5      	uxth	r5, r4
{
 8001388:	4606      	mov	r6, r0
		TX_Buffer[i]=_out[i];
 800138a:	4668      	mov	r0, sp
 800138c:	f009 f8a3 	bl	800a4d6 <memcpy>
	CRCVar = CRC16(_out,size+1);
 8001390:	1c69      	adds	r1, r5, #1
 8001392:	4640      	mov	r0, r8
 8001394:	b289      	uxth	r1, r1
 8001396:	f000 fae5 	bl	8001964 <CRC16>
	TX_Buffer[size+2] = (unsigned char) CRCVar.byte.lo;
 800139a:	446c      	add	r4, sp
 800139c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	return HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TX_Buffer, size+3,50);
 80013a0:	1cea      	adds	r2, r5, #3
	TX_Buffer[size+2] = (unsigned char) CRCVar.byte.lo;
 80013a2:	70a3      	strb	r3, [r4, #2]
	return HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TX_Buffer, size+3,50);
 80013a4:	4669      	mov	r1, sp
	TX_Buffer[size+1] = (unsigned char) CRCVar.byte.hi;
 80013a6:	f80d 0009 	strb.w	r0, [sp, r9]
	return HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TX_Buffer, size+3,50);
 80013aa:	2332      	movs	r3, #50	; 0x32
 80013ac:	6830      	ldr	r0, [r6, #0]
 80013ae:	b292      	uxth	r2, r2
 80013b0:	f005 ffdf 	bl	8007372 <HAL_UART_Transmit>
}
 80013b4:	46bd      	mov	sp, r7
 80013b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080013bc <txBleComando>:
BLE_ErrorCode 	txBleComando(Bluetooth *ble){
 80013bc:	b530      	push	{r4, r5, lr}
	evttx = osMessageGet(*ble->filaComandoInternoTX, 0);
 80013be:	6a83      	ldr	r3, [r0, #40]	; 0x28
BLE_ErrorCode 	txBleComando(Bluetooth *ble){
 80013c0:	b087      	sub	sp, #28
	evttx = osMessageGet(*ble->filaComandoInternoTX, 0);
 80013c2:	6819      	ldr	r1, [r3, #0]
BLE_ErrorCode 	txBleComando(Bluetooth *ble){
 80013c4:	4604      	mov	r4, r0
	evttx = osMessageGet(*ble->filaComandoInternoTX, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	a803      	add	r0, sp, #12
 80013ca:	f006 fc92 	bl	8007cf2 <osMessageGet>
	if (evttx.status == osEventMessage) {
 80013ce:	9b03      	ldr	r3, [sp, #12]
 80013d0:	2b10      	cmp	r3, #16
 80013d2:	d116      	bne.n	8001402 <txBleComando+0x46>
		switch ((unsigned int)evttx.value.p) {
 80013d4:	9b04      	ldr	r3, [sp, #16]
 80013d6:	2b8a      	cmp	r3, #138	; 0x8a
 80013d8:	d005      	beq.n	80013e6 <txBleComando+0x2a>
 80013da:	2b8b      	cmp	r3, #139	; 0x8b
 80013dc:	d01e      	beq.n	800141c <txBleComando+0x60>
 80013de:	2504      	movs	r5, #4
}
 80013e0:	4628      	mov	r0, r5
 80013e2:	b007      	add	sp, #28
 80013e4:	bd30      	pop	{r4, r5, pc}
			if(ble->JanelaConexao > 0){
 80013e6:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80013ea:	b163      	cbz	r3, 8001406 <txBleComando+0x4a>
				Buffer[0] 	= 0x01;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <txBleComando+0xa8>)
				bluetoothEnviaComando(ble,Buffer, 5);
 80013ee:	2205      	movs	r2, #5
				Buffer[0] 	= 0x01;
 80013f0:	9300      	str	r3, [sp, #0]
				Buffer[4] 	= ble->chave.byte.hi	;
 80013f2:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
				bluetoothEnviaComando(ble,Buffer, 5);
 80013f6:	4669      	mov	r1, sp
 80013f8:	4620      	mov	r0, r4
				Buffer[4] 	= ble->chave.byte.hi	;
 80013fa:	f8ad 3004 	strh.w	r3, [sp, #4]
				bluetoothEnviaComando(ble,Buffer, 5);
 80013fe:	f7ff ffb1 	bl	8001364 <bluetoothEnviaComando>
	return BLE_SUCCESS;
 8001402:	2500      	movs	r5, #0
 8001404:	e7ec      	b.n	80013e0 <txBleComando+0x24>
				Buffer[0] 	= 0x01;
 8001406:	4a18      	ldr	r2, [pc, #96]	; (8001468 <txBleComando+0xac>)
				bluetoothEnviaComando(ble,Buffer, 5);
 8001408:	4669      	mov	r1, sp
				Buffer[0] 	= 0x01;
 800140a:	9200      	str	r2, [sp, #0]
				bluetoothEnviaComando(ble,Buffer, 5);
 800140c:	4620      	mov	r0, r4
 800140e:	2205      	movs	r2, #5
				Buffer[4] 	= 0x00;
 8001410:	f8ad 3004 	strh.w	r3, [sp, #4]
				return BLE_NEW_DEVICE_NEGADO;
 8001414:	2509      	movs	r5, #9
				bluetoothEnviaComando(ble,Buffer, 5);
 8001416:	f7ff ffa5 	bl	8001364 <bluetoothEnviaComando>
				return BLE_NEW_DEVICE_NEGADO;
 800141a:	e7e1      	b.n	80013e0 <txBleComando+0x24>
			chaveApp.byte.hi = ble->_RxDataArr[3];
 800141c:	f04f 0100 	mov.w	r1, #0
 8001420:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if(validaCRC(ble->chave, chaveApp)){
 8001424:	f8b4 004e 	ldrh.w	r0, [r4, #78]	; 0x4e
			chaveApp.byte.hi = ble->_RxDataArr[3];
 8001428:	f363 0107 	bfi	r1, r3, #0, #8
			chaveApp.byte.lo = ble->_RxDataArr[4];
 800142c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001430:	f363 210f 	bfi	r1, r3, #8, #8
			if(validaCRC(ble->chave, chaveApp)){
 8001434:	f000 faac 	bl	8001990 <validaCRC>
 8001438:	4605      	mov	r5, r0
 800143a:	b140      	cbz	r0, 800144e <txBleComando+0x92>
				Buffer[0] 	= 0x01;
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <txBleComando+0xb0>)
				bluetoothEnviaComando(ble,Buffer, 3);
 800143e:	2203      	movs	r2, #3
 8001440:	4669      	mov	r1, sp
 8001442:	4620      	mov	r0, r4
				Buffer[0] 	= 0x01;
 8001444:	9300      	str	r3, [sp, #0]
				return BLE_SENHA_ERRADA;
 8001446:	250a      	movs	r5, #10
				bluetoothEnviaComando(ble,Buffer, 3);
 8001448:	f7ff ff8c 	bl	8001364 <bluetoothEnviaComando>
				return BLE_SENHA_ERRADA;
 800144c:	e7c8      	b.n	80013e0 <txBleComando+0x24>
				ble->MaquinaConexao	= RX_VALIDADO;
 800144e:	2203      	movs	r2, #3
				Buffer[0] 	= 0x01;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <txBleComando+0xb4>)
				bluetoothEnviaComando(ble,Buffer, 3);
 8001452:	4669      	mov	r1, sp
 8001454:	4620      	mov	r0, r4
				ble->MaquinaConexao	= RX_VALIDADO;
 8001456:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
				Buffer[0] 	= 0x01;
 800145a:	9300      	str	r3, [sp, #0]
				bluetoothEnviaComando(ble,Buffer, 3);
 800145c:	f7ff ff82 	bl	8001364 <bluetoothEnviaComando>
				return BLE_SUCCESS;
 8001460:	e7be      	b.n	80013e0 <txBleComando+0x24>
 8001462:	bf00      	nop
 8001464:	01515101 	.word	0x01515101
 8001468:	00515101 	.word	0x00515101
 800146c:	00525201 	.word	0x00525201
 8001470:	01525201 	.word	0x01525201

08001474 <bluetooth1000ms>:
	if(ble->JanelaConexao>0)
 8001474:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8001478:	b113      	cbz	r3, 8001480 <bluetooth1000ms+0xc>
		ble->JanelaConexao--;
 800147a:	3b01      	subs	r3, #1
 800147c:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8001480:	4770      	bx	lr

08001482 <BLEUSART_IrqHandler>:
	if (ble->UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 8001482:	6803      	ldr	r3, [r0, #0]
{ //todo comentar melhor
 8001484:	b082      	sub	sp, #8
	if (ble->UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6819      	ldr	r1, [r3, #0]
 800148a:	06c9      	lsls	r1, r1, #27
 800148c:	d514      	bpl.n	80014b8 <BLEUSART_IrqHandler+0x36>
		tmp = ble->UARTHandle->Instance->SR;                 /* Read status register */
 800148e:	6819      	ldr	r1, [r3, #0]
		__HAL_DMA_DISABLE (ble->UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 8001490:	6842      	ldr	r2, [r0, #4]
		tmp = ble->UARTHandle->Instance->SR;                 /* Read status register */
 8001492:	9101      	str	r1, [sp, #4]
		tmp = ble->UARTHandle->Instance->DR;                 /* Read data register */
 8001494:	6859      	ldr	r1, [r3, #4]
		__HAL_DMA_DISABLE (ble->UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 8001496:	6812      	ldr	r2, [r2, #0]
		tmp = ble->UARTHandle->Instance->DR;                 /* Read data register */
 8001498:	9101      	str	r1, [sp, #4]
		__HAL_DMA_DISABLE (ble->UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 800149a:	6811      	ldr	r1, [r2, #0]
 800149c:	f021 0101 	bic.w	r1, r1, #1
 80014a0:	6011      	str	r1, [r2, #0]
		__HAL_UART_ENABLE_IT 	(ble->UARTHandle, UART_IT_IDLE);		// HABILITA idle line INTERRUPT
 80014a2:	68d9      	ldr	r1, [r3, #12]
 80014a4:	f041 0110 	orr.w	r1, r1, #16
 80014a8:	60d9      	str	r1, [r3, #12]
		__HAL_DMA_ENABLE_IT 	(ble->UARTDMAHandle, DMA_IT_TC);		// HABILITA O DMA Tx cplt INTERRUPT
 80014aa:	6813      	ldr	r3, [r2, #0]
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6013      	str	r3, [r2, #0]
}
 80014b2:	b002      	add	sp, #8
		BLEDMA_IrqHandler (ble);
 80014b4:	f7ff bea2 	b.w	80011fc <BLEDMA_IrqHandler>
}
 80014b8:	b002      	add	sp, #8
 80014ba:	4770      	bx	lr

080014bc <comandHM10>:
void 			comandHM10(Bluetooth *ble, char _out[], uint16_t delay){
 80014bc:	b570      	push	{r4, r5, r6, lr}
 80014be:	4606      	mov	r6, r0
	HAL_UART_Transmit(ble->UARTHandle, (uint8_t *) _out, strlen(_out),100);
 80014c0:	4608      	mov	r0, r1
void 			comandHM10(Bluetooth *ble, char _out[], uint16_t delay){
 80014c2:	4614      	mov	r4, r2
 80014c4:	460d      	mov	r5, r1
	HAL_UART_Transmit(ble->UARTHandle, (uint8_t *) _out, strlen(_out),100);
 80014c6:	f7fe fe43 	bl	8000150 <strlen>
 80014ca:	2364      	movs	r3, #100	; 0x64
 80014cc:	b282      	uxth	r2, r0
 80014ce:	4629      	mov	r1, r5
 80014d0:	6830      	ldr	r0, [r6, #0]
 80014d2:	f005 ff4e 	bl	8007372 <HAL_UART_Transmit>
	if(delay != 0){
 80014d6:	b124      	cbz	r4, 80014e2 <comandHM10+0x26>
		osDelay(delay);
 80014d8:	4620      	mov	r0, r4
}
 80014da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(delay);
 80014de:	f006 bb15 	b.w	8007b0c <osDelay>
}
 80014e2:	bd70      	pop	{r4, r5, r6, pc}

080014e4 <bluetoothDescon>:
void 			bluetoothDescon(Bluetooth* ble){
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	4604      	mov	r4, r0
	comandHM10(ble,"AT",50);//DESCONECTA
 80014e8:	4d05      	ldr	r5, [pc, #20]	; (8001500 <bluetoothDescon+0x1c>)
 80014ea:	2232      	movs	r2, #50	; 0x32
 80014ec:	4629      	mov	r1, r5
 80014ee:	f7ff ffe5 	bl	80014bc <comandHM10>
	comandHM10(ble,"AT",50);//DESCONECTA
 80014f2:	4629      	mov	r1, r5
 80014f4:	4620      	mov	r0, r4
}
 80014f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	comandHM10(ble,"AT",50);//DESCONECTA
 80014fa:	2232      	movs	r2, #50	; 0x32
 80014fc:	f7ff bfde 	b.w	80014bc <comandHM10>
 8001500:	0800b1e6 	.word	0x0800b1e6

08001504 <iniciaBleHm10>:
BLE_ErrorCode 	iniciaBleHm10(Bluetooth* ble){
 8001504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001508:	4604      	mov	r4, r0
			while (tryingAddr < max_attempts) {
 800150a:	4eb6      	ldr	r6, [pc, #728]	; (80017e4 <iniciaBleHm10+0x2e0>)
				comandHM10(ble,"AT+ADDR?",300);//pede addr
 800150c:	4fb6      	ldr	r7, [pc, #728]	; (80017e8 <iniciaBleHm10+0x2e4>)
			comandHM10(ble,"AT",100);	//
 800150e:	4db7      	ldr	r5, [pc, #732]	; (80017ec <iniciaBleHm10+0x2e8>)
BLE_ErrorCode 	iniciaBleHm10(Bluetooth* ble){
 8001510:	b08e      	sub	sp, #56	; 0x38
		switch (ble->sequenciaBLE) {
 8001512:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001516:	2b04      	cmp	r3, #4
 8001518:	d8fd      	bhi.n	8001516 <iniciaBleHm10+0x12>
 800151a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800151e:	0005      	.short	0x0005
 8001520:	00fe0048 	.word	0x00fe0048
 8001524:	01600133 	.word	0x01600133
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800152e:	48b0      	ldr	r0, [pc, #704]	; (80017f0 <iniciaBleHm10+0x2ec>)
 8001530:	f004 f818 	bl	8005564 <HAL_GPIO_WritePin>
 8001534:	20c8      	movs	r0, #200	; 0xc8
 8001536:	f006 fae9 	bl	8007b0c <osDelay>
 800153a:	2201      	movs	r2, #1
 800153c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001540:	48ab      	ldr	r0, [pc, #684]	; (80017f0 <iniciaBleHm10+0x2ec>)
 8001542:	f004 f80f 	bl	8005564 <HAL_GPIO_WritePin>
			comandHM10(ble,"AT+ADTY3",100);	//BLOQUEIA CONEXAO
 8001546:	2264      	movs	r2, #100	; 0x64
 8001548:	4620      	mov	r0, r4
 800154a:	49aa      	ldr	r1, [pc, #680]	; (80017f4 <iniciaBleHm10+0x2f0>)
 800154c:	f7ff ffb6 	bl	80014bc <comandHM10>
			comandHM10(ble,"AT+ADTY3",100);	//BLOQUEIA CONEXAO
 8001550:	2264      	movs	r2, #100	; 0x64
 8001552:	49a8      	ldr	r1, [pc, #672]	; (80017f4 <iniciaBleHm10+0x2f0>)
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff ffb1 	bl	80014bc <comandHM10>
			SETUP_UART(115200)
 800155a:	6820      	ldr	r0, [r4, #0]
 800155c:	f005 ff8e 	bl	800747c <HAL_UART_Abort_IT>
 8001560:	6820      	ldr	r0, [r4, #0]
 8001562:	f005 feec 	bl	800733e <HAL_UART_DeInit>
 8001566:	2032      	movs	r0, #50	; 0x32
 8001568:	f006 fad0 	bl	8007b0c <osDelay>
 800156c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001570:	6820      	ldr	r0, [r4, #0]
 8001572:	6043      	str	r3, [r0, #4]
 8001574:	f005 feb4 	bl	80072e0 <HAL_UART_Init>
 8001578:	2032      	movs	r0, #50	; 0x32
 800157a:	f006 fac7 	bl	8007b0c <osDelay>
			bluetoothDescon(ble);
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff ffb0 	bl	80014e4 <bluetoothDescon>
			MACRO_DEFINE_INTERRUPT
 8001584:	6820      	ldr	r0, [r4, #0]
 8001586:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 800158a:	6802      	ldr	r2, [r0, #0]
 800158c:	68d3      	ldr	r3, [r2, #12]
 800158e:	f043 0310 	orr.w	r3, r3, #16
 8001592:	60d3      	str	r3, [r2, #12]
 8001594:	6863      	ldr	r3, [r4, #4]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	6813      	ldr	r3, [r2, #0]
 800159a:	f043 0302 	orr.w	r3, r3, #2
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	2218      	movs	r2, #24
 80015a2:	f006 fa69 	bl	8007a78 <HAL_UART_Receive_DMA>
			ble->sequenciaBLE = redefineBle;
 80015a6:	2301      	movs	r3, #1
			ble->sequenciaBLE = capturaAddr;
 80015a8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			break;
 80015ac:	e7b1      	b.n	8001512 <iniciaBleHm10+0xe>
			SETUP_UART(115200)
 80015ae:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
 80015b2:	6820      	ldr	r0, [r4, #0]
 80015b4:	f005 ff62 	bl	800747c <HAL_UART_Abort_IT>
 80015b8:	6820      	ldr	r0, [r4, #0]
 80015ba:	f005 fec0 	bl	800733e <HAL_UART_DeInit>
 80015be:	2032      	movs	r0, #50	; 0x32
 80015c0:	f006 faa4 	bl	8007b0c <osDelay>
 80015c4:	6820      	ldr	r0, [r4, #0]
 80015c6:	f8c0 8004 	str.w	r8, [r0, #4]
 80015ca:	f005 fe89 	bl	80072e0 <HAL_UART_Init>
 80015ce:	2032      	movs	r0, #50	; 0x32
 80015d0:	f006 fa9c 	bl	8007b0c <osDelay>
			comandHM10(ble,"AT",100);	//
 80015d4:	2264      	movs	r2, #100	; 0x64
 80015d6:	4629      	mov	r1, r5
 80015d8:	4620      	mov	r0, r4
 80015da:	f7ff ff6f 	bl	80014bc <comandHM10>
			comandHM10(ble,"AT",100);	//
 80015de:	2264      	movs	r2, #100	; 0x64
 80015e0:	4629      	mov	r1, r5
 80015e2:	4620      	mov	r0, r4
 80015e4:	f7ff ff6a 	bl	80014bc <comandHM10>
			comandHM10(ble,"AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 80015e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015ec:	4982      	ldr	r1, [pc, #520]	; (80017f8 <iniciaBleHm10+0x2f4>)
 80015ee:	4620      	mov	r0, r4
 80015f0:	f7ff ff64 	bl	80014bc <comandHM10>
			SETUP_UART(9600)
 80015f4:	6820      	ldr	r0, [r4, #0]
 80015f6:	f005 ff41 	bl	800747c <HAL_UART_Abort_IT>
 80015fa:	6820      	ldr	r0, [r4, #0]
 80015fc:	f005 fe9f 	bl	800733e <HAL_UART_DeInit>
 8001600:	2032      	movs	r0, #50	; 0x32
 8001602:	f006 fa83 	bl	8007b0c <osDelay>
 8001606:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800160a:	6820      	ldr	r0, [r4, #0]
 800160c:	6043      	str	r3, [r0, #4]
 800160e:	f005 fe67 	bl	80072e0 <HAL_UART_Init>
 8001612:	2032      	movs	r0, #50	; 0x32
 8001614:	f006 fa7a 	bl	8007b0c <osDelay>
			comandHM10(ble,"AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 8001618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800161c:	4620      	mov	r0, r4
 800161e:	4976      	ldr	r1, [pc, #472]	; (80017f8 <iniciaBleHm10+0x2f4>)
 8001620:	f7ff ff4c 	bl	80014bc <comandHM10>
			comandHM10(ble,"AT",100);	//
 8001624:	2264      	movs	r2, #100	; 0x64
 8001626:	4629      	mov	r1, r5
 8001628:	4620      	mov	r0, r4
 800162a:	f7ff ff47 	bl	80014bc <comandHM10>
			comandHM10(ble,"AT",100);	//
 800162e:	2264      	movs	r2, #100	; 0x64
 8001630:	4629      	mov	r1, r5
 8001632:	4620      	mov	r0, r4
 8001634:	f7ff ff42 	bl	80014bc <comandHM10>
			comandHM10(ble,"AT+ADTY3",300);	//BLOQUEIA CONEXAO
 8001638:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800163c:	4620      	mov	r0, r4
 800163e:	496d      	ldr	r1, [pc, #436]	; (80017f4 <iniciaBleHm10+0x2f0>)
 8001640:	f7ff ff3c 	bl	80014bc <comandHM10>
			comandHM10(ble,"AT+BAUD4",300);	//COLOCA BAUD EM 115200
 8001644:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001648:	496c      	ldr	r1, [pc, #432]	; (80017fc <iniciaBleHm10+0x2f8>)
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff ff36 	bl	80014bc <comandHM10>
			SETUP_UART(115200)
 8001650:	6820      	ldr	r0, [r4, #0]
 8001652:	f005 ff13 	bl	800747c <HAL_UART_Abort_IT>
 8001656:	6820      	ldr	r0, [r4, #0]
 8001658:	f005 fe71 	bl	800733e <HAL_UART_DeInit>
 800165c:	2032      	movs	r0, #50	; 0x32
 800165e:	f006 fa55 	bl	8007b0c <osDelay>
 8001662:	6820      	ldr	r0, [r4, #0]
 8001664:	f8c0 8004 	str.w	r8, [r0, #4]
 8001668:	f005 fe3a 	bl	80072e0 <HAL_UART_Init>
 800166c:	2032      	movs	r0, #50	; 0x32
 800166e:	f006 fa4d 	bl	8007b0c <osDelay>
			MACRO_RESET_BLE
 8001672:	2200      	movs	r2, #0
 8001674:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001678:	485d      	ldr	r0, [pc, #372]	; (80017f0 <iniciaBleHm10+0x2ec>)
 800167a:	f003 ff73 	bl	8005564 <HAL_GPIO_WritePin>
 800167e:	20c8      	movs	r0, #200	; 0xc8
 8001680:	f006 fa44 	bl	8007b0c <osDelay>
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800168a:	4859      	ldr	r0, [pc, #356]	; (80017f0 <iniciaBleHm10+0x2ec>)
 800168c:	f003 ff6a 	bl	8005564 <HAL_GPIO_WritePin>
			comandHM10(ble,"AT",100);	//
 8001690:	2264      	movs	r2, #100	; 0x64
 8001692:	4629      	mov	r1, r5
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff ff11 	bl	80014bc <comandHM10>
			comandHM10(ble,"AT",100);	//
 800169a:	2264      	movs	r2, #100	; 0x64
 800169c:	4629      	mov	r1, r5
 800169e:	4620      	mov	r0, r4
 80016a0:	f7ff ff0c 	bl	80014bc <comandHM10>
			comandHM10(ble,"AT+POWE3",300);	//POTENCIA MAXIMA
 80016a4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016a8:	4620      	mov	r0, r4
 80016aa:	4955      	ldr	r1, [pc, #340]	; (8001800 <iniciaBleHm10+0x2fc>)
 80016ac:	f7ff ff06 	bl	80014bc <comandHM10>
			comandHM10(ble,"AT+SHOW3",300);	//MOSTRA O NOME e rssi
 80016b0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016b4:	4620      	mov	r0, r4
 80016b6:	4953      	ldr	r1, [pc, #332]	; (8001804 <iniciaBleHm10+0x300>)
 80016b8:	f7ff ff00 	bl	80014bc <comandHM10>
			comandHM10(ble,"AT+GAIN1",300);	//INSERE GANHO
 80016bc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016c0:	4620      	mov	r0, r4
 80016c2:	4951      	ldr	r1, [pc, #324]	; (8001808 <iniciaBleHm10+0x304>)
 80016c4:	f7ff fefa 	bl	80014bc <comandHM10>
			comandHM10(ble,"AT+NOTI1",300);	//NOTIFICA QUE CONECTOU
 80016c8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016cc:	4620      	mov	r0, r4
 80016ce:	494f      	ldr	r1, [pc, #316]	; (800180c <iniciaBleHm10+0x308>)
 80016d0:	f7ff fef4 	bl	80014bc <comandHM10>
			comandHM10(ble,"AT+PIO11",300);	//1 - CONECT = 1  \  DISC = 0
 80016d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016d8:	4620      	mov	r0, r4
 80016da:	494d      	ldr	r1, [pc, #308]	; (8001810 <iniciaBleHm10+0x30c>)
 80016dc:	f7ff feee 	bl	80014bc <comandHM10>
			snprintf(comando, sizeof(comando), "AT+NAME%s", BLE_DEVICE_NAME);
 80016e0:	4b4c      	ldr	r3, [pc, #304]	; (8001814 <iniciaBleHm10+0x310>)
 80016e2:	2132      	movs	r1, #50	; 0x32
 80016e4:	4a4c      	ldr	r2, [pc, #304]	; (8001818 <iniciaBleHm10+0x314>)
 80016e6:	a801      	add	r0, sp, #4
 80016e8:	f008 fcea 	bl	800a0c0 <sniprintf>
			comandHM10(ble,comando, 400); 	// Configura o nome no dispositivo
 80016ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80016f0:	4620      	mov	r0, r4
 80016f2:	a901      	add	r1, sp, #4
 80016f4:	f7ff fee2 	bl	80014bc <comandHM10>
			M_BLE_RESET
 80016f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80016fc:	4620      	mov	r0, r4
 80016fe:	4947      	ldr	r1, [pc, #284]	; (800181c <iniciaBleHm10+0x318>)
 8001700:	f7ff fedc 	bl	80014bc <comandHM10>
			ble->sequenciaBLE = capturaAddr;
 8001704:	2302      	movs	r3, #2
 8001706:	e74f      	b.n	80015a8 <iniciaBleHm10+0xa4>
					tryingAddr++;
 8001708:	7833      	ldrb	r3, [r6, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	b2db      	uxtb	r3, r3
			if(tryingAddr >= max_attempts){
 800170e:	2b0e      	cmp	r3, #14
					tryingAddr++;
 8001710:	7033      	strb	r3, [r6, #0]
			if(tryingAddr >= max_attempts){
 8001712:	f67f aefe 	bls.w	8001512 <iniciaBleHm10+0xe>
				ble->sequenciaBLE = erro;//extrapolou as tentativas
 8001716:	2304      	movs	r3, #4
 8001718:	e746      	b.n	80015a8 <iniciaBleHm10+0xa4>
			while (tryingAddr < max_attempts) {
 800171a:	7833      	ldrb	r3, [r6, #0]
 800171c:	2b0e      	cmp	r3, #14
 800171e:	d8fa      	bhi.n	8001716 <iniciaBleHm10+0x212>
				comandHM10(ble,"AT+ADDR?",300);//pede addr
 8001720:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001724:	4639      	mov	r1, r7
 8001726:	4620      	mov	r0, r4
 8001728:	f7ff fec8 	bl	80014bc <comandHM10>
				MACRO_DEFINE_INTERRUPT
 800172c:	6820      	ldr	r0, [r4, #0]
 800172e:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8001732:	6802      	ldr	r2, [r0, #0]
 8001734:	4641      	mov	r1, r8
 8001736:	68d3      	ldr	r3, [r2, #12]
 8001738:	f043 0310 	orr.w	r3, r3, #16
 800173c:	60d3      	str	r3, [r2, #12]
 800173e:	6863      	ldr	r3, [r4, #4]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	6813      	ldr	r3, [r2, #0]
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	2218      	movs	r2, #24
 800174c:	f006 f994 	bl	8007a78 <HAL_UART_Receive_DMA>
				if (ble->chave.hilo != 0){
 8001750:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0d7      	beq.n	8001708 <iniciaBleHm10+0x204>
					ble->sequenciaBLE = final;
 8001758:	2303      	movs	r3, #3
					MACRO_DEFINE_INTERRUPT
 800175a:	6820      	ldr	r0, [r4, #0]
					ble->sequenciaBLE = final;
 800175c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
					MACRO_DEFINE_INTERRUPT
 8001760:	6802      	ldr	r2, [r0, #0]
 8001762:	4641      	mov	r1, r8
 8001764:	68d3      	ldr	r3, [r2, #12]
 8001766:	f043 0310 	orr.w	r3, r3, #16
 800176a:	60d3      	str	r3, [r2, #12]
 800176c:	6863      	ldr	r3, [r4, #4]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	6813      	ldr	r3, [r2, #0]
 8001772:	f043 0302 	orr.w	r3, r3, #2
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	2218      	movs	r2, #24
 800177a:	f006 f97d 	bl	8007a78 <HAL_UART_Receive_DMA>
					tryingAddr=0;
 800177e:	2300      	movs	r3, #0
 8001780:	7033      	strb	r3, [r6, #0]
			if(tryingAddr >= max_attempts){
 8001782:	e6c6      	b.n	8001512 <iniciaBleHm10+0xe>
			comandHM10(ble,"AT+ADTY0",300);	//DESBLOQUEIA CONEXA
 8001784:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001788:	4620      	mov	r0, r4
 800178a:	4925      	ldr	r1, [pc, #148]	; (8001820 <iniciaBleHm10+0x31c>)
 800178c:	f7ff fe96 	bl	80014bc <comandHM10>
			MACRO_RESET_BLE
 8001790:	2200      	movs	r2, #0
 8001792:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001796:	4816      	ldr	r0, [pc, #88]	; (80017f0 <iniciaBleHm10+0x2ec>)
 8001798:	f003 fee4 	bl	8005564 <HAL_GPIO_WritePin>
 800179c:	20c8      	movs	r0, #200	; 0xc8
 800179e:	f006 f9b5 	bl	8007b0c <osDelay>
 80017a2:	2201      	movs	r2, #1
 80017a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a8:	4811      	ldr	r0, [pc, #68]	; (80017f0 <iniciaBleHm10+0x2ec>)
 80017aa:	f003 fedb 	bl	8005564 <HAL_GPIO_WritePin>
			__HAL_UART_ENABLE_IT 	(ble->UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 80017ae:	6820      	ldr	r0, [r4, #0]
			HAL_UART_Receive_DMA 	(ble->UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 80017b0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
			__HAL_UART_ENABLE_IT 	(ble->UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 80017b4:	6802      	ldr	r2, [r0, #0]
 80017b6:	68d3      	ldr	r3, [r2, #12]
 80017b8:	f043 0310 	orr.w	r3, r3, #16
 80017bc:	60d3      	str	r3, [r2, #12]
			__HAL_DMA_ENABLE_IT 	(ble->UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
 80017be:	6863      	ldr	r3, [r4, #4]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	6813      	ldr	r3, [r2, #0]
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_DMA 	(ble->UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 80017ca:	2218      	movs	r2, #24
 80017cc:	f006 f954 	bl	8007a78 <HAL_UART_Receive_DMA>
			ble->MaquinaConexao = RX_DESCONECTADO;
 80017d0:	2301      	movs	r3, #1
			return BLE_SUCCESS;
 80017d2:	2000      	movs	r0, #0
			ble->MaquinaConexao = RX_DESCONECTADO;
 80017d4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 80017d8:	b00e      	add	sp, #56	; 0x38
 80017da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (ble->sequenciaBLE) {
 80017de:	2002      	movs	r0, #2
 80017e0:	e7fa      	b.n	80017d8 <iniciaBleHm10+0x2d4>
 80017e2:	bf00      	nop
 80017e4:	2000008c 	.word	0x2000008c
 80017e8:	0800b24e 	.word	0x0800b24e
 80017ec:	0800b1e6 	.word	0x0800b1e6
 80017f0:	40010c00 	.word	0x40010c00
 80017f4:	0800b1e9 	.word	0x0800b1e9
 80017f8:	0800b1f2 	.word	0x0800b1f2
 80017fc:	0800b1fb 	.word	0x0800b1fb
 8001800:	0800b204 	.word	0x0800b204
 8001804:	0800b20d 	.word	0x0800b20d
 8001808:	0800b216 	.word	0x0800b216
 800180c:	0800b21f 	.word	0x0800b21f
 8001810:	0800b228 	.word	0x0800b228
 8001814:	0800b231 	.word	0x0800b231
 8001818:	0800b23b 	.word	0x0800b23b
 800181c:	0800b245 	.word	0x0800b245
 8001820:	0800b257 	.word	0x0800b257

08001824 <bleConstrutora>:
BLE_ErrorCode 	bleConstrutora(Bluetooth *ble, UART_HandleTypeDef *UARTHandle, DMA_HandleTypeDef *UARTDMAHandle, osMessageQId *filaRX, osMessageQId *filaTX, osMessageQId *filaComandoInternoTX){
 8001824:	b570      	push	{r4, r5, r6, lr}
	if (ble == NULL || UARTHandle == NULL || UARTDMAHandle == NULL || filaRX == NULL || filaTX == NULL || filaComandoInternoTX == NULL) {
 8001826:	4604      	mov	r4, r0
BLE_ErrorCode 	bleConstrutora(Bluetooth *ble, UART_HandleTypeDef *UARTHandle, DMA_HandleTypeDef *UARTDMAHandle, osMessageQId *filaRX, osMessageQId *filaTX, osMessageQId *filaComandoInternoTX){
 8001828:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
	if (ble == NULL || UARTHandle == NULL || UARTDMAHandle == NULL || filaRX == NULL || filaTX == NULL || filaComandoInternoTX == NULL) {
 800182c:	b350      	cbz	r0, 8001884 <bleConstrutora+0x60>
 800182e:	b349      	cbz	r1, 8001884 <bleConstrutora+0x60>
 8001830:	b342      	cbz	r2, 8001884 <bleConstrutora+0x60>
 8001832:	b33b      	cbz	r3, 8001884 <bleConstrutora+0x60>
 8001834:	b336      	cbz	r6, 8001884 <bleConstrutora+0x60>
 8001836:	b32d      	cbz	r5, 8001884 <bleConstrutora+0x60>
	ble->filaComandosTX = filaTX;
 8001838:	e9c0 3608 	strd	r3, r6, [r0, #32]
	ble->contComandos 	= 0; 	// Renomeado para ter um nome mais explícito e sem _ inicial.
 800183c:	2300      	movs	r3, #0
 800183e:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
	ble->JanelaConexao 	= 120; 	// 120 segundos.
 8001842:	2378      	movs	r3, #120	; 0x78
	ble->UARTDMAHandle 	= UARTDMAHandle;
 8001844:	e9c0 1200 	strd	r1, r2, [r0]
	ble->filaComandoInternoTX = filaComandoInternoTX;
 8001848:	6285      	str	r5, [r0, #40]	; 0x28
	ble->JanelaConexao 	= 120; 	// 120 segundos.
 800184a:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
	if (iniciaBleHm10(ble) == BLE_EXTRAPOLOU_TRY) {
 800184e:	f7ff fe59 	bl	8001504 <iniciaBleHm10>
 8001852:	2802      	cmp	r0, #2
 8001854:	d101      	bne.n	800185a <bleConstrutora+0x36>
 8001856:	b672      	cpsid	i
	while (1)
 8001858:	e7fe      	b.n	8001858 <bleConstrutora+0x34>
	if (bleAddCompConexao(ble, &ble->BLEPedeSenha, RX_PEDE_SENHA) != BLE_SUCCESS ||
 800185a:	2242      	movs	r2, #66	; 0x42
 800185c:	4620      	mov	r0, r4
 800185e:	f104 0153 	add.w	r1, r4, #83	; 0x53
 8001862:	f7ff fc3e 	bl	80010e2 <bleAddCompConexao>
 8001866:	b108      	cbz	r0, 800186c <bleConstrutora+0x48>
 8001868:	b672      	cpsid	i
	while (1)
 800186a:	e7fe      	b.n	800186a <bleConstrutora+0x46>
			bleAddCompConexao(ble, &ble->BLERecebeuSenha, RX_RECEBEU_SENHA) != BLE_SUCCESS) {
 800186c:	2240      	movs	r2, #64	; 0x40
 800186e:	4620      	mov	r0, r4
 8001870:	f104 0155 	add.w	r1, r4, #85	; 0x55
 8001874:	f7ff fc35 	bl	80010e2 <bleAddCompConexao>
	if (bleAddCompConexao(ble, &ble->BLEPedeSenha, RX_PEDE_SENHA) != BLE_SUCCESS ||
 8001878:	2800      	cmp	r0, #0
 800187a:	d1f5      	bne.n	8001868 <bleConstrutora+0x44>
	ble->aknowladge	= sendAknowladge;
 800187c:	4b02      	ldr	r3, [pc, #8]	; (8001888 <bleConstrutora+0x64>)
 800187e:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
}
 8001882:	bd70      	pop	{r4, r5, r6, pc}
		return BLE_OBJETO_NULO;
 8001884:	2001      	movs	r0, #1
 8001886:	e7fc      	b.n	8001882 <bleConstrutora+0x5e>
 8001888:	08001095 	.word	0x08001095

0800188c <bluetooth10ms>:
void 			bluetooth10ms(Bluetooth* ble){
 800188c:	b510      	push	{r4, lr}
	(ble->msIdle<=DEF_TEMPO_MAX_S_MSG_LOW)?ble->msIdle++:0;
 800188e:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
void 			bluetooth10ms(Bluetooth* ble){
 8001892:	4604      	mov	r4, r0
	(ble->msIdle<=DEF_TEMPO_MAX_S_MSG_LOW)?ble->msIdle++:0;
 8001894:	2b78      	cmp	r3, #120	; 0x78
 8001896:	bf9c      	itt	ls
 8001898:	3301      	addls	r3, #1
 800189a:	f8a0 304a 	strhls.w	r3, [r0, #74]	; 0x4a
	if(ble->JanelaConexao>0){
 800189e:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 80018a2:	b17b      	cbz	r3, 80018c4 <bluetooth10ms+0x38>
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_HIGH)	{
 80018a4:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 80018a8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80018ac:	d901      	bls.n	80018b2 <bluetooth10ms+0x26>
			bluetoothDescon(ble);
 80018ae:	f7ff fe19 	bl	80014e4 <bluetoothDescon>
	if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_LOW)	{
 80018b2:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80018b6:	2b78      	cmp	r3, #120	; 0x78
 80018b8:	d906      	bls.n	80018c8 <bluetooth10ms+0x3c>
		bluetoothDescon(ble);
 80018ba:	4620      	mov	r0, r4
}
 80018bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bluetoothDescon(ble);
 80018c0:	f7ff be10 	b.w	80014e4 <bluetoothDescon>
		__NOP();
 80018c4:	bf00      	nop
 80018c6:	e7f4      	b.n	80018b2 <bluetooth10ms+0x26>
}
 80018c8:	bd10      	pop	{r4, pc}
	...

080018cc <vetor4b_TO_Double>:
 *  Created on: Dec 6, 2023
 *      Author: lucas
 */
#include "Conversoes.h"

void vetor4b_TO_Double(double *destino, uint8_t *vetor, uint8_t inicio) {
 80018cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80018d0:	4605      	mov	r5, r0
	// Verificar se o destino e o vetor não são nulos
	floatAsBytes myValue;

	// Copia os bytes do double para o vetor, um por vez, começando no índice 'inicio'
	for (int i = 0; i < 4; ++i) {
 80018d2:	2600      	movs	r6, #0
		myValue.bytes[i] = vetor[inicio + i] ;
		printf("%d \n",myValue.bytes[i]);
 80018d4:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8001900 <vetor4b_TO_Double+0x34>
 80018d8:	188c      	adds	r4, r1, r2
 80018da:	af01      	add	r7, sp, #4
		myValue.bytes[i] = vetor[inicio + i] ;
 80018dc:	f814 1b01 	ldrb.w	r1, [r4], #1
		printf("%d \n",myValue.bytes[i]);
 80018e0:	4640      	mov	r0, r8
	for (int i = 0; i < 4; ++i) {
 80018e2:	3601      	adds	r6, #1
		myValue.bytes[i] = vetor[inicio + i] ;
 80018e4:	f807 1b01 	strb.w	r1, [r7], #1
		printf("%d \n",myValue.bytes[i]);
 80018e8:	f008 fb7c 	bl	8009fe4 <iprintf>
	for (int i = 0; i < 4; ++i) {
 80018ec:	2e04      	cmp	r6, #4
 80018ee:	d1f5      	bne.n	80018dc <vetor4b_TO_Double+0x10>
	}

	*destino = (double)myValue.value;
 80018f0:	9801      	ldr	r0, [sp, #4]
 80018f2:	f7fe fd99 	bl	8000428 <__aeabi_f2d>
 80018f6:	e9c5 0100 	strd	r0, r1, [r5]
}
 80018fa:	b002      	add	sp, #8
 80018fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001900:	0800b260 	.word	0x0800b260

08001904 <vetor2b_TO_uint16>:
void vetor2b_TO_uint16(uint16_t *destino, uint8_t *vetor, uint8_t inicio) {
 8001904:	b410      	push	{r4}

	// Verificar se o destino e o vetor não são nulos
	if (destino == NULL || vetor == NULL) {
 8001906:	b100      	cbz	r0, 800190a <vetor2b_TO_uint16+0x6>
 8001908:	b919      	cbnz	r1, 8001912 <vetor2b_TO_uint16+0xe>
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 800190a:	4806      	ldr	r0, [pc, #24]	; (8001924 <vetor2b_TO_uint16+0x20>)
		return;
	}

	*destino = vetor[inicio] << 8 | vetor[inicio+1];
}
 800190c:	bc10      	pop	{r4}
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 800190e:	f008 bbcf 	b.w	800a0b0 <puts>
	*destino = vetor[inicio] << 8 | vetor[inicio+1];
 8001912:	5c8c      	ldrb	r4, [r1, r2]
 8001914:	4411      	add	r1, r2
 8001916:	784b      	ldrb	r3, [r1, #1]
 8001918:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800191c:	8003      	strh	r3, [r0, #0]
}
 800191e:	bc10      	pop	{r4}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	0800b265 	.word	0x0800b265

08001928 <vetor2b_TO_Double>:
void vetor2b_TO_Double(double *destino, uint8_t *vetor, uint8_t inicio) {
 8001928:	b510      	push	{r4, lr}

	// Verificar se o destino e o vetor não são nulos
	if (destino == NULL || vetor == NULL) {
 800192a:	4604      	mov	r4, r0
 800192c:	b100      	cbz	r0, 8001930 <vetor2b_TO_Double+0x8>
 800192e:	b921      	cbnz	r1, 800193a <vetor2b_TO_Double+0x12>
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
		return;
	}

	*destino = vetor[inicio] << 8 | vetor[inicio+1];
}
 8001930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 8001934:	4806      	ldr	r0, [pc, #24]	; (8001950 <vetor2b_TO_Double+0x28>)
 8001936:	f008 bbbb 	b.w	800a0b0 <puts>
	*destino = vetor[inicio] << 8 | vetor[inicio+1];
 800193a:	5c88      	ldrb	r0, [r1, r2]
 800193c:	4411      	add	r1, r2
 800193e:	784b      	ldrb	r3, [r1, #1]
 8001940:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001944:	f7fe fd5e 	bl	8000404 <__aeabi_i2d>
 8001948:	e9c4 0100 	strd	r0, r1, [r4]
}
 800194c:	bd10      	pop	{r4, pc}
 800194e:	bf00      	nop
 8001950:	0800b265 	.word	0x0800b265

08001954 <float_TO_vetor4b>:
		myValue.bytes[i] = vetor[inicio + i];
	}

	*destino = myValue.value;
}
void float_TO_vetor4b(double valor, uint8_t *vetor, uint8_t inicio) {
 8001954:	b538      	push	{r3, r4, r5, lr}
 8001956:	4615      	mov	r5, r2
 8001958:	461c      	mov	r4, r3

	// Cria uma união e armazena o valor float nela
	floatAsBytes myValue;
	myValue.value = (float)valor;
 800195a:	f7ff f877 	bl	8000a4c <__aeabi_d2f>

	// Copia os bytes do float para o vetor, um por vez, começando no índice 'inicio'
	for (int i = 0; i < sizeof(myValue.value); ++i) {
		vetor[inicio + i] = myValue.bytes[i];
 800195e:	5128      	str	r0, [r5, r4]
	}
}
 8001960:	bd38      	pop	{r3, r4, r5, pc}
	...

08001964 <CRC16>:
			0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
			0x40
	};

	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001964:	23ff      	movs	r3, #255	; 0xff
{
 8001966:	b570      	push	{r4, r5, r6, lr}
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001968:	461c      	mov	r4, r3
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800196a:	4d07      	ldr	r5, [pc, #28]	; (8001988 <CRC16+0x24>)
		uchCRCHi = auchCRCLo[uIndex] ;
 800196c:	4e07      	ldr	r6, [pc, #28]	; (800198c <CRC16+0x28>)
 800196e:	4401      	add	r1, r0
	while (usDataLen--) /* pass through message buffer */
 8001970:	4281      	cmp	r1, r0
 8001972:	d102      	bne.n	800197a <CRC16+0x16>
	}
	ret.hilo = (uchCRCHi << 8 | uchCRCLo);

	return ret ;
}
 8001974:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 8001978:	bd70      	pop	{r4, r5, r6, pc}
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800197a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800197e:	405a      	eors	r2, r3
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001980:	5cab      	ldrb	r3, [r5, r2]
 8001982:	4063      	eors	r3, r4
		uchCRCHi = auchCRCLo[uIndex] ;
 8001984:	5cb4      	ldrb	r4, [r6, r2]
 8001986:	e7f3      	b.n	8001970 <CRC16+0xc>
 8001988:	0800b2aa 	.word	0x0800b2aa
 800198c:	0800b3aa 	.word	0x0800b3aa

08001990 <validaCRC>:

uint8_t validaCRC(CRC_short referencia, CRC_short chave){
	if(referencia.byte.hi != chave.byte.hi ||referencia.byte.lo != chave.byte.lo  ){
 8001990:	b289      	uxth	r1, r1
 8001992:	b280      	uxth	r0, r0
		return 1;
	}
	return 0;
}
 8001994:	1a40      	subs	r0, r0, r1
 8001996:	bf18      	it	ne
 8001998:	2001      	movne	r0, #1
uint8_t validaCRC(CRC_short referencia, CRC_short chave){
 800199a:	b082      	sub	sp, #8
}
 800199c:	b002      	add	sp, #8
 800199e:	4770      	bx	lr

080019a0 <EepromAddVar>:
	// variavel de referencia para autoreset na primeira vez ao ligar.
	EepromAddVar(eeprom, 0, &eeprom->RefFlag,	"addrREF_MEM_FLAG",	addrREF_MEM_FLAG,	DATA8BITS,	0,	STD_REF_MEM	,254	,0);

	return EEPROM_SUCCESS;
}
EEPROM_ErrorCode EepromAddVar(Eeprom *eeprom, bool resetavel, EepromVariaveis* _var, char* _name, uint16_t addr, TypeData tipo, uint32_t minimo, uint32_t padrao,uint32_t maximo, void *_addrVar){
 80019a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019a4:	4699      	mov	r9, r3
 80019a6:	e9dd 530e 	ldrd	r5, r3, [sp, #56]	; 0x38
 80019aa:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	; 0x30
 80019ae:	4680      	mov	r8, r0

	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 80019b0:	4648      	mov	r0, r9
EEPROM_ErrorCode EepromAddVar(Eeprom *eeprom, bool resetavel, EepromVariaveis* _var, char* _name, uint16_t addr, TypeData tipo, uint32_t minimo, uint32_t padrao,uint32_t maximo, void *_addrVar){
 80019b2:	4614      	mov	r4, r2
 80019b4:	468a      	mov	sl, r1
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 80019b6:	f7fe fbcb 	bl	8000150 <strlen>
 80019ba:	3001      	adds	r0, #1
EEPROM_ErrorCode EepromAddVar(Eeprom *eeprom, bool resetavel, EepromVariaveis* _var, char* _name, uint16_t addr, TypeData tipo, uint32_t minimo, uint32_t padrao,uint32_t maximo, void *_addrVar){
 80019bc:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 80019c0:	f008 f99a 	bl	8009cf8 <malloc>
	strcpy(_var->objname, _name);		// nome do objeto.
 80019c4:	4649      	mov	r1, r9
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 80019c6:	6060      	str	r0, [r4, #4]
	strcpy(_var->objname, _name);		// nome do objeto.
 80019c8:	f008 fd7d 	bl	800a4c6 <strcpy>
	_var->_addrEprom 	= addr;			// endereço eemprom.
 80019cc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
	_var->_sizeType 	= tipo;			// tipo da variavel.
	_var->flagResetavel = resetavel;	// softreset ou hardreset.

	//definindo minimos maximos e default.
	switch (tipo) {
 80019d0:	f1bb 0f02 	cmp.w	fp, #2
 80019d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	_var->_addrEprom 	= addr;			// endereço eemprom.
 80019d6:	8122      	strh	r2, [r4, #8]
	_var->_sizeType 	= tipo;			// tipo da variavel.
 80019d8:	f884 b01c 	strb.w	fp, [r4, #28]
	_var->flagResetavel = resetavel;	// softreset ou hardreset.
 80019dc:	f884 a000 	strb.w	sl, [r4]
	switch (tipo) {
 80019e0:	d017      	beq.n	8001a12 <EepromAddVar+0x72>
 80019e2:	f1bb 0f04 	cmp.w	fp, #4
 80019e6:	d01c      	beq.n	8001a22 <EepromAddVar+0x82>
 80019e8:	f1bb 0f01 	cmp.w	fp, #1
 80019ec:	d11e      	bne.n	8001a2c <EepromAddVar+0x8c>
	case DATA8BITS:
		_var->minValue 		= (uint8_t)minimo;
 80019ee:	b2ff      	uxtb	r7, r7
		_var->defaultValue 	= (uint8_t)padrao;
 80019f0:	b2f6      	uxtb	r6, r6
		_var->maxValue 		= (uint8_t)maximo;
 80019f2:	b2ed      	uxtb	r5, r5
		_var->minValue 		= (uint8_t)minimo;
 80019f4:	6167      	str	r7, [r4, #20]
		_var->defaultValue 	= (uint8_t)padrao;
 80019f6:	6126      	str	r6, [r4, #16]
		_var->maxValue 		= (uint8_t)maximo;
 80019f8:	61a5      	str	r5, [r4, #24]
		_var->ptr8			= (uint8_t *)_addrVar;
 80019fa:	6223      	str	r3, [r4, #32]
		return EEPROM_TIPO_ERRADO;
		break;
	}

	//Adiciona o componente na lista unsigned.
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _var;
 80019fc:	f898 3124 	ldrb.w	r3, [r8, #292]	; 0x124
	eeprom->_EepromVarCount++;

	return EEPROM_SUCCESS;
}
 8001a00:	2000      	movs	r0, #0
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _var;
 8001a02:	eb08 0283 	add.w	r2, r8, r3, lsl #2
	eeprom->_EepromVarCount++;
 8001a06:	3301      	adds	r3, #1
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _var;
 8001a08:	6354      	str	r4, [r2, #52]	; 0x34
	eeprom->_EepromVarCount++;
 8001a0a:	f888 3124 	strb.w	r3, [r8, #292]	; 0x124
}
 8001a0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		_var->minValue 		= (uint16_t)minimo;
 8001a12:	b2bf      	uxth	r7, r7
		_var->defaultValue 	= (uint16_t)padrao;
 8001a14:	b2b6      	uxth	r6, r6
		_var->maxValue 		= (uint16_t)maximo;
 8001a16:	b2ad      	uxth	r5, r5
		_var->minValue 		= (uint16_t)minimo;
 8001a18:	6167      	str	r7, [r4, #20]
		_var->defaultValue 	= (uint16_t)padrao;
 8001a1a:	6126      	str	r6, [r4, #16]
		_var->maxValue 		= (uint16_t)maximo;
 8001a1c:	61a5      	str	r5, [r4, #24]
		_var->ptr16			= (uint16_t *)_addrVar;
 8001a1e:	6263      	str	r3, [r4, #36]	; 0x24
		break;
 8001a20:	e7ec      	b.n	80019fc <EepromAddVar+0x5c>
		_var->defaultValue 	= (uint32_t)padrao;
 8001a22:	e9c4 6704 	strd	r6, r7, [r4, #16]
		_var->maxValue 		= (uint32_t)maximo;
 8001a26:	61a5      	str	r5, [r4, #24]
		_var->ptr32			= (uint32_t *)_addrVar;
 8001a28:	62a3      	str	r3, [r4, #40]	; 0x28
		break;
 8001a2a:	e7e7      	b.n	80019fc <EepromAddVar+0x5c>
 8001a2c:	b672      	cpsid	i
void 			eepromError_Handler(EEPROM_ErrorCode erro)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a2e:	e7fe      	b.n	8001a2e <EepromAddVar+0x8e>

08001a30 <EepromInit>:
EEPROM_ErrorCode EepromInit	(Eeprom *eeprom, I2C_HandleTypeDef *i2c, osMessageQId *fila){
 8001a30:	b530      	push	{r4, r5, lr}
	EepromAddVar(eeprom, 0, &eeprom->RefFlag,	"addrREF_MEM_FLAG",	addrREF_MEM_FLAG,	DATA8BITS,	0,	STD_REF_MEM	,254	,0);
 8001a32:	2325      	movs	r3, #37	; 0x25
	eeprom->filaComandos 			= fila; // fila de salvamento.
 8001a34:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
	eeprom->_EepromVarCount  		= 0; 	// contador de elementos unsigned.
 8001a38:	2500      	movs	r5, #0
	EepromAddVar(eeprom, 0, &eeprom->RefFlag,	"addrREF_MEM_FLAG",	addrREF_MEM_FLAG,	DATA8BITS,	0,	STD_REF_MEM	,254	,0);
 8001a3a:	22fe      	movs	r2, #254	; 0xfe
EEPROM_ErrorCode EepromInit	(Eeprom *eeprom, I2C_HandleTypeDef *i2c, osMessageQId *fila){
 8001a3c:	b087      	sub	sp, #28
	eeprom->_EepromVarCount  		= 0; 	// contador de elementos unsigned.
 8001a3e:	f8a0 5124 	strh.w	r5, [r0, #292]	; 0x124
	EepromAddVar(eeprom, 0, &eeprom->RefFlag,	"addrREF_MEM_FLAG",	addrREF_MEM_FLAG,	DATA8BITS,	0,	STD_REF_MEM	,254	,0);
 8001a42:	2101      	movs	r1, #1
 8001a44:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8001a48:	234d      	movs	r3, #77	; 0x4d
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	e9cd 3100 	strd	r3, r1, [sp]
 8001a50:	9505      	str	r5, [sp, #20]
 8001a52:	4629      	mov	r1, r5
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <EepromInit+0x34>)
 8001a56:	9502      	str	r5, [sp, #8]
 8001a58:	f7ff ffa2 	bl	80019a0 <EepromAddVar>
}
 8001a5c:	4628      	mov	r0, r5
 8001a5e:	b007      	add	sp, #28
 8001a60:	bd30      	pop	{r4, r5, pc}
 8001a62:	bf00      	nop
 8001a64:	0800b4aa 	.word	0x0800b4aa

08001a68 <EepromAddVarFloating>:
uint8_t EepromAddVarFloating(Eeprom *eeprom, bool resetavel, EepromVarFloating* _var, char* _name,uint16_t addr,TypeDataFloating tipo,double minimo,double padrao,double maximo, void *_addrVar){
 8001a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a6c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8001a70:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8001a74:	4604      	mov	r4, r0
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001a76:	4618      	mov	r0, r3
uint8_t EepromAddVarFloating(Eeprom *eeprom, bool resetavel, EepromVarFloating* _var, char* _name,uint16_t addr,TypeDataFloating tipo,double minimo,double padrao,double maximo, void *_addrVar){
 8001a78:	4693      	mov	fp, r2
 8001a7a:	460d      	mov	r5, r1
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	f7fe fb67 	bl	8000150 <strlen>
 8001a82:	3001      	adds	r0, #1
uint8_t EepromAddVarFloating(Eeprom *eeprom, bool resetavel, EepromVarFloating* _var, char* _name,uint16_t addr,TypeDataFloating tipo,double minimo,double padrao,double maximo, void *_addrVar){
 8001a84:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001a88:	f008 f936 	bl	8009cf8 <malloc>
	strcpy(_var->objname, _name);		// nome do objeto.
 8001a8c:	9901      	ldr	r1, [sp, #4]
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001a8e:	f8cb 0004 	str.w	r0, [fp, #4]
	strcpy(_var->objname, _name);		// nome do objeto.
 8001a92:	f008 fd18 	bl	800a4c6 <strcpy>
	_var->_addrEprom 	= addr;         // endereço eemprom.
 8001a96:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	switch (tipo) {
 8001a9a:	f1ba 0f20 	cmp.w	sl, #32
	_var->_addrEprom 	= addr;         // endereço eemprom.
 8001a9e:	f8ab 3008 	strh.w	r3, [fp, #8]
	_var->_sizeType 	= tipo;         // tipo da variavel.
 8001aa2:	f88b a038 	strb.w	sl, [fp, #56]	; 0x38
	_var->flagResetavel = resetavel;    // softreset ou hardreset.
 8001aa6:	f88b 5000 	strb.w	r5, [fp]
	switch (tipo) {
 8001aaa:	d004      	beq.n	8001ab6 <EepromAddVarFloating+0x4e>
 8001aac:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8001ab0:	d029      	beq.n	8001b06 <EepromAddVarFloating+0x9e>
 8001ab2:	b672      	cpsid	i
	while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <EepromAddVarFloating+0x4c>
		_var->minValue 		= (float)minimo;
 8001ab6:	4649      	mov	r1, r9
 8001ab8:	4640      	mov	r0, r8
 8001aba:	f7fe ffc7 	bl	8000a4c <__aeabi_d2f>
 8001abe:	f7fe fcb3 	bl	8000428 <__aeabi_f2d>
 8001ac2:	e9cb 010a 	strd	r0, r1, [fp, #40]	; 0x28
		_var->defaultValue 	= (float)padrao;
 8001ac6:	4639      	mov	r1, r7
 8001ac8:	4630      	mov	r0, r6
 8001aca:	f7fe ffbf 	bl	8000a4c <__aeabi_d2f>
 8001ace:	f7fe fcab 	bl	8000428 <__aeabi_f2d>
 8001ad2:	e9cb 0108 	strd	r0, r1, [fp, #32]
		_var->maxValue 		= (float)maximo;
 8001ad6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8001ada:	f7fe ffb7 	bl	8000a4c <__aeabi_d2f>
 8001ade:	f7fe fca3 	bl	8000428 <__aeabi_f2d>
		_var->ptrFloat		= (float *)_addrVar;
 8001ae2:	9b14      	ldr	r3, [sp, #80]	; 0x50
		_var->maxValue 		= (float)maximo;
 8001ae4:	e9cb 010c 	strd	r0, r1, [fp, #48]	; 0x30
		_var->ptrFloat		= (float *)_addrVar;
 8001ae8:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
}
 8001aec:	2000      	movs	r0, #0
	eeprom->_EepromVarFloatingArr[eeprom->_EepromVarFloatingCount] = _var;
 8001aee:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
 8001af2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	eeprom->_EepromVarFloatingCount++;
 8001af6:	3301      	adds	r3, #1
	eeprom->_EepromVarFloatingArr[eeprom->_EepromVarFloatingCount] = _var;
 8001af8:	f8c2 b0ac 	str.w	fp, [r2, #172]	; 0xac
	eeprom->_EepromVarFloatingCount++;
 8001afc:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
}
 8001b00:	b003      	add	sp, #12
 8001b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		_var->maxValue 		= (double)maximo;
 8001b06:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8001b0a:	e9cb 230c 	strd	r2, r3, [fp, #48]	; 0x30
		_var->ptrDouble		= (double *)_addrVar;
 8001b0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
		_var->minValue 		= (double)minimo;
 8001b10:	e9cb 890a 	strd	r8, r9, [fp, #40]	; 0x28
		_var->defaultValue 	= (double)padrao;
 8001b14:	e9cb 6708 	strd	r6, r7, [fp, #32]
		_var->ptrDouble		= (double *)_addrVar;
 8001b18:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
		break;
 8001b1c:	e7e6      	b.n	8001aec <EepromAddVarFloating+0x84>
	...

08001b20 <EepromSetVar>:
bool EepromSetVar	(Eeprom *eeprom, EepromVariaveis *_var){
 8001b20:	b530      	push	{r4, r5, lr}
 8001b22:	4605      	mov	r5, r0
	LIBERA_EEPROM
 8001b24:	2200      	movs	r2, #0
bool EepromSetVar	(Eeprom *eeprom, EepromVariaveis *_var){
 8001b26:	b089      	sub	sp, #36	; 0x24
	LIBERA_EEPROM
 8001b28:	4823      	ldr	r0, [pc, #140]	; (8001bb8 <EepromSetVar+0x98>)
bool EepromSetVar	(Eeprom *eeprom, EepromVariaveis *_var){
 8001b2a:	460c      	mov	r4, r1
	LIBERA_EEPROM
 8001b2c:	2180      	movs	r1, #128	; 0x80
 8001b2e:	f003 fd19 	bl	8005564 <HAL_GPIO_WritePin>
 8001b32:	2005      	movs	r0, #5
 8001b34:	f002 ff96 	bl	8004a64 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,50,HAL_MAX_DELAY);//todo tratar se nao tiver disponivel?
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3c:	2232      	movs	r2, #50	; 0x32
 8001b3e:	21a2      	movs	r1, #162	; 0xa2
 8001b40:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001b42:	f004 f987 	bl	8005e54 <HAL_I2C_IsDeviceReady>
	if (result==HAL_OK)	{
 8001b46:	b9b0      	cbnz	r0, 8001b76 <EepromSetVar+0x56>
		switch (_var->_sizeType) {
 8001b48:	7f23      	ldrb	r3, [r4, #28]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d021      	beq.n	8001b92 <EepromSetVar+0x72>
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d029      	beq.n	8001ba6 <EepromSetVar+0x86>
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d10f      	bne.n	8001b76 <EepromSetVar+0x56>
			_var->valor 		= *_var->ptr8; 				// valor apontado.
 8001b56:	6a22      	ldr	r2, [r4, #32]
 8001b58:	7812      	ldrb	r2, [r2, #0]
 8001b5a:	60e2      	str	r2, [r4, #12]
			buffer1b[0] 		= (uint8_t)_var->valor;		// vetoriza.
 8001b5c:	f88d 2014 	strb.w	r2, [sp, #20]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b, 1, 200);// grava na eeprom.
 8001b60:	22c8      	movs	r2, #200	; 0xc8
 8001b62:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001b66:	ab05      	add	r3, sp, #20
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);// grava na eeprom.
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	21a2      	movs	r1, #162	; 0xa2
 8001b6c:	2310      	movs	r3, #16
 8001b6e:	8922      	ldrh	r2, [r4, #8]
 8001b70:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001b72:	f003 ffa1 	bl	8005ab8 <HAL_I2C_Mem_Write>
	osDelay(20);
 8001b76:	2014      	movs	r0, #20
 8001b78:	f005 ffc8 	bl	8007b0c <osDelay>
	TRAVA_EEPROM
 8001b7c:	2005      	movs	r0, #5
 8001b7e:	f002 ff71 	bl	8004a64 <HAL_Delay>
 8001b82:	2201      	movs	r2, #1
 8001b84:	2180      	movs	r1, #128	; 0x80
 8001b86:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <EepromSetVar+0x98>)
 8001b88:	f003 fcec 	bl	8005564 <HAL_GPIO_WritePin>
}
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	b009      	add	sp, #36	; 0x24
 8001b90:	bd30      	pop	{r4, r5, pc}
			_var->valor 		= *_var->ptr16;				// valor apontado.
 8001b92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b94:	8812      	ldrh	r2, [r2, #0]
 8001b96:	60e2      	str	r2, [r4, #12]
			buffer2b.value 		= (uint16_t)_var->valor;	// vetoriza.
 8001b98:	f8ad 2018 	strh.w	r2, [sp, #24]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2b.bytes, 2, 200);// grava na eeprom.
 8001b9c:	22c8      	movs	r2, #200	; 0xc8
 8001b9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001ba2:	ab06      	add	r3, sp, #24
 8001ba4:	e7e0      	b.n	8001b68 <EepromSetVar+0x48>
			_var->valor 		= *_var->ptr32;				// valor apontado.
 8001ba6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	60e2      	str	r2, [r4, #12]
			buffer4b.value 		= (uint32_t)_var->valor;	// vetoriza.
 8001bac:	9207      	str	r2, [sp, #28]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);// grava na eeprom.
 8001bae:	22c8      	movs	r2, #200	; 0xc8
 8001bb0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001bb4:	ab07      	add	r3, sp, #28
 8001bb6:	e7d7      	b.n	8001b68 <EepromSetVar+0x48>
 8001bb8:	40010c00 	.word	0x40010c00

08001bbc <EepromSetVarFloating>:
bool EepromSetVarFloating	(Eeprom *eeprom, EepromVarFloating *_var){
 8001bbc:	b530      	push	{r4, r5, lr}
 8001bbe:	4605      	mov	r5, r0
	LIBERA_EEPROM
 8001bc0:	2200      	movs	r2, #0
bool EepromSetVarFloating	(Eeprom *eeprom, EepromVarFloating *_var){
 8001bc2:	b089      	sub	sp, #36	; 0x24
	LIBERA_EEPROM
 8001bc4:	4820      	ldr	r0, [pc, #128]	; (8001c48 <EepromSetVarFloating+0x8c>)
bool EepromSetVarFloating	(Eeprom *eeprom, EepromVarFloating *_var){
 8001bc6:	460c      	mov	r4, r1
	LIBERA_EEPROM
 8001bc8:	2180      	movs	r1, #128	; 0x80
 8001bca:	f003 fccb 	bl	8005564 <HAL_GPIO_WritePin>
 8001bce:	2005      	movs	r0, #5
 8001bd0:	f002 ff48 	bl	8004a64 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,50,HAL_MAX_DELAY);//todo tratar se nao tiver disponivel?
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd8:	2232      	movs	r2, #50	; 0x32
 8001bda:	21a2      	movs	r1, #162	; 0xa2
 8001bdc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001bde:	f004 f939 	bl	8005e54 <HAL_I2C_IsDeviceReady>
	if (result==HAL_OK)	{
 8001be2:	b928      	cbnz	r0, 8001bf0 <EepromSetVarFloating+0x34>
		switch (_var->_sizeType) {
 8001be4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d00f      	beq.n	8001c0c <EepromSetVarFloating+0x50>
 8001bec:	2b40      	cmp	r3, #64	; 0x40
 8001bee:	d01e      	beq.n	8001c2e <EepromSetVarFloating+0x72>
	osDelay(30);
 8001bf0:	201e      	movs	r0, #30
 8001bf2:	f005 ff8b 	bl	8007b0c <osDelay>
	TRAVA_EEPROM
 8001bf6:	2005      	movs	r0, #5
 8001bf8:	f002 ff34 	bl	8004a64 <HAL_Delay>
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2180      	movs	r1, #128	; 0x80
 8001c00:	4811      	ldr	r0, [pc, #68]	; (8001c48 <EepromSetVarFloating+0x8c>)
 8001c02:	f003 fcaf 	bl	8005564 <HAL_GPIO_WritePin>
}
 8001c06:	2001      	movs	r0, #1
 8001c08:	b009      	add	sp, #36	; 0x24
 8001c0a:	bd30      	pop	{r4, r5, pc}
			_var->valorFloat 	= *_var->ptrFloat;         	// valor apontado.
 8001c0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200); // grava na eeprom.
 8001c0e:	21c8      	movs	r1, #200	; 0xc8
			_var->valorFloat 	= *_var->ptrFloat;         	// valor apontado.
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	61a3      	str	r3, [r4, #24]
			floatBuff.value 	= (float)_var->valorFloat;  // vetoriza.
 8001c14:	9305      	str	r3, [sp, #20]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200); // grava na eeprom.
 8001c16:	2304      	movs	r3, #4
 8001c18:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001c1c:	ab05      	add	r3, sp, #20
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200); // grava na eeprom
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	21a2      	movs	r1, #162	; 0xa2
 8001c22:	2310      	movs	r3, #16
 8001c24:	8922      	ldrh	r2, [r4, #8]
 8001c26:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001c28:	f003 ff46 	bl	8005ab8 <HAL_I2C_Mem_Write>
			break;
 8001c2c:	e7e0      	b.n	8001bf0 <EepromSetVarFloating+0x34>
			_var->valorDouble 	= *_var->ptrDouble;         // valor apontado.
 8001c2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	e9c4 2304 	strd	r2, r3, [r4, #16]
			doubleBuff.value 	= (double)_var->valorDouble;// vetoriza.
 8001c38:	e9cd 2306 	strd	r2, r3, [sp, #24]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200); // grava na eeprom
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	22c8      	movs	r2, #200	; 0xc8
 8001c40:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001c44:	ab06      	add	r3, sp, #24
 8001c46:	e7ea      	b.n	8001c1e <EepromSetVarFloating+0x62>
 8001c48:	40010c00 	.word	0x40010c00

08001c4c <RestauraEeprom>:
void RestauraEeprom			(Eeprom *eeprom ,TypeRestauracao tipo){
 8001c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c50:	4604      	mov	r4, r0
	LIBERA_EEPROM
 8001c52:	2200      	movs	r2, #0
void RestauraEeprom			(Eeprom *eeprom ,TypeRestauracao tipo){
 8001c54:	b08b      	sub	sp, #44	; 0x2c
	LIBERA_EEPROM
 8001c56:	485a      	ldr	r0, [pc, #360]	; (8001dc0 <RestauraEeprom+0x174>)
void RestauraEeprom			(Eeprom *eeprom ,TypeRestauracao tipo){
 8001c58:	460e      	mov	r6, r1
	LIBERA_EEPROM
 8001c5a:	2180      	movs	r1, #128	; 0x80
 8001c5c:	f003 fc82 	bl	8005564 <HAL_GPIO_WritePin>
 8001c60:	2005      	movs	r0, #5
 8001c62:	f002 feff 	bl	8004a64 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,30,HAL_MAX_DELAY);
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	221e      	movs	r2, #30
 8001c6c:	21a2      	movs	r1, #162	; 0xa2
 8001c6e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001c70:	f004 f8f0 	bl	8005e54 <HAL_I2C_IsDeviceReady>
	if (result==HAL_OK){
 8001c74:	4605      	mov	r5, r0
 8001c76:	2800      	cmp	r0, #0
 8001c78:	d066      	beq.n	8001d48 <RestauraEeprom+0xfc>
	TRAVA_EEPROM
 8001c7a:	2005      	movs	r0, #5
 8001c7c:	f002 fef2 	bl	8004a64 <HAL_Delay>
 8001c80:	2201      	movs	r2, #1
 8001c82:	2180      	movs	r1, #128	; 0x80
 8001c84:	484e      	ldr	r0, [pc, #312]	; (8001dc0 <RestauraEeprom+0x174>)
 8001c86:	f003 fc6d 	bl	8005564 <HAL_GPIO_WritePin>
}
 8001c8a:	b00b      	add	sp, #44	; 0x2c
 8001c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(!eeprom->_EepromVarArr[i]->flagResetavel || tipo == hardReset){
 8001c90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c96:	781a      	ldrb	r2, [r3, #0]
 8001c98:	b10a      	cbz	r2, 8001c9e <RestauraEeprom+0x52>
 8001c9a:	2e01      	cmp	r6, #1
 8001c9c:	d120      	bne.n	8001ce0 <RestauraEeprom+0x94>
				switch (eeprom->_EepromVarArr[i]->_sizeType) {
 8001c9e:	7f19      	ldrb	r1, [r3, #28]
 8001ca0:	2902      	cmp	r1, #2
 8001ca2:	d00e      	beq.n	8001cc2 <RestauraEeprom+0x76>
 8001ca4:	2904      	cmp	r1, #4
 8001ca6:	d047      	beq.n	8001d38 <RestauraEeprom+0xec>
 8001ca8:	2901      	cmp	r1, #1
 8001caa:	d119      	bne.n	8001ce0 <RestauraEeprom+0x94>
					buffer1b.value 					= (uint8_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001cac:	7c1a      	ldrb	r2, [r3, #16]
					buffer1b.value					=0x00;
 8001cae:	f88d 7010 	strb.w	r7, [sp, #16]
					buffer1b.value 					= (uint8_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001cb2:	f88d 2010 	strb.w	r2, [sp, #16]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b.bytes, 1, 200);
 8001cb6:	891a      	ldrh	r2, [r3, #8]
 8001cb8:	e9cd 1801 	strd	r1, r8, [sp, #4]
 8001cbc:	ab04      	add	r3, sp, #16
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	e009      	b.n	8001cd6 <RestauraEeprom+0x8a>
					buffer2b.value 					= (uint16_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001cc2:	8a1a      	ldrh	r2, [r3, #16]
					buffer2b.value					=0x0000;
 8001cc4:	f8ad 7014 	strh.w	r7, [sp, #20]
					buffer2b.value 					= (uint16_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001cc8:	f8ad 2014 	strh.w	r2, [sp, #20]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2b.bytes, 2, 200);
 8001ccc:	891a      	ldrh	r2, [r3, #8]
 8001cce:	e9cd 1801 	strd	r1, r8, [sp, #4]
 8001cd2:	f8cd 9000 	str.w	r9, [sp]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	21a2      	movs	r1, #162	; 0xa2
 8001cda:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001cdc:	f003 feec 	bl	8005ab8 <HAL_I2C_Mem_Write>
			osDelay(20);
 8001ce0:	2014      	movs	r0, #20
 8001ce2:	f005 ff13 	bl	8007b0c <osDelay>
		for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001ce6:	3501      	adds	r5, #1
 8001ce8:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 8001cec:	b2eb      	uxtb	r3, r5
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d8ce      	bhi.n	8001c90 <RestauraEeprom+0x44>
 8001cf2:	2500      	movs	r5, #0
					floatBuff.value 							= 0x0000;
 8001cf4:	f04f 0a00 	mov.w	sl, #0
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200);
 8001cf8:	27c8      	movs	r7, #200	; 0xc8
					doubleBuff.value 							= 0x00000000;
 8001cfa:	f04f 0800 	mov.w	r8, #0
 8001cfe:	f04f 0900 	mov.w	r9, #0
		for(uint8_t k = 0; k < eeprom->_EepromVarFloatingCount; k++){
 8001d02:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8001d06:	b2eb      	uxtb	r3, r5
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d823      	bhi.n	8001d54 <RestauraEeprom+0x108>
		buffer1b.value					= (uint8_t)STD_REF_MEM;
 8001d0c:	2325      	movs	r3, #37	; 0x25
 8001d0e:	f88d 3010 	strb.w	r3, [sp, #16]
		eeprom->RefFlag.valor			= buffer1b.value;
 8001d12:	f89d 3010 	ldrb.w	r3, [sp, #16]
		HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->RefFlag._addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b.bytes, 1, 200);
 8001d16:	22c8      	movs	r2, #200	; 0xc8
		eeprom->RefFlag.valor			= buffer1b.value;
 8001d18:	60e3      	str	r3, [r4, #12]
		HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->RefFlag._addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b.bytes, 1, 200);
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001d20:	ab04      	add	r3, sp, #16
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	21a2      	movs	r1, #162	; 0xa2
 8001d26:	2310      	movs	r3, #16
 8001d28:	8922      	ldrh	r2, [r4, #8]
 8001d2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001d2c:	f003 fec4 	bl	8005ab8 <HAL_I2C_Mem_Write>
		osDelay(40);
 8001d30:	2028      	movs	r0, #40	; 0x28
 8001d32:	f005 feeb 	bl	8007b0c <osDelay>
 8001d36:	e7a0      	b.n	8001c7a <RestauraEeprom+0x2e>
					buffer4b.value 					= (uint32_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001d38:	691a      	ldr	r2, [r3, #16]
					buffer4b.value					=0x00000000;
 8001d3a:	9706      	str	r7, [sp, #24]
					buffer4b.value 					= (uint32_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001d3c:	9206      	str	r2, [sp, #24]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
 8001d3e:	891a      	ldrh	r2, [r3, #8]
 8001d40:	e9cd 1801 	strd	r1, r8, [sp, #4]
 8001d44:	ab06      	add	r3, sp, #24
 8001d46:	e7ba      	b.n	8001cbe <RestauraEeprom+0x72>
					buffer2b.value					=0x0000;
 8001d48:	4607      	mov	r7, r0
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2b.bytes, 2, 200);
 8001d4a:	f04f 08c8 	mov.w	r8, #200	; 0xc8
 8001d4e:	f10d 0914 	add.w	r9, sp, #20
 8001d52:	e7c9      	b.n	8001ce8 <RestauraEeprom+0x9c>
			if(!eeprom->_EepromVarFloatingArr[k]->flagResetavel || tipo == hardReset){
 8001d54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001d58:	f8d3 b0ac 	ldr.w	fp, [r3, #172]	; 0xac
 8001d5c:	f89b 3000 	ldrb.w	r3, [fp]
 8001d60:	b10b      	cbz	r3, 8001d66 <RestauraEeprom+0x11a>
 8001d62:	2e01      	cmp	r6, #1
 8001d64:	d105      	bne.n	8001d72 <RestauraEeprom+0x126>
				switch (eeprom->_EepromVarFloatingArr[k]->_sizeType) {
 8001d66:	f89b 3038 	ldrb.w	r3, [fp, #56]	; 0x38
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	d006      	beq.n	8001d7c <RestauraEeprom+0x130>
 8001d6e:	2b40      	cmp	r3, #64	; 0x40
 8001d70:	d018      	beq.n	8001da4 <RestauraEeprom+0x158>
			osDelay(40);
 8001d72:	2028      	movs	r0, #40	; 0x28
 8001d74:	f005 feca 	bl	8007b0c <osDelay>
		for(uint8_t k = 0; k < eeprom->_EepromVarFloatingCount; k++){
 8001d78:	3501      	adds	r5, #1
 8001d7a:	e7c2      	b.n	8001d02 <RestauraEeprom+0xb6>
					floatBuff.value 							= (float)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001d7c:	e9db 0108 	ldrd	r0, r1, [fp, #32]
					floatBuff.value 							= 0x0000;
 8001d80:	f8cd a01c 	str.w	sl, [sp, #28]
					floatBuff.value 							= (float)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001d84:	f7fe fe62 	bl	8000a4c <__aeabi_d2f>
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200);
 8001d88:	2304      	movs	r3, #4
 8001d8a:	f8bb 2008 	ldrh.w	r2, [fp, #8]
					floatBuff.value 							= (float)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001d8e:	9007      	str	r0, [sp, #28]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200);
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	9702      	str	r7, [sp, #8]
 8001d94:	ab07      	add	r3, sp, #28
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	21a2      	movs	r1, #162	; 0xa2
 8001d9a:	2310      	movs	r3, #16
 8001d9c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001d9e:	f003 fe8b 	bl	8005ab8 <HAL_I2C_Mem_Write>
					break;
 8001da2:	e7e6      	b.n	8001d72 <RestauraEeprom+0x126>
					doubleBuff.value 							= (double)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001da4:	e9db 2308 	ldrd	r2, r3, [fp, #32]
					doubleBuff.value 							= 0x00000000;
 8001da8:	e9cd 8908 	strd	r8, r9, [sp, #32]
					doubleBuff.value 							= (double)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001dac:	e9cd 2308 	strd	r2, r3, [sp, #32]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);
 8001db0:	2308      	movs	r3, #8
 8001db2:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	9702      	str	r7, [sp, #8]
 8001dba:	ab08      	add	r3, sp, #32
 8001dbc:	e7eb      	b.n	8001d96 <RestauraEeprom+0x14a>
 8001dbe:	bf00      	nop
 8001dc0:	40010c00 	.word	0x40010c00

08001dc4 <EepromDownloadValores>:
void EepromDownloadValores	(Eeprom *eeprom){
 8001dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dc8:	4604      	mov	r4, r0
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001dca:	2600      	movs	r6, #0
void EepromDownloadValores	(Eeprom *eeprom){
 8001dcc:	b08b      	sub	sp, #44	; 0x2c
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001dce:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 8001dd2:	b2f3      	uxtb	r3, r6
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d815      	bhi.n	8001e04 <EepromDownloadValores+0x40>
 8001dd8:	f04f 0a00 	mov.w	sl, #0
				if(VarU->defaultValue>0 && (VarU->valorFloat == 0 || VarU->valorFloat > VarU->maxValue || VarU->valorFloat < VarU->minValue))
 8001ddc:	2600      	movs	r6, #0
 8001dde:	2700      	movs	r7, #0
 8001de0:	f04f 0b00 	mov.w	fp, #0
	for(uint8_t y = 0; y < eeprom->_EepromVarFloatingCount; y++){
 8001de4:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8001de8:	fa5f f38a 	uxtb.w	r3, sl
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d861      	bhi.n	8001eb4 <EepromDownloadValores+0xf0>
	if(eeprom->RefFlag.valor != STD_REF_MEM)
 8001df0:	68e3      	ldr	r3, [r4, #12]
 8001df2:	2b25      	cmp	r3, #37	; 0x25
 8001df4:	d003      	beq.n	8001dfe <EepromDownloadValores+0x3a>
		RestauraEeprom(eeprom, hardReset);
 8001df6:	2101      	movs	r1, #1
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f7ff ff27 	bl	8001c4c <RestauraEeprom>
}
 8001dfe:	b00b      	add	sp, #44	; 0x2c
 8001e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Var = eeprom->_EepromVarArr[i];
 8001e04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001e08:	6b5d      	ldr	r5, [r3, #52]	; 0x34
		if (HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_READ_ADDR,50,HAL_MAX_DELAY)==HAL_OK){
 8001e0a:	2232      	movs	r2, #50	; 0x32
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e10:	21a3      	movs	r1, #163	; 0xa3
 8001e12:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e14:	f004 f81e 	bl	8005e54 <HAL_I2C_IsDeviceReady>
 8001e18:	bb28      	cbnz	r0, 8001e66 <EepromDownloadValores+0xa2>
			switch (Var->_sizeType) {
 8001e1a:	7f2b      	ldrb	r3, [r5, #28]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d024      	beq.n	8001e6a <EepromDownloadValores+0xa6>
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d035      	beq.n	8001e90 <EepromDownloadValores+0xcc>
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d110      	bne.n	8001e4a <EepromDownloadValores+0x86>
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR,Var->_addrEprom,I2C_MEMADD_SIZE_16BIT,buffer1b.bytes, 1, 200);
 8001e28:	21c8      	movs	r1, #200	; 0xc8
 8001e2a:	892a      	ldrh	r2, [r5, #8]
 8001e2c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001e30:	ab04      	add	r3, sp, #16
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	21a3      	movs	r1, #163	; 0xa3
 8001e36:	2310      	movs	r3, #16
 8001e38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e3a:	f003 fecd 	bl	8005bd8 <HAL_I2C_Mem_Read>
				Var->valor = buffer1b.value;	// digital twin
 8001e3e:	f89d 2010 	ldrb.w	r2, [sp, #16]
				if(Var->ptr8 !=0){
 8001e42:	6a2b      	ldr	r3, [r5, #32]
				Var->valor = buffer1b.value;	// digital twin
 8001e44:	60ea      	str	r2, [r5, #12]
				if(Var->ptr8 !=0){
 8001e46:	b103      	cbz	r3, 8001e4a <EepromDownloadValores+0x86>
					*Var->ptr8 = Var->valor; 	// envio para ponteiro
 8001e48:	701a      	strb	r2, [r3, #0]
			if(Var->defaultValue > 0 && (Var->valor == 0 || Var->valor > Var->maxValue || Var->valor < Var->minValue))
 8001e4a:	692b      	ldr	r3, [r5, #16]
 8001e4c:	b15b      	cbz	r3, 8001e66 <EepromDownloadValores+0xa2>
 8001e4e:	68eb      	ldr	r3, [r5, #12]
 8001e50:	b12b      	cbz	r3, 8001e5e <EepromDownloadValores+0x9a>
 8001e52:	69aa      	ldr	r2, [r5, #24]
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d802      	bhi.n	8001e5e <EepromDownloadValores+0x9a>
 8001e58:	696a      	ldr	r2, [r5, #20]
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d203      	bcs.n	8001e66 <EepromDownloadValores+0xa2>
				EepromSetVar(eeprom, Var);
 8001e5e:	4629      	mov	r1, r5
 8001e60:	4620      	mov	r0, r4
 8001e62:	f7ff fe5d 	bl	8001b20 <EepromSetVar>
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001e66:	3601      	adds	r6, #1
 8001e68:	e7b1      	b.n	8001dce <EepromDownloadValores+0xa>
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR,Var->_addrEprom,I2C_MEMADD_SIZE_16BIT,buffer2b.bytes, 2, 200);
 8001e6a:	21c8      	movs	r1, #200	; 0xc8
 8001e6c:	892a      	ldrh	r2, [r5, #8]
 8001e6e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001e72:	ab05      	add	r3, sp, #20
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	21a3      	movs	r1, #163	; 0xa3
 8001e78:	2310      	movs	r3, #16
 8001e7a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e7c:	f003 feac 	bl	8005bd8 <HAL_I2C_Mem_Read>
				Var->valor = buffer2b.value;	// digital twin
 8001e80:	f8bd 2014 	ldrh.w	r2, [sp, #20]
				if(Var->ptr16 !=0){
 8001e84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				Var->valor = buffer2b.value;	// digital twin
 8001e86:	60ea      	str	r2, [r5, #12]
				if(Var->ptr16 !=0){
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0de      	beq.n	8001e4a <EepromDownloadValores+0x86>
					*Var->ptr16 = Var->valor; 	// envio para ponteiro
 8001e8c:	801a      	strh	r2, [r3, #0]
 8001e8e:	e7dc      	b.n	8001e4a <EepromDownloadValores+0x86>
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR,Var->_addrEprom,I2C_MEMADD_SIZE_16BIT,buffer4b.bytes, 4, 200);
 8001e90:	21c8      	movs	r1, #200	; 0xc8
 8001e92:	892a      	ldrh	r2, [r5, #8]
 8001e94:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001e98:	ab06      	add	r3, sp, #24
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	21a3      	movs	r1, #163	; 0xa3
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001ea2:	f003 fe99 	bl	8005bd8 <HAL_I2C_Mem_Read>
				Var->valor =  buffer4b.value;	// digital twin
 8001ea6:	9a06      	ldr	r2, [sp, #24]
				if(Var->ptr32 !=0){
 8001ea8:	6aab      	ldr	r3, [r5, #40]	; 0x28
				Var->valor =  buffer4b.value;	// digital twin
 8001eaa:	60ea      	str	r2, [r5, #12]
				if(Var->ptr32 !=0){
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0cc      	beq.n	8001e4a <EepromDownloadValores+0x86>
					*Var->ptr32 = Var->valor; 	// envio para ponteiro
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e7ca      	b.n	8001e4a <EepromDownloadValores+0x86>
		VarU = eeprom->_EepromVarFloatingArr[y];
 8001eb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001eb8:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
		if (HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_READ_ADDR,30,HAL_MAX_DELAY)==HAL_OK){
 8001ebc:	221e      	movs	r2, #30
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	21a3      	movs	r1, #163	; 0xa3
 8001ec4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001ec6:	f003 ffc5 	bl	8005e54 <HAL_I2C_IsDeviceReady>
 8001eca:	b928      	cbnz	r0, 8001ed8 <EepromDownloadValores+0x114>
			switch (VarU->_sizeType) {
 8001ecc:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8001ed0:	2b20      	cmp	r3, #32
 8001ed2:	d004      	beq.n	8001ede <EepromDownloadValores+0x11a>
 8001ed4:	2b40      	cmp	r3, #64	; 0x40
 8001ed6:	d039      	beq.n	8001f4c <EepromDownloadValores+0x188>
	for(uint8_t y = 0; y < eeprom->_EepromVarFloatingCount; y++){
 8001ed8:	f10a 0a01 	add.w	sl, sl, #1
 8001edc:	e782      	b.n	8001de4 <EepromDownloadValores+0x20>
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, VarU->_addrEprom, I2C_MEMADD_SIZE_16BIT, floatBuff.bytes, 4, 200);
 8001ede:	2304      	movs	r3, #4
 8001ee0:	20c8      	movs	r0, #200	; 0xc8
 8001ee2:	892a      	ldrh	r2, [r5, #8]
 8001ee4:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8001ee8:	ab07      	add	r3, sp, #28
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	21a3      	movs	r1, #163	; 0xa3
 8001eee:	2310      	movs	r3, #16
 8001ef0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001ef2:	f003 fe71 	bl	8005bd8 <HAL_I2C_Mem_Read>
				VarU->valorFloat =  floatBuff.value;
 8001ef6:	9a07      	ldr	r2, [sp, #28]
				if (VarU->ptrFloat != 0) {
 8001ef8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
				VarU->valorFloat =  floatBuff.value;
 8001efa:	61aa      	str	r2, [r5, #24]
				if (VarU->ptrFloat != 0) {
 8001efc:	b103      	cbz	r3, 8001f00 <EepromDownloadValores+0x13c>
					*VarU->ptrFloat = VarU->valorFloat;
 8001efe:	601a      	str	r2, [r3, #0]
				if(VarU->defaultValue>0 && (VarU->valorFloat == 0 || VarU->valorFloat > VarU->maxValue || VarU->valorFloat < VarU->minValue))
 8001f00:	4632      	mov	r2, r6
 8001f02:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8001f06:	463b      	mov	r3, r7
 8001f08:	f7fe fd76 	bl	80009f8 <__aeabi_dcmpgt>
 8001f0c:	2800      	cmp	r0, #0
 8001f0e:	d0e3      	beq.n	8001ed8 <EepromDownloadValores+0x114>
 8001f10:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8001f14:	4659      	mov	r1, fp
 8001f16:	4640      	mov	r0, r8
 8001f18:	f7ff f88a 	bl	8001030 <__aeabi_fcmpeq>
 8001f1c:	b988      	cbnz	r0, 8001f42 <EepromDownloadValores+0x17e>
 8001f1e:	4640      	mov	r0, r8
 8001f20:	f7fe fa82 	bl	8000428 <__aeabi_f2d>
 8001f24:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8001f28:	4680      	mov	r8, r0
 8001f2a:	4689      	mov	r9, r1
				if(VarU->defaultValue > 0 && (VarU->valorDouble == 0 || VarU->valorDouble > VarU->maxValue || VarU->valorDouble < VarU->minValue))
 8001f2c:	f7fe fd64 	bl	80009f8 <__aeabi_dcmpgt>
 8001f30:	b938      	cbnz	r0, 8001f42 <EepromDownloadValores+0x17e>
 8001f32:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 8001f36:	4640      	mov	r0, r8
 8001f38:	4649      	mov	r1, r9
 8001f3a:	f7fe fd3f 	bl	80009bc <__aeabi_dcmplt>
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	d0ca      	beq.n	8001ed8 <EepromDownloadValores+0x114>
					EepromSetVarFloating(eeprom, VarU);
 8001f42:	4629      	mov	r1, r5
 8001f44:	4620      	mov	r0, r4
 8001f46:	f7ff fe39 	bl	8001bbc <EepromSetVarFloating>
 8001f4a:	e7c5      	b.n	8001ed8 <EepromDownloadValores+0x114>
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, VarU->_addrEprom, I2C_MEMADD_SIZE_16BIT, doubleBuff.bytes, 8, 200);
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	21c8      	movs	r1, #200	; 0xc8
 8001f50:	892a      	ldrh	r2, [r5, #8]
 8001f52:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001f56:	ab08      	add	r3, sp, #32
 8001f58:	21a3      	movs	r1, #163	; 0xa3
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f5e:	2310      	movs	r3, #16
 8001f60:	f003 fe3a 	bl	8005bd8 <HAL_I2C_Mem_Read>
				VarU->valorDouble =  doubleBuff.value;
 8001f64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
				if (VarU->ptrDouble != 0) {
 8001f68:	6c2b      	ldr	r3, [r5, #64]	; 0x40
				VarU->valorDouble =  doubleBuff.value;
 8001f6a:	e9c5 0104 	strd	r0, r1, [r5, #16]
				if (VarU->ptrDouble != 0) {
 8001f6e:	b10b      	cbz	r3, 8001f74 <EepromDownloadValores+0x1b0>
					*VarU->ptrDouble = VarU->valorDouble;
 8001f70:	e9c3 0100 	strd	r0, r1, [r3]
				if(VarU->defaultValue > 0 && (VarU->valorDouble == 0 || VarU->valorDouble > VarU->maxValue || VarU->valorDouble < VarU->minValue))
 8001f74:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8001f78:	4632      	mov	r2, r6
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	f7fe fd3c 	bl	80009f8 <__aeabi_dcmpgt>
 8001f80:	2800      	cmp	r0, #0
 8001f82:	d0a9      	beq.n	8001ed8 <EepromDownloadValores+0x114>
 8001f84:	e9d5 8904 	ldrd	r8, r9, [r5, #16]
 8001f88:	4632      	mov	r2, r6
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	4640      	mov	r0, r8
 8001f8e:	4649      	mov	r1, r9
 8001f90:	f7fe fd0a 	bl	80009a8 <__aeabi_dcmpeq>
 8001f94:	2800      	cmp	r0, #0
 8001f96:	d1d4      	bne.n	8001f42 <EepromDownloadValores+0x17e>
 8001f98:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8001f9c:	4640      	mov	r0, r8
 8001f9e:	4649      	mov	r1, r9
 8001fa0:	e7c4      	b.n	8001f2c <EepromDownloadValores+0x168>

08001fa2 <OutputAddDigital>:
 *      Author: lucas
 */
#include "OutputDigital.h"

OUTPUT_ErrorCode OutputAddDigital(OutputDigital* Output,IndviduoOutput* _individ, uint16_t _pinoOUT,GPIO_TypeDef *_portaOUT,
		void (*callback)(),uint16_t limitOn,uint16_t limitOff){
 8001fa2:	b530      	push	{r4, r5, lr}
 8001fa4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001fa8:	f8bd 4014 	ldrh.w	r4, [sp, #20]

	// Caso algum ponteiro seja nulo, retorne código de erro correspondente.
	if (Output == NULL || _individ == NULL || _portaOUT == NULL ) {
 8001fac:	b108      	cbz	r0, 8001fb2 <OutputAddDigital+0x10>
 8001fae:	b101      	cbz	r1, 8001fb2 <OutputAddDigital+0x10>
 8001fb0:	b90b      	cbnz	r3, 8001fb6 <OutputAddDigital+0x14>
 8001fb2:	b672      	cpsid	i
void outputError_Handler(OUTPUT_ErrorCode erro)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <OutputAddDigital+0x12>
	if(limitOn && limitOff){
 8001fb6:	b115      	cbz	r5, 8001fbe <OutputAddDigital+0x1c>
 8001fb8:	b10c      	cbz	r4, 8001fbe <OutputAddDigital+0x1c>
 8001fba:	b672      	cpsid	i
	while (1)
 8001fbc:	e7fe      	b.n	8001fbc <OutputAddDigital+0x1a>
	_individ->GPIOx		= _portaOUT;	// porta a ser controlada.
 8001fbe:	604b      	str	r3, [r1, #4]
	_individ->timeOut 	= callback;		// callback caso extrapole qualquer um dos limites.
 8001fc0:	9b03      	ldr	r3, [sp, #12]
	_individ->GPIO_Pin	= _pinoOUT;		// pino a ser controlado.
 8001fc2:	800a      	strh	r2, [r1, #0]
	_individ->timeOut 	= callback;		// callback caso extrapole qualquer um dos limites.
 8001fc4:	614b      	str	r3, [r1, #20]
	_individ->limitOn 	= limitOn;		// se houver limite ligado.
 8001fc6:	81cd      	strh	r5, [r1, #14]
	_individ->limitOff 	= limitOff;		// se houver limite desligado.
 8001fc8:	820c      	strh	r4, [r1, #16]
	Output->_OutDigitalArr[Output->_DigitalCount] = _individ;
 8001fca:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8001fce:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	Output->_DigitalCount++;
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
}
 8001fd8:	2000      	movs	r0, #0
 8001fda:	bd30      	pop	{r4, r5, pc}

08001fdc <onDigital>:
void onDigital(IndviduoOutput* outPut) {
 8001fdc:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_SET);
 8001fde:	8801      	ldrh	r1, [r0, #0]
void onDigital(IndviduoOutput* outPut) {
 8001fe0:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_SET);
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	6840      	ldr	r0, [r0, #4]
 8001fe6:	f003 fabd 	bl	8005564 <HAL_GPIO_WritePin>
	outPut->_state = on;
 8001fea:	2301      	movs	r3, #1
 8001fec:	7223      	strb	r3, [r4, #8]
}
 8001fee:	bd10      	pop	{r4, pc}

08001ff0 <offDigital>:
void offDigital(IndviduoOutput* outPut) {
 8001ff0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_RESET);
 8001ff2:	8801      	ldrh	r1, [r0, #0]
void offDigital(IndviduoOutput* outPut) {
 8001ff4:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	6840      	ldr	r0, [r0, #4]
 8001ffa:	f003 fab3 	bl	8005564 <HAL_GPIO_WritePin>
	outPut->_state = off;
 8001ffe:	2300      	movs	r3, #0
 8002000:	7223      	strb	r3, [r4, #8]
}
 8002002:	bd10      	pop	{r4, pc}

08002004 <contadorOutput>:
void contadorOutput(OutputDigital* Output){
 8002004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 8002008:	2400      	movs	r4, #0
void contadorOutput(OutputDigital* Output){
 800200a:	4605      	mov	r5, r0
 800200c:	4626      	mov	r6, r4
 800200e:	f64f 77ff 	movw	r7, #65535	; 0xffff
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 8002012:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8002016:	fa5f f884 	uxtb.w	r8, r4
 800201a:	4543      	cmp	r3, r8
 800201c:	d80b      	bhi.n	8002036 <contadorOutput+0x32>
 800201e:	f04f 0a00 	mov.w	sl, #0
			Output->_OutPidArr[i]->_PWMstate = mantendo;
 8002022:	f04f 0b02 	mov.w	fp, #2
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 8002026:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800202a:	fa5f f38a 	uxtb.w	r3, sl
 800202e:	429a      	cmp	r2, r3
 8002030:	d825      	bhi.n	800207e <contadorOutput+0x7a>
}
 8002032:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(Output->_OutDigitalArr[i]->_state == on){
 8002036:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 800203a:	7a1a      	ldrb	r2, [r3, #8]
 800203c:	2a01      	cmp	r2, #1
 800203e:	d117      	bne.n	8002070 <contadorOutput+0x6c>
			(Output->_OutDigitalArr[i]->timeOn<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOn++:0;
 8002040:	895a      	ldrh	r2, [r3, #10]
			Output->_OutDigitalArr[i]->timeOff = 0;
 8002042:	819e      	strh	r6, [r3, #12]
			(Output->_OutDigitalArr[i]->timeOn<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOn++:0;
 8002044:	42ba      	cmp	r2, r7
 8002046:	d001      	beq.n	800204c <contadorOutput+0x48>
 8002048:	3201      	adds	r2, #1
 800204a:	815a      	strh	r2, [r3, #10]
		if(Output->_OutDigitalArr[i]->limitOn != 0){
 800204c:	89da      	ldrh	r2, [r3, #14]
 800204e:	b122      	cbz	r2, 800205a <contadorOutput+0x56>
			if(Output->_OutDigitalArr[i]->timeOn >= Output->_OutDigitalArr[i]->limitOn){
 8002050:	8959      	ldrh	r1, [r3, #10]
 8002052:	4291      	cmp	r1, r2
 8002054:	d301      	bcc.n	800205a <contadorOutput+0x56>
				Output->_OutDigitalArr[i]->timeOut();//chama callback de timeout.
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	4798      	blx	r3
		if(Output->_OutDigitalArr[i]->limitOff != 0){
 800205a:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 800205e:	8a1a      	ldrh	r2, [r3, #16]
 8002060:	b122      	cbz	r2, 800206c <contadorOutput+0x68>
			if(Output->_OutDigitalArr[i]->timeOff >= Output->_OutDigitalArr[i]->limitOff){
 8002062:	8999      	ldrh	r1, [r3, #12]
 8002064:	4291      	cmp	r1, r2
 8002066:	d301      	bcc.n	800206c <contadorOutput+0x68>
				Output->_OutDigitalArr[i]->timeOut();//chama callback de timeout.
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	4798      	blx	r3
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 800206c:	3401      	adds	r4, #1
 800206e:	e7d0      	b.n	8002012 <contadorOutput+0xe>
			(Output->_OutDigitalArr[i]->timeOff<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOff++:0;
 8002070:	899a      	ldrh	r2, [r3, #12]
			Output->_OutDigitalArr[i]->timeOn = 0;
 8002072:	815e      	strh	r6, [r3, #10]
			(Output->_OutDigitalArr[i]->timeOff<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOff++:0;
 8002074:	42ba      	cmp	r2, r7
 8002076:	bf1c      	itt	ne
 8002078:	3201      	addne	r2, #1
 800207a:	819a      	strhne	r2, [r3, #12]
 800207c:	e7e6      	b.n	800204c <contadorOutput+0x48>
		if(Output->_OutPidArr[i]->realtime >=  Output->_OutPidArr[i]->setPoint ){
 800207e:	3306      	adds	r3, #6
 8002080:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8002084:	e9d4 890a 	ldrd	r8, r9, [r4, #40]	; 0x28
 8002088:	e9d4 670c 	ldrd	r6, r7, [r4, #48]	; 0x30
 800208c:	4640      	mov	r0, r8
 800208e:	4632      	mov	r2, r6
 8002090:	463b      	mov	r3, r7
 8002092:	4649      	mov	r1, r9
 8002094:	f7fe fca6 	bl	80009e4 <__aeabi_dcmpge>
 8002098:	bb08      	cbnz	r0, 80020de <contadorOutput+0xda>
		}else if(Output->_OutPidArr[i]->realtime + Output->_OutPidArr[i]->histerese >  Output->_OutPidArr[i]->setPoint ){
 800209a:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
 800209c:	f7fe f9b2 	bl	8000404 <__aeabi_i2d>
 80020a0:	4642      	mov	r2, r8
 80020a2:	464b      	mov	r3, r9
 80020a4:	f7fe f862 	bl	800016c <__adddf3>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4630      	mov	r0, r6
 80020ae:	4639      	mov	r1, r7
 80020b0:	f7fe fc84 	bl	80009bc <__aeabi_dcmplt>
 80020b4:	b1c8      	cbz	r0, 80020ea <contadorOutput+0xe6>
			(Output->_OutPidArr[i]->timeOn<UINT16_MAX)?Output->_OutPidArr[i]->timeOn++:0;
 80020b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			Output->_OutPidArr[i]->_PWMstate = mantendo;
 80020bc:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
			(Output->_OutPidArr[i]->timeOn<UINT16_MAX)?Output->_OutPidArr[i]->timeOn++:0;
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d001      	beq.n	80020c8 <contadorOutput+0xc4>
 80020c4:	3301      	adds	r3, #1
 80020c6:	87e3      	strh	r3, [r4, #62]	; 0x3e
		if(Output->_OutPidArr[i]->limiteOn != 0){
 80020c8:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80020cc:	b123      	cbz	r3, 80020d8 <contadorOutput+0xd4>
			if(Output->_OutPidArr[i]->timeOn >= Output->_OutPidArr[i]->limiteOn){
 80020ce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d301      	bcc.n	80020d8 <contadorOutput+0xd4>
				Output->_OutPidArr[i]->timeOut();//chama callback de timeout
 80020d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020d6:	4798      	blx	r3
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 80020d8:	f10a 0a01 	add.w	sl, sl, #1
 80020dc:	e7a3      	b.n	8002026 <contadorOutput+0x22>
 80020de:	2300      	movs	r3, #0
			Output->_OutPidArr[i]->_PWMstate = buscando;
 80020e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			Output->_OutPidArr[i]->timeOn=0;
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e7ed      	b.n	80020c6 <contadorOutput+0xc2>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e7f8      	b.n	80020e0 <contadorOutput+0xdc>

080020ee <IndviduoPID_SetPWMValue>:
void IndviduoPID_SetPWMValue(IndviduoPID *pid, double pwmValue) {
 80020ee:	b5d0      	push	{r4, r6, r7, lr}
 80020f0:	b088      	sub	sp, #32
 80020f2:	4604      	mov	r4, r0
 80020f4:	461f      	mov	r7, r3
 80020f6:	4616      	mov	r6, r2
	TIM_OC_InitTypeDef sConfigOC = {0};
 80020f8:	2100      	movs	r1, #0
 80020fa:	2214      	movs	r2, #20
 80020fc:	a803      	add	r0, sp, #12
 80020fe:	f008 f8eb 	bl	800a2d8 <memset>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002102:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 8002104:	4639      	mov	r1, r7
 8002106:	4630      	mov	r0, r6
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002108:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 800210a:	f7fe fc7f 	bl	8000a0c <__aeabi_d2uiz>
	if (HAL_TIM_PWM_ConfigChannel(pid->TimHandle, &sConfigOC, pid->Channel) != HAL_OK) {
 800210e:	6862      	ldr	r2, [r4, #4]
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 8002110:	9002      	str	r0, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(pid->TimHandle, &sConfigOC, pid->Channel) != HAL_OK) {
 8002112:	a901      	add	r1, sp, #4
 8002114:	6820      	ldr	r0, [r4, #0]
 8002116:	f004 fe7d 	bl	8006e14 <HAL_TIM_PWM_ConfigChannel>
 800211a:	b108      	cbz	r0, 8002120 <IndviduoPID_SetPWMValue+0x32>
 800211c:	b672      	cpsid	i
	while (1)
 800211e:	e7fe      	b.n	800211e <IndviduoPID_SetPWMValue+0x30>
	if (HAL_TIM_PWM_Start(pid->TimHandle, pid->Channel) != HAL_OK) {
 8002120:	e9d4 0100 	ldrd	r0, r1, [r4]
 8002124:	f004 ffd0 	bl	80070c8 <HAL_TIM_PWM_Start>
 8002128:	b108      	cbz	r0, 800212e <IndviduoPID_SetPWMValue+0x40>
 800212a:	b672      	cpsid	i
	while (1)
 800212c:	e7fe      	b.n	800212c <IndviduoPID_SetPWMValue+0x3e>
}
 800212e:	b008      	add	sp, #32
 8002130:	bdd0      	pop	{r4, r6, r7, pc}

08002132 <OutputAddPID>:
		uint16_t limit_on,void (*callback)()){
 8002132:	b508      	push	{r3, lr}
	if (Output == NULL || _individ == NULL || htim == NULL ) {
 8002134:	b108      	cbz	r0, 800213a <OutputAddPID+0x8>
 8002136:	b101      	cbz	r1, 800213a <OutputAddPID+0x8>
 8002138:	b90a      	cbnz	r2, 800213e <OutputAddPID+0xc>
 800213a:	b672      	cpsid	i
	while (1)
 800213c:	e7fe      	b.n	800213c <OutputAddPID+0xa>
	_individ->Channel   = Channel;	// channel do timer.
 800213e:	e9c1 2300 	strd	r2, r3, [r1]
	_individ->kp	= Kp;
 8002142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002146:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_individ->ki	= Ki;
 800214a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800214e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_individ->kd	= Kd;
 8002152:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002156:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_individ->histerese	= histerese;// histerese dada em graus.
 800215a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800215e:	874b      	strh	r3, [r1, #58]	; 0x3a
	_individ->timeOut = callback;	// callback caso extrapole tempo de acionamento.
 8002160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002162:	644b      	str	r3, [r1, #68]	; 0x44
	Output->_OutPidArr[Output->_PidCount] = _individ;
 8002164:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002168:	1d9a      	adds	r2, r3, #6
	Output->_PidCount++;
 800216a:	3301      	adds	r3, #1
	Output->_OutPidArr[Output->_PidCount] = _individ;
 800216c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	Output->_PidCount++;
 8002170:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	IndviduoPID_SetPWMValue(_individ, 0);
 8002174:	2200      	movs	r2, #0
 8002176:	4608      	mov	r0, r1
 8002178:	2300      	movs	r3, #0
 800217a:	f7ff ffb8 	bl	80020ee <IndviduoPID_SetPWMValue>
}
 800217e:	2000      	movs	r0, #0
 8002180:	bd08      	pop	{r3, pc}

08002182 <IndviduoPID_SetPWMValueDirect>:
	volatile uint32_t *ccrAddress = &pid->TimHandle->Instance->CCR1 + (pid->Channel >> 2);
 8002182:	6803      	ldr	r3, [r0, #0]
 8002184:	6842      	ldr	r2, [r0, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0892      	lsrs	r2, r2, #2
 800218a:	3334      	adds	r3, #52	; 0x34
	*ccrAddress = pwmValue;
 800218c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002190:	4770      	bx	lr
	...

08002194 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <vApplicationGetIdleTaskMemory+0x10>)
 8002196:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <vApplicationGetIdleTaskMemory+0x14>)
 800219a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000290 	.word	0x20000290
 80021a8:	20000090 	.word	0x20000090

080021ac <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <vApplicationGetTimerTaskMemory+0x10>)
 80021ae:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <vApplicationGetTimerTaskMemory+0x14>)
 80021b2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80021b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b8:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80021ba:	4770      	bx	lr
 80021bc:	20000730 	.word	0x20000730
 80021c0:	20000330 	.word	0x20000330

080021c4 <timeoutAquecimento>:
		PrimitiveStates.Lastro.realtime = TempLastro-34;
		i=0;
	}
}

void timeoutAquecimento (void){
 80021c4:	b510      	push	{r4, lr}
	//verifica erro temperatura lastro
	if(PrimitiveStates.Lastro.realtime < PrimitiveStates.Lastro.setPoint-5)
 80021c6:	4c14      	ldr	r4, [pc, #80]	; (8002218 <timeoutAquecimento+0x54>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	e9d4 013c 	ldrd	r0, r1, [r4, #240]	; 0xf0
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <timeoutAquecimento+0x58>)
 80021d0:	f7fd ffca 	bl	8000168 <__aeabi_dsub>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
 80021dc:	f7fe fbee 	bl	80009bc <__aeabi_dcmplt>
 80021e0:	b128      	cbz	r0, 80021ee <timeoutAquecimento+0x2a>
		PrimitiveStates.Erro.bit.IdleLastro=1;
 80021e2:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
 80021e6:	f043 0308 	orr.w	r3, r3, #8
 80021ea:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e

	//verifica erro temperatura teto
	if(PrimitiveStates.Teto.realtime < PrimitiveStates.Teto.setPoint-5)
 80021ee:	2200      	movs	r2, #0
 80021f0:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <timeoutAquecimento+0x58>)
 80021f6:	f7fd ffb7 	bl	8000168 <__aeabi_dsub>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
 8002202:	f7fe fbdb 	bl	80009bc <__aeabi_dcmplt>
 8002206:	b128      	cbz	r0, 8002214 <timeoutAquecimento+0x50>
		PrimitiveStates.Erro.bit.IdleTeto=1;
 8002208:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
}
 8002214:	bd10      	pop	{r4, pc}
 8002216:	bf00      	nop
 8002218:	20000890 	.word	0x20000890
 800221c:	40140000 	.word	0x40140000

08002220 <timeoutDesligaLampada>:

void timeoutDesligaLampada(void){

	offDigital(&PrimitiveStates.Lampada);
 8002220:	4801      	ldr	r0, [pc, #4]	; (8002228 <timeoutDesligaLampada+0x8>)
 8002222:	f7ff bee5 	b.w	8001ff0 <offDigital>
 8002226:	bf00      	nop
 8002228:	20000890 	.word	0x20000890

0800222c <CBTimer10ms>:
/* CBTimer10ms function */
void CBTimer10ms(void const * argument)
{
	/* USER CODE BEGIN CBTimer10ms */

	bluetooth10ms(&bluetooth);
 800222c:	4801      	ldr	r0, [pc, #4]	; (8002234 <CBTimer10ms+0x8>)
 800222e:	f7ff bb2d 	b.w	800188c <bluetooth10ms>
 8002232:	bf00      	nop
 8002234:	20000ef4 	.word	0x20000ef4

08002238 <SystemClock_Config>:
{
 8002238:	b530      	push	{r4, r5, lr}
 800223a:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800223c:	2220      	movs	r2, #32
 800223e:	2100      	movs	r1, #0
 8002240:	a80b      	add	r0, sp, #44	; 0x2c
 8002242:	f008 f849 	bl	800a2d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002246:	2214      	movs	r2, #20
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002248:	2510      	movs	r5, #16
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800224a:	2100      	movs	r1, #0
 800224c:	eb0d 0002 	add.w	r0, sp, r2
 8002250:	f008 f842 	bl	800a2d8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002254:	462a      	mov	r2, r5
 8002256:	2100      	movs	r1, #0
 8002258:	a801      	add	r0, sp, #4
 800225a:	f008 f83d 	bl	800a2d8 <memset>
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800225e:	2401      	movs	r4, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002260:	230a      	movs	r3, #10
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002262:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002266:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002268:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 800226a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800226e:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002270:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002272:	9511      	str	r5, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8002274:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002276:	f003 fea3 	bl	8005fc0 <HAL_RCC_OscConfig>
 800227a:	b108      	cbz	r0, 8002280 <SystemClock_Config+0x48>
 800227c:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800227e:	e7fe      	b.n	800227e <SystemClock_Config+0x46>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002280:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002282:	e9cd 3505 	strd	r3, r5, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002286:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800228a:	9007      	str	r0, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800228c:	e9cd 3008 	strd	r3, r0, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002290:	4621      	mov	r1, r4
 8002292:	a805      	add	r0, sp, #20
 8002294:	f004 f856 	bl	8006344 <HAL_RCC_ClockConfig>
 8002298:	b108      	cbz	r0, 800229e <SystemClock_Config+0x66>
 800229a:	b672      	cpsid	i
	while (1)
 800229c:	e7fe      	b.n	800229c <SystemClock_Config+0x64>
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800229e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a2:	2203      	movs	r2, #3
 80022a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80022a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ac:	a801      	add	r0, sp, #4
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80022ae:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022b0:	f004 f922 	bl	80064f8 <HAL_RCCEx_PeriphCLKConfig>
 80022b4:	b108      	cbz	r0, 80022ba <SystemClock_Config+0x82>
 80022b6:	b672      	cpsid	i
	while (1)
 80022b8:	e7fe      	b.n	80022b8 <SystemClock_Config+0x80>
}
 80022ba:	b015      	add	sp, #84	; 0x54
 80022bc:	bd30      	pop	{r4, r5, pc}
	...

080022c0 <main>:
{
 80022c0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	2710      	movs	r7, #16
{
 80022c6:	b0c7      	sub	sp, #284	; 0x11c
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80022c8:	4dab      	ldr	r5, [pc, #684]	; (8002578 <main+0x2b8>)
	HAL_Init();
 80022ca:	f002 fba7 	bl	8004a1c <HAL_Init>
	SystemClock_Config();
 80022ce:	f7ff ffb3 	bl	8002238 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d2:	463a      	mov	r2, r7
 80022d4:	2100      	movs	r1, #0
 80022d6:	a83f      	add	r0, sp, #252	; 0xfc
 80022d8:	f007 fffe 	bl	800a2d8 <memset>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80022dc:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 80022de:	2201      	movs	r2, #1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80022e0:	f043 0304 	orr.w	r3, r3, #4
 80022e4:	61ab      	str	r3, [r5, #24]
 80022e6:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 80022e8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80022f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 80022f6:	48a1      	ldr	r0, [pc, #644]	; (800257c <main+0x2bc>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022f8:	f043 0308 	orr.w	r3, r3, #8
 80022fc:	61ab      	str	r3, [r5, #24]
 80022fe:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2400      	movs	r4, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	930c      	str	r3, [sp, #48]	; 0x30
 8002308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 800230a:	f003 f92b 	bl	8005564 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002314:	489a      	ldr	r0, [pc, #616]	; (8002580 <main+0x2c0>)
 8002316:	f003 f925 	bl	8005564 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin
 800231a:	2200      	movs	r2, #0
 800231c:	21f8      	movs	r1, #248	; 0xf8
 800231e:	4897      	ldr	r0, [pc, #604]	; (800257c <main+0x2bc>)
 8002320:	f003 f920 	bl	8005564 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002324:	f04f 0801 	mov.w	r8, #1
 8002328:	f246 0378 	movw	r3, #24696	; 0x6078
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	f04f 0902 	mov.w	r9, #2
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002330:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
	GPIO_InitStruct.Pin = BOTAO_BLE_Pin;
 8002334:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002338:	4890      	ldr	r0, [pc, #576]	; (800257c <main+0x2bc>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800233a:	f8df b248 	ldr.w	fp, [pc, #584]	; 8002584 <main+0x2c4>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	a93f      	add	r1, sp, #252	; 0xfc
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002340:	e9cd 383f 	strd	r3, r8, [sp, #252]	; 0xfc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	e9cd 4941 	strd	r4, r9, [sp, #260]	; 0x104
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002348:	f002 ffbe 	bl	80052c8 <HAL_GPIO_Init>
	HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 800234c:	488b      	ldr	r0, [pc, #556]	; (800257c <main+0x2bc>)
 800234e:	a93f      	add	r1, sp, #252	; 0xfc
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	9441      	str	r4, [sp, #260]	; 0x104
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002352:	e9cd ab3f 	strd	sl, fp, [sp, #252]	; 0xfc
	HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002356:	f002 ffb7 	bl	80052c8 <HAL_GPIO_Init>
	HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 800235a:	4889      	ldr	r0, [pc, #548]	; (8002580 <main+0x2c0>)
 800235c:	a93f      	add	r1, sp, #252	; 0xfc
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	9441      	str	r4, [sp, #260]	; 0x104
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002360:	e9cd 6b3f 	strd	r6, fp, [sp, #252]	; 0xfc
	HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 8002364:	f002 ffb0 	bl	80052c8 <HAL_GPIO_Init>
	HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 8002368:	4885      	ldr	r0, [pc, #532]	; (8002580 <main+0x2c0>)
 800236a:	a93f      	add	r1, sp, #252	; 0xfc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	e9cd 4941 	strd	r4, r9, [sp, #260]	; 0x104
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002370:	e9cd a83f 	strd	sl, r8, [sp, #252]	; 0xfc
	HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 8002374:	f002 ffa8 	bl	80052c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = EEPROM_EN_Pin;
 8002378:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 800237a:	4880      	ldr	r0, [pc, #512]	; (800257c <main+0x2bc>)
 800237c:	a93f      	add	r1, sp, #252	; 0xfc
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237e:	e9cd 383f 	strd	r3, r8, [sp, #252]	; 0xfc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	e9cd 9941 	strd	r9, r9, [sp, #260]	; 0x104
	HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 8002386:	f002 ff9f 	bl	80052c8 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 800238a:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800238c:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 800238e:	ea43 0308 	orr.w	r3, r3, r8
 8002392:	616b      	str	r3, [r5, #20]
 8002394:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002396:	2105      	movs	r1, #5
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002398:	ea03 0308 	and.w	r3, r3, r8
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800239c:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 800239e:	930a      	str	r3, [sp, #40]	; 0x28
 80023a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80023a2:	f002 fdab 	bl	8004efc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80023a6:	200b      	movs	r0, #11
 80023a8:	f002 fdd8 	bl	8004f5c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80023ac:	4622      	mov	r2, r4
 80023ae:	2105      	movs	r1, #5
 80023b0:	200d      	movs	r0, #13
 80023b2:	f002 fda3 	bl	8004efc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80023b6:	200d      	movs	r0, #13
 80023b8:	f002 fdd0 	bl	8004f5c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80023bc:	4622      	mov	r2, r4
 80023be:	2105      	movs	r1, #5
 80023c0:	200f      	movs	r0, #15
 80023c2:	f002 fd9b 	bl	8004efc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80023c6:	200f      	movs	r0, #15
 80023c8:	f002 fdc8 	bl	8004f5c <HAL_NVIC_EnableIRQ>
	hadc1.Instance = ADC1;
 80023cc:	4d6e      	ldr	r5, [pc, #440]	; (8002588 <main+0x2c8>)
 80023ce:	4b6f      	ldr	r3, [pc, #444]	; (800258c <main+0x2cc>)
	ADC_ChannelConfTypeDef sConfig = {0};
 80023d0:	e9cd 443f 	strd	r4, r4, [sp, #252]	; 0xfc
	hadc1.Instance = ADC1;
 80023d4:	602b      	str	r3, [r5, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80023d6:	f44f 7380 	mov.w	r3, #256	; 0x100
	ADC_ChannelConfTypeDef sConfig = {0};
 80023da:	9441      	str	r4, [sp, #260]	; 0x104
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80023dc:	60ab      	str	r3, [r5, #8]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023de:	752c      	strb	r4, [r5, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023e0:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023e4:	606c      	str	r4, [r5, #4]
	hadc1.Init.NbrOfConversion = 3;
 80023e6:	2403      	movs	r4, #3
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023e8:	4628      	mov	r0, r5
	hadc1.Init.ContinuousConvMode = ENABLE;
 80023ea:	f885 800c 	strb.w	r8, [r5, #12]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023ee:	61eb      	str	r3, [r5, #28]
	hadc1.Init.NbrOfConversion = 3;
 80023f0:	612c      	str	r4, [r5, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023f2:	f002 fcf3 	bl	8004ddc <HAL_ADC_Init>
 80023f6:	b108      	cbz	r0, 80023fc <main+0x13c>
 80023f8:	b672      	cpsid	i
	while (1)
 80023fa:	e7fe      	b.n	80023fa <main+0x13a>
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80023fc:	2306      	movs	r3, #6
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80023fe:	e9cd 083f 	strd	r0, r8, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002402:	a93f      	add	r1, sp, #252	; 0xfc
 8002404:	4628      	mov	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002406:	9341      	str	r3, [sp, #260]	; 0x104
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002408:	f002 fb7a 	bl	8004b00 <HAL_ADC_ConfigChannel>
 800240c:	b108      	cbz	r0, 8002412 <main+0x152>
 800240e:	b672      	cpsid	i
	while (1)
 8002410:	e7fe      	b.n	8002410 <main+0x150>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002412:	4628      	mov	r0, r5
 8002414:	a93f      	add	r1, sp, #252	; 0xfc
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002416:	e9cd 893f 	strd	r8, r9, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800241a:	f002 fb71 	bl	8004b00 <HAL_ADC_ConfigChannel>
 800241e:	b108      	cbz	r0, 8002424 <main+0x164>
 8002420:	b672      	cpsid	i
	while (1)
 8002422:	e7fe      	b.n	8002422 <main+0x162>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002424:	4628      	mov	r0, r5
 8002426:	a93f      	add	r1, sp, #252	; 0xfc
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8002428:	e9cd 743f 	strd	r7, r4, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800242c:	f002 fb68 	bl	8004b00 <HAL_ADC_ConfigChannel>
 8002430:	4603      	mov	r3, r0
 8002432:	b108      	cbz	r0, 8002438 <main+0x178>
 8002434:	b672      	cpsid	i
	while (1)
 8002436:	e7fe      	b.n	8002436 <main+0x176>
	hi2c1.Instance = I2C1;
 8002438:	4855      	ldr	r0, [pc, #340]	; (8002590 <main+0x2d0>)
	hi2c1.Init.ClockSpeed = 100000;
 800243a:	f8df c158 	ldr.w	ip, [pc, #344]	; 8002594 <main+0x2d4>
 800243e:	4a56      	ldr	r2, [pc, #344]	; (8002598 <main+0x2d8>)
	hi2c1.Init.OwnAddress1 = 0;
 8002440:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hi2c1.Init.ClockSpeed = 100000;
 8002444:	e9c0 c200 	strd	ip, r2, [r0]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002448:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800244c:	e9c0 3306 	strd	r3, r3, [r0, #24]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002450:	e9c0 2304 	strd	r2, r3, [r0, #16]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002454:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002456:	f003 fa87 	bl	8005968 <HAL_I2C_Init>
 800245a:	4605      	mov	r5, r0
 800245c:	b108      	cbz	r0, 8002462 <main+0x1a2>
 800245e:	b672      	cpsid	i
	while (1)
 8002460:	e7fe      	b.n	8002460 <main+0x1a0>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002462:	463a      	mov	r2, r7
 8002464:	4601      	mov	r1, r0
 8002466:	a838      	add	r0, sp, #224	; 0xe0
 8002468:	f007 ff36 	bl	800a2d8 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 800246c:	221c      	movs	r2, #28
 800246e:	4629      	mov	r1, r5
 8002470:	a83f      	add	r0, sp, #252	; 0xfc
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002472:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002476:	f007 ff2f 	bl	800a2d8 <memset>
	htim3.Init.Prescaler = 4000-1;
 800247a:	f640 739f 	movw	r3, #3999	; 0xf9f
	htim3.Instance = TIM3;
 800247e:	4c47      	ldr	r4, [pc, #284]	; (800259c <main+0x2dc>)
	htim3.Init.Prescaler = 4000-1;
 8002480:	4f47      	ldr	r7, [pc, #284]	; (80025a0 <main+0x2e0>)
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002482:	4620      	mov	r0, r4
	htim3.Init.Prescaler = 4000-1;
 8002484:	e9c4 7300 	strd	r7, r3, [r4]
	htim3.Init.Period = 100-1;
 8002488:	2363      	movs	r3, #99	; 0x63
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248a:	60a5      	str	r5, [r4, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248c:	e9c4 3503 	strd	r3, r5, [r4, #12]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002490:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002492:	f004 fc3b 	bl	8006d0c <HAL_TIM_Base_Init>
 8002496:	b108      	cbz	r0, 800249c <main+0x1dc>
 8002498:	b672      	cpsid	i
	while (1)
 800249a:	e7fe      	b.n	800249a <main+0x1da>
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800249c:	4620      	mov	r0, r4
 800249e:	a938      	add	r1, sp, #224	; 0xe0
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a0:	9638      	str	r6, [sp, #224]	; 0xe0
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024a2:	f004 fd1a 	bl	8006eda <HAL_TIM_ConfigClockSource>
 80024a6:	b108      	cbz	r0, 80024ac <main+0x1ec>
 80024a8:	b672      	cpsid	i
	while (1)
 80024aa:	e7fe      	b.n	80024aa <main+0x1ea>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024ac:	4620      	mov	r0, r4
 80024ae:	f004 fc59 	bl	8006d64 <HAL_TIM_PWM_Init>
 80024b2:	b108      	cbz	r0, 80024b8 <main+0x1f8>
 80024b4:	b672      	cpsid	i
	while (1)
 80024b6:	e7fe      	b.n	80024b6 <main+0x1f6>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b8:	e9cd 0031 	strd	r0, r0, [sp, #196]	; 0xc4
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024bc:	a931      	add	r1, sp, #196	; 0xc4
 80024be:	4620      	mov	r0, r4
 80024c0:	f004 fe40 	bl	8007144 <HAL_TIMEx_MasterConfigSynchronization>
 80024c4:	4602      	mov	r2, r0
 80024c6:	b108      	cbz	r0, 80024cc <main+0x20c>
 80024c8:	b672      	cpsid	i
	while (1)
 80024ca:	e7fe      	b.n	80024ca <main+0x20a>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024cc:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = 0;
 80024ce:	e9cd 303f 	strd	r3, r0, [sp, #252]	; 0xfc
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80024d2:	2304      	movs	r3, #4
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024d4:	9041      	str	r0, [sp, #260]	; 0x104
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024d6:	a93f      	add	r1, sp, #252	; 0xfc
 80024d8:	4620      	mov	r0, r4
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80024da:	9343      	str	r3, [sp, #268]	; 0x10c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024dc:	f004 fc9a 	bl	8006e14 <HAL_TIM_PWM_ConfigChannel>
 80024e0:	b108      	cbz	r0, 80024e6 <main+0x226>
 80024e2:	b672      	cpsid	i
	while (1)
 80024e4:	e7fe      	b.n	80024e4 <main+0x224>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024e6:	2204      	movs	r2, #4
 80024e8:	482c      	ldr	r0, [pc, #176]	; (800259c <main+0x2dc>)
 80024ea:	a93f      	add	r1, sp, #252	; 0xfc
 80024ec:	f004 fc92 	bl	8006e14 <HAL_TIM_PWM_ConfigChannel>
 80024f0:	b108      	cbz	r0, 80024f6 <main+0x236>
 80024f2:	b672      	cpsid	i
	while (1)
 80024f4:	e7fe      	b.n	80024f4 <main+0x234>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024f6:	2208      	movs	r2, #8
 80024f8:	4828      	ldr	r0, [pc, #160]	; (800259c <main+0x2dc>)
 80024fa:	a93f      	add	r1, sp, #252	; 0xfc
 80024fc:	f004 fc8a 	bl	8006e14 <HAL_TIM_PWM_ConfigChannel>
 8002500:	b108      	cbz	r0, 8002506 <main+0x246>
 8002502:	b672      	cpsid	i
	while (1)
 8002504:	e7fe      	b.n	8002504 <main+0x244>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002506:	220c      	movs	r2, #12
 8002508:	4824      	ldr	r0, [pc, #144]	; (800259c <main+0x2dc>)
 800250a:	a93f      	add	r1, sp, #252	; 0xfc
 800250c:	f004 fc82 	bl	8006e14 <HAL_TIM_PWM_ConfigChannel>
 8002510:	4605      	mov	r5, r0
 8002512:	b108      	cbz	r0, 8002518 <main+0x258>
 8002514:	b672      	cpsid	i
	while (1)
 8002516:	e7fe      	b.n	8002516 <main+0x256>
	HAL_TIM_MspPostInit(&htim3);
 8002518:	4820      	ldr	r0, [pc, #128]	; (800259c <main+0x2dc>)
 800251a:	f000 fe03 	bl	8003124 <HAL_TIM_MspPostInit>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251e:	2210      	movs	r2, #16
 8002520:	4629      	mov	r1, r5
 8002522:	a838      	add	r0, sp, #224	; 0xe0
 8002524:	f007 fed8 	bl	800a2d8 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002528:	221c      	movs	r2, #28
 800252a:	4629      	mov	r1, r5
 800252c:	a83f      	add	r0, sp, #252	; 0xfc
	htim2.Init.Prescaler = 165-1;
 800252e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002532:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002536:	f007 fecf 	bl	800a2d8 <memset>
	htim2.Init.Prescaler = 165-1;
 800253a:	23a4      	movs	r3, #164	; 0xa4
	htim2.Instance = TIM2;
 800253c:	4c19      	ldr	r4, [pc, #100]	; (80025a4 <main+0x2e4>)
	htim2.Init.Prescaler = 165-1;
 800253e:	e9c4 6300 	strd	r6, r3, [r4]
	htim2.Init.Period = 100-1;
 8002542:	2363      	movs	r3, #99	; 0x63
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002544:	4620      	mov	r0, r4
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002546:	e9c4 3503 	strd	r3, r5, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254a:	60a5      	str	r5, [r4, #8]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254c:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800254e:	f004 fbdd 	bl	8006d0c <HAL_TIM_Base_Init>
 8002552:	b108      	cbz	r0, 8002558 <main+0x298>
 8002554:	b672      	cpsid	i
	while (1)
 8002556:	e7fe      	b.n	8002556 <main+0x296>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800255c:	4620      	mov	r0, r4
 800255e:	a938      	add	r1, sp, #224	; 0xe0
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002560:	9338      	str	r3, [sp, #224]	; 0xe0
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002562:	f004 fcba 	bl	8006eda <HAL_TIM_ConfigClockSource>
 8002566:	b108      	cbz	r0, 800256c <main+0x2ac>
 8002568:	b672      	cpsid	i
	while (1)
 800256a:	e7fe      	b.n	800256a <main+0x2aa>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800256c:	4620      	mov	r0, r4
 800256e:	f004 fbf9 	bl	8006d64 <HAL_TIM_PWM_Init>
 8002572:	b1c8      	cbz	r0, 80025a8 <main+0x2e8>
 8002574:	b672      	cpsid	i
	while (1)
 8002576:	e7fe      	b.n	8002576 <main+0x2b6>
 8002578:	40021000 	.word	0x40021000
 800257c:	40010c00 	.word	0x40010c00
 8002580:	40010800 	.word	0x40010800
 8002584:	10110000 	.word	0x10110000
 8002588:	20000fd8 	.word	0x20000fd8
 800258c:	40012400 	.word	0x40012400
 8002590:	200010d4 	.word	0x200010d4
 8002594:	40005400 	.word	0x40005400
 8002598:	000186a0 	.word	0x000186a0
 800259c:	20001184 	.word	0x20001184
 80025a0:	40000400 	.word	0x40000400
 80025a4:	2000113c 	.word	0x2000113c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a8:	e9cd 0031 	strd	r0, r0, [sp, #196]	; 0xc4
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025ac:	a931      	add	r1, sp, #196	; 0xc4
 80025ae:	4620      	mov	r0, r4
 80025b0:	f004 fdc8 	bl	8007144 <HAL_TIMEx_MasterConfigSynchronization>
 80025b4:	b108      	cbz	r0, 80025ba <main+0x2fa>
 80025b6:	b672      	cpsid	i
	while (1)
 80025b8:	e7fe      	b.n	80025b8 <main+0x2f8>
	sConfigOC.Pulse = 50;
 80025ba:	2560      	movs	r5, #96	; 0x60
 80025bc:	2332      	movs	r3, #50	; 0x32
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025be:	9041      	str	r0, [sp, #260]	; 0x104
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c0:	9043      	str	r0, [sp, #268]	; 0x10c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025c2:	220c      	movs	r2, #12
 80025c4:	4620      	mov	r0, r4
 80025c6:	a93f      	add	r1, sp, #252	; 0xfc
	sConfigOC.Pulse = 50;
 80025c8:	e9cd 533f 	strd	r5, r3, [sp, #252]	; 0xfc
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025cc:	f004 fc22 	bl	8006e14 <HAL_TIM_PWM_ConfigChannel>
 80025d0:	4605      	mov	r5, r0
 80025d2:	b108      	cbz	r0, 80025d8 <main+0x318>
 80025d4:	b672      	cpsid	i
	while (1)
 80025d6:	e7fe      	b.n	80025d6 <main+0x316>
	HAL_TIM_MspPostInit(&htim2);
 80025d8:	4620      	mov	r0, r4
 80025da:	f000 fda3 	bl	8003124 <HAL_TIM_MspPostInit>
	huart1.Init.BaudRate = 9600;
 80025de:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	huart1.Instance = USART1;
 80025e2:	48b7      	ldr	r0, [pc, #732]	; (80028c0 <main+0x600>)
	huart1.Init.BaudRate = 9600;
 80025e4:	4cb7      	ldr	r4, [pc, #732]	; (80028c4 <main+0x604>)
	huart1.Init.StopBits = UART_STOPBITS_1;
 80025e6:	e9c0 5502 	strd	r5, r5, [r0, #8]
	huart1.Init.BaudRate = 9600;
 80025ea:	e9c0 4300 	strd	r4, r3, [r0]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80025ee:	240c      	movs	r4, #12
	huart1.Init.Parity = UART_PARITY_NONE;
 80025f0:	6105      	str	r5, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025f2:	e9c0 4505 	strd	r4, r5, [r0, #20]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f6:	61c5      	str	r5, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80025f8:	f004 fe72 	bl	80072e0 <HAL_UART_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	b108      	cbz	r0, 8002604 <main+0x344>
 8002600:	b672      	cpsid	i
	while (1)
 8002602:	e7fe      	b.n	8002602 <main+0x342>
	huart3.Init.BaudRate = 115200;
 8002604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart3.Instance = USART3;
 8002608:	48af      	ldr	r0, [pc, #700]	; (80028c8 <main+0x608>)
	huart3.Init.BaudRate = 115200;
 800260a:	49b0      	ldr	r1, [pc, #704]	; (80028cc <main+0x60c>)
	huart3.Init.StopBits = UART_STOPBITS_1;
 800260c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart3.Init.BaudRate = 115200;
 8002610:	e9c0 1200 	strd	r1, r2, [r0]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002614:	e9c0 3404 	strd	r3, r4, [r0, #16]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002618:	e9c0 3306 	strd	r3, r3, [r0, #24]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800261c:	f004 fe60 	bl	80072e0 <HAL_UART_Init>
 8002620:	b108      	cbz	r0, 8002626 <main+0x366>
 8002622:	b672      	cpsid	i
	while (1)
 8002624:	e7fe      	b.n	8002624 <main+0x364>
	RTC_TimeTypeDef sTime = {0};
 8002626:	2300      	movs	r3, #0
 8002628:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
 800262c:	f88d 30e2 	strb.w	r3, [sp, #226]	; 0xe2
	RTC_DateTypeDef DateToUpdate = {0};
 8002630:	933f      	str	r3, [sp, #252]	; 0xfc
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295
	hrtc.Instance = RTC;
 8002636:	4ca6      	ldr	r4, [pc, #664]	; (80028d0 <main+0x610>)
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002638:	4aa6      	ldr	r2, [pc, #664]	; (80028d4 <main+0x614>)
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800263a:	4620      	mov	r0, r4
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800263c:	e9c4 2300 	strd	r2, r3, [r4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002644:	60a3      	str	r3, [r4, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002646:	f004 f99b 	bl	8006980 <HAL_RTC_Init>
 800264a:	b108      	cbz	r0, 8002650 <main+0x390>
 800264c:	b672      	cpsid	i
	while (1)
 800264e:	e7fe      	b.n	800264e <main+0x38e>
	sTime.Hours = 0x0;
 8002650:	f8ad 00e0 	strh.w	r0, [sp, #224]	; 0xe0
	sTime.Seconds = 0x0;
 8002654:	f88d 00e2 	strb.w	r0, [sp, #226]	; 0xe2
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002658:	2201      	movs	r2, #1
 800265a:	4620      	mov	r0, r4
 800265c:	a938      	add	r1, sp, #224	; 0xe0
 800265e:	f004 f8cc 	bl	80067fa <HAL_RTC_SetTime>
 8002662:	b108      	cbz	r0, 8002668 <main+0x3a8>
 8002664:	b672      	cpsid	i
	while (1)
 8002666:	e7fe      	b.n	8002666 <main+0x3a6>
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002668:	4b9b      	ldr	r3, [pc, #620]	; (80028d8 <main+0x618>)
	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800266a:	4620      	mov	r0, r4
 800266c:	2201      	movs	r2, #1
 800266e:	a93f      	add	r1, sp, #252	; 0xfc
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002670:	933f      	str	r3, [sp, #252]	; 0xfc
	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002672:	f004 f913 	bl	800689c <HAL_RTC_SetDate>
 8002676:	4604      	mov	r4, r0
 8002678:	b108      	cbz	r0, 800267e <main+0x3be>
 800267a:	b672      	cpsid	i
	while (1)
 800267c:	e7fe      	b.n	800267c <main+0x3bc>
	HAL_Delay(1000);
 800267e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	OutputAddPID(&outPuts,&PrimitiveStates.Teto		,&htim3	,TIM_CHANNEL_4	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 8002682:	f20f 292c 	addw	r9, pc, #556	; 0x22c
 8002686:	e9d9 8900 	ldrd	r8, r9, [r9]
 800268a:	a78b      	add	r7, pc, #556	; (adr r7, 80028b8 <main+0x5f8>)
 800268c:	e9d7 6700 	ldrd	r6, r7, [r7]
	HAL_Delay(1000);
 8002690:	f002 f9e8 	bl	8004a64 <HAL_Delay>
	HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 3	);// ADC_DMA
 8002694:	2203      	movs	r2, #3
 8002696:	4991      	ldr	r1, [pc, #580]	; (80028dc <main+0x61c>)
 8002698:	4891      	ldr	r0, [pc, #580]	; (80028e0 <main+0x620>)
 800269a:	f002 faeb 	bl	8004c74 <HAL_ADC_Start_DMA>
	OutputAddDigital(&outPuts,&PrimitiveStates.Lampada		,RELE_1_Pin	,RELE_1_GPIO_Port	,timeoutDesligaLampada	,TIME_LAMPADA	,0);
 800269e:	232d      	movs	r3, #45	; 0x2d
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	4b90      	ldr	r3, [pc, #576]	; (80028e4 <main+0x624>)
 80026a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026a8:	498f      	ldr	r1, [pc, #572]	; (80028e8 <main+0x628>)
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	488f      	ldr	r0, [pc, #572]	; (80028ec <main+0x62c>)
 80026ae:	4b90      	ldr	r3, [pc, #576]	; (80028f0 <main+0x630>)
 80026b0:	9402      	str	r4, [sp, #8]
 80026b2:	f7ff fc76 	bl	8001fa2 <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.Cooler		,RELE_2_Pin	,RELE_2_GPIO_Port	,0	,0	,0);
 80026b6:	2208      	movs	r2, #8
 80026b8:	4b8e      	ldr	r3, [pc, #568]	; (80028f4 <main+0x634>)
 80026ba:	498f      	ldr	r1, [pc, #572]	; (80028f8 <main+0x638>)
 80026bc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80026c0:	488a      	ldr	r0, [pc, #552]	; (80028ec <main+0x62c>)
 80026c2:	9400      	str	r4, [sp, #0]
 80026c4:	f7ff fc6d 	bl	8001fa2 <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.LedLastro	,RELE_3_Pin	,RELE_3_GPIO_Port	,0	,0	,0);
 80026c8:	2210      	movs	r2, #16
 80026ca:	4b8a      	ldr	r3, [pc, #552]	; (80028f4 <main+0x634>)
 80026cc:	498b      	ldr	r1, [pc, #556]	; (80028fc <main+0x63c>)
 80026ce:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80026d2:	4886      	ldr	r0, [pc, #536]	; (80028ec <main+0x62c>)
 80026d4:	9400      	str	r4, [sp, #0]
 80026d6:	f7ff fc64 	bl	8001fa2 <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.LedTeto		,RELE_4_Pin	,RELE_4_GPIO_Port	,0	,0	,0);
 80026da:	2220      	movs	r2, #32
 80026dc:	4b85      	ldr	r3, [pc, #532]	; (80028f4 <main+0x634>)
 80026de:	4988      	ldr	r1, [pc, #544]	; (8002900 <main+0x640>)
 80026e0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80026e4:	4881      	ldr	r0, [pc, #516]	; (80028ec <main+0x62c>)
 80026e6:	9400      	str	r4, [sp, #0]
 80026e8:	f7ff fc5b 	bl	8001fa2 <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.LedVerde		,RELE_5_Pin	,RELE_5_GPIO_Port	,0	,0	,0);
 80026ec:	2240      	movs	r2, #64	; 0x40
 80026ee:	4b81      	ldr	r3, [pc, #516]	; (80028f4 <main+0x634>)
 80026f0:	4984      	ldr	r1, [pc, #528]	; (8002904 <main+0x644>)
 80026f2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80026f6:	487d      	ldr	r0, [pc, #500]	; (80028ec <main+0x62c>)
 80026f8:	9400      	str	r4, [sp, #0]
 80026fa:	f7ff fc52 	bl	8001fa2 <OutputAddDigital>
	OutputAddPID(&outPuts,&PrimitiveStates.Teto		,&htim3	,TIM_CHANNEL_4	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 80026fe:	2503      	movs	r5, #3
 8002700:	f44f 7a16 	mov.w	sl, #600	; 0x258
 8002704:	2200      	movs	r2, #0
 8002706:	f8df b200 	ldr.w	fp, [pc, #512]	; 8002908 <main+0x648>
 800270a:	4b80      	ldr	r3, [pc, #512]	; (800290c <main+0x64c>)
 800270c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002710:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002714:	e9cd 2300 	strd	r2, r3, [sp]
 8002718:	e9cd 5a06 	strd	r5, sl, [sp, #24]
 800271c:	230c      	movs	r3, #12
 800271e:	4a7c      	ldr	r2, [pc, #496]	; (8002910 <main+0x650>)
 8002720:	497c      	ldr	r1, [pc, #496]	; (8002914 <main+0x654>)
 8002722:	4872      	ldr	r0, [pc, #456]	; (80028ec <main+0x62c>)
 8002724:	f8cd b020 	str.w	fp, [sp, #32]
 8002728:	f7ff fd03 	bl	8002132 <OutputAddPID>
	OutputAddPID(&outPuts,&PrimitiveStates.Lastro	,&htim3	,TIM_CHANNEL_3	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 800272c:	2200      	movs	r2, #0
 800272e:	4b77      	ldr	r3, [pc, #476]	; (800290c <main+0x64c>)
 8002730:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002734:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002738:	e9cd 2300 	strd	r2, r3, [sp]
 800273c:	4976      	ldr	r1, [pc, #472]	; (8002918 <main+0x658>)
 800273e:	2308      	movs	r3, #8
 8002740:	4a73      	ldr	r2, [pc, #460]	; (8002910 <main+0x650>)
 8002742:	9506      	str	r5, [sp, #24]
 8002744:	e9cd ab07 	strd	sl, fp, [sp, #28]
 8002748:	4868      	ldr	r0, [pc, #416]	; (80028ec <main+0x62c>)
 800274a:	f7ff fcf2 	bl	8002132 <OutputAddPID>
	BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 800274e:	2101      	movs	r1, #1
 8002750:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(BinSemUartTx);
 8002752:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8002756:	f005 fa6f 	bl	8007c38 <osSemaphoreCreate>
 800275a:	4b70      	ldr	r3, [pc, #448]	; (800291c <main+0x65c>)
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 800275c:	4622      	mov	r2, r4
	BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 800275e:	6018      	str	r0, [r3, #0]
	osTimerDef(timer10ms, CBTimer10ms);
 8002760:	4b6f      	ldr	r3, [pc, #444]	; (8002920 <main+0x660>)
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 8002762:	2101      	movs	r1, #1
 8002764:	a80f      	add	r0, sp, #60	; 0x3c
	osTimerDef(timer10ms, CBTimer10ms);
 8002766:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 800276a:	f005 f9d7 	bl	8007b1c <osTimerCreate>
 800276e:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8002924 <main+0x664>
	osTimerDef(timer1000ms, CBTimer1000ms);
 8002772:	4b6d      	ldr	r3, [pc, #436]	; (8002928 <main+0x668>)
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002774:	4622      	mov	r2, r4
 8002776:	2101      	movs	r1, #1
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 8002778:	f8c8 0000 	str.w	r0, [r8]
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 800277c:	a811      	add	r0, sp, #68	; 0x44
	osTimerDef(timer1000ms, CBTimer1000ms);
 800277e:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002782:	f005 f9cb 	bl	8007b1c <osTimerCreate>
	osMessageQDef(FilaBleComando, 5, uint8_t);
 8002786:	4d69      	ldr	r5, [pc, #420]	; (800292c <main+0x66c>)
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002788:	4f69      	ldr	r7, [pc, #420]	; (8002930 <main+0x670>)
	osMessageQDef(FilaBleComando, 5, uint8_t);
 800278a:	ae13      	add	r6, sp, #76	; 0x4c
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 800278c:	6038      	str	r0, [r7, #0]
	osMessageQDef(FilaBleComando, 5, uint8_t);
 800278e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002792:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	FilaBleComandoHandle = osMessageCreate(osMessageQ(FilaBleComando), NULL);
 8002796:	4621      	mov	r1, r4
 8002798:	4630      	mov	r0, r6
 800279a:	f005 fa70 	bl	8007c7e <osMessageCreate>
 800279e:	4b65      	ldr	r3, [pc, #404]	; (8002934 <main+0x674>)
	osMessageQStaticDef(FilaTXBluetooth, 5, uint8_t, FilaTXBluetoothBuffer, &FilaTXBluetoothControlBlock);
 80027a0:	ae17      	add	r6, sp, #92	; 0x5c
	FilaBleComandoHandle = osMessageCreate(osMessageQ(FilaBleComando), NULL);
 80027a2:	6018      	str	r0, [r3, #0]
	osMessageQStaticDef(FilaTXBluetooth, 5, uint8_t, FilaTXBluetoothBuffer, &FilaTXBluetoothControlBlock);
 80027a4:	f105 0310 	add.w	r3, r5, #16
 80027a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027aa:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	FilaTXBluetoothHandle = osMessageCreate(osMessageQ(FilaTXBluetooth), NULL);
 80027ae:	4621      	mov	r1, r4
 80027b0:	4630      	mov	r0, r6
 80027b2:	f005 fa64 	bl	8007c7e <osMessageCreate>
 80027b6:	4b60      	ldr	r3, [pc, #384]	; (8002938 <main+0x678>)
	osMessageQStaticDef(FilaRXBluetooth, 1, uint8_t, FilaRXBluetoothBuffer, &FilaRXBluetoothControlBlock);
 80027b8:	ae1b      	add	r6, sp, #108	; 0x6c
	FilaTXBluetoothHandle = osMessageCreate(osMessageQ(FilaTXBluetooth), NULL);
 80027ba:	6018      	str	r0, [r3, #0]
	osMessageQStaticDef(FilaRXBluetooth, 1, uint8_t, FilaRXBluetoothBuffer, &FilaRXBluetoothControlBlock);
 80027bc:	f105 0320 	add.w	r3, r5, #32
 80027c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027c2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	FilaRXBluetoothHandle = osMessageCreate(osMessageQ(FilaRXBluetooth), NULL);
 80027c6:	4621      	mov	r1, r4
 80027c8:	4630      	mov	r0, r6
 80027ca:	f005 fa58 	bl	8007c7e <osMessageCreate>
 80027ce:	4b5b      	ldr	r3, [pc, #364]	; (800293c <main+0x67c>)
	osMessageQDef(FilaEeprom, 5, uint8_t);
 80027d0:	ae1f      	add	r6, sp, #124	; 0x7c
	FilaRXBluetoothHandle = osMessageCreate(osMessageQ(FilaRXBluetooth), NULL);
 80027d2:	6018      	str	r0, [r3, #0]
	osMessageQDef(FilaEeprom, 5, uint8_t);
 80027d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027d8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 80027dc:	4621      	mov	r1, r4
 80027de:	4630      	mov	r0, r6
 80027e0:	f005 fa4d 	bl	8007c7e <osMessageCreate>
 80027e4:	4b56      	ldr	r3, [pc, #344]	; (8002940 <main+0x680>)
	osThreadDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 256);
 80027e6:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 80027ea:	ae23      	add	r6, sp, #140	; 0x8c
	FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 80027ec:	6018      	str	r0, [r3, #0]
	osThreadDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 256);
 80027ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80027f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80027f4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80027f8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 80027fc:	4621      	mov	r1, r4
 80027fe:	a823      	add	r0, sp, #140	; 0x8c
 8002800:	f005 f950 	bl	8007aa4 <osThreadCreate>
 8002804:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <main+0x684>)
	osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 8002806:	f105 0c4c 	add.w	ip, r5, #76	; 0x4c
 800280a:	ae2a      	add	r6, sp, #168	; 0xa8
	TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 800280c:	6018      	str	r0, [r3, #0]
	osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 800280e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002812:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002814:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002818:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 800281c:	4621      	mov	r1, r4
 800281e:	a82a      	add	r0, sp, #168	; 0xa8
 8002820:	f005 f940 	bl	8007aa4 <osThreadCreate>
 8002824:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8002948 <main+0x688>
	osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8002828:	f105 0c68 	add.w	ip, r5, #104	; 0x68
 800282c:	ae31      	add	r6, sp, #196	; 0xc4
	TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 800282e:	f8c9 0000 	str.w	r0, [r9]
	osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8002832:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002836:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002838:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800283c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8002840:	4621      	mov	r1, r4
 8002842:	a831      	add	r0, sp, #196	; 0xc4
 8002844:	f005 f92e 	bl	8007aa4 <osThreadCreate>
 8002848:	4b40      	ldr	r3, [pc, #256]	; (800294c <main+0x68c>)
	osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 800284a:	f105 0c84 	add.w	ip, r5, #132	; 0x84
 800284e:	ae38      	add	r6, sp, #224	; 0xe0
	TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8002850:	6018      	str	r0, [r3, #0]
	osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8002852:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002856:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002858:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800285c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8002860:	4621      	mov	r1, r4
 8002862:	a838      	add	r0, sp, #224	; 0xe0
 8002864:	f005 f91e 	bl	8007aa4 <osThreadCreate>
 8002868:	4b39      	ldr	r3, [pc, #228]	; (8002950 <main+0x690>)
	osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 800286a:	ae3f      	add	r6, sp, #252	; 0xfc
 800286c:	35a0      	adds	r5, #160	; 0xa0
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 800286e:	6018      	str	r0, [r3, #0]
	osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 8002870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002872:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002874:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002878:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskEepromHandle = osThreadCreate(osThread(TaskEeprom), NULL);
 800287c:	4621      	mov	r1, r4
 800287e:	a83f      	add	r0, sp, #252	; 0xfc
 8002880:	f005 f910 	bl	8007aa4 <osThreadCreate>
 8002884:	4b33      	ldr	r3, [pc, #204]	; (8002954 <main+0x694>)
 8002886:	6018      	str	r0, [r3, #0]
	osThreadSuspend(TaskTemperaturaHandle); //só é liberada após taskeeprom
 8002888:	f8d9 0000 	ldr.w	r0, [r9]
 800288c:	f005 fa6b 	bl	8007d66 <osThreadSuspend>
	osTimerStart(timer10msHandle,10);
 8002890:	210a      	movs	r1, #10
 8002892:	f8d8 0000 	ldr.w	r0, [r8]
 8002896:	f005 f959 	bl	8007b4c <osTimerStart>
	osTimerStart(timer1000msHandle,1000);
 800289a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800289e:	6838      	ldr	r0, [r7, #0]
 80028a0:	f005 f954 	bl	8007b4c <osTimerStart>
	osKernelStart();
 80028a4:	f005 f8f9 	bl	8007a9a <osKernelStart>
	while (1)
 80028a8:	e7fe      	b.n	80028a8 <main+0x5e8>
 80028aa:	bf00      	nop
 80028ac:	f3af 8000 	nop.w
 80028b0:	33333333 	.word	0x33333333
 80028b4:	3fd33333 	.word	0x3fd33333
 80028b8:	47ae147b 	.word	0x47ae147b
 80028bc:	3f847ae1 	.word	0x3f847ae1
 80028c0:	200011cc 	.word	0x200011cc
 80028c4:	40013800 	.word	0x40013800
 80028c8:	20001214 	.word	0x20001214
 80028cc:	40004800 	.word	0x40004800
 80028d0:	20001128 	.word	0x20001128
 80028d4:	40002800 	.word	0x40002800
 80028d8:	00010101 	.word	0x00010101
 80028dc:	20000fcc 	.word	0x20000fcc
 80028e0:	20000fd8 	.word	0x20000fd8
 80028e4:	08002221 	.word	0x08002221
 80028e8:	20000890 	.word	0x20000890
 80028ec:	20001260 	.word	0x20001260
 80028f0:	40010800 	.word	0x40010800
 80028f4:	40010c00 	.word	0x40010c00
 80028f8:	200008a8 	.word	0x200008a8
 80028fc:	200008f0 	.word	0x200008f0
 8002900:	200008d8 	.word	0x200008d8
 8002904:	200008c0 	.word	0x200008c0
 8002908:	080021c5 	.word	0x080021c5
 800290c:	403e0000 	.word	0x403e0000
 8002910:	20001184 	.word	0x20001184
 8002914:	20000908 	.word	0x20000908
 8002918:	20000950 	.word	0x20000950
 800291c:	200007d0 	.word	0x200007d0
 8002920:	0800222d 	.word	0x0800222d
 8002924:	20001298 	.word	0x20001298
 8002928:	080029fd 	.word	0x080029fd
 800292c:	0800b114 	.word	0x0800b114
 8002930:	20001294 	.word	0x20001294
 8002934:	200007e4 	.word	0x200007e4
 8002938:	2000088c 	.word	0x2000088c
 800293c:	20000838 	.word	0x20000838
 8002940:	200007e8 	.word	0x200007e8
 8002944:	200009a0 	.word	0x200009a0
 8002948:	20000c4c 	.word	0x20000c4c
 800294c:	20000c44 	.word	0x20000c44
 8002950:	20000ef0 	.word	0x20000ef0
 8002954:	20000c48 	.word	0x20000c48

08002958 <desligaForno>:
	PrimitiveStates.SPTimerMinutos 	= 0;
 8002958:	2200      	movs	r2, #0
	PrimitiveStates.Lastro.setPoint	= 0;
 800295a:	2000      	movs	r0, #0
 800295c:	2100      	movs	r1, #0
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <desligaForno+0x20>)
 8002960:	e9c3 013c 	strd	r0, r1, [r3, #240]	; 0xf0
	PrimitiveStates.Teto.setPoint 	= 0;
 8002964:	e9c3 012a 	strd	r0, r1, [r3, #168]	; 0xa8
	PrimitiveStates.SPTimerMinutos 	= 0;
 8002968:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	PrimitiveStates.SPTimerSegundos = 0;
 800296c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
	PrimitiveStates.RTTimerSegundos = 0;
 8002970:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000890 	.word	0x20000890
 800297c:	00000000 	.word	0x00000000

08002980 <controleCooler>:
void controleCooler(void){
 8002980:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
	if(PrimitiveStates.Lastro.realtime>ON_FAN_TEMPERATURA || PrimitiveStates.Teto.realtime>ON_FAN_TEMPERATURA){
 8002984:	4c1a      	ldr	r4, [pc, #104]	; (80029f0 <controleCooler+0x70>)
 8002986:	2200      	movs	r2, #0
 8002988:	e9d4 893a 	ldrd	r8, r9, [r4, #232]	; 0xe8
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <controleCooler+0x74>)
 800298e:	4640      	mov	r0, r8
 8002990:	4649      	mov	r1, r9
 8002992:	f7fe f831 	bl	80009f8 <__aeabi_dcmpgt>
 8002996:	b940      	cbnz	r0, 80029aa <controleCooler+0x2a>
 8002998:	e9d4 6728 	ldrd	r6, r7, [r4, #160]	; 0xa0
 800299c:	2200      	movs	r2, #0
 800299e:	4630      	mov	r0, r6
 80029a0:	4639      	mov	r1, r7
 80029a2:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <controleCooler+0x74>)
 80029a4:	f7fe f828 	bl	80009f8 <__aeabi_dcmpgt>
 80029a8:	b120      	cbz	r0, 80029b4 <controleCooler+0x34>
}
 80029aa:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
		onDigital(&PrimitiveStates.Cooler);
 80029ae:	4812      	ldr	r0, [pc, #72]	; (80029f8 <controleCooler+0x78>)
 80029b0:	f7ff bb14 	b.w	8001fdc <onDigital>
	}else 	if(PrimitiveStates.Lastro.realtime<ON_FAN_TEMPERATURA-5 && PrimitiveStates.Teto.realtime<ON_FAN_TEMPERATURA-5){
 80029b4:	4640      	mov	r0, r8
 80029b6:	a30c      	add	r3, pc, #48	; (adr r3, 80029e8 <controleCooler+0x68>)
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	4649      	mov	r1, r9
 80029be:	f7fd fffd 	bl	80009bc <__aeabi_dcmplt>
 80029c2:	b168      	cbz	r0, 80029e0 <controleCooler+0x60>
 80029c4:	a308      	add	r3, pc, #32	; (adr r3, 80029e8 <controleCooler+0x68>)
 80029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ca:	4630      	mov	r0, r6
 80029cc:	4639      	mov	r1, r7
 80029ce:	f7fd fff5 	bl	80009bc <__aeabi_dcmplt>
 80029d2:	b128      	cbz	r0, 80029e0 <controleCooler+0x60>
		offDigital(&PrimitiveStates.Cooler);
 80029d4:	f104 0018 	add.w	r0, r4, #24
}
 80029d8:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
		offDigital(&PrimitiveStates.Cooler);
 80029dc:	f7ff bb08 	b.w	8001ff0 <offDigital>
}
 80029e0:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 80029e4:	f3af 8000 	nop.w
 80029e8:	00000000 	.word	0x00000000
 80029ec:	40686000 	.word	0x40686000
 80029f0:	20000890 	.word	0x20000890
 80029f4:	40690000 	.word	0x40690000
 80029f8:	200008a8 	.word	0x200008a8

080029fc <CBTimer1000ms>:
{
 80029fc:	b508      	push	{r3, lr}
	bluetooth1000ms(&bluetooth);
 80029fe:	480a      	ldr	r0, [pc, #40]	; (8002a28 <CBTimer1000ms+0x2c>)
 8002a00:	f7fe fd38 	bl	8001474 <bluetooth1000ms>
	taskTemperatura1sec();
 8002a04:	f001 ff9a 	bl	800493c <taskTemperatura1sec>
	taskBluetooth1sec();
 8002a08:	f000 fe44 	bl	8003694 <taskBluetooth1sec>
	controleCooler();
 8002a0c:	f7ff ffb8 	bl	8002980 <controleCooler>
	contadorOutput(&outPuts);
 8002a10:	4806      	ldr	r0, [pc, #24]	; (8002a2c <CBTimer1000ms+0x30>)
 8002a12:	f7ff faf7 	bl	8002004 <contadorOutput>
	if(PrimitiveStates.Erro.byte != 0){
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <CBTimer1000ms+0x34>)
 8002a18:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8002a1c:	b11b      	cbz	r3, 8002a26 <CBTimer1000ms+0x2a>
}
 8002a1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		desligaForno();
 8002a22:	f7ff bf99 	b.w	8002958 <desligaForno>
}
 8002a26:	bd08      	pop	{r3, pc}
 8002a28:	20000ef4 	.word	0x20000ef4
 8002a2c:	20001260 	.word	0x20001260
 8002a30:	20000890 	.word	0x20000890

08002a34 <HAL_ADC_ConvCpltCallback>:
{
 8002a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(i<TAM){
 8002a38:	4e24      	ldr	r6, [pc, #144]	; (8002acc <HAL_ADC_ConvCpltCallback+0x98>)
		somatorio1+=buffer_ADC[1]; // somatorio
 8002a3a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8002ad0 <HAL_ADC_ConvCpltCallback+0x9c>
	if(i<TAM){
 8002a3e:	8834      	ldrh	r4, [r6, #0]
		somatorio2+=buffer_ADC[0]; // somatorio
 8002a40:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8002ad4 <HAL_ADC_ConvCpltCallback+0xa0>
	if(i<TAM){
 8002a44:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
		somatorio1+=buffer_ADC[1]; // somatorio
 8002a48:	f8d9 0000 	ldr.w	r0, [r9]
		somatorio2+=buffer_ADC[0]; // somatorio
 8002a4c:	f8d8 5000 	ldr.w	r5, [r8]
	if(i<TAM){
 8002a50:	d20d      	bcs.n	8002a6e <HAL_ADC_ConvCpltCallback+0x3a>
		somatorio1+=buffer_ADC[1]; // somatorio
 8002a52:	4a21      	ldr	r2, [pc, #132]	; (8002ad8 <HAL_ADC_ConvCpltCallback+0xa4>)
		i++;
 8002a54:	3401      	adds	r4, #1
		somatorio1+=buffer_ADC[1]; // somatorio
 8002a56:	6853      	ldr	r3, [r2, #4]
		i++;
 8002a58:	b2a4      	uxth	r4, r4
		somatorio1+=buffer_ADC[1]; // somatorio
 8002a5a:	4403      	add	r3, r0
 8002a5c:	f8c9 3000 	str.w	r3, [r9]
		somatorio2+=buffer_ADC[0]; // somatorio
 8002a60:	6813      	ldr	r3, [r2, #0]
 8002a62:	442b      	add	r3, r5
 8002a64:	f8c8 3000 	str.w	r3, [r8]
		i++;
 8002a68:	8034      	strh	r4, [r6, #0]
}
 8002a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		somatorio1 = somatorio1 / TAM; //calc media
 8002a6e:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
 8002a72:	fb90 f0fa 	sdiv	r0, r0, sl
		Temp1 = somatorio1*16; //calc valor final
 8002a76:	0100      	lsls	r0, r0, #4
 8002a78:	f7fe f8f2 	bl	8000c60 <__aeabi_i2f>
		somatorio2 = somatorio2 / TAM; //calc media
 8002a7c:	fb95 f5fa 	sdiv	r5, r5, sl
		somatorio1 = 0; 		//zera somatorio
 8002a80:	2400      	movs	r4, #0
		Temp1 = somatorio1*16; //calc valor final
 8002a82:	4607      	mov	r7, r0
		Temp2 = somatorio2*16; 	//calc valor final
 8002a84:	0128      	lsls	r0, r5, #4
		somatorio1 = 0; 		//zera somatorio
 8002a86:	f8c9 4000 	str.w	r4, [r9]
		Temp2 = somatorio2*16; 	//calc valor final
 8002a8a:	f7fe f8e9 	bl	8000c60 <__aeabi_i2f>
		Temp1 = Temp1/100;
 8002a8e:	4913      	ldr	r1, [pc, #76]	; (8002adc <HAL_ADC_ConvCpltCallback+0xa8>)
		Temp2 = somatorio2*16; 	//calc valor final
 8002a90:	4605      	mov	r5, r0
		somatorio2 = 0; 		//zera somatorio
 8002a92:	f8c8 4000 	str.w	r4, [r8]
		Temp1 = Temp1/100;
 8002a96:	4638      	mov	r0, r7
 8002a98:	f7fe f9ea 	bl	8000e70 <__aeabi_fdiv>
		TempTeto=(double)Temp1;
 8002a9c:	f7fd fcc4 	bl	8000428 <__aeabi_f2d>
		PrimitiveStates.Teto.realtime = TempTeto-34;
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <HAL_ADC_ConvCpltCallback+0xac>)
 8002aa4:	f7fd fb60 	bl	8000168 <__aeabi_dsub>
 8002aa8:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8002ae4 <HAL_ADC_ConvCpltCallback+0xb0>
 8002aac:	e9c8 0128 	strd	r0, r1, [r8, #160]	; 0xa0
		Temp2 = Temp2/100;
 8002ab0:	490a      	ldr	r1, [pc, #40]	; (8002adc <HAL_ADC_ConvCpltCallback+0xa8>)
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	f7fe f9dc 	bl	8000e70 <__aeabi_fdiv>
		TempLastro=(double)Temp2;
 8002ab8:	f7fd fcb6 	bl	8000428 <__aeabi_f2d>
		PrimitiveStates.Lastro.realtime = TempLastro-34;
 8002abc:	2200      	movs	r2, #0
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <HAL_ADC_ConvCpltCallback+0xac>)
 8002ac0:	f7fd fb52 	bl	8000168 <__aeabi_dsub>
 8002ac4:	e9c8 013a 	strd	r0, r1, [r8, #232]	; 0xe8
		i=0;
 8002ac8:	e7ce      	b.n	8002a68 <HAL_ADC_ConvCpltCallback+0x34>
 8002aca:	bf00      	nop
 8002acc:	2000125c 	.word	0x2000125c
 8002ad0:	2000128c 	.word	0x2000128c
 8002ad4:	20001290 	.word	0x20001290
 8002ad8:	20000fcc 	.word	0x20000fcc
 8002adc:	42c80000 	.word	0x42c80000
 8002ae0:	40410000 	.word	0x40410000
 8002ae4:	20000890 	.word	0x20000890

08002ae8 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM1) {
 8002ae8:	6802      	ldr	r2, [r0, #0]
 8002aea:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d101      	bne.n	8002af4 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 8002af0:	f001 bfa6 	b.w	8004a40 <HAL_IncTick>
}
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40012c00 	.word	0x40012c00

08002afc <Error_Handler>:
 8002afc:	b672      	cpsid	i
	while (1)
 8002afe:	e7fe      	b.n	8002afe <Error_Handler+0x2>

08002b00 <PID_Init>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002b00:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8002b02:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
	uPID->OutputSum = *uPID->MyOutput;
 8002b06:	e9d3 6700 	ldrd	r6, r7, [r3]
	uPID->LastInput = *uPID->MyInput;
	
	if (uPID->OutputSum > uPID->OutMax)
 8002b0a:	e9d0 891a 	ldrd	r8, r9, [r0, #104]	; 0x68
	uPID->OutputSum = *uPID->MyOutput;
 8002b0e:	e9c0 6714 	strd	r6, r7, [r0, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8002b12:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8002b14:	4604      	mov	r4, r0
	uPID->LastInput = *uPID->MyInput;
 8002b16:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (uPID->OutputSum > uPID->OutMax)
 8002b1a:	4639      	mov	r1, r7
	uPID->LastInput = *uPID->MyInput;
 8002b1c:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
	if (uPID->OutputSum > uPID->OutMax)
 8002b20:	4642      	mov	r2, r8
 8002b22:	464b      	mov	r3, r9
 8002b24:	4630      	mov	r0, r6
 8002b26:	f7fd ff67 	bl	80009f8 <__aeabi_dcmpgt>
 8002b2a:	b110      	cbz	r0, 8002b32 <PID_Init+0x32>
	{
		uPID->OutputSum = uPID->OutMax;
	}
	else if (uPID->OutputSum < uPID->OutMin)
	{
		uPID->OutputSum = uPID->OutMin;
 8002b2c:	e9c4 8914 	strd	r8, r9, [r4, #80]	; 0x50
	}
	else { }
	
}
 8002b30:	e009      	b.n	8002b46 <PID_Init+0x46>
	else if (uPID->OutputSum < uPID->OutMin)
 8002b32:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
 8002b36:	4630      	mov	r0, r6
 8002b38:	4642      	mov	r2, r8
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	4639      	mov	r1, r7
 8002b3e:	f7fd ff3d 	bl	80009bc <__aeabi_dcmplt>
 8002b42:	2800      	cmp	r0, #0
 8002b44:	d1f2      	bne.n	8002b2c <PID_Init+0x2c>
}
 8002b46:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}

08002b4a <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002b4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002b4e:	7843      	ldrb	r3, [r0, #1]
{
 8002b50:	4604      	mov	r4, r0
 8002b52:	b089      	sub	sp, #36	; 0x24
	if (!uPID->InAuto)
 8002b54:	b91b      	cbnz	r3, 8002b5e <PID_Compute+0x14>
	{
		return _FALSE;
 8002b56:	2000      	movs	r0, #0
	else
	{
		return _FALSE;
	}
	
}
 8002b58:	b009      	add	sp, #36	; 0x24
 8002b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	now        = GetTime();
 8002b5e:	f001 ff7b 	bl	8004a58 <HAL_GetTick>
	timeChange = (now - uPID->LastTime);
 8002b62:	6863      	ldr	r3, [r4, #4]
	if (timeChange >= uPID->SampleTime)
 8002b64:	68a2      	ldr	r2, [r4, #8]
	timeChange = (now - uPID->LastTime);
 8002b66:	1ac3      	subs	r3, r0, r3
	if (timeChange >= uPID->SampleTime)
 8002b68:	429a      	cmp	r2, r3
	now        = GetTime();
 8002b6a:	4605      	mov	r5, r0
	if (timeChange >= uPID->SampleTime)
 8002b6c:	d8f3      	bhi.n	8002b56 <PID_Compute+0xc>
		input   = *uPID->MyInput;
 8002b6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
		error   = *uPID->MySetpoint - input;
 8002b70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
		input   = *uPID->MyInput;
 8002b72:	e9d3 ab00 	ldrd	sl, fp, [r3]
		error   = *uPID->MySetpoint - input;
 8002b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b7a:	4652      	mov	r2, sl
 8002b7c:	465b      	mov	r3, fp
 8002b7e:	f7fd faf3 	bl	8000168 <__aeabi_dsub>
		dInput  = (input - uPID->LastInput);
 8002b82:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
		error   = *uPID->MySetpoint - input;
 8002b86:	e9cd 0104 	strd	r0, r1, [sp, #16]
		dInput  = (input - uPID->LastInput);
 8002b8a:	4650      	mov	r0, sl
 8002b8c:	4659      	mov	r1, fp
 8002b8e:	f7fd faeb 	bl	8000168 <__aeabi_dsub>
		uPID->OutputSum     += (uPID->Ki * error);
 8002b92:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
		dInput  = (input - uPID->LastInput);
 8002b96:	e9cd 0106 	strd	r0, r1, [sp, #24]
		uPID->OutputSum     += (uPID->Ki * error);
 8002b9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002b9e:	f7fd fc9b 	bl	80004d8 <__aeabi_dmul>
 8002ba2:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 8002ba6:	f7fd fae1 	bl	800016c <__adddf3>
 8002baa:	4606      	mov	r6, r0
 8002bac:	460f      	mov	r7, r1
		if (!uPID->POnE)
 8002bae:	7823      	ldrb	r3, [r4, #0]
		uPID->OutputSum     += (uPID->Ki * error);
 8002bb0:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (!uPID->POnE)
 8002bb4:	9301      	str	r3, [sp, #4]
 8002bb6:	b96b      	cbnz	r3, 8002bd4 <PID_Compute+0x8a>
			uPID->OutputSum -= uPID->Kp * dInput;
 8002bb8:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8002bbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002bc0:	f7fd fc8a 	bl	80004d8 <__aeabi_dmul>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4630      	mov	r0, r6
 8002bca:	4639      	mov	r1, r7
 8002bcc:	f7fd facc 	bl	8000168 <__aeabi_dsub>
 8002bd0:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
		if (uPID->OutputSum > uPID->OutMax)
 8002bd4:	e9d4 8914 	ldrd	r8, r9, [r4, #80]	; 0x50
 8002bd8:	e9d4 671a 	ldrd	r6, r7, [r4, #104]	; 0x68
 8002bdc:	4640      	mov	r0, r8
 8002bde:	4632      	mov	r2, r6
 8002be0:	463b      	mov	r3, r7
 8002be2:	4649      	mov	r1, r9
 8002be4:	f7fd ff08 	bl	80009f8 <__aeabi_dcmpgt>
 8002be8:	2800      	cmp	r0, #0
 8002bea:	d038      	beq.n	8002c5e <PID_Compute+0x114>
			uPID->OutputSum = uPID->OutMax;
 8002bec:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (uPID->POnE)
 8002bf0:	9b01      	ldr	r3, [sp, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d042      	beq.n	8002c7c <PID_Compute+0x132>
			output = uPID->Kp * error;
 8002bf6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8002bfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002bfe:	f7fd fc6b 	bl	80004d8 <__aeabi_dmul>
 8002c02:	4680      	mov	r8, r0
 8002c04:	4689      	mov	r9, r1
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002c06:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8002c0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c0e:	f7fd fc63 	bl	80004d8 <__aeabi_dmul>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8002c1a:	f7fd faa5 	bl	8000168 <__aeabi_dsub>
 8002c1e:	4642      	mov	r2, r8
 8002c20:	464b      	mov	r3, r9
 8002c22:	f7fd faa3 	bl	800016c <__adddf3>
 8002c26:	4680      	mov	r8, r0
 8002c28:	4689      	mov	r9, r1
		if (output > uPID->OutMax)
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4630      	mov	r0, r6
 8002c30:	4639      	mov	r1, r7
 8002c32:	f7fd fec3 	bl	80009bc <__aeabi_dcmplt>
 8002c36:	b950      	cbnz	r0, 8002c4e <PID_Compute+0x104>
		else if (output < uPID->OutMin)
 8002c38:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 8002c3c:	4642      	mov	r2, r8
 8002c3e:	464b      	mov	r3, r9
 8002c40:	4630      	mov	r0, r6
 8002c42:	4639      	mov	r1, r7
 8002c44:	f7fd fed8 	bl	80009f8 <__aeabi_dcmpgt>
 8002c48:	b908      	cbnz	r0, 8002c4e <PID_Compute+0x104>
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002c4a:	4646      	mov	r6, r8
 8002c4c:	464f      	mov	r7, r9
		*uPID->MyOutput = output;
 8002c4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
		return _TRUE;
 8002c50:	2001      	movs	r0, #1
		*uPID->MyOutput = output;
 8002c52:	e9c3 6700 	strd	r6, r7, [r3]
		uPID->LastInput = input;
 8002c56:	e9c4 ab16 	strd	sl, fp, [r4, #88]	; 0x58
		uPID->LastTime = now;
 8002c5a:	6065      	str	r5, [r4, #4]
		return _TRUE;
 8002c5c:	e77c      	b.n	8002b58 <PID_Compute+0xe>
		else if (uPID->OutputSum < uPID->OutMin)
 8002c5e:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 8002c62:	4640      	mov	r0, r8
 8002c64:	4649      	mov	r1, r9
 8002c66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c6a:	f7fd fea7 	bl	80009bc <__aeabi_dcmplt>
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d0be      	beq.n	8002bf0 <PID_Compute+0xa6>
			uPID->OutputSum = uPID->OutMin;
 8002c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002c76:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8002c7a:	e7b9      	b.n	8002bf0 <PID_Compute+0xa6>
			output = 0;
 8002c7c:	f04f 0800 	mov.w	r8, #0
 8002c80:	f04f 0900 	mov.w	r9, #0
 8002c84:	e7bf      	b.n	8002c06 <PID_Compute+0xbc>

08002c86 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002c86:	2901      	cmp	r1, #1
{
 8002c88:	b538      	push	{r3, r4, r5, lr}
 8002c8a:	4604      	mov	r4, r0
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002c8c:	bf0c      	ite	eq
 8002c8e:	2501      	moveq	r5, #1
 8002c90:	2500      	movne	r5, #0
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002c92:	d103      	bne.n	8002c9c <PID_SetMode+0x16>
 8002c94:	7843      	ldrb	r3, [r0, #1]
 8002c96:	b90b      	cbnz	r3, 8002c9c <PID_SetMode+0x16>
	{
		PID_Init(uPID);
 8002c98:	f7ff ff32 	bl	8002b00 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002c9c:	7065      	strb	r5, [r4, #1]
	
}
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}

08002ca0 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca4:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8002ca8:	4614      	mov	r4, r2
 8002caa:	461d      	mov	r5, r3
 8002cac:	4682      	mov	sl, r0
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002cae:	4632      	mov	r2, r6
 8002cb0:	463b      	mov	r3, r7
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	f7fd fe95 	bl	80009e4 <__aeabi_dcmpge>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d137      	bne.n	8002d2e <PID_SetOutputLimits+0x8e>
	
	uPID->OutMin = Min;
	uPID->OutMax = Max;
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002cbe:	f89a 3001 	ldrb.w	r3, [sl, #1]
	uPID->OutMin = Min;
 8002cc2:	e9ca 4518 	strd	r4, r5, [sl, #96]	; 0x60
	uPID->OutMax = Max;
 8002cc6:	e9ca 671a 	strd	r6, r7, [sl, #104]	; 0x68
	if (uPID->InAuto)
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d02f      	beq.n	8002d2e <PID_SetOutputLimits+0x8e>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002cce:	f8da b044 	ldr.w	fp, [sl, #68]	; 0x44
 8002cd2:	4632      	mov	r2, r6
 8002cd4:	e9db 8900 	ldrd	r8, r9, [fp]
 8002cd8:	463b      	mov	r3, r7
 8002cda:	4640      	mov	r0, r8
 8002cdc:	4649      	mov	r1, r9
 8002cde:	f7fd fe8b 	bl	80009f8 <__aeabi_dcmpgt>
 8002ce2:	b178      	cbz	r0, 8002d04 <PID_SetOutputLimits+0x64>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002ce4:	e9cb 6700 	strd	r6, r7, [fp]
			*uPID->MyOutput = uPID->OutMin;
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002ce8:	e9da 6714 	ldrd	r6, r7, [sl, #80]	; 0x50
 8002cec:	e9da 451a 	ldrd	r4, r5, [sl, #104]	; 0x68
 8002cf0:	4630      	mov	r0, r6
 8002cf2:	4622      	mov	r2, r4
 8002cf4:	462b      	mov	r3, r5
 8002cf6:	4639      	mov	r1, r7
 8002cf8:	f7fd fe7e 	bl	80009f8 <__aeabi_dcmpgt>
 8002cfc:	b168      	cbz	r0, 8002d1a <PID_SetOutputLimits+0x7a>
		{
			uPID->OutputSum = uPID->OutMax;
		}
		else if (uPID->OutputSum < uPID->OutMin)
		{
			uPID->OutputSum = uPID->OutMin;
 8002cfe:	e9ca 4514 	strd	r4, r5, [sl, #80]	; 0x50
		}
		else { }
 8002d02:	e014      	b.n	8002d2e <PID_SetOutputLimits+0x8e>
		else if (*uPID->MyOutput < uPID->OutMin)
 8002d04:	4622      	mov	r2, r4
 8002d06:	462b      	mov	r3, r5
 8002d08:	4640      	mov	r0, r8
 8002d0a:	4649      	mov	r1, r9
 8002d0c:	f7fd fe56 	bl	80009bc <__aeabi_dcmplt>
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d0e9      	beq.n	8002ce8 <PID_SetOutputLimits+0x48>
			*uPID->MyOutput = uPID->OutMin;
 8002d14:	e9cb 4500 	strd	r4, r5, [fp]
 8002d18:	e7e6      	b.n	8002ce8 <PID_SetOutputLimits+0x48>
		else if (uPID->OutputSum < uPID->OutMin)
 8002d1a:	e9da 4518 	ldrd	r4, r5, [sl, #96]	; 0x60
 8002d1e:	4630      	mov	r0, r6
 8002d20:	4622      	mov	r2, r4
 8002d22:	462b      	mov	r3, r5
 8002d24:	4639      	mov	r1, r7
 8002d26:	f7fd fe49 	bl	80009bc <__aeabi_dcmplt>
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	d1e7      	bne.n	8002cfe <PID_SetOutputLimits+0x5e>
		
	}
	
}
 8002d2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002d34 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d38:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8002d3c:	4614      	mov	r4, r2
 8002d3e:	461d      	mov	r5, r3
 8002d40:	4682      	mov	sl, r0
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002d42:	2200      	movs	r2, #0
 8002d44:	2300      	movs	r3, #0
 8002d46:	4620      	mov	r0, r4
 8002d48:	4629      	mov	r1, r5
{
 8002d4a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002d4e:	f7fd fe35 	bl	80009bc <__aeabi_dcmplt>
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d15a      	bne.n	8002e0c <PID_SetTunings2+0xd8>
 8002d56:	2200      	movs	r2, #0
 8002d58:	2300      	movs	r3, #0
 8002d5a:	4640      	mov	r0, r8
 8002d5c:	4649      	mov	r1, r9
 8002d5e:	f7fd fe2d 	bl	80009bc <__aeabi_dcmplt>
 8002d62:	2800      	cmp	r0, #0
 8002d64:	d152      	bne.n	8002e0c <PID_SetTunings2+0xd8>
 8002d66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f7fd fe25 	bl	80009bc <__aeabi_dcmplt>
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d14a      	bne.n	8002e0c <PID_SetTunings2+0xd8>
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002d76:	1e73      	subs	r3, r6, #1
	uPID->POn    = POn;
 8002d78:	f88a 6002 	strb.w	r6, [sl, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002d7c:	425e      	negs	r6, r3
 8002d7e:	415e      	adcs	r6, r3

	uPID->DispKp = Kp;
	uPID->DispKi = Ki;
 8002d80:	e9ca 8906 	strd	r8, r9, [sl, #24]
	uPID->DispKd = Kd;
 8002d84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002d88:	f88a 6000 	strb.w	r6, [sl]
	uPID->DispKd = Kd;
 8002d8c:	e9ca 2308 	strd	r2, r3, [sl, #32]
	uPID->DispKp = Kp;
 8002d90:	e9ca 4504 	strd	r4, r5, [sl, #16]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002d94:	f8da 0008 	ldr.w	r0, [sl, #8]
 8002d98:	f7fd fb24 	bl	80003e4 <__aeabi_ui2d>
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <PID_SetTunings2+0xdc>)
 8002da0:	f7fd fcc4 	bl	800072c <__aeabi_ddiv>
	
	uPID->Kp = Kp;
 8002da4:	e9ca 450a 	strd	r4, r5, [sl, #40]	; 0x28
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002da8:	4606      	mov	r6, r0
 8002daa:	460f      	mov	r7, r1
	uPID->Ki = Ki * SampleTimeInSec;
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4640      	mov	r0, r8
 8002db2:	4649      	mov	r1, r9
 8002db4:	f7fd fb90 	bl	80004d8 <__aeabi_dmul>
 8002db8:	4680      	mov	r8, r0
 8002dba:	4689      	mov	r9, r1
	uPID->Kd = Kd / SampleTimeInSec;
 8002dbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002dc0:	463b      	mov	r3, r7
 8002dc2:	4632      	mov	r2, r6
	uPID->Ki = Ki * SampleTimeInSec;
 8002dc4:	e9ca 890c 	strd	r8, r9, [sl, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002dc8:	f7fd fcb0 	bl	800072c <__aeabi_ddiv>
 8002dcc:	4606      	mov	r6, r0
 8002dce:	460f      	mov	r7, r1
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002dd0:	f89a 3003 	ldrb.w	r3, [sl, #3]
	uPID->Kd = Kd / SampleTimeInSec;
 8002dd4:	e9ca 670e 	strd	r6, r7, [sl, #56]	; 0x38
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d117      	bne.n	8002e0c <PID_SetTunings2+0xd8>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002ddc:	4622      	mov	r2, r4
 8002dde:	462b      	mov	r3, r5
 8002de0:	2000      	movs	r0, #0
 8002de2:	2100      	movs	r1, #0
 8002de4:	f7fd f9c0 	bl	8000168 <__aeabi_dsub>
		uPID->Ki = (0 - uPID->Ki);
 8002de8:	4642      	mov	r2, r8
		uPID->Kp = (0 - uPID->Kp);
 8002dea:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002dee:	464b      	mov	r3, r9
 8002df0:	2000      	movs	r0, #0
 8002df2:	2100      	movs	r1, #0
 8002df4:	f7fd f9b8 	bl	8000168 <__aeabi_dsub>
		uPID->Kd = (0 - uPID->Kd);
 8002df8:	4632      	mov	r2, r6
		uPID->Ki = (0 - uPID->Ki);
 8002dfa:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002dfe:	463b      	mov	r3, r7
 8002e00:	2000      	movs	r0, #0
 8002e02:	2100      	movs	r1, #0
 8002e04:	f7fd f9b0 	bl	8000168 <__aeabi_dsub>
 8002e08:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
		
	}
	
}
 8002e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e10:	408f4000 	.word	0x408f4000

08002e14 <PID_SetTunings>:
{
 8002e14:	b530      	push	{r4, r5, lr}
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8002e16:	7881      	ldrb	r1, [r0, #2]
{
 8002e18:	b087      	sub	sp, #28
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8002e1a:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8002e1e:	9104      	str	r1, [sp, #16]
 8002e20:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002e24:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 8002e28:	e9cd 4500 	strd	r4, r5, [sp]
 8002e2c:	f7ff ff82 	bl	8002d34 <PID_SetTunings2>
}
 8002e30:	b007      	add	sp, #28
 8002e32:	bd30      	pop	{r4, r5, pc}

08002e34 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002e34:	b538      	push	{r3, r4, r5, lr}
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002e36:	7843      	ldrb	r3, [r0, #1]
{
 8002e38:	4604      	mov	r4, r0
 8002e3a:	460d      	mov	r5, r1
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002e3c:	b1d3      	cbz	r3, 8002e74 <PID_SetControllerDirection+0x40>
 8002e3e:	78c3      	ldrb	r3, [r0, #3]
 8002e40:	428b      	cmp	r3, r1
 8002e42:	d017      	beq.n	8002e74 <PID_SetControllerDirection+0x40>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002e44:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8002e48:	2100      	movs	r1, #0
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7fd f98c 	bl	8000168 <__aeabi_dsub>
		uPID->Ki = (0 - uPID->Ki);
 8002e50:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
		uPID->Kp = (0 - uPID->Kp);
 8002e54:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002e58:	2000      	movs	r0, #0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	f7fd f984 	bl	8000168 <__aeabi_dsub>
		uPID->Kd = (0 - uPID->Kd);
 8002e60:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
		uPID->Ki = (0 - uPID->Ki);
 8002e64:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	f7fd f97c 	bl	8000168 <__aeabi_dsub>
 8002e70:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8002e74:	70e5      	strb	r5, [r4, #3]
	
}
 8002e76:	bd38      	pop	{r3, r4, r5, pc}

08002e78 <PID>:
{
 8002e78:	b510      	push	{r4, lr}
	uPID->MySetpoint = Setpoint;
 8002e7a:	6483      	str	r3, [r0, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002e7c:	2300      	movs	r3, #0
	uPID->MyInput    = Input;
 8002e7e:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002e82:	7043      	strb	r3, [r0, #1]
	uPID->OutMin = Min;
 8002e84:	2200      	movs	r2, #0
 8002e86:	2300      	movs	r3, #0
 8002e88:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60
	uPID->OutMax = Max;
 8002e8c:	a312      	add	r3, pc, #72	; (adr r3, 8002ed8 <PID+0x60>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002e96:	2364      	movs	r3, #100	; 0x64
{
 8002e98:	4604      	mov	r4, r0
 8002e9a:	b086      	sub	sp, #24
	PID_SetControllerDirection(uPID, ControllerDirection);
 8002e9c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002ea0:	6083      	str	r3, [r0, #8]
	PID_SetControllerDirection(uPID, ControllerDirection);
 8002ea2:	f7ff ffc7 	bl	8002e34 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8002ea6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002eaa:	4620      	mov	r0, r4
 8002eac:	9304      	str	r3, [sp, #16]
 8002eae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002eb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002eb6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002eba:	e9cd 2300 	strd	r2, r3, [sp]
 8002ebe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002ec2:	f7ff ff37 	bl	8002d34 <PID_SetTunings2>
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002ec6:	f001 fdc7 	bl	8004a58 <HAL_GetTick>
 8002eca:	68a3      	ldr	r3, [r4, #8]
 8002ecc:	1ac0      	subs	r0, r0, r3
 8002ece:	6060      	str	r0, [r4, #4]
}
 8002ed0:	b006      	add	sp, #24
 8002ed2:	bd10      	pop	{r4, pc}
 8002ed4:	f3af 8000 	nop.w
 8002ed8:	00000000 	.word	0x00000000
 8002edc:	406fe000 	.word	0x406fe000

08002ee0 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002ee2:	1e0d      	subs	r5, r1, #0
{
 8002ee4:	4604      	mov	r4, r0
	if (NewSampleTime > 0)
 8002ee6:	dd20      	ble.n	8002f2a <PID_SetSampleTime+0x4a>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002ee8:	4628      	mov	r0, r5
 8002eea:	f7fd fa8b 	bl	8000404 <__aeabi_i2d>
 8002eee:	4606      	mov	r6, r0
 8002ef0:	68a0      	ldr	r0, [r4, #8]
 8002ef2:	460f      	mov	r7, r1
 8002ef4:	f7fd fa76 	bl	80003e4 <__aeabi_ui2d>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4630      	mov	r0, r6
 8002efe:	4639      	mov	r1, r7
 8002f00:	f7fd fc14 	bl	800072c <__aeabi_ddiv>
		
		uPID->Ki *= ratio;
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002f08:	4606      	mov	r6, r0
 8002f0a:	460f      	mov	r7, r1
		uPID->Ki *= ratio;
 8002f0c:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8002f10:	f7fd fae2 	bl	80004d8 <__aeabi_dmul>
		uPID->Kd /= ratio;
 8002f14:	4632      	mov	r2, r6
		uPID->Ki *= ratio;
 8002f16:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd /= ratio;
 8002f1a:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8002f1e:	463b      	mov	r3, r7
 8002f20:	f7fd fc04 	bl	800072c <__aeabi_ddiv>
 8002f24:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8002f28:	60a5      	str	r5, [r4, #8]
		
	}
	
}
 8002f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f2c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f2c:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <HAL_MspInit+0x48>)
{
 8002f2e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f30:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f32:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	619a      	str	r2, [r3, #24]
 8002f3a:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f3c:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f40:	f002 0201 	and.w	r2, r2, #1
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f4e:	61da      	str	r2, [r3, #28]
 8002f50:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f52:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f5c:	f001 ffce 	bl	8004efc <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f60:	4a05      	ldr	r2, [pc, #20]	; (8002f78 <HAL_MspInit+0x4c>)
 8002f62:	6853      	ldr	r3, [r2, #4]
 8002f64:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f6e:	b003      	add	sp, #12
 8002f70:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40010000 	.word	0x40010000

08002f7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f7c:	b530      	push	{r4, r5, lr}
 8002f7e:	4605      	mov	r5, r0
 8002f80:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f82:	2210      	movs	r2, #16
 8002f84:	2100      	movs	r1, #0
 8002f86:	a802      	add	r0, sp, #8
 8002f88:	f007 f9a6 	bl	800a2d8 <memset>
  if(hadc->Instance==ADC1)
 8002f8c:	682a      	ldr	r2, [r5, #0]
 8002f8e:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <HAL_ADC_MspInit+0x84>)
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d133      	bne.n	8002ffc <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f94:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002f98:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9a:	481a      	ldr	r0, [pc, #104]	; (8003004 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa0:	619a      	str	r2, [r3, #24]
 8002fa2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa4:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002fa6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002faa:	9200      	str	r2, [sp, #0]
 8002fac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fae:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002fb0:	4c15      	ldr	r4, [pc, #84]	; (8003008 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	f042 0204 	orr.w	r2, r2, #4
 8002fb6:	619a      	str	r2, [r3, #24]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fc2:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fc4:	e9cd 3302 	strd	r3, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc8:	f002 f97e 	bl	80052c8 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	4a0f      	ldr	r2, [pc, #60]	; (800300c <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fd0:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fd2:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002fda:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fde:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	e9c4 0205 	strd	r0, r2, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002fe8:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fea:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002fec:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002fee:	f001 ffd5 	bl	8004f9c <HAL_DMA_Init>
 8002ff2:	b108      	cbz	r0, 8002ff8 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8002ff4:	f7ff fd82 	bl	8002afc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ff8:	622c      	str	r4, [r5, #32]
 8002ffa:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ffc:	b007      	add	sp, #28
 8002ffe:	bd30      	pop	{r4, r5, pc}
 8003000:	40012400 	.word	0x40012400
 8003004:	40010800 	.word	0x40010800
 8003008:	20001008 	.word	0x20001008
 800300c:	40020008 	.word	0x40020008

08003010 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003010:	b510      	push	{r4, lr}
 8003012:	4604      	mov	r4, r0
 8003014:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003016:	2210      	movs	r2, #16
 8003018:	2100      	movs	r1, #0
 800301a:	a802      	add	r0, sp, #8
 800301c:	f007 f95c 	bl	800a2d8 <memset>
  if(hi2c->Instance==I2C1)
 8003020:	6822      	ldr	r2, [r4, #0]
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <HAL_I2C_MspInit+0x68>)
 8003024:	429a      	cmp	r2, r3
 8003026:	d124      	bne.n	8003072 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003028:	4c14      	ldr	r4, [pc, #80]	; (800307c <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800302a:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800302e:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003030:	4813      	ldr	r0, [pc, #76]	; (8003080 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003032:	f043 0308 	orr.w	r3, r3, #8
 8003036:	61a3      	str	r3, [r4, #24]
 8003038:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003044:	2312      	movs	r3, #18
 8003046:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800304a:	2303      	movs	r3, #3
 800304c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304e:	f002 f93b 	bl	80052c8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003052:	4a0c      	ldr	r2, [pc, #48]	; (8003084 <HAL_I2C_MspInit+0x74>)
 8003054:	6853      	ldr	r3, [r2, #4]
 8003056:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800305a:	f043 0302 	orr.w	r3, r3, #2
 800305e:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003060:	69e3      	ldr	r3, [r4, #28]
 8003062:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003066:	61e3      	str	r3, [r4, #28]
 8003068:	69e3      	ldr	r3, [r4, #28]
 800306a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003072:	b006      	add	sp, #24
 8003074:	bd10      	pop	{r4, pc}
 8003076:	bf00      	nop
 8003078:	40005400 	.word	0x40005400
 800307c:	40021000 	.word	0x40021000
 8003080:	40010c00 	.word	0x40010c00
 8003084:	40010000 	.word	0x40010000

08003088 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003088:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RTC_MspInit+0x30>)
 800308c:	6802      	ldr	r2, [r0, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d10f      	bne.n	80030b2 <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003092:	f002 ff8f 	bl	8005fb4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_RTC_MspInit+0x34>)
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800309e:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030a0:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <HAL_RTC_MspInit+0x38>)
 80030ae:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80030b2:	b003      	add	sp, #12
 80030b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80030b8:	40002800 	.word	0x40002800
 80030bc:	40021000 	.word	0x40021000
 80030c0:	42420000 	.word	0x42420000

080030c4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80030c4:	6803      	ldr	r3, [r0, #0]
{
 80030c6:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030cc:	d10d      	bne.n	80030ea <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030ce:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80030d2:	69da      	ldr	r2, [r3, #28]
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	61da      	str	r2, [r3, #28]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80030e4:	b003      	add	sp, #12
 80030e6:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 80030ea:	4a0c      	ldr	r2, [pc, #48]	; (800311c <HAL_TIM_Base_MspInit+0x58>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d1f9      	bne.n	80030e4 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_TIM_Base_MspInit+0x5c>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80030f2:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030f4:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80030f6:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030f8:	f042 0202 	orr.w	r2, r2, #2
 80030fc:	61da      	str	r2, [r3, #28]
 80030fe:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003100:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800310a:	f001 fef7 	bl	8004efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800310e:	201d      	movs	r0, #29
}
 8003110:	b003      	add	sp, #12
 8003112:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003116:	f001 bf21 	b.w	8004f5c <HAL_NVIC_EnableIRQ>
 800311a:	bf00      	nop
 800311c:	40000400 	.word	0x40000400
 8003120:	40021000 	.word	0x40021000

08003124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003124:	2210      	movs	r2, #16
{
 8003126:	b510      	push	{r4, lr}
 8003128:	4604      	mov	r4, r0
 800312a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	2100      	movs	r1, #0
 800312e:	eb0d 0002 	add.w	r0, sp, r2
 8003132:	f007 f8d1 	bl	800a2d8 <memset>
  if(htim->Instance==TIM2)
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313c:	d115      	bne.n	800316a <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003142:	699a      	ldr	r2, [r3, #24]
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003144:	481c      	ldr	r0, [pc, #112]	; (80031b8 <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003146:	f042 0204 	orr.w	r2, r2, #4
 800314a:	619a      	str	r2, [r3, #24]
 800314c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2208      	movs	r2, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003158:	2302      	movs	r3, #2
 800315a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003160:	a904      	add	r1, sp, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003162:	f002 f8b1 	bl	80052c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003166:	b008      	add	sp, #32
 8003168:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM3)
 800316a:	4a14      	ldr	r2, [pc, #80]	; (80031bc <HAL_TIM_MspPostInit+0x98>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d1fa      	bne.n	8003166 <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003170:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <HAL_TIM_MspPostInit+0x9c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003174:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003176:	4810      	ldr	r0, [pc, #64]	; (80031b8 <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003178:	f042 0204 	orr.w	r2, r2, #4
 800317c:	619a      	str	r2, [r3, #24]
 800317e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003180:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003182:	f002 0204 	and.w	r2, r2, #4
 8003186:	9202      	str	r2, [sp, #8]
 8003188:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318a:	699a      	ldr	r2, [r3, #24]
 800318c:	f042 0208 	orr.w	r2, r2, #8
 8003190:	619a      	str	r2, [r3, #24]
 8003192:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003194:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	9303      	str	r3, [sp, #12]
 800319c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	23c0      	movs	r3, #192	; 0xc0
 80031a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a4:	f002 f890 	bl	80052c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031a8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031aa:	4806      	ldr	r0, [pc, #24]	; (80031c4 <HAL_TIM_MspPostInit+0xa0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b2:	a904      	add	r1, sp, #16
 80031b4:	e7d5      	b.n	8003162 <HAL_TIM_MspPostInit+0x3e>
 80031b6:	bf00      	nop
 80031b8:	40010800 	.word	0x40010800
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40010c00 	.word	0x40010c00

080031c8 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	2210      	movs	r2, #16
{
 80031ca:	b570      	push	{r4, r5, r6, lr}
 80031cc:	4606      	mov	r6, r0
 80031ce:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	eb0d 0002 	add.w	r0, sp, r2
 80031d4:	2100      	movs	r1, #0
 80031d6:	f007 f87f 	bl	800a2d8 <memset>
  if(huart->Instance==USART1)
 80031da:	6833      	ldr	r3, [r6, #0]
 80031dc:	4a43      	ldr	r2, [pc, #268]	; (80032ec <HAL_UART_MspInit+0x124>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d144      	bne.n	800326c <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031e2:	4b43      	ldr	r3, [pc, #268]	; (80032f0 <HAL_UART_MspInit+0x128>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e4:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 80031e8:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ea:	4842      	ldr	r0, [pc, #264]	; (80032f4 <HAL_UART_MspInit+0x12c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80031ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031f0:	619a      	str	r2, [r3, #24]
 80031f2:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031f4:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80031f6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80031fa:	9200      	str	r2, [sp, #0]
 80031fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fe:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003200:	4c3d      	ldr	r4, [pc, #244]	; (80032f8 <HAL_UART_MspInit+0x130>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	f042 0204 	orr.w	r2, r2, #4
 8003206:	619a      	str	r2, [r3, #24]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003212:	2302      	movs	r3, #2
 8003214:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003218:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800321c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321e:	f002 f853 	bl	80052c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003222:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003226:	4833      	ldr	r0, [pc, #204]	; (80032f4 <HAL_UART_MspInit+0x12c>)
 8003228:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800322a:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003230:	f002 f84a 	bl	80052c8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003234:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_UART_MspInit+0x134>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003236:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003238:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800323c:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800323e:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003242:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003246:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003248:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800324a:	f001 fea7 	bl	8004f9c <HAL_DMA_Init>
 800324e:	b108      	cbz	r0, 8003254 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 8003250:	f7ff fc54 	bl	8002afc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003254:	2025      	movs	r0, #37	; 0x25
 8003256:	2200      	movs	r2, #0
 8003258:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800325a:	63f4      	str	r4, [r6, #60]	; 0x3c
 800325c:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800325e:	f001 fe4d 	bl	8004efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003262:	2025      	movs	r0, #37	; 0x25
 8003264:	f001 fe7a 	bl	8004f5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003268:	b008      	add	sp, #32
 800326a:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART3)
 800326c:	4a24      	ldr	r2, [pc, #144]	; (8003300 <HAL_UART_MspInit+0x138>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d1fa      	bne.n	8003268 <HAL_UART_MspInit+0xa0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003272:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <HAL_UART_MspInit+0x128>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003274:	4823      	ldr	r0, [pc, #140]	; (8003304 <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003276:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003278:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 800327a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800327e:	61da      	str	r2, [r3, #28]
 8003280:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003282:	2500      	movs	r5, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8003284:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003288:	9202      	str	r2, [sp, #8]
 800328a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800328c:	699a      	ldr	r2, [r3, #24]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800328e:	4c1e      	ldr	r4, [pc, #120]	; (8003308 <HAL_UART_MspInit+0x140>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003290:	f042 0208 	orr.w	r2, r2, #8
 8003294:	619a      	str	r2, [r3, #24]
 8003296:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003298:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	9303      	str	r3, [sp, #12]
 80032a2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032aa:	2303      	movs	r3, #3
 80032ac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ae:	f002 f80b 	bl	80052c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b6:	4813      	ldr	r0, [pc, #76]	; (8003304 <HAL_UART_MspInit+0x13c>)
 80032b8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032ba:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c0:	f002 f802 	bl	80052c8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80032c4:	4b11      	ldr	r3, [pc, #68]	; (800330c <HAL_UART_MspInit+0x144>)
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80032c6:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032c8:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032cc:	2380      	movs	r3, #128	; 0x80
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032ce:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80032d2:	2320      	movs	r3, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032d4:	60a5      	str	r5, [r4, #8]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032d6:	e9c4 3506 	strd	r3, r5, [r4, #24]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032da:	6165      	str	r5, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80032dc:	f001 fe5e 	bl	8004f9c <HAL_DMA_Init>
 80032e0:	b108      	cbz	r0, 80032e6 <HAL_UART_MspInit+0x11e>
      Error_Handler();
 80032e2:	f7ff fc0b 	bl	8002afc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80032e6:	63f4      	str	r4, [r6, #60]	; 0x3c
 80032e8:	6266      	str	r6, [r4, #36]	; 0x24
}
 80032ea:	e7bd      	b.n	8003268 <HAL_UART_MspInit+0xa0>
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40010800 	.word	0x40010800
 80032f8:	2000104c 	.word	0x2000104c
 80032fc:	40020058 	.word	0x40020058
 8003300:	40004800 	.word	0x40004800
 8003304:	40010c00 	.word	0x40010c00
 8003308:	20001090 	.word	0x20001090
 800330c:	40020030 	.word	0x40020030

08003310 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART1)
 8003310:	6803      	ldr	r3, [r0, #0]
 8003312:	4a16      	ldr	r2, [pc, #88]	; (800336c <HAL_UART_MspDeInit+0x5c>)
{
 8003314:	b510      	push	{r4, lr}
  if(huart->Instance==USART1)
 8003316:	4293      	cmp	r3, r2
{
 8003318:	4604      	mov	r4, r0
  if(huart->Instance==USART1)
 800331a:	d112      	bne.n	8003342 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800331c:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8003320:	6993      	ldr	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003322:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 8003326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800332a:	4811      	ldr	r0, [pc, #68]	; (8003370 <HAL_UART_MspDeInit+0x60>)
    __HAL_RCC_USART1_CLK_DISABLE();
 800332c:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800332e:	f002 f8a5 	bl	800547c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8003332:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003334:	f001 fe64 	bl	8005000 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8003338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800333c:	2025      	movs	r0, #37	; 0x25
 800333e:	f001 be1b 	b.w	8004f78 <HAL_NVIC_DisableIRQ>
  else if(huart->Instance==USART3)
 8003342:	4a0c      	ldr	r2, [pc, #48]	; (8003374 <HAL_UART_MspDeInit+0x64>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d10f      	bne.n	8003368 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003348:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800334c:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800334e:	480a      	ldr	r0, [pc, #40]	; (8003378 <HAL_UART_MspDeInit+0x68>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8003350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8003354:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    __HAL_RCC_USART3_CLK_DISABLE();
 8003358:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800335a:	f002 f88f 	bl	800547c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800335e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8003360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(huart->hdmarx);
 8003364:	f001 be4c 	b.w	8005000 <HAL_DMA_DeInit>
}
 8003368:	bd10      	pop	{r4, pc}
 800336a:	bf00      	nop
 800336c:	40013800 	.word	0x40013800
 8003370:	40010800 	.word	0x40010800
 8003374:	40004800 	.word	0x40004800
 8003378:	40010c00 	.word	0x40010c00

0800337c <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800337c:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <HAL_InitTick+0x7c>)
{
 800337e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003380:	699a      	ldr	r2, [r3, #24]
{
 8003382:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003388:	619a      	str	r2, [r3, #24]
 800338a:	699b      	ldr	r3, [r3, #24]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800338c:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 800338e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003392:	9302      	str	r3, [sp, #8]
{
 8003394:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003396:	a803      	add	r0, sp, #12

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003398:	4d18      	ldr	r5, [pc, #96]	; (80033fc <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800339a:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800339c:	f003 f88e 	bl	80064bc <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80033a0:	f003 f87c 	bl	800649c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80033a4:	4b16      	ldr	r3, [pc, #88]	; (8003400 <HAL_InitTick+0x84>)
 80033a6:	602b      	str	r3, [r5, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80033a8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80033ac:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <HAL_InitTick+0x88>)
 80033b0:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80033b4:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033b6:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80033b8:	6068      	str	r0, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 80033ba:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 80033bc:	612b      	str	r3, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033be:	60ab      	str	r3, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033c0:	61ab      	str	r3, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 80033c2:	f003 fca3 	bl	8006d0c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80033c6:	4604      	mov	r4, r0
 80033c8:	b980      	cbnz	r0, 80033ec <HAL_InitTick+0x70>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80033ca:	4628      	mov	r0, r5
 80033cc:	f003 fb94 	bl	8006af8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80033d0:	4604      	mov	r4, r0
 80033d2:	b958      	cbnz	r0, 80033ec <HAL_InitTick+0x70>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80033d4:	2019      	movs	r0, #25
 80033d6:	f001 fdc1 	bl	8004f5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033da:	2e0f      	cmp	r6, #15
 80033dc:	d809      	bhi.n	80033f2 <HAL_InitTick+0x76>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80033de:	4622      	mov	r2, r4
 80033e0:	4631      	mov	r1, r6
 80033e2:	2019      	movs	r0, #25
 80033e4:	f001 fd8a 	bl	8004efc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033e8:	4b07      	ldr	r3, [pc, #28]	; (8003408 <HAL_InitTick+0x8c>)
 80033ea:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80033ec:	4620      	mov	r0, r4
 80033ee:	b008      	add	sp, #32
 80033f0:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 80033f2:	2401      	movs	r4, #1
 80033f4:	e7fa      	b.n	80033ec <HAL_InitTick+0x70>
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	2000129c 	.word	0x2000129c
 8003400:	40012c00 	.word	0x40012c00
 8003404:	000f4240 	.word	0x000f4240
 8003408:	20000008 	.word	0x20000008

0800340c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800340c:	e7fe      	b.n	800340c <NMI_Handler>

0800340e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800340e:	e7fe      	b.n	800340e <HardFault_Handler>

08003410 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003410:	e7fe      	b.n	8003410 <MemManage_Handler>

08003412 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003412:	e7fe      	b.n	8003412 <BusFault_Handler>

08003414 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003414:	e7fe      	b.n	8003414 <UsageFault_Handler>

08003416 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003416:	4770      	bx	lr

08003418 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003418:	4801      	ldr	r0, [pc, #4]	; (8003420 <DMA1_Channel1_IRQHandler+0x8>)
 800341a:	f001 bec1 	b.w	80051a0 <HAL_DMA_IRQHandler>
 800341e:	bf00      	nop
 8003420:	20001008 	.word	0x20001008

08003424 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003424:	4801      	ldr	r0, [pc, #4]	; (800342c <DMA1_Channel3_IRQHandler+0x8>)
 8003426:	f001 bebb 	b.w	80051a0 <HAL_DMA_IRQHandler>
 800342a:	bf00      	nop
 800342c:	20001090 	.word	0x20001090

08003430 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003430:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003432:	4804      	ldr	r0, [pc, #16]	; (8003444 <DMA1_Channel5_IRQHandler+0x14>)
 8003434:	f001 feb4 	bl	80051a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  BLEDMA_IrqHandler(&bluetooth);
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003438:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BLEDMA_IrqHandler(&bluetooth);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <DMA1_Channel5_IRQHandler+0x18>)
 800343e:	f7fd bedd 	b.w	80011fc <BLEDMA_IrqHandler>
 8003442:	bf00      	nop
 8003444:	2000104c 	.word	0x2000104c
 8003448:	20000ef4 	.word	0x20000ef4

0800344c <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800344c:	4801      	ldr	r0, [pc, #4]	; (8003454 <TIM1_UP_IRQHandler+0x8>)
 800344e:	f003 bb82 	b.w	8006b56 <HAL_TIM_IRQHandler>
 8003452:	bf00      	nop
 8003454:	2000129c 	.word	0x2000129c

08003458 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003458:	4801      	ldr	r0, [pc, #4]	; (8003460 <TIM3_IRQHandler+0x8>)
 800345a:	f003 bb7c 	b.w	8006b56 <HAL_TIM_IRQHandler>
 800345e:	bf00      	nop
 8003460:	20001184 	.word	0x20001184

08003464 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003464:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003466:	4804      	ldr	r0, [pc, #16]	; (8003478 <USART1_IRQHandler+0x14>)
 8003468:	f004 f970 	bl	800774c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  BLEUSART_IrqHandler(&bluetooth);
  /* USER CODE END USART1_IRQn 1 */
}
 800346c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BLEUSART_IrqHandler(&bluetooth);
 8003470:	4802      	ldr	r0, [pc, #8]	; (800347c <USART1_IRQHandler+0x18>)
 8003472:	f7fe b806 	b.w	8001482 <BLEUSART_IrqHandler>
 8003476:	bf00      	nop
 8003478:	200011cc 	.word	0x200011cc
 800347c:	20000ef4 	.word	0x20000ef4

08003480 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	460d      	mov	r5, r1
 8003484:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003486:	460e      	mov	r6, r1
 8003488:	1b73      	subs	r3, r6, r5
 800348a:	429c      	cmp	r4, r3
 800348c:	dc01      	bgt.n	8003492 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800348e:	4620      	mov	r0, r4
 8003490:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8003492:	f3af 8000 	nop.w
 8003496:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349a:	e7f5      	b.n	8003488 <_read+0x8>

0800349c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	460d      	mov	r5, r1
 80034a0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a2:	460e      	mov	r6, r1
 80034a4:	1b73      	subs	r3, r6, r5
 80034a6:	429c      	cmp	r4, r3
 80034a8:	dc01      	bgt.n	80034ae <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80034aa:	4620      	mov	r0, r4
 80034ac:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80034ae:	f816 0b01 	ldrb.w	r0, [r6], #1
 80034b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b6:	e7f5      	b.n	80034a4 <_write+0x8>

080034b8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	4770      	bx	lr

080034be <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80034be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 80034c2:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80034c4:	604b      	str	r3, [r1, #4]
}
 80034c6:	4770      	bx	lr

080034c8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80034c8:	2001      	movs	r0, #1
 80034ca:	4770      	bx	lr

080034cc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80034cc:	2000      	movs	r0, #0
 80034ce:	4770      	bx	lr

080034d0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034d0:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <_sbrk+0x30>)
{
 80034d2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80034d4:	6811      	ldr	r1, [r2, #0]
{
 80034d6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80034d8:	b909      	cbnz	r1, 80034de <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80034da:	490a      	ldr	r1, [pc, #40]	; (8003504 <_sbrk+0x34>)
 80034dc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034de:	6810      	ldr	r0, [r2, #0]
 80034e0:	4909      	ldr	r1, [pc, #36]	; (8003508 <_sbrk+0x38>)
 80034e2:	4c0a      	ldr	r4, [pc, #40]	; (800350c <_sbrk+0x3c>)
 80034e4:	4403      	add	r3, r0
 80034e6:	1b09      	subs	r1, r1, r4
 80034e8:	428b      	cmp	r3, r1
 80034ea:	d906      	bls.n	80034fa <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80034ec:	f006 ffbe 	bl	800a46c <__errno>
 80034f0:	230c      	movs	r3, #12
 80034f2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80034f8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80034fa:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80034fc:	e7fc      	b.n	80034f8 <_sbrk+0x28>
 80034fe:	bf00      	nop
 8003500:	200012e4 	.word	0x200012e4
 8003504:	20002d20 	.word	0x20002d20
 8003508:	20005000 	.word	0x20005000
 800350c:	00000400 	.word	0x00000400

08003510 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003510:	4770      	bx	lr
	...

08003514 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003514:	f7ff fffc 	bl	8003510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003518:	480b      	ldr	r0, [pc, #44]	; (8003548 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800351a:	490c      	ldr	r1, [pc, #48]	; (800354c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800351c:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <LoopFillZerobss+0x16>)
  movs r3, #0
 800351e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003520:	e002      	b.n	8003528 <LoopCopyDataInit>

08003522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003526:	3304      	adds	r3, #4

08003528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800352a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800352c:	d3f9      	bcc.n	8003522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800352e:	4a09      	ldr	r2, [pc, #36]	; (8003554 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003530:	4c09      	ldr	r4, [pc, #36]	; (8003558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003534:	e001      	b.n	800353a <LoopFillZerobss>

08003536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003538:	3204      	adds	r2, #4

0800353a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800353a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800353c:	d3fb      	bcc.n	8003536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800353e:	f006 ff9b 	bl	800a478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003542:	f7fe febd 	bl	80022c0 <main>
  bx lr
 8003546:	4770      	bx	lr
  ldr r0, =_sdata
 8003548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800354c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003550:	0800b6a4 	.word	0x0800b6a4
  ldr r2, =_sbss
 8003554:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003558:	20002d1c 	.word	0x20002d1c

0800355c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800355c:	e7fe      	b.n	800355c <ADC1_2_IRQHandler>
	...

08003560 <initBluetooth>:

		osThreadYield();
		osDelay(40);
	}
}
void initBluetooth(void){
 8003560:	b513      	push	{r0, r1, r4, lr}

	//inicializacao do bluetooth
	//todo tratar returns
	bleConstrutora(&bluetooth, &huart1, &hdma_usart1_rx, &FilaRXBluetoothHandle,&FilaTXBluetoothHandle,&FilaBleComandoHandle);
 8003562:	4b34      	ldr	r3, [pc, #208]	; (8003634 <initBluetooth+0xd4>)
 8003564:	4c34      	ldr	r4, [pc, #208]	; (8003638 <initBluetooth+0xd8>)
 8003566:	9301      	str	r3, [sp, #4]
 8003568:	4b34      	ldr	r3, [pc, #208]	; (800363c <initBluetooth+0xdc>)
 800356a:	4620      	mov	r0, r4
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	4a34      	ldr	r2, [pc, #208]	; (8003640 <initBluetooth+0xe0>)
 8003570:	4b34      	ldr	r3, [pc, #208]	; (8003644 <initBluetooth+0xe4>)
 8003572:	4935      	ldr	r1, [pc, #212]	; (8003648 <initBluetooth+0xe8>)
 8003574:	f7fe f956 	bl	8001824 <bleConstrutora>

	//possiveis comandos a serem recebidos pelo bluetooth
	bleAddComp(&bluetooth, &BLEAtualizaRealtime,	RX_SOLICITA_REALTIME	);
 8003578:	2215      	movs	r2, #21
 800357a:	4620      	mov	r0, r4
 800357c:	4933      	ldr	r1, [pc, #204]	; (800364c <initBluetooth+0xec>)
 800357e:	f7fd fd99 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLESolicitaSincronia, 	RX_SOLICITA_SINCRONIA	);
 8003582:	2217      	movs	r2, #23
 8003584:	4620      	mov	r0, r4
 8003586:	4932      	ldr	r1, [pc, #200]	; (8003650 <initBluetooth+0xf0>)
 8003588:	f7fd fd94 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLEAlteraLimiteTemp, 	RX_LIMITE_TEMPERATURA	);
 800358c:	2226      	movs	r2, #38	; 0x26
 800358e:	4620      	mov	r0, r4
 8003590:	4930      	ldr	r1, [pc, #192]	; (8003654 <initBluetooth+0xf4>)
 8003592:	f7fd fd8f 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLEAtualizaDataHora,	RX_ATUALIZA_HORA		);
 8003596:	2203      	movs	r2, #3
 8003598:	4620      	mov	r0, r4
 800359a:	492f      	ldr	r1, [pc, #188]	; (8003658 <initBluetooth+0xf8>)
 800359c:	f7fd fd8a 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLERestaura, 			RX_RESTAURA				);
 80035a0:	2210      	movs	r2, #16
 80035a2:	4620      	mov	r0, r4
 80035a4:	492d      	ldr	r1, [pc, #180]	; (800365c <initBluetooth+0xfc>)
 80035a6:	f7fd fd85 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLERestauraHard, 		RX_RESTAURA_HARD		);
 80035aa:	2209      	movs	r2, #9
 80035ac:	4620      	mov	r0, r4
 80035ae:	492c      	ldr	r1, [pc, #176]	; (8003660 <initBluetooth+0x100>)
 80035b0:	f7fd fd80 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLESPTeto,     			RX_SP_TEMP_TETO			);
 80035b4:	2221      	movs	r2, #33	; 0x21
 80035b6:	4620      	mov	r0, r4
 80035b8:	492a      	ldr	r1, [pc, #168]	; (8003664 <initBluetooth+0x104>)
 80035ba:	f7fd fd7b 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLESPLastro,     	   	RX_SP_TEMP_LASTRO		);
 80035be:	2222      	movs	r2, #34	; 0x22
 80035c0:	4620      	mov	r0, r4
 80035c2:	4929      	ldr	r1, [pc, #164]	; (8003668 <initBluetooth+0x108>)
 80035c4:	f7fd fd76 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLESPTempo,     		RX_SP_TEMPO				);
 80035c8:	2223      	movs	r2, #35	; 0x23
 80035ca:	4620      	mov	r0, r4
 80035cc:	4927      	ldr	r1, [pc, #156]	; (800366c <initBluetooth+0x10c>)
 80035ce:	f7fd fd71 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLEToggleTempo,      	RX_TOGGLE_TEMPO			);
 80035d2:	2224      	movs	r2, #36	; 0x24
 80035d4:	4620      	mov	r0, r4
 80035d6:	4926      	ldr	r1, [pc, #152]	; (8003670 <initBluetooth+0x110>)
 80035d8:	f7fd fd6c 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLEReceita,     	  	RX_RECEITA				);
 80035dc:	2225      	movs	r2, #37	; 0x25
 80035de:	4620      	mov	r0, r4
 80035e0:	4924      	ldr	r1, [pc, #144]	; (8003674 <initBluetooth+0x114>)
 80035e2:	f7fd fd67 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLELightOn,     	  	RX_LIGA_LAMPADA			);
 80035e6:	2227      	movs	r2, #39	; 0x27
 80035e8:	4620      	mov	r0, r4
 80035ea:	4923      	ldr	r1, [pc, #140]	; (8003678 <initBluetooth+0x118>)
 80035ec:	f7fd fd62 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLELightOff,     	 	RX_DESLIGA_LAMPADA		);
 80035f0:	2228      	movs	r2, #40	; 0x28
 80035f2:	4620      	mov	r0, r4
 80035f4:	4921      	ldr	r1, [pc, #132]	; (800367c <initBluetooth+0x11c>)
 80035f6:	f7fd fd5d 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLESetaLampada,     	RX_LIMITE_LAMPADA		);
 80035fa:	2230      	movs	r2, #48	; 0x30
 80035fc:	4620      	mov	r0, r4
 80035fe:	4920      	ldr	r1, [pc, #128]	; (8003680 <initBluetooth+0x120>)
 8003600:	f7fd fd58 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLECancelaProcesso,   	RX_CANCELA_PROCESSO		);
 8003604:	2229      	movs	r2, #41	; 0x29
 8003606:	4620      	mov	r0, r4
 8003608:	491e      	ldr	r1, [pc, #120]	; (8003684 <initBluetooth+0x124>)
 800360a:	f7fd fd53 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLETunningTeto,     	RX_TUNNING_TETO			);
 800360e:	2233      	movs	r2, #51	; 0x33
 8003610:	4620      	mov	r0, r4
 8003612:	491d      	ldr	r1, [pc, #116]	; (8003688 <initBluetooth+0x128>)
 8003614:	f7fd fd4e 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLETunningLastro,  		RX_TUNNING_LASTRO		);
 8003618:	2234      	movs	r2, #52	; 0x34
 800361a:	4620      	mov	r0, r4
 800361c:	491b      	ldr	r1, [pc, #108]	; (800368c <initBluetooth+0x12c>)
 800361e:	f7fd fd49 	bl	80010b4 <bleAddComp>
	bleAddComp(&bluetooth, &BLEToggleBuzzer,  		RX_TOGGLE_BUZZER		);
 8003622:	2235      	movs	r2, #53	; 0x35
 8003624:	4620      	mov	r0, r4
 8003626:	491a      	ldr	r1, [pc, #104]	; (8003690 <initBluetooth+0x130>)

}
 8003628:	b002      	add	sp, #8
 800362a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bleAddComp(&bluetooth, &BLEToggleBuzzer,  		RX_TOGGLE_BUZZER		);
 800362e:	f7fd bd41 	b.w	80010b4 <bleAddComp>
 8003632:	bf00      	nop
 8003634:	200007e4 	.word	0x200007e4
 8003638:	20000ef4 	.word	0x20000ef4
 800363c:	2000088c 	.word	0x2000088c
 8003640:	2000104c 	.word	0x2000104c
 8003644:	20000838 	.word	0x20000838
 8003648:	200011cc 	.word	0x200011cc
 800364c:	200012ec 	.word	0x200012ec
 8003650:	20001302 	.word	0x20001302
 8003654:	200012e8 	.word	0x200012e8
 8003658:	200012ea 	.word	0x200012ea
 800365c:	200012f6 	.word	0x200012f6
 8003660:	200012f8 	.word	0x200012f8
 8003664:	200012fe 	.word	0x200012fe
 8003668:	200012fa 	.word	0x200012fa
 800366c:	200012fc 	.word	0x200012fc
 8003670:	20001306 	.word	0x20001306
 8003674:	200012f4 	.word	0x200012f4
 8003678:	200012f2 	.word	0x200012f2
 800367c:	200012f0 	.word	0x200012f0
 8003680:	20001300 	.word	0x20001300
 8003684:	200012ee 	.word	0x200012ee
 8003688:	2000130a 	.word	0x2000130a
 800368c:	20001308 	.word	0x20001308
 8003690:	20001304 	.word	0x20001304

08003694 <taskBluetooth1sec>:
void taskBluetooth1sec(void){

	//---monitor de inatividade
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 8003694:	4a0c      	ldr	r2, [pc, #48]	; (80036c8 <taskBluetooth1sec+0x34>)
void taskBluetooth1sec(void){
 8003696:	b508      	push	{r3, lr}
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 8003698:	8813      	ldrh	r3, [r2, #0]
 800369a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800369e:	d30b      	bcc.n	80036b8 <taskBluetooth1sec+0x24>
		desligaForno();
 80036a0:	f7ff f95a 	bl	8002958 <desligaForno>
	}else if(PrimitiveStates.stateTimer != TIMER_decrementando){
		tempoSemAtividade++;
	}

	//---sequenciamento de envio de sincronia
	if(bluetooth.MaquinaConexao == RX_DESCONECTADO){
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <taskBluetooth1sec+0x38>)
 80036a6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80036aa:	2b01      	cmp	r3, #1
		FlagSincronia.cont=0;
 80036ac:	bf01      	itttt	eq
 80036ae:	2200      	moveq	r2, #0
 80036b0:	4b07      	ldreq	r3, [pc, #28]	; (80036d0 <taskBluetooth1sec+0x3c>)
 80036b2:	705a      	strbeq	r2, [r3, #1]
		FlagSincronia.flag=0;
 80036b4:	701a      	strbeq	r2, [r3, #0]
	}
	/*
	 * ao conectar, seta a FlagSincronia
	 * ao desconectar, reseta a FlagSincronia
	 * */
}
 80036b6:	bd08      	pop	{r3, pc}
	}else if(PrimitiveStates.stateTimer != TIMER_decrementando){
 80036b8:	4906      	ldr	r1, [pc, #24]	; (80036d4 <taskBluetooth1sec+0x40>)
 80036ba:	f891 110d 	ldrb.w	r1, [r1, #269]	; 0x10d
 80036be:	2901      	cmp	r1, #1
		tempoSemAtividade++;
 80036c0:	bf1c      	itt	ne
 80036c2:	3301      	addne	r3, #1
 80036c4:	8013      	strhne	r3, [r2, #0]
 80036c6:	e7ed      	b.n	80036a4 <taskBluetooth1sec+0x10>
 80036c8:	2000130e 	.word	0x2000130e
 80036cc:	20000ef4 	.word	0x20000ef4
 80036d0:	2000130c 	.word	0x2000130c
 80036d4:	20000890 	.word	0x20000890

080036d8 <txBluetooth>:
void txBluetooth(void){
 80036d8:	b510      	push	{r4, lr}
	unsigned char	Buffer		[BLUETOOTH_MAX_BUFF_LEN];
	osEvent  evttx;
	evttx = osMessageGet(FilaTXBluetoothHandle, 10);
 80036da:	4b86      	ldr	r3, [pc, #536]	; (80038f4 <txBluetooth+0x21c>)
void txBluetooth(void){
 80036dc:	b08a      	sub	sp, #40	; 0x28
	evttx = osMessageGet(FilaTXBluetoothHandle, 10);
 80036de:	6819      	ldr	r1, [r3, #0]
 80036e0:	220a      	movs	r2, #10
 80036e2:	a801      	add	r0, sp, #4
 80036e4:	f004 fb05 	bl	8007cf2 <osMessageGet>
	if (evttx.status == osEventMessage) {
 80036e8:	9b01      	ldr	r3, [sp, #4]
 80036ea:	2b10      	cmp	r3, #16
 80036ec:	d115      	bne.n	800371a <txBluetooth+0x42>
		switch ((unsigned int)evttx.value.p) {
 80036ee:	9b02      	ldr	r3, [sp, #8]
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d80c      	bhi.n	800370e <txBluetooth+0x36>
 80036f4:	2b15      	cmp	r3, #21
 80036f6:	d910      	bls.n	800371a <txBluetooth+0x42>
 80036f8:	3b16      	subs	r3, #22
 80036fa:	2b0a      	cmp	r3, #10
 80036fc:	d80d      	bhi.n	800371a <txBluetooth+0x42>
 80036fe:	e8df f003 	tbb	[pc, r3]
 8003702:	510e      	.short	0x510e
 8003704:	0c0ca882 	.word	0x0c0ca882
 8003708:	0c0c0c0c 	.word	0x0c0c0c0c
 800370c:	cb          	.byte	0xcb
 800370d:	00          	.byte	0x00
 800370e:	2b29      	cmp	r3, #41	; 0x29
 8003710:	f000 80e1 	beq.w	80038d6 <txBluetooth+0x1fe>
 8003714:	2b30      	cmp	r3, #48	; 0x30
 8003716:	f000 80e6 	beq.w	80038e6 <txBluetooth+0x20e>
			bluetoothEnviaComando(&bluetooth,Buffer, 2);

			break;
		}
	}
}
 800371a:	b00a      	add	sp, #40	; 0x28
 800371c:	bd10      	pop	{r4, pc}
			Buffer[0] 	= 0x01;									// ENDEREÇO
 800371e:	f241 6301 	movw	r3, #5633	; 0x1601
			Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003722:	4c75      	ldr	r4, [pc, #468]	; (80038f8 <txBluetooth+0x220>)
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003724:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003728:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
			Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 800372c:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
			Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003730:	f88d 3012 	strb.w	r3, [sp, #18]
			Buffer[3] 	= PrimitiveStates.Teto._PWMstate;
 8003734:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8003738:	f88d 3013 	strb.w	r3, [sp, #19]
			Buffer[4] 	= PrimitiveStates.Lastro._PWMstate;
 800373c:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 8003740:	f88d 3014 	strb.w	r3, [sp, #20]
			Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003744:	f7fd f962 	bl	8000a0c <__aeabi_d2uiz>
 8003748:	f3c0 2307 	ubfx	r3, r0, #8, #8
			Buffer[6] 	= (uint16_t)PrimitiveStates.Teto.realtime 		& 0x00FF;
 800374c:	f88d 0016 	strb.w	r0, [sp, #22]
			Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003750:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
			Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003754:	f88d 3015 	strb.w	r3, [sp, #21]
			Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003758:	f7fd f958 	bl	8000a0c <__aeabi_d2uiz>
 800375c:	f3c0 2307 	ubfx	r3, r0, #8, #8
			Buffer[8] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		& 0x00FF;
 8003760:	f88d 0018 	strb.w	r0, [sp, #24]
			Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 8003764:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
			Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003768:	f88d 3017 	strb.w	r3, [sp, #23]
			Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 800376c:	f7fd f94e 	bl	8000a0c <__aeabi_d2uiz>
 8003770:	f3c0 2307 	ubfx	r3, r0, #8, #8
			Buffer[10] 	= (uint16_t)PrimitiveStates.Lastro.realtime 	& 0x00FF;
 8003774:	f88d 001a 	strb.w	r0, [sp, #26]
			Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 8003778:	e9d4 013c 	ldrd	r0, r1, [r4, #240]	; 0xf0
			Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 800377c:	f88d 3019 	strb.w	r3, [sp, #25]
			Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 8003780:	f7fd f944 	bl	8000a0c <__aeabi_d2uiz>
			bluetoothEnviaComando(&bluetooth,Buffer, 13);
 8003784:	220d      	movs	r2, #13
			Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 8003786:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800378a:	f88d 301b 	strb.w	r3, [sp, #27]
			Buffer[13] 	= PrimitiveStates.Buzzer;
 800378e:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
			Buffer[12] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	& 0x00FF;
 8003792:	f88d 001c 	strb.w	r0, [sp, #28]
			Buffer[13] 	= PrimitiveStates.Buzzer;
 8003796:	f88d 301d 	strb.w	r3, [sp, #29]
			bluetoothEnviaComando(&bluetooth,Buffer, 2);
 800379a:	a904      	add	r1, sp, #16
 800379c:	4857      	ldr	r0, [pc, #348]	; (80038fc <txBluetooth+0x224>)
 800379e:	f7fd fde1 	bl	8001364 <bluetoothEnviaComando>
}
 80037a2:	e7ba      	b.n	800371a <txBluetooth+0x42>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80037a4:	f241 7301 	movw	r3, #5889	; 0x1701
 80037a8:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= PrimitiveStates.stateTimer;			// State da maquina de timer
 80037ac:	4b52      	ldr	r3, [pc, #328]	; (80038f8 <txBluetooth+0x220>)
 80037ae:	f893 210d 	ldrb.w	r2, [r3, #269]	; 0x10d
 80037b2:	f88d 2012 	strb.w	r2, [sp, #18]
			Buffer[3] 	= PrimitiveStates.RTTimerMinutos;
 80037b6:	f893 210b 	ldrb.w	r2, [r3, #267]	; 0x10b
 80037ba:	f88d 2013 	strb.w	r2, [sp, #19]
			Buffer[4] 	= PrimitiveStates.RTTimerSegundos;
 80037be:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80037c2:	f88d 2014 	strb.w	r2, [sp, #20]
			Buffer[5] 	= PrimitiveStates.SPTimerMinutos;
 80037c6:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 80037ca:	f88d 2015 	strb.w	r2, [sp, #21]
			Buffer[6] 	= PrimitiveStates.SPTimerSegundos;
 80037ce:	f893 210a 	ldrb.w	r2, [r3, #266]	; 0x10a
			Buffer[10]	= PrimitiveStates.Lampada._state;
 80037d2:	7a1b      	ldrb	r3, [r3, #8]
			Buffer[6] 	= PrimitiveStates.SPTimerSegundos;
 80037d4:	f88d 2016 	strb.w	r2, [sp, #22]
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 80037d8:	4a49      	ldr	r2, [pc, #292]	; (8003900 <txBluetooth+0x228>)
			Buffer[10]	= PrimitiveStates.Lampada._state;
 80037da:	f88d 301a 	strb.w	r3, [sp, #26]
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 80037de:	68d2      	ldr	r2, [r2, #12]
			Buffer[11] 	= (uint16_t)Calendario.TotalCiclos >> 8;
 80037e0:	4b48      	ldr	r3, [pc, #288]	; (8003904 <txBluetooth+0x22c>)
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 80037e2:	f3c2 2107 	ubfx	r1, r2, #8, #8
			Buffer[8] 	= (uint16_t)horimetroHoras.valor & 0x00FF;
 80037e6:	f88d 2018 	strb.w	r2, [sp, #24]
			Buffer[9] 	= (uint8_t)horimetroMinutos.valor;
 80037ea:	4a47      	ldr	r2, [pc, #284]	; (8003908 <txBluetooth+0x230>)
			Buffer[11] 	= (uint16_t)Calendario.TotalCiclos >> 8;
 80037ec:	891b      	ldrh	r3, [r3, #8]
			Buffer[9] 	= (uint8_t)horimetroMinutos.valor;
 80037ee:	68d2      	ldr	r2, [r2, #12]
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 80037f0:	f88d 1017 	strb.w	r1, [sp, #23]
			Buffer[9] 	= (uint8_t)horimetroMinutos.valor;
 80037f4:	f88d 2019 	strb.w	r2, [sp, #25]
			Buffer[11] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 80037f8:	0a1a      	lsrs	r2, r3, #8
 80037fa:	f88d 201b 	strb.w	r2, [sp, #27]
			Buffer[12] 	= (uint16_t)Calendario.ContMaxLastro & 0x00FF;
 80037fe:	f88d 301c 	strb.w	r3, [sp, #28]
			bluetoothEnviaComando(&bluetooth,Buffer, 12);
 8003802:	220c      	movs	r2, #12
 8003804:	e7c9      	b.n	800379a <txBluetooth+0xc2>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003806:	f641 0301 	movw	r3, #6145	; 0x1801
 800380a:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= 0x01;									// Modelo
 800380e:	2301      	movs	r3, #1
 8003810:	f88d 3012 	strb.w	r3, [sp, #18]
			Buffer[3] 	= (uint16_t)PrimitiveStates.Lampada.limitOn >> 8;
 8003814:	4b38      	ldr	r3, [pc, #224]	; (80038f8 <txBluetooth+0x220>)
 8003816:	89db      	ldrh	r3, [r3, #14]
 8003818:	0a1a      	lsrs	r2, r3, #8
			Buffer[4] 	= (uint16_t)PrimitiveStates.Lampada.limitOn & 0x00FF;
 800381a:	f88d 3014 	strb.w	r3, [sp, #20]
			Buffer[5] 	= (uint8_t)instalacaoDia.valor;
 800381e:	4b3b      	ldr	r3, [pc, #236]	; (800390c <txBluetooth+0x234>)
			Buffer[3] 	= (uint16_t)PrimitiveStates.Lampada.limitOn >> 8;
 8003820:	f88d 2013 	strb.w	r2, [sp, #19]
			Buffer[5] 	= (uint8_t)instalacaoDia.valor;
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f88d 3015 	strb.w	r3, [sp, #21]
			Buffer[6] 	= (uint8_t)instalacaoMes.valor;
 800382a:	4b39      	ldr	r3, [pc, #228]	; (8003910 <txBluetooth+0x238>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f88d 3016 	strb.w	r3, [sp, #22]
			Buffer[7] 	= (uint8_t)instalacaoAno.valor;
 8003832:	4b38      	ldr	r3, [pc, #224]	; (8003914 <txBluetooth+0x23c>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f88d 3017 	strb.w	r3, [sp, #23]
			Buffer[8]	= VERSAO;
 800383a:	2302      	movs	r3, #2
 800383c:	f88d 3018 	strb.w	r3, [sp, #24]
			Buffer[9] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 8003840:	4b30      	ldr	r3, [pc, #192]	; (8003904 <txBluetooth+0x22c>)
 8003842:	895a      	ldrh	r2, [r3, #10]
			Buffer[11] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 8003844:	899b      	ldrh	r3, [r3, #12]
			Buffer[9] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 8003846:	0a11      	lsrs	r1, r2, #8
 8003848:	f88d 1019 	strb.w	r1, [sp, #25]
			Buffer[10] 	= (uint16_t)Calendario.ContMaxTeto & 0x00FF;
 800384c:	f88d 201a 	strb.w	r2, [sp, #26]
			Buffer[11] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 8003850:	e7d2      	b.n	80037f8 <txBluetooth+0x120>
			Buffer[0] = 0x01;
 8003852:	f641 1301 	movw	r3, #6401	; 0x1901
			float_TO_vetor4b(PrimitiveStates.Teto.kp, Buffer, 2);
 8003856:	4c28      	ldr	r4, [pc, #160]	; (80038f8 <txBluetooth+0x220>)
			Buffer[0] = 0x01;
 8003858:	f8ad 3010 	strh.w	r3, [sp, #16]
			float_TO_vetor4b(PrimitiveStates.Teto.kp, Buffer, 2);
 800385c:	aa04      	add	r2, sp, #16
 800385e:	2302      	movs	r3, #2
 8003860:	e9d4 0120 	ldrd	r0, r1, [r4, #128]	; 0x80
 8003864:	f7fe f876 	bl	8001954 <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Teto.ki, Buffer, 6);
 8003868:	e9d4 0122 	ldrd	r0, r1, [r4, #136]	; 0x88
 800386c:	2306      	movs	r3, #6
 800386e:	aa04      	add	r2, sp, #16
 8003870:	f7fe f870 	bl	8001954 <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Teto.kd, Buffer, 10);
 8003874:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	; 0x90
 8003878:	230a      	movs	r3, #10
 800387a:	aa04      	add	r2, sp, #16
 800387c:	f7fe f86a 	bl	8001954 <float_TO_vetor4b>
			Buffer[14] 	= (uint16_t)PrimitiveStates.Teto.histerese 	>>8;
 8003880:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8003884:	ba5b      	rev16	r3, r3
 8003886:	f8ad 301e 	strh.w	r3, [sp, #30]
			Buffer[16] 	= (uint16_t)PrimitiveStates.Teto.limite 		>>8;
 800388a:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
			Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 800388e:	ba5b      	rev16	r3, r3
			bluetoothEnviaComando(&bluetooth,Buffer, 17);
 8003890:	2211      	movs	r2, #17
			Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 8003892:	f8ad 3020 	strh.w	r3, [sp, #32]
			bluetoothEnviaComando(&bluetooth,Buffer, 17);
 8003896:	e780      	b.n	800379a <txBluetooth+0xc2>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003898:	f242 0301 	movw	r3, #8193	; 0x2001
			float_TO_vetor4b(PrimitiveStates.Lastro.kp, Buffer, 2);
 800389c:	4c16      	ldr	r4, [pc, #88]	; (80038f8 <txBluetooth+0x220>)
			Buffer[0] 	= 0x01;									// ENDEREÇO
 800389e:	f8ad 3010 	strh.w	r3, [sp, #16]
			float_TO_vetor4b(PrimitiveStates.Lastro.kp, Buffer, 2);
 80038a2:	aa04      	add	r2, sp, #16
 80038a4:	2302      	movs	r3, #2
 80038a6:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
 80038aa:	f7fe f853 	bl	8001954 <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Lastro.ki, Buffer, 6);
 80038ae:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
 80038b2:	2306      	movs	r3, #6
 80038b4:	aa04      	add	r2, sp, #16
 80038b6:	f7fe f84d 	bl	8001954 <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Lastro.kd, Buffer, 10);
 80038ba:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
 80038be:	230a      	movs	r3, #10
 80038c0:	aa04      	add	r2, sp, #16
 80038c2:	f7fe f847 	bl	8001954 <float_TO_vetor4b>
			Buffer[14] 	= (uint16_t)PrimitiveStates.Lastro.histerese 	>>8;
 80038c6:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
 80038ca:	ba5b      	rev16	r3, r3
 80038cc:	f8ad 301e 	strh.w	r3, [sp, #30]
			Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 80038d0:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80038d4:	e7db      	b.n	800388e <txBluetooth+0x1b6>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80038d6:	f642 1201 	movw	r2, #10497	; 0x2901
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80038da:	f8ad 2010 	strh.w	r2, [sp, #16]
			Buffer[2] 	= 0x30;									// FUNÇÃO -
 80038de:	f88d 3012 	strb.w	r3, [sp, #18]
			bluetoothEnviaComando(&bluetooth,Buffer, 2);
 80038e2:	2202      	movs	r2, #2
 80038e4:	e759      	b.n	800379a <txBluetooth+0xc2>
			FlagSincronia.flag=0;
 80038e6:	2100      	movs	r1, #0
 80038e8:	4a0b      	ldr	r2, [pc, #44]	; (8003918 <txBluetooth+0x240>)
 80038ea:	7011      	strb	r1, [r2, #0]
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80038ec:	f243 0201 	movw	r2, #12289	; 0x3001
 80038f0:	e7f3      	b.n	80038da <txBluetooth+0x202>
 80038f2:	bf00      	nop
 80038f4:	2000088c 	.word	0x2000088c
 80038f8:	20000890 	.word	0x20000890
 80038fc:	20000ef4 	.word	0x20000ef4
 8003900:	20001518 	.word	0x20001518
 8003904:	200007d4 	.word	0x200007d4
 8003908:	20001544 	.word	0x20001544
 800390c:	2000159c 	.word	0x2000159c
 8003910:	200015c8 	.word	0x200015c8
 8003914:	20001570 	.word	0x20001570
 8003918:	2000130c 	.word	0x2000130c

0800391c <verificaLimiteSetpoint>:
			bluetooth.aknowladge(&bluetooth,RX_TOGGLE_BUZZER);
			break;
		}
	}
}
void verificaLimiteSetpoint(IndviduoPID	*canal){
 800391c:	b538      	push	{r3, r4, r5, lr}
	if(canal->setPoint < canal->limite)
 800391e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
void verificaLimiteSetpoint(IndviduoPID	*canal){
 8003920:	4604      	mov	r4, r0
	if(canal->setPoint < canal->limite)
 8003922:	4628      	mov	r0, r5
 8003924:	f7fc fd6e 	bl	8000404 <__aeabi_i2d>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8003930:	f7fd f844 	bl	80009bc <__aeabi_dcmplt>
 8003934:	b920      	cbnz	r0, 8003940 <verificaLimiteSetpoint+0x24>
		return;

	canal->setPoint = canal->limite;
 8003936:	4628      	mov	r0, r5
 8003938:	f7fc fd54 	bl	80003e4 <__aeabi_ui2d>
 800393c:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
	return;
}
 8003940:	bd38      	pop	{r3, r4, r5, pc}
	...

08003944 <sincAutomatico>:
bool sincAutomatico(void){ //1==permite 0==recusa

	//envia sincronia junto do realtime apenas 3 vezes por reconexao
	if(!FlagSincronia.flag){
 8003944:	4b07      	ldr	r3, [pc, #28]	; (8003964 <sincAutomatico+0x20>)
 8003946:	7818      	ldrb	r0, [r3, #0]
 8003948:	b950      	cbnz	r0, 8003960 <sincAutomatico+0x1c>
		if(FlagSincronia.cont<ENVIO_DE_SINCRONIAS){
 800394a:	2101      	movs	r1, #1
 800394c:	785a      	ldrb	r2, [r3, #1]
 800394e:	2a02      	cmp	r2, #2
			FlagSincronia.cont++; //permite 3 envios antes de resetar a flag
 8003950:	bf9d      	ittte	ls
 8003952:	1852      	addls	r2, r2, r1
			return 1;
 8003954:	4608      	movls	r0, r1
			FlagSincronia.cont++; //permite 3 envios antes de resetar a flag
 8003956:	705a      	strbls	r2, [r3, #1]
		}else{
			FlagSincronia.cont = 0; //zera o contador
 8003958:	7058      	strbhi	r0, [r3, #1]
			FlagSincronia.flag = 1; //reseta a flag
 800395a:	bf88      	it	hi
 800395c:	7019      	strbhi	r1, [r3, #0]
			return 0;
 800395e:	4770      	bx	lr
		}
	}
	return 0;
 8003960:	2000      	movs	r0, #0
}
 8003962:	4770      	bx	lr
 8003964:	2000130c 	.word	0x2000130c

08003968 <rxBluetooth>:
void rxBluetooth(void){
 8003968:	b530      	push	{r4, r5, lr}
	evtrx = osMessageGet(FilaRXBluetoothHandle, 10);
 800396a:	4baf      	ldr	r3, [pc, #700]	; (8003c28 <rxBluetooth+0x2c0>)
void rxBluetooth(void){
 800396c:	b087      	sub	sp, #28
	evtrx = osMessageGet(FilaRXBluetoothHandle, 10);
 800396e:	6819      	ldr	r1, [r3, #0]
 8003970:	220a      	movs	r2, #10
 8003972:	a803      	add	r0, sp, #12
 8003974:	f004 f9bd 	bl	8007cf2 <osMessageGet>
	if (evtrx.status == osEventMessage) {
 8003978:	9b03      	ldr	r3, [sp, #12]
 800397a:	2b10      	cmp	r3, #16
 800397c:	f040 822d 	bne.w	8003dda <rxBluetooth+0x472>
		switch (bluetooth.ComandoAtual._comando) {
 8003980:	4caa      	ldr	r4, [pc, #680]	; (8003c2c <rxBluetooth+0x2c4>)
 8003982:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003986:	3b03      	subs	r3, #3
 8003988:	2b32      	cmp	r3, #50	; 0x32
 800398a:	f200 8226 	bhi.w	8003dda <rxBluetooth+0x472>
 800398e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003992:	005a      	.short	0x005a
 8003994:	02240224 	.word	0x02240224
 8003998:	02240224 	.word	0x02240224
 800399c:	007d0224 	.word	0x007d0224
 80039a0:	02240224 	.word	0x02240224
 80039a4:	02240224 	.word	0x02240224
 80039a8:	02240224 	.word	0x02240224
 80039ac:	02240086 	.word	0x02240086
 80039b0:	02240224 	.word	0x02240224
 80039b4:	00330224 	.word	0x00330224
 80039b8:	00550224 	.word	0x00550224
 80039bc:	02240224 	.word	0x02240224
 80039c0:	02240224 	.word	0x02240224
 80039c4:	02240224 	.word	0x02240224
 80039c8:	02240224 	.word	0x02240224
 80039cc:	00890224 	.word	0x00890224
 80039d0:	00a70098 	.word	0x00a70098
 80039d4:	010e00cd 	.word	0x010e00cd
 80039d8:	01650224 	.word	0x01650224
 80039dc:	01a9017a 	.word	0x01a9017a
 80039e0:	02240224 	.word	0x02240224
 80039e4:	02240224 	.word	0x02240224
 80039e8:	02240224 	.word	0x02240224
 80039ec:	0224018f 	.word	0x0224018f
 80039f0:	01b40224 	.word	0x01b40224
 80039f4:	020401dc 	.word	0x020401dc
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA, 0);
 80039f8:	4c8d      	ldr	r4, [pc, #564]	; (8003c30 <rxBluetooth+0x2c8>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	2116      	movs	r1, #22
 80039fe:	6820      	ldr	r0, [r4, #0]
 8003a00:	f004 f94f 	bl	8007ca2 <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA2, 0);
 8003a04:	2200      	movs	r2, #0
 8003a06:	2117      	movs	r1, #23
 8003a08:	6820      	ldr	r0, [r4, #0]
 8003a0a:	f004 f94a 	bl	8007ca2 <osMessagePut>
			if(sincAutomatico()){
 8003a0e:	f7ff ff99 	bl	8003944 <sincAutomatico>
 8003a12:	2800      	cmp	r0, #0
 8003a14:	f000 81e1 	beq.w	8003dda <rxBluetooth+0x472>
				osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA,  0);
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2118      	movs	r1, #24
 8003a1c:	6820      	ldr	r0, [r4, #0]
 8003a1e:	f004 f940 	bl	8007ca2 <osMessagePut>
				osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA2, 0);
 8003a22:	2200      	movs	r2, #0
 8003a24:	2119      	movs	r1, #25
 8003a26:	6820      	ldr	r0, [r4, #0]
 8003a28:	f004 f93b 	bl	8007ca2 <osMessagePut>
				osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA3, 0);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2120      	movs	r1, #32
 8003a30:	6820      	ldr	r0, [r4, #0]
}
 8003a32:	b007      	add	sp, #28
 8003a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003a38:	f004 b933 	b.w	8007ca2 <osMessagePut>
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2118      	movs	r1, #24
 8003a40:	4b7b      	ldr	r3, [pc, #492]	; (8003c30 <rxBluetooth+0x2c8>)
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	e7f5      	b.n	8003a32 <rxBluetooth+0xca>
			datetoUpdate.WeekDay 	= bluetooth._RxDataArr[2]; //Dia da semana p/atualizar
 8003a46:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
			timeToUpdate.Hours 		= bluetooth._RxDataArr[6]; //hora p/atualizar
 8003a4a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
			datetoUpdate.WeekDay 	= bluetooth._RxDataArr[2]; //Dia da semana p/atualizar
 8003a4c:	f88d 3008 	strb.w	r3, [sp, #8]
			datetoUpdate.Date 		= bluetooth._RxDataArr[3]; //Dia do mes p/atualizar
 8003a50:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			timeToUpdate.Hours 		= bluetooth._RxDataArr[6]; //hora p/atualizar
 8003a54:	f8ad 2004 	strh.w	r2, [sp, #4]
			datetoUpdate.Date 		= bluetooth._RxDataArr[3]; //Dia do mes p/atualizar
 8003a58:	f88d 300a 	strb.w	r3, [sp, #10]
			datetoUpdate.Month 		= bluetooth._RxDataArr[4]; //mes p/atualizar
 8003a5c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8003a60:	f88d 3009 	strb.w	r3, [sp, #9]
			datetoUpdate.Year 		= bluetooth._RxDataArr[5]; //ano p/atualizar
 8003a64:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8003a68:	f88d 300b 	strb.w	r3, [sp, #11]
			timeToUpdate.Seconds 	= bluetooth._RxDataArr[8]; //segundos p/atualizar
 8003a6c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003a70:	f88d 3006 	strb.w	r3, [sp, #6]
			atualizaDataEeprom(datetoUpdate, timeToUpdate);
 8003a74:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8003a78:	f000 fd9c 	bl	80045b4 <atualizaDataEeprom>
			bluetooth.aknowladge(&bluetooth,RX_ATUALIZA_HORA);
 8003a7c:	2103      	movs	r1, #3
 8003a7e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
			bluetooth.aknowladge(&bluetooth,RX_TOGGLE_BUZZER);
 8003a82:	486a      	ldr	r0, [pc, #424]	; (8003c2c <rxBluetooth+0x2c4>)
}
 8003a84:	b007      	add	sp, #28
 8003a86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			bluetooth.aknowladge(&bluetooth,RX_TOGGLE_BUZZER);
 8003a8a:	4718      	bx	r3
			osMessagePut(FilaEepromHandle, CEepromHardReset, 0);
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2102      	movs	r1, #2
			osMessagePut(FilaEepromHandle, CEepromSoftReset, 0);
 8003a90:	4b68      	ldr	r3, [pc, #416]	; (8003c34 <rxBluetooth+0x2cc>)
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	f004 f905 	bl	8007ca2 <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_RESETANDO, 0);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2129      	movs	r1, #41	; 0x29
 8003a9c:	e7d0      	b.n	8003a40 <rxBluetooth+0xd8>
			osMessagePut(FilaEepromHandle, CEepromSoftReset, 0);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2103      	movs	r1, #3
 8003aa2:	e7f5      	b.n	8003a90 <rxBluetooth+0x128>
			MACRO_ANULA_INATIVIDADE
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	4b64      	ldr	r3, [pc, #400]	; (8003c38 <rxBluetooth+0x2d0>)
			vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr,2);
 8003aa8:	4964      	ldr	r1, [pc, #400]	; (8003c3c <rxBluetooth+0x2d4>)
			MACRO_ANULA_INATIVIDADE
 8003aaa:	801a      	strh	r2, [r3, #0]
			vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr,2);
 8003aac:	4864      	ldr	r0, [pc, #400]	; (8003c40 <rxBluetooth+0x2d8>)
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f7fd ff3a 	bl	8001928 <vetor2b_TO_Double>
			verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8003ab4:	4863      	ldr	r0, [pc, #396]	; (8003c44 <rxBluetooth+0x2dc>)
 8003ab6:	f7ff ff31 	bl	800391c <verificaLimiteSetpoint>
			bluetooth.aknowladge(&bluetooth,RX_SP_TEMP_TETO);
 8003aba:	2121      	movs	r1, #33	; 0x21
 8003abc:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003ac0:	e7df      	b.n	8003a82 <rxBluetooth+0x11a>
			MACRO_ANULA_INATIVIDADE
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	4b5c      	ldr	r3, [pc, #368]	; (8003c38 <rxBluetooth+0x2d0>)
			vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr,2);
 8003ac6:	495d      	ldr	r1, [pc, #372]	; (8003c3c <rxBluetooth+0x2d4>)
			MACRO_ANULA_INATIVIDADE
 8003ac8:	801a      	strh	r2, [r3, #0]
			vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr,2);
 8003aca:	485f      	ldr	r0, [pc, #380]	; (8003c48 <rxBluetooth+0x2e0>)
 8003acc:	2202      	movs	r2, #2
 8003ace:	f7fd ff2b 	bl	8001928 <vetor2b_TO_Double>
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8003ad2:	485e      	ldr	r0, [pc, #376]	; (8003c4c <rxBluetooth+0x2e4>)
 8003ad4:	f7ff ff22 	bl	800391c <verificaLimiteSetpoint>
			bluetooth.aknowladge(&bluetooth,RX_SP_TEMP_LASTRO);
 8003ad8:	2122      	movs	r1, #34	; 0x22
 8003ada:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003ade:	e7d0      	b.n	8003a82 <rxBluetooth+0x11a>
			MACRO_ANULA_INATIVIDADE
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	4b55      	ldr	r3, [pc, #340]	; (8003c38 <rxBluetooth+0x2d0>)
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003ae4:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
			MACRO_ANULA_INATIVIDADE
 8003ae8:	801a      	strh	r2, [r3, #0]
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003aea:	4b59      	ldr	r3, [pc, #356]	; (8003c50 <rxBluetooth+0x2e8>)
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8003aec:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003af0:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8003af4:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003af8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003afc:	4a55      	ldr	r2, [pc, #340]	; (8003c54 <rxBluetooth+0x2ec>)
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8003afe:	f883 110b 	strb.w	r1, [r3, #267]	; 0x10b
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003b02:	6810      	ldr	r0, [r2, #0]
			if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003b04:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 8003b08:	2a01      	cmp	r2, #1
 8003b0a:	d00d      	beq.n	8003b28 <rxBluetooth+0x1c0>
 8003b0c:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 8003b10:	2a01      	cmp	r2, #1
 8003b12:	d009      	beq.n	8003b28 <rxBluetooth+0x1c0>
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003b14:	2201      	movs	r2, #1
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003b16:	2104      	movs	r1, #4
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003b18:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003b1c:	f004 f83f 	bl	8007b9e <osSignalSet>
			bluetooth.aknowladge(&bluetooth,RX_SP_TEMPO);
 8003b20:	2123      	movs	r1, #35	; 0x23
 8003b22:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003b26:	e7ac      	b.n	8003a82 <rxBluetooth+0x11a>
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003b28:	2102      	movs	r1, #2
 8003b2a:	e7f7      	b.n	8003b1c <rxBluetooth+0x1b4>
			MACRO_ANULA_INATIVIDADE
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	4b42      	ldr	r3, [pc, #264]	; (8003c38 <rxBluetooth+0x2d0>)
 8003b30:	801a      	strh	r2, [r3, #0]
			switch (PrimitiveStates.stateTimer) {
 8003b32:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <rxBluetooth+0x2e8>)
 8003b34:	f893 210d 	ldrb.w	r2, [r3, #269]	; 0x10d
 8003b38:	2a01      	cmp	r2, #1
 8003b3a:	d036      	beq.n	8003baa <rxBluetooth+0x242>
 8003b3c:	2a02      	cmp	r2, #2
 8003b3e:	d01e      	beq.n	8003b7e <rxBluetooth+0x216>
 8003b40:	bb7a      	cbnz	r2, 8003ba2 <rxBluetooth+0x23a>
				PrimitiveStates.RTTimerMinutos 	= PrimitiveStates.SPTimerMinutos;
 8003b42:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8003b46:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
				PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003b4a:	f893 210a 	ldrb.w	r2, [r3, #266]	; 0x10a
 8003b4e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003b52:	4a40      	ldr	r2, [pc, #256]	; (8003c54 <rxBluetooth+0x2ec>)
 8003b54:	6810      	ldr	r0, [r2, #0]
				if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003b56:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 8003b5a:	2a01      	cmp	r2, #1
 8003b5c:	d00a      	beq.n	8003b74 <rxBluetooth+0x20c>
 8003b5e:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 8003b62:	2a01      	cmp	r2, #1
 8003b64:	d006      	beq.n	8003b74 <rxBluetooth+0x20c>
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003b66:	2201      	movs	r2, #1
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003b68:	2104      	movs	r1, #4
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003b6a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003b6e:	f004 f816 	bl	8007b9e <osSignalSet>
				break;
 8003b72:	e016      	b.n	8003ba2 <rxBluetooth+0x23a>
					PrimitiveStates.stateTimer = TIMER_idle;
 8003b74:	2200      	movs	r2, #0
					osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003b76:	2102      	movs	r1, #2
					PrimitiveStates.stateTimer = TIMER_idle;
 8003b78:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
					osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003b7c:	e7f7      	b.n	8003b6e <rxBluetooth+0x206>
				if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003b7e:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 8003b82:	2a01      	cmp	r2, #1
 8003b84:	d00a      	beq.n	8003b9c <rxBluetooth+0x234>
 8003b86:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 8003b8a:	2a01      	cmp	r2, #1
 8003b8c:	d006      	beq.n	8003b9c <rxBluetooth+0x234>
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003b8e:	2201      	movs	r2, #1
				PrimitiveStates.stateTimer 	= TIMER_pausado;
 8003b90:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003b94:	4b2f      	ldr	r3, [pc, #188]	; (8003c54 <rxBluetooth+0x2ec>)
 8003b96:	2104      	movs	r1, #4
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	e7e8      	b.n	8003b6e <rxBluetooth+0x206>
					PrimitiveStates.stateTimer = TIMER_idle;
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			bluetooth.aknowladge(&bluetooth,RX_TOGGLE_TEMPO);
 8003ba2:	2124      	movs	r1, #36	; 0x24
 8003ba4:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003ba8:	e76b      	b.n	8003a82 <rxBluetooth+0x11a>
				PrimitiveStates.stateTimer 	= TIMER_pausado;
 8003baa:	2202      	movs	r2, #2
 8003bac:	e7f0      	b.n	8003b90 <rxBluetooth+0x228>
			MACRO_ANULA_INATIVIDADE
 8003bae:	2200      	movs	r2, #0
 8003bb0:	4b21      	ldr	r3, [pc, #132]	; (8003c38 <rxBluetooth+0x2d0>)
			vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr	,2);
 8003bb2:	4922      	ldr	r1, [pc, #136]	; (8003c3c <rxBluetooth+0x2d4>)
			MACRO_ANULA_INATIVIDADE
 8003bb4:	801a      	strh	r2, [r3, #0]
			vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr	,2);
 8003bb6:	4822      	ldr	r0, [pc, #136]	; (8003c40 <rxBluetooth+0x2d8>)
 8003bb8:	2202      	movs	r2, #2
 8003bba:	f7fd feb5 	bl	8001928 <vetor2b_TO_Double>
			vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr	,4);
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	491e      	ldr	r1, [pc, #120]	; (8003c3c <rxBluetooth+0x2d4>)
 8003bc2:	4821      	ldr	r0, [pc, #132]	; (8003c48 <rxBluetooth+0x2e0>)
 8003bc4:	f7fd feb0 	bl	8001928 <vetor2b_TO_Double>
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8003bc8:	4820      	ldr	r0, [pc, #128]	; (8003c4c <rxBluetooth+0x2e4>)
 8003bca:	f7ff fea7 	bl	800391c <verificaLimiteSetpoint>
			verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8003bce:	481d      	ldr	r0, [pc, #116]	; (8003c44 <rxBluetooth+0x2dc>)
 8003bd0:	f7ff fea4 	bl	800391c <verificaLimiteSetpoint>
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8003bd4:	4d1e      	ldr	r5, [pc, #120]	; (8003c50 <rxBluetooth+0x2e8>)
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 8003bd6:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8003bda:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
			contadorOutput(&outPuts);
 8003bde:	481e      	ldr	r0, [pc, #120]	; (8003c58 <rxBluetooth+0x2f0>)
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 8003be0:	f885 310a 	strb.w	r3, [r5, #266]	; 0x10a
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003be4:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8003be8:	f885 2109 	strb.w	r2, [r5, #265]	; 0x109
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8003bec:	f885 210b 	strb.w	r2, [r5, #267]	; 0x10b
			contadorOutput(&outPuts);
 8003bf0:	f7fe fa08 	bl	8002004 <contadorOutput>
			if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003bf4:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <rxBluetooth+0x2ec>)
 8003bfc:	d00e      	beq.n	8003c1c <rxBluetooth+0x2b4>
 8003bfe:	f895 20b4 	ldrb.w	r2, [r5, #180]	; 0xb4
 8003c02:	2a01      	cmp	r2, #1
 8003c04:	d00a      	beq.n	8003c1c <rxBluetooth+0x2b4>
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003c06:	2201      	movs	r2, #1
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003c08:	2104      	movs	r1, #4
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003c0a:	f885 210d 	strb.w	r2, [r5, #269]	; 0x10d
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	f003 ffc5 	bl	8007b9e <osSignalSet>
			bluetooth.aknowladge(&bluetooth,RX_RECEITA);
 8003c14:	2125      	movs	r1, #37	; 0x25
 8003c16:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003c1a:	e732      	b.n	8003a82 <rxBluetooth+0x11a>
				PrimitiveStates.stateTimer = TIMER_idle;
 8003c1c:	2200      	movs	r2, #0
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003c1e:	2102      	movs	r1, #2
				PrimitiveStates.stateTimer = TIMER_idle;
 8003c20:	f885 210d 	strb.w	r2, [r5, #269]	; 0x10d
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003c24:	e7f3      	b.n	8003c0e <rxBluetooth+0x2a6>
 8003c26:	bf00      	nop
 8003c28:	20000838 	.word	0x20000838
 8003c2c:	20000ef4 	.word	0x20000ef4
 8003c30:	2000088c 	.word	0x2000088c
 8003c34:	200007e8 	.word	0x200007e8
 8003c38:	2000130e 	.word	0x2000130e
 8003c3c:	20000f20 	.word	0x20000f20
 8003c40:	20000938 	.word	0x20000938
 8003c44:	20000908 	.word	0x20000908
 8003c48:	20000980 	.word	0x20000980
 8003c4c:	20000950 	.word	0x20000950
 8003c50:	20000890 	.word	0x20000890
 8003c54:	20000c44 	.word	0x20000c44
 8003c58:	20001260 	.word	0x20001260
			MACRO_ANULA_INATIVIDADE
 8003c5c:	2500      	movs	r5, #0
 8003c5e:	4b60      	ldr	r3, [pc, #384]	; (8003de0 <rxBluetooth+0x478>)
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003c60:	2104      	movs	r1, #4
			MACRO_ANULA_INATIVIDADE
 8003c62:	801d      	strh	r5, [r3, #0]
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003c64:	4b5f      	ldr	r3, [pc, #380]	; (8003de4 <rxBluetooth+0x47c>)
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	f003 ff99 	bl	8007b9e <osSignalSet>
			onDigital(&PrimitiveStates.Lampada);
 8003c6c:	485e      	ldr	r0, [pc, #376]	; (8003de8 <rxBluetooth+0x480>)
 8003c6e:	f7fe f9b5 	bl	8001fdc <onDigital>
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA2, 0);
 8003c72:	4b5e      	ldr	r3, [pc, #376]	; (8003dec <rxBluetooth+0x484>)
 8003c74:	2117      	movs	r1, #23
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	462a      	mov	r2, r5
 8003c7a:	f004 f812 	bl	8007ca2 <osMessagePut>
			bluetooth.aknowladge(&bluetooth,RX_LIGA_LAMPADA);
 8003c7e:	2127      	movs	r1, #39	; 0x27
 8003c80:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003c84:	e6fd      	b.n	8003a82 <rxBluetooth+0x11a>
			MACRO_ANULA_INATIVIDADE
 8003c86:	2500      	movs	r5, #0
 8003c88:	4b55      	ldr	r3, [pc, #340]	; (8003de0 <rxBluetooth+0x478>)
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003c8a:	2104      	movs	r1, #4
			MACRO_ANULA_INATIVIDADE
 8003c8c:	801d      	strh	r5, [r3, #0]
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003c8e:	4b55      	ldr	r3, [pc, #340]	; (8003de4 <rxBluetooth+0x47c>)
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	f003 ff84 	bl	8007b9e <osSignalSet>
			offDigital(&PrimitiveStates.Lampada);
 8003c96:	4854      	ldr	r0, [pc, #336]	; (8003de8 <rxBluetooth+0x480>)
 8003c98:	f7fe f9aa 	bl	8001ff0 <offDigital>
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA2, 0);
 8003c9c:	4b53      	ldr	r3, [pc, #332]	; (8003dec <rxBluetooth+0x484>)
 8003c9e:	2117      	movs	r1, #23
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	462a      	mov	r2, r5
 8003ca4:	f003 fffd 	bl	8007ca2 <osMessagePut>
			bluetooth.aknowladge(&bluetooth,RX_DESLIGA_LAMPADA);
 8003ca8:	2128      	movs	r1, #40	; 0x28
 8003caa:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003cae:	e6e8      	b.n	8003a82 <rxBluetooth+0x11a>
			PrimitiveStates.Lampada.limitOn = bluetooth._RxDataArr[3];
 8003cb0:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 8003cb4:	4b4c      	ldr	r3, [pc, #304]	; (8003de8 <rxBluetooth+0x480>)
			osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 8003cb6:	2106      	movs	r1, #6
			PrimitiveStates.Lampada.limitOn = bluetooth._RxDataArr[3];
 8003cb8:	81da      	strh	r2, [r3, #14]
			osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 8003cba:	4b4d      	ldr	r3, [pc, #308]	; (8003df0 <rxBluetooth+0x488>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	f003 ffef 	bl	8007ca2 <osMessagePut>
			FlagSincronia.cont=0;
 8003cc4:	2200      	movs	r2, #0
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003cc6:	2118      	movs	r1, #24
			FlagSincronia.cont=0;
 8003cc8:	4b4a      	ldr	r3, [pc, #296]	; (8003df4 <rxBluetooth+0x48c>)
 8003cca:	705a      	strb	r2, [r3, #1]
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA3, 0);
 8003ccc:	4b47      	ldr	r3, [pc, #284]	; (8003dec <rxBluetooth+0x484>)
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	f003 ffe7 	bl	8007ca2 <osMessagePut>
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003cd4:	2104      	movs	r1, #4
 8003cd6:	4b43      	ldr	r3, [pc, #268]	; (8003de4 <rxBluetooth+0x47c>)
 8003cd8:	6818      	ldr	r0, [r3, #0]
}
 8003cda:	b007      	add	sp, #28
 8003cdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003ce0:	f003 bf5d 	b.w	8007b9e <osSignalSet>
			desligaForno();
 8003ce4:	f7fe fe38 	bl	8002958 <desligaForno>
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003ce8:	4b3e      	ldr	r3, [pc, #248]	; (8003de4 <rxBluetooth+0x47c>)
 8003cea:	2104      	movs	r1, #4
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	f003 ff56 	bl	8007b9e <osSignalSet>
			bluetooth.aknowladge(&bluetooth,RX_CANCELA_PROCESSO);
 8003cf2:	2129      	movs	r1, #41	; 0x29
 8003cf4:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003cf8:	e6c3      	b.n	8003a82 <rxBluetooth+0x11a>
			MACRO_ANULA_INATIVIDADE
 8003cfa:	2400      	movs	r4, #0
 8003cfc:	4b38      	ldr	r3, [pc, #224]	; (8003de0 <rxBluetooth+0x478>)
			vetor4b_TO_Double(&PrimitiveStates.Teto.kp,bluetooth._RxDataArr,2);
 8003cfe:	2202      	movs	r2, #2
 8003d00:	493d      	ldr	r1, [pc, #244]	; (8003df8 <rxBluetooth+0x490>)
 8003d02:	483e      	ldr	r0, [pc, #248]	; (8003dfc <rxBluetooth+0x494>)
			MACRO_ANULA_INATIVIDADE
 8003d04:	801c      	strh	r4, [r3, #0]
			vetor4b_TO_Double(&PrimitiveStates.Teto.kp,bluetooth._RxDataArr,2);
 8003d06:	f7fd fde1 	bl	80018cc <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Teto.ki,bluetooth._RxDataArr,6);
 8003d0a:	2206      	movs	r2, #6
 8003d0c:	493a      	ldr	r1, [pc, #232]	; (8003df8 <rxBluetooth+0x490>)
 8003d0e:	483c      	ldr	r0, [pc, #240]	; (8003e00 <rxBluetooth+0x498>)
 8003d10:	f7fd fddc 	bl	80018cc <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Teto.kd,bluetooth._RxDataArr,10);
 8003d14:	220a      	movs	r2, #10
 8003d16:	4938      	ldr	r1, [pc, #224]	; (8003df8 <rxBluetooth+0x490>)
 8003d18:	483a      	ldr	r0, [pc, #232]	; (8003e04 <rxBluetooth+0x49c>)
 8003d1a:	f7fd fdd7 	bl	80018cc <vetor4b_TO_Double>
			vetor2b_TO_uint16(&PrimitiveStates.Teto.histerese,bluetooth._RxDataArr,14);
 8003d1e:	220e      	movs	r2, #14
 8003d20:	4935      	ldr	r1, [pc, #212]	; (8003df8 <rxBluetooth+0x490>)
 8003d22:	4839      	ldr	r0, [pc, #228]	; (8003e08 <rxBluetooth+0x4a0>)
 8003d24:	f7fd fdee 	bl	8001904 <vetor2b_TO_uint16>
			vetor2b_TO_uint16(&PrimitiveStates.Teto.limite ,bluetooth._RxDataArr,16);
 8003d28:	2210      	movs	r2, #16
 8003d2a:	4933      	ldr	r1, [pc, #204]	; (8003df8 <rxBluetooth+0x490>)
 8003d2c:	4837      	ldr	r0, [pc, #220]	; (8003e0c <rxBluetooth+0x4a4>)
 8003d2e:	f7fd fde9 	bl	8001904 <vetor2b_TO_uint16>
			verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8003d32:	4837      	ldr	r0, [pc, #220]	; (8003e10 <rxBluetooth+0x4a8>)
 8003d34:	f7ff fdf2 	bl	800391c <verificaLimiteSetpoint>
			osMessagePut(FilaEepromHandle, CEepromTunning, 0);
 8003d38:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <rxBluetooth+0x488>)
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	210a      	movs	r1, #10
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	f003 ffaf 	bl	8007ca2 <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA2, 0);
 8003d44:	4622      	mov	r2, r4
 8003d46:	2119      	movs	r1, #25
 8003d48:	e7c0      	b.n	8003ccc <rxBluetooth+0x364>
			MACRO_ANULA_INATIVIDADE
 8003d4a:	2400      	movs	r4, #0
 8003d4c:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <rxBluetooth+0x478>)
			vetor4b_TO_Double(&PrimitiveStates.Lastro.kp,bluetooth._RxDataArr,2);
 8003d4e:	2202      	movs	r2, #2
 8003d50:	4929      	ldr	r1, [pc, #164]	; (8003df8 <rxBluetooth+0x490>)
 8003d52:	4830      	ldr	r0, [pc, #192]	; (8003e14 <rxBluetooth+0x4ac>)
			MACRO_ANULA_INATIVIDADE
 8003d54:	801c      	strh	r4, [r3, #0]
			vetor4b_TO_Double(&PrimitiveStates.Lastro.kp,bluetooth._RxDataArr,2);
 8003d56:	f7fd fdb9 	bl	80018cc <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Lastro.ki,bluetooth._RxDataArr,6);
 8003d5a:	2206      	movs	r2, #6
 8003d5c:	4926      	ldr	r1, [pc, #152]	; (8003df8 <rxBluetooth+0x490>)
 8003d5e:	482e      	ldr	r0, [pc, #184]	; (8003e18 <rxBluetooth+0x4b0>)
 8003d60:	f7fd fdb4 	bl	80018cc <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Lastro.kd,bluetooth._RxDataArr,10);
 8003d64:	220a      	movs	r2, #10
 8003d66:	4924      	ldr	r1, [pc, #144]	; (8003df8 <rxBluetooth+0x490>)
 8003d68:	482c      	ldr	r0, [pc, #176]	; (8003e1c <rxBluetooth+0x4b4>)
 8003d6a:	f7fd fdaf 	bl	80018cc <vetor4b_TO_Double>
			vetor2b_TO_uint16(&PrimitiveStates.Lastro.histerese,bluetooth._RxDataArr,14);
 8003d6e:	220e      	movs	r2, #14
 8003d70:	4921      	ldr	r1, [pc, #132]	; (8003df8 <rxBluetooth+0x490>)
 8003d72:	482b      	ldr	r0, [pc, #172]	; (8003e20 <rxBluetooth+0x4b8>)
 8003d74:	f7fd fdc6 	bl	8001904 <vetor2b_TO_uint16>
			vetor2b_TO_uint16(&PrimitiveStates.Lastro.limite ,bluetooth._RxDataArr,16);
 8003d78:	2210      	movs	r2, #16
 8003d7a:	491f      	ldr	r1, [pc, #124]	; (8003df8 <rxBluetooth+0x490>)
 8003d7c:	4829      	ldr	r0, [pc, #164]	; (8003e24 <rxBluetooth+0x4bc>)
 8003d7e:	f7fd fdc1 	bl	8001904 <vetor2b_TO_uint16>
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8003d82:	4829      	ldr	r0, [pc, #164]	; (8003e28 <rxBluetooth+0x4c0>)
 8003d84:	f7ff fdca 	bl	800391c <verificaLimiteSetpoint>
			osMessagePut(FilaEepromHandle, CEepromTunning, 0);
 8003d88:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <rxBluetooth+0x488>)
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	210a      	movs	r1, #10
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	f003 ff87 	bl	8007ca2 <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA3, 0);
 8003d94:	4622      	mov	r2, r4
 8003d96:	2120      	movs	r1, #32
 8003d98:	e798      	b.n	8003ccc <rxBluetooth+0x364>
			MACRO_ANULA_INATIVIDADE
 8003d9a:	2200      	movs	r2, #0
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003d9c:	4d11      	ldr	r5, [pc, #68]	; (8003de4 <rxBluetooth+0x47c>)
			MACRO_ANULA_INATIVIDADE
 8003d9e:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <rxBluetooth+0x478>)
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003da0:	2104      	movs	r1, #4
 8003da2:	6828      	ldr	r0, [r5, #0]
			MACRO_ANULA_INATIVIDADE
 8003da4:	801a      	strh	r2, [r3, #0]
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003da6:	f003 fefa 	bl	8007b9e <osSignalSet>
			PrimitiveStates.Buzzer = !PrimitiveStates.Buzzer;
 8003daa:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <rxBluetooth+0x480>)
 8003dac:	f893 2108 	ldrb.w	r2, [r3, #264]	; 0x108
 8003db0:	2a00      	cmp	r2, #0
 8003db2:	bf0c      	ite	eq
 8003db4:	2201      	moveq	r2, #1
 8003db6:	2200      	movne	r2, #0
 8003db8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			if(PrimitiveStates.Buzzer){
 8003dbc:	d103      	bne.n	8003dc6 <rxBluetooth+0x45e>
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003dbe:	2104      	movs	r1, #4
 8003dc0:	6828      	ldr	r0, [r5, #0]
 8003dc2:	f003 feec 	bl	8007b9e <osSignalSet>
			osMessagePut(FilaEepromHandle, CEepromToogleBuzzer, 0);
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <rxBluetooth+0x488>)
 8003dc8:	210b      	movs	r1, #11
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f003 ff68 	bl	8007ca2 <osMessagePut>
			bluetooth.aknowladge(&bluetooth,RX_TOGGLE_BUZZER);
 8003dd2:	2135      	movs	r1, #53	; 0x35
 8003dd4:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003dd8:	e653      	b.n	8003a82 <rxBluetooth+0x11a>
}
 8003dda:	b007      	add	sp, #28
 8003ddc:	bd30      	pop	{r4, r5, pc}
 8003dde:	bf00      	nop
 8003de0:	2000130e 	.word	0x2000130e
 8003de4:	20000c44 	.word	0x20000c44
 8003de8:	20000890 	.word	0x20000890
 8003dec:	2000088c 	.word	0x2000088c
 8003df0:	200007e8 	.word	0x200007e8
 8003df4:	2000130c 	.word	0x2000130c
 8003df8:	20000f20 	.word	0x20000f20
 8003dfc:	20000910 	.word	0x20000910
 8003e00:	20000918 	.word	0x20000918
 8003e04:	20000920 	.word	0x20000920
 8003e08:	20000942 	.word	0x20000942
 8003e0c:	20000940 	.word	0x20000940
 8003e10:	20000908 	.word	0x20000908
 8003e14:	20000958 	.word	0x20000958
 8003e18:	20000960 	.word	0x20000960
 8003e1c:	20000968 	.word	0x20000968
 8003e20:	2000098a 	.word	0x2000098a
 8003e24:	20000988 	.word	0x20000988
 8003e28:	20000950 	.word	0x20000950

08003e2c <StartBluetooth>:
{
 8003e2c:	b508      	push	{r3, lr}
	initBluetooth();
 8003e2e:	f7ff fb97 	bl	8003560 <initBluetooth>
		txBleComando(&bluetooth);
 8003e32:	4c07      	ldr	r4, [pc, #28]	; (8003e50 <StartBluetooth+0x24>)
 8003e34:	4620      	mov	r0, r4
 8003e36:	f7fd fac1 	bl	80013bc <txBleComando>
		rxBluetooth();
 8003e3a:	f7ff fd95 	bl	8003968 <rxBluetooth>
		txBluetooth();
 8003e3e:	f7ff fc4b 	bl	80036d8 <txBluetooth>
		osThreadYield();
 8003e42:	f003 fe57 	bl	8007af4 <osThreadYield>
		osDelay(40);
 8003e46:	2028      	movs	r0, #40	; 0x28
 8003e48:	f003 fe60 	bl	8007b0c <osDelay>
	for(;;)
 8003e4c:	e7f2      	b.n	8003e34 <StartBluetooth+0x8>
 8003e4e:	bf00      	nop
 8003e50:	20000ef4 	.word	0x20000ef4

08003e54 <sequencia2Buzzer>:
		M_BUZZER_OFF
		offDigital(&PrimitiveStates.Lampada);
		osDelay(100);
	}
}
void sequencia2Buzzer(void){
 8003e54:	b538      	push	{r3, r4, r5, lr}
	M_BUZZER_ON
 8003e56:	4d0a      	ldr	r5, [pc, #40]	; (8003e80 <sequencia2Buzzer+0x2c>)
	onDigital(&PrimitiveStates.Lampada);
 8003e58:	4c0a      	ldr	r4, [pc, #40]	; (8003e84 <sequencia2Buzzer+0x30>)
	M_BUZZER_ON
 8003e5a:	210c      	movs	r1, #12
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f003 f933 	bl	80070c8 <HAL_TIM_PWM_Start>
	onDigital(&PrimitiveStates.Lampada);
 8003e62:	4620      	mov	r0, r4
 8003e64:	f7fe f8ba 	bl	8001fdc <onDigital>
	osDelay(100);
 8003e68:	2064      	movs	r0, #100	; 0x64
 8003e6a:	f003 fe4f 	bl	8007b0c <osDelay>
	M_BUZZER_OFF
 8003e6e:	4628      	mov	r0, r5
 8003e70:	210c      	movs	r1, #12
 8003e72:	f003 f965 	bl	8007140 <HAL_TIM_PWM_Stop>
	offDigital(&PrimitiveStates.Lampada);
 8003e76:	4620      	mov	r0, r4
}
 8003e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	offDigital(&PrimitiveStates.Lampada);
 8003e7c:	f7fe b8b8 	b.w	8001ff0 <offDigital>
 8003e80:	2000113c 	.word	0x2000113c
 8003e84:	20000890 	.word	0x20000890

08003e88 <waitBuzzerSignal>:
void waitBuzzerSignal(void){
 8003e88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const int32_t signals = SINAL_TEMP_REACH | SINAL_COMFIRMA | SINAL_NEGADO | SINAL_PRONTO;
	osEvent evt;

	// Aguarde até que qualquer um dos sinais seja recebido
	evt = osSignalWait(signals, osWaitForever);
 8003e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8e:	210f      	movs	r1, #15
 8003e90:	a801      	add	r0, sp, #4
 8003e92:	f003 fead 	bl	8007bf0 <osSignalWait>

	// Verifique os sinais
	if (evt.status == osEventSignal) {
 8003e96:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d176      	bne.n	8003f8c <waitBuzzerSignal+0x104>

		if (evt.value.signals & SINAL_TEMP_REACH) {
 8003e9e:	07e0      	lsls	r0, r4, #31
 8003ea0:	d514      	bpl.n	8003ecc <waitBuzzerSignal+0x44>
			onDigital(&PrimitiveStates.Lampada);
 8003ea2:	483b      	ldr	r0, [pc, #236]	; (8003f90 <waitBuzzerSignal+0x108>)
 8003ea4:	f7fe f89a 	bl	8001fdc <onDigital>
 8003ea8:	2505      	movs	r5, #5
			// execute o padrão de buzzer para SINAL_TEMP_REACH
			for (int i = 0; i < 5; ++i) {
				M_BUZZER_ON
 8003eaa:	4e3a      	ldr	r6, [pc, #232]	; (8003f94 <waitBuzzerSignal+0x10c>)
 8003eac:	210c      	movs	r1, #12
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f003 f90a 	bl	80070c8 <HAL_TIM_PWM_Start>
				osDelay(50);
 8003eb4:	2032      	movs	r0, #50	; 0x32
 8003eb6:	f003 fe29 	bl	8007b0c <osDelay>
				M_BUZZER_OFF
 8003eba:	210c      	movs	r1, #12
 8003ebc:	4630      	mov	r0, r6
 8003ebe:	f003 f93f 	bl	8007140 <HAL_TIM_PWM_Stop>
				osDelay(30);
 8003ec2:	201e      	movs	r0, #30
 8003ec4:	f003 fe22 	bl	8007b0c <osDelay>
			for (int i = 0; i < 5; ++i) {
 8003ec8:	3d01      	subs	r5, #1
 8003eca:	d1ef      	bne.n	8003eac <waitBuzzerSignal+0x24>
			}
		}

		if (evt.value.signals & SINAL_COMFIRMA) {
 8003ecc:	0761      	lsls	r1, r4, #29
 8003ece:	d519      	bpl.n	8003f04 <waitBuzzerSignal+0x7c>
			//retorna caso buzzer desabilitado
			if(!PrimitiveStates.Buzzer){
 8003ed0:	4b2f      	ldr	r3, [pc, #188]	; (8003f90 <waitBuzzerSignal+0x108>)
 8003ed2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8003ed6:	b933      	cbnz	r3, 8003ee6 <waitBuzzerSignal+0x5e>
				M_BUZZER_OFF
 8003ed8:	210c      	movs	r1, #12
 8003eda:	482e      	ldr	r0, [pc, #184]	; (8003f94 <waitBuzzerSignal+0x10c>)
				osDelay(100);
			}
			onDigital(&PrimitiveStates.Lampada);//DEIXA LAMPADA LIGADA
		}
	}
}
 8003edc:	b004      	add	sp, #16
 8003ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				M_BUZZER_OFF
 8003ee2:	f003 b92d 	b.w	8007140 <HAL_TIM_PWM_Stop>
			M_BUZZER_ON
 8003ee6:	210c      	movs	r1, #12
 8003ee8:	482a      	ldr	r0, [pc, #168]	; (8003f94 <waitBuzzerSignal+0x10c>)
 8003eea:	f003 f8ed 	bl	80070c8 <HAL_TIM_PWM_Start>
			osDelay(70);
 8003eee:	2046      	movs	r0, #70	; 0x46
 8003ef0:	f003 fe0c 	bl	8007b0c <osDelay>
			M_BUZZER_OFF
 8003ef4:	210c      	movs	r1, #12
 8003ef6:	4827      	ldr	r0, [pc, #156]	; (8003f94 <waitBuzzerSignal+0x10c>)
 8003ef8:	f003 f922 	bl	8007140 <HAL_TIM_PWM_Stop>
			osDelay(500);
 8003efc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f00:	f003 fe04 	bl	8007b0c <osDelay>
		if (evt.value.signals & SINAL_NEGADO) {
 8003f04:	07a2      	lsls	r2, r4, #30
 8003f06:	d520      	bpl.n	8003f4a <waitBuzzerSignal+0xc2>
			if(!PrimitiveStates.Buzzer){
 8003f08:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <waitBuzzerSignal+0x108>)
 8003f0a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0e2      	beq.n	8003ed8 <waitBuzzerSignal+0x50>
				M_BUZZER_ON
 8003f12:	210c      	movs	r1, #12
 8003f14:	481f      	ldr	r0, [pc, #124]	; (8003f94 <waitBuzzerSignal+0x10c>)
 8003f16:	f003 f8d7 	bl	80070c8 <HAL_TIM_PWM_Start>
				osDelay(70);
 8003f1a:	2046      	movs	r0, #70	; 0x46
 8003f1c:	f003 fdf6 	bl	8007b0c <osDelay>
				M_BUZZER_OFF
 8003f20:	210c      	movs	r1, #12
 8003f22:	481c      	ldr	r0, [pc, #112]	; (8003f94 <waitBuzzerSignal+0x10c>)
 8003f24:	f003 f90c 	bl	8007140 <HAL_TIM_PWM_Stop>
				osDelay(50);
 8003f28:	2032      	movs	r0, #50	; 0x32
 8003f2a:	f003 fdef 	bl	8007b0c <osDelay>
				M_BUZZER_ON
 8003f2e:	210c      	movs	r1, #12
 8003f30:	4818      	ldr	r0, [pc, #96]	; (8003f94 <waitBuzzerSignal+0x10c>)
 8003f32:	f003 f8c9 	bl	80070c8 <HAL_TIM_PWM_Start>
				osDelay(70);
 8003f36:	2046      	movs	r0, #70	; 0x46
 8003f38:	f003 fde8 	bl	8007b0c <osDelay>
				M_BUZZER_OFF
 8003f3c:	210c      	movs	r1, #12
 8003f3e:	4815      	ldr	r0, [pc, #84]	; (8003f94 <waitBuzzerSignal+0x10c>)
 8003f40:	f003 f8fe 	bl	8007140 <HAL_TIM_PWM_Stop>
				osDelay(50);
 8003f44:	2032      	movs	r0, #50	; 0x32
 8003f46:	f003 fde1 	bl	8007b0c <osDelay>
		if (evt.value.signals & SINAL_PRONTO) {
 8003f4a:	0723      	lsls	r3, r4, #28
 8003f4c:	d51e      	bpl.n	8003f8c <waitBuzzerSignal+0x104>
 8003f4e:	240a      	movs	r4, #10
				M_BUZZER_ON
 8003f50:	4e10      	ldr	r6, [pc, #64]	; (8003f94 <waitBuzzerSignal+0x10c>)
				onDigital(&PrimitiveStates.Lampada);
 8003f52:	4d0f      	ldr	r5, [pc, #60]	; (8003f90 <waitBuzzerSignal+0x108>)
				M_BUZZER_ON
 8003f54:	210c      	movs	r1, #12
 8003f56:	4630      	mov	r0, r6
 8003f58:	f003 f8b6 	bl	80070c8 <HAL_TIM_PWM_Start>
				onDigital(&PrimitiveStates.Lampada);
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	f7fe f83d 	bl	8001fdc <onDigital>
				osDelay(250);
 8003f62:	20fa      	movs	r0, #250	; 0xfa
 8003f64:	f003 fdd2 	bl	8007b0c <osDelay>
				M_BUZZER_OFF
 8003f68:	210c      	movs	r1, #12
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	f003 f8e8 	bl	8007140 <HAL_TIM_PWM_Stop>
				offDigital(&PrimitiveStates.Lampada);
 8003f70:	4628      	mov	r0, r5
 8003f72:	f7fe f83d 	bl	8001ff0 <offDigital>
				osDelay(100);
 8003f76:	2064      	movs	r0, #100	; 0x64
 8003f78:	f003 fdc8 	bl	8007b0c <osDelay>
			for (int i = 0; i < N_REP_SINAL_PRONTO; ++i) {
 8003f7c:	3c01      	subs	r4, #1
 8003f7e:	d1e9      	bne.n	8003f54 <waitBuzzerSignal+0xcc>
			onDigital(&PrimitiveStates.Lampada);//DEIXA LAMPADA LIGADA
 8003f80:	4803      	ldr	r0, [pc, #12]	; (8003f90 <waitBuzzerSignal+0x108>)
}
 8003f82:	b004      	add	sp, #16
 8003f84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			onDigital(&PrimitiveStates.Lampada);//DEIXA LAMPADA LIGADA
 8003f88:	f7fe b828 	b.w	8001fdc <onDigital>
}
 8003f8c:	b004      	add	sp, #16
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	20000890 	.word	0x20000890
 8003f94:	2000113c 	.word	0x2000113c

08003f98 <StartBuzzer>:
{
 8003f98:	b508      	push	{r3, lr}
	sequencia2Buzzer();
 8003f9a:	f7ff ff5b 	bl	8003e54 <sequencia2Buzzer>
		waitBuzzerSignal();
 8003f9e:	f7ff ff73 	bl	8003e88 <waitBuzzerSignal>
		osThreadYield();
 8003fa2:	f003 fda7 	bl	8007af4 <osThreadYield>
		osDelay(100);
 8003fa6:	2064      	movs	r0, #100	; 0x64
 8003fa8:	f003 fdb0 	bl	8007b0c <osDelay>
	for(;;)
 8003fac:	e7f7      	b.n	8003f9e <StartBuzzer+0x6>
	...

08003fb0 <initEeprom>:
		osThreadYield();
		osDelay(500);
	}
}

void initEeprom(void){
 8003fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	//inicializacao ad eeprom
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 8003fb4:	4dc0      	ldr	r5, [pc, #768]	; (80042b8 <initEeprom+0x308>)
void initEeprom(void){
 8003fb6:	b08b      	sub	sp, #44	; 0x2c
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 8003fb8:	4628      	mov	r0, r5
 8003fba:	4ac0      	ldr	r2, [pc, #768]	; (80042bc <initEeprom+0x30c>)
 8003fbc:	49c0      	ldr	r1, [pc, #768]	; (80042c0 <initEeprom+0x310>)

	//criacao dos objetos variaveis
	EepromAddVar(&eeprom,0,&tempoDelayLuz, 		"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA16BITS,	0,		TIME_LAMPADA,	60000	,&PrimitiveStates.Lampada.limitOn);
 8003fbe:	2400      	movs	r4, #0
 8003fc0:	2601      	movs	r6, #1
 8003fc2:	f04f 0802 	mov.w	r8, #2
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 8003fc6:	f7fd fd33 	bl	8001a30 <EepromInit>
	EepromAddVar(&eeprom,0,&tempoDelayLuz, 		"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA16BITS,	0,		TIME_LAMPADA,	60000	,&PrimitiveStates.Lampada.limitOn);
 8003fca:	f64e 2960 	movw	r9, #60000	; 0xea60
 8003fce:	232d      	movs	r3, #45	; 0x2d
	EepromAddVar(&eeprom,1,&horimetroHoras, 	"addrHORIMETRO", 		addrHORIMETRO,		DATA16BITS,	0,		0,				60000	,&Calendario.Horimetro_horas);
 8003fd0:	f04f 0b03 	mov.w	fp, #3
	EepromAddVar(&eeprom,0,&tempoDelayLuz, 		"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA16BITS,	0,		TIME_LAMPADA,	60000	,&PrimitiveStates.Lampada.limitOn);
 8003fd4:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 80042c4 <initEeprom+0x314>
	EepromAddVar(&eeprom,1,&horimetroHoras, 	"addrHORIMETRO", 		addrHORIMETRO,		DATA16BITS,	0,		0,				60000	,&Calendario.Horimetro_horas);
 8003fd8:	4fbb      	ldr	r7, [pc, #748]	; (80042c8 <initEeprom+0x318>)
	EepromAddVar(&eeprom,0,&tempoDelayLuz, 		"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA16BITS,	0,		TIME_LAMPADA,	60000	,&PrimitiveStates.Lampada.limitOn);
 8003fda:	e9cd 3903 	strd	r3, r9, [sp, #12]
 8003fde:	4621      	mov	r1, r4
 8003fe0:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8003fe4:	9600      	str	r6, [sp, #0]
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	4bb8      	ldr	r3, [pc, #736]	; (80042cc <initEeprom+0x31c>)
 8003fea:	4ab9      	ldr	r2, [pc, #740]	; (80042d0 <initEeprom+0x320>)
 8003fec:	f8cd a014 	str.w	sl, [sp, #20]
 8003ff0:	f7fd fcd6 	bl	80019a0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&horimetroHoras, 	"addrHORIMETRO", 		addrHORIMETRO,		DATA16BITS,	0,		0,				60000	,&Calendario.Horimetro_horas);
 8003ff4:	e9cd 9704 	strd	r9, r7, [sp, #16]
 8003ff8:	4631      	mov	r1, r6
 8003ffa:	f8cd 8004 	str.w	r8, [sp, #4]
 8003ffe:	f8cd b000 	str.w	fp, [sp]
 8004002:	4628      	mov	r0, r5
 8004004:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004008:	4bb2      	ldr	r3, [pc, #712]	; (80042d4 <initEeprom+0x324>)
 800400a:	4ab3      	ldr	r2, [pc, #716]	; (80042d8 <initEeprom+0x328>)
 800400c:	f7fd fcc8 	bl	80019a0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&horimetroMinutos, 	"addrMINUTIMETRO", 		addrMINUTIMETRO,	DATA8BITS,	0,		0,				254		,&Calendario.Horimetro_parcial_min);
 8004010:	eb07 0308 	add.w	r3, r7, r8
 8004014:	9305      	str	r3, [sp, #20]
 8004016:	23fe      	movs	r3, #254	; 0xfe
 8004018:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800401c:	2305      	movs	r3, #5
 800401e:	4631      	mov	r1, r6
 8004020:	e9cd 6401 	strd	r6, r4, [sp, #4]
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	4628      	mov	r0, r5
 8004028:	4bac      	ldr	r3, [pc, #688]	; (80042dc <initEeprom+0x32c>)
 800402a:	4aad      	ldr	r2, [pc, #692]	; (80042e0 <initEeprom+0x330>)
 800402c:	f7fd fcb8 	bl	80019a0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&instalacaoDia, 		"addrINST_DIA", 		addrINST_DIA,		DATA8BITS,	1,		0,				31		,&Calendario.Data_instalacao.Date);
 8004030:	1ebb      	subs	r3, r7, #2
 8004032:	9305      	str	r3, [sp, #20]
 8004034:	231f      	movs	r3, #31
 8004036:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800403a:	2306      	movs	r3, #6
 800403c:	4631      	mov	r1, r6
 800403e:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	4628      	mov	r0, r5
 8004046:	4ba7      	ldr	r3, [pc, #668]	; (80042e4 <initEeprom+0x334>)
 8004048:	4aa7      	ldr	r2, [pc, #668]	; (80042e8 <initEeprom+0x338>)
 800404a:	f7fd fca9 	bl	80019a0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&instalacaoMes, 		"addrINST_MES", 		addrINST_MES,		DATA8BITS,	1,		1,				12		,&Calendario.Data_instalacao.Month);
 800404e:	1efb      	subs	r3, r7, #3
 8004050:	9305      	str	r3, [sp, #20]
 8004052:	230c      	movs	r3, #12
 8004054:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8004058:	2307      	movs	r3, #7
 800405a:	4631      	mov	r1, r6
 800405c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	4628      	mov	r0, r5
 8004064:	4ba1      	ldr	r3, [pc, #644]	; (80042ec <initEeprom+0x33c>)
 8004066:	4aa2      	ldr	r2, [pc, #648]	; (80042f0 <initEeprom+0x340>)
 8004068:	f7fd fc9a 	bl	80019a0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&instalacaoAno, 		"addrINST_ANO", 		addrINST_ANO,		DATA8BITS,	23,		23,				99		,&Calendario.Data_instalacao.Year);
 800406c:	1e7b      	subs	r3, r7, #1
 800406e:	9305      	str	r3, [sp, #20]
 8004070:	2263      	movs	r2, #99	; 0x63
 8004072:	2317      	movs	r3, #23
 8004074:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004078:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800407c:	2308      	movs	r3, #8
 800407e:	4631      	mov	r1, r6
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	4628      	mov	r0, r5
 8004084:	4b9b      	ldr	r3, [pc, #620]	; (80042f4 <initEeprom+0x344>)
 8004086:	4a9c      	ldr	r2, [pc, #624]	; (80042f8 <initEeprom+0x348>)
 8004088:	f7fd fc8a 	bl	80019a0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&totalCiclos, 		"addrTOTAL_GERAL", 		addrTOTAL_GERAL,	DATA16BITS,	0,		0,				60000	,&Calendario.TotalCiclos);
 800408c:	1d3b      	adds	r3, r7, #4
 800408e:	e9cd 9304 	strd	r9, r3, [sp, #16]
 8004092:	2309      	movs	r3, #9
 8004094:	4631      	mov	r1, r6
 8004096:	f8cd 8004 	str.w	r8, [sp, #4]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	4628      	mov	r0, r5
 800409e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80040a2:	4b96      	ldr	r3, [pc, #600]	; (80042fc <initEeprom+0x34c>)
 80040a4:	4a96      	ldr	r2, [pc, #600]	; (8004300 <initEeprom+0x350>)
 80040a6:	f7fd fc7b 	bl	80019a0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&ContTetoMax, 		"addrCONT_MAX_TETO", 	addrCONT_MAX_TETO,	DATA16BITS,	0,		0,				60000	,&Calendario.ContMaxTeto);
 80040aa:	1dbb      	adds	r3, r7, #6
 80040ac:	e9cd 9304 	strd	r9, r3, [sp, #16]
 80040b0:	230b      	movs	r3, #11
 80040b2:	4631      	mov	r1, r6
 80040b4:	f8cd 8004 	str.w	r8, [sp, #4]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	4628      	mov	r0, r5
 80040bc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80040c0:	4b90      	ldr	r3, [pc, #576]	; (8004304 <initEeprom+0x354>)
 80040c2:	4a91      	ldr	r2, [pc, #580]	; (8004308 <initEeprom+0x358>)
 80040c4:	f7fd fc6c 	bl	80019a0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&ContLastroMax, 		"addrCONT_MAX_LASTRO", 	addrCONT_MAX_LASTRO,DATA16BITS,	0,		0,				60000	,&Calendario.ContMaxLastro);
 80040c8:	230d      	movs	r3, #13
 80040ca:	3708      	adds	r7, #8
 80040cc:	e9cd 9704 	strd	r9, r7, [sp, #16]
 80040d0:	4631      	mov	r1, r6
 80040d2:	f8cd 8004 	str.w	r8, [sp, #4]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	4628      	mov	r0, r5
 80040da:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80040de:	4b8b      	ldr	r3, [pc, #556]	; (800430c <initEeprom+0x35c>)
 80040e0:	4a8b      	ldr	r2, [pc, #556]	; (8004310 <initEeprom+0x360>)
 80040e2:	f7fd fc5d 	bl	80019a0 <EepromAddVar>

	EepromAddVar(&eeprom,0,&hitereseStateTeto, 	"addrTETO_HIST", 		addrTETO_HIST,		DATA16BITS,	0,		STD_HISTERESE,		10	,&PrimitiveStates.Teto.histerese);
 80040e6:	f10a 03a4 	add.w	r3, sl, #164	; 0xa4
 80040ea:	f04f 090a 	mov.w	r9, #10
 80040ee:	9305      	str	r3, [sp, #20]
 80040f0:	2329      	movs	r3, #41	; 0x29
 80040f2:	e9cd b903 	strd	fp, r9, [sp, #12]
 80040f6:	4621      	mov	r1, r4
 80040f8:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	4628      	mov	r0, r5
 8004100:	4b84      	ldr	r3, [pc, #528]	; (8004314 <initEeprom+0x364>)
 8004102:	4a85      	ldr	r2, [pc, #532]	; (8004318 <initEeprom+0x368>)
 8004104:	f7fd fc4c 	bl	80019a0 <EepromAddVar>
	EepromAddVar(&eeprom,0,&limiteTeto, 		"addrTETO_LIMIT", 		addrTETO_LIMIT,		DATA16BITS,	0,		STD_LIMITELASTRO,	600	,&PrimitiveStates.Teto.limite);
 8004108:	f10a 03a2 	add.w	r3, sl, #162	; 0xa2
 800410c:	f44f 7716 	mov.w	r7, #600	; 0x258
 8004110:	9305      	str	r3, [sp, #20]
 8004112:	f240 13db 	movw	r3, #475	; 0x1db
 8004116:	e9cd 3703 	strd	r3, r7, [sp, #12]
 800411a:	232b      	movs	r3, #43	; 0x2b
 800411c:	4621      	mov	r1, r4
 800411e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	4628      	mov	r0, r5
 8004126:	4b7d      	ldr	r3, [pc, #500]	; (800431c <initEeprom+0x36c>)
 8004128:	4a7d      	ldr	r2, [pc, #500]	; (8004320 <initEeprom+0x370>)
 800412a:	f7fd fc39 	bl	80019a0 <EepromAddVar>
	EepromAddVar(&eeprom,0,&hitereseStateLastro,"addrLASTRO_HIST", 		addrLASTRO_HIST,	DATA16BITS,	0,		STD_HISTERESE,		10	,&PrimitiveStates.Lastro.histerese);
 800412e:	f10a 03ec 	add.w	r3, sl, #236	; 0xec
 8004132:	e9cd 9304 	strd	r9, r3, [sp, #16]
 8004136:	2349      	movs	r3, #73	; 0x49
 8004138:	4621      	mov	r1, r4
 800413a:	e9cd 4b02 	strd	r4, fp, [sp, #8]
 800413e:	f8cd 8004 	str.w	r8, [sp, #4]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	4628      	mov	r0, r5
 8004146:	4b77      	ldr	r3, [pc, #476]	; (8004324 <initEeprom+0x374>)
 8004148:	4a77      	ldr	r2, [pc, #476]	; (8004328 <initEeprom+0x378>)
 800414a:	f7fd fc29 	bl	80019a0 <EepromAddVar>
	EepromAddVar(&eeprom,0,&limiteLastro,		"addrLASTRO_LIMIT", 	addrLASTRO_LIMIT,	DATA16BITS,	0,		STD_LIMITETETO,		600	,&PrimitiveStates.Lastro.limite);
 800414e:	f10a 03ea 	add.w	r3, sl, #234	; 0xea
 8004152:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8004156:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800415a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800415e:	234b      	movs	r3, #75	; 0x4b
 8004160:	4621      	mov	r1, r4
 8004162:	f8cd 8004 	str.w	r8, [sp, #4]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	4628      	mov	r0, r5
 800416a:	4b70      	ldr	r3, [pc, #448]	; (800432c <initEeprom+0x37c>)
 800416c:	4a70      	ldr	r2, [pc, #448]	; (8004330 <initEeprom+0x380>)
 800416e:	f7fd fc17 	bl	80019a0 <EepromAddVar>
	EepromAddVar(&eeprom,0,&FlagBuzzer,			"addrBUZZER", 			addrBUZZER,			DATA8BITS,	0,		STD_BUZZER	,		1  	,&PrimitiveStates.Buzzer);
 8004172:	f10a 03fa 	add.w	r3, sl, #250	; 0xfa
 8004176:	e9cd 6304 	strd	r6, r3, [sp, #16]
 800417a:	233d      	movs	r3, #61	; 0x3d
 800417c:	4621      	mov	r1, r4
 800417e:	e9cd 4602 	strd	r4, r6, [sp, #8]
 8004182:	9601      	str	r6, [sp, #4]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	4628      	mov	r0, r5
 8004188:	4b6a      	ldr	r3, [pc, #424]	; (8004334 <initEeprom+0x384>)
 800418a:	4a6b      	ldr	r2, [pc, #428]	; (8004338 <initEeprom+0x388>)
 800418c:	f7fd fc08 	bl	80019a0 <EepromAddVar>

	EepromAddVarFloating(&eeprom, 0, &kPTeto, 	"addrTETO_KP", 			addrTETO_KP,		DATADOUBLE,	0,		STD_KP		,1000	,&PrimitiveStates.Teto.kp);
 8004190:	2200      	movs	r2, #0
 8004192:	f10a 0372 	add.w	r3, sl, #114	; 0x72
 8004196:	9308      	str	r3, [sp, #32]
 8004198:	4b68      	ldr	r3, [pc, #416]	; (800433c <initEeprom+0x38c>)
 800419a:	2600      	movs	r6, #0
 800419c:	f04f 0800 	mov.w	r8, #0
 80041a0:	f04f 0900 	mov.w	r9, #0
 80041a4:	f04f 0b40 	mov.w	fp, #64	; 0x40
 80041a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041ac:	230f      	movs	r3, #15
 80041ae:	4f64      	ldr	r7, [pc, #400]	; (8004340 <initEeprom+0x390>)
 80041b0:	4621      	mov	r1, r4
 80041b2:	e9cd 3b00 	strd	r3, fp, [sp]
 80041b6:	4628      	mov	r0, r5
 80041b8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80041bc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80041c0:	4b60      	ldr	r3, [pc, #384]	; (8004344 <initEeprom+0x394>)
 80041c2:	4a61      	ldr	r2, [pc, #388]	; (8004348 <initEeprom+0x398>)
 80041c4:	f7fd fc50 	bl	8001a68 <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kITeto, 	"addrTETO_KI", 			addrTETO_KI,		DATADOUBLE,	0,		STD_KI		,1000	,&PrimitiveStates.Teto.ki);
 80041c8:	a237      	add	r2, pc, #220	; (adr r2, 80042a8 <initEeprom+0x2f8>)
 80041ca:	e9d2 1200 	ldrd	r1, r2, [r2]
 80041ce:	f10a 037a 	add.w	r3, sl, #122	; 0x7a
 80041d2:	9308      	str	r3, [sp, #32]
 80041d4:	2317      	movs	r3, #23
 80041d6:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	4621      	mov	r1, r4
 80041de:	4628      	mov	r0, r5
 80041e0:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80041e4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80041e8:	4b58      	ldr	r3, [pc, #352]	; (800434c <initEeprom+0x39c>)
 80041ea:	4a59      	ldr	r2, [pc, #356]	; (8004350 <initEeprom+0x3a0>)
 80041ec:	f8cd b004 	str.w	fp, [sp, #4]
 80041f0:	f7fd fc3a 	bl	8001a68 <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kDTeto, 	"addrTETO_KD", 			addrTETO_KD,		DATADOUBLE,	0,		STD_KD		,1000	,&PrimitiveStates.Teto.kd);
 80041f4:	a12e      	add	r1, pc, #184	; (adr r1, 80042b0 <initEeprom+0x300>)
 80041f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041fa:	f10a 0382 	add.w	r3, sl, #130	; 0x82
 80041fe:	9308      	str	r3, [sp, #32]
 8004200:	2321      	movs	r3, #33	; 0x21
 8004202:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	4621      	mov	r1, r4
 800420a:	4628      	mov	r0, r5
 800420c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004210:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004214:	4b4f      	ldr	r3, [pc, #316]	; (8004354 <initEeprom+0x3a4>)
 8004216:	4a50      	ldr	r2, [pc, #320]	; (8004358 <initEeprom+0x3a8>)
 8004218:	f8cd b004 	str.w	fp, [sp, #4]
 800421c:	f7fd fc24 	bl	8001a68 <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kPLastro,	"addrLASTRO_KP", 		addrLASTRO_KP,		DATADOUBLE,	0,		STD_KP		,1000	,&PrimitiveStates.Lastro.kp);
 8004220:	2200      	movs	r2, #0
 8004222:	f10a 03ba 	add.w	r3, sl, #186	; 0xba
 8004226:	9308      	str	r3, [sp, #32]
 8004228:	4b44      	ldr	r3, [pc, #272]	; (800433c <initEeprom+0x38c>)
 800422a:	4621      	mov	r1, r4
 800422c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004230:	232d      	movs	r3, #45	; 0x2d
 8004232:	4628      	mov	r0, r5
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800423a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800423e:	4b47      	ldr	r3, [pc, #284]	; (800435c <initEeprom+0x3ac>)
 8004240:	4a47      	ldr	r2, [pc, #284]	; (8004360 <initEeprom+0x3b0>)
 8004242:	f8cd b004 	str.w	fp, [sp, #4]
 8004246:	f7fd fc0f 	bl	8001a68 <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kILastro,	"addrLASTRO_KI", 		addrLASTRO_KI,		DATADOUBLE,	0,		STD_KI		,1000	,&PrimitiveStates.Lastro.ki);
 800424a:	a217      	add	r2, pc, #92	; (adr r2, 80042a8 <initEeprom+0x2f8>)
 800424c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004250:	f10a 03c2 	add.w	r3, sl, #194	; 0xc2
 8004254:	9308      	str	r3, [sp, #32]
 8004256:	2335      	movs	r3, #53	; 0x35
 8004258:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	4621      	mov	r1, r4
 8004260:	4628      	mov	r0, r5
 8004262:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004266:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800426a:	4b3e      	ldr	r3, [pc, #248]	; (8004364 <initEeprom+0x3b4>)
 800426c:	4a3e      	ldr	r2, [pc, #248]	; (8004368 <initEeprom+0x3b8>)
 800426e:	f8cd b004 	str.w	fp, [sp, #4]
 8004272:	f7fd fbf9 	bl	8001a68 <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kDLastro,	"addrLASTRO_KD", 		addrLASTRO_KD,		DATADOUBLE,	0,		STD_KD		,1000	,&PrimitiveStates.Lastro.kd);
 8004276:	a10e      	add	r1, pc, #56	; (adr r1, 80042b0 <initEeprom+0x300>)
 8004278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800427c:	f10a 03ca 	add.w	r3, sl, #202	; 0xca
 8004280:	9308      	str	r3, [sp, #32]
 8004282:	2341      	movs	r3, #65	; 0x41
 8004284:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	4621      	mov	r1, r4
 800428c:	4628      	mov	r0, r5
 800428e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004292:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004296:	4b35      	ldr	r3, [pc, #212]	; (800436c <initEeprom+0x3bc>)
 8004298:	4a35      	ldr	r2, [pc, #212]	; (8004370 <initEeprom+0x3c0>)
 800429a:	f8cd b004 	str.w	fp, [sp, #4]
 800429e:	f7fd fbe3 	bl	8001a68 <EepromAddVarFloating>
	//todo altera funcao setavar e retirar possibilidade de alterar o valor por ela
	//todo criar uma funcao que restaure tudo

	//	RestauraSoft(&eeprom);

	__NOP();
 80042a2:	bf00      	nop

	//faz o download dos objetos
	EepromDownloadValores(&eeprom);
 80042a4:	4628      	mov	r0, r5
 80042a6:	e065      	b.n	8004374 <initEeprom+0x3c4>
 80042a8:	47ae147b 	.word	0x47ae147b
 80042ac:	3f847ae1 	.word	0x3f847ae1
 80042b0:	33333333 	.word	0x33333333
 80042b4:	3fd33333 	.word	0x3fd33333
 80042b8:	20001398 	.word	0x20001398
 80042bc:	200007e8 	.word	0x200007e8
 80042c0:	200010d4 	.word	0x200010d4
 80042c4:	2000089e 	.word	0x2000089e
 80042c8:	200007d8 	.word	0x200007d8
 80042cc:	0800b511 	.word	0x0800b511
 80042d0:	20001800 	.word	0x20001800
 80042d4:	0800b51f 	.word	0x0800b51f
 80042d8:	20001518 	.word	0x20001518
 80042dc:	0800b52d 	.word	0x0800b52d
 80042e0:	20001544 	.word	0x20001544
 80042e4:	0800b53d 	.word	0x0800b53d
 80042e8:	2000159c 	.word	0x2000159c
 80042ec:	0800b54a 	.word	0x0800b54a
 80042f0:	200015c8 	.word	0x200015c8
 80042f4:	0800b557 	.word	0x0800b557
 80042f8:	20001570 	.word	0x20001570
 80042fc:	0800b564 	.word	0x0800b564
 8004300:	20001830 	.word	0x20001830
 8004304:	0800b574 	.word	0x0800b574
 8004308:	2000133c 	.word	0x2000133c
 800430c:	0800b586 	.word	0x0800b586
 8004310:	20001310 	.word	0x20001310
 8004314:	0800b59a 	.word	0x0800b59a
 8004318:	200014ec 	.word	0x200014ec
 800431c:	0800b5a8 	.word	0x0800b5a8
 8004320:	200017d4 	.word	0x200017d4
 8004324:	0800b5b7 	.word	0x0800b5b7
 8004328:	200014c0 	.word	0x200014c0
 800432c:	0800b5c7 	.word	0x0800b5c7
 8004330:	200017a8 	.word	0x200017a8
 8004334:	0800b5d8 	.word	0x0800b5d8
 8004338:	20001368 	.word	0x20001368
 800433c:	403e0000 	.word	0x403e0000
 8004340:	408f4000 	.word	0x408f4000
 8004344:	0800b5e3 	.word	0x0800b5e3
 8004348:	20001760 	.word	0x20001760
 800434c:	0800b5ef 	.word	0x0800b5ef
 8004350:	200016d0 	.word	0x200016d0
 8004354:	0800b5fb 	.word	0x0800b5fb
 8004358:	20001640 	.word	0x20001640
 800435c:	0800b607 	.word	0x0800b607
 8004360:	20001718 	.word	0x20001718
 8004364:	0800b615 	.word	0x0800b615
 8004368:	20001688 	.word	0x20001688
 800436c:	0800b623 	.word	0x0800b623
 8004370:	200015f8 	.word	0x200015f8
 8004374:	f7fd fd26 	bl	8001dc4 <EepromDownloadValores>

	__NOP();
 8004378:	bf00      	nop

	//	RestauraSoft(&eeprom);

	__NOP();
 800437a:	bf00      	nop

	osThreadResume(TaskTemperaturaHandle);
 800437c:	4b03      	ldr	r3, [pc, #12]	; (800438c <initEeprom+0x3dc>)
 800437e:	6818      	ldr	r0, [r3, #0]
}
 8004380:	b00b      	add	sp, #44	; 0x2c
 8004382:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	osThreadResume(TaskTemperaturaHandle);
 8004386:	f003 bcf3 	b.w	8007d70 <osThreadResume>
 800438a:	bf00      	nop
 800438c:	20000c4c 	.word	0x20000c4c

08004390 <processaEeprom>:

void processaEeprom(void){
 8004390:	b510      	push	{r4, lr}
	osEvent  evt;

	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 8004392:	4b64      	ldr	r3, [pc, #400]	; (8004524 <processaEeprom+0x194>)
void processaEeprom(void){
 8004394:	b088      	sub	sp, #32
	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 8004396:	6819      	ldr	r1, [r3, #0]
 8004398:	f04f 32ff 	mov.w	r2, #4294967295
 800439c:	a805      	add	r0, sp, #20
 800439e:	f003 fca8 	bl	8007cf2 <osMessageGet>
	if (evt.status == osEventMessage) {
 80043a2:	9b05      	ldr	r3, [sp, #20]
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	f040 80b8 	bne.w	800451a <processaEeprom+0x18a>

		switch ((unsigned int)evt.value.p) {
 80043aa:	9b06      	ldr	r3, [sp, #24]
 80043ac:	2b0b      	cmp	r3, #11
 80043ae:	f200 80b4 	bhi.w	800451a <processaEeprom+0x18a>
 80043b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80043b6:	0017      	.short	0x0017
 80043b8:	00590029 	.word	0x00590029
 80043bc:	00350049 	.word	0x00350049
 80043c0:	0061005b 	.word	0x0061005b
 80043c4:	0063000c 	.word	0x0063000c
 80043c8:	006f0069 	.word	0x006f0069
 80043cc:	00b4      	.short	0x00b4

		case CEepromNewCile:
			Calendario.TotalCiclos+=1;
 80043ce:	4a56      	ldr	r2, [pc, #344]	; (8004528 <processaEeprom+0x198>)
			EepromSetVar(&eeprom, &totalCiclos);
 80043d0:	4956      	ldr	r1, [pc, #344]	; (800452c <processaEeprom+0x19c>)
			Calendario.TotalCiclos+=1;
 80043d2:	8913      	ldrh	r3, [r2, #8]
 80043d4:	3301      	adds	r3, #1
 80043d6:	8113      	strh	r3, [r2, #8]
			EepromSetVar(&eeprom, &limiteLastro);
			PID_SetTunings(&TPIDLastro, PrimitiveStates.Lastro.kp, PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd);

			break;
		case CEepromToogleBuzzer:
			EepromSetVar(&eeprom, &FlagBuzzer);
 80043d8:	4855      	ldr	r0, [pc, #340]	; (8004530 <processaEeprom+0x1a0>)
			break;
		default:
			break;
		}
	}
}
 80043da:	b008      	add	sp, #32
 80043dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			EepromSetVar(&eeprom, &FlagBuzzer);
 80043e0:	f7fd bb9e 	b.w	8001b20 <EepromSetVar>
			if(Calendario.Horimetro_parcial_min<59){
 80043e4:	4b50      	ldr	r3, [pc, #320]	; (8004528 <processaEeprom+0x198>)
			EepromSetVar(&eeprom, &horimetroHoras);
 80043e6:	4953      	ldr	r1, [pc, #332]	; (8004534 <processaEeprom+0x1a4>)
			if(Calendario.Horimetro_parcial_min<59){
 80043e8:	799a      	ldrb	r2, [r3, #6]
			EepromSetVar(&eeprom, &horimetroHoras);
 80043ea:	4851      	ldr	r0, [pc, #324]	; (8004530 <processaEeprom+0x1a0>)
			if(Calendario.Horimetro_parcial_min<59){
 80043ec:	2a3a      	cmp	r2, #58	; 0x3a
				Calendario.Horimetro_parcial_min=0;
 80043ee:	bf83      	ittte	hi
 80043f0:	2200      	movhi	r2, #0
 80043f2:	719a      	strbhi	r2, [r3, #6]
				Calendario.Horimetro_horas++;
 80043f4:	889a      	ldrhhi	r2, [r3, #4]
				Calendario.Horimetro_parcial_min++;
 80043f6:	3201      	addls	r2, #1
				Calendario.Horimetro_horas++;
 80043f8:	bf8a      	itet	hi
 80043fa:	3201      	addhi	r2, #1
				Calendario.Horimetro_parcial_min++;
 80043fc:	719a      	strbls	r2, [r3, #6]
				Calendario.Horimetro_horas++;
 80043fe:	809a      	strhhi	r2, [r3, #4]
			EepromSetVar(&eeprom, &horimetroHoras);
 8004400:	f7fd fb8e 	bl	8001b20 <EepromSetVar>
			EepromSetVar(&eeprom, &horimetroMinutos);
 8004404:	494c      	ldr	r1, [pc, #304]	; (8004538 <processaEeprom+0x1a8>)
 8004406:	e7e7      	b.n	80043d8 <processaEeprom+0x48>
			EepromSetVar(&eeprom, &instalacaoDia);
 8004408:	494c      	ldr	r1, [pc, #304]	; (800453c <processaEeprom+0x1ac>)
 800440a:	4849      	ldr	r0, [pc, #292]	; (8004530 <processaEeprom+0x1a0>)
 800440c:	f7fd fb88 	bl	8001b20 <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoMes);
 8004410:	494b      	ldr	r1, [pc, #300]	; (8004540 <processaEeprom+0x1b0>)
 8004412:	4847      	ldr	r0, [pc, #284]	; (8004530 <processaEeprom+0x1a0>)
 8004414:	f7fd fb84 	bl	8001b20 <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoAno);
 8004418:	494a      	ldr	r1, [pc, #296]	; (8004544 <processaEeprom+0x1b4>)
 800441a:	4845      	ldr	r0, [pc, #276]	; (8004530 <processaEeprom+0x1a0>)
 800441c:	f7fd fb80 	bl	8001b20 <EepromSetVar>
			if (HAL_RTC_SetTime(&hrtc, &timeToUpdate, RTC_FORMAT_BIN) != HAL_OK){
 8004420:	2200      	movs	r2, #0
 8004422:	4949      	ldr	r1, [pc, #292]	; (8004548 <processaEeprom+0x1b8>)
 8004424:	4849      	ldr	r0, [pc, #292]	; (800454c <processaEeprom+0x1bc>)
 8004426:	f002 f9e8 	bl	80067fa <HAL_RTC_SetTime>
 800442a:	b108      	cbz	r0, 8004430 <processaEeprom+0xa0>
				Error_Handler();
 800442c:	f7fe fb66 	bl	8002afc <Error_Handler>
			if (HAL_RTC_SetDate(&hrtc, &datetoUpdate, RTC_FORMAT_BIN) != HAL_OK){
 8004430:	2200      	movs	r2, #0
 8004432:	4947      	ldr	r1, [pc, #284]	; (8004550 <processaEeprom+0x1c0>)
 8004434:	4845      	ldr	r0, [pc, #276]	; (800454c <processaEeprom+0x1bc>)
 8004436:	f002 fa31 	bl	800689c <HAL_RTC_SetDate>
 800443a:	2800      	cmp	r0, #0
 800443c:	d06d      	beq.n	800451a <processaEeprom+0x18a>
}
 800443e:	b008      	add	sp, #32
 8004440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				Error_Handler();
 8004444:	f7fe bb5a 	b.w	8002afc <Error_Handler>
			RestauraEeprom(&eeprom,softReset);	// restaura
 8004448:	2100      	movs	r1, #0
			RestauraEeprom(&eeprom,hardReset); 	// restaura
 800444a:	4839      	ldr	r0, [pc, #228]	; (8004530 <processaEeprom+0x1a0>)
 800444c:	f7fd fbfe 	bl	8001c4c <RestauraEeprom>
			EepromDownloadValores(&eeprom);		// le
 8004450:	4837      	ldr	r0, [pc, #220]	; (8004530 <processaEeprom+0x1a0>)
 8004452:	f7fd fcb7 	bl	8001dc4 <EepromDownloadValores>
			osMessagePut(FilaTXBluetoothHandle, TX_RESETADO_OK, 0);
 8004456:	2200      	movs	r2, #0
 8004458:	2130      	movs	r1, #48	; 0x30
 800445a:	4b3e      	ldr	r3, [pc, #248]	; (8004554 <processaEeprom+0x1c4>)
 800445c:	6818      	ldr	r0, [r3, #0]
}
 800445e:	b008      	add	sp, #32
 8004460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			osMessagePut(FilaTXBluetoothHandle, TX_RESETADO_OK, 0);
 8004464:	f003 bc1d 	b.w	8007ca2 <osMessagePut>
			RestauraEeprom(&eeprom,hardReset); 	// restaura
 8004468:	2101      	movs	r1, #1
 800446a:	e7ee      	b.n	800444a <processaEeprom+0xba>
			EepromSetVar(&eeprom, &limiteTeto);
 800446c:	493a      	ldr	r1, [pc, #232]	; (8004558 <processaEeprom+0x1c8>)
 800446e:	4830      	ldr	r0, [pc, #192]	; (8004530 <processaEeprom+0x1a0>)
 8004470:	f7fd fb56 	bl	8001b20 <EepromSetVar>
			EepromSetVar(&eeprom, &limiteLastro);
 8004474:	4939      	ldr	r1, [pc, #228]	; (800455c <processaEeprom+0x1cc>)
 8004476:	e7af      	b.n	80043d8 <processaEeprom+0x48>
			EepromSetVar(&eeprom, &tempoDelayLuz);
 8004478:	4939      	ldr	r1, [pc, #228]	; (8004560 <processaEeprom+0x1d0>)
 800447a:	e7ad      	b.n	80043d8 <processaEeprom+0x48>
			Calendario.ContMaxTeto+=1;
 800447c:	4a2a      	ldr	r2, [pc, #168]	; (8004528 <processaEeprom+0x198>)
			EepromSetVar(&eeprom, &ContTetoMax);
 800447e:	4939      	ldr	r1, [pc, #228]	; (8004564 <processaEeprom+0x1d4>)
			Calendario.ContMaxTeto+=1;
 8004480:	8953      	ldrh	r3, [r2, #10]
 8004482:	3301      	adds	r3, #1
 8004484:	8153      	strh	r3, [r2, #10]
			EepromSetVar(&eeprom, &ContTetoMax);
 8004486:	e7a7      	b.n	80043d8 <processaEeprom+0x48>
			Calendario.ContMaxLastro+=1;
 8004488:	4a27      	ldr	r2, [pc, #156]	; (8004528 <processaEeprom+0x198>)
			EepromSetVar(&eeprom, &ContLastroMax);
 800448a:	4937      	ldr	r1, [pc, #220]	; (8004568 <processaEeprom+0x1d8>)
			Calendario.ContMaxLastro+=1;
 800448c:	8993      	ldrh	r3, [r2, #12]
 800448e:	3301      	adds	r3, #1
 8004490:	8193      	strh	r3, [r2, #12]
			EepromSetVar(&eeprom, &ContLastroMax);
 8004492:	e7a1      	b.n	80043d8 <processaEeprom+0x48>
			EepromSetVar(&eeprom, &hitereseStateTeto);
 8004494:	4935      	ldr	r1, [pc, #212]	; (800456c <processaEeprom+0x1dc>)
 8004496:	4826      	ldr	r0, [pc, #152]	; (8004530 <processaEeprom+0x1a0>)
 8004498:	f7fd fb42 	bl	8001b20 <EepromSetVar>
			EepromSetVarFloating(&eeprom, &kPTeto);
 800449c:	4934      	ldr	r1, [pc, #208]	; (8004570 <processaEeprom+0x1e0>)
 800449e:	4824      	ldr	r0, [pc, #144]	; (8004530 <processaEeprom+0x1a0>)
 80044a0:	f7fd fb8c 	bl	8001bbc <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kITeto);
 80044a4:	4933      	ldr	r1, [pc, #204]	; (8004574 <processaEeprom+0x1e4>)
 80044a6:	4822      	ldr	r0, [pc, #136]	; (8004530 <processaEeprom+0x1a0>)
			PID_SetTunings(&TPIDTeto, PrimitiveStates.Teto.kp, PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd);
 80044a8:	4c33      	ldr	r4, [pc, #204]	; (8004578 <processaEeprom+0x1e8>)
			EepromSetVarFloating(&eeprom, &kITeto);
 80044aa:	f7fd fb87 	bl	8001bbc <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kDTeto);
 80044ae:	4933      	ldr	r1, [pc, #204]	; (800457c <processaEeprom+0x1ec>)
 80044b0:	481f      	ldr	r0, [pc, #124]	; (8004530 <processaEeprom+0x1a0>)
 80044b2:	f7fd fb83 	bl	8001bbc <EepromSetVarFloating>
			EepromSetVar(&eeprom, &limiteTeto);
 80044b6:	4928      	ldr	r1, [pc, #160]	; (8004558 <processaEeprom+0x1c8>)
 80044b8:	481d      	ldr	r0, [pc, #116]	; (8004530 <processaEeprom+0x1a0>)
 80044ba:	f7fd fb31 	bl	8001b20 <EepromSetVar>
			PID_SetTunings(&TPIDTeto, PrimitiveStates.Teto.kp, PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd);
 80044be:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
 80044c2:	482f      	ldr	r0, [pc, #188]	; (8004580 <processaEeprom+0x1f0>)
 80044c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044c8:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	; 0x88
 80044cc:	e9cd 2300 	strd	r2, r3, [sp]
 80044d0:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
 80044d4:	f7fe fc9e 	bl	8002e14 <PID_SetTunings>
			EepromSetVar(&eeprom, &hitereseStateLastro);
 80044d8:	492a      	ldr	r1, [pc, #168]	; (8004584 <processaEeprom+0x1f4>)
 80044da:	4815      	ldr	r0, [pc, #84]	; (8004530 <processaEeprom+0x1a0>)
 80044dc:	f7fd fb20 	bl	8001b20 <EepromSetVar>
			EepromSetVarFloating(&eeprom, &kPLastro);
 80044e0:	4929      	ldr	r1, [pc, #164]	; (8004588 <processaEeprom+0x1f8>)
 80044e2:	4813      	ldr	r0, [pc, #76]	; (8004530 <processaEeprom+0x1a0>)
 80044e4:	f7fd fb6a 	bl	8001bbc <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kILastro);
 80044e8:	4928      	ldr	r1, [pc, #160]	; (800458c <processaEeprom+0x1fc>)
 80044ea:	4811      	ldr	r0, [pc, #68]	; (8004530 <processaEeprom+0x1a0>)
 80044ec:	f7fd fb66 	bl	8001bbc <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kDLastro);
 80044f0:	4927      	ldr	r1, [pc, #156]	; (8004590 <processaEeprom+0x200>)
 80044f2:	480f      	ldr	r0, [pc, #60]	; (8004530 <processaEeprom+0x1a0>)
 80044f4:	f7fd fb62 	bl	8001bbc <EepromSetVarFloating>
			EepromSetVar(&eeprom, &limiteLastro);
 80044f8:	4918      	ldr	r1, [pc, #96]	; (800455c <processaEeprom+0x1cc>)
 80044fa:	480d      	ldr	r0, [pc, #52]	; (8004530 <processaEeprom+0x1a0>)
 80044fc:	f7fd fb10 	bl	8001b20 <EepromSetVar>
			PID_SetTunings(&TPIDLastro, PrimitiveStates.Lastro.kp, PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd);
 8004500:	e9d4 2336 	ldrd	r2, r3, [r4, #216]	; 0xd8
 8004504:	4823      	ldr	r0, [pc, #140]	; (8004594 <processaEeprom+0x204>)
 8004506:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800450a:	e9d4 2334 	ldrd	r2, r3, [r4, #208]	; 0xd0
 800450e:	e9cd 2300 	strd	r2, r3, [sp]
 8004512:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
 8004516:	f7fe fc7d 	bl	8002e14 <PID_SetTunings>
}
 800451a:	b008      	add	sp, #32
 800451c:	bd10      	pop	{r4, pc}
			EepromSetVar(&eeprom, &FlagBuzzer);
 800451e:	491e      	ldr	r1, [pc, #120]	; (8004598 <processaEeprom+0x208>)
 8004520:	e75a      	b.n	80043d8 <processaEeprom+0x48>
 8004522:	bf00      	nop
 8004524:	200007e8 	.word	0x200007e8
 8004528:	200007d4 	.word	0x200007d4
 800452c:	20001830 	.word	0x20001830
 8004530:	20001398 	.word	0x20001398
 8004534:	20001518 	.word	0x20001518
 8004538:	20001544 	.word	0x20001544
 800453c:	2000159c 	.word	0x2000159c
 8004540:	200015c8 	.word	0x200015c8
 8004544:	20001570 	.word	0x20001570
 8004548:	2000182c 	.word	0x2000182c
 800454c:	20001128 	.word	0x20001128
 8004550:	20001394 	.word	0x20001394
 8004554:	2000088c 	.word	0x2000088c
 8004558:	200017d4 	.word	0x200017d4
 800455c:	200017a8 	.word	0x200017a8
 8004560:	20001800 	.word	0x20001800
 8004564:	2000133c 	.word	0x2000133c
 8004568:	20001310 	.word	0x20001310
 800456c:	200014ec 	.word	0x200014ec
 8004570:	20001760 	.word	0x20001760
 8004574:	200016d0 	.word	0x200016d0
 8004578:	20000890 	.word	0x20000890
 800457c:	20001640 	.word	0x20001640
 8004580:	200018d0 	.word	0x200018d0
 8004584:	200014c0 	.word	0x200014c0
 8004588:	20001718 	.word	0x20001718
 800458c:	20001688 	.word	0x20001688
 8004590:	200015f8 	.word	0x200015f8
 8004594:	20001860 	.word	0x20001860
 8004598:	20001368 	.word	0x20001368

0800459c <StartEeprom>:
{
 800459c:	b508      	push	{r3, lr}
	initEeprom();
 800459e:	f7ff fd07 	bl	8003fb0 <initEeprom>
		processaEeprom();
 80045a2:	f7ff fef5 	bl	8004390 <processaEeprom>
		osThreadYield();
 80045a6:	f003 faa5 	bl	8007af4 <osThreadYield>
		osDelay(500);
 80045aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045ae:	f003 faad 	bl	8007b0c <osDelay>
	for(;;)
 80045b2:	e7f6      	b.n	80045a2 <StartEeprom+0x6>

080045b4 <atualizaDataEeprom>:

void atualizaDataEeprom(RTC_DateTypeDef data, RTC_TimeTypeDef hora){
 80045b4:	b082      	sub	sp, #8
 80045b6:	e9cd 1000 	strd	r1, r0, [sp]
	datetoUpdate = data;
 80045ba:	4b11      	ldr	r3, [pc, #68]	; (8004600 <atualizaDataEeprom+0x4c>)
	timeToUpdate = hora;
 80045bc:	f8bd 1000 	ldrh.w	r1, [sp]
	datetoUpdate = data;
 80045c0:	6018      	str	r0, [r3, #0]
	timeToUpdate = hora;
 80045c2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <atualizaDataEeprom+0x50>)
 80045c8:	8019      	strh	r1, [r3, #0]
 80045ca:	709a      	strb	r2, [r3, #2]

	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
			(instalacaoAno.valor == 0 || instalacaoAno.valor > 200)){
		//primeiro recebimento de data
		osMessagePut(FilaEepromHandle, CEepromDataInstalacao, 0);
 80045cc:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <atualizaDataEeprom+0x54>)
 80045ce:	6818      	ldr	r0, [r3, #0]
	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 80045d0:	4b0e      	ldr	r3, [pc, #56]	; (800460c <atualizaDataEeprom+0x58>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	2b1e      	cmp	r3, #30
 80045d8:	d90e      	bls.n	80045f8 <atualizaDataEeprom+0x44>
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 80045da:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <atualizaDataEeprom+0x5c>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	3b01      	subs	r3, #1
	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 80045e0:	2b0b      	cmp	r3, #11
 80045e2:	d909      	bls.n	80045f8 <atualizaDataEeprom+0x44>
			(instalacaoAno.valor == 0 || instalacaoAno.valor > 200)){
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <atualizaDataEeprom+0x60>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	3b01      	subs	r3, #1
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 80045ea:	2bc7      	cmp	r3, #199	; 0xc7
 80045ec:	d904      	bls.n	80045f8 <atualizaDataEeprom+0x44>
		osMessagePut(FilaEepromHandle, CEepromDataInstalacao, 0);
 80045ee:	2200      	movs	r2, #0
 80045f0:	2101      	movs	r1, #1
	}else{
		//gravacao padrao de data e hora
		osMessagePut(FilaEepromHandle, CEepromAtualizaHora, 0);
	}
}
 80045f2:	b002      	add	sp, #8
		osMessagePut(FilaEepromHandle, CEepromAtualizaHora, 0);
 80045f4:	f003 bb55 	b.w	8007ca2 <osMessagePut>
 80045f8:	2200      	movs	r2, #0
 80045fa:	2104      	movs	r1, #4
 80045fc:	e7f9      	b.n	80045f2 <atualizaDataEeprom+0x3e>
 80045fe:	bf00      	nop
 8004600:	20001394 	.word	0x20001394
 8004604:	2000182c 	.word	0x2000182c
 8004608:	200007e8 	.word	0x200007e8
 800460c:	2000159c 	.word	0x2000159c
 8004610:	200015c8 	.word	0x200015c8
 8004614:	20001570 	.word	0x20001570

08004618 <initPID>:

	}
}


void initPID(void){
 8004618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	PID(&TPIDTeto, 		&PrimitiveStates.Teto.realtime, 	&PrimitiveStates.Teto.PWMOut, 	&PrimitiveStates.Teto.setPoint, 	PrimitiveStates.Teto.kp,PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800461c:	f04f 0801 	mov.w	r8, #1
 8004620:	f04f 0900 	mov.w	r9, #0
void initPID(void){
 8004624:	b089      	sub	sp, #36	; 0x24
	PID(&TPIDTeto, 		&PrimitiveStates.Teto.realtime, 	&PrimitiveStates.Teto.PWMOut, 	&PrimitiveStates.Teto.setPoint, 	PrimitiveStates.Teto.kp,PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004626:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800462a:	4c2b      	ldr	r4, [pc, #172]	; (80046d8 <initPID+0xc0>)
 800462c:	4f2b      	ldr	r7, [pc, #172]	; (80046dc <initPID+0xc4>)
 800462e:	e954 2306 	ldrd	r2, r3, [r4, #-24]
 8004632:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004636:	e954 2308 	ldrd	r2, r3, [r4, #-32]
 800463a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800463e:	4638      	mov	r0, r7
 8004640:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8004644:	f1a4 0108 	sub.w	r1, r4, #8
 8004648:	e9cd 2300 	strd	r2, r3, [sp]
 800464c:	4623      	mov	r3, r4
 800464e:	f1a4 0210 	sub.w	r2, r4, #16
 8004652:	f7fe fc11 	bl	8002e78 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.Lastro.realtime, 	&PrimitiveStates.Lastro.PWMOut,	&PrimitiveStates.Lastro.setPoint, 	PrimitiveStates.Lastro.kp,PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004656:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800465a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800465e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004662:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8004666:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800466a:	4e1d      	ldr	r6, [pc, #116]	; (80046e0 <initPID+0xc8>)
 800466c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8004670:	4630      	mov	r0, r6
 8004672:	e9cd 2300 	strd	r2, r3, [sp]
 8004676:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800467a:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800467e:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8004682:	f7fe fbf9 	bl	8002e78 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 8004686:	4641      	mov	r1, r8
 8004688:	4638      	mov	r0, r7
 800468a:	f7fe fafc 	bl	8002c86 <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 800468e:	2400      	movs	r4, #0
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 8004690:	4641      	mov	r1, r8
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8004692:	2500      	movs	r5, #0
 8004694:	f04f 0800 	mov.w	r8, #0
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 8004698:	4630      	mov	r0, r6
 800469a:	f7fe faf4 	bl	8002c86 <PID_SetMode>
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 800469e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80046e4 <initPID+0xcc>
	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 80046a2:	4638      	mov	r0, r7
 80046a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80046a8:	f7fe fc1a 	bl	8002ee0 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 80046ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80046b0:	4630      	mov	r0, r6
 80046b2:	f7fe fc15 	bl	8002ee0 <PID_SetSampleTime>
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 80046b6:	4622      	mov	r2, r4
 80046b8:	462b      	mov	r3, r5
 80046ba:	4638      	mov	r0, r7
 80046bc:	e9cd 8900 	strd	r8, r9, [sp]
 80046c0:	f7fe faee 	bl	8002ca0 <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 80046c4:	4622      	mov	r2, r4
 80046c6:	462b      	mov	r3, r5
 80046c8:	4630      	mov	r0, r6
 80046ca:	e9cd 8900 	strd	r8, r9, [sp]
 80046ce:	f7fe fae7 	bl	8002ca0 <PID_SetOutputLimits>
}
 80046d2:	b009      	add	sp, #36	; 0x24
 80046d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046d8:	20000938 	.word	0x20000938
 80046dc:	200018d0 	.word	0x200018d0
 80046e0:	20001860 	.word	0x20001860
 80046e4:	40590000 	.word	0x40590000

080046e8 <computaPID>:
void computaPID(void){
 80046e8:	b510      	push	{r4, lr}

	PID_Compute(&TPIDTeto);
 80046ea:	480d      	ldr	r0, [pc, #52]	; (8004720 <computaPID+0x38>)
	PID_Compute(&TPIDLastro);

	//transformar para a classe realizar isso //
	IndviduoPID_SetPWMValueDirect(&PrimitiveStates.Teto, (uint32_t)PrimitiveStates.Teto.PWMOut);
 80046ec:	4c0d      	ldr	r4, [pc, #52]	; (8004724 <computaPID+0x3c>)
	PID_Compute(&TPIDTeto);
 80046ee:	f7fe fa2c 	bl	8002b4a <PID_Compute>
	PID_Compute(&TPIDLastro);
 80046f2:	480d      	ldr	r0, [pc, #52]	; (8004728 <computaPID+0x40>)
 80046f4:	f7fe fa29 	bl	8002b4a <PID_Compute>
	IndviduoPID_SetPWMValueDirect(&PrimitiveStates.Teto, (uint32_t)PrimitiveStates.Teto.PWMOut);
 80046f8:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
 80046fc:	f7fc f986 	bl	8000a0c <__aeabi_d2uiz>
 8004700:	4601      	mov	r1, r0
 8004702:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8004706:	f7fd fd3c 	bl	8002182 <IndviduoPID_SetPWMValueDirect>
	IndviduoPID_SetPWMValueDirect(&PrimitiveStates.Lastro, (uint32_t)PrimitiveStates.Lastro.PWMOut);
 800470a:	e9d4 0138 	ldrd	r0, r1, [r4, #224]	; 0xe0
 800470e:	f7fc f97d 	bl	8000a0c <__aeabi_d2uiz>
 8004712:	4601      	mov	r1, r0
 8004714:	f104 00c0 	add.w	r0, r4, #192	; 0xc0

}
 8004718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	IndviduoPID_SetPWMValueDirect(&PrimitiveStates.Lastro, (uint32_t)PrimitiveStates.Lastro.PWMOut);
 800471c:	f7fd bd31 	b.w	8002182 <IndviduoPID_SetPWMValueDirect>
 8004720:	200018d0 	.word	0x200018d0
 8004724:	20000890 	.word	0x20000890
 8004728:	20001860 	.word	0x20001860

0800472c <StartTemperatura>:
void StartTemperatura(void const * argument){
 800472c:	b507      	push	{r0, r1, r2, lr}
	xLastWakeTime = xTaskGetTickCount();
 800472e:	f004 f9cb 	bl	8008ac8 <xTaskGetTickCount>
 8004732:	9001      	str	r0, [sp, #4]
	initPID();
 8004734:	f7ff ff70 	bl	8004618 <initPID>
		computaPID();
 8004738:	f7ff ffd6 	bl	80046e8 <computaPID>
		osDelayUntil(&xLastWakeTime,TIME_PID_CALC);
 800473c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004740:	a801      	add	r0, sp, #4
 8004742:	f003 fb2c 	bl	8007d9e <osDelayUntil>
		osThreadYield();
 8004746:	f003 f9d5 	bl	8007af4 <osThreadYield>
	for(;;)	{
 800474a:	e7f5      	b.n	8004738 <StartTemperatura+0xc>

0800474c <WatchDogLimitesTemperatura>:
	SaidasLeds();

	//Contador do horimetro
	Horimetro();
}
void WatchDogLimitesTemperatura(void){
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static bool flagMaxLastro,flagMaxTeto,flagTimer,flagTimerLastro;

	//Atingiu limite no TETO com incremento a cada ciclo
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 800474e:	4c3a      	ldr	r4, [pc, #232]	; (8004838 <WatchDogLimitesTemperatura+0xec>)
		if(!flagMaxTeto){
 8004750:	4e3a      	ldr	r6, [pc, #232]	; (800483c <WatchDogLimitesTemperatura+0xf0>)
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 8004752:	f8b4 00b0 	ldrh.w	r0, [r4, #176]	; 0xb0
 8004756:	f7fb fe55 	bl	8000404 <__aeabi_i2d>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
 8004762:	f7fc f949 	bl	80009f8 <__aeabi_dcmpgt>
		if(!flagMaxTeto){
 8004766:	7837      	ldrb	r7, [r6, #0]
 8004768:	4d35      	ldr	r5, [pc, #212]	; (8004840 <WatchDogLimitesTemperatura+0xf4>)
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 800476a:	b1a0      	cbz	r0, 8004796 <WatchDogLimitesTemperatura+0x4a>
		if(!flagMaxTeto){
 800476c:	b93f      	cbnz	r7, 800477e <WatchDogLimitesTemperatura+0x32>
			flagMaxTeto = 1;
 800476e:	2301      	movs	r3, #1
 8004770:	7033      	strb	r3, [r6, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
 8004772:	4b34      	ldr	r3, [pc, #208]	; (8004844 <WatchDogLimitesTemperatura+0xf8>)
 8004774:	463a      	mov	r2, r7
 8004776:	2108      	movs	r1, #8
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	f003 fa92 	bl	8007ca2 <osMessagePut>
		}
		if(!flagTimer && PrimitiveStates.stateTimer == TIMER_decrementando){
 800477e:	782a      	ldrb	r2, [r5, #0]
 8004780:	b94a      	cbnz	r2, 8004796 <WatchDogLimitesTemperatura+0x4a>
 8004782:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8004786:	2b01      	cmp	r3, #1
 8004788:	d105      	bne.n	8004796 <WatchDogLimitesTemperatura+0x4a>
			flagTimer = 1;
 800478a:	702b      	strb	r3, [r5, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
 800478c:	4b2d      	ldr	r3, [pc, #180]	; (8004844 <WatchDogLimitesTemperatura+0xf8>)
 800478e:	2108      	movs	r1, #8
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	f003 fa86 	bl	8007ca2 <osMessagePut>
		}
	}
	//cancela flags
	if(flagMaxTeto && PrimitiveStates.Teto.realtime<PrimitiveStates.Teto.limite-20)
 8004796:	7833      	ldrb	r3, [r6, #0]
 8004798:	b16b      	cbz	r3, 80047b6 <WatchDogLimitesTemperatura+0x6a>
 800479a:	f8b4 00b0 	ldrh.w	r0, [r4, #176]	; 0xb0
 800479e:	3814      	subs	r0, #20
 80047a0:	f7fb fe30 	bl	8000404 <__aeabi_i2d>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
 80047ac:	f7fc f906 	bl	80009bc <__aeabi_dcmplt>
 80047b0:	b108      	cbz	r0, 80047b6 <WatchDogLimitesTemperatura+0x6a>
		flagMaxTeto = 0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	7033      	strb	r3, [r6, #0]
	if(flagTimer && PrimitiveStates.stateTimer == TIMER_idle)
 80047b6:	782b      	ldrb	r3, [r5, #0]
 80047b8:	b11b      	cbz	r3, 80047c2 <WatchDogLimitesTemperatura+0x76>
 80047ba:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 80047be:	b903      	cbnz	r3, 80047c2 <WatchDogLimitesTemperatura+0x76>
		flagTimer=0;
 80047c0:	702b      	strb	r3, [r5, #0]

	//Atingiu limite no LASTRO com incremento a cada ciclo
	if(PrimitiveStates.Lastro.realtime>PrimitiveStates.Lastro.limite){
 80047c2:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
 80047c6:	f7fb fe1d 	bl	8000404 <__aeabi_i2d>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
 80047d2:	f7fc f911 	bl	80009f8 <__aeabi_dcmpgt>
		if(!flagMaxLastro){
 80047d6:	4e1c      	ldr	r6, [pc, #112]	; (8004848 <WatchDogLimitesTemperatura+0xfc>)
 80047d8:	4d1c      	ldr	r5, [pc, #112]	; (800484c <WatchDogLimitesTemperatura+0x100>)
 80047da:	7837      	ldrb	r7, [r6, #0]
	if(PrimitiveStates.Lastro.realtime>PrimitiveStates.Lastro.limite){
 80047dc:	b1a0      	cbz	r0, 8004808 <WatchDogLimitesTemperatura+0xbc>
		if(!flagMaxLastro){
 80047de:	b93f      	cbnz	r7, 80047f0 <WatchDogLimitesTemperatura+0xa4>
			flagMaxLastro = 1;
 80047e0:	2301      	movs	r3, #1
 80047e2:	7033      	strb	r3, [r6, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
 80047e4:	4b17      	ldr	r3, [pc, #92]	; (8004844 <WatchDogLimitesTemperatura+0xf8>)
 80047e6:	463a      	mov	r2, r7
 80047e8:	2109      	movs	r1, #9
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	f003 fa59 	bl	8007ca2 <osMessagePut>
		}
		if(!flagTimerLastro && PrimitiveStates.stateTimer == TIMER_decrementando){
 80047f0:	782a      	ldrb	r2, [r5, #0]
 80047f2:	b94a      	cbnz	r2, 8004808 <WatchDogLimitesTemperatura+0xbc>
 80047f4:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <WatchDogLimitesTemperatura+0xbc>
			flagTimerLastro = 1;
 80047fc:	702b      	strb	r3, [r5, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
 80047fe:	4b11      	ldr	r3, [pc, #68]	; (8004844 <WatchDogLimitesTemperatura+0xf8>)
 8004800:	2109      	movs	r1, #9
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	f003 fa4d 	bl	8007ca2 <osMessagePut>
		}
	}
	//cancela flags
	if(flagMaxLastro && PrimitiveStates.Lastro.realtime<PrimitiveStates.Lastro.limite-20)
 8004808:	7833      	ldrb	r3, [r6, #0]
 800480a:	b16b      	cbz	r3, 8004828 <WatchDogLimitesTemperatura+0xdc>
 800480c:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
 8004810:	3814      	subs	r0, #20
 8004812:	f7fb fdf7 	bl	8000404 <__aeabi_i2d>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
 800481e:	f7fc f8cd 	bl	80009bc <__aeabi_dcmplt>
 8004822:	b108      	cbz	r0, 8004828 <WatchDogLimitesTemperatura+0xdc>
		flagMaxLastro = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	7033      	strb	r3, [r6, #0]
	if(flagTimerLastro && PrimitiveStates.stateTimer == TIMER_idle)
 8004828:	782b      	ldrb	r3, [r5, #0]
 800482a:	b11b      	cbz	r3, 8004834 <WatchDogLimitesTemperatura+0xe8>
 800482c:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8004830:	b903      	cbnz	r3, 8004834 <WatchDogLimitesTemperatura+0xe8>
		flagTimerLastro=0;
 8004832:	702b      	strb	r3, [r5, #0]


}
 8004834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004836:	bf00      	nop
 8004838:	20000890 	.word	0x20000890
 800483c:	20001943 	.word	0x20001943
 8004840:	20001944 	.word	0x20001944
 8004844:	200007e8 	.word	0x200007e8
 8004848:	20001942 	.word	0x20001942
 800484c:	20001945 	.word	0x20001945

08004850 <SaidasLeds>:
void SaidasLeds(void){
 8004850:	b510      	push	{r4, lr}

	//LED VERDE - indica que as 2 saidas estao ok
	if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando ){
 8004852:	4c14      	ldr	r4, [pc, #80]	; (80048a4 <SaidasLeds+0x54>)
 8004854:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 8004858:	2b01      	cmp	r3, #1
 800485a:	d017      	beq.n	800488c <SaidasLeds+0x3c>
 800485c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8004860:	2b01      	cmp	r3, #1
 8004862:	d013      	beq.n	800488c <SaidasLeds+0x3c>
		onDigital(&PrimitiveStates.LedVerde);
 8004864:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004868:	f7fd fbb8 	bl	8001fdc <onDigital>
	}else{
		offDigital(&PrimitiveStates.LedVerde);
	}

	//LED VERMELHO TETO
	if(PrimitiveStates.Teto._PWMstate == buscando){
 800486c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		onDigital(&PrimitiveStates.LedTeto);
 8004870:	480d      	ldr	r0, [pc, #52]	; (80048a8 <SaidasLeds+0x58>)
	if(PrimitiveStates.Teto._PWMstate == buscando){
 8004872:	2b01      	cmp	r3, #1
 8004874:	d10e      	bne.n	8004894 <SaidasLeds+0x44>
		onDigital(&PrimitiveStates.LedTeto);
 8004876:	f7fd fbb1 	bl	8001fdc <onDigital>
	}else{
		offDigital(&PrimitiveStates.LedTeto);
	}

	//LED VERMELHO LASTRO
	if(PrimitiveStates.Lastro._PWMstate == buscando){
 800487a:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
		onDigital(&PrimitiveStates.LedLastro);
 800487e:	480b      	ldr	r0, [pc, #44]	; (80048ac <SaidasLeds+0x5c>)
	if(PrimitiveStates.Lastro._PWMstate == buscando){
 8004880:	2b01      	cmp	r3, #1
 8004882:	d10a      	bne.n	800489a <SaidasLeds+0x4a>
	}else{
		offDigital(&PrimitiveStates.LedLastro);
	}
}
 8004884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		onDigital(&PrimitiveStates.LedLastro);
 8004888:	f7fd bba8 	b.w	8001fdc <onDigital>
		offDigital(&PrimitiveStates.LedVerde);
 800488c:	4808      	ldr	r0, [pc, #32]	; (80048b0 <SaidasLeds+0x60>)
 800488e:	f7fd fbaf 	bl	8001ff0 <offDigital>
 8004892:	e7eb      	b.n	800486c <SaidasLeds+0x1c>
		offDigital(&PrimitiveStates.LedTeto);
 8004894:	f7fd fbac 	bl	8001ff0 <offDigital>
 8004898:	e7ef      	b.n	800487a <SaidasLeds+0x2a>
}
 800489a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		offDigital(&PrimitiveStates.LedLastro);
 800489e:	f7fd bba7 	b.w	8001ff0 <offDigital>
 80048a2:	bf00      	nop
 80048a4:	20000890 	.word	0x20000890
 80048a8:	200008d8 	.word	0x200008d8
 80048ac:	200008f0 	.word	0x200008f0
 80048b0:	200008c0 	.word	0x200008c0

080048b4 <Horimetro>:
void Horimetro(void){
	static uint8_t segundos=0;
	//esperar implementacao digital output
	if(PrimitiveStates.Lastro._PWMstate != idle || PrimitiveStates.Teto._PWMstate != idle){
 80048b4:	4a0b      	ldr	r2, [pc, #44]	; (80048e4 <Horimetro+0x30>)
 80048b6:	490c      	ldr	r1, [pc, #48]	; (80048e8 <Horimetro+0x34>)
 80048b8:	f892 30fc 	ldrb.w	r3, [r2, #252]	; 0xfc
 80048bc:	f892 20b4 	ldrb.w	r2, [r2, #180]	; 0xb4
 80048c0:	4313      	orrs	r3, r2
 80048c2:	d00d      	beq.n	80048e0 <Horimetro+0x2c>
		segundos++;
 80048c4:	780b      	ldrb	r3, [r1, #0]
 80048c6:	3301      	adds	r3, #1
 80048c8:	b2db      	uxtb	r3, r3
		if(segundos == 60){
 80048ca:	2b3c      	cmp	r3, #60	; 0x3c
 80048cc:	d001      	beq.n	80048d2 <Horimetro+0x1e>
			segundos = 0;
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
		}

	}else{
		segundos = 1;
 80048ce:	700b      	strb	r3, [r1, #0]
	}
}
 80048d0:	4770      	bx	lr
			segundos = 0;
 80048d2:	2200      	movs	r2, #0
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
 80048d4:	4b05      	ldr	r3, [pc, #20]	; (80048ec <Horimetro+0x38>)
			segundos = 0;
 80048d6:	700a      	strb	r2, [r1, #0]
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	4611      	mov	r1, r2
 80048dc:	f003 b9e1 	b.w	8007ca2 <osMessagePut>
		segundos = 1;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e7f4      	b.n	80048ce <Horimetro+0x1a>
 80048e4:	20000890 	.word	0x20000890
 80048e8:	20001946 	.word	0x20001946
 80048ec:	200007e8 	.word	0x200007e8

080048f0 <sinalizacaoReachTemp>:
void sinalizacaoReachTemp(void){
 80048f0:	b570      	push	{r4, r5, r6, lr}
	static GenericPwmState __StateTeto, __StateLastro;

	//verifica se o estado anterior estava em buscando em qualquer dos dois PID
	if(__StateTeto == buscando || __StateLastro == buscando){
 80048f2:	4e0e      	ldr	r6, [pc, #56]	; (800492c <sinalizacaoReachTemp+0x3c>)
 80048f4:	4d0e      	ldr	r5, [pc, #56]	; (8004930 <sinalizacaoReachTemp+0x40>)
 80048f6:	7833      	ldrb	r3, [r6, #0]
 80048f8:	4c0e      	ldr	r4, [pc, #56]	; (8004934 <sinalizacaoReachTemp+0x44>)
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d002      	beq.n	8004904 <sinalizacaoReachTemp+0x14>
 80048fe:	782b      	ldrb	r3, [r5, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d10c      	bne.n	800491e <sinalizacaoReachTemp+0x2e>
		if(PrimitiveStates.Teto._PWMstate != buscando && PrimitiveStates.Lastro._PWMstate != buscando ){
 8004904:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8004908:	2b01      	cmp	r3, #1
 800490a:	d008      	beq.n	800491e <sinalizacaoReachTemp+0x2e>
 800490c:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 8004910:	2b01      	cmp	r3, #1
 8004912:	d004      	beq.n	800491e <sinalizacaoReachTemp+0x2e>
			//notifica que chegou na temperatura
			osSignalSet(TaskBuzzerHandle, SINAL_TEMP_REACH);
 8004914:	4b08      	ldr	r3, [pc, #32]	; (8004938 <sinalizacaoReachTemp+0x48>)
 8004916:	2101      	movs	r1, #1
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	f003 f940 	bl	8007b9e <osSignalSet>
		}
	}
	__StateTeto 	= PrimitiveStates.Teto._PWMstate;
 800491e:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8004922:	7033      	strb	r3, [r6, #0]
	__StateLastro 	= PrimitiveStates.Lastro._PWMstate;
 8004924:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 8004928:	702b      	strb	r3, [r5, #0]


}
 800492a:	bd70      	pop	{r4, r5, r6, pc}
 800492c:	20001941 	.word	0x20001941
 8004930:	20001940 	.word	0x20001940
 8004934:	20000890 	.word	0x20000890
 8004938:	20000c44 	.word	0x20000c44

0800493c <taskTemperatura1sec>:
void taskTemperatura1sec(void){
 800493c:	b508      	push	{r3, lr}
	WatchDogLimitesTemperatura();
 800493e:	f7ff ff05 	bl	800474c <WatchDogLimitesTemperatura>
	sinalizacaoReachTemp();
 8004942:	f7ff ffd5 	bl	80048f0 <sinalizacaoReachTemp>
	SaidasLeds();
 8004946:	f7ff ff83 	bl	8004850 <SaidasLeds>
}
 800494a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Horimetro();
 800494e:	f7ff bfb1 	b.w	80048b4 <Horimetro>
	...

08004954 <funcionamentoTimer>:
		osThreadYield();
		osDelayUntil(&xLastWakeTime,1000);
	}
}

void funcionamentoTimer(void){
 8004954:	b570      	push	{r4, r5, r6, lr}

	//Decremento de minutos e segundos
	if((PrimitiveStates.RTTimerMinutos>0 && PrimitiveStates.RTTimerSegundos==0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004956:	4c1a      	ldr	r4, [pc, #104]	; (80049c0 <funcionamentoTimer+0x6c>)
 8004958:	f894 510b 	ldrb.w	r5, [r4, #267]	; 0x10b
 800495c:	b15d      	cbz	r5, 8004976 <funcionamentoTimer+0x22>
 800495e:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
 8004962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004966:	d10a      	bne.n	800497e <funcionamentoTimer+0x2a>
		PrimitiveStates.RTTimerSegundos = 59;
 8004968:	233b      	movs	r3, #59	; 0x3b
		PrimitiveStates.RTTimerMinutos--;
 800496a:	3d01      	subs	r5, #1
		PrimitiveStates.RTTimerSegundos = 59;
 800496c:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
		PrimitiveStates.RTTimerMinutos--;
 8004970:	f884 510b 	strb.w	r5, [r4, #267]	; 0x10b
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
			PrimitiveStates.stateTimer = TIMER_idle;
			osThreadResume(TaskBuzzerHandle);
		}
	}
}
 8004974:	bd70      	pop	{r4, r5, r6, pc}
	}else if((PrimitiveStates.RTTimerMinutos>0 || PrimitiveStates.RTTimerSegundos>0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004976:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0fa      	beq.n	8004974 <funcionamentoTimer+0x20>
 800497e:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8004982:	2b01      	cmp	r3, #1
 8004984:	d1f6      	bne.n	8004974 <funcionamentoTimer+0x20>
		PrimitiveStates.RTTimerSegundos--;
 8004986:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 800498a:	3b01      	subs	r3, #1
 800498c:	b2db      	uxtb	r3, r3
 800498e:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
		if(PrimitiveStates.RTTimerSegundos==0 && PrimitiveStates.RTTimerMinutos==0 && PrimitiveStates.stateTimer != TIMER_idle){
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1ee      	bne.n	8004974 <funcionamentoTimer+0x20>
 8004996:	2d00      	cmp	r5, #0
 8004998:	d1ec      	bne.n	8004974 <funcionamentoTimer+0x20>
			osMessagePut(FilaEepromHandle, CEepromNewCile, 0);
 800499a:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <funcionamentoTimer+0x70>)
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
 800499c:	4e0a      	ldr	r6, [pc, #40]	; (80049c8 <funcionamentoTimer+0x74>)
			osMessagePut(FilaEepromHandle, CEepromNewCile, 0);
 800499e:	462a      	mov	r2, r5
 80049a0:	2107      	movs	r1, #7
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	f003 f97d 	bl	8007ca2 <osMessagePut>
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
 80049a8:	6830      	ldr	r0, [r6, #0]
 80049aa:	2108      	movs	r1, #8
 80049ac:	f003 f8f7 	bl	8007b9e <osSignalSet>
			osThreadResume(TaskBuzzerHandle);
 80049b0:	6830      	ldr	r0, [r6, #0]
			PrimitiveStates.stateTimer = TIMER_idle;
 80049b2:	f884 510d 	strb.w	r5, [r4, #269]	; 0x10d
}
 80049b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osThreadResume(TaskBuzzerHandle);
 80049ba:	f003 b9d9 	b.w	8007d70 <osThreadResume>
 80049be:	bf00      	nop
 80049c0:	20000890 	.word	0x20000890
 80049c4:	200007e8 	.word	0x200007e8
 80049c8:	20000c44 	.word	0x20000c44

080049cc <verificaErro>:


void verificaErro(void){
 80049cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	osEvent evt;
	evt = osSignalWait (ERRO_CRITICO, 0);
 80049ce:	2200      	movs	r2, #0
 80049d0:	210f      	movs	r1, #15
 80049d2:	a801      	add	r0, sp, #4
 80049d4:	f003 f90c 	bl	8007bf0 <osSignalWait>
	if (evt.status == osEventSignal){
 80049d8:	9b01      	ldr	r3, [sp, #4]
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d109      	bne.n	80049f2 <verificaErro+0x26>

		if(evt.value.v == ERRO_CRITICO){
 80049de:	9b02      	ldr	r3, [sp, #8]
 80049e0:	2b0f      	cmp	r3, #15
 80049e2:	d106      	bne.n	80049f2 <verificaErro+0x26>
			osThreadSuspend(TaskTimerHandle);
 80049e4:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <verificaErro+0x2c>)
 80049e6:	6818      	ldr	r0, [r3, #0]
		}
	}
}
 80049e8:	b005      	add	sp, #20
 80049ea:	f85d eb04 	ldr.w	lr, [sp], #4
			osThreadSuspend(TaskTimerHandle);
 80049ee:	f003 b9ba 	b.w	8007d66 <osThreadSuspend>
}
 80049f2:	b005      	add	sp, #20
 80049f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80049f8:	20000ef0 	.word	0x20000ef0

080049fc <StartTimer>:
{
 80049fc:	b507      	push	{r0, r1, r2, lr}
	xLastWakeTime = xTaskGetTickCount();
 80049fe:	f004 f863 	bl	8008ac8 <xTaskGetTickCount>
 8004a02:	9001      	str	r0, [sp, #4]
		verificaErro();
 8004a04:	f7ff ffe2 	bl	80049cc <verificaErro>
		funcionamentoTimer();
 8004a08:	f7ff ffa4 	bl	8004954 <funcionamentoTimer>
		osThreadYield();
 8004a0c:	f003 f872 	bl	8007af4 <osThreadYield>
		osDelayUntil(&xLastWakeTime,1000);
 8004a10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a14:	a801      	add	r0, sp, #4
 8004a16:	f003 f9c2 	bl	8007d9e <osDelayUntil>
	for(;;)
 8004a1a:	e7f3      	b.n	8004a04 <StartTimer+0x8>

08004a1c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a1c:	4a07      	ldr	r2, [pc, #28]	; (8004a3c <HAL_Init+0x20>)
{
 8004a1e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a20:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a22:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a24:	f043 0310 	orr.w	r3, r3, #16
 8004a28:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a2a:	f000 fa55 	bl	8004ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a2e:	200f      	movs	r0, #15
 8004a30:	f7fe fca4 	bl	800337c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a34:	f7fe fa7a 	bl	8002f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004a38:	2000      	movs	r0, #0
 8004a3a:	bd08      	pop	{r3, pc}
 8004a3c:	40022000 	.word	0x40022000

08004a40 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004a40:	4a03      	ldr	r2, [pc, #12]	; (8004a50 <HAL_IncTick+0x10>)
 8004a42:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <HAL_IncTick+0x14>)
 8004a44:	6811      	ldr	r1, [r2, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	440b      	add	r3, r1
 8004a4a:	6013      	str	r3, [r2, #0]
}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20001948 	.word	0x20001948
 8004a54:	20000004 	.word	0x20000004

08004a58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004a58:	4b01      	ldr	r3, [pc, #4]	; (8004a60 <HAL_GetTick+0x8>)
 8004a5a:	6818      	ldr	r0, [r3, #0]
}
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20001948 	.word	0x20001948

08004a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004a68:	f7ff fff6 	bl	8004a58 <HAL_GetTick>
 8004a6c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a6e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004a70:	bf1e      	ittt	ne
 8004a72:	4b04      	ldrne	r3, [pc, #16]	; (8004a84 <HAL_Delay+0x20>)
 8004a74:	781b      	ldrbne	r3, [r3, #0]
 8004a76:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a78:	f7ff ffee 	bl	8004a58 <HAL_GetTick>
 8004a7c:	1b43      	subs	r3, r0, r5
 8004a7e:	42a3      	cmp	r3, r4
 8004a80:	d3fa      	bcc.n	8004a78 <HAL_Delay+0x14>
  {
  }
}
 8004a82:	bd38      	pop	{r3, r4, r5, pc}
 8004a84:	20000004 	.word	0x20000004

08004a88 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a88:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004a8a:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a8e:	f012 0f50 	tst.w	r2, #80	; 0x50
 8004a92:	d11b      	bne.n	8004acc <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	6892      	ldr	r2, [r2, #8]
 8004aa0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8004aa4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8004aa8:	d10c      	bne.n	8004ac4 <ADC_DMAConvCplt+0x3c>
 8004aaa:	7b1a      	ldrb	r2, [r3, #12]
 8004aac:	b952      	cbnz	r2, 8004ac4 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ab4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ab8:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004aba:	bf5e      	ittt	pl
 8004abc:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8004abe:	f042 0201 	orrpl.w	r2, r2, #1
 8004ac2:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fd ffb5 	bl	8002a34 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004aca:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004acc:	6a1b      	ldr	r3, [r3, #32]
}
 8004ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	4718      	bx	r3

08004ad6 <HAL_ADC_ConvHalfCpltCallback>:
 8004ad6:	4770      	bx	lr

08004ad8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ad8:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ada:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004adc:	f7ff fffb 	bl	8004ad6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ae0:	bd08      	pop	{r3, pc}

08004ae2 <HAL_ADC_ErrorCallback>:
 8004ae2:	4770      	bx	lr

08004ae4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ae4:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8004ae6:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ae8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aee:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004af0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004af2:	f043 0304 	orr.w	r3, r3, #4
 8004af6:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004af8:	f7ff fff3 	bl	8004ae2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004afc:	bd08      	pop	{r3, pc}
	...

08004b00 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8004b00:	2300      	movs	r3, #0
{ 
 8004b02:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8004b04:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004b06:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8004b0a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d06c      	beq.n	8004bea <HAL_ADC_ConfigChannel+0xea>
 8004b10:	2301      	movs	r3, #1
 8004b12:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8004b16:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004b18:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8004b1a:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004b1c:	6808      	ldr	r0, [r1, #0]
 8004b1e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8004b22:	d822      	bhi.n	8004b6a <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004b24:	261f      	movs	r6, #31
 8004b26:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8004b28:	3b05      	subs	r3, #5
 8004b2a:	409e      	lsls	r6, r3
 8004b2c:	ea25 0506 	bic.w	r5, r5, r6
 8004b30:	fa00 f303 	lsl.w	r3, r0, r3
 8004b34:	432b      	orrs	r3, r5
 8004b36:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004b38:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004b3a:	688b      	ldr	r3, [r1, #8]
 8004b3c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8004b40:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004b44:	d929      	bls.n	8004b9a <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004b46:	68d6      	ldr	r6, [r2, #12]
 8004b48:	3d1e      	subs	r5, #30
 8004b4a:	40a9      	lsls	r1, r5
 8004b4c:	ea26 0101 	bic.w	r1, r6, r1
 8004b50:	40ab      	lsls	r3, r5
 8004b52:	430b      	orrs	r3, r1
 8004b54:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004b56:	f1a0 0310 	sub.w	r3, r0, #16
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d925      	bls.n	8004baa <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b5e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8004b60:	2300      	movs	r3, #0
 8004b62:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8004b66:	b002      	add	sp, #8
 8004b68:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8004b6a:	2d0c      	cmp	r5, #12
 8004b6c:	f04f 051f 	mov.w	r5, #31
 8004b70:	d809      	bhi.n	8004b86 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004b72:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8004b74:	3b23      	subs	r3, #35	; 0x23
 8004b76:	409d      	lsls	r5, r3
 8004b78:	ea26 0505 	bic.w	r5, r6, r5
 8004b7c:	fa00 f303 	lsl.w	r3, r0, r3
 8004b80:	432b      	orrs	r3, r5
 8004b82:	6313      	str	r3, [r2, #48]	; 0x30
 8004b84:	e7d8      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004b86:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8004b88:	3b41      	subs	r3, #65	; 0x41
 8004b8a:	409d      	lsls	r5, r3
 8004b8c:	ea26 0505 	bic.w	r5, r6, r5
 8004b90:	fa00 f303 	lsl.w	r3, r0, r3
 8004b94:	432b      	orrs	r3, r5
 8004b96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b98:	e7ce      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004b9a:	6910      	ldr	r0, [r2, #16]
 8004b9c:	40a9      	lsls	r1, r5
 8004b9e:	ea20 0101 	bic.w	r1, r0, r1
 8004ba2:	40ab      	lsls	r3, r5
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	6113      	str	r3, [r2, #16]
 8004ba8:	e7d9      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <HAL_ADC_ConfigChannel+0xf0>)
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d116      	bne.n	8004bde <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004bb0:	6893      	ldr	r3, [r2, #8]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	d4d3      	bmi.n	8004b5e <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004bb6:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bb8:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004bba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bbe:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bc0:	d1cd      	bne.n	8004b5e <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004bc2:	4b0c      	ldr	r3, [pc, #48]	; (8004bf4 <HAL_ADC_ConfigChannel+0xf4>)
 8004bc4:	4a0c      	ldr	r2, [pc, #48]	; (8004bf8 <HAL_ADC_ConfigChannel+0xf8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bcc:	220a      	movs	r2, #10
 8004bce:	4353      	muls	r3, r2
            wait_loop_index--;
 8004bd0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004bd2:	9b01      	ldr	r3, [sp, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0c2      	beq.n	8004b5e <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8004bd8:	9b01      	ldr	r3, [sp, #4]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	e7f8      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8004be0:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004be2:	f043 0320 	orr.w	r3, r3, #32
 8004be6:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8004be8:	e7ba      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8004bea:	2002      	movs	r0, #2
 8004bec:	e7bb      	b.n	8004b66 <HAL_ADC_ConfigChannel+0x66>
 8004bee:	bf00      	nop
 8004bf0:	40012400 	.word	0x40012400
 8004bf4:	20000000 	.word	0x20000000
 8004bf8:	000f4240 	.word	0x000f4240

08004bfc <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8004bfc:	2300      	movs	r3, #0
{
 8004bfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8004c00:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004c02:	6803      	ldr	r3, [r0, #0]
{
 8004c04:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	07d2      	lsls	r2, r2, #31
 8004c0a:	d502      	bpl.n	8004c12 <ADC_Enable+0x16>
  return HAL_OK;
 8004c0c:	2000      	movs	r0, #0
}
 8004c0e:	b003      	add	sp, #12
 8004c10:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	f042 0201 	orr.w	r2, r2, #1
 8004c18:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c1a:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <ADC_Enable+0x70>)
 8004c1c:	4a14      	ldr	r2, [pc, #80]	; (8004c70 <ADC_Enable+0x74>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8004c24:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8004c26:	9b01      	ldr	r3, [sp, #4]
 8004c28:	b9e3      	cbnz	r3, 8004c64 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8004c2a:	f7ff ff15 	bl	8004a58 <HAL_GetTick>
 8004c2e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	07db      	lsls	r3, r3, #31
 8004c36:	d4e9      	bmi.n	8004c0c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c38:	f7ff ff0e 	bl	8004a58 <HAL_GetTick>
 8004c3c:	1b40      	subs	r0, r0, r5
 8004c3e:	2802      	cmp	r0, #2
 8004c40:	d9f6      	bls.n	8004c30 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f013 0301 	ands.w	r3, r3, #1
 8004c4a:	d1f1      	bne.n	8004c30 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 8004c4e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c50:	f042 0210 	orr.w	r2, r2, #16
 8004c54:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8004c58:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c5c:	f042 0201 	orr.w	r2, r2, #1
 8004c60:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8004c62:	e7d4      	b.n	8004c0e <ADC_Enable+0x12>
      wait_loop_index--;
 8004c64:	9b01      	ldr	r3, [sp, #4]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	e7dc      	b.n	8004c24 <ADC_Enable+0x28>
 8004c6a:	bf00      	nop
 8004c6c:	20000000 	.word	0x20000000
 8004c70:	000f4240 	.word	0x000f4240

08004c74 <HAL_ADC_Start_DMA>:
{
 8004c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004c78:	4b40      	ldr	r3, [pc, #256]	; (8004d7c <HAL_ADC_Start_DMA+0x108>)
{
 8004c7a:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004c7c:	6802      	ldr	r2, [r0, #0]
{
 8004c7e:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004c80:	429a      	cmp	r2, r3
{
 8004c82:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004c84:	d002      	beq.n	8004c8c <HAL_ADC_Start_DMA+0x18>
 8004c86:	493e      	ldr	r1, [pc, #248]	; (8004d80 <HAL_ADC_Start_DMA+0x10c>)
 8004c88:	428a      	cmp	r2, r1
 8004c8a:	d103      	bne.n	8004c94 <HAL_ADC_Start_DMA+0x20>
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8004c92:	d16e      	bne.n	8004d72 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8004c94:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d06c      	beq.n	8004d76 <HAL_ADC_Start_DMA+0x102>
 8004c9c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8004c9e:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8004ca0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8004ca4:	f7ff ffaa 	bl	8004bfc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004ca8:	4606      	mov	r6, r0
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d15d      	bne.n	8004d6a <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8004cae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004cb0:	6821      	ldr	r1, [r4, #0]
 8004cb2:	4b33      	ldr	r3, [pc, #204]	; (8004d80 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8004cb4:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8004cb8:	f025 0501 	bic.w	r5, r5, #1
 8004cbc:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004cc0:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8004cc2:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004cc4:	d104      	bne.n	8004cd0 <HAL_ADC_Start_DMA+0x5c>
 8004cc6:	4a2d      	ldr	r2, [pc, #180]	; (8004d7c <HAL_ADC_Start_DMA+0x108>)
 8004cc8:	6853      	ldr	r3, [r2, #4]
 8004cca:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8004cce:	d13e      	bne.n	8004d4e <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004cd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004cd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004cd6:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004cd8:	684b      	ldr	r3, [r1, #4]
 8004cda:	055a      	lsls	r2, r3, #21
 8004cdc:	d505      	bpl.n	8004cea <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004cde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ce0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ce4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ce8:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004cec:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cee:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004cf2:	bf18      	it	ne
 8004cf4:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004cf6:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004cf8:	bf18      	it	ne
 8004cfa:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8004cfe:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8004d00:	2300      	movs	r3, #0
 8004d02:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d06:	4b1f      	ldr	r3, [pc, #124]	; (8004d84 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004d08:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d0a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d0c:	4b1e      	ldr	r3, [pc, #120]	; (8004d88 <HAL_ADC_Start_DMA+0x114>)
 8004d0e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004d10:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <HAL_ADC_Start_DMA+0x118>)
 8004d12:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004d14:	f06f 0302 	mvn.w	r3, #2
 8004d18:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004d1c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8004d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d24:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004d28:	4643      	mov	r3, r8
 8004d2a:	f000 f993 	bl	8005054 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8004d36:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	bf0c      	ite	eq
 8004d3e:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004d42:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8004d46:	609a      	str	r2, [r3, #8]
}
 8004d48:	4630      	mov	r0, r6
 8004d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d54:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004d56:	6853      	ldr	r3, [r2, #4]
 8004d58:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d5a:	bf41      	itttt	mi
 8004d5c:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8004d5e:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8004d62:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8004d66:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8004d68:	e7bf      	b.n	8004cea <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8004d70:	e7ea      	b.n	8004d48 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8004d72:	2601      	movs	r6, #1
 8004d74:	e7e8      	b.n	8004d48 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8004d76:	2602      	movs	r6, #2
 8004d78:	e7e6      	b.n	8004d48 <HAL_ADC_Start_DMA+0xd4>
 8004d7a:	bf00      	nop
 8004d7c:	40012400 	.word	0x40012400
 8004d80:	40012800 	.word	0x40012800
 8004d84:	08004a89 	.word	0x08004a89
 8004d88:	08004ad9 	.word	0x08004ad9
 8004d8c:	08004ae5 	.word	0x08004ae5

08004d90 <ADC_ConversionStop_Disable>:
{
 8004d90:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004d92:	6803      	ldr	r3, [r0, #0]
{
 8004d94:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	07d1      	lsls	r1, r2, #31
 8004d9a:	d401      	bmi.n	8004da0 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8004d9c:	2000      	movs	r0, #0
}
 8004d9e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004da8:	f7ff fe56 	bl	8004a58 <HAL_GetTick>
 8004dac:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	07db      	lsls	r3, r3, #31
 8004db4:	d5f2      	bpl.n	8004d9c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004db6:	f7ff fe4f 	bl	8004a58 <HAL_GetTick>
 8004dba:	1b40      	subs	r0, r0, r5
 8004dbc:	2802      	cmp	r0, #2
 8004dbe:	d9f6      	bls.n	8004dae <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	07da      	lsls	r2, r3, #31
 8004dc6:	d5f2      	bpl.n	8004dae <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8004dca:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dcc:	f043 0310 	orr.w	r3, r3, #16
 8004dd0:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004dd4:	f043 0301 	orr.w	r3, r3, #1
 8004dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8004dda:	e7e0      	b.n	8004d9e <ADC_ConversionStop_Disable+0xe>

08004ddc <HAL_ADC_Init>:
{
 8004ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8004dde:	4604      	mov	r4, r0
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d06d      	beq.n	8004ec0 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004de4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004de6:	b923      	cbnz	r3, 8004df2 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8004de8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8004dea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8004dee:	f7fe f8c5 	bl	8002f7c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004df2:	4620      	mov	r0, r4
 8004df4:	f7ff ffcc 	bl	8004d90 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004df8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004dfa:	f013 0310 	ands.w	r3, r3, #16
 8004dfe:	d161      	bne.n	8004ec4 <HAL_ADC_Init+0xe8>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d15f      	bne.n	8004ec4 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 8004e04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e06:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8004e08:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004e0c:	f022 0202 	bic.w	r2, r2, #2
 8004e10:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e14:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004e16:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8004e18:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004e1a:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e1c:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004e1e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004e22:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004e26:	d036      	beq.n	8004e96 <HAL_ADC_Init+0xba>
 8004e28:	1e77      	subs	r7, r6, #1
 8004e2a:	427d      	negs	r5, r7
 8004e2c:	417d      	adcs	r5, r7
 8004e2e:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e30:	7d27      	ldrb	r7, [r4, #20]
 8004e32:	2f01      	cmp	r7, #1
 8004e34:	d106      	bne.n	8004e44 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004e36:	bb82      	cbnz	r2, 8004e9a <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004e38:	69a2      	ldr	r2, [r4, #24]
 8004e3a:	3a01      	subs	r2, #1
 8004e3c:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8004e40:	f442 6500 	orr.w	r5, r2, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8004e44:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004e46:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8004e4a:	6857      	ldr	r7, [r2, #4]
 8004e4c:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8004e50:	ea45 0507 	orr.w	r5, r5, r7
 8004e54:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8004e56:	6897      	ldr	r7, [r2, #8]
 8004e58:	4d1d      	ldr	r5, [pc, #116]	; (8004ed0 <HAL_ADC_Init+0xf4>)
 8004e5a:	ea05 0507 	and.w	r5, r5, r7
 8004e5e:	ea45 0501 	orr.w	r5, r5, r1
 8004e62:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004e64:	d001      	beq.n	8004e6a <HAL_ADC_Init+0x8e>
 8004e66:	2e01      	cmp	r6, #1
 8004e68:	d102      	bne.n	8004e70 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004e6a:	6923      	ldr	r3, [r4, #16]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8004e70:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8004e72:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8004e76:	432b      	orrs	r3, r5
 8004e78:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004e7a:	6892      	ldr	r2, [r2, #8]
 8004e7c:	4b15      	ldr	r3, [pc, #84]	; (8004ed4 <HAL_ADC_Init+0xf8>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	4299      	cmp	r1, r3
 8004e82:	d113      	bne.n	8004eac <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8004e84:	2300      	movs	r3, #0
 8004e86:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8004e88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e8a:	f023 0303 	bic.w	r3, r3, #3
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8004e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004e96:	4635      	mov	r5, r6
 8004e98:	e7ca      	b.n	8004e30 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004e9c:	f042 0220 	orr.w	r2, r2, #32
 8004ea0:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ea2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ea4:	f042 0201 	orr.w	r2, r2, #1
 8004ea8:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004eaa:	e7cb      	b.n	8004e44 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8004eac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004eae:	f023 0312 	bic.w	r3, r3, #18
 8004eb2:	f043 0310 	orr.w	r3, r3, #16
 8004eb6:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004eba:	f043 0301 	orr.w	r3, r3, #1
 8004ebe:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	e7e7      	b.n	8004e94 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ec4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ec6:	f043 0310 	orr.w	r3, r3, #16
 8004eca:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8004ecc:	e7f8      	b.n	8004ec0 <HAL_ADC_Init+0xe4>
 8004ece:	bf00      	nop
 8004ed0:	ffe1f7fd 	.word	0xffe1f7fd
 8004ed4:	ff1f0efe 	.word	0xff1f0efe

08004ed8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ed8:	4907      	ldr	r1, [pc, #28]	; (8004ef8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004eda:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004edc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004ede:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ee2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ee6:	0412      	lsls	r2, r2, #16
 8004ee8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004ef4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004ef6:	4770      	bx	lr
 8004ef8:	e000ed00 	.word	0xe000ed00

08004efc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004efc:	4b15      	ldr	r3, [pc, #84]	; (8004f54 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004efe:	b530      	push	{r4, r5, lr}
 8004f00:	68dc      	ldr	r4, [r3, #12]
 8004f02:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f06:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f0a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	bf28      	it	cs
 8004f10:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f12:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f14:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f18:	bf94      	ite	ls
 8004f1a:	2400      	movls	r4, #0
 8004f1c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f1e:	fa05 f303 	lsl.w	r3, r5, r3
 8004f22:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f26:	40a5      	lsls	r5, r4
 8004f28:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f2c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8004f2e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f30:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f34:	bfac      	ite	ge
 8004f36:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3a:	4a07      	ldrlt	r2, [pc, #28]	; (8004f58 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	bfab      	itete	ge
 8004f44:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f48:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f4c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f50:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004f52:	bd30      	pop	{r4, r5, pc}
 8004f54:	e000ed00 	.word	0xe000ed00
 8004f58:	e000ed14 	.word	0xe000ed14

08004f5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	db07      	blt.n	8004f70 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f60:	2301      	movs	r3, #1
 8004f62:	0941      	lsrs	r1, r0, #5
 8004f64:	4a03      	ldr	r2, [pc, #12]	; (8004f74 <HAL_NVIC_EnableIRQ+0x18>)
 8004f66:	f000 001f 	and.w	r0, r0, #31
 8004f6a:	4083      	lsls	r3, r0
 8004f6c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	e000e100 	.word	0xe000e100

08004f78 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	db0c      	blt.n	8004f96 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	4906      	ldr	r1, [pc, #24]	; (8004f98 <HAL_NVIC_DisableIRQ+0x20>)
 8004f80:	0943      	lsrs	r3, r0, #5
 8004f82:	f000 001f 	and.w	r0, r0, #31
 8004f86:	4082      	lsls	r2, r0
 8004f88:	3320      	adds	r3, #32
 8004f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004f92:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004f96:	4770      	bx	lr
 8004f98:	e000e100 	.word	0xe000e100

08004f9c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004f9c:	4603      	mov	r3, r0
{
 8004f9e:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8004fa0:	b340      	cbz	r0, 8004ff4 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004fa2:	2114      	movs	r1, #20
 8004fa4:	6800      	ldr	r0, [r0, #0]
 8004fa6:	4a14      	ldr	r2, [pc, #80]	; (8004ff8 <HAL_DMA_Init+0x5c>)
 8004fa8:	4402      	add	r2, r0
 8004faa:	fbb2 f2f1 	udiv	r2, r2, r1
 8004fae:	0092      	lsls	r2, r2, #2
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004fb2:	4a12      	ldr	r2, [pc, #72]	; (8004ffc <HAL_DMA_Init+0x60>)
 8004fb4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004fbc:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8004fc0:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fc2:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 8004fc4:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fc6:	4322      	orrs	r2, r4
 8004fc8:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004fca:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fce:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fd0:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004fd2:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fd6:	4322      	orrs	r2, r4
 8004fd8:	699c      	ldr	r4, [r3, #24]
 8004fda:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fdc:	69dc      	ldr	r4, [r3, #28]
 8004fde:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8004fe0:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004fe2:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fe4:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004fe6:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fe8:	6398      	str	r0, [r3, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004fea:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8004fee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
}
 8004ff2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004ff4:	2001      	movs	r0, #1
 8004ff6:	e7fc      	b.n	8004ff2 <HAL_DMA_Init+0x56>
 8004ff8:	bffdfff8 	.word	0xbffdfff8
 8004ffc:	40020000 	.word	0x40020000

08005000 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005000:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005002:	b308      	cbz	r0, 8005048 <HAL_DMA_DeInit+0x48>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005004:	6801      	ldr	r1, [r0, #0]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005006:	4a11      	ldr	r2, [pc, #68]	; (800504c <HAL_DMA_DeInit+0x4c>)
  __HAL_DMA_DISABLE(hdma);
 8005008:	680b      	ldr	r3, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800500a:	440a      	add	r2, r1
  __HAL_DMA_DISABLE(hdma);
 800500c:	f023 0301 	bic.w	r3, r3, #1
 8005010:	600b      	str	r3, [r1, #0]
  hdma->Instance->CCR  = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	600b      	str	r3, [r1, #0]
  hdma->Instance->CNDTR = 0U;
 8005016:	604b      	str	r3, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 8005018:	608b      	str	r3, [r1, #8]
  hdma->Instance->CMAR = 0U;
 800501a:	60cb      	str	r3, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800501c:	2114      	movs	r1, #20
 800501e:	fbb2 f2f1 	udiv	r2, r2, r1
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8005022:	2101      	movs	r1, #1
  hdma->DmaBaseAddress = DMA1;
 8005024:	4c0a      	ldr	r4, [pc, #40]	; (8005050 <HAL_DMA_DeInit+0x50>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005026:	0092      	lsls	r2, r2, #2
 8005028:	6402      	str	r2, [r0, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800502a:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 800502e:	63c4      	str	r4, [r0, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8005030:	6062      	str	r2, [r4, #4]
  hdma->XferHalfCpltCallback = NULL;
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005032:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->XferHalfCpltCallback = NULL;
 8005034:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8005038:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800503c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005040:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8005044:	4618      	mov	r0, r3
}
 8005046:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005048:	2001      	movs	r0, #1
 800504a:	e7fc      	b.n	8005046 <HAL_DMA_DeInit+0x46>
 800504c:	bffdfff8 	.word	0xbffdfff8
 8005050:	40020000 	.word	0x40020000

08005054 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005056:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005058:	f890 0020 	ldrb.w	r0, [r0, #32]
 800505c:	2801      	cmp	r0, #1
 800505e:	d036      	beq.n	80050ce <HAL_DMA_Start_IT+0x7a>
 8005060:	2001      	movs	r0, #1
 8005062:	f885 0020 	strb.w	r0, [r5, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005066:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
 800506a:	2400      	movs	r4, #0
 800506c:	2801      	cmp	r0, #1
 800506e:	b2c6      	uxtb	r6, r0
 8005070:	f04f 0002 	mov.w	r0, #2
 8005074:	d128      	bne.n	80050c8 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005076:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800507a:	63ac      	str	r4, [r5, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800507c:	682c      	ldr	r4, [r5, #0]
 800507e:	6820      	ldr	r0, [r4, #0]
 8005080:	f020 0001 	bic.w	r0, r0, #1
 8005084:	6020      	str	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005086:	e9d5 700f 	ldrd	r7, r0, [r5, #60]	; 0x3c
 800508a:	fa06 f000 	lsl.w	r0, r6, r0
 800508e:	6078      	str	r0, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005090:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005092:	686b      	ldr	r3, [r5, #4]
 8005094:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8005096:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005098:	bf0b      	itete	eq
 800509a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800509c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800509e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80050a0:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80050a2:	b14b      	cbz	r3, 80050b8 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80050aa:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050ac:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	6023      	str	r3, [r4, #0]
}
 80050b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	f023 0304 	bic.w	r3, r3, #4
 80050be:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	f043 030a 	orr.w	r3, r3, #10
 80050c6:	e7f0      	b.n	80050aa <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 80050c8:	f885 4020 	strb.w	r4, [r5, #32]
    status = HAL_BUSY;
 80050cc:	e7f3      	b.n	80050b6 <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 80050ce:	2002      	movs	r0, #2
 80050d0:	e7f1      	b.n	80050b6 <HAL_DMA_Start_IT+0x62>

080050d2 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050d2:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80050d6:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050d8:	2a02      	cmp	r2, #2
 80050da:	d006      	beq.n	80050ea <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050dc:	2204      	movs	r2, #4
 80050de:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_ERROR;
 80050e0:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2020 	strb.w	r2, [r3, #32]
}
 80050e8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050ea:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80050ec:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050ee:	6811      	ldr	r1, [r2, #0]
 80050f0:	f021 010e 	bic.w	r1, r1, #14
 80050f4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80050f6:	6811      	ldr	r1, [r2, #0]
 80050f8:	f021 0101 	bic.w	r1, r1, #1
 80050fc:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80050fe:	2101      	movs	r1, #1
 8005100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005102:	fa01 f202 	lsl.w	r2, r1, r2
 8005106:	6042      	str	r2, [r0, #4]
  return status; 
 8005108:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800510a:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  return status; 
 800510e:	e7e8      	b.n	80050e2 <HAL_DMA_Abort+0x10>

08005110 <HAL_DMA_Abort_IT>:
{  
 8005110:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005112:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005116:	2b02      	cmp	r3, #2
 8005118:	d003      	beq.n	8005122 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800511a:	2304      	movs	r3, #4
 800511c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800511e:	2001      	movs	r0, #1
}
 8005120:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005122:	6803      	ldr	r3, [r0, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	f022 020e 	bic.w	r2, r2, #14
 800512a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	f022 0201 	bic.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005134:	4a18      	ldr	r2, [pc, #96]	; (8005198 <HAL_DMA_Abort_IT+0x88>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d01f      	beq.n	800517a <HAL_DMA_Abort_IT+0x6a>
 800513a:	3214      	adds	r2, #20
 800513c:	4293      	cmp	r3, r2
 800513e:	d01e      	beq.n	800517e <HAL_DMA_Abort_IT+0x6e>
 8005140:	3214      	adds	r2, #20
 8005142:	4293      	cmp	r3, r2
 8005144:	d01d      	beq.n	8005182 <HAL_DMA_Abort_IT+0x72>
 8005146:	3214      	adds	r2, #20
 8005148:	4293      	cmp	r3, r2
 800514a:	d01d      	beq.n	8005188 <HAL_DMA_Abort_IT+0x78>
 800514c:	3214      	adds	r2, #20
 800514e:	4293      	cmp	r3, r2
 8005150:	d01d      	beq.n	800518e <HAL_DMA_Abort_IT+0x7e>
 8005152:	3214      	adds	r2, #20
 8005154:	4293      	cmp	r3, r2
 8005156:	bf0c      	ite	eq
 8005158:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800515c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8005160:	4a0e      	ldr	r2, [pc, #56]	; (800519c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8005162:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005164:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005166:	2301      	movs	r3, #1
 8005168:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 800516c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800516e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8005172:	b17b      	cbz	r3, 8005194 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8005174:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005176:	4620      	mov	r0, r4
 8005178:	e7d2      	b.n	8005120 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800517a:	2301      	movs	r3, #1
 800517c:	e7f0      	b.n	8005160 <HAL_DMA_Abort_IT+0x50>
 800517e:	2310      	movs	r3, #16
 8005180:	e7ee      	b.n	8005160 <HAL_DMA_Abort_IT+0x50>
 8005182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005186:	e7eb      	b.n	8005160 <HAL_DMA_Abort_IT+0x50>
 8005188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800518c:	e7e8      	b.n	8005160 <HAL_DMA_Abort_IT+0x50>
 800518e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005192:	e7e5      	b.n	8005160 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8005194:	4618      	mov	r0, r3
 8005196:	e7c3      	b.n	8005120 <HAL_DMA_Abort_IT+0x10>
 8005198:	40020008 	.word	0x40020008
 800519c:	40020000 	.word	0x40020000

080051a0 <HAL_DMA_IRQHandler>:
{
 80051a0:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80051a2:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051a4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80051a6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051a8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80051aa:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80051ac:	4095      	lsls	r5, r2
 80051ae:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80051b0:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80051b2:	d032      	beq.n	800521a <HAL_DMA_IRQHandler+0x7a>
 80051b4:	074d      	lsls	r5, r1, #29
 80051b6:	d530      	bpl.n	800521a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051bc:	bf5e      	ittt	pl
 80051be:	681a      	ldrpl	r2, [r3, #0]
 80051c0:	f022 0204 	bicpl.w	r2, r2, #4
 80051c4:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80051c6:	4a3e      	ldr	r2, [pc, #248]	; (80052c0 <HAL_DMA_IRQHandler+0x120>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d019      	beq.n	8005200 <HAL_DMA_IRQHandler+0x60>
 80051cc:	3214      	adds	r2, #20
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d018      	beq.n	8005204 <HAL_DMA_IRQHandler+0x64>
 80051d2:	3214      	adds	r2, #20
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d017      	beq.n	8005208 <HAL_DMA_IRQHandler+0x68>
 80051d8:	3214      	adds	r2, #20
 80051da:	4293      	cmp	r3, r2
 80051dc:	d017      	beq.n	800520e <HAL_DMA_IRQHandler+0x6e>
 80051de:	3214      	adds	r2, #20
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d017      	beq.n	8005214 <HAL_DMA_IRQHandler+0x74>
 80051e4:	3214      	adds	r2, #20
 80051e6:	4293      	cmp	r3, r2
 80051e8:	bf0c      	ite	eq
 80051ea:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80051ee:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80051f2:	4a34      	ldr	r2, [pc, #208]	; (80052c4 <HAL_DMA_IRQHandler+0x124>)
 80051f4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80051f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d05e      	beq.n	80052ba <HAL_DMA_IRQHandler+0x11a>
}
 80051fc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80051fe:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005200:	2304      	movs	r3, #4
 8005202:	e7f6      	b.n	80051f2 <HAL_DMA_IRQHandler+0x52>
 8005204:	2340      	movs	r3, #64	; 0x40
 8005206:	e7f4      	b.n	80051f2 <HAL_DMA_IRQHandler+0x52>
 8005208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800520c:	e7f1      	b.n	80051f2 <HAL_DMA_IRQHandler+0x52>
 800520e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005212:	e7ee      	b.n	80051f2 <HAL_DMA_IRQHandler+0x52>
 8005214:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005218:	e7eb      	b.n	80051f2 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800521a:	2502      	movs	r5, #2
 800521c:	4095      	lsls	r5, r2
 800521e:	4225      	tst	r5, r4
 8005220:	d035      	beq.n	800528e <HAL_DMA_IRQHandler+0xee>
 8005222:	078d      	lsls	r5, r1, #30
 8005224:	d533      	bpl.n	800528e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	0694      	lsls	r4, r2, #26
 800522a:	d406      	bmi.n	800523a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	f022 020a 	bic.w	r2, r2, #10
 8005232:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005234:	2201      	movs	r2, #1
 8005236:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800523a:	4a21      	ldr	r2, [pc, #132]	; (80052c0 <HAL_DMA_IRQHandler+0x120>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d019      	beq.n	8005274 <HAL_DMA_IRQHandler+0xd4>
 8005240:	3214      	adds	r2, #20
 8005242:	4293      	cmp	r3, r2
 8005244:	d018      	beq.n	8005278 <HAL_DMA_IRQHandler+0xd8>
 8005246:	3214      	adds	r2, #20
 8005248:	4293      	cmp	r3, r2
 800524a:	d017      	beq.n	800527c <HAL_DMA_IRQHandler+0xdc>
 800524c:	3214      	adds	r2, #20
 800524e:	4293      	cmp	r3, r2
 8005250:	d017      	beq.n	8005282 <HAL_DMA_IRQHandler+0xe2>
 8005252:	3214      	adds	r2, #20
 8005254:	4293      	cmp	r3, r2
 8005256:	d017      	beq.n	8005288 <HAL_DMA_IRQHandler+0xe8>
 8005258:	3214      	adds	r2, #20
 800525a:	4293      	cmp	r3, r2
 800525c:	bf0c      	ite	eq
 800525e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8005262:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8005266:	4a17      	ldr	r2, [pc, #92]	; (80052c4 <HAL_DMA_IRQHandler+0x124>)
 8005268:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800526a:	2300      	movs	r3, #0
 800526c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8005270:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005272:	e7c1      	b.n	80051f8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005274:	2302      	movs	r3, #2
 8005276:	e7f6      	b.n	8005266 <HAL_DMA_IRQHandler+0xc6>
 8005278:	2320      	movs	r3, #32
 800527a:	e7f4      	b.n	8005266 <HAL_DMA_IRQHandler+0xc6>
 800527c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005280:	e7f1      	b.n	8005266 <HAL_DMA_IRQHandler+0xc6>
 8005282:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005286:	e7ee      	b.n	8005266 <HAL_DMA_IRQHandler+0xc6>
 8005288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800528c:	e7eb      	b.n	8005266 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800528e:	2508      	movs	r5, #8
 8005290:	4095      	lsls	r5, r2
 8005292:	4225      	tst	r5, r4
 8005294:	d011      	beq.n	80052ba <HAL_DMA_IRQHandler+0x11a>
 8005296:	0709      	lsls	r1, r1, #28
 8005298:	d50f      	bpl.n	80052ba <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800529a:	6819      	ldr	r1, [r3, #0]
 800529c:	f021 010e 	bic.w	r1, r1, #14
 80052a0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80052a2:	2301      	movs	r3, #1
 80052a4:	fa03 f202 	lsl.w	r2, r3, r2
 80052a8:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052aa:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80052ac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80052b0:	2300      	movs	r3, #0
 80052b2:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80052b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80052b8:	e79e      	b.n	80051f8 <HAL_DMA_IRQHandler+0x58>
}
 80052ba:	bc70      	pop	{r4, r5, r6}
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40020008 	.word	0x40020008
 80052c4:	40020000 	.word	0x40020000

080052c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80052cc:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80052ce:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80052d0:	4f64      	ldr	r7, [pc, #400]	; (8005464 <HAL_GPIO_Init+0x19c>)
 80052d2:	4b65      	ldr	r3, [pc, #404]	; (8005468 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 80052d4:	f8df c194 	ldr.w	ip, [pc, #404]	; 800546c <HAL_GPIO_Init+0x1a4>
 80052d8:	f8df e194 	ldr.w	lr, [pc, #404]	; 8005470 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052dc:	680d      	ldr	r5, [r1, #0]
 80052de:	fa35 f406 	lsrs.w	r4, r5, r6
 80052e2:	d102      	bne.n	80052ea <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80052e4:	b003      	add	sp, #12
 80052e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80052ea:	f04f 0801 	mov.w	r8, #1
 80052ee:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052f2:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80052f6:	ea38 0505 	bics.w	r5, r8, r5
 80052fa:	d17a      	bne.n	80053f2 <HAL_GPIO_Init+0x12a>
      switch (GPIO_Init->Mode)
 80052fc:	684d      	ldr	r5, [r1, #4]
 80052fe:	2d03      	cmp	r5, #3
 8005300:	d807      	bhi.n	8005312 <HAL_GPIO_Init+0x4a>
 8005302:	3d01      	subs	r5, #1
 8005304:	2d02      	cmp	r5, #2
 8005306:	f200 8087 	bhi.w	8005418 <HAL_GPIO_Init+0x150>
 800530a:	e8df f005 	tbb	[pc, r5]
 800530e:	9a95      	.short	0x9a95
 8005310:	a0          	.byte	0xa0
 8005311:	00          	.byte	0x00
 8005312:	2d12      	cmp	r5, #18
 8005314:	f000 8098 	beq.w	8005448 <HAL_GPIO_Init+0x180>
 8005318:	d86d      	bhi.n	80053f6 <HAL_GPIO_Init+0x12e>
 800531a:	2d11      	cmp	r5, #17
 800531c:	f000 808e 	beq.w	800543c <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005320:	2cff      	cmp	r4, #255	; 0xff
 8005322:	bf98      	it	ls
 8005324:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005326:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800532a:	bf88      	it	hi
 800532c:	f100 0a04 	addhi.w	sl, r0, #4
 8005330:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005334:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005338:	bf88      	it	hi
 800533a:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800533c:	fa09 fb05 	lsl.w	fp, r9, r5
 8005340:	ea28 080b 	bic.w	r8, r8, fp
 8005344:	fa02 f505 	lsl.w	r5, r2, r5
 8005348:	ea48 0505 	orr.w	r5, r8, r5
 800534c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005350:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8005354:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8005358:	d04b      	beq.n	80053f2 <HAL_GPIO_Init+0x12a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800535a:	69bd      	ldr	r5, [r7, #24]
 800535c:	f026 0803 	bic.w	r8, r6, #3
 8005360:	f045 0501 	orr.w	r5, r5, #1
 8005364:	61bd      	str	r5, [r7, #24]
 8005366:	69bd      	ldr	r5, [r7, #24]
 8005368:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800536c:	f005 0501 	and.w	r5, r5, #1
 8005370:	9501      	str	r5, [sp, #4]
 8005372:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005376:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800537a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800537c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8005380:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005384:	fa09 f90b 	lsl.w	r9, r9, fp
 8005388:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800538c:	4d39      	ldr	r5, [pc, #228]	; (8005474 <HAL_GPIO_Init+0x1ac>)
 800538e:	42a8      	cmp	r0, r5
 8005390:	d061      	beq.n	8005456 <HAL_GPIO_Init+0x18e>
 8005392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005396:	42a8      	cmp	r0, r5
 8005398:	d05f      	beq.n	800545a <HAL_GPIO_Init+0x192>
 800539a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800539e:	42a8      	cmp	r0, r5
 80053a0:	d05d      	beq.n	800545e <HAL_GPIO_Init+0x196>
 80053a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80053a6:	42a8      	cmp	r0, r5
 80053a8:	bf0c      	ite	eq
 80053aa:	2503      	moveq	r5, #3
 80053ac:	2504      	movne	r5, #4
 80053ae:	fa05 f50b 	lsl.w	r5, r5, fp
 80053b2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80053b6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80053ba:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053bc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80053c0:	bf14      	ite	ne
 80053c2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80053c4:	43a5      	biceq	r5, r4
 80053c6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80053c8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053ca:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80053ce:	bf14      	ite	ne
 80053d0:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80053d2:	43a5      	biceq	r5, r4
 80053d4:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80053d6:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053d8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80053dc:	bf14      	ite	ne
 80053de:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80053e0:	43a5      	biceq	r5, r4
 80053e2:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80053e4:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053e6:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80053ea:	bf14      	ite	ne
 80053ec:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80053ee:	43a5      	biceq	r5, r4
 80053f0:	601d      	str	r5, [r3, #0]
	position++;
 80053f2:	3601      	adds	r6, #1
 80053f4:	e772      	b.n	80052dc <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80053f6:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8005478 <HAL_GPIO_Init+0x1b0>
 80053fa:	454d      	cmp	r5, r9
 80053fc:	d00c      	beq.n	8005418 <HAL_GPIO_Init+0x150>
 80053fe:	d817      	bhi.n	8005430 <HAL_GPIO_Init+0x168>
 8005400:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005404:	454d      	cmp	r5, r9
 8005406:	d007      	beq.n	8005418 <HAL_GPIO_Init+0x150>
 8005408:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800540c:	454d      	cmp	r5, r9
 800540e:	d003      	beq.n	8005418 <HAL_GPIO_Init+0x150>
 8005410:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005414:	454d      	cmp	r5, r9
 8005416:	d183      	bne.n	8005320 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005418:	688a      	ldr	r2, [r1, #8]
 800541a:	b1d2      	cbz	r2, 8005452 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800541c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800541e:	bf08      	it	eq
 8005420:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005424:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8005428:	bf18      	it	ne
 800542a:	f8c0 8014 	strne.w	r8, [r0, #20]
 800542e:	e777      	b.n	8005320 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8005430:	4565      	cmp	r5, ip
 8005432:	d0f1      	beq.n	8005418 <HAL_GPIO_Init+0x150>
 8005434:	4575      	cmp	r5, lr
 8005436:	e7ee      	b.n	8005416 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005438:	68ca      	ldr	r2, [r1, #12]
          break;
 800543a:	e771      	b.n	8005320 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800543c:	68ca      	ldr	r2, [r1, #12]
 800543e:	3204      	adds	r2, #4
          break;
 8005440:	e76e      	b.n	8005320 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005442:	68ca      	ldr	r2, [r1, #12]
 8005444:	3208      	adds	r2, #8
          break;
 8005446:	e76b      	b.n	8005320 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005448:	68ca      	ldr	r2, [r1, #12]
 800544a:	320c      	adds	r2, #12
          break;
 800544c:	e768      	b.n	8005320 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800544e:	2200      	movs	r2, #0
 8005450:	e766      	b.n	8005320 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005452:	2204      	movs	r2, #4
 8005454:	e764      	b.n	8005320 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005456:	2500      	movs	r5, #0
 8005458:	e7a9      	b.n	80053ae <HAL_GPIO_Init+0xe6>
 800545a:	2501      	movs	r5, #1
 800545c:	e7a7      	b.n	80053ae <HAL_GPIO_Init+0xe6>
 800545e:	2502      	movs	r5, #2
 8005460:	e7a5      	b.n	80053ae <HAL_GPIO_Init+0xe6>
 8005462:	bf00      	nop
 8005464:	40021000 	.word	0x40021000
 8005468:	40010400 	.word	0x40010400
 800546c:	10310000 	.word	0x10310000
 8005470:	10320000 	.word	0x10320000
 8005474:	40010800 	.word	0x40010800
 8005478:	10220000 	.word	0x10220000

0800547c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800547c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005480:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8005484:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005486:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800548a:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800548e:	eb00 030b 	add.w	r3, r0, fp
 8005492:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005494:	4b2e      	ldr	r3, [pc, #184]	; (8005550 <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 8005496:	fa31 f402 	lsrs.w	r4, r1, r2
 800549a:	d102      	bne.n	80054a2 <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 800549c:	b003      	add	sp, #12
 800549e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80054a2:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 80054a6:	400f      	ands	r7, r1
 80054a8:	d049      	beq.n	800553e <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 80054aa:	f022 0403 	bic.w	r4, r2, #3
 80054ae:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80054b2:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80054b6:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 80054ba:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80054bc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80054c0:	fa08 f90c 	lsl.w	r9, r8, ip
 80054c4:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80054c8:	4d22      	ldr	r5, [pc, #136]	; (8005554 <HAL_GPIO_DeInit+0xd8>)
 80054ca:	42a8      	cmp	r0, r5
 80054cc:	d039      	beq.n	8005542 <HAL_GPIO_DeInit+0xc6>
 80054ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80054d2:	42a8      	cmp	r0, r5
 80054d4:	d037      	beq.n	8005546 <HAL_GPIO_DeInit+0xca>
 80054d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80054da:	42a8      	cmp	r0, r5
 80054dc:	d035      	beq.n	800554a <HAL_GPIO_DeInit+0xce>
 80054de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80054e2:	42a8      	cmp	r0, r5
 80054e4:	bf0c      	ite	eq
 80054e6:	2503      	moveq	r5, #3
 80054e8:	2504      	movne	r5, #4
 80054ea:	fa05 f50c 	lsl.w	r5, r5, ip
 80054ee:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80054f0:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80054f4:	d10f      	bne.n	8005516 <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80054f6:	681d      	ldr	r5, [r3, #0]
 80054f8:	4035      	ands	r5, r6
 80054fa:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80054fc:	685d      	ldr	r5, [r3, #4]
 80054fe:	4035      	ands	r5, r6
 8005500:	605d      	str	r5, [r3, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005502:	68dd      	ldr	r5, [r3, #12]
 8005504:	4035      	ands	r5, r6
 8005506:	60dd      	str	r5, [r3, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005508:	689d      	ldr	r5, [r3, #8]
 800550a:	4035      	ands	r5, r6
 800550c:	609d      	str	r5, [r3, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800550e:	68a5      	ldr	r5, [r4, #8]
 8005510:	ea25 0509 	bic.w	r5, r5, r9
 8005514:	60a5      	str	r5, [r4, #8]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005516:	2fff      	cmp	r7, #255	; 0xff
 8005518:	bf94      	ite	ls
 800551a:	4607      	movls	r7, r0
 800551c:	9f01      	ldrhi	r7, [sp, #4]
 800551e:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005522:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005524:	bf88      	it	hi
 8005526:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005528:	fa08 fc04 	lsl.w	ip, r8, r4
 800552c:	ea25 050c 	bic.w	r5, r5, ip
 8005530:	fa0b f404 	lsl.w	r4, fp, r4
 8005534:	4325      	orrs	r5, r4
 8005536:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005538:	68c4      	ldr	r4, [r0, #12]
 800553a:	4034      	ands	r4, r6
 800553c:	60c4      	str	r4, [r0, #12]
    position++;
 800553e:	3201      	adds	r2, #1
 8005540:	e7a9      	b.n	8005496 <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005542:	2500      	movs	r5, #0
 8005544:	e7d1      	b.n	80054ea <HAL_GPIO_DeInit+0x6e>
 8005546:	2501      	movs	r5, #1
 8005548:	e7cf      	b.n	80054ea <HAL_GPIO_DeInit+0x6e>
 800554a:	2502      	movs	r5, #2
 800554c:	e7cd      	b.n	80054ea <HAL_GPIO_DeInit+0x6e>
 800554e:	bf00      	nop
 8005550:	40010400 	.word	0x40010400
 8005554:	40010800 	.word	0x40010800

08005558 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005558:	6883      	ldr	r3, [r0, #8]
 800555a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800555c:	bf14      	ite	ne
 800555e:	2001      	movne	r0, #1
 8005560:	2000      	moveq	r0, #0
 8005562:	4770      	bx	lr

08005564 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005564:	b10a      	cbz	r2, 800556a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005566:	6101      	str	r1, [r0, #16]
  }
}
 8005568:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800556a:	0409      	lsls	r1, r1, #16
 800556c:	e7fb      	b.n	8005566 <HAL_GPIO_WritePin+0x2>

0800556e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800556e:	6801      	ldr	r1, [r0, #0]
 8005570:	2200      	movs	r2, #0
 8005572:	694b      	ldr	r3, [r1, #20]
 8005574:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8005578:	d010      	beq.n	800559c <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800557a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800557e:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8005580:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005582:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005584:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005588:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800558c:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800558e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005592:	f043 0304 	orr.w	r3, r3, #4
 8005596:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8005598:	2001      	movs	r0, #1
 800559a:	4770      	bx	lr
  }
  return HAL_OK;
 800559c:	4618      	mov	r0, r3
}
 800559e:	4770      	bx	lr

080055a0 <I2C_WaitOnFlagUntilTimeout>:
{
 80055a0:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 80055a4:	4606      	mov	r6, r0
 80055a6:	460f      	mov	r7, r1
 80055a8:	4691      	mov	r9, r2
 80055aa:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80055b0:	6833      	ldr	r3, [r6, #0]
 80055b2:	f1ba 0f01 	cmp.w	sl, #1
 80055b6:	bf0c      	ite	eq
 80055b8:	695c      	ldreq	r4, [r3, #20]
 80055ba:	699c      	ldrne	r4, [r3, #24]
 80055bc:	ea27 0404 	bic.w	r4, r7, r4
 80055c0:	b2a4      	uxth	r4, r4
 80055c2:	fab4 f484 	clz	r4, r4
 80055c6:	0964      	lsrs	r4, r4, #5
 80055c8:	45a1      	cmp	r9, r4
 80055ca:	d001      	beq.n	80055d0 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80055cc:	2000      	movs	r0, #0
 80055ce:	e025      	b.n	800561c <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80055d0:	1c6a      	adds	r2, r5, #1
 80055d2:	d0ee      	beq.n	80055b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d4:	f7ff fa40 	bl	8004a58 <HAL_GetTick>
 80055d8:	9b08      	ldr	r3, [sp, #32]
 80055da:	1ac0      	subs	r0, r0, r3
 80055dc:	42a8      	cmp	r0, r5
 80055de:	d801      	bhi.n	80055e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80055e0:	2d00      	cmp	r5, #0
 80055e2:	d1e5      	bne.n	80055b0 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055e4:	6833      	ldr	r3, [r6, #0]
 80055e6:	f1ba 0f01 	cmp.w	sl, #1
 80055ea:	bf0c      	ite	eq
 80055ec:	695b      	ldreq	r3, [r3, #20]
 80055ee:	699b      	ldrne	r3, [r3, #24]
 80055f0:	ea27 0303 	bic.w	r3, r7, r3
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	fab3 f383 	clz	r3, r3
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	4599      	cmp	r9, r3
 80055fe:	d1d7      	bne.n	80055b0 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005600:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8005602:	2220      	movs	r2, #32
          return HAL_ERROR;
 8005604:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005606:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005608:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800560c:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005610:	6c32      	ldr	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005612:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005616:	f042 0220 	orr.w	r2, r2, #32
 800561a:	6432      	str	r2, [r6, #64]	; 0x40
}
 800561c:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08005620 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005624:	4604      	mov	r4, r0
 8005626:	460f      	mov	r7, r1
 8005628:	4616      	mov	r6, r2
 800562a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800562c:	6825      	ldr	r5, [r4, #0]
 800562e:	6968      	ldr	r0, [r5, #20]
 8005630:	ea27 0000 	bic.w	r0, r7, r0
 8005634:	b280      	uxth	r0, r0
 8005636:	b1b8      	cbz	r0, 8005668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005638:	696b      	ldr	r3, [r5, #20]
 800563a:	055a      	lsls	r2, r3, #21
 800563c:	d516      	bpl.n	800566c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563e:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005640:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005646:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005648:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800564c:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800564e:	2300      	movs	r3, #0
 8005650:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005652:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005656:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800565a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800565c:	f042 0204 	orr.w	r2, r2, #4
          return HAL_ERROR;
 8005660:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005662:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005664:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800566c:	1c73      	adds	r3, r6, #1
 800566e:	d0de      	beq.n	800562e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005670:	f7ff f9f2 	bl	8004a58 <HAL_GetTick>
 8005674:	eba0 0008 	sub.w	r0, r0, r8
 8005678:	42b0      	cmp	r0, r6
 800567a:	d801      	bhi.n	8005680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 800567c:	2e00      	cmp	r6, #0
 800567e:	d1d5      	bne.n	800562c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	695a      	ldr	r2, [r3, #20]
 8005684:	ea27 0202 	bic.w	r2, r7, r2
 8005688:	b292      	uxth	r2, r2
 800568a:	2a00      	cmp	r2, #0
 800568c:	d0ce      	beq.n	800562c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800568e:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8005690:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005692:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005694:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005698:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800569c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800569e:	f042 0220 	orr.w	r2, r2, #32
 80056a2:	e7dd      	b.n	8005660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

080056a4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	4604      	mov	r4, r0
 80056a8:	460d      	mov	r5, r1
 80056aa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	061b      	lsls	r3, r3, #24
 80056b2:	d501      	bpl.n	80056b8 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80056b4:	2000      	movs	r0, #0
}
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056b8:	4620      	mov	r0, r4
 80056ba:	f7ff ff58 	bl	800556e <I2C_IsAcknowledgeFailed>
 80056be:	b9c8      	cbnz	r0, 80056f4 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80056c0:	1c6a      	adds	r2, r5, #1
 80056c2:	d0f3      	beq.n	80056ac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c4:	f7ff f9c8 	bl	8004a58 <HAL_GetTick>
 80056c8:	1b80      	subs	r0, r0, r6
 80056ca:	42a8      	cmp	r0, r5
 80056cc:	d801      	bhi.n	80056d2 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80056ce:	2d00      	cmp	r5, #0
 80056d0:	d1ec      	bne.n	80056ac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80056da:	d1e7      	bne.n	80056ac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80056dc:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056de:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056e0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80056ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ee:	f042 0220 	orr.w	r2, r2, #32
 80056f2:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80056f4:	2001      	movs	r0, #1
 80056f6:	e7de      	b.n	80056b6 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

080056f8 <I2C_RequestMemoryWrite>:
{
 80056f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056fc:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056fe:	6802      	ldr	r2, [r0, #0]
{
 8005700:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005702:	6813      	ldr	r3, [r2, #0]
{
 8005704:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570a:	6013      	str	r3, [r2, #0]
{
 800570c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8005710:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005712:	463b      	mov	r3, r7
 8005714:	2200      	movs	r2, #0
 8005716:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800571a:	f8cd 8000 	str.w	r8, [sp]
{
 800571e:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005720:	f7ff ff3e 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	b138      	cbz	r0, 8005738 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	05db      	lsls	r3, r3, #23
 800572c:	d502      	bpl.n	8005734 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800572e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005732:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005734:	2003      	movs	r0, #3
 8005736:	e00a      	b.n	800574e <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005738:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800573c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800573e:	463a      	mov	r2, r7
 8005740:	4643      	mov	r3, r8
 8005742:	4620      	mov	r0, r4
 8005744:	4917      	ldr	r1, [pc, #92]	; (80057a4 <I2C_RequestMemoryWrite+0xac>)
 8005746:	f7ff ff6b 	bl	8005620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800574a:	b118      	cbz	r0, 8005754 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 800574c:	2001      	movs	r0, #1
}
 800574e:	b005      	add	sp, #20
 8005750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	9003      	str	r0, [sp, #12]
 8005758:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800575a:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800575c:	9203      	str	r2, [sp, #12]
 800575e:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005760:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005762:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005764:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005766:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005768:	f7ff ff9c 	bl	80056a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800576c:	b140      	cbz	r0, 8005780 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800576e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005770:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005772:	bf01      	itttt	eq
 8005774:	6822      	ldreq	r2, [r4, #0]
 8005776:	6813      	ldreq	r3, [r2, #0]
 8005778:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800577c:	6013      	streq	r3, [r2, #0]
 800577e:	e7e5      	b.n	800574c <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005780:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005784:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005786:	d102      	bne.n	800578e <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005788:	b2ed      	uxtb	r5, r5
 800578a:	611d      	str	r5, [r3, #16]
 800578c:	e7df      	b.n	800574e <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800578e:	0a2a      	lsrs	r2, r5, #8
 8005790:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005792:	4639      	mov	r1, r7
 8005794:	4642      	mov	r2, r8
 8005796:	4620      	mov	r0, r4
 8005798:	f7ff ff84 	bl	80056a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800579c:	2800      	cmp	r0, #0
 800579e:	d1e6      	bne.n	800576e <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	e7f1      	b.n	8005788 <I2C_RequestMemoryWrite+0x90>
 80057a4:	00010002 	.word	0x00010002

080057a8 <I2C_RequestMemoryRead>:
{
 80057a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057ac:	469a      	mov	sl, r3
 80057ae:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b2:	6803      	ldr	r3, [r0, #0]
{
 80057b4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b6:	681a      	ldr	r2, [r3, #0]
{
 80057b8:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057be:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057c0:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ca:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057cc:	463b      	mov	r3, r7
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8cd 8000 	str.w	r8, [sp]
{
 80057d4:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057d6:	f7ff fee3 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	b148      	cbz	r0, 80057f2 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057de:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057e0:	05db      	lsls	r3, r3, #23
 80057e2:	d502      	bpl.n	80057ea <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057e8:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80057ea:	2003      	movs	r0, #3
}
 80057ec:	b004      	add	sp, #16
 80057ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057f2:	fa5f f986 	uxtb.w	r9, r6
 80057f6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80057fa:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057fc:	463a      	mov	r2, r7
 80057fe:	4643      	mov	r3, r8
 8005800:	4620      	mov	r0, r4
 8005802:	4929      	ldr	r1, [pc, #164]	; (80058a8 <I2C_RequestMemoryRead+0x100>)
 8005804:	f7ff ff0c 	bl	8005620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005808:	b108      	cbz	r0, 800580e <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 800580a:	2001      	movs	r0, #1
 800580c:	e7ee      	b.n	80057ec <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	9003      	str	r0, [sp, #12]
 8005812:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005814:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005816:	9203      	str	r2, [sp, #12]
 8005818:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800581a:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800581c:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800581e:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005820:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005822:	f7ff ff3f 	bl	80056a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005826:	b140      	cbz	r0, 800583a <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800582a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800582c:	bf01      	itttt	eq
 800582e:	6822      	ldreq	r2, [r4, #0]
 8005830:	6813      	ldreq	r3, [r2, #0]
 8005832:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8005836:	6013      	streq	r3, [r2, #0]
 8005838:	e7e7      	b.n	800580a <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800583a:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800583e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005840:	d11a      	bne.n	8005878 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005842:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005844:	4642      	mov	r2, r8
 8005846:	4639      	mov	r1, r7
 8005848:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800584a:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800584c:	f7ff ff2a 	bl	80056a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005850:	4602      	mov	r2, r0
 8005852:	2800      	cmp	r0, #0
 8005854:	d1e8      	bne.n	8005828 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005856:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005858:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800585a:	680b      	ldr	r3, [r1, #0]
 800585c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005860:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005862:	463b      	mov	r3, r7
 8005864:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005868:	f8cd 8000 	str.w	r8, [sp]
 800586c:	f7ff fe98 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005870:	6822      	ldr	r2, [r4, #0]
 8005872:	b160      	cbz	r0, 800588e <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005874:	6813      	ldr	r3, [r2, #0]
 8005876:	e7b3      	b.n	80057e0 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005878:	0a2a      	lsrs	r2, r5, #8
 800587a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800587c:	4639      	mov	r1, r7
 800587e:	4642      	mov	r2, r8
 8005880:	4620      	mov	r0, r4
 8005882:	f7ff ff0f 	bl	80056a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005886:	2800      	cmp	r0, #0
 8005888:	d1ce      	bne.n	8005828 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	e7d9      	b.n	8005842 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800588e:	f049 0301 	orr.w	r3, r9, #1
 8005892:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005894:	4620      	mov	r0, r4
 8005896:	4643      	mov	r3, r8
 8005898:	463a      	mov	r2, r7
 800589a:	4903      	ldr	r1, [pc, #12]	; (80058a8 <I2C_RequestMemoryRead+0x100>)
 800589c:	f7ff fec0 	bl	8005620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 80058a0:	3800      	subs	r0, #0
 80058a2:	bf18      	it	ne
 80058a4:	2001      	movne	r0, #1
 80058a6:	e7a1      	b.n	80057ec <I2C_RequestMemoryRead+0x44>
 80058a8:	00010002 	.word	0x00010002

080058ac <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	4604      	mov	r4, r0
 80058b0:	460d      	mov	r5, r1
 80058b2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	075b      	lsls	r3, r3, #29
 80058ba:	d501      	bpl.n	80058c0 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80058bc:	2000      	movs	r0, #0
}
 80058be:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058c0:	4620      	mov	r0, r4
 80058c2:	f7ff fe54 	bl	800556e <I2C_IsAcknowledgeFailed>
 80058c6:	b9c8      	cbnz	r0, 80058fc <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80058c8:	1c6a      	adds	r2, r5, #1
 80058ca:	d0f3      	beq.n	80058b4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058cc:	f7ff f8c4 	bl	8004a58 <HAL_GetTick>
 80058d0:	1b80      	subs	r0, r0, r6
 80058d2:	42a8      	cmp	r0, r5
 80058d4:	d801      	bhi.n	80058da <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80058d6:	2d00      	cmp	r5, #0
 80058d8:	d1ec      	bne.n	80058b4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f013 0304 	ands.w	r3, r3, #4
 80058e2:	d1e7      	bne.n	80058b4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80058e4:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058e6:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80058f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058f6:	f042 0220 	orr.w	r2, r2, #32
 80058fa:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80058fc:	2001      	movs	r0, #1
 80058fe:	e7de      	b.n	80058be <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08005900 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	4604      	mov	r4, r0
 8005904:	460d      	mov	r5, r1
 8005906:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005908:	6821      	ldr	r1, [r4, #0]
 800590a:	694b      	ldr	r3, [r1, #20]
 800590c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005910:	d001      	beq.n	8005916 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8005912:	2000      	movs	r0, #0
 8005914:	e010      	b.n	8005938 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005916:	694a      	ldr	r2, [r1, #20]
 8005918:	06d2      	lsls	r2, r2, #27
 800591a:	d50e      	bpl.n	800593a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800591c:	f06f 0210 	mvn.w	r2, #16
 8005920:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005922:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005924:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005926:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800592a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800592e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005930:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005932:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005934:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005938:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593a:	f7ff f88d 	bl	8004a58 <HAL_GetTick>
 800593e:	1b80      	subs	r0, r0, r6
 8005940:	42a8      	cmp	r0, r5
 8005942:	d801      	bhi.n	8005948 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8005944:	2d00      	cmp	r5, #0
 8005946:	d1df      	bne.n	8005908 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005950:	d1da      	bne.n	8005908 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8005952:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005954:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005956:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800595a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800595e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005960:	f042 0220 	orr.w	r2, r2, #32
 8005964:	e7e4      	b.n	8005930 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08005968 <HAL_I2C_Init>:
{
 8005968:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800596a:	4604      	mov	r4, r0
 800596c:	b908      	cbnz	r0, 8005972 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800596e:	2001      	movs	r0, #1
}
 8005970:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005972:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005976:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800597a:	b91b      	cbnz	r3, 8005984 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800597c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005980:	f7fd fb46 	bl	8003010 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005984:	2324      	movs	r3, #36	; 0x24
 8005986:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800599a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059a2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059a4:	f000 fd6a 	bl	800647c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059a8:	4b3f      	ldr	r3, [pc, #252]	; (8005aa8 <HAL_I2C_Init+0x140>)
 80059aa:	6865      	ldr	r5, [r4, #4]
 80059ac:	429d      	cmp	r5, r3
 80059ae:	bf94      	ite	ls
 80059b0:	4b3e      	ldrls	r3, [pc, #248]	; (8005aac <HAL_I2C_Init+0x144>)
 80059b2:	4b3f      	ldrhi	r3, [pc, #252]	; (8005ab0 <HAL_I2C_Init+0x148>)
 80059b4:	4298      	cmp	r0, r3
 80059b6:	bf8c      	ite	hi
 80059b8:	2300      	movhi	r3, #0
 80059ba:	2301      	movls	r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1d6      	bne.n	800596e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059c0:	4e39      	ldr	r6, [pc, #228]	; (8005aa8 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 80059c2:	4b3c      	ldr	r3, [pc, #240]	; (8005ab4 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059c4:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 80059c6:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059ca:	bf88      	it	hi
 80059cc:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059d0:	6822      	ldr	r2, [r4, #0]
 80059d2:	6851      	ldr	r1, [r2, #4]
 80059d4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80059d8:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059dc:	bf82      	ittt	hi
 80059de:	4373      	mulhi	r3, r6
 80059e0:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80059e4:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059e8:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059ea:	6a11      	ldr	r1, [r2, #32]
 80059ec:	3301      	adds	r3, #1
 80059ee:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80059f2:	430b      	orrs	r3, r1
 80059f4:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059f6:	69d1      	ldr	r1, [r2, #28]
 80059f8:	1e43      	subs	r3, r0, #1
 80059fa:	482b      	ldr	r0, [pc, #172]	; (8005aa8 <HAL_I2C_Init+0x140>)
 80059fc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8005a00:	4285      	cmp	r5, r0
 8005a02:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005a06:	d832      	bhi.n	8005a6e <HAL_I2C_Init+0x106>
 8005a08:	006d      	lsls	r5, r5, #1
 8005a0a:	fbb3 f3f5 	udiv	r3, r3, r5
 8005a0e:	f640 70fc 	movw	r0, #4092	; 0xffc
 8005a12:	3301      	adds	r3, #1
 8005a14:	4203      	tst	r3, r0
 8005a16:	d042      	beq.n	8005a9e <HAL_I2C_Init+0x136>
 8005a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a1c:	4319      	orrs	r1, r3
 8005a1e:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a20:	6811      	ldr	r1, [r2, #0]
 8005a22:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8005a26:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8005a2a:	4303      	orrs	r3, r0
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a30:	6891      	ldr	r1, [r2, #8]
 8005a32:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8005a36:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8005a3a:	4303      	orrs	r3, r0
 8005a3c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a44:	68d1      	ldr	r1, [r2, #12]
 8005a46:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8005a4a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005a4e:	4303      	orrs	r3, r0
 8005a50:	430b      	orrs	r3, r1
 8005a52:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005a54:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a56:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8005a58:	f043 0301 	orr.w	r3, r3, #1
 8005a5c:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005a5e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a60:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a66:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a68:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8005a6c:	e780      	b.n	8005970 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a6e:	68a0      	ldr	r0, [r4, #8]
 8005a70:	b950      	cbnz	r0, 8005a88 <HAL_I2C_Init+0x120>
 8005a72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a76:	fbb3 f3f5 	udiv	r3, r3, r5
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a80:	b17b      	cbz	r3, 8005aa2 <HAL_I2C_Init+0x13a>
 8005a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a86:	e7c9      	b.n	8005a1c <HAL_I2C_Init+0xb4>
 8005a88:	2019      	movs	r0, #25
 8005a8a:	4368      	muls	r0, r5
 8005a8c:	fbb3 f3f0 	udiv	r3, r3, r0
 8005a90:	3301      	adds	r3, #1
 8005a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a96:	b123      	cbz	r3, 8005aa2 <HAL_I2C_Init+0x13a>
 8005a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a9c:	e7be      	b.n	8005a1c <HAL_I2C_Init+0xb4>
 8005a9e:	2304      	movs	r3, #4
 8005aa0:	e7bc      	b.n	8005a1c <HAL_I2C_Init+0xb4>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e7ba      	b.n	8005a1c <HAL_I2C_Init+0xb4>
 8005aa6:	bf00      	nop
 8005aa8:	000186a0 	.word	0x000186a0
 8005aac:	001e847f 	.word	0x001e847f
 8005ab0:	003d08ff 	.word	0x003d08ff
 8005ab4:	000f4240 	.word	0x000f4240

08005ab8 <HAL_I2C_Mem_Write>:
{
 8005ab8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005abc:	4604      	mov	r4, r0
 8005abe:	4699      	mov	r9, r3
 8005ac0:	460f      	mov	r7, r1
 8005ac2:	4690      	mov	r8, r2
 8005ac4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8005ac6:	f7fe ffc7 	bl	8004a58 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8005ace:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d003      	beq.n	8005adc <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8005ad4:	2002      	movs	r0, #2
}
 8005ad6:	b003      	add	sp, #12
 8005ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005adc:	9000      	str	r0, [sp, #0]
 8005ade:	2319      	movs	r3, #25
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	493a      	ldr	r1, [pc, #232]	; (8005bd0 <HAL_I2C_Mem_Write+0x118>)
 8005ae6:	f7ff fd5b 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d1f2      	bne.n	8005ad4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8005aee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d0ee      	beq.n	8005ad4 <HAL_I2C_Mem_Write+0x1c>
 8005af6:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005af8:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005afa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005afe:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b00:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b02:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8005b04:	bf58      	it	pl
 8005b06:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b08:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8005b0a:	bf5c      	itt	pl
 8005b0c:	f043 0301 	orrpl.w	r3, r3, #1
 8005b10:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b12:	6803      	ldr	r3, [r0, #0]
 8005b14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b18:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b1a:	2321      	movs	r3, #33	; 0x21
 8005b1c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b20:	2340      	movs	r3, #64	; 0x40
 8005b22:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b26:	2300      	movs	r3, #0
 8005b28:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b2c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8005b2e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b30:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b34:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 8005b38:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b3c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b3e:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <HAL_I2C_Mem_Write+0x11c>)
 8005b40:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b42:	464b      	mov	r3, r9
 8005b44:	f7ff fdd8 	bl	80056f8 <I2C_RequestMemoryWrite>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d02a      	beq.n	8005ba2 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	e7c2      	b.n	8005ad6 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b50:	f7ff fda8 	bl	80056a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b54:	b140      	cbz	r0, 8005b68 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b58:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b5a:	bf01      	itttt	eq
 8005b5c:	6822      	ldreq	r2, [r4, #0]
 8005b5e:	6813      	ldreq	r3, [r2, #0]
 8005b60:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8005b64:	6013      	streq	r3, [r2, #0]
 8005b66:	e7f1      	b.n	8005b4c <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b6a:	6827      	ldr	r7, [r4, #0]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005b72:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8005b74:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005b76:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005b78:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005b7a:	3a01      	subs	r2, #1
 8005b7c:	b292      	uxth	r2, r2
 8005b7e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b80:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8005b82:	1e48      	subs	r0, r1, #1
 8005b84:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b86:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8005b88:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b8a:	d50a      	bpl.n	8005ba2 <HAL_I2C_Mem_Write+0xea>
 8005b8c:	b148      	cbz	r0, 8005ba2 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b8e:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8005b90:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b92:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8005b94:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005b96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005b98:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005b9e:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005ba0:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ba2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ba4:	462a      	mov	r2, r5
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1d0      	bne.n	8005b50 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bae:	f7ff fe7d 	bl	80058ac <I2C_WaitOnBTFFlagUntilTimeout>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	d1cf      	bne.n	8005b56 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb6:	6822      	ldr	r2, [r4, #0]
 8005bb8:	6813      	ldr	r3, [r2, #0]
 8005bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bbe:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005bc0:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8005bc2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8005bc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bca:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8005bce:	e782      	b.n	8005ad6 <HAL_I2C_Mem_Write+0x1e>
 8005bd0:	00100002 	.word	0x00100002
 8005bd4:	ffff0000 	.word	0xffff0000

08005bd8 <HAL_I2C_Mem_Read>:
{
 8005bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bdc:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8005bde:	2300      	movs	r3, #0
{
 8005be0:	4604      	mov	r4, r0
 8005be2:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8005be4:	9303      	str	r3, [sp, #12]
{
 8005be6:	460d      	mov	r5, r1
 8005be8:	4690      	mov	r8, r2
 8005bea:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8005bec:	f7fe ff34 	bl	8004a58 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bf0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8005bf4:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d004      	beq.n	8005c04 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8005bfa:	2502      	movs	r5, #2
}
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	b009      	add	sp, #36	; 0x24
 8005c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c04:	9000      	str	r0, [sp, #0]
 8005c06:	2319      	movs	r3, #25
 8005c08:	2201      	movs	r2, #1
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	498d      	ldr	r1, [pc, #564]	; (8005e44 <HAL_I2C_Mem_Read+0x26c>)
 8005c0e:	f7ff fcc7 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d1f1      	bne.n	8005bfa <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8005c16:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d0ed      	beq.n	8005bfa <HAL_I2C_Mem_Read+0x22>
 8005c1e:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c20:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005c22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c26:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c28:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c2a:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8005c2c:	bf58      	it	pl
 8005c2e:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c30:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8005c32:	bf5c      	itt	pl
 8005c34:	f043 0301 	orrpl.w	r3, r3, #1
 8005c38:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c3a:	6803      	ldr	r3, [r0, #0]
 8005c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c40:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c42:	2322      	movs	r3, #34	; 0x22
 8005c44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c48:	2340      	movs	r3, #64	; 0x40
 8005c4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005c52:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c54:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8005c56:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c58:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c5c:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 8005c60:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c64:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c66:	4b78      	ldr	r3, [pc, #480]	; (8005e48 <HAL_I2C_Mem_Read+0x270>)
 8005c68:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c6a:	464b      	mov	r3, r9
 8005c6c:	f7ff fd9c 	bl	80057a8 <I2C_RequestMemoryRead>
 8005c70:	4605      	mov	r5, r0
 8005c72:	b108      	cbz	r0, 8005c78 <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 8005c74:	2501      	movs	r5, #1
 8005c76:	e7c1      	b.n	8005bfc <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8005c78:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c7a:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8005c7c:	b9c2      	cbnz	r2, 8005cb0 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c7e:	9004      	str	r0, [sp, #16]
 8005c80:	695a      	ldr	r2, [r3, #20]
 8005c82:	9204      	str	r2, [sp, #16]
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	9204      	str	r2, [sp, #16]
 8005c88:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c90:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c92:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8005e4c <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c96:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8005e50 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 8005c9a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d137      	bne.n	8005d10 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ca0:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8005ca2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8005ca6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005caa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8005cae:	e7a5      	b.n	8005bfc <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8005cb0:	2a01      	cmp	r2, #1
 8005cb2:	d111      	bne.n	8005cd8 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005cbc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	9005      	str	r0, [sp, #20]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	9205      	str	r2, [sp, #20]
 8005cc6:	699a      	ldr	r2, [r3, #24]
 8005cc8:	9205      	str	r2, [sp, #20]
 8005cca:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005cd4:	b662      	cpsie	i
}
 8005cd6:	e7dc      	b.n	8005c92 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 8005cd8:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cda:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8005cdc:	d10e      	bne.n	8005cfc <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ce2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ce4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	9006      	str	r0, [sp, #24]
 8005cea:	695a      	ldr	r2, [r3, #20]
 8005cec:	9206      	str	r2, [sp, #24]
 8005cee:	699a      	ldr	r2, [r3, #24]
 8005cf0:	9206      	str	r2, [sp, #24]
 8005cf2:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfa:	e7ea      	b.n	8005cd2 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d00:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d02:	9007      	str	r0, [sp, #28]
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	9207      	str	r2, [sp, #28]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	9307      	str	r3, [sp, #28]
 8005d0c:	9b07      	ldr	r3, [sp, #28]
 8005d0e:	e7c0      	b.n	8005c92 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d878      	bhi.n	8005e06 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d115      	bne.n	8005d44 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d18:	4632      	mov	r2, r6
 8005d1a:	4639      	mov	r1, r7
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f7ff fdef 	bl	8005900 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d1a6      	bne.n	8005c74 <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d2c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d30:	3301      	adds	r3, #1
 8005d32:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005d34:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005d36:	3b01      	subs	r3, #1
 8005d38:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005d3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005d42:	e7aa      	b.n	8005c9a <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8005d44:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d46:	f04f 0200 	mov.w	r2, #0
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	4641      	mov	r1, r8
 8005d4e:	4620      	mov	r0, r4
 8005d50:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8005d52:	d118      	bne.n	8005d86 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d54:	f7ff fc24 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d18b      	bne.n	8005c74 <HAL_I2C_Mem_Read+0x9c>
 8005d5c:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d66:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d68:	691a      	ldr	r2, [r3, #16]
 8005d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d6c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d70:	3301      	adds	r3, #1
 8005d72:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005d74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005d76:	3b01      	subs	r3, #1
 8005d78:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005d7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005d82:	b662      	cpsie	i
 8005d84:	e7cf      	b.n	8005d26 <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d86:	f7ff fc0b 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	f47f af72 	bne.w	8005c74 <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d90:	6822      	ldr	r2, [r4, #0]
 8005d92:	6813      	ldr	r3, [r2, #0]
 8005d94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d98:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d9a:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d9c:	f246 11a8 	movw	r1, #25000	; 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005da6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005da8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005daa:	1c53      	adds	r3, r2, #1
 8005dac:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005dae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005db0:	3b01      	subs	r3, #1
 8005db2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005db4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005dbc:	f8d9 3000 	ldr.w	r3, [r9]
 8005dc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dc4:	2123      	movs	r1, #35	; 0x23
 8005dc6:	434b      	muls	r3, r1
 8005dc8:	9303      	str	r3, [sp, #12]
            count--;
 8005dca:	9b03      	ldr	r3, [sp, #12]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8005dd0:	9b03      	ldr	r3, [sp, #12]
 8005dd2:	b96b      	cbnz	r3, 8005df0 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8005dd4:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005dd6:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005dd8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ddc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005de0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005de2:	f042 0220 	orr.w	r2, r2, #32
 8005de6:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005de8:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8005dea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8005dee:	e741      	b.n	8005c74 <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	6959      	ldr	r1, [r3, #20]
 8005df4:	0748      	lsls	r0, r1, #29
 8005df6:	d5e8      	bpl.n	8005dca <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df8:	6819      	ldr	r1, [r3, #0]
 8005dfa:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005dfe:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	7053      	strb	r3, [r2, #1]
 8005e04:	e7b3      	b.n	8005d6e <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e06:	4632      	mov	r2, r6
 8005e08:	4639      	mov	r1, r7
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f7ff fd78 	bl	8005900 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	f47f af2f 	bne.w	8005c74 <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e1c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005e1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005e20:	1c53      	adds	r3, r2, #1
 8005e22:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005e24:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005e26:	3b01      	subs	r3, #1
 8005e28:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005e2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	6959      	ldr	r1, [r3, #20]
 8005e36:	0749      	lsls	r1, r1, #29
 8005e38:	f57f af2f 	bpl.w	8005c9a <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	7053      	strb	r3, [r2, #1]
 8005e40:	e775      	b.n	8005d2e <HAL_I2C_Mem_Read+0x156>
 8005e42:	bf00      	nop
 8005e44:	00100002 	.word	0x00100002
 8005e48:	ffff0000 	.word	0xffff0000
 8005e4c:	00010004 	.word	0x00010004
 8005e50:	20000000 	.word	0x20000000

08005e54 <HAL_I2C_IsDeviceReady>:
{
 8005e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e58:	4604      	mov	r4, r0
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	461f      	mov	r7, r3
 8005e5e:	4688      	mov	r8, r1
 8005e60:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8005e62:	f7fe fdf9 	bl	8004a58 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e66:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8005e6a:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	d003      	beq.n	8005e78 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8005e70:	2002      	movs	r0, #2
}
 8005e72:	b005      	add	sp, #20
 8005e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e78:	9000      	str	r0, [sp, #0]
 8005e7a:	2319      	movs	r3, #25
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	4620      	mov	r0, r4
 8005e80:	494a      	ldr	r1, [pc, #296]	; (8005fac <HAL_I2C_IsDeviceReady+0x158>)
 8005e82:	f7ff fb8d 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d1f2      	bne.n	8005e70 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8005e8a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d0ee      	beq.n	8005e70 <HAL_I2C_IsDeviceReady+0x1c>
 8005e92:	2301      	movs	r3, #1
 8005e94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e98:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e9a:	2600      	movs	r6, #0
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e9c:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e9e:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8005fac <HAL_I2C_IsDeviceReady+0x158>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ea2:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8005ea4:	bf58      	it	pl
 8005ea6:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ea8:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8005eac:	bf5c      	itt	pl
 8005eae:	f042 0201 	orrpl.w	r2, r2, #1
 8005eb2:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eba:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ebc:	2324      	movs	r3, #36	; 0x24
 8005ebe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ec2:	4b3b      	ldr	r3, [pc, #236]	; (8005fb0 <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec4:	6426      	str	r6, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ec6:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ec8:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ece:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005ed0:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed6:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005ed8:	463b      	mov	r3, r7
 8005eda:	2200      	movs	r2, #0
 8005edc:	9500      	str	r5, [sp, #0]
 8005ede:	f7ff fb5f 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	b138      	cbz	r0, 8005ef6 <HAL_I2C_IsDeviceReady+0xa2>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	05db      	lsls	r3, r3, #23
 8005eea:	d502      	bpl.n	8005ef2 <HAL_I2C_IsDeviceReady+0x9e>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ef0:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8005ef2:	2003      	movs	r0, #3
 8005ef4:	e7bd      	b.n	8005e72 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ef6:	f8c3 8010 	str.w	r8, [r3, #16]
      tickstart = HAL_GetTick();
 8005efa:	f7fe fdad 	bl	8004a58 <HAL_GetTick>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005efe:	f04f 09a0 	mov.w	r9, #160	; 0xa0
      tickstart = HAL_GetTick();
 8005f02:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f08:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f0a:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f0e:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005f12:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8005f16:	29a0      	cmp	r1, #160	; 0xa0
 8005f18:	d001      	beq.n	8005f1e <HAL_I2C_IsDeviceReady+0xca>
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	d01d      	beq.n	8005f5a <HAL_I2C_IsDeviceReady+0x106>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f1e:	f04f 0920 	mov.w	r9, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005f22:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8005f24:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005f28:	695a      	ldr	r2, [r3, #20]
 8005f2a:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f34:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005f36:	d025      	beq.n	8005f84 <HAL_I2C_IsDeviceReady+0x130>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f38:	2200      	movs	r2, #0
 8005f3a:	9203      	str	r2, [sp, #12]
 8005f3c:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f3e:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f40:	9203      	str	r2, [sp, #12]
 8005f42:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f44:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f46:	9303      	str	r3, [sp, #12]
 8005f48:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f4a:	4918      	ldr	r1, [pc, #96]	; (8005fac <HAL_I2C_IsDeviceReady+0x158>)
 8005f4c:	2319      	movs	r3, #25
 8005f4e:	9500      	str	r5, [sp, #0]
 8005f50:	f7ff fb26 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005f54:	b188      	cbz	r0, 8005f7a <HAL_I2C_IsDeviceReady+0x126>
    return HAL_ERROR;
 8005f56:	2001      	movs	r0, #1
 8005f58:	e78b      	b.n	8005e72 <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f5a:	f7fe fd7d 	bl	8004a58 <HAL_GetTick>
 8005f5e:	1b40      	subs	r0, r0, r5
 8005f60:	42b8      	cmp	r0, r7
 8005f62:	d800      	bhi.n	8005f66 <HAL_I2C_IsDeviceReady+0x112>
 8005f64:	b90f      	cbnz	r7, 8005f6a <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005f66:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f6e:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f70:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f74:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8005f78:	e7cb      	b.n	8005f12 <HAL_I2C_IsDeviceReady+0xbe>
        hi2c->State = HAL_I2C_STATE_READY;
 8005f7a:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8005f7e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8005f82:	e776      	b.n	8005e72 <HAL_I2C_IsDeviceReady+0x1e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f88:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f8a:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	2319      	movs	r3, #25
 8005f90:	2201      	movs	r2, #1
 8005f92:	9500      	str	r5, [sp, #0]
 8005f94:	f7ff fb04 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d1dc      	bne.n	8005f56 <HAL_I2C_IsDeviceReady+0x102>
      I2C_Trials++;
 8005f9c:	3601      	adds	r6, #1
    while (I2C_Trials < Trials);
 8005f9e:	4556      	cmp	r6, sl
 8005fa0:	d392      	bcc.n	8005ec8 <HAL_I2C_IsDeviceReady+0x74>
    hi2c->State = HAL_I2C_STATE_READY;
 8005fa2:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8005fa6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8005faa:	e7d4      	b.n	8005f56 <HAL_I2C_IsDeviceReady+0x102>
 8005fac:	00100002 	.word	0x00100002
 8005fb0:	ffff0000 	.word	0xffff0000

08005fb4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	4b01      	ldr	r3, [pc, #4]	; (8005fbc <HAL_PWR_EnableBkUpAccess+0x8>)
 8005fb8:	621a      	str	r2, [r3, #32]
}
 8005fba:	4770      	bx	lr
 8005fbc:	420e0000 	.word	0x420e0000

08005fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	b338      	cbz	r0, 8006018 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fc8:	6803      	ldr	r3, [r0, #0]
 8005fca:	07db      	lsls	r3, r3, #31
 8005fcc:	d410      	bmi.n	8005ff0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fce:	682b      	ldr	r3, [r5, #0]
 8005fd0:	079f      	lsls	r7, r3, #30
 8005fd2:	d45e      	bmi.n	8006092 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	0719      	lsls	r1, r3, #28
 8005fd8:	f100 8095 	bmi.w	8006106 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	075a      	lsls	r2, r3, #29
 8005fe0:	f100 80c1 	bmi.w	8006166 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fe4:	69e8      	ldr	r0, [r5, #28]
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	f040 812c 	bne.w	8006244 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8005fec:	2000      	movs	r0, #0
 8005fee:	e029      	b.n	8006044 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ff0:	4c90      	ldr	r4, [pc, #576]	; (8006234 <HAL_RCC_OscConfig+0x274>)
 8005ff2:	6863      	ldr	r3, [r4, #4]
 8005ff4:	f003 030c 	and.w	r3, r3, #12
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d007      	beq.n	800600c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ffc:	6863      	ldr	r3, [r4, #4]
 8005ffe:	f003 030c 	and.w	r3, r3, #12
 8006002:	2b08      	cmp	r3, #8
 8006004:	d10a      	bne.n	800601c <HAL_RCC_OscConfig+0x5c>
 8006006:	6863      	ldr	r3, [r4, #4]
 8006008:	03de      	lsls	r6, r3, #15
 800600a:	d507      	bpl.n	800601c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	039c      	lsls	r4, r3, #14
 8006010:	d5dd      	bpl.n	8005fce <HAL_RCC_OscConfig+0xe>
 8006012:	686b      	ldr	r3, [r5, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1da      	bne.n	8005fce <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8006018:	2001      	movs	r0, #1
 800601a:	e013      	b.n	8006044 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800601c:	686b      	ldr	r3, [r5, #4]
 800601e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006022:	d112      	bne.n	800604a <HAL_RCC_OscConfig+0x8a>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800602c:	f7fe fd14 	bl	8004a58 <HAL_GetTick>
 8006030:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	0398      	lsls	r0, r3, #14
 8006036:	d4ca      	bmi.n	8005fce <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006038:	f7fe fd0e 	bl	8004a58 <HAL_GetTick>
 800603c:	1b80      	subs	r0, r0, r6
 800603e:	2864      	cmp	r0, #100	; 0x64
 8006040:	d9f7      	bls.n	8006032 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8006042:	2003      	movs	r0, #3
}
 8006044:	b002      	add	sp, #8
 8006046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800604a:	b99b      	cbnz	r3, 8006074 <HAL_RCC_OscConfig+0xb4>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006052:	6023      	str	r3, [r4, #0]
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800605a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800605c:	f7fe fcfc 	bl	8004a58 <HAL_GetTick>
 8006060:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	0399      	lsls	r1, r3, #14
 8006066:	d5b2      	bpl.n	8005fce <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006068:	f7fe fcf6 	bl	8004a58 <HAL_GetTick>
 800606c:	1b80      	subs	r0, r0, r6
 800606e:	2864      	cmp	r0, #100	; 0x64
 8006070:	d9f7      	bls.n	8006062 <HAL_RCC_OscConfig+0xa2>
 8006072:	e7e6      	b.n	8006042 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	d103      	bne.n	8006084 <HAL_RCC_OscConfig+0xc4>
 800607c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	e7cf      	b.n	8006024 <HAL_RCC_OscConfig+0x64>
 8006084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006090:	e7cb      	b.n	800602a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006092:	4c68      	ldr	r4, [pc, #416]	; (8006234 <HAL_RCC_OscConfig+0x274>)
 8006094:	6863      	ldr	r3, [r4, #4]
 8006096:	f013 0f0c 	tst.w	r3, #12
 800609a:	d007      	beq.n	80060ac <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800609c:	6863      	ldr	r3, [r4, #4]
 800609e:	f003 030c 	and.w	r3, r3, #12
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d110      	bne.n	80060c8 <HAL_RCC_OscConfig+0x108>
 80060a6:	6863      	ldr	r3, [r4, #4]
 80060a8:	03da      	lsls	r2, r3, #15
 80060aa:	d40d      	bmi.n	80060c8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	079b      	lsls	r3, r3, #30
 80060b0:	d502      	bpl.n	80060b8 <HAL_RCC_OscConfig+0xf8>
 80060b2:	692b      	ldr	r3, [r5, #16]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d1af      	bne.n	8006018 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	696a      	ldr	r2, [r5, #20]
 80060bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80060c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	e785      	b.n	8005fd4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060c8:	692a      	ldr	r2, [r5, #16]
 80060ca:	4b5b      	ldr	r3, [pc, #364]	; (8006238 <HAL_RCC_OscConfig+0x278>)
 80060cc:	b16a      	cbz	r2, 80060ea <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80060ce:	2201      	movs	r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80060d2:	f7fe fcc1 	bl	8004a58 <HAL_GetTick>
 80060d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	079f      	lsls	r7, r3, #30
 80060dc:	d4ec      	bmi.n	80060b8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060de:	f7fe fcbb 	bl	8004a58 <HAL_GetTick>
 80060e2:	1b80      	subs	r0, r0, r6
 80060e4:	2802      	cmp	r0, #2
 80060e6:	d9f7      	bls.n	80060d8 <HAL_RCC_OscConfig+0x118>
 80060e8:	e7ab      	b.n	8006042 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80060ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80060ec:	f7fe fcb4 	bl	8004a58 <HAL_GetTick>
 80060f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	0798      	lsls	r0, r3, #30
 80060f6:	f57f af6d 	bpl.w	8005fd4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060fa:	f7fe fcad 	bl	8004a58 <HAL_GetTick>
 80060fe:	1b80      	subs	r0, r0, r6
 8006100:	2802      	cmp	r0, #2
 8006102:	d9f6      	bls.n	80060f2 <HAL_RCC_OscConfig+0x132>
 8006104:	e79d      	b.n	8006042 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006106:	69aa      	ldr	r2, [r5, #24]
 8006108:	4e4a      	ldr	r6, [pc, #296]	; (8006234 <HAL_RCC_OscConfig+0x274>)
 800610a:	4b4b      	ldr	r3, [pc, #300]	; (8006238 <HAL_RCC_OscConfig+0x278>)
 800610c:	b1e2      	cbz	r2, 8006148 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800610e:	2201      	movs	r2, #1
 8006110:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8006114:	f7fe fca0 	bl	8004a58 <HAL_GetTick>
 8006118:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800611a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800611c:	079b      	lsls	r3, r3, #30
 800611e:	d50d      	bpl.n	800613c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006120:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006124:	4b45      	ldr	r3, [pc, #276]	; (800623c <HAL_RCC_OscConfig+0x27c>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	fbb3 f3f2 	udiv	r3, r3, r2
 800612c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800612e:	bf00      	nop
  }
  while (Delay --);
 8006130:	9b01      	ldr	r3, [sp, #4]
 8006132:	1e5a      	subs	r2, r3, #1
 8006134:	9201      	str	r2, [sp, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1f9      	bne.n	800612e <HAL_RCC_OscConfig+0x16e>
 800613a:	e74f      	b.n	8005fdc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800613c:	f7fe fc8c 	bl	8004a58 <HAL_GetTick>
 8006140:	1b00      	subs	r0, r0, r4
 8006142:	2802      	cmp	r0, #2
 8006144:	d9e9      	bls.n	800611a <HAL_RCC_OscConfig+0x15a>
 8006146:	e77c      	b.n	8006042 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8006148:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800614c:	f7fe fc84 	bl	8004a58 <HAL_GetTick>
 8006150:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006152:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006154:	079f      	lsls	r7, r3, #30
 8006156:	f57f af41 	bpl.w	8005fdc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800615a:	f7fe fc7d 	bl	8004a58 <HAL_GetTick>
 800615e:	1b00      	subs	r0, r0, r4
 8006160:	2802      	cmp	r0, #2
 8006162:	d9f6      	bls.n	8006152 <HAL_RCC_OscConfig+0x192>
 8006164:	e76d      	b.n	8006042 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006166:	4c33      	ldr	r4, [pc, #204]	; (8006234 <HAL_RCC_OscConfig+0x274>)
 8006168:	69e3      	ldr	r3, [r4, #28]
 800616a:	00d8      	lsls	r0, r3, #3
 800616c:	d424      	bmi.n	80061b8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800616e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006170:	69e3      	ldr	r3, [r4, #28]
 8006172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006176:	61e3      	str	r3, [r4, #28]
 8006178:	69e3      	ldr	r3, [r4, #28]
 800617a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006182:	4e2f      	ldr	r6, [pc, #188]	; (8006240 <HAL_RCC_OscConfig+0x280>)
 8006184:	6833      	ldr	r3, [r6, #0]
 8006186:	05d9      	lsls	r1, r3, #23
 8006188:	d518      	bpl.n	80061bc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800618a:	68eb      	ldr	r3, [r5, #12]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d126      	bne.n	80061de <HAL_RCC_OscConfig+0x21e>
 8006190:	6a23      	ldr	r3, [r4, #32]
 8006192:	f043 0301 	orr.w	r3, r3, #1
 8006196:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006198:	f7fe fc5e 	bl	8004a58 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800619c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80061a0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a2:	6a23      	ldr	r3, [r4, #32]
 80061a4:	079b      	lsls	r3, r3, #30
 80061a6:	d53f      	bpl.n	8006228 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80061a8:	2f00      	cmp	r7, #0
 80061aa:	f43f af1b 	beq.w	8005fe4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ae:	69e3      	ldr	r3, [r4, #28]
 80061b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061b4:	61e3      	str	r3, [r4, #28]
 80061b6:	e715      	b.n	8005fe4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80061b8:	2700      	movs	r7, #0
 80061ba:	e7e2      	b.n	8006182 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061bc:	6833      	ldr	r3, [r6, #0]
 80061be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80061c4:	f7fe fc48 	bl	8004a58 <HAL_GetTick>
 80061c8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ca:	6833      	ldr	r3, [r6, #0]
 80061cc:	05da      	lsls	r2, r3, #23
 80061ce:	d4dc      	bmi.n	800618a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d0:	f7fe fc42 	bl	8004a58 <HAL_GetTick>
 80061d4:	eba0 0008 	sub.w	r0, r0, r8
 80061d8:	2864      	cmp	r0, #100	; 0x64
 80061da:	d9f6      	bls.n	80061ca <HAL_RCC_OscConfig+0x20a>
 80061dc:	e731      	b.n	8006042 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061de:	b9ab      	cbnz	r3, 800620c <HAL_RCC_OscConfig+0x24c>
 80061e0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061e2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061e6:	f023 0301 	bic.w	r3, r3, #1
 80061ea:	6223      	str	r3, [r4, #32]
 80061ec:	6a23      	ldr	r3, [r4, #32]
 80061ee:	f023 0304 	bic.w	r3, r3, #4
 80061f2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80061f4:	f7fe fc30 	bl	8004a58 <HAL_GetTick>
 80061f8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061fa:	6a23      	ldr	r3, [r4, #32]
 80061fc:	0798      	lsls	r0, r3, #30
 80061fe:	d5d3      	bpl.n	80061a8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006200:	f7fe fc2a 	bl	8004a58 <HAL_GetTick>
 8006204:	1b80      	subs	r0, r0, r6
 8006206:	4540      	cmp	r0, r8
 8006208:	d9f7      	bls.n	80061fa <HAL_RCC_OscConfig+0x23a>
 800620a:	e71a      	b.n	8006042 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800620c:	2b05      	cmp	r3, #5
 800620e:	6a23      	ldr	r3, [r4, #32]
 8006210:	d103      	bne.n	800621a <HAL_RCC_OscConfig+0x25a>
 8006212:	f043 0304 	orr.w	r3, r3, #4
 8006216:	6223      	str	r3, [r4, #32]
 8006218:	e7ba      	b.n	8006190 <HAL_RCC_OscConfig+0x1d0>
 800621a:	f023 0301 	bic.w	r3, r3, #1
 800621e:	6223      	str	r3, [r4, #32]
 8006220:	6a23      	ldr	r3, [r4, #32]
 8006222:	f023 0304 	bic.w	r3, r3, #4
 8006226:	e7b6      	b.n	8006196 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006228:	f7fe fc16 	bl	8004a58 <HAL_GetTick>
 800622c:	1b80      	subs	r0, r0, r6
 800622e:	4540      	cmp	r0, r8
 8006230:	d9b7      	bls.n	80061a2 <HAL_RCC_OscConfig+0x1e2>
 8006232:	e706      	b.n	8006042 <HAL_RCC_OscConfig+0x82>
 8006234:	40021000 	.word	0x40021000
 8006238:	42420000 	.word	0x42420000
 800623c:	20000000 	.word	0x20000000
 8006240:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006244:	4c2a      	ldr	r4, [pc, #168]	; (80062f0 <HAL_RCC_OscConfig+0x330>)
 8006246:	6863      	ldr	r3, [r4, #4]
 8006248:	f003 030c 	and.w	r3, r3, #12
 800624c:	2b08      	cmp	r3, #8
 800624e:	d03e      	beq.n	80062ce <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006250:	2200      	movs	r2, #0
 8006252:	4b28      	ldr	r3, [pc, #160]	; (80062f4 <HAL_RCC_OscConfig+0x334>)
 8006254:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006256:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006258:	d12c      	bne.n	80062b4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800625a:	f7fe fbfd 	bl	8004a58 <HAL_GetTick>
 800625e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	0199      	lsls	r1, r3, #6
 8006264:	d420      	bmi.n	80062a8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006266:	6a2b      	ldr	r3, [r5, #32]
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800626c:	d105      	bne.n	800627a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800626e:	6862      	ldr	r2, [r4, #4]
 8006270:	68a9      	ldr	r1, [r5, #8]
 8006272:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006276:	430a      	orrs	r2, r1
 8006278:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800627a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800627c:	6862      	ldr	r2, [r4, #4]
 800627e:	430b      	orrs	r3, r1
 8006280:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8006284:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8006286:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006288:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800628a:	4b1a      	ldr	r3, [pc, #104]	; (80062f4 <HAL_RCC_OscConfig+0x334>)
 800628c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800628e:	f7fe fbe3 	bl	8004a58 <HAL_GetTick>
 8006292:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	019a      	lsls	r2, r3, #6
 8006298:	f53f aea8 	bmi.w	8005fec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800629c:	f7fe fbdc 	bl	8004a58 <HAL_GetTick>
 80062a0:	1b40      	subs	r0, r0, r5
 80062a2:	2802      	cmp	r0, #2
 80062a4:	d9f6      	bls.n	8006294 <HAL_RCC_OscConfig+0x2d4>
 80062a6:	e6cc      	b.n	8006042 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a8:	f7fe fbd6 	bl	8004a58 <HAL_GetTick>
 80062ac:	1b80      	subs	r0, r0, r6
 80062ae:	2802      	cmp	r0, #2
 80062b0:	d9d6      	bls.n	8006260 <HAL_RCC_OscConfig+0x2a0>
 80062b2:	e6c6      	b.n	8006042 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80062b4:	f7fe fbd0 	bl	8004a58 <HAL_GetTick>
 80062b8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	019b      	lsls	r3, r3, #6
 80062be:	f57f ae95 	bpl.w	8005fec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c2:	f7fe fbc9 	bl	8004a58 <HAL_GetTick>
 80062c6:	1b40      	subs	r0, r0, r5
 80062c8:	2802      	cmp	r0, #2
 80062ca:	d9f6      	bls.n	80062ba <HAL_RCC_OscConfig+0x2fa>
 80062cc:	e6b9      	b.n	8006042 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062ce:	2801      	cmp	r0, #1
 80062d0:	f43f aeb8 	beq.w	8006044 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80062d4:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062d6:	6a2a      	ldr	r2, [r5, #32]
 80062d8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80062dc:	4291      	cmp	r1, r2
 80062de:	f47f ae9b 	bne.w	8006018 <HAL_RCC_OscConfig+0x58>
 80062e2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80062e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062e8:	4293      	cmp	r3, r2
 80062ea:	f43f ae7f 	beq.w	8005fec <HAL_RCC_OscConfig+0x2c>
 80062ee:	e693      	b.n	8006018 <HAL_RCC_OscConfig+0x58>
 80062f0:	40021000 	.word	0x40021000
 80062f4:	42420000 	.word	0x42420000

080062f8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80062f8:	4a0d      	ldr	r2, [pc, #52]	; (8006330 <HAL_RCC_GetSysClockFreq+0x38>)
 80062fa:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80062fc:	f003 010c 	and.w	r1, r3, #12
 8006300:	2908      	cmp	r1, #8
 8006302:	d112      	bne.n	800632a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006304:	480b      	ldr	r0, [pc, #44]	; (8006334 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006306:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800630a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800630c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800630e:	d509      	bpl.n	8006324 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006310:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006312:	4a09      	ldr	r2, [pc, #36]	; (8006338 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006314:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006318:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800631a:	4a08      	ldr	r2, [pc, #32]	; (800633c <HAL_RCC_GetSysClockFreq+0x44>)
 800631c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800631e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006322:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006324:	4b06      	ldr	r3, [pc, #24]	; (8006340 <HAL_RCC_GetSysClockFreq+0x48>)
 8006326:	4358      	muls	r0, r3
 8006328:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800632a:	4803      	ldr	r0, [pc, #12]	; (8006338 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40021000 	.word	0x40021000
 8006334:	0800b631 	.word	0x0800b631
 8006338:	007a1200 	.word	0x007a1200
 800633c:	0800b641 	.word	0x0800b641
 8006340:	003d0900 	.word	0x003d0900

08006344 <HAL_RCC_ClockConfig>:
{
 8006344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006348:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800634a:	4604      	mov	r4, r0
 800634c:	b910      	cbnz	r0, 8006354 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800634e:	2001      	movs	r0, #1
}
 8006350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006354:	4a44      	ldr	r2, [pc, #272]	; (8006468 <HAL_RCC_ClockConfig+0x124>)
 8006356:	6813      	ldr	r3, [r2, #0]
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	428b      	cmp	r3, r1
 800635e:	d328      	bcc.n	80063b2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006360:	6821      	ldr	r1, [r4, #0]
 8006362:	078e      	lsls	r6, r1, #30
 8006364:	d430      	bmi.n	80063c8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006366:	07ca      	lsls	r2, r1, #31
 8006368:	d443      	bmi.n	80063f2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800636a:	4a3f      	ldr	r2, [pc, #252]	; (8006468 <HAL_RCC_ClockConfig+0x124>)
 800636c:	6813      	ldr	r3, [r2, #0]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	42ab      	cmp	r3, r5
 8006374:	d865      	bhi.n	8006442 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006376:	6822      	ldr	r2, [r4, #0]
 8006378:	4d3c      	ldr	r5, [pc, #240]	; (800646c <HAL_RCC_ClockConfig+0x128>)
 800637a:	f012 0f04 	tst.w	r2, #4
 800637e:	d16c      	bne.n	800645a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006380:	0713      	lsls	r3, r2, #28
 8006382:	d506      	bpl.n	8006392 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006384:	686b      	ldr	r3, [r5, #4]
 8006386:	6922      	ldr	r2, [r4, #16]
 8006388:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800638c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006390:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006392:	f7ff ffb1 	bl	80062f8 <HAL_RCC_GetSysClockFreq>
 8006396:	686b      	ldr	r3, [r5, #4]
 8006398:	4a35      	ldr	r2, [pc, #212]	; (8006470 <HAL_RCC_ClockConfig+0x12c>)
 800639a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800639e:	5cd3      	ldrb	r3, [r2, r3]
 80063a0:	40d8      	lsrs	r0, r3
 80063a2:	4b34      	ldr	r3, [pc, #208]	; (8006474 <HAL_RCC_ClockConfig+0x130>)
 80063a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80063a6:	4b34      	ldr	r3, [pc, #208]	; (8006478 <HAL_RCC_ClockConfig+0x134>)
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	f7fc ffe7 	bl	800337c <HAL_InitTick>
  return HAL_OK;
 80063ae:	2000      	movs	r0, #0
 80063b0:	e7ce      	b.n	8006350 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b2:	6813      	ldr	r3, [r2, #0]
 80063b4:	f023 0307 	bic.w	r3, r3, #7
 80063b8:	430b      	orrs	r3, r1
 80063ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063bc:	6813      	ldr	r3, [r2, #0]
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	428b      	cmp	r3, r1
 80063c4:	d1c3      	bne.n	800634e <HAL_RCC_ClockConfig+0xa>
 80063c6:	e7cb      	b.n	8006360 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c8:	4b28      	ldr	r3, [pc, #160]	; (800646c <HAL_RCC_ClockConfig+0x128>)
 80063ca:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063ce:	bf1e      	ittt	ne
 80063d0:	685a      	ldrne	r2, [r3, #4]
 80063d2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80063d6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063d8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063da:	bf42      	ittt	mi
 80063dc:	685a      	ldrmi	r2, [r3, #4]
 80063de:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80063e2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	68a0      	ldr	r0, [r4, #8]
 80063e8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80063ec:	4302      	orrs	r2, r0
 80063ee:	605a      	str	r2, [r3, #4]
 80063f0:	e7b9      	b.n	8006366 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063f2:	6862      	ldr	r2, [r4, #4]
 80063f4:	4e1d      	ldr	r6, [pc, #116]	; (800646c <HAL_RCC_ClockConfig+0x128>)
 80063f6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063f8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063fa:	d11a      	bne.n	8006432 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006400:	d0a5      	beq.n	800634e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006402:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006404:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006408:	f023 0303 	bic.w	r3, r3, #3
 800640c:	4313      	orrs	r3, r2
 800640e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8006410:	f7fe fb22 	bl	8004a58 <HAL_GetTick>
 8006414:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006416:	6873      	ldr	r3, [r6, #4]
 8006418:	6862      	ldr	r2, [r4, #4]
 800641a:	f003 030c 	and.w	r3, r3, #12
 800641e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006422:	d0a2      	beq.n	800636a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006424:	f7fe fb18 	bl	8004a58 <HAL_GetTick>
 8006428:	1bc0      	subs	r0, r0, r7
 800642a:	4540      	cmp	r0, r8
 800642c:	d9f3      	bls.n	8006416 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800642e:	2003      	movs	r0, #3
 8006430:	e78e      	b.n	8006350 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006432:	2a02      	cmp	r2, #2
 8006434:	d102      	bne.n	800643c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006436:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800643a:	e7e1      	b.n	8006400 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800643c:	f013 0f02 	tst.w	r3, #2
 8006440:	e7de      	b.n	8006400 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006442:	6813      	ldr	r3, [r2, #0]
 8006444:	f023 0307 	bic.w	r3, r3, #7
 8006448:	432b      	orrs	r3, r5
 800644a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800644c:	6813      	ldr	r3, [r2, #0]
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	42ab      	cmp	r3, r5
 8006454:	f47f af7b 	bne.w	800634e <HAL_RCC_ClockConfig+0xa>
 8006458:	e78d      	b.n	8006376 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800645a:	686b      	ldr	r3, [r5, #4]
 800645c:	68e1      	ldr	r1, [r4, #12]
 800645e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006462:	430b      	orrs	r3, r1
 8006464:	606b      	str	r3, [r5, #4]
 8006466:	e78b      	b.n	8006380 <HAL_RCC_ClockConfig+0x3c>
 8006468:	40022000 	.word	0x40022000
 800646c:	40021000 	.word	0x40021000
 8006470:	0800b4f9 	.word	0x0800b4f9
 8006474:	20000000 	.word	0x20000000
 8006478:	20000008 	.word	0x20000008

0800647c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800647c:	4b04      	ldr	r3, [pc, #16]	; (8006490 <HAL_RCC_GetPCLK1Freq+0x14>)
 800647e:	4a05      	ldr	r2, [pc, #20]	; (8006494 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006486:	5cd3      	ldrb	r3, [r2, r3]
 8006488:	4a03      	ldr	r2, [pc, #12]	; (8006498 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800648a:	6810      	ldr	r0, [r2, #0]
}
 800648c:	40d8      	lsrs	r0, r3
 800648e:	4770      	bx	lr
 8006490:	40021000 	.word	0x40021000
 8006494:	0800b509 	.word	0x0800b509
 8006498:	20000000 	.word	0x20000000

0800649c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800649c:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800649e:	4a05      	ldr	r2, [pc, #20]	; (80064b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80064a6:	5cd3      	ldrb	r3, [r2, r3]
 80064a8:	4a03      	ldr	r2, [pc, #12]	; (80064b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80064aa:	6810      	ldr	r0, [r2, #0]
}
 80064ac:	40d8      	lsrs	r0, r3
 80064ae:	4770      	bx	lr
 80064b0:	40021000 	.word	0x40021000
 80064b4:	0800b509 	.word	0x0800b509
 80064b8:	20000000 	.word	0x20000000

080064bc <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064bc:	230f      	movs	r3, #15
 80064be:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <HAL_RCC_GetClockConfig+0x34>)
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	f002 0203 	and.w	r2, r2, #3
 80064c8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80064d0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80064d8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	08db      	lsrs	r3, r3, #3
 80064de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064e2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064e4:	4b03      	ldr	r3, [pc, #12]	; (80064f4 <HAL_RCC_GetClockConfig+0x38>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	600b      	str	r3, [r1, #0]
}
 80064ee:	4770      	bx	lr
 80064f0:	40021000 	.word	0x40021000
 80064f4:	40022000 	.word	0x40022000

080064f8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80064f8:	6803      	ldr	r3, [r0, #0]
{
 80064fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80064fe:	07d9      	lsls	r1, r3, #31
{
 8006500:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006502:	d521      	bpl.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006504:	4c36      	ldr	r4, [pc, #216]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006506:	69e3      	ldr	r3, [r4, #28]
 8006508:	00da      	lsls	r2, r3, #3
 800650a:	d433      	bmi.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800650c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800650e:	69e3      	ldr	r3, [r4, #28]
 8006510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006514:	61e3      	str	r3, [r4, #28]
 8006516:	69e3      	ldr	r3, [r4, #28]
 8006518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006520:	4f30      	ldr	r7, [pc, #192]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	05db      	lsls	r3, r3, #23
 8006526:	d527      	bpl.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006528:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800652a:	686a      	ldr	r2, [r5, #4]
 800652c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006530:	d136      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006532:	6a23      	ldr	r3, [r4, #32]
 8006534:	686a      	ldr	r2, [r5, #4]
 8006536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800653a:	4313      	orrs	r3, r2
 800653c:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800653e:	b11e      	cbz	r6, 8006548 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006540:	69e3      	ldr	r3, [r4, #28]
 8006542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006546:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006548:	6828      	ldr	r0, [r5, #0]
 800654a:	0783      	lsls	r3, r0, #30
 800654c:	d506      	bpl.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800654e:	4924      	ldr	r1, [pc, #144]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006550:	68ab      	ldr	r3, [r5, #8]
 8006552:	684a      	ldr	r2, [r1, #4]
 8006554:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006558:	431a      	orrs	r2, r3
 800655a:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800655c:	f010 0010 	ands.w	r0, r0, #16
 8006560:	d01b      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006562:	4a1f      	ldr	r2, [pc, #124]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006564:	68e9      	ldr	r1, [r5, #12]
 8006566:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006568:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800656a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800656e:	430b      	orrs	r3, r1
 8006570:	6053      	str	r3, [r2, #4]
 8006572:	e012      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 8006574:	2600      	movs	r6, #0
 8006576:	e7d3      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800657e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8006580:	f7fe fa6a 	bl	8004a58 <HAL_GetTick>
 8006584:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	05d8      	lsls	r0, r3, #23
 800658a:	d4cd      	bmi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800658c:	f7fe fa64 	bl	8004a58 <HAL_GetTick>
 8006590:	eba0 0008 	sub.w	r0, r0, r8
 8006594:	2864      	cmp	r0, #100	; 0x64
 8006596:	d9f6      	bls.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 8006598:	2003      	movs	r0, #3
}
 800659a:	b002      	add	sp, #8
 800659c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065a0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d0c4      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80065a8:	2001      	movs	r0, #1
 80065aa:	4a0f      	ldr	r2, [pc, #60]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065ac:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80065ae:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065b2:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065b8:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 80065bc:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80065be:	07d9      	lsls	r1, r3, #31
 80065c0:	d5b7      	bpl.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80065c2:	f7fe fa49 	bl	8004a58 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80065ca:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065cc:	6a23      	ldr	r3, [r4, #32]
 80065ce:	079a      	lsls	r2, r3, #30
 80065d0:	d4af      	bmi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065d2:	f7fe fa41 	bl	8004a58 <HAL_GetTick>
 80065d6:	1bc0      	subs	r0, r0, r7
 80065d8:	4540      	cmp	r0, r8
 80065da:	d9f7      	bls.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80065dc:	e7dc      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80065de:	bf00      	nop
 80065e0:	40021000 	.word	0x40021000
 80065e4:	40007000 	.word	0x40007000
 80065e8:	42420000 	.word	0x42420000

080065ec <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80065ec:	2802      	cmp	r0, #2
{
 80065ee:	b508      	push	{r3, lr}
  switch (PeriphClk)
 80065f0:	d044      	beq.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80065f2:	2810      	cmp	r0, #16
 80065f4:	d003      	beq.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 80065f6:	2801      	cmp	r0, #1
 80065f8:	d022      	beq.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 80065fa:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 80065fc:	e034      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 80065fe:	4b25      	ldr	r3, [pc, #148]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006600:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006602:	6818      	ldr	r0, [r3, #0]
 8006604:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8006608:	d02e      	beq.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800660a:	f3c2 4183 	ubfx	r1, r2, #18, #4
 800660e:	4822      	ldr	r0, [pc, #136]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006610:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006612:	bf48      	it	mi
 8006614:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006616:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006618:	bf41      	itttt	mi
 800661a:	4920      	ldrmi	r1, [pc, #128]	; (800669c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800661c:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8006620:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006622:	4a1f      	ldrmi	r2, [pc, #124]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006624:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006626:	bf4c      	ite	mi
 8006628:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800662c:	4a1d      	ldrpl	r2, [pc, #116]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800662e:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006630:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006634:	d418      	bmi.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 8006636:	2303      	movs	r3, #3
 8006638:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800663a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800663e:	e013      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006640:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8006644:	4a13      	ldr	r2, [pc, #76]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006646:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006648:	4019      	ands	r1, r3
 800664a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800664e:	d01e      	beq.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006658:	d107      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 800665a:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800665e:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8006660:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8006664:	bf18      	it	ne
 8006666:	4618      	movne	r0, r3
}
 8006668:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800666a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800666e:	d1c4      	bne.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8006670:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8006672:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006676:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800667a:	e7f3      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800667c:	f7ff ff0e 	bl	800649c <HAL_RCC_GetPCLK2Freq>
 8006680:	4b04      	ldr	r3, [pc, #16]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8006688:	3301      	adds	r3, #1
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	e7d5      	b.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 800668e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006692:	e7e9      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006694:	40021000 	.word	0x40021000
 8006698:	0800b643 	.word	0x0800b643
 800669c:	0800b653 	.word	0x0800b653
 80066a0:	007a1200 	.word	0x007a1200
 80066a4:	003d0900 	.word	0x003d0900

080066a8 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80066a8:	6803      	ldr	r3, [r0, #0]
{
 80066aa:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80066ac:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80066ae:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80066b0:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 80066b2:	b295      	uxth	r5, r2
 80066b4:	b28c      	uxth	r4, r1
 80066b6:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80066b8:	bf17      	itett	ne
 80066ba:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80066bc:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80066be:	b280      	uxthne	r0, r0
 80066c0:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 80066c4:	bf08      	it	eq
 80066c6:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 80066ca:	bd30      	pop	{r4, r5, pc}

080066cc <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80066cc:	6803      	ldr	r3, [r0, #0]
 80066ce:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 80066d2:	b29b      	uxth	r3, r3
}
 80066d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80066d8:	4770      	bx	lr

080066da <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 80066da:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80066dc:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80066de:	f000 000f 	and.w	r0, r0, #15
 80066e2:	fb02 0003 	mla	r0, r2, r3, r0
}
 80066e6:	b2c0      	uxtb	r0, r0
 80066e8:	4770      	bx	lr

080066ea <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80066ea:	b530      	push	{r4, r5, lr}
  year = 2000U + nYear;

  if (nMonth < 3U)
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80066ec:	2517      	movs	r5, #23
 80066ee:	2309      	movs	r3, #9
 80066f0:	434d      	muls	r5, r1
  if (nMonth < 3U)
 80066f2:	2902      	cmp	r1, #2
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80066f4:	fbb5 f5f3 	udiv	r5, r5, r3
  year = 2000U + nYear;
 80066f8:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
  if (nMonth < 3U)
 80066fc:	d817      	bhi.n	800672e <RTC_WeekDayNum+0x44>
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80066fe:	f200 73cf 	addw	r3, r0, #1999	; 0x7cf
 8006702:	1d10      	adds	r0, r2, #4
 8006704:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006708:	fbb3 f2f2 	udiv	r2, r3, r2
 800670c:	4420      	add	r0, r4
 800670e:	4428      	add	r0, r5
 8006710:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 8006714:	4410      	add	r0, r2
 8006716:	2264      	movs	r2, #100	; 0x64
 8006718:	fbb3 f3f2 	udiv	r3, r3, r2
 800671c:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800671e:	2307      	movs	r3, #7
 8006720:	fbb0 f3f3 	udiv	r3, r0, r3
 8006724:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006728:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 800672a:	b2c0      	uxtb	r0, r0
 800672c:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800672e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006732:	fbb4 f3f3 	udiv	r3, r4, r3
 8006736:	1c90      	adds	r0, r2, #2
 8006738:	4420      	add	r0, r4
 800673a:	4428      	add	r0, r5
 800673c:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8006740:	4418      	add	r0, r3
 8006742:	2364      	movs	r3, #100	; 0x64
 8006744:	fbb4 f4f3 	udiv	r4, r4, r3
 8006748:	1b00      	subs	r0, r0, r4
 800674a:	e7e8      	b.n	800671e <RTC_WeekDayNum+0x34>

0800674c <RTC_EnterInitMode>:
{
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8006750:	f7fe f982 	bl	8004a58 <HAL_GetTick>
 8006754:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	0692      	lsls	r2, r2, #26
 800675c:	d505      	bpl.n	800676a <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 800675e:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	f042 0210 	orr.w	r2, r2, #16
 8006766:	605a      	str	r2, [r3, #4]
}
 8006768:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800676a:	f7fe f975 	bl	8004a58 <HAL_GetTick>
 800676e:	1b40      	subs	r0, r0, r5
 8006770:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006774:	d9ef      	bls.n	8006756 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8006776:	2003      	movs	r0, #3
 8006778:	e7f6      	b.n	8006768 <RTC_EnterInitMode+0x1c>

0800677a <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800677a:	6802      	ldr	r2, [r0, #0]
{
 800677c:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800677e:	6853      	ldr	r3, [r2, #4]
{
 8006780:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006782:	f023 0310 	bic.w	r3, r3, #16
 8006786:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8006788:	f7fe f966 	bl	8004a58 <HAL_GetTick>
 800678c:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	069b      	lsls	r3, r3, #26
 8006794:	d501      	bpl.n	800679a <RTC_ExitInitMode+0x20>
  return HAL_OK;
 8006796:	2000      	movs	r0, #0
}
 8006798:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800679a:	f7fe f95d 	bl	8004a58 <HAL_GetTick>
 800679e:	1b40      	subs	r0, r0, r5
 80067a0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80067a4:	d9f3      	bls.n	800678e <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80067a6:	2003      	movs	r0, #3
 80067a8:	e7f6      	b.n	8006798 <RTC_ExitInitMode+0x1e>

080067aa <RTC_WriteTimeCounter>:
{
 80067aa:	b538      	push	{r3, r4, r5, lr}
 80067ac:	4605      	mov	r5, r0
 80067ae:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80067b0:	f7ff ffcc 	bl	800674c <RTC_EnterInitMode>
 80067b4:	b958      	cbnz	r0, 80067ce <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80067b6:	682b      	ldr	r3, [r5, #0]
 80067b8:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80067ba:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80067bc:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80067be:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80067c0:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80067c2:	f7ff ffda 	bl	800677a <RTC_ExitInitMode>
    status = HAL_ERROR;
 80067c6:	3800      	subs	r0, #0
 80067c8:	bf18      	it	ne
 80067ca:	2001      	movne	r0, #1
}
 80067cc:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80067ce:	2001      	movs	r0, #1
 80067d0:	e7fc      	b.n	80067cc <RTC_WriteTimeCounter+0x22>

080067d2 <RTC_WriteAlarmCounter>:
{
 80067d2:	b538      	push	{r3, r4, r5, lr}
 80067d4:	4605      	mov	r5, r0
 80067d6:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80067d8:	f7ff ffb8 	bl	800674c <RTC_EnterInitMode>
 80067dc:	b958      	cbnz	r0, 80067f6 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80067de:	682b      	ldr	r3, [r5, #0]
 80067e0:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80067e2:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80067e4:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80067e6:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80067e8:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80067ea:	f7ff ffc6 	bl	800677a <RTC_ExitInitMode>
    status = HAL_ERROR;
 80067ee:	3800      	subs	r0, #0
 80067f0:	bf18      	it	ne
 80067f2:	2001      	movne	r0, #1
}
 80067f4:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80067f6:	2001      	movs	r0, #1
 80067f8:	e7fc      	b.n	80067f4 <RTC_WriteAlarmCounter+0x22>

080067fa <HAL_RTC_SetTime>:
{
 80067fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 80067fc:	4604      	mov	r4, r0
 80067fe:	b1e0      	cbz	r0, 800683a <HAL_RTC_SetTime+0x40>
 8006800:	b1d9      	cbz	r1, 800683a <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8006802:	7c03      	ldrb	r3, [r0, #16]
 8006804:	2502      	movs	r5, #2
 8006806:	2b01      	cmp	r3, #1
 8006808:	d045      	beq.n	8006896 <HAL_RTC_SetTime+0x9c>
 800680a:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800680c:	7445      	strb	r5, [r0, #17]
  __HAL_LOCK(hrtc);
 800680e:	7403      	strb	r3, [r0, #16]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006810:	7808      	ldrb	r0, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006812:	784e      	ldrb	r6, [r1, #1]
                              ((uint32_t)sTime->Seconds));
 8006814:	788f      	ldrb	r7, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 8006816:	b992      	cbnz	r2, 800683e <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006818:	233c      	movs	r3, #60	; 0x3c
 800681a:	435e      	muls	r6, r3
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800681c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006820:	fb03 6600 	mla	r6, r3, r0, r6
 8006824:	443e      	add	r6, r7
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006826:	4631      	mov	r1, r6
 8006828:	4620      	mov	r0, r4
 800682a:	f7ff ffbe 	bl	80067aa <RTC_WriteTimeCounter>
 800682e:	4605      	mov	r5, r0
 8006830:	b1b8      	cbz	r0, 8006862 <HAL_RTC_SetTime+0x68>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006832:	2304      	movs	r3, #4
 8006834:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8006836:	2300      	movs	r3, #0
 8006838:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 800683a:	2501      	movs	r5, #1
 800683c:	e02b      	b.n	8006896 <HAL_RTC_SetTime+0x9c>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800683e:	f7ff ff4c 	bl	80066da <RTC_Bcd2ToByte>
 8006842:	4605      	mov	r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006844:	4630      	mov	r0, r6
 8006846:	f7ff ff48 	bl	80066da <RTC_Bcd2ToByte>
 800684a:	233c      	movs	r3, #60	; 0x3c
 800684c:	fb03 f100 	mul.w	r1, r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006850:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006854:	4638      	mov	r0, r7
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006856:	fb03 1105 	mla	r1, r3, r5, r1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800685a:	f7ff ff3e 	bl	80066da <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800685e:	1846      	adds	r6, r0, r1
 8006860:	e7e1      	b.n	8006826 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006862:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006864:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006866:	6853      	ldr	r3, [r2, #4]
 8006868:	f023 0305 	bic.w	r3, r3, #5
 800686c:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800686e:	f7ff ff2d 	bl	80066cc <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 8006872:	4286      	cmp	r6, r0
 8006874:	d90b      	bls.n	800688e <HAL_RTC_SetTime+0x94>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006876:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 800687a:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800687e:	4620      	mov	r0, r4
 8006880:	f7ff ffa7 	bl	80067d2 <RTC_WriteAlarmCounter>
 8006884:	b118      	cbz	r0, 800688e <HAL_RTC_SetTime+0x94>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006886:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8006888:	7425      	strb	r5, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 800688a:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 800688c:	e7d5      	b.n	800683a <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 800688e:	2301      	movs	r3, #1
 8006890:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8006892:	2300      	movs	r3, #0
 8006894:	7423      	strb	r3, [r4, #16]
}
 8006896:	4628      	mov	r0, r5
 8006898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800689c <HAL_RTC_SetDate>:
{
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 80068a0:	4604      	mov	r4, r0
 80068a2:	b348      	cbz	r0, 80068f8 <HAL_RTC_SetDate+0x5c>
 80068a4:	b341      	cbz	r1, 80068f8 <HAL_RTC_SetDate+0x5c>
  __HAL_LOCK(hrtc);
 80068a6:	7c03      	ldrb	r3, [r0, #16]
 80068a8:	2002      	movs	r0, #2
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d047      	beq.n	800693e <HAL_RTC_SetDate+0xa2>
 80068ae:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80068b0:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 80068b2:	7423      	strb	r3, [r4, #16]
  if (Format == RTC_FORMAT_BIN)
 80068b4:	78c8      	ldrb	r0, [r1, #3]
 80068b6:	bb0a      	cbnz	r2, 80068fc <HAL_RTC_SetDate+0x60>
    hrtc->DateToUpdate.Year  = sDate->Year;
 80068b8:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80068ba:	784b      	ldrb	r3, [r1, #1]
 80068bc:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80068be:	788a      	ldrb	r2, [r1, #2]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80068c0:	7b61      	ldrb	r1, [r4, #13]
 80068c2:	7be0      	ldrb	r0, [r4, #15]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80068c4:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80068c6:	f7ff ff10 	bl	80066ea <RTC_WeekDayNum>
 80068ca:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80068cc:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 80068ce:	4620      	mov	r0, r4
 80068d0:	f7ff feea 	bl	80066a8 <RTC_ReadTimeCounter>
  if (hours > 24U)
 80068d4:	4b1a      	ldr	r3, [pc, #104]	; (8006940 <HAL_RTC_SetDate+0xa4>)
 80068d6:	4298      	cmp	r0, r3
 80068d8:	d92d      	bls.n	8006936 <HAL_RTC_SetDate+0x9a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80068da:	4d1a      	ldr	r5, [pc, #104]	; (8006944 <HAL_RTC_SetDate+0xa8>)
 80068dc:	fbb0 f2f5 	udiv	r2, r0, r5
 80068e0:	fb05 0512 	mls	r5, r5, r2, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80068e4:	4620      	mov	r0, r4
 80068e6:	4629      	mov	r1, r5
 80068e8:	f7ff ff5f 	bl	80067aa <RTC_WriteTimeCounter>
 80068ec:	4606      	mov	r6, r0
 80068ee:	b188      	cbz	r0, 8006914 <HAL_RTC_SetDate+0x78>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80068f0:	2304      	movs	r3, #4
 80068f2:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 80068f4:	2300      	movs	r3, #0
 80068f6:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 80068f8:	2001      	movs	r0, #1
 80068fa:	e020      	b.n	800693e <HAL_RTC_SetDate+0xa2>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80068fc:	f7ff feed 	bl	80066da <RTC_Bcd2ToByte>
 8006900:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006902:	7848      	ldrb	r0, [r1, #1]
 8006904:	f7ff fee9 	bl	80066da <RTC_Bcd2ToByte>
 8006908:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800690a:	7888      	ldrb	r0, [r1, #2]
 800690c:	f7ff fee5 	bl	80066da <RTC_Bcd2ToByte>
 8006910:	4602      	mov	r2, r0
 8006912:	e7d5      	b.n	80068c0 <HAL_RTC_SetDate+0x24>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006914:	4620      	mov	r0, r4
 8006916:	f7ff fed9 	bl	80066cc <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 800691a:	4285      	cmp	r5, r0
 800691c:	d90b      	bls.n	8006936 <HAL_RTC_SetDate+0x9a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800691e:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8006922:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8006926:	4620      	mov	r0, r4
 8006928:	f7ff ff53 	bl	80067d2 <RTC_WriteAlarmCounter>
 800692c:	b118      	cbz	r0, 8006936 <HAL_RTC_SetDate+0x9a>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800692e:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8006930:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006932:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8006934:	e7e0      	b.n	80068f8 <HAL_RTC_SetDate+0x5c>
  hrtc->State = HAL_RTC_STATE_READY ;
 8006936:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8006938:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 800693a:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 800693c:	7420      	strb	r0, [r4, #16]
}
 800693e:	bd70      	pop	{r4, r5, r6, pc}
 8006940:	00015f8f 	.word	0x00015f8f
 8006944:	00015180 	.word	0x00015180

08006948 <HAL_RTC_WaitForSynchro>:
{
 8006948:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 800694a:	4604      	mov	r4, r0
 800694c:	b1a8      	cbz	r0, 800697a <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800694e:	6802      	ldr	r2, [r0, #0]
 8006950:	6853      	ldr	r3, [r2, #4]
 8006952:	f023 0308 	bic.w	r3, r3, #8
 8006956:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8006958:	f7fe f87e 	bl	8004a58 <HAL_GetTick>
 800695c:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	071b      	lsls	r3, r3, #28
 8006964:	d501      	bpl.n	800696a <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8006966:	2000      	movs	r0, #0
}
 8006968:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800696a:	f7fe f875 	bl	8004a58 <HAL_GetTick>
 800696e:	1b40      	subs	r0, r0, r5
 8006970:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006974:	d9f3      	bls.n	800695e <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8006976:	2003      	movs	r0, #3
 8006978:	e7f6      	b.n	8006968 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 800697a:	2001      	movs	r0, #1
 800697c:	e7f4      	b.n	8006968 <HAL_RTC_WaitForSynchro+0x20>
	...

08006980 <HAL_RTC_Init>:
{
 8006980:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8006982:	4604      	mov	r4, r0
 8006984:	b170      	cbz	r0, 80069a4 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006986:	7c43      	ldrb	r3, [r0, #17]
 8006988:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800698c:	b913      	cbnz	r3, 8006994 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800698e:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8006990:	f7fc fb7a 	bl	8003088 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006994:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006996:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006998:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800699a:	f7ff ffd5 	bl	8006948 <HAL_RTC_WaitForSynchro>
 800699e:	b118      	cbz	r0, 80069a8 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80069a0:	2304      	movs	r3, #4
 80069a2:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80069a4:	2001      	movs	r0, #1
 80069a6:	e02f      	b.n	8006a08 <HAL_RTC_Init+0x88>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80069a8:	4620      	mov	r0, r4
 80069aa:	f7ff fecf 	bl	800674c <RTC_EnterInitMode>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d1f6      	bne.n	80069a0 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80069b2:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80069b4:	68a1      	ldr	r1, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80069b6:	6853      	ldr	r3, [r2, #4]
 80069b8:	f023 0307 	bic.w	r3, r3, #7
 80069bc:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80069be:	4a13      	ldr	r2, [pc, #76]	; (8006a0c <HAL_RTC_Init+0x8c>)
 80069c0:	b119      	cbz	r1, 80069ca <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80069c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80069c4:	f023 0301 	bic.w	r3, r3, #1
 80069c8:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80069ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80069cc:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80069d0:	430b      	orrs	r3, r1
 80069d2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80069d4:	6860      	ldr	r0, [r4, #4]
 80069d6:	1c43      	adds	r3, r0, #1
 80069d8:	d105      	bne.n	80069e6 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80069da:	2001      	movs	r0, #1
 80069dc:	f7ff fe06 	bl	80065ec <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d0dd      	beq.n	80069a0 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 80069e4:	3801      	subs	r0, #1
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	f3c0 4203 	ubfx	r2, r0, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80069ec:	b280      	uxth	r0, r0
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80069ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80069f0:	60d8      	str	r0, [r3, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80069f2:	4620      	mov	r0, r4
 80069f4:	f7ff fec1 	bl	800677a <RTC_ExitInitMode>
 80069f8:	2301      	movs	r3, #1
 80069fa:	b110      	cbz	r0, 8006a02 <HAL_RTC_Init+0x82>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80069fc:	2204      	movs	r2, #4
 80069fe:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8006a00:	e7d0      	b.n	80069a4 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006a02:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006a04:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8006a06:	7463      	strb	r3, [r4, #17]
}
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	bf00      	nop
 8006a0c:	40006c00 	.word	0x40006c00

08006a10 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a10:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a12:	6a02      	ldr	r2, [r0, #32]
{
 8006a14:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a16:	f022 0201 	bic.w	r2, r2, #1
 8006a1a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a1c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a1e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a22:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006a26:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a28:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006a2a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8006a2e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a30:	4d0a      	ldr	r5, [pc, #40]	; (8006a5c <TIM_OC1_SetConfig+0x4c>)
 8006a32:	42a8      	cmp	r0, r5
 8006a34:	d10b      	bne.n	8006a4e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a36:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a38:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006a3c:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a3e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a42:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006a46:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a48:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a4c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a50:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a52:	684a      	ldr	r2, [r1, #4]
 8006a54:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a56:	6203      	str	r3, [r0, #32]
}
 8006a58:	bd70      	pop	{r4, r5, r6, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40012c00 	.word	0x40012c00

08006a60 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a60:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a62:	6a02      	ldr	r2, [r0, #32]
{
 8006a64:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a6a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a6c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a6e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a72:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006a76:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a78:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006a7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a7e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a82:	4d0b      	ldr	r5, [pc, #44]	; (8006ab0 <TIM_OC3_SetConfig+0x50>)
 8006a84:	42a8      	cmp	r0, r5
 8006a86:	d10d      	bne.n	8006aa4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a88:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a8e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a92:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a96:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006a9a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aa0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aa6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aa8:	684a      	ldr	r2, [r1, #4]
 8006aaa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aac:	6203      	str	r3, [r0, #32]
}
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	40012c00 	.word	0x40012c00

08006ab4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab4:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ab6:	6a02      	ldr	r2, [r0, #32]
{
 8006ab8:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006abe:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ac2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ac4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ac6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ace:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8006ad0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ad4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad8:	4d06      	ldr	r5, [pc, #24]	; (8006af4 <TIM_OC4_SetConfig+0x40>)
 8006ada:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006adc:	bf02      	ittt	eq
 8006ade:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ae0:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ae4:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006aec:	684a      	ldr	r2, [r1, #4]
 8006aee:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af0:	6203      	str	r3, [r0, #32]
}
 8006af2:	bd30      	pop	{r4, r5, pc}
 8006af4:	40012c00 	.word	0x40012c00

08006af8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006af8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d120      	bne.n	8006b42 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006b00:	2302      	movs	r3, #2
 8006b02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b06:	6803      	ldr	r3, [r0, #0]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	f042 0201 	orr.w	r2, r2, #1
 8006b0e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b10:	4a0d      	ldr	r2, [pc, #52]	; (8006b48 <HAL_TIM_Base_Start_IT+0x50>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00a      	beq.n	8006b2c <HAL_TIM_Base_Start_IT+0x34>
 8006b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1a:	d007      	beq.n	8006b2c <HAL_TIM_Base_Start_IT+0x34>
 8006b1c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <HAL_TIM_Base_Start_IT+0x34>
 8006b24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d104      	bne.n	8006b36 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b2c:	689a      	ldr	r2, [r3, #8]
 8006b2e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b32:	2a06      	cmp	r2, #6
 8006b34:	d003      	beq.n	8006b3e <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006b3e:	2000      	movs	r0, #0
}
 8006b40:	4770      	bx	lr
    return HAL_ERROR;
 8006b42:	2001      	movs	r0, #1
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40012c00 	.word	0x40012c00

08006b4c <HAL_TIM_PWM_MspInit>:
 8006b4c:	4770      	bx	lr

08006b4e <HAL_TIM_OC_DelayElapsedCallback>:
 8006b4e:	4770      	bx	lr

08006b50 <HAL_TIM_IC_CaptureCallback>:
 8006b50:	4770      	bx	lr

08006b52 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006b52:	4770      	bx	lr

08006b54 <HAL_TIM_TriggerCallback>:
 8006b54:	4770      	bx	lr

08006b56 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b56:	6803      	ldr	r3, [r0, #0]
{
 8006b58:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b5a:	691a      	ldr	r2, [r3, #16]
{
 8006b5c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b5e:	0791      	lsls	r1, r2, #30
 8006b60:	d50e      	bpl.n	8006b80 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	0792      	lsls	r2, r2, #30
 8006b66:	d50b      	bpl.n	8006b80 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b68:	f06f 0202 	mvn.w	r2, #2
 8006b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b6e:	2201      	movs	r2, #1
 8006b70:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	079b      	lsls	r3, r3, #30
 8006b76:	d077      	beq.n	8006c68 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8006b78:	f7ff ffea 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	691a      	ldr	r2, [r3, #16]
 8006b84:	0750      	lsls	r0, r2, #29
 8006b86:	d510      	bpl.n	8006baa <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	0751      	lsls	r1, r2, #29
 8006b8c:	d50d      	bpl.n	8006baa <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b8e:	f06f 0204 	mvn.w	r2, #4
 8006b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b94:	2202      	movs	r2, #2
 8006b96:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b98:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b9c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006ba0:	d068      	beq.n	8006c74 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8006ba2:	f7ff ffd5 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	0712      	lsls	r2, r2, #28
 8006bb0:	d50f      	bpl.n	8006bd2 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	0710      	lsls	r0, r2, #28
 8006bb6:	d50c      	bpl.n	8006bd2 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bb8:	f06f 0208 	mvn.w	r2, #8
 8006bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bbe:	2204      	movs	r2, #4
 8006bc0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bc2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bc6:	0799      	lsls	r1, r3, #30
 8006bc8:	d05a      	beq.n	8006c80 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006bca:	f7ff ffc1 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	06d2      	lsls	r2, r2, #27
 8006bd8:	d510      	bpl.n	8006bfc <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	06d0      	lsls	r0, r2, #27
 8006bde:	d50d      	bpl.n	8006bfc <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006be0:	f06f 0210 	mvn.w	r2, #16
 8006be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006be6:	2208      	movs	r2, #8
 8006be8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bea:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006bec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bee:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006bf2:	d04b      	beq.n	8006c8c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf4:	f7ff ffac 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	691a      	ldr	r2, [r3, #16]
 8006c00:	07d1      	lsls	r1, r2, #31
 8006c02:	d508      	bpl.n	8006c16 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	07d2      	lsls	r2, r2, #31
 8006c08:	d505      	bpl.n	8006c16 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c0a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c0e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c10:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c12:	f7fb ff69 	bl	8002ae8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	691a      	ldr	r2, [r3, #16]
 8006c1a:	0610      	lsls	r0, r2, #24
 8006c1c:	d508      	bpl.n	8006c30 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	0611      	lsls	r1, r2, #24
 8006c22:	d505      	bpl.n	8006c30 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8006c28:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c2a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006c2c:	f000 fab9 	bl	80071a2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	691a      	ldr	r2, [r3, #16]
 8006c34:	0652      	lsls	r2, r2, #25
 8006c36:	d508      	bpl.n	8006c4a <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	0650      	lsls	r0, r2, #25
 8006c3c:	d505      	bpl.n	8006c4a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8006c42:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c44:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006c46:	f7ff ff85 	bl	8006b54 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	691a      	ldr	r2, [r3, #16]
 8006c4e:	0691      	lsls	r1, r2, #26
 8006c50:	d522      	bpl.n	8006c98 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	0692      	lsls	r2, r2, #26
 8006c56:	d51f      	bpl.n	8006c98 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c58:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006c5c:	4620      	mov	r0, r4
}
 8006c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006c64:	f000 ba9c 	b.w	80071a0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c68:	f7ff ff71 	bl	8006b4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f7ff ff70 	bl	8006b52 <HAL_TIM_PWM_PulseFinishedCallback>
 8006c72:	e783      	b.n	8006b7c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c74:	f7ff ff6b 	bl	8006b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f7ff ff6a 	bl	8006b52 <HAL_TIM_PWM_PulseFinishedCallback>
 8006c7e:	e792      	b.n	8006ba6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c80:	f7ff ff65 	bl	8006b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c84:	4620      	mov	r0, r4
 8006c86:	f7ff ff64 	bl	8006b52 <HAL_TIM_PWM_PulseFinishedCallback>
 8006c8a:	e7a0      	b.n	8006bce <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8c:	f7ff ff5f 	bl	8006b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c90:	4620      	mov	r0, r4
 8006c92:	f7ff ff5e 	bl	8006b52 <HAL_TIM_PWM_PulseFinishedCallback>
 8006c96:	e7af      	b.n	8006bf8 <HAL_TIM_IRQHandler+0xa2>
}
 8006c98:	bd10      	pop	{r4, pc}
	...

08006c9c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c9c:	4a1a      	ldr	r2, [pc, #104]	; (8006d08 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8006c9e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ca0:	4290      	cmp	r0, r2
 8006ca2:	d00a      	beq.n	8006cba <TIM_Base_SetConfig+0x1e>
 8006ca4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006ca8:	d007      	beq.n	8006cba <TIM_Base_SetConfig+0x1e>
 8006caa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006cae:	4290      	cmp	r0, r2
 8006cb0:	d003      	beq.n	8006cba <TIM_Base_SetConfig+0x1e>
 8006cb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cb6:	4290      	cmp	r0, r2
 8006cb8:	d115      	bne.n	8006ce6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8006cba:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006cc0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cc2:	4a11      	ldr	r2, [pc, #68]	; (8006d08 <TIM_Base_SetConfig+0x6c>)
 8006cc4:	4290      	cmp	r0, r2
 8006cc6:	d00a      	beq.n	8006cde <TIM_Base_SetConfig+0x42>
 8006cc8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006ccc:	d007      	beq.n	8006cde <TIM_Base_SetConfig+0x42>
 8006cce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006cd2:	4290      	cmp	r0, r2
 8006cd4:	d003      	beq.n	8006cde <TIM_Base_SetConfig+0x42>
 8006cd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cda:	4290      	cmp	r0, r2
 8006cdc:	d103      	bne.n	8006ce6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cde:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ce4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ce6:	694a      	ldr	r2, [r1, #20]
 8006ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006cee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cf0:	688b      	ldr	r3, [r1, #8]
 8006cf2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006cf4:	680b      	ldr	r3, [r1, #0]
 8006cf6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cf8:	4b03      	ldr	r3, [pc, #12]	; (8006d08 <TIM_Base_SetConfig+0x6c>)
 8006cfa:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8006cfc:	bf04      	itt	eq
 8006cfe:	690b      	ldreq	r3, [r1, #16]
 8006d00:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006d02:	2301      	movs	r3, #1
 8006d04:	6143      	str	r3, [r0, #20]
}
 8006d06:	4770      	bx	lr
 8006d08:	40012c00 	.word	0x40012c00

08006d0c <HAL_TIM_Base_Init>:
{
 8006d0c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006d0e:	4604      	mov	r4, r0
 8006d10:	b330      	cbz	r0, 8006d60 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006d12:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006d16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d1a:	b91b      	cbnz	r3, 8006d24 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006d1c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006d20:	f7fc f9d0 	bl	80030c4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006d24:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d26:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006d28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d2c:	1d21      	adds	r1, r4, #4
 8006d2e:	f7ff ffb5 	bl	8006c9c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d32:	2301      	movs	r3, #1
  return HAL_OK;
 8006d34:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d36:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d3a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006d3e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006d42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006d46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006d5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006d5e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006d60:	2001      	movs	r0, #1
 8006d62:	e7fc      	b.n	8006d5e <HAL_TIM_Base_Init+0x52>

08006d64 <HAL_TIM_PWM_Init>:
{
 8006d64:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006d66:	4604      	mov	r4, r0
 8006d68:	b330      	cbz	r0, 8006db8 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006d6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006d6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d72:	b91b      	cbnz	r3, 8006d7c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006d74:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006d78:	f7ff fee8 	bl	8006b4c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d7e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006d80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d84:	1d21      	adds	r1, r4, #4
 8006d86:	f7ff ff89 	bl	8006c9c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d8a:	2301      	movs	r3, #1
  return HAL_OK;
 8006d8c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d8e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006d96:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006d9a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006d9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006da2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006daa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006db2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006db6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006db8:	2001      	movs	r0, #1
 8006dba:	e7fc      	b.n	8006db6 <HAL_TIM_PWM_Init+0x52>

08006dbc <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8006dbc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dbe:	6a02      	ldr	r2, [r0, #32]
{
 8006dc0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dc2:	f022 0210 	bic.w	r2, r2, #16
 8006dc6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006dc8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006dca:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dcc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dce:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dd2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dd6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006dd8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ddc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006de0:	4d0b      	ldr	r5, [pc, #44]	; (8006e10 <TIM_OC2_SetConfig+0x54>)
 8006de2:	42a8      	cmp	r0, r5
 8006de4:	d10d      	bne.n	8006e02 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006de6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006df0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006df4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006df8:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dfe:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8006e02:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006e04:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006e06:	684a      	ldr	r2, [r1, #4]
 8006e08:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006e0a:	6203      	str	r3, [r0, #32]
}
 8006e0c:	bd70      	pop	{r4, r5, r6, pc}
 8006e0e:	bf00      	nop
 8006e10:	40012c00 	.word	0x40012c00

08006e14 <HAL_TIM_PWM_ConfigChannel>:
{
 8006e14:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8006e16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8006e1a:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d050      	beq.n	8006ec2 <HAL_TIM_PWM_ConfigChannel+0xae>
 8006e20:	2301      	movs	r3, #1
  switch (Channel)
 8006e22:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8006e24:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006e28:	d03b      	beq.n	8006ea2 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8006e2a:	d807      	bhi.n	8006e3c <HAL_TIM_PWM_ConfigChannel+0x28>
 8006e2c:	b1c2      	cbz	r2, 8006e60 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8006e2e:	2a04      	cmp	r2, #4
 8006e30:	d027      	beq.n	8006e82 <HAL_TIM_PWM_ConfigChannel+0x6e>
 8006e32:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8006e34:	2300      	movs	r3, #0
 8006e36:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8006e3c:	2a0c      	cmp	r2, #12
 8006e3e:	d1f8      	bne.n	8006e32 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e40:	6800      	ldr	r0, [r0, #0]
 8006e42:	f7ff fe37 	bl	8006ab4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e46:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e48:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e4e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e50:	69c3      	ldr	r3, [r0, #28]
 8006e52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e56:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e58:	69c3      	ldr	r3, [r0, #28]
 8006e5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006e5e:	e02e      	b.n	8006ebe <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e60:	6800      	ldr	r0, [r0, #0]
 8006e62:	f7ff fdd5 	bl	8006a10 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e66:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e68:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e6a:	f043 0308 	orr.w	r3, r3, #8
 8006e6e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e70:	6983      	ldr	r3, [r0, #24]
 8006e72:	f023 0304 	bic.w	r3, r3, #4
 8006e76:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e78:	6983      	ldr	r3, [r0, #24]
 8006e7a:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e7c:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006e7e:	2000      	movs	r0, #0
      break;
 8006e80:	e7d8      	b.n	8006e34 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e82:	6800      	ldr	r0, [r0, #0]
 8006e84:	f7ff ff9a 	bl	8006dbc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e88:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e8a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e90:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e92:	6983      	ldr	r3, [r0, #24]
 8006e94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e98:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e9a:	6983      	ldr	r3, [r0, #24]
 8006e9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006ea0:	e7ec      	b.n	8006e7c <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ea2:	6800      	ldr	r0, [r0, #0]
 8006ea4:	f7ff fddc 	bl	8006a60 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ea8:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006eaa:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006eac:	f043 0308 	orr.w	r3, r3, #8
 8006eb0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006eb2:	69c3      	ldr	r3, [r0, #28]
 8006eb4:	f023 0304 	bic.w	r3, r3, #4
 8006eb8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006eba:	69c3      	ldr	r3, [r0, #28]
 8006ebc:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ebe:	61c3      	str	r3, [r0, #28]
 8006ec0:	e7dd      	b.n	8006e7e <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 8006ec2:	2002      	movs	r0, #2
 8006ec4:	e7b9      	b.n	8006e3a <HAL_TIM_PWM_ConfigChannel+0x26>

08006ec6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ec6:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ec8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eca:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ecc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ed0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8006ed4:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed6:	6082      	str	r2, [r0, #8]
}
 8006ed8:	bd10      	pop	{r4, pc}

08006eda <HAL_TIM_ConfigClockSource>:
{
 8006eda:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006edc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8006ee0:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	f04f 0002 	mov.w	r0, #2
 8006ee8:	f000 808e 	beq.w	8007008 <HAL_TIM_ConfigClockSource+0x12e>
 8006eec:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006eee:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006ef2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8006ef4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006ef8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006efe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8006f02:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006f04:	680b      	ldr	r3, [r1, #0]
 8006f06:	2b60      	cmp	r3, #96	; 0x60
 8006f08:	d04f      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0xd0>
 8006f0a:	d832      	bhi.n	8006f72 <HAL_TIM_ConfigClockSource+0x98>
 8006f0c:	2b40      	cmp	r3, #64	; 0x40
 8006f0e:	d064      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x100>
 8006f10:	d816      	bhi.n	8006f40 <HAL_TIM_ConfigClockSource+0x66>
 8006f12:	2b20      	cmp	r3, #32
 8006f14:	d00d      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x58>
 8006f16:	d80a      	bhi.n	8006f2e <HAL_TIM_ConfigClockSource+0x54>
 8006f18:	f033 0110 	bics.w	r1, r3, #16
 8006f1c:	d009      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006f24:	2300      	movs	r3, #0
 8006f26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8006f2e:	2b30      	cmp	r3, #48	; 0x30
 8006f30:	d1f5      	bne.n	8006f1e <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8006f32:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	f043 0307 	orr.w	r3, r3, #7
 8006f3e:	e028      	b.n	8006f92 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8006f40:	2b50      	cmp	r3, #80	; 0x50
 8006f42:	d1ec      	bne.n	8006f1e <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8006f44:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006f46:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006f48:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f4a:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f4c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f50:	f023 0301 	bic.w	r3, r3, #1
 8006f54:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f56:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8006f58:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f5e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006f62:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006f64:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006f66:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f6c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8006f70:	e00f      	b.n	8006f92 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8006f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f76:	d00d      	beq.n	8006f94 <HAL_TIM_ConfigClockSource+0xba>
 8006f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f7c:	d00c      	beq.n	8006f98 <HAL_TIM_ConfigClockSource+0xbe>
 8006f7e:	2b70      	cmp	r3, #112	; 0x70
 8006f80:	d1cd      	bne.n	8006f1e <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8006f82:	68cb      	ldr	r3, [r1, #12]
 8006f84:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8006f88:	f7ff ff9d 	bl	8006ec6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f8c:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8006f92:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006f94:	2200      	movs	r2, #0
 8006f96:	e7c2      	b.n	8006f1e <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8006f98:	68cb      	ldr	r3, [r1, #12]
 8006f9a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8006f9e:	f7ff ff92 	bl	8006ec6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fa2:	6883      	ldr	r3, [r0, #8]
 8006fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fa8:	e7f3      	b.n	8006f92 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8006faa:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fac:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8006fae:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fb0:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8006fb4:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fb6:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fb8:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fbe:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fc2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fc6:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006fca:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006fcc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006fce:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fd4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8006fd8:	e7db      	b.n	8006f92 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8006fda:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006fdc:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006fde:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fe0:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fe2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fe6:	f023 0301 	bic.w	r3, r3, #1
 8006fea:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fec:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8006fee:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ff0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ff4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006ff8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006ffa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006ffc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007002:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007006:	e7c4      	b.n	8006f92 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8007008:	4602      	mov	r2, r0
 800700a:	e78e      	b.n	8006f2a <HAL_TIM_ConfigClockSource+0x50>

0800700c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800700c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800700e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007010:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007012:	f001 011f 	and.w	r1, r1, #31
 8007016:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8007018:	ea23 0304 	bic.w	r3, r3, r4
 800701c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800701e:	6a03      	ldr	r3, [r0, #32]
 8007020:	408a      	lsls	r2, r1
 8007022:	431a      	orrs	r2, r3
 8007024:	6202      	str	r2, [r0, #32]
}
 8007026:	bd10      	pop	{r4, pc}

08007028 <HAL_TIM_OC_Start>:
{
 8007028:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800702a:	b929      	cbnz	r1, 8007038 <HAL_TIM_OC_Start+0x10>
 800702c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007030:	2b01      	cmp	r3, #1
 8007032:	d021      	beq.n	8007078 <HAL_TIM_OC_Start+0x50>
    return HAL_ERROR;
 8007034:	2001      	movs	r0, #1
}
 8007036:	bd08      	pop	{r3, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007038:	2904      	cmp	r1, #4
 800703a:	d107      	bne.n	800704c <HAL_TIM_OC_Start+0x24>
 800703c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8007040:	2b01      	cmp	r3, #1
 8007042:	d1f7      	bne.n	8007034 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007044:	2302      	movs	r3, #2
 8007046:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800704a:	e018      	b.n	800707e <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800704c:	2908      	cmp	r1, #8
 800704e:	d107      	bne.n	8007060 <HAL_TIM_OC_Start+0x38>
 8007050:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007054:	2b01      	cmp	r3, #1
 8007056:	d1ed      	bne.n	8007034 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007058:	2302      	movs	r3, #2
 800705a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800705e:	e00e      	b.n	800707e <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007060:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007064:	2b01      	cmp	r3, #1
 8007066:	d1e5      	bne.n	8007034 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007068:	2904      	cmp	r1, #4
 800706a:	d0eb      	beq.n	8007044 <HAL_TIM_OC_Start+0x1c>
 800706c:	2908      	cmp	r1, #8
 800706e:	d0f3      	beq.n	8007058 <HAL_TIM_OC_Start+0x30>
 8007070:	2302      	movs	r3, #2
 8007072:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8007076:	e002      	b.n	800707e <HAL_TIM_OC_Start+0x56>
 8007078:	2302      	movs	r3, #2
 800707a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800707e:	6800      	ldr	r0, [r0, #0]
 8007080:	2201      	movs	r2, #1
 8007082:	f7ff ffc3 	bl	800700c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007086:	4b0e      	ldr	r3, [pc, #56]	; (80070c0 <HAL_TIM_OC_Start+0x98>)
 8007088:	4298      	cmp	r0, r3
 800708a:	d10a      	bne.n	80070a2 <HAL_TIM_OC_Start+0x7a>
    __HAL_TIM_MOE_ENABLE(htim);
 800708c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800708e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007092:	6443      	str	r3, [r0, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007094:	6883      	ldr	r3, [r0, #8]
 8007096:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800709a:	2b06      	cmp	r3, #6
 800709c:	d10b      	bne.n	80070b6 <HAL_TIM_OC_Start+0x8e>
  return HAL_OK;
 800709e:	2000      	movs	r0, #0
 80070a0:	e7c9      	b.n	8007036 <HAL_TIM_OC_Start+0xe>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80070a6:	d0f5      	beq.n	8007094 <HAL_TIM_OC_Start+0x6c>
 80070a8:	4b06      	ldr	r3, [pc, #24]	; (80070c4 <HAL_TIM_OC_Start+0x9c>)
 80070aa:	4298      	cmp	r0, r3
 80070ac:	d0f2      	beq.n	8007094 <HAL_TIM_OC_Start+0x6c>
 80070ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070b2:	4298      	cmp	r0, r3
 80070b4:	d0ee      	beq.n	8007094 <HAL_TIM_OC_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 80070b6:	6803      	ldr	r3, [r0, #0]
 80070b8:	f043 0301 	orr.w	r3, r3, #1
 80070bc:	6003      	str	r3, [r0, #0]
 80070be:	e7ee      	b.n	800709e <HAL_TIM_OC_Start+0x76>
 80070c0:	40012c00 	.word	0x40012c00
 80070c4:	40000400 	.word	0x40000400

080070c8 <HAL_TIM_PWM_Start>:
 80070c8:	f7ff bfae 	b.w	8007028 <HAL_TIM_OC_Start>

080070cc <HAL_TIM_OC_Stop>:
{
 80070cc:	b538      	push	{r3, r4, r5, lr}
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80070ce:	2200      	movs	r2, #0
{
 80070d0:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80070d2:	6800      	ldr	r0, [r0, #0]
{
 80070d4:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80070d6:	f7ff ff99 	bl	800700c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070da:	4b18      	ldr	r3, [pc, #96]	; (800713c <HAL_TIM_OC_Stop+0x70>)
 80070dc:	4298      	cmp	r0, r3
 80070de:	d10d      	bne.n	80070fc <HAL_TIM_OC_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 80070e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80070e4:	6a02      	ldr	r2, [r0, #32]
 80070e6:	421a      	tst	r2, r3
 80070e8:	d108      	bne.n	80070fc <HAL_TIM_OC_Stop+0x30>
 80070ea:	f240 4344 	movw	r3, #1092	; 0x444
 80070ee:	6a02      	ldr	r2, [r0, #32]
 80070f0:	421a      	tst	r2, r3
 80070f2:	bf02      	ittt	eq
 80070f4:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 80070f6:	f423 4300 	biceq.w	r3, r3, #32768	; 0x8000
 80070fa:	6443      	streq	r3, [r0, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80070fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8007100:	6a02      	ldr	r2, [r0, #32]
 8007102:	421a      	tst	r2, r3
 8007104:	d108      	bne.n	8007118 <HAL_TIM_OC_Stop+0x4c>
 8007106:	f240 4344 	movw	r3, #1092	; 0x444
 800710a:	6a02      	ldr	r2, [r0, #32]
 800710c:	421a      	tst	r2, r3
 800710e:	bf02      	ittt	eq
 8007110:	6803      	ldreq	r3, [r0, #0]
 8007112:	f023 0301 	biceq.w	r3, r3, #1
 8007116:	6003      	streq	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007118:	2301      	movs	r3, #1
 800711a:	b91d      	cbnz	r5, 8007124 <HAL_TIM_OC_Stop+0x58>
 800711c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8007120:	2000      	movs	r0, #0
 8007122:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007124:	2d04      	cmp	r5, #4
 8007126:	d102      	bne.n	800712e <HAL_TIM_OC_Stop+0x62>
 8007128:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800712c:	e7f8      	b.n	8007120 <HAL_TIM_OC_Stop+0x54>
 800712e:	2d08      	cmp	r5, #8
 8007130:	bf0c      	ite	eq
 8007132:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8007136:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 800713a:	e7f1      	b.n	8007120 <HAL_TIM_OC_Stop+0x54>
 800713c:	40012c00 	.word	0x40012c00

08007140 <HAL_TIM_PWM_Stop>:
 8007140:	f7ff bfc4 	b.w	80070cc <HAL_TIM_OC_Stop>

08007144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007144:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007146:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800714a:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800714c:	2b01      	cmp	r3, #1
 800714e:	f04f 0002 	mov.w	r0, #2
 8007152:	d022      	beq.n	800719a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007154:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007156:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800715a:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800715c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800715e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007162:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8007164:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007166:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007168:	4c0c      	ldr	r4, [pc, #48]	; (800719c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800716a:	42a3      	cmp	r3, r4
 800716c:	d00a      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800716e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007172:	d007      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8007174:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8007178:	42a3      	cmp	r3, r4
 800717a:	d003      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800717c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007180:	42a3      	cmp	r3, r4
 8007182:	d104      	bne.n	800718e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007184:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007186:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800718a:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800718c:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800718e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8007190:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007192:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007196:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 800719a:	bd30      	pop	{r4, r5, pc}
 800719c:	40012c00 	.word	0x40012c00

080071a0 <HAL_TIMEx_CommutCallback>:
 80071a0:	4770      	bx	lr

080071a2 <HAL_TIMEx_BreakCallback>:
 80071a2:	4770      	bx	lr

080071a4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071a4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	f102 030c 	add.w	r3, r2, #12
 80071aa:	e853 3f00 	ldrex	r3, [r3]
 80071ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	320c      	adds	r2, #12
 80071b4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80071b8:	6802      	ldr	r2, [r0, #0]
 80071ba:	2900      	cmp	r1, #0
 80071bc:	d1f2      	bne.n	80071a4 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	f102 0314 	add.w	r3, r2, #20
 80071c2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	f102 0c14 	add.w	ip, r2, #20
 80071ce:	e84c 3100 	strex	r1, r3, [ip]
 80071d2:	2900      	cmp	r1, #0
 80071d4:	d1f3      	bne.n	80071be <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d10b      	bne.n	80071f4 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	f102 030c 	add.w	r3, r2, #12
 80071e0:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071e4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	f102 0c0c 	add.w	ip, r2, #12
 80071ec:	e84c 3100 	strex	r1, r3, [ip]
 80071f0:	2900      	cmp	r1, #0
 80071f2:	d1f3      	bne.n	80071dc <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071f4:	2320      	movs	r3, #32
 80071f6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071fa:	2300      	movs	r3, #0
 80071fc:	6303      	str	r3, [r0, #48]	; 0x30
}
 80071fe:	4770      	bx	lr

08007200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007200:	b510      	push	{r4, lr}
 8007202:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007204:	6803      	ldr	r3, [r0, #0]
 8007206:	68c1      	ldr	r1, [r0, #12]
 8007208:	691a      	ldr	r2, [r3, #16]
 800720a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800720e:	430a      	orrs	r2, r1
 8007210:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007212:	6882      	ldr	r2, [r0, #8]
 8007214:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8007216:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007218:	4302      	orrs	r2, r0
 800721a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800721c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8007220:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007224:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007226:	430a      	orrs	r2, r1
 8007228:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800722a:	695a      	ldr	r2, [r3, #20]
 800722c:	69a1      	ldr	r1, [r4, #24]
 800722e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007232:	430a      	orrs	r2, r1
 8007234:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007236:	4a0e      	ldr	r2, [pc, #56]	; (8007270 <UART_SetConfig+0x70>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d115      	bne.n	8007268 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800723c:	f7ff f92e 	bl	800649c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007240:	2319      	movs	r3, #25
 8007242:	4343      	muls	r3, r0
 8007244:	6862      	ldr	r2, [r4, #4]
 8007246:	6820      	ldr	r0, [r4, #0]
 8007248:	0092      	lsls	r2, r2, #2
 800724a:	fbb3 f3f2 	udiv	r3, r3, r2
 800724e:	2264      	movs	r2, #100	; 0x64
 8007250:	fbb3 f1f2 	udiv	r1, r3, r2
 8007254:	fb02 3311 	mls	r3, r2, r1, r3
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	3332      	adds	r3, #50	; 0x32
 800725c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007260:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007264:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8007266:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8007268:	f7ff f908 	bl	800647c <HAL_RCC_GetPCLK1Freq>
 800726c:	e7e8      	b.n	8007240 <UART_SetConfig+0x40>
 800726e:	bf00      	nop
 8007270:	40013800 	.word	0x40013800

08007274 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8007274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007276:	4604      	mov	r4, r0
 8007278:	460e      	mov	r6, r1
 800727a:	4617      	mov	r7, r2
 800727c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800727e:	6822      	ldr	r2, [r4, #0]
 8007280:	6813      	ldr	r3, [r2, #0]
 8007282:	ea36 0303 	bics.w	r3, r6, r3
 8007286:	d101      	bne.n	800728c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8007288:	2000      	movs	r0, #0
 800728a:	e028      	b.n	80072de <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800728c:	1c6b      	adds	r3, r5, #1
 800728e:	d0f7      	beq.n	8007280 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007290:	b125      	cbz	r5, 800729c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8007292:	f7fd fbe1 	bl	8004a58 <HAL_GetTick>
 8007296:	1bc0      	subs	r0, r0, r7
 8007298:	4285      	cmp	r5, r0
 800729a:	d2f0      	bcs.n	800727e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800729c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	f102 030c 	add.w	r3, r2, #12
 80072a2:	e853 3f00 	ldrex	r3, [r3]
 80072a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072aa:	320c      	adds	r2, #12
 80072ac:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 80072b0:	6821      	ldr	r1, [r4, #0]
 80072b2:	2800      	cmp	r0, #0
 80072b4:	d1f2      	bne.n	800729c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	f101 0314 	add.w	r3, r1, #20
 80072ba:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072be:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	f101 0014 	add.w	r0, r1, #20
 80072c6:	e840 3200 	strex	r2, r3, [r0]
 80072ca:	2a00      	cmp	r2, #0
 80072cc:	d1f3      	bne.n	80072b6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 80072ce:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 80072d0:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80072d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 80072d6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 80072da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 80072de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072e0 <HAL_UART_Init>:
{
 80072e0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80072e2:	4604      	mov	r4, r0
 80072e4:	b348      	cbz	r0, 800733a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80072e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80072ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80072ee:	b91b      	cbnz	r3, 80072f8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80072f0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 80072f4:	f7fb ff68 	bl	80031c8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80072f8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80072fa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80072fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8007300:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8007302:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8007304:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007308:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800730a:	f7ff ff79 	bl	8007200 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800730e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007310:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007312:	691a      	ldr	r2, [r3, #16]
 8007314:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007318:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800731a:	695a      	ldr	r2, [r3, #20]
 800731c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007320:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007328:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800732a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800732c:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800732e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007332:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007336:	6360      	str	r0, [r4, #52]	; 0x34
}
 8007338:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800733a:	2001      	movs	r0, #1
 800733c:	e7fc      	b.n	8007338 <HAL_UART_Init+0x58>

0800733e <HAL_UART_DeInit>:
{
 800733e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007340:	4604      	mov	r4, r0
 8007342:	b1a0      	cbz	r0, 800736e <HAL_UART_DeInit+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 8007344:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8007346:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007348:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 800734c:	68d3      	ldr	r3, [r2, #12]
 800734e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007352:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8007354:	f7fb ffdc 	bl	8003310 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007358:	2000      	movs	r0, #0
 800735a:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(huart);
 800735c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8007360:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8007364:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007368:	6320      	str	r0, [r4, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800736a:	6360      	str	r0, [r4, #52]	; 0x34
}
 800736c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800736e:	2001      	movs	r0, #1
 8007370:	e7fc      	b.n	800736c <HAL_UART_DeInit+0x2e>

08007372 <HAL_UART_Transmit>:
{
 8007372:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007376:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007378:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800737c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800737e:	2b20      	cmp	r3, #32
{
 8007380:	460e      	mov	r6, r1
 8007382:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007384:	d13c      	bne.n	8007400 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8007386:	2900      	cmp	r1, #0
 8007388:	d03c      	beq.n	8007404 <HAL_UART_Transmit+0x92>
 800738a:	2a00      	cmp	r2, #0
 800738c:	d03a      	beq.n	8007404 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800738e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007390:	2500      	movs	r5, #0
 8007392:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007394:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8007398:	f7fd fb5e 	bl	8004a58 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800739c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800739e:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80073a4:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80073a6:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073a8:	d103      	bne.n	80073b2 <HAL_UART_Transmit+0x40>
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	b90b      	cbnz	r3, 80073b2 <HAL_UART_Transmit+0x40>
 80073ae:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80073b0:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80073b2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	b953      	cbnz	r3, 80073ce <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073b8:	464b      	mov	r3, r9
 80073ba:	4642      	mov	r2, r8
 80073bc:	2140      	movs	r1, #64	; 0x40
 80073be:	4620      	mov	r0, r4
 80073c0:	f7ff ff58 	bl	8007274 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80073c4:	b950      	cbnz	r0, 80073dc <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 80073c6:	2320      	movs	r3, #32
 80073c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 80073cc:	e007      	b.n	80073de <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073ce:	464b      	mov	r3, r9
 80073d0:	4642      	mov	r2, r8
 80073d2:	2180      	movs	r1, #128	; 0x80
 80073d4:	4620      	mov	r0, r4
 80073d6:	f7ff ff4d 	bl	8007274 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80073da:	b110      	cbz	r0, 80073e2 <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 80073dc:	2003      	movs	r0, #3
}
 80073de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073e2:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80073e4:	b94e      	cbnz	r6, 80073fa <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073e6:	f835 3b02 	ldrh.w	r3, [r5], #2
 80073ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80073ee:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80073f0:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80073f2:	3901      	subs	r1, #1
 80073f4:	b289      	uxth	r1, r1
 80073f6:	84e1      	strh	r1, [r4, #38]	; 0x26
 80073f8:	e7db      	b.n	80073b2 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80073fa:	f816 3b01 	ldrb.w	r3, [r6], #1
 80073fe:	e7f6      	b.n	80073ee <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8007400:	2002      	movs	r0, #2
 8007402:	e7ec      	b.n	80073de <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8007404:	2001      	movs	r0, #1
 8007406:	e7ea      	b.n	80073de <HAL_UART_Transmit+0x6c>

08007408 <HAL_UART_TxCpltCallback>:
 8007408:	4770      	bx	lr

0800740a <HAL_UART_RxCpltCallback>:
 800740a:	4770      	bx	lr

0800740c <HAL_UART_RxHalfCpltCallback>:
 800740c:	4770      	bx	lr

0800740e <HAL_UART_ErrorCallback>:
 800740e:	4770      	bx	lr

08007410 <UART_DMAError>:
{
 8007410:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007412:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007414:	6803      	ldr	r3, [r0, #0]
 8007416:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007418:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800741c:	2921      	cmp	r1, #33	; 0x21
 800741e:	d112      	bne.n	8007446 <UART_DMAError+0x36>
 8007420:	0612      	lsls	r2, r2, #24
 8007422:	d510      	bpl.n	8007446 <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 8007424:	2200      	movs	r2, #0
 8007426:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	f103 020c 	add.w	r2, r3, #12
 800742c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007430:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	f103 0c0c 	add.w	ip, r3, #12
 8007438:	e84c 2100 	strex	r1, r2, [ip]
 800743c:	2900      	cmp	r1, #0
 800743e:	d1f3      	bne.n	8007428 <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 8007440:	2220      	movs	r2, #32
 8007442:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007446:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007448:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 800744c:	2a22      	cmp	r2, #34	; 0x22
 800744e:	d105      	bne.n	800745c <UART_DMAError+0x4c>
 8007450:	065b      	lsls	r3, r3, #25
 8007452:	d503      	bpl.n	800745c <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 8007454:	2300      	movs	r3, #0
 8007456:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007458:	f7ff fea4 	bl	80071a4 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800745c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800745e:	f043 0310 	orr.w	r3, r3, #16
 8007462:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_UART_ErrorCallback(huart);
 8007464:	f7ff ffd3 	bl	800740e <HAL_UART_ErrorCallback>
}
 8007468:	bd08      	pop	{r3, pc}

0800746a <UART_DMAAbortOnError>:
{
 800746a:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800746c:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800746e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8007470:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007472:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8007474:	f7ff ffcb 	bl	800740e <HAL_UART_ErrorCallback>
}
 8007478:	bd08      	pop	{r3, pc}

0800747a <HAL_UART_AbortCpltCallback>:
 800747a:	4770      	bx	lr

0800747c <HAL_UART_Abort_IT>:
{
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007480:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007482:	f102 030c 	add.w	r3, r2, #12
 8007486:	e853 3f00 	ldrex	r3, [r3]
 800748a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	320c      	adds	r2, #12
 8007490:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	2900      	cmp	r1, #0
 8007498:	d1f2      	bne.n	8007480 <HAL_UART_Abort_IT+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749a:	f103 0214 	add.w	r2, r3, #20
 800749e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a6:	f103 0014 	add.w	r0, r3, #20
 80074aa:	e840 2100 	strex	r1, r2, [r0]
 80074ae:	2900      	cmp	r1, #0
 80074b0:	d1f3      	bne.n	800749a <HAL_UART_Abort_IT+0x1e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80074b4:	2a01      	cmp	r2, #1
 80074b6:	d035      	beq.n	8007524 <HAL_UART_Abort_IT+0xa8>
  if (huart->hdmatx != NULL)
 80074b8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d13f      	bne.n	800753e <HAL_UART_Abort_IT+0xc2>
  if (huart->hdmarx != NULL)
 80074be:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80074c0:	b129      	cbz	r1, 80074ce <HAL_UART_Abort_IT+0x52>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c2:	695a      	ldr	r2, [r3, #20]
 80074c4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80074c8:	bf18      	it	ne
 80074ca:	4a2d      	ldrne	r2, [pc, #180]	; (8007580 <HAL_UART_Abort_IT+0x104>)
      huart->hdmarx->XferAbortCallback = NULL;
 80074cc:	634a      	str	r2, [r1, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80074ce:	695a      	ldr	r2, [r3, #20]
 80074d0:	0612      	lsls	r2, r2, #24
 80074d2:	d43b      	bmi.n	800754c <HAL_UART_Abort_IT+0xd0>
  uint32_t AbortCplt = 0x01U;
 80074d4:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d6:	6822      	ldr	r2, [r4, #0]
 80074d8:	6953      	ldr	r3, [r2, #20]
 80074da:	065b      	lsls	r3, r3, #25
 80074dc:	d54b      	bpl.n	8007576 <HAL_UART_Abort_IT+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	f102 0314 	add.w	r3, r2, #20
 80074e2:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ea:	f102 0114 	add.w	r1, r2, #20
 80074ee:	e841 3600 	strex	r6, r3, [r1]
 80074f2:	2e00      	cmp	r6, #0
 80074f4:	d1f3      	bne.n	80074de <HAL_UART_Abort_IT+0x62>
    if (huart->hdmarx != NULL)
 80074f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d03c      	beq.n	8007576 <HAL_UART_Abort_IT+0xfa>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074fc:	f7fd fe08 	bl	8005110 <HAL_DMA_Abort_IT>
 8007500:	2800      	cmp	r0, #0
 8007502:	d03a      	beq.n	800757a <HAL_UART_Abort_IT+0xfe>
        huart->hdmarx->XferAbortCallback = NULL;
 8007504:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007506:	635e      	str	r6, [r3, #52]	; 0x34
    huart->TxXferCount = 0x00U;
 8007508:	2300      	movs	r3, #0
    huart->gState  = HAL_UART_STATE_READY;
 800750a:	2220      	movs	r2, #32
    huart->TxXferCount = 0x00U;
 800750c:	84e3      	strh	r3, [r4, #38]	; 0x26
    HAL_UART_AbortCpltCallback(huart);
 800750e:	4620      	mov	r0, r4
    huart->RxXferCount = 0x00U;
 8007510:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007512:	6463      	str	r3, [r4, #68]	; 0x44
    huart->gState  = HAL_UART_STATE_READY;
 8007514:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8007518:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751c:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_UART_AbortCpltCallback(huart);
 800751e:	f7ff ffac 	bl	800747a <HAL_UART_AbortCpltCallback>
 8007522:	e02a      	b.n	800757a <HAL_UART_Abort_IT+0xfe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	f103 020c 	add.w	r2, r3, #12
 8007528:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800752c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	f103 000c 	add.w	r0, r3, #12
 8007534:	e840 2100 	strex	r1, r2, [r0]
 8007538:	2900      	cmp	r1, #0
 800753a:	d1f3      	bne.n	8007524 <HAL_UART_Abort_IT+0xa8>
 800753c:	e7bc      	b.n	80074b8 <HAL_UART_Abort_IT+0x3c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800753e:	695a      	ldr	r2, [r3, #20]
 8007540:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8007544:	bf18      	it	ne
 8007546:	4a0f      	ldrne	r2, [pc, #60]	; (8007584 <HAL_UART_Abort_IT+0x108>)
      huart->hdmatx->XferAbortCallback = NULL;
 8007548:	6342      	str	r2, [r0, #52]	; 0x34
 800754a:	e7b8      	b.n	80074be <HAL_UART_Abort_IT+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	f103 0214 	add.w	r2, r3, #20
 8007550:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	f103 0114 	add.w	r1, r3, #20
 800755c:	e841 2500 	strex	r5, r2, [r1]
 8007560:	2d00      	cmp	r5, #0
 8007562:	d1f3      	bne.n	800754c <HAL_UART_Abort_IT+0xd0>
    if (huart->hdmatx != NULL)
 8007564:	2800      	cmp	r0, #0
 8007566:	d0b5      	beq.n	80074d4 <HAL_UART_Abort_IT+0x58>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8007568:	f7fd fdd2 	bl	8005110 <HAL_DMA_Abort_IT>
 800756c:	2800      	cmp	r0, #0
 800756e:	d0b2      	beq.n	80074d6 <HAL_UART_Abort_IT+0x5a>
        huart->hdmatx->XferAbortCallback = NULL;
 8007570:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007572:	635d      	str	r5, [r3, #52]	; 0x34
 8007574:	e7ae      	b.n	80074d4 <HAL_UART_Abort_IT+0x58>
  if (AbortCplt == 0x01U)
 8007576:	2d01      	cmp	r5, #1
 8007578:	d0c6      	beq.n	8007508 <HAL_UART_Abort_IT+0x8c>
}
 800757a:	2000      	movs	r0, #0
 800757c:	bd70      	pop	{r4, r5, r6, pc}
 800757e:	bf00      	nop
 8007580:	08007589 	.word	0x08007589
 8007584:	080075b3 	.word	0x080075b3

08007588 <UART_DMARxAbortCallback>:
{
 8007588:	b508      	push	{r3, lr}
  huart->hdmarx->XferAbortCallback = NULL;
 800758a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800758c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmarx->XferAbortCallback = NULL;
 800758e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007590:	6353      	str	r3, [r2, #52]	; 0x34
  if (huart->hdmatx != NULL)
 8007592:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8007594:	b10a      	cbz	r2, 800759a <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 8007596:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007598:	b952      	cbnz	r2, 80075b0 <UART_DMARxAbortCallback+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 800759a:	2220      	movs	r2, #32
  huart->TxXferCount = 0x00U;
 800759c:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800759e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075a0:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 80075a2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80075a6:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075aa:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 80075ac:	f7ff ff65 	bl	800747a <HAL_UART_AbortCpltCallback>
}
 80075b0:	bd08      	pop	{r3, pc}

080075b2 <UART_DMATxAbortCallback>:
{
 80075b2:	b508      	push	{r3, lr}
  huart->hdmatx->XferAbortCallback = NULL;
 80075b4:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmatx->XferAbortCallback = NULL;
 80075b8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80075ba:	6353      	str	r3, [r2, #52]	; 0x34
  if (huart->hdmarx != NULL)
 80075bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80075be:	b10a      	cbz	r2, 80075c4 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 80075c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80075c2:	b952      	cbnz	r2, 80075da <UART_DMATxAbortCallback+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 80075c4:	2220      	movs	r2, #32
  huart->TxXferCount = 0x00U;
 80075c6:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80075c8:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ca:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 80075cc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80075d0:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d4:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 80075d6:	f7ff ff50 	bl	800747a <HAL_UART_AbortCpltCallback>
}
 80075da:	bd08      	pop	{r3, pc}

080075dc <HAL_UARTEx_RxEventCallback>:
}
 80075dc:	4770      	bx	lr

080075de <UART_DMARxHalfCplt>:
{
 80075de:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80075e0:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80075e4:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d104      	bne.n	80075f6 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80075ec:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80075ee:	0849      	lsrs	r1, r1, #1
 80075f0:	f7ff fff4 	bl	80075dc <HAL_UARTEx_RxEventCallback>
}
 80075f4:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 80075f6:	f7ff ff09 	bl	800740c <HAL_UART_RxHalfCpltCallback>
}
 80075fa:	e7fb      	b.n	80075f4 <UART_DMARxHalfCplt+0x16>

080075fc <UART_DMAReceiveCplt>:
{
 80075fc:	b508      	push	{r3, lr}
 80075fe:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007600:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007602:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f013 0320 	ands.w	r3, r3, #32
 800760a:	d137      	bne.n	800767c <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 800760c:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800760e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	f102 030c 	add.w	r3, r2, #12
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	320c      	adds	r2, #12
 800761e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007622:	6803      	ldr	r3, [r0, #0]
 8007624:	2900      	cmp	r1, #0
 8007626:	d1f2      	bne.n	800760e <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	f103 0214 	add.w	r2, r3, #20
 800762c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007630:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	f103 0c14 	add.w	ip, r3, #20
 8007638:	e84c 2100 	strex	r1, r2, [ip]
 800763c:	2900      	cmp	r1, #0
 800763e:	d1f3      	bne.n	8007628 <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	f103 0214 	add.w	r2, r3, #20
 8007644:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	f103 0c14 	add.w	ip, r3, #20
 8007650:	e84c 2100 	strex	r1, r2, [ip]
 8007654:	2900      	cmp	r1, #0
 8007656:	d1f3      	bne.n	8007640 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8007658:	2220      	movs	r2, #32
 800765a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800765e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007660:	2a01      	cmp	r2, #1
 8007662:	d10b      	bne.n	800767c <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	f103 020c 	add.w	r2, r3, #12
 8007668:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800766c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	f103 0c0c 	add.w	ip, r3, #12
 8007674:	e84c 2100 	strex	r1, r2, [ip]
 8007678:	2900      	cmp	r1, #0
 800767a:	d1f3      	bne.n	8007664 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800767c:	2300      	movs	r3, #0
 800767e:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007680:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007682:	2b01      	cmp	r3, #1
 8007684:	d103      	bne.n	800768e <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007686:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007688:	f7ff ffa8 	bl	80075dc <HAL_UARTEx_RxEventCallback>
}
 800768c:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 800768e:	f7ff febc 	bl	800740a <HAL_UART_RxCpltCallback>
}
 8007692:	e7fb      	b.n	800768c <UART_DMAReceiveCplt+0x90>

08007694 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007694:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007698:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800769a:	2b22      	cmp	r3, #34	; 0x22
 800769c:	d142      	bne.n	8007724 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800769e:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076a6:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a8:	d13f      	bne.n	800772a <UART_Receive_IT.isra.0+0x96>
 80076aa:	6901      	ldr	r1, [r0, #16]
 80076ac:	2900      	cmp	r1, #0
 80076ae:	d13f      	bne.n	8007730 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076b0:	6852      	ldr	r2, [r2, #4]
 80076b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076b6:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80076ba:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80076bc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80076be:	3b01      	subs	r3, #1
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d12d      	bne.n	8007724 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80076c8:	6802      	ldr	r2, [r0, #0]
 80076ca:	68d1      	ldr	r1, [r2, #12]
 80076cc:	f021 0120 	bic.w	r1, r1, #32
 80076d0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076d2:	68d1      	ldr	r1, [r2, #12]
 80076d4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80076d8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076da:	6951      	ldr	r1, [r2, #20]
 80076dc:	f021 0101 	bic.w	r1, r1, #1
 80076e0:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80076e2:	2220      	movs	r2, #32
 80076e4:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e8:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ea:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80076ec:	2a01      	cmp	r2, #1
 80076ee:	6802      	ldr	r2, [r0, #0]
 80076f0:	d128      	bne.n	8007744 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f2:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	f102 030c 	add.w	r3, r2, #12
 80076f8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076fc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	f102 0c0c 	add.w	ip, r2, #12
 8007704:	e84c 3100 	strex	r1, r3, [ip]
 8007708:	2900      	cmp	r1, #0
 800770a:	d1f3      	bne.n	80076f4 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800770c:	6813      	ldr	r3, [r2, #0]
 800770e:	06db      	lsls	r3, r3, #27
 8007710:	d505      	bpl.n	800771e <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007712:	9101      	str	r1, [sp, #4]
 8007714:	6813      	ldr	r3, [r2, #0]
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	6853      	ldr	r3, [r2, #4]
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800771e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007720:	f7ff ff5c 	bl	80075dc <HAL_UARTEx_RxEventCallback>
}
 8007724:	b003      	add	sp, #12
 8007726:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800772a:	b939      	cbnz	r1, 800773c <UART_Receive_IT.isra.0+0xa8>
 800772c:	6901      	ldr	r1, [r0, #16]
 800772e:	b929      	cbnz	r1, 800773c <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007730:	6852      	ldr	r2, [r2, #4]
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8007736:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007738:	3301      	adds	r3, #1
 800773a:	e7be      	b.n	80076ba <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800773c:	6852      	ldr	r2, [r2, #4]
 800773e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007742:	e7f7      	b.n	8007734 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8007744:	f7ff fe61 	bl	800740a <HAL_UART_RxCpltCallback>
 8007748:	e7ec      	b.n	8007724 <UART_Receive_IT.isra.0+0x90>
	...

0800774c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800774c:	6803      	ldr	r3, [r0, #0]
{
 800774e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007750:	681a      	ldr	r2, [r3, #0]
{
 8007752:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8007754:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007756:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007758:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800775a:	d108      	bne.n	800776e <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800775c:	0696      	lsls	r6, r2, #26
 800775e:	d568      	bpl.n	8007832 <HAL_UART_IRQHandler+0xe6>
 8007760:	068d      	lsls	r5, r1, #26
 8007762:	d566      	bpl.n	8007832 <HAL_UART_IRQHandler+0xe6>
}
 8007764:	b002      	add	sp, #8
 8007766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800776a:	f7ff bf93 	b.w	8007694 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800776e:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007772:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8007776:	4305      	orrs	r5, r0
 8007778:	d05b      	beq.n	8007832 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800777a:	07d6      	lsls	r6, r2, #31
 800777c:	d505      	bpl.n	800778a <HAL_UART_IRQHandler+0x3e>
 800777e:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007780:	bf42      	ittt	mi
 8007782:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8007784:	f043 0301 	orrmi.w	r3, r3, #1
 8007788:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800778a:	0753      	lsls	r3, r2, #29
 800778c:	d504      	bpl.n	8007798 <HAL_UART_IRQHandler+0x4c>
 800778e:	b118      	cbz	r0, 8007798 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007790:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007792:	f043 0302 	orr.w	r3, r3, #2
 8007796:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007798:	0796      	lsls	r6, r2, #30
 800779a:	d504      	bpl.n	80077a6 <HAL_UART_IRQHandler+0x5a>
 800779c:	b118      	cbz	r0, 80077a6 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800779e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80077a0:	f043 0304 	orr.w	r3, r3, #4
 80077a4:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80077a6:	0715      	lsls	r5, r2, #28
 80077a8:	d507      	bpl.n	80077ba <HAL_UART_IRQHandler+0x6e>
 80077aa:	f001 0320 	and.w	r3, r1, #32
 80077ae:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077b0:	bf1e      	ittt	ne
 80077b2:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 80077b4:	f043 0308 	orrne.w	r3, r3, #8
 80077b8:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d032      	beq.n	8007826 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077c0:	0692      	lsls	r2, r2, #26
 80077c2:	d504      	bpl.n	80077ce <HAL_UART_IRQHandler+0x82>
 80077c4:	068b      	lsls	r3, r1, #26
 80077c6:	d502      	bpl.n	80077ce <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 80077c8:	4620      	mov	r0, r4
 80077ca:	f7ff ff63 	bl	8007694 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077ce:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 80077d0:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077d2:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077da:	f002 0208 	and.w	r2, r2, #8
 80077de:	ea53 0502 	orrs.w	r5, r3, r2
 80077e2:	d022      	beq.n	800782a <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 80077e4:	f7ff fcde 	bl	80071a4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e8:	6973      	ldr	r3, [r6, #20]
 80077ea:	065e      	lsls	r6, r3, #25
 80077ec:	d518      	bpl.n	8007820 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f0:	f102 0314 	add.w	r3, r2, #20
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	3214      	adds	r2, #20
 80077fe:	e842 3100 	strex	r1, r3, [r2]
 8007802:	2900      	cmp	r1, #0
 8007804:	d1f3      	bne.n	80077ee <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8007806:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007808:	b150      	cbz	r0, 8007820 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800780a:	4b74      	ldr	r3, [pc, #464]	; (80079dc <HAL_UART_IRQHandler+0x290>)
 800780c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800780e:	f7fd fc7f 	bl	8005110 <HAL_DMA_Abort_IT>
 8007812:	b140      	cbz	r0, 8007826 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007814:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007816:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8007818:	b002      	add	sp, #8
 800781a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800781e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8007820:	4620      	mov	r0, r4
 8007822:	f7ff fdf4 	bl	800740e <HAL_UART_ErrorCallback>
}
 8007826:	b002      	add	sp, #8
 8007828:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800782a:	f7ff fdf0 	bl	800740e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800782e:	6465      	str	r5, [r4, #68]	; 0x44
 8007830:	e7f9      	b.n	8007826 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007832:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007834:	2801      	cmp	r0, #1
 8007836:	f040 8094 	bne.w	8007962 <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800783a:	06d5      	lsls	r5, r2, #27
 800783c:	f140 8091 	bpl.w	8007962 <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007840:	06c8      	lsls	r0, r1, #27
 8007842:	f140 808e 	bpl.w	8007962 <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007846:	2200      	movs	r2, #0
 8007848:	9201      	str	r2, [sp, #4]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	9201      	str	r2, [sp, #4]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	9201      	str	r2, [sp, #4]
 8007852:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007854:	695a      	ldr	r2, [r3, #20]
 8007856:	0652      	lsls	r2, r2, #25
 8007858:	d54d      	bpl.n	80078f6 <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800785a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800785c:	680a      	ldr	r2, [r1, #0]
 800785e:	6852      	ldr	r2, [r2, #4]
 8007860:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8007862:	2a00      	cmp	r2, #0
 8007864:	d0df      	beq.n	8007826 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007866:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8007868:	4290      	cmp	r0, r2
 800786a:	d9dc      	bls.n	8007826 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 800786c:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800786e:	698a      	ldr	r2, [r1, #24]
 8007870:	2a20      	cmp	r2, #32
 8007872:	d036      	beq.n	80078e2 <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	f103 020c 	add.w	r2, r3, #12
 8007878:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800787c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	f103 000c 	add.w	r0, r3, #12
 8007884:	e840 2100 	strex	r1, r2, [r0]
 8007888:	2900      	cmp	r1, #0
 800788a:	d1f3      	bne.n	8007874 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	f103 0214 	add.w	r2, r3, #20
 8007890:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007894:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	f103 0014 	add.w	r0, r3, #20
 800789c:	e840 2100 	strex	r1, r2, [r0]
 80078a0:	2900      	cmp	r1, #0
 80078a2:	d1f3      	bne.n	800788c <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	f103 0214 	add.w	r2, r3, #20
 80078a8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	f103 0014 	add.w	r0, r3, #20
 80078b4:	e840 2100 	strex	r1, r2, [r0]
 80078b8:	2900      	cmp	r1, #0
 80078ba:	d1f3      	bne.n	80078a4 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 80078bc:	2220      	movs	r2, #32
 80078be:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c2:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	f103 020c 	add.w	r2, r3, #12
 80078c8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078cc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d0:	f103 000c 	add.w	r0, r3, #12
 80078d4:	e840 2100 	strex	r1, r2, [r0]
 80078d8:	2900      	cmp	r1, #0
 80078da:	d1f3      	bne.n	80078c4 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078dc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80078de:	f7fd fbf8 	bl	80050d2 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078e2:	2302      	movs	r3, #2
 80078e4:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078e6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80078e8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80078ea:	1ac9      	subs	r1, r1, r3
 80078ec:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078ee:	4620      	mov	r0, r4
 80078f0:	f7ff fe74 	bl	80075dc <HAL_UARTEx_RxEventCallback>
 80078f4:	e797      	b.n	8007826 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078f6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 80078f8:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078fa:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 80078fc:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078fe:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8007900:	2800      	cmp	r0, #0
 8007902:	d090      	beq.n	8007826 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007904:	1a89      	subs	r1, r1, r2
 8007906:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8007908:	2900      	cmp	r1, #0
 800790a:	d08c      	beq.n	8007826 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	f103 020c 	add.w	r2, r3, #12
 8007910:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007914:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007918:	f103 050c 	add.w	r5, r3, #12
 800791c:	e845 2000 	strex	r0, r2, [r5]
 8007920:	2800      	cmp	r0, #0
 8007922:	d1f3      	bne.n	800790c <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	f103 0214 	add.w	r2, r3, #20
 8007928:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800792c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	f103 0514 	add.w	r5, r3, #20
 8007934:	e845 2000 	strex	r0, r2, [r5]
 8007938:	2800      	cmp	r0, #0
 800793a:	d1f3      	bne.n	8007924 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 800793c:	2220      	movs	r2, #32
 800793e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007942:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	f103 020c 	add.w	r2, r3, #12
 8007948:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800794c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007950:	f103 050c 	add.w	r5, r3, #12
 8007954:	e845 2000 	strex	r0, r2, [r5]
 8007958:	2800      	cmp	r0, #0
 800795a:	d1f3      	bne.n	8007944 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800795c:	2302      	movs	r3, #2
 800795e:	6363      	str	r3, [r4, #52]	; 0x34
 8007960:	e7c5      	b.n	80078ee <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007962:	0616      	lsls	r6, r2, #24
 8007964:	d528      	bpl.n	80079b8 <HAL_UART_IRQHandler+0x26c>
 8007966:	060d      	lsls	r5, r1, #24
 8007968:	d526      	bpl.n	80079b8 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800796a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800796e:	2a21      	cmp	r2, #33	; 0x21
 8007970:	f47f af59 	bne.w	8007826 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007974:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007976:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007978:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800797c:	d117      	bne.n	80079ae <HAL_UART_IRQHandler+0x262>
 800797e:	6921      	ldr	r1, [r4, #16]
 8007980:	b9a9      	cbnz	r1, 80079ae <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007982:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007986:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800798a:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800798c:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800798e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8007990:	3a01      	subs	r2, #1
 8007992:	b292      	uxth	r2, r2
 8007994:	84e2      	strh	r2, [r4, #38]	; 0x26
 8007996:	2a00      	cmp	r2, #0
 8007998:	f47f af45 	bne.w	8007826 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079a2:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079a4:	68da      	ldr	r2, [r3, #12]
 80079a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079aa:	60da      	str	r2, [r3, #12]
 80079ac:	e73b      	b.n	8007826 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079ae:	1c51      	adds	r1, r2, #1
 80079b0:	6221      	str	r1, [r4, #32]
 80079b2:	7812      	ldrb	r2, [r2, #0]
 80079b4:	605a      	str	r2, [r3, #4]
 80079b6:	e7ea      	b.n	800798e <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079b8:	0650      	lsls	r0, r2, #25
 80079ba:	f57f af34 	bpl.w	8007826 <HAL_UART_IRQHandler+0xda>
 80079be:	064a      	lsls	r2, r1, #25
 80079c0:	f57f af31 	bpl.w	8007826 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079c4:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80079c6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079cc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80079ce:	2320      	movs	r3, #32
 80079d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 80079d4:	f7ff fd18 	bl	8007408 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80079d8:	e725      	b.n	8007826 <HAL_UART_IRQHandler+0xda>
 80079da:	bf00      	nop
 80079dc:	0800746b 	.word	0x0800746b

080079e0 <UART_Start_Receive_DMA>:
{
 80079e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079e2:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 80079e4:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e6:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079e8:	2222      	movs	r2, #34	; 0x22
{
 80079ea:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 80079ec:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ee:	6445      	str	r5, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079f0:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079f4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80079f6:	4a1d      	ldr	r2, [pc, #116]	; (8007a6c <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80079f8:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079fa:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80079fc:	4a1c      	ldr	r2, [pc, #112]	; (8007a70 <UART_Start_Receive_DMA+0x90>)
 80079fe:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a00:	4a1c      	ldr	r2, [pc, #112]	; (8007a74 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 8007a02:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007a06:	460a      	mov	r2, r1
 8007a08:	1d31      	adds	r1, r6, #4
 8007a0a:	f7fd fb23 	bl	8005054 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	9501      	str	r5, [sp, #4]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	9201      	str	r2, [sp, #4]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	9201      	str	r2, [sp, #4]
 8007a1a:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a1c:	6922      	ldr	r2, [r4, #16]
 8007a1e:	b15a      	cbz	r2, 8007a38 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a20:	f103 020c 	add.w	r2, r3, #12
 8007a24:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	f103 000c 	add.w	r0, r3, #12
 8007a30:	e840 2100 	strex	r1, r2, [r0]
 8007a34:	2900      	cmp	r1, #0
 8007a36:	d1f3      	bne.n	8007a20 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	f103 0214 	add.w	r2, r3, #20
 8007a3c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a40:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	f103 0014 	add.w	r0, r3, #20
 8007a48:	e840 2100 	strex	r1, r2, [r0]
 8007a4c:	2900      	cmp	r1, #0
 8007a4e:	d1f3      	bne.n	8007a38 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a50:	f103 0214 	add.w	r2, r3, #20
 8007a54:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	f103 0114 	add.w	r1, r3, #20
 8007a60:	e841 2000 	strex	r0, r2, [r1]
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d1f3      	bne.n	8007a50 <UART_Start_Receive_DMA+0x70>
}
 8007a68:	b002      	add	sp, #8
 8007a6a:	bd70      	pop	{r4, r5, r6, pc}
 8007a6c:	080075fd 	.word	0x080075fd
 8007a70:	080075df 	.word	0x080075df
 8007a74:	08007411 	.word	0x08007411

08007a78 <HAL_UART_Receive_DMA>:
{
 8007a78:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a7a:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8007a7e:	2e20      	cmp	r6, #32
 8007a80:	d106      	bne.n	8007a90 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8007a82:	b141      	cbz	r1, 8007a96 <HAL_UART_Receive_DMA+0x1e>
 8007a84:	b13a      	cbz	r2, 8007a96 <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a86:	2400      	movs	r4, #0
 8007a88:	6304      	str	r4, [r0, #48]	; 0x30
}
 8007a8a:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007a8c:	f7ff bfa8 	b.w	80079e0 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8007a90:	2002      	movs	r0, #2
}
 8007a92:	bc70      	pop	{r4, r5, r6}
 8007a94:	4770      	bx	lr
      return HAL_ERROR;
 8007a96:	2001      	movs	r0, #1
 8007a98:	e7fb      	b.n	8007a92 <HAL_UART_Receive_DMA+0x1a>

08007a9a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007a9a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007a9c:	f000 ffbc 	bl	8008a18 <vTaskStartScheduler>
  
  return osOK;
}
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	bd08      	pop	{r3, pc}

08007aa4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007aa8:	6946      	ldr	r6, [r0, #20]
{
 8007aaa:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007aac:	e9d0 1000 	ldrd	r1, r0, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ab0:	692a      	ldr	r2, [r5, #16]
 8007ab2:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8007ab6:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007ab8:	b176      	cbz	r6, 8007ad8 <osThreadCreate+0x34>
 8007aba:	69ad      	ldr	r5, [r5, #24]
 8007abc:	b165      	cbz	r5, 8007ad8 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8007abe:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007ac0:	bf0c      	ite	eq
 8007ac2:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8007ac4:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ac6:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8007aca:	9400      	str	r4, [sp, #0]
 8007acc:	f000 feae 	bl	800882c <xTaskCreateStatic>
 8007ad0:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007ad2:	9805      	ldr	r0, [sp, #20]
}
 8007ad4:	b006      	add	sp, #24
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8007ad8:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007ada:	bf0c      	ite	eq
 8007adc:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8007ade:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ae0:	ad05      	add	r5, sp, #20
 8007ae2:	e9cd 4500 	strd	r4, r5, [sp]
 8007ae6:	b292      	uxth	r2, r2
 8007ae8:	f000 fed7 	bl	800889a <xTaskCreate>
 8007aec:	2801      	cmp	r0, #1
 8007aee:	d0f0      	beq.n	8007ad2 <osThreadCreate+0x2e>
      return NULL;
 8007af0:	2000      	movs	r0, #0
 8007af2:	e7ef      	b.n	8007ad4 <osThreadCreate+0x30>

08007af4 <osThreadYield>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
  taskYIELD();
 8007af4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007afc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	f3bf 8f6f 	isb	sy
  
  return osOK;
}
 8007b08:	2000      	movs	r0, #0
 8007b0a:	4770      	bx	lr

08007b0c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007b0c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007b0e:	2801      	cmp	r0, #1
 8007b10:	bf38      	it	cc
 8007b12:	2001      	movcc	r0, #1
 8007b14:	f001 f930 	bl	8008d78 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007b18:	2000      	movs	r0, #0
 8007b1a:	bd08      	pop	{r3, pc}

08007b1c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007b1c:	b513      	push	{r0, r1, r4, lr}
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8007b1e:	c811      	ldmia	r0, {r0, r4}
    return xTimerCreateStatic((const char *)"",
 8007b20:	3901      	subs	r1, #1
{
 8007b22:	4613      	mov	r3, r2
    return xTimerCreateStatic((const char *)"",
 8007b24:	424a      	negs	r2, r1
 8007b26:	414a      	adcs	r2, r1
  if(timer_def->controlblock != NULL) {
 8007b28:	b13c      	cbz	r4, 8007b3a <osTimerCreate+0x1e>
    return xTimerCreateStatic((const char *)"",
 8007b2a:	e9cd 0400 	strd	r0, r4, [sp]
 8007b2e:	2101      	movs	r1, #1
 8007b30:	4805      	ldr	r0, [pc, #20]	; (8007b48 <osTimerCreate+0x2c>)
 8007b32:	f001 fd04 	bl	800953e <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8007b36:	b002      	add	sp, #8
 8007b38:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8007b3a:	9000      	str	r0, [sp, #0]
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	4802      	ldr	r0, [pc, #8]	; (8007b48 <osTimerCreate+0x2c>)
 8007b40:	f001 fcd6 	bl	80094f0 <xTimerCreate>
 8007b44:	e7f7      	b.n	8007b36 <osTimerCreate+0x1a>
 8007b46:	bf00      	nop
 8007b48:	0800b264 	.word	0x0800b264

08007b4c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8007b4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8007b4e:	2400      	movs	r4, #0
 8007b50:	2901      	cmp	r1, #1
 8007b52:	460a      	mov	r2, r1
 8007b54:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8007b56:	bf38      	it	cc
 8007b58:	2201      	movcc	r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b5a:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 8007b5e:	b1b3      	cbz	r3, 8007b8e <osTimerStart+0x42>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8007b60:	2109      	movs	r1, #9
 8007b62:	9400      	str	r4, [sp, #0]
 8007b64:	ab03      	add	r3, sp, #12
 8007b66:	f001 fd27 	bl	80095b8 <xTimerGenericCommand>
 8007b6a:	2801      	cmp	r0, #1
 8007b6c:	d115      	bne.n	8007b9a <osTimerStart+0x4e>
    {
      result = osErrorOS;
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8007b6e:	9b03      	ldr	r3, [sp, #12]
 8007b70:	b913      	cbnz	r3, 8007b78 <osTimerStart+0x2c>
  osStatus result = osOK;
 8007b72:	2000      	movs	r0, #0

#else 
  result = osErrorOS;
#endif
  return result;
}
 8007b74:	b004      	add	sp, #16
 8007b76:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8007b78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b80:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	e7f1      	b.n	8007b72 <osTimerStart+0x26>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8007b8e:	2104      	movs	r1, #4
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	f001 fd11 	bl	80095b8 <xTimerGenericCommand>
 8007b96:	2801      	cmp	r0, #1
 8007b98:	d0eb      	beq.n	8007b72 <osTimerStart+0x26>
      result = osErrorOS;
 8007b9a:	20ff      	movs	r0, #255	; 0xff
  return result;
 8007b9c:	e7ea      	b.n	8007b74 <osTimerStart+0x28>

08007b9e <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8007b9e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007ba0:	2300      	movs	r3, #0
  uint32_t ulPreviousNotificationValue = 0;
 8007ba2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ba6:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode())
 8007baa:	b1d3      	cbz	r3, 8007be2 <osSignalSet+0x44>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8007bac:	ab02      	add	r3, sp, #8
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	ab03      	add	r3, sp, #12
 8007bb4:	f001 fb94 	bl	80092e0 <xTaskGenericNotifyFromISR>
 8007bb8:	2801      	cmp	r0, #1
 8007bba:	d004      	beq.n	8007bc6 <osSignalSet+0x28>
      return 0x80000000;
 8007bbc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8007bc0:	b005      	add	sp, #20
 8007bc2:	f85d fb04 	ldr.w	pc, [sp], #4
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007bc6:	9b02      	ldr	r3, [sp, #8]
 8007bc8:	b14b      	cbz	r3, 8007bde <osSignalSet+0x40>
 8007bca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	f3bf 8f6f 	isb	sy
  return ulPreviousNotificationValue;
 8007bde:	9803      	ldr	r0, [sp, #12]
 8007be0:	e7ee      	b.n	8007bc0 <osSignalSet+0x22>
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8007be2:	2201      	movs	r2, #1
 8007be4:	ab03      	add	r3, sp, #12
 8007be6:	f001 fb0d 	bl	8009204 <xTaskGenericNotify>
 8007bea:	2801      	cmp	r0, #1
 8007bec:	d0f7      	beq.n	8007bde <osSignalSet+0x40>
 8007bee:	e7e5      	b.n	8007bbc <osSignalSet+0x1e>

08007bf0 <osSignalWait>:

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8007bf0:	2300      	movs	r3, #0
{
 8007bf2:	b530      	push	{r4, r5, lr}
 8007bf4:	b085      	sub	sp, #20
 8007bf6:	4605      	mov	r5, r0
 8007bf8:	4614      	mov	r4, r2
  ret.value.signals = 0;  
 8007bfa:	9302      	str	r3, [sp, #8]
 8007bfc:	f3ef 8005 	mrs	r0, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 8007c00:	b9c0      	cbnz	r0, 8007c34 <osSignalWait+0x44>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8007c02:	4613      	mov	r3, r2
 8007c04:	aa02      	add	r2, sp, #8
 8007c06:	f001 fab3 	bl	8009170 <xTaskNotifyWait>
 8007c0a:	2801      	cmp	r0, #1
 8007c0c:	d00c      	beq.n	8007c28 <osSignalWait+0x38>
    {
      if(ticks == 0)  ret.status = osOK;
 8007c0e:	1e23      	subs	r3, r4, #0
 8007c10:	bf18      	it	ne
 8007c12:	2301      	movne	r3, #1
 8007c14:	019b      	lsls	r3, r3, #6
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8007c16:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8007c18:	ab04      	add	r3, sp, #16
 8007c1a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007c1e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8007c22:	4628      	mov	r0, r5
 8007c24:	b005      	add	sp, #20
 8007c26:	bd30      	pop	{r4, r5, pc}
    else if(ret.value.signals < 0)
 8007c28:	9b02      	ldr	r3, [sp, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	bfac      	ite	ge
 8007c2e:	2308      	movge	r3, #8
 8007c30:	2386      	movlt	r3, #134	; 0x86
 8007c32:	e7f0      	b.n	8007c16 <osSignalWait+0x26>
 8007c34:	2382      	movs	r3, #130	; 0x82
 8007c36:	e7ee      	b.n	8007c16 <osSignalWait+0x26>

08007c38 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007c38:	4603      	mov	r3, r0
 8007c3a:	b513      	push	{r0, r1, r4, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007c3c:	685c      	ldr	r4, [r3, #4]
{ 
 8007c3e:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 8007c40:	b164      	cbz	r4, 8007c5c <osSemaphoreCreate+0x24>
    if (count == 1) {
 8007c42:	2901      	cmp	r1, #1
 8007c44:	d119      	bne.n	8007c7a <osSemaphoreCreate+0x42>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007c46:	2303      	movs	r3, #3
 8007c48:	2200      	movs	r2, #0
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	4623      	mov	r3, r4
 8007c50:	f000 f9b9 	bl	8007fc6 <xQueueGenericCreateStatic>
 8007c54:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007c56:	4620      	mov	r0, r4
 8007c58:	b002      	add	sp, #8
 8007c5a:	bd10      	pop	{r4, pc}
    if (count == 1) {
 8007c5c:	2901      	cmp	r1, #1
 8007c5e:	d1fa      	bne.n	8007c56 <osSemaphoreCreate+0x1e>
      vSemaphoreCreateBinary(sema);
 8007c60:	4621      	mov	r1, r4
 8007c62:	2203      	movs	r2, #3
 8007c64:	f000 f9f8 	bl	8008058 <xQueueGenericCreate>
 8007c68:	4604      	mov	r4, r0
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d0f3      	beq.n	8007c56 <osSemaphoreCreate+0x1e>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	461a      	mov	r2, r3
 8007c72:	4619      	mov	r1, r3
 8007c74:	f000 fa14 	bl	80080a0 <xQueueGenericSend>
 8007c78:	e7ed      	b.n	8007c56 <osSemaphoreCreate+0x1e>
      return NULL;
 8007c7a:	2400      	movs	r4, #0
 8007c7c:	e7eb      	b.n	8007c56 <osSemaphoreCreate+0x1e>

08007c7e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007c7e:	4603      	mov	r3, r0
 8007c80:	b513      	push	{r0, r1, r4, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007c82:	c807      	ldmia	r0, {r0, r1, r2}
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007c84:	b10a      	cbz	r2, 8007c8a <osMessageCreate+0xc>
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	b92b      	cbnz	r3, 8007c96 <osMessageCreate+0x18>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007c8a:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007c8c:	b002      	add	sp, #8
 8007c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007c92:	f000 b9e1 	b.w	8008058 <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007c96:	2400      	movs	r4, #0
 8007c98:	9400      	str	r4, [sp, #0]
 8007c9a:	f000 f994 	bl	8007fc6 <xQueueGenericCreateStatic>
}
 8007c9e:	b002      	add	sp, #8
 8007ca0:	bd10      	pop	{r4, pc}

08007ca2 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007ca2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8007ca4:	2400      	movs	r4, #0
{
 8007ca6:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007ca8:	9403      	str	r4, [sp, #12]
 8007caa:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8007cae:	b1b3      	cbz	r3, 8007cde <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007cb0:	4623      	mov	r3, r4
 8007cb2:	aa03      	add	r2, sp, #12
 8007cb4:	a901      	add	r1, sp, #4
 8007cb6:	f000 faa6 	bl	8008206 <xQueueGenericSendFromISR>
 8007cba:	2801      	cmp	r0, #1
 8007cbc:	d117      	bne.n	8007cee <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007cbe:	9b03      	ldr	r3, [sp, #12]
 8007cc0:	b913      	cbnz	r3, 8007cc8 <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8007cc2:	2000      	movs	r0, #0
}
 8007cc4:	b004      	add	sp, #16
 8007cc6:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8007cc8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	e7f1      	b.n	8007cc2 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007cde:	2a01      	cmp	r2, #1
 8007ce0:	bf38      	it	cc
 8007ce2:	2201      	movcc	r2, #1
 8007ce4:	a901      	add	r1, sp, #4
 8007ce6:	f000 f9db 	bl	80080a0 <xQueueGenericSend>
 8007cea:	2801      	cmp	r0, #1
 8007cec:	d0e9      	beq.n	8007cc2 <osMessagePut+0x20>
      return osErrorOS;
 8007cee:	20ff      	movs	r0, #255	; 0xff
 8007cf0:	e7e8      	b.n	8007cc4 <osMessagePut+0x22>

08007cf2 <osMessageGet>:
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8007cf2:	2300      	movs	r3, #0
{
 8007cf4:	b530      	push	{r4, r5, lr}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	4614      	mov	r4, r2
 8007cfc:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8007cfe:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8007d00:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8007d02:	b911      	cbnz	r1, 8007d0a <osMessageGet+0x18>
    event.status = osErrorParameter;
 8007d04:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8007d06:	9301      	str	r3, [sp, #4]
 8007d08:	e018      	b.n	8007d3c <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8007d10:	b1e3      	cbz	r3, 8007d4c <osMessageGet+0x5a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007d12:	466a      	mov	r2, sp
 8007d14:	a902      	add	r1, sp, #8
 8007d16:	f000 fb76 	bl	8008406 <xQueueReceiveFromISR>
 8007d1a:	1e43      	subs	r3, r0, #1
 8007d1c:	4258      	negs	r0, r3
 8007d1e:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 8007d20:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007d22:	0100      	lsls	r0, r0, #4
 8007d24:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8007d26:	b14b      	cbz	r3, 8007d3c <osMessageGet+0x4a>
 8007d28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d30:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	f3bf 8f6f 	isb	sy
    return event;
 8007d3c:	ab04      	add	r3, sp, #16
 8007d3e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007d42:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 8007d46:	4628      	mov	r0, r5
 8007d48:	b005      	add	sp, #20
 8007d4a:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007d4c:	a902      	add	r1, sp, #8
 8007d4e:	f000 fabb 	bl	80082c8 <xQueueReceive>
 8007d52:	2801      	cmp	r0, #1
 8007d54:	d101      	bne.n	8007d5a <osMessageGet+0x68>
      event.status = osEventMessage;
 8007d56:	2310      	movs	r3, #16
 8007d58:	e7d5      	b.n	8007d06 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007d5a:	3c00      	subs	r4, #0
 8007d5c:	bf18      	it	ne
 8007d5e:	2401      	movne	r4, #1
 8007d60:	01a4      	lsls	r4, r4, #6
 8007d62:	9401      	str	r4, [sp, #4]
  return event;
 8007d64:	e7ea      	b.n	8007d3c <osMessageGet+0x4a>

08007d66 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8007d66:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8007d68:	f001 f86c 	bl	8008e44 <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	bd08      	pop	{r3, pc}

08007d70 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8007d70:	b508      	push	{r3, lr}
 8007d72:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8007d76:	b17b      	cbz	r3, 8007d98 <osThreadResume+0x28>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8007d78:	f000 fdfe 	bl	8008978 <xTaskResumeFromISR>
 8007d7c:	2801      	cmp	r0, #1
 8007d7e:	d109      	bne.n	8007d94 <osThreadResume+0x24>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8007d80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d88:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	f3bf 8f6f 	isb	sy
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 8007d94:	2000      	movs	r0, #0
 8007d96:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 8007d98:	f000 fdac 	bl	80088f4 <vTaskResume>
 8007d9c:	e7fa      	b.n	8007d94 <osThreadResume+0x24>

08007d9e <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8007d9e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8007da0:	2901      	cmp	r1, #1
 8007da2:	bf38      	it	cc
 8007da4:	2101      	movcc	r1, #1
 8007da6:	f000 ff9d 	bl	8008ce4 <vTaskDelayUntil>
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8007daa:	2000      	movs	r0, #0
 8007dac:	bd08      	pop	{r3, pc}

08007dae <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007dae:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007db2:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007db6:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dba:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dbc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007dc2:	4770      	bx	lr

08007dc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007dc8:	4770      	bx	lr

08007dca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007dca:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007dcc:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007dce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007dd0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dd2:	689a      	ldr	r2, [r3, #8]
 8007dd4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007dd6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007dd8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007dda:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007ddc:	3301      	adds	r3, #1
 8007dde:	6003      	str	r3, [r0, #0]
}
 8007de0:	4770      	bx	lr

08007de2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007de2:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007de4:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007de6:	1c63      	adds	r3, r4, #1
 8007de8:	d10a      	bne.n	8007e00 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dea:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007df0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007df2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007df4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007df6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007df8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	6003      	str	r3, [r0, #0]
}
 8007dfe:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e00:	f100 0208 	add.w	r2, r0, #8
 8007e04:	4613      	mov	r3, r2
 8007e06:	6852      	ldr	r2, [r2, #4]
 8007e08:	6815      	ldr	r5, [r2, #0]
 8007e0a:	42a5      	cmp	r5, r4
 8007e0c:	d9fa      	bls.n	8007e04 <vListInsert+0x22>
 8007e0e:	e7ed      	b.n	8007dec <vListInsert+0xa>

08007e10 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007e10:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e12:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007e16:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e18:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e1a:	6859      	ldr	r1, [r3, #4]
 8007e1c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e1e:	bf08      	it	eq
 8007e20:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007e22:	2200      	movs	r2, #0
 8007e24:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	3a01      	subs	r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e2c:	6818      	ldr	r0, [r3, #0]
}
 8007e2e:	4770      	bx	lr

08007e30 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e30:	b510      	push	{r4, lr}
 8007e32:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e34:	f001 fd66 	bl	8009904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e38:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007e3a:	f001 fd83 	bl	8009944 <vPortExitCritical>

	return xReturn;
}
 8007e3e:	fab4 f084 	clz	r0, r4
 8007e42:	0940      	lsrs	r0, r0, #5
 8007e44:	bd10      	pop	{r4, pc}

08007e46 <prvCopyDataToQueue>:
{
 8007e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e48:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e4a:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007e4c:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e4e:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e50:	b952      	cbnz	r2, 8007e68 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e52:	6807      	ldr	r7, [r0, #0]
 8007e54:	bb47      	cbnz	r7, 8007ea8 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007e56:	6840      	ldr	r0, [r0, #4]
 8007e58:	f001 f93a 	bl	80090d0 <xTaskPriorityDisinherit>
 8007e5c:	4605      	mov	r5, r0
				pxQueue->pxMutexHolder = NULL;
 8007e5e:	6067      	str	r7, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e60:	3601      	adds	r6, #1
}
 8007e62:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e64:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007e68:	b965      	cbnz	r5, 8007e84 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007e6a:	6880      	ldr	r0, [r0, #8]
 8007e6c:	f002 fb33 	bl	800a4d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007e70:	68a3      	ldr	r3, [r4, #8]
 8007e72:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007e74:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e76:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007e78:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d3f0      	bcc.n	8007e60 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	60a3      	str	r3, [r4, #8]
 8007e82:	e7ed      	b.n	8007e60 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e84:	68c0      	ldr	r0, [r0, #12]
 8007e86:	f002 fb26 	bl	800a4d6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007e8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007e8c:	68e3      	ldr	r3, [r4, #12]
 8007e8e:	4251      	negs	r1, r2
 8007e90:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e92:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007e94:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e96:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007e98:	bf3e      	ittt	cc
 8007e9a:	6863      	ldrcc	r3, [r4, #4]
 8007e9c:	185b      	addcc	r3, r3, r1
 8007e9e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007ea0:	2d02      	cmp	r5, #2
 8007ea2:	d101      	bne.n	8007ea8 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ea4:	b116      	cbz	r6, 8007eac <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8007ea6:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8007ea8:	2500      	movs	r5, #0
 8007eaa:	e7d9      	b.n	8007e60 <prvCopyDataToQueue+0x1a>
 8007eac:	4635      	mov	r5, r6
 8007eae:	e7d7      	b.n	8007e60 <prvCopyDataToQueue+0x1a>

08007eb0 <prvCopyDataFromQueue>:
{
 8007eb0:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8007eb4:	4608      	mov	r0, r1
 8007eb6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007eb8:	b162      	cbz	r2, 8007ed4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007eba:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ebc:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007ebe:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ec0:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007ec2:	bf28      	it	cs
 8007ec4:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007ec6:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007ec8:	bf28      	it	cs
 8007eca:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007ecc:	68d9      	ldr	r1, [r3, #12]
}
 8007ece:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007ed0:	f002 bb01 	b.w	800a4d6 <memcpy>
}
 8007ed4:	bc10      	pop	{r4}
 8007ed6:	4770      	bx	lr

08007ed8 <prvUnlockQueue>:
{
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007edc:	f001 fd12 	bl	8009904 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007ee0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ee4:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007ee8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007eea:	2d00      	cmp	r5, #0
 8007eec:	dc14      	bgt.n	8007f18 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007eee:	23ff      	movs	r3, #255	; 0xff
 8007ef0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007ef4:	f001 fd26 	bl	8009944 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007ef8:	f001 fd04 	bl	8009904 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007efc:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f00:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8007f04:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f06:	2d00      	cmp	r5, #0
 8007f08:	dc12      	bgt.n	8007f30 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8007f0a:	23ff      	movs	r3, #255	; 0xff
 8007f0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8007f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007f14:	f001 bd16 	b.w	8009944 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0e7      	beq.n	8007eee <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f001 f836 	bl	8008f90 <xTaskRemoveFromEventList>
 8007f24:	b108      	cbz	r0, 8007f2a <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007f26:	f001 f8bd 	bl	80090a4 <vTaskMissedYield>
			--cTxLock;
 8007f2a:	3d01      	subs	r5, #1
 8007f2c:	b26d      	sxtb	r5, r5
 8007f2e:	e7dc      	b.n	8007eea <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f30:	6923      	ldr	r3, [r4, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0e9      	beq.n	8007f0a <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f36:	4630      	mov	r0, r6
 8007f38:	f001 f82a 	bl	8008f90 <xTaskRemoveFromEventList>
 8007f3c:	b108      	cbz	r0, 8007f42 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007f3e:	f001 f8b1 	bl	80090a4 <vTaskMissedYield>
				--cRxLock;
 8007f42:	3d01      	subs	r5, #1
 8007f44:	b26d      	sxtb	r5, r5
 8007f46:	e7de      	b.n	8007f06 <prvUnlockQueue+0x2e>

08007f48 <xQueueGenericReset>:
{
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	b940      	cbnz	r0, 8007f62 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	e7fe      	b.n	8007f60 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8007f62:	f001 fccf 	bl	8009904 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007f66:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8007f6a:	434b      	muls	r3, r1
 8007f6c:	6822      	ldr	r2, [r4, #0]
 8007f6e:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007f70:	1a5b      	subs	r3, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007f72:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f74:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f76:	2000      	movs	r0, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007f78:	441a      	add	r2, r3
		pxQueue->cRxLock = queueUNLOCKED;
 8007f7a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f7c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007f7e:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f80:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007f88:	b9a5      	cbnz	r5, 8007fb4 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f8a:	6923      	ldr	r3, [r4, #16]
 8007f8c:	b173      	cbz	r3, 8007fac <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f8e:	f104 0010 	add.w	r0, r4, #16
 8007f92:	f000 fffd 	bl	8008f90 <xTaskRemoveFromEventList>
 8007f96:	b148      	cbz	r0, 8007fac <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8007f98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fa0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007fac:	f001 fcca 	bl	8009944 <vPortExitCritical>
}
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007fb4:	f104 0010 	add.w	r0, r4, #16
 8007fb8:	f7ff fef9 	bl	8007dae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007fbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007fc0:	f7ff fef5 	bl	8007dae <vListInitialise>
 8007fc4:	e7f2      	b.n	8007fac <xQueueGenericReset+0x64>

08007fc6 <xQueueGenericCreateStatic>:
	{
 8007fc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fc8:	460d      	mov	r5, r1
 8007fca:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fcc:	b940      	cbnz	r0, 8007fe0 <xQueueGenericCreateStatic+0x1a>
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	e7fe      	b.n	8007fde <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8007fe0:	b943      	cbnz	r3, 8007ff4 <xQueueGenericCreateStatic+0x2e>
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	e7fe      	b.n	8007ff2 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ff4:	b14a      	cbz	r2, 800800a <xQueueGenericCreateStatic+0x44>
 8007ff6:	b991      	cbnz	r1, 800801e <xQueueGenericCreateStatic+0x58>
 8007ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	e7fe      	b.n	8008008 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800800a:	b141      	cbz	r1, 800801e <xQueueGenericCreateStatic+0x58>
 800800c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	e7fe      	b.n	800801c <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800801e:	2348      	movs	r3, #72	; 0x48
 8008020:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008022:	9b01      	ldr	r3, [sp, #4]
 8008024:	2b48      	cmp	r3, #72	; 0x48
 8008026:	d008      	beq.n	800803a <xQueueGenericCreateStatic+0x74>
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	e7fe      	b.n	8008038 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800803a:	2101      	movs	r1, #1
	if( uxItemSize == ( UBaseType_t ) 0 )
 800803c:	2d00      	cmp	r5, #0
 800803e:	bf08      	it	eq
 8008040:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8008042:	e9c4 050f 	strd	r0, r5, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008046:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800804a:	4620      	mov	r0, r4
 800804c:	6022      	str	r2, [r4, #0]
 800804e:	f7ff ff7b 	bl	8007f48 <xQueueGenericReset>
	}
 8008052:	4620      	mov	r0, r4
 8008054:	b003      	add	sp, #12
 8008056:	bd30      	pop	{r4, r5, pc}

08008058 <xQueueGenericCreate>:
	{
 8008058:	b570      	push	{r4, r5, r6, lr}
 800805a:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800805c:	4606      	mov	r6, r0
 800805e:	b940      	cbnz	r0, 8008072 <xQueueGenericCreate+0x1a>
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	e7fe      	b.n	8008070 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008072:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008074:	3048      	adds	r0, #72	; 0x48
 8008076:	f001 fd75 	bl	8009b64 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800807a:	4604      	mov	r4, r0
 800807c:	b160      	cbz	r0, 8008098 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800807e:	2300      	movs	r3, #0
 8008080:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008084:	b155      	cbz	r5, 800809c <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008086:	f100 0348 	add.w	r3, r0, #72	; 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800808a:	2101      	movs	r1, #1
 800808c:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800808e:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 8008092:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008094:	f7ff ff58 	bl	8007f48 <xQueueGenericReset>
	}
 8008098:	4620      	mov	r0, r4
 800809a:	bd70      	pop	{r4, r5, r6, pc}
 800809c:	4603      	mov	r3, r0
 800809e:	e7f4      	b.n	800808a <xQueueGenericCreate+0x32>

080080a0 <xQueueGenericSend>:
{
 80080a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080a4:	b085      	sub	sp, #20
 80080a6:	4688      	mov	r8, r1
 80080a8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80080aa:	4604      	mov	r4, r0
{
 80080ac:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80080ae:	b940      	cbnz	r0, 80080c2 <xQueueGenericSend+0x22>
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	e7fe      	b.n	80080c0 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080c2:	b951      	cbnz	r1, 80080da <xQueueGenericSend+0x3a>
 80080c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80080c6:	b143      	cbz	r3, 80080da <xQueueGenericSend+0x3a>
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	e7fe      	b.n	80080d8 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080da:	2f02      	cmp	r7, #2
 80080dc:	d10b      	bne.n	80080f6 <xQueueGenericSend+0x56>
 80080de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d008      	beq.n	80080f6 <xQueueGenericSend+0x56>
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	e7fe      	b.n	80080f4 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080f6:	f000 ffdb 	bl	80090b0 <xTaskGetSchedulerState>
 80080fa:	4606      	mov	r6, r0
 80080fc:	b950      	cbnz	r0, 8008114 <xQueueGenericSend+0x74>
 80080fe:	9b01      	ldr	r3, [sp, #4]
 8008100:	b14b      	cbz	r3, 8008116 <xQueueGenericSend+0x76>
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	e7fe      	b.n	8008112 <xQueueGenericSend+0x72>
 8008114:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008116:	f04f 0900 	mov.w	r9, #0
 800811a:	e037      	b.n	800818c <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800811c:	9d01      	ldr	r5, [sp, #4]
 800811e:	b91d      	cbnz	r5, 8008128 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8008120:	f001 fc10 	bl	8009944 <vPortExitCritical>
			return errQUEUE_FULL;
 8008124:	2000      	movs	r0, #0
 8008126:	e052      	b.n	80081ce <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 8008128:	b916      	cbnz	r6, 8008130 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800812a:	a802      	add	r0, sp, #8
 800812c:	f000 ff72 	bl	8009014 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008130:	f001 fc08 	bl	8009944 <vPortExitCritical>
		vTaskSuspendAll();
 8008134:	f000 fcc0 	bl	8008ab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008138:	f001 fbe4 	bl	8009904 <vPortEnterCritical>
 800813c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008140:	2bff      	cmp	r3, #255	; 0xff
 8008142:	bf08      	it	eq
 8008144:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8008148:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800814c:	2bff      	cmp	r3, #255	; 0xff
 800814e:	bf08      	it	eq
 8008150:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8008154:	f001 fbf6 	bl	8009944 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008158:	a901      	add	r1, sp, #4
 800815a:	a802      	add	r0, sp, #8
 800815c:	f000 ff66 	bl	800902c <xTaskCheckForTimeOut>
 8008160:	2800      	cmp	r0, #0
 8008162:	d14a      	bne.n	80081fa <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008164:	f001 fbce 	bl	8009904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008168:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800816a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800816c:	429a      	cmp	r2, r3
 800816e:	d131      	bne.n	80081d4 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008170:	f001 fbe8 	bl	8009944 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008174:	9901      	ldr	r1, [sp, #4]
 8008176:	f104 0010 	add.w	r0, r4, #16
 800817a:	f000 fecf 	bl	8008f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800817e:	4620      	mov	r0, r4
 8008180:	f7ff feaa 	bl	8007ed8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008184:	f000 fd38 	bl	8008bf8 <xTaskResumeAll>
 8008188:	b360      	cbz	r0, 80081e4 <xQueueGenericSend+0x144>
 800818a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800818c:	f001 fbba 	bl	8009904 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008190:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008192:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008194:	429a      	cmp	r2, r3
 8008196:	d301      	bcc.n	800819c <xQueueGenericSend+0xfc>
 8008198:	2f02      	cmp	r7, #2
 800819a:	d1bf      	bne.n	800811c <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800819c:	463a      	mov	r2, r7
 800819e:	4641      	mov	r1, r8
 80081a0:	4620      	mov	r0, r4
 80081a2:	f7ff fe50 	bl	8007e46 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081a8:	b11b      	cbz	r3, 80081b2 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80081ae:	f000 feef 	bl	8008f90 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80081b2:	b148      	cbz	r0, 80081c8 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 80081b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80081b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80081c8:	f001 fbbc 	bl	8009944 <vPortExitCritical>
				return pdPASS;
 80081cc:	2001      	movs	r0, #1
}
 80081ce:	b005      	add	sp, #20
 80081d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 80081d4:	f001 fbb6 	bl	8009944 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80081d8:	4620      	mov	r0, r4
 80081da:	f7ff fe7d 	bl	8007ed8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081de:	f000 fd0b 	bl	8008bf8 <xTaskResumeAll>
 80081e2:	e7d2      	b.n	800818a <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 80081e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80081e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	e7c7      	b.n	800818a <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 80081fa:	4620      	mov	r0, r4
 80081fc:	f7ff fe6c 	bl	8007ed8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008200:	f000 fcfa 	bl	8008bf8 <xTaskResumeAll>
 8008204:	e78e      	b.n	8008124 <xQueueGenericSend+0x84>

08008206 <xQueueGenericSendFromISR>:
{
 8008206:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800820a:	4689      	mov	r9, r1
 800820c:	4690      	mov	r8, r2
 800820e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008210:	4604      	mov	r4, r0
 8008212:	b940      	cbnz	r0, 8008226 <xQueueGenericSendFromISR+0x20>
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	e7fe      	b.n	8008224 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008226:	b951      	cbnz	r1, 800823e <xQueueGenericSendFromISR+0x38>
 8008228:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800822a:	b143      	cbz	r3, 800823e <xQueueGenericSendFromISR+0x38>
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	e7fe      	b.n	800823c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800823e:	2f02      	cmp	r7, #2
 8008240:	d10b      	bne.n	800825a <xQueueGenericSendFromISR+0x54>
 8008242:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008244:	2b01      	cmp	r3, #1
 8008246:	d008      	beq.n	800825a <xQueueGenericSendFromISR+0x54>
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	e7fe      	b.n	8008258 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800825a:	f001 fc2f 	bl	8009abc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800825e:	f3ef 8611 	mrs	r6, BASEPRI
 8008262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008272:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008274:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008276:	429a      	cmp	r2, r3
 8008278:	d301      	bcc.n	800827e <xQueueGenericSendFromISR+0x78>
 800827a:	2f02      	cmp	r7, #2
 800827c:	d122      	bne.n	80082c4 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 800827e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008282:	463a      	mov	r2, r7
 8008284:	4649      	mov	r1, r9
 8008286:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8008288:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800828a:	f7ff fddc 	bl	8007e46 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800828e:	1c6b      	adds	r3, r5, #1
 8008290:	d113      	bne.n	80082ba <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008294:	b90b      	cbnz	r3, 800829a <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 8008296:	2001      	movs	r0, #1
 8008298:	e00b      	b.n	80082b2 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800829a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800829e:	f000 fe77 	bl	8008f90 <xTaskRemoveFromEventList>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d0f7      	beq.n	8008296 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 80082a6:	f1b8 0f00 	cmp.w	r8, #0
 80082aa:	d0f4      	beq.n	8008296 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082ac:	2001      	movs	r0, #1
 80082ae:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082b2:	f386 8811 	msr	BASEPRI, r6
}
 80082b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082ba:	3501      	adds	r5, #1
 80082bc:	b26d      	sxtb	r5, r5
 80082be:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80082c2:	e7e8      	b.n	8008296 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 80082c4:	2000      	movs	r0, #0
 80082c6:	e7f4      	b.n	80082b2 <xQueueGenericSendFromISR+0xac>

080082c8 <xQueueReceive>:
{
 80082c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80082cc:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 80082ce:	4604      	mov	r4, r0
{
 80082d0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80082d2:	b940      	cbnz	r0, 80082e6 <xQueueReceive+0x1e>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	e7fe      	b.n	80082e4 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082e6:	b951      	cbnz	r1, 80082fe <xQueueReceive+0x36>
 80082e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80082ea:	b143      	cbz	r3, 80082fe <xQueueReceive+0x36>
 80082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	e7fe      	b.n	80082fc <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082fe:	f000 fed7 	bl	80090b0 <xTaskGetSchedulerState>
 8008302:	4606      	mov	r6, r0
 8008304:	b950      	cbnz	r0, 800831c <xQueueReceive+0x54>
 8008306:	9b01      	ldr	r3, [sp, #4]
 8008308:	b14b      	cbz	r3, 800831e <xQueueReceive+0x56>
 800830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	e7fe      	b.n	800831a <xQueueReceive+0x52>
 800831c:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800831e:	f04f 0800 	mov.w	r8, #0
 8008322:	e03d      	b.n	80083a0 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008324:	9d01      	ldr	r5, [sp, #4]
 8008326:	b91d      	cbnz	r5, 8008330 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 8008328:	f001 fb0c 	bl	8009944 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800832c:	2000      	movs	r0, #0
 800832e:	e056      	b.n	80083de <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 8008330:	b916      	cbnz	r6, 8008338 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008332:	a802      	add	r0, sp, #8
 8008334:	f000 fe6e 	bl	8009014 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008338:	f001 fb04 	bl	8009944 <vPortExitCritical>
		vTaskSuspendAll();
 800833c:	f000 fbbc 	bl	8008ab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008340:	f001 fae0 	bl	8009904 <vPortEnterCritical>
 8008344:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008348:	2bff      	cmp	r3, #255	; 0xff
 800834a:	bf08      	it	eq
 800834c:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8008350:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008354:	2bff      	cmp	r3, #255	; 0xff
 8008356:	bf08      	it	eq
 8008358:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800835c:	f001 faf2 	bl	8009944 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008360:	a901      	add	r1, sp, #4
 8008362:	a802      	add	r0, sp, #8
 8008364:	f000 fe62 	bl	800902c <xTaskCheckForTimeOut>
 8008368:	2800      	cmp	r0, #0
 800836a:	d141      	bne.n	80083f0 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800836c:	4620      	mov	r0, r4
 800836e:	f7ff fd5f 	bl	8007e30 <prvIsQueueEmpty>
 8008372:	b3b8      	cbz	r0, 80083e4 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008374:	9901      	ldr	r1, [sp, #4]
 8008376:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800837a:	f000 fdcf 	bl	8008f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800837e:	4620      	mov	r0, r4
 8008380:	f7ff fdaa 	bl	8007ed8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008384:	f000 fc38 	bl	8008bf8 <xTaskResumeAll>
 8008388:	b948      	cbnz	r0, 800839e <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800838a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800838e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008392:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80083a0:	f001 fab0 	bl	8009904 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083a4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083a6:	2d00      	cmp	r5, #0
 80083a8:	d0bc      	beq.n	8008324 <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083aa:	4639      	mov	r1, r7
 80083ac:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083ae:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083b0:	f7ff fd7e 	bl	8007eb0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083b4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083b6:	6923      	ldr	r3, [r4, #16]
 80083b8:	b173      	cbz	r3, 80083d8 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083ba:	f104 0010 	add.w	r0, r4, #16
 80083be:	f000 fde7 	bl	8008f90 <xTaskRemoveFromEventList>
 80083c2:	b148      	cbz	r0, 80083d8 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 80083c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80083c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80083d8:	f001 fab4 	bl	8009944 <vPortExitCritical>
				return pdPASS;
 80083dc:	2001      	movs	r0, #1
}
 80083de:	b004      	add	sp, #16
 80083e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 80083e4:	4620      	mov	r0, r4
 80083e6:	f7ff fd77 	bl	8007ed8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083ea:	f000 fc05 	bl	8008bf8 <xTaskResumeAll>
 80083ee:	e7d6      	b.n	800839e <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 80083f0:	4620      	mov	r0, r4
 80083f2:	f7ff fd71 	bl	8007ed8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083f6:	f000 fbff 	bl	8008bf8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083fa:	4620      	mov	r0, r4
 80083fc:	f7ff fd18 	bl	8007e30 <prvIsQueueEmpty>
 8008400:	2800      	cmp	r0, #0
 8008402:	d0cc      	beq.n	800839e <xQueueReceive+0xd6>
 8008404:	e792      	b.n	800832c <xQueueReceive+0x64>

08008406 <xQueueReceiveFromISR>:
{
 8008406:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800840a:	4689      	mov	r9, r1
 800840c:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800840e:	4605      	mov	r5, r0
 8008410:	b940      	cbnz	r0, 8008424 <xQueueReceiveFromISR+0x1e>
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	e7fe      	b.n	8008422 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008424:	b951      	cbnz	r1, 800843c <xQueueReceiveFromISR+0x36>
 8008426:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008428:	b143      	cbz	r3, 800843c <xQueueReceiveFromISR+0x36>
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	e7fe      	b.n	800843a <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800843c:	f001 fb3e 	bl	8009abc <vPortValidateInterruptPriority>
	__asm volatile
 8008440:	f3ef 8711 	mrs	r7, BASEPRI
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008454:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008456:	b31c      	cbz	r4, 80084a0 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008458:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800845c:	4649      	mov	r1, r9
 800845e:	4628      	mov	r0, r5
			const int8_t cRxLock = pxQueue->cRxLock;
 8008460:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008462:	f7ff fd25 	bl	8007eb0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008466:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8008468:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800846a:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800846c:	d113      	bne.n	8008496 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800846e:	692b      	ldr	r3, [r5, #16]
 8008470:	b90b      	cbnz	r3, 8008476 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8008472:	2001      	movs	r0, #1
 8008474:	e00b      	b.n	800848e <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008476:	f105 0010 	add.w	r0, r5, #16
 800847a:	f000 fd89 	bl	8008f90 <xTaskRemoveFromEventList>
 800847e:	2800      	cmp	r0, #0
 8008480:	d0f7      	beq.n	8008472 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8008482:	f1b8 0f00 	cmp.w	r8, #0
 8008486:	d0f4      	beq.n	8008472 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008488:	2001      	movs	r0, #1
 800848a:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800848e:	f387 8811 	msr	BASEPRI, r7
}
 8008492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008496:	3601      	adds	r6, #1
 8008498:	b276      	sxtb	r6, r6
 800849a:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800849e:	e7e8      	b.n	8008472 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 80084a0:	4620      	mov	r0, r4
 80084a2:	e7f4      	b.n	800848e <xQueueReceiveFromISR+0x88>

080084a4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084a4:	2300      	movs	r3, #0
	{
 80084a6:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80084a8:	4a06      	ldr	r2, [pc, #24]	; (80084c4 <vQueueAddToRegistry+0x20>)
 80084aa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80084ae:	b92c      	cbnz	r4, 80084bc <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80084b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80084b4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80084b8:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80084ba:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084bc:	3301      	adds	r3, #1
 80084be:	2b08      	cmp	r3, #8
 80084c0:	d1f3      	bne.n	80084aa <vQueueAddToRegistry+0x6>
 80084c2:	e7fa      	b.n	80084ba <vQueueAddToRegistry+0x16>
 80084c4:	2000194c 	.word	0x2000194c

080084c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	4604      	mov	r4, r0
 80084cc:	460d      	mov	r5, r1
 80084ce:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80084d0:	f001 fa18 	bl	8009904 <vPortEnterCritical>
 80084d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80084d8:	2bff      	cmp	r3, #255	; 0xff
 80084da:	bf04      	itt	eq
 80084dc:	2300      	moveq	r3, #0
 80084de:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80084e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80084e6:	2bff      	cmp	r3, #255	; 0xff
 80084e8:	bf04      	itt	eq
 80084ea:	2300      	moveq	r3, #0
 80084ec:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80084f0:	f001 fa28 	bl	8009944 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80084f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80084f6:	b92b      	cbnz	r3, 8008504 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80084f8:	4632      	mov	r2, r6
 80084fa:	4629      	mov	r1, r5
 80084fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008500:	f000 fd26 	bl	8008f50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008504:	4620      	mov	r0, r4
	}
 8008506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800850a:	f7ff bce5 	b.w	8007ed8 <prvUnlockQueue>
	...

08008510 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008514:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008516:	f001 f9f5 	bl	8009904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800851a:	4b2f      	ldr	r3, [pc, #188]	; (80085d8 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800851c:	4e2f      	ldr	r6, [pc, #188]	; (80085dc <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	4f2f      	ldr	r7, [pc, #188]	; (80085e0 <prvAddNewTaskToReadyList+0xd0>)
 8008522:	3201      	adds	r2, #1
 8008524:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008526:	6835      	ldr	r5, [r6, #0]
 8008528:	2d00      	cmp	r5, #0
 800852a:	d14a      	bne.n	80085c2 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800852c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d11f      	bne.n	8008574 <prvAddNewTaskToReadyList+0x64>
 8008534:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008536:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008538:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800853a:	f7ff fc38 	bl	8007dae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800853e:	2d07      	cmp	r5, #7
 8008540:	f108 0814 	add.w	r8, r8, #20
 8008544:	d1f7      	bne.n	8008536 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008546:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80085e4 <prvAddNewTaskToReadyList+0xd4>
	vListInitialise( &xDelayedTaskList2 );
 800854a:	4d27      	ldr	r5, [pc, #156]	; (80085e8 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 800854c:	4640      	mov	r0, r8
 800854e:	f7ff fc2e 	bl	8007dae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008552:	4628      	mov	r0, r5
 8008554:	f7ff fc2b 	bl	8007dae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008558:	4824      	ldr	r0, [pc, #144]	; (80085ec <prvAddNewTaskToReadyList+0xdc>)
 800855a:	f7ff fc28 	bl	8007dae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800855e:	4824      	ldr	r0, [pc, #144]	; (80085f0 <prvAddNewTaskToReadyList+0xe0>)
 8008560:	f7ff fc25 	bl	8007dae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008564:	4823      	ldr	r0, [pc, #140]	; (80085f4 <prvAddNewTaskToReadyList+0xe4>)
 8008566:	f7ff fc22 	bl	8007dae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800856a:	4b23      	ldr	r3, [pc, #140]	; (80085f8 <prvAddNewTaskToReadyList+0xe8>)
 800856c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008570:	4b22      	ldr	r3, [pc, #136]	; (80085fc <prvAddNewTaskToReadyList+0xec>)
 8008572:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008574:	4a22      	ldr	r2, [pc, #136]	; (8008600 <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 8008576:	4923      	ldr	r1, [pc, #140]	; (8008604 <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 8008578:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800857a:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800857c:	3301      	adds	r3, #1
 800857e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008580:	2301      	movs	r3, #1
 8008582:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008584:	4093      	lsls	r3, r2
 8008586:	4303      	orrs	r3, r0
 8008588:	2014      	movs	r0, #20
 800858a:	600b      	str	r3, [r1, #0]
 800858c:	fb00 7002 	mla	r0, r0, r2, r7
 8008590:	1d21      	adds	r1, r4, #4
 8008592:	f7ff fc1a 	bl	8007dca <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008596:	f001 f9d5 	bl	8009944 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800859a:	4b1b      	ldr	r3, [pc, #108]	; (8008608 <prvAddNewTaskToReadyList+0xf8>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	b173      	cbz	r3, 80085be <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085a0:	6833      	ldr	r3, [r6, #0]
 80085a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d209      	bcs.n	80085be <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 80085aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80085ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	f3bf 8f6f 	isb	sy
}
 80085be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80085c2:	4b11      	ldr	r3, [pc, #68]	; (8008608 <prvAddNewTaskToReadyList+0xf8>)
 80085c4:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if( xSchedulerRunning == pdFALSE )
 80085c8:	2a00      	cmp	r2, #0
 80085ca:	d1d3      	bne.n	8008574 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085cc:	6832      	ldr	r2, [r6, #0]
 80085ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80085d0:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80085d2:	bf98      	it	ls
 80085d4:	6034      	strls	r4, [r6, #0]
 80085d6:	e7cd      	b.n	8008574 <prvAddNewTaskToReadyList+0x64>
 80085d8:	20001a24 	.word	0x20001a24
 80085dc:	2000198c 	.word	0x2000198c
 80085e0:	20001998 	.word	0x20001998
 80085e4:	20001a3c 	.word	0x20001a3c
 80085e8:	20001a50 	.word	0x20001a50
 80085ec:	20001a6c 	.word	0x20001a6c
 80085f0:	20001a98 	.word	0x20001a98
 80085f4:	20001a84 	.word	0x20001a84
 80085f8:	20001990 	.word	0x20001990
 80085fc:	20001994 	.word	0x20001994
 8008600:	20001a34 	.word	0x20001a34
 8008604:	20001a38 	.word	0x20001a38
 8008608:	20001a80 	.word	0x20001a80

0800860c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800860e:	4b1a      	ldr	r3, [pc, #104]	; (8008678 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008610:	4d1a      	ldr	r5, [pc, #104]	; (800867c <prvAddCurrentTaskToDelayedList+0x70>)
{
 8008612:	4606      	mov	r6, r0
const TickType_t xConstTickCount = xTickCount;
 8008614:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008616:	6828      	ldr	r0, [r5, #0]
{
 8008618:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800861a:	3004      	adds	r0, #4
 800861c:	f7ff fbf8 	bl	8007e10 <uxListRemove>
 8008620:	b940      	cbnz	r0, 8008634 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008622:	682a      	ldr	r2, [r5, #0]
 8008624:	4916      	ldr	r1, [pc, #88]	; (8008680 <prvAddCurrentTaskToDelayedList+0x74>)
 8008626:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8008628:	2201      	movs	r2, #1
 800862a:	680b      	ldr	r3, [r1, #0]
 800862c:	4082      	lsls	r2, r0
 800862e:	ea23 0302 	bic.w	r3, r3, r2
 8008632:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008634:	1c73      	adds	r3, r6, #1
 8008636:	d107      	bne.n	8008648 <prvAddCurrentTaskToDelayedList+0x3c>
 8008638:	b137      	cbz	r7, 8008648 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800863a:	6829      	ldr	r1, [r5, #0]
 800863c:	4811      	ldr	r0, [pc, #68]	; (8008684 <prvAddCurrentTaskToDelayedList+0x78>)
 800863e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008640:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008644:	f7ff bbc1 	b.w	8007dca <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	19a4      	adds	r4, r4, r6
 800864c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800864e:	d307      	bcc.n	8008660 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008650:	4b0d      	ldr	r3, [pc, #52]	; (8008688 <prvAddCurrentTaskToDelayedList+0x7c>)
 8008652:	6818      	ldr	r0, [r3, #0]
 8008654:	6829      	ldr	r1, [r5, #0]
}
 8008656:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800865a:	3104      	adds	r1, #4
 800865c:	f7ff bbc1 	b.w	8007de2 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008660:	4b0a      	ldr	r3, [pc, #40]	; (800868c <prvAddCurrentTaskToDelayedList+0x80>)
 8008662:	6818      	ldr	r0, [r3, #0]
 8008664:	6829      	ldr	r1, [r5, #0]
 8008666:	3104      	adds	r1, #4
 8008668:	f7ff fbbb 	bl	8007de2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800866c:	4b08      	ldr	r3, [pc, #32]	; (8008690 <prvAddCurrentTaskToDelayedList+0x84>)
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8008672:	bf88      	it	hi
 8008674:	601c      	strhi	r4, [r3, #0]
}
 8008676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008678:	20001aac 	.word	0x20001aac
 800867c:	2000198c 	.word	0x2000198c
 8008680:	20001a38 	.word	0x20001a38
 8008684:	20001a84 	.word	0x20001a84
 8008688:	20001994 	.word	0x20001994
 800868c:	20001990 	.word	0x20001990
 8008690:	20001a64 	.word	0x20001a64

08008694 <prvTaskIsTaskSuspended>:
		configASSERT( xTask );
 8008694:	b940      	cbnz	r0, 80086a8 <prvTaskIsTaskSuspended+0x14>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	e7fe      	b.n	80086a6 <prvTaskIsTaskSuspended+0x12>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80086a8:	6942      	ldr	r2, [r0, #20]
 80086aa:	4b06      	ldr	r3, [pc, #24]	; (80086c4 <prvTaskIsTaskSuspended+0x30>)
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d107      	bne.n	80086c0 <prvTaskIsTaskSuspended+0x2c>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80086b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80086b2:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <prvTaskIsTaskSuspended+0x34>)
 80086b4:	4298      	cmp	r0, r3
 80086b6:	d003      	beq.n	80086c0 <prvTaskIsTaskSuspended+0x2c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80086b8:	fab0 f080 	clz	r0, r0
 80086bc:	0940      	lsrs	r0, r0, #5
 80086be:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80086c0:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80086c2:	4770      	bx	lr
 80086c4:	20001a84 	.word	0x20001a84
 80086c8:	20001a6c 	.word	0x20001a6c

080086cc <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086cc:	4a06      	ldr	r2, [pc, #24]	; (80086e8 <prvResetNextTaskUnblockTime+0x1c>)
 80086ce:	6813      	ldr	r3, [r2, #0]
 80086d0:	6819      	ldr	r1, [r3, #0]
 80086d2:	4b06      	ldr	r3, [pc, #24]	; (80086ec <prvResetNextTaskUnblockTime+0x20>)
 80086d4:	b919      	cbnz	r1, 80086de <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80086d6:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80086da:	601a      	str	r2, [r3, #0]
}
 80086dc:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80086de:	6812      	ldr	r2, [r2, #0]
 80086e0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80086e2:	68d2      	ldr	r2, [r2, #12]
 80086e4:	6852      	ldr	r2, [r2, #4]
 80086e6:	e7f8      	b.n	80086da <prvResetNextTaskUnblockTime+0xe>
 80086e8:	20001990 	.word	0x20001990
 80086ec:	20001a64 	.word	0x20001a64

080086f0 <prvDeleteTCB>:
	{
 80086f0:	b510      	push	{r4, lr}
 80086f2:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80086f4:	304c      	adds	r0, #76	; 0x4c
 80086f6:	f001 fe1d 	bl	800a334 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086fa:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 80086fe:	b93b      	cbnz	r3, 8008710 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8008700:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008702:	f001 fac1 	bl	8009c88 <vPortFree>
				vPortFree( pxTCB );
 8008706:	4620      	mov	r0, r4
	}
 8008708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800870c:	f001 babc 	b.w	8009c88 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008710:	2b01      	cmp	r3, #1
 8008712:	d0f8      	beq.n	8008706 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008714:	2b02      	cmp	r3, #2
 8008716:	d008      	beq.n	800872a <prvDeleteTCB+0x3a>
 8008718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	e7fe      	b.n	8008728 <prvDeleteTCB+0x38>
	}
 800872a:	bd10      	pop	{r4, pc}

0800872c <prvIdleTask>:
{
 800872c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800872e:	4c13      	ldr	r4, [pc, #76]	; (800877c <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008730:	4f13      	ldr	r7, [pc, #76]	; (8008780 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8008732:	4d14      	ldr	r5, [pc, #80]	; (8008784 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	b973      	cbnz	r3, 8008756 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008738:	4b13      	ldr	r3, [pc, #76]	; (8008788 <prvIdleTask+0x5c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d9f8      	bls.n	8008732 <prvIdleTask+0x6>
				taskYIELD();
 8008740:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008748:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	e7ed      	b.n	8008732 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8008756:	f001 f8d5 	bl	8009904 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800875e:	1d30      	adds	r0, r6, #4
 8008760:	f7ff fb56 	bl	8007e10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	3b01      	subs	r3, #1
 8008768:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	3b01      	subs	r3, #1
 800876e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008770:	f001 f8e8 	bl	8009944 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008774:	4630      	mov	r0, r6
 8008776:	f7ff ffbb 	bl	80086f0 <prvDeleteTCB>
 800877a:	e7db      	b.n	8008734 <prvIdleTask+0x8>
 800877c:	20001a28 	.word	0x20001a28
 8008780:	20001a98 	.word	0x20001a98
 8008784:	20001a24 	.word	0x20001a24
 8008788:	20001998 	.word	0x20001998

0800878c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800878c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008790:	4607      	mov	r7, r0
 8008792:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008796:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800879a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800879c:	3a01      	subs	r2, #1
 800879e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80087a2:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80087a4:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087a8:	1e4b      	subs	r3, r1, #1
 80087aa:	f104 0233 	add.w	r2, r4, #51	; 0x33
 80087ae:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087b0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80087b4:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 80087b8:	b108      	cbz	r0, 80087be <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087ba:	428b      	cmp	r3, r1
 80087bc:	d1f8      	bne.n	80087b0 <prvInitialiseNewTask.constprop.0+0x24>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80087be:	9d08      	ldr	r5, [sp, #32]
 80087c0:	f04f 0a00 	mov.w	sl, #0
 80087c4:	2d06      	cmp	r5, #6
 80087c6:	bf28      	it	cs
 80087c8:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087ca:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80087cc:	e9c4 5a11 	strd	r5, sl, [r4, #68]	; 0x44
	pxNewTCB->uxPriority = uxPriority;
 80087d0:	62e5      	str	r5, [r4, #44]	; 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80087d2:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087d6:	f7ff faf5 	bl	8007dc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087da:	f104 0018 	add.w	r0, r4, #24
 80087de:	f7ff faf1 	bl	8007dc4 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80087e2:	224c      	movs	r2, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087e4:	f1c5 0507 	rsb	r5, r5, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80087e8:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 80087ea:	f8c4 a098 	str.w	sl, [r4, #152]	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80087ee:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80087f0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087f2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80087f4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087f6:	f884 a09c 	strb.w	sl, [r4, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80087fa:	f001 fd6d 	bl	800a2d8 <memset>
 80087fe:	4b0a      	ldr	r3, [pc, #40]	; (8008828 <prvInitialiseNewTask.constprop.0+0x9c>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008800:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008802:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008806:	6523      	str	r3, [r4, #80]	; 0x50
 8008808:	33d0      	adds	r3, #208	; 0xd0
 800880a:	6562      	str	r2, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800880c:	4630      	mov	r0, r6
 800880e:	464a      	mov	r2, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008810:	65a3      	str	r3, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008812:	f001 f853 	bl	80098bc <pxPortInitialiseStack>
 8008816:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008818:	f1b8 0f00 	cmp.w	r8, #0
 800881c:	d001      	beq.n	8008822 <prvInitialiseNewTask.constprop.0+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800881e:	f8c8 4000 	str.w	r4, [r8]
}
 8008822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008826:	bf00      	nop
 8008828:	20002bd8 	.word	0x20002bd8

0800882c <xTaskCreateStatic>:
	{
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	b086      	sub	sp, #24
 8008830:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008834:	b945      	cbnz	r5, 8008848 <xTaskCreateStatic+0x1c>
 8008836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	e7fe      	b.n	8008846 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008848:	b944      	cbnz	r4, 800885c <xTaskCreateStatic+0x30>
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	e7fe      	b.n	800885a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800885c:	26a0      	movs	r6, #160	; 0xa0
 800885e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008860:	9e05      	ldr	r6, [sp, #20]
 8008862:	2ea0      	cmp	r6, #160	; 0xa0
 8008864:	d008      	beq.n	8008878 <xTaskCreateStatic+0x4c>
 8008866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886a:	f383 8811 	msr	BASEPRI, r3
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	e7fe      	b.n	8008876 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008878:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800887a:	2502      	movs	r5, #2
 800887c:	f884 509d 	strb.w	r5, [r4, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008880:	ad04      	add	r5, sp, #16
 8008882:	9501      	str	r5, [sp, #4]
 8008884:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008886:	9402      	str	r4, [sp, #8]
 8008888:	9500      	str	r5, [sp, #0]
 800888a:	f7ff ff7f 	bl	800878c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800888e:	4620      	mov	r0, r4
 8008890:	f7ff fe3e 	bl	8008510 <prvAddNewTaskToReadyList>
	}
 8008894:	9804      	ldr	r0, [sp, #16]
 8008896:	b006      	add	sp, #24
 8008898:	bd70      	pop	{r4, r5, r6, pc}

0800889a <xTaskCreate>:
	{
 800889a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800889e:	4607      	mov	r7, r0
 80088a0:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088a2:	0090      	lsls	r0, r2, #2
	{
 80088a4:	4688      	mov	r8, r1
 80088a6:	4616      	mov	r6, r2
 80088a8:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088aa:	f001 f95b 	bl	8009b64 <pvPortMalloc>
			if( pxStack != NULL )
 80088ae:	4605      	mov	r5, r0
 80088b0:	b1e8      	cbz	r0, 80088ee <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80088b2:	20a0      	movs	r0, #160	; 0xa0
 80088b4:	f001 f956 	bl	8009b64 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80088b8:	4604      	mov	r4, r0
 80088ba:	b1a8      	cbz	r0, 80088e8 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088bc:	2300      	movs	r3, #0
 80088be:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80088c4:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088c6:	9301      	str	r3, [sp, #4]
 80088c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ca:	4632      	mov	r2, r6
 80088cc:	4641      	mov	r1, r8
 80088ce:	9002      	str	r0, [sp, #8]
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	4638      	mov	r0, r7
 80088d4:	464b      	mov	r3, r9
 80088d6:	f7ff ff59 	bl	800878c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088da:	4620      	mov	r0, r4
 80088dc:	f7ff fe18 	bl	8008510 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80088e0:	2001      	movs	r0, #1
	}
 80088e2:	b005      	add	sp, #20
 80088e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80088e8:	4628      	mov	r0, r5
 80088ea:	f001 f9cd 	bl	8009c88 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80088ee:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80088f2:	e7f6      	b.n	80088e2 <xTaskCreate+0x48>

080088f4 <vTaskResume>:
	{
 80088f4:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 80088f6:	4604      	mov	r4, r0
 80088f8:	b940      	cbnz	r0, 800890c <vTaskResume+0x18>
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	e7fe      	b.n	800890a <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800890c:	4d17      	ldr	r5, [pc, #92]	; (800896c <vTaskResume+0x78>)
 800890e:	682b      	ldr	r3, [r5, #0]
 8008910:	4283      	cmp	r3, r0
 8008912:	d02a      	beq.n	800896a <vTaskResume+0x76>
			taskENTER_CRITICAL();
 8008914:	f000 fff6 	bl	8009904 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008918:	4620      	mov	r0, r4
 800891a:	f7ff febb 	bl	8008694 <prvTaskIsTaskSuspended>
 800891e:	b300      	cbz	r0, 8008962 <vTaskResume+0x6e>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008920:	1d26      	adds	r6, r4, #4
 8008922:	4630      	mov	r0, r6
 8008924:	f7ff fa74 	bl	8007e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008928:	2301      	movs	r3, #1
 800892a:	4911      	ldr	r1, [pc, #68]	; (8008970 <vTaskResume+0x7c>)
 800892c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800892e:	6808      	ldr	r0, [r1, #0]
 8008930:	4093      	lsls	r3, r2
 8008932:	4303      	orrs	r3, r0
 8008934:	2014      	movs	r0, #20
 8008936:	600b      	str	r3, [r1, #0]
 8008938:	4b0e      	ldr	r3, [pc, #56]	; (8008974 <vTaskResume+0x80>)
 800893a:	4631      	mov	r1, r6
 800893c:	fb00 3002 	mla	r0, r0, r2, r3
 8008940:	f7ff fa43 	bl	8007dca <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894a:	429a      	cmp	r2, r3
 800894c:	d309      	bcc.n	8008962 <vTaskResume+0x6e>
						taskYIELD_IF_USING_PREEMPTION();
 800894e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008956:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	f3bf 8f6f 	isb	sy
	}
 8008962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8008966:	f000 bfed 	b.w	8009944 <vPortExitCritical>
	}
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	2000198c 	.word	0x2000198c
 8008970:	20001a38 	.word	0x20001a38
 8008974:	20001998 	.word	0x20001998

08008978 <xTaskResumeFromISR>:
	{
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 800897a:	4605      	mov	r5, r0
 800897c:	b940      	cbnz	r0, 8008990 <xTaskResumeFromISR+0x18>
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	e7fe      	b.n	800898e <xTaskResumeFromISR+0x16>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008990:	f001 f894 	bl	8009abc <vPortValidateInterruptPriority>
	__asm volatile
 8008994:	f3ef 8711 	mrs	r7, BASEPRI
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80089a8:	4628      	mov	r0, r5
 80089aa:	f7ff fe73 	bl	8008694 <prvTaskIsTaskSuspended>
 80089ae:	4604      	mov	r4, r0
 80089b0:	b1e0      	cbz	r0, 80089ec <xTaskResumeFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089b2:	4b14      	ldr	r3, [pc, #80]	; (8008a04 <xTaskResumeFromISR+0x8c>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	b9eb      	cbnz	r3, 80089f4 <xTaskResumeFromISR+0x7c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089b8:	4b13      	ldr	r3, [pc, #76]	; (8008a08 <xTaskResumeFromISR+0x90>)
 80089ba:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80089bc:	681b      	ldr	r3, [r3, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089be:	1d2e      	adds	r6, r5, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089c2:	4630      	mov	r0, r6
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089c4:	429c      	cmp	r4, r3
 80089c6:	bf34      	ite	cc
 80089c8:	2400      	movcc	r4, #0
 80089ca:	2401      	movcs	r4, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089cc:	f7ff fa20 	bl	8007e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089d0:	2301      	movs	r3, #1
 80089d2:	490e      	ldr	r1, [pc, #56]	; (8008a0c <xTaskResumeFromISR+0x94>)
 80089d4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80089d6:	6808      	ldr	r0, [r1, #0]
 80089d8:	4093      	lsls	r3, r2
 80089da:	4303      	orrs	r3, r0
 80089dc:	2014      	movs	r0, #20
 80089de:	600b      	str	r3, [r1, #0]
 80089e0:	4b0b      	ldr	r3, [pc, #44]	; (8008a10 <xTaskResumeFromISR+0x98>)
 80089e2:	4631      	mov	r1, r6
 80089e4:	fb00 3002 	mla	r0, r0, r2, r3
 80089e8:	f7ff f9ef 	bl	8007dca <vListInsertEnd>
	__asm volatile
 80089ec:	f387 8811 	msr	BASEPRI, r7
	}
 80089f0:	4620      	mov	r0, r4
 80089f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80089f4:	4807      	ldr	r0, [pc, #28]	; (8008a14 <xTaskResumeFromISR+0x9c>)
 80089f6:	f105 0118 	add.w	r1, r5, #24
 80089fa:	f7ff f9e6 	bl	8007dca <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 80089fe:	2400      	movs	r4, #0
 8008a00:	e7f4      	b.n	80089ec <xTaskResumeFromISR+0x74>
 8008a02:	bf00      	nop
 8008a04:	20001a30 	.word	0x20001a30
 8008a08:	2000198c 	.word	0x2000198c
 8008a0c:	20001a38 	.word	0x20001a38
 8008a10:	20001998 	.word	0x20001998
 8008a14:	20001a6c 	.word	0x20001a6c

08008a18 <vTaskStartScheduler>:
{
 8008a18:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a1a:	2400      	movs	r4, #0
{
 8008a1c:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a1e:	aa07      	add	r2, sp, #28
 8008a20:	a906      	add	r1, sp, #24
 8008a22:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a24:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a28:	f7f9 fbb4 	bl	8002194 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a2c:	9b05      	ldr	r3, [sp, #20]
 8008a2e:	9a07      	ldr	r2, [sp, #28]
 8008a30:	9302      	str	r3, [sp, #8]
 8008a32:	9b06      	ldr	r3, [sp, #24]
 8008a34:	4919      	ldr	r1, [pc, #100]	; (8008a9c <vTaskStartScheduler+0x84>)
 8008a36:	e9cd 4300 	strd	r4, r3, [sp]
 8008a3a:	4819      	ldr	r0, [pc, #100]	; (8008aa0 <vTaskStartScheduler+0x88>)
 8008a3c:	4623      	mov	r3, r4
 8008a3e:	f7ff fef5 	bl	800882c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008a42:	b340      	cbz	r0, 8008a96 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8008a44:	f000 fd22 	bl	800948c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008a48:	2801      	cmp	r0, #1
 8008a4a:	d119      	bne.n	8008a80 <vTaskStartScheduler+0x68>
	__asm volatile
 8008a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a5c:	4b11      	ldr	r3, [pc, #68]	; (8008aa4 <vTaskStartScheduler+0x8c>)
 8008a5e:	4a12      	ldr	r2, [pc, #72]	; (8008aa8 <vTaskStartScheduler+0x90>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	334c      	adds	r3, #76	; 0x4c
 8008a64:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a66:	f04f 32ff 	mov.w	r2, #4294967295
 8008a6a:	4b10      	ldr	r3, [pc, #64]	; (8008aac <vTaskStartScheduler+0x94>)
 8008a6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a6e:	4b10      	ldr	r3, [pc, #64]	; (8008ab0 <vTaskStartScheduler+0x98>)
 8008a70:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008a72:	4b10      	ldr	r3, [pc, #64]	; (8008ab4 <vTaskStartScheduler+0x9c>)
 8008a74:	601c      	str	r4, [r3, #0]
}
 8008a76:	b008      	add	sp, #32
 8008a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008a7c:	f000 bfc2 	b.w	8009a04 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a80:	3001      	adds	r0, #1
 8008a82:	d108      	bne.n	8008a96 <vTaskStartScheduler+0x7e>
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	e7fe      	b.n	8008a94 <vTaskStartScheduler+0x7c>
}
 8008a96:	b008      	add	sp, #32
 8008a98:	bd10      	pop	{r4, pc}
 8008a9a:	bf00      	nop
 8008a9c:	0800b655 	.word	0x0800b655
 8008aa0:	0800872d 	.word	0x0800872d
 8008aa4:	2000198c 	.word	0x2000198c
 8008aa8:	20000068 	.word	0x20000068
 8008aac:	20001a64 	.word	0x20001a64
 8008ab0:	20001a80 	.word	0x20001a80
 8008ab4:	20001aac 	.word	0x20001aac

08008ab8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008ab8:	4a02      	ldr	r2, [pc, #8]	; (8008ac4 <vTaskSuspendAll+0xc>)
 8008aba:	6813      	ldr	r3, [r2, #0]
 8008abc:	3301      	adds	r3, #1
 8008abe:	6013      	str	r3, [r2, #0]
}
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	20001a30 	.word	0x20001a30

08008ac8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008ac8:	4b01      	ldr	r3, [pc, #4]	; (8008ad0 <xTaskGetTickCount+0x8>)
 8008aca:	6818      	ldr	r0, [r3, #0]
}
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	20001aac 	.word	0x20001aac

08008ad4 <xTaskIncrementTick>:
{
 8008ad4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ad8:	4b3c      	ldr	r3, [pc, #240]	; (8008bcc <xTaskIncrementTick+0xf8>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d16e      	bne.n	8008bbe <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ae0:	4b3b      	ldr	r3, [pc, #236]	; (8008bd0 <xTaskIncrementTick+0xfc>)
 8008ae2:	681d      	ldr	r5, [r3, #0]
 8008ae4:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008ae6:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ae8:	b9bd      	cbnz	r5, 8008b1a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008aea:	4b3a      	ldr	r3, [pc, #232]	; (8008bd4 <xTaskIncrementTick+0x100>)
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	6812      	ldr	r2, [r2, #0]
 8008af0:	b142      	cbz	r2, 8008b04 <xTaskIncrementTick+0x30>
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	e7fe      	b.n	8008b02 <xTaskIncrementTick+0x2e>
 8008b04:	4a34      	ldr	r2, [pc, #208]	; (8008bd8 <xTaskIncrementTick+0x104>)
 8008b06:	6819      	ldr	r1, [r3, #0]
 8008b08:	6810      	ldr	r0, [r2, #0]
 8008b0a:	6018      	str	r0, [r3, #0]
 8008b0c:	6011      	str	r1, [r2, #0]
 8008b0e:	4a33      	ldr	r2, [pc, #204]	; (8008bdc <xTaskIncrementTick+0x108>)
 8008b10:	6813      	ldr	r3, [r2, #0]
 8008b12:	3301      	adds	r3, #1
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	f7ff fdd9 	bl	80086cc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b1a:	4e31      	ldr	r6, [pc, #196]	; (8008be0 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8008b1c:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b1e:	6833      	ldr	r3, [r6, #0]
 8008b20:	4f30      	ldr	r7, [pc, #192]	; (8008be4 <xTaskIncrementTick+0x110>)
 8008b22:	42ab      	cmp	r3, r5
 8008b24:	d910      	bls.n	8008b48 <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b26:	2214      	movs	r2, #20
 8008b28:	4b2f      	ldr	r3, [pc, #188]	; (8008be8 <xTaskIncrementTick+0x114>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2e:	4353      	muls	r3, r2
 8008b30:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	bf28      	it	cs
 8008b36:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8008b38:	4b2c      	ldr	r3, [pc, #176]	; (8008bec <xTaskIncrementTick+0x118>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8008b3c:	2b00      	cmp	r3, #0
}
 8008b3e:	bf0c      	ite	eq
 8008b40:	4620      	moveq	r0, r4
 8008b42:	2001      	movne	r0, #1
 8008b44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b48:	f8df a088 	ldr.w	sl, [pc, #136]	; 8008bd4 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8008b4c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8008bf0 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b50:	f8da 3000 	ldr.w	r3, [sl]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	b91b      	cbnz	r3, 8008b60 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b58:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5c:	6033      	str	r3, [r6, #0]
					break;
 8008b5e:	e7e2      	b.n	8008b26 <xTaskIncrementTick+0x52>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008b60:	f8da 3000 	ldr.w	r3, [sl]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b6a:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008b6e:	4295      	cmp	r5, r2
 8008b70:	d201      	bcs.n	8008b76 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8008b72:	6032      	str	r2, [r6, #0]
						break;
 8008b74:	e7d7      	b.n	8008b26 <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b76:	f10b 0804 	add.w	r8, fp, #4
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	f7ff f948 	bl	8007e10 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b80:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8008b84:	b11a      	cbz	r2, 8008b8e <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b86:	f10b 0018 	add.w	r0, fp, #24
 8008b8a:	f7ff f941 	bl	8007e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8008b94:	f8d9 3000 	ldr.w	r3, [r9]
 8008b98:	4082      	lsls	r2, r0
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	f8c9 2000 	str.w	r2, [r9]
 8008ba0:	2214      	movs	r2, #20
 8008ba2:	4641      	mov	r1, r8
 8008ba4:	fb02 7000 	mla	r0, r2, r0, r7
 8008ba8:	f7ff f90f 	bl	8007dca <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bac:	4b0e      	ldr	r3, [pc, #56]	; (8008be8 <xTaskIncrementTick+0x114>)
 8008bae:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8008bb2:	6819      	ldr	r1, [r3, #0]
 8008bb4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	bf28      	it	cs
 8008bba:	2401      	movcs	r4, #1
 8008bbc:	e7c8      	b.n	8008b50 <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 8008bbe:	4a0d      	ldr	r2, [pc, #52]	; (8008bf4 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 8008bc0:	2400      	movs	r4, #0
		++uxPendedTicks;
 8008bc2:	6813      	ldr	r3, [r2, #0]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	e7b6      	b.n	8008b38 <xTaskIncrementTick+0x64>
 8008bca:	bf00      	nop
 8008bcc:	20001a30 	.word	0x20001a30
 8008bd0:	20001aac 	.word	0x20001aac
 8008bd4:	20001990 	.word	0x20001990
 8008bd8:	20001994 	.word	0x20001994
 8008bdc:	20001a68 	.word	0x20001a68
 8008be0:	20001a64 	.word	0x20001a64
 8008be4:	20001998 	.word	0x20001998
 8008be8:	2000198c 	.word	0x2000198c
 8008bec:	20001ab0 	.word	0x20001ab0
 8008bf0:	20001a38 	.word	0x20001a38
 8008bf4:	20001a2c 	.word	0x20001a2c

08008bf8 <xTaskResumeAll>:
{
 8008bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8008bfc:	4c31      	ldr	r4, [pc, #196]	; (8008cc4 <xTaskResumeAll+0xcc>)
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	b943      	cbnz	r3, 8008c14 <xTaskResumeAll+0x1c>
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	e7fe      	b.n	8008c12 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008c14:	f000 fe76 	bl	8009904 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c1e:	6824      	ldr	r4, [r4, #0]
 8008c20:	b12c      	cbz	r4, 8008c2e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008c22:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008c24:	f000 fe8e 	bl	8009944 <vPortExitCritical>
}
 8008c28:	4620      	mov	r0, r4
 8008c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c2e:	4b26      	ldr	r3, [pc, #152]	; (8008cc8 <xTaskResumeAll+0xd0>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d0f5      	beq.n	8008c22 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c36:	4d25      	ldr	r5, [pc, #148]	; (8008ccc <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8008c38:	4e25      	ldr	r6, [pc, #148]	; (8008cd0 <xTaskResumeAll+0xd8>)
 8008c3a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008cd4 <xTaskResumeAll+0xdc>
 8008c3e:	e01f      	b.n	8008c80 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008c40:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 8008c42:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008c44:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c46:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c4a:	f104 0018 	add.w	r0, r4, #24
 8008c4e:	f7ff f8df 	bl	8007e10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c52:	4648      	mov	r0, r9
 8008c54:	f7ff f8dc 	bl	8007e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c58:	2014      	movs	r0, #20
 8008c5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008c5c:	6831      	ldr	r1, [r6, #0]
 8008c5e:	fa07 f302 	lsl.w	r3, r7, r2
 8008c62:	430b      	orrs	r3, r1
 8008c64:	fb00 8002 	mla	r0, r0, r2, r8
 8008c68:	4649      	mov	r1, r9
 8008c6a:	6033      	str	r3, [r6, #0]
 8008c6c:	f7ff f8ad 	bl	8007dca <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c70:	4b19      	ldr	r3, [pc, #100]	; (8008cd8 <xTaskResumeAll+0xe0>)
 8008c72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d301      	bcc.n	8008c80 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8008c7c:	4b17      	ldr	r3, [pc, #92]	; (8008cdc <xTaskResumeAll+0xe4>)
 8008c7e:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1dc      	bne.n	8008c40 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008c86:	b10c      	cbz	r4, 8008c8c <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8008c88:	f7ff fd20 	bl	80086cc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c8c:	4d14      	ldr	r5, [pc, #80]	; (8008ce0 <xTaskResumeAll+0xe8>)
 8008c8e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c90:	b144      	cbz	r4, 8008ca4 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8008c92:	2701      	movs	r7, #1
 8008c94:	4e11      	ldr	r6, [pc, #68]	; (8008cdc <xTaskResumeAll+0xe4>)
							if( xTaskIncrementTick() != pdFALSE )
 8008c96:	f7ff ff1d 	bl	8008ad4 <xTaskIncrementTick>
 8008c9a:	b100      	cbz	r0, 8008c9e <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8008c9c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c9e:	3c01      	subs	r4, #1
 8008ca0:	d1f9      	bne.n	8008c96 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8008ca2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008ca4:	4b0d      	ldr	r3, [pc, #52]	; (8008cdc <xTaskResumeAll+0xe4>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d0ba      	beq.n	8008c22 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8008cac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008cc0:	2401      	movs	r4, #1
 8008cc2:	e7af      	b.n	8008c24 <xTaskResumeAll+0x2c>
 8008cc4:	20001a30 	.word	0x20001a30
 8008cc8:	20001a24 	.word	0x20001a24
 8008ccc:	20001a6c 	.word	0x20001a6c
 8008cd0:	20001a38 	.word	0x20001a38
 8008cd4:	20001998 	.word	0x20001998
 8008cd8:	2000198c 	.word	0x2000198c
 8008cdc:	20001ab0 	.word	0x20001ab0
 8008ce0:	20001a2c 	.word	0x20001a2c

08008ce4 <vTaskDelayUntil>:
	{
 8008ce4:	b510      	push	{r4, lr}
		configASSERT( pxPreviousWakeTime );
 8008ce6:	b940      	cbnz	r0, 8008cfa <vTaskDelayUntil+0x16>
 8008ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cec:	f383 8811 	msr	BASEPRI, r3
 8008cf0:	f3bf 8f6f 	isb	sy
 8008cf4:	f3bf 8f4f 	dsb	sy
 8008cf8:	e7fe      	b.n	8008cf8 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008cfa:	b941      	cbnz	r1, 8008d0e <vTaskDelayUntil+0x2a>
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	e7fe      	b.n	8008d0c <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 8008d0e:	4b18      	ldr	r3, [pc, #96]	; (8008d70 <vTaskDelayUntil+0x8c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	b143      	cbz	r3, 8008d26 <vTaskDelayUntil+0x42>
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	e7fe      	b.n	8008d24 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 8008d26:	f7ff fec7 	bl	8008ab8 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8008d2a:	4b12      	ldr	r3, [pc, #72]	; (8008d74 <vTaskDelayUntil+0x90>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008d2c:	6804      	ldr	r4, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 8008d2e:	681a      	ldr	r2, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008d30:	1863      	adds	r3, r4, r1
 8008d32:	bf2c      	ite	cs
 8008d34:	2101      	movcs	r1, #1
 8008d36:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8008d38:	4294      	cmp	r4, r2
 8008d3a:	d90f      	bls.n	8008d5c <vTaskDelayUntil+0x78>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008d3c:	b979      	cbnz	r1, 8008d5e <vTaskDelayUntil+0x7a>
			*pxPreviousWakeTime = xTimeToWake;
 8008d3e:	6003      	str	r3, [r0, #0]
		xAlreadyYielded = xTaskResumeAll();
 8008d40:	f7ff ff5a 	bl	8008bf8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008d44:	b948      	cbnz	r0, 8008d5a <vTaskDelayUntil+0x76>
			portYIELD_WITHIN_API();
 8008d46:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d4e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	f3bf 8f6f 	isb	sy
	}
 8008d5a:	bd10      	pop	{r4, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008d5c:	b909      	cbnz	r1, 8008d62 <vTaskDelayUntil+0x7e>
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d2ed      	bcs.n	8008d3e <vTaskDelayUntil+0x5a>
			*pxPreviousWakeTime = xTimeToWake;
 8008d62:	6003      	str	r3, [r0, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008d64:	2100      	movs	r1, #0
 8008d66:	1a98      	subs	r0, r3, r2
 8008d68:	f7ff fc50 	bl	800860c <prvAddCurrentTaskToDelayedList>
 8008d6c:	e7e8      	b.n	8008d40 <vTaskDelayUntil+0x5c>
 8008d6e:	bf00      	nop
 8008d70:	20001a30 	.word	0x20001a30
 8008d74:	20001aac 	.word	0x20001aac

08008d78 <vTaskDelay>:
	{
 8008d78:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d7a:	b950      	cbnz	r0, 8008d92 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008d7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d84:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	f3bf 8f6f 	isb	sy
	}
 8008d90:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008d92:	4b0a      	ldr	r3, [pc, #40]	; (8008dbc <vTaskDelay+0x44>)
 8008d94:	6819      	ldr	r1, [r3, #0]
 8008d96:	b141      	cbz	r1, 8008daa <vTaskDelay+0x32>
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	e7fe      	b.n	8008da8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008daa:	f7ff fe85 	bl	8008ab8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008dae:	f7ff fc2d 	bl	800860c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008db2:	f7ff ff21 	bl	8008bf8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d0e0      	beq.n	8008d7c <vTaskDelay+0x4>
 8008dba:	e7e9      	b.n	8008d90 <vTaskDelay+0x18>
 8008dbc:	20001a30 	.word	0x20001a30

08008dc0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008dc0:	4b1a      	ldr	r3, [pc, #104]	; (8008e2c <vTaskSwitchContext+0x6c>)
{
 8008dc2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	4b1a      	ldr	r3, [pc, #104]	; (8008e30 <vTaskSwitchContext+0x70>)
 8008dc8:	b112      	cbz	r2, 8008dd0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008dca:	2201      	movs	r2, #1
 8008dcc:	601a      	str	r2, [r3, #0]
}
 8008dce:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8008dd0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008dd2:	4b18      	ldr	r3, [pc, #96]	; (8008e34 <vTaskSwitchContext+0x74>)
 8008dd4:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008dd6:	fab2 f282 	clz	r2, r2
 8008dda:	2314      	movs	r3, #20
 8008ddc:	b2d2      	uxtb	r2, r2
 8008dde:	f1c2 021f 	rsb	r2, r2, #31
 8008de2:	4353      	muls	r3, r2
 8008de4:	4914      	ldr	r1, [pc, #80]	; (8008e38 <vTaskSwitchContext+0x78>)
 8008de6:	58cc      	ldr	r4, [r1, r3]
 8008de8:	18c8      	adds	r0, r1, r3
 8008dea:	b944      	cbnz	r4, 8008dfe <vTaskSwitchContext+0x3e>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	e7fe      	b.n	8008dfc <vTaskSwitchContext+0x3c>
 8008dfe:	6844      	ldr	r4, [r0, #4]
 8008e00:	3308      	adds	r3, #8
 8008e02:	6864      	ldr	r4, [r4, #4]
 8008e04:	440b      	add	r3, r1
 8008e06:	429c      	cmp	r4, r3
 8008e08:	bf08      	it	eq
 8008e0a:	6863      	ldreq	r3, [r4, #4]
 8008e0c:	6044      	str	r4, [r0, #4]
 8008e0e:	bf08      	it	eq
 8008e10:	6043      	streq	r3, [r0, #4]
 8008e12:	2314      	movs	r3, #20
 8008e14:	fb03 1102 	mla	r1, r3, r2, r1
 8008e18:	684b      	ldr	r3, [r1, #4]
 8008e1a:	68da      	ldr	r2, [r3, #12]
 8008e1c:	4b07      	ldr	r3, [pc, #28]	; (8008e3c <vTaskSwitchContext+0x7c>)
 8008e1e:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a07      	ldr	r2, [pc, #28]	; (8008e40 <vTaskSwitchContext+0x80>)
 8008e24:	334c      	adds	r3, #76	; 0x4c
 8008e26:	6013      	str	r3, [r2, #0]
}
 8008e28:	e7d1      	b.n	8008dce <vTaskSwitchContext+0xe>
 8008e2a:	bf00      	nop
 8008e2c:	20001a30 	.word	0x20001a30
 8008e30:	20001ab0 	.word	0x20001ab0
 8008e34:	20001a38 	.word	0x20001a38
 8008e38:	20001998 	.word	0x20001998
 8008e3c:	2000198c 	.word	0x2000198c
 8008e40:	20000068 	.word	0x20000068

08008e44 <vTaskSuspend>:
	{
 8008e44:	b570      	push	{r4, r5, r6, lr}
 8008e46:	4604      	mov	r4, r0
 8008e48:	4d2d      	ldr	r5, [pc, #180]	; (8008f00 <vTaskSuspend+0xbc>)
		taskENTER_CRITICAL();
 8008e4a:	f000 fd5b 	bl	8009904 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008e4e:	b904      	cbnz	r4, 8008e52 <vTaskSuspend+0xe>
 8008e50:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e52:	1d26      	adds	r6, r4, #4
 8008e54:	4630      	mov	r0, r6
 8008e56:	f7fe ffdb 	bl	8007e10 <uxListRemove>
 8008e5a:	b960      	cbnz	r0, 8008e76 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e5c:	2314      	movs	r3, #20
 8008e5e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008e60:	4a28      	ldr	r2, [pc, #160]	; (8008f04 <vTaskSuspend+0xc0>)
 8008e62:	4343      	muls	r3, r0
 8008e64:	58d3      	ldr	r3, [r2, r3]
 8008e66:	b933      	cbnz	r3, 8008e76 <vTaskSuspend+0x32>
 8008e68:	2201      	movs	r2, #1
 8008e6a:	4927      	ldr	r1, [pc, #156]	; (8008f08 <vTaskSuspend+0xc4>)
 8008e6c:	4082      	lsls	r2, r0
 8008e6e:	680b      	ldr	r3, [r1, #0]
 8008e70:	ea23 0302 	bic.w	r3, r3, r2
 8008e74:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e78:	b11b      	cbz	r3, 8008e82 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e7a:	f104 0018 	add.w	r0, r4, #24
 8008e7e:	f7fe ffc7 	bl	8007e10 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008e82:	4631      	mov	r1, r6
 8008e84:	4821      	ldr	r0, [pc, #132]	; (8008f0c <vTaskSuspend+0xc8>)
 8008e86:	f7fe ffa0 	bl	8007dca <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008e8a:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
		if( xSchedulerRunning != pdFALSE )
 8008e8e:	4e20      	ldr	r6, [pc, #128]	; (8008f10 <vTaskSuspend+0xcc>)
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008e90:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e92:	bf04      	itt	eq
 8008e94:	2300      	moveq	r3, #0
 8008e96:	f884 309c 	strbeq.w	r3, [r4, #156]	; 0x9c
		taskEXIT_CRITICAL();
 8008e9a:	f000 fd53 	bl	8009944 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8008e9e:	6833      	ldr	r3, [r6, #0]
 8008ea0:	b12b      	cbz	r3, 8008eae <vTaskSuspend+0x6a>
			taskENTER_CRITICAL();
 8008ea2:	f000 fd2f 	bl	8009904 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8008ea6:	f7ff fc11 	bl	80086cc <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8008eaa:	f000 fd4b 	bl	8009944 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 8008eae:	682b      	ldr	r3, [r5, #0]
 8008eb0:	42a3      	cmp	r3, r4
 8008eb2:	d117      	bne.n	8008ee4 <vTaskSuspend+0xa0>
			if( xSchedulerRunning != pdFALSE )
 8008eb4:	6833      	ldr	r3, [r6, #0]
 8008eb6:	b1b3      	cbz	r3, 8008ee6 <vTaskSuspend+0xa2>
				configASSERT( uxSchedulerSuspended == 0 );
 8008eb8:	4b16      	ldr	r3, [pc, #88]	; (8008f14 <vTaskSuspend+0xd0>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	b143      	cbz	r3, 8008ed0 <vTaskSuspend+0x8c>
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	e7fe      	b.n	8008ece <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
 8008ed0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	f3bf 8f6f 	isb	sy
	}
 8008ee4:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8008ee6:	4a09      	ldr	r2, [pc, #36]	; (8008f0c <vTaskSuspend+0xc8>)
 8008ee8:	6811      	ldr	r1, [r2, #0]
 8008eea:	4a0b      	ldr	r2, [pc, #44]	; (8008f18 <vTaskSuspend+0xd4>)
 8008eec:	6812      	ldr	r2, [r2, #0]
 8008eee:	4291      	cmp	r1, r2
 8008ef0:	d101      	bne.n	8008ef6 <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
 8008ef2:	602b      	str	r3, [r5, #0]
 8008ef4:	e7f6      	b.n	8008ee4 <vTaskSuspend+0xa0>
	}
 8008ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 8008efa:	f7ff bf61 	b.w	8008dc0 <vTaskSwitchContext>
 8008efe:	bf00      	nop
 8008f00:	2000198c 	.word	0x2000198c
 8008f04:	20001998 	.word	0x20001998
 8008f08:	20001a38 	.word	0x20001a38
 8008f0c:	20001a84 	.word	0x20001a84
 8008f10:	20001a80 	.word	0x20001a80
 8008f14:	20001a30 	.word	0x20001a30
 8008f18:	20001a24 	.word	0x20001a24

08008f1c <vTaskPlaceOnEventList>:
{
 8008f1c:	b510      	push	{r4, lr}
 8008f1e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008f20:	b940      	cbnz	r0, 8008f34 <vTaskPlaceOnEventList+0x18>
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	e7fe      	b.n	8008f32 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f34:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <vTaskPlaceOnEventList+0x30>)
 8008f36:	6819      	ldr	r1, [r3, #0]
 8008f38:	3118      	adds	r1, #24
 8008f3a:	f7fe ff52 	bl	8007de2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f3e:	4620      	mov	r0, r4
}
 8008f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f44:	2101      	movs	r1, #1
 8008f46:	f7ff bb61 	b.w	800860c <prvAddCurrentTaskToDelayedList>
 8008f4a:	bf00      	nop
 8008f4c:	2000198c 	.word	0x2000198c

08008f50 <vTaskPlaceOnEventListRestricted>:
	{
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	460d      	mov	r5, r1
 8008f54:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8008f56:	b940      	cbnz	r0, 8008f6a <vTaskPlaceOnEventListRestricted+0x1a>
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	e7fe      	b.n	8008f68 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f6a:	4b08      	ldr	r3, [pc, #32]	; (8008f8c <vTaskPlaceOnEventListRestricted+0x3c>)
 8008f6c:	6819      	ldr	r1, [r3, #0]
 8008f6e:	3118      	adds	r1, #24
 8008f70:	f7fe ff2b 	bl	8007dca <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008f74:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f76:	4621      	mov	r1, r4
 8008f78:	bf08      	it	eq
 8008f7a:	4628      	moveq	r0, r5
	}
 8008f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f80:	bf18      	it	ne
 8008f82:	f04f 30ff 	movne.w	r0, #4294967295
 8008f86:	f7ff bb41 	b.w	800860c <prvAddCurrentTaskToDelayedList>
 8008f8a:	bf00      	nop
 8008f8c:	2000198c 	.word	0x2000198c

08008f90 <xTaskRemoveFromEventList>:
{
 8008f90:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008f92:	68c3      	ldr	r3, [r0, #12]
 8008f94:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008f96:	b944      	cbnz	r4, 8008faa <xTaskRemoveFromEventList+0x1a>
 8008f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	e7fe      	b.n	8008fa8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008faa:	f104 0518 	add.w	r5, r4, #24
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f7fe ff2e 	bl	8007e10 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fb4:	4b11      	ldr	r3, [pc, #68]	; (8008ffc <xTaskRemoveFromEventList+0x6c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	b9e3      	cbnz	r3, 8008ff4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008fba:	1d25      	adds	r5, r4, #4
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	f7fe ff27 	bl	8007e10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	490e      	ldr	r1, [pc, #56]	; (8009000 <xTaskRemoveFromEventList+0x70>)
 8008fc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008fc8:	6808      	ldr	r0, [r1, #0]
 8008fca:	4093      	lsls	r3, r2
 8008fcc:	4303      	orrs	r3, r0
 8008fce:	2014      	movs	r0, #20
 8008fd0:	600b      	str	r3, [r1, #0]
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	4b0b      	ldr	r3, [pc, #44]	; (8009004 <xTaskRemoveFromEventList+0x74>)
 8008fd6:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fda:	f7fe fef6 	bl	8007dca <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fde:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <xTaskRemoveFromEventList+0x78>)
 8008fe0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe6:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8008fe8:	bf85      	ittet	hi
 8008fea:	2001      	movhi	r0, #1
 8008fec:	4b07      	ldrhi	r3, [pc, #28]	; (800900c <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8008fee:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8008ff0:	6018      	strhi	r0, [r3, #0]
}
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	4806      	ldr	r0, [pc, #24]	; (8009010 <xTaskRemoveFromEventList+0x80>)
 8008ff8:	e7ef      	b.n	8008fda <xTaskRemoveFromEventList+0x4a>
 8008ffa:	bf00      	nop
 8008ffc:	20001a30 	.word	0x20001a30
 8009000:	20001a38 	.word	0x20001a38
 8009004:	20001998 	.word	0x20001998
 8009008:	2000198c 	.word	0x2000198c
 800900c:	20001ab0 	.word	0x20001ab0
 8009010:	20001a6c 	.word	0x20001a6c

08009014 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009014:	4b03      	ldr	r3, [pc, #12]	; (8009024 <vTaskInternalSetTimeOutState+0x10>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800901a:	4b03      	ldr	r3, [pc, #12]	; (8009028 <vTaskInternalSetTimeOutState+0x14>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6043      	str	r3, [r0, #4]
}
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	20001a68 	.word	0x20001a68
 8009028:	20001aac 	.word	0x20001aac

0800902c <xTaskCheckForTimeOut>:
{
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8009030:	4605      	mov	r5, r0
 8009032:	b940      	cbnz	r0, 8009046 <xTaskCheckForTimeOut+0x1a>
 8009034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	e7fe      	b.n	8009044 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8009046:	b941      	cbnz	r1, 800905a <xTaskCheckForTimeOut+0x2e>
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	e7fe      	b.n	8009058 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800905a:	f000 fc53 	bl	8009904 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800905e:	4b0f      	ldr	r3, [pc, #60]	; (800909c <xTaskCheckForTimeOut+0x70>)
 8009060:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	1c5a      	adds	r2, r3, #1
 8009066:	d010      	beq.n	800908a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009068:	480d      	ldr	r0, [pc, #52]	; (80090a0 <xTaskCheckForTimeOut+0x74>)
 800906a:	682e      	ldr	r6, [r5, #0]
 800906c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800906e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009070:	4286      	cmp	r6, r0
 8009072:	d001      	beq.n	8009078 <xTaskCheckForTimeOut+0x4c>
 8009074:	428a      	cmp	r2, r1
 8009076:	d90f      	bls.n	8009098 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009078:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800907a:	4283      	cmp	r3, r0
 800907c:	d90a      	bls.n	8009094 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800907e:	1a5b      	subs	r3, r3, r1
 8009080:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009082:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8009084:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009086:	f7ff ffc5 	bl	8009014 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800908a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800908c:	f000 fc5a 	bl	8009944 <vPortExitCritical>
}
 8009090:	4620      	mov	r0, r4
 8009092:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8009094:	2300      	movs	r3, #0
 8009096:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009098:	2401      	movs	r4, #1
 800909a:	e7f7      	b.n	800908c <xTaskCheckForTimeOut+0x60>
 800909c:	20001aac 	.word	0x20001aac
 80090a0:	20001a68 	.word	0x20001a68

080090a4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80090a4:	2201      	movs	r2, #1
 80090a6:	4b01      	ldr	r3, [pc, #4]	; (80090ac <vTaskMissedYield+0x8>)
 80090a8:	601a      	str	r2, [r3, #0]
}
 80090aa:	4770      	bx	lr
 80090ac:	20001ab0 	.word	0x20001ab0

080090b0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80090b0:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <xTaskGetSchedulerState+0x18>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	b133      	cbz	r3, 80090c4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <xTaskGetSchedulerState+0x1c>)
 80090b8:	6818      	ldr	r0, [r3, #0]
 80090ba:	fab0 f080 	clz	r0, r0
 80090be:	0940      	lsrs	r0, r0, #5
 80090c0:	0040      	lsls	r0, r0, #1
 80090c2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090c4:	2001      	movs	r0, #1
	}
 80090c6:	4770      	bx	lr
 80090c8:	20001a80 	.word	0x20001a80
 80090cc:	20001a30 	.word	0x20001a30

080090d0 <xTaskPriorityDisinherit>:
	{
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80090d2:	4604      	mov	r4, r0
 80090d4:	b908      	cbnz	r0, 80090da <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80090d6:	2000      	movs	r0, #0
	}
 80090d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80090da:	4b22      	ldr	r3, [pc, #136]	; (8009164 <xTaskPriorityDisinherit+0x94>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4283      	cmp	r3, r0
 80090e0:	d008      	beq.n	80090f4 <xTaskPriorityDisinherit+0x24>
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	e7fe      	b.n	80090f2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80090f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090f6:	b943      	cbnz	r3, 800910a <xTaskPriorityDisinherit+0x3a>
 80090f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	e7fe      	b.n	8009108 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800910a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800910c:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800910e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009110:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8009112:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009114:	d0df      	beq.n	80090d6 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1dd      	bne.n	80090d6 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800911a:	1d06      	adds	r6, r0, #4
 800911c:	4630      	mov	r0, r6
 800911e:	f7fe fe77 	bl	8007e10 <uxListRemove>
 8009122:	4f11      	ldr	r7, [pc, #68]	; (8009168 <xTaskPriorityDisinherit+0x98>)
 8009124:	4a11      	ldr	r2, [pc, #68]	; (800916c <xTaskPriorityDisinherit+0x9c>)
 8009126:	b950      	cbnz	r0, 800913e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009128:	2314      	movs	r3, #20
 800912a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800912c:	434b      	muls	r3, r1
 800912e:	58fb      	ldr	r3, [r7, r3]
 8009130:	b92b      	cbnz	r3, 800913e <xTaskPriorityDisinherit+0x6e>
 8009132:	2501      	movs	r5, #1
 8009134:	6813      	ldr	r3, [r2, #0]
 8009136:	408d      	lsls	r5, r1
 8009138:	ea23 0305 	bic.w	r3, r3, r5
 800913c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800913e:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8009140:	2014      	movs	r0, #20
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009142:	f1c3 0107 	rsb	r1, r3, #7
 8009146:	61a1      	str	r1, [r4, #24]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009148:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800914a:	2401      	movs	r4, #1
 800914c:	6811      	ldr	r1, [r2, #0]
 800914e:	fa04 f503 	lsl.w	r5, r4, r3
 8009152:	fb00 7003 	mla	r0, r0, r3, r7
 8009156:	430d      	orrs	r5, r1
 8009158:	4631      	mov	r1, r6
 800915a:	6015      	str	r5, [r2, #0]
 800915c:	f7fe fe35 	bl	8007dca <vListInsertEnd>
					xReturn = pdTRUE;
 8009160:	4620      	mov	r0, r4
		return xReturn;
 8009162:	e7b9      	b.n	80090d8 <xTaskPriorityDisinherit+0x8>
 8009164:	2000198c 	.word	0x2000198c
 8009168:	20001998 	.word	0x20001998
 800916c:	20001a38 	.word	0x20001a38

08009170 <xTaskNotifyWait>:
	{
 8009170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009174:	4c22      	ldr	r4, [pc, #136]	; (8009200 <xTaskNotifyWait+0x90>)
	{
 8009176:	461e      	mov	r6, r3
 8009178:	4680      	mov	r8, r0
 800917a:	460f      	mov	r7, r1
 800917c:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 800917e:	f000 fbc1 	bl	8009904 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009188:	2b02      	cmp	r3, #2
 800918a:	d018      	beq.n	80091be <xTaskNotifyWait+0x4e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800918c:	2101      	movs	r1, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800918e:	6822      	ldr	r2, [r4, #0]
 8009190:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8009194:	ea23 0308 	bic.w	r3, r3, r8
 8009198:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
				if( xTicksToWait > ( TickType_t ) 0 )
 80091a2:	b166      	cbz	r6, 80091be <xTaskNotifyWait+0x4e>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091a4:	4630      	mov	r0, r6
 80091a6:	f7ff fa31 	bl	800860c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80091aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80091ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 80091be:	f000 fbc1 	bl	8009944 <vPortExitCritical>
		taskENTER_CRITICAL();
 80091c2:	f000 fb9f 	bl	8009904 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 80091c6:	b11d      	cbz	r5, 80091d0 <xTaskNotifyWait+0x60>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80091c8:	6823      	ldr	r3, [r4, #0]
 80091ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091ce:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80091d0:	6823      	ldr	r3, [r4, #0]
 80091d2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80091d6:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80091d8:	bf03      	ittte	eq
 80091da:	6822      	ldreq	r2, [r4, #0]
				xReturn = pdTRUE;
 80091dc:	2501      	moveq	r5, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80091de:	f8d2 3098 	ldreq.w	r3, [r2, #152]	; 0x98
				xReturn = pdFALSE;
 80091e2:	2500      	movne	r5, #0
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80091e4:	bf04      	itt	eq
 80091e6:	43bb      	biceq	r3, r7
 80091e8:	f8c2 3098 	streq.w	r3, [r2, #152]	; 0x98
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091ec:	2200      	movs	r2, #0
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		taskEXIT_CRITICAL();
 80091f4:	f000 fba6 	bl	8009944 <vPortExitCritical>
	}
 80091f8:	4628      	mov	r0, r5
 80091fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091fe:	bf00      	nop
 8009200:	2000198c 	.word	0x2000198c

08009204 <xTaskGenericNotify>:
	{
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	460f      	mov	r7, r1
 8009208:	4616      	mov	r6, r2
 800920a:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 800920c:	4604      	mov	r4, r0
 800920e:	b940      	cbnz	r0, 8009222 <xTaskGenericNotify+0x1e>
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	e7fe      	b.n	8009220 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 8009222:	f000 fb6f 	bl	8009904 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8009226:	b115      	cbz	r5, 800922e <xTaskGenericNotify+0x2a>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009228:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800922c:	602b      	str	r3, [r5, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800922e:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009230:	f894 509c 	ldrb.w	r5, [r4, #156]	; 0x9c
			switch( eAction )
 8009234:	1e72      	subs	r2, r6, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009236:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009238:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
			switch( eAction )
 800923c:	2a03      	cmp	r2, #3
 800923e:	d808      	bhi.n	8009252 <xTaskGenericNotify+0x4e>
 8009240:	e8df f002 	tbb	[pc, r2]
 8009244:	12140e02 	.word	0x12140e02
					pxTCB->ulNotifiedValue |= ulValue;
 8009248:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800924c:	433b      	orrs	r3, r7
					( pxTCB->ulNotifiedValue )++;
 800924e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009252:	2d01      	cmp	r5, #1
 8009254:	d00d      	beq.n	8009272 <xTaskGenericNotify+0x6e>
	{
 8009256:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8009258:	f000 fb74 	bl	8009944 <vPortExitCritical>
	}
 800925c:	4628      	mov	r0, r5
 800925e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 8009260:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009264:	3301      	adds	r3, #1
 8009266:	e7f2      	b.n	800924e <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009268:	2d02      	cmp	r5, #2
 800926a:	d030      	beq.n	80092ce <xTaskGenericNotify+0xca>
						pxTCB->ulNotifiedValue = ulValue;
 800926c:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
 8009270:	e7ef      	b.n	8009252 <xTaskGenericNotify+0x4e>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009272:	1d26      	adds	r6, r4, #4
 8009274:	4630      	mov	r0, r6
 8009276:	f7fe fdcb 	bl	8007e10 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800927a:	4916      	ldr	r1, [pc, #88]	; (80092d4 <xTaskGenericNotify+0xd0>)
 800927c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800927e:	6808      	ldr	r0, [r1, #0]
 8009280:	fa05 f302 	lsl.w	r3, r5, r2
 8009284:	4303      	orrs	r3, r0
 8009286:	2014      	movs	r0, #20
 8009288:	600b      	str	r3, [r1, #0]
 800928a:	4b13      	ldr	r3, [pc, #76]	; (80092d8 <xTaskGenericNotify+0xd4>)
 800928c:	4631      	mov	r1, r6
 800928e:	fb00 3002 	mla	r0, r0, r2, r3
 8009292:	f7fe fd9a 	bl	8007dca <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009296:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009298:	b143      	cbz	r3, 80092ac <xTaskGenericNotify+0xa8>
 800929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	e7fe      	b.n	80092aa <xTaskGenericNotify+0xa6>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092ac:	4b0b      	ldr	r3, [pc, #44]	; (80092dc <xTaskGenericNotify+0xd8>)
 80092ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d9ce      	bls.n	8009256 <xTaskGenericNotify+0x52>
					taskYIELD_IF_USING_PREEMPTION();
 80092b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80092bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	e7c4      	b.n	8009258 <xTaskGenericNotify+0x54>
						xReturn = pdFAIL;
 80092ce:	2500      	movs	r5, #0
 80092d0:	e7c2      	b.n	8009258 <xTaskGenericNotify+0x54>
 80092d2:	bf00      	nop
 80092d4:	20001a38 	.word	0x20001a38
 80092d8:	20001998 	.word	0x20001998
 80092dc:	2000198c 	.word	0x2000198c

080092e0 <xTaskGenericNotifyFromISR>:
	{
 80092e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092e4:	9f08      	ldr	r7, [sp, #32]
 80092e6:	4689      	mov	r9, r1
 80092e8:	4690      	mov	r8, r2
 80092ea:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 80092ec:	4604      	mov	r4, r0
 80092ee:	b940      	cbnz	r0, 8009302 <xTaskGenericNotifyFromISR+0x22>
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	e7fe      	b.n	8009300 <xTaskGenericNotifyFromISR+0x20>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009302:	f000 fbdb 	bl	8009abc <vPortValidateInterruptPriority>
	__asm volatile
 8009306:	f3ef 8611 	mrs	r6, BASEPRI
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800931a:	b115      	cbz	r5, 8009322 <xTaskGenericNotifyFromISR+0x42>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800931c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009320:	602b      	str	r3, [r5, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009322:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009324:	f894 509c 	ldrb.w	r5, [r4, #156]	; 0x9c
			switch( eAction )
 8009328:	f108 32ff 	add.w	r2, r8, #4294967295
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800932c:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800932e:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
			switch( eAction )
 8009332:	2a03      	cmp	r2, #3
 8009334:	d809      	bhi.n	800934a <xTaskGenericNotifyFromISR+0x6a>
 8009336:	e8df f002 	tbb	[pc, r2]
 800933a:	0f02      	.short	0x0f02
 800933c:	1315      	.short	0x1315
					pxTCB->ulNotifiedValue |= ulValue;
 800933e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009342:	ea43 0309 	orr.w	r3, r3, r9
					( pxTCB->ulNotifiedValue )++;
 8009346:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800934a:	2d01      	cmp	r5, #1
 800934c:	d00d      	beq.n	800936a <xTaskGenericNotifyFromISR+0x8a>
	{
 800934e:	2001      	movs	r0, #1
	__asm volatile
 8009350:	f386 8811 	msr	BASEPRI, r6
	}
 8009354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 8009358:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800935c:	3301      	adds	r3, #1
 800935e:	e7f2      	b.n	8009346 <xTaskGenericNotifyFromISR+0x66>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009360:	2d02      	cmp	r5, #2
 8009362:	d033      	beq.n	80093cc <xTaskGenericNotifyFromISR+0xec>
						pxTCB->ulNotifiedValue = ulValue;
 8009364:	f8c4 9098 	str.w	r9, [r4, #152]	; 0x98
 8009368:	e7ef      	b.n	800934a <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800936a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800936c:	b143      	cbz	r3, 8009380 <xTaskGenericNotifyFromISR+0xa0>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	e7fe      	b.n	800937e <xTaskGenericNotifyFromISR+0x9e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009380:	4b13      	ldr	r3, [pc, #76]	; (80093d0 <xTaskGenericNotifyFromISR+0xf0>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	b9db      	cbnz	r3, 80093be <xTaskGenericNotifyFromISR+0xde>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009386:	f104 0804 	add.w	r8, r4, #4
 800938a:	4640      	mov	r0, r8
 800938c:	f7fe fd40 	bl	8007e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009390:	4a10      	ldr	r2, [pc, #64]	; (80093d4 <xTaskGenericNotifyFromISR+0xf4>)
 8009392:	2014      	movs	r0, #20
 8009394:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009396:	6811      	ldr	r1, [r2, #0]
 8009398:	409d      	lsls	r5, r3
 800939a:	430d      	orrs	r5, r1
 800939c:	4641      	mov	r1, r8
 800939e:	6015      	str	r5, [r2, #0]
 80093a0:	4a0d      	ldr	r2, [pc, #52]	; (80093d8 <xTaskGenericNotifyFromISR+0xf8>)
 80093a2:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80093a6:	f7fe fd10 	bl	8007dca <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093aa:	4b0c      	ldr	r3, [pc, #48]	; (80093dc <xTaskGenericNotifyFromISR+0xfc>)
 80093ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d9cb      	bls.n	800934e <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 80093b6:	2001      	movs	r0, #1
 80093b8:	b12f      	cbz	r7, 80093c6 <xTaskGenericNotifyFromISR+0xe6>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80093ba:	6038      	str	r0, [r7, #0]
 80093bc:	e7c8      	b.n	8009350 <xTaskGenericNotifyFromISR+0x70>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80093be:	4808      	ldr	r0, [pc, #32]	; (80093e0 <xTaskGenericNotifyFromISR+0x100>)
 80093c0:	f104 0118 	add.w	r1, r4, #24
 80093c4:	e7ef      	b.n	80093a6 <xTaskGenericNotifyFromISR+0xc6>
						xYieldPending = pdTRUE;
 80093c6:	4b07      	ldr	r3, [pc, #28]	; (80093e4 <xTaskGenericNotifyFromISR+0x104>)
 80093c8:	6018      	str	r0, [r3, #0]
 80093ca:	e7c1      	b.n	8009350 <xTaskGenericNotifyFromISR+0x70>
						xReturn = pdFAIL;
 80093cc:	2000      	movs	r0, #0
 80093ce:	e7bf      	b.n	8009350 <xTaskGenericNotifyFromISR+0x70>
 80093d0:	20001a30 	.word	0x20001a30
 80093d4:	20001a38 	.word	0x20001a38
 80093d8:	20001998 	.word	0x20001998
 80093dc:	2000198c 	.word	0x2000198c
 80093e0:	20001a6c 	.word	0x20001a6c
 80093e4:	20001ab0 	.word	0x20001ab0

080093e8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80093e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80093ea:	4c11      	ldr	r4, [pc, #68]	; (8009430 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80093ec:	f000 fa8a 	bl	8009904 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80093f0:	6825      	ldr	r5, [r4, #0]
 80093f2:	b9bd      	cbnz	r5, 8009424 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80093f4:	4f0f      	ldr	r7, [pc, #60]	; (8009434 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80093f6:	4e10      	ldr	r6, [pc, #64]	; (8009438 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80093f8:	4638      	mov	r0, r7
 80093fa:	f7fe fcd8 	bl	8007dae <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80093fe:	4630      	mov	r0, r6
 8009400:	f7fe fcd5 	bl	8007dae <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009404:	4b0d      	ldr	r3, [pc, #52]	; (800943c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009406:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 8009408:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800940a:	4b0d      	ldr	r3, [pc, #52]	; (8009440 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800940c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800940e:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009410:	4a0c      	ldr	r2, [pc, #48]	; (8009444 <prvCheckForValidListAndQueue+0x5c>)
 8009412:	4b0d      	ldr	r3, [pc, #52]	; (8009448 <prvCheckForValidListAndQueue+0x60>)
 8009414:	9500      	str	r5, [sp, #0]
 8009416:	f7fe fdd6 	bl	8007fc6 <xQueueGenericCreateStatic>
 800941a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800941c:	b110      	cbz	r0, 8009424 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800941e:	490b      	ldr	r1, [pc, #44]	; (800944c <prvCheckForValidListAndQueue+0x64>)
 8009420:	f7ff f840 	bl	80084a4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8009424:	b003      	add	sp, #12
 8009426:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800942a:	f000 ba8b 	b.w	8009944 <vPortExitCritical>
 800942e:	bf00      	nop
 8009430:	20001ba8 	.word	0x20001ba8
 8009434:	20001b34 	.word	0x20001b34
 8009438:	20001b48 	.word	0x20001b48
 800943c:	20001ab4 	.word	0x20001ab4
 8009440:	20001ab8 	.word	0x20001ab8
 8009444:	20001abc 	.word	0x20001abc
 8009448:	20001b60 	.word	0x20001b60
 800944c:	0800b65a 	.word	0x0800b65a

08009450 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8009450:	4291      	cmp	r1, r2
{
 8009452:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009454:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009456:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8009458:	d80a      	bhi.n	8009470 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800945a:	1ad2      	subs	r2, r2, r3
 800945c:	6983      	ldr	r3, [r0, #24]
 800945e:	429a      	cmp	r2, r3
 8009460:	d20d      	bcs.n	800947e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009462:	4b08      	ldr	r3, [pc, #32]	; (8009484 <prvInsertTimerInActiveList+0x34>)
 8009464:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009466:	6818      	ldr	r0, [r3, #0]
 8009468:	f7fe fcbb 	bl	8007de2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800946c:	2000      	movs	r0, #0
}
 800946e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009470:	429a      	cmp	r2, r3
 8009472:	d201      	bcs.n	8009478 <prvInsertTimerInActiveList+0x28>
 8009474:	4299      	cmp	r1, r3
 8009476:	d202      	bcs.n	800947e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009478:	4b03      	ldr	r3, [pc, #12]	; (8009488 <prvInsertTimerInActiveList+0x38>)
 800947a:	1d01      	adds	r1, r0, #4
 800947c:	e7f3      	b.n	8009466 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800947e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009480:	e7f5      	b.n	800946e <prvInsertTimerInActiveList+0x1e>
 8009482:	bf00      	nop
 8009484:	20001ab8 	.word	0x20001ab8
 8009488:	20001ab4 	.word	0x20001ab4

0800948c <xTimerCreateTimerTask>:
{
 800948c:	b510      	push	{r4, lr}
 800948e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009490:	f7ff ffaa 	bl	80093e8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009494:	4b12      	ldr	r3, [pc, #72]	; (80094e0 <xTimerCreateTimerTask+0x54>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	b1b3      	cbz	r3, 80094c8 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800949a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800949c:	aa07      	add	r2, sp, #28
 800949e:	a906      	add	r1, sp, #24
 80094a0:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094a2:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094a6:	f7f8 fe81 	bl	80021ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80094aa:	9b05      	ldr	r3, [sp, #20]
 80094ac:	9a07      	ldr	r2, [sp, #28]
 80094ae:	9302      	str	r3, [sp, #8]
 80094b0:	9b06      	ldr	r3, [sp, #24]
 80094b2:	490c      	ldr	r1, [pc, #48]	; (80094e4 <xTimerCreateTimerTask+0x58>)
 80094b4:	9301      	str	r3, [sp, #4]
 80094b6:	2302      	movs	r3, #2
 80094b8:	480b      	ldr	r0, [pc, #44]	; (80094e8 <xTimerCreateTimerTask+0x5c>)
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	4623      	mov	r3, r4
 80094be:	f7ff f9b5 	bl	800882c <xTaskCreateStatic>
 80094c2:	4b0a      	ldr	r3, [pc, #40]	; (80094ec <xTimerCreateTimerTask+0x60>)
 80094c4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80094c6:	b940      	cbnz	r0, 80094da <xTimerCreateTimerTask+0x4e>
 80094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80094d8:	e7fe      	b.n	80094d8 <xTimerCreateTimerTask+0x4c>
}
 80094da:	2001      	movs	r0, #1
 80094dc:	b008      	add	sp, #32
 80094de:	bd10      	pop	{r4, pc}
 80094e0:	20001ba8 	.word	0x20001ba8
 80094e4:	0800b65f 	.word	0x0800b65f
 80094e8:	080096b5 	.word	0x080096b5
 80094ec:	20001bac 	.word	0x20001bac

080094f0 <xTimerCreate>:
	{
 80094f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f4:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80094f6:	202c      	movs	r0, #44	; 0x2c
	{
 80094f8:	460d      	mov	r5, r1
 80094fa:	4617      	mov	r7, r2
 80094fc:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80094fe:	f000 fb31 	bl	8009b64 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8009502:	4604      	mov	r4, r0
 8009504:	b1c0      	cbz	r0, 8009538 <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009506:	b945      	cbnz	r5, 800951a <xTimerCreate+0x2a>
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	e7fe      	b.n	8009518 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 800951a:	f7ff ff65 	bl	80093e8 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800951e:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009520:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009524:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 8009526:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 800952a:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800952c:	1d20      	adds	r0, r4, #4
 800952e:	f7fe fc49 	bl	8007dc4 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009532:	2300      	movs	r3, #0
 8009534:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 8009538:	4620      	mov	r0, r4
 800953a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800953e <xTimerCreateStatic>:
	{
 800953e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009542:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009544:	232c      	movs	r3, #44	; 0x2c
 8009546:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009548:	9b01      	ldr	r3, [sp, #4]
	{
 800954a:	4680      	mov	r8, r0
			configASSERT( xSize == sizeof( Timer_t ) );
 800954c:	2b2c      	cmp	r3, #44	; 0x2c
	{
 800954e:	460d      	mov	r5, r1
 8009550:	4617      	mov	r7, r2
 8009552:	9c09      	ldr	r4, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 8009554:	d008      	beq.n	8009568 <xTimerCreateStatic+0x2a>
 8009556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	e7fe      	b.n	8009566 <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 8009568:	b944      	cbnz	r4, 800957c <xTimerCreateStatic+0x3e>
 800956a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	e7fe      	b.n	800957a <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800957c:	b941      	cbnz	r1, 8009590 <xTimerCreateStatic+0x52>
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	e7fe      	b.n	800958e <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 8009590:	f7ff ff2a 	bl	80093e8 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009594:	9b08      	ldr	r3, [sp, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009596:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009598:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
 800959a:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 800959e:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 80095a2:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80095a4:	f7fe fc0e 	bl	8007dc4 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80095a8:	2301      	movs	r3, #1
	}
 80095aa:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80095ac:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 80095b0:	b002      	add	sp, #8
 80095b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080095b8 <xTimerGenericCommand>:
{
 80095b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80095ba:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80095bc:	4604      	mov	r4, r0
{
 80095be:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80095c0:	b940      	cbnz	r0, 80095d4 <xTimerGenericCommand+0x1c>
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	e7fe      	b.n	80095d2 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 80095d4:	4d0c      	ldr	r5, [pc, #48]	; (8009608 <xTimerGenericCommand+0x50>)
 80095d6:	6828      	ldr	r0, [r5, #0]
 80095d8:	b178      	cbz	r0, 80095fa <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095da:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095dc:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80095e0:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095e2:	dc0c      	bgt.n	80095fe <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095e4:	f7ff fd64 	bl	80090b0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095e8:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095ea:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095ec:	bf14      	ite	ne
 80095ee:	461a      	movne	r2, r3
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095f0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095f2:	6828      	ldr	r0, [r5, #0]
 80095f4:	a901      	add	r1, sp, #4
 80095f6:	f7fe fd53 	bl	80080a0 <xQueueGenericSend>
}
 80095fa:	b004      	add	sp, #16
 80095fc:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095fe:	2300      	movs	r3, #0
 8009600:	a901      	add	r1, sp, #4
 8009602:	f7fe fe00 	bl	8008206 <xQueueGenericSendFromISR>
 8009606:	e7f8      	b.n	80095fa <xTimerGenericCommand+0x42>
 8009608:	20001ba8 	.word	0x20001ba8

0800960c <prvSampleTimeNow>:
{
 800960c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009610:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8009612:	f7ff fa59 	bl	8008ac8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009616:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80096a8 <prvSampleTimeNow+0x9c>
	xTimeNow = xTaskGetTickCount();
 800961a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800961c:	f8d8 3000 	ldr.w	r3, [r8]
 8009620:	4283      	cmp	r3, r0
 8009622:	d90b      	bls.n	800963c <prvSampleTimeNow+0x30>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009624:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009628:	4f20      	ldr	r7, [pc, #128]	; (80096ac <prvSampleTimeNow+0xa0>)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	b96a      	cbnz	r2, 800964c <prvSampleTimeNow+0x40>
	pxCurrentTimerList = pxOverflowTimerList;
 8009630:	4a1f      	ldr	r2, [pc, #124]	; (80096b0 <prvSampleTimeNow+0xa4>)
 8009632:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009634:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8009636:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8009638:	2301      	movs	r3, #1
 800963a:	e000      	b.n	800963e <prvSampleTimeNow+0x32>
 800963c:	2300      	movs	r3, #0
}
 800963e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8009640:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8009642:	f8c8 5000 	str.w	r5, [r8]
}
 8009646:	b003      	add	sp, #12
 8009648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800964c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800964e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009650:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009654:	f104 0b04 	add.w	fp, r4, #4
 8009658:	4658      	mov	r0, fp
 800965a:	f7fe fbd9 	bl	8007e10 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800965e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009660:	4620      	mov	r0, r4
 8009662:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009664:	69e3      	ldr	r3, [r4, #28]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d1df      	bne.n	800962a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800966a:	69a3      	ldr	r3, [r4, #24]
 800966c:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800966e:	459a      	cmp	sl, r3
 8009670:	d206      	bcs.n	8009680 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009672:	4659      	mov	r1, fp
 8009674:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009676:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009678:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800967a:	f7fe fbb2 	bl	8007de2 <vListInsert>
 800967e:	e7d4      	b.n	800962a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009680:	2300      	movs	r3, #0
 8009682:	4652      	mov	r2, sl
 8009684:	4619      	mov	r1, r3
 8009686:	4620      	mov	r0, r4
 8009688:	f8cd 9000 	str.w	r9, [sp]
 800968c:	f7ff ff94 	bl	80095b8 <xTimerGenericCommand>
				configASSERT( xResult );
 8009690:	2800      	cmp	r0, #0
 8009692:	d1ca      	bne.n	800962a <prvSampleTimeNow+0x1e>
 8009694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	e7fe      	b.n	80096a4 <prvSampleTimeNow+0x98>
 80096a6:	bf00      	nop
 80096a8:	20001b5c 	.word	0x20001b5c
 80096ac:	20001ab4 	.word	0x20001ab4
 80096b0:	20001ab8 	.word	0x20001ab8

080096b4 <prvTimerTask>:
{
 80096b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096b8:	4e65      	ldr	r6, [pc, #404]	; (8009850 <prvTimerTask+0x19c>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096ba:	4f66      	ldr	r7, [pc, #408]	; (8009854 <prvTimerTask+0x1a0>)
{
 80096bc:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096be:	6833      	ldr	r3, [r6, #0]
 80096c0:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80096c2:	2d00      	cmp	r5, #0
 80096c4:	d033      	beq.n	800972e <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80096cc:	f7ff f9f4 	bl	8008ab8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096d0:	a803      	add	r0, sp, #12
 80096d2:	f7ff ff9b 	bl	800960c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80096d6:	9c03      	ldr	r4, [sp, #12]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096d8:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80096da:	2c00      	cmp	r4, #0
 80096dc:	d177      	bne.n	80097ce <prvTimerTask+0x11a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096de:	2d00      	cmp	r5, #0
 80096e0:	d05a      	beq.n	8009798 <prvTimerTask+0xe4>
 80096e2:	4540      	cmp	r0, r8
 80096e4:	d35e      	bcc.n	80097a4 <prvTimerTask+0xf0>
				( void ) xTaskResumeAll();
 80096e6:	f7ff fa87 	bl	8008bf8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096ea:	6833      	ldr	r3, [r6, #0]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096f0:	1d28      	adds	r0, r5, #4
 80096f2:	f7fe fb8d 	bl	8007e10 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80096f6:	69eb      	ldr	r3, [r5, #28]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d11a      	bne.n	8009732 <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80096fc:	69a9      	ldr	r1, [r5, #24]
 80096fe:	4643      	mov	r3, r8
 8009700:	464a      	mov	r2, r9
 8009702:	4628      	mov	r0, r5
 8009704:	4441      	add	r1, r8
 8009706:	f7ff fea3 	bl	8009450 <prvInsertTimerInActiveList>
 800970a:	b190      	cbz	r0, 8009732 <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800970c:	4623      	mov	r3, r4
 800970e:	4642      	mov	r2, r8
 8009710:	4621      	mov	r1, r4
 8009712:	4628      	mov	r0, r5
 8009714:	9400      	str	r4, [sp, #0]
 8009716:	f7ff ff4f 	bl	80095b8 <xTimerGenericCommand>
			configASSERT( xResult );
 800971a:	b950      	cbnz	r0, 8009732 <prvTimerTask+0x7e>
 800971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009720:	f383 8811 	msr	BASEPRI, r3
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	e7fe      	b.n	800972c <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 800972e:	46a8      	mov	r8, r5
 8009730:	e7cc      	b.n	80096cc <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009732:	4628      	mov	r0, r5
 8009734:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009736:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009738:	2500      	movs	r5, #0
 800973a:	2200      	movs	r2, #0
 800973c:	6838      	ldr	r0, [r7, #0]
 800973e:	a903      	add	r1, sp, #12
 8009740:	f7fe fdc2 	bl	80082c8 <xQueueReceive>
 8009744:	2800      	cmp	r0, #0
 8009746:	d0ba      	beq.n	80096be <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009748:	9b03      	ldr	r3, [sp, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	dbf5      	blt.n	800973a <prvTimerTask+0x86>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800974e:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009750:	6963      	ldr	r3, [r4, #20]
 8009752:	b113      	cbz	r3, 800975a <prvTimerTask+0xa6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009754:	1d20      	adds	r0, r4, #4
 8009756:	f7fe fb5b 	bl	8007e10 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800975a:	a802      	add	r0, sp, #8
 800975c:	f7ff ff56 	bl	800960c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009760:	9b03      	ldr	r3, [sp, #12]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009762:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8009764:	2b09      	cmp	r3, #9
 8009766:	d8e8      	bhi.n	800973a <prvTimerTask+0x86>
 8009768:	a101      	add	r1, pc, #4	; (adr r1, 8009770 <prvTimerTask+0xbc>)
 800976a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800976e:	bf00      	nop
 8009770:	080097d5 	.word	0x080097d5
 8009774:	080097d5 	.word	0x080097d5
 8009778:	080097d5 	.word	0x080097d5
 800977c:	0800973b 	.word	0x0800973b
 8009780:	08009819 	.word	0x08009819
 8009784:	0800983d 	.word	0x0800983d
 8009788:	080097d5 	.word	0x080097d5
 800978c:	080097d5 	.word	0x080097d5
 8009790:	0800973b 	.word	0x0800973b
 8009794:	08009819 	.word	0x08009819
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009798:	4b2f      	ldr	r3, [pc, #188]	; (8009858 <prvTimerTask+0x1a4>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681c      	ldr	r4, [r3, #0]
 800979e:	fab4 f484 	clz	r4, r4
 80097a2:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80097a4:	4622      	mov	r2, r4
 80097a6:	6838      	ldr	r0, [r7, #0]
 80097a8:	eba8 0109 	sub.w	r1, r8, r9
 80097ac:	f7fe fe8c 	bl	80084c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80097b0:	f7ff fa22 	bl	8008bf8 <xTaskResumeAll>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d1bf      	bne.n	8009738 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 80097b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80097bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	e7b4      	b.n	8009738 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 80097ce:	f7ff fa13 	bl	8008bf8 <xTaskResumeAll>
 80097d2:	e7b1      	b.n	8009738 <prvTimerTask+0x84>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097d4:	69a1      	ldr	r1, [r4, #24]
 80097d6:	9b04      	ldr	r3, [sp, #16]
 80097d8:	4620      	mov	r0, r4
 80097da:	4419      	add	r1, r3
 80097dc:	f7ff fe38 	bl	8009450 <prvInsertTimerInActiveList>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d0aa      	beq.n	800973a <prvTimerTask+0x86>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097e6:	4620      	mov	r0, r4
 80097e8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80097ea:	69e3      	ldr	r3, [r4, #28]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d1a4      	bne.n	800973a <prvTimerTask+0x86>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80097f0:	2300      	movs	r3, #0
 80097f2:	69a2      	ldr	r2, [r4, #24]
 80097f4:	9904      	ldr	r1, [sp, #16]
 80097f6:	4620      	mov	r0, r4
 80097f8:	440a      	add	r2, r1
 80097fa:	9500      	str	r5, [sp, #0]
 80097fc:	4619      	mov	r1, r3
 80097fe:	f7ff fedb 	bl	80095b8 <xTimerGenericCommand>
							configASSERT( xResult );
 8009802:	2800      	cmp	r0, #0
 8009804:	d199      	bne.n	800973a <prvTimerTask+0x86>
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	e7fe      	b.n	8009816 <prvTimerTask+0x162>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009818:	9904      	ldr	r1, [sp, #16]
 800981a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800981c:	b941      	cbnz	r1, 8009830 <prvTimerTask+0x17c>
 800981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	e7fe      	b.n	800982e <prvTimerTask+0x17a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009830:	4603      	mov	r3, r0
 8009832:	4401      	add	r1, r0
 8009834:	4620      	mov	r0, r4
 8009836:	f7ff fe0b 	bl	8009450 <prvInsertTimerInActiveList>
					break;
 800983a:	e77e      	b.n	800973a <prvTimerTask+0x86>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800983c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009840:	2b00      	cmp	r3, #0
 8009842:	f47f af7a 	bne.w	800973a <prvTimerTask+0x86>
							vPortFree( pxTimer );
 8009846:	4620      	mov	r0, r4
 8009848:	f000 fa1e 	bl	8009c88 <vPortFree>
 800984c:	e775      	b.n	800973a <prvTimerTask+0x86>
 800984e:	bf00      	nop
 8009850:	20001ab4 	.word	0x20001ab4
 8009854:	20001ba8 	.word	0x20001ba8
 8009858:	20001ab8 	.word	0x20001ab8

0800985c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800985c:	4806      	ldr	r0, [pc, #24]	; (8009878 <prvPortStartFirstTask+0x1c>)
 800985e:	6800      	ldr	r0, [r0, #0]
 8009860:	6800      	ldr	r0, [r0, #0]
 8009862:	f380 8808 	msr	MSP, r0
 8009866:	b662      	cpsie	i
 8009868:	b661      	cpsie	f
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	df00      	svc	0
 8009874:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009876:	0000      	.short	0x0000
 8009878:	e000ed08 	.word	0xe000ed08

0800987c <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 800987c:	2300      	movs	r3, #0
{
 800987e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8009880:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009882:	4b0d      	ldr	r3, [pc, #52]	; (80098b8 <prvTaskExitError+0x3c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3301      	adds	r3, #1
 8009888:	d008      	beq.n	800989c <prvTaskExitError+0x20>
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	e7fe      	b.n	800989a <prvTaskExitError+0x1e>
 800989c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a0:	f383 8811 	msr	BASEPRI, r3
 80098a4:	f3bf 8f6f 	isb	sy
 80098a8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80098ac:	9b01      	ldr	r3, [sp, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d0fc      	beq.n	80098ac <prvTaskExitError+0x30>
}
 80098b2:	b002      	add	sp, #8
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	2000000c 	.word	0x2000000c

080098bc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098c0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098c4:	4b05      	ldr	r3, [pc, #20]	; (80098dc <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098c6:	f021 0101 	bic.w	r1, r1, #1
 80098ca:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098ce:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098d2:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80098d6:	3840      	subs	r0, #64	; 0x40
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	0800987d 	.word	0x0800987d

080098e0 <SVC_Handler>:
	__asm volatile (
 80098e0:	4b07      	ldr	r3, [pc, #28]	; (8009900 <pxCurrentTCBConst2>)
 80098e2:	6819      	ldr	r1, [r3, #0]
 80098e4:	6808      	ldr	r0, [r1, #0]
 80098e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80098ea:	f380 8809 	msr	PSP, r0
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f04f 0000 	mov.w	r0, #0
 80098f6:	f380 8811 	msr	BASEPRI, r0
 80098fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80098fe:	4770      	bx	lr

08009900 <pxCurrentTCBConst2>:
 8009900:	2000198c 	.word	0x2000198c

08009904 <vPortEnterCritical>:
 8009904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009914:	4a0a      	ldr	r2, [pc, #40]	; (8009940 <vPortEnterCritical+0x3c>)
 8009916:	6813      	ldr	r3, [r2, #0]
 8009918:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800991a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800991c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800991e:	d10e      	bne.n	800993e <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009920:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009924:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009928:	b2db      	uxtb	r3, r3
 800992a:	b143      	cbz	r3, 800993e <vPortEnterCritical+0x3a>
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	e7fe      	b.n	800993c <vPortEnterCritical+0x38>
	}
}
 800993e:	4770      	bx	lr
 8009940:	2000000c 	.word	0x2000000c

08009944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8009944:	4a08      	ldr	r2, [pc, #32]	; (8009968 <vPortExitCritical+0x24>)
 8009946:	6813      	ldr	r3, [r2, #0]
 8009948:	b943      	cbnz	r3, 800995c <vPortExitCritical+0x18>
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	e7fe      	b.n	800995a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800995c:	3b01      	subs	r3, #1
 800995e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009960:	b90b      	cbnz	r3, 8009966 <vPortExitCritical+0x22>
	__asm volatile
 8009962:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009966:	4770      	bx	lr
 8009968:	2000000c 	.word	0x2000000c
 800996c:	00000000 	.word	0x00000000

08009970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009970:	f3ef 8009 	mrs	r0, PSP
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	4b0d      	ldr	r3, [pc, #52]	; (80099b0 <pxCurrentTCBConst>)
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009980:	6010      	str	r0, [r2, #0]
 8009982:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009986:	f04f 0050 	mov.w	r0, #80	; 0x50
 800998a:	f380 8811 	msr	BASEPRI, r0
 800998e:	f7ff fa17 	bl	8008dc0 <vTaskSwitchContext>
 8009992:	f04f 0000 	mov.w	r0, #0
 8009996:	f380 8811 	msr	BASEPRI, r0
 800999a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800999e:	6819      	ldr	r1, [r3, #0]
 80099a0:	6808      	ldr	r0, [r1, #0]
 80099a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80099a6:	f380 8809 	msr	PSP, r0
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	4770      	bx	lr

080099b0 <pxCurrentTCBConst>:
 80099b0:	2000198c 	.word	0x2000198c

080099b4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099b4:	b508      	push	{r3, lr}
	__asm volatile
 80099b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099c6:	f7ff f885 	bl	8008ad4 <xTaskIncrementTick>
 80099ca:	b128      	cbz	r0, 80099d8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80099d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80099d8:	2300      	movs	r3, #0
 80099da:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80099de:	bd08      	pop	{r3, pc}

080099e0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099e0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80099e4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099ea:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099ec:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099ee:	4b04      	ldr	r3, [pc, #16]	; (8009a00 <vPortSetupTimerInterrupt+0x20>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80099f6:	3b01      	subs	r3, #1
 80099f8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099fa:	2307      	movs	r3, #7
 80099fc:	6113      	str	r3, [r2, #16]
}
 80099fe:	4770      	bx	lr
 8009a00:	20000000 	.word	0x20000000

08009a04 <xPortStartScheduler>:
{
 8009a04:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a06:	4b29      	ldr	r3, [pc, #164]	; (8009aac <xPortStartScheduler+0xa8>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a08:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a0a:	781a      	ldrb	r2, [r3, #0]
 8009a0c:	b2d2      	uxtb	r2, r2
 8009a0e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a10:	22ff      	movs	r2, #255	; 0xff
 8009a12:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a14:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a16:	4a26      	ldr	r2, [pc, #152]	; (8009ab0 <xPortStartScheduler+0xac>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009a22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a26:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a28:	2307      	movs	r3, #7
 8009a2a:	4a22      	ldr	r2, [pc, #136]	; (8009ab4 <xPortStartScheduler+0xb0>)
 8009a2c:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a2e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009a32:	1e5c      	subs	r4, r3, #1
 8009a34:	0600      	lsls	r0, r0, #24
 8009a36:	d40c      	bmi.n	8009a52 <xPortStartScheduler+0x4e>
 8009a38:	b111      	cbz	r1, 8009a40 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	d011      	beq.n	8009a64 <xPortStartScheduler+0x60>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	e7fe      	b.n	8009a50 <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a52:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009a56:	2101      	movs	r1, #1
 8009a58:	005b      	lsls	r3, r3, #1
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	f88d 3003 	strb.w	r3, [sp, #3]
 8009a60:	4623      	mov	r3, r4
 8009a62:	e7e4      	b.n	8009a2e <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009a68:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a6a:	9b01      	ldr	r3, [sp, #4]
 8009a6c:	4a0f      	ldr	r2, [pc, #60]	; (8009aac <xPortStartScheduler+0xa8>)
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8009a76:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a78:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8009a7c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009a80:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a84:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8009a88:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8009a8c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8009a90:	f7ff ffa6 	bl	80099e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009a94:	4b08      	ldr	r3, [pc, #32]	; (8009ab8 <xPortStartScheduler+0xb4>)
 8009a96:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8009a98:	f7ff fee0 	bl	800985c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009a9c:	f7ff f990 	bl	8008dc0 <vTaskSwitchContext>
}
 8009aa0:	4620      	mov	r0, r4
	prvTaskExitError();
 8009aa2:	f7ff feeb 	bl	800987c <prvTaskExitError>
}
 8009aa6:	b002      	add	sp, #8
 8009aa8:	bd10      	pop	{r4, pc}
 8009aaa:	bf00      	nop
 8009aac:	e000e400 	.word	0xe000e400
 8009ab0:	20001bb0 	.word	0x20001bb0
 8009ab4:	20001bb4 	.word	0x20001bb4
 8009ab8:	2000000c 	.word	0x2000000c

08009abc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009abc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ac0:	2b0f      	cmp	r3, #15
 8009ac2:	d90e      	bls.n	8009ae2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ac4:	4a11      	ldr	r2, [pc, #68]	; (8009b0c <vPortValidateInterruptPriority+0x50>)
 8009ac6:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ac8:	4a11      	ldr	r2, [pc, #68]	; (8009b10 <vPortValidateInterruptPriority+0x54>)
 8009aca:	7812      	ldrb	r2, [r2, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d908      	bls.n	8009ae2 <vPortValidateInterruptPriority+0x26>
 8009ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	e7fe      	b.n	8009ae0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ae2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009ae6:	4a0b      	ldr	r2, [pc, #44]	; (8009b14 <vPortValidateInterruptPriority+0x58>)
 8009ae8:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009aec:	6812      	ldr	r2, [r2, #0]
 8009aee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d908      	bls.n	8009b08 <vPortValidateInterruptPriority+0x4c>
 8009af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	e7fe      	b.n	8009b06 <vPortValidateInterruptPriority+0x4a>
	}
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	e000e3f0 	.word	0xe000e3f0
 8009b10:	20001bb0 	.word	0x20001bb0
 8009b14:	20001bb4 	.word	0x20001bb4

08009b18 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b18:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b1a:	4b10      	ldr	r3, [pc, #64]	; (8009b5c <prvInsertBlockIntoFreeList+0x44>)
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4283      	cmp	r3, r0
 8009b22:	d3fb      	bcc.n	8009b1c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b24:	6854      	ldr	r4, [r2, #4]
 8009b26:	1911      	adds	r1, r2, r4
 8009b28:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b2a:	bf01      	itttt	eq
 8009b2c:	6841      	ldreq	r1, [r0, #4]
 8009b2e:	4610      	moveq	r0, r2
 8009b30:	1909      	addeq	r1, r1, r4
 8009b32:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b34:	6844      	ldr	r4, [r0, #4]
 8009b36:	1901      	adds	r1, r0, r4
 8009b38:	428b      	cmp	r3, r1
 8009b3a:	d10c      	bne.n	8009b56 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b3c:	4908      	ldr	r1, [pc, #32]	; (8009b60 <prvInsertBlockIntoFreeList+0x48>)
 8009b3e:	6809      	ldr	r1, [r1, #0]
 8009b40:	428b      	cmp	r3, r1
 8009b42:	d003      	beq.n	8009b4c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b44:	6859      	ldr	r1, [r3, #4]
 8009b46:	4421      	add	r1, r4
 8009b48:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b4a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b4c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b4e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b50:	bf18      	it	ne
 8009b52:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b54:	bd10      	pop	{r4, pc}
 8009b56:	4619      	mov	r1, r3
 8009b58:	e7f8      	b.n	8009b4c <prvInsertBlockIntoFreeList+0x34>
 8009b5a:	bf00      	nop
 8009b5c:	20002bc8 	.word	0x20002bc8
 8009b60:	20001bb8 	.word	0x20001bb8

08009b64 <pvPortMalloc>:
{
 8009b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b68:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009b6a:	f7fe ffa5 	bl	8008ab8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009b6e:	4940      	ldr	r1, [pc, #256]	; (8009c70 <pvPortMalloc+0x10c>)
 8009b70:	4d40      	ldr	r5, [pc, #256]	; (8009c74 <pvPortMalloc+0x110>)
 8009b72:	680b      	ldr	r3, [r1, #0]
 8009b74:	bb0b      	cbnz	r3, 8009bba <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8009b76:	4a40      	ldr	r2, [pc, #256]	; (8009c78 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b78:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b7a:	bf1f      	itttt	ne
 8009b7c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b7e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b82:	f502 5280 	addne.w	r2, r2, #4096	; 0x1000
 8009b86:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b88:	bf0c      	ite	eq
 8009b8a:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b8e:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 8009b90:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b92:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b94:	4e39      	ldr	r6, [pc, #228]	; (8009c7c <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 8009b96:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b98:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8009b9c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b9e:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8009ba0:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ba4:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ba6:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8009baa:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bac:	4b34      	ldr	r3, [pc, #208]	; (8009c80 <pvPortMalloc+0x11c>)
 8009bae:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bb0:	4b34      	ldr	r3, [pc, #208]	; (8009c84 <pvPortMalloc+0x120>)
 8009bb2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009bb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bb8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bba:	682e      	ldr	r6, [r5, #0]
 8009bbc:	4226      	tst	r6, r4
 8009bbe:	d151      	bne.n	8009c64 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8009bc0:	2c00      	cmp	r4, #0
 8009bc2:	d042      	beq.n	8009c4a <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8009bc4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bc8:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bca:	bf1c      	itt	ne
 8009bcc:	f023 0307 	bicne.w	r3, r3, #7
 8009bd0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d046      	beq.n	8009c64 <pvPortMalloc+0x100>
 8009bd6:	4f2b      	ldr	r7, [pc, #172]	; (8009c84 <pvPortMalloc+0x120>)
 8009bd8:	683c      	ldr	r4, [r7, #0]
 8009bda:	429c      	cmp	r4, r3
 8009bdc:	d342      	bcc.n	8009c64 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8009bde:	4a27      	ldr	r2, [pc, #156]	; (8009c7c <pvPortMalloc+0x118>)
 8009be0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009be2:	6868      	ldr	r0, [r5, #4]
 8009be4:	4298      	cmp	r0, r3
 8009be6:	d204      	bcs.n	8009bf2 <pvPortMalloc+0x8e>
 8009be8:	f8d5 c000 	ldr.w	ip, [r5]
 8009bec:	f1bc 0f00 	cmp.w	ip, #0
 8009bf0:	d115      	bne.n	8009c1e <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8009bf2:	6809      	ldr	r1, [r1, #0]
 8009bf4:	42a9      	cmp	r1, r5
 8009bf6:	d035      	beq.n	8009c64 <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009bf8:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009bfa:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009bfe:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c00:	1ac2      	subs	r2, r0, r3
 8009c02:	2a10      	cmp	r2, #16
 8009c04:	d912      	bls.n	8009c2c <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c06:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c08:	0741      	lsls	r1, r0, #29
 8009c0a:	d00b      	beq.n	8009c24 <pvPortMalloc+0xc0>
 8009c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	e7fe      	b.n	8009c1c <pvPortMalloc+0xb8>
 8009c1e:	462a      	mov	r2, r5
 8009c20:	4665      	mov	r5, ip
 8009c22:	e7de      	b.n	8009be2 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c24:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c26:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c28:	f7ff ff76 	bl	8009b18 <prvInsertBlockIntoFreeList>
					pxBlock->pxNextFreeBlock = NULL;
 8009c2c:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c2e:	4914      	ldr	r1, [pc, #80]	; (8009c80 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c30:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c32:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c34:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c36:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c38:	ea46 0602 	orr.w	r6, r6, r2
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c3c:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c3e:	bf38      	it	cc
 8009c40:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c42:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c44:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8009c48:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8009c4a:	f7fe ffd5 	bl	8008bf8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c4e:	0763      	lsls	r3, r4, #29
 8009c50:	d00a      	beq.n	8009c68 <pvPortMalloc+0x104>
 8009c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	e7fe      	b.n	8009c62 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 8009c64:	2400      	movs	r4, #0
 8009c66:	e7f0      	b.n	8009c4a <pvPortMalloc+0xe6>
}
 8009c68:	4620      	mov	r0, r4
 8009c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c6e:	bf00      	nop
 8009c70:	20001bb8 	.word	0x20001bb8
 8009c74:	20002bbc 	.word	0x20002bbc
 8009c78:	20001bbc 	.word	0x20001bbc
 8009c7c:	20002bc8 	.word	0x20002bc8
 8009c80:	20002bc4 	.word	0x20002bc4
 8009c84:	20002bc0 	.word	0x20002bc0

08009c88 <vPortFree>:
{
 8009c88:	b510      	push	{r4, lr}
	if( pv != NULL )
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	b370      	cbz	r0, 8009cec <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c8e:	4a18      	ldr	r2, [pc, #96]	; (8009cf0 <vPortFree+0x68>)
 8009c90:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009c94:	6812      	ldr	r2, [r2, #0]
 8009c96:	4213      	tst	r3, r2
 8009c98:	d108      	bne.n	8009cac <vPortFree+0x24>
 8009c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	e7fe      	b.n	8009caa <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cac:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009cb0:	b141      	cbz	r1, 8009cc4 <vPortFree+0x3c>
 8009cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	e7fe      	b.n	8009cc2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cc4:	ea23 0302 	bic.w	r3, r3, r2
 8009cc8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009ccc:	f7fe fef4 	bl	8008ab8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cd0:	4a08      	ldr	r2, [pc, #32]	; (8009cf4 <vPortFree+0x6c>)
 8009cd2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009cd6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cd8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cdc:	440b      	add	r3, r1
 8009cde:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ce0:	f7ff ff1a 	bl	8009b18 <prvInsertBlockIntoFreeList>
}
 8009ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8009ce8:	f7fe bf86 	b.w	8008bf8 <xTaskResumeAll>
}
 8009cec:	bd10      	pop	{r4, pc}
 8009cee:	bf00      	nop
 8009cf0:	20002bbc 	.word	0x20002bbc
 8009cf4:	20002bc0 	.word	0x20002bc0

08009cf8 <malloc>:
 8009cf8:	4b02      	ldr	r3, [pc, #8]	; (8009d04 <malloc+0xc>)
 8009cfa:	4601      	mov	r1, r0
 8009cfc:	6818      	ldr	r0, [r3, #0]
 8009cfe:	f000 b823 	b.w	8009d48 <_malloc_r>
 8009d02:	bf00      	nop
 8009d04:	20000068 	.word	0x20000068

08009d08 <sbrk_aligned>:
 8009d08:	b570      	push	{r4, r5, r6, lr}
 8009d0a:	4e0e      	ldr	r6, [pc, #56]	; (8009d44 <sbrk_aligned+0x3c>)
 8009d0c:	460c      	mov	r4, r1
 8009d0e:	6831      	ldr	r1, [r6, #0]
 8009d10:	4605      	mov	r5, r0
 8009d12:	b911      	cbnz	r1, 8009d1a <sbrk_aligned+0x12>
 8009d14:	f000 fb88 	bl	800a428 <_sbrk_r>
 8009d18:	6030      	str	r0, [r6, #0]
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	f000 fb83 	bl	800a428 <_sbrk_r>
 8009d22:	1c43      	adds	r3, r0, #1
 8009d24:	d00a      	beq.n	8009d3c <sbrk_aligned+0x34>
 8009d26:	1cc4      	adds	r4, r0, #3
 8009d28:	f024 0403 	bic.w	r4, r4, #3
 8009d2c:	42a0      	cmp	r0, r4
 8009d2e:	d007      	beq.n	8009d40 <sbrk_aligned+0x38>
 8009d30:	1a21      	subs	r1, r4, r0
 8009d32:	4628      	mov	r0, r5
 8009d34:	f000 fb78 	bl	800a428 <_sbrk_r>
 8009d38:	3001      	adds	r0, #1
 8009d3a:	d101      	bne.n	8009d40 <sbrk_aligned+0x38>
 8009d3c:	f04f 34ff 	mov.w	r4, #4294967295
 8009d40:	4620      	mov	r0, r4
 8009d42:	bd70      	pop	{r4, r5, r6, pc}
 8009d44:	20002bd4 	.word	0x20002bd4

08009d48 <_malloc_r>:
 8009d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d4c:	1ccd      	adds	r5, r1, #3
 8009d4e:	f025 0503 	bic.w	r5, r5, #3
 8009d52:	3508      	adds	r5, #8
 8009d54:	2d0c      	cmp	r5, #12
 8009d56:	bf38      	it	cc
 8009d58:	250c      	movcc	r5, #12
 8009d5a:	2d00      	cmp	r5, #0
 8009d5c:	4607      	mov	r7, r0
 8009d5e:	db01      	blt.n	8009d64 <_malloc_r+0x1c>
 8009d60:	42a9      	cmp	r1, r5
 8009d62:	d905      	bls.n	8009d70 <_malloc_r+0x28>
 8009d64:	230c      	movs	r3, #12
 8009d66:	2600      	movs	r6, #0
 8009d68:	603b      	str	r3, [r7, #0]
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e44 <_malloc_r+0xfc>
 8009d74:	f000 f868 	bl	8009e48 <__malloc_lock>
 8009d78:	f8d8 3000 	ldr.w	r3, [r8]
 8009d7c:	461c      	mov	r4, r3
 8009d7e:	bb5c      	cbnz	r4, 8009dd8 <_malloc_r+0x90>
 8009d80:	4629      	mov	r1, r5
 8009d82:	4638      	mov	r0, r7
 8009d84:	f7ff ffc0 	bl	8009d08 <sbrk_aligned>
 8009d88:	1c43      	adds	r3, r0, #1
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	d155      	bne.n	8009e3a <_malloc_r+0xf2>
 8009d8e:	f8d8 4000 	ldr.w	r4, [r8]
 8009d92:	4626      	mov	r6, r4
 8009d94:	2e00      	cmp	r6, #0
 8009d96:	d145      	bne.n	8009e24 <_malloc_r+0xdc>
 8009d98:	2c00      	cmp	r4, #0
 8009d9a:	d048      	beq.n	8009e2e <_malloc_r+0xe6>
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	4631      	mov	r1, r6
 8009da0:	4638      	mov	r0, r7
 8009da2:	eb04 0903 	add.w	r9, r4, r3
 8009da6:	f000 fb3f 	bl	800a428 <_sbrk_r>
 8009daa:	4581      	cmp	r9, r0
 8009dac:	d13f      	bne.n	8009e2e <_malloc_r+0xe6>
 8009dae:	6821      	ldr	r1, [r4, #0]
 8009db0:	4638      	mov	r0, r7
 8009db2:	1a6d      	subs	r5, r5, r1
 8009db4:	4629      	mov	r1, r5
 8009db6:	f7ff ffa7 	bl	8009d08 <sbrk_aligned>
 8009dba:	3001      	adds	r0, #1
 8009dbc:	d037      	beq.n	8009e2e <_malloc_r+0xe6>
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	442b      	add	r3, r5
 8009dc2:	6023      	str	r3, [r4, #0]
 8009dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d038      	beq.n	8009e3e <_malloc_r+0xf6>
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	42a2      	cmp	r2, r4
 8009dd0:	d12b      	bne.n	8009e2a <_malloc_r+0xe2>
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	605a      	str	r2, [r3, #4]
 8009dd6:	e00f      	b.n	8009df8 <_malloc_r+0xb0>
 8009dd8:	6822      	ldr	r2, [r4, #0]
 8009dda:	1b52      	subs	r2, r2, r5
 8009ddc:	d41f      	bmi.n	8009e1e <_malloc_r+0xd6>
 8009dde:	2a0b      	cmp	r2, #11
 8009de0:	d917      	bls.n	8009e12 <_malloc_r+0xca>
 8009de2:	1961      	adds	r1, r4, r5
 8009de4:	42a3      	cmp	r3, r4
 8009de6:	6025      	str	r5, [r4, #0]
 8009de8:	bf18      	it	ne
 8009dea:	6059      	strne	r1, [r3, #4]
 8009dec:	6863      	ldr	r3, [r4, #4]
 8009dee:	bf08      	it	eq
 8009df0:	f8c8 1000 	streq.w	r1, [r8]
 8009df4:	5162      	str	r2, [r4, r5]
 8009df6:	604b      	str	r3, [r1, #4]
 8009df8:	4638      	mov	r0, r7
 8009dfa:	f104 060b 	add.w	r6, r4, #11
 8009dfe:	f000 f829 	bl	8009e54 <__malloc_unlock>
 8009e02:	f026 0607 	bic.w	r6, r6, #7
 8009e06:	1d23      	adds	r3, r4, #4
 8009e08:	1af2      	subs	r2, r6, r3
 8009e0a:	d0ae      	beq.n	8009d6a <_malloc_r+0x22>
 8009e0c:	1b9b      	subs	r3, r3, r6
 8009e0e:	50a3      	str	r3, [r4, r2]
 8009e10:	e7ab      	b.n	8009d6a <_malloc_r+0x22>
 8009e12:	42a3      	cmp	r3, r4
 8009e14:	6862      	ldr	r2, [r4, #4]
 8009e16:	d1dd      	bne.n	8009dd4 <_malloc_r+0x8c>
 8009e18:	f8c8 2000 	str.w	r2, [r8]
 8009e1c:	e7ec      	b.n	8009df8 <_malloc_r+0xb0>
 8009e1e:	4623      	mov	r3, r4
 8009e20:	6864      	ldr	r4, [r4, #4]
 8009e22:	e7ac      	b.n	8009d7e <_malloc_r+0x36>
 8009e24:	4634      	mov	r4, r6
 8009e26:	6876      	ldr	r6, [r6, #4]
 8009e28:	e7b4      	b.n	8009d94 <_malloc_r+0x4c>
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	e7cc      	b.n	8009dc8 <_malloc_r+0x80>
 8009e2e:	230c      	movs	r3, #12
 8009e30:	4638      	mov	r0, r7
 8009e32:	603b      	str	r3, [r7, #0]
 8009e34:	f000 f80e 	bl	8009e54 <__malloc_unlock>
 8009e38:	e797      	b.n	8009d6a <_malloc_r+0x22>
 8009e3a:	6025      	str	r5, [r4, #0]
 8009e3c:	e7dc      	b.n	8009df8 <_malloc_r+0xb0>
 8009e3e:	605b      	str	r3, [r3, #4]
 8009e40:	deff      	udf	#255	; 0xff
 8009e42:	bf00      	nop
 8009e44:	20002bd0 	.word	0x20002bd0

08009e48 <__malloc_lock>:
 8009e48:	4801      	ldr	r0, [pc, #4]	; (8009e50 <__malloc_lock+0x8>)
 8009e4a:	f000 bb3a 	b.w	800a4c2 <__retarget_lock_acquire_recursive>
 8009e4e:	bf00      	nop
 8009e50:	20002d18 	.word	0x20002d18

08009e54 <__malloc_unlock>:
 8009e54:	4801      	ldr	r0, [pc, #4]	; (8009e5c <__malloc_unlock+0x8>)
 8009e56:	f000 bb35 	b.w	800a4c4 <__retarget_lock_release_recursive>
 8009e5a:	bf00      	nop
 8009e5c:	20002d18 	.word	0x20002d18

08009e60 <std>:
 8009e60:	2300      	movs	r3, #0
 8009e62:	b510      	push	{r4, lr}
 8009e64:	4604      	mov	r4, r0
 8009e66:	e9c0 3300 	strd	r3, r3, [r0]
 8009e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e6e:	6083      	str	r3, [r0, #8]
 8009e70:	8181      	strh	r1, [r0, #12]
 8009e72:	6643      	str	r3, [r0, #100]	; 0x64
 8009e74:	81c2      	strh	r2, [r0, #14]
 8009e76:	6183      	str	r3, [r0, #24]
 8009e78:	4619      	mov	r1, r3
 8009e7a:	2208      	movs	r2, #8
 8009e7c:	305c      	adds	r0, #92	; 0x5c
 8009e7e:	f000 fa2b 	bl	800a2d8 <memset>
 8009e82:	4b0d      	ldr	r3, [pc, #52]	; (8009eb8 <std+0x58>)
 8009e84:	6224      	str	r4, [r4, #32]
 8009e86:	6263      	str	r3, [r4, #36]	; 0x24
 8009e88:	4b0c      	ldr	r3, [pc, #48]	; (8009ebc <std+0x5c>)
 8009e8a:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e8c:	4b0c      	ldr	r3, [pc, #48]	; (8009ec0 <std+0x60>)
 8009e8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e90:	4b0c      	ldr	r3, [pc, #48]	; (8009ec4 <std+0x64>)
 8009e92:	6323      	str	r3, [r4, #48]	; 0x30
 8009e94:	4b0c      	ldr	r3, [pc, #48]	; (8009ec8 <std+0x68>)
 8009e96:	429c      	cmp	r4, r3
 8009e98:	d006      	beq.n	8009ea8 <std+0x48>
 8009e9a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009e9e:	4294      	cmp	r4, r2
 8009ea0:	d002      	beq.n	8009ea8 <std+0x48>
 8009ea2:	33d0      	adds	r3, #208	; 0xd0
 8009ea4:	429c      	cmp	r4, r3
 8009ea6:	d105      	bne.n	8009eb4 <std+0x54>
 8009ea8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eb0:	f000 bb06 	b.w	800a4c0 <__retarget_lock_init_recursive>
 8009eb4:	bd10      	pop	{r4, pc}
 8009eb6:	bf00      	nop
 8009eb8:	0800a129 	.word	0x0800a129
 8009ebc:	0800a14b 	.word	0x0800a14b
 8009ec0:	0800a183 	.word	0x0800a183
 8009ec4:	0800a1a7 	.word	0x0800a1a7
 8009ec8:	20002bd8 	.word	0x20002bd8

08009ecc <stdio_exit_handler>:
 8009ecc:	4a02      	ldr	r2, [pc, #8]	; (8009ed8 <stdio_exit_handler+0xc>)
 8009ece:	4903      	ldr	r1, [pc, #12]	; (8009edc <stdio_exit_handler+0x10>)
 8009ed0:	4803      	ldr	r0, [pc, #12]	; (8009ee0 <stdio_exit_handler+0x14>)
 8009ed2:	f000 b869 	b.w	8009fa8 <_fwalk_sglue>
 8009ed6:	bf00      	nop
 8009ed8:	20000010 	.word	0x20000010
 8009edc:	0800aee5 	.word	0x0800aee5
 8009ee0:	2000001c 	.word	0x2000001c

08009ee4 <cleanup_stdio>:
 8009ee4:	6841      	ldr	r1, [r0, #4]
 8009ee6:	4b0c      	ldr	r3, [pc, #48]	; (8009f18 <cleanup_stdio+0x34>)
 8009ee8:	b510      	push	{r4, lr}
 8009eea:	4299      	cmp	r1, r3
 8009eec:	4604      	mov	r4, r0
 8009eee:	d001      	beq.n	8009ef4 <cleanup_stdio+0x10>
 8009ef0:	f000 fff8 	bl	800aee4 <_fflush_r>
 8009ef4:	68a1      	ldr	r1, [r4, #8]
 8009ef6:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <cleanup_stdio+0x38>)
 8009ef8:	4299      	cmp	r1, r3
 8009efa:	d002      	beq.n	8009f02 <cleanup_stdio+0x1e>
 8009efc:	4620      	mov	r0, r4
 8009efe:	f000 fff1 	bl	800aee4 <_fflush_r>
 8009f02:	68e1      	ldr	r1, [r4, #12]
 8009f04:	4b06      	ldr	r3, [pc, #24]	; (8009f20 <cleanup_stdio+0x3c>)
 8009f06:	4299      	cmp	r1, r3
 8009f08:	d004      	beq.n	8009f14 <cleanup_stdio+0x30>
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f10:	f000 bfe8 	b.w	800aee4 <_fflush_r>
 8009f14:	bd10      	pop	{r4, pc}
 8009f16:	bf00      	nop
 8009f18:	20002bd8 	.word	0x20002bd8
 8009f1c:	20002c40 	.word	0x20002c40
 8009f20:	20002ca8 	.word	0x20002ca8

08009f24 <global_stdio_init.part.0>:
 8009f24:	b510      	push	{r4, lr}
 8009f26:	4b0b      	ldr	r3, [pc, #44]	; (8009f54 <global_stdio_init.part.0+0x30>)
 8009f28:	4c0b      	ldr	r4, [pc, #44]	; (8009f58 <global_stdio_init.part.0+0x34>)
 8009f2a:	4a0c      	ldr	r2, [pc, #48]	; (8009f5c <global_stdio_init.part.0+0x38>)
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	601a      	str	r2, [r3, #0]
 8009f30:	2104      	movs	r1, #4
 8009f32:	2200      	movs	r2, #0
 8009f34:	f7ff ff94 	bl	8009e60 <std>
 8009f38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	2109      	movs	r1, #9
 8009f40:	f7ff ff8e 	bl	8009e60 <std>
 8009f44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009f48:	2202      	movs	r2, #2
 8009f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f4e:	2112      	movs	r1, #18
 8009f50:	f7ff bf86 	b.w	8009e60 <std>
 8009f54:	20002d10 	.word	0x20002d10
 8009f58:	20002bd8 	.word	0x20002bd8
 8009f5c:	08009ecd 	.word	0x08009ecd

08009f60 <__sfp_lock_acquire>:
 8009f60:	4801      	ldr	r0, [pc, #4]	; (8009f68 <__sfp_lock_acquire+0x8>)
 8009f62:	f000 baae 	b.w	800a4c2 <__retarget_lock_acquire_recursive>
 8009f66:	bf00      	nop
 8009f68:	20002d19 	.word	0x20002d19

08009f6c <__sfp_lock_release>:
 8009f6c:	4801      	ldr	r0, [pc, #4]	; (8009f74 <__sfp_lock_release+0x8>)
 8009f6e:	f000 baa9 	b.w	800a4c4 <__retarget_lock_release_recursive>
 8009f72:	bf00      	nop
 8009f74:	20002d19 	.word	0x20002d19

08009f78 <__sinit>:
 8009f78:	b510      	push	{r4, lr}
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	f7ff fff0 	bl	8009f60 <__sfp_lock_acquire>
 8009f80:	6a23      	ldr	r3, [r4, #32]
 8009f82:	b11b      	cbz	r3, 8009f8c <__sinit+0x14>
 8009f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f88:	f7ff bff0 	b.w	8009f6c <__sfp_lock_release>
 8009f8c:	4b04      	ldr	r3, [pc, #16]	; (8009fa0 <__sinit+0x28>)
 8009f8e:	6223      	str	r3, [r4, #32]
 8009f90:	4b04      	ldr	r3, [pc, #16]	; (8009fa4 <__sinit+0x2c>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1f5      	bne.n	8009f84 <__sinit+0xc>
 8009f98:	f7ff ffc4 	bl	8009f24 <global_stdio_init.part.0>
 8009f9c:	e7f2      	b.n	8009f84 <__sinit+0xc>
 8009f9e:	bf00      	nop
 8009fa0:	08009ee5 	.word	0x08009ee5
 8009fa4:	20002d10 	.word	0x20002d10

08009fa8 <_fwalk_sglue>:
 8009fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fac:	4607      	mov	r7, r0
 8009fae:	4688      	mov	r8, r1
 8009fb0:	4614      	mov	r4, r2
 8009fb2:	2600      	movs	r6, #0
 8009fb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fb8:	f1b9 0901 	subs.w	r9, r9, #1
 8009fbc:	d505      	bpl.n	8009fca <_fwalk_sglue+0x22>
 8009fbe:	6824      	ldr	r4, [r4, #0]
 8009fc0:	2c00      	cmp	r4, #0
 8009fc2:	d1f7      	bne.n	8009fb4 <_fwalk_sglue+0xc>
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fca:	89ab      	ldrh	r3, [r5, #12]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d907      	bls.n	8009fe0 <_fwalk_sglue+0x38>
 8009fd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	d003      	beq.n	8009fe0 <_fwalk_sglue+0x38>
 8009fd8:	4629      	mov	r1, r5
 8009fda:	4638      	mov	r0, r7
 8009fdc:	47c0      	blx	r8
 8009fde:	4306      	orrs	r6, r0
 8009fe0:	3568      	adds	r5, #104	; 0x68
 8009fe2:	e7e9      	b.n	8009fb8 <_fwalk_sglue+0x10>

08009fe4 <iprintf>:
 8009fe4:	b40f      	push	{r0, r1, r2, r3}
 8009fe6:	b507      	push	{r0, r1, r2, lr}
 8009fe8:	4906      	ldr	r1, [pc, #24]	; (800a004 <iprintf+0x20>)
 8009fea:	ab04      	add	r3, sp, #16
 8009fec:	6808      	ldr	r0, [r1, #0]
 8009fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ff2:	6881      	ldr	r1, [r0, #8]
 8009ff4:	9301      	str	r3, [sp, #4]
 8009ff6:	f000 fc45 	bl	800a884 <_vfiprintf_r>
 8009ffa:	b003      	add	sp, #12
 8009ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a000:	b004      	add	sp, #16
 800a002:	4770      	bx	lr
 800a004:	20000068 	.word	0x20000068

0800a008 <_puts_r>:
 800a008:	6a03      	ldr	r3, [r0, #32]
 800a00a:	b570      	push	{r4, r5, r6, lr}
 800a00c:	4605      	mov	r5, r0
 800a00e:	460e      	mov	r6, r1
 800a010:	6884      	ldr	r4, [r0, #8]
 800a012:	b90b      	cbnz	r3, 800a018 <_puts_r+0x10>
 800a014:	f7ff ffb0 	bl	8009f78 <__sinit>
 800a018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a01a:	07db      	lsls	r3, r3, #31
 800a01c:	d405      	bmi.n	800a02a <_puts_r+0x22>
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	0598      	lsls	r0, r3, #22
 800a022:	d402      	bmi.n	800a02a <_puts_r+0x22>
 800a024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a026:	f000 fa4c 	bl	800a4c2 <__retarget_lock_acquire_recursive>
 800a02a:	89a3      	ldrh	r3, [r4, #12]
 800a02c:	0719      	lsls	r1, r3, #28
 800a02e:	d513      	bpl.n	800a058 <_puts_r+0x50>
 800a030:	6923      	ldr	r3, [r4, #16]
 800a032:	b18b      	cbz	r3, 800a058 <_puts_r+0x50>
 800a034:	3e01      	subs	r6, #1
 800a036:	68a3      	ldr	r3, [r4, #8]
 800a038:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a03c:	3b01      	subs	r3, #1
 800a03e:	60a3      	str	r3, [r4, #8]
 800a040:	b9e9      	cbnz	r1, 800a07e <_puts_r+0x76>
 800a042:	2b00      	cmp	r3, #0
 800a044:	da2e      	bge.n	800a0a4 <_puts_r+0x9c>
 800a046:	4622      	mov	r2, r4
 800a048:	210a      	movs	r1, #10
 800a04a:	4628      	mov	r0, r5
 800a04c:	f000 f8af 	bl	800a1ae <__swbuf_r>
 800a050:	3001      	adds	r0, #1
 800a052:	d007      	beq.n	800a064 <_puts_r+0x5c>
 800a054:	250a      	movs	r5, #10
 800a056:	e007      	b.n	800a068 <_puts_r+0x60>
 800a058:	4621      	mov	r1, r4
 800a05a:	4628      	mov	r0, r5
 800a05c:	f000 f8e4 	bl	800a228 <__swsetup_r>
 800a060:	2800      	cmp	r0, #0
 800a062:	d0e7      	beq.n	800a034 <_puts_r+0x2c>
 800a064:	f04f 35ff 	mov.w	r5, #4294967295
 800a068:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a06a:	07da      	lsls	r2, r3, #31
 800a06c:	d405      	bmi.n	800a07a <_puts_r+0x72>
 800a06e:	89a3      	ldrh	r3, [r4, #12]
 800a070:	059b      	lsls	r3, r3, #22
 800a072:	d402      	bmi.n	800a07a <_puts_r+0x72>
 800a074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a076:	f000 fa25 	bl	800a4c4 <__retarget_lock_release_recursive>
 800a07a:	4628      	mov	r0, r5
 800a07c:	bd70      	pop	{r4, r5, r6, pc}
 800a07e:	2b00      	cmp	r3, #0
 800a080:	da04      	bge.n	800a08c <_puts_r+0x84>
 800a082:	69a2      	ldr	r2, [r4, #24]
 800a084:	429a      	cmp	r2, r3
 800a086:	dc06      	bgt.n	800a096 <_puts_r+0x8e>
 800a088:	290a      	cmp	r1, #10
 800a08a:	d004      	beq.n	800a096 <_puts_r+0x8e>
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	1c5a      	adds	r2, r3, #1
 800a090:	6022      	str	r2, [r4, #0]
 800a092:	7019      	strb	r1, [r3, #0]
 800a094:	e7cf      	b.n	800a036 <_puts_r+0x2e>
 800a096:	4622      	mov	r2, r4
 800a098:	4628      	mov	r0, r5
 800a09a:	f000 f888 	bl	800a1ae <__swbuf_r>
 800a09e:	3001      	adds	r0, #1
 800a0a0:	d1c9      	bne.n	800a036 <_puts_r+0x2e>
 800a0a2:	e7df      	b.n	800a064 <_puts_r+0x5c>
 800a0a4:	250a      	movs	r5, #10
 800a0a6:	6823      	ldr	r3, [r4, #0]
 800a0a8:	1c5a      	adds	r2, r3, #1
 800a0aa:	6022      	str	r2, [r4, #0]
 800a0ac:	701d      	strb	r5, [r3, #0]
 800a0ae:	e7db      	b.n	800a068 <_puts_r+0x60>

0800a0b0 <puts>:
 800a0b0:	4b02      	ldr	r3, [pc, #8]	; (800a0bc <puts+0xc>)
 800a0b2:	4601      	mov	r1, r0
 800a0b4:	6818      	ldr	r0, [r3, #0]
 800a0b6:	f7ff bfa7 	b.w	800a008 <_puts_r>
 800a0ba:	bf00      	nop
 800a0bc:	20000068 	.word	0x20000068

0800a0c0 <sniprintf>:
 800a0c0:	b40c      	push	{r2, r3}
 800a0c2:	b530      	push	{r4, r5, lr}
 800a0c4:	4b17      	ldr	r3, [pc, #92]	; (800a124 <sniprintf+0x64>)
 800a0c6:	1e0c      	subs	r4, r1, #0
 800a0c8:	681d      	ldr	r5, [r3, #0]
 800a0ca:	b09d      	sub	sp, #116	; 0x74
 800a0cc:	da08      	bge.n	800a0e0 <sniprintf+0x20>
 800a0ce:	238b      	movs	r3, #139	; 0x8b
 800a0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d4:	602b      	str	r3, [r5, #0]
 800a0d6:	b01d      	add	sp, #116	; 0x74
 800a0d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0dc:	b002      	add	sp, #8
 800a0de:	4770      	bx	lr
 800a0e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a0e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a0e8:	bf0c      	ite	eq
 800a0ea:	4623      	moveq	r3, r4
 800a0ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a0f0:	9304      	str	r3, [sp, #16]
 800a0f2:	9307      	str	r3, [sp, #28]
 800a0f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a0f8:	9002      	str	r0, [sp, #8]
 800a0fa:	9006      	str	r0, [sp, #24]
 800a0fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a100:	4628      	mov	r0, r5
 800a102:	ab21      	add	r3, sp, #132	; 0x84
 800a104:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a106:	a902      	add	r1, sp, #8
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	f000 fa95 	bl	800a638 <_svfiprintf_r>
 800a10e:	1c43      	adds	r3, r0, #1
 800a110:	bfbc      	itt	lt
 800a112:	238b      	movlt	r3, #139	; 0x8b
 800a114:	602b      	strlt	r3, [r5, #0]
 800a116:	2c00      	cmp	r4, #0
 800a118:	d0dd      	beq.n	800a0d6 <sniprintf+0x16>
 800a11a:	2200      	movs	r2, #0
 800a11c:	9b02      	ldr	r3, [sp, #8]
 800a11e:	701a      	strb	r2, [r3, #0]
 800a120:	e7d9      	b.n	800a0d6 <sniprintf+0x16>
 800a122:	bf00      	nop
 800a124:	20000068 	.word	0x20000068

0800a128 <__sread>:
 800a128:	b510      	push	{r4, lr}
 800a12a:	460c      	mov	r4, r1
 800a12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a130:	f000 f968 	bl	800a404 <_read_r>
 800a134:	2800      	cmp	r0, #0
 800a136:	bfab      	itete	ge
 800a138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a13a:	89a3      	ldrhlt	r3, [r4, #12]
 800a13c:	181b      	addge	r3, r3, r0
 800a13e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a142:	bfac      	ite	ge
 800a144:	6563      	strge	r3, [r4, #84]	; 0x54
 800a146:	81a3      	strhlt	r3, [r4, #12]
 800a148:	bd10      	pop	{r4, pc}

0800a14a <__swrite>:
 800a14a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a14e:	461f      	mov	r7, r3
 800a150:	898b      	ldrh	r3, [r1, #12]
 800a152:	4605      	mov	r5, r0
 800a154:	05db      	lsls	r3, r3, #23
 800a156:	460c      	mov	r4, r1
 800a158:	4616      	mov	r6, r2
 800a15a:	d505      	bpl.n	800a168 <__swrite+0x1e>
 800a15c:	2302      	movs	r3, #2
 800a15e:	2200      	movs	r2, #0
 800a160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a164:	f000 f93c 	bl	800a3e0 <_lseek_r>
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	4632      	mov	r2, r6
 800a16c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a170:	81a3      	strh	r3, [r4, #12]
 800a172:	4628      	mov	r0, r5
 800a174:	463b      	mov	r3, r7
 800a176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a17a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a17e:	f000 b963 	b.w	800a448 <_write_r>

0800a182 <__sseek>:
 800a182:	b510      	push	{r4, lr}
 800a184:	460c      	mov	r4, r1
 800a186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a18a:	f000 f929 	bl	800a3e0 <_lseek_r>
 800a18e:	1c43      	adds	r3, r0, #1
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	bf15      	itete	ne
 800a194:	6560      	strne	r0, [r4, #84]	; 0x54
 800a196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a19a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a19e:	81a3      	strheq	r3, [r4, #12]
 800a1a0:	bf18      	it	ne
 800a1a2:	81a3      	strhne	r3, [r4, #12]
 800a1a4:	bd10      	pop	{r4, pc}

0800a1a6 <__sclose>:
 800a1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1aa:	f000 b8b3 	b.w	800a314 <_close_r>

0800a1ae <__swbuf_r>:
 800a1ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b0:	460e      	mov	r6, r1
 800a1b2:	4614      	mov	r4, r2
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	b118      	cbz	r0, 800a1c0 <__swbuf_r+0x12>
 800a1b8:	6a03      	ldr	r3, [r0, #32]
 800a1ba:	b90b      	cbnz	r3, 800a1c0 <__swbuf_r+0x12>
 800a1bc:	f7ff fedc 	bl	8009f78 <__sinit>
 800a1c0:	69a3      	ldr	r3, [r4, #24]
 800a1c2:	60a3      	str	r3, [r4, #8]
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	071a      	lsls	r2, r3, #28
 800a1c8:	d525      	bpl.n	800a216 <__swbuf_r+0x68>
 800a1ca:	6923      	ldr	r3, [r4, #16]
 800a1cc:	b31b      	cbz	r3, 800a216 <__swbuf_r+0x68>
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	6922      	ldr	r2, [r4, #16]
 800a1d2:	b2f6      	uxtb	r6, r6
 800a1d4:	1a98      	subs	r0, r3, r2
 800a1d6:	6963      	ldr	r3, [r4, #20]
 800a1d8:	4637      	mov	r7, r6
 800a1da:	4283      	cmp	r3, r0
 800a1dc:	dc04      	bgt.n	800a1e8 <__swbuf_r+0x3a>
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f000 fe7f 	bl	800aee4 <_fflush_r>
 800a1e6:	b9e0      	cbnz	r0, 800a222 <__swbuf_r+0x74>
 800a1e8:	68a3      	ldr	r3, [r4, #8]
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	60a3      	str	r3, [r4, #8]
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	1c5a      	adds	r2, r3, #1
 800a1f2:	6022      	str	r2, [r4, #0]
 800a1f4:	701e      	strb	r6, [r3, #0]
 800a1f6:	6962      	ldr	r2, [r4, #20]
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d004      	beq.n	800a208 <__swbuf_r+0x5a>
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	07db      	lsls	r3, r3, #31
 800a202:	d506      	bpl.n	800a212 <__swbuf_r+0x64>
 800a204:	2e0a      	cmp	r6, #10
 800a206:	d104      	bne.n	800a212 <__swbuf_r+0x64>
 800a208:	4621      	mov	r1, r4
 800a20a:	4628      	mov	r0, r5
 800a20c:	f000 fe6a 	bl	800aee4 <_fflush_r>
 800a210:	b938      	cbnz	r0, 800a222 <__swbuf_r+0x74>
 800a212:	4638      	mov	r0, r7
 800a214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a216:	4621      	mov	r1, r4
 800a218:	4628      	mov	r0, r5
 800a21a:	f000 f805 	bl	800a228 <__swsetup_r>
 800a21e:	2800      	cmp	r0, #0
 800a220:	d0d5      	beq.n	800a1ce <__swbuf_r+0x20>
 800a222:	f04f 37ff 	mov.w	r7, #4294967295
 800a226:	e7f4      	b.n	800a212 <__swbuf_r+0x64>

0800a228 <__swsetup_r>:
 800a228:	b538      	push	{r3, r4, r5, lr}
 800a22a:	4b2a      	ldr	r3, [pc, #168]	; (800a2d4 <__swsetup_r+0xac>)
 800a22c:	4605      	mov	r5, r0
 800a22e:	6818      	ldr	r0, [r3, #0]
 800a230:	460c      	mov	r4, r1
 800a232:	b118      	cbz	r0, 800a23c <__swsetup_r+0x14>
 800a234:	6a03      	ldr	r3, [r0, #32]
 800a236:	b90b      	cbnz	r3, 800a23c <__swsetup_r+0x14>
 800a238:	f7ff fe9e 	bl	8009f78 <__sinit>
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a242:	0718      	lsls	r0, r3, #28
 800a244:	d422      	bmi.n	800a28c <__swsetup_r+0x64>
 800a246:	06d9      	lsls	r1, r3, #27
 800a248:	d407      	bmi.n	800a25a <__swsetup_r+0x32>
 800a24a:	2309      	movs	r3, #9
 800a24c:	602b      	str	r3, [r5, #0]
 800a24e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a252:	f04f 30ff 	mov.w	r0, #4294967295
 800a256:	81a3      	strh	r3, [r4, #12]
 800a258:	e034      	b.n	800a2c4 <__swsetup_r+0x9c>
 800a25a:	0758      	lsls	r0, r3, #29
 800a25c:	d512      	bpl.n	800a284 <__swsetup_r+0x5c>
 800a25e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a260:	b141      	cbz	r1, 800a274 <__swsetup_r+0x4c>
 800a262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a266:	4299      	cmp	r1, r3
 800a268:	d002      	beq.n	800a270 <__swsetup_r+0x48>
 800a26a:	4628      	mov	r0, r5
 800a26c:	f000 f942 	bl	800a4f4 <_free_r>
 800a270:	2300      	movs	r3, #0
 800a272:	6363      	str	r3, [r4, #52]	; 0x34
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a27a:	81a3      	strh	r3, [r4, #12]
 800a27c:	2300      	movs	r3, #0
 800a27e:	6063      	str	r3, [r4, #4]
 800a280:	6923      	ldr	r3, [r4, #16]
 800a282:	6023      	str	r3, [r4, #0]
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	f043 0308 	orr.w	r3, r3, #8
 800a28a:	81a3      	strh	r3, [r4, #12]
 800a28c:	6923      	ldr	r3, [r4, #16]
 800a28e:	b94b      	cbnz	r3, 800a2a4 <__swsetup_r+0x7c>
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a29a:	d003      	beq.n	800a2a4 <__swsetup_r+0x7c>
 800a29c:	4621      	mov	r1, r4
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f000 fe6d 	bl	800af7e <__smakebuf_r>
 800a2a4:	89a0      	ldrh	r0, [r4, #12]
 800a2a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2aa:	f010 0301 	ands.w	r3, r0, #1
 800a2ae:	d00a      	beq.n	800a2c6 <__swsetup_r+0x9e>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60a3      	str	r3, [r4, #8]
 800a2b4:	6963      	ldr	r3, [r4, #20]
 800a2b6:	425b      	negs	r3, r3
 800a2b8:	61a3      	str	r3, [r4, #24]
 800a2ba:	6923      	ldr	r3, [r4, #16]
 800a2bc:	b943      	cbnz	r3, 800a2d0 <__swsetup_r+0xa8>
 800a2be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2c2:	d1c4      	bne.n	800a24e <__swsetup_r+0x26>
 800a2c4:	bd38      	pop	{r3, r4, r5, pc}
 800a2c6:	0781      	lsls	r1, r0, #30
 800a2c8:	bf58      	it	pl
 800a2ca:	6963      	ldrpl	r3, [r4, #20]
 800a2cc:	60a3      	str	r3, [r4, #8]
 800a2ce:	e7f4      	b.n	800a2ba <__swsetup_r+0x92>
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	e7f7      	b.n	800a2c4 <__swsetup_r+0x9c>
 800a2d4:	20000068 	.word	0x20000068

0800a2d8 <memset>:
 800a2d8:	4603      	mov	r3, r0
 800a2da:	4402      	add	r2, r0
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d100      	bne.n	800a2e2 <memset+0xa>
 800a2e0:	4770      	bx	lr
 800a2e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a2e6:	e7f9      	b.n	800a2dc <memset+0x4>

0800a2e8 <strstr>:
 800a2e8:	780a      	ldrb	r2, [r1, #0]
 800a2ea:	b570      	push	{r4, r5, r6, lr}
 800a2ec:	b96a      	cbnz	r2, 800a30a <strstr+0x22>
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d109      	bne.n	800a308 <strstr+0x20>
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	4605      	mov	r5, r0
 800a2f8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d0f6      	beq.n	800a2ee <strstr+0x6>
 800a300:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a304:	429e      	cmp	r6, r3
 800a306:	d0f7      	beq.n	800a2f8 <strstr+0x10>
 800a308:	3001      	adds	r0, #1
 800a30a:	7803      	ldrb	r3, [r0, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1ef      	bne.n	800a2f0 <strstr+0x8>
 800a310:	4618      	mov	r0, r3
 800a312:	e7ec      	b.n	800a2ee <strstr+0x6>

0800a314 <_close_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	2300      	movs	r3, #0
 800a318:	4d05      	ldr	r5, [pc, #20]	; (800a330 <_close_r+0x1c>)
 800a31a:	4604      	mov	r4, r0
 800a31c:	4608      	mov	r0, r1
 800a31e:	602b      	str	r3, [r5, #0]
 800a320:	f7f9 f8ca 	bl	80034b8 <_close>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_close_r+0x1a>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_close_r+0x1a>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	20002d14 	.word	0x20002d14

0800a334 <_reclaim_reent>:
 800a334:	4b29      	ldr	r3, [pc, #164]	; (800a3dc <_reclaim_reent+0xa8>)
 800a336:	b570      	push	{r4, r5, r6, lr}
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4604      	mov	r4, r0
 800a33c:	4283      	cmp	r3, r0
 800a33e:	d04b      	beq.n	800a3d8 <_reclaim_reent+0xa4>
 800a340:	69c3      	ldr	r3, [r0, #28]
 800a342:	b143      	cbz	r3, 800a356 <_reclaim_reent+0x22>
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d144      	bne.n	800a3d4 <_reclaim_reent+0xa0>
 800a34a:	69e3      	ldr	r3, [r4, #28]
 800a34c:	6819      	ldr	r1, [r3, #0]
 800a34e:	b111      	cbz	r1, 800a356 <_reclaim_reent+0x22>
 800a350:	4620      	mov	r0, r4
 800a352:	f000 f8cf 	bl	800a4f4 <_free_r>
 800a356:	6961      	ldr	r1, [r4, #20]
 800a358:	b111      	cbz	r1, 800a360 <_reclaim_reent+0x2c>
 800a35a:	4620      	mov	r0, r4
 800a35c:	f000 f8ca 	bl	800a4f4 <_free_r>
 800a360:	69e1      	ldr	r1, [r4, #28]
 800a362:	b111      	cbz	r1, 800a36a <_reclaim_reent+0x36>
 800a364:	4620      	mov	r0, r4
 800a366:	f000 f8c5 	bl	800a4f4 <_free_r>
 800a36a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a36c:	b111      	cbz	r1, 800a374 <_reclaim_reent+0x40>
 800a36e:	4620      	mov	r0, r4
 800a370:	f000 f8c0 	bl	800a4f4 <_free_r>
 800a374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a376:	b111      	cbz	r1, 800a37e <_reclaim_reent+0x4a>
 800a378:	4620      	mov	r0, r4
 800a37a:	f000 f8bb 	bl	800a4f4 <_free_r>
 800a37e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a380:	b111      	cbz	r1, 800a388 <_reclaim_reent+0x54>
 800a382:	4620      	mov	r0, r4
 800a384:	f000 f8b6 	bl	800a4f4 <_free_r>
 800a388:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a38a:	b111      	cbz	r1, 800a392 <_reclaim_reent+0x5e>
 800a38c:	4620      	mov	r0, r4
 800a38e:	f000 f8b1 	bl	800a4f4 <_free_r>
 800a392:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a394:	b111      	cbz	r1, 800a39c <_reclaim_reent+0x68>
 800a396:	4620      	mov	r0, r4
 800a398:	f000 f8ac 	bl	800a4f4 <_free_r>
 800a39c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a39e:	b111      	cbz	r1, 800a3a6 <_reclaim_reent+0x72>
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f000 f8a7 	bl	800a4f4 <_free_r>
 800a3a6:	6a23      	ldr	r3, [r4, #32]
 800a3a8:	b1b3      	cbz	r3, 800a3d8 <_reclaim_reent+0xa4>
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3b0:	4718      	bx	r3
 800a3b2:	5949      	ldr	r1, [r1, r5]
 800a3b4:	b941      	cbnz	r1, 800a3c8 <_reclaim_reent+0x94>
 800a3b6:	3504      	adds	r5, #4
 800a3b8:	69e3      	ldr	r3, [r4, #28]
 800a3ba:	2d80      	cmp	r5, #128	; 0x80
 800a3bc:	68d9      	ldr	r1, [r3, #12]
 800a3be:	d1f8      	bne.n	800a3b2 <_reclaim_reent+0x7e>
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f000 f897 	bl	800a4f4 <_free_r>
 800a3c6:	e7c0      	b.n	800a34a <_reclaim_reent+0x16>
 800a3c8:	680e      	ldr	r6, [r1, #0]
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f000 f892 	bl	800a4f4 <_free_r>
 800a3d0:	4631      	mov	r1, r6
 800a3d2:	e7ef      	b.n	800a3b4 <_reclaim_reent+0x80>
 800a3d4:	2500      	movs	r5, #0
 800a3d6:	e7ef      	b.n	800a3b8 <_reclaim_reent+0x84>
 800a3d8:	bd70      	pop	{r4, r5, r6, pc}
 800a3da:	bf00      	nop
 800a3dc:	20000068 	.word	0x20000068

0800a3e0 <_lseek_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	4d05      	ldr	r5, [pc, #20]	; (800a400 <_lseek_r+0x20>)
 800a3ec:	602a      	str	r2, [r5, #0]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	f7f9 f86c 	bl	80034cc <_lseek>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d102      	bne.n	800a3fe <_lseek_r+0x1e>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	b103      	cbz	r3, 800a3fe <_lseek_r+0x1e>
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
 800a400:	20002d14 	.word	0x20002d14

0800a404 <_read_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4604      	mov	r4, r0
 800a408:	4608      	mov	r0, r1
 800a40a:	4611      	mov	r1, r2
 800a40c:	2200      	movs	r2, #0
 800a40e:	4d05      	ldr	r5, [pc, #20]	; (800a424 <_read_r+0x20>)
 800a410:	602a      	str	r2, [r5, #0]
 800a412:	461a      	mov	r2, r3
 800a414:	f7f9 f834 	bl	8003480 <_read>
 800a418:	1c43      	adds	r3, r0, #1
 800a41a:	d102      	bne.n	800a422 <_read_r+0x1e>
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	b103      	cbz	r3, 800a422 <_read_r+0x1e>
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	20002d14 	.word	0x20002d14

0800a428 <_sbrk_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	2300      	movs	r3, #0
 800a42c:	4d05      	ldr	r5, [pc, #20]	; (800a444 <_sbrk_r+0x1c>)
 800a42e:	4604      	mov	r4, r0
 800a430:	4608      	mov	r0, r1
 800a432:	602b      	str	r3, [r5, #0]
 800a434:	f7f9 f84c 	bl	80034d0 <_sbrk>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d102      	bne.n	800a442 <_sbrk_r+0x1a>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	b103      	cbz	r3, 800a442 <_sbrk_r+0x1a>
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	20002d14 	.word	0x20002d14

0800a448 <_write_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4604      	mov	r4, r0
 800a44c:	4608      	mov	r0, r1
 800a44e:	4611      	mov	r1, r2
 800a450:	2200      	movs	r2, #0
 800a452:	4d05      	ldr	r5, [pc, #20]	; (800a468 <_write_r+0x20>)
 800a454:	602a      	str	r2, [r5, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	f7f9 f820 	bl	800349c <_write>
 800a45c:	1c43      	adds	r3, r0, #1
 800a45e:	d102      	bne.n	800a466 <_write_r+0x1e>
 800a460:	682b      	ldr	r3, [r5, #0]
 800a462:	b103      	cbz	r3, 800a466 <_write_r+0x1e>
 800a464:	6023      	str	r3, [r4, #0]
 800a466:	bd38      	pop	{r3, r4, r5, pc}
 800a468:	20002d14 	.word	0x20002d14

0800a46c <__errno>:
 800a46c:	4b01      	ldr	r3, [pc, #4]	; (800a474 <__errno+0x8>)
 800a46e:	6818      	ldr	r0, [r3, #0]
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	20000068 	.word	0x20000068

0800a478 <__libc_init_array>:
 800a478:	b570      	push	{r4, r5, r6, lr}
 800a47a:	2600      	movs	r6, #0
 800a47c:	4d0c      	ldr	r5, [pc, #48]	; (800a4b0 <__libc_init_array+0x38>)
 800a47e:	4c0d      	ldr	r4, [pc, #52]	; (800a4b4 <__libc_init_array+0x3c>)
 800a480:	1b64      	subs	r4, r4, r5
 800a482:	10a4      	asrs	r4, r4, #2
 800a484:	42a6      	cmp	r6, r4
 800a486:	d109      	bne.n	800a49c <__libc_init_array+0x24>
 800a488:	f000 fe38 	bl	800b0fc <_init>
 800a48c:	2600      	movs	r6, #0
 800a48e:	4d0a      	ldr	r5, [pc, #40]	; (800a4b8 <__libc_init_array+0x40>)
 800a490:	4c0a      	ldr	r4, [pc, #40]	; (800a4bc <__libc_init_array+0x44>)
 800a492:	1b64      	subs	r4, r4, r5
 800a494:	10a4      	asrs	r4, r4, #2
 800a496:	42a6      	cmp	r6, r4
 800a498:	d105      	bne.n	800a4a6 <__libc_init_array+0x2e>
 800a49a:	bd70      	pop	{r4, r5, r6, pc}
 800a49c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4a0:	4798      	blx	r3
 800a4a2:	3601      	adds	r6, #1
 800a4a4:	e7ee      	b.n	800a484 <__libc_init_array+0xc>
 800a4a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4aa:	4798      	blx	r3
 800a4ac:	3601      	adds	r6, #1
 800a4ae:	e7f2      	b.n	800a496 <__libc_init_array+0x1e>
 800a4b0:	0800b69c 	.word	0x0800b69c
 800a4b4:	0800b69c 	.word	0x0800b69c
 800a4b8:	0800b69c 	.word	0x0800b69c
 800a4bc:	0800b6a0 	.word	0x0800b6a0

0800a4c0 <__retarget_lock_init_recursive>:
 800a4c0:	4770      	bx	lr

0800a4c2 <__retarget_lock_acquire_recursive>:
 800a4c2:	4770      	bx	lr

0800a4c4 <__retarget_lock_release_recursive>:
 800a4c4:	4770      	bx	lr

0800a4c6 <strcpy>:
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4cc:	f803 2b01 	strb.w	r2, [r3], #1
 800a4d0:	2a00      	cmp	r2, #0
 800a4d2:	d1f9      	bne.n	800a4c8 <strcpy+0x2>
 800a4d4:	4770      	bx	lr

0800a4d6 <memcpy>:
 800a4d6:	440a      	add	r2, r1
 800a4d8:	4291      	cmp	r1, r2
 800a4da:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4de:	d100      	bne.n	800a4e2 <memcpy+0xc>
 800a4e0:	4770      	bx	lr
 800a4e2:	b510      	push	{r4, lr}
 800a4e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4e8:	4291      	cmp	r1, r2
 800a4ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4ee:	d1f9      	bne.n	800a4e4 <memcpy+0xe>
 800a4f0:	bd10      	pop	{r4, pc}
	...

0800a4f4 <_free_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	2900      	cmp	r1, #0
 800a4fa:	d040      	beq.n	800a57e <_free_r+0x8a>
 800a4fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a500:	1f0c      	subs	r4, r1, #4
 800a502:	2b00      	cmp	r3, #0
 800a504:	bfb8      	it	lt
 800a506:	18e4      	addlt	r4, r4, r3
 800a508:	f7ff fc9e 	bl	8009e48 <__malloc_lock>
 800a50c:	4a1c      	ldr	r2, [pc, #112]	; (800a580 <_free_r+0x8c>)
 800a50e:	6813      	ldr	r3, [r2, #0]
 800a510:	b933      	cbnz	r3, 800a520 <_free_r+0x2c>
 800a512:	6063      	str	r3, [r4, #4]
 800a514:	6014      	str	r4, [r2, #0]
 800a516:	4628      	mov	r0, r5
 800a518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a51c:	f7ff bc9a 	b.w	8009e54 <__malloc_unlock>
 800a520:	42a3      	cmp	r3, r4
 800a522:	d908      	bls.n	800a536 <_free_r+0x42>
 800a524:	6820      	ldr	r0, [r4, #0]
 800a526:	1821      	adds	r1, r4, r0
 800a528:	428b      	cmp	r3, r1
 800a52a:	bf01      	itttt	eq
 800a52c:	6819      	ldreq	r1, [r3, #0]
 800a52e:	685b      	ldreq	r3, [r3, #4]
 800a530:	1809      	addeq	r1, r1, r0
 800a532:	6021      	streq	r1, [r4, #0]
 800a534:	e7ed      	b.n	800a512 <_free_r+0x1e>
 800a536:	461a      	mov	r2, r3
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	b10b      	cbz	r3, 800a540 <_free_r+0x4c>
 800a53c:	42a3      	cmp	r3, r4
 800a53e:	d9fa      	bls.n	800a536 <_free_r+0x42>
 800a540:	6811      	ldr	r1, [r2, #0]
 800a542:	1850      	adds	r0, r2, r1
 800a544:	42a0      	cmp	r0, r4
 800a546:	d10b      	bne.n	800a560 <_free_r+0x6c>
 800a548:	6820      	ldr	r0, [r4, #0]
 800a54a:	4401      	add	r1, r0
 800a54c:	1850      	adds	r0, r2, r1
 800a54e:	4283      	cmp	r3, r0
 800a550:	6011      	str	r1, [r2, #0]
 800a552:	d1e0      	bne.n	800a516 <_free_r+0x22>
 800a554:	6818      	ldr	r0, [r3, #0]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	4408      	add	r0, r1
 800a55a:	6010      	str	r0, [r2, #0]
 800a55c:	6053      	str	r3, [r2, #4]
 800a55e:	e7da      	b.n	800a516 <_free_r+0x22>
 800a560:	d902      	bls.n	800a568 <_free_r+0x74>
 800a562:	230c      	movs	r3, #12
 800a564:	602b      	str	r3, [r5, #0]
 800a566:	e7d6      	b.n	800a516 <_free_r+0x22>
 800a568:	6820      	ldr	r0, [r4, #0]
 800a56a:	1821      	adds	r1, r4, r0
 800a56c:	428b      	cmp	r3, r1
 800a56e:	bf01      	itttt	eq
 800a570:	6819      	ldreq	r1, [r3, #0]
 800a572:	685b      	ldreq	r3, [r3, #4]
 800a574:	1809      	addeq	r1, r1, r0
 800a576:	6021      	streq	r1, [r4, #0]
 800a578:	6063      	str	r3, [r4, #4]
 800a57a:	6054      	str	r4, [r2, #4]
 800a57c:	e7cb      	b.n	800a516 <_free_r+0x22>
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	20002bd0 	.word	0x20002bd0

0800a584 <__ssputs_r>:
 800a584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a588:	461f      	mov	r7, r3
 800a58a:	688e      	ldr	r6, [r1, #8]
 800a58c:	4682      	mov	sl, r0
 800a58e:	42be      	cmp	r6, r7
 800a590:	460c      	mov	r4, r1
 800a592:	4690      	mov	r8, r2
 800a594:	680b      	ldr	r3, [r1, #0]
 800a596:	d82c      	bhi.n	800a5f2 <__ssputs_r+0x6e>
 800a598:	898a      	ldrh	r2, [r1, #12]
 800a59a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a59e:	d026      	beq.n	800a5ee <__ssputs_r+0x6a>
 800a5a0:	6965      	ldr	r5, [r4, #20]
 800a5a2:	6909      	ldr	r1, [r1, #16]
 800a5a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5a8:	eba3 0901 	sub.w	r9, r3, r1
 800a5ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5b0:	1c7b      	adds	r3, r7, #1
 800a5b2:	444b      	add	r3, r9
 800a5b4:	106d      	asrs	r5, r5, #1
 800a5b6:	429d      	cmp	r5, r3
 800a5b8:	bf38      	it	cc
 800a5ba:	461d      	movcc	r5, r3
 800a5bc:	0553      	lsls	r3, r2, #21
 800a5be:	d527      	bpl.n	800a610 <__ssputs_r+0x8c>
 800a5c0:	4629      	mov	r1, r5
 800a5c2:	f7ff fbc1 	bl	8009d48 <_malloc_r>
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	b360      	cbz	r0, 800a624 <__ssputs_r+0xa0>
 800a5ca:	464a      	mov	r2, r9
 800a5cc:	6921      	ldr	r1, [r4, #16]
 800a5ce:	f7ff ff82 	bl	800a4d6 <memcpy>
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5dc:	81a3      	strh	r3, [r4, #12]
 800a5de:	6126      	str	r6, [r4, #16]
 800a5e0:	444e      	add	r6, r9
 800a5e2:	6026      	str	r6, [r4, #0]
 800a5e4:	463e      	mov	r6, r7
 800a5e6:	6165      	str	r5, [r4, #20]
 800a5e8:	eba5 0509 	sub.w	r5, r5, r9
 800a5ec:	60a5      	str	r5, [r4, #8]
 800a5ee:	42be      	cmp	r6, r7
 800a5f0:	d900      	bls.n	800a5f4 <__ssputs_r+0x70>
 800a5f2:	463e      	mov	r6, r7
 800a5f4:	4632      	mov	r2, r6
 800a5f6:	4641      	mov	r1, r8
 800a5f8:	6820      	ldr	r0, [r4, #0]
 800a5fa:	f000 fcfc 	bl	800aff6 <memmove>
 800a5fe:	2000      	movs	r0, #0
 800a600:	68a3      	ldr	r3, [r4, #8]
 800a602:	1b9b      	subs	r3, r3, r6
 800a604:	60a3      	str	r3, [r4, #8]
 800a606:	6823      	ldr	r3, [r4, #0]
 800a608:	4433      	add	r3, r6
 800a60a:	6023      	str	r3, [r4, #0]
 800a60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a610:	462a      	mov	r2, r5
 800a612:	f000 fd3b 	bl	800b08c <_realloc_r>
 800a616:	4606      	mov	r6, r0
 800a618:	2800      	cmp	r0, #0
 800a61a:	d1e0      	bne.n	800a5de <__ssputs_r+0x5a>
 800a61c:	4650      	mov	r0, sl
 800a61e:	6921      	ldr	r1, [r4, #16]
 800a620:	f7ff ff68 	bl	800a4f4 <_free_r>
 800a624:	230c      	movs	r3, #12
 800a626:	f8ca 3000 	str.w	r3, [sl]
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	f04f 30ff 	mov.w	r0, #4294967295
 800a630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a634:	81a3      	strh	r3, [r4, #12]
 800a636:	e7e9      	b.n	800a60c <__ssputs_r+0x88>

0800a638 <_svfiprintf_r>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	4698      	mov	r8, r3
 800a63e:	898b      	ldrh	r3, [r1, #12]
 800a640:	4607      	mov	r7, r0
 800a642:	061b      	lsls	r3, r3, #24
 800a644:	460d      	mov	r5, r1
 800a646:	4614      	mov	r4, r2
 800a648:	b09d      	sub	sp, #116	; 0x74
 800a64a:	d50e      	bpl.n	800a66a <_svfiprintf_r+0x32>
 800a64c:	690b      	ldr	r3, [r1, #16]
 800a64e:	b963      	cbnz	r3, 800a66a <_svfiprintf_r+0x32>
 800a650:	2140      	movs	r1, #64	; 0x40
 800a652:	f7ff fb79 	bl	8009d48 <_malloc_r>
 800a656:	6028      	str	r0, [r5, #0]
 800a658:	6128      	str	r0, [r5, #16]
 800a65a:	b920      	cbnz	r0, 800a666 <_svfiprintf_r+0x2e>
 800a65c:	230c      	movs	r3, #12
 800a65e:	603b      	str	r3, [r7, #0]
 800a660:	f04f 30ff 	mov.w	r0, #4294967295
 800a664:	e0d0      	b.n	800a808 <_svfiprintf_r+0x1d0>
 800a666:	2340      	movs	r3, #64	; 0x40
 800a668:	616b      	str	r3, [r5, #20]
 800a66a:	2300      	movs	r3, #0
 800a66c:	9309      	str	r3, [sp, #36]	; 0x24
 800a66e:	2320      	movs	r3, #32
 800a670:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a674:	2330      	movs	r3, #48	; 0x30
 800a676:	f04f 0901 	mov.w	r9, #1
 800a67a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a67e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a820 <_svfiprintf_r+0x1e8>
 800a682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a686:	4623      	mov	r3, r4
 800a688:	469a      	mov	sl, r3
 800a68a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a68e:	b10a      	cbz	r2, 800a694 <_svfiprintf_r+0x5c>
 800a690:	2a25      	cmp	r2, #37	; 0x25
 800a692:	d1f9      	bne.n	800a688 <_svfiprintf_r+0x50>
 800a694:	ebba 0b04 	subs.w	fp, sl, r4
 800a698:	d00b      	beq.n	800a6b2 <_svfiprintf_r+0x7a>
 800a69a:	465b      	mov	r3, fp
 800a69c:	4622      	mov	r2, r4
 800a69e:	4629      	mov	r1, r5
 800a6a0:	4638      	mov	r0, r7
 800a6a2:	f7ff ff6f 	bl	800a584 <__ssputs_r>
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	f000 80a9 	beq.w	800a7fe <_svfiprintf_r+0x1c6>
 800a6ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6ae:	445a      	add	r2, fp
 800a6b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a6b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f000 80a1 	beq.w	800a7fe <_svfiprintf_r+0x1c6>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6c6:	f10a 0a01 	add.w	sl, sl, #1
 800a6ca:	9304      	str	r3, [sp, #16]
 800a6cc:	9307      	str	r3, [sp, #28]
 800a6ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6d2:	931a      	str	r3, [sp, #104]	; 0x68
 800a6d4:	4654      	mov	r4, sl
 800a6d6:	2205      	movs	r2, #5
 800a6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6dc:	4850      	ldr	r0, [pc, #320]	; (800a820 <_svfiprintf_r+0x1e8>)
 800a6de:	f000 fcc7 	bl	800b070 <memchr>
 800a6e2:	9a04      	ldr	r2, [sp, #16]
 800a6e4:	b9d8      	cbnz	r0, 800a71e <_svfiprintf_r+0xe6>
 800a6e6:	06d0      	lsls	r0, r2, #27
 800a6e8:	bf44      	itt	mi
 800a6ea:	2320      	movmi	r3, #32
 800a6ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6f0:	0711      	lsls	r1, r2, #28
 800a6f2:	bf44      	itt	mi
 800a6f4:	232b      	movmi	r3, #43	; 0x2b
 800a6f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a6fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a700:	d015      	beq.n	800a72e <_svfiprintf_r+0xf6>
 800a702:	4654      	mov	r4, sl
 800a704:	2000      	movs	r0, #0
 800a706:	f04f 0c0a 	mov.w	ip, #10
 800a70a:	9a07      	ldr	r2, [sp, #28]
 800a70c:	4621      	mov	r1, r4
 800a70e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a712:	3b30      	subs	r3, #48	; 0x30
 800a714:	2b09      	cmp	r3, #9
 800a716:	d94d      	bls.n	800a7b4 <_svfiprintf_r+0x17c>
 800a718:	b1b0      	cbz	r0, 800a748 <_svfiprintf_r+0x110>
 800a71a:	9207      	str	r2, [sp, #28]
 800a71c:	e014      	b.n	800a748 <_svfiprintf_r+0x110>
 800a71e:	eba0 0308 	sub.w	r3, r0, r8
 800a722:	fa09 f303 	lsl.w	r3, r9, r3
 800a726:	4313      	orrs	r3, r2
 800a728:	46a2      	mov	sl, r4
 800a72a:	9304      	str	r3, [sp, #16]
 800a72c:	e7d2      	b.n	800a6d4 <_svfiprintf_r+0x9c>
 800a72e:	9b03      	ldr	r3, [sp, #12]
 800a730:	1d19      	adds	r1, r3, #4
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	9103      	str	r1, [sp, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	bfbb      	ittet	lt
 800a73a:	425b      	neglt	r3, r3
 800a73c:	f042 0202 	orrlt.w	r2, r2, #2
 800a740:	9307      	strge	r3, [sp, #28]
 800a742:	9307      	strlt	r3, [sp, #28]
 800a744:	bfb8      	it	lt
 800a746:	9204      	strlt	r2, [sp, #16]
 800a748:	7823      	ldrb	r3, [r4, #0]
 800a74a:	2b2e      	cmp	r3, #46	; 0x2e
 800a74c:	d10c      	bne.n	800a768 <_svfiprintf_r+0x130>
 800a74e:	7863      	ldrb	r3, [r4, #1]
 800a750:	2b2a      	cmp	r3, #42	; 0x2a
 800a752:	d134      	bne.n	800a7be <_svfiprintf_r+0x186>
 800a754:	9b03      	ldr	r3, [sp, #12]
 800a756:	3402      	adds	r4, #2
 800a758:	1d1a      	adds	r2, r3, #4
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	9203      	str	r2, [sp, #12]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	bfb8      	it	lt
 800a762:	f04f 33ff 	movlt.w	r3, #4294967295
 800a766:	9305      	str	r3, [sp, #20]
 800a768:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a824 <_svfiprintf_r+0x1ec>
 800a76c:	2203      	movs	r2, #3
 800a76e:	4650      	mov	r0, sl
 800a770:	7821      	ldrb	r1, [r4, #0]
 800a772:	f000 fc7d 	bl	800b070 <memchr>
 800a776:	b138      	cbz	r0, 800a788 <_svfiprintf_r+0x150>
 800a778:	2240      	movs	r2, #64	; 0x40
 800a77a:	9b04      	ldr	r3, [sp, #16]
 800a77c:	eba0 000a 	sub.w	r0, r0, sl
 800a780:	4082      	lsls	r2, r0
 800a782:	4313      	orrs	r3, r2
 800a784:	3401      	adds	r4, #1
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a78c:	2206      	movs	r2, #6
 800a78e:	4826      	ldr	r0, [pc, #152]	; (800a828 <_svfiprintf_r+0x1f0>)
 800a790:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a794:	f000 fc6c 	bl	800b070 <memchr>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d038      	beq.n	800a80e <_svfiprintf_r+0x1d6>
 800a79c:	4b23      	ldr	r3, [pc, #140]	; (800a82c <_svfiprintf_r+0x1f4>)
 800a79e:	bb1b      	cbnz	r3, 800a7e8 <_svfiprintf_r+0x1b0>
 800a7a0:	9b03      	ldr	r3, [sp, #12]
 800a7a2:	3307      	adds	r3, #7
 800a7a4:	f023 0307 	bic.w	r3, r3, #7
 800a7a8:	3308      	adds	r3, #8
 800a7aa:	9303      	str	r3, [sp, #12]
 800a7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ae:	4433      	add	r3, r6
 800a7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b2:	e768      	b.n	800a686 <_svfiprintf_r+0x4e>
 800a7b4:	460c      	mov	r4, r1
 800a7b6:	2001      	movs	r0, #1
 800a7b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7bc:	e7a6      	b.n	800a70c <_svfiprintf_r+0xd4>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	f04f 0c0a 	mov.w	ip, #10
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	3401      	adds	r4, #1
 800a7c8:	9305      	str	r3, [sp, #20]
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7d0:	3a30      	subs	r2, #48	; 0x30
 800a7d2:	2a09      	cmp	r2, #9
 800a7d4:	d903      	bls.n	800a7de <_svfiprintf_r+0x1a6>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0c6      	beq.n	800a768 <_svfiprintf_r+0x130>
 800a7da:	9105      	str	r1, [sp, #20]
 800a7dc:	e7c4      	b.n	800a768 <_svfiprintf_r+0x130>
 800a7de:	4604      	mov	r4, r0
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7e6:	e7f0      	b.n	800a7ca <_svfiprintf_r+0x192>
 800a7e8:	ab03      	add	r3, sp, #12
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	462a      	mov	r2, r5
 800a7ee:	4638      	mov	r0, r7
 800a7f0:	4b0f      	ldr	r3, [pc, #60]	; (800a830 <_svfiprintf_r+0x1f8>)
 800a7f2:	a904      	add	r1, sp, #16
 800a7f4:	f3af 8000 	nop.w
 800a7f8:	1c42      	adds	r2, r0, #1
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	d1d6      	bne.n	800a7ac <_svfiprintf_r+0x174>
 800a7fe:	89ab      	ldrh	r3, [r5, #12]
 800a800:	065b      	lsls	r3, r3, #25
 800a802:	f53f af2d 	bmi.w	800a660 <_svfiprintf_r+0x28>
 800a806:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a808:	b01d      	add	sp, #116	; 0x74
 800a80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a80e:	ab03      	add	r3, sp, #12
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	462a      	mov	r2, r5
 800a814:	4638      	mov	r0, r7
 800a816:	4b06      	ldr	r3, [pc, #24]	; (800a830 <_svfiprintf_r+0x1f8>)
 800a818:	a904      	add	r1, sp, #16
 800a81a:	f000 f9bf 	bl	800ab9c <_printf_i>
 800a81e:	e7eb      	b.n	800a7f8 <_svfiprintf_r+0x1c0>
 800a820:	0800b667 	.word	0x0800b667
 800a824:	0800b66d 	.word	0x0800b66d
 800a828:	0800b671 	.word	0x0800b671
 800a82c:	00000000 	.word	0x00000000
 800a830:	0800a585 	.word	0x0800a585

0800a834 <__sfputc_r>:
 800a834:	6893      	ldr	r3, [r2, #8]
 800a836:	b410      	push	{r4}
 800a838:	3b01      	subs	r3, #1
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	6093      	str	r3, [r2, #8]
 800a83e:	da07      	bge.n	800a850 <__sfputc_r+0x1c>
 800a840:	6994      	ldr	r4, [r2, #24]
 800a842:	42a3      	cmp	r3, r4
 800a844:	db01      	blt.n	800a84a <__sfputc_r+0x16>
 800a846:	290a      	cmp	r1, #10
 800a848:	d102      	bne.n	800a850 <__sfputc_r+0x1c>
 800a84a:	bc10      	pop	{r4}
 800a84c:	f7ff bcaf 	b.w	800a1ae <__swbuf_r>
 800a850:	6813      	ldr	r3, [r2, #0]
 800a852:	1c58      	adds	r0, r3, #1
 800a854:	6010      	str	r0, [r2, #0]
 800a856:	7019      	strb	r1, [r3, #0]
 800a858:	4608      	mov	r0, r1
 800a85a:	bc10      	pop	{r4}
 800a85c:	4770      	bx	lr

0800a85e <__sfputs_r>:
 800a85e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a860:	4606      	mov	r6, r0
 800a862:	460f      	mov	r7, r1
 800a864:	4614      	mov	r4, r2
 800a866:	18d5      	adds	r5, r2, r3
 800a868:	42ac      	cmp	r4, r5
 800a86a:	d101      	bne.n	800a870 <__sfputs_r+0x12>
 800a86c:	2000      	movs	r0, #0
 800a86e:	e007      	b.n	800a880 <__sfputs_r+0x22>
 800a870:	463a      	mov	r2, r7
 800a872:	4630      	mov	r0, r6
 800a874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a878:	f7ff ffdc 	bl	800a834 <__sfputc_r>
 800a87c:	1c43      	adds	r3, r0, #1
 800a87e:	d1f3      	bne.n	800a868 <__sfputs_r+0xa>
 800a880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a884 <_vfiprintf_r>:
 800a884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a888:	460d      	mov	r5, r1
 800a88a:	4614      	mov	r4, r2
 800a88c:	4698      	mov	r8, r3
 800a88e:	4606      	mov	r6, r0
 800a890:	b09d      	sub	sp, #116	; 0x74
 800a892:	b118      	cbz	r0, 800a89c <_vfiprintf_r+0x18>
 800a894:	6a03      	ldr	r3, [r0, #32]
 800a896:	b90b      	cbnz	r3, 800a89c <_vfiprintf_r+0x18>
 800a898:	f7ff fb6e 	bl	8009f78 <__sinit>
 800a89c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a89e:	07d9      	lsls	r1, r3, #31
 800a8a0:	d405      	bmi.n	800a8ae <_vfiprintf_r+0x2a>
 800a8a2:	89ab      	ldrh	r3, [r5, #12]
 800a8a4:	059a      	lsls	r2, r3, #22
 800a8a6:	d402      	bmi.n	800a8ae <_vfiprintf_r+0x2a>
 800a8a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8aa:	f7ff fe0a 	bl	800a4c2 <__retarget_lock_acquire_recursive>
 800a8ae:	89ab      	ldrh	r3, [r5, #12]
 800a8b0:	071b      	lsls	r3, r3, #28
 800a8b2:	d501      	bpl.n	800a8b8 <_vfiprintf_r+0x34>
 800a8b4:	692b      	ldr	r3, [r5, #16]
 800a8b6:	b99b      	cbnz	r3, 800a8e0 <_vfiprintf_r+0x5c>
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f7ff fcb4 	bl	800a228 <__swsetup_r>
 800a8c0:	b170      	cbz	r0, 800a8e0 <_vfiprintf_r+0x5c>
 800a8c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8c4:	07dc      	lsls	r4, r3, #31
 800a8c6:	d504      	bpl.n	800a8d2 <_vfiprintf_r+0x4e>
 800a8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8cc:	b01d      	add	sp, #116	; 0x74
 800a8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d2:	89ab      	ldrh	r3, [r5, #12]
 800a8d4:	0598      	lsls	r0, r3, #22
 800a8d6:	d4f7      	bmi.n	800a8c8 <_vfiprintf_r+0x44>
 800a8d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8da:	f7ff fdf3 	bl	800a4c4 <__retarget_lock_release_recursive>
 800a8de:	e7f3      	b.n	800a8c8 <_vfiprintf_r+0x44>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e4:	2320      	movs	r3, #32
 800a8e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8ea:	2330      	movs	r3, #48	; 0x30
 800a8ec:	f04f 0901 	mov.w	r9, #1
 800a8f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800aaa4 <_vfiprintf_r+0x220>
 800a8f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8fc:	4623      	mov	r3, r4
 800a8fe:	469a      	mov	sl, r3
 800a900:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a904:	b10a      	cbz	r2, 800a90a <_vfiprintf_r+0x86>
 800a906:	2a25      	cmp	r2, #37	; 0x25
 800a908:	d1f9      	bne.n	800a8fe <_vfiprintf_r+0x7a>
 800a90a:	ebba 0b04 	subs.w	fp, sl, r4
 800a90e:	d00b      	beq.n	800a928 <_vfiprintf_r+0xa4>
 800a910:	465b      	mov	r3, fp
 800a912:	4622      	mov	r2, r4
 800a914:	4629      	mov	r1, r5
 800a916:	4630      	mov	r0, r6
 800a918:	f7ff ffa1 	bl	800a85e <__sfputs_r>
 800a91c:	3001      	adds	r0, #1
 800a91e:	f000 80a9 	beq.w	800aa74 <_vfiprintf_r+0x1f0>
 800a922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a924:	445a      	add	r2, fp
 800a926:	9209      	str	r2, [sp, #36]	; 0x24
 800a928:	f89a 3000 	ldrb.w	r3, [sl]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f000 80a1 	beq.w	800aa74 <_vfiprintf_r+0x1f0>
 800a932:	2300      	movs	r3, #0
 800a934:	f04f 32ff 	mov.w	r2, #4294967295
 800a938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a93c:	f10a 0a01 	add.w	sl, sl, #1
 800a940:	9304      	str	r3, [sp, #16]
 800a942:	9307      	str	r3, [sp, #28]
 800a944:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a948:	931a      	str	r3, [sp, #104]	; 0x68
 800a94a:	4654      	mov	r4, sl
 800a94c:	2205      	movs	r2, #5
 800a94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a952:	4854      	ldr	r0, [pc, #336]	; (800aaa4 <_vfiprintf_r+0x220>)
 800a954:	f000 fb8c 	bl	800b070 <memchr>
 800a958:	9a04      	ldr	r2, [sp, #16]
 800a95a:	b9d8      	cbnz	r0, 800a994 <_vfiprintf_r+0x110>
 800a95c:	06d1      	lsls	r1, r2, #27
 800a95e:	bf44      	itt	mi
 800a960:	2320      	movmi	r3, #32
 800a962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a966:	0713      	lsls	r3, r2, #28
 800a968:	bf44      	itt	mi
 800a96a:	232b      	movmi	r3, #43	; 0x2b
 800a96c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a970:	f89a 3000 	ldrb.w	r3, [sl]
 800a974:	2b2a      	cmp	r3, #42	; 0x2a
 800a976:	d015      	beq.n	800a9a4 <_vfiprintf_r+0x120>
 800a978:	4654      	mov	r4, sl
 800a97a:	2000      	movs	r0, #0
 800a97c:	f04f 0c0a 	mov.w	ip, #10
 800a980:	9a07      	ldr	r2, [sp, #28]
 800a982:	4621      	mov	r1, r4
 800a984:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a988:	3b30      	subs	r3, #48	; 0x30
 800a98a:	2b09      	cmp	r3, #9
 800a98c:	d94d      	bls.n	800aa2a <_vfiprintf_r+0x1a6>
 800a98e:	b1b0      	cbz	r0, 800a9be <_vfiprintf_r+0x13a>
 800a990:	9207      	str	r2, [sp, #28]
 800a992:	e014      	b.n	800a9be <_vfiprintf_r+0x13a>
 800a994:	eba0 0308 	sub.w	r3, r0, r8
 800a998:	fa09 f303 	lsl.w	r3, r9, r3
 800a99c:	4313      	orrs	r3, r2
 800a99e:	46a2      	mov	sl, r4
 800a9a0:	9304      	str	r3, [sp, #16]
 800a9a2:	e7d2      	b.n	800a94a <_vfiprintf_r+0xc6>
 800a9a4:	9b03      	ldr	r3, [sp, #12]
 800a9a6:	1d19      	adds	r1, r3, #4
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	9103      	str	r1, [sp, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	bfbb      	ittet	lt
 800a9b0:	425b      	neglt	r3, r3
 800a9b2:	f042 0202 	orrlt.w	r2, r2, #2
 800a9b6:	9307      	strge	r3, [sp, #28]
 800a9b8:	9307      	strlt	r3, [sp, #28]
 800a9ba:	bfb8      	it	lt
 800a9bc:	9204      	strlt	r2, [sp, #16]
 800a9be:	7823      	ldrb	r3, [r4, #0]
 800a9c0:	2b2e      	cmp	r3, #46	; 0x2e
 800a9c2:	d10c      	bne.n	800a9de <_vfiprintf_r+0x15a>
 800a9c4:	7863      	ldrb	r3, [r4, #1]
 800a9c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9c8:	d134      	bne.n	800aa34 <_vfiprintf_r+0x1b0>
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	3402      	adds	r4, #2
 800a9ce:	1d1a      	adds	r2, r3, #4
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	9203      	str	r2, [sp, #12]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	bfb8      	it	lt
 800a9d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9dc:	9305      	str	r3, [sp, #20]
 800a9de:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aaa8 <_vfiprintf_r+0x224>
 800a9e2:	2203      	movs	r2, #3
 800a9e4:	4650      	mov	r0, sl
 800a9e6:	7821      	ldrb	r1, [r4, #0]
 800a9e8:	f000 fb42 	bl	800b070 <memchr>
 800a9ec:	b138      	cbz	r0, 800a9fe <_vfiprintf_r+0x17a>
 800a9ee:	2240      	movs	r2, #64	; 0x40
 800a9f0:	9b04      	ldr	r3, [sp, #16]
 800a9f2:	eba0 000a 	sub.w	r0, r0, sl
 800a9f6:	4082      	lsls	r2, r0
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	3401      	adds	r4, #1
 800a9fc:	9304      	str	r3, [sp, #16]
 800a9fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa02:	2206      	movs	r2, #6
 800aa04:	4829      	ldr	r0, [pc, #164]	; (800aaac <_vfiprintf_r+0x228>)
 800aa06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa0a:	f000 fb31 	bl	800b070 <memchr>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d03f      	beq.n	800aa92 <_vfiprintf_r+0x20e>
 800aa12:	4b27      	ldr	r3, [pc, #156]	; (800aab0 <_vfiprintf_r+0x22c>)
 800aa14:	bb1b      	cbnz	r3, 800aa5e <_vfiprintf_r+0x1da>
 800aa16:	9b03      	ldr	r3, [sp, #12]
 800aa18:	3307      	adds	r3, #7
 800aa1a:	f023 0307 	bic.w	r3, r3, #7
 800aa1e:	3308      	adds	r3, #8
 800aa20:	9303      	str	r3, [sp, #12]
 800aa22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa24:	443b      	add	r3, r7
 800aa26:	9309      	str	r3, [sp, #36]	; 0x24
 800aa28:	e768      	b.n	800a8fc <_vfiprintf_r+0x78>
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	2001      	movs	r0, #1
 800aa2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa32:	e7a6      	b.n	800a982 <_vfiprintf_r+0xfe>
 800aa34:	2300      	movs	r3, #0
 800aa36:	f04f 0c0a 	mov.w	ip, #10
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	3401      	adds	r4, #1
 800aa3e:	9305      	str	r3, [sp, #20]
 800aa40:	4620      	mov	r0, r4
 800aa42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa46:	3a30      	subs	r2, #48	; 0x30
 800aa48:	2a09      	cmp	r2, #9
 800aa4a:	d903      	bls.n	800aa54 <_vfiprintf_r+0x1d0>
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d0c6      	beq.n	800a9de <_vfiprintf_r+0x15a>
 800aa50:	9105      	str	r1, [sp, #20]
 800aa52:	e7c4      	b.n	800a9de <_vfiprintf_r+0x15a>
 800aa54:	4604      	mov	r4, r0
 800aa56:	2301      	movs	r3, #1
 800aa58:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa5c:	e7f0      	b.n	800aa40 <_vfiprintf_r+0x1bc>
 800aa5e:	ab03      	add	r3, sp, #12
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	462a      	mov	r2, r5
 800aa64:	4630      	mov	r0, r6
 800aa66:	4b13      	ldr	r3, [pc, #76]	; (800aab4 <_vfiprintf_r+0x230>)
 800aa68:	a904      	add	r1, sp, #16
 800aa6a:	f3af 8000 	nop.w
 800aa6e:	4607      	mov	r7, r0
 800aa70:	1c78      	adds	r0, r7, #1
 800aa72:	d1d6      	bne.n	800aa22 <_vfiprintf_r+0x19e>
 800aa74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa76:	07d9      	lsls	r1, r3, #31
 800aa78:	d405      	bmi.n	800aa86 <_vfiprintf_r+0x202>
 800aa7a:	89ab      	ldrh	r3, [r5, #12]
 800aa7c:	059a      	lsls	r2, r3, #22
 800aa7e:	d402      	bmi.n	800aa86 <_vfiprintf_r+0x202>
 800aa80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa82:	f7ff fd1f 	bl	800a4c4 <__retarget_lock_release_recursive>
 800aa86:	89ab      	ldrh	r3, [r5, #12]
 800aa88:	065b      	lsls	r3, r3, #25
 800aa8a:	f53f af1d 	bmi.w	800a8c8 <_vfiprintf_r+0x44>
 800aa8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa90:	e71c      	b.n	800a8cc <_vfiprintf_r+0x48>
 800aa92:	ab03      	add	r3, sp, #12
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	462a      	mov	r2, r5
 800aa98:	4630      	mov	r0, r6
 800aa9a:	4b06      	ldr	r3, [pc, #24]	; (800aab4 <_vfiprintf_r+0x230>)
 800aa9c:	a904      	add	r1, sp, #16
 800aa9e:	f000 f87d 	bl	800ab9c <_printf_i>
 800aaa2:	e7e4      	b.n	800aa6e <_vfiprintf_r+0x1ea>
 800aaa4:	0800b667 	.word	0x0800b667
 800aaa8:	0800b66d 	.word	0x0800b66d
 800aaac:	0800b671 	.word	0x0800b671
 800aab0:	00000000 	.word	0x00000000
 800aab4:	0800a85f 	.word	0x0800a85f

0800aab8 <_printf_common>:
 800aab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aabc:	4616      	mov	r6, r2
 800aabe:	4699      	mov	r9, r3
 800aac0:	688a      	ldr	r2, [r1, #8]
 800aac2:	690b      	ldr	r3, [r1, #16]
 800aac4:	4607      	mov	r7, r0
 800aac6:	4293      	cmp	r3, r2
 800aac8:	bfb8      	it	lt
 800aaca:	4613      	movlt	r3, r2
 800aacc:	6033      	str	r3, [r6, #0]
 800aace:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aad2:	460c      	mov	r4, r1
 800aad4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aad8:	b10a      	cbz	r2, 800aade <_printf_common+0x26>
 800aada:	3301      	adds	r3, #1
 800aadc:	6033      	str	r3, [r6, #0]
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	0699      	lsls	r1, r3, #26
 800aae2:	bf42      	ittt	mi
 800aae4:	6833      	ldrmi	r3, [r6, #0]
 800aae6:	3302      	addmi	r3, #2
 800aae8:	6033      	strmi	r3, [r6, #0]
 800aaea:	6825      	ldr	r5, [r4, #0]
 800aaec:	f015 0506 	ands.w	r5, r5, #6
 800aaf0:	d106      	bne.n	800ab00 <_printf_common+0x48>
 800aaf2:	f104 0a19 	add.w	sl, r4, #25
 800aaf6:	68e3      	ldr	r3, [r4, #12]
 800aaf8:	6832      	ldr	r2, [r6, #0]
 800aafa:	1a9b      	subs	r3, r3, r2
 800aafc:	42ab      	cmp	r3, r5
 800aafe:	dc2b      	bgt.n	800ab58 <_printf_common+0xa0>
 800ab00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab04:	1e13      	subs	r3, r2, #0
 800ab06:	6822      	ldr	r2, [r4, #0]
 800ab08:	bf18      	it	ne
 800ab0a:	2301      	movne	r3, #1
 800ab0c:	0692      	lsls	r2, r2, #26
 800ab0e:	d430      	bmi.n	800ab72 <_printf_common+0xba>
 800ab10:	4649      	mov	r1, r9
 800ab12:	4638      	mov	r0, r7
 800ab14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab18:	47c0      	blx	r8
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	d023      	beq.n	800ab66 <_printf_common+0xae>
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	6922      	ldr	r2, [r4, #16]
 800ab22:	f003 0306 	and.w	r3, r3, #6
 800ab26:	2b04      	cmp	r3, #4
 800ab28:	bf14      	ite	ne
 800ab2a:	2500      	movne	r5, #0
 800ab2c:	6833      	ldreq	r3, [r6, #0]
 800ab2e:	f04f 0600 	mov.w	r6, #0
 800ab32:	bf08      	it	eq
 800ab34:	68e5      	ldreq	r5, [r4, #12]
 800ab36:	f104 041a 	add.w	r4, r4, #26
 800ab3a:	bf08      	it	eq
 800ab3c:	1aed      	subeq	r5, r5, r3
 800ab3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ab42:	bf08      	it	eq
 800ab44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	bfc4      	itt	gt
 800ab4c:	1a9b      	subgt	r3, r3, r2
 800ab4e:	18ed      	addgt	r5, r5, r3
 800ab50:	42b5      	cmp	r5, r6
 800ab52:	d11a      	bne.n	800ab8a <_printf_common+0xd2>
 800ab54:	2000      	movs	r0, #0
 800ab56:	e008      	b.n	800ab6a <_printf_common+0xb2>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	4652      	mov	r2, sl
 800ab5c:	4649      	mov	r1, r9
 800ab5e:	4638      	mov	r0, r7
 800ab60:	47c0      	blx	r8
 800ab62:	3001      	adds	r0, #1
 800ab64:	d103      	bne.n	800ab6e <_printf_common+0xb6>
 800ab66:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab6e:	3501      	adds	r5, #1
 800ab70:	e7c1      	b.n	800aaf6 <_printf_common+0x3e>
 800ab72:	2030      	movs	r0, #48	; 0x30
 800ab74:	18e1      	adds	r1, r4, r3
 800ab76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab80:	4422      	add	r2, r4
 800ab82:	3302      	adds	r3, #2
 800ab84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab88:	e7c2      	b.n	800ab10 <_printf_common+0x58>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	4622      	mov	r2, r4
 800ab8e:	4649      	mov	r1, r9
 800ab90:	4638      	mov	r0, r7
 800ab92:	47c0      	blx	r8
 800ab94:	3001      	adds	r0, #1
 800ab96:	d0e6      	beq.n	800ab66 <_printf_common+0xae>
 800ab98:	3601      	adds	r6, #1
 800ab9a:	e7d9      	b.n	800ab50 <_printf_common+0x98>

0800ab9c <_printf_i>:
 800ab9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aba0:	7e0f      	ldrb	r7, [r1, #24]
 800aba2:	4691      	mov	r9, r2
 800aba4:	2f78      	cmp	r7, #120	; 0x78
 800aba6:	4680      	mov	r8, r0
 800aba8:	460c      	mov	r4, r1
 800abaa:	469a      	mov	sl, r3
 800abac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800abb2:	d807      	bhi.n	800abc4 <_printf_i+0x28>
 800abb4:	2f62      	cmp	r7, #98	; 0x62
 800abb6:	d80a      	bhi.n	800abce <_printf_i+0x32>
 800abb8:	2f00      	cmp	r7, #0
 800abba:	f000 80d5 	beq.w	800ad68 <_printf_i+0x1cc>
 800abbe:	2f58      	cmp	r7, #88	; 0x58
 800abc0:	f000 80c1 	beq.w	800ad46 <_printf_i+0x1aa>
 800abc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abcc:	e03a      	b.n	800ac44 <_printf_i+0xa8>
 800abce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abd2:	2b15      	cmp	r3, #21
 800abd4:	d8f6      	bhi.n	800abc4 <_printf_i+0x28>
 800abd6:	a101      	add	r1, pc, #4	; (adr r1, 800abdc <_printf_i+0x40>)
 800abd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abdc:	0800ac35 	.word	0x0800ac35
 800abe0:	0800ac49 	.word	0x0800ac49
 800abe4:	0800abc5 	.word	0x0800abc5
 800abe8:	0800abc5 	.word	0x0800abc5
 800abec:	0800abc5 	.word	0x0800abc5
 800abf0:	0800abc5 	.word	0x0800abc5
 800abf4:	0800ac49 	.word	0x0800ac49
 800abf8:	0800abc5 	.word	0x0800abc5
 800abfc:	0800abc5 	.word	0x0800abc5
 800ac00:	0800abc5 	.word	0x0800abc5
 800ac04:	0800abc5 	.word	0x0800abc5
 800ac08:	0800ad4f 	.word	0x0800ad4f
 800ac0c:	0800ac75 	.word	0x0800ac75
 800ac10:	0800ad09 	.word	0x0800ad09
 800ac14:	0800abc5 	.word	0x0800abc5
 800ac18:	0800abc5 	.word	0x0800abc5
 800ac1c:	0800ad71 	.word	0x0800ad71
 800ac20:	0800abc5 	.word	0x0800abc5
 800ac24:	0800ac75 	.word	0x0800ac75
 800ac28:	0800abc5 	.word	0x0800abc5
 800ac2c:	0800abc5 	.word	0x0800abc5
 800ac30:	0800ad11 	.word	0x0800ad11
 800ac34:	682b      	ldr	r3, [r5, #0]
 800ac36:	1d1a      	adds	r2, r3, #4
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	602a      	str	r2, [r5, #0]
 800ac3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac44:	2301      	movs	r3, #1
 800ac46:	e0a0      	b.n	800ad8a <_printf_i+0x1ee>
 800ac48:	6820      	ldr	r0, [r4, #0]
 800ac4a:	682b      	ldr	r3, [r5, #0]
 800ac4c:	0607      	lsls	r7, r0, #24
 800ac4e:	f103 0104 	add.w	r1, r3, #4
 800ac52:	6029      	str	r1, [r5, #0]
 800ac54:	d501      	bpl.n	800ac5a <_printf_i+0xbe>
 800ac56:	681e      	ldr	r6, [r3, #0]
 800ac58:	e003      	b.n	800ac62 <_printf_i+0xc6>
 800ac5a:	0646      	lsls	r6, r0, #25
 800ac5c:	d5fb      	bpl.n	800ac56 <_printf_i+0xba>
 800ac5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ac62:	2e00      	cmp	r6, #0
 800ac64:	da03      	bge.n	800ac6e <_printf_i+0xd2>
 800ac66:	232d      	movs	r3, #45	; 0x2d
 800ac68:	4276      	negs	r6, r6
 800ac6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac6e:	230a      	movs	r3, #10
 800ac70:	4859      	ldr	r0, [pc, #356]	; (800add8 <_printf_i+0x23c>)
 800ac72:	e012      	b.n	800ac9a <_printf_i+0xfe>
 800ac74:	682b      	ldr	r3, [r5, #0]
 800ac76:	6820      	ldr	r0, [r4, #0]
 800ac78:	1d19      	adds	r1, r3, #4
 800ac7a:	6029      	str	r1, [r5, #0]
 800ac7c:	0605      	lsls	r5, r0, #24
 800ac7e:	d501      	bpl.n	800ac84 <_printf_i+0xe8>
 800ac80:	681e      	ldr	r6, [r3, #0]
 800ac82:	e002      	b.n	800ac8a <_printf_i+0xee>
 800ac84:	0641      	lsls	r1, r0, #25
 800ac86:	d5fb      	bpl.n	800ac80 <_printf_i+0xe4>
 800ac88:	881e      	ldrh	r6, [r3, #0]
 800ac8a:	2f6f      	cmp	r7, #111	; 0x6f
 800ac8c:	bf0c      	ite	eq
 800ac8e:	2308      	moveq	r3, #8
 800ac90:	230a      	movne	r3, #10
 800ac92:	4851      	ldr	r0, [pc, #324]	; (800add8 <_printf_i+0x23c>)
 800ac94:	2100      	movs	r1, #0
 800ac96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac9a:	6865      	ldr	r5, [r4, #4]
 800ac9c:	2d00      	cmp	r5, #0
 800ac9e:	bfa8      	it	ge
 800aca0:	6821      	ldrge	r1, [r4, #0]
 800aca2:	60a5      	str	r5, [r4, #8]
 800aca4:	bfa4      	itt	ge
 800aca6:	f021 0104 	bicge.w	r1, r1, #4
 800acaa:	6021      	strge	r1, [r4, #0]
 800acac:	b90e      	cbnz	r6, 800acb2 <_printf_i+0x116>
 800acae:	2d00      	cmp	r5, #0
 800acb0:	d04b      	beq.n	800ad4a <_printf_i+0x1ae>
 800acb2:	4615      	mov	r5, r2
 800acb4:	fbb6 f1f3 	udiv	r1, r6, r3
 800acb8:	fb03 6711 	mls	r7, r3, r1, r6
 800acbc:	5dc7      	ldrb	r7, [r0, r7]
 800acbe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800acc2:	4637      	mov	r7, r6
 800acc4:	42bb      	cmp	r3, r7
 800acc6:	460e      	mov	r6, r1
 800acc8:	d9f4      	bls.n	800acb4 <_printf_i+0x118>
 800acca:	2b08      	cmp	r3, #8
 800accc:	d10b      	bne.n	800ace6 <_printf_i+0x14a>
 800acce:	6823      	ldr	r3, [r4, #0]
 800acd0:	07de      	lsls	r6, r3, #31
 800acd2:	d508      	bpl.n	800ace6 <_printf_i+0x14a>
 800acd4:	6923      	ldr	r3, [r4, #16]
 800acd6:	6861      	ldr	r1, [r4, #4]
 800acd8:	4299      	cmp	r1, r3
 800acda:	bfde      	ittt	le
 800acdc:	2330      	movle	r3, #48	; 0x30
 800acde:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ace2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ace6:	1b52      	subs	r2, r2, r5
 800ace8:	6122      	str	r2, [r4, #16]
 800acea:	464b      	mov	r3, r9
 800acec:	4621      	mov	r1, r4
 800acee:	4640      	mov	r0, r8
 800acf0:	f8cd a000 	str.w	sl, [sp]
 800acf4:	aa03      	add	r2, sp, #12
 800acf6:	f7ff fedf 	bl	800aab8 <_printf_common>
 800acfa:	3001      	adds	r0, #1
 800acfc:	d14a      	bne.n	800ad94 <_printf_i+0x1f8>
 800acfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ad02:	b004      	add	sp, #16
 800ad04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad08:	6823      	ldr	r3, [r4, #0]
 800ad0a:	f043 0320 	orr.w	r3, r3, #32
 800ad0e:	6023      	str	r3, [r4, #0]
 800ad10:	2778      	movs	r7, #120	; 0x78
 800ad12:	4832      	ldr	r0, [pc, #200]	; (800addc <_printf_i+0x240>)
 800ad14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	6829      	ldr	r1, [r5, #0]
 800ad1c:	061f      	lsls	r7, r3, #24
 800ad1e:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad22:	d402      	bmi.n	800ad2a <_printf_i+0x18e>
 800ad24:	065f      	lsls	r7, r3, #25
 800ad26:	bf48      	it	mi
 800ad28:	b2b6      	uxthmi	r6, r6
 800ad2a:	07df      	lsls	r7, r3, #31
 800ad2c:	bf48      	it	mi
 800ad2e:	f043 0320 	orrmi.w	r3, r3, #32
 800ad32:	6029      	str	r1, [r5, #0]
 800ad34:	bf48      	it	mi
 800ad36:	6023      	strmi	r3, [r4, #0]
 800ad38:	b91e      	cbnz	r6, 800ad42 <_printf_i+0x1a6>
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	f023 0320 	bic.w	r3, r3, #32
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	2310      	movs	r3, #16
 800ad44:	e7a6      	b.n	800ac94 <_printf_i+0xf8>
 800ad46:	4824      	ldr	r0, [pc, #144]	; (800add8 <_printf_i+0x23c>)
 800ad48:	e7e4      	b.n	800ad14 <_printf_i+0x178>
 800ad4a:	4615      	mov	r5, r2
 800ad4c:	e7bd      	b.n	800acca <_printf_i+0x12e>
 800ad4e:	682b      	ldr	r3, [r5, #0]
 800ad50:	6826      	ldr	r6, [r4, #0]
 800ad52:	1d18      	adds	r0, r3, #4
 800ad54:	6961      	ldr	r1, [r4, #20]
 800ad56:	6028      	str	r0, [r5, #0]
 800ad58:	0635      	lsls	r5, r6, #24
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	d501      	bpl.n	800ad62 <_printf_i+0x1c6>
 800ad5e:	6019      	str	r1, [r3, #0]
 800ad60:	e002      	b.n	800ad68 <_printf_i+0x1cc>
 800ad62:	0670      	lsls	r0, r6, #25
 800ad64:	d5fb      	bpl.n	800ad5e <_printf_i+0x1c2>
 800ad66:	8019      	strh	r1, [r3, #0]
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4615      	mov	r5, r2
 800ad6c:	6123      	str	r3, [r4, #16]
 800ad6e:	e7bc      	b.n	800acea <_printf_i+0x14e>
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	2100      	movs	r1, #0
 800ad74:	1d1a      	adds	r2, r3, #4
 800ad76:	602a      	str	r2, [r5, #0]
 800ad78:	681d      	ldr	r5, [r3, #0]
 800ad7a:	6862      	ldr	r2, [r4, #4]
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	f000 f977 	bl	800b070 <memchr>
 800ad82:	b108      	cbz	r0, 800ad88 <_printf_i+0x1ec>
 800ad84:	1b40      	subs	r0, r0, r5
 800ad86:	6060      	str	r0, [r4, #4]
 800ad88:	6863      	ldr	r3, [r4, #4]
 800ad8a:	6123      	str	r3, [r4, #16]
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad92:	e7aa      	b.n	800acea <_printf_i+0x14e>
 800ad94:	462a      	mov	r2, r5
 800ad96:	4649      	mov	r1, r9
 800ad98:	4640      	mov	r0, r8
 800ad9a:	6923      	ldr	r3, [r4, #16]
 800ad9c:	47d0      	blx	sl
 800ad9e:	3001      	adds	r0, #1
 800ada0:	d0ad      	beq.n	800acfe <_printf_i+0x162>
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	079b      	lsls	r3, r3, #30
 800ada6:	d413      	bmi.n	800add0 <_printf_i+0x234>
 800ada8:	68e0      	ldr	r0, [r4, #12]
 800adaa:	9b03      	ldr	r3, [sp, #12]
 800adac:	4298      	cmp	r0, r3
 800adae:	bfb8      	it	lt
 800adb0:	4618      	movlt	r0, r3
 800adb2:	e7a6      	b.n	800ad02 <_printf_i+0x166>
 800adb4:	2301      	movs	r3, #1
 800adb6:	4632      	mov	r2, r6
 800adb8:	4649      	mov	r1, r9
 800adba:	4640      	mov	r0, r8
 800adbc:	47d0      	blx	sl
 800adbe:	3001      	adds	r0, #1
 800adc0:	d09d      	beq.n	800acfe <_printf_i+0x162>
 800adc2:	3501      	adds	r5, #1
 800adc4:	68e3      	ldr	r3, [r4, #12]
 800adc6:	9903      	ldr	r1, [sp, #12]
 800adc8:	1a5b      	subs	r3, r3, r1
 800adca:	42ab      	cmp	r3, r5
 800adcc:	dcf2      	bgt.n	800adb4 <_printf_i+0x218>
 800adce:	e7eb      	b.n	800ada8 <_printf_i+0x20c>
 800add0:	2500      	movs	r5, #0
 800add2:	f104 0619 	add.w	r6, r4, #25
 800add6:	e7f5      	b.n	800adc4 <_printf_i+0x228>
 800add8:	0800b678 	.word	0x0800b678
 800addc:	0800b689 	.word	0x0800b689

0800ade0 <__sflush_r>:
 800ade0:	898a      	ldrh	r2, [r1, #12]
 800ade2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade4:	4605      	mov	r5, r0
 800ade6:	0710      	lsls	r0, r2, #28
 800ade8:	460c      	mov	r4, r1
 800adea:	d457      	bmi.n	800ae9c <__sflush_r+0xbc>
 800adec:	684b      	ldr	r3, [r1, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	dc04      	bgt.n	800adfc <__sflush_r+0x1c>
 800adf2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	dc01      	bgt.n	800adfc <__sflush_r+0x1c>
 800adf8:	2000      	movs	r0, #0
 800adfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adfe:	2e00      	cmp	r6, #0
 800ae00:	d0fa      	beq.n	800adf8 <__sflush_r+0x18>
 800ae02:	2300      	movs	r3, #0
 800ae04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae08:	682f      	ldr	r7, [r5, #0]
 800ae0a:	6a21      	ldr	r1, [r4, #32]
 800ae0c:	602b      	str	r3, [r5, #0]
 800ae0e:	d032      	beq.n	800ae76 <__sflush_r+0x96>
 800ae10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae12:	89a3      	ldrh	r3, [r4, #12]
 800ae14:	075a      	lsls	r2, r3, #29
 800ae16:	d505      	bpl.n	800ae24 <__sflush_r+0x44>
 800ae18:	6863      	ldr	r3, [r4, #4]
 800ae1a:	1ac0      	subs	r0, r0, r3
 800ae1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae1e:	b10b      	cbz	r3, 800ae24 <__sflush_r+0x44>
 800ae20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae22:	1ac0      	subs	r0, r0, r3
 800ae24:	2300      	movs	r3, #0
 800ae26:	4602      	mov	r2, r0
 800ae28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	6a21      	ldr	r1, [r4, #32]
 800ae2e:	47b0      	blx	r6
 800ae30:	1c43      	adds	r3, r0, #1
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	d106      	bne.n	800ae44 <__sflush_r+0x64>
 800ae36:	6829      	ldr	r1, [r5, #0]
 800ae38:	291d      	cmp	r1, #29
 800ae3a:	d82b      	bhi.n	800ae94 <__sflush_r+0xb4>
 800ae3c:	4a28      	ldr	r2, [pc, #160]	; (800aee0 <__sflush_r+0x100>)
 800ae3e:	410a      	asrs	r2, r1
 800ae40:	07d6      	lsls	r6, r2, #31
 800ae42:	d427      	bmi.n	800ae94 <__sflush_r+0xb4>
 800ae44:	2200      	movs	r2, #0
 800ae46:	6062      	str	r2, [r4, #4]
 800ae48:	6922      	ldr	r2, [r4, #16]
 800ae4a:	04d9      	lsls	r1, r3, #19
 800ae4c:	6022      	str	r2, [r4, #0]
 800ae4e:	d504      	bpl.n	800ae5a <__sflush_r+0x7a>
 800ae50:	1c42      	adds	r2, r0, #1
 800ae52:	d101      	bne.n	800ae58 <__sflush_r+0x78>
 800ae54:	682b      	ldr	r3, [r5, #0]
 800ae56:	b903      	cbnz	r3, 800ae5a <__sflush_r+0x7a>
 800ae58:	6560      	str	r0, [r4, #84]	; 0x54
 800ae5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae5c:	602f      	str	r7, [r5, #0]
 800ae5e:	2900      	cmp	r1, #0
 800ae60:	d0ca      	beq.n	800adf8 <__sflush_r+0x18>
 800ae62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae66:	4299      	cmp	r1, r3
 800ae68:	d002      	beq.n	800ae70 <__sflush_r+0x90>
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	f7ff fb42 	bl	800a4f4 <_free_r>
 800ae70:	2000      	movs	r0, #0
 800ae72:	6360      	str	r0, [r4, #52]	; 0x34
 800ae74:	e7c1      	b.n	800adfa <__sflush_r+0x1a>
 800ae76:	2301      	movs	r3, #1
 800ae78:	4628      	mov	r0, r5
 800ae7a:	47b0      	blx	r6
 800ae7c:	1c41      	adds	r1, r0, #1
 800ae7e:	d1c8      	bne.n	800ae12 <__sflush_r+0x32>
 800ae80:	682b      	ldr	r3, [r5, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d0c5      	beq.n	800ae12 <__sflush_r+0x32>
 800ae86:	2b1d      	cmp	r3, #29
 800ae88:	d001      	beq.n	800ae8e <__sflush_r+0xae>
 800ae8a:	2b16      	cmp	r3, #22
 800ae8c:	d101      	bne.n	800ae92 <__sflush_r+0xb2>
 800ae8e:	602f      	str	r7, [r5, #0]
 800ae90:	e7b2      	b.n	800adf8 <__sflush_r+0x18>
 800ae92:	89a3      	ldrh	r3, [r4, #12]
 800ae94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae98:	81a3      	strh	r3, [r4, #12]
 800ae9a:	e7ae      	b.n	800adfa <__sflush_r+0x1a>
 800ae9c:	690f      	ldr	r7, [r1, #16]
 800ae9e:	2f00      	cmp	r7, #0
 800aea0:	d0aa      	beq.n	800adf8 <__sflush_r+0x18>
 800aea2:	0793      	lsls	r3, r2, #30
 800aea4:	bf18      	it	ne
 800aea6:	2300      	movne	r3, #0
 800aea8:	680e      	ldr	r6, [r1, #0]
 800aeaa:	bf08      	it	eq
 800aeac:	694b      	ldreq	r3, [r1, #20]
 800aeae:	1bf6      	subs	r6, r6, r7
 800aeb0:	600f      	str	r7, [r1, #0]
 800aeb2:	608b      	str	r3, [r1, #8]
 800aeb4:	2e00      	cmp	r6, #0
 800aeb6:	dd9f      	ble.n	800adf8 <__sflush_r+0x18>
 800aeb8:	4633      	mov	r3, r6
 800aeba:	463a      	mov	r2, r7
 800aebc:	4628      	mov	r0, r5
 800aebe:	6a21      	ldr	r1, [r4, #32]
 800aec0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800aec4:	47e0      	blx	ip
 800aec6:	2800      	cmp	r0, #0
 800aec8:	dc06      	bgt.n	800aed8 <__sflush_r+0xf8>
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	f04f 30ff 	mov.w	r0, #4294967295
 800aed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aed4:	81a3      	strh	r3, [r4, #12]
 800aed6:	e790      	b.n	800adfa <__sflush_r+0x1a>
 800aed8:	4407      	add	r7, r0
 800aeda:	1a36      	subs	r6, r6, r0
 800aedc:	e7ea      	b.n	800aeb4 <__sflush_r+0xd4>
 800aede:	bf00      	nop
 800aee0:	dfbffffe 	.word	0xdfbffffe

0800aee4 <_fflush_r>:
 800aee4:	b538      	push	{r3, r4, r5, lr}
 800aee6:	690b      	ldr	r3, [r1, #16]
 800aee8:	4605      	mov	r5, r0
 800aeea:	460c      	mov	r4, r1
 800aeec:	b913      	cbnz	r3, 800aef4 <_fflush_r+0x10>
 800aeee:	2500      	movs	r5, #0
 800aef0:	4628      	mov	r0, r5
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	b118      	cbz	r0, 800aefe <_fflush_r+0x1a>
 800aef6:	6a03      	ldr	r3, [r0, #32]
 800aef8:	b90b      	cbnz	r3, 800aefe <_fflush_r+0x1a>
 800aefa:	f7ff f83d 	bl	8009f78 <__sinit>
 800aefe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d0f3      	beq.n	800aeee <_fflush_r+0xa>
 800af06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af08:	07d0      	lsls	r0, r2, #31
 800af0a:	d404      	bmi.n	800af16 <_fflush_r+0x32>
 800af0c:	0599      	lsls	r1, r3, #22
 800af0e:	d402      	bmi.n	800af16 <_fflush_r+0x32>
 800af10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af12:	f7ff fad6 	bl	800a4c2 <__retarget_lock_acquire_recursive>
 800af16:	4628      	mov	r0, r5
 800af18:	4621      	mov	r1, r4
 800af1a:	f7ff ff61 	bl	800ade0 <__sflush_r>
 800af1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af20:	4605      	mov	r5, r0
 800af22:	07da      	lsls	r2, r3, #31
 800af24:	d4e4      	bmi.n	800aef0 <_fflush_r+0xc>
 800af26:	89a3      	ldrh	r3, [r4, #12]
 800af28:	059b      	lsls	r3, r3, #22
 800af2a:	d4e1      	bmi.n	800aef0 <_fflush_r+0xc>
 800af2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af2e:	f7ff fac9 	bl	800a4c4 <__retarget_lock_release_recursive>
 800af32:	e7dd      	b.n	800aef0 <_fflush_r+0xc>

0800af34 <__swhatbuf_r>:
 800af34:	b570      	push	{r4, r5, r6, lr}
 800af36:	460c      	mov	r4, r1
 800af38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af3c:	4615      	mov	r5, r2
 800af3e:	2900      	cmp	r1, #0
 800af40:	461e      	mov	r6, r3
 800af42:	b096      	sub	sp, #88	; 0x58
 800af44:	da0c      	bge.n	800af60 <__swhatbuf_r+0x2c>
 800af46:	89a3      	ldrh	r3, [r4, #12]
 800af48:	2100      	movs	r1, #0
 800af4a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800af4e:	bf0c      	ite	eq
 800af50:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800af54:	2340      	movne	r3, #64	; 0x40
 800af56:	2000      	movs	r0, #0
 800af58:	6031      	str	r1, [r6, #0]
 800af5a:	602b      	str	r3, [r5, #0]
 800af5c:	b016      	add	sp, #88	; 0x58
 800af5e:	bd70      	pop	{r4, r5, r6, pc}
 800af60:	466a      	mov	r2, sp
 800af62:	f000 f863 	bl	800b02c <_fstat_r>
 800af66:	2800      	cmp	r0, #0
 800af68:	dbed      	blt.n	800af46 <__swhatbuf_r+0x12>
 800af6a:	9901      	ldr	r1, [sp, #4]
 800af6c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800af70:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800af74:	4259      	negs	r1, r3
 800af76:	4159      	adcs	r1, r3
 800af78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af7c:	e7eb      	b.n	800af56 <__swhatbuf_r+0x22>

0800af7e <__smakebuf_r>:
 800af7e:	898b      	ldrh	r3, [r1, #12]
 800af80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af82:	079d      	lsls	r5, r3, #30
 800af84:	4606      	mov	r6, r0
 800af86:	460c      	mov	r4, r1
 800af88:	d507      	bpl.n	800af9a <__smakebuf_r+0x1c>
 800af8a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af8e:	6023      	str	r3, [r4, #0]
 800af90:	6123      	str	r3, [r4, #16]
 800af92:	2301      	movs	r3, #1
 800af94:	6163      	str	r3, [r4, #20]
 800af96:	b002      	add	sp, #8
 800af98:	bd70      	pop	{r4, r5, r6, pc}
 800af9a:	466a      	mov	r2, sp
 800af9c:	ab01      	add	r3, sp, #4
 800af9e:	f7ff ffc9 	bl	800af34 <__swhatbuf_r>
 800afa2:	9900      	ldr	r1, [sp, #0]
 800afa4:	4605      	mov	r5, r0
 800afa6:	4630      	mov	r0, r6
 800afa8:	f7fe fece 	bl	8009d48 <_malloc_r>
 800afac:	b948      	cbnz	r0, 800afc2 <__smakebuf_r+0x44>
 800afae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afb2:	059a      	lsls	r2, r3, #22
 800afb4:	d4ef      	bmi.n	800af96 <__smakebuf_r+0x18>
 800afb6:	f023 0303 	bic.w	r3, r3, #3
 800afba:	f043 0302 	orr.w	r3, r3, #2
 800afbe:	81a3      	strh	r3, [r4, #12]
 800afc0:	e7e3      	b.n	800af8a <__smakebuf_r+0xc>
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	6020      	str	r0, [r4, #0]
 800afc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afca:	81a3      	strh	r3, [r4, #12]
 800afcc:	9b00      	ldr	r3, [sp, #0]
 800afce:	6120      	str	r0, [r4, #16]
 800afd0:	6163      	str	r3, [r4, #20]
 800afd2:	9b01      	ldr	r3, [sp, #4]
 800afd4:	b15b      	cbz	r3, 800afee <__smakebuf_r+0x70>
 800afd6:	4630      	mov	r0, r6
 800afd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afdc:	f000 f838 	bl	800b050 <_isatty_r>
 800afe0:	b128      	cbz	r0, 800afee <__smakebuf_r+0x70>
 800afe2:	89a3      	ldrh	r3, [r4, #12]
 800afe4:	f023 0303 	bic.w	r3, r3, #3
 800afe8:	f043 0301 	orr.w	r3, r3, #1
 800afec:	81a3      	strh	r3, [r4, #12]
 800afee:	89a3      	ldrh	r3, [r4, #12]
 800aff0:	431d      	orrs	r5, r3
 800aff2:	81a5      	strh	r5, [r4, #12]
 800aff4:	e7cf      	b.n	800af96 <__smakebuf_r+0x18>

0800aff6 <memmove>:
 800aff6:	4288      	cmp	r0, r1
 800aff8:	b510      	push	{r4, lr}
 800affa:	eb01 0402 	add.w	r4, r1, r2
 800affe:	d902      	bls.n	800b006 <memmove+0x10>
 800b000:	4284      	cmp	r4, r0
 800b002:	4623      	mov	r3, r4
 800b004:	d807      	bhi.n	800b016 <memmove+0x20>
 800b006:	1e43      	subs	r3, r0, #1
 800b008:	42a1      	cmp	r1, r4
 800b00a:	d008      	beq.n	800b01e <memmove+0x28>
 800b00c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b010:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b014:	e7f8      	b.n	800b008 <memmove+0x12>
 800b016:	4601      	mov	r1, r0
 800b018:	4402      	add	r2, r0
 800b01a:	428a      	cmp	r2, r1
 800b01c:	d100      	bne.n	800b020 <memmove+0x2a>
 800b01e:	bd10      	pop	{r4, pc}
 800b020:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b024:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b028:	e7f7      	b.n	800b01a <memmove+0x24>
	...

0800b02c <_fstat_r>:
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	2300      	movs	r3, #0
 800b030:	4d06      	ldr	r5, [pc, #24]	; (800b04c <_fstat_r+0x20>)
 800b032:	4604      	mov	r4, r0
 800b034:	4608      	mov	r0, r1
 800b036:	4611      	mov	r1, r2
 800b038:	602b      	str	r3, [r5, #0]
 800b03a:	f7f8 fa40 	bl	80034be <_fstat>
 800b03e:	1c43      	adds	r3, r0, #1
 800b040:	d102      	bne.n	800b048 <_fstat_r+0x1c>
 800b042:	682b      	ldr	r3, [r5, #0]
 800b044:	b103      	cbz	r3, 800b048 <_fstat_r+0x1c>
 800b046:	6023      	str	r3, [r4, #0]
 800b048:	bd38      	pop	{r3, r4, r5, pc}
 800b04a:	bf00      	nop
 800b04c:	20002d14 	.word	0x20002d14

0800b050 <_isatty_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	2300      	movs	r3, #0
 800b054:	4d05      	ldr	r5, [pc, #20]	; (800b06c <_isatty_r+0x1c>)
 800b056:	4604      	mov	r4, r0
 800b058:	4608      	mov	r0, r1
 800b05a:	602b      	str	r3, [r5, #0]
 800b05c:	f7f8 fa34 	bl	80034c8 <_isatty>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d102      	bne.n	800b06a <_isatty_r+0x1a>
 800b064:	682b      	ldr	r3, [r5, #0]
 800b066:	b103      	cbz	r3, 800b06a <_isatty_r+0x1a>
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	bd38      	pop	{r3, r4, r5, pc}
 800b06c:	20002d14 	.word	0x20002d14

0800b070 <memchr>:
 800b070:	4603      	mov	r3, r0
 800b072:	b510      	push	{r4, lr}
 800b074:	b2c9      	uxtb	r1, r1
 800b076:	4402      	add	r2, r0
 800b078:	4293      	cmp	r3, r2
 800b07a:	4618      	mov	r0, r3
 800b07c:	d101      	bne.n	800b082 <memchr+0x12>
 800b07e:	2000      	movs	r0, #0
 800b080:	e003      	b.n	800b08a <memchr+0x1a>
 800b082:	7804      	ldrb	r4, [r0, #0]
 800b084:	3301      	adds	r3, #1
 800b086:	428c      	cmp	r4, r1
 800b088:	d1f6      	bne.n	800b078 <memchr+0x8>
 800b08a:	bd10      	pop	{r4, pc}

0800b08c <_realloc_r>:
 800b08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b090:	4680      	mov	r8, r0
 800b092:	4614      	mov	r4, r2
 800b094:	460e      	mov	r6, r1
 800b096:	b921      	cbnz	r1, 800b0a2 <_realloc_r+0x16>
 800b098:	4611      	mov	r1, r2
 800b09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b09e:	f7fe be53 	b.w	8009d48 <_malloc_r>
 800b0a2:	b92a      	cbnz	r2, 800b0b0 <_realloc_r+0x24>
 800b0a4:	f7ff fa26 	bl	800a4f4 <_free_r>
 800b0a8:	4625      	mov	r5, r4
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b0:	f000 f81b 	bl	800b0ea <_malloc_usable_size_r>
 800b0b4:	4284      	cmp	r4, r0
 800b0b6:	4607      	mov	r7, r0
 800b0b8:	d802      	bhi.n	800b0c0 <_realloc_r+0x34>
 800b0ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0be:	d812      	bhi.n	800b0e6 <_realloc_r+0x5a>
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	4640      	mov	r0, r8
 800b0c4:	f7fe fe40 	bl	8009d48 <_malloc_r>
 800b0c8:	4605      	mov	r5, r0
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d0ed      	beq.n	800b0aa <_realloc_r+0x1e>
 800b0ce:	42bc      	cmp	r4, r7
 800b0d0:	4622      	mov	r2, r4
 800b0d2:	4631      	mov	r1, r6
 800b0d4:	bf28      	it	cs
 800b0d6:	463a      	movcs	r2, r7
 800b0d8:	f7ff f9fd 	bl	800a4d6 <memcpy>
 800b0dc:	4631      	mov	r1, r6
 800b0de:	4640      	mov	r0, r8
 800b0e0:	f7ff fa08 	bl	800a4f4 <_free_r>
 800b0e4:	e7e1      	b.n	800b0aa <_realloc_r+0x1e>
 800b0e6:	4635      	mov	r5, r6
 800b0e8:	e7df      	b.n	800b0aa <_realloc_r+0x1e>

0800b0ea <_malloc_usable_size_r>:
 800b0ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0ee:	1f18      	subs	r0, r3, #4
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	bfbc      	itt	lt
 800b0f4:	580b      	ldrlt	r3, [r1, r0]
 800b0f6:	18c0      	addlt	r0, r0, r3
 800b0f8:	4770      	bx	lr
	...

0800b0fc <_init>:
 800b0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fe:	bf00      	nop
 800b100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b102:	bc08      	pop	{r3}
 800b104:	469e      	mov	lr, r3
 800b106:	4770      	bx	lr

0800b108 <_fini>:
 800b108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10a:	bf00      	nop
 800b10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b10e:	bc08      	pop	{r3}
 800b110:	469e      	mov	lr, r3
 800b112:	4770      	bx	lr
