
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8d0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  0800c9e0  0800c9e0  0001c9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdbc  0800cdbc  00020260  2**0
                  CONTENTS
  4 .ARM          00000000  0800cdbc  0800cdbc  00020260  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cdbc  0800cdbc  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdbc  0800cdbc  0001cdbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdc0  0800cdc0  0001cdc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800cdc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eb8  20000260  0800d024  00020260  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002118  0800d024  00022118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020289  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e825  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a99  00000000  00000000  0003eaf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001890  00000000  00000000  00043590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001320  00000000  00000000  00044e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d22c  00000000  00000000  00046140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002100c  00000000  00000000  0006336c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009daa7  00000000  00000000  00084378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d48  00000000  00000000  00121e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00128b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000260 	.word	0x20000260
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c9c8 	.word	0x0800c9c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000264 	.word	0x20000264
 800014c:	0800c9c8 	.word	0x0800c9c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_frsub>:
 8000a4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a50:	e002      	b.n	8000a58 <__addsf3>
 8000a52:	bf00      	nop

08000a54 <__aeabi_fsub>:
 8000a54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a58 <__addsf3>:
 8000a58:	0042      	lsls	r2, r0, #1
 8000a5a:	bf1f      	itttt	ne
 8000a5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a60:	ea92 0f03 	teqne	r2, r3
 8000a64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a6c:	d06a      	beq.n	8000b44 <__addsf3+0xec>
 8000a6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a76:	bfc1      	itttt	gt
 8000a78:	18d2      	addgt	r2, r2, r3
 8000a7a:	4041      	eorgt	r1, r0
 8000a7c:	4048      	eorgt	r0, r1
 8000a7e:	4041      	eorgt	r1, r0
 8000a80:	bfb8      	it	lt
 8000a82:	425b      	neglt	r3, r3
 8000a84:	2b19      	cmp	r3, #25
 8000a86:	bf88      	it	hi
 8000a88:	4770      	bxhi	lr
 8000a8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aa2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4249      	negne	r1, r1
 8000aaa:	ea92 0f03 	teq	r2, r3
 8000aae:	d03f      	beq.n	8000b30 <__addsf3+0xd8>
 8000ab0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ab4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ab8:	eb10 000c 	adds.w	r0, r0, ip
 8000abc:	f1c3 0320 	rsb	r3, r3, #32
 8000ac0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ac4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac8:	d502      	bpl.n	8000ad0 <__addsf3+0x78>
 8000aca:	4249      	negs	r1, r1
 8000acc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ad4:	d313      	bcc.n	8000afe <__addsf3+0xa6>
 8000ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ada:	d306      	bcc.n	8000aea <__addsf3+0x92>
 8000adc:	0840      	lsrs	r0, r0, #1
 8000ade:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ae2:	f102 0201 	add.w	r2, r2, #1
 8000ae6:	2afe      	cmp	r2, #254	; 0xfe
 8000ae8:	d251      	bcs.n	8000b8e <__addsf3+0x136>
 8000aea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000af2:	bf08      	it	eq
 8000af4:	f020 0001 	biceq.w	r0, r0, #1
 8000af8:	ea40 0003 	orr.w	r0, r0, r3
 8000afc:	4770      	bx	lr
 8000afe:	0049      	lsls	r1, r1, #1
 8000b00:	eb40 0000 	adc.w	r0, r0, r0
 8000b04:	3a01      	subs	r2, #1
 8000b06:	bf28      	it	cs
 8000b08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b0c:	d2ed      	bcs.n	8000aea <__addsf3+0x92>
 8000b0e:	fab0 fc80 	clz	ip, r0
 8000b12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b16:	ebb2 020c 	subs.w	r2, r2, ip
 8000b1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b1e:	bfaa      	itet	ge
 8000b20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b24:	4252      	neglt	r2, r2
 8000b26:	4318      	orrge	r0, r3
 8000b28:	bfbc      	itt	lt
 8000b2a:	40d0      	lsrlt	r0, r2
 8000b2c:	4318      	orrlt	r0, r3
 8000b2e:	4770      	bx	lr
 8000b30:	f092 0f00 	teq	r2, #0
 8000b34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b38:	bf06      	itte	eq
 8000b3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b3e:	3201      	addeq	r2, #1
 8000b40:	3b01      	subne	r3, #1
 8000b42:	e7b5      	b.n	8000ab0 <__addsf3+0x58>
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d021      	beq.n	8000b98 <__addsf3+0x140>
 8000b54:	ea92 0f03 	teq	r2, r3
 8000b58:	d004      	beq.n	8000b64 <__addsf3+0x10c>
 8000b5a:	f092 0f00 	teq	r2, #0
 8000b5e:	bf08      	it	eq
 8000b60:	4608      	moveq	r0, r1
 8000b62:	4770      	bx	lr
 8000b64:	ea90 0f01 	teq	r0, r1
 8000b68:	bf1c      	itt	ne
 8000b6a:	2000      	movne	r0, #0
 8000b6c:	4770      	bxne	lr
 8000b6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b72:	d104      	bne.n	8000b7e <__addsf3+0x126>
 8000b74:	0040      	lsls	r0, r0, #1
 8000b76:	bf28      	it	cs
 8000b78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b7c:	4770      	bx	lr
 8000b7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b82:	bf3c      	itt	cc
 8000b84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bxcc	lr
 8000b8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	4770      	bx	lr
 8000b98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b9c:	bf16      	itet	ne
 8000b9e:	4608      	movne	r0, r1
 8000ba0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ba4:	4601      	movne	r1, r0
 8000ba6:	0242      	lsls	r2, r0, #9
 8000ba8:	bf06      	itte	eq
 8000baa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bae:	ea90 0f01 	teqeq	r0, r1
 8000bb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_ui2f>:
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	e004      	b.n	8000bc8 <__aeabi_i2f+0x8>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_i2f>:
 8000bc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	bf48      	it	mi
 8000bc6:	4240      	negmi	r0, r0
 8000bc8:	ea5f 0c00 	movs.w	ip, r0
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bd4:	4601      	mov	r1, r0
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	e01c      	b.n	8000c16 <__aeabi_l2f+0x2a>

08000bdc <__aeabi_ul2f>:
 8000bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e00a      	b.n	8000c00 <__aeabi_l2f+0x14>
 8000bea:	bf00      	nop

08000bec <__aeabi_l2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__aeabi_l2f+0x14>
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	ea5f 0c01 	movs.w	ip, r1
 8000c04:	bf02      	ittt	eq
 8000c06:	4684      	moveq	ip, r0
 8000c08:	4601      	moveq	r1, r0
 8000c0a:	2000      	moveq	r0, #0
 8000c0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c10:	bf08      	it	eq
 8000c12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c1a:	fabc f28c 	clz	r2, ip
 8000c1e:	3a08      	subs	r2, #8
 8000c20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c24:	db10      	blt.n	8000c48 <__aeabi_l2f+0x5c>
 8000c26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c30:	f1c2 0220 	rsb	r2, r2, #32
 8000c34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c38:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3c:	eb43 0002 	adc.w	r0, r3, r2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f102 0220 	add.w	r2, r2, #32
 8000c4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c58:	fa21 f202 	lsr.w	r2, r1, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_fmul>:
 8000c68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c70:	bf1e      	ittt	ne
 8000c72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c76:	ea92 0f0c 	teqne	r2, ip
 8000c7a:	ea93 0f0c 	teqne	r3, ip
 8000c7e:	d06f      	beq.n	8000d60 <__aeabi_fmul+0xf8>
 8000c80:	441a      	add	r2, r3
 8000c82:	ea80 0c01 	eor.w	ip, r0, r1
 8000c86:	0240      	lsls	r0, r0, #9
 8000c88:	bf18      	it	ne
 8000c8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c8e:	d01e      	beq.n	8000cce <__aeabi_fmul+0x66>
 8000c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ca0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ca4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ca8:	bf3e      	ittt	cc
 8000caa:	0049      	lslcc	r1, r1, #1
 8000cac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cb0:	005b      	lslcc	r3, r3, #1
 8000cb2:	ea40 0001 	orr.w	r0, r0, r1
 8000cb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cba:	2afd      	cmp	r2, #253	; 0xfd
 8000cbc:	d81d      	bhi.n	8000cfa <__aeabi_fmul+0x92>
 8000cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc6:	bf08      	it	eq
 8000cc8:	f020 0001 	biceq.w	r0, r0, #1
 8000ccc:	4770      	bx	lr
 8000cce:	f090 0f00 	teq	r0, #0
 8000cd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cd6:	bf08      	it	eq
 8000cd8:	0249      	lsleq	r1, r1, #9
 8000cda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ce2:	3a7f      	subs	r2, #127	; 0x7f
 8000ce4:	bfc2      	ittt	gt
 8000ce6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cee:	4770      	bxgt	lr
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	dc5d      	bgt.n	8000db8 <__aeabi_fmul+0x150>
 8000cfc:	f112 0f19 	cmn.w	r2, #25
 8000d00:	bfdc      	itt	le
 8000d02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d06:	4770      	bxle	lr
 8000d08:	f1c2 0200 	rsb	r2, r2, #0
 8000d0c:	0041      	lsls	r1, r0, #1
 8000d0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d12:	f1c2 0220 	rsb	r2, r2, #32
 8000d16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d1e:	f140 0000 	adc.w	r0, r0, #0
 8000d22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d26:	bf08      	it	eq
 8000d28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2c:	4770      	bx	lr
 8000d2e:	f092 0f00 	teq	r2, #0
 8000d32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d36:	bf02      	ittt	eq
 8000d38:	0040      	lsleq	r0, r0, #1
 8000d3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d3e:	3a01      	subeq	r2, #1
 8000d40:	d0f9      	beq.n	8000d36 <__aeabi_fmul+0xce>
 8000d42:	ea40 000c 	orr.w	r0, r0, ip
 8000d46:	f093 0f00 	teq	r3, #0
 8000d4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d4e:	bf02      	ittt	eq
 8000d50:	0049      	lsleq	r1, r1, #1
 8000d52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d56:	3b01      	subeq	r3, #1
 8000d58:	d0f9      	beq.n	8000d4e <__aeabi_fmul+0xe6>
 8000d5a:	ea41 010c 	orr.w	r1, r1, ip
 8000d5e:	e78f      	b.n	8000c80 <__aeabi_fmul+0x18>
 8000d60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d64:	ea92 0f0c 	teq	r2, ip
 8000d68:	bf18      	it	ne
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d00a      	beq.n	8000d86 <__aeabi_fmul+0x11e>
 8000d70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d74:	bf18      	it	ne
 8000d76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d7a:	d1d8      	bne.n	8000d2e <__aeabi_fmul+0xc6>
 8000d7c:	ea80 0001 	eor.w	r0, r0, r1
 8000d80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f090 0f00 	teq	r0, #0
 8000d8a:	bf17      	itett	ne
 8000d8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d90:	4608      	moveq	r0, r1
 8000d92:	f091 0f00 	teqne	r1, #0
 8000d96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d9a:	d014      	beq.n	8000dc6 <__aeabi_fmul+0x15e>
 8000d9c:	ea92 0f0c 	teq	r2, ip
 8000da0:	d101      	bne.n	8000da6 <__aeabi_fmul+0x13e>
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	d10f      	bne.n	8000dc6 <__aeabi_fmul+0x15e>
 8000da6:	ea93 0f0c 	teq	r3, ip
 8000daa:	d103      	bne.n	8000db4 <__aeabi_fmul+0x14c>
 8000dac:	024b      	lsls	r3, r1, #9
 8000dae:	bf18      	it	ne
 8000db0:	4608      	movne	r0, r1
 8000db2:	d108      	bne.n	8000dc6 <__aeabi_fmul+0x15e>
 8000db4:	ea80 0001 	eor.w	r0, r0, r1
 8000db8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc4:	4770      	bx	lr
 8000dc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_fdiv>:
 8000dd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd8:	bf1e      	ittt	ne
 8000dda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dde:	ea92 0f0c 	teqne	r2, ip
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d069      	beq.n	8000ebc <__aeabi_fdiv+0xec>
 8000de8:	eba2 0203 	sub.w	r2, r2, r3
 8000dec:	ea80 0c01 	eor.w	ip, r0, r1
 8000df0:	0249      	lsls	r1, r1, #9
 8000df2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000df6:	d037      	beq.n	8000e68 <__aeabi_fdiv+0x98>
 8000df8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	bf38      	it	cc
 8000e0c:	005b      	lslcc	r3, r3, #1
 8000e0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e16:	428b      	cmp	r3, r1
 8000e18:	bf24      	itt	cs
 8000e1a:	1a5b      	subcs	r3, r3, r1
 8000e1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e24:	bf24      	itt	cs
 8000e26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e32:	bf24      	itt	cs
 8000e34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e40:	bf24      	itt	cs
 8000e42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	bf18      	it	ne
 8000e4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e52:	d1e0      	bne.n	8000e16 <__aeabi_fdiv+0x46>
 8000e54:	2afd      	cmp	r2, #253	; 0xfd
 8000e56:	f63f af50 	bhi.w	8000cfa <__aeabi_fmul+0x92>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e60:	bf08      	it	eq
 8000e62:	f020 0001 	biceq.w	r0, r0, #1
 8000e66:	4770      	bx	lr
 8000e68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e70:	327f      	adds	r2, #127	; 0x7f
 8000e72:	bfc2      	ittt	gt
 8000e74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e7c:	4770      	bxgt	lr
 8000e7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	3a01      	subs	r2, #1
 8000e88:	e737      	b.n	8000cfa <__aeabi_fmul+0x92>
 8000e8a:	f092 0f00 	teq	r2, #0
 8000e8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0040      	lsleq	r0, r0, #1
 8000e96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9a:	3a01      	subeq	r2, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fdiv+0xc2>
 8000e9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ea2:	f093 0f00 	teq	r3, #0
 8000ea6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0049      	lsleq	r1, r1, #1
 8000eae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb2:	3b01      	subeq	r3, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fdiv+0xda>
 8000eb6:	ea41 010c 	orr.w	r1, r1, ip
 8000eba:	e795      	b.n	8000de8 <__aeabi_fdiv+0x18>
 8000ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec0:	ea92 0f0c 	teq	r2, ip
 8000ec4:	d108      	bne.n	8000ed8 <__aeabi_fdiv+0x108>
 8000ec6:	0242      	lsls	r2, r0, #9
 8000ec8:	f47f af7d 	bne.w	8000dc6 <__aeabi_fmul+0x15e>
 8000ecc:	ea93 0f0c 	teq	r3, ip
 8000ed0:	f47f af70 	bne.w	8000db4 <__aeabi_fmul+0x14c>
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e776      	b.n	8000dc6 <__aeabi_fmul+0x15e>
 8000ed8:	ea93 0f0c 	teq	r3, ip
 8000edc:	d104      	bne.n	8000ee8 <__aeabi_fdiv+0x118>
 8000ede:	024b      	lsls	r3, r1, #9
 8000ee0:	f43f af4c 	beq.w	8000d7c <__aeabi_fmul+0x114>
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	e76e      	b.n	8000dc6 <__aeabi_fmul+0x15e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1ca      	bne.n	8000e8a <__aeabi_fdiv+0xba>
 8000ef4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ef8:	f47f af5c 	bne.w	8000db4 <__aeabi_fmul+0x14c>
 8000efc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f00:	f47f af3c 	bne.w	8000d7c <__aeabi_fmul+0x114>
 8000f04:	e75f      	b.n	8000dc6 <__aeabi_fmul+0x15e>
 8000f06:	bf00      	nop

08000f08 <BluetoothInit>:
CRC_short 			CRCReceive;

extern osThreadId TaskBluetoothHandle;


uint8_t BluetoothInit(Bluetooth *ble, UART_HandleTypeDef *bluetoothUARTHandle, DMA_HandleTypeDef *bluetoothUARTDMAHandle, osMessageQId *filaRX, osMessageQId *filaTX){
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
	//Pass the used UART handle to the struct
	ble->UARTHandle 	= bluetoothUARTHandle;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	601a      	str	r2, [r3, #0]
	ble->UARTDMAHandle 	= bluetoothUARTDMAHandle;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	605a      	str	r2, [r3, #4]

	UARTHandle 			= ble->UARTHandle;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <BluetoothInit+0x54>)
 8000f28:	6013      	str	r3, [r2, #0]
	UARTDMAHandle 		= ble->UARTDMAHandle;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <BluetoothInit+0x58>)
 8000f30:	6013      	str	r3, [r2, #0]

	//Pass the used queue to the struct
	ble->filaComandosRX = filaRX;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
	ble->filaComandosTX = filaTX;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c

	//Start the component count variable from zero
	ble->_BleCommCount  = 0;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	ble->JanelaConexao = 120;//120 segundos
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2278      	movs	r2, #120	; 0x78
 8000f4a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	//Return OK
	return 0;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000294 	.word	0x20000294
 8000f60:	20000298 	.word	0x20000298

08000f64 <BluetoothAddComp>:

uint8_t BluetoothAddComp(Bluetooth* ble, BleComando* _blecomm, char* objectname, uint8_t __comando, TypeComandoBle __tipo){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_blecomm->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff f8ec 	bl	8000150 <strlen>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f00a fff5 	bl	800bf6c <malloc>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	605a      	str	r2, [r3, #4]
	//Pass the object name to the struct
	strcpy(_blecomm->objname, objectname);
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00b f96f 	bl	800c274 <strcpy>

	//Pass the corresponding data from component to component struct
	_blecomm->_comando = __comando;
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	78fa      	ldrb	r2, [r7, #3]
 8000f9a:	701a      	strb	r2, [r3, #0]
	_blecomm->_tipo = __tipo;
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	7e3a      	ldrb	r2, [r7, #24]
 8000fa0:	705a      	strb	r2, [r3, #1]

	//Add the component struct to the list on the Nextion Struct
	ble->_BleCommArr[ble->_BleCommCount] = _blecomm;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3222      	adds	r2, #34	; 0x22
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ble->_BleCommCount++;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	//Return OK
	return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <BluetoothPutFila>:

void BluetoothPutFila(Bluetooth* ble){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

	//Varregura pelos comandos -----------------------------
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e06b      	b.n	80010b6 <BluetoothPutFila+0xe6>

		//Detecta por comando--------------------------------
		if( ble->_RxDataArr[1] == (ble->_BleCommArr[i]->_comando)){
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8000fe4:	7bf9      	ldrb	r1, [r7, #15]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3122      	adds	r1, #34	; 0x22
 8000fea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d15d      	bne.n	80010b0 <BluetoothPutFila+0xe0>

			//Validacao de CRC-----------------------------------
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001000:	b29b      	uxth	r3, r3
 8001002:	3b02      	subs	r3, #2
 8001004:	b29b      	uxth	r3, r3
 8001006:	4619      	mov	r1, r3
 8001008:	4610      	mov	r0, r2
 800100a:	f000 fab3 	bl	8001574 <CRC16>
 800100e:	4603      	mov	r3, r0
 8001010:	b21a      	sxth	r2, r3
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <BluetoothPutFila+0xf8>)
 8001014:	801a      	strh	r2, [r3, #0]
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <BluetoothPutFila+0xf8>)
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001020:	3b02      	subs	r3, #2
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	440b      	add	r3, r1
 8001026:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800102a:	429a      	cmp	r2, r3
 800102c:	d10b      	bne.n	8001046 <BluetoothPutFila+0x76>
					(CRCReceive.byte.lo != ble->_RxDataArr[ble->RxSize-1]))	{
 800102e:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <BluetoothPutFila+0xf8>)
 8001030:	785a      	ldrb	r2, [r3, #1]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001038:	3b01      	subs	r3, #1
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	440b      	add	r3, r1
 800103e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 8001042:	429a      	cmp	r2, r3
 8001044:	d002      	beq.n	800104c <BluetoothPutFila+0x7c>
				BluetoothErroCRC();//erro de CRC
 8001046:	f000 fcc3 	bl	80019d0 <BluetoothErroCRC>
				return; //ENCERRA
 800104a:	e03a      	b.n	80010c2 <BluetoothPutFila+0xf2>
			}

			if(ble->_BleCommArr[i]->_tipo == ComandoBasico ){
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3222      	adds	r2, #34	; 0x22
 8001052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001056:	785b      	ldrb	r3, [r3, #1]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d10e      	bne.n	800107a <BluetoothPutFila+0xaa>

				osMessagePut(*ble->filaComandosRX, ble->_BleCommArr[i]->_comando, osWaitForever);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3222      	adds	r2, #34	; 0x22
 8001068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	f04f 32ff 	mov.w	r2, #4294967295
 8001072:	4619      	mov	r1, r3
 8001074:	f008 f9c6 	bl	8009404 <osMessagePut>
				return;
 8001078:	e023      	b.n	80010c2 <BluetoothPutFila+0xf2>
			}

			else if(ble->_BleCommArr[i]->_tipo == ComandoCritico ){
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3222      	adds	r2, #34	; 0x22
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	785b      	ldrb	r3, [r3, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d112      	bne.n	80010b0 <BluetoothPutFila+0xe0>
				if(ble->SistemaEmErro){
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00d      	beq.n	80010b0 <BluetoothPutFila+0xe0>
					osMessagePut(*ble->filaComandosRX, ble->_BleCommArr[i]->_comando, osWaitForever);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3222      	adds	r2, #34	; 0x22
 80010a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	f04f 32ff 	mov.w	r2, #4294967295
 80010aa:	4619      	mov	r1, r3
 80010ac:	f008 f9aa 	bl	8009404 <osMessagePut>
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	3301      	adds	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d38d      	bcc.n	8000fde <BluetoothPutFila+0xe>
					//TX_COMANDO_NEGADO
				}
			}
		}
	}
}
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000029c 	.word	0x2000029c

080010cc <BLEUSART_IrqHandler>:

void BLEUSART_IrqHandler(Bluetooth *ble)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	if (UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <BLEUSART_IrqHandler+0x78>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0310 	and.w	r3, r3, #16
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d02a      	beq.n	800113a <BLEUSART_IrqHandler+0x6e>
		__IO uint32_t __attribute__((unused))tmp;      	/* Must be volatile to prevent optimizations */

		tmp = UARTHandle->Instance->SR;                 /* Read status register */
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <BLEUSART_IrqHandler+0x78>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]
		tmp = UARTHandle->Instance->DR;                 /* Read data register */
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <BLEUSART_IrqHandler+0x78>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	60fb      	str	r3, [r7, #12]
		__HAL_DMA_DISABLE (UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <BLEUSART_IrqHandler+0x7c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <BLEUSART_IrqHandler+0x7c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0201 	bic.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]

		__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);		// HABILITA idle line INTERRUPT
 800110c:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <BLEUSART_IrqHandler+0x78>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <BLEUSART_IrqHandler+0x78>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0210 	orr.w	r2, r2, #16
 800111e:	60da      	str	r2, [r3, #12]
		__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);		// HABILITA O DMA Tx cplt INTERRUPT
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <BLEUSART_IrqHandler+0x7c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <BLEUSART_IrqHandler+0x7c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0202 	orr.w	r2, r2, #2
 8001132:	601a      	str	r2, [r3, #0]

		BLEDMA_IrqHandler (ble);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f809 	bl	800114c <BLEDMA_IrqHandler>
	}
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000294 	.word	0x20000294
 8001148:	20000298 	.word	0x20000298

0800114c <BLEDMA_IrqHandler>:

void BLEDMA_IrqHandler (Bluetooth *ble)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if(__HAL_DMA_GET_IT_SOURCE(UARTDMAHandle, DMA_IT_TC) != RESET){   // if the source is TC
 8001154:	4b9a      	ldr	r3, [pc, #616]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b02      	cmp	r3, #2
 8001162:	f040 8164 	bne.w	800142e <BLEDMA_IrqHandler+0x2e2>

		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(UARTDMAHandle));
 8001166:	4b96      	ldr	r3, [pc, #600]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a95      	ldr	r2, [pc, #596]	; (80013c4 <BLEDMA_IrqHandler+0x278>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d02e      	beq.n	80011d0 <BLEDMA_IrqHandler+0x84>
 8001172:	4b93      	ldr	r3, [pc, #588]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a93      	ldr	r2, [pc, #588]	; (80013c8 <BLEDMA_IrqHandler+0x27c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d026      	beq.n	80011cc <BLEDMA_IrqHandler+0x80>
 800117e:	4b90      	ldr	r3, [pc, #576]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a91      	ldr	r2, [pc, #580]	; (80013cc <BLEDMA_IrqHandler+0x280>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d01d      	beq.n	80011c6 <BLEDMA_IrqHandler+0x7a>
 800118a:	4b8d      	ldr	r3, [pc, #564]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a8f      	ldr	r2, [pc, #572]	; (80013d0 <BLEDMA_IrqHandler+0x284>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d014      	beq.n	80011c0 <BLEDMA_IrqHandler+0x74>
 8001196:	4b8a      	ldr	r3, [pc, #552]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a8d      	ldr	r2, [pc, #564]	; (80013d4 <BLEDMA_IrqHandler+0x288>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00b      	beq.n	80011ba <BLEDMA_IrqHandler+0x6e>
 80011a2:	4b87      	ldr	r3, [pc, #540]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a8b      	ldr	r2, [pc, #556]	; (80013d8 <BLEDMA_IrqHandler+0x28c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d102      	bne.n	80011b4 <BLEDMA_IrqHandler+0x68>
 80011ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011b2:	e00e      	b.n	80011d2 <BLEDMA_IrqHandler+0x86>
 80011b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011b8:	e00b      	b.n	80011d2 <BLEDMA_IrqHandler+0x86>
 80011ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011be:	e008      	b.n	80011d2 <BLEDMA_IrqHandler+0x86>
 80011c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c4:	e005      	b.n	80011d2 <BLEDMA_IrqHandler+0x86>
 80011c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ca:	e002      	b.n	80011d2 <BLEDMA_IrqHandler+0x86>
 80011cc:	2320      	movs	r3, #32
 80011ce:	e000      	b.n	80011d2 <BLEDMA_IrqHandler+0x86>
 80011d0:	2302      	movs	r3, #2
 80011d2:	4a82      	ldr	r2, [pc, #520]	; (80013dc <BLEDMA_IrqHandler+0x290>)
 80011d4:	6053      	str	r3, [r2, #4]

		//calculo do tamanho da string recebida
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - UARTDMAHandle->Instance->CNDTR;
 80011d6:	4b7a      	ldr	r3, [pc, #488]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

		//verifica se nao caiu conexao
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f103 005a 	add.w	r0, r3, #90	; 0x5a
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3330      	adds	r3, #48	; 0x30
 80011f6:	461a      	mov	r2, r3
 80011f8:	4979      	ldr	r1, [pc, #484]	; (80013e0 <BLEDMA_IrqHandler+0x294>)
 80011fa:	f00a ff6b 	bl	800c0d4 <siprintf>

		//zera contador de mensagem, pois recebeu mensagem
		ble->msDesconectado = 0;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54


		//-------------------------MAQUINA CONEXAO--------------------------
		switch(ble->MaquinaConexao){
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800120c:	2b00      	cmp	r3, #0
 800120e:	d007      	beq.n	8001220 <BLEDMA_IrqHandler+0xd4>
 8001210:	2b00      	cmp	r3, #0
 8001212:	f2c0 80d2 	blt.w	80013ba <BLEDMA_IrqHandler+0x26e>
 8001216:	3b01      	subs	r3, #1
 8001218:	2b01      	cmp	r3, #1
 800121a:	f200 80ce 	bhi.w	80013ba <BLEDMA_IrqHandler+0x26e>
 800121e:	e0a1      	b.n	8001364 <BLEDMA_IrqHandler+0x218>
		case RX_DESCONECTADO:

			/*---   C O N E C T O U  ---*/
			ble->StatusSenha = false;//chave de validacao
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			ble->ss = NULL;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "OK+CONN");
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	335a      	adds	r3, #90	; 0x5a
 8001234:	496b      	ldr	r1, [pc, #428]	; (80013e4 <BLEDMA_IrqHandler+0x298>)
 8001236:	4618      	mov	r0, r3
 8001238:	f00a ff74 	bl	800c124 <strstr>
 800123c:	4602      	mov	r2, r0
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if ((ble->ss != NULL  && ble->RxSize == 7) || MACRO_LE_BT_STATUS){
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800124a:	2b00      	cmp	r3, #0
 800124c:	d004      	beq.n	8001258 <BLEDMA_IrqHandler+0x10c>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001254:	2b07      	cmp	r3, #7
 8001256:	d007      	beq.n	8001268 <BLEDMA_IrqHandler+0x11c>
 8001258:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800125c:	4862      	ldr	r0, [pc, #392]	; (80013e8 <BLEDMA_IrqHandler+0x29c>)
 800125e:	f004 fa9d 	bl	800579c <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <BLEDMA_IrqHandler+0x12c>
				ble->MaquinaConexao = RX_CONECTADO;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				ble->StatusConexao 	= true;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			}

			/*---   A D D R  ---*/
			ble->ss = NULL;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "OK+ADDR:");
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	335a      	adds	r3, #90	; 0x5a
 8001284:	4959      	ldr	r1, [pc, #356]	; (80013ec <BLEDMA_IrqHandler+0x2a0>)
 8001286:	4618      	mov	r0, r3
 8001288:	f00a ff4c 	bl	800c124 <strstr>
 800128c:	4602      	mov	r2, r0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if (ble->ss != NULL){
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 80b0 	beq.w	8001400 <BLEDMA_IrqHandler+0x2b4>
				ble->PontoExato = ble->ss - ble->StringRecebida;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	335a      	adds	r3, #90	; 0x5a
 80012aa:	1ad2      	subs	r2, r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	67da      	str	r2, [r3, #124]	; 0x7c
				for (int i = 0; i < 12; i++) {
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e010      	b.n	80012d8 <BLEDMA_IrqHandler+0x18c>
					addr8Bits[i] = ble->_RxDataArr[i+ble->PontoExato+8];
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	3308      	adds	r3, #8
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4413      	add	r3, r2
 80012c4:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80012c8:	4a49      	ldr	r2, [pc, #292]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	460a      	mov	r2, r1
 80012d0:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 12; i++) {
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3301      	adds	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b0b      	cmp	r3, #11
 80012dc:	ddeb      	ble.n	80012b6 <BLEDMA_IrqHandler+0x16a>
				}

				addr32Bits[0] = (addr8Bits[0]<<24)+(addr8Bits[1]<<16)+(addr8Bits[2]<<8)+(addr8Bits[3]);
 80012de:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	061a      	lsls	r2, r3, #24
 80012e4:	4b42      	ldr	r3, [pc, #264]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 80012e6:	785b      	ldrb	r3, [r3, #1]
 80012e8:	041b      	lsls	r3, r3, #16
 80012ea:	441a      	add	r2, r3
 80012ec:	4b40      	ldr	r3, [pc, #256]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	4413      	add	r3, r2
 80012f4:	4a3e      	ldr	r2, [pc, #248]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 80012f6:	78d2      	ldrb	r2, [r2, #3]
 80012f8:	4413      	add	r3, r2
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <BLEDMA_IrqHandler+0x2a8>)
 80012fe:	601a      	str	r2, [r3, #0]
				addr32Bits[1] = (addr8Bits[4]<<24)+(addr8Bits[5]<<16)+(addr8Bits[6]<<8)+(addr8Bits[7]);
 8001300:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 8001302:	791b      	ldrb	r3, [r3, #4]
 8001304:	061a      	lsls	r2, r3, #24
 8001306:	4b3a      	ldr	r3, [pc, #232]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 8001308:	795b      	ldrb	r3, [r3, #5]
 800130a:	041b      	lsls	r3, r3, #16
 800130c:	441a      	add	r2, r3
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 8001310:	799b      	ldrb	r3, [r3, #6]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	4413      	add	r3, r2
 8001316:	4a36      	ldr	r2, [pc, #216]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 8001318:	79d2      	ldrb	r2, [r2, #7]
 800131a:	4413      	add	r3, r2
 800131c:	461a      	mov	r2, r3
 800131e:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <BLEDMA_IrqHandler+0x2a8>)
 8001320:	605a      	str	r2, [r3, #4]
				addr32Bits[2] = (addr8Bits[8]<<24)+(addr8Bits[9]<<16)+(addr8Bits[10]<<8)+(addr8Bits[11]);
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 8001324:	7a1b      	ldrb	r3, [r3, #8]
 8001326:	061a      	lsls	r2, r3, #24
 8001328:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 800132a:	7a5b      	ldrb	r3, [r3, #9]
 800132c:	041b      	lsls	r3, r3, #16
 800132e:	441a      	add	r2, r3
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 8001332:	7a9b      	ldrb	r3, [r3, #10]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	4413      	add	r3, r2
 8001338:	4a2d      	ldr	r2, [pc, #180]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 800133a:	7ad2      	ldrb	r2, [r2, #11]
 800133c:	4413      	add	r3, r2
 800133e:	461a      	mov	r2, r3
 8001340:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <BLEDMA_IrqHandler+0x2a8>)
 8001342:	609a      	str	r2, [r3, #8]

				ble->chave = CRC16(addr8Bits,12);
 8001344:	210c      	movs	r1, #12
 8001346:	482a      	ldr	r0, [pc, #168]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 8001348:	f000 f914 	bl	8001574 <CRC16>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

				osSignalSet(TaskBluetoothHandle, CHEGOU_ADDR_BLE);
 8001356:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <BLEDMA_IrqHandler+0x2ac>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	21bf      	movs	r1, #191	; 0xbf
 800135c:	4618      	mov	r0, r3
 800135e:	f007 ff6b 	bl	8009238 <osSignalSet>
			}
			break;
 8001362:	e04d      	b.n	8001400 <BLEDMA_IrqHandler+0x2b4>
		case RX_VALIDADO:
		case RX_CONECTADO:
			/*---   D E S C O N E C T O U  ---*/
			ble->ss = NULL;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "LOST");
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	335a      	adds	r3, #90	; 0x5a
 8001370:	4922      	ldr	r1, [pc, #136]	; (80013fc <BLEDMA_IrqHandler+0x2b0>)
 8001372:	4618      	mov	r0, r3
 8001374:	f00a fed6 	bl	800c124 <strstr>
 8001378:	4602      	mov	r2, r0
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if (ble->ss != NULL || !MACRO_LE_BT_STATUS){
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001386:	2b00      	cmp	r3, #0
 8001388:	d107      	bne.n	800139a <BLEDMA_IrqHandler+0x24e>
 800138a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138e:	4816      	ldr	r0, [pc, #88]	; (80013e8 <BLEDMA_IrqHandler+0x29c>)
 8001390:	f004 fa04 	bl	800579c <HAL_GPIO_ReadPin>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10b      	bne.n	80013b2 <BLEDMA_IrqHandler+0x266>
				ble->StatusSenha 		= false;//chave de validacao
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				ble->StatusConexao 		= false;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			}


			BluetoothPutFila(ble);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fe0c 	bl	8000fd0 <BluetoothPutFila>

			break;
 80013b8:	e023      	b.n	8001402 <BLEDMA_IrqHandler+0x2b6>

		default:
			break;
 80013ba:	bf00      	nop
 80013bc:	e021      	b.n	8001402 <BLEDMA_IrqHandler+0x2b6>
 80013be:	bf00      	nop
 80013c0:	20000298 	.word	0x20000298
 80013c4:	40020008 	.word	0x40020008
 80013c8:	4002001c 	.word	0x4002001c
 80013cc:	40020030 	.word	0x40020030
 80013d0:	40020044 	.word	0x40020044
 80013d4:	40020058 	.word	0x40020058
 80013d8:	4002006c 	.word	0x4002006c
 80013dc:	40020000 	.word	0x40020000
 80013e0:	0800c9e0 	.word	0x0800c9e0
 80013e4:	0800c9e4 	.word	0x0800c9e4
 80013e8:	40010c00 	.word	0x40010c00
 80013ec:	0800c9ec 	.word	0x0800c9ec
 80013f0:	2000027c 	.word	0x2000027c
 80013f4:	20000288 	.word	0x20000288
 80013f8:	200009b0 	.word	0x200009b0
 80013fc:	0800c9f8 	.word	0x0800c9f8
			break;
 8001400:	bf00      	nop
		}
		/* Prepare DMA for next transfer */
		/* Important! DMA stream won't start if all flags are not cleared first */
		UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <BLEDMA_IrqHandler+0x2ec>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	60da      	str	r2, [r3, #12]
		UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <BLEDMA_IrqHandler+0x2ec>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2240      	movs	r2, #64	; 0x40
 8001418:	605a      	str	r2, [r3, #4]
		UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <BLEDMA_IrqHandler+0x2ec>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <BLEDMA_IrqHandler+0x2ec>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 0201 	orr.w	r2, r2, #1
 800142c:	601a      	str	r2, [r3, #0]
	}
}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000298 	.word	0x20000298

0800143c <BluetoothEnviaComando>:

void BluetoothEnviaComando(unsigned char _out[], int size)
{
 800143c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001440:	b087      	sub	sp, #28
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
 8001448:	466b      	mov	r3, sp
 800144a:	461e      	mov	r6, r3
	uint8_t	TX_Buffer		[size+3];
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	1cd9      	adds	r1, r3, #3
 8001450:	1e4b      	subs	r3, r1, #1
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	460a      	mov	r2, r1
 8001456:	2300      	movs	r3, #0
 8001458:	4690      	mov	r8, r2
 800145a:	4699      	mov	r9, r3
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001468:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800146c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001470:	460a      	mov	r2, r1
 8001472:	2300      	movs	r3, #0
 8001474:	4614      	mov	r4, r2
 8001476:	461d      	mov	r5, r3
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	00eb      	lsls	r3, r5, #3
 8001482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001486:	00e2      	lsls	r2, r4, #3
 8001488:	460b      	mov	r3, r1
 800148a:	3307      	adds	r3, #7
 800148c:	08db      	lsrs	r3, r3, #3
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	ebad 0d03 	sub.w	sp, sp, r3
 8001494:	466b      	mov	r3, sp
 8001496:	3300      	adds	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
	unsigned short CRCVar;

	//varredura para local
	for (int i = 0; i <= size; ++i) {
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	e00b      	b.n	80014b8 <BluetoothEnviaComando+0x7c>
		TX_Buffer[i]=_out[i];
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	7819      	ldrb	r1, [r3, #0]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	4413      	add	r3, r2
 80014ae:	460a      	mov	r2, r1
 80014b0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= size; ++i) {
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	ddef      	ble.n	80014a0 <BluetoothEnviaComando+0x64>
	}

	//calculo e atribuicao do crc
	CRCVar = CRC16(_out,size+1);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	3301      	adds	r3, #1
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4619      	mov	r1, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f852 	bl	8001574 <CRC16>
 80014d0:	4603      	mov	r3, r0
 80014d2:	817b      	strh	r3, [r7, #10]
	TX_Buffer[size+2] = (unsigned char) (CRCVar >> 8);
 80014d4:	897b      	ldrh	r3, [r7, #10]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b29a      	uxth	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3302      	adds	r3, #2
 80014de:	b2d1      	uxtb	r1, r2
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	54d1      	strb	r1, [r2, r3]
	TX_Buffer[size+1] = (unsigned char) (CRCVar & 0x00FF);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	897a      	ldrh	r2, [r7, #10]
 80014ea:	b2d1      	uxtb	r1, r2
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	54d1      	strb	r1, [r2, r3]

	Envia_bytes_UART((uint8_t *)TX_Buffer,size+3);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	3303      	adds	r3, #3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4619      	mov	r1, r3
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 f806 	bl	800150c <Envia_bytes_UART>
 8001500:	46b5      	mov	sp, r6
}
 8001502:	bf00      	nop
 8001504:	371c      	adds	r7, #28
 8001506:	46bd      	mov	sp, r7
 8001508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800150c <Envia_bytes_UART>:

void Envia_bytes_UART(unsigned char _out[], uint8_t size){
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(UARTHandle, (uint8_t *)_out, size,50);
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <Envia_bytes_UART+0x24>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	b29a      	uxth	r2, r3
 8001520:	2332      	movs	r3, #50	; 0x32
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f006 fc86 	bl	8007e34 <HAL_UART_Transmit>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000294 	.word	0x20000294

08001534 <Envia_texto_UART>:

void Envia_texto_UART(char _out[], uint16_t delay){
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(UARTHandle, (uint8_t *) _out, strlen(_out));
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <Envia_texto_UART+0x3c>)
 8001542:	681c      	ldr	r4, [r3, #0]
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7fe fe03 	bl	8000150 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	b29b      	uxth	r3, r3
 800154e:	461a      	mov	r2, r3
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4620      	mov	r0, r4
 8001554:	f006 fcf1 	bl	8007f3a <HAL_UART_Transmit_IT>
	if(delay != 0){
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <Envia_texto_UART+0x32>
		HAL_Delay(delay);
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	4618      	mov	r0, r3
 8001562:	f002 fee5 	bl	8004330 <HAL_Delay>
	}
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}
 800156e:	bf00      	nop
 8001570:	20000294 	.word	0x20000294

08001574 <CRC16>:

unsigned short CRC16 (unsigned char *puchMsg, unsigned short usDataLen)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
			0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
			0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
			0x40
	};

	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001580:	23ff      	movs	r3, #255	; 0xff
 8001582:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001584:	23ff      	movs	r3, #255	; 0xff
 8001586:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001588:	e013      	b.n	80015b2 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	7bbb      	ldrb	r3, [r7, #14]
 8001594:	4053      	eors	r3, r2
 8001596:	b2db      	uxtb	r3, r3
 8001598:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800159a:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <CRC16+0x64>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4413      	add	r3, r2
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	4053      	eors	r3, r2
 80015a6:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <CRC16+0x68>)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	1e5a      	subs	r2, r3, #1
 80015b6:	807a      	strh	r2, [r7, #2]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e6      	bne.n	800158a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	7bbb      	ldrb	r3, [r7, #14]
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	4313      	orrs	r3, r2
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	b29b      	uxth	r3, r3
}//---END---//
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000100 	.word	0x20000100

080015e0 <iniciaBleHm10>:
	__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
	HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE

}//---END---//

void iniciaBleHm10(Bluetooth* ble){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
		redefineBle=2,
		capturaAddr=3,
		final=4,
		erro=5,
	} sequenciaBle;
	sequenciaBle sequenciaBLE = inicio;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]


	while(sequenciaBLE!=final || sequenciaBLE!=erro){
 80015ec:	e1de      	b.n	80019ac <iniciaBleHm10+0x3cc>
		switch (sequenciaBLE) {
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	2b05      	cmp	r3, #5
 80015f2:	f200 81da 	bhi.w	80019aa <iniciaBleHm10+0x3ca>
 80015f6:	a201      	add	r2, pc, #4	; (adr r2, 80015fc <iniciaBleHm10+0x1c>)
 80015f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fc:	08001615 	.word	0x08001615
 8001600:	080016a3 	.word	0x080016a3
 8001604:	08001737 	.word	0x08001737
 8001608:	08001951 	.word	0x08001951
 800160c:	0800196d 	.word	0x0800196d
 8001610:	080019a7 	.word	0x080019a7
		case inicio:
			HAL_Delay(50);
 8001614:	2032      	movs	r0, #50	; 0x32
 8001616:	f002 fe8b 	bl	8004330 <HAL_Delay>
			SETUP_UART(115200)
 800161a:	4bb8      	ldr	r3, [pc, #736]	; (80018fc <iniciaBleHm10+0x31c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f006 fce6 	bl	8007ff0 <HAL_UART_Abort_IT>
 8001624:	4bb5      	ldr	r3, [pc, #724]	; (80018fc <iniciaBleHm10+0x31c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f006 fbd1 	bl	8007dd0 <HAL_UART_DeInit>
 800162e:	2032      	movs	r0, #50	; 0x32
 8001630:	f002 fe7e 	bl	8004330 <HAL_Delay>
 8001634:	4bb1      	ldr	r3, [pc, #708]	; (80018fc <iniciaBleHm10+0x31c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	4baf      	ldr	r3, [pc, #700]	; (80018fc <iniciaBleHm10+0x31c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f006 fb74 	bl	8007d30 <HAL_UART_Init>
 8001648:	2032      	movs	r0, #50	; 0x32
 800164a:	f002 fe71 	bl	8004330 <HAL_Delay>
			HAL_Delay(50);
 800164e:	2032      	movs	r0, #50	; 0x32
 8001650:	f002 fe6e 	bl	8004330 <HAL_Delay>
			Envia_texto_UART("AT",50);	//
 8001654:	2132      	movs	r1, #50	; 0x32
 8001656:	48aa      	ldr	r0, [pc, #680]	; (8001900 <iniciaBleHm10+0x320>)
 8001658:	f7ff ff6c 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT",50);	//
 800165c:	2132      	movs	r1, #50	; 0x32
 800165e:	48a8      	ldr	r0, [pc, #672]	; (8001900 <iniciaBleHm10+0x320>)
 8001660:	f7ff ff68 	bl	8001534 <Envia_texto_UART>

			/*---HABILITA INTERRUPÇÃO---*/
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);							// HABILITA idle line INTERRUPT
 8001664:	4ba5      	ldr	r3, [pc, #660]	; (80018fc <iniciaBleHm10+0x31c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	4ba3      	ldr	r3, [pc, #652]	; (80018fc <iniciaBleHm10+0x31c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0210 	orr.w	r2, r2, #16
 8001676:	60da      	str	r2, [r3, #12]
			__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);							// HABILITA O DMA Tx cplt INTERRUPT
 8001678:	4ba2      	ldr	r3, [pc, #648]	; (8001904 <iniciaBleHm10+0x324>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4ba0      	ldr	r3, [pc, #640]	; (8001904 <iniciaBleHm10+0x324>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0202 	orr.w	r2, r2, #2
 800168a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 800168c:	4b9b      	ldr	r3, [pc, #620]	; (80018fc <iniciaBleHm10+0x31c>)
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3330      	adds	r3, #48	; 0x30
 8001694:	2240      	movs	r2, #64	; 0x40
 8001696:	4619      	mov	r1, r3
 8001698:	f006 fc84 	bl	8007fa4 <HAL_UART_Receive_DMA>
			sequenciaBLE = verificaNome;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]

			continue;
 80016a0:	e184      	b.n	80019ac <iniciaBleHm10+0x3cc>
		case verificaNome:
			static uint8_t tryingName=0;
			const uint8_t max_attempts = 5;
 80016a2:	2305      	movs	r3, #5
 80016a4:	73bb      	strb	r3, [r7, #14]
			const uint32_t delay_between_attempts_ms = 1000;
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	60bb      	str	r3, [r7, #8]

			while (tryingName < max_attempts) {
 80016ac:	bf00      	nop
 80016ae:	4b96      	ldr	r3, [pc, #600]	; (8001908 <iniciaBleHm10+0x328>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	7bba      	ldrb	r2, [r7, #14]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d935      	bls.n	8001724 <iniciaBleHm10+0x144>
				Envia_texto_UART("AT+NAME?", 100);
 80016b8:	2164      	movs	r1, #100	; 0x64
 80016ba:	4894      	ldr	r0, [pc, #592]	; (800190c <iniciaBleHm10+0x32c>)
 80016bc:	f7ff ff3a 	bl	8001534 <Envia_texto_UART>

				HAL_Delay(delay_between_attempts_ms);
 80016c0:	68b8      	ldr	r0, [r7, #8]
 80016c2:	f002 fe35 	bl	8004330 <HAL_Delay>
				ble->ss = NULL;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				ble->ss = strstr(ble->StringRecebida, "NAME");
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	335a      	adds	r3, #90	; 0x5a
 80016d2:	498f      	ldr	r1, [pc, #572]	; (8001910 <iniciaBleHm10+0x330>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f00a fd25 	bl	800c124 <strstr>
 80016da:	4602      	mov	r2, r0
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				if (ble->ss != NULL){
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d014      	beq.n	8001716 <iniciaBleHm10+0x136>
					ble->ss = strstr(ble->StringRecebida, "Smartt");
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	335a      	adds	r3, #90	; 0x5a
 80016f0:	4988      	ldr	r1, [pc, #544]	; (8001914 <iniciaBleHm10+0x334>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00a fd16 	bl	800c124 <strstr>
 80016f8:	4602      	mov	r2, r0
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					if (ble->ss != NULL){
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <iniciaBleHm10+0x130>
						//			sequenciaBLE = capturaAddr;
						sequenciaBLE = final;
 800170a:	2304      	movs	r3, #4
 800170c:	73fb      	strb	r3, [r7, #15]
						break;
 800170e:	e009      	b.n	8001724 <iniciaBleHm10+0x144>
					} else {
						sequenciaBLE = redefineBle;
 8001710:	2302      	movs	r3, #2
 8001712:	73fb      	strb	r3, [r7, #15]
						break;
 8001714:	e006      	b.n	8001724 <iniciaBleHm10+0x144>
					}
				} else {
					tryingName++;
 8001716:	4b7c      	ldr	r3, [pc, #496]	; (8001908 <iniciaBleHm10+0x328>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b7a      	ldr	r3, [pc, #488]	; (8001908 <iniciaBleHm10+0x328>)
 8001720:	701a      	strb	r2, [r3, #0]
					break;
 8001722:	bf00      	nop
				}
			}

			if(tryingName >= max_attempts)
 8001724:	4b78      	ldr	r3, [pc, #480]	; (8001908 <iniciaBleHm10+0x328>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	7bba      	ldrb	r2, [r7, #14]
 800172a:	429a      	cmp	r2, r3
 800172c:	f200 813e 	bhi.w	80019ac <iniciaBleHm10+0x3cc>
				sequenciaBLE = redefineBle;//extrapolou as tentativas
 8001730:	2302      	movs	r3, #2
 8001732:	73fb      	strb	r3, [r7, #15]
			break;
 8001734:	e13a      	b.n	80019ac <iniciaBleHm10+0x3cc>
		case redefineBle:
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800173c:	4876      	ldr	r0, [pc, #472]	; (8001918 <iniciaBleHm10+0x338>)
 800173e:	f004 f844 	bl	80057ca <HAL_GPIO_WritePin>
 8001742:	20c8      	movs	r0, #200	; 0xc8
 8001744:	f002 fdf4 	bl	8004330 <HAL_Delay>
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800174e:	4872      	ldr	r0, [pc, #456]	; (8001918 <iniciaBleHm10+0x338>)
 8001750:	f004 f83b 	bl	80057ca <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8001754:	2064      	movs	r0, #100	; 0x64
 8001756:	f002 fdeb 	bl	8004330 <HAL_Delay>

			//seta em 115200
			SETUP_UART(115200)
 800175a:	4b68      	ldr	r3, [pc, #416]	; (80018fc <iniciaBleHm10+0x31c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f006 fc46 	bl	8007ff0 <HAL_UART_Abort_IT>
 8001764:	4b65      	ldr	r3, [pc, #404]	; (80018fc <iniciaBleHm10+0x31c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f006 fb31 	bl	8007dd0 <HAL_UART_DeInit>
 800176e:	2032      	movs	r0, #50	; 0x32
 8001770:	f002 fdde 	bl	8004330 <HAL_Delay>
 8001774:	4b61      	ldr	r3, [pc, #388]	; (80018fc <iniciaBleHm10+0x31c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <iniciaBleHm10+0x31c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f006 fad4 	bl	8007d30 <HAL_UART_Init>
 8001788:	2032      	movs	r0, #50	; 0x32
 800178a:	f002 fdd1 	bl	8004330 <HAL_Delay>
			Envia_texto_UART("AT",100);	//
 800178e:	2164      	movs	r1, #100	; 0x64
 8001790:	485b      	ldr	r0, [pc, #364]	; (8001900 <iniciaBleHm10+0x320>)
 8001792:	f7ff fecf 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 8001796:	2164      	movs	r1, #100	; 0x64
 8001798:	4859      	ldr	r0, [pc, #356]	; (8001900 <iniciaBleHm10+0x320>)
 800179a:	f7ff fecb 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 800179e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017a2:	485e      	ldr	r0, [pc, #376]	; (800191c <iniciaBleHm10+0x33c>)
 80017a4:	f7ff fec6 	bl	8001534 <Envia_texto_UART>
			//seta em 9600
			SETUP_UART(9600)
 80017a8:	4b54      	ldr	r3, [pc, #336]	; (80018fc <iniciaBleHm10+0x31c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f006 fc1f 	bl	8007ff0 <HAL_UART_Abort_IT>
 80017b2:	4b52      	ldr	r3, [pc, #328]	; (80018fc <iniciaBleHm10+0x31c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f006 fb0a 	bl	8007dd0 <HAL_UART_DeInit>
 80017bc:	2032      	movs	r0, #50	; 0x32
 80017be:	f002 fdb7 	bl	8004330 <HAL_Delay>
 80017c2:	4b4e      	ldr	r3, [pc, #312]	; (80018fc <iniciaBleHm10+0x31c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <iniciaBleHm10+0x31c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f006 faad 	bl	8007d30 <HAL_UART_Init>
 80017d6:	2032      	movs	r0, #50	; 0x32
 80017d8:	f002 fdaa 	bl	8004330 <HAL_Delay>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 80017dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017e0:	484e      	ldr	r0, [pc, #312]	; (800191c <iniciaBleHm10+0x33c>)
 80017e2:	f7ff fea7 	bl	8001534 <Envia_texto_UART>

			Envia_texto_UART("AT",100);	//
 80017e6:	2164      	movs	r1, #100	; 0x64
 80017e8:	4845      	ldr	r0, [pc, #276]	; (8001900 <iniciaBleHm10+0x320>)
 80017ea:	f7ff fea3 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 80017ee:	2164      	movs	r1, #100	; 0x64
 80017f0:	4843      	ldr	r0, [pc, #268]	; (8001900 <iniciaBleHm10+0x320>)
 80017f2:	f7ff fe9f 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+ADTY3",300);	//BLOQUEIA CONEXAO
 80017f6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80017fa:	4849      	ldr	r0, [pc, #292]	; (8001920 <iniciaBleHm10+0x340>)
 80017fc:	f7ff fe9a 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+BAUD4",300);	//COLOCA BAUD EM 115200
 8001800:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001804:	4847      	ldr	r0, [pc, #284]	; (8001924 <iniciaBleHm10+0x344>)
 8001806:	f7ff fe95 	bl	8001534 <Envia_texto_UART>

			//seta em 115200
			SETUP_UART(115200)
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <iniciaBleHm10+0x31c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f006 fbee 	bl	8007ff0 <HAL_UART_Abort_IT>
 8001814:	4b39      	ldr	r3, [pc, #228]	; (80018fc <iniciaBleHm10+0x31c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f006 fad9 	bl	8007dd0 <HAL_UART_DeInit>
 800181e:	2032      	movs	r0, #50	; 0x32
 8001820:	f002 fd86 	bl	8004330 <HAL_Delay>
 8001824:	4b35      	ldr	r3, [pc, #212]	; (80018fc <iniciaBleHm10+0x31c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	4b33      	ldr	r3, [pc, #204]	; (80018fc <iniciaBleHm10+0x31c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f006 fa7c 	bl	8007d30 <HAL_UART_Init>
 8001838:	2032      	movs	r0, #50	; 0x32
 800183a:	f002 fd79 	bl	8004330 <HAL_Delay>
			//	M_BLE_RESET
			MACRO_RESET_BLE
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001844:	4834      	ldr	r0, [pc, #208]	; (8001918 <iniciaBleHm10+0x338>)
 8001846:	f003 ffc0 	bl	80057ca <HAL_GPIO_WritePin>
 800184a:	20c8      	movs	r0, #200	; 0xc8
 800184c:	f002 fd70 	bl	8004330 <HAL_Delay>
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001856:	4830      	ldr	r0, [pc, #192]	; (8001918 <iniciaBleHm10+0x338>)
 8001858:	f003 ffb7 	bl	80057ca <HAL_GPIO_WritePin>

			//CONFIGURA CENTRAL
			Envia_texto_UART("AT",100);	//
 800185c:	2164      	movs	r1, #100	; 0x64
 800185e:	4828      	ldr	r0, [pc, #160]	; (8001900 <iniciaBleHm10+0x320>)
 8001860:	f7ff fe68 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 8001864:	2164      	movs	r1, #100	; 0x64
 8001866:	4826      	ldr	r0, [pc, #152]	; (8001900 <iniciaBleHm10+0x320>)
 8001868:	f7ff fe64 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+POWE3",300);	//POTENCIA MAXIMA
 800186c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001870:	482d      	ldr	r0, [pc, #180]	; (8001928 <iniciaBleHm10+0x348>)
 8001872:	f7ff fe5f 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+SHOW3",300);	//MOSTRA O NOME e rssi
 8001876:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800187a:	482c      	ldr	r0, [pc, #176]	; (800192c <iniciaBleHm10+0x34c>)
 800187c:	f7ff fe5a 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+GAIN1",300);	//INSERE GANHO
 8001880:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001884:	482a      	ldr	r0, [pc, #168]	; (8001930 <iniciaBleHm10+0x350>)
 8001886:	f7ff fe55 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+NOTI1",300);	//NOTIFICA QUE CONECTOU
 800188a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800188e:	4829      	ldr	r0, [pc, #164]	; (8001934 <iniciaBleHm10+0x354>)
 8001890:	f7ff fe50 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+PIO11",300);	//1 - CONECT = 1  \  DISC = 0
 8001894:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001898:	4827      	ldr	r0, [pc, #156]	; (8001938 <iniciaBleHm10+0x358>)
 800189a:	f7ff fe4b 	bl	8001534 <Envia_texto_UART>
			M_BLE_RESET
 800189e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80018a2:	4826      	ldr	r0, [pc, #152]	; (800193c <iniciaBleHm10+0x35c>)
 80018a4:	f7ff fe46 	bl	8001534 <Envia_texto_UART>

			Envia_texto_UART("AT+NAMESmartt",400);		//NOME
 80018a8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80018ac:	4824      	ldr	r0, [pc, #144]	; (8001940 <iniciaBleHm10+0x360>)
 80018ae:	f7ff fe41 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+ADTY0",300);				//DESBLOQUEIA CONEXA
 80018b2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80018b6:	4823      	ldr	r0, [pc, #140]	; (8001944 <iniciaBleHm10+0x364>)
 80018b8:	f7ff fe3c 	bl	8001534 <Envia_texto_UART>
			M_BLE_RESET
 80018bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80018c0:	481e      	ldr	r0, [pc, #120]	; (800193c <iniciaBleHm10+0x35c>)
 80018c2:	f7ff fe37 	bl	8001534 <Envia_texto_UART>
			//			sequenciaBLE = capturaAddr;
			sequenciaBLE = final;
 80018c6:	2304      	movs	r3, #4
 80018c8:	73fb      	strb	r3, [r7, #15]
			break;
 80018ca:	e06f      	b.n	80019ac <iniciaBleHm10+0x3cc>
		case capturaAddr:
			static uint8_t tryingAddr=0;

			while (tryingAddr < max_attempts) {

				Envia_texto_UART("AT+ADDR?",300);//pede addr
 80018cc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80018d0:	481d      	ldr	r0, [pc, #116]	; (8001948 <iniciaBleHm10+0x368>)
 80018d2:	f7ff fe2f 	bl	8001534 <Envia_texto_UART>
				HAL_Delay(delay_between_attempts_ms);
 80018d6:	68b8      	ldr	r0, [r7, #8]
 80018d8:	f002 fd2a 	bl	8004330 <HAL_Delay>

				if (ble->chave != 0){
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <iniciaBleHm10+0x30c>
					sequenciaBLE = final;
 80018e6:	2304      	movs	r3, #4
 80018e8:	73fb      	strb	r3, [r7, #15]
					break;
 80018ea:	e037      	b.n	800195c <iniciaBleHm10+0x37c>
				} else {
					tryingAddr++;
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <iniciaBleHm10+0x36c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <iniciaBleHm10+0x36c>)
 80018f6:	701a      	strb	r2, [r3, #0]
					break;
 80018f8:	e030      	b.n	800195c <iniciaBleHm10+0x37c>
 80018fa:	bf00      	nop
 80018fc:	20000294 	.word	0x20000294
 8001900:	0800ca00 	.word	0x0800ca00
 8001904:	20000298 	.word	0x20000298
 8001908:	2000029e 	.word	0x2000029e
 800190c:	0800ca04 	.word	0x0800ca04
 8001910:	0800ca10 	.word	0x0800ca10
 8001914:	0800cab0 	.word	0x0800cab0
 8001918:	40010c00 	.word	0x40010c00
 800191c:	0800ca24 	.word	0x0800ca24
 8001920:	0800ca30 	.word	0x0800ca30
 8001924:	0800ca3c 	.word	0x0800ca3c
 8001928:	0800ca48 	.word	0x0800ca48
 800192c:	0800ca54 	.word	0x0800ca54
 8001930:	0800ca60 	.word	0x0800ca60
 8001934:	0800ca6c 	.word	0x0800ca6c
 8001938:	0800ca78 	.word	0x0800ca78
 800193c:	0800ca84 	.word	0x0800ca84
 8001940:	0800cab8 	.word	0x0800cab8
 8001944:	0800caa4 	.word	0x0800caa4
 8001948:	0800cac8 	.word	0x0800cac8
 800194c:	2000029f 	.word	0x2000029f
			while (tryingAddr < max_attempts) {
 8001950:	bf00      	nop
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <iniciaBleHm10+0x3e4>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	7bba      	ldrb	r2, [r7, #14]
 8001958:	429a      	cmp	r2, r3
 800195a:	d8b7      	bhi.n	80018cc <iniciaBleHm10+0x2ec>
				}
			}

			if(tryingAddr >= max_attempts)
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <iniciaBleHm10+0x3e4>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	7bba      	ldrb	r2, [r7, #14]
 8001962:	429a      	cmp	r2, r3
 8001964:	d822      	bhi.n	80019ac <iniciaBleHm10+0x3cc>
				sequenciaBLE = erro;//extrapolou as tentativas
 8001966:	2305      	movs	r3, #5
 8001968:	73fb      	strb	r3, [r7, #15]

			break;
 800196a:	e01f      	b.n	80019ac <iniciaBleHm10+0x3cc>
		case final:
			/*---HABILITA INTERRUPÇÃO---*/
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <iniciaBleHm10+0x3e8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <iniciaBleHm10+0x3e8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0210 	orr.w	r2, r2, #16
 800197e:	60da      	str	r2, [r3, #12]
			__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <iniciaBleHm10+0x3ec>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <iniciaBleHm10+0x3ec>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0202 	orr.w	r2, r2, #2
 8001992:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <iniciaBleHm10+0x3e8>)
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3330      	adds	r3, #48	; 0x30
 800199c:	2240      	movs	r2, #64	; 0x40
 800199e:	4619      	mov	r1, r3
 80019a0:	f006 fb00 	bl	8007fa4 <HAL_UART_Receive_DMA>
			return;
 80019a4:	e00a      	b.n	80019bc <iniciaBleHm10+0x3dc>
			break;
		case erro:
			//			sequenciaBLE = final;
			__NOP();
 80019a6:	bf00      	nop
			break;
 80019a8:	e000      	b.n	80019ac <iniciaBleHm10+0x3cc>
		default:
			break;
 80019aa:	bf00      	nop
	while(sequenciaBLE!=final || sequenciaBLE!=erro){
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	f47f ae1d 	bne.w	80015ee <iniciaBleHm10+0xe>
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b05      	cmp	r3, #5
 80019b8:	f47f ae19 	bne.w	80015ee <iniciaBleHm10+0xe>
		}
	}
}
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000029f 	.word	0x2000029f
 80019c8:	20000294 	.word	0x20000294
 80019cc:	20000298 	.word	0x20000298

080019d0 <BluetoothErroCRC>:

void BluetoothErroCRC(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
	unsigned char	TXCRC[3];
	TXCRC[0] = 0x01;\
 80019d6:	2301      	movs	r3, #1
 80019d8:	713b      	strb	r3, [r7, #4]
	TXCRC[1] = 0xEE;\
 80019da:	23ee      	movs	r3, #238	; 0xee
 80019dc:	717b      	strb	r3, [r7, #5]
	TXCRC[2] = 0xEE;\
 80019de:	23ee      	movs	r3, #238	; 0xee
 80019e0:	71bb      	strb	r3, [r7, #6]
	Envia_bytes_UART(TXCRC,3);
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2103      	movs	r1, #3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fd90 	bl	800150c <Envia_bytes_UART>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <EepromInit>:

#endif /* SRC_EEPROM_H_ */


uint8_t EepromInit(Eeprom *eeprom, I2C_HandleTypeDef *i2c, osMessageQId *fila)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
	//Pass the used I2C handle to the struct
	eeprom->i2cHandle = i2c;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	601a      	str	r2, [r3, #0]

	//Pass the used queue to the struct
	eeprom->filaComandos = fila;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	605a      	str	r2, [r3, #4]

	//Start the component count variable from zero
	eeprom->_EepromVarCount  = 0;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

	//Return OK
	return 0;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <EepromAddVar>:
	}
}

//variaveis de eeprom que serao manipuladas
uint8_t EepromAddVar(Eeprom *eeprom, EepromVariaveis* _eepromvar, char* objectname,uint8_t __addreeprom,TypeTamData tamanho,uint32_t minimo,uint32_t padrao,uint32_t maximo, uint32_t *addrVar)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_eepromvar->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7fe fb8e 	bl	8000150 <strlen>
 8001a34:	4603      	mov	r3, r0
 8001a36:	3301      	adds	r3, #1
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f00a fa97 	bl	800bf6c <malloc>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	615a      	str	r2, [r3, #20]

	//Pass the object name to the struct
	strcpy(_eepromvar->objname, objectname);
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00a fc11 	bl	800c274 <strcpy>

	//Pass the corresponding data from component to component struct
	_eepromvar->_addrEprom = __addreeprom;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	801a      	strh	r2, [r3, #0]

	//definindo minimos maximos e default
	_eepromvar->minValue 		= minimo;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	60da      	str	r2, [r3, #12]
	_eepromvar->defaultValue 	= padrao;
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	6a3a      	ldr	r2, [r7, #32]
 8001a64:	609a      	str	r2, [r3, #8]
	_eepromvar->maxValue 		= maximo;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6a:	611a      	str	r2, [r3, #16]

	//passando o tamnho da variavel
	_eepromvar->_sizeType = tamanho;
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	7e3a      	ldrb	r2, [r7, #24]
 8001a70:	761a      	strb	r2, [r3, #24]

	//Add the component struct to the list on the Nextion Struct
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _eepromvar;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3202      	adds	r2, #2
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	eeprom->_EepromVarCount++;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc


	if(!addrVar)
 8001a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <EepromAddVar+0x7e>
		return 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e016      	b.n	8001acc <EepromAddVar+0xac>
	switch (tamanho) {
 8001a9e:	7e3b      	ldrb	r3, [r7, #24]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d00e      	beq.n	8001ac2 <EepromAddVar+0xa2>
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	dc10      	bgt.n	8001aca <EepromAddVar+0xaa>
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d002      	beq.n	8001ab2 <EepromAddVar+0x92>
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d004      	beq.n	8001aba <EepromAddVar+0x9a>
 8001ab0:	e00b      	b.n	8001aca <EepromAddVar+0xaa>
	case DATA8BITS:
		_eepromvar->ptr8=(uint8_t *)addrVar;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ab6:	61da      	str	r2, [r3, #28]
		break;
 8001ab8:	e007      	b.n	8001aca <EepromAddVar+0xaa>
	case DATA16BITS:
		_eepromvar->ptr16=(uint16_t *)addrVar;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001abe:	621a      	str	r2, [r3, #32]
		break;
 8001ac0:	e003      	b.n	8001aca <EepromAddVar+0xaa>
	case DATA32BITS:
		_eepromvar->ptr32=(uint32_t *)addrVar;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8001ac8:	bf00      	nop
	}
	return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <EepromSetVar>:

bool EepromSetVar(Eeprom *eeprom, EepromVariaveis *eepromvar, uint32_t valor)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	; 0x30
 8001ad8:	af04      	add	r7, sp, #16
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef result;
	uint8_t buffer0[1];
	uint8_t buffer1[2];
	uint8_t buffer2[4];
	//envio para memoria pagina 1
	LIBERA_EEPROM
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	4896      	ldr	r0, [pc, #600]	; (8001d40 <EepromSetVar+0x26c>)
 8001ae6:	f003 fe70 	bl	80057ca <HAL_GPIO_WritePin>
 8001aea:	2005      	movs	r0, #5
 8001aec:	f002 fc20 	bl	8004330 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,30,HAL_MAX_DELAY);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
 8001af8:	221e      	movs	r2, #30
 8001afa:	21a2      	movs	r1, #162	; 0xa2
 8001afc:	f004 f8bc 	bl	8005c78 <HAL_I2C_IsDeviceReady>
 8001b00:	4603      	mov	r3, r0
 8001b02:	77fb      	strb	r3, [r7, #31]
	if (result==HAL_OK)
 8001b04:	7ffb      	ldrb	r3, [r7, #31]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 810d 	bne.w	8001d26 <EepromSetVar+0x252>
	{
		if(valor!=0){ //valor recebido
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d07e      	beq.n	8001c10 <EepromSetVar+0x13c>
			switch (eepromvar->_sizeType) {
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	7e1b      	ldrb	r3, [r3, #24]
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d04f      	beq.n	8001bba <EepromSetVar+0xe6>
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	f300 8103 	bgt.w	8001d26 <EepromSetVar+0x252>
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d002      	beq.n	8001b2a <EepromSetVar+0x56>
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d022      	beq.n	8001b6e <EepromSetVar+0x9a>
 8001b28:	e0fd      	b.n	8001d26 <EepromSetVar+0x252>
			case DATA8BITS:
				eepromvar->valor = (uint8_t)valor;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	605a      	str	r2, [r3, #4]
				buffer0[0] = (uint8_t)valor;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	773b      	strb	r3, [r7, #28]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	881a      	ldrh	r2, [r3, #0]
 8001b42:	23c8      	movs	r3, #200	; 0xc8
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	2301      	movs	r3, #1
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2310      	movs	r3, #16
 8001b52:	21a2      	movs	r1, #162	; 0xa2
 8001b54:	f003 ff96 	bl	8005a84 <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr8)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80d7 	beq.w	8001d10 <EepromSetVar+0x23c>
					break;
				*eepromvar->ptr8 = (uint8_t)valor;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	701a      	strb	r2, [r3, #0]

				break;
 8001b6c:	e0db      	b.n	8001d26 <EepromSetVar+0x252>
			case DATA16BITS:
				eepromvar->valor = (uint16_t)valor;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	605a      	str	r2, [r3, #4]
				buffer1[0] = (uint8_t)(valor >> 8);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	763b      	strb	r3, [r7, #24]
				buffer1[1] = (uint8_t)(valor & 0xFF);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	767b      	strb	r3, [r7, #25]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer1, 2, 200);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	881a      	ldrh	r2, [r3, #0]
 8001b8e:	23c8      	movs	r3, #200	; 0xc8
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	2302      	movs	r3, #2
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	f107 0318 	add.w	r3, r7, #24
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	21a2      	movs	r1, #162	; 0xa2
 8001ba0:	f003 ff70 	bl	8005a84 <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr16)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80b3 	beq.w	8001d14 <EepromSetVar+0x240>
					break;
				*eepromvar->ptr16 = (uint16_t)valor;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	b292      	uxth	r2, r2
 8001bb6:	801a      	strh	r2, [r3, #0]
				break;
 8001bb8:	e0b5      	b.n	8001d26 <EepromSetVar+0x252>
			case DATA32BITS:
				eepromvar->valor = (uint32_t)valor;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	605a      	str	r2, [r3, #4]
				buffer2[0] = (uint8_t)(valor >> 24);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	0e1b      	lsrs	r3, r3, #24
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	753b      	strb	r3, [r7, #20]
				buffer2[1] = (uint8_t)(valor >> 16);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	0c1b      	lsrs	r3, r3, #16
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	757b      	strb	r3, [r7, #21]
				buffer2[2] = (uint8_t)(valor >> 8);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	75bb      	strb	r3, [r7, #22]
				buffer2[3] = (uint8_t)(valor & 0xFF);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	75fb      	strb	r3, [r7, #23]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	881a      	ldrh	r2, [r3, #0]
 8001be6:	23c8      	movs	r3, #200	; 0xc8
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	2304      	movs	r3, #4
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2310      	movs	r3, #16
 8001bf6:	21a2      	movs	r1, #162	; 0xa2
 8001bf8:	f003 ff44 	bl	8005a84 <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr32)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 8089 	beq.w	8001d18 <EepromSetVar+0x244>
					break;
				*eepromvar->ptr32 = (uint32_t)valor;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	601a      	str	r2, [r3, #0]
				break;
 8001c0e:	e08a      	b.n	8001d26 <EepromSetVar+0x252>
			}
		}else{ //usar valor da var local
			switch (eepromvar->_sizeType) {
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	7e1b      	ldrb	r3, [r3, #24]
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d04b      	beq.n	8001cb0 <EepromSetVar+0x1dc>
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	f300 8084 	bgt.w	8001d26 <EepromSetVar+0x252>
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d002      	beq.n	8001c28 <EepromSetVar+0x154>
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d01e      	beq.n	8001c64 <EepromSetVar+0x190>
 8001c26:	e07e      	b.n	8001d26 <EepromSetVar+0x252>
			case DATA8BITS:
				if(!eepromvar->ptr8)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d075      	beq.n	8001d1c <EepromSetVar+0x248>
					break;
				eepromvar->valor = *eepromvar->ptr8;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	605a      	str	r2, [r3, #4]
				buffer0[0] = *eepromvar->ptr8;
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	773b      	strb	r3, [r7, #28]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	881a      	ldrh	r2, [r3, #0]
 8001c4c:	23c8      	movs	r3, #200	; 0xc8
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	2301      	movs	r3, #1
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	21a2      	movs	r1, #162	; 0xa2
 8001c5e:	f003 ff11 	bl	8005a84 <HAL_I2C_Mem_Write>

				break;
 8001c62:	e060      	b.n	8001d26 <EepromSetVar+0x252>
			case DATA16BITS:
				if(!eepromvar->ptr16)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d059      	beq.n	8001d20 <EepromSetVar+0x24c>
					break;
				eepromvar->valor = *eepromvar->ptr16;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	605a      	str	r2, [r3, #4]
				buffer1[0] = (uint8_t)(*eepromvar->ptr16 >> 8);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	763b      	strb	r3, [r7, #24]
				buffer1[1] = (uint8_t)(*eepromvar->ptr16 & 0xFF);
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	767b      	strb	r3, [r7, #25]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer1, 2, 200);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	881a      	ldrh	r2, [r3, #0]
 8001c98:	23c8      	movs	r3, #200	; 0xc8
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2310      	movs	r3, #16
 8001ca8:	21a2      	movs	r1, #162	; 0xa2
 8001caa:	f003 feeb 	bl	8005a84 <HAL_I2C_Mem_Write>
				break;
 8001cae:	e03a      	b.n	8001d26 <EepromSetVar+0x252>
			case DATA32BITS:
				if(!eepromvar->ptr32)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d035      	beq.n	8001d24 <EepromSetVar+0x250>
					break;
				eepromvar->valor = *eepromvar->ptr32;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	605a      	str	r2, [r3, #4]
				buffer2[0] = (uint8_t)(*eepromvar->ptr32 >> 24);
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0e1b      	lsrs	r3, r3, #24
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	753b      	strb	r3, [r7, #20]
				buffer2[1] = (uint8_t)(*eepromvar->ptr32 >> 16);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0c1b      	lsrs	r3, r3, #16
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	757b      	strb	r3, [r7, #21]
				buffer2[2] = (uint8_t)(*eepromvar->ptr32 >> 8);
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	75bb      	strb	r3, [r7, #22]
				buffer2[3] = (uint8_t)(*eepromvar->ptr32 & 0xFF);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	75fb      	strb	r3, [r7, #23]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	881a      	ldrh	r2, [r3, #0]
 8001cf8:	23c8      	movs	r3, #200	; 0xc8
 8001cfa:	9302      	str	r3, [sp, #8]
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2310      	movs	r3, #16
 8001d08:	21a2      	movs	r1, #162	; 0xa2
 8001d0a:	f003 febb 	bl	8005a84 <HAL_I2C_Mem_Write>
				break;
 8001d0e:	e00a      	b.n	8001d26 <EepromSetVar+0x252>
					break;
 8001d10:	bf00      	nop
 8001d12:	e008      	b.n	8001d26 <EepromSetVar+0x252>
					break;
 8001d14:	bf00      	nop
 8001d16:	e006      	b.n	8001d26 <EepromSetVar+0x252>
					break;
 8001d18:	bf00      	nop
 8001d1a:	e004      	b.n	8001d26 <EepromSetVar+0x252>
					break;
 8001d1c:	bf00      	nop
 8001d1e:	e002      	b.n	8001d26 <EepromSetVar+0x252>
					break;
 8001d20:	bf00      	nop
 8001d22:	e000      	b.n	8001d26 <EepromSetVar+0x252>
					break;
 8001d24:	bf00      	nop
	//			break;
	//		}
	//	}
	//
	//	return result;
	TRAVA_EEPROM
 8001d26:	2005      	movs	r0, #5
 8001d28:	f002 fb02 	bl	8004330 <HAL_Delay>
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2180      	movs	r1, #128	; 0x80
 8001d30:	4803      	ldr	r0, [pc, #12]	; (8001d40 <EepromSetVar+0x26c>)
 8001d32:	f003 fd4a 	bl	80057ca <HAL_GPIO_WritePin>
	return 1;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40010c00 	.word	0x40010c00

08001d44 <RestauraPadraoTudo>:
		HAL_Delay(10);
	}
}

void RestauraPadraoTudo(Eeprom *eeprom)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	//redefine para default
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	e014      	b.n	8001d7c <RestauraPadraoTudo+0x38>
		EepromSetVar(eeprom, eeprom->_EepromVarArr[i], eeprom->_EepromVarArr[i]->defaultValue);
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3202      	adds	r2, #2
 8001d58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3202      	adds	r2, #2
 8001d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff feb2 	bl	8001ad4 <EepromSetVar>
		HAL_Delay(10);
 8001d70:	200a      	movs	r0, #10
 8001d72:	f002 fadd 	bl	8004330 <HAL_Delay>
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d3e4      	bcc.n	8001d52 <RestauraPadraoTudo+0xe>
	}
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4a06      	ldr	r2, [pc, #24]	; (8001dbc <vApplicationGetIdleTaskMemory+0x28>)
 8001da4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001daa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2280      	movs	r2, #128	; 0x80
 8001db0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	200004a0 	.word	0x200004a0
 8001dc0:	20000540 	.word	0x20000540

08001dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc4:	b5b0      	push	{r4, r5, r7, lr}
 8001dc6:	b0b6      	sub	sp, #216	; 0xd8
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dca:	f002 fa7f 	bl	80042cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dce:	f000 f8f3 	bl	8001fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd2:	f000 fb53 	bl	800247c <MX_GPIO_Init>
  MX_DMA_Init();
 8001dd6:	f000 fb23 	bl	8002420 <MX_DMA_Init>
  MX_ADC1_Init();
 8001dda:	f000 f943 	bl	8002064 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001dde:	f000 f98f 	bl	8002100 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001de2:	f000 fa31 	bl	8002248 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001de6:	f000 f9b9 	bl	800215c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001dea:	f000 fac5 	bl	8002378 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001dee:	f000 faed 	bl	80023cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 2);// ADC_DMA
 8001df2:	2202      	movs	r2, #2
 8001df4:	495b      	ldr	r1, [pc, #364]	; (8001f64 <main+0x1a0>)
 8001df6:	485c      	ldr	r0, [pc, #368]	; (8001f68 <main+0x1a4>)
 8001df8:	f002 fb96 	bl	8004528 <HAL_ADC_Start_DMA>

  	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_3);
 8001dfc:	2108      	movs	r1, #8
 8001dfe:	485b      	ldr	r0, [pc, #364]	; (8001f6c <main+0x1a8>)
 8001e00:	f005 f8c6 	bl	8006f90 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_4);
 8001e04:	210c      	movs	r1, #12
 8001e06:	4859      	ldr	r0, [pc, #356]	; (8001f6c <main+0x1a8>)
 8001e08:	f005 f8c2 	bl	8006f90 <HAL_TIM_PWM_Start>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSemUartTx */
  osSemaphoreDef(BinSemUartTx);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8001e18:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f007 fa96 	bl	8009350 <osSemaphoreCreate>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a52      	ldr	r2, [pc, #328]	; (8001f70 <main+0x1ac>)
 8001e28:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of FilaComando */
  osMessageQDef(FilaComando, 10, uint16_t);
 8001e2a:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <main+0x1b0>)
 8001e2c:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8001e30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaComandoHandle = osMessageCreate(osMessageQ(FilaComando), NULL);
 8001e36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f007 fab9 	bl	80093b4 <osMessageCreate>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4a4c      	ldr	r2, [pc, #304]	; (8001f78 <main+0x1b4>)
 8001e46:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaTXBluetooth */
  osMessageQDef(FilaTXBluetooth, 16, uint32_t);
 8001e48:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <main+0x1b8>)
 8001e4a:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8001e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaTXBluetoothHandle = osMessageCreate(osMessageQ(FilaTXBluetooth), NULL);
 8001e54:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f007 faaa 	bl	80093b4 <osMessageCreate>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4a47      	ldr	r2, [pc, #284]	; (8001f80 <main+0x1bc>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaRXBluetooth */
  osMessageQDef(FilaRXBluetooth, 10, uint8_t);
 8001e66:	4b47      	ldr	r3, [pc, #284]	; (8001f84 <main+0x1c0>)
 8001e68:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001e6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaRXBluetoothHandle = osMessageCreate(osMessageQ(FilaRXBluetooth), NULL);
 8001e72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f007 fa9b 	bl	80093b4 <osMessageCreate>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a41      	ldr	r2, [pc, #260]	; (8001f88 <main+0x1c4>)
 8001e82:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaEeprom */
  osMessageQDef(FilaEeprom, 10, uint16_t);
 8001e84:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <main+0x1b0>)
 8001e86:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8001e90:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f007 fa8c 	bl	80093b4 <osMessageCreate>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4a3b      	ldr	r2, [pc, #236]	; (8001f8c <main+0x1c8>)
 8001ea0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskBluetooth */
  osThreadDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 128);
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <main+0x1cc>)
 8001ea4:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001ea8:	461d      	mov	r5, r3
 8001eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001eb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 8001eb6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f007 f95a 	bl	8009176 <osThreadCreate>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4a33      	ldr	r2, [pc, #204]	; (8001f94 <main+0x1d0>)
 8001ec6:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTemperatura */
  osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 8001ec8:	4b33      	ldr	r3, [pc, #204]	; (8001f98 <main+0x1d4>)
 8001eca:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001ece:	461d      	mov	r5, r3
 8001ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ed4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ed8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8001edc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f007 f947 	bl	8009176 <osThreadCreate>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4a2c      	ldr	r2, [pc, #176]	; (8001f9c <main+0x1d8>)
 8001eec:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskBuzzer */
  osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8001eee:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <main+0x1dc>)
 8001ef0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001efa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001efe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8001f02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f007 f934 	bl	8009176 <osThreadCreate>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <main+0x1e0>)
 8001f12:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTimer */
  osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8001f14:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <main+0x1e4>)
 8001f16:	f107 0420 	add.w	r4, r7, #32
 8001f1a:	461d      	mov	r5, r3
 8001f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8001f28:	f107 0320 	add.w	r3, r7, #32
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f007 f921 	bl	8009176 <osThreadCreate>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <main+0x1e8>)
 8001f38:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskEeprom */
  osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <main+0x1ec>)
 8001f3c:	1d3c      	adds	r4, r7, #4
 8001f3e:	461d      	mov	r5, r3
 8001f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskEepromHandle = osThreadCreate(osThread(TaskEeprom), NULL);
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f007 f910 	bl	8009176 <osThreadCreate>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4a16      	ldr	r2, [pc, #88]	; (8001fb4 <main+0x1f0>)
 8001f5a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001f5c:	f007 f904 	bl	8009168 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <main+0x19c>
 8001f62:	bf00      	nop
 8001f64:	20001058 	.word	0x20001058
 8001f68:	20000740 	.word	0x20000740
 8001f6c:	20000850 	.word	0x20000850
 8001f70:	20000f14 	.word	0x20000f14
 8001f74:	0800cad4 	.word	0x0800cad4
 8001f78:	20000f04 	.word	0x20000f04
 8001f7c:	0800cae4 	.word	0x0800cae4
 8001f80:	20000f08 	.word	0x20000f08
 8001f84:	0800caf4 	.word	0x0800caf4
 8001f88:	20000f0c 	.word	0x20000f0c
 8001f8c:	20000f10 	.word	0x20000f10
 8001f90:	0800cb14 	.word	0x0800cb14
 8001f94:	200009b0 	.word	0x200009b0
 8001f98:	0800cb40 	.word	0x0800cb40
 8001f9c:	200009b4 	.word	0x200009b4
 8001fa0:	0800cb68 	.word	0x0800cb68
 8001fa4:	200009b8 	.word	0x200009b8
 8001fa8:	0800cb90 	.word	0x0800cb90
 8001fac:	20000c5c 	.word	0x20000c5c
 8001fb0:	0800cbb8 	.word	0x0800cbb8
 8001fb4:	20000f00 	.word	0x20000f00

08001fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b094      	sub	sp, #80	; 0x50
 8001fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fc2:	2228      	movs	r2, #40	; 0x28
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f00a f8a4 	bl	800c114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fec:	2301      	movs	r3, #1
 8001fee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff0:	2310      	movs	r3, #16
 8001ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ffc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002000:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002006:	4618      	mov	r0, r3
 8002008:	f004 f9d2 	bl	80063b0 <HAL_RCC_OscConfig>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002012:	f000 fb4f 	bl	80026b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002016:	230f      	movs	r3, #15
 8002018:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800201a:	2302      	movs	r3, #2
 800201c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	2101      	movs	r1, #1
 8002030:	4618      	mov	r0, r3
 8002032:	f004 fc3f 	bl	80068b4 <HAL_RCC_ClockConfig>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800203c:	f000 fb3a 	bl	80026b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002040:	2302      	movs	r3, #2
 8002042:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8002044:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002048:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	4618      	mov	r0, r3
 800204e:	f004 fdef 	bl	8006c30 <HAL_RCCEx_PeriphCLKConfig>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002058:	f000 fb2c 	bl	80026b4 <Error_Handler>
  }
}
 800205c:	bf00      	nop
 800205e:	3750      	adds	r7, #80	; 0x50
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <MX_ADC1_Init+0x94>)
 8002076:	4a21      	ldr	r2, [pc, #132]	; (80020fc <MX_ADC1_Init+0x98>)
 8002078:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <MX_ADC1_Init+0x94>)
 800207c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002080:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <MX_ADC1_Init+0x94>)
 8002084:	2201      	movs	r2, #1
 8002086:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <MX_ADC1_Init+0x94>)
 800208a:	2200      	movs	r2, #0
 800208c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <MX_ADC1_Init+0x94>)
 8002090:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002094:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <MX_ADC1_Init+0x94>)
 8002098:	2200      	movs	r2, #0
 800209a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <MX_ADC1_Init+0x94>)
 800209e:	2202      	movs	r2, #2
 80020a0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020a2:	4815      	ldr	r0, [pc, #84]	; (80020f8 <MX_ADC1_Init+0x94>)
 80020a4:	f002 f968 	bl	8004378 <HAL_ADC_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80020ae:	f000 fb01 	bl	80026b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020b6:	2301      	movs	r3, #1
 80020b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80020ba:	2307      	movs	r3, #7
 80020bc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	480d      	ldr	r0, [pc, #52]	; (80020f8 <MX_ADC1_Init+0x94>)
 80020c4:	f002 fb20 	bl	8004708 <HAL_ADC_ConfigChannel>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80020ce:	f000 faf1 	bl	80026b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020d2:	2301      	movs	r3, #1
 80020d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020d6:	2302      	movs	r3, #2
 80020d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	4806      	ldr	r0, [pc, #24]	; (80020f8 <MX_ADC1_Init+0x94>)
 80020e0:	f002 fb12 	bl	8004708 <HAL_ADC_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80020ea:	f000 fae3 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000740 	.word	0x20000740
 80020fc:	40012400 	.word	0x40012400

08002100 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <MX_I2C1_Init+0x50>)
 8002106:	4a13      	ldr	r2, [pc, #76]	; (8002154 <MX_I2C1_Init+0x54>)
 8002108:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <MX_I2C1_Init+0x50>)
 800210c:	4a12      	ldr	r2, [pc, #72]	; (8002158 <MX_I2C1_Init+0x58>)
 800210e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <MX_I2C1_Init+0x50>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <MX_I2C1_Init+0x50>)
 8002118:	2200      	movs	r2, #0
 800211a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <MX_I2C1_Init+0x50>)
 800211e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002122:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <MX_I2C1_Init+0x50>)
 8002126:	2200      	movs	r2, #0
 8002128:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <MX_I2C1_Init+0x50>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <MX_I2C1_Init+0x50>)
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <MX_I2C1_Init+0x50>)
 8002138:	2200      	movs	r2, #0
 800213a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800213c:	4804      	ldr	r0, [pc, #16]	; (8002150 <MX_I2C1_Init+0x50>)
 800213e:	f003 fb5d 	bl	80057fc <HAL_I2C_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002148:	f000 fab4 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	200007b4 	.word	0x200007b4
 8002154:	40005400 	.word	0x40005400
 8002158:	000186a0 	.word	0x000186a0

0800215c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08e      	sub	sp, #56	; 0x38
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002170:	f107 0320 	add.w	r3, r7, #32
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
 8002188:	615a      	str	r2, [r3, #20]
 800218a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800218c:	4b2d      	ldr	r3, [pc, #180]	; (8002244 <MX_TIM2_Init+0xe8>)
 800218e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1800-1;
 8002194:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <MX_TIM2_Init+0xe8>)
 8002196:	f240 7207 	movw	r2, #1799	; 0x707
 800219a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <MX_TIM2_Init+0xe8>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80021a2:	4b28      	ldr	r3, [pc, #160]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021a4:	2263      	movs	r2, #99	; 0x63
 80021a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a8:	4b26      	ldr	r3, [pc, #152]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ae:	4b25      	ldr	r3, [pc, #148]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021b4:	4823      	ldr	r0, [pc, #140]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021b6:	f004 fdf1 	bl	8006d9c <HAL_TIM_Base_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80021c0:	f000 fa78 	bl	80026b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ce:	4619      	mov	r1, r3
 80021d0:	481c      	ldr	r0, [pc, #112]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021d2:	f005 f9ad 	bl	8007530 <HAL_TIM_ConfigClockSource>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80021dc:	f000 fa6a 	bl	80026b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021e0:	4818      	ldr	r0, [pc, #96]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021e2:	f004 fe7d 	bl	8006ee0 <HAL_TIM_PWM_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80021ec:	f000 fa62 	bl	80026b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f8:	f107 0320 	add.w	r3, r7, #32
 80021fc:	4619      	mov	r1, r3
 80021fe:	4811      	ldr	r0, [pc, #68]	; (8002244 <MX_TIM2_Init+0xe8>)
 8002200:	f005 fd26 	bl	8007c50 <HAL_TIMEx_MasterConfigSynchronization>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800220a:	f000 fa53 	bl	80026b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800220e:	2360      	movs	r3, #96	; 0x60
 8002210:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8002212:	2332      	movs	r3, #50	; 0x32
 8002214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	220c      	movs	r2, #12
 8002222:	4619      	mov	r1, r3
 8002224:	4807      	ldr	r0, [pc, #28]	; (8002244 <MX_TIM2_Init+0xe8>)
 8002226:	f005 f8c1 	bl	80073ac <HAL_TIM_PWM_ConfigChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002230:	f000 fa40 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <MX_TIM2_Init+0xe8>)
 8002236:	f000 fe83 	bl	8002f40 <HAL_TIM_MspPostInit>

}
 800223a:	bf00      	nop
 800223c:	3738      	adds	r7, #56	; 0x38
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000808 	.word	0x20000808

08002248 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08e      	sub	sp, #56	; 0x38
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	f107 0320 	add.w	r3, r7, #32
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
 8002274:	615a      	str	r2, [r3, #20]
 8002276:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002278:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <MX_TIM3_Init+0x128>)
 800227a:	4a3e      	ldr	r2, [pc, #248]	; (8002374 <MX_TIM3_Init+0x12c>)
 800227c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3600-1;
 800227e:	4b3c      	ldr	r3, [pc, #240]	; (8002370 <MX_TIM3_Init+0x128>)
 8002280:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002284:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002286:	4b3a      	ldr	r3, [pc, #232]	; (8002370 <MX_TIM3_Init+0x128>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800228c:	4b38      	ldr	r3, [pc, #224]	; (8002370 <MX_TIM3_Init+0x128>)
 800228e:	2263      	movs	r2, #99	; 0x63
 8002290:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002292:	4b37      	ldr	r3, [pc, #220]	; (8002370 <MX_TIM3_Init+0x128>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002298:	4b35      	ldr	r3, [pc, #212]	; (8002370 <MX_TIM3_Init+0x128>)
 800229a:	2200      	movs	r2, #0
 800229c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800229e:	4834      	ldr	r0, [pc, #208]	; (8002370 <MX_TIM3_Init+0x128>)
 80022a0:	f004 fd7c 	bl	8006d9c <HAL_TIM_Base_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80022aa:	f000 fa03 	bl	80026b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022b8:	4619      	mov	r1, r3
 80022ba:	482d      	ldr	r0, [pc, #180]	; (8002370 <MX_TIM3_Init+0x128>)
 80022bc:	f005 f938 	bl	8007530 <HAL_TIM_ConfigClockSource>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80022c6:	f000 f9f5 	bl	80026b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022ca:	4829      	ldr	r0, [pc, #164]	; (8002370 <MX_TIM3_Init+0x128>)
 80022cc:	f004 fe08 	bl	8006ee0 <HAL_TIM_PWM_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80022d6:	f000 f9ed 	bl	80026b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022e2:	f107 0320 	add.w	r3, r7, #32
 80022e6:	4619      	mov	r1, r3
 80022e8:	4821      	ldr	r0, [pc, #132]	; (8002370 <MX_TIM3_Init+0x128>)
 80022ea:	f005 fcb1 	bl	8007c50 <HAL_TIMEx_MasterConfigSynchronization>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80022f4:	f000 f9de 	bl	80026b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f8:	2360      	movs	r3, #96	; 0x60
 80022fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002304:	2304      	movs	r3, #4
 8002306:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	2200      	movs	r2, #0
 800230c:	4619      	mov	r1, r3
 800230e:	4818      	ldr	r0, [pc, #96]	; (8002370 <MX_TIM3_Init+0x128>)
 8002310:	f005 f84c 	bl	80073ac <HAL_TIM_PWM_ConfigChannel>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800231a:	f000 f9cb 	bl	80026b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	2204      	movs	r2, #4
 8002322:	4619      	mov	r1, r3
 8002324:	4812      	ldr	r0, [pc, #72]	; (8002370 <MX_TIM3_Init+0x128>)
 8002326:	f005 f841 	bl	80073ac <HAL_TIM_PWM_ConfigChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002330:	f000 f9c0 	bl	80026b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	2208      	movs	r2, #8
 8002338:	4619      	mov	r1, r3
 800233a:	480d      	ldr	r0, [pc, #52]	; (8002370 <MX_TIM3_Init+0x128>)
 800233c:	f005 f836 	bl	80073ac <HAL_TIM_PWM_ConfigChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002346:	f000 f9b5 	bl	80026b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	220c      	movs	r2, #12
 800234e:	4619      	mov	r1, r3
 8002350:	4807      	ldr	r0, [pc, #28]	; (8002370 <MX_TIM3_Init+0x128>)
 8002352:	f005 f82b 	bl	80073ac <HAL_TIM_PWM_ConfigChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800235c:	f000 f9aa 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002360:	4803      	ldr	r0, [pc, #12]	; (8002370 <MX_TIM3_Init+0x128>)
 8002362:	f000 fded 	bl	8002f40 <HAL_TIM_MspPostInit>

}
 8002366:	bf00      	nop
 8002368:	3738      	adds	r7, #56	; 0x38
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000850 	.word	0x20000850
 8002374:	40000400 	.word	0x40000400

08002378 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <MX_USART1_UART_Init+0x50>)
 8002380:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 8002384:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002388:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 800239e:	220c      	movs	r2, #12
 80023a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 80023b0:	f005 fcbe 	bl	8007d30 <HAL_UART_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023ba:	f000 f97b 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000898 	.word	0x20000898
 80023c8:	40013800 	.word	0x40013800

080023cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <MX_USART3_UART_Init+0x50>)
 80023d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023f2:	220c      	movs	r2, #12
 80023f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 8002404:	f005 fc94 	bl	8007d30 <HAL_UART_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800240e:	f000 f951 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200008e0 	.word	0x200008e0
 800241c:	40004800 	.word	0x40004800

08002420 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002426:	4b14      	ldr	r3, [pc, #80]	; (8002478 <MX_DMA_Init+0x58>)
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	4a13      	ldr	r2, [pc, #76]	; (8002478 <MX_DMA_Init+0x58>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6153      	str	r3, [r2, #20]
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <MX_DMA_Init+0x58>)
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2105      	movs	r1, #5
 8002442:	200b      	movs	r0, #11
 8002444:	f002 fc33 	bl	8004cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002448:	200b      	movs	r0, #11
 800244a:	f002 fc4c 	bl	8004ce6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	2105      	movs	r1, #5
 8002452:	200d      	movs	r0, #13
 8002454:	f002 fc2b 	bl	8004cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002458:	200d      	movs	r0, #13
 800245a:	f002 fc44 	bl	8004ce6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2105      	movs	r1, #5
 8002462:	200f      	movs	r0, #15
 8002464:	f002 fc23 	bl	8004cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002468:	200f      	movs	r0, #15
 800246a:	f002 fc3c 	bl	8004ce6 <HAL_NVIC_EnableIRQ>

}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000

0800247c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002482:	f107 0308 	add.w	r3, r7, #8
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002490:	4b39      	ldr	r3, [pc, #228]	; (8002578 <MX_GPIO_Init+0xfc>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a38      	ldr	r2, [pc, #224]	; (8002578 <MX_GPIO_Init+0xfc>)
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b36      	ldr	r3, [pc, #216]	; (8002578 <MX_GPIO_Init+0xfc>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a8:	4b33      	ldr	r3, [pc, #204]	; (8002578 <MX_GPIO_Init+0xfc>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4a32      	ldr	r2, [pc, #200]	; (8002578 <MX_GPIO_Init+0xfc>)
 80024ae:	f043 0308 	orr.w	r3, r3, #8
 80024b2:	6193      	str	r3, [r2, #24]
 80024b4:	4b30      	ldr	r3, [pc, #192]	; (8002578 <MX_GPIO_Init+0xfc>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 80024c0:	2201      	movs	r2, #1
 80024c2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80024c6:	482d      	ldr	r0, [pc, #180]	; (800257c <MX_GPIO_Init+0x100>)
 80024c8:	f003 f97f 	bl	80057ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 80024cc:	2200      	movs	r2, #0
 80024ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024d2:	482b      	ldr	r0, [pc, #172]	; (8002580 <MX_GPIO_Init+0x104>)
 80024d4:	f003 f979 	bl	80057ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin
 80024d8:	2200      	movs	r2, #0
 80024da:	21f8      	movs	r1, #248	; 0xf8
 80024dc:	4827      	ldr	r0, [pc, #156]	; (800257c <MX_GPIO_Init+0x100>)
 80024de:	f003 f974 	bl	80057ca <HAL_GPIO_WritePin>
                          |EEPROM_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BLE_EN_Pin BLE_RESET_Pin RELE_2_Pin RELE_3_Pin
                           RELE_4_Pin RELE_5_Pin */
  GPIO_InitStruct.Pin = BLE_EN_Pin|BLE_RESET_Pin|RELE_2_Pin|RELE_3_Pin
 80024e2:	f246 0378 	movw	r3, #24696	; 0x6078
 80024e6:	60bb      	str	r3, [r7, #8]
                          |RELE_4_Pin|RELE_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e8:	2301      	movs	r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2302      	movs	r3, #2
 80024f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f4:	f107 0308 	add.w	r3, r7, #8
 80024f8:	4619      	mov	r1, r3
 80024fa:	4820      	ldr	r0, [pc, #128]	; (800257c <MX_GPIO_Init+0x100>)
 80024fc:	f002 ff0e 	bl	800531c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATUS_Pin */
  GPIO_InitStruct.Pin = BLE_STATUS_Pin;
 8002500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002504:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002506:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <MX_GPIO_Init+0x108>)
 8002508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 800250e:	f107 0308 	add.w	r3, r7, #8
 8002512:	4619      	mov	r1, r3
 8002514:	4819      	ldr	r0, [pc, #100]	; (800257c <MX_GPIO_Init+0x100>)
 8002516:	f002 ff01 	bl	800531c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTAO_BLE_Pin */
  GPIO_InitStruct.Pin = BOTAO_BLE_Pin;
 800251a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800251e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <MX_GPIO_Init+0x108>)
 8002522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 8002528:	f107 0308 	add.w	r3, r7, #8
 800252c:	4619      	mov	r1, r3
 800252e:	4814      	ldr	r0, [pc, #80]	; (8002580 <MX_GPIO_Init+0x104>)
 8002530:	f002 fef4 	bl	800531c <HAL_GPIO_Init>

  /*Configure GPIO pin : RELE_1_Pin */
  GPIO_InitStruct.Pin = RELE_1_Pin;
 8002534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002538:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253a:	2301      	movs	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2302      	movs	r3, #2
 8002544:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 8002546:	f107 0308 	add.w	r3, r7, #8
 800254a:	4619      	mov	r1, r3
 800254c:	480c      	ldr	r0, [pc, #48]	; (8002580 <MX_GPIO_Init+0x104>)
 800254e:	f002 fee5 	bl	800531c <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_EN_Pin */
  GPIO_InitStruct.Pin = EEPROM_EN_Pin;
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002556:	2301      	movs	r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800255a:	2302      	movs	r3, #2
 800255c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2302      	movs	r3, #2
 8002560:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 8002562:	f107 0308 	add.w	r3, r7, #8
 8002566:	4619      	mov	r1, r3
 8002568:	4804      	ldr	r0, [pc, #16]	; (800257c <MX_GPIO_Init+0x100>)
 800256a:	f002 fed7 	bl	800531c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	40010c00 	.word	0x40010c00
 8002580:	40010800 	.word	0x40010800
 8002584:	10110000 	.word	0x10110000

08002588 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	float 	Temp1,Temp2;
	double TempTeto, TempLastro;
	static long somatorio1,somatorio2;
	static uint16_t i = 0;

	if(i<TAM){
 8002590:	4b38      	ldr	r3, [pc, #224]	; (8002674 <HAL_ADC_ConvCpltCallback+0xec>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002598:	d216      	bcs.n	80025c8 <HAL_ADC_ConvCpltCallback+0x40>
		somatorio1+=buffer_ADC[1]; // somatorio
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <HAL_ADC_ConvCpltCallback+0xf0>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4a37      	ldr	r2, [pc, #220]	; (800267c <HAL_ADC_ConvCpltCallback+0xf4>)
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b35      	ldr	r3, [pc, #212]	; (800267c <HAL_ADC_ConvCpltCallback+0xf4>)
 80025a8:	601a      	str	r2, [r3, #0]
		somatorio2+=buffer_ADC[0]; // somatorio
 80025aa:	4b33      	ldr	r3, [pc, #204]	; (8002678 <HAL_ADC_ConvCpltCallback+0xf0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a34      	ldr	r2, [pc, #208]	; (8002680 <HAL_ADC_ConvCpltCallback+0xf8>)
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b32      	ldr	r3, [pc, #200]	; (8002680 <HAL_ADC_ConvCpltCallback+0xf8>)
 80025b8:	601a      	str	r2, [r3, #0]
		i++;
 80025ba:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <HAL_ADC_ConvCpltCallback+0xec>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	3301      	adds	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <HAL_ADC_ConvCpltCallback+0xec>)
 80025c4:	801a      	strh	r2, [r3, #0]
//	// Handles the IRQ of ADC1. EOC flag is cleared by reading data register
//	static uint32_t temp = 0;
//	temp = ADC1->DR;
//	TempInterna = (temp-V25)/(AVG_SLOPE)+25;

}
 80025c6:	e050      	b.n	800266a <HAL_ADC_ConvCpltCallback+0xe2>
		somatorio1 = somatorio1 / TAM; //calc media
 80025c8:	4b2c      	ldr	r3, [pc, #176]	; (800267c <HAL_ADC_ConvCpltCallback+0xf4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a2d      	ldr	r2, [pc, #180]	; (8002684 <HAL_ADC_ConvCpltCallback+0xfc>)
 80025ce:	fb82 1203 	smull	r1, r2, r2, r3
 80025d2:	1152      	asrs	r2, r2, #5
 80025d4:	17db      	asrs	r3, r3, #31
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	4a28      	ldr	r2, [pc, #160]	; (800267c <HAL_ADC_ConvCpltCallback+0xf4>)
 80025da:	6013      	str	r3, [r2, #0]
		somatorio2 = somatorio2 / TAM; //calc media
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_ADC_ConvCpltCallback+0xf8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a28      	ldr	r2, [pc, #160]	; (8002684 <HAL_ADC_ConvCpltCallback+0xfc>)
 80025e2:	fb82 1203 	smull	r1, r2, r2, r3
 80025e6:	1152      	asrs	r2, r2, #5
 80025e8:	17db      	asrs	r3, r3, #31
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	4a24      	ldr	r2, [pc, #144]	; (8002680 <HAL_ADC_ConvCpltCallback+0xf8>)
 80025ee:	6013      	str	r3, [r2, #0]
		Temp1 = somatorio1*16; //calc valor final
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_ADC_ConvCpltCallback+0xf4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fae2 	bl	8000bc0 <__aeabi_i2f>
 80025fc:	4603      	mov	r3, r0
 80025fe:	61fb      	str	r3, [r7, #28]
		Temp1 = Temp1/100;
 8002600:	4921      	ldr	r1, [pc, #132]	; (8002688 <HAL_ADC_ConvCpltCallback+0x100>)
 8002602:	69f8      	ldr	r0, [r7, #28]
 8002604:	f7fe fbe4 	bl	8000dd0 <__aeabi_fdiv>
 8002608:	4603      	mov	r3, r0
 800260a:	61fb      	str	r3, [r7, #28]
		somatorio1 = 0; 		//zera somatorio
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <HAL_ADC_ConvCpltCallback+0xf4>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
		Temp2 = somatorio2*16; 	//calc valor final
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fad1 	bl	8000bc0 <__aeabi_i2f>
 800261e:	4603      	mov	r3, r0
 8002620:	61bb      	str	r3, [r7, #24]
		Temp2 = Temp2/100;
 8002622:	4919      	ldr	r1, [pc, #100]	; (8002688 <HAL_ADC_ConvCpltCallback+0x100>)
 8002624:	69b8      	ldr	r0, [r7, #24]
 8002626:	f7fe fbd3 	bl	8000dd0 <__aeabi_fdiv>
 800262a:	4603      	mov	r3, r0
 800262c:	61bb      	str	r3, [r7, #24]
		somatorio2 = 0; 		//zera somatorio
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
		TempLastro=(double)Temp1;
 8002634:	69f8      	ldr	r0, [r7, #28]
 8002636:	f7fd fef7 	bl	8000428 <__aeabi_f2d>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TempTeto=(double)Temp2;
 8002642:	69b8      	ldr	r0, [r7, #24]
 8002644:	f7fd fef0 	bl	8000428 <__aeabi_f2d>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		PrimitiveStates.RealtimeTeto = TempTeto;
 8002650:	490e      	ldr	r1, [pc, #56]	; (800268c <HAL_ADC_ConvCpltCallback+0x104>)
 8002652:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002656:	e9c1 2302 	strd	r2, r3, [r1, #8]
		PrimitiveStates.RealtimeLastro = TempLastro;
 800265a:	490c      	ldr	r1, [pc, #48]	; (800268c <HAL_ADC_ConvCpltCallback+0x104>)
 800265c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002660:	e9c1 2304 	strd	r2, r3, [r1, #16]
		i=0;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_ADC_ConvCpltCallback+0xec>)
 8002666:	2200      	movs	r2, #0
 8002668:	801a      	strh	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000109a 	.word	0x2000109a
 8002678:	20001058 	.word	0x20001058
 800267c:	2000109c 	.word	0x2000109c
 8002680:	200010a0 	.word	0x200010a0
 8002684:	10624dd3 	.word	0x10624dd3
 8002688:	42c80000 	.word	0x42c80000
 800268c:	20001068 	.word	0x20001068

08002690 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026a2:	f001 fe29 	bl	80042f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40012c00 	.word	0x40012c00

080026b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026b8:	b672      	cpsid	i
}
 80026ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026bc:	e7fe      	b.n	80026bc <Error_Handler+0x8>

080026be <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80026ee:	f7fe f983 	bl	80009f8 <__aeabi_dcmpgt>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8002704:	e011      	b.n	800272a <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002712:	f7fe f953 	bl	80009bc <__aeabi_dcmplt>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d100      	bne.n	800271e <PID_Init+0x60>
}
 800271c:	e005      	b.n	800272a <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	0000      	movs	r0, r0
 8002734:	0000      	movs	r0, r0
	...

08002738 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af06      	add	r7, sp, #24
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800275e:	a318      	add	r3, pc, #96	; (adr r3, 80027c0 <PID+0x88>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	e9cd 2300 	strd	r2, r3, [sp]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f931 	bl	80029d8 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2264      	movs	r2, #100	; 0x64
 800277a:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 800277c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002780:	4619      	mov	r1, r3
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 fa38 	bl	8002bf8 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8002788:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800278c:	9304      	str	r3, [sp, #16]
 800278e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002792:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800279a:	e9cd 2300 	strd	r2, r3, [sp]
 800279e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f984 	bl	8002ab0 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80027a8:	f001 fdb8 	bl	800431c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	1ad2      	subs	r2, r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	605a      	str	r2, [r3, #4]
	
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	00000000 	.word	0x00000000
 80027c4:	406fe000 	.word	0x406fe000

080027c8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80027c8:	b5b0      	push	{r4, r5, r7, lr}
 80027ca:	b08c      	sub	sp, #48	; 0x30
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	785b      	ldrb	r3, [r3, #1]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <PID_Compute+0x14>
	{
		return _FALSE;
 80027d8:	2300      	movs	r3, #0
 80027da:	e0db      	b.n	8002994 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80027dc:	f001 fd9e 	bl	800431c <HAL_GetTick>
 80027e0:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	6a3a      	ldr	r2, [r7, #32]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	f0c0 80cd 	bcc.w	8002992 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002808:	e9d3 0100 	ldrd	r0, r1, [r3]
 800280c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002810:	f7fd fcaa 	bl	8000168 <__aeabi_dsub>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002822:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002826:	f7fd fc9f 	bl	8000168 <__aeabi_dsub>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800283e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002842:	f7fd fe49 	bl	80004d8 <__aeabi_dmul>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4620      	mov	r0, r4
 800284c:	4629      	mov	r1, r5
 800284e:	f7fd fc8d 	bl	800016c <__adddf3>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d114      	bne.n	800288e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002870:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002874:	f7fd fe30 	bl	80004d8 <__aeabi_dmul>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4620      	mov	r0, r4
 800287e:	4629      	mov	r1, r5
 8002880:	f7fd fc72 	bl	8000168 <__aeabi_dsub>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800289a:	f7fe f8ad 	bl	80009f8 <__aeabi_dcmpgt>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d006      	beq.n	80028b2 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80028b0:	e010      	b.n	80028d4 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80028be:	f7fe f87d 	bl	80009bc <__aeabi_dcmplt>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00b      	beq.n	80028f4 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80028e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028e6:	f7fd fdf7 	bl	80004d8 <__aeabi_dmul>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80028f2:	e005      	b.n	8002900 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800290c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002910:	f7fd fde2 	bl	80004d8 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4620      	mov	r0, r4
 800291a:	4629      	mov	r1, r5
 800291c:	f7fd fc24 	bl	8000168 <__aeabi_dsub>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002928:	f7fd fc20 	bl	800016c <__adddf3>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800293a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800293e:	f7fe f85b 	bl	80009f8 <__aeabi_dcmpgt>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800294e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002952:	e00e      	b.n	8002972 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800295a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800295e:	f7fe f82d 	bl	80009bc <__aeabi_dcmplt>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800296e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800297a:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002984:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298c:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8002992:	2300      	movs	r3, #0
	}
	
}
 8002994:	4618      	mov	r0, r3
 8002996:	3730      	adds	r7, #48	; 0x30
 8002998:	46bd      	mov	sp, r7
 800299a:	bdb0      	pop	{r4, r5, r7, pc}

0800299c <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d006      	beq.n	80029ca <PID_SetMode+0x2e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	785b      	ldrb	r3, [r3, #1]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fe7a 	bl	80026be <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7bfa      	ldrb	r2, [r7, #15]
 80029ce:	705a      	strb	r2, [r3, #1]
	
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80029e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029ec:	f7fd fffa 	bl	80009e4 <__aeabi_dcmpge>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d158      	bne.n	8002aa8 <PID_SetOutputLimits+0xd0>
	{
		return;
	}
	
	uPID->OutMin = Min;
 80029f6:	68f9      	ldr	r1, [r7, #12]
 80029f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029fc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8002a00:	68f9      	ldr	r1, [r7, #12]
 8002a02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a06:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	785b      	ldrb	r3, [r3, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d04b      	beq.n	8002aaa <PID_SetOutputLimits+0xd2>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a20:	f7fd ffea 	bl	80009f8 <__aeabi_dcmpgt>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d007      	beq.n	8002a3a <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a34:	e9c1 2300 	strd	r2, r3, [r1]
 8002a38:	e012      	b.n	8002a60 <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a48:	f7fd ffb8 	bl	80009bc <__aeabi_dcmplt>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d006      	beq.n	8002a60 <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a5c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a6c:	f7fd ffc4 	bl	80009f8 <__aeabi_dcmpgt>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a7c:	68f9      	ldr	r1, [r7, #12]
 8002a7e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002a82:	e012      	b.n	8002aaa <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a90:	f7fd ff94 	bl	80009bc <__aeabi_dcmplt>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002aa0:	68f9      	ldr	r1, [r7, #12]
 8002aa2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002aa6:	e000      	b.n	8002aaa <PID_SetOutputLimits+0xd2>
		return;
 8002aa8:	bf00      	nop
		}
		else { }
		
	}
	
}
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	e9c7 2300 	strd	r2, r3, [r7]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ac8:	f7fd ff78 	bl	80009bc <__aeabi_dcmplt>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 808b 	bne.w	8002bea <PID_SetTunings2+0x13a>
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ae0:	f7fd ff6c 	bl	80009bc <__aeabi_dcmplt>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d17f      	bne.n	8002bea <PID_SetTunings2+0x13a>
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002af6:	f7fd ff61 	bl	80009bc <__aeabi_dcmplt>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d174      	bne.n	8002bea <PID_SetTunings2+0x13a>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002b06:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002b08:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8002b1c:	68f9      	ldr	r1, [r7, #12]
 8002b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b22:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002b26:	68f9      	ldr	r1, [r7, #12]
 8002b28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b2c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8002b30:	68f9      	ldr	r1, [r7, #12]
 8002b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b36:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd fc50 	bl	80003e4 <__aeabi_ui2d>
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <PID_SetTunings2+0x144>)
 8002b4a:	f7fd fdef 	bl	800072c <__aeabi_ddiv>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	e9c7 2304 	strd	r2, r3, [r7, #16]
	
	uPID->Kp = Kp;
 8002b56:	68f9      	ldr	r1, [r7, #12]
 8002b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b5c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8002b60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b68:	f7fd fcb6 	bl	80004d8 <__aeabi_dmul>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	68f9      	ldr	r1, [r7, #12]
 8002b72:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002b76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b7e:	f7fd fdd5 	bl	800072c <__aeabi_ddiv>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	68f9      	ldr	r1, [r7, #12]
 8002b88:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	78db      	ldrb	r3, [r3, #3]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d12b      	bne.n	8002bec <PID_SetTunings2+0x13c>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002b9a:	f04f 0000 	mov.w	r0, #0
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	f7fd fae1 	bl	8000168 <__aeabi_dsub>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	68f9      	ldr	r1, [r7, #12]
 8002bac:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002bb6:	f04f 0000 	mov.w	r0, #0
 8002bba:	f04f 0100 	mov.w	r1, #0
 8002bbe:	f7fd fad3 	bl	8000168 <__aeabi_dsub>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	68f9      	ldr	r1, [r7, #12]
 8002bc8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	f7fd fac5 	bl	8000168 <__aeabi_dsub>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	68f9      	ldr	r1, [r7, #12]
 8002be4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002be8:	e000      	b.n	8002bec <PID_SetTunings2+0x13c>
		return;
 8002bea:	bf00      	nop
		
	}
	
}
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	408f4000 	.word	0x408f4000

08002bf8 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	785b      	ldrb	r3, [r3, #1]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d02e      	beq.n	8002c6a <PID_SetControllerDirection+0x72>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	78db      	ldrb	r3, [r3, #3]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d029      	beq.n	8002c6a <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002c1c:	f04f 0000 	mov.w	r0, #0
 8002c20:	f04f 0100 	mov.w	r1, #0
 8002c24:	f7fd faa0 	bl	8000168 <__aeabi_dsub>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002c38:	f04f 0000 	mov.w	r0, #0
 8002c3c:	f04f 0100 	mov.w	r1, #0
 8002c40:	f7fd fa92 	bl	8000168 <__aeabi_dsub>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c54:	f04f 0000 	mov.w	r0, #0
 8002c58:	f04f 0100 	mov.w	r1, #0
 8002c5c:	f7fd fa84 	bl	8000168 <__aeabi_dsub>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	70da      	strb	r2, [r3, #3]
	
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002c78:	b5b0      	push	{r4, r5, r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	dd2e      	ble.n	8002ce6 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002c88:	6838      	ldr	r0, [r7, #0]
 8002c8a:	f7fd fbbb 	bl	8000404 <__aeabi_i2d>
 8002c8e:	4604      	mov	r4, r0
 8002c90:	460d      	mov	r5, r1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fba4 	bl	80003e4 <__aeabi_ui2d>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	f7fd fd42 	bl	800072c <__aeabi_ddiv>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002cb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cba:	f7fd fc0d 	bl	80004d8 <__aeabi_dmul>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002cce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cd2:	f7fd fd2b 	bl	800072c <__aeabi_ddiv>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002cf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cf6:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <HAL_MspInit+0x68>)
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	4a17      	ldr	r2, [pc, #92]	; (8002d58 <HAL_MspInit+0x68>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6193      	str	r3, [r2, #24]
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_MspInit+0x68>)
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_MspInit+0x68>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4a11      	ldr	r2, [pc, #68]	; (8002d58 <HAL_MspInit+0x68>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	61d3      	str	r3, [r2, #28]
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_MspInit+0x68>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	210f      	movs	r1, #15
 8002d2a:	f06f 0001 	mvn.w	r0, #1
 8002d2e:	f001 ffbe 	bl	8004cae <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_MspInit+0x6c>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	4a04      	ldr	r2, [pc, #16]	; (8002d5c <HAL_MspInit+0x6c>)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40010000 	.word	0x40010000

08002d60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0310 	add.w	r3, r7, #16
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a28      	ldr	r2, [pc, #160]	; (8002e1c <HAL_ADC_MspInit+0xbc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d149      	bne.n	8002e14 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <HAL_ADC_MspInit+0xc0>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4a26      	ldr	r2, [pc, #152]	; (8002e20 <HAL_ADC_MspInit+0xc0>)
 8002d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d8a:	6193      	str	r3, [r2, #24]
 8002d8c:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_ADC_MspInit+0xc0>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <HAL_ADC_MspInit+0xc0>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	4a20      	ldr	r2, [pc, #128]	; (8002e20 <HAL_ADC_MspInit+0xc0>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	6193      	str	r3, [r2, #24]
 8002da4:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <HAL_ADC_MspInit+0xc0>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002db0:	2303      	movs	r3, #3
 8002db2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002db4:	2303      	movs	r3, #3
 8002db6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db8:	f107 0310 	add.w	r3, r7, #16
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4819      	ldr	r0, [pc, #100]	; (8002e24 <HAL_ADC_MspInit+0xc4>)
 8002dc0:	f002 faac 	bl	800531c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002dc6:	4a19      	ldr	r2, [pc, #100]	; (8002e2c <HAL_ADC_MspInit+0xcc>)
 8002dc8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd0:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002dd8:	2280      	movs	r2, #128	; 0x80
 8002dda:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002de4:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002de6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002dec:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002dee:	2220      	movs	r2, #32
 8002df0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002df2:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002df8:	480b      	ldr	r0, [pc, #44]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002dfa:	f001 ff91 	bl	8004d20 <HAL_DMA_Init>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002e04:	f7ff fc56 	bl	80026b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002e0c:	621a      	str	r2, [r3, #32]
 8002e0e:	4a06      	ldr	r2, [pc, #24]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e14:	bf00      	nop
 8002e16:	3720      	adds	r7, #32
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40012400 	.word	0x40012400
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40010800 	.word	0x40010800
 8002e28:	20000770 	.word	0x20000770
 8002e2c:	40020008 	.word	0x40020008

08002e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <HAL_I2C_MspInit+0x90>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d132      	bne.n	8002eb6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e50:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <HAL_I2C_MspInit+0x94>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <HAL_I2C_MspInit+0x94>)
 8002e56:	f043 0308 	orr.w	r3, r3, #8
 8002e5a:	6193      	str	r3, [r2, #24]
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_I2C_MspInit+0x94>)
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e6e:	2312      	movs	r3, #18
 8002e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e72:	2303      	movs	r3, #3
 8002e74:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e76:	f107 0314 	add.w	r3, r7, #20
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4812      	ldr	r0, [pc, #72]	; (8002ec8 <HAL_I2C_MspInit+0x98>)
 8002e7e:	f002 fa4d 	bl	800531c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_I2C_MspInit+0x9c>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	f043 0302 	orr.w	r3, r3, #2
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
 8002e98:	4a0c      	ldr	r2, [pc, #48]	; (8002ecc <HAL_I2C_MspInit+0x9c>)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_I2C_MspInit+0x94>)
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	4a08      	ldr	r2, [pc, #32]	; (8002ec4 <HAL_I2C_MspInit+0x94>)
 8002ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ea8:	61d3      	str	r3, [r2, #28]
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_I2C_MspInit+0x94>)
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002eb6:	bf00      	nop
 8002eb8:	3728      	adds	r7, #40	; 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40005400 	.word	0x40005400
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40010c00 	.word	0x40010c00
 8002ecc:	40010000 	.word	0x40010000

08002ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d10c      	bne.n	8002efc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_TIM_Base_MspInit+0x68>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <HAL_TIM_Base_MspInit+0x68>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	61d3      	str	r3, [r2, #28]
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_TIM_Base_MspInit+0x68>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002efa:	e018      	b.n	8002f2e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <HAL_TIM_Base_MspInit+0x6c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d113      	bne.n	8002f2e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <HAL_TIM_Base_MspInit+0x68>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <HAL_TIM_Base_MspInit+0x68>)
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	61d3      	str	r3, [r2, #28]
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_TIM_Base_MspInit+0x68>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2105      	movs	r1, #5
 8002f22:	201d      	movs	r0, #29
 8002f24:	f001 fec3 	bl	8004cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f28:	201d      	movs	r0, #29
 8002f2a:	f001 fedc 	bl	8004ce6 <HAL_NVIC_EnableIRQ>
}
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40000400 	.word	0x40000400

08002f40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0318 	add.w	r3, r7, #24
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5e:	d118      	bne.n	8002f92 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f60:	4b28      	ldr	r3, [pc, #160]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4a27      	ldr	r2, [pc, #156]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	6193      	str	r3, [r2, #24]
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f78:	2308      	movs	r3, #8
 8002f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	2302      	movs	r3, #2
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f84:	f107 0318 	add.w	r3, r7, #24
 8002f88:	4619      	mov	r1, r3
 8002f8a:	481f      	ldr	r0, [pc, #124]	; (8003008 <HAL_TIM_MspPostInit+0xc8>)
 8002f8c:	f002 f9c6 	bl	800531c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f90:	e034      	b.n	8002ffc <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1d      	ldr	r2, [pc, #116]	; (800300c <HAL_TIM_MspPostInit+0xcc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d12f      	bne.n	8002ffc <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9c:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	4a18      	ldr	r2, [pc, #96]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	6193      	str	r3, [r2, #24]
 8002fa8:	4b16      	ldr	r3, [pc, #88]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb4:	4b13      	ldr	r3, [pc, #76]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	4a12      	ldr	r2, [pc, #72]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002fba:	f043 0308 	orr.w	r3, r3, #8
 8002fbe:	6193      	str	r3, [r2, #24]
 8002fc0:	4b10      	ldr	r3, [pc, #64]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fcc:	23c0      	movs	r3, #192	; 0xc0
 8002fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd8:	f107 0318 	add.w	r3, r7, #24
 8002fdc:	4619      	mov	r1, r3
 8002fde:	480a      	ldr	r0, [pc, #40]	; (8003008 <HAL_TIM_MspPostInit+0xc8>)
 8002fe0:	f002 f99c 	bl	800531c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fec:	2302      	movs	r3, #2
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff0:	f107 0318 	add.w	r3, r7, #24
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4806      	ldr	r0, [pc, #24]	; (8003010 <HAL_TIM_MspPostInit+0xd0>)
 8002ff8:	f002 f990 	bl	800531c <HAL_GPIO_Init>
}
 8002ffc:	bf00      	nop
 8002ffe:	3728      	adds	r7, #40	; 0x28
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	40010800 	.word	0x40010800
 800300c:	40000400 	.word	0x40000400
 8003010:	40010c00 	.word	0x40010c00

08003014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 0318 	add.w	r3, r7, #24
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a62      	ldr	r2, [pc, #392]	; (80031b8 <HAL_UART_MspInit+0x1a4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d160      	bne.n	80030f6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003034:	4b61      	ldr	r3, [pc, #388]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	4a60      	ldr	r2, [pc, #384]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 800303a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800303e:	6193      	str	r3, [r2, #24]
 8003040:	4b5e      	ldr	r3, [pc, #376]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304c:	4b5b      	ldr	r3, [pc, #364]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	4a5a      	ldr	r2, [pc, #360]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 8003052:	f043 0304 	orr.w	r3, r3, #4
 8003056:	6193      	str	r3, [r2, #24]
 8003058:	4b58      	ldr	r3, [pc, #352]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306a:	2302      	movs	r3, #2
 800306c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800306e:	2303      	movs	r3, #3
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003072:	f107 0318 	add.w	r3, r7, #24
 8003076:	4619      	mov	r1, r3
 8003078:	4851      	ldr	r0, [pc, #324]	; (80031c0 <HAL_UART_MspInit+0x1ac>)
 800307a:	f002 f94f 	bl	800531c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800307e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003084:	2300      	movs	r3, #0
 8003086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308c:	f107 0318 	add.w	r3, r7, #24
 8003090:	4619      	mov	r1, r3
 8003092:	484b      	ldr	r0, [pc, #300]	; (80031c0 <HAL_UART_MspInit+0x1ac>)
 8003094:	f002 f942 	bl	800531c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003098:	4b4a      	ldr	r3, [pc, #296]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 800309a:	4a4b      	ldr	r2, [pc, #300]	; (80031c8 <HAL_UART_MspInit+0x1b4>)
 800309c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800309e:	4b49      	ldr	r3, [pc, #292]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a4:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030aa:	4b46      	ldr	r3, [pc, #280]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030ac:	2280      	movs	r2, #128	; 0x80
 80030ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030b0:	4b44      	ldr	r3, [pc, #272]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030b6:	4b43      	ldr	r3, [pc, #268]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80030bc:	4b41      	ldr	r3, [pc, #260]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030be:	2200      	movs	r2, #0
 80030c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030c2:	4b40      	ldr	r3, [pc, #256]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80030c8:	483e      	ldr	r0, [pc, #248]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030ca:	f001 fe29 	bl	8004d20 <HAL_DMA_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80030d4:	f7ff faee 	bl	80026b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a3a      	ldr	r2, [pc, #232]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80030de:	4a39      	ldr	r2, [pc, #228]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2105      	movs	r1, #5
 80030e8:	2025      	movs	r0, #37	; 0x25
 80030ea:	f001 fde0 	bl	8004cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030ee:	2025      	movs	r0, #37	; 0x25
 80030f0:	f001 fdf9 	bl	8004ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030f4:	e05c      	b.n	80031b0 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART3)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a34      	ldr	r2, [pc, #208]	; (80031cc <HAL_UART_MspInit+0x1b8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d157      	bne.n	80031b0 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003100:	4b2e      	ldr	r3, [pc, #184]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	4a2d      	ldr	r2, [pc, #180]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 8003106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800310a:	61d3      	str	r3, [r2, #28]
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003118:	4b28      	ldr	r3, [pc, #160]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	4a27      	ldr	r2, [pc, #156]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 800311e:	f043 0308 	orr.w	r3, r3, #8
 8003122:	6193      	str	r3, [r2, #24]
 8003124:	4b25      	ldr	r3, [pc, #148]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003136:	2302      	movs	r3, #2
 8003138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800313a:	2303      	movs	r3, #3
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313e:	f107 0318 	add.w	r3, r7, #24
 8003142:	4619      	mov	r1, r3
 8003144:	4822      	ldr	r0, [pc, #136]	; (80031d0 <HAL_UART_MspInit+0x1bc>)
 8003146:	f002 f8e9 	bl	800531c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800314a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800314e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	2300      	movs	r3, #0
 8003156:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003158:	f107 0318 	add.w	r3, r7, #24
 800315c:	4619      	mov	r1, r3
 800315e:	481c      	ldr	r0, [pc, #112]	; (80031d0 <HAL_UART_MspInit+0x1bc>)
 8003160:	f002 f8dc 	bl	800531c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 8003166:	4a1c      	ldr	r2, [pc, #112]	; (80031d8 <HAL_UART_MspInit+0x1c4>)
 8003168:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800316a:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 800316c:	2200      	movs	r2, #0
 800316e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003170:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003176:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 8003178:	2280      	movs	r2, #128	; 0x80
 800317a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800317c:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 800317e:	2200      	movs	r2, #0
 8003180:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 8003184:	2200      	movs	r2, #0
 8003186:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003188:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 800318a:	2220      	movs	r2, #32
 800318c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 8003190:	2200      	movs	r2, #0
 8003192:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003194:	480f      	ldr	r0, [pc, #60]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 8003196:	f001 fdc3 	bl	8004d20 <HAL_DMA_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_UART_MspInit+0x190>
      Error_Handler();
 80031a0:	f7ff fa88 	bl	80026b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a0b      	ldr	r2, [pc, #44]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 80031a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6253      	str	r3, [r2, #36]	; 0x24
}
 80031b0:	bf00      	nop
 80031b2:	3728      	adds	r7, #40	; 0x28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40013800 	.word	0x40013800
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40010800 	.word	0x40010800
 80031c4:	20000928 	.word	0x20000928
 80031c8:	40020058 	.word	0x40020058
 80031cc:	40004800 	.word	0x40004800
 80031d0:	40010c00 	.word	0x40010c00
 80031d4:	2000096c 	.word	0x2000096c
 80031d8:	40020030 	.word	0x40020030

080031dc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a17      	ldr	r2, [pc, #92]	; (8003248 <HAL_UART_MspDeInit+0x6c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d113      	bne.n	8003216 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80031ee:	4b17      	ldr	r3, [pc, #92]	; (800324c <HAL_UART_MspDeInit+0x70>)
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	4a16      	ldr	r2, [pc, #88]	; (800324c <HAL_UART_MspDeInit+0x70>)
 80031f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031f8:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80031fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80031fe:	4814      	ldr	r0, [pc, #80]	; (8003250 <HAL_UART_MspDeInit+0x74>)
 8003200:	f002 fa10 	bl	8005624 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	4618      	mov	r0, r3
 800320a:	f001 fde3 	bl	8004dd4 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800320e:	2025      	movs	r0, #37	; 0x25
 8003210:	f001 fd77 	bl	8004d02 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8003214:	e014      	b.n	8003240 <HAL_UART_MspDeInit+0x64>
  else if(huart->Instance==USART3)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <HAL_UART_MspDeInit+0x78>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d10f      	bne.n	8003240 <HAL_UART_MspDeInit+0x64>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <HAL_UART_MspDeInit+0x70>)
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	4a09      	ldr	r2, [pc, #36]	; (800324c <HAL_UART_MspDeInit+0x70>)
 8003226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322a:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800322c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003230:	4809      	ldr	r0, [pc, #36]	; (8003258 <HAL_UART_MspDeInit+0x7c>)
 8003232:	f002 f9f7 	bl	8005624 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	4618      	mov	r0, r3
 800323c:	f001 fdca 	bl	8004dd4 <HAL_DMA_DeInit>
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40013800 	.word	0x40013800
 800324c:	40021000 	.word	0x40021000
 8003250:	40010800 	.word	0x40010800
 8003254:	40004800 	.word	0x40004800
 8003258:	40010c00 	.word	0x40010c00

0800325c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08c      	sub	sp, #48	; 0x30
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003272:	4b2e      	ldr	r3, [pc, #184]	; (800332c <HAL_InitTick+0xd0>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	4a2d      	ldr	r2, [pc, #180]	; (800332c <HAL_InitTick+0xd0>)
 8003278:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800327c:	6193      	str	r3, [r2, #24]
 800327e:	4b2b      	ldr	r3, [pc, #172]	; (800332c <HAL_InitTick+0xd0>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800328a:	f107 020c 	add.w	r2, r7, #12
 800328e:	f107 0310 	add.w	r3, r7, #16
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f003 fc7d 	bl	8006b94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800329a:	f003 fc67 	bl	8006b6c <HAL_RCC_GetPCLK2Freq>
 800329e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	4a23      	ldr	r2, [pc, #140]	; (8003330 <HAL_InitTick+0xd4>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	0c9b      	lsrs	r3, r3, #18
 80032aa:	3b01      	subs	r3, #1
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <HAL_InitTick+0xd8>)
 80032b0:	4a21      	ldr	r2, [pc, #132]	; (8003338 <HAL_InitTick+0xdc>)
 80032b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80032b4:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <HAL_InitTick+0xd8>)
 80032b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032ba:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <HAL_InitTick+0xd8>)
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80032c2:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <HAL_InitTick+0xd8>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032c8:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <HAL_InitTick+0xd8>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ce:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_InitTick+0xd8>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80032d4:	4817      	ldr	r0, [pc, #92]	; (8003334 <HAL_InitTick+0xd8>)
 80032d6:	f003 fd61 	bl	8006d9c <HAL_TIM_Base_Init>
 80032da:	4603      	mov	r3, r0
 80032dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80032e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d11b      	bne.n	8003320 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80032e8:	4812      	ldr	r0, [pc, #72]	; (8003334 <HAL_InitTick+0xd8>)
 80032ea:	f003 fda7 	bl	8006e3c <HAL_TIM_Base_Start_IT>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80032f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d111      	bne.n	8003320 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80032fc:	2019      	movs	r0, #25
 80032fe:	f001 fcf2 	bl	8004ce6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b0f      	cmp	r3, #15
 8003306:	d808      	bhi.n	800331a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8003308:	2200      	movs	r2, #0
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	2019      	movs	r0, #25
 800330e:	f001 fcce 	bl	8004cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <HAL_InitTick+0xe0>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	e002      	b.n	8003320 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003324:	4618      	mov	r0, r3
 8003326:	3730      	adds	r7, #48	; 0x30
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	431bde83 	.word	0x431bde83
 8003334:	200010a4 	.word	0x200010a4
 8003338:	40012c00 	.word	0x40012c00
 800333c:	20000204 	.word	0x20000204

08003340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003344:	e7fe      	b.n	8003344 <NMI_Handler+0x4>

08003346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800334a:	e7fe      	b.n	800334a <HardFault_Handler+0x4>

0800334c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003350:	e7fe      	b.n	8003350 <MemManage_Handler+0x4>

08003352 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003352:	b480      	push	{r7}
 8003354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003356:	e7fe      	b.n	8003356 <BusFault_Handler+0x4>

08003358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800335c:	e7fe      	b.n	800335c <UsageFault_Handler+0x4>

0800335e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800335e:	b480      	push	{r7}
 8003360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
	...

0800336c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003370:	4802      	ldr	r0, [pc, #8]	; (800337c <DMA1_Channel1_IRQHandler+0x10>)
 8003372:	f001 fe9f 	bl	80050b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000770 	.word	0x20000770

08003380 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003384:	4802      	ldr	r0, [pc, #8]	; (8003390 <DMA1_Channel3_IRQHandler+0x10>)
 8003386:	f001 fe95 	bl	80050b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	2000096c 	.word	0x2000096c

08003394 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003398:	4803      	ldr	r0, [pc, #12]	; (80033a8 <DMA1_Channel5_IRQHandler+0x14>)
 800339a:	f001 fe8b 	bl	80050b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  BLEDMA_IrqHandler(&bluetooth);
 800339e:	4803      	ldr	r0, [pc, #12]	; (80033ac <DMA1_Channel5_IRQHandler+0x18>)
 80033a0:	f7fd fed4 	bl	800114c <BLEDMA_IrqHandler>
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80033a4:	bf00      	nop
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000928 	.word	0x20000928
 80033ac:	20000f18 	.word	0x20000f18

080033b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033b4:	4802      	ldr	r0, [pc, #8]	; (80033c0 <TIM1_UP_IRQHandler+0x10>)
 80033b6:	f003 fef1 	bl	800719c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200010a4 	.word	0x200010a4

080033c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033c8:	4802      	ldr	r0, [pc, #8]	; (80033d4 <TIM3_IRQHandler+0x10>)
 80033ca:	f003 fee7 	bl	800719c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000850 	.word	0x20000850

080033d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033dc:	4803      	ldr	r0, [pc, #12]	; (80033ec <USART1_IRQHandler+0x14>)
 80033de:	f004 ff1b 	bl	8008218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  BLEUSART_IrqHandler(&bluetooth);
 80033e2:	4803      	ldr	r0, [pc, #12]	; (80033f0 <USART1_IRQHandler+0x18>)
 80033e4:	f7fd fe72 	bl	80010cc <BLEUSART_IrqHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80033e8:	bf00      	nop
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000898 	.word	0x20000898
 80033f0:	20000f18 	.word	0x20000f18

080033f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033fc:	4a14      	ldr	r2, [pc, #80]	; (8003450 <_sbrk+0x5c>)
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <_sbrk+0x60>)
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003408:	4b13      	ldr	r3, [pc, #76]	; (8003458 <_sbrk+0x64>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003410:	4b11      	ldr	r3, [pc, #68]	; (8003458 <_sbrk+0x64>)
 8003412:	4a12      	ldr	r2, [pc, #72]	; (800345c <_sbrk+0x68>)
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <_sbrk+0x64>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4413      	add	r3, r2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	429a      	cmp	r2, r3
 8003422:	d207      	bcs.n	8003434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003424:	f008 fefa 	bl	800c21c <__errno>
 8003428:	4603      	mov	r3, r0
 800342a:	220c      	movs	r2, #12
 800342c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800342e:	f04f 33ff 	mov.w	r3, #4294967295
 8003432:	e009      	b.n	8003448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <_sbrk+0x64>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <_sbrk+0x64>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4413      	add	r3, r2
 8003442:	4a05      	ldr	r2, [pc, #20]	; (8003458 <_sbrk+0x64>)
 8003444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003446:	68fb      	ldr	r3, [r7, #12]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20005000 	.word	0x20005000
 8003454:	00000400 	.word	0x00000400
 8003458:	200010ec 	.word	0x200010ec
 800345c:	20002118 	.word	0x20002118

08003460 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800346c:	f7ff fff8 	bl	8003460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003470:	480b      	ldr	r0, [pc, #44]	; (80034a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003472:	490c      	ldr	r1, [pc, #48]	; (80034a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003474:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003478:	e002      	b.n	8003480 <LoopCopyDataInit>

0800347a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800347a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800347c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800347e:	3304      	adds	r3, #4

08003480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003484:	d3f9      	bcc.n	800347a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003488:	4c09      	ldr	r4, [pc, #36]	; (80034b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800348a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800348c:	e001      	b.n	8003492 <LoopFillZerobss>

0800348e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800348e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003490:	3204      	adds	r2, #4

08003492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003494:	d3fb      	bcc.n	800348e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003496:	f008 fec7 	bl	800c228 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800349a:	f7fe fc93 	bl	8001dc4 <main>
  bx lr
 800349e:	4770      	bx	lr
  ldr r0, =_sdata
 80034a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034a4:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 80034a8:	0800cdc4 	.word	0x0800cdc4
  ldr r2, =_sbss
 80034ac:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 80034b0:	20002118 	.word	0x20002118

080034b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034b4:	e7fe      	b.n	80034b4 <ADC1_2_IRQHandler>
	...

080034b8 <StartBluetooth>:

extern I2C_HandleTypeDef hi2c1;

//Callback da TaskAplicacao
void StartBluetooth(void const * argument)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af02      	add	r7, sp, #8
 80034be:	6078      	str	r0, [r7, #4]
	//	initBluetooth(); // cpf ana laurindo 3713 45 31 015

	//inicializacao do bluetooth
	BluetoothInit(&bluetooth, &huart1, &hdma_usart1_rx, &FilaRXBluetoothHandle,FilaTXBluetoothHandle);
 80034c0:	4b41      	ldr	r3, [pc, #260]	; (80035c8 <StartBluetooth+0x110>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	4b41      	ldr	r3, [pc, #260]	; (80035cc <StartBluetooth+0x114>)
 80034c8:	4a41      	ldr	r2, [pc, #260]	; (80035d0 <StartBluetooth+0x118>)
 80034ca:	4942      	ldr	r1, [pc, #264]	; (80035d4 <StartBluetooth+0x11c>)
 80034cc:	4842      	ldr	r0, [pc, #264]	; (80035d8 <StartBluetooth+0x120>)
 80034ce:	f7fd fd1b 	bl	8000f08 <BluetoothInit>

	//inicializacao do hardware
	//	Inicia_HM10(&bluetooth);
	iniciaBleHm10(&bluetooth);
 80034d2:	4841      	ldr	r0, [pc, #260]	; (80035d8 <StartBluetooth+0x120>)
 80034d4:	f7fe f884 	bl	80015e0 <iniciaBleHm10>

	//possiveis comandos a serem recebidos pelo bluetooth
	BluetoothAddComp(&bluetooth, &BLEAtualizaRealtime, 	"RX_SOLICITA_REALTIME", 	RX_SOLICITA_REALTIME, 		ComandoBasico);//identifica criticidade do comando no DMA_UART
 80034d8:	2301      	movs	r3, #1
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2315      	movs	r3, #21
 80034de:	4a3f      	ldr	r2, [pc, #252]	; (80035dc <StartBluetooth+0x124>)
 80034e0:	493f      	ldr	r1, [pc, #252]	; (80035e0 <StartBluetooth+0x128>)
 80034e2:	483d      	ldr	r0, [pc, #244]	; (80035d8 <StartBluetooth+0x120>)
 80034e4:	f7fd fd3e 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESolicitaSincronia,	"RX_SOLICITA_SINCRONIA", 	RX_SOLICITA_SINCRONIA, 		ComandoBasico);//identifica criticidade do comando no DMA_UART
 80034e8:	2301      	movs	r3, #1
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	2317      	movs	r3, #23
 80034ee:	4a3d      	ldr	r2, [pc, #244]	; (80035e4 <StartBluetooth+0x12c>)
 80034f0:	493d      	ldr	r1, [pc, #244]	; (80035e8 <StartBluetooth+0x130>)
 80034f2:	4839      	ldr	r0, [pc, #228]	; (80035d8 <StartBluetooth+0x120>)
 80034f4:	f7fd fd36 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAlteraLimiteTemp, 	"RX_ALTERA_VALOR_LIMITE", 	RX_LIMITE_TEMPERATURA,		ComandoBasico);//identifica criticidade do comando no DMA_UART
 80034f8:	2301      	movs	r3, #1
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	2326      	movs	r3, #38	; 0x26
 80034fe:	4a3b      	ldr	r2, [pc, #236]	; (80035ec <StartBluetooth+0x134>)
 8003500:	493b      	ldr	r1, [pc, #236]	; (80035f0 <StartBluetooth+0x138>)
 8003502:	4835      	ldr	r0, [pc, #212]	; (80035d8 <StartBluetooth+0x120>)
 8003504:	f7fd fd2e 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAtualizaDataHora, 	"RX_ATUALIZA_HORA", 		RX_ATUALIZA_HORA,			ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003508:	2301      	movs	r3, #1
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	2303      	movs	r3, #3
 800350e:	4a39      	ldr	r2, [pc, #228]	; (80035f4 <StartBluetooth+0x13c>)
 8003510:	4939      	ldr	r1, [pc, #228]	; (80035f8 <StartBluetooth+0x140>)
 8003512:	4831      	ldr	r0, [pc, #196]	; (80035d8 <StartBluetooth+0x120>)
 8003514:	f7fd fd26 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERestaura, 			"RX_RESTAURA", 				RX_RESTAURA,				ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003518:	2301      	movs	r3, #1
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	2310      	movs	r3, #16
 800351e:	4a37      	ldr	r2, [pc, #220]	; (80035fc <StartBluetooth+0x144>)
 8003520:	4937      	ldr	r1, [pc, #220]	; (8003600 <StartBluetooth+0x148>)
 8003522:	482d      	ldr	r0, [pc, #180]	; (80035d8 <StartBluetooth+0x120>)
 8003524:	f7fd fd1e 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEPedeSenha,   		"RX_PEDE_SENHA",  			RX_PEDE_SENHA,   			ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003528:	2301      	movs	r3, #1
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2342      	movs	r3, #66	; 0x42
 800352e:	4a35      	ldr	r2, [pc, #212]	; (8003604 <StartBluetooth+0x14c>)
 8003530:	4935      	ldr	r1, [pc, #212]	; (8003608 <StartBluetooth+0x150>)
 8003532:	4829      	ldr	r0, [pc, #164]	; (80035d8 <StartBluetooth+0x120>)
 8003534:	f7fd fd16 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERecebeuSenha,     	"RX_RECEBEU_SENHA",        	RX_RECEBEU_SENHA,          	ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003538:	2301      	movs	r3, #1
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	2340      	movs	r3, #64	; 0x40
 800353e:	4a33      	ldr	r2, [pc, #204]	; (800360c <StartBluetooth+0x154>)
 8003540:	4933      	ldr	r1, [pc, #204]	; (8003610 <StartBluetooth+0x158>)
 8003542:	4825      	ldr	r0, [pc, #148]	; (80035d8 <StartBluetooth+0x120>)
 8003544:	f7fd fd0e 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTeto,     		"RX_SP_TEMP_TETO",        	RX_SP_TEMP_TETO,          	ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003548:	2301      	movs	r3, #1
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	2321      	movs	r3, #33	; 0x21
 800354e:	4a31      	ldr	r2, [pc, #196]	; (8003614 <StartBluetooth+0x15c>)
 8003550:	4931      	ldr	r1, [pc, #196]	; (8003618 <StartBluetooth+0x160>)
 8003552:	4821      	ldr	r0, [pc, #132]	; (80035d8 <StartBluetooth+0x120>)
 8003554:	f7fd fd06 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPLastro,     		"RX_SP_TEMP_LASTRO",       	RX_SP_TEMP_LASTRO,          ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003558:	2301      	movs	r3, #1
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	2322      	movs	r3, #34	; 0x22
 800355e:	4a2f      	ldr	r2, [pc, #188]	; (800361c <StartBluetooth+0x164>)
 8003560:	492f      	ldr	r1, [pc, #188]	; (8003620 <StartBluetooth+0x168>)
 8003562:	481d      	ldr	r0, [pc, #116]	; (80035d8 <StartBluetooth+0x120>)
 8003564:	f7fd fcfe 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTempo,     		"RX_SP_TEMPO",       		RX_SP_TEMPO,        		ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003568:	2301      	movs	r3, #1
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	2323      	movs	r3, #35	; 0x23
 800356e:	4a2d      	ldr	r2, [pc, #180]	; (8003624 <StartBluetooth+0x16c>)
 8003570:	492d      	ldr	r1, [pc, #180]	; (8003628 <StartBluetooth+0x170>)
 8003572:	4819      	ldr	r0, [pc, #100]	; (80035d8 <StartBluetooth+0x120>)
 8003574:	f7fd fcf6 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEToggleTempo,     	"RX_TOGGLE_TEMPO",       	RX_TOGGLE_TEMPO,        	ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003578:	2301      	movs	r3, #1
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	2324      	movs	r3, #36	; 0x24
 800357e:	4a2b      	ldr	r2, [pc, #172]	; (800362c <StartBluetooth+0x174>)
 8003580:	492b      	ldr	r1, [pc, #172]	; (8003630 <StartBluetooth+0x178>)
 8003582:	4815      	ldr	r0, [pc, #84]	; (80035d8 <StartBluetooth+0x120>)
 8003584:	f7fd fcee 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEReceita,     		"RX_RECEITA",     		  	RX_RECEITA,        			ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003588:	2301      	movs	r3, #1
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2325      	movs	r3, #37	; 0x25
 800358e:	4a29      	ldr	r2, [pc, #164]	; (8003634 <StartBluetooth+0x17c>)
 8003590:	4929      	ldr	r1, [pc, #164]	; (8003638 <StartBluetooth+0x180>)
 8003592:	4811      	ldr	r0, [pc, #68]	; (80035d8 <StartBluetooth+0x120>)
 8003594:	f7fd fce6 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOn,     		"RX_LIGA_LAMPADA",     	  	RX_LIGA_LAMPADA,     		ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003598:	2301      	movs	r3, #1
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2327      	movs	r3, #39	; 0x27
 800359e:	4a27      	ldr	r2, [pc, #156]	; (800363c <StartBluetooth+0x184>)
 80035a0:	4927      	ldr	r1, [pc, #156]	; (8003640 <StartBluetooth+0x188>)
 80035a2:	480d      	ldr	r0, [pc, #52]	; (80035d8 <StartBluetooth+0x120>)
 80035a4:	f7fd fcde 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOff,     		"RX_DESLIGA_LAMPADA",    	RX_DESLIGA_LAMPADA,  		ComandoBasico);//identifica criticidade do comando no DMA_UART
 80035a8:	2301      	movs	r3, #1
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	2328      	movs	r3, #40	; 0x28
 80035ae:	4a25      	ldr	r2, [pc, #148]	; (8003644 <StartBluetooth+0x18c>)
 80035b0:	4925      	ldr	r1, [pc, #148]	; (8003648 <StartBluetooth+0x190>)
 80035b2:	4809      	ldr	r0, [pc, #36]	; (80035d8 <StartBluetooth+0x120>)
 80035b4:	f7fd fcd6 	bl	8000f64 <BluetoothAddComp>

	/* Infinite loop */
	for(;;)
	{
		//----------------bluetooth----RX------------//            .S.Tem de ser aqui, pois ProcessaComando fica bloqueada em caso de erro
		rxBluetooth();
 80035b8:	f000 f9be 	bl	8003938 <rxBluetooth>

		//----------------bluetooth----TX------------//
		txBluetooth();
 80035bc:	f000 f846 	bl	800364c <txBluetooth>

		/* USER CODE END 5 */
		osDelay(50);
 80035c0:	2032      	movs	r0, #50	; 0x32
 80035c2:	f005 fe24 	bl	800920e <osDelay>
		rxBluetooth();
 80035c6:	e7f7      	b.n	80035b8 <StartBluetooth+0x100>
 80035c8:	20000f08 	.word	0x20000f08
 80035cc:	20000f0c 	.word	0x20000f0c
 80035d0:	20000928 	.word	0x20000928
 80035d4:	20000898 	.word	0x20000898
 80035d8:	20000f18 	.word	0x20000f18
 80035dc:	0800cbd4 	.word	0x0800cbd4
 80035e0:	200010f0 	.word	0x200010f0
 80035e4:	0800cbec 	.word	0x0800cbec
 80035e8:	200010f8 	.word	0x200010f8
 80035ec:	0800cc04 	.word	0x0800cc04
 80035f0:	20001108 	.word	0x20001108
 80035f4:	0800cc1c 	.word	0x0800cc1c
 80035f8:	20001100 	.word	0x20001100
 80035fc:	0800cc30 	.word	0x0800cc30
 8003600:	20001110 	.word	0x20001110
 8003604:	0800cc3c 	.word	0x0800cc3c
 8003608:	20001150 	.word	0x20001150
 800360c:	0800cc4c 	.word	0x0800cc4c
 8003610:	20001158 	.word	0x20001158
 8003614:	0800cc60 	.word	0x0800cc60
 8003618:	20001118 	.word	0x20001118
 800361c:	0800cc70 	.word	0x0800cc70
 8003620:	20001120 	.word	0x20001120
 8003624:	0800cc84 	.word	0x0800cc84
 8003628:	20001138 	.word	0x20001138
 800362c:	0800cc90 	.word	0x0800cc90
 8003630:	20001128 	.word	0x20001128
 8003634:	0800cca0 	.word	0x0800cca0
 8003638:	20001130 	.word	0x20001130
 800363c:	0800ccac 	.word	0x0800ccac
 8003640:	20001140 	.word	0x20001140
 8003644:	0800ccbc 	.word	0x0800ccbc
 8003648:	20001148 	.word	0x20001148

0800364c <txBluetooth>:
	BluetoothAddComp(&bluetooth, &BLEReceita,     		"RX_RECEITA",     		  	RX_RECEITA,        			ComandoBasico);//identifica criticidade do comando no DMA_UART
	BluetoothAddComp(&bluetooth, &BLELightOn,     		"RX_LIGA_LAMPADA",     	  	RX_LIGA_LAMPADA,     		ComandoBasico);//identifica criticidade do comando no DMA_UART
	BluetoothAddComp(&bluetooth, &BLELightOff,     		"RX_DESLIGA_LAMPADA",    	RX_DESLIGA_LAMPADA,  		ComandoBasico);//identifica criticidade do comando no DMA_UART
}

void txBluetooth(void){
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
	osEvent  evttx;
	evttx = osMessageGet(FilaTXBluetoothHandle, 0);
 8003652:	4bad      	ldr	r3, [pc, #692]	; (8003908 <txBluetooth+0x2bc>)
 8003654:	6819      	ldr	r1, [r3, #0]
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	2200      	movs	r2, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f005 ff12 	bl	8009484 <osMessageGet>
	if (evttx.status == osEventMessage) {
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b10      	cmp	r3, #16
 8003664:	f040 814b 	bne.w	80038fe <txBluetooth+0x2b2>
		switch ((unsigned int)evttx.value.p) {
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b8e      	cmp	r3, #142	; 0x8e
 800366c:	f200 8147 	bhi.w	80038fe <txBluetooth+0x2b2>
 8003670:	2b8b      	cmp	r3, #139	; 0x8b
 8003672:	d205      	bcs.n	8003680 <txBluetooth+0x34>
 8003674:	2b16      	cmp	r3, #22
 8003676:	d013      	beq.n	80036a0 <txBluetooth+0x54>
 8003678:	2b18      	cmp	r3, #24
 800367a:	f000 80a7 	beq.w	80037cc <txBluetooth+0x180>
			HAL_Delay(30);
			Envia_texto_UART("AT",50);//DESCONECTA
			break;
		}
	}
}
 800367e:	e13e      	b.n	80038fe <txBluetooth+0x2b2>
		switch ((unsigned int)evttx.value.p) {
 8003680:	3b8b      	subs	r3, #139	; 0x8b
 8003682:	2b03      	cmp	r3, #3
 8003684:	f200 813b 	bhi.w	80038fe <txBluetooth+0x2b2>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <txBluetooth+0x44>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	08003843 	.word	0x08003843
 8003694:	08003871 	.word	0x08003871
 8003698:	080038ad 	.word	0x080038ad
 800369c:	080038cf 	.word	0x080038cf
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80036a0:	4b9a      	ldr	r3, [pc, #616]	; (800390c <txBluetooth+0x2c0>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]
			Buffer[1] 	= 0x16;									// FUNÇÃO -
 80036a6:	4b99      	ldr	r3, [pc, #612]	; (800390c <txBluetooth+0x2c0>)
 80036a8:	2216      	movs	r2, #22
 80036aa:	705a      	strb	r2, [r3, #1]
			Buffer[2] 	= Erro.byte;							// Conjunto de erros
 80036ac:	4b98      	ldr	r3, [pc, #608]	; (8003910 <txBluetooth+0x2c4>)
 80036ae:	781a      	ldrb	r2, [r3, #0]
 80036b0:	4b96      	ldr	r3, [pc, #600]	; (800390c <txBluetooth+0x2c0>)
 80036b2:	709a      	strb	r2, [r3, #2]
			Buffer[3] 	= PrimitiveStates.MaquinaMaster;		// State da maquina
 80036b4:	4b97      	ldr	r3, [pc, #604]	; (8003914 <txBluetooth+0x2c8>)
 80036b6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80036ba:	4b94      	ldr	r3, [pc, #592]	; (800390c <txBluetooth+0x2c0>)
 80036bc:	70da      	strb	r2, [r3, #3]
			Buffer[4] 	= (uint16_t)PrimitiveStates.RealtimeTeto 		>>8;
 80036be:	4b95      	ldr	r3, [pc, #596]	; (8003914 <txBluetooth+0x2c8>)
 80036c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	f7fd f9a0 	bl	8000a0c <__aeabi_d2uiz>
 80036cc:	4603      	mov	r3, r0
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	0a1b      	lsrs	r3, r3, #8
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4b8d      	ldr	r3, [pc, #564]	; (800390c <txBluetooth+0x2c0>)
 80036d8:	711a      	strb	r2, [r3, #4]
			Buffer[5] 	= (uint16_t)PrimitiveStates.RealtimeTeto 		& 0x00FF;
 80036da:	4b8e      	ldr	r3, [pc, #568]	; (8003914 <txBluetooth+0x2c8>)
 80036dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	f7fd f992 	bl	8000a0c <__aeabi_d2uiz>
 80036e8:	4603      	mov	r3, r0
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b87      	ldr	r3, [pc, #540]	; (800390c <txBluetooth+0x2c0>)
 80036f0:	715a      	strb	r2, [r3, #5]
			Buffer[6] 	= (uint16_t)PrimitiveStates.SetPointTeto 		>>8;
 80036f2:	4b88      	ldr	r3, [pc, #544]	; (8003914 <txBluetooth+0x2c8>)
 80036f4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	f7fd f986 	bl	8000a0c <__aeabi_d2uiz>
 8003700:	4603      	mov	r3, r0
 8003702:	b29b      	uxth	r3, r3
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	b29b      	uxth	r3, r3
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b80      	ldr	r3, [pc, #512]	; (800390c <txBluetooth+0x2c0>)
 800370c:	719a      	strb	r2, [r3, #6]
			Buffer[7] 	= (uint16_t)PrimitiveStates.SetPointTeto 		& 0x00FF;
 800370e:	4b81      	ldr	r3, [pc, #516]	; (8003914 <txBluetooth+0x2c8>)
 8003710:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	f7fd f978 	bl	8000a0c <__aeabi_d2uiz>
 800371c:	4603      	mov	r3, r0
 800371e:	b29b      	uxth	r3, r3
 8003720:	b2da      	uxtb	r2, r3
 8003722:	4b7a      	ldr	r3, [pc, #488]	; (800390c <txBluetooth+0x2c0>)
 8003724:	71da      	strb	r2, [r3, #7]
			Buffer[8] 	= (uint16_t)PrimitiveStates.RealtimeLastro 	>>8;
 8003726:	4b7b      	ldr	r3, [pc, #492]	; (8003914 <txBluetooth+0x2c8>)
 8003728:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800372c:	4610      	mov	r0, r2
 800372e:	4619      	mov	r1, r3
 8003730:	f7fd f96c 	bl	8000a0c <__aeabi_d2uiz>
 8003734:	4603      	mov	r3, r0
 8003736:	b29b      	uxth	r3, r3
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	b29b      	uxth	r3, r3
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4b73      	ldr	r3, [pc, #460]	; (800390c <txBluetooth+0x2c0>)
 8003740:	721a      	strb	r2, [r3, #8]
			Buffer[9] 	= (uint16_t)PrimitiveStates.RealtimeLastro 	& 0x00FF;
 8003742:	4b74      	ldr	r3, [pc, #464]	; (8003914 <txBluetooth+0x2c8>)
 8003744:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003748:	4610      	mov	r0, r2
 800374a:	4619      	mov	r1, r3
 800374c:	f7fd f95e 	bl	8000a0c <__aeabi_d2uiz>
 8003750:	4603      	mov	r3, r0
 8003752:	b29b      	uxth	r3, r3
 8003754:	b2da      	uxtb	r2, r3
 8003756:	4b6d      	ldr	r3, [pc, #436]	; (800390c <txBluetooth+0x2c0>)
 8003758:	725a      	strb	r2, [r3, #9]
			Buffer[10] 	= (uint16_t)PrimitiveStates.SetPointLastro 	>>8;
 800375a:	4b6e      	ldr	r3, [pc, #440]	; (8003914 <txBluetooth+0x2c8>)
 800375c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003760:	4610      	mov	r0, r2
 8003762:	4619      	mov	r1, r3
 8003764:	f7fd f952 	bl	8000a0c <__aeabi_d2uiz>
 8003768:	4603      	mov	r3, r0
 800376a:	b29b      	uxth	r3, r3
 800376c:	0a1b      	lsrs	r3, r3, #8
 800376e:	b29b      	uxth	r3, r3
 8003770:	b2da      	uxtb	r2, r3
 8003772:	4b66      	ldr	r3, [pc, #408]	; (800390c <txBluetooth+0x2c0>)
 8003774:	729a      	strb	r2, [r3, #10]
			Buffer[11] 	= (uint16_t)PrimitiveStates.SetPointLastro 	& 0x00FF;
 8003776:	4b67      	ldr	r3, [pc, #412]	; (8003914 <txBluetooth+0x2c8>)
 8003778:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800377c:	4610      	mov	r0, r2
 800377e:	4619      	mov	r1, r3
 8003780:	f7fd f944 	bl	8000a0c <__aeabi_d2uiz>
 8003784:	4603      	mov	r3, r0
 8003786:	b29b      	uxth	r3, r3
 8003788:	b2da      	uxtb	r2, r3
 800378a:	4b60      	ldr	r3, [pc, #384]	; (800390c <txBluetooth+0x2c0>)
 800378c:	72da      	strb	r2, [r3, #11]
			Buffer[12] 	= PrimitiveStates.RTTimerMinutos;
 800378e:	4b61      	ldr	r3, [pc, #388]	; (8003914 <txBluetooth+0x2c8>)
 8003790:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8003794:	4b5d      	ldr	r3, [pc, #372]	; (800390c <txBluetooth+0x2c0>)
 8003796:	731a      	strb	r2, [r3, #12]
			Buffer[13] 	= PrimitiveStates.RTTimerSegundos;
 8003798:	4b5e      	ldr	r3, [pc, #376]	; (8003914 <txBluetooth+0x2c8>)
 800379a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800379e:	4b5b      	ldr	r3, [pc, #364]	; (800390c <txBluetooth+0x2c0>)
 80037a0:	735a      	strb	r2, [r3, #13]
			Buffer[14] 	= PrimitiveStates.SPTimerMinutos;
 80037a2:	4b5c      	ldr	r3, [pc, #368]	; (8003914 <txBluetooth+0x2c8>)
 80037a4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80037a8:	4b58      	ldr	r3, [pc, #352]	; (800390c <txBluetooth+0x2c0>)
 80037aa:	739a      	strb	r2, [r3, #14]
			Buffer[15] 	= PrimitiveStates.SPTimerSegundos;
 80037ac:	4b59      	ldr	r3, [pc, #356]	; (8003914 <txBluetooth+0x2c8>)
 80037ae:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80037b2:	4b56      	ldr	r3, [pc, #344]	; (800390c <txBluetooth+0x2c0>)
 80037b4:	73da      	strb	r2, [r3, #15]
			Buffer[16] 	= PrimitiveStates.stateTimer;
 80037b6:	4b57      	ldr	r3, [pc, #348]	; (8003914 <txBluetooth+0x2c8>)
 80037b8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80037bc:	461a      	mov	r2, r3
 80037be:	4b53      	ldr	r3, [pc, #332]	; (800390c <txBluetooth+0x2c0>)
 80037c0:	741a      	strb	r2, [r3, #16]
			BluetoothEnviaComando(Buffer, 16);
 80037c2:	2110      	movs	r1, #16
 80037c4:	4851      	ldr	r0, [pc, #324]	; (800390c <txBluetooth+0x2c0>)
 80037c6:	f7fd fe39 	bl	800143c <BluetoothEnviaComando>
			break;
 80037ca:	e098      	b.n	80038fe <txBluetooth+0x2b2>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80037cc:	4b4f      	ldr	r3, [pc, #316]	; (800390c <txBluetooth+0x2c0>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]
			Buffer[1] 	= 0x18;									// FUNÇÃO -
 80037d2:	4b4e      	ldr	r3, [pc, #312]	; (800390c <txBluetooth+0x2c0>)
 80037d4:	2218      	movs	r2, #24
 80037d6:	705a      	strb	r2, [r3, #1]
			Buffer[2] 	= 0x01;									// Modelo
 80037d8:	4b4c      	ldr	r3, [pc, #304]	; (800390c <txBluetooth+0x2c0>)
 80037da:	2201      	movs	r2, #1
 80037dc:	709a      	strb	r2, [r3, #2]
			Buffer[3] 	= (uint8_t)tempoDelayLuz.valor;
 80037de:	4b4e      	ldr	r3, [pc, #312]	; (8003918 <txBluetooth+0x2cc>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	4b49      	ldr	r3, [pc, #292]	; (800390c <txBluetooth+0x2c0>)
 80037e6:	70da      	strb	r2, [r3, #3]
			Buffer[4] 	= (uint8_t)LimiteTemperatura.valor;
 80037e8:	4b4c      	ldr	r3, [pc, #304]	; (800391c <txBluetooth+0x2d0>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4b47      	ldr	r3, [pc, #284]	; (800390c <txBluetooth+0x2c0>)
 80037f0:	711a      	strb	r2, [r3, #4]
			Buffer[5] 	= (uint8_t)instalacaoDia.valor;
 80037f2:	4b4b      	ldr	r3, [pc, #300]	; (8003920 <txBluetooth+0x2d4>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	4b44      	ldr	r3, [pc, #272]	; (800390c <txBluetooth+0x2c0>)
 80037fa:	715a      	strb	r2, [r3, #5]
			Buffer[6] 	= (uint8_t)instalacaoMes.valor;
 80037fc:	4b49      	ldr	r3, [pc, #292]	; (8003924 <txBluetooth+0x2d8>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4b42      	ldr	r3, [pc, #264]	; (800390c <txBluetooth+0x2c0>)
 8003804:	719a      	strb	r2, [r3, #6]
			Buffer[7] 	= (uint8_t)instalacaoAno.valor;
 8003806:	4b48      	ldr	r3, [pc, #288]	; (8003928 <txBluetooth+0x2dc>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	4b3f      	ldr	r3, [pc, #252]	; (800390c <txBluetooth+0x2c0>)
 800380e:	71da      	strb	r2, [r3, #7]
			Buffer[8] 	= (uint8_t)horimetroHoras.valor >> 8;
 8003810:	4b46      	ldr	r3, [pc, #280]	; (800392c <txBluetooth+0x2e0>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	121b      	asrs	r3, r3, #8
 8003818:	b2da      	uxtb	r2, r3
 800381a:	4b3c      	ldr	r3, [pc, #240]	; (800390c <txBluetooth+0x2c0>)
 800381c:	721a      	strb	r2, [r3, #8]
			Buffer[9] 	= (uint8_t)horimetroHoras.valor & 0x00FF;
 800381e:	4b43      	ldr	r3, [pc, #268]	; (800392c <txBluetooth+0x2e0>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	4b39      	ldr	r3, [pc, #228]	; (800390c <txBluetooth+0x2c0>)
 8003826:	725a      	strb	r2, [r3, #9]
			Buffer[10] 	= (uint8_t)horimetroMinutos.valor;
 8003828:	4b41      	ldr	r3, [pc, #260]	; (8003930 <txBluetooth+0x2e4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	4b37      	ldr	r3, [pc, #220]	; (800390c <txBluetooth+0x2c0>)
 8003830:	729a      	strb	r2, [r3, #10]
			Buffer[11]	= VERSAO;
 8003832:	4b36      	ldr	r3, [pc, #216]	; (800390c <txBluetooth+0x2c0>)
 8003834:	2201      	movs	r2, #1
 8003836:	72da      	strb	r2, [r3, #11]
			BluetoothEnviaComando(Buffer, 11);
 8003838:	210b      	movs	r1, #11
 800383a:	4834      	ldr	r0, [pc, #208]	; (800390c <txBluetooth+0x2c0>)
 800383c:	f7fd fdfe 	bl	800143c <BluetoothEnviaComando>
			break;
 8003840:	e05d      	b.n	80038fe <txBluetooth+0x2b2>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003842:	4b32      	ldr	r3, [pc, #200]	; (800390c <txBluetooth+0x2c0>)
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
			Buffer[1] 	= 0x51;									// FUNÇÃO -
 8003848:	4b30      	ldr	r3, [pc, #192]	; (800390c <txBluetooth+0x2c0>)
 800384a:	2251      	movs	r2, #81	; 0x51
 800384c:	705a      	strb	r2, [r3, #1]
			Buffer[2] 	= 0x51;									// FUNÇÃO -
 800384e:	4b2f      	ldr	r3, [pc, #188]	; (800390c <txBluetooth+0x2c0>)
 8003850:	2251      	movs	r2, #81	; 0x51
 8003852:	709a      	strb	r2, [r3, #2]
			Buffer[3] 	= 0x01;
 8003854:	4b2d      	ldr	r3, [pc, #180]	; (800390c <txBluetooth+0x2c0>)
 8003856:	2201      	movs	r2, #1
 8003858:	70da      	strb	r2, [r3, #3]
			Buffer[4] 	= 0x01;//todo implementar - salvar ela na eeprom quando ble iniciado
 800385a:	4b2c      	ldr	r3, [pc, #176]	; (800390c <txBluetooth+0x2c0>)
 800385c:	2201      	movs	r2, #1
 800385e:	711a      	strb	r2, [r3, #4]
			Buffer[5] 	= 0x01;//todo implementar - salvar ela na eeprom quando ble iniciado
 8003860:	4b2a      	ldr	r3, [pc, #168]	; (800390c <txBluetooth+0x2c0>)
 8003862:	2201      	movs	r2, #1
 8003864:	715a      	strb	r2, [r3, #5]
			BluetoothEnviaComando(Buffer, 5);
 8003866:	2105      	movs	r1, #5
 8003868:	4828      	ldr	r0, [pc, #160]	; (800390c <txBluetooth+0x2c0>)
 800386a:	f7fd fde7 	bl	800143c <BluetoothEnviaComando>
			break;
 800386e:	e046      	b.n	80038fe <txBluetooth+0x2b2>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003870:	4b26      	ldr	r3, [pc, #152]	; (800390c <txBluetooth+0x2c0>)
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
			Buffer[1] 	= 0x51;									// FUNÇÃO -
 8003876:	4b25      	ldr	r3, [pc, #148]	; (800390c <txBluetooth+0x2c0>)
 8003878:	2251      	movs	r2, #81	; 0x51
 800387a:	705a      	strb	r2, [r3, #1]
			Buffer[2] 	= 0x51;									// FUNÇÃO -
 800387c:	4b23      	ldr	r3, [pc, #140]	; (800390c <txBluetooth+0x2c0>)
 800387e:	2251      	movs	r2, #81	; 0x51
 8003880:	709a      	strb	r2, [r3, #2]
			Buffer[3] 	= 0x00;
 8003882:	4b22      	ldr	r3, [pc, #136]	; (800390c <txBluetooth+0x2c0>)
 8003884:	2200      	movs	r2, #0
 8003886:	70da      	strb	r2, [r3, #3]
			Buffer[4] 	= 0x00;
 8003888:	4b20      	ldr	r3, [pc, #128]	; (800390c <txBluetooth+0x2c0>)
 800388a:	2200      	movs	r2, #0
 800388c:	711a      	strb	r2, [r3, #4]
			Buffer[5] 	= 0x00;
 800388e:	4b1f      	ldr	r3, [pc, #124]	; (800390c <txBluetooth+0x2c0>)
 8003890:	2200      	movs	r2, #0
 8003892:	715a      	strb	r2, [r3, #5]
			BluetoothEnviaComando(Buffer, 5);
 8003894:	2105      	movs	r1, #5
 8003896:	481d      	ldr	r0, [pc, #116]	; (800390c <txBluetooth+0x2c0>)
 8003898:	f7fd fdd0 	bl	800143c <BluetoothEnviaComando>
			HAL_Delay(30);
 800389c:	201e      	movs	r0, #30
 800389e:	f000 fd47 	bl	8004330 <HAL_Delay>
			Envia_texto_UART("AT",50);//DESCONECTA
 80038a2:	2132      	movs	r1, #50	; 0x32
 80038a4:	4823      	ldr	r0, [pc, #140]	; (8003934 <txBluetooth+0x2e8>)
 80038a6:	f7fd fe45 	bl	8001534 <Envia_texto_UART>
			break;
 80038aa:	e028      	b.n	80038fe <txBluetooth+0x2b2>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <txBluetooth+0x2c0>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
			Buffer[1] 	= 0x52;									// FUNÇÃO -
 80038b2:	4b16      	ldr	r3, [pc, #88]	; (800390c <txBluetooth+0x2c0>)
 80038b4:	2252      	movs	r2, #82	; 0x52
 80038b6:	705a      	strb	r2, [r3, #1]
			Buffer[2] 	= 0x52;									// FUNÇÃO -
 80038b8:	4b14      	ldr	r3, [pc, #80]	; (800390c <txBluetooth+0x2c0>)
 80038ba:	2252      	movs	r2, #82	; 0x52
 80038bc:	709a      	strb	r2, [r3, #2]
			Buffer[3] 	= 0x01;									//resultado ok
 80038be:	4b13      	ldr	r3, [pc, #76]	; (800390c <txBluetooth+0x2c0>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	70da      	strb	r2, [r3, #3]
			BluetoothEnviaComando(Buffer, 3);
 80038c4:	2103      	movs	r1, #3
 80038c6:	4811      	ldr	r0, [pc, #68]	; (800390c <txBluetooth+0x2c0>)
 80038c8:	f7fd fdb8 	bl	800143c <BluetoothEnviaComando>
			break;
 80038cc:	e017      	b.n	80038fe <txBluetooth+0x2b2>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <txBluetooth+0x2c0>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
			Buffer[1] 	= 0x52;									// FUNÇÃO -
 80038d4:	4b0d      	ldr	r3, [pc, #52]	; (800390c <txBluetooth+0x2c0>)
 80038d6:	2252      	movs	r2, #82	; 0x52
 80038d8:	705a      	strb	r2, [r3, #1]
			Buffer[2] 	= 0x52;									// FUNÇÃO -
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <txBluetooth+0x2c0>)
 80038dc:	2252      	movs	r2, #82	; 0x52
 80038de:	709a      	strb	r2, [r3, #2]
			Buffer[3] 	= 0x00;									//resultado ok
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <txBluetooth+0x2c0>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	70da      	strb	r2, [r3, #3]
			BluetoothEnviaComando(Buffer, 3);
 80038e6:	2103      	movs	r1, #3
 80038e8:	4808      	ldr	r0, [pc, #32]	; (800390c <txBluetooth+0x2c0>)
 80038ea:	f7fd fda7 	bl	800143c <BluetoothEnviaComando>
			HAL_Delay(30);
 80038ee:	201e      	movs	r0, #30
 80038f0:	f000 fd1e 	bl	8004330 <HAL_Delay>
			Envia_texto_UART("AT",50);//DESCONECTA
 80038f4:	2132      	movs	r1, #50	; 0x32
 80038f6:	480f      	ldr	r0, [pc, #60]	; (8003934 <txBluetooth+0x2e8>)
 80038f8:	f7fd fe1c 	bl	8001534 <Envia_texto_UART>
			break;
 80038fc:	bf00      	nop
}
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000f08 	.word	0x20000f08
 800390c:	20001160 	.word	0x20001160
 8003910:	20001098 	.word	0x20001098
 8003914:	20001068 	.word	0x20001068
 8003918:	20000478 	.word	0x20000478
 800391c:	20000450 	.word	0x20000450
 8003920:	200003b0 	.word	0x200003b0
 8003924:	200003d8 	.word	0x200003d8
 8003928:	20000400 	.word	0x20000400
 800392c:	20000360 	.word	0x20000360
 8003930:	20000388 	.word	0x20000388
 8003934:	0800ccd0 	.word	0x0800ccd0

08003938 <rxBluetooth>:

void rxBluetooth(void){
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
	osEvent  evtrx;
	evtrx = osMessageGet(FilaRXBluetoothHandle, 0);
 800393e:	4bc5      	ldr	r3, [pc, #788]	; (8003c54 <rxBluetooth+0x31c>)
 8003940:	6819      	ldr	r1, [r3, #0]
 8003942:	1d3b      	adds	r3, r7, #4
 8003944:	2200      	movs	r2, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f005 fd9c 	bl	8009484 <osMessageGet>
	if (evtrx.status == osEventMessage) {
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b10      	cmp	r3, #16
 8003950:	f040 81f8 	bne.w	8003d44 <rxBluetooth+0x40c>
		//			switch ((unsigned int)evtrx.value.p) {
		switch (bluetooth._RxDataArr[1]) {
 8003954:	4bc0      	ldr	r3, [pc, #768]	; (8003c58 <rxBluetooth+0x320>)
 8003956:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800395a:	3b03      	subs	r3, #3
 800395c:	2b3f      	cmp	r3, #63	; 0x3f
 800395e:	f200 81f1 	bhi.w	8003d44 <rxBluetooth+0x40c>
 8003962:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <rxBluetooth+0x30>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	08003a89 	.word	0x08003a89
 800396c:	08003d45 	.word	0x08003d45
 8003970:	08003d45 	.word	0x08003d45
 8003974:	08003d45 	.word	0x08003d45
 8003978:	08003d45 	.word	0x08003d45
 800397c:	08003d45 	.word	0x08003d45
 8003980:	08003d45 	.word	0x08003d45
 8003984:	08003d45 	.word	0x08003d45
 8003988:	08003d45 	.word	0x08003d45
 800398c:	08003d45 	.word	0x08003d45
 8003990:	08003d45 	.word	0x08003d45
 8003994:	08003d45 	.word	0x08003d45
 8003998:	08003d45 	.word	0x08003d45
 800399c:	08003d43 	.word	0x08003d43
 80039a0:	08003d45 	.word	0x08003d45
 80039a4:	08003d45 	.word	0x08003d45
 80039a8:	08003d45 	.word	0x08003d45
 80039ac:	08003d45 	.word	0x08003d45
 80039b0:	08003a69 	.word	0x08003a69
 80039b4:	08003d45 	.word	0x08003d45
 80039b8:	08003a79 	.word	0x08003a79
 80039bc:	08003d45 	.word	0x08003d45
 80039c0:	08003d45 	.word	0x08003d45
 80039c4:	08003d45 	.word	0x08003d45
 80039c8:	08003d45 	.word	0x08003d45
 80039cc:	08003d45 	.word	0x08003d45
 80039d0:	08003d45 	.word	0x08003d45
 80039d4:	08003d45 	.word	0x08003d45
 80039d8:	08003d45 	.word	0x08003d45
 80039dc:	08003d45 	.word	0x08003d45
 80039e0:	08003ab7 	.word	0x08003ab7
 80039e4:	08003af3 	.word	0x08003af3
 80039e8:	08003b2f 	.word	0x08003b2f
 80039ec:	08003b6b 	.word	0x08003b6b
 80039f0:	08003ba9 	.word	0x08003ba9
 80039f4:	08003c75 	.word	0x08003c75
 80039f8:	08003c91 	.word	0x08003c91
 80039fc:	08003cb5 	.word	0x08003cb5
 8003a00:	08003d45 	.word	0x08003d45
 8003a04:	08003d45 	.word	0x08003d45
 8003a08:	08003d45 	.word	0x08003d45
 8003a0c:	08003d45 	.word	0x08003d45
 8003a10:	08003d45 	.word	0x08003d45
 8003a14:	08003d45 	.word	0x08003d45
 8003a18:	08003d45 	.word	0x08003d45
 8003a1c:	08003d45 	.word	0x08003d45
 8003a20:	08003d45 	.word	0x08003d45
 8003a24:	08003d45 	.word	0x08003d45
 8003a28:	08003d45 	.word	0x08003d45
 8003a2c:	08003d45 	.word	0x08003d45
 8003a30:	08003d45 	.word	0x08003d45
 8003a34:	08003d45 	.word	0x08003d45
 8003a38:	08003d45 	.word	0x08003d45
 8003a3c:	08003d45 	.word	0x08003d45
 8003a40:	08003d45 	.word	0x08003d45
 8003a44:	08003d45 	.word	0x08003d45
 8003a48:	08003d45 	.word	0x08003d45
 8003a4c:	08003d45 	.word	0x08003d45
 8003a50:	08003d45 	.word	0x08003d45
 8003a54:	08003d45 	.word	0x08003d45
 8003a58:	08003d45 	.word	0x08003d45
 8003a5c:	08003d07 	.word	0x08003d07
 8003a60:	08003d45 	.word	0x08003d45
 8003a64:	08003ce9 	.word	0x08003ce9
		case RX_SOLICITA_REALTIME:
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA, 0);
 8003a68:	4b7c      	ldr	r3, [pc, #496]	; (8003c5c <rxBluetooth+0x324>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2116      	movs	r1, #22
 8003a70:	4618      	mov	r0, r3
 8003a72:	f005 fcc7 	bl	8009404 <osMessagePut>
			break;
 8003a76:	e165      	b.n	8003d44 <rxBluetooth+0x40c>
		case RX_SOLICITA_SINCRONIA:
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003a78:	4b78      	ldr	r3, [pc, #480]	; (8003c5c <rxBluetooth+0x324>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2118      	movs	r1, #24
 8003a80:	4618      	mov	r0, r3
 8003a82:	f005 fcbf 	bl	8009404 <osMessagePut>
			break;
 8003a86:	e15d      	b.n	8003d44 <rxBluetooth+0x40c>
			//				sDate.Month 	= bluetooth._RxDataArr[4]; //mes p/atualizar
			//				sDate.Year 		= bluetooth._RxDataArr[5]; //ano p/atualizar
			//				sTime.Hours 	= bluetooth._RxDataArr[6]; //hora p/atualizar
			//				sTime.Minutes 	= bluetooth._RxDataArr[7]; //minuto p/atualizar
			//				sTime.Seconds 	= bluetooth._RxDataArr[8]; //segundos p/atualizar
			osMessagePut(FilaEepromHandle, CEepromAtualizaHora, 0);
 8003a88:	4b75      	ldr	r3, [pc, #468]	; (8003c60 <rxBluetooth+0x328>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2105      	movs	r1, #5
 8003a90:	4618      	mov	r0, r3
 8003a92:	f005 fcb7 	bl	8009404 <osMessagePut>

			MACRO_ENVIA_AKNOLADGE_(bluetooth._RxDataArr[1])
 8003a96:	4b70      	ldr	r3, [pc, #448]	; (8003c58 <rxBluetooth+0x320>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	721a      	strb	r2, [r3, #8]
 8003a9c:	4b6e      	ldr	r3, [pc, #440]	; (8003c58 <rxBluetooth+0x320>)
 8003a9e:	22ff      	movs	r2, #255	; 0xff
 8003aa0:	725a      	strb	r2, [r3, #9]
 8003aa2:	4b6d      	ldr	r3, [pc, #436]	; (8003c58 <rxBluetooth+0x320>)
 8003aa4:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8003aa8:	4b6b      	ldr	r3, [pc, #428]	; (8003c58 <rxBluetooth+0x320>)
 8003aaa:	729a      	strb	r2, [r3, #10]
 8003aac:	2103      	movs	r1, #3
 8003aae:	486d      	ldr	r0, [pc, #436]	; (8003c64 <rxBluetooth+0x32c>)
 8003ab0:	f7fd fd2c 	bl	800150c <Envia_bytes_UART>
			break;
 8003ab4:	e146      	b.n	8003d44 <rxBluetooth+0x40c>
			//				Maquina.Maquina_eeprom = EEPROM_HARD_RESET;
			//				MACRO_ENVIA_AKNOLADGE_(RX_RESTAURA)
			break;
		case RX_SP_TEMP_TETO:
			//---------ENDEREÇO | 0x21 | SP_Teto.high | SP_Teto.low | CRC | CRC
			PrimitiveStates.SetPointTeto = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 8003ab6:	4b68      	ldr	r3, [pc, #416]	; (8003c58 <rxBluetooth+0x320>)
 8003ab8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	4a66      	ldr	r2, [pc, #408]	; (8003c58 <rxBluetooth+0x320>)
 8003ac0:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fc fc9c 	bl	8000404 <__aeabi_i2d>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4965      	ldr	r1, [pc, #404]	; (8003c68 <rxBluetooth+0x330>)
 8003ad2:	e9c1 2306 	strd	r2, r3, [r1, #24]
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_TETO)
 8003ad6:	4b60      	ldr	r3, [pc, #384]	; (8003c58 <rxBluetooth+0x320>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	721a      	strb	r2, [r3, #8]
 8003adc:	4b5e      	ldr	r3, [pc, #376]	; (8003c58 <rxBluetooth+0x320>)
 8003ade:	22ff      	movs	r2, #255	; 0xff
 8003ae0:	725a      	strb	r2, [r3, #9]
 8003ae2:	4b5d      	ldr	r3, [pc, #372]	; (8003c58 <rxBluetooth+0x320>)
 8003ae4:	2221      	movs	r2, #33	; 0x21
 8003ae6:	729a      	strb	r2, [r3, #10]
 8003ae8:	2103      	movs	r1, #3
 8003aea:	485e      	ldr	r0, [pc, #376]	; (8003c64 <rxBluetooth+0x32c>)
 8003aec:	f7fd fd0e 	bl	800150c <Envia_bytes_UART>
			break;
 8003af0:	e128      	b.n	8003d44 <rxBluetooth+0x40c>
		case RX_SP_TEMP_LASTRO:
			//---------ENDEREÇO | 0x22 | SP_Lastro.high | SP_Lastro.low | CRC | CRC
			PrimitiveStates.SetPointLastro = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 8003af2:	4b59      	ldr	r3, [pc, #356]	; (8003c58 <rxBluetooth+0x320>)
 8003af4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	4a57      	ldr	r2, [pc, #348]	; (8003c58 <rxBluetooth+0x320>)
 8003afc:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8003b00:	4313      	orrs	r3, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fc fc7e 	bl	8000404 <__aeabi_i2d>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4956      	ldr	r1, [pc, #344]	; (8003c68 <rxBluetooth+0x330>)
 8003b0e:	e9c1 2308 	strd	r2, r3, [r1, #32]
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_LASTRO)
 8003b12:	4b51      	ldr	r3, [pc, #324]	; (8003c58 <rxBluetooth+0x320>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	721a      	strb	r2, [r3, #8]
 8003b18:	4b4f      	ldr	r3, [pc, #316]	; (8003c58 <rxBluetooth+0x320>)
 8003b1a:	22ff      	movs	r2, #255	; 0xff
 8003b1c:	725a      	strb	r2, [r3, #9]
 8003b1e:	4b4e      	ldr	r3, [pc, #312]	; (8003c58 <rxBluetooth+0x320>)
 8003b20:	2222      	movs	r2, #34	; 0x22
 8003b22:	729a      	strb	r2, [r3, #10]
 8003b24:	2103      	movs	r1, #3
 8003b26:	484f      	ldr	r0, [pc, #316]	; (8003c64 <rxBluetooth+0x32c>)
 8003b28:	f7fd fcf0 	bl	800150c <Envia_bytes_UART>
			break;
 8003b2c:	e10a      	b.n	8003d44 <rxBluetooth+0x40c>
		case RX_SP_TEMPO:
			//---------ENDEREÇO | 0x23 | TimerMinutos | TimerSegundos |CRC | CRC
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003b2e:	4b4a      	ldr	r3, [pc, #296]	; (8003c58 <rxBluetooth+0x320>)
 8003b30:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8003b34:	4b4c      	ldr	r3, [pc, #304]	; (8003c68 <rxBluetooth+0x330>)
 8003b36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8003b3a:	4b47      	ldr	r3, [pc, #284]	; (8003c58 <rxBluetooth+0x320>)
 8003b3c:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8003b40:	4b49      	ldr	r3, [pc, #292]	; (8003c68 <rxBluetooth+0x330>)
 8003b42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			//todo possivelmente zerar o tempo atual
			PrimitiveStates.stateTimer = true; //estarta o timer
 8003b46:	4b48      	ldr	r3, [pc, #288]	; (8003c68 <rxBluetooth+0x330>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMPO)
 8003b4e:	4b42      	ldr	r3, [pc, #264]	; (8003c58 <rxBluetooth+0x320>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	721a      	strb	r2, [r3, #8]
 8003b54:	4b40      	ldr	r3, [pc, #256]	; (8003c58 <rxBluetooth+0x320>)
 8003b56:	22ff      	movs	r2, #255	; 0xff
 8003b58:	725a      	strb	r2, [r3, #9]
 8003b5a:	4b3f      	ldr	r3, [pc, #252]	; (8003c58 <rxBluetooth+0x320>)
 8003b5c:	2223      	movs	r2, #35	; 0x23
 8003b5e:	729a      	strb	r2, [r3, #10]
 8003b60:	2103      	movs	r1, #3
 8003b62:	4840      	ldr	r0, [pc, #256]	; (8003c64 <rxBluetooth+0x32c>)
 8003b64:	f7fd fcd2 	bl	800150c <Envia_bytes_UART>
			break;
 8003b68:	e0ec      	b.n	8003d44 <rxBluetooth+0x40c>
		case RX_TOGGLE_TEMPO:
			//---------ENDEREÇO | 0x24 | 0x24 | TimerSegundos |CRC | CRC
			PrimitiveStates.stateTimer = !PrimitiveStates.stateTimer;
 8003b6a:	4b3f      	ldr	r3, [pc, #252]	; (8003c68 <rxBluetooth+0x330>)
 8003b6c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf14      	ite	ne
 8003b74:	2301      	movne	r3, #1
 8003b76:	2300      	moveq	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f083 0301 	eor.w	r3, r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4b38      	ldr	r3, [pc, #224]	; (8003c68 <rxBluetooth+0x330>)
 8003b88:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			MACRO_ENVIA_AKNOLADGE_(RX_TOGGLE_TEMPO)
 8003b8c:	4b32      	ldr	r3, [pc, #200]	; (8003c58 <rxBluetooth+0x320>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	721a      	strb	r2, [r3, #8]
 8003b92:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <rxBluetooth+0x320>)
 8003b94:	22ff      	movs	r2, #255	; 0xff
 8003b96:	725a      	strb	r2, [r3, #9]
 8003b98:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <rxBluetooth+0x320>)
 8003b9a:	2224      	movs	r2, #36	; 0x24
 8003b9c:	729a      	strb	r2, [r3, #10]
 8003b9e:	2103      	movs	r1, #3
 8003ba0:	4830      	ldr	r0, [pc, #192]	; (8003c64 <rxBluetooth+0x32c>)
 8003ba2:	f7fd fcb3 	bl	800150c <Envia_bytes_UART>
			break;
 8003ba6:	e0cd      	b.n	8003d44 <rxBluetooth+0x40c>
		case RX_RECEITA:
			//---------ENDEREÇO | 0x25 | TemperaturaTeto.hi~.lo | TemperaturaLastro.hi~.lo | Minutos | Segundos | CRC | CRC
			PrimitiveStates.SetPointTeto = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <rxBluetooth+0x320>)
 8003baa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	4a29      	ldr	r2, [pc, #164]	; (8003c58 <rxBluetooth+0x320>)
 8003bb2:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fc fc23 	bl	8000404 <__aeabi_i2d>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4929      	ldr	r1, [pc, #164]	; (8003c68 <rxBluetooth+0x330>)
 8003bc4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro = (bluetooth._RxDataArr[4]<< 8) | bluetooth._RxDataArr[5];
 8003bc8:	4b23      	ldr	r3, [pc, #140]	; (8003c58 <rxBluetooth+0x320>)
 8003bca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <rxBluetooth+0x320>)
 8003bd2:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fc fc13 	bl	8000404 <__aeabi_i2d>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4921      	ldr	r1, [pc, #132]	; (8003c68 <rxBluetooth+0x330>)
 8003be4:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8003be8:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <rxBluetooth+0x320>)
 8003bea:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8003bee:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <rxBluetooth+0x330>)
 8003bf0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 8003bf4:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <rxBluetooth+0x320>)
 8003bf6:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <rxBluetooth+0x330>)
 8003bfc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

			//atribuicao para disparar decremento
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8003c00:	4b19      	ldr	r3, [pc, #100]	; (8003c68 <rxBluetooth+0x330>)
 8003c02:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8003c06:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <rxBluetooth+0x330>)
 8003c08:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003c0c:	4b16      	ldr	r3, [pc, #88]	; (8003c68 <rxBluetooth+0x330>)
 8003c0e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8003c12:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <rxBluetooth+0x330>)
 8003c14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


			TempSPTeto = PrimitiveStates.SetPointTeto;
 8003c18:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <rxBluetooth+0x330>)
 8003c1a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c1e:	4913      	ldr	r1, [pc, #76]	; (8003c6c <rxBluetooth+0x334>)
 8003c20:	e9c1 2300 	strd	r2, r3, [r1]
			TempSPLastro = PrimitiveStates.SetPointLastro;
 8003c24:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <rxBluetooth+0x330>)
 8003c26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c2a:	4911      	ldr	r1, [pc, #68]	; (8003c70 <rxBluetooth+0x338>)
 8003c2c:	e9c1 2300 	strd	r2, r3, [r1]

			PrimitiveStates.stateTimer = true; //estarta o timer
 8003c30:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <rxBluetooth+0x330>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			MACRO_ENVIA_AKNOLADGE_(RX_RECEITA)
 8003c38:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <rxBluetooth+0x320>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	721a      	strb	r2, [r3, #8]
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <rxBluetooth+0x320>)
 8003c40:	22ff      	movs	r2, #255	; 0xff
 8003c42:	725a      	strb	r2, [r3, #9]
 8003c44:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <rxBluetooth+0x320>)
 8003c46:	2225      	movs	r2, #37	; 0x25
 8003c48:	729a      	strb	r2, [r3, #10]
 8003c4a:	2103      	movs	r1, #3
 8003c4c:	4805      	ldr	r0, [pc, #20]	; (8003c64 <rxBluetooth+0x32c>)
 8003c4e:	f7fd fc5d 	bl	800150c <Envia_bytes_UART>
			break;
 8003c52:	e077      	b.n	8003d44 <rxBluetooth+0x40c>
 8003c54:	20000f0c 	.word	0x20000f0c
 8003c58:	20000f18 	.word	0x20000f18
 8003c5c:	20000f08 	.word	0x20000f08
 8003c60:	20000f10 	.word	0x20000f10
 8003c64:	20000f20 	.word	0x20000f20
 8003c68:	20001068 	.word	0x20001068
 8003c6c:	20001190 	.word	0x20001190
 8003c70:	20001198 	.word	0x20001198
		case RX_LIMITE_TEMPERATURA:
			//---------ENDEREÇO | 0x26 | TemperaturaTeto.hi~.lo | TemperaturaLastro.hi~.lo | CRC | CRC
			MACRO_ENVIA_AKNOLADGE_(RX_LIMITE_TEMPERATURA)
 8003c74:	4b35      	ldr	r3, [pc, #212]	; (8003d4c <rxBluetooth+0x414>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	721a      	strb	r2, [r3, #8]
 8003c7a:	4b34      	ldr	r3, [pc, #208]	; (8003d4c <rxBluetooth+0x414>)
 8003c7c:	22ff      	movs	r2, #255	; 0xff
 8003c7e:	725a      	strb	r2, [r3, #9]
 8003c80:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <rxBluetooth+0x414>)
 8003c82:	2226      	movs	r2, #38	; 0x26
 8003c84:	729a      	strb	r2, [r3, #10]
 8003c86:	2103      	movs	r1, #3
 8003c88:	4831      	ldr	r0, [pc, #196]	; (8003d50 <rxBluetooth+0x418>)
 8003c8a:	f7fd fc3f 	bl	800150c <Envia_bytes_UART>
			break;
 8003c8e:	e059      	b.n	8003d44 <rxBluetooth+0x40c>
		case RX_LIGA_LAMPADA:
			//---------ENDEREÇO | 0x27 | 0x27 | CRC | CRC
			PrimitiveStates.SegundosLampada=10;//todo revisar variaveis de limite
 8003c90:	4b30      	ldr	r3, [pc, #192]	; (8003d54 <rxBluetooth+0x41c>)
 8003c92:	220a      	movs	r2, #10
 8003c94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			MACRO_ENVIA_AKNOLADGE_(RX_LIGA_LAMPADA)
 8003c98:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <rxBluetooth+0x414>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	721a      	strb	r2, [r3, #8]
 8003c9e:	4b2b      	ldr	r3, [pc, #172]	; (8003d4c <rxBluetooth+0x414>)
 8003ca0:	22ff      	movs	r2, #255	; 0xff
 8003ca2:	725a      	strb	r2, [r3, #9]
 8003ca4:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <rxBluetooth+0x414>)
 8003ca6:	2227      	movs	r2, #39	; 0x27
 8003ca8:	729a      	strb	r2, [r3, #10]
 8003caa:	2103      	movs	r1, #3
 8003cac:	4828      	ldr	r0, [pc, #160]	; (8003d50 <rxBluetooth+0x418>)
 8003cae:	f7fd fc2d 	bl	800150c <Envia_bytes_UART>
			break;
 8003cb2:	e047      	b.n	8003d44 <rxBluetooth+0x40c>
		case RX_DESLIGA_LAMPADA:
			//---------ENDEREÇO | 0x28 | 0x28 | CRC | CRC
			LAMPADA_OFF
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2140      	movs	r1, #64	; 0x40
 8003cb8:	4827      	ldr	r0, [pc, #156]	; (8003d58 <rxBluetooth+0x420>)
 8003cba:	f001 fd86 	bl	80057ca <HAL_GPIO_WritePin>
 8003cbe:	4b25      	ldr	r3, [pc, #148]	; (8003d54 <rxBluetooth+0x41c>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8003cc6:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <rxBluetooth+0x41c>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	70da      	strb	r2, [r3, #3]
			MACRO_ENVIA_AKNOLADGE_(RX_DESLIGA_LAMPADA)
 8003ccc:	4b1f      	ldr	r3, [pc, #124]	; (8003d4c <rxBluetooth+0x414>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	721a      	strb	r2, [r3, #8]
 8003cd2:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <rxBluetooth+0x414>)
 8003cd4:	22ff      	movs	r2, #255	; 0xff
 8003cd6:	725a      	strb	r2, [r3, #9]
 8003cd8:	4b1c      	ldr	r3, [pc, #112]	; (8003d4c <rxBluetooth+0x414>)
 8003cda:	2228      	movs	r2, #40	; 0x28
 8003cdc:	729a      	strb	r2, [r3, #10]
 8003cde:	2103      	movs	r1, #3
 8003ce0:	481b      	ldr	r0, [pc, #108]	; (8003d50 <rxBluetooth+0x418>)
 8003ce2:	f7fd fc13 	bl	800150c <Envia_bytes_UART>
			break;
 8003ce6:	e02d      	b.n	8003d44 <rxBluetooth+0x40c>
		case RX_PEDE_SENHA:
			if(bluetooth.JanelaConexao > 0)
 8003ce8:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <rxBluetooth+0x414>)
 8003cea:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <rxBluetooth+0x3ca>
				osMessagePut(FilaTXBluetoothHandle, TX_CHAVE, 0);
 8003cf2:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <rxBluetooth+0x424>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	218b      	movs	r1, #139	; 0x8b
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f005 fb82 	bl	8009404 <osMessagePut>
			else
				__NOP();//envia erro crc
			break;
 8003d00:	e020      	b.n	8003d44 <rxBluetooth+0x40c>
				__NOP();//envia erro crc
 8003d02:	bf00      	nop
			break;
 8003d04:	e01e      	b.n	8003d44 <rxBluetooth+0x40c>
		case RX_RECEBEU_SENHA:
			if(		bluetooth._RxDataArr[3] == 0x01 &&
 8003d06:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <rxBluetooth+0x414>)
 8003d08:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d110      	bne.n	8003d32 <rxBluetooth+0x3fa>
					bluetooth._RxDataArr[4] == 0x01){
 8003d10:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <rxBluetooth+0x414>)
 8003d12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
			if(		bluetooth._RxDataArr[3] == 0x01 &&
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d10b      	bne.n	8003d32 <rxBluetooth+0x3fa>
				//todo eu usei chave emulada acima
				//--->	CHAVE CORRETA
				bluetooth.MaquinaConexao	= RX_VALIDADO;
 8003d1a:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <rxBluetooth+0x414>)
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				osMessagePut(FilaTXBluetoothHandle, TX_RESULTADO_CHAVE_OK, 0);
 8003d22:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <rxBluetooth+0x424>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2200      	movs	r2, #0
 8003d28:	218d      	movs	r1, #141	; 0x8d
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f005 fb6a 	bl	8009404 <osMessagePut>
				break;
 8003d30:	e008      	b.n	8003d44 <rxBluetooth+0x40c>
			}else{
				//--->	CHAVE ERRADA
				osMessagePut(FilaTXBluetoothHandle, TX_RESULTADO_CHAVE_ERRO, 0);
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <rxBluetooth+0x424>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	218e      	movs	r1, #142	; 0x8e
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f005 fb62 	bl	8009404 <osMessagePut>
			}
			break;
 8003d40:	e000      	b.n	8003d44 <rxBluetooth+0x40c>
			break;
 8003d42:	bf00      	nop
		}
	}
}
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000f18 	.word	0x20000f18
 8003d50:	20000f20 	.word	0x20000f20
 8003d54:	20001068 	.word	0x20001068
 8003d58:	40010c00 	.word	0x40010c00
 8003d5c:	20000f08 	.word	0x20000f08

08003d60 <StartBuzzer>:
void sequencia1Buzzer(void);

extern osThreadId TaskBuzzerHandle;

void StartBuzzer(void const * argument)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskBuzzer */
	//osThreadSuspend(TaskBuzzerHandle);
	/* Infinite loop */
	for(;;)
	{
		sequencia1Buzzer();
 8003d68:	f000 f80c 	bl	8003d84 <sequencia1Buzzer>

		osThreadSuspend(TaskBuzzerHandle);
 8003d6c:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <StartBuzzer+0x20>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f005 fbfb 	bl	800956c <osThreadSuspend>

		osDelay(100);
 8003d76:	2064      	movs	r0, #100	; 0x64
 8003d78:	f005 fa49 	bl	800920e <osDelay>
		sequencia1Buzzer();
 8003d7c:	e7f4      	b.n	8003d68 <StartBuzzer+0x8>
 8003d7e:	bf00      	nop
 8003d80:	200009b8 	.word	0x200009b8

08003d84 <sequencia1Buzzer>:
	}
	/* USER CODE END StartTaskBuzzer */
}

void sequencia1Buzzer(void){
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
	M_BUZZER_ON
 8003d88:	210c      	movs	r1, #12
 8003d8a:	480d      	ldr	r0, [pc, #52]	; (8003dc0 <sequencia1Buzzer+0x3c>)
 8003d8c:	f003 f900 	bl	8006f90 <HAL_TIM_PWM_Start>
	HAL_Delay(300);
 8003d90:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003d94:	f000 facc 	bl	8004330 <HAL_Delay>
	M_BUZZER_OFF
 8003d98:	210c      	movs	r1, #12
 8003d9a:	4809      	ldr	r0, [pc, #36]	; (8003dc0 <sequencia1Buzzer+0x3c>)
 8003d9c:	f003 f99a 	bl	80070d4 <HAL_TIM_PWM_Stop>
	HAL_Delay(50);
 8003da0:	2032      	movs	r0, #50	; 0x32
 8003da2:	f000 fac5 	bl	8004330 <HAL_Delay>
	M_BUZZER_ON
 8003da6:	210c      	movs	r1, #12
 8003da8:	4805      	ldr	r0, [pc, #20]	; (8003dc0 <sequencia1Buzzer+0x3c>)
 8003daa:	f003 f8f1 	bl	8006f90 <HAL_TIM_PWM_Start>
	HAL_Delay(250);
 8003dae:	20fa      	movs	r0, #250	; 0xfa
 8003db0:	f000 fabe 	bl	8004330 <HAL_Delay>
	M_BUZZER_OFF
 8003db4:	210c      	movs	r1, #12
 8003db6:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <sequencia1Buzzer+0x3c>)
 8003db8:	f003 f98c 	bl	80070d4 <HAL_TIM_PWM_Stop>
}
 8003dbc:	bf00      	nop
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000808 	.word	0x20000808

08003dc4 <StartEeprom>:
extern osThreadId TaskEepromHandle,TaskComandoHandle,TaskNextionHandle,TaskBluetoothHandle;
extern osMessageQId FilaEepromHandle;
extern TYPE_CALENDARIO			Calendario;

void StartEeprom(void const * argument)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	initEeprom();
 8003dcc:	f000 f808 	bl	8003de0 <initEeprom>

	for(;;)
	{
		processaEeprom();
 8003dd0:	f000 f8ba 	bl	8003f48 <processaEeprom>

		osDelay(500);
 8003dd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003dd8:	f005 fa19 	bl	800920e <osDelay>
		processaEeprom();
 8003ddc:	e7f8      	b.n	8003dd0 <StartEeprom+0xc>
	...

08003de0 <initEeprom>:
	}
}

void initEeprom(void){
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af06      	add	r7, sp, #24
	//inicializacao ad eeprom
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 8003de6:	4a45      	ldr	r2, [pc, #276]	; (8003efc <initEeprom+0x11c>)
 8003de8:	4945      	ldr	r1, [pc, #276]	; (8003f00 <initEeprom+0x120>)
 8003dea:	4846      	ldr	r0, [pc, #280]	; (8003f04 <initEeprom+0x124>)
 8003dec:	f7fd fe02 	bl	80019f4 <EepromInit>
	//	zeraTodosMeses(&eeprom);

	//criacao dos objetos variaveis
	EepromAddVar(&eeprom, &tempoDelayLuz, 			"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA8BITS,	0,		0,		0		,0);
 8003df0:	2300      	movs	r3, #0
 8003df2:	9304      	str	r3, [sp, #16]
 8003df4:	2300      	movs	r3, #0
 8003df6:	9303      	str	r3, [sp, #12]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9302      	str	r3, [sp, #8]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	2301      	movs	r3, #1
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	2304      	movs	r3, #4
 8003e06:	4a40      	ldr	r2, [pc, #256]	; (8003f08 <initEeprom+0x128>)
 8003e08:	4940      	ldr	r1, [pc, #256]	; (8003f0c <initEeprom+0x12c>)
 8003e0a:	483e      	ldr	r0, [pc, #248]	; (8003f04 <initEeprom+0x124>)
 8003e0c:	f7fd fe08 	bl	8001a20 <EepromAddVar>
	EepromAddVar(&eeprom, &horimetroHoras, 			"addrHORIMETRO", 		addrHORIMETRO,		DATA8BITS,	0,		0,		0		,0);
 8003e10:	2300      	movs	r3, #0
 8003e12:	9304      	str	r3, [sp, #16]
 8003e14:	2300      	movs	r3, #0
 8003e16:	9303      	str	r3, [sp, #12]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	9302      	str	r3, [sp, #8]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	2301      	movs	r3, #1
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	2305      	movs	r3, #5
 8003e26:	4a3a      	ldr	r2, [pc, #232]	; (8003f10 <initEeprom+0x130>)
 8003e28:	493a      	ldr	r1, [pc, #232]	; (8003f14 <initEeprom+0x134>)
 8003e2a:	4836      	ldr	r0, [pc, #216]	; (8003f04 <initEeprom+0x124>)
 8003e2c:	f7fd fdf8 	bl	8001a20 <EepromAddVar>
	EepromAddVar(&eeprom, &horimetroMinutos, 		"addrMINUTIMETRO", 		addrMINUTIMETRO,	DATA8BITS,	0,		0,		0		,0);
 8003e30:	2300      	movs	r3, #0
 8003e32:	9304      	str	r3, [sp, #16]
 8003e34:	2300      	movs	r3, #0
 8003e36:	9303      	str	r3, [sp, #12]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	9302      	str	r3, [sp, #8]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9301      	str	r3, [sp, #4]
 8003e40:	2301      	movs	r3, #1
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	2306      	movs	r3, #6
 8003e46:	4a34      	ldr	r2, [pc, #208]	; (8003f18 <initEeprom+0x138>)
 8003e48:	4934      	ldr	r1, [pc, #208]	; (8003f1c <initEeprom+0x13c>)
 8003e4a:	482e      	ldr	r0, [pc, #184]	; (8003f04 <initEeprom+0x124>)
 8003e4c:	f7fd fde8 	bl	8001a20 <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoDia, 			"addrINST_DIA", 		addrINST_DIA,		DATA8BITS,	1,		0,		31		,0);
 8003e50:	2300      	movs	r3, #0
 8003e52:	9304      	str	r3, [sp, #16]
 8003e54:	231f      	movs	r3, #31
 8003e56:	9303      	str	r3, [sp, #12]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9302      	str	r3, [sp, #8]
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	2301      	movs	r3, #1
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	230c      	movs	r3, #12
 8003e66:	4a2e      	ldr	r2, [pc, #184]	; (8003f20 <initEeprom+0x140>)
 8003e68:	492e      	ldr	r1, [pc, #184]	; (8003f24 <initEeprom+0x144>)
 8003e6a:	4826      	ldr	r0, [pc, #152]	; (8003f04 <initEeprom+0x124>)
 8003e6c:	f7fd fdd8 	bl	8001a20 <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoMes, 			"addrINST_MES", 		addrINST_MES,		DATA8BITS,	1,		1,		12		,0);
 8003e70:	2300      	movs	r3, #0
 8003e72:	9304      	str	r3, [sp, #16]
 8003e74:	230c      	movs	r3, #12
 8003e76:	9303      	str	r3, [sp, #12]
 8003e78:	2301      	movs	r3, #1
 8003e7a:	9302      	str	r3, [sp, #8]
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	2301      	movs	r3, #1
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	230d      	movs	r3, #13
 8003e86:	4a28      	ldr	r2, [pc, #160]	; (8003f28 <initEeprom+0x148>)
 8003e88:	4928      	ldr	r1, [pc, #160]	; (8003f2c <initEeprom+0x14c>)
 8003e8a:	481e      	ldr	r0, [pc, #120]	; (8003f04 <initEeprom+0x124>)
 8003e8c:	f7fd fdc8 	bl	8001a20 <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoAno, 			"addrINST_ANO", 		addrINST_ANO,		DATA8BITS,	23,		23,		99		,0);
 8003e90:	2300      	movs	r3, #0
 8003e92:	9304      	str	r3, [sp, #16]
 8003e94:	2363      	movs	r3, #99	; 0x63
 8003e96:	9303      	str	r3, [sp, #12]
 8003e98:	2317      	movs	r3, #23
 8003e9a:	9302      	str	r3, [sp, #8]
 8003e9c:	2317      	movs	r3, #23
 8003e9e:	9301      	str	r3, [sp, #4]
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	230e      	movs	r3, #14
 8003ea6:	4a22      	ldr	r2, [pc, #136]	; (8003f30 <initEeprom+0x150>)
 8003ea8:	4922      	ldr	r1, [pc, #136]	; (8003f34 <initEeprom+0x154>)
 8003eaa:	4816      	ldr	r0, [pc, #88]	; (8003f04 <initEeprom+0x124>)
 8003eac:	f7fd fdb8 	bl	8001a20 <EepromAddVar>
	EepromAddVar(&eeprom, &totalCiclos, 			"addrTOTAL_GERAL", 		addrTOTAL_GERAL,	DATA16BITS,	0,		0,		0		,0);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	9304      	str	r3, [sp, #16]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9303      	str	r3, [sp, #12]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	9302      	str	r3, [sp, #8]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	230f      	movs	r3, #15
 8003ec6:	4a1c      	ldr	r2, [pc, #112]	; (8003f38 <initEeprom+0x158>)
 8003ec8:	491c      	ldr	r1, [pc, #112]	; (8003f3c <initEeprom+0x15c>)
 8003eca:	480e      	ldr	r0, [pc, #56]	; (8003f04 <initEeprom+0x124>)
 8003ecc:	f7fd fda8 	bl	8001a20 <EepromAddVar>
	EepromAddVar(&eeprom, &LimiteTemperatura, 		"addrLIMITE_TEMP", 		addrLIMITE_TEMP,	DATA16BITS,	0,		0,		0		,0);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9304      	str	r3, [sp, #16]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	9303      	str	r3, [sp, #12]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	9302      	str	r3, [sp, #8]
 8003edc:	2300      	movs	r3, #0
 8003ede:	9301      	str	r3, [sp, #4]
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	2314      	movs	r3, #20
 8003ee6:	4a16      	ldr	r2, [pc, #88]	; (8003f40 <initEeprom+0x160>)
 8003ee8:	4916      	ldr	r1, [pc, #88]	; (8003f44 <initEeprom+0x164>)
 8003eea:	4806      	ldr	r0, [pc, #24]	; (8003f04 <initEeprom+0x124>)
 8003eec:	f7fd fd98 	bl	8001a20 <EepromAddVar>

		RestauraPadraoTudo(&eeprom);
 8003ef0:	4804      	ldr	r0, [pc, #16]	; (8003f04 <initEeprom+0x124>)
 8003ef2:	f7fd ff27 	bl	8001d44 <RestauraPadraoTudo>
	//	EepromDownloadValores(&eeprom);


	//	osThreadResume(TaskComandoHandle);
	//	osThreadResume(TaskBluetoothHandle);
}
 8003ef6:	bf00      	nop
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20000f10 	.word	0x20000f10
 8003f00:	200007b4 	.word	0x200007b4
 8003f04:	200002a0 	.word	0x200002a0
 8003f08:	0800ccd4 	.word	0x0800ccd4
 8003f0c:	20000478 	.word	0x20000478
 8003f10:	0800cce4 	.word	0x0800cce4
 8003f14:	20000360 	.word	0x20000360
 8003f18:	0800ccf4 	.word	0x0800ccf4
 8003f1c:	20000388 	.word	0x20000388
 8003f20:	0800cd04 	.word	0x0800cd04
 8003f24:	200003b0 	.word	0x200003b0
 8003f28:	0800cd14 	.word	0x0800cd14
 8003f2c:	200003d8 	.word	0x200003d8
 8003f30:	0800cd24 	.word	0x0800cd24
 8003f34:	20000400 	.word	0x20000400
 8003f38:	0800cd34 	.word	0x0800cd34
 8003f3c:	20000428 	.word	0x20000428
 8003f40:	0800cd44 	.word	0x0800cd44
 8003f44:	20000450 	.word	0x20000450

08003f48 <processaEeprom>:

void processaEeprom(void){
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
	osEvent  evt;

	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 8003f4e:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <processaEeprom+0x50>)
 8003f50:	6819      	ldr	r1, [r3, #0]
 8003f52:	1d3b      	adds	r3, r7, #4
 8003f54:	f04f 32ff 	mov.w	r2, #4294967295
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f005 fa93 	bl	8009484 <osMessageGet>
	if (evt.status == osEventMessage) {
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b10      	cmp	r3, #16
 8003f62:	d114      	bne.n	8003f8e <processaEeprom+0x46>

		switch ((unsigned int)evt.value.p) {
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	d810      	bhi.n	8003f8c <processaEeprom+0x44>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <processaEeprom+0x28>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003f89 	.word	0x08003f89
 8003f74:	08003f8d 	.word	0x08003f8d
 8003f78:	08003f8d 	.word	0x08003f8d
 8003f7c:	08003f8d 	.word	0x08003f8d
 8003f80:	08003f8d 	.word	0x08003f8d
 8003f84:	08003f8d 	.word	0x08003f8d

		case CEepromShifiting:
			__NOP();
 8003f88:	bf00      	nop
			//usar um semaphore para evitar de shiffiting em duplicidade
			break;
 8003f8a:	e000      	b.n	8003f8e <processaEeprom+0x46>
			//				if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK){
			//					Error_Handler();
			//				}
			break;
		default:
			break;
 8003f8c:	bf00      	nop
		}
	}
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000f10 	.word	0x20000f10

08003f9c <StartTemperatura>:
//---variaveis PID
double TempTeto, TempLastro, PIDOutTeto, PIDOutLastro, TempSPTeto, TempSPLastro;
PID_TypeDef TPIDTeto,TPIDLastro;


void StartTemperatura(void const * argument){
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

	initPID();
 8003fa4:	f000 f808 	bl	8003fb8 <initPID>

	//	osThreadSuspend(TaskTemperaturaHandle);
	for(;;)	{

		computaPID();
 8003fa8:	f000 f896 	bl	80040d8 <computaPID>

		osDelay(TIME_PID_CALC);
 8003fac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003fb0:	f005 f92d 	bl	800920e <osDelay>
		computaPID();
 8003fb4:	e7f8      	b.n	8003fa8 <StartTemperatura+0xc>
	...

08003fb8 <initPID>:

	tmp += (*PIDOut / 1000);

	return tmp;
}
void initPID(void){
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af08      	add	r7, sp, #32

	TempSPTeto 		= 0;
 8003fbe:	493a      	ldr	r1, [pc, #232]	; (80040a8 <initPID+0xf0>)
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	e9c1 2300 	strd	r2, r3, [r1]
	TempSPLastro 	= 0;
 8003fcc:	4937      	ldr	r1, [pc, #220]	; (80040ac <initPID+0xf4>)
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	e9c1 2300 	strd	r2, r3, [r1]

	PID(&TPIDTeto, 		&PrimitiveStates.RealtimeTeto, 		&PIDOutTeto, 	&PrimitiveStates.SetPointTeto, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	9307      	str	r3, [sp, #28]
 8003fde:	2301      	movs	r3, #1
 8003fe0:	9306      	str	r3, [sp, #24]
 8003fe2:	a32d      	add	r3, pc, #180	; (adr r3, 8004098 <initPID+0xe0>)
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003fec:	a32c      	add	r3, pc, #176	; (adr r3, 80040a0 <initPID+0xe8>)
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	4b2d      	ldr	r3, [pc, #180]	; (80040b0 <initPID+0xf8>)
 8003ffc:	e9cd 2300 	strd	r2, r3, [sp]
 8004000:	4b2c      	ldr	r3, [pc, #176]	; (80040b4 <initPID+0xfc>)
 8004002:	4a2d      	ldr	r2, [pc, #180]	; (80040b8 <initPID+0x100>)
 8004004:	492d      	ldr	r1, [pc, #180]	; (80040bc <initPID+0x104>)
 8004006:	482e      	ldr	r0, [pc, #184]	; (80040c0 <initPID+0x108>)
 8004008:	f7fe fb96 	bl	8002738 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.RealtimeLastro, 	&PIDOutLastro, 	&PrimitiveStates.SetPointLastro, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 800400c:	2300      	movs	r3, #0
 800400e:	9307      	str	r3, [sp, #28]
 8004010:	2301      	movs	r3, #1
 8004012:	9306      	str	r3, [sp, #24]
 8004014:	a320      	add	r3, pc, #128	; (adr r3, 8004098 <initPID+0xe0>)
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800401e:	a320      	add	r3, pc, #128	; (adr r3, 80040a0 <initPID+0xe8>)
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <initPID+0xf8>)
 800402e:	e9cd 2300 	strd	r2, r3, [sp]
 8004032:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <initPID+0x10c>)
 8004034:	4a24      	ldr	r2, [pc, #144]	; (80040c8 <initPID+0x110>)
 8004036:	4925      	ldr	r1, [pc, #148]	; (80040cc <initPID+0x114>)
 8004038:	4825      	ldr	r0, [pc, #148]	; (80040d0 <initPID+0x118>)
 800403a:	f7fe fb7d 	bl	8002738 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 800403e:	2101      	movs	r1, #1
 8004040:	481f      	ldr	r0, [pc, #124]	; (80040c0 <initPID+0x108>)
 8004042:	f7fe fcab 	bl	800299c <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 8004046:	2101      	movs	r1, #1
 8004048:	4821      	ldr	r0, [pc, #132]	; (80040d0 <initPID+0x118>)
 800404a:	f7fe fca7 	bl	800299c <PID_SetMode>

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 800404e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004052:	481b      	ldr	r0, [pc, #108]	; (80040c0 <initPID+0x108>)
 8004054:	f7fe fe10 	bl	8002c78 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 8004058:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800405c:	481c      	ldr	r0, [pc, #112]	; (80040d0 <initPID+0x118>)
 800405e:	f7fe fe0b 	bl	8002c78 <PID_SetSampleTime>

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <initPID+0x11c>)
 8004068:	e9cd 2300 	strd	r2, r3, [sp]
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	4812      	ldr	r0, [pc, #72]	; (80040c0 <initPID+0x108>)
 8004076:	f7fe fcaf 	bl	80029d8 <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <initPID+0x11c>)
 8004080:	e9cd 2300 	strd	r2, r3, [sp]
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	4810      	ldr	r0, [pc, #64]	; (80040d0 <initPID+0x118>)
 800408e:	f7fe fca3 	bl	80029d8 <PID_SetOutputLimits>
}
 8004092:	bf00      	nop
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	33333333 	.word	0x33333333
 800409c:	3fd33333 	.word	0x3fd33333
 80040a0:	47ae147b 	.word	0x47ae147b
 80040a4:	3f847ae1 	.word	0x3f847ae1
 80040a8:	20001190 	.word	0x20001190
 80040ac:	20001198 	.word	0x20001198
 80040b0:	403e0000 	.word	0x403e0000
 80040b4:	20001080 	.word	0x20001080
 80040b8:	20001180 	.word	0x20001180
 80040bc:	20001070 	.word	0x20001070
 80040c0:	200011a0 	.word	0x200011a0
 80040c4:	20001088 	.word	0x20001088
 80040c8:	20001188 	.word	0x20001188
 80040cc:	20001078 	.word	0x20001078
 80040d0:	20001210 	.word	0x20001210
 80040d4:	40590000 	.word	0x40590000

080040d8 <computaPID>:
void computaPID(void){
 80040d8:	b598      	push	{r3, r4, r7, lr}
 80040da:	af00      	add	r7, sp, #0

	PID_Compute(&TPIDTeto);
 80040dc:	480e      	ldr	r0, [pc, #56]	; (8004118 <computaPID+0x40>)
 80040de:	f7fe fb73 	bl	80027c8 <PID_Compute>
	PID_Compute(&TPIDLastro);
 80040e2:	480e      	ldr	r0, [pc, #56]	; (800411c <computaPID+0x44>)
 80040e4:	f7fe fb70 	bl	80027c8 <PID_Compute>

	htim3.Instance->CCR3 = PIDOutTeto;
 80040e8:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <computaPID+0x48>)
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	490d      	ldr	r1, [pc, #52]	; (8004124 <computaPID+0x4c>)
 80040f0:	680c      	ldr	r4, [r1, #0]
 80040f2:	4610      	mov	r0, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	f7fc fc89 	bl	8000a0c <__aeabi_d2uiz>
 80040fa:	4603      	mov	r3, r0
 80040fc:	63e3      	str	r3, [r4, #60]	; 0x3c
	htim3.Instance->CCR4 = PIDOutLastro;
 80040fe:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <computaPID+0x50>)
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	4907      	ldr	r1, [pc, #28]	; (8004124 <computaPID+0x4c>)
 8004106:	680c      	ldr	r4, [r1, #0]
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
 800410c:	f7fc fc7e 	bl	8000a0c <__aeabi_d2uiz>
 8004110:	4603      	mov	r3, r0
 8004112:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004114:	bf00      	nop
 8004116:	bd98      	pop	{r3, r4, r7, pc}
 8004118:	200011a0 	.word	0x200011a0
 800411c:	20001210 	.word	0x20001210
 8004120:	20001180 	.word	0x20001180
 8004124:	20000850 	.word	0x20000850
 8004128:	20001188 	.word	0x20001188

0800412c <StartTimer>:
//variaveis globais
extern GlobalPrimitiveIOStates PrimitiveStates;


void StartTimer(void const * argument)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8004134:	f006 fd54 	bl	800abe0 <xTaskGetTickCount>
 8004138:	4603      	mov	r3, r0
 800413a:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		verificaErro();
 800413c:	f000 f8ac 	bl	8004298 <verificaErro>

		funcionamentoTimer();
 8004140:	f000 f80a 	bl	8004158 <funcionamentoTimer>

		funcionamentoLampada();
 8004144:	f000 f86e 	bl	8004224 <funcionamentoLampada>

		osDelayUntil(&xLastWakeTime,1000);
 8004148:	f107 030c 	add.w	r3, r7, #12
 800414c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004150:	4618      	mov	r0, r3
 8004152:	f005 fa39 	bl	80095c8 <osDelayUntil>
		verificaErro();
 8004156:	e7f1      	b.n	800413c <StartTimer+0x10>

08004158 <funcionamentoTimer>:
	}
}

void funcionamentoTimer(void){
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0

	//Decremento de minutos e segundos
	if((PrimitiveStates.RTTimerMinutos>0 && PrimitiveStates.RTTimerSegundos==0) && PrimitiveStates.stateTimer){
 800415c:	4b2f      	ldr	r3, [pc, #188]	; (800421c <funcionamentoTimer+0xc4>)
 800415e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004162:	2b00      	cmp	r3, #0
 8004164:	d016      	beq.n	8004194 <funcionamentoTimer+0x3c>
 8004166:	4b2d      	ldr	r3, [pc, #180]	; (800421c <funcionamentoTimer+0xc4>)
 8004168:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d111      	bne.n	8004194 <funcionamentoTimer+0x3c>
 8004170:	4b2a      	ldr	r3, [pc, #168]	; (800421c <funcionamentoTimer+0xc4>)
 8004172:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00c      	beq.n	8004194 <funcionamentoTimer+0x3c>
		PrimitiveStates.RTTimerSegundos = 59;
 800417a:	4b28      	ldr	r3, [pc, #160]	; (800421c <funcionamentoTimer+0xc4>)
 800417c:	223b      	movs	r2, #59	; 0x3b
 800417e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		PrimitiveStates.RTTimerMinutos--;
 8004182:	4b26      	ldr	r3, [pc, #152]	; (800421c <funcionamentoTimer+0xc4>)
 8004184:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004188:	3b01      	subs	r3, #1
 800418a:	b2da      	uxtb	r2, r3
 800418c:	4b23      	ldr	r3, [pc, #140]	; (800421c <funcionamentoTimer+0xc4>)
 800418e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			PrimitiveStates.SetPointTeto	= 0;
			PrimitiveStates.SetPointLastro	= 0;
			osThreadResume(TaskBuzzerHandle);
		}
	}
}
 8004192:	e041      	b.n	8004218 <funcionamentoTimer+0xc0>
	}else if((PrimitiveStates.RTTimerMinutos>0 || PrimitiveStates.RTTimerSegundos>0) && PrimitiveStates.stateTimer){
 8004194:	4b21      	ldr	r3, [pc, #132]	; (800421c <funcionamentoTimer+0xc4>)
 8004196:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800419a:	2b00      	cmp	r3, #0
 800419c:	d104      	bne.n	80041a8 <funcionamentoTimer+0x50>
 800419e:	4b1f      	ldr	r3, [pc, #124]	; (800421c <funcionamentoTimer+0xc4>)
 80041a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d037      	beq.n	8004218 <funcionamentoTimer+0xc0>
 80041a8:	4b1c      	ldr	r3, [pc, #112]	; (800421c <funcionamentoTimer+0xc4>)
 80041aa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d032      	beq.n	8004218 <funcionamentoTimer+0xc0>
		PrimitiveStates.RTTimerSegundos--;
 80041b2:	4b1a      	ldr	r3, [pc, #104]	; (800421c <funcionamentoTimer+0xc4>)
 80041b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	4b17      	ldr	r3, [pc, #92]	; (800421c <funcionamentoTimer+0xc4>)
 80041be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if(PrimitiveStates.RTTimerSegundos==0 && PrimitiveStates.RTTimerMinutos==0){
 80041c2:	4b16      	ldr	r3, [pc, #88]	; (800421c <funcionamentoTimer+0xc4>)
 80041c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d125      	bne.n	8004218 <funcionamentoTimer+0xc0>
 80041cc:	4b13      	ldr	r3, [pc, #76]	; (800421c <funcionamentoTimer+0xc4>)
 80041ce:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d120      	bne.n	8004218 <funcionamentoTimer+0xc0>
			PrimitiveStates.SetPointTeto 	= 0;
 80041d6:	4911      	ldr	r1, [pc, #68]	; (800421c <funcionamentoTimer+0xc4>)
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro 	= 0;
 80041e4:	490d      	ldr	r1, [pc, #52]	; (800421c <funcionamentoTimer+0xc4>)
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PrimitiveStates.SetPointTeto	= 0;
 80041f2:	490a      	ldr	r1, [pc, #40]	; (800421c <funcionamentoTimer+0xc4>)
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro	= 0;
 8004200:	4906      	ldr	r1, [pc, #24]	; (800421c <funcionamentoTimer+0xc4>)
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	e9c1 2308 	strd	r2, r3, [r1, #32]
			osThreadResume(TaskBuzzerHandle);
 800420e:	4b04      	ldr	r3, [pc, #16]	; (8004220 <funcionamentoTimer+0xc8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f005 f9b6 	bl	8009584 <osThreadResume>
}
 8004218:	bf00      	nop
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20001068 	.word	0x20001068
 8004220:	200009b8 	.word	0x200009b8

08004224 <funcionamentoLampada>:

void funcionamentoLampada(void){
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
	osEvent evt;
	//notificacao via piscar de lamapda
	evt = osSignalWait (PISCADA_LAMPADA, 0);
 800422a:	1d3b      	adds	r3, r7, #4
 800422c:	2200      	movs	r2, #0
 800422e:	211f      	movs	r1, #31
 8004230:	4618      	mov	r0, r3
 8004232:	f005 f841 	bl	80092b8 <osSignalWait>
	if (evt.status == osEventSignal){
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b08      	cmp	r3, #8
			//TODO LÓGICA DE PISCADA DE LAMPADA
		}
	}

	//decremento e apos desligamento lampada
	if(PrimitiveStates.SegundosLampada>0){
 800423a:	4b15      	ldr	r3, [pc, #84]	; (8004290 <funcionamentoLampada+0x6c>)
 800423c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004240:	2b00      	cmp	r3, #0
 8004242:	d021      	beq.n	8004288 <funcionamentoLampada+0x64>
		PrimitiveStates.SegundosLampada--;
 8004244:	4b12      	ldr	r3, [pc, #72]	; (8004290 <funcionamentoLampada+0x6c>)
 8004246:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800424a:	3b01      	subs	r3, #1
 800424c:	b2da      	uxtb	r2, r3
 800424e:	4b10      	ldr	r3, [pc, #64]	; (8004290 <funcionamentoLampada+0x6c>)
 8004250:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		if(PrimitiveStates.SegundosLampada==0){
 8004254:	4b0e      	ldr	r3, [pc, #56]	; (8004290 <funcionamentoLampada+0x6c>)
 8004256:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10c      	bne.n	8004278 <funcionamentoLampada+0x54>
			LAMPADA_OFF
 800425e:	2200      	movs	r2, #0
 8004260:	2140      	movs	r1, #64	; 0x40
 8004262:	480c      	ldr	r0, [pc, #48]	; (8004294 <funcionamentoLampada+0x70>)
 8004264:	f001 fab1 	bl	80057ca <HAL_GPIO_WritePin>
 8004268:	4b09      	ldr	r3, [pc, #36]	; (8004290 <funcionamentoLampada+0x6c>)
 800426a:	2200      	movs	r2, #0
 800426c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8004270:	4b07      	ldr	r3, [pc, #28]	; (8004290 <funcionamentoLampada+0x6c>)
 8004272:	2200      	movs	r2, #0
 8004274:	70da      	strb	r2, [r3, #3]
		}else{
			LAMPADA_ON
		}
	}
}
 8004276:	e007      	b.n	8004288 <funcionamentoLampada+0x64>
			LAMPADA_ON
 8004278:	2201      	movs	r2, #1
 800427a:	2140      	movs	r1, #64	; 0x40
 800427c:	4805      	ldr	r0, [pc, #20]	; (8004294 <funcionamentoLampada+0x70>)
 800427e:	f001 faa4 	bl	80057ca <HAL_GPIO_WritePin>
 8004282:	4b03      	ldr	r3, [pc, #12]	; (8004290 <funcionamentoLampada+0x6c>)
 8004284:	2201      	movs	r2, #1
 8004286:	70da      	strb	r2, [r3, #3]
}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	20001068 	.word	0x20001068
 8004294:	40010c00 	.word	0x40010c00

08004298 <verificaErro>:

void verificaErro(void){
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
	osEvent evt;
	evt = osSignalWait (ERRO_CRITICO, 0);
 800429e:	1d3b      	adds	r3, r7, #4
 80042a0:	2200      	movs	r2, #0
 80042a2:	210f      	movs	r1, #15
 80042a4:	4618      	mov	r0, r3
 80042a6:	f005 f807 	bl	80092b8 <osSignalWait>
	if (evt.status == osEventSignal){
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d107      	bne.n	80042c0 <verificaErro+0x28>

		if(evt.value.v == ERRO_CRITICO){
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b0f      	cmp	r3, #15
 80042b4:	d104      	bne.n	80042c0 <verificaErro+0x28>
			//TODO REVISAR
			osThreadSuspend(TaskTimerHandle);
 80042b6:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <verificaErro+0x30>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f005 f956 	bl	800956c <osThreadSuspend>
		}
	}
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20000c5c 	.word	0x20000c5c

080042cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042d0:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <HAL_Init+0x28>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a07      	ldr	r2, [pc, #28]	; (80042f4 <HAL_Init+0x28>)
 80042d6:	f043 0310 	orr.w	r3, r3, #16
 80042da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042dc:	2003      	movs	r0, #3
 80042de:	f000 fcdb 	bl	8004c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042e2:	200f      	movs	r0, #15
 80042e4:	f7fe ffba 	bl	800325c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042e8:	f7fe fd02 	bl	8002cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40022000 	.word	0x40022000

080042f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_IncTick+0x1c>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_IncTick+0x20>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4413      	add	r3, r2
 8004308:	4a03      	ldr	r2, [pc, #12]	; (8004318 <HAL_IncTick+0x20>)
 800430a:	6013      	str	r3, [r2, #0]
}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	20000208 	.word	0x20000208
 8004318:	20001280 	.word	0x20001280

0800431c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return uwTick;
 8004320:	4b02      	ldr	r3, [pc, #8]	; (800432c <HAL_GetTick+0x10>)
 8004322:	681b      	ldr	r3, [r3, #0]
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr
 800432c:	20001280 	.word	0x20001280

08004330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004338:	f7ff fff0 	bl	800431c <HAL_GetTick>
 800433c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004348:	d005      	beq.n	8004356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <HAL_Delay+0x44>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004356:	bf00      	nop
 8004358:	f7ff ffe0 	bl	800431c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	429a      	cmp	r2, r3
 8004366:	d8f7      	bhi.n	8004358 <HAL_Delay+0x28>
  {
  }
}
 8004368:	bf00      	nop
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20000208 	.word	0x20000208

08004378 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e0be      	b.n	8004518 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d109      	bne.n	80043bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fe fcd2 	bl	8002d60 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 faf5 	bl	80049ac <ADC_ConversionStop_Disable>
 80043c2:	4603      	mov	r3, r0
 80043c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	f003 0310 	and.w	r3, r3, #16
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f040 8099 	bne.w	8004506 <HAL_ADC_Init+0x18e>
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f040 8095 	bne.w	8004506 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80043e4:	f023 0302 	bic.w	r3, r3, #2
 80043e8:	f043 0202 	orr.w	r2, r3, #2
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80043f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	7b1b      	ldrb	r3, [r3, #12]
 80043fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004400:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	4313      	orrs	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004410:	d003      	beq.n	800441a <HAL_ADC_Init+0xa2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d102      	bne.n	8004420 <HAL_ADC_Init+0xa8>
 800441a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800441e:	e000      	b.n	8004422 <HAL_ADC_Init+0xaa>
 8004420:	2300      	movs	r3, #0
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	7d1b      	ldrb	r3, [r3, #20]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d119      	bne.n	8004464 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	7b1b      	ldrb	r3, [r3, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	3b01      	subs	r3, #1
 800443e:	035a      	lsls	r2, r3, #13
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	e00b      	b.n	8004464 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	f043 0220 	orr.w	r2, r3, #32
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	f043 0201 	orr.w	r2, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	4b28      	ldr	r3, [pc, #160]	; (8004520 <HAL_ADC_Init+0x1a8>)
 8004480:	4013      	ands	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	430b      	orrs	r3, r1
 800448a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004494:	d003      	beq.n	800449e <HAL_ADC_Init+0x126>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d104      	bne.n	80044a8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	051b      	lsls	r3, r3, #20
 80044a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	4b18      	ldr	r3, [pc, #96]	; (8004524 <HAL_ADC_Init+0x1ac>)
 80044c4:	4013      	ands	r3, r2
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d10b      	bne.n	80044e4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	f023 0303 	bic.w	r3, r3, #3
 80044da:	f043 0201 	orr.w	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80044e2:	e018      	b.n	8004516 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	f023 0312 	bic.w	r3, r3, #18
 80044ec:	f043 0210 	orr.w	r2, r3, #16
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	f043 0201 	orr.w	r2, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004504:	e007      	b.n	8004516 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	f043 0210 	orr.w	r2, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004516:	7dfb      	ldrb	r3, [r7, #23]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	ffe1f7fd 	.word	0xffe1f7fd
 8004524:	ff1f0efe 	.word	0xff1f0efe

08004528 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a64      	ldr	r2, [pc, #400]	; (80046d0 <HAL_ADC_Start_DMA+0x1a8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <HAL_ADC_Start_DMA+0x24>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a63      	ldr	r2, [pc, #396]	; (80046d4 <HAL_ADC_Start_DMA+0x1ac>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d106      	bne.n	800455a <HAL_ADC_Start_DMA+0x32>
 800454c:	4b60      	ldr	r3, [pc, #384]	; (80046d0 <HAL_ADC_Start_DMA+0x1a8>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004554:	2b00      	cmp	r3, #0
 8004556:	f040 80b3 	bne.w	80046c0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_ADC_Start_DMA+0x40>
 8004564:	2302      	movs	r3, #2
 8004566:	e0ae      	b.n	80046c6 <HAL_ADC_Start_DMA+0x19e>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f9c1 	bl	80048f8 <ADC_Enable>
 8004576:	4603      	mov	r3, r0
 8004578:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800457a:	7dfb      	ldrb	r3, [r7, #23]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f040 809a 	bne.w	80046b6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a4e      	ldr	r2, [pc, #312]	; (80046d4 <HAL_ADC_Start_DMA+0x1ac>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d105      	bne.n	80045ac <HAL_ADC_Start_DMA+0x84>
 80045a0:	4b4b      	ldr	r3, [pc, #300]	; (80046d0 <HAL_ADC_Start_DMA+0x1a8>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d115      	bne.n	80045d8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d026      	beq.n	8004614 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045d6:	e01d      	b.n	8004614 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a39      	ldr	r2, [pc, #228]	; (80046d0 <HAL_ADC_Start_DMA+0x1a8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_ADC_Start_DMA+0xd0>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a38      	ldr	r2, [pc, #224]	; (80046d4 <HAL_ADC_Start_DMA+0x1ac>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d10d      	bne.n	8004614 <HAL_ADC_Start_DMA+0xec>
 80045f8:	4b35      	ldr	r3, [pc, #212]	; (80046d0 <HAL_ADC_Start_DMA+0x1a8>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800460c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d006      	beq.n	800462e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	f023 0206 	bic.w	r2, r3, #6
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c
 800462c:	e002      	b.n	8004634 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	4a25      	ldr	r2, [pc, #148]	; (80046d8 <HAL_ADC_Start_DMA+0x1b0>)
 8004642:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4a24      	ldr	r2, [pc, #144]	; (80046dc <HAL_ADC_Start_DMA+0x1b4>)
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	4a23      	ldr	r2, [pc, #140]	; (80046e0 <HAL_ADC_Start_DMA+0x1b8>)
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0202 	mvn.w	r2, #2
 800465c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800466c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a18      	ldr	r0, [r3, #32]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	334c      	adds	r3, #76	; 0x4c
 8004678:	4619      	mov	r1, r3
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f000 fc05 	bl	8004e8c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800468c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004690:	d108      	bne.n	80046a4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80046a0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80046a2:	e00f      	b.n	80046c4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80046b2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80046b4:	e006      	b.n	80046c4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80046be:	e001      	b.n	80046c4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40012400 	.word	0x40012400
 80046d4:	40012800 	.word	0x40012800
 80046d8:	08004a2f 	.word	0x08004a2f
 80046dc:	08004aab 	.word	0x08004aab
 80046e0:	08004ac7 	.word	0x08004ac7

080046e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x20>
 8004724:	2302      	movs	r3, #2
 8004726:	e0dc      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x1da>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b06      	cmp	r3, #6
 8004736:	d81c      	bhi.n	8004772 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	3b05      	subs	r3, #5
 800474a:	221f      	movs	r2, #31
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	43db      	mvns	r3, r3
 8004752:	4019      	ands	r1, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	3b05      	subs	r3, #5
 8004764:	fa00 f203 	lsl.w	r2, r0, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	635a      	str	r2, [r3, #52]	; 0x34
 8004770:	e03c      	b.n	80047ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b0c      	cmp	r3, #12
 8004778:	d81c      	bhi.n	80047b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	3b23      	subs	r3, #35	; 0x23
 800478c:	221f      	movs	r2, #31
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43db      	mvns	r3, r3
 8004794:	4019      	ands	r1, r3
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	3b23      	subs	r3, #35	; 0x23
 80047a6:	fa00 f203 	lsl.w	r2, r0, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
 80047b2:	e01b      	b.n	80047ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	3b41      	subs	r3, #65	; 0x41
 80047c6:	221f      	movs	r2, #31
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	4019      	ands	r1, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	3b41      	subs	r3, #65	; 0x41
 80047e0:	fa00 f203 	lsl.w	r2, r0, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b09      	cmp	r3, #9
 80047f2:	d91c      	bls.n	800482e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68d9      	ldr	r1, [r3, #12]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4613      	mov	r3, r2
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	4413      	add	r3, r2
 8004804:	3b1e      	subs	r3, #30
 8004806:	2207      	movs	r2, #7
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	4019      	ands	r1, r3
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6898      	ldr	r0, [r3, #8]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4413      	add	r3, r2
 800481e:	3b1e      	subs	r3, #30
 8004820:	fa00 f203 	lsl.w	r2, r0, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	60da      	str	r2, [r3, #12]
 800482c:	e019      	b.n	8004862 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6919      	ldr	r1, [r3, #16]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	2207      	movs	r2, #7
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	4019      	ands	r1, r3
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	6898      	ldr	r0, [r3, #8]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	4413      	add	r3, r2
 8004856:	fa00 f203 	lsl.w	r2, r0, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b10      	cmp	r3, #16
 8004868:	d003      	beq.n	8004872 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800486e:	2b11      	cmp	r3, #17
 8004870:	d132      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a1d      	ldr	r2, [pc, #116]	; (80048ec <HAL_ADC_ConfigChannel+0x1e4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d125      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d126      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004898:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b10      	cmp	r3, #16
 80048a0:	d11a      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048a2:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	0c9a      	lsrs	r2, r3, #18
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80048b8:	e002      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	3b01      	subs	r3, #1
 80048be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f9      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x1b2>
 80048c6:	e007      	b.n	80048d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr
 80048ec:	40012400 	.word	0x40012400
 80048f0:	20000200 	.word	0x20000200
 80048f4:	431bde83 	.word	0x431bde83

080048f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b01      	cmp	r3, #1
 8004914:	d040      	beq.n	8004998 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0201 	orr.w	r2, r2, #1
 8004924:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004926:	4b1f      	ldr	r3, [pc, #124]	; (80049a4 <ADC_Enable+0xac>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1f      	ldr	r2, [pc, #124]	; (80049a8 <ADC_Enable+0xb0>)
 800492c:	fba2 2303 	umull	r2, r3, r2, r3
 8004930:	0c9b      	lsrs	r3, r3, #18
 8004932:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004934:	e002      	b.n	800493c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	3b01      	subs	r3, #1
 800493a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f9      	bne.n	8004936 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004942:	f7ff fceb 	bl	800431c <HAL_GetTick>
 8004946:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004948:	e01f      	b.n	800498a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800494a:	f7ff fce7 	bl	800431c <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d918      	bls.n	800498a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b01      	cmp	r3, #1
 8004964:	d011      	beq.n	800498a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	f043 0210 	orr.w	r2, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	f043 0201 	orr.w	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e007      	b.n	800499a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b01      	cmp	r3, #1
 8004996:	d1d8      	bne.n	800494a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000200 	.word	0x20000200
 80049a8:	431bde83 	.word	0x431bde83

080049ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d12e      	bne.n	8004a24 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0201 	bic.w	r2, r2, #1
 80049d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049d6:	f7ff fca1 	bl	800431c <HAL_GetTick>
 80049da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80049dc:	e01b      	b.n	8004a16 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80049de:	f7ff fc9d 	bl	800431c <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d914      	bls.n	8004a16 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d10d      	bne.n	8004a16 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	f043 0210 	orr.w	r2, r3, #16
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	f043 0201 	orr.w	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e007      	b.n	8004a26 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d0dc      	beq.n	80049de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d127      	bne.n	8004a98 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004a5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004a62:	d115      	bne.n	8004a90 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d111      	bne.n	8004a90 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d105      	bne.n	8004a90 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	f043 0201 	orr.w	r2, r3, #1
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7fd fd79 	bl	8002588 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004a96:	e004      	b.n	8004aa2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	4798      	blx	r3
}
 8004aa2:	bf00      	nop
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f7ff fe13 	bl	80046e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004abe:	bf00      	nop
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	f043 0204 	orr.w	r2, r3, #4
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff fe02 	bl	80046f6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <__NVIC_SetPriorityGrouping+0x44>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b18:	4013      	ands	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b2e:	4a04      	ldr	r2, [pc, #16]	; (8004b40 <__NVIC_SetPriorityGrouping+0x44>)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	60d3      	str	r3, [r2, #12]
}
 8004b34:	bf00      	nop
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	e000ed00 	.word	0xe000ed00

08004b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <__NVIC_GetPriorityGrouping+0x18>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	0a1b      	lsrs	r3, r3, #8
 8004b4e:	f003 0307 	and.w	r3, r3, #7
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	e000ed00 	.word	0xe000ed00

08004b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	db0b      	blt.n	8004b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	f003 021f 	and.w	r2, r3, #31
 8004b78:	4906      	ldr	r1, [pc, #24]	; (8004b94 <__NVIC_EnableIRQ+0x34>)
 8004b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	2001      	movs	r0, #1
 8004b82:	fa00 f202 	lsl.w	r2, r0, r2
 8004b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	e000e100 	.word	0xe000e100

08004b98 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	db12      	blt.n	8004bd0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	f003 021f 	and.w	r2, r3, #31
 8004bb0:	490a      	ldr	r1, [pc, #40]	; (8004bdc <__NVIC_DisableIRQ+0x44>)
 8004bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	2001      	movs	r0, #1
 8004bba:	fa00 f202 	lsl.w	r2, r0, r2
 8004bbe:	3320      	adds	r3, #32
 8004bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004bc4:	f3bf 8f4f 	dsb	sy
}
 8004bc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004bca:	f3bf 8f6f 	isb	sy
}
 8004bce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	e000e100 	.word	0xe000e100

08004be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	6039      	str	r1, [r7, #0]
 8004bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	db0a      	blt.n	8004c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	490c      	ldr	r1, [pc, #48]	; (8004c2c <__NVIC_SetPriority+0x4c>)
 8004bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfe:	0112      	lsls	r2, r2, #4
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	440b      	add	r3, r1
 8004c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c08:	e00a      	b.n	8004c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	4908      	ldr	r1, [pc, #32]	; (8004c30 <__NVIC_SetPriority+0x50>)
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	3b04      	subs	r3, #4
 8004c18:	0112      	lsls	r2, r2, #4
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	761a      	strb	r2, [r3, #24]
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	e000e100 	.word	0xe000e100
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b089      	sub	sp, #36	; 0x24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f1c3 0307 	rsb	r3, r3, #7
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	bf28      	it	cs
 8004c52:	2304      	movcs	r3, #4
 8004c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	2b06      	cmp	r3, #6
 8004c5c:	d902      	bls.n	8004c64 <NVIC_EncodePriority+0x30>
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3b03      	subs	r3, #3
 8004c62:	e000      	b.n	8004c66 <NVIC_EncodePriority+0x32>
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c68:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	43da      	mvns	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	401a      	ands	r2, r3
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	fa01 f303 	lsl.w	r3, r1, r3
 8004c86:	43d9      	mvns	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c8c:	4313      	orrs	r3, r2
         );
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3724      	adds	r7, #36	; 0x24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr

08004c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff ff2b 	bl	8004afc <__NVIC_SetPriorityGrouping>
}
 8004ca6:	bf00      	nop
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b086      	sub	sp, #24
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
 8004cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cc0:	f7ff ff40 	bl	8004b44 <__NVIC_GetPriorityGrouping>
 8004cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	6978      	ldr	r0, [r7, #20]
 8004ccc:	f7ff ffb2 	bl	8004c34 <NVIC_EncodePriority>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff ff81 	bl	8004be0 <__NVIC_SetPriority>
}
 8004cde:	bf00      	nop
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	4603      	mov	r3, r0
 8004cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff ff33 	bl	8004b60 <__NVIC_EnableIRQ>
}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	4603      	mov	r3, r0
 8004d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff41 	bl	8004b98 <__NVIC_DisableIRQ>
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e043      	b.n	8004dbe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4b22      	ldr	r3, [pc, #136]	; (8004dc8 <HAL_DMA_Init+0xa8>)
 8004d3e:	4413      	add	r3, r2
 8004d40:	4a22      	ldr	r2, [pc, #136]	; (8004dcc <HAL_DMA_Init+0xac>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	091b      	lsrs	r3, r3, #4
 8004d48:	009a      	lsls	r2, r3, #2
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a1f      	ldr	r2, [pc, #124]	; (8004dd0 <HAL_DMA_Init+0xb0>)
 8004d52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004d6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004d6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr
 8004dc8:	bffdfff8 	.word	0xbffdfff8
 8004dcc:	cccccccd 	.word	0xcccccccd
 8004dd0:	40020000 	.word	0x40020000

08004dd4 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e046      	b.n	8004e74 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0201 	bic.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2200      	movs	r2, #0
 8004e04:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2200      	movs	r2, #0
 8004e14:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <HAL_DMA_DeInit+0xac>)
 8004e1e:	4413      	add	r3, r2
 8004e20:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <HAL_DMA_DeInit+0xb0>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	091b      	lsrs	r3, r3, #4
 8004e28:	009a      	lsls	r2, r3, #2
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a15      	ldr	r2, [pc, #84]	; (8004e88 <HAL_DMA_DeInit+0xb4>)
 8004e32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e42:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	bffdfff8 	.word	0xbffdfff8
 8004e84:	cccccccd 	.word	0xcccccccd
 8004e88:	40020000 	.word	0x40020000

08004e8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_DMA_Start_IT+0x20>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e04b      	b.n	8004f44 <HAL_DMA_Start_IT+0xb8>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d13a      	bne.n	8004f36 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0201 	bic.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f9eb 	bl	80052c0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d008      	beq.n	8004f04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 020e 	orr.w	r2, r2, #14
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	e00f      	b.n	8004f24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0204 	bic.w	r2, r2, #4
 8004f12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 020a 	orr.w	r2, r2, #10
 8004f22:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e005      	b.n	8004f42 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d008      	beq.n	8004f76 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2204      	movs	r2, #4
 8004f68:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e020      	b.n	8004fb8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 020e 	bic.w	r2, r2, #14
 8004f84:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0201 	bic.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr
	...

08004fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d005      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2204      	movs	r2, #4
 8004fe0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	73fb      	strb	r3, [r7, #15]
 8004fe6:	e051      	b.n	800508c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 020e 	bic.w	r2, r2, #14
 8004ff6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a22      	ldr	r2, [pc, #136]	; (8005098 <HAL_DMA_Abort_IT+0xd4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d029      	beq.n	8005066 <HAL_DMA_Abort_IT+0xa2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a21      	ldr	r2, [pc, #132]	; (800509c <HAL_DMA_Abort_IT+0xd8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d022      	beq.n	8005062 <HAL_DMA_Abort_IT+0x9e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1f      	ldr	r2, [pc, #124]	; (80050a0 <HAL_DMA_Abort_IT+0xdc>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d01a      	beq.n	800505c <HAL_DMA_Abort_IT+0x98>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1e      	ldr	r2, [pc, #120]	; (80050a4 <HAL_DMA_Abort_IT+0xe0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d012      	beq.n	8005056 <HAL_DMA_Abort_IT+0x92>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <HAL_DMA_Abort_IT+0xe4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00a      	beq.n	8005050 <HAL_DMA_Abort_IT+0x8c>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1b      	ldr	r2, [pc, #108]	; (80050ac <HAL_DMA_Abort_IT+0xe8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d102      	bne.n	800504a <HAL_DMA_Abort_IT+0x86>
 8005044:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005048:	e00e      	b.n	8005068 <HAL_DMA_Abort_IT+0xa4>
 800504a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800504e:	e00b      	b.n	8005068 <HAL_DMA_Abort_IT+0xa4>
 8005050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005054:	e008      	b.n	8005068 <HAL_DMA_Abort_IT+0xa4>
 8005056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800505a:	e005      	b.n	8005068 <HAL_DMA_Abort_IT+0xa4>
 800505c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005060:	e002      	b.n	8005068 <HAL_DMA_Abort_IT+0xa4>
 8005062:	2310      	movs	r3, #16
 8005064:	e000      	b.n	8005068 <HAL_DMA_Abort_IT+0xa4>
 8005066:	2301      	movs	r3, #1
 8005068:	4a11      	ldr	r2, [pc, #68]	; (80050b0 <HAL_DMA_Abort_IT+0xec>)
 800506a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4798      	blx	r3
    } 
  }
  return status;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40020008 	.word	0x40020008
 800509c:	4002001c 	.word	0x4002001c
 80050a0:	40020030 	.word	0x40020030
 80050a4:	40020044 	.word	0x40020044
 80050a8:	40020058 	.word	0x40020058
 80050ac:	4002006c 	.word	0x4002006c
 80050b0:	40020000 	.word	0x40020000

080050b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	2204      	movs	r2, #4
 80050d2:	409a      	lsls	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d04f      	beq.n	800517c <HAL_DMA_IRQHandler+0xc8>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d04a      	beq.n	800517c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d107      	bne.n	8005104 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0204 	bic.w	r2, r2, #4
 8005102:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a66      	ldr	r2, [pc, #408]	; (80052a4 <HAL_DMA_IRQHandler+0x1f0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d029      	beq.n	8005162 <HAL_DMA_IRQHandler+0xae>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a65      	ldr	r2, [pc, #404]	; (80052a8 <HAL_DMA_IRQHandler+0x1f4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d022      	beq.n	800515e <HAL_DMA_IRQHandler+0xaa>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a63      	ldr	r2, [pc, #396]	; (80052ac <HAL_DMA_IRQHandler+0x1f8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01a      	beq.n	8005158 <HAL_DMA_IRQHandler+0xa4>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a62      	ldr	r2, [pc, #392]	; (80052b0 <HAL_DMA_IRQHandler+0x1fc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d012      	beq.n	8005152 <HAL_DMA_IRQHandler+0x9e>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a60      	ldr	r2, [pc, #384]	; (80052b4 <HAL_DMA_IRQHandler+0x200>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00a      	beq.n	800514c <HAL_DMA_IRQHandler+0x98>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a5f      	ldr	r2, [pc, #380]	; (80052b8 <HAL_DMA_IRQHandler+0x204>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d102      	bne.n	8005146 <HAL_DMA_IRQHandler+0x92>
 8005140:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005144:	e00e      	b.n	8005164 <HAL_DMA_IRQHandler+0xb0>
 8005146:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800514a:	e00b      	b.n	8005164 <HAL_DMA_IRQHandler+0xb0>
 800514c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005150:	e008      	b.n	8005164 <HAL_DMA_IRQHandler+0xb0>
 8005152:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005156:	e005      	b.n	8005164 <HAL_DMA_IRQHandler+0xb0>
 8005158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800515c:	e002      	b.n	8005164 <HAL_DMA_IRQHandler+0xb0>
 800515e:	2340      	movs	r3, #64	; 0x40
 8005160:	e000      	b.n	8005164 <HAL_DMA_IRQHandler+0xb0>
 8005162:	2304      	movs	r3, #4
 8005164:	4a55      	ldr	r2, [pc, #340]	; (80052bc <HAL_DMA_IRQHandler+0x208>)
 8005166:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 8094 	beq.w	800529a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800517a:	e08e      	b.n	800529a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	2202      	movs	r2, #2
 8005182:	409a      	lsls	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d056      	beq.n	800523a <HAL_DMA_IRQHandler+0x186>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d051      	beq.n	800523a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10b      	bne.n	80051bc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 020a 	bic.w	r2, r2, #10
 80051b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a38      	ldr	r2, [pc, #224]	; (80052a4 <HAL_DMA_IRQHandler+0x1f0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d029      	beq.n	800521a <HAL_DMA_IRQHandler+0x166>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a37      	ldr	r2, [pc, #220]	; (80052a8 <HAL_DMA_IRQHandler+0x1f4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d022      	beq.n	8005216 <HAL_DMA_IRQHandler+0x162>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a35      	ldr	r2, [pc, #212]	; (80052ac <HAL_DMA_IRQHandler+0x1f8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d01a      	beq.n	8005210 <HAL_DMA_IRQHandler+0x15c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a34      	ldr	r2, [pc, #208]	; (80052b0 <HAL_DMA_IRQHandler+0x1fc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d012      	beq.n	800520a <HAL_DMA_IRQHandler+0x156>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a32      	ldr	r2, [pc, #200]	; (80052b4 <HAL_DMA_IRQHandler+0x200>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00a      	beq.n	8005204 <HAL_DMA_IRQHandler+0x150>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a31      	ldr	r2, [pc, #196]	; (80052b8 <HAL_DMA_IRQHandler+0x204>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d102      	bne.n	80051fe <HAL_DMA_IRQHandler+0x14a>
 80051f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051fc:	e00e      	b.n	800521c <HAL_DMA_IRQHandler+0x168>
 80051fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005202:	e00b      	b.n	800521c <HAL_DMA_IRQHandler+0x168>
 8005204:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005208:	e008      	b.n	800521c <HAL_DMA_IRQHandler+0x168>
 800520a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800520e:	e005      	b.n	800521c <HAL_DMA_IRQHandler+0x168>
 8005210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005214:	e002      	b.n	800521c <HAL_DMA_IRQHandler+0x168>
 8005216:	2320      	movs	r3, #32
 8005218:	e000      	b.n	800521c <HAL_DMA_IRQHandler+0x168>
 800521a:	2302      	movs	r3, #2
 800521c:	4a27      	ldr	r2, [pc, #156]	; (80052bc <HAL_DMA_IRQHandler+0x208>)
 800521e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	2b00      	cmp	r3, #0
 800522e:	d034      	beq.n	800529a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005238:	e02f      	b.n	800529a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	2208      	movs	r2, #8
 8005240:	409a      	lsls	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4013      	ands	r3, r2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d028      	beq.n	800529c <HAL_DMA_IRQHandler+0x1e8>
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b00      	cmp	r3, #0
 8005252:	d023      	beq.n	800529c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 020e 	bic.w	r2, r2, #14
 8005262:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526c:	2101      	movs	r1, #1
 800526e:	fa01 f202 	lsl.w	r2, r1, r2
 8005272:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	2b00      	cmp	r3, #0
 8005290:	d004      	beq.n	800529c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	4798      	blx	r3
    }
  }
  return;
 800529a:	bf00      	nop
 800529c:	bf00      	nop
}
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40020008 	.word	0x40020008
 80052a8:	4002001c 	.word	0x4002001c
 80052ac:	40020030 	.word	0x40020030
 80052b0:	40020044 	.word	0x40020044
 80052b4:	40020058 	.word	0x40020058
 80052b8:	4002006c 	.word	0x4002006c
 80052bc:	40020000 	.word	0x40020000

080052c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d6:	2101      	movs	r1, #1
 80052d8:	fa01 f202 	lsl.w	r2, r1, r2
 80052dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b10      	cmp	r3, #16
 80052ec:	d108      	bne.n	8005300 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052fe:	e007      	b.n	8005310 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	60da      	str	r2, [r3, #12]
}
 8005310:	bf00      	nop
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr
	...

0800531c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800531c:	b480      	push	{r7}
 800531e:	b08b      	sub	sp, #44	; 0x2c
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005326:	2300      	movs	r3, #0
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800532a:	2300      	movs	r3, #0
 800532c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800532e:	e169      	b.n	8005604 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005330:	2201      	movs	r2, #1
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	4013      	ands	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	429a      	cmp	r2, r3
 800534a:	f040 8158 	bne.w	80055fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4a9a      	ldr	r2, [pc, #616]	; (80055bc <HAL_GPIO_Init+0x2a0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d05e      	beq.n	8005416 <HAL_GPIO_Init+0xfa>
 8005358:	4a98      	ldr	r2, [pc, #608]	; (80055bc <HAL_GPIO_Init+0x2a0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d875      	bhi.n	800544a <HAL_GPIO_Init+0x12e>
 800535e:	4a98      	ldr	r2, [pc, #608]	; (80055c0 <HAL_GPIO_Init+0x2a4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d058      	beq.n	8005416 <HAL_GPIO_Init+0xfa>
 8005364:	4a96      	ldr	r2, [pc, #600]	; (80055c0 <HAL_GPIO_Init+0x2a4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d86f      	bhi.n	800544a <HAL_GPIO_Init+0x12e>
 800536a:	4a96      	ldr	r2, [pc, #600]	; (80055c4 <HAL_GPIO_Init+0x2a8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d052      	beq.n	8005416 <HAL_GPIO_Init+0xfa>
 8005370:	4a94      	ldr	r2, [pc, #592]	; (80055c4 <HAL_GPIO_Init+0x2a8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d869      	bhi.n	800544a <HAL_GPIO_Init+0x12e>
 8005376:	4a94      	ldr	r2, [pc, #592]	; (80055c8 <HAL_GPIO_Init+0x2ac>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d04c      	beq.n	8005416 <HAL_GPIO_Init+0xfa>
 800537c:	4a92      	ldr	r2, [pc, #584]	; (80055c8 <HAL_GPIO_Init+0x2ac>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d863      	bhi.n	800544a <HAL_GPIO_Init+0x12e>
 8005382:	4a92      	ldr	r2, [pc, #584]	; (80055cc <HAL_GPIO_Init+0x2b0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d046      	beq.n	8005416 <HAL_GPIO_Init+0xfa>
 8005388:	4a90      	ldr	r2, [pc, #576]	; (80055cc <HAL_GPIO_Init+0x2b0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d85d      	bhi.n	800544a <HAL_GPIO_Init+0x12e>
 800538e:	2b12      	cmp	r3, #18
 8005390:	d82a      	bhi.n	80053e8 <HAL_GPIO_Init+0xcc>
 8005392:	2b12      	cmp	r3, #18
 8005394:	d859      	bhi.n	800544a <HAL_GPIO_Init+0x12e>
 8005396:	a201      	add	r2, pc, #4	; (adr r2, 800539c <HAL_GPIO_Init+0x80>)
 8005398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539c:	08005417 	.word	0x08005417
 80053a0:	080053f1 	.word	0x080053f1
 80053a4:	08005403 	.word	0x08005403
 80053a8:	08005445 	.word	0x08005445
 80053ac:	0800544b 	.word	0x0800544b
 80053b0:	0800544b 	.word	0x0800544b
 80053b4:	0800544b 	.word	0x0800544b
 80053b8:	0800544b 	.word	0x0800544b
 80053bc:	0800544b 	.word	0x0800544b
 80053c0:	0800544b 	.word	0x0800544b
 80053c4:	0800544b 	.word	0x0800544b
 80053c8:	0800544b 	.word	0x0800544b
 80053cc:	0800544b 	.word	0x0800544b
 80053d0:	0800544b 	.word	0x0800544b
 80053d4:	0800544b 	.word	0x0800544b
 80053d8:	0800544b 	.word	0x0800544b
 80053dc:	0800544b 	.word	0x0800544b
 80053e0:	080053f9 	.word	0x080053f9
 80053e4:	0800540d 	.word	0x0800540d
 80053e8:	4a79      	ldr	r2, [pc, #484]	; (80055d0 <HAL_GPIO_Init+0x2b4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d013      	beq.n	8005416 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80053ee:	e02c      	b.n	800544a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	623b      	str	r3, [r7, #32]
          break;
 80053f6:	e029      	b.n	800544c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	3304      	adds	r3, #4
 80053fe:	623b      	str	r3, [r7, #32]
          break;
 8005400:	e024      	b.n	800544c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	3308      	adds	r3, #8
 8005408:	623b      	str	r3, [r7, #32]
          break;
 800540a:	e01f      	b.n	800544c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	330c      	adds	r3, #12
 8005412:	623b      	str	r3, [r7, #32]
          break;
 8005414:	e01a      	b.n	800544c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d102      	bne.n	8005424 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800541e:	2304      	movs	r3, #4
 8005420:	623b      	str	r3, [r7, #32]
          break;
 8005422:	e013      	b.n	800544c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d105      	bne.n	8005438 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800542c:	2308      	movs	r3, #8
 800542e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	611a      	str	r2, [r3, #16]
          break;
 8005436:	e009      	b.n	800544c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005438:	2308      	movs	r3, #8
 800543a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	615a      	str	r2, [r3, #20]
          break;
 8005442:	e003      	b.n	800544c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005444:	2300      	movs	r3, #0
 8005446:	623b      	str	r3, [r7, #32]
          break;
 8005448:	e000      	b.n	800544c <HAL_GPIO_Init+0x130>
          break;
 800544a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	2bff      	cmp	r3, #255	; 0xff
 8005450:	d801      	bhi.n	8005456 <HAL_GPIO_Init+0x13a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	e001      	b.n	800545a <HAL_GPIO_Init+0x13e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3304      	adds	r3, #4
 800545a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2bff      	cmp	r3, #255	; 0xff
 8005460:	d802      	bhi.n	8005468 <HAL_GPIO_Init+0x14c>
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	e002      	b.n	800546e <HAL_GPIO_Init+0x152>
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	3b08      	subs	r3, #8
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	210f      	movs	r1, #15
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	fa01 f303 	lsl.w	r3, r1, r3
 800547c:	43db      	mvns	r3, r3
 800547e:	401a      	ands	r2, r3
 8005480:	6a39      	ldr	r1, [r7, #32]
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	fa01 f303 	lsl.w	r3, r1, r3
 8005488:	431a      	orrs	r2, r3
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80b1 	beq.w	80055fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800549c:	4b4d      	ldr	r3, [pc, #308]	; (80055d4 <HAL_GPIO_Init+0x2b8>)
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	4a4c      	ldr	r2, [pc, #304]	; (80055d4 <HAL_GPIO_Init+0x2b8>)
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	6193      	str	r3, [r2, #24]
 80054a8:	4b4a      	ldr	r3, [pc, #296]	; (80055d4 <HAL_GPIO_Init+0x2b8>)
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	60bb      	str	r3, [r7, #8]
 80054b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80054b4:	4a48      	ldr	r2, [pc, #288]	; (80055d8 <HAL_GPIO_Init+0x2bc>)
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	089b      	lsrs	r3, r3, #2
 80054ba:	3302      	adds	r3, #2
 80054bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	220f      	movs	r2, #15
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	43db      	mvns	r3, r3
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4013      	ands	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a40      	ldr	r2, [pc, #256]	; (80055dc <HAL_GPIO_Init+0x2c0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <HAL_GPIO_Init+0x1ec>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a3f      	ldr	r2, [pc, #252]	; (80055e0 <HAL_GPIO_Init+0x2c4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00d      	beq.n	8005504 <HAL_GPIO_Init+0x1e8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a3e      	ldr	r2, [pc, #248]	; (80055e4 <HAL_GPIO_Init+0x2c8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <HAL_GPIO_Init+0x1e4>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a3d      	ldr	r2, [pc, #244]	; (80055e8 <HAL_GPIO_Init+0x2cc>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d101      	bne.n	80054fc <HAL_GPIO_Init+0x1e0>
 80054f8:	2303      	movs	r3, #3
 80054fa:	e006      	b.n	800550a <HAL_GPIO_Init+0x1ee>
 80054fc:	2304      	movs	r3, #4
 80054fe:	e004      	b.n	800550a <HAL_GPIO_Init+0x1ee>
 8005500:	2302      	movs	r3, #2
 8005502:	e002      	b.n	800550a <HAL_GPIO_Init+0x1ee>
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <HAL_GPIO_Init+0x1ee>
 8005508:	2300      	movs	r3, #0
 800550a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550c:	f002 0203 	and.w	r2, r2, #3
 8005510:	0092      	lsls	r2, r2, #2
 8005512:	4093      	lsls	r3, r2
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800551a:	492f      	ldr	r1, [pc, #188]	; (80055d8 <HAL_GPIO_Init+0x2bc>)
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	089b      	lsrs	r3, r3, #2
 8005520:	3302      	adds	r3, #2
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d006      	beq.n	8005542 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005534:	4b2d      	ldr	r3, [pc, #180]	; (80055ec <HAL_GPIO_Init+0x2d0>)
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	492c      	ldr	r1, [pc, #176]	; (80055ec <HAL_GPIO_Init+0x2d0>)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	4313      	orrs	r3, r2
 800553e:	608b      	str	r3, [r1, #8]
 8005540:	e006      	b.n	8005550 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005542:	4b2a      	ldr	r3, [pc, #168]	; (80055ec <HAL_GPIO_Init+0x2d0>)
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	43db      	mvns	r3, r3
 800554a:	4928      	ldr	r1, [pc, #160]	; (80055ec <HAL_GPIO_Init+0x2d0>)
 800554c:	4013      	ands	r3, r2
 800554e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d006      	beq.n	800556a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800555c:	4b23      	ldr	r3, [pc, #140]	; (80055ec <HAL_GPIO_Init+0x2d0>)
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	4922      	ldr	r1, [pc, #136]	; (80055ec <HAL_GPIO_Init+0x2d0>)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	4313      	orrs	r3, r2
 8005566:	60cb      	str	r3, [r1, #12]
 8005568:	e006      	b.n	8005578 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800556a:	4b20      	ldr	r3, [pc, #128]	; (80055ec <HAL_GPIO_Init+0x2d0>)
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	43db      	mvns	r3, r3
 8005572:	491e      	ldr	r1, [pc, #120]	; (80055ec <HAL_GPIO_Init+0x2d0>)
 8005574:	4013      	ands	r3, r2
 8005576:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d006      	beq.n	8005592 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005584:	4b19      	ldr	r3, [pc, #100]	; (80055ec <HAL_GPIO_Init+0x2d0>)
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	4918      	ldr	r1, [pc, #96]	; (80055ec <HAL_GPIO_Init+0x2d0>)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	4313      	orrs	r3, r2
 800558e:	604b      	str	r3, [r1, #4]
 8005590:	e006      	b.n	80055a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005592:	4b16      	ldr	r3, [pc, #88]	; (80055ec <HAL_GPIO_Init+0x2d0>)
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	43db      	mvns	r3, r3
 800559a:	4914      	ldr	r1, [pc, #80]	; (80055ec <HAL_GPIO_Init+0x2d0>)
 800559c:	4013      	ands	r3, r2
 800559e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d021      	beq.n	80055f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80055ac:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <HAL_GPIO_Init+0x2d0>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	490e      	ldr	r1, [pc, #56]	; (80055ec <HAL_GPIO_Init+0x2d0>)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	600b      	str	r3, [r1, #0]
 80055b8:	e021      	b.n	80055fe <HAL_GPIO_Init+0x2e2>
 80055ba:	bf00      	nop
 80055bc:	10320000 	.word	0x10320000
 80055c0:	10310000 	.word	0x10310000
 80055c4:	10220000 	.word	0x10220000
 80055c8:	10210000 	.word	0x10210000
 80055cc:	10120000 	.word	0x10120000
 80055d0:	10110000 	.word	0x10110000
 80055d4:	40021000 	.word	0x40021000
 80055d8:	40010000 	.word	0x40010000
 80055dc:	40010800 	.word	0x40010800
 80055e0:	40010c00 	.word	0x40010c00
 80055e4:	40011000 	.word	0x40011000
 80055e8:	40011400 	.word	0x40011400
 80055ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <HAL_GPIO_Init+0x304>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	43db      	mvns	r3, r3
 80055f8:	4909      	ldr	r1, [pc, #36]	; (8005620 <HAL_GPIO_Init+0x304>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	3301      	adds	r3, #1
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	fa22 f303 	lsr.w	r3, r2, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	f47f ae8e 	bne.w	8005330 <HAL_GPIO_Init+0x14>
  }
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	372c      	adds	r7, #44	; 0x2c
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr
 8005620:	40010400 	.word	0x40010400

08005624 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005624:	b480      	push	{r7}
 8005626:	b089      	sub	sp, #36	; 0x24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8005632:	e09a      	b.n	800576a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005634:	2201      	movs	r2, #1
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	4013      	ands	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 808d 	beq.w	8005764 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800564a:	4a4e      	ldr	r2, [pc, #312]	; (8005784 <HAL_GPIO_DeInit+0x160>)
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	089b      	lsrs	r3, r3, #2
 8005650:	3302      	adds	r3, #2
 8005652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005656:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	220f      	movs	r2, #15
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4013      	ands	r3, r2
 800566a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a46      	ldr	r2, [pc, #280]	; (8005788 <HAL_GPIO_DeInit+0x164>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d013      	beq.n	800569c <HAL_GPIO_DeInit+0x78>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a45      	ldr	r2, [pc, #276]	; (800578c <HAL_GPIO_DeInit+0x168>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00d      	beq.n	8005698 <HAL_GPIO_DeInit+0x74>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a44      	ldr	r2, [pc, #272]	; (8005790 <HAL_GPIO_DeInit+0x16c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d007      	beq.n	8005694 <HAL_GPIO_DeInit+0x70>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a43      	ldr	r2, [pc, #268]	; (8005794 <HAL_GPIO_DeInit+0x170>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d101      	bne.n	8005690 <HAL_GPIO_DeInit+0x6c>
 800568c:	2303      	movs	r3, #3
 800568e:	e006      	b.n	800569e <HAL_GPIO_DeInit+0x7a>
 8005690:	2304      	movs	r3, #4
 8005692:	e004      	b.n	800569e <HAL_GPIO_DeInit+0x7a>
 8005694:	2302      	movs	r3, #2
 8005696:	e002      	b.n	800569e <HAL_GPIO_DeInit+0x7a>
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <HAL_GPIO_DeInit+0x7a>
 800569c:	2300      	movs	r3, #0
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	f002 0203 	and.w	r2, r2, #3
 80056a4:	0092      	lsls	r2, r2, #2
 80056a6:	4093      	lsls	r3, r2
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d132      	bne.n	8005714 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80056ae:	4b3a      	ldr	r3, [pc, #232]	; (8005798 <HAL_GPIO_DeInit+0x174>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	43db      	mvns	r3, r3
 80056b6:	4938      	ldr	r1, [pc, #224]	; (8005798 <HAL_GPIO_DeInit+0x174>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80056bc:	4b36      	ldr	r3, [pc, #216]	; (8005798 <HAL_GPIO_DeInit+0x174>)
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	43db      	mvns	r3, r3
 80056c4:	4934      	ldr	r1, [pc, #208]	; (8005798 <HAL_GPIO_DeInit+0x174>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80056ca:	4b33      	ldr	r3, [pc, #204]	; (8005798 <HAL_GPIO_DeInit+0x174>)
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	43db      	mvns	r3, r3
 80056d2:	4931      	ldr	r1, [pc, #196]	; (8005798 <HAL_GPIO_DeInit+0x174>)
 80056d4:	4013      	ands	r3, r2
 80056d6:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80056d8:	4b2f      	ldr	r3, [pc, #188]	; (8005798 <HAL_GPIO_DeInit+0x174>)
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	43db      	mvns	r3, r3
 80056e0:	492d      	ldr	r1, [pc, #180]	; (8005798 <HAL_GPIO_DeInit+0x174>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f003 0303 	and.w	r3, r3, #3
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	220f      	movs	r2, #15
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80056f6:	4a23      	ldr	r2, [pc, #140]	; (8005784 <HAL_GPIO_DeInit+0x160>)
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	089b      	lsrs	r3, r3, #2
 80056fc:	3302      	adds	r3, #2
 80056fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	43da      	mvns	r2, r3
 8005706:	481f      	ldr	r0, [pc, #124]	; (8005784 <HAL_GPIO_DeInit+0x160>)
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	089b      	lsrs	r3, r3, #2
 800570c:	400a      	ands	r2, r1
 800570e:	3302      	adds	r3, #2
 8005710:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	2bff      	cmp	r3, #255	; 0xff
 8005718:	d801      	bhi.n	800571e <HAL_GPIO_DeInit+0xfa>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	e001      	b.n	8005722 <HAL_GPIO_DeInit+0xfe>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	3304      	adds	r3, #4
 8005722:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	2bff      	cmp	r3, #255	; 0xff
 8005728:	d802      	bhi.n	8005730 <HAL_GPIO_DeInit+0x10c>
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	e002      	b.n	8005736 <HAL_GPIO_DeInit+0x112>
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	3b08      	subs	r3, #8
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	210f      	movs	r1, #15
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	fa01 f303 	lsl.w	r3, r1, r3
 8005744:	43db      	mvns	r3, r3
 8005746:	401a      	ands	r2, r3
 8005748:	2104      	movs	r1, #4
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	fa01 f303 	lsl.w	r3, r1, r3
 8005750:	431a      	orrs	r2, r3
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	43db      	mvns	r3, r3
 800575e:	401a      	ands	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	3301      	adds	r3, #1
 8005768:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	fa22 f303 	lsr.w	r3, r2, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	f47f af5e 	bne.w	8005634 <HAL_GPIO_DeInit+0x10>
  }
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	3724      	adds	r7, #36	; 0x24
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr
 8005784:	40010000 	.word	0x40010000
 8005788:	40010800 	.word	0x40010800
 800578c:	40010c00 	.word	0x40010c00
 8005790:	40011000 	.word	0x40011000
 8005794:	40011400 	.word	0x40011400
 8005798:	40010400 	.word	0x40010400

0800579c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	887b      	ldrh	r3, [r7, #2]
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057b4:	2301      	movs	r3, #1
 80057b6:	73fb      	strb	r3, [r7, #15]
 80057b8:	e001      	b.n	80057be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057ba:	2300      	movs	r3, #0
 80057bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057be:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bc80      	pop	{r7}
 80057c8:	4770      	bx	lr

080057ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	460b      	mov	r3, r1
 80057d4:	807b      	strh	r3, [r7, #2]
 80057d6:	4613      	mov	r3, r2
 80057d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057da:	787b      	ldrb	r3, [r7, #1]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057e0:	887a      	ldrh	r2, [r7, #2]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80057e6:	e003      	b.n	80057f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80057e8:	887b      	ldrh	r3, [r7, #2]
 80057ea:	041a      	lsls	r2, r3, #16
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	611a      	str	r2, [r3, #16]
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc80      	pop	{r7}
 80057f8:	4770      	bx	lr
	...

080057fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e12b      	b.n	8005a66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7fd fb04 	bl	8002e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2224      	movs	r2, #36	; 0x24
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0201 	bic.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800584e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800585e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005860:	f001 f970 	bl	8006b44 <HAL_RCC_GetPCLK1Freq>
 8005864:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	4a81      	ldr	r2, [pc, #516]	; (8005a70 <HAL_I2C_Init+0x274>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d807      	bhi.n	8005880 <HAL_I2C_Init+0x84>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a80      	ldr	r2, [pc, #512]	; (8005a74 <HAL_I2C_Init+0x278>)
 8005874:	4293      	cmp	r3, r2
 8005876:	bf94      	ite	ls
 8005878:	2301      	movls	r3, #1
 800587a:	2300      	movhi	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	e006      	b.n	800588e <HAL_I2C_Init+0x92>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4a7d      	ldr	r2, [pc, #500]	; (8005a78 <HAL_I2C_Init+0x27c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	bf94      	ite	ls
 8005888:	2301      	movls	r3, #1
 800588a:	2300      	movhi	r3, #0
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e0e7      	b.n	8005a66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4a78      	ldr	r2, [pc, #480]	; (8005a7c <HAL_I2C_Init+0x280>)
 800589a:	fba2 2303 	umull	r2, r3, r2, r3
 800589e:	0c9b      	lsrs	r3, r3, #18
 80058a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	4a6a      	ldr	r2, [pc, #424]	; (8005a70 <HAL_I2C_Init+0x274>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d802      	bhi.n	80058d0 <HAL_I2C_Init+0xd4>
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	3301      	adds	r3, #1
 80058ce:	e009      	b.n	80058e4 <HAL_I2C_Init+0xe8>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058d6:	fb02 f303 	mul.w	r3, r2, r3
 80058da:	4a69      	ldr	r2, [pc, #420]	; (8005a80 <HAL_I2C_Init+0x284>)
 80058dc:	fba2 2303 	umull	r2, r3, r2, r3
 80058e0:	099b      	lsrs	r3, r3, #6
 80058e2:	3301      	adds	r3, #1
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	430b      	orrs	r3, r1
 80058ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	495c      	ldr	r1, [pc, #368]	; (8005a70 <HAL_I2C_Init+0x274>)
 8005900:	428b      	cmp	r3, r1
 8005902:	d819      	bhi.n	8005938 <HAL_I2C_Init+0x13c>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	1e59      	subs	r1, r3, #1
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005912:	1c59      	adds	r1, r3, #1
 8005914:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005918:	400b      	ands	r3, r1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_I2C_Init+0x138>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1e59      	subs	r1, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	fbb1 f3f3 	udiv	r3, r1, r3
 800592c:	3301      	adds	r3, #1
 800592e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005932:	e051      	b.n	80059d8 <HAL_I2C_Init+0x1dc>
 8005934:	2304      	movs	r3, #4
 8005936:	e04f      	b.n	80059d8 <HAL_I2C_Init+0x1dc>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d111      	bne.n	8005964 <HAL_I2C_Init+0x168>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	1e58      	subs	r0, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6859      	ldr	r1, [r3, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	440b      	add	r3, r1
 800594e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005952:	3301      	adds	r3, #1
 8005954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005958:	2b00      	cmp	r3, #0
 800595a:	bf0c      	ite	eq
 800595c:	2301      	moveq	r3, #1
 800595e:	2300      	movne	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	e012      	b.n	800598a <HAL_I2C_Init+0x18e>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	1e58      	subs	r0, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6859      	ldr	r1, [r3, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	0099      	lsls	r1, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	fbb0 f3f3 	udiv	r3, r0, r3
 800597a:	3301      	adds	r3, #1
 800597c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005980:	2b00      	cmp	r3, #0
 8005982:	bf0c      	ite	eq
 8005984:	2301      	moveq	r3, #1
 8005986:	2300      	movne	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <HAL_I2C_Init+0x196>
 800598e:	2301      	movs	r3, #1
 8005990:	e022      	b.n	80059d8 <HAL_I2C_Init+0x1dc>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10e      	bne.n	80059b8 <HAL_I2C_Init+0x1bc>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	1e58      	subs	r0, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6859      	ldr	r1, [r3, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	440b      	add	r3, r1
 80059a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ac:	3301      	adds	r3, #1
 80059ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059b6:	e00f      	b.n	80059d8 <HAL_I2C_Init+0x1dc>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	1e58      	subs	r0, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6859      	ldr	r1, [r3, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	0099      	lsls	r1, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ce:	3301      	adds	r3, #1
 80059d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	6809      	ldr	r1, [r1, #0]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69da      	ldr	r2, [r3, #28]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6911      	ldr	r1, [r2, #16]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	68d2      	ldr	r2, [r2, #12]
 8005a12:	4311      	orrs	r1, r2
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6812      	ldr	r2, [r2, #0]
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	000186a0 	.word	0x000186a0
 8005a74:	001e847f 	.word	0x001e847f
 8005a78:	003d08ff 	.word	0x003d08ff
 8005a7c:	431bde83 	.word	0x431bde83
 8005a80:	10624dd3 	.word	0x10624dd3

08005a84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	4611      	mov	r1, r2
 8005a90:	461a      	mov	r2, r3
 8005a92:	4603      	mov	r3, r0
 8005a94:	817b      	strh	r3, [r7, #10]
 8005a96:	460b      	mov	r3, r1
 8005a98:	813b      	strh	r3, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a9e:	f7fe fc3d 	bl	800431c <HAL_GetTick>
 8005aa2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	f040 80d9 	bne.w	8005c64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	2319      	movs	r3, #25
 8005ab8:	2201      	movs	r2, #1
 8005aba:	496d      	ldr	r1, [pc, #436]	; (8005c70 <HAL_I2C_Mem_Write+0x1ec>)
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 fa9f 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e0cc      	b.n	8005c66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_I2C_Mem_Write+0x56>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e0c5      	b.n	8005c66 <HAL_I2C_Mem_Write+0x1e2>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d007      	beq.n	8005b00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0201 	orr.w	r2, r2, #1
 8005afe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2221      	movs	r2, #33	; 0x21
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2240      	movs	r2, #64	; 0x40
 8005b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a3a      	ldr	r2, [r7, #32]
 8005b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4a4d      	ldr	r2, [pc, #308]	; (8005c74 <HAL_I2C_Mem_Write+0x1f0>)
 8005b40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b42:	88f8      	ldrh	r0, [r7, #6]
 8005b44:	893a      	ldrh	r2, [r7, #8]
 8005b46:	8979      	ldrh	r1, [r7, #10]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	4603      	mov	r3, r0
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f9be 	bl	8005ed4 <I2C_RequestMemoryWrite>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d052      	beq.n	8005c04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e081      	b.n	8005c66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 fb64 	bl	8006234 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00d      	beq.n	8005b8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d107      	bne.n	8005b8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e06b      	b.n	8005c66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	781a      	ldrb	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d11b      	bne.n	8005c04 <HAL_I2C_Mem_Write+0x180>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d017      	beq.n	8005c04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	781a      	ldrb	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1aa      	bne.n	8005b62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 fb57 	bl	80062c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00d      	beq.n	8005c38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	2b04      	cmp	r3, #4
 8005c22:	d107      	bne.n	8005c34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e016      	b.n	8005c66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e000      	b.n	8005c66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c64:	2302      	movs	r3, #2
  }
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	00100002 	.word	0x00100002
 8005c74:	ffff0000 	.word	0xffff0000

08005c78 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	; 0x28
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	607a      	str	r2, [r7, #4]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	460b      	mov	r3, r1
 8005c86:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005c88:	f7fe fb48 	bl	800431c <HAL_GetTick>
 8005c8c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	f040 8111 	bne.w	8005ec2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	2319      	movs	r3, #25
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	4988      	ldr	r1, [pc, #544]	; (8005ecc <HAL_I2C_IsDeviceReady+0x254>)
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 f9a8 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e104      	b.n	8005ec4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_I2C_IsDeviceReady+0x50>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e0fd      	b.n	8005ec4 <HAL_I2C_IsDeviceReady+0x24c>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d007      	beq.n	8005cee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0201 	orr.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2224      	movs	r2, #36	; 0x24
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4a70      	ldr	r2, [pc, #448]	; (8005ed0 <HAL_I2C_IsDeviceReady+0x258>)
 8005d10:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d20:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 f966 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00d      	beq.n	8005d56 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d48:	d103      	bne.n	8005d52 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d50:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e0b6      	b.n	8005ec4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d56:	897b      	ldrh	r3, [r7, #10]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d64:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005d66:	f7fe fad9 	bl	800431c <HAL_GetTick>
 8005d6a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	bf0c      	ite	eq
 8005d7a:	2301      	moveq	r3, #1
 8005d7c:	2300      	movne	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d90:	bf0c      	ite	eq
 8005d92:	2301      	moveq	r3, #1
 8005d94:	2300      	movne	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005d9a:	e025      	b.n	8005de8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d9c:	f7fe fabe 	bl	800431c <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d302      	bcc.n	8005db2 <HAL_I2C_IsDeviceReady+0x13a>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d103      	bne.n	8005dba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	22a0      	movs	r2, #160	; 0xa0
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	bf0c      	ite	eq
 8005dc8:	2301      	moveq	r3, #1
 8005dca:	2300      	movne	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dde:	bf0c      	ite	eq
 8005de0:	2301      	moveq	r3, #1
 8005de2:	2300      	movne	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2ba0      	cmp	r3, #160	; 0xa0
 8005df2:	d005      	beq.n	8005e00 <HAL_I2C_IsDeviceReady+0x188>
 8005df4:	7dfb      	ldrb	r3, [r7, #23]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d102      	bne.n	8005e00 <HAL_I2C_IsDeviceReady+0x188>
 8005dfa:	7dbb      	ldrb	r3, [r7, #22]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0cd      	beq.n	8005d9c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d129      	bne.n	8005e6a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e24:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e26:	2300      	movs	r3, #0
 8005e28:	613b      	str	r3, [r7, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	2319      	movs	r3, #25
 8005e42:	2201      	movs	r2, #1
 8005e44:	4921      	ldr	r1, [pc, #132]	; (8005ecc <HAL_I2C_IsDeviceReady+0x254>)
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f8da 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e036      	b.n	8005ec4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	e02c      	b.n	8005ec4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e78:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e82:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	2319      	movs	r3, #25
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	490f      	ldr	r1, [pc, #60]	; (8005ecc <HAL_I2C_IsDeviceReady+0x254>)
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 f8b6 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e012      	b.n	8005ec4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	f4ff af32 	bcc.w	8005d12 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005ec2:	2302      	movs	r3, #2
  }
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3720      	adds	r7, #32
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	00100002 	.word	0x00100002
 8005ed0:	ffff0000 	.word	0xffff0000

08005ed4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	4608      	mov	r0, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	817b      	strh	r3, [r7, #10]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	813b      	strh	r3, [r7, #8]
 8005eea:	4613      	mov	r3, r2
 8005eec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005efc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 f878 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00d      	beq.n	8005f32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f24:	d103      	bne.n	8005f2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e05f      	b.n	8005ff2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f32:	897b      	ldrh	r3, [r7, #10]
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	6a3a      	ldr	r2, [r7, #32]
 8005f46:	492d      	ldr	r1, [pc, #180]	; (8005ffc <I2C_RequestMemoryWrite+0x128>)
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f8d3 	bl	80060f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e04c      	b.n	8005ff2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f70:	6a39      	ldr	r1, [r7, #32]
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 f95e 	bl	8006234 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00d      	beq.n	8005f9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d107      	bne.n	8005f96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e02b      	b.n	8005ff2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d105      	bne.n	8005fac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fa0:	893b      	ldrh	r3, [r7, #8]
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	611a      	str	r2, [r3, #16]
 8005faa:	e021      	b.n	8005ff0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fac:	893b      	ldrh	r3, [r7, #8]
 8005fae:	0a1b      	lsrs	r3, r3, #8
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbc:	6a39      	ldr	r1, [r7, #32]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f938 	bl	8006234 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00d      	beq.n	8005fe6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d107      	bne.n	8005fe2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e005      	b.n	8005ff2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fe6:	893b      	ldrh	r3, [r7, #8]
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	00010002 	.word	0x00010002

08006000 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	4613      	mov	r3, r2
 800600e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006010:	e048      	b.n	80060a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006018:	d044      	beq.n	80060a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601a:	f7fe f97f 	bl	800431c <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d302      	bcc.n	8006030 <I2C_WaitOnFlagUntilTimeout+0x30>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d139      	bne.n	80060a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	0c1b      	lsrs	r3, r3, #16
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b01      	cmp	r3, #1
 8006038:	d10d      	bne.n	8006056 <I2C_WaitOnFlagUntilTimeout+0x56>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	43da      	mvns	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	e00c      	b.n	8006070 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	43da      	mvns	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4013      	ands	r3, r2
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	429a      	cmp	r2, r3
 8006074:	d116      	bne.n	80060a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006090:	f043 0220 	orr.w	r2, r3, #32
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e023      	b.n	80060ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	0c1b      	lsrs	r3, r3, #16
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d10d      	bne.n	80060ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	43da      	mvns	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	4013      	ands	r3, r2
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	bf0c      	ite	eq
 80060c0:	2301      	moveq	r3, #1
 80060c2:	2300      	movne	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	e00c      	b.n	80060e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	43da      	mvns	r2, r3
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	4013      	ands	r3, r2
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	bf0c      	ite	eq
 80060dc:	2301      	moveq	r3, #1
 80060de:	2300      	movne	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	461a      	mov	r2, r3
 80060e4:	79fb      	ldrb	r3, [r7, #7]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d093      	beq.n	8006012 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006102:	e071      	b.n	80061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800610e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006112:	d123      	bne.n	800615c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006122:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800612c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	f043 0204 	orr.w	r2, r3, #4
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e067      	b.n	800622c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006162:	d041      	beq.n	80061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006164:	f7fe f8da 	bl	800431c <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	429a      	cmp	r2, r3
 8006172:	d302      	bcc.n	800617a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d136      	bne.n	80061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	0c1b      	lsrs	r3, r3, #16
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b01      	cmp	r3, #1
 8006182:	d10c      	bne.n	800619e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	43da      	mvns	r2, r3
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4013      	ands	r3, r2
 8006190:	b29b      	uxth	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	bf14      	ite	ne
 8006196:	2301      	movne	r3, #1
 8006198:	2300      	moveq	r3, #0
 800619a:	b2db      	uxtb	r3, r3
 800619c:	e00b      	b.n	80061b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	43da      	mvns	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	4013      	ands	r3, r2
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bf14      	ite	ne
 80061b0:	2301      	movne	r3, #1
 80061b2:	2300      	moveq	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d016      	beq.n	80061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	f043 0220 	orr.w	r2, r3, #32
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e021      	b.n	800622c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	0c1b      	lsrs	r3, r3, #16
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d10c      	bne.n	800620c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	43da      	mvns	r2, r3
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	4013      	ands	r3, r2
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	bf14      	ite	ne
 8006204:	2301      	movne	r3, #1
 8006206:	2300      	moveq	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	e00b      	b.n	8006224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	43da      	mvns	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4013      	ands	r3, r2
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	bf14      	ite	ne
 800621e:	2301      	movne	r3, #1
 8006220:	2300      	moveq	r3, #0
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	f47f af6d 	bne.w	8006104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006240:	e034      	b.n	80062ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 f886 	bl	8006354 <I2C_IsAcknowledgeFailed>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e034      	b.n	80062bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006258:	d028      	beq.n	80062ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800625a:	f7fe f85f 	bl	800431c <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	429a      	cmp	r2, r3
 8006268:	d302      	bcc.n	8006270 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11d      	bne.n	80062ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627a:	2b80      	cmp	r3, #128	; 0x80
 800627c:	d016      	beq.n	80062ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006298:	f043 0220 	orr.w	r2, r3, #32
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e007      	b.n	80062bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b6:	2b80      	cmp	r3, #128	; 0x80
 80062b8:	d1c3      	bne.n	8006242 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062d0:	e034      	b.n	800633c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 f83e 	bl	8006354 <I2C_IsAcknowledgeFailed>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e034      	b.n	800634c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e8:	d028      	beq.n	800633c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ea:	f7fe f817 	bl	800431c <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d302      	bcc.n	8006300 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d11d      	bne.n	800633c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b04      	cmp	r3, #4
 800630c:	d016      	beq.n	800633c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	f043 0220 	orr.w	r2, r3, #32
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e007      	b.n	800634c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b04      	cmp	r3, #4
 8006348:	d1c3      	bne.n	80062d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636a:	d11b      	bne.n	80063a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006374:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006390:	f043 0204 	orr.w	r2, r3, #4
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr

080063b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e272      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 8087 	beq.w	80064de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063d0:	4b92      	ldr	r3, [pc, #584]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f003 030c 	and.w	r3, r3, #12
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d00c      	beq.n	80063f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063dc:	4b8f      	ldr	r3, [pc, #572]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f003 030c 	and.w	r3, r3, #12
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d112      	bne.n	800640e <HAL_RCC_OscConfig+0x5e>
 80063e8:	4b8c      	ldr	r3, [pc, #560]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f4:	d10b      	bne.n	800640e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063f6:	4b89      	ldr	r3, [pc, #548]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d06c      	beq.n	80064dc <HAL_RCC_OscConfig+0x12c>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d168      	bne.n	80064dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e24c      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006416:	d106      	bne.n	8006426 <HAL_RCC_OscConfig+0x76>
 8006418:	4b80      	ldr	r3, [pc, #512]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a7f      	ldr	r2, [pc, #508]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 800641e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	e02e      	b.n	8006484 <HAL_RCC_OscConfig+0xd4>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10c      	bne.n	8006448 <HAL_RCC_OscConfig+0x98>
 800642e:	4b7b      	ldr	r3, [pc, #492]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a7a      	ldr	r2, [pc, #488]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 8006434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	4b78      	ldr	r3, [pc, #480]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a77      	ldr	r2, [pc, #476]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 8006440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	e01d      	b.n	8006484 <HAL_RCC_OscConfig+0xd4>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006450:	d10c      	bne.n	800646c <HAL_RCC_OscConfig+0xbc>
 8006452:	4b72      	ldr	r3, [pc, #456]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a71      	ldr	r2, [pc, #452]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 8006458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	4b6f      	ldr	r3, [pc, #444]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a6e      	ldr	r2, [pc, #440]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 8006464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006468:	6013      	str	r3, [r2, #0]
 800646a:	e00b      	b.n	8006484 <HAL_RCC_OscConfig+0xd4>
 800646c:	4b6b      	ldr	r3, [pc, #428]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a6a      	ldr	r2, [pc, #424]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 8006472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	4b68      	ldr	r3, [pc, #416]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a67      	ldr	r2, [pc, #412]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 800647e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006482:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d013      	beq.n	80064b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800648c:	f7fd ff46 	bl	800431c <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006494:	f7fd ff42 	bl	800431c <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b64      	cmp	r3, #100	; 0x64
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e200      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064a6:	4b5d      	ldr	r3, [pc, #372]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0f0      	beq.n	8006494 <HAL_RCC_OscConfig+0xe4>
 80064b2:	e014      	b.n	80064de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b4:	f7fd ff32 	bl	800431c <HAL_GetTick>
 80064b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064bc:	f7fd ff2e 	bl	800431c <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b64      	cmp	r3, #100	; 0x64
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e1ec      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ce:	4b53      	ldr	r3, [pc, #332]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1f0      	bne.n	80064bc <HAL_RCC_OscConfig+0x10c>
 80064da:	e000      	b.n	80064de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d063      	beq.n	80065b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064ea:	4b4c      	ldr	r3, [pc, #304]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f003 030c 	and.w	r3, r3, #12
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00b      	beq.n	800650e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064f6:	4b49      	ldr	r3, [pc, #292]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f003 030c 	and.w	r3, r3, #12
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d11c      	bne.n	800653c <HAL_RCC_OscConfig+0x18c>
 8006502:	4b46      	ldr	r3, [pc, #280]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d116      	bne.n	800653c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800650e:	4b43      	ldr	r3, [pc, #268]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d005      	beq.n	8006526 <HAL_RCC_OscConfig+0x176>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d001      	beq.n	8006526 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e1c0      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006526:	4b3d      	ldr	r3, [pc, #244]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	4939      	ldr	r1, [pc, #228]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 8006536:	4313      	orrs	r3, r2
 8006538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800653a:	e03a      	b.n	80065b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d020      	beq.n	8006586 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006544:	4b36      	ldr	r3, [pc, #216]	; (8006620 <HAL_RCC_OscConfig+0x270>)
 8006546:	2201      	movs	r2, #1
 8006548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800654a:	f7fd fee7 	bl	800431c <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006552:	f7fd fee3 	bl	800431c <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e1a1      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006564:	4b2d      	ldr	r3, [pc, #180]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0f0      	beq.n	8006552 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006570:	4b2a      	ldr	r3, [pc, #168]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	4927      	ldr	r1, [pc, #156]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 8006580:	4313      	orrs	r3, r2
 8006582:	600b      	str	r3, [r1, #0]
 8006584:	e015      	b.n	80065b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006586:	4b26      	ldr	r3, [pc, #152]	; (8006620 <HAL_RCC_OscConfig+0x270>)
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658c:	f7fd fec6 	bl	800431c <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006594:	f7fd fec2 	bl	800431c <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e180      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065a6:	4b1d      	ldr	r3, [pc, #116]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f0      	bne.n	8006594 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d03a      	beq.n	8006634 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d019      	beq.n	80065fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065c6:	4b17      	ldr	r3, [pc, #92]	; (8006624 <HAL_RCC_OscConfig+0x274>)
 80065c8:	2201      	movs	r2, #1
 80065ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065cc:	f7fd fea6 	bl	800431c <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065d4:	f7fd fea2 	bl	800431c <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e160      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065e6:	4b0d      	ldr	r3, [pc, #52]	; (800661c <HAL_RCC_OscConfig+0x26c>)
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0f0      	beq.n	80065d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065f2:	2001      	movs	r0, #1
 80065f4:	f000 fafe 	bl	8006bf4 <RCC_Delay>
 80065f8:	e01c      	b.n	8006634 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065fa:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <HAL_RCC_OscConfig+0x274>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006600:	f7fd fe8c 	bl	800431c <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006606:	e00f      	b.n	8006628 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006608:	f7fd fe88 	bl	800431c <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d908      	bls.n	8006628 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e146      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
 800661a:	bf00      	nop
 800661c:	40021000 	.word	0x40021000
 8006620:	42420000 	.word	0x42420000
 8006624:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006628:	4b92      	ldr	r3, [pc, #584]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1e9      	bne.n	8006608 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80a6 	beq.w	800678e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006642:	2300      	movs	r3, #0
 8006644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006646:	4b8b      	ldr	r3, [pc, #556]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10d      	bne.n	800666e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006652:	4b88      	ldr	r3, [pc, #544]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	4a87      	ldr	r2, [pc, #540]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 8006658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665c:	61d3      	str	r3, [r2, #28]
 800665e:	4b85      	ldr	r3, [pc, #532]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006666:	60bb      	str	r3, [r7, #8]
 8006668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800666a:	2301      	movs	r3, #1
 800666c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666e:	4b82      	ldr	r3, [pc, #520]	; (8006878 <HAL_RCC_OscConfig+0x4c8>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006676:	2b00      	cmp	r3, #0
 8006678:	d118      	bne.n	80066ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800667a:	4b7f      	ldr	r3, [pc, #508]	; (8006878 <HAL_RCC_OscConfig+0x4c8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a7e      	ldr	r2, [pc, #504]	; (8006878 <HAL_RCC_OscConfig+0x4c8>)
 8006680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006686:	f7fd fe49 	bl	800431c <HAL_GetTick>
 800668a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800668c:	e008      	b.n	80066a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800668e:	f7fd fe45 	bl	800431c <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b64      	cmp	r3, #100	; 0x64
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e103      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a0:	4b75      	ldr	r3, [pc, #468]	; (8006878 <HAL_RCC_OscConfig+0x4c8>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0f0      	beq.n	800668e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d106      	bne.n	80066c2 <HAL_RCC_OscConfig+0x312>
 80066b4:	4b6f      	ldr	r3, [pc, #444]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	4a6e      	ldr	r2, [pc, #440]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 80066ba:	f043 0301 	orr.w	r3, r3, #1
 80066be:	6213      	str	r3, [r2, #32]
 80066c0:	e02d      	b.n	800671e <HAL_RCC_OscConfig+0x36e>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10c      	bne.n	80066e4 <HAL_RCC_OscConfig+0x334>
 80066ca:	4b6a      	ldr	r3, [pc, #424]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	4a69      	ldr	r2, [pc, #420]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 80066d0:	f023 0301 	bic.w	r3, r3, #1
 80066d4:	6213      	str	r3, [r2, #32]
 80066d6:	4b67      	ldr	r3, [pc, #412]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	4a66      	ldr	r2, [pc, #408]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 80066dc:	f023 0304 	bic.w	r3, r3, #4
 80066e0:	6213      	str	r3, [r2, #32]
 80066e2:	e01c      	b.n	800671e <HAL_RCC_OscConfig+0x36e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b05      	cmp	r3, #5
 80066ea:	d10c      	bne.n	8006706 <HAL_RCC_OscConfig+0x356>
 80066ec:	4b61      	ldr	r3, [pc, #388]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	4a60      	ldr	r2, [pc, #384]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 80066f2:	f043 0304 	orr.w	r3, r3, #4
 80066f6:	6213      	str	r3, [r2, #32]
 80066f8:	4b5e      	ldr	r3, [pc, #376]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	4a5d      	ldr	r2, [pc, #372]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	6213      	str	r3, [r2, #32]
 8006704:	e00b      	b.n	800671e <HAL_RCC_OscConfig+0x36e>
 8006706:	4b5b      	ldr	r3, [pc, #364]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	4a5a      	ldr	r2, [pc, #360]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 800670c:	f023 0301 	bic.w	r3, r3, #1
 8006710:	6213      	str	r3, [r2, #32]
 8006712:	4b58      	ldr	r3, [pc, #352]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	4a57      	ldr	r2, [pc, #348]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 8006718:	f023 0304 	bic.w	r3, r3, #4
 800671c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d015      	beq.n	8006752 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006726:	f7fd fdf9 	bl	800431c <HAL_GetTick>
 800672a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800672c:	e00a      	b.n	8006744 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800672e:	f7fd fdf5 	bl	800431c <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	f241 3288 	movw	r2, #5000	; 0x1388
 800673c:	4293      	cmp	r3, r2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e0b1      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006744:	4b4b      	ldr	r3, [pc, #300]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0ee      	beq.n	800672e <HAL_RCC_OscConfig+0x37e>
 8006750:	e014      	b.n	800677c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006752:	f7fd fde3 	bl	800431c <HAL_GetTick>
 8006756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006758:	e00a      	b.n	8006770 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800675a:	f7fd fddf 	bl	800431c <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	f241 3288 	movw	r2, #5000	; 0x1388
 8006768:	4293      	cmp	r3, r2
 800676a:	d901      	bls.n	8006770 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e09b      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006770:	4b40      	ldr	r3, [pc, #256]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1ee      	bne.n	800675a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800677c:	7dfb      	ldrb	r3, [r7, #23]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d105      	bne.n	800678e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006782:	4b3c      	ldr	r3, [pc, #240]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	4a3b      	ldr	r2, [pc, #236]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 8006788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800678c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 8087 	beq.w	80068a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006798:	4b36      	ldr	r3, [pc, #216]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f003 030c 	and.w	r3, r3, #12
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d061      	beq.n	8006868 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d146      	bne.n	800683a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ac:	4b33      	ldr	r3, [pc, #204]	; (800687c <HAL_RCC_OscConfig+0x4cc>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b2:	f7fd fdb3 	bl	800431c <HAL_GetTick>
 80067b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067b8:	e008      	b.n	80067cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ba:	f7fd fdaf 	bl	800431c <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e06d      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067cc:	4b29      	ldr	r3, [pc, #164]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1f0      	bne.n	80067ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e0:	d108      	bne.n	80067f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067e2:	4b24      	ldr	r3, [pc, #144]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	4921      	ldr	r1, [pc, #132]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067f4:	4b1f      	ldr	r3, [pc, #124]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a19      	ldr	r1, [r3, #32]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	430b      	orrs	r3, r1
 8006806:	491b      	ldr	r1, [pc, #108]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 8006808:	4313      	orrs	r3, r2
 800680a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800680c:	4b1b      	ldr	r3, [pc, #108]	; (800687c <HAL_RCC_OscConfig+0x4cc>)
 800680e:	2201      	movs	r2, #1
 8006810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006812:	f7fd fd83 	bl	800431c <HAL_GetTick>
 8006816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006818:	e008      	b.n	800682c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800681a:	f7fd fd7f 	bl	800431c <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e03d      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800682c:	4b11      	ldr	r3, [pc, #68]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0f0      	beq.n	800681a <HAL_RCC_OscConfig+0x46a>
 8006838:	e035      	b.n	80068a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800683a:	4b10      	ldr	r3, [pc, #64]	; (800687c <HAL_RCC_OscConfig+0x4cc>)
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006840:	f7fd fd6c 	bl	800431c <HAL_GetTick>
 8006844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006848:	f7fd fd68 	bl	800431c <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e026      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800685a:	4b06      	ldr	r3, [pc, #24]	; (8006874 <HAL_RCC_OscConfig+0x4c4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1f0      	bne.n	8006848 <HAL_RCC_OscConfig+0x498>
 8006866:	e01e      	b.n	80068a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d107      	bne.n	8006880 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e019      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
 8006874:	40021000 	.word	0x40021000
 8006878:	40007000 	.word	0x40007000
 800687c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006880:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <HAL_RCC_OscConfig+0x500>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	429a      	cmp	r2, r3
 8006892:	d106      	bne.n	80068a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800689e:	429a      	cmp	r2, r3
 80068a0:	d001      	beq.n	80068a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40021000 	.word	0x40021000

080068b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e0d0      	b.n	8006a6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068c8:	4b6a      	ldr	r3, [pc, #424]	; (8006a74 <HAL_RCC_ClockConfig+0x1c0>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d910      	bls.n	80068f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068d6:	4b67      	ldr	r3, [pc, #412]	; (8006a74 <HAL_RCC_ClockConfig+0x1c0>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f023 0207 	bic.w	r2, r3, #7
 80068de:	4965      	ldr	r1, [pc, #404]	; (8006a74 <HAL_RCC_ClockConfig+0x1c0>)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068e6:	4b63      	ldr	r3, [pc, #396]	; (8006a74 <HAL_RCC_ClockConfig+0x1c0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d001      	beq.n	80068f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e0b8      	b.n	8006a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b00      	cmp	r3, #0
 8006902:	d020      	beq.n	8006946 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	d005      	beq.n	800691c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006910:	4b59      	ldr	r3, [pc, #356]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	4a58      	ldr	r2, [pc, #352]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 8006916:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800691a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006928:	4b53      	ldr	r3, [pc, #332]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	4a52      	ldr	r2, [pc, #328]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 800692e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006932:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006934:	4b50      	ldr	r3, [pc, #320]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	494d      	ldr	r1, [pc, #308]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 8006942:	4313      	orrs	r3, r2
 8006944:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d040      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d107      	bne.n	800696a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800695a:	4b47      	ldr	r3, [pc, #284]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d115      	bne.n	8006992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e07f      	b.n	8006a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b02      	cmp	r3, #2
 8006970:	d107      	bne.n	8006982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006972:	4b41      	ldr	r3, [pc, #260]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e073      	b.n	8006a6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006982:	4b3d      	ldr	r3, [pc, #244]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e06b      	b.n	8006a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006992:	4b39      	ldr	r3, [pc, #228]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f023 0203 	bic.w	r2, r3, #3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	4936      	ldr	r1, [pc, #216]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069a4:	f7fd fcba 	bl	800431c <HAL_GetTick>
 80069a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069aa:	e00a      	b.n	80069c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069ac:	f7fd fcb6 	bl	800431c <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e053      	b.n	8006a6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c2:	4b2d      	ldr	r3, [pc, #180]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f003 020c 	and.w	r2, r3, #12
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d1eb      	bne.n	80069ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069d4:	4b27      	ldr	r3, [pc, #156]	; (8006a74 <HAL_RCC_ClockConfig+0x1c0>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0307 	and.w	r3, r3, #7
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d210      	bcs.n	8006a04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069e2:	4b24      	ldr	r3, [pc, #144]	; (8006a74 <HAL_RCC_ClockConfig+0x1c0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f023 0207 	bic.w	r2, r3, #7
 80069ea:	4922      	ldr	r1, [pc, #136]	; (8006a74 <HAL_RCC_ClockConfig+0x1c0>)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069f2:	4b20      	ldr	r3, [pc, #128]	; (8006a74 <HAL_RCC_ClockConfig+0x1c0>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d001      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e032      	b.n	8006a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d008      	beq.n	8006a22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a10:	4b19      	ldr	r3, [pc, #100]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	4916      	ldr	r1, [pc, #88]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0308 	and.w	r3, r3, #8
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d009      	beq.n	8006a42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a2e:	4b12      	ldr	r3, [pc, #72]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	490e      	ldr	r1, [pc, #56]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a42:	f000 f821 	bl	8006a88 <HAL_RCC_GetSysClockFreq>
 8006a46:	4602      	mov	r2, r0
 8006a48:	4b0b      	ldr	r3, [pc, #44]	; (8006a78 <HAL_RCC_ClockConfig+0x1c4>)
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	091b      	lsrs	r3, r3, #4
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	490a      	ldr	r1, [pc, #40]	; (8006a7c <HAL_RCC_ClockConfig+0x1c8>)
 8006a54:	5ccb      	ldrb	r3, [r1, r3]
 8006a56:	fa22 f303 	lsr.w	r3, r2, r3
 8006a5a:	4a09      	ldr	r2, [pc, #36]	; (8006a80 <HAL_RCC_ClockConfig+0x1cc>)
 8006a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a5e:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <HAL_RCC_ClockConfig+0x1d0>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fc fbfa 	bl	800325c <HAL_InitTick>

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	40022000 	.word	0x40022000
 8006a78:	40021000 	.word	0x40021000
 8006a7c:	0800cd5c 	.word	0x0800cd5c
 8006a80:	20000200 	.word	0x20000200
 8006a84:	20000204 	.word	0x20000204

08006a88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	2300      	movs	r3, #0
 8006a94:	60bb      	str	r3, [r7, #8]
 8006a96:	2300      	movs	r3, #0
 8006a98:	617b      	str	r3, [r7, #20]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006aa2:	4b1e      	ldr	r3, [pc, #120]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x94>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f003 030c 	and.w	r3, r3, #12
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d002      	beq.n	8006ab8 <HAL_RCC_GetSysClockFreq+0x30>
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d003      	beq.n	8006abe <HAL_RCC_GetSysClockFreq+0x36>
 8006ab6:	e027      	b.n	8006b08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ab8:	4b19      	ldr	r3, [pc, #100]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8006aba:	613b      	str	r3, [r7, #16]
      break;
 8006abc:	e027      	b.n	8006b0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	0c9b      	lsrs	r3, r3, #18
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	4a17      	ldr	r2, [pc, #92]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006ac8:	5cd3      	ldrb	r3, [r2, r3]
 8006aca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d010      	beq.n	8006af8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ad6:	4b11      	ldr	r3, [pc, #68]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x94>)
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	0c5b      	lsrs	r3, r3, #17
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	4a11      	ldr	r2, [pc, #68]	; (8006b28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006ae2:	5cd3      	ldrb	r3, [r2, r3]
 8006ae4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a0d      	ldr	r2, [pc, #52]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8006aea:	fb03 f202 	mul.w	r2, r3, r2
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	e004      	b.n	8006b02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a0c      	ldr	r2, [pc, #48]	; (8006b2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8006afc:	fb02 f303 	mul.w	r3, r2, r3
 8006b00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	613b      	str	r3, [r7, #16]
      break;
 8006b06:	e002      	b.n	8006b0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b08:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8006b0a:	613b      	str	r3, [r7, #16]
      break;
 8006b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b0e:	693b      	ldr	r3, [r7, #16]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	371c      	adds	r7, #28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bc80      	pop	{r7}
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	007a1200 	.word	0x007a1200
 8006b24:	0800cd74 	.word	0x0800cd74
 8006b28:	0800cd84 	.word	0x0800cd84
 8006b2c:	003d0900 	.word	0x003d0900

08006b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b34:	4b02      	ldr	r3, [pc, #8]	; (8006b40 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b36:	681b      	ldr	r3, [r3, #0]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bc80      	pop	{r7}
 8006b3e:	4770      	bx	lr
 8006b40:	20000200 	.word	0x20000200

08006b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b48:	f7ff fff2 	bl	8006b30 <HAL_RCC_GetHCLKFreq>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	0a1b      	lsrs	r3, r3, #8
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	4903      	ldr	r1, [pc, #12]	; (8006b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b5a:	5ccb      	ldrb	r3, [r1, r3]
 8006b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	40021000 	.word	0x40021000
 8006b68:	0800cd6c 	.word	0x0800cd6c

08006b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b70:	f7ff ffde 	bl	8006b30 <HAL_RCC_GetHCLKFreq>
 8006b74:	4602      	mov	r2, r0
 8006b76:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	0adb      	lsrs	r3, r3, #11
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	4903      	ldr	r1, [pc, #12]	; (8006b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b82:	5ccb      	ldrb	r3, [r1, r3]
 8006b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40021000 	.word	0x40021000
 8006b90:	0800cd6c 	.word	0x0800cd6c

08006b94 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	220f      	movs	r2, #15
 8006ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ba4:	4b11      	ldr	r3, [pc, #68]	; (8006bec <HAL_RCC_GetClockConfig+0x58>)
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f003 0203 	and.w	r2, r3, #3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006bb0:	4b0e      	ldr	r3, [pc, #56]	; (8006bec <HAL_RCC_GetClockConfig+0x58>)
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006bbc:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <HAL_RCC_GetClockConfig+0x58>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006bc8:	4b08      	ldr	r3, [pc, #32]	; (8006bec <HAL_RCC_GetClockConfig+0x58>)
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	08db      	lsrs	r3, r3, #3
 8006bce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006bd6:	4b06      	ldr	r3, [pc, #24]	; (8006bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0207 	and.w	r2, r3, #7
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bc80      	pop	{r7}
 8006bea:	4770      	bx	lr
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	40022000 	.word	0x40022000

08006bf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006bfc:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <RCC_Delay+0x34>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a0a      	ldr	r2, [pc, #40]	; (8006c2c <RCC_Delay+0x38>)
 8006c02:	fba2 2303 	umull	r2, r3, r2, r3
 8006c06:	0a5b      	lsrs	r3, r3, #9
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	fb02 f303 	mul.w	r3, r2, r3
 8006c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006c10:	bf00      	nop
  }
  while (Delay --);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	1e5a      	subs	r2, r3, #1
 8006c16:	60fa      	str	r2, [r7, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1f9      	bne.n	8006c10 <RCC_Delay+0x1c>
}
 8006c1c:	bf00      	nop
 8006c1e:	bf00      	nop
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bc80      	pop	{r7}
 8006c26:	4770      	bx	lr
 8006c28:	20000200 	.word	0x20000200
 8006c2c:	10624dd3 	.word	0x10624dd3

08006c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d07d      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c50:	4b4f      	ldr	r3, [pc, #316]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10d      	bne.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c5c:	4b4c      	ldr	r3, [pc, #304]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	4a4b      	ldr	r2, [pc, #300]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c66:	61d3      	str	r3, [r2, #28]
 8006c68:	4b49      	ldr	r3, [pc, #292]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c70:	60bb      	str	r3, [r7, #8]
 8006c72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c74:	2301      	movs	r3, #1
 8006c76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c78:	4b46      	ldr	r3, [pc, #280]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d118      	bne.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c84:	4b43      	ldr	r3, [pc, #268]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a42      	ldr	r2, [pc, #264]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c90:	f7fd fb44 	bl	800431c <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c96:	e008      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c98:	f7fd fb40 	bl	800431c <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b64      	cmp	r3, #100	; 0x64
 8006ca4:	d901      	bls.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e06d      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006caa:	4b3a      	ldr	r3, [pc, #232]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0f0      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006cb6:	4b36      	ldr	r3, [pc, #216]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d02e      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d027      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cd4:	4b2e      	ldr	r3, [pc, #184]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cdc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cde:	4b2e      	ldr	r3, [pc, #184]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ce4:	4b2c      	ldr	r3, [pc, #176]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006cea:	4a29      	ldr	r2, [pc, #164]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d014      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cfa:	f7fd fb0f 	bl	800431c <HAL_GetTick>
 8006cfe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d00:	e00a      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d02:	f7fd fb0b 	bl	800431c <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e036      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d18:	4b1d      	ldr	r3, [pc, #116]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d0ee      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d24:	4b1a      	ldr	r3, [pc, #104]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	4917      	ldr	r1, [pc, #92]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d105      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d3c:	4b14      	ldr	r3, [pc, #80]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	4a13      	ldr	r2, [pc, #76]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d008      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d54:	4b0e      	ldr	r3, [pc, #56]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	490b      	ldr	r1, [pc, #44]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0310 	and.w	r3, r3, #16
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d008      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d72:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	4904      	ldr	r1, [pc, #16]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	40021000 	.word	0x40021000
 8006d94:	40007000 	.word	0x40007000
 8006d98:	42420440 	.word	0x42420440

08006d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e041      	b.n	8006e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d106      	bne.n	8006dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7fc f884 	bl	8002ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4610      	mov	r0, r2
 8006ddc:	f000 fc94 	bl	8007708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d001      	beq.n	8006e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e03a      	b.n	8006eca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a18      	ldr	r2, [pc, #96]	; (8006ed4 <HAL_TIM_Base_Start_IT+0x98>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00e      	beq.n	8006e94 <HAL_TIM_Base_Start_IT+0x58>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7e:	d009      	beq.n	8006e94 <HAL_TIM_Base_Start_IT+0x58>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a14      	ldr	r2, [pc, #80]	; (8006ed8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d004      	beq.n	8006e94 <HAL_TIM_Base_Start_IT+0x58>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a13      	ldr	r2, [pc, #76]	; (8006edc <HAL_TIM_Base_Start_IT+0xa0>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d111      	bne.n	8006eb8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b06      	cmp	r3, #6
 8006ea4:	d010      	beq.n	8006ec8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f042 0201 	orr.w	r2, r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb6:	e007      	b.n	8006ec8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0201 	orr.w	r2, r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bc80      	pop	{r7}
 8006ed2:	4770      	bx	lr
 8006ed4:	40012c00 	.word	0x40012c00
 8006ed8:	40000400 	.word	0x40000400
 8006edc:	40000800 	.word	0x40000800

08006ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e041      	b.n	8006f76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f839 	bl	8006f7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4610      	mov	r0, r2
 8006f20:	f000 fbf2 	bl	8007708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bc80      	pop	{r7}
 8006f8e:	4770      	bx	lr

08006f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d109      	bne.n	8006fb4 <HAL_TIM_PWM_Start+0x24>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	bf14      	ite	ne
 8006fac:	2301      	movne	r3, #1
 8006fae:	2300      	moveq	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	e022      	b.n	8006ffa <HAL_TIM_PWM_Start+0x6a>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d109      	bne.n	8006fce <HAL_TIM_PWM_Start+0x3e>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	bf14      	ite	ne
 8006fc6:	2301      	movne	r3, #1
 8006fc8:	2300      	moveq	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	e015      	b.n	8006ffa <HAL_TIM_PWM_Start+0x6a>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d109      	bne.n	8006fe8 <HAL_TIM_PWM_Start+0x58>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	bf14      	ite	ne
 8006fe0:	2301      	movne	r3, #1
 8006fe2:	2300      	moveq	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	e008      	b.n	8006ffa <HAL_TIM_PWM_Start+0x6a>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	bf14      	ite	ne
 8006ff4:	2301      	movne	r3, #1
 8006ff6:	2300      	moveq	r3, #0
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e05e      	b.n	80070c0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d104      	bne.n	8007012 <HAL_TIM_PWM_Start+0x82>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007010:	e013      	b.n	800703a <HAL_TIM_PWM_Start+0xaa>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b04      	cmp	r3, #4
 8007016:	d104      	bne.n	8007022 <HAL_TIM_PWM_Start+0x92>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007020:	e00b      	b.n	800703a <HAL_TIM_PWM_Start+0xaa>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b08      	cmp	r3, #8
 8007026:	d104      	bne.n	8007032 <HAL_TIM_PWM_Start+0xa2>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007030:	e003      	b.n	800703a <HAL_TIM_PWM_Start+0xaa>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2202      	movs	r2, #2
 8007036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2201      	movs	r2, #1
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fde0 	bl	8007c08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a1e      	ldr	r2, [pc, #120]	; (80070c8 <HAL_TIM_PWM_Start+0x138>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d107      	bne.n	8007062 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007060:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a18      	ldr	r2, [pc, #96]	; (80070c8 <HAL_TIM_PWM_Start+0x138>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d00e      	beq.n	800708a <HAL_TIM_PWM_Start+0xfa>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007074:	d009      	beq.n	800708a <HAL_TIM_PWM_Start+0xfa>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a14      	ldr	r2, [pc, #80]	; (80070cc <HAL_TIM_PWM_Start+0x13c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d004      	beq.n	800708a <HAL_TIM_PWM_Start+0xfa>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a12      	ldr	r2, [pc, #72]	; (80070d0 <HAL_TIM_PWM_Start+0x140>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d111      	bne.n	80070ae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f003 0307 	and.w	r3, r3, #7
 8007094:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2b06      	cmp	r3, #6
 800709a:	d010      	beq.n	80070be <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0201 	orr.w	r2, r2, #1
 80070aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ac:	e007      	b.n	80070be <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f042 0201 	orr.w	r2, r2, #1
 80070bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	40012c00 	.word	0x40012c00
 80070cc:	40000400 	.word	0x40000400
 80070d0:	40000800 	.word	0x40000800

080070d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2200      	movs	r2, #0
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fd8e 	bl	8007c08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a29      	ldr	r2, [pc, #164]	; (8007198 <HAL_TIM_PWM_Stop+0xc4>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d117      	bne.n	8007126 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6a1a      	ldr	r2, [r3, #32]
 80070fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8007100:	4013      	ands	r3, r2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10f      	bne.n	8007126 <HAL_TIM_PWM_Stop+0x52>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6a1a      	ldr	r2, [r3, #32]
 800710c:	f240 4344 	movw	r3, #1092	; 0x444
 8007110:	4013      	ands	r3, r2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d107      	bne.n	8007126 <HAL_TIM_PWM_Stop+0x52>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007124:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6a1a      	ldr	r2, [r3, #32]
 800712c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007130:	4013      	ands	r3, r2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10f      	bne.n	8007156 <HAL_TIM_PWM_Stop+0x82>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6a1a      	ldr	r2, [r3, #32]
 800713c:	f240 4344 	movw	r3, #1092	; 0x444
 8007140:	4013      	ands	r3, r2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d107      	bne.n	8007156 <HAL_TIM_PWM_Stop+0x82>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0201 	bic.w	r2, r2, #1
 8007154:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d104      	bne.n	8007166 <HAL_TIM_PWM_Stop+0x92>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007164:	e013      	b.n	800718e <HAL_TIM_PWM_Stop+0xba>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b04      	cmp	r3, #4
 800716a:	d104      	bne.n	8007176 <HAL_TIM_PWM_Stop+0xa2>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007174:	e00b      	b.n	800718e <HAL_TIM_PWM_Stop+0xba>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b08      	cmp	r3, #8
 800717a:	d104      	bne.n	8007186 <HAL_TIM_PWM_Stop+0xb2>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007184:	e003      	b.n	800718e <HAL_TIM_PWM_Stop+0xba>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	40012c00 	.word	0x40012c00

0800719c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d122      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d11b      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f06f 0202 	mvn.w	r2, #2
 80071c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	f003 0303 	and.w	r3, r3, #3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa76 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 80071e4:	e005      	b.n	80071f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa69 	bl	80076be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fa78 	bl	80076e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f003 0304 	and.w	r3, r3, #4
 8007202:	2b04      	cmp	r3, #4
 8007204:	d122      	bne.n	800724c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b04      	cmp	r3, #4
 8007212:	d11b      	bne.n	800724c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f06f 0204 	mvn.w	r2, #4
 800721c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2202      	movs	r2, #2
 8007222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fa4c 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 8007238:	e005      	b.n	8007246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fa3f 	bl	80076be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fa4e 	bl	80076e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b08      	cmp	r3, #8
 8007258:	d122      	bne.n	80072a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b08      	cmp	r3, #8
 8007266:	d11b      	bne.n	80072a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f06f 0208 	mvn.w	r2, #8
 8007270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2204      	movs	r2, #4
 8007276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa22 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 800728c:	e005      	b.n	800729a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa15 	bl	80076be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fa24 	bl	80076e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f003 0310 	and.w	r3, r3, #16
 80072aa:	2b10      	cmp	r3, #16
 80072ac:	d122      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f003 0310 	and.w	r3, r3, #16
 80072b8:	2b10      	cmp	r3, #16
 80072ba:	d11b      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f06f 0210 	mvn.w	r2, #16
 80072c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2208      	movs	r2, #8
 80072ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f9f8 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 80072e0:	e005      	b.n	80072ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f9eb 	bl	80076be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f9fa 	bl	80076e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d10e      	bne.n	8007320 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b01      	cmp	r3, #1
 800730e:	d107      	bne.n	8007320 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f06f 0201 	mvn.w	r2, #1
 8007318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fb f9b8 	bl	8002690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800732a:	2b80      	cmp	r3, #128	; 0x80
 800732c:	d10e      	bne.n	800734c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007338:	2b80      	cmp	r3, #128	; 0x80
 800733a:	d107      	bne.n	800734c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fce9 	bl	8007d1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007356:	2b40      	cmp	r3, #64	; 0x40
 8007358:	d10e      	bne.n	8007378 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007364:	2b40      	cmp	r3, #64	; 0x40
 8007366:	d107      	bne.n	8007378 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f9be 	bl	80076f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b20      	cmp	r3, #32
 8007384:	d10e      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f003 0320 	and.w	r3, r3, #32
 8007390:	2b20      	cmp	r3, #32
 8007392:	d107      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f06f 0220 	mvn.w	r2, #32
 800739c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fcb4 	bl	8007d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e0ae      	b.n	8007528 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b0c      	cmp	r3, #12
 80073d6:	f200 809f 	bhi.w	8007518 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80073da:	a201      	add	r2, pc, #4	; (adr r2, 80073e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e0:	08007415 	.word	0x08007415
 80073e4:	08007519 	.word	0x08007519
 80073e8:	08007519 	.word	0x08007519
 80073ec:	08007519 	.word	0x08007519
 80073f0:	08007455 	.word	0x08007455
 80073f4:	08007519 	.word	0x08007519
 80073f8:	08007519 	.word	0x08007519
 80073fc:	08007519 	.word	0x08007519
 8007400:	08007497 	.word	0x08007497
 8007404:	08007519 	.word	0x08007519
 8007408:	08007519 	.word	0x08007519
 800740c:	08007519 	.word	0x08007519
 8007410:	080074d7 	.word	0x080074d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68b9      	ldr	r1, [r7, #8]
 800741a:	4618      	mov	r0, r3
 800741c:	f000 f9d6 	bl	80077cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	699a      	ldr	r2, [r3, #24]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0208 	orr.w	r2, r2, #8
 800742e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699a      	ldr	r2, [r3, #24]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0204 	bic.w	r2, r2, #4
 800743e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6999      	ldr	r1, [r3, #24]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	691a      	ldr	r2, [r3, #16]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	619a      	str	r2, [r3, #24]
      break;
 8007452:	e064      	b.n	800751e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	4618      	mov	r0, r3
 800745c:	f000 fa1c 	bl	8007898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800746e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699a      	ldr	r2, [r3, #24]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800747e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6999      	ldr	r1, [r3, #24]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	021a      	lsls	r2, r3, #8
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	619a      	str	r2, [r3, #24]
      break;
 8007494:	e043      	b.n	800751e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68b9      	ldr	r1, [r7, #8]
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fa65 	bl	800796c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69da      	ldr	r2, [r3, #28]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f042 0208 	orr.w	r2, r2, #8
 80074b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	69da      	ldr	r2, [r3, #28]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 0204 	bic.w	r2, r2, #4
 80074c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69d9      	ldr	r1, [r3, #28]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	691a      	ldr	r2, [r3, #16]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	61da      	str	r2, [r3, #28]
      break;
 80074d4:	e023      	b.n	800751e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68b9      	ldr	r1, [r7, #8]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 faaf 	bl	8007a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69da      	ldr	r2, [r3, #28]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69da      	ldr	r2, [r3, #28]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69d9      	ldr	r1, [r3, #28]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	021a      	lsls	r2, r3, #8
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	61da      	str	r2, [r3, #28]
      break;
 8007516:	e002      	b.n	800751e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	75fb      	strb	r3, [r7, #23]
      break;
 800751c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007526:	7dfb      	ldrb	r3, [r7, #23]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007544:	2b01      	cmp	r3, #1
 8007546:	d101      	bne.n	800754c <HAL_TIM_ConfigClockSource+0x1c>
 8007548:	2302      	movs	r3, #2
 800754a:	e0b4      	b.n	80076b6 <HAL_TIM_ConfigClockSource+0x186>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800756a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007584:	d03e      	beq.n	8007604 <HAL_TIM_ConfigClockSource+0xd4>
 8007586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800758a:	f200 8087 	bhi.w	800769c <HAL_TIM_ConfigClockSource+0x16c>
 800758e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007592:	f000 8086 	beq.w	80076a2 <HAL_TIM_ConfigClockSource+0x172>
 8007596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759a:	d87f      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 800759c:	2b70      	cmp	r3, #112	; 0x70
 800759e:	d01a      	beq.n	80075d6 <HAL_TIM_ConfigClockSource+0xa6>
 80075a0:	2b70      	cmp	r3, #112	; 0x70
 80075a2:	d87b      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075a4:	2b60      	cmp	r3, #96	; 0x60
 80075a6:	d050      	beq.n	800764a <HAL_TIM_ConfigClockSource+0x11a>
 80075a8:	2b60      	cmp	r3, #96	; 0x60
 80075aa:	d877      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075ac:	2b50      	cmp	r3, #80	; 0x50
 80075ae:	d03c      	beq.n	800762a <HAL_TIM_ConfigClockSource+0xfa>
 80075b0:	2b50      	cmp	r3, #80	; 0x50
 80075b2:	d873      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075b4:	2b40      	cmp	r3, #64	; 0x40
 80075b6:	d058      	beq.n	800766a <HAL_TIM_ConfigClockSource+0x13a>
 80075b8:	2b40      	cmp	r3, #64	; 0x40
 80075ba:	d86f      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075bc:	2b30      	cmp	r3, #48	; 0x30
 80075be:	d064      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075c0:	2b30      	cmp	r3, #48	; 0x30
 80075c2:	d86b      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075c4:	2b20      	cmp	r3, #32
 80075c6:	d060      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d867      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d05c      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075d0:	2b10      	cmp	r3, #16
 80075d2:	d05a      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075d4:	e062      	b.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075e6:	f000 faf0 	bl	8007bca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	609a      	str	r2, [r3, #8]
      break;
 8007602:	e04f      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007614:	f000 fad9 	bl	8007bca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007626:	609a      	str	r2, [r3, #8]
      break;
 8007628:	e03c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007636:	461a      	mov	r2, r3
 8007638:	f000 fa50 	bl	8007adc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2150      	movs	r1, #80	; 0x50
 8007642:	4618      	mov	r0, r3
 8007644:	f000 faa7 	bl	8007b96 <TIM_ITRx_SetConfig>
      break;
 8007648:	e02c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007656:	461a      	mov	r2, r3
 8007658:	f000 fa6e 	bl	8007b38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2160      	movs	r1, #96	; 0x60
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fa97 	bl	8007b96 <TIM_ITRx_SetConfig>
      break;
 8007668:	e01c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007676:	461a      	mov	r2, r3
 8007678:	f000 fa30 	bl	8007adc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2140      	movs	r1, #64	; 0x40
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fa87 	bl	8007b96 <TIM_ITRx_SetConfig>
      break;
 8007688:	e00c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4619      	mov	r1, r3
 8007694:	4610      	mov	r0, r2
 8007696:	f000 fa7e 	bl	8007b96 <TIM_ITRx_SetConfig>
      break;
 800769a:	e003      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	73fb      	strb	r3, [r7, #15]
      break;
 80076a0:	e000      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076c6:	bf00      	nop
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bc80      	pop	{r7}
 80076ce:	4770      	bx	lr

080076d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	bc80      	pop	{r7}
 80076e0:	4770      	bx	lr

080076e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076ea:	bf00      	nop
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bc80      	pop	{r7}
 80076f2:	4770      	bx	lr

080076f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	bc80      	pop	{r7}
 8007704:	4770      	bx	lr
	...

08007708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a29      	ldr	r2, [pc, #164]	; (80077c0 <TIM_Base_SetConfig+0xb8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00b      	beq.n	8007738 <TIM_Base_SetConfig+0x30>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007726:	d007      	beq.n	8007738 <TIM_Base_SetConfig+0x30>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a26      	ldr	r2, [pc, #152]	; (80077c4 <TIM_Base_SetConfig+0xbc>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d003      	beq.n	8007738 <TIM_Base_SetConfig+0x30>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a25      	ldr	r2, [pc, #148]	; (80077c8 <TIM_Base_SetConfig+0xc0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d108      	bne.n	800774a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a1c      	ldr	r2, [pc, #112]	; (80077c0 <TIM_Base_SetConfig+0xb8>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00b      	beq.n	800776a <TIM_Base_SetConfig+0x62>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007758:	d007      	beq.n	800776a <TIM_Base_SetConfig+0x62>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a19      	ldr	r2, [pc, #100]	; (80077c4 <TIM_Base_SetConfig+0xbc>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d003      	beq.n	800776a <TIM_Base_SetConfig+0x62>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a18      	ldr	r2, [pc, #96]	; (80077c8 <TIM_Base_SetConfig+0xc0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d108      	bne.n	800777c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	4313      	orrs	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a07      	ldr	r2, [pc, #28]	; (80077c0 <TIM_Base_SetConfig+0xb8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d103      	bne.n	80077b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	691a      	ldr	r2, [r3, #16]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	615a      	str	r2, [r3, #20]
}
 80077b6:	bf00      	nop
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr
 80077c0:	40012c00 	.word	0x40012c00
 80077c4:	40000400 	.word	0x40000400
 80077c8:	40000800 	.word	0x40000800

080077cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	f023 0201 	bic.w	r2, r3, #1
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0303 	bic.w	r3, r3, #3
 8007802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	4313      	orrs	r3, r2
 800780c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f023 0302 	bic.w	r3, r3, #2
 8007814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	4313      	orrs	r3, r2
 800781e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a1c      	ldr	r2, [pc, #112]	; (8007894 <TIM_OC1_SetConfig+0xc8>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d10c      	bne.n	8007842 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f023 0308 	bic.w	r3, r3, #8
 800782e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	4313      	orrs	r3, r2
 8007838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f023 0304 	bic.w	r3, r3, #4
 8007840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a13      	ldr	r2, [pc, #76]	; (8007894 <TIM_OC1_SetConfig+0xc8>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d111      	bne.n	800786e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	4313      	orrs	r3, r2
 8007862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4313      	orrs	r3, r2
 800786c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	685a      	ldr	r2, [r3, #4]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	621a      	str	r2, [r3, #32]
}
 8007888:	bf00      	nop
 800788a:	371c      	adds	r7, #28
 800788c:	46bd      	mov	sp, r7
 800788e:	bc80      	pop	{r7}
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	40012c00 	.word	0x40012c00

08007898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	f023 0210 	bic.w	r2, r3, #16
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	021b      	lsls	r3, r3, #8
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	4313      	orrs	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f023 0320 	bic.w	r3, r3, #32
 80078e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a1d      	ldr	r2, [pc, #116]	; (8007968 <TIM_OC2_SetConfig+0xd0>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d10d      	bne.n	8007914 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	011b      	lsls	r3, r3, #4
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	4313      	orrs	r3, r2
 800790a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007912:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a14      	ldr	r2, [pc, #80]	; (8007968 <TIM_OC2_SetConfig+0xd0>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d113      	bne.n	8007944 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007922:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800792a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	4313      	orrs	r3, r2
 8007936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	4313      	orrs	r3, r2
 8007942:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	621a      	str	r2, [r3, #32]
}
 800795e:	bf00      	nop
 8007960:	371c      	adds	r7, #28
 8007962:	46bd      	mov	sp, r7
 8007964:	bc80      	pop	{r7}
 8007966:	4770      	bx	lr
 8007968:	40012c00 	.word	0x40012c00

0800796c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800799a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0303 	bic.w	r3, r3, #3
 80079a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	021b      	lsls	r3, r3, #8
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a1d      	ldr	r2, [pc, #116]	; (8007a3c <TIM_OC3_SetConfig+0xd0>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d10d      	bne.n	80079e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	021b      	lsls	r3, r3, #8
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	4313      	orrs	r3, r2
 80079dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a14      	ldr	r2, [pc, #80]	; (8007a3c <TIM_OC3_SetConfig+0xd0>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d113      	bne.n	8007a16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	011b      	lsls	r3, r3, #4
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	621a      	str	r2, [r3, #32]
}
 8007a30:	bf00      	nop
 8007a32:	371c      	adds	r7, #28
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bc80      	pop	{r7}
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	40012c00 	.word	0x40012c00

08007a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	031b      	lsls	r3, r3, #12
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a0f      	ldr	r2, [pc, #60]	; (8007ad8 <TIM_OC4_SetConfig+0x98>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d109      	bne.n	8007ab4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	695b      	ldr	r3, [r3, #20]
 8007aac:	019b      	lsls	r3, r3, #6
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	621a      	str	r2, [r3, #32]
}
 8007ace:	bf00      	nop
 8007ad0:	371c      	adds	r7, #28
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bc80      	pop	{r7}
 8007ad6:	4770      	bx	lr
 8007ad8:	40012c00 	.word	0x40012c00

08007adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	f023 0201 	bic.w	r2, r3, #1
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	011b      	lsls	r3, r3, #4
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f023 030a 	bic.w	r3, r3, #10
 8007b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	621a      	str	r2, [r3, #32]
}
 8007b2e:	bf00      	nop
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bc80      	pop	{r7}
 8007b36:	4770      	bx	lr

08007b38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	f023 0210 	bic.w	r2, r3, #16
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	031b      	lsls	r3, r3, #12
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b74:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	011b      	lsls	r3, r3, #4
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	621a      	str	r2, [r3, #32]
}
 8007b8c:	bf00      	nop
 8007b8e:	371c      	adds	r7, #28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bc80      	pop	{r7}
 8007b94:	4770      	bx	lr

08007b96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b085      	sub	sp, #20
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	f043 0307 	orr.w	r3, r3, #7
 8007bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	609a      	str	r2, [r3, #8]
}
 8007bc0:	bf00      	nop
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bc80      	pop	{r7}
 8007bc8:	4770      	bx	lr

08007bca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b087      	sub	sp, #28
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	607a      	str	r2, [r7, #4]
 8007bd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007be4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	021a      	lsls	r2, r3, #8
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	431a      	orrs	r2, r3
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	609a      	str	r2, [r3, #8]
}
 8007bfe:	bf00      	nop
 8007c00:	371c      	adds	r7, #28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bc80      	pop	{r7}
 8007c06:	4770      	bx	lr

08007c08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f003 031f 	and.w	r3, r3, #31
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6a1a      	ldr	r2, [r3, #32]
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	43db      	mvns	r3, r3
 8007c2a:	401a      	ands	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6a1a      	ldr	r2, [r3, #32]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f003 031f 	and.w	r3, r3, #31
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c40:	431a      	orrs	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	621a      	str	r2, [r3, #32]
}
 8007c46:	bf00      	nop
 8007c48:	371c      	adds	r7, #28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bc80      	pop	{r7}
 8007c4e:	4770      	bx	lr

08007c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d101      	bne.n	8007c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c64:	2302      	movs	r3, #2
 8007c66:	e046      	b.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a16      	ldr	r2, [pc, #88]	; (8007d00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d00e      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb4:	d009      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a12      	ldr	r2, [pc, #72]	; (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d004      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a10      	ldr	r2, [pc, #64]	; (8007d08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d10c      	bne.n	8007ce4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bc80      	pop	{r7}
 8007cfe:	4770      	bx	lr
 8007d00:	40012c00 	.word	0x40012c00
 8007d04:	40000400 	.word	0x40000400
 8007d08:	40000800 	.word	0x40000800

08007d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bc80      	pop	{r7}
 8007d1c:	4770      	bx	lr

08007d1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bc80      	pop	{r7}
 8007d2e:	4770      	bx	lr

08007d30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d101      	bne.n	8007d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e042      	b.n	8007dc8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d106      	bne.n	8007d5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7fb f95c 	bl	8003014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2224      	movs	r2, #36	; 0x24
 8007d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f001 f941 	bl	8008ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	695a      	ldr	r2, [r3, #20]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007da8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2220      	movs	r2, #32
 8007db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e024      	b.n	8007e2c <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2224      	movs	r2, #36	; 0x24
 8007de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68da      	ldr	r2, [r3, #12]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007df8:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7fb f9ee 	bl	80031dc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b08a      	sub	sp, #40	; 0x28
 8007e38:	af02      	add	r7, sp, #8
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	603b      	str	r3, [r7, #0]
 8007e40:	4613      	mov	r3, r2
 8007e42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b20      	cmp	r3, #32
 8007e52:	d16d      	bne.n	8007f30 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <HAL_UART_Transmit+0x2c>
 8007e5a:	88fb      	ldrh	r3, [r7, #6]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e066      	b.n	8007f32 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2221      	movs	r2, #33	; 0x21
 8007e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e72:	f7fc fa53 	bl	800431c <HAL_GetTick>
 8007e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	88fa      	ldrh	r2, [r7, #6]
 8007e7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	88fa      	ldrh	r2, [r7, #6]
 8007e82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8c:	d108      	bne.n	8007ea0 <HAL_UART_Transmit+0x6c>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d104      	bne.n	8007ea0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	61bb      	str	r3, [r7, #24]
 8007e9e:	e003      	b.n	8007ea8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ea8:	e02a      	b.n	8007f00 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2180      	movs	r1, #128	; 0x80
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 fd77 	bl	80089a8 <UART_WaitOnFlagUntilTimeout>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e036      	b.n	8007f32 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10b      	bne.n	8007ee2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ed8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	3302      	adds	r3, #2
 8007ede:	61bb      	str	r3, [r7, #24]
 8007ee0:	e007      	b.n	8007ef2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	781a      	ldrb	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1cf      	bne.n	8007eaa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2200      	movs	r2, #0
 8007f12:	2140      	movs	r1, #64	; 0x40
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 fd47 	bl	80089a8 <UART_WaitOnFlagUntilTimeout>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e006      	b.n	8007f32 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	e000      	b.n	8007f32 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007f30:	2302      	movs	r3, #2
  }
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3720      	adds	r7, #32
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b085      	sub	sp, #20
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	4613      	mov	r3, r2
 8007f46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b20      	cmp	r3, #32
 8007f52:	d121      	bne.n	8007f98 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <HAL_UART_Transmit_IT+0x26>
 8007f5a:	88fb      	ldrh	r3, [r7, #6]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e01a      	b.n	8007f9a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	88fa      	ldrh	r2, [r7, #6]
 8007f6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	88fa      	ldrh	r2, [r7, #6]
 8007f74:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2221      	movs	r2, #33	; 0x21
 8007f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f92:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	e000      	b.n	8007f9a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007f98:	2302      	movs	r3, #2
  }
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bc80      	pop	{r7}
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d112      	bne.n	8007fe4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <HAL_UART_Receive_DMA+0x26>
 8007fc4:	88fb      	ldrh	r3, [r7, #6]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e00b      	b.n	8007fe6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007fd4:	88fb      	ldrh	r3, [r7, #6]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	68b9      	ldr	r1, [r7, #8]
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 fd52 	bl	8008a84 <UART_Start_Receive_DMA>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	e000      	b.n	8007fe6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007fe4:	2302      	movs	r3, #2
  }
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b0a2      	sub	sp, #136	; 0x88
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	330c      	adds	r3, #12
 8008004:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800800e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008010:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8008014:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	330c      	adds	r3, #12
 800801e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008022:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008024:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008028:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e3      	bne.n	8007ffe <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3314      	adds	r3, #20
 800803c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008040:	e853 3f00 	ldrex	r3, [r3]
 8008044:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008048:	f023 0301 	bic.w	r3, r3, #1
 800804c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3314      	adds	r3, #20
 8008054:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008056:	65ba      	str	r2, [r7, #88]	; 0x58
 8008058:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800805c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800805e:	e841 2300 	strex	r3, r2, [r1]
 8008062:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e5      	bne.n	8008036 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806e:	2b01      	cmp	r3, #1
 8008070:	d119      	bne.n	80080a6 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	330c      	adds	r3, #12
 8008078:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008084:	f023 0310 	bic.w	r3, r3, #16
 8008088:	67bb      	str	r3, [r7, #120]	; 0x78
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	330c      	adds	r3, #12
 8008090:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008092:	647a      	str	r2, [r7, #68]	; 0x44
 8008094:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008098:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e5      	bne.n	8008072 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00f      	beq.n	80080ce <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d004      	beq.n	80080c6 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c0:	4a53      	ldr	r2, [pc, #332]	; (8008210 <HAL_UART_Abort_IT+0x220>)
 80080c2:	635a      	str	r2, [r3, #52]	; 0x34
 80080c4:	e003      	b.n	80080ce <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ca:	2200      	movs	r2, #0
 80080cc:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00f      	beq.n	80080f6 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d004      	beq.n	80080ee <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e8:	4a4a      	ldr	r2, [pc, #296]	; (8008214 <HAL_UART_Abort_IT+0x224>)
 80080ea:	635a      	str	r2, [r3, #52]	; 0x34
 80080ec:	e003      	b.n	80080f6 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f2:	2200      	movs	r2, #0
 80080f4:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008100:	2b00      	cmp	r3, #0
 8008102:	d02d      	beq.n	8008160 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3314      	adds	r3, #20
 800810a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	623b      	str	r3, [r7, #32]
   return(result);
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800811a:	677b      	str	r3, [r7, #116]	; 0x74
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3314      	adds	r3, #20
 8008122:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008124:	633a      	str	r2, [r7, #48]	; 0x30
 8008126:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800812a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e5      	bne.n	8008104 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00f      	beq.n	8008160 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	4618      	mov	r0, r3
 8008146:	f7fc ff3d 	bl	8004fc4 <HAL_DMA_Abort_IT>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d004      	beq.n	800815a <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008154:	2200      	movs	r2, #0
 8008156:	635a      	str	r2, [r3, #52]	; 0x34
 8008158:	e002      	b.n	8008160 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 800815a:	2300      	movs	r3, #0
 800815c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816a:	2b00      	cmp	r3, #0
 800816c:	d030      	beq.n	80081d0 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3314      	adds	r3, #20
 8008174:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	60fb      	str	r3, [r7, #12]
   return(result);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008184:	673b      	str	r3, [r7, #112]	; 0x70
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3314      	adds	r3, #20
 800818c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800818e:	61fa      	str	r2, [r7, #28]
 8008190:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008192:	69b9      	ldr	r1, [r7, #24]
 8008194:	69fa      	ldr	r2, [r7, #28]
 8008196:	e841 2300 	strex	r3, r2, [r1]
 800819a:	617b      	str	r3, [r7, #20]
   return(result);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1e5      	bne.n	800816e <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d012      	beq.n	80081d0 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fc ff08 	bl	8004fc4 <HAL_DMA_Abort_IT>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d007      	beq.n	80081ca <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081be:	2200      	movs	r2, #0
 80081c0:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 80081c2:	2301      	movs	r3, #1
 80081c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081c8:	e002      	b.n	80081d0 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80081d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d116      	bne.n	8008206 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fabf 	bl	8008784 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3788      	adds	r7, #136	; 0x88
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	08008cf3 	.word	0x08008cf3
 8008214:	08008d53 	.word	0x08008d53

08008218 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b0ba      	sub	sp, #232	; 0xe8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800823e:	2300      	movs	r3, #0
 8008240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008244:	2300      	movs	r3, #0
 8008246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800824a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800824e:	f003 030f 	and.w	r3, r3, #15
 8008252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10f      	bne.n	800827e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800825e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b00      	cmp	r3, #0
 8008268:	d009      	beq.n	800827e <HAL_UART_IRQHandler+0x66>
 800826a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fe02 	bl	8008e80 <UART_Receive_IT>
      return;
 800827c:	e25b      	b.n	8008736 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800827e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 80de 	beq.w	8008444 <HAL_UART_IRQHandler+0x22c>
 8008288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d106      	bne.n	80082a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008298:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 80d1 	beq.w	8008444 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00b      	beq.n	80082c6 <HAL_UART_IRQHandler+0xae>
 80082ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d005      	beq.n	80082c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082be:	f043 0201 	orr.w	r2, r3, #1
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ca:	f003 0304 	and.w	r3, r3, #4
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00b      	beq.n	80082ea <HAL_UART_IRQHandler+0xd2>
 80082d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d005      	beq.n	80082ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e2:	f043 0202 	orr.w	r2, r3, #2
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00b      	beq.n	800830e <HAL_UART_IRQHandler+0xf6>
 80082f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d005      	beq.n	800830e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008306:	f043 0204 	orr.w	r2, r3, #4
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800830e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008312:	f003 0308 	and.w	r3, r3, #8
 8008316:	2b00      	cmp	r3, #0
 8008318:	d011      	beq.n	800833e <HAL_UART_IRQHandler+0x126>
 800831a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800831e:	f003 0320 	and.w	r3, r3, #32
 8008322:	2b00      	cmp	r3, #0
 8008324:	d105      	bne.n	8008332 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b00      	cmp	r3, #0
 8008330:	d005      	beq.n	800833e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008336:	f043 0208 	orr.w	r2, r3, #8
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 81f2 	beq.w	800872c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800834c:	f003 0320 	and.w	r3, r3, #32
 8008350:	2b00      	cmp	r3, #0
 8008352:	d008      	beq.n	8008366 <HAL_UART_IRQHandler+0x14e>
 8008354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fd8d 	bl	8008e80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008370:	2b00      	cmp	r3, #0
 8008372:	bf14      	ite	ne
 8008374:	2301      	movne	r3, #1
 8008376:	2300      	moveq	r3, #0
 8008378:	b2db      	uxtb	r3, r3
 800837a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008382:	f003 0308 	and.w	r3, r3, #8
 8008386:	2b00      	cmp	r3, #0
 8008388:	d103      	bne.n	8008392 <HAL_UART_IRQHandler+0x17a>
 800838a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800838e:	2b00      	cmp	r3, #0
 8008390:	d04f      	beq.n	8008432 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fc37 	bl	8008c06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d041      	beq.n	800842a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3314      	adds	r3, #20
 80083ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80083bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3314      	adds	r3, #20
 80083ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80083d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1d9      	bne.n	80083a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d013      	beq.n	8008422 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fe:	4a7e      	ldr	r2, [pc, #504]	; (80085f8 <HAL_UART_IRQHandler+0x3e0>)
 8008400:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008406:	4618      	mov	r0, r3
 8008408:	f7fc fddc 	bl	8004fc4 <HAL_DMA_Abort_IT>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d016      	beq.n	8008440 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800841c:	4610      	mov	r0, r2
 800841e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008420:	e00e      	b.n	8008440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f9a5 	bl	8008772 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008428:	e00a      	b.n	8008440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f9a1 	bl	8008772 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008430:	e006      	b.n	8008440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f99d 	bl	8008772 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800843e:	e175      	b.n	800872c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008440:	bf00      	nop
    return;
 8008442:	e173      	b.n	800872c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008448:	2b01      	cmp	r3, #1
 800844a:	f040 814f 	bne.w	80086ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800844e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008452:	f003 0310 	and.w	r3, r3, #16
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 8148 	beq.w	80086ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800845c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008460:	f003 0310 	and.w	r3, r3, #16
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 8141 	beq.w	80086ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800846a:	2300      	movs	r3, #0
 800846c:	60bb      	str	r3, [r7, #8]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	60bb      	str	r3, [r7, #8]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	60bb      	str	r3, [r7, #8]
 800847e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 80b6 	beq.w	80085fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800849c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 8145 	beq.w	8008730 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084ae:	429a      	cmp	r2, r3
 80084b0:	f080 813e 	bcs.w	8008730 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	2b20      	cmp	r3, #32
 80084c4:	f000 8088 	beq.w	80085d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	330c      	adds	r3, #12
 80084ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	330c      	adds	r3, #12
 80084f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084f4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008500:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008504:	e841 2300 	strex	r3, r2, [r1]
 8008508:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800850c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1d9      	bne.n	80084c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3314      	adds	r3, #20
 800851a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800851e:	e853 3f00 	ldrex	r3, [r3]
 8008522:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008526:	f023 0301 	bic.w	r3, r3, #1
 800852a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3314      	adds	r3, #20
 8008534:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008538:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800853c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008540:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008544:	e841 2300 	strex	r3, r2, [r1]
 8008548:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800854a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e1      	bne.n	8008514 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3314      	adds	r3, #20
 8008556:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3314      	adds	r3, #20
 8008570:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008574:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008576:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800857a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e3      	bne.n	8008550 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2220      	movs	r2, #32
 800858c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	330c      	adds	r3, #12
 800859c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085a8:	f023 0310 	bic.w	r3, r3, #16
 80085ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	330c      	adds	r3, #12
 80085b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80085ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80085bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e3      	bne.n	8008596 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fc fcba 	bl	8004f4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2202      	movs	r2, #2
 80085dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f8d1 	bl	8008796 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085f4:	e09c      	b.n	8008730 <HAL_UART_IRQHandler+0x518>
 80085f6:	bf00      	nop
 80085f8:	08008ccb 	.word	0x08008ccb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008604:	b29b      	uxth	r3, r3
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008610:	b29b      	uxth	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	f000 808e 	beq.w	8008734 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 8089 	beq.w	8008734 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	330c      	adds	r3, #12
 8008628:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	e853 3f00 	ldrex	r3, [r3]
 8008630:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	330c      	adds	r3, #12
 8008642:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008646:	647a      	str	r2, [r7, #68]	; 0x44
 8008648:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800864c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1e3      	bne.n	8008622 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3314      	adds	r3, #20
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008664:	e853 3f00 	ldrex	r3, [r3]
 8008668:	623b      	str	r3, [r7, #32]
   return(result);
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	f023 0301 	bic.w	r3, r3, #1
 8008670:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3314      	adds	r3, #20
 800867a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800867e:	633a      	str	r2, [r7, #48]	; 0x30
 8008680:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008686:	e841 2300 	strex	r3, r2, [r1]
 800868a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e3      	bne.n	800865a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2220      	movs	r2, #32
 8008696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	330c      	adds	r3, #12
 80086a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0310 	bic.w	r3, r3, #16
 80086b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	330c      	adds	r3, #12
 80086c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80086c4:	61fa      	str	r2, [r7, #28]
 80086c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c8:	69b9      	ldr	r1, [r7, #24]
 80086ca:	69fa      	ldr	r2, [r7, #28]
 80086cc:	e841 2300 	strex	r3, r2, [r1]
 80086d0:	617b      	str	r3, [r7, #20]
   return(result);
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1e3      	bne.n	80086a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2202      	movs	r2, #2
 80086dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f856 	bl	8008796 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086ea:	e023      	b.n	8008734 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d009      	beq.n	800870c <HAL_UART_IRQHandler+0x4f4>
 80086f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fb54 	bl	8008db2 <UART_Transmit_IT>
    return;
 800870a:	e014      	b.n	8008736 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800870c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00e      	beq.n	8008736 <HAL_UART_IRQHandler+0x51e>
 8008718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800871c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008720:	2b00      	cmp	r3, #0
 8008722:	d008      	beq.n	8008736 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fb93 	bl	8008e50 <UART_EndTransmit_IT>
    return;
 800872a:	e004      	b.n	8008736 <HAL_UART_IRQHandler+0x51e>
    return;
 800872c:	bf00      	nop
 800872e:	e002      	b.n	8008736 <HAL_UART_IRQHandler+0x51e>
      return;
 8008730:	bf00      	nop
 8008732:	e000      	b.n	8008736 <HAL_UART_IRQHandler+0x51e>
      return;
 8008734:	bf00      	nop
  }
}
 8008736:	37e8      	adds	r7, #232	; 0xe8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	bc80      	pop	{r7}
 800874c:	4770      	bx	lr

0800874e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	bc80      	pop	{r7}
 800875e:	4770      	bx	lr

08008760 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	bc80      	pop	{r7}
 8008770:	4770      	bx	lr

08008772 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	bc80      	pop	{r7}
 8008782:	4770      	bx	lr

08008784 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	bc80      	pop	{r7}
 8008794:	4770      	bx	lr

08008796 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	460b      	mov	r3, r1
 80087a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr

080087ac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b09c      	sub	sp, #112	; 0x70
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0320 	and.w	r3, r3, #32
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d172      	bne.n	80088ae <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80087c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ca:	2200      	movs	r2, #0
 80087cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	330c      	adds	r3, #12
 80087d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80087e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	330c      	adds	r3, #12
 80087ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80087f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e5      	bne.n	80087ce <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3314      	adds	r3, #20
 8008808:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008814:	f023 0301 	bic.w	r3, r3, #1
 8008818:	667b      	str	r3, [r7, #100]	; 0x64
 800881a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3314      	adds	r3, #20
 8008820:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008822:	647a      	str	r2, [r7, #68]	; 0x44
 8008824:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008826:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008828:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e5      	bne.n	8008802 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3314      	adds	r3, #20
 800883c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	623b      	str	r3, [r7, #32]
   return(result);
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800884c:	663b      	str	r3, [r7, #96]	; 0x60
 800884e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3314      	adds	r3, #20
 8008854:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008856:	633a      	str	r2, [r7, #48]	; 0x30
 8008858:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800885c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e5      	bne.n	8008836 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800886a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800886c:	2220      	movs	r2, #32
 800886e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008876:	2b01      	cmp	r3, #1
 8008878:	d119      	bne.n	80088ae <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800887a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	330c      	adds	r3, #12
 8008880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	e853 3f00 	ldrex	r3, [r3]
 8008888:	60fb      	str	r3, [r7, #12]
   return(result);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f023 0310 	bic.w	r3, r3, #16
 8008890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	330c      	adds	r3, #12
 8008898:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800889a:	61fa      	str	r2, [r7, #28]
 800889c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889e:	69b9      	ldr	r1, [r7, #24]
 80088a0:	69fa      	ldr	r2, [r7, #28]
 80088a2:	e841 2300 	strex	r3, r2, [r1]
 80088a6:	617b      	str	r3, [r7, #20]
   return(result);
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1e5      	bne.n	800887a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b0:	2200      	movs	r2, #0
 80088b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d106      	bne.n	80088ca <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088c0:	4619      	mov	r1, r3
 80088c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80088c4:	f7ff ff67 	bl	8008796 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088c8:	e002      	b.n	80088d0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80088ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80088cc:	f7ff ff3f 	bl	800874e <HAL_UART_RxCpltCallback>
}
 80088d0:	bf00      	nop
 80088d2:	3770      	adds	r7, #112	; 0x70
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2201      	movs	r2, #1
 80088ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d108      	bne.n	8008906 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088f8:	085b      	lsrs	r3, r3, #1
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	4619      	mov	r1, r3
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff ff49 	bl	8008796 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008904:	e002      	b.n	800890c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f7ff ff2a 	bl	8008760 <HAL_UART_RxHalfCpltCallback>
}
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800891c:	2300      	movs	r3, #0
 800891e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008930:	2b00      	cmp	r3, #0
 8008932:	bf14      	ite	ne
 8008934:	2301      	movne	r3, #1
 8008936:	2300      	moveq	r3, #0
 8008938:	b2db      	uxtb	r3, r3
 800893a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b21      	cmp	r3, #33	; 0x21
 8008946:	d108      	bne.n	800895a <UART_DMAError+0x46>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d005      	beq.n	800895a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2200      	movs	r2, #0
 8008952:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008954:	68b8      	ldr	r0, [r7, #8]
 8008956:	f000 f92f 	bl	8008bb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008964:	2b00      	cmp	r3, #0
 8008966:	bf14      	ite	ne
 8008968:	2301      	movne	r3, #1
 800896a:	2300      	moveq	r3, #0
 800896c:	b2db      	uxtb	r3, r3
 800896e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b22      	cmp	r3, #34	; 0x22
 800897a:	d108      	bne.n	800898e <UART_DMAError+0x7a>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d005      	beq.n	800898e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2200      	movs	r2, #0
 8008986:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008988:	68b8      	ldr	r0, [r7, #8]
 800898a:	f000 f93c 	bl	8008c06 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008992:	f043 0210 	orr.w	r2, r3, #16
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800899a:	68b8      	ldr	r0, [r7, #8]
 800899c:	f7ff fee9 	bl	8008772 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089a0:	bf00      	nop
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b090      	sub	sp, #64	; 0x40
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	603b      	str	r3, [r7, #0]
 80089b4:	4613      	mov	r3, r2
 80089b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089b8:	e050      	b.n	8008a5c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c0:	d04c      	beq.n	8008a5c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80089c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d007      	beq.n	80089d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80089c8:	f7fb fca8 	bl	800431c <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d241      	bcs.n	8008a5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	330c      	adds	r3, #12
 80089de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	e853 3f00 	ldrex	r3, [r3]
 80089e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	330c      	adds	r3, #12
 80089f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089f8:	637a      	str	r2, [r7, #52]	; 0x34
 80089fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a00:	e841 2300 	strex	r3, r2, [r1]
 8008a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1e5      	bne.n	80089d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3314      	adds	r3, #20
 8008a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	e853 3f00 	ldrex	r3, [r3]
 8008a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f023 0301 	bic.w	r3, r3, #1
 8008a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	3314      	adds	r3, #20
 8008a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a2c:	623a      	str	r2, [r7, #32]
 8008a2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a30:	69f9      	ldr	r1, [r7, #28]
 8008a32:	6a3a      	ldr	r2, [r7, #32]
 8008a34:	e841 2300 	strex	r3, r2, [r1]
 8008a38:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e5      	bne.n	8008a0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2220      	movs	r2, #32
 8008a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e00f      	b.n	8008a7c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	4013      	ands	r3, r2
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	bf0c      	ite	eq
 8008a6c:	2301      	moveq	r3, #1
 8008a6e:	2300      	movne	r3, #0
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	461a      	mov	r2, r3
 8008a74:	79fb      	ldrb	r3, [r7, #7]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d09f      	beq.n	80089ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3740      	adds	r7, #64	; 0x40
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b098      	sub	sp, #96	; 0x60
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	88fa      	ldrh	r2, [r7, #6]
 8008a9c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2222      	movs	r2, #34	; 0x22
 8008aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab0:	4a3e      	ldr	r2, [pc, #248]	; (8008bac <UART_Start_Receive_DMA+0x128>)
 8008ab2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab8:	4a3d      	ldr	r2, [pc, #244]	; (8008bb0 <UART_Start_Receive_DMA+0x12c>)
 8008aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac0:	4a3c      	ldr	r2, [pc, #240]	; (8008bb4 <UART_Start_Receive_DMA+0x130>)
 8008ac2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac8:	2200      	movs	r2, #0
 8008aca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008acc:	f107 0308 	add.w	r3, r7, #8
 8008ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3304      	adds	r3, #4
 8008adc:	4619      	mov	r1, r3
 8008ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	88fb      	ldrh	r3, [r7, #6]
 8008ae4:	f7fc f9d2 	bl	8004e8c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008ae8:	2300      	movs	r3, #0
 8008aea:	613b      	str	r3, [r7, #16]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	613b      	str	r3, [r7, #16]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	613b      	str	r3, [r7, #16]
 8008afc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d019      	beq.n	8008b3a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	330c      	adds	r3, #12
 8008b0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	330c      	adds	r3, #12
 8008b24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b26:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008b28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008b2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b2e:	e841 2300 	strex	r3, r2, [r1]
 8008b32:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1e5      	bne.n	8008b06 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	3314      	adds	r3, #20
 8008b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b44:	e853 3f00 	ldrex	r3, [r3]
 8008b48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4c:	f043 0301 	orr.w	r3, r3, #1
 8008b50:	657b      	str	r3, [r7, #84]	; 0x54
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3314      	adds	r3, #20
 8008b58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b5a:	63ba      	str	r2, [r7, #56]	; 0x38
 8008b5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e5      	bne.n	8008b3a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3314      	adds	r3, #20
 8008b74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b84:	653b      	str	r3, [r7, #80]	; 0x50
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3314      	adds	r3, #20
 8008b8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b8e:	627a      	str	r2, [r7, #36]	; 0x24
 8008b90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b92:	6a39      	ldr	r1, [r7, #32]
 8008b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b96:	e841 2300 	strex	r3, r2, [r1]
 8008b9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1e5      	bne.n	8008b6e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3760      	adds	r7, #96	; 0x60
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	080087ad 	.word	0x080087ad
 8008bb0:	080088d9 	.word	0x080088d9
 8008bb4:	08008915 	.word	0x08008915

08008bb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b089      	sub	sp, #36	; 0x24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	330c      	adds	r3, #12
 8008bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	e853 3f00 	ldrex	r3, [r3]
 8008bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008bd6:	61fb      	str	r3, [r7, #28]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	330c      	adds	r3, #12
 8008bde:	69fa      	ldr	r2, [r7, #28]
 8008be0:	61ba      	str	r2, [r7, #24]
 8008be2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be4:	6979      	ldr	r1, [r7, #20]
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	e841 2300 	strex	r3, r2, [r1]
 8008bec:	613b      	str	r3, [r7, #16]
   return(result);
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e5      	bne.n	8008bc0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8008bfc:	bf00      	nop
 8008bfe:	3724      	adds	r7, #36	; 0x24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bc80      	pop	{r7}
 8008c04:	4770      	bx	lr

08008c06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b095      	sub	sp, #84	; 0x54
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	330c      	adds	r3, #12
 8008c14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c18:	e853 3f00 	ldrex	r3, [r3]
 8008c1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	330c      	adds	r3, #12
 8008c2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c2e:	643a      	str	r2, [r7, #64]	; 0x40
 8008c30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c36:	e841 2300 	strex	r3, r2, [r1]
 8008c3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e5      	bne.n	8008c0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3314      	adds	r3, #20
 8008c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	f023 0301 	bic.w	r3, r3, #1
 8008c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3314      	adds	r3, #20
 8008c60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1e5      	bne.n	8008c42 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d119      	bne.n	8008cb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	330c      	adds	r3, #12
 8008c84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	e853 3f00 	ldrex	r3, [r3]
 8008c8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	f023 0310 	bic.w	r3, r3, #16
 8008c94:	647b      	str	r3, [r7, #68]	; 0x44
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	330c      	adds	r3, #12
 8008c9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c9e:	61ba      	str	r2, [r7, #24]
 8008ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca2:	6979      	ldr	r1, [r7, #20]
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	e841 2300 	strex	r3, r2, [r1]
 8008caa:	613b      	str	r3, [r7, #16]
   return(result);
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1e5      	bne.n	8008c7e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008cc0:	bf00      	nop
 8008cc2:	3754      	adds	r7, #84	; 0x54
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bc80      	pop	{r7}
 8008cc8:	4770      	bx	lr

08008cca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f7ff fd44 	bl	8008772 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cea:	bf00      	nop
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfe:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d04:	2200      	movs	r2, #0
 8008d06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d004      	beq.n	8008d1a <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d117      	bne.n	8008d4a <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2220      	movs	r2, #32
 8008d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2220      	movs	r2, #32
 8008d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f7ff fd1e 	bl	8008784 <HAL_UART_AbortCpltCallback>
 8008d48:	e000      	b.n	8008d4c <UART_DMATxAbortCallback+0x5a>
      return;
 8008d4a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d64:	2200      	movs	r2, #0
 8008d66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d004      	beq.n	8008d7a <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d117      	bne.n	8008daa <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2220      	movs	r2, #32
 8008d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f7ff fcee 	bl	8008784 <HAL_UART_AbortCpltCallback>
 8008da8:	e000      	b.n	8008dac <UART_DMARxAbortCallback+0x5a>
      return;
 8008daa:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b085      	sub	sp, #20
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b21      	cmp	r3, #33	; 0x21
 8008dc4:	d13e      	bne.n	8008e44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dce:	d114      	bne.n	8008dfa <UART_Transmit_IT+0x48>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d110      	bne.n	8008dfa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a1b      	ldr	r3, [r3, #32]
 8008ddc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	461a      	mov	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008dec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	1c9a      	adds	r2, r3, #2
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	621a      	str	r2, [r3, #32]
 8008df8:	e008      	b.n	8008e0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	1c59      	adds	r1, r3, #1
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	6211      	str	r1, [r2, #32]
 8008e04:	781a      	ldrb	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	3b01      	subs	r3, #1
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10f      	bne.n	8008e40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68da      	ldr	r2, [r3, #12]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	e000      	b.n	8008e46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e44:	2302      	movs	r3, #2
  }
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3714      	adds	r7, #20
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bc80      	pop	{r7}
 8008e4e:	4770      	bx	lr

08008e50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2220      	movs	r2, #32
 8008e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f7ff fc63 	bl	800873c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08c      	sub	sp, #48	; 0x30
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b22      	cmp	r3, #34	; 0x22
 8008e92:	f040 80ae 	bne.w	8008ff2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e9e:	d117      	bne.n	8008ed0 <UART_Receive_IT+0x50>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d113      	bne.n	8008ed0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec8:	1c9a      	adds	r2, r3, #2
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	629a      	str	r2, [r3, #40]	; 0x28
 8008ece:	e026      	b.n	8008f1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee2:	d007      	beq.n	8008ef4 <UART_Receive_IT+0x74>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10a      	bne.n	8008f02 <UART_Receive_IT+0x82>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d106      	bne.n	8008f02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efe:	701a      	strb	r2, [r3, #0]
 8008f00:	e008      	b.n	8008f14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f18:	1c5a      	adds	r2, r3, #1
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	3b01      	subs	r3, #1
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d15d      	bne.n	8008fee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f022 0220 	bic.w	r2, r2, #32
 8008f40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	695a      	ldr	r2, [r3, #20]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 0201 	bic.w	r2, r2, #1
 8008f60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2220      	movs	r2, #32
 8008f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d135      	bne.n	8008fe4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	330c      	adds	r3, #12
 8008f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	e853 3f00 	ldrex	r3, [r3]
 8008f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f023 0310 	bic.w	r3, r3, #16
 8008f94:	627b      	str	r3, [r7, #36]	; 0x24
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	330c      	adds	r3, #12
 8008f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f9e:	623a      	str	r2, [r7, #32]
 8008fa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa2:	69f9      	ldr	r1, [r7, #28]
 8008fa4:	6a3a      	ldr	r2, [r7, #32]
 8008fa6:	e841 2300 	strex	r3, r2, [r1]
 8008faa:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1e5      	bne.n	8008f7e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0310 	and.w	r3, r3, #16
 8008fbc:	2b10      	cmp	r3, #16
 8008fbe:	d10a      	bne.n	8008fd6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	60fb      	str	r3, [r7, #12]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7ff fbda 	bl	8008796 <HAL_UARTEx_RxEventCallback>
 8008fe2:	e002      	b.n	8008fea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7ff fbb2 	bl	800874e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	e002      	b.n	8008ff4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e000      	b.n	8008ff4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008ff2:	2302      	movs	r3, #2
  }
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3730      	adds	r7, #48	; 0x30
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68da      	ldr	r2, [r3, #12]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	430a      	orrs	r2, r1
 8009018:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	689a      	ldr	r2, [r3, #8]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	431a      	orrs	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	695b      	ldr	r3, [r3, #20]
 8009028:	4313      	orrs	r3, r2
 800902a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009036:	f023 030c 	bic.w	r3, r3, #12
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	6812      	ldr	r2, [r2, #0]
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	430b      	orrs	r3, r1
 8009042:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	699a      	ldr	r2, [r3, #24]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a2c      	ldr	r2, [pc, #176]	; (8009110 <UART_SetConfig+0x114>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d103      	bne.n	800906c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009064:	f7fd fd82 	bl	8006b6c <HAL_RCC_GetPCLK2Freq>
 8009068:	60f8      	str	r0, [r7, #12]
 800906a:	e002      	b.n	8009072 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800906c:	f7fd fd6a 	bl	8006b44 <HAL_RCC_GetPCLK1Freq>
 8009070:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	4613      	mov	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4413      	add	r3, r2
 800907a:	009a      	lsls	r2, r3, #2
 800907c:	441a      	add	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	fbb2 f3f3 	udiv	r3, r2, r3
 8009088:	4a22      	ldr	r2, [pc, #136]	; (8009114 <UART_SetConfig+0x118>)
 800908a:	fba2 2303 	umull	r2, r3, r2, r3
 800908e:	095b      	lsrs	r3, r3, #5
 8009090:	0119      	lsls	r1, r3, #4
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	4613      	mov	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4413      	add	r3, r2
 800909a:	009a      	lsls	r2, r3, #2
 800909c:	441a      	add	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80090a8:	4b1a      	ldr	r3, [pc, #104]	; (8009114 <UART_SetConfig+0x118>)
 80090aa:	fba3 0302 	umull	r0, r3, r3, r2
 80090ae:	095b      	lsrs	r3, r3, #5
 80090b0:	2064      	movs	r0, #100	; 0x64
 80090b2:	fb00 f303 	mul.w	r3, r0, r3
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	011b      	lsls	r3, r3, #4
 80090ba:	3332      	adds	r3, #50	; 0x32
 80090bc:	4a15      	ldr	r2, [pc, #84]	; (8009114 <UART_SetConfig+0x118>)
 80090be:	fba2 2303 	umull	r2, r3, r2, r3
 80090c2:	095b      	lsrs	r3, r3, #5
 80090c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090c8:	4419      	add	r1, r3
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	4613      	mov	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	009a      	lsls	r2, r3, #2
 80090d4:	441a      	add	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80090e0:	4b0c      	ldr	r3, [pc, #48]	; (8009114 <UART_SetConfig+0x118>)
 80090e2:	fba3 0302 	umull	r0, r3, r3, r2
 80090e6:	095b      	lsrs	r3, r3, #5
 80090e8:	2064      	movs	r0, #100	; 0x64
 80090ea:	fb00 f303 	mul.w	r3, r0, r3
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	011b      	lsls	r3, r3, #4
 80090f2:	3332      	adds	r3, #50	; 0x32
 80090f4:	4a07      	ldr	r2, [pc, #28]	; (8009114 <UART_SetConfig+0x118>)
 80090f6:	fba2 2303 	umull	r2, r3, r2, r3
 80090fa:	095b      	lsrs	r3, r3, #5
 80090fc:	f003 020f 	and.w	r2, r3, #15
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	440a      	add	r2, r1
 8009106:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009108:	bf00      	nop
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	40013800 	.word	0x40013800
 8009114:	51eb851f 	.word	0x51eb851f

08009118 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009122:	2300      	movs	r3, #0
 8009124:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800912a:	2b84      	cmp	r3, #132	; 0x84
 800912c:	d005      	beq.n	800913a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800912e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	4413      	add	r3, r2
 8009136:	3303      	adds	r3, #3
 8009138:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800913a:	68fb      	ldr	r3, [r7, #12]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	bc80      	pop	{r7}
 8009144:	4770      	bx	lr

08009146 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009146:	b480      	push	{r7}
 8009148:	b083      	sub	sp, #12
 800914a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800914c:	f3ef 8305 	mrs	r3, IPSR
 8009150:	607b      	str	r3, [r7, #4]
  return(result);
 8009152:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009154:	2b00      	cmp	r3, #0
 8009156:	bf14      	ite	ne
 8009158:	2301      	movne	r3, #1
 800915a:	2300      	moveq	r3, #0
 800915c:	b2db      	uxtb	r3, r3
}
 800915e:	4618      	mov	r0, r3
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	bc80      	pop	{r7}
 8009166:	4770      	bx	lr

08009168 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800916c:	f001 fc24 	bl	800a9b8 <vTaskStartScheduler>
  
  return osOK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	bd80      	pop	{r7, pc}

08009176 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009176:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009178:	b089      	sub	sp, #36	; 0x24
 800917a:	af04      	add	r7, sp, #16
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	695b      	ldr	r3, [r3, #20]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d020      	beq.n	80091ca <osThreadCreate+0x54>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d01c      	beq.n	80091ca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685c      	ldr	r4, [r3, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	691e      	ldr	r6, [r3, #16]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7ff ffb8 	bl	8009118 <makeFreeRtosPriority>
 80091a8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091b2:	9202      	str	r2, [sp, #8]
 80091b4:	9301      	str	r3, [sp, #4]
 80091b6:	9100      	str	r1, [sp, #0]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	4632      	mov	r2, r6
 80091bc:	4629      	mov	r1, r5
 80091be:	4620      	mov	r0, r4
 80091c0:	f001 f80a 	bl	800a1d8 <xTaskCreateStatic>
 80091c4:	4603      	mov	r3, r0
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	e01c      	b.n	8009204 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685c      	ldr	r4, [r3, #4]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091d6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091de:	4618      	mov	r0, r3
 80091e0:	f7ff ff9a 	bl	8009118 <makeFreeRtosPriority>
 80091e4:	4602      	mov	r2, r0
 80091e6:	f107 030c 	add.w	r3, r7, #12
 80091ea:	9301      	str	r3, [sp, #4]
 80091ec:	9200      	str	r2, [sp, #0]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	4632      	mov	r2, r6
 80091f2:	4629      	mov	r1, r5
 80091f4:	4620      	mov	r0, r4
 80091f6:	f001 f84b 	bl	800a290 <xTaskCreate>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d001      	beq.n	8009204 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009200:	2300      	movs	r3, #0
 8009202:	e000      	b.n	8009206 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009204:	68fb      	ldr	r3, [r7, #12]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800920e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b084      	sub	sp, #16
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d001      	beq.n	8009224 <osDelay+0x16>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	e000      	b.n	8009226 <osDelay+0x18>
 8009224:	2301      	movs	r3, #1
 8009226:	4618      	mov	r0, r3
 8009228:	f001 f9f6 	bl	800a618 <vTaskDelay>
  
  return osOK;
 800922c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af02      	add	r7, sp, #8
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009242:	2300      	movs	r3, #0
 8009244:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800924a:	f7ff ff7c 	bl	8009146 <inHandlerMode>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d01c      	beq.n	800928e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	f107 0208 	add.w	r2, r7, #8
 800925a:	f107 030c 	add.w	r3, r7, #12
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	4613      	mov	r3, r2
 8009262:	2201      	movs	r2, #1
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f002 f97f 	bl	800b568 <xTaskGenericNotifyFromISR>
 800926a:	4603      	mov	r3, r0
 800926c:	2b01      	cmp	r3, #1
 800926e:	d002      	beq.n	8009276 <osSignalSet+0x3e>
      return 0x80000000;
 8009270:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009274:	e019      	b.n	80092aa <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d015      	beq.n	80092a8 <osSignalSet+0x70>
 800927c:	4b0d      	ldr	r3, [pc, #52]	; (80092b4 <osSignalSet+0x7c>)
 800927e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	e00c      	b.n	80092a8 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	f107 0308 	add.w	r3, r7, #8
 8009294:	2201      	movs	r2, #1
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f002 f8bc 	bl	800b414 <xTaskGenericNotify>
 800929c:	4603      	mov	r3, r0
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d002      	beq.n	80092a8 <osSignalSet+0x70>
    return 0x80000000;
 80092a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092a6:	e000      	b.n	80092aa <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80092a8:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	e000ed04 	.word	0xe000ed04

080092b8 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80092b8:	b590      	push	{r4, r7, lr}
 80092ba:	b089      	sub	sp, #36	; 0x24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80092c4:	2300      	movs	r3, #0
 80092c6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80092c8:	2300      	movs	r3, #0
 80092ca:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d2:	d103      	bne.n	80092dc <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80092d4:	f04f 33ff 	mov.w	r3, #4294967295
 80092d8:	61fb      	str	r3, [r7, #28]
 80092da:	e009      	b.n	80092f0 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d006      	beq.n	80092f0 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <osSignalWait+0x38>
      ticks = 1;
 80092ec:	2301      	movs	r3, #1
 80092ee:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80092f0:	f7ff ff29 	bl	8009146 <inHandlerMode>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80092fa:	2382      	movs	r3, #130	; 0x82
 80092fc:	613b      	str	r3, [r7, #16]
 80092fe:	e01b      	b.n	8009338 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8009300:	68b9      	ldr	r1, [r7, #8]
 8009302:	f107 0310 	add.w	r3, r7, #16
 8009306:	1d1a      	adds	r2, r3, #4
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	2000      	movs	r0, #0
 800930c:	f002 f822 	bl	800b354 <xTaskNotifyWait>
 8009310:	4603      	mov	r3, r0
 8009312:	2b01      	cmp	r3, #1
 8009314:	d008      	beq.n	8009328 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d102      	bne.n	8009322 <osSignalWait+0x6a>
 800931c:	2300      	movs	r3, #0
 800931e:	613b      	str	r3, [r7, #16]
 8009320:	e00a      	b.n	8009338 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8009322:	2340      	movs	r3, #64	; 0x40
 8009324:	613b      	str	r3, [r7, #16]
 8009326:	e007      	b.n	8009338 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2b00      	cmp	r3, #0
 800932c:	da02      	bge.n	8009334 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800932e:	2386      	movs	r3, #134	; 0x86
 8009330:	613b      	str	r3, [r7, #16]
 8009332:	e001      	b.n	8009338 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8009334:	2308      	movs	r3, #8
 8009336:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	461c      	mov	r4, r3
 800933c:	f107 0310 	add.w	r3, r7, #16
 8009340:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	3724      	adds	r7, #36	; 0x24
 800934c:	46bd      	mov	sp, r7
 800934e:	bd90      	pop	{r4, r7, pc}

08009350 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af02      	add	r7, sp, #8
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00f      	beq.n	8009382 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d10a      	bne.n	800937e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	2203      	movs	r2, #3
 800936e:	9200      	str	r2, [sp, #0]
 8009370:	2200      	movs	r2, #0
 8009372:	2100      	movs	r1, #0
 8009374:	2001      	movs	r0, #1
 8009376:	f000 fa55 	bl	8009824 <xQueueGenericCreateStatic>
 800937a:	4603      	mov	r3, r0
 800937c:	e016      	b.n	80093ac <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800937e:	2300      	movs	r3, #0
 8009380:	e014      	b.n	80093ac <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d110      	bne.n	80093aa <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009388:	2203      	movs	r2, #3
 800938a:	2100      	movs	r1, #0
 800938c:	2001      	movs	r0, #1
 800938e:	f000 fac0 	bl	8009912 <xQueueGenericCreate>
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d005      	beq.n	80093a6 <osSemaphoreCreate+0x56>
 800939a:	2300      	movs	r3, #0
 800939c:	2200      	movs	r2, #0
 800939e:	2100      	movs	r1, #0
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 fb13 	bl	80099cc <xQueueGenericSend>
      return sema;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	e000      	b.n	80093ac <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80093aa:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80093b4:	b590      	push	{r4, r7, lr}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af02      	add	r7, sp, #8
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d011      	beq.n	80093ea <osMessageCreate+0x36>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00d      	beq.n	80093ea <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6859      	ldr	r1, [r3, #4]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	689a      	ldr	r2, [r3, #8]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	2400      	movs	r4, #0
 80093e0:	9400      	str	r4, [sp, #0]
 80093e2:	f000 fa1f 	bl	8009824 <xQueueGenericCreateStatic>
 80093e6:	4603      	mov	r3, r0
 80093e8:	e008      	b.n	80093fc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6818      	ldr	r0, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	4619      	mov	r1, r3
 80093f6:	f000 fa8c 	bl	8009912 <xQueueGenericCreate>
 80093fa:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	bd90      	pop	{r4, r7, pc}

08009404 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009410:	2300      	movs	r3, #0
 8009412:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <osMessagePut+0x1e>
    ticks = 1;
 800941e:	2301      	movs	r3, #1
 8009420:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009422:	f7ff fe90 	bl	8009146 <inHandlerMode>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d018      	beq.n	800945e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800942c:	f107 0210 	add.w	r2, r7, #16
 8009430:	f107 0108 	add.w	r1, r7, #8
 8009434:	2300      	movs	r3, #0
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f000 fbc6 	bl	8009bc8 <xQueueGenericSendFromISR>
 800943c:	4603      	mov	r3, r0
 800943e:	2b01      	cmp	r3, #1
 8009440:	d001      	beq.n	8009446 <osMessagePut+0x42>
      return osErrorOS;
 8009442:	23ff      	movs	r3, #255	; 0xff
 8009444:	e018      	b.n	8009478 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d014      	beq.n	8009476 <osMessagePut+0x72>
 800944c:	4b0c      	ldr	r3, [pc, #48]	; (8009480 <osMessagePut+0x7c>)
 800944e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	e00b      	b.n	8009476 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800945e:	f107 0108 	add.w	r1, r7, #8
 8009462:	2300      	movs	r3, #0
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f000 fab0 	bl	80099cc <xQueueGenericSend>
 800946c:	4603      	mov	r3, r0
 800946e:	2b01      	cmp	r3, #1
 8009470:	d001      	beq.n	8009476 <osMessagePut+0x72>
      return osErrorOS;
 8009472:	23ff      	movs	r3, #255	; 0xff
 8009474:	e000      	b.n	8009478 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3718      	adds	r7, #24
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	e000ed04 	.word	0xe000ed04

08009484 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009484:	b590      	push	{r4, r7, lr}
 8009486:	b08b      	sub	sp, #44	; 0x2c
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10a      	bne.n	80094b4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800949e:	2380      	movs	r3, #128	; 0x80
 80094a0:	617b      	str	r3, [r7, #20]
    return event;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	461c      	mov	r4, r3
 80094a6:	f107 0314 	add.w	r3, r7, #20
 80094aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80094b2:	e054      	b.n	800955e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80094b4:	2300      	movs	r3, #0
 80094b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c2:	d103      	bne.n	80094cc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80094c4:	f04f 33ff 	mov.w	r3, #4294967295
 80094c8:	627b      	str	r3, [r7, #36]	; 0x24
 80094ca:	e009      	b.n	80094e0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d006      	beq.n	80094e0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80094d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <osMessageGet+0x5c>
      ticks = 1;
 80094dc:	2301      	movs	r3, #1
 80094de:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80094e0:	f7ff fe31 	bl	8009146 <inHandlerMode>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d01c      	beq.n	8009524 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80094ea:	f107 0220 	add.w	r2, r7, #32
 80094ee:	f107 0314 	add.w	r3, r7, #20
 80094f2:	3304      	adds	r3, #4
 80094f4:	4619      	mov	r1, r3
 80094f6:	68b8      	ldr	r0, [r7, #8]
 80094f8:	f000 fcde 	bl	8009eb8 <xQueueReceiveFromISR>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d102      	bne.n	8009508 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009502:	2310      	movs	r3, #16
 8009504:	617b      	str	r3, [r7, #20]
 8009506:	e001      	b.n	800950c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009508:	2300      	movs	r3, #0
 800950a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800950c:	6a3b      	ldr	r3, [r7, #32]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d01d      	beq.n	800954e <osMessageGet+0xca>
 8009512:	4b15      	ldr	r3, [pc, #84]	; (8009568 <osMessageGet+0xe4>)
 8009514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	e014      	b.n	800954e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009524:	f107 0314 	add.w	r3, r7, #20
 8009528:	3304      	adds	r3, #4
 800952a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800952c:	4619      	mov	r1, r3
 800952e:	68b8      	ldr	r0, [r7, #8]
 8009530:	f000 fbe2 	bl	8009cf8 <xQueueReceive>
 8009534:	4603      	mov	r3, r0
 8009536:	2b01      	cmp	r3, #1
 8009538:	d102      	bne.n	8009540 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800953a:	2310      	movs	r3, #16
 800953c:	617b      	str	r3, [r7, #20]
 800953e:	e006      	b.n	800954e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <osMessageGet+0xc6>
 8009546:	2300      	movs	r3, #0
 8009548:	e000      	b.n	800954c <osMessageGet+0xc8>
 800954a:	2340      	movs	r3, #64	; 0x40
 800954c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	461c      	mov	r4, r3
 8009552:	f107 0314 	add.w	r3, r7, #20
 8009556:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800955a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	372c      	adds	r7, #44	; 0x2c
 8009562:	46bd      	mov	sp, r7
 8009564:	bd90      	pop	{r4, r7, pc}
 8009566:	bf00      	nop
 8009568:	e000ed04 	.word	0xe000ed04

0800956c <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f001 f883 	bl	800a680 <vTaskSuspend>
  
  return osOK;
 800957a:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800957c:	4618      	mov	r0, r3
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 800958c:	f7ff fddb 	bl	8009146 <inHandlerMode>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00e      	beq.n	80095b4 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f001 f99c 	bl	800a8d4 <xTaskResumeFromISR>
 800959c:	4603      	mov	r3, r0
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d10b      	bne.n	80095ba <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80095a2:	4b08      	ldr	r3, [pc, #32]	; (80095c4 <osThreadResume+0x40>)
 80095a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	e002      	b.n	80095ba <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f001 f92f 	bl	800a818 <vTaskResume>
  }
  return osOK;
 80095ba:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	e000ed04 	.word	0xe000ed04

080095c8 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <osDelayUntil+0x18>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	e000      	b.n	80095e2 <osDelayUntil+0x1a>
 80095e0:	2301      	movs	r3, #1
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 ff99 	bl	800a51c <vTaskDelayUntil>
  
  return osOK;
 80095ea:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f103 0208 	add.w	r2, r3, #8
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f04f 32ff 	mov.w	r2, #4294967295
 800960c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f103 0208 	add.w	r2, r3, #8
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f103 0208 	add.w	r2, r3, #8
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	bc80      	pop	{r7}
 8009630:	4770      	bx	lr

08009632 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009632:	b480      	push	{r7}
 8009634:	b083      	sub	sp, #12
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	bc80      	pop	{r7}
 8009648:	4770      	bx	lr

0800964a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800964a:	b480      	push	{r7}
 800964c:	b085      	sub	sp, #20
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	689a      	ldr	r2, [r3, #8]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	683a      	ldr	r2, [r7, #0]
 800966e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	1c5a      	adds	r2, r3, #1
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	601a      	str	r2, [r3, #0]
}
 8009686:	bf00      	nop
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	bc80      	pop	{r7}
 800968e:	4770      	bx	lr

08009690 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a6:	d103      	bne.n	80096b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	60fb      	str	r3, [r7, #12]
 80096ae:	e00c      	b.n	80096ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3308      	adds	r3, #8
 80096b4:	60fb      	str	r3, [r7, #12]
 80096b6:	e002      	b.n	80096be <vListInsert+0x2e>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d2f6      	bcs.n	80096b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	683a      	ldr	r2, [r7, #0]
 80096d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	683a      	ldr	r2, [r7, #0]
 80096e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	601a      	str	r2, [r3, #0]
}
 80096f6:	bf00      	nop
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bc80      	pop	{r7}
 80096fe:	4770      	bx	lr

08009700 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	6892      	ldr	r2, [r2, #8]
 8009716:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	6852      	ldr	r2, [r2, #4]
 8009720:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	429a      	cmp	r2, r3
 800972a:	d103      	bne.n	8009734 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	689a      	ldr	r2, [r3, #8]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	1e5a      	subs	r2, r3, #1
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	bc80      	pop	{r7}
 8009750:	4770      	bx	lr
	...

08009754 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10a      	bne.n	800977e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800977a:	bf00      	nop
 800977c:	e7fe      	b.n	800977c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800977e:	f002 f91d 	bl	800b9bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800978a:	68f9      	ldr	r1, [r7, #12]
 800978c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800978e:	fb01 f303 	mul.w	r3, r1, r3
 8009792:	441a      	add	r2, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ae:	3b01      	subs	r3, #1
 80097b0:	68f9      	ldr	r1, [r7, #12]
 80097b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80097b4:	fb01 f303 	mul.w	r3, r1, r3
 80097b8:	441a      	add	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	22ff      	movs	r2, #255	; 0xff
 80097c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	22ff      	movs	r2, #255	; 0xff
 80097ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d114      	bne.n	80097fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d01a      	beq.n	8009812 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	3310      	adds	r3, #16
 80097e0:	4618      	mov	r0, r3
 80097e2:	f001 fb4f 	bl	800ae84 <xTaskRemoveFromEventList>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d012      	beq.n	8009812 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80097ec:	4b0c      	ldr	r3, [pc, #48]	; (8009820 <xQueueGenericReset+0xcc>)
 80097ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	e009      	b.n	8009812 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3310      	adds	r3, #16
 8009802:	4618      	mov	r0, r3
 8009804:	f7ff fef6 	bl	80095f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3324      	adds	r3, #36	; 0x24
 800980c:	4618      	mov	r0, r3
 800980e:	f7ff fef1 	bl	80095f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009812:	f002 f903 	bl	800ba1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009816:	2301      	movs	r3, #1
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	e000ed04 	.word	0xe000ed04

08009824 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08e      	sub	sp, #56	; 0x38
 8009828:	af02      	add	r7, sp, #8
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10a      	bne.n	800984e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800984a:	bf00      	nop
 800984c:	e7fe      	b.n	800984c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10a      	bne.n	800986a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <xQueueGenericCreateStatic+0x52>
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <xQueueGenericCreateStatic+0x56>
 8009876:	2301      	movs	r3, #1
 8009878:	e000      	b.n	800987c <xQueueGenericCreateStatic+0x58>
 800987a:	2300      	movs	r3, #0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10a      	bne.n	8009896 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	623b      	str	r3, [r7, #32]
}
 8009892:	bf00      	nop
 8009894:	e7fe      	b.n	8009894 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d102      	bne.n	80098a2 <xQueueGenericCreateStatic+0x7e>
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <xQueueGenericCreateStatic+0x82>
 80098a2:	2301      	movs	r3, #1
 80098a4:	e000      	b.n	80098a8 <xQueueGenericCreateStatic+0x84>
 80098a6:	2300      	movs	r3, #0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10a      	bne.n	80098c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	61fb      	str	r3, [r7, #28]
}
 80098be:	bf00      	nop
 80098c0:	e7fe      	b.n	80098c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80098c2:	2348      	movs	r3, #72	; 0x48
 80098c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b48      	cmp	r3, #72	; 0x48
 80098ca:	d00a      	beq.n	80098e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80098cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d0:	f383 8811 	msr	BASEPRI, r3
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	61bb      	str	r3, [r7, #24]
}
 80098de:	bf00      	nop
 80098e0:	e7fe      	b.n	80098e0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80098e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00d      	beq.n	8009908 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80098ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80098f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80098f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	4613      	mov	r3, r2
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	68b9      	ldr	r1, [r7, #8]
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 f843 	bl	800998e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800990a:	4618      	mov	r0, r3
 800990c:	3730      	adds	r7, #48	; 0x30
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009912:	b580      	push	{r7, lr}
 8009914:	b08a      	sub	sp, #40	; 0x28
 8009916:	af02      	add	r7, sp, #8
 8009918:	60f8      	str	r0, [r7, #12]
 800991a:	60b9      	str	r1, [r7, #8]
 800991c:	4613      	mov	r3, r2
 800991e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10a      	bne.n	800993c <xQueueGenericCreate+0x2a>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	613b      	str	r3, [r7, #16]
}
 8009938:	bf00      	nop
 800993a:	e7fe      	b.n	800993a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009942:	2300      	movs	r3, #0
 8009944:	61fb      	str	r3, [r7, #28]
 8009946:	e004      	b.n	8009952 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	fb02 f303 	mul.w	r3, r2, r3
 8009950:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	3348      	adds	r3, #72	; 0x48
 8009956:	4618      	mov	r0, r3
 8009958:	f002 f930 	bl	800bbbc <pvPortMalloc>
 800995c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00f      	beq.n	8009984 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	3348      	adds	r3, #72	; 0x48
 8009968:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009972:	79fa      	ldrb	r2, [r7, #7]
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	4613      	mov	r3, r2
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	68b9      	ldr	r1, [r7, #8]
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 f805 	bl	800998e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009984:	69bb      	ldr	r3, [r7, #24]
	}
 8009986:	4618      	mov	r0, r3
 8009988:	3720      	adds	r7, #32
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	60f8      	str	r0, [r7, #12]
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	607a      	str	r2, [r7, #4]
 800999a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d103      	bne.n	80099aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	69ba      	ldr	r2, [r7, #24]
 80099a6:	601a      	str	r2, [r3, #0]
 80099a8:	e002      	b.n	80099b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80099bc:	2101      	movs	r1, #1
 80099be:	69b8      	ldr	r0, [r7, #24]
 80099c0:	f7ff fec8 	bl	8009754 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80099c4:	bf00      	nop
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b08e      	sub	sp, #56	; 0x38
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80099da:	2300      	movs	r3, #0
 80099dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10a      	bne.n	80099fe <xQueueGenericSend+0x32>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80099fa:	bf00      	nop
 80099fc:	e7fe      	b.n	80099fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d103      	bne.n	8009a0c <xQueueGenericSend+0x40>
 8009a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <xQueueGenericSend+0x44>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e000      	b.n	8009a12 <xQueueGenericSend+0x46>
 8009a10:	2300      	movs	r3, #0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10a      	bne.n	8009a2c <xQueueGenericSend+0x60>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a28:	bf00      	nop
 8009a2a:	e7fe      	b.n	8009a2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d103      	bne.n	8009a3a <xQueueGenericSend+0x6e>
 8009a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d101      	bne.n	8009a3e <xQueueGenericSend+0x72>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e000      	b.n	8009a40 <xQueueGenericSend+0x74>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10a      	bne.n	8009a5a <xQueueGenericSend+0x8e>
	__asm volatile
 8009a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	623b      	str	r3, [r7, #32]
}
 8009a56:	bf00      	nop
 8009a58:	e7fe      	b.n	8009a58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a5a:	f001 fbd7 	bl	800b20c <xTaskGetSchedulerState>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d102      	bne.n	8009a6a <xQueueGenericSend+0x9e>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d101      	bne.n	8009a6e <xQueueGenericSend+0xa2>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e000      	b.n	8009a70 <xQueueGenericSend+0xa4>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10a      	bne.n	8009a8a <xQueueGenericSend+0xbe>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	61fb      	str	r3, [r7, #28]
}
 8009a86:	bf00      	nop
 8009a88:	e7fe      	b.n	8009a88 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a8a:	f001 ff97 	bl	800b9bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d302      	bcc.n	8009aa0 <xQueueGenericSend+0xd4>
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d129      	bne.n	8009af4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009aa0:	683a      	ldr	r2, [r7, #0]
 8009aa2:	68b9      	ldr	r1, [r7, #8]
 8009aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aa6:	f000 fa87 	bl	8009fb8 <prvCopyDataToQueue>
 8009aaa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d010      	beq.n	8009ad6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab6:	3324      	adds	r3, #36	; 0x24
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f001 f9e3 	bl	800ae84 <xTaskRemoveFromEventList>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d013      	beq.n	8009aec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ac4:	4b3f      	ldr	r3, [pc, #252]	; (8009bc4 <xQueueGenericSend+0x1f8>)
 8009ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aca:	601a      	str	r2, [r3, #0]
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	e00a      	b.n	8009aec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d007      	beq.n	8009aec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009adc:	4b39      	ldr	r3, [pc, #228]	; (8009bc4 <xQueueGenericSend+0x1f8>)
 8009ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009aec:	f001 ff96 	bl	800ba1c <vPortExitCritical>
				return pdPASS;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e063      	b.n	8009bbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d103      	bne.n	8009b02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009afa:	f001 ff8f 	bl	800ba1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009afe:	2300      	movs	r3, #0
 8009b00:	e05c      	b.n	8009bbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d106      	bne.n	8009b16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b08:	f107 0314 	add.w	r3, r7, #20
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f001 fa1b 	bl	800af48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b12:	2301      	movs	r3, #1
 8009b14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b16:	f001 ff81 	bl	800ba1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b1a:	f000 ffb7 	bl	800aa8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b1e:	f001 ff4d 	bl	800b9bc <vPortEnterCritical>
 8009b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b28:	b25b      	sxtb	r3, r3
 8009b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2e:	d103      	bne.n	8009b38 <xQueueGenericSend+0x16c>
 8009b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b3e:	b25b      	sxtb	r3, r3
 8009b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b44:	d103      	bne.n	8009b4e <xQueueGenericSend+0x182>
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b4e:	f001 ff65 	bl	800ba1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b52:	1d3a      	adds	r2, r7, #4
 8009b54:	f107 0314 	add.w	r3, r7, #20
 8009b58:	4611      	mov	r1, r2
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f001 fa0a 	bl	800af74 <xTaskCheckForTimeOut>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d124      	bne.n	8009bb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b68:	f000 fb1e 	bl	800a1a8 <prvIsQueueFull>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d018      	beq.n	8009ba4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b74:	3310      	adds	r3, #16
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	4611      	mov	r1, r2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f001 f95e 	bl	800ae3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b82:	f000 faa9 	bl	800a0d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b86:	f000 ff8f 	bl	800aaa8 <xTaskResumeAll>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f47f af7c 	bne.w	8009a8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009b92:	4b0c      	ldr	r3, [pc, #48]	; (8009bc4 <xQueueGenericSend+0x1f8>)
 8009b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b98:	601a      	str	r2, [r3, #0]
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	e772      	b.n	8009a8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ba6:	f000 fa97 	bl	800a0d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009baa:	f000 ff7d 	bl	800aaa8 <xTaskResumeAll>
 8009bae:	e76c      	b.n	8009a8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bb2:	f000 fa91 	bl	800a0d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bb6:	f000 ff77 	bl	800aaa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009bba:	2300      	movs	r3, #0
		}
	}
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3738      	adds	r7, #56	; 0x38
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	e000ed04 	.word	0xe000ed04

08009bc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b08e      	sub	sp, #56	; 0x38
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
 8009bd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10a      	bne.n	8009bf6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d103      	bne.n	8009c04 <xQueueGenericSendFromISR+0x3c>
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d101      	bne.n	8009c08 <xQueueGenericSendFromISR+0x40>
 8009c04:	2301      	movs	r3, #1
 8009c06:	e000      	b.n	8009c0a <xQueueGenericSendFromISR+0x42>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	623b      	str	r3, [r7, #32]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d103      	bne.n	8009c32 <xQueueGenericSendFromISR+0x6a>
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <xQueueGenericSendFromISR+0x6e>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e000      	b.n	8009c38 <xQueueGenericSendFromISR+0x70>
 8009c36:	2300      	movs	r3, #0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10a      	bne.n	8009c52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	61fb      	str	r3, [r7, #28]
}
 8009c4e:	bf00      	nop
 8009c50:	e7fe      	b.n	8009c50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c52:	f001 ff75 	bl	800bb40 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c56:	f3ef 8211 	mrs	r2, BASEPRI
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	61ba      	str	r2, [r7, #24]
 8009c6c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c6e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d302      	bcc.n	8009c84 <xQueueGenericSendFromISR+0xbc>
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d12c      	bne.n	8009cde <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	68b9      	ldr	r1, [r7, #8]
 8009c92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c94:	f000 f990 	bl	8009fb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c98:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca0:	d112      	bne.n	8009cc8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d016      	beq.n	8009cd8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cac:	3324      	adds	r3, #36	; 0x24
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f001 f8e8 	bl	800ae84 <xTaskRemoveFromEventList>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00e      	beq.n	8009cd8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00b      	beq.n	8009cd8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	601a      	str	r2, [r3, #0]
 8009cc6:	e007      	b.n	8009cd8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009cc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ccc:	3301      	adds	r3, #1
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	b25a      	sxtb	r2, r3
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009cdc:	e001      	b.n	8009ce2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009cec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3738      	adds	r7, #56	; 0x38
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b08c      	sub	sp, #48	; 0x30
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d04:	2300      	movs	r3, #0
 8009d06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10a      	bne.n	8009d28 <xQueueReceive+0x30>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	623b      	str	r3, [r7, #32]
}
 8009d24:	bf00      	nop
 8009d26:	e7fe      	b.n	8009d26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d103      	bne.n	8009d36 <xQueueReceive+0x3e>
 8009d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <xQueueReceive+0x42>
 8009d36:	2301      	movs	r3, #1
 8009d38:	e000      	b.n	8009d3c <xQueueReceive+0x44>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10a      	bne.n	8009d56 <xQueueReceive+0x5e>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	61fb      	str	r3, [r7, #28]
}
 8009d52:	bf00      	nop
 8009d54:	e7fe      	b.n	8009d54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d56:	f001 fa59 	bl	800b20c <xTaskGetSchedulerState>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d102      	bne.n	8009d66 <xQueueReceive+0x6e>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d101      	bne.n	8009d6a <xQueueReceive+0x72>
 8009d66:	2301      	movs	r3, #1
 8009d68:	e000      	b.n	8009d6c <xQueueReceive+0x74>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10a      	bne.n	8009d86 <xQueueReceive+0x8e>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	61bb      	str	r3, [r7, #24]
}
 8009d82:	bf00      	nop
 8009d84:	e7fe      	b.n	8009d84 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d86:	f001 fe19 	bl	800b9bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d01f      	beq.n	8009dd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d96:	68b9      	ldr	r1, [r7, #8]
 8009d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d9a:	f000 f977 	bl	800a08c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	1e5a      	subs	r2, r3, #1
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00f      	beq.n	8009dce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db0:	3310      	adds	r3, #16
 8009db2:	4618      	mov	r0, r3
 8009db4:	f001 f866 	bl	800ae84 <xTaskRemoveFromEventList>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d007      	beq.n	8009dce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009dbe:	4b3d      	ldr	r3, [pc, #244]	; (8009eb4 <xQueueReceive+0x1bc>)
 8009dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009dce:	f001 fe25 	bl	800ba1c <vPortExitCritical>
				return pdPASS;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e069      	b.n	8009eaa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d103      	bne.n	8009de4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ddc:	f001 fe1e 	bl	800ba1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009de0:	2300      	movs	r3, #0
 8009de2:	e062      	b.n	8009eaa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d106      	bne.n	8009df8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009dea:	f107 0310 	add.w	r3, r7, #16
 8009dee:	4618      	mov	r0, r3
 8009df0:	f001 f8aa 	bl	800af48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009df4:	2301      	movs	r3, #1
 8009df6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009df8:	f001 fe10 	bl	800ba1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009dfc:	f000 fe46 	bl	800aa8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e00:	f001 fddc 	bl	800b9bc <vPortEnterCritical>
 8009e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e0a:	b25b      	sxtb	r3, r3
 8009e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e10:	d103      	bne.n	8009e1a <xQueueReceive+0x122>
 8009e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e20:	b25b      	sxtb	r3, r3
 8009e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e26:	d103      	bne.n	8009e30 <xQueueReceive+0x138>
 8009e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e30:	f001 fdf4 	bl	800ba1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e34:	1d3a      	adds	r2, r7, #4
 8009e36:	f107 0310 	add.w	r3, r7, #16
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f001 f899 	bl	800af74 <xTaskCheckForTimeOut>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d123      	bne.n	8009e90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e4a:	f000 f997 	bl	800a17c <prvIsQueueEmpty>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d017      	beq.n	8009e84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e56:	3324      	adds	r3, #36	; 0x24
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f000 ffed 	bl	800ae3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e64:	f000 f938 	bl	800a0d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e68:	f000 fe1e 	bl	800aaa8 <xTaskResumeAll>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d189      	bne.n	8009d86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009e72:	4b10      	ldr	r3, [pc, #64]	; (8009eb4 <xQueueReceive+0x1bc>)
 8009e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e78:	601a      	str	r2, [r3, #0]
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	e780      	b.n	8009d86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e86:	f000 f927 	bl	800a0d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e8a:	f000 fe0d 	bl	800aaa8 <xTaskResumeAll>
 8009e8e:	e77a      	b.n	8009d86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e92:	f000 f921 	bl	800a0d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e96:	f000 fe07 	bl	800aaa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e9c:	f000 f96e 	bl	800a17c <prvIsQueueEmpty>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f43f af6f 	beq.w	8009d86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ea8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3730      	adds	r7, #48	; 0x30
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	e000ed04 	.word	0xe000ed04

08009eb8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b08e      	sub	sp, #56	; 0x38
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10a      	bne.n	8009ee4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	623b      	str	r3, [r7, #32]
}
 8009ee0:	bf00      	nop
 8009ee2:	e7fe      	b.n	8009ee2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d103      	bne.n	8009ef2 <xQueueReceiveFromISR+0x3a>
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d101      	bne.n	8009ef6 <xQueueReceiveFromISR+0x3e>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e000      	b.n	8009ef8 <xQueueReceiveFromISR+0x40>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d10a      	bne.n	8009f12 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	61fb      	str	r3, [r7, #28]
}
 8009f0e:	bf00      	nop
 8009f10:	e7fe      	b.n	8009f10 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f12:	f001 fe15 	bl	800bb40 <vPortValidateInterruptPriority>
	__asm volatile
 8009f16:	f3ef 8211 	mrs	r2, BASEPRI
 8009f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1e:	f383 8811 	msr	BASEPRI, r3
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	f3bf 8f4f 	dsb	sy
 8009f2a:	61ba      	str	r2, [r7, #24]
 8009f2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009f2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d02f      	beq.n	8009f9e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f48:	68b9      	ldr	r1, [r7, #8]
 8009f4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f4c:	f000 f89e 	bl	800a08c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	1e5a      	subs	r2, r3, #1
 8009f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009f58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f60:	d112      	bne.n	8009f88 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d016      	beq.n	8009f98 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6c:	3310      	adds	r3, #16
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 ff88 	bl	800ae84 <xTaskRemoveFromEventList>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00e      	beq.n	8009f98 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00b      	beq.n	8009f98 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	e007      	b.n	8009f98 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	b25a      	sxtb	r2, r3
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8009f9c:	e001      	b.n	8009fa2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8009fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	f383 8811 	msr	BASEPRI, r3
}
 8009fac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3738      	adds	r7, #56	; 0x38
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10d      	bne.n	8009ff2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d14d      	bne.n	800a07a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f001 f930 	bl	800b248 <xTaskPriorityDisinherit>
 8009fe8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2200      	movs	r2, #0
 8009fee:	605a      	str	r2, [r3, #4]
 8009ff0:	e043      	b.n	800a07a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d119      	bne.n	800a02c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6898      	ldr	r0, [r3, #8]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a000:	461a      	mov	r2, r3
 800a002:	68b9      	ldr	r1, [r7, #8]
 800a004:	f002 f93e 	bl	800c284 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	689a      	ldr	r2, [r3, #8]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a010:	441a      	add	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	689a      	ldr	r2, [r3, #8]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d32b      	bcc.n	800a07a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	609a      	str	r2, [r3, #8]
 800a02a:	e026      	b.n	800a07a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	68d8      	ldr	r0, [r3, #12]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a034:	461a      	mov	r2, r3
 800a036:	68b9      	ldr	r1, [r7, #8]
 800a038:	f002 f924 	bl	800c284 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	68da      	ldr	r2, [r3, #12]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a044:	425b      	negs	r3, r3
 800a046:	441a      	add	r2, r3
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	68da      	ldr	r2, [r3, #12]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	429a      	cmp	r2, r3
 800a056:	d207      	bcs.n	800a068 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a060:	425b      	negs	r3, r3
 800a062:	441a      	add	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d105      	bne.n	800a07a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	3b01      	subs	r3, #1
 800a078:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	1c5a      	adds	r2, r3, #1
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a082:	697b      	ldr	r3, [r7, #20]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d018      	beq.n	800a0d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	68da      	ldr	r2, [r3, #12]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a6:	441a      	add	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68da      	ldr	r2, [r3, #12]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d303      	bcc.n	800a0c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68d9      	ldr	r1, [r3, #12]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	6838      	ldr	r0, [r7, #0]
 800a0cc:	f002 f8da 	bl	800c284 <memcpy>
	}
}
 800a0d0:	bf00      	nop
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a0e0:	f001 fc6c 	bl	800b9bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0ec:	e011      	b.n	800a112 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d012      	beq.n	800a11c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	3324      	adds	r3, #36	; 0x24
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 fec2 	bl	800ae84 <xTaskRemoveFromEventList>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a106:	f000 ff97 	bl	800b038 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a116:	2b00      	cmp	r3, #0
 800a118:	dce9      	bgt.n	800a0ee <prvUnlockQueue+0x16>
 800a11a:	e000      	b.n	800a11e <prvUnlockQueue+0x46>
					break;
 800a11c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	22ff      	movs	r2, #255	; 0xff
 800a122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a126:	f001 fc79 	bl	800ba1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a12a:	f001 fc47 	bl	800b9bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a134:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a136:	e011      	b.n	800a15c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d012      	beq.n	800a166 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	3310      	adds	r3, #16
 800a144:	4618      	mov	r0, r3
 800a146:	f000 fe9d 	bl	800ae84 <xTaskRemoveFromEventList>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a150:	f000 ff72 	bl	800b038 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a154:	7bbb      	ldrb	r3, [r7, #14]
 800a156:	3b01      	subs	r3, #1
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a15c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a160:	2b00      	cmp	r3, #0
 800a162:	dce9      	bgt.n	800a138 <prvUnlockQueue+0x60>
 800a164:	e000      	b.n	800a168 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a166:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	22ff      	movs	r2, #255	; 0xff
 800a16c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a170:	f001 fc54 	bl	800ba1c <vPortExitCritical>
}
 800a174:	bf00      	nop
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a184:	f001 fc1a 	bl	800b9bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d102      	bne.n	800a196 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a190:	2301      	movs	r3, #1
 800a192:	60fb      	str	r3, [r7, #12]
 800a194:	e001      	b.n	800a19a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a196:	2300      	movs	r3, #0
 800a198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a19a:	f001 fc3f 	bl	800ba1c <vPortExitCritical>

	return xReturn;
 800a19e:	68fb      	ldr	r3, [r7, #12]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1b0:	f001 fc04 	bl	800b9bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d102      	bne.n	800a1c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	e001      	b.n	800a1ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1ca:	f001 fc27 	bl	800ba1c <vPortExitCritical>

	return xReturn;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08e      	sub	sp, #56	; 0x38
 800a1dc:	af04      	add	r7, sp, #16
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
 800a1e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10a      	bne.n	800a202 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	623b      	str	r3, [r7, #32]
}
 800a1fe:	bf00      	nop
 800a200:	e7fe      	b.n	800a200 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10a      	bne.n	800a21e <xTaskCreateStatic+0x46>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	61fb      	str	r3, [r7, #28]
}
 800a21a:	bf00      	nop
 800a21c:	e7fe      	b.n	800a21c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a21e:	23a0      	movs	r3, #160	; 0xa0
 800a220:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	2ba0      	cmp	r3, #160	; 0xa0
 800a226:	d00a      	beq.n	800a23e <xTaskCreateStatic+0x66>
	__asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	61bb      	str	r3, [r7, #24]
}
 800a23a:	bf00      	nop
 800a23c:	e7fe      	b.n	800a23c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a240:	2b00      	cmp	r3, #0
 800a242:	d01e      	beq.n	800a282 <xTaskCreateStatic+0xaa>
 800a244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a246:	2b00      	cmp	r3, #0
 800a248:	d01b      	beq.n	800a282 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a252:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	2202      	movs	r2, #2
 800a258:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a25c:	2300      	movs	r3, #0
 800a25e:	9303      	str	r3, [sp, #12]
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	9302      	str	r3, [sp, #8]
 800a264:	f107 0314 	add.w	r3, r7, #20
 800a268:	9301      	str	r3, [sp, #4]
 800a26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	68b9      	ldr	r1, [r7, #8]
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f000 f851 	bl	800a31c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a27a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a27c:	f000 f8e4 	bl	800a448 <prvAddNewTaskToReadyList>
 800a280:	e001      	b.n	800a286 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a282:	2300      	movs	r3, #0
 800a284:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a286:	697b      	ldr	r3, [r7, #20]
	}
 800a288:	4618      	mov	r0, r3
 800a28a:	3728      	adds	r7, #40	; 0x28
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a290:	b580      	push	{r7, lr}
 800a292:	b08c      	sub	sp, #48	; 0x30
 800a294:	af04      	add	r7, sp, #16
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	603b      	str	r3, [r7, #0]
 800a29c:	4613      	mov	r3, r2
 800a29e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2a0:	88fb      	ldrh	r3, [r7, #6]
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 fc89 	bl	800bbbc <pvPortMalloc>
 800a2aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00e      	beq.n	800a2d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a2b2:	20a0      	movs	r0, #160	; 0xa0
 800a2b4:	f001 fc82 	bl	800bbbc <pvPortMalloc>
 800a2b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	631a      	str	r2, [r3, #48]	; 0x30
 800a2c6:	e005      	b.n	800a2d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a2c8:	6978      	ldr	r0, [r7, #20]
 800a2ca:	f001 fd3b 	bl	800bd44 <vPortFree>
 800a2ce:	e001      	b.n	800a2d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d017      	beq.n	800a30a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a2e2:	88fa      	ldrh	r2, [r7, #6]
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	9303      	str	r3, [sp, #12]
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	9302      	str	r3, [sp, #8]
 800a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ee:	9301      	str	r3, [sp, #4]
 800a2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	68b9      	ldr	r1, [r7, #8]
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f000 f80f 	bl	800a31c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2fe:	69f8      	ldr	r0, [r7, #28]
 800a300:	f000 f8a2 	bl	800a448 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a304:	2301      	movs	r3, #1
 800a306:	61bb      	str	r3, [r7, #24]
 800a308:	e002      	b.n	800a310 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a30a:	f04f 33ff 	mov.w	r3, #4294967295
 800a30e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a310:	69bb      	ldr	r3, [r7, #24]
	}
 800a312:	4618      	mov	r0, r3
 800a314:	3720      	adds	r7, #32
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
	...

0800a31c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b088      	sub	sp, #32
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a334:	3b01      	subs	r3, #1
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4413      	add	r3, r2
 800a33a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	f023 0307 	bic.w	r3, r3, #7
 800a342:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00a      	beq.n	800a364 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	617b      	str	r3, [r7, #20]
}
 800a360:	bf00      	nop
 800a362:	e7fe      	b.n	800a362 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a364:	2300      	movs	r3, #0
 800a366:	61fb      	str	r3, [r7, #28]
 800a368:	e012      	b.n	800a390 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	4413      	add	r3, r2
 800a370:	7819      	ldrb	r1, [r3, #0]
 800a372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	4413      	add	r3, r2
 800a378:	3334      	adds	r3, #52	; 0x34
 800a37a:	460a      	mov	r2, r1
 800a37c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	4413      	add	r3, r2
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d006      	beq.n	800a398 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	3301      	adds	r3, #1
 800a38e:	61fb      	str	r3, [r7, #28]
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	2b0f      	cmp	r3, #15
 800a394:	d9e9      	bls.n	800a36a <prvInitialiseNewTask+0x4e>
 800a396:	e000      	b.n	800a39a <prvInitialiseNewTask+0x7e>
		{
			break;
 800a398:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a4:	2b06      	cmp	r3, #6
 800a3a6:	d901      	bls.n	800a3ac <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a3a8:	2306      	movs	r3, #6
 800a3aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7ff f935 	bl	8009632 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ca:	3318      	adds	r3, #24
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7ff f930 	bl	8009632 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3da:	f1c3 0207 	rsb	r2, r3, #7
 800a3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fa:	334c      	adds	r3, #76	; 0x4c
 800a3fc:	224c      	movs	r2, #76	; 0x4c
 800a3fe:	2100      	movs	r1, #0
 800a400:	4618      	mov	r0, r3
 800a402:	f001 fe87 	bl	800c114 <memset>
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	4a0c      	ldr	r2, [pc, #48]	; (800a43c <prvInitialiseNewTask+0x120>)
 800a40a:	651a      	str	r2, [r3, #80]	; 0x50
 800a40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40e:	4a0c      	ldr	r2, [pc, #48]	; (800a440 <prvInitialiseNewTask+0x124>)
 800a410:	655a      	str	r2, [r3, #84]	; 0x54
 800a412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a414:	4a0b      	ldr	r2, [pc, #44]	; (800a444 <prvInitialiseNewTask+0x128>)
 800a416:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	68f9      	ldr	r1, [r7, #12]
 800a41c:	69b8      	ldr	r0, [r7, #24]
 800a41e:	f001 f9d9 	bl	800b7d4 <pxPortInitialiseStack>
 800a422:	4602      	mov	r2, r0
 800a424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a426:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d002      	beq.n	800a434 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a432:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a434:	bf00      	nop
 800a436:	3720      	adds	r7, #32
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	20001fd8 	.word	0x20001fd8
 800a440:	20002040 	.word	0x20002040
 800a444:	200020a8 	.word	0x200020a8

0800a448 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a450:	f001 fab4 	bl	800b9bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a454:	4b2a      	ldr	r3, [pc, #168]	; (800a500 <prvAddNewTaskToReadyList+0xb8>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	3301      	adds	r3, #1
 800a45a:	4a29      	ldr	r2, [pc, #164]	; (800a500 <prvAddNewTaskToReadyList+0xb8>)
 800a45c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a45e:	4b29      	ldr	r3, [pc, #164]	; (800a504 <prvAddNewTaskToReadyList+0xbc>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d109      	bne.n	800a47a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a466:	4a27      	ldr	r2, [pc, #156]	; (800a504 <prvAddNewTaskToReadyList+0xbc>)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a46c:	4b24      	ldr	r3, [pc, #144]	; (800a500 <prvAddNewTaskToReadyList+0xb8>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d110      	bne.n	800a496 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a474:	f000 fe04 	bl	800b080 <prvInitialiseTaskLists>
 800a478:	e00d      	b.n	800a496 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a47a:	4b23      	ldr	r3, [pc, #140]	; (800a508 <prvAddNewTaskToReadyList+0xc0>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d109      	bne.n	800a496 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a482:	4b20      	ldr	r3, [pc, #128]	; (800a504 <prvAddNewTaskToReadyList+0xbc>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d802      	bhi.n	800a496 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a490:	4a1c      	ldr	r2, [pc, #112]	; (800a504 <prvAddNewTaskToReadyList+0xbc>)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a496:	4b1d      	ldr	r3, [pc, #116]	; (800a50c <prvAddNewTaskToReadyList+0xc4>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	3301      	adds	r3, #1
 800a49c:	4a1b      	ldr	r2, [pc, #108]	; (800a50c <prvAddNewTaskToReadyList+0xc4>)
 800a49e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	409a      	lsls	r2, r3
 800a4a8:	4b19      	ldr	r3, [pc, #100]	; (800a510 <prvAddNewTaskToReadyList+0xc8>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	4a18      	ldr	r2, [pc, #96]	; (800a510 <prvAddNewTaskToReadyList+0xc8>)
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	4413      	add	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4a15      	ldr	r2, [pc, #84]	; (800a514 <prvAddNewTaskToReadyList+0xcc>)
 800a4c0:	441a      	add	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	4610      	mov	r0, r2
 800a4ca:	f7ff f8be 	bl	800964a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a4ce:	f001 faa5 	bl	800ba1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a4d2:	4b0d      	ldr	r3, [pc, #52]	; (800a508 <prvAddNewTaskToReadyList+0xc0>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00e      	beq.n	800a4f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a4da:	4b0a      	ldr	r3, [pc, #40]	; (800a504 <prvAddNewTaskToReadyList+0xbc>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d207      	bcs.n	800a4f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a4e8:	4b0b      	ldr	r3, [pc, #44]	; (800a518 <prvAddNewTaskToReadyList+0xd0>)
 800a4ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4f8:	bf00      	nop
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	20001384 	.word	0x20001384
 800a504:	20001284 	.word	0x20001284
 800a508:	20001390 	.word	0x20001390
 800a50c:	200013a0 	.word	0x200013a0
 800a510:	2000138c 	.word	0x2000138c
 800a514:	20001288 	.word	0x20001288
 800a518:	e000ed04 	.word	0xe000ed04

0800a51c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b08a      	sub	sp, #40	; 0x28
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a526:	2300      	movs	r3, #0
 800a528:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10a      	bne.n	800a546 <vTaskDelayUntil+0x2a>
	__asm volatile
 800a530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a534:	f383 8811 	msr	BASEPRI, r3
 800a538:	f3bf 8f6f 	isb	sy
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	617b      	str	r3, [r7, #20]
}
 800a542:	bf00      	nop
 800a544:	e7fe      	b.n	800a544 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10a      	bne.n	800a562 <vTaskDelayUntil+0x46>
	__asm volatile
 800a54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	613b      	str	r3, [r7, #16]
}
 800a55e:	bf00      	nop
 800a560:	e7fe      	b.n	800a560 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a562:	4b2a      	ldr	r3, [pc, #168]	; (800a60c <vTaskDelayUntil+0xf0>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00a      	beq.n	800a580 <vTaskDelayUntil+0x64>
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	60fb      	str	r3, [r7, #12]
}
 800a57c:	bf00      	nop
 800a57e:	e7fe      	b.n	800a57e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a580:	f000 fa84 	bl	800aa8c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a584:	4b22      	ldr	r3, [pc, #136]	; (800a610 <vTaskDelayUntil+0xf4>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	4413      	add	r3, r2
 800a592:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6a3a      	ldr	r2, [r7, #32]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d20b      	bcs.n	800a5b6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	69fa      	ldr	r2, [r7, #28]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d211      	bcs.n	800a5cc <vTaskDelayUntil+0xb0>
 800a5a8:	69fa      	ldr	r2, [r7, #28]
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d90d      	bls.n	800a5cc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	627b      	str	r3, [r7, #36]	; 0x24
 800a5b4:	e00a      	b.n	800a5cc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	69fa      	ldr	r2, [r7, #28]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d303      	bcc.n	800a5c8 <vTaskDelayUntil+0xac>
 800a5c0:	69fa      	ldr	r2, [r7, #28]
 800a5c2:	6a3b      	ldr	r3, [r7, #32]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d901      	bls.n	800a5cc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	69fa      	ldr	r2, [r7, #28]
 800a5d0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d006      	beq.n	800a5e6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a5d8:	69fa      	ldr	r2, [r7, #28]
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	2100      	movs	r1, #0
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f001 f891 	bl	800b708 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a5e6:	f000 fa5f 	bl	800aaa8 <xTaskResumeAll>
 800a5ea:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d107      	bne.n	800a602 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a5f2:	4b08      	ldr	r3, [pc, #32]	; (800a614 <vTaskDelayUntil+0xf8>)
 800a5f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5f8:	601a      	str	r2, [r3, #0]
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a602:	bf00      	nop
 800a604:	3728      	adds	r7, #40	; 0x28
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	200013ac 	.word	0x200013ac
 800a610:	20001388 	.word	0x20001388
 800a614:	e000ed04 	.word	0xe000ed04

0800a618 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a620:	2300      	movs	r3, #0
 800a622:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d017      	beq.n	800a65a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a62a:	4b13      	ldr	r3, [pc, #76]	; (800a678 <vTaskDelay+0x60>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00a      	beq.n	800a648 <vTaskDelay+0x30>
	__asm volatile
 800a632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	60bb      	str	r3, [r7, #8]
}
 800a644:	bf00      	nop
 800a646:	e7fe      	b.n	800a646 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a648:	f000 fa20 	bl	800aa8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a64c:	2100      	movs	r1, #0
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f001 f85a 	bl	800b708 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a654:	f000 fa28 	bl	800aaa8 <xTaskResumeAll>
 800a658:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d107      	bne.n	800a670 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a660:	4b06      	ldr	r3, [pc, #24]	; (800a67c <vTaskDelay+0x64>)
 800a662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a666:	601a      	str	r2, [r3, #0]
 800a668:	f3bf 8f4f 	dsb	sy
 800a66c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a670:	bf00      	nop
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	200013ac 	.word	0x200013ac
 800a67c:	e000ed04 	.word	0xe000ed04

0800a680 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a688:	f001 f998 	bl	800b9bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d102      	bne.n	800a698 <vTaskSuspend+0x18>
 800a692:	4b3c      	ldr	r3, [pc, #240]	; (800a784 <vTaskSuspend+0x104>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	e000      	b.n	800a69a <vTaskSuspend+0x1a>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	3304      	adds	r3, #4
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff f82d 	bl	8009700 <uxListRemove>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d115      	bne.n	800a6d8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b0:	4935      	ldr	r1, [pc, #212]	; (800a788 <vTaskSuspend+0x108>)
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	440b      	add	r3, r1
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10a      	bne.n	800a6d8 <vTaskSuspend+0x58>
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6cc:	43da      	mvns	r2, r3
 800a6ce:	4b2f      	ldr	r3, [pc, #188]	; (800a78c <vTaskSuspend+0x10c>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	4a2d      	ldr	r2, [pc, #180]	; (800a78c <vTaskSuspend+0x10c>)
 800a6d6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d004      	beq.n	800a6ea <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	3318      	adds	r3, #24
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7ff f80b 	bl	8009700 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3304      	adds	r3, #4
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	4827      	ldr	r0, [pc, #156]	; (800a790 <vTaskSuspend+0x110>)
 800a6f2:	f7fe ffaa 	bl	800964a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d103      	bne.n	800a70a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a70a:	f001 f987 	bl	800ba1c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a70e:	4b21      	ldr	r3, [pc, #132]	; (800a794 <vTaskSuspend+0x114>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d005      	beq.n	800a722 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a716:	f001 f951 	bl	800b9bc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a71a:	f000 fd53 	bl	800b1c4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a71e:	f001 f97d 	bl	800ba1c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a722:	4b18      	ldr	r3, [pc, #96]	; (800a784 <vTaskSuspend+0x104>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d127      	bne.n	800a77c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800a72c:	4b19      	ldr	r3, [pc, #100]	; (800a794 <vTaskSuspend+0x114>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d017      	beq.n	800a764 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a734:	4b18      	ldr	r3, [pc, #96]	; (800a798 <vTaskSuspend+0x118>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00a      	beq.n	800a752 <vTaskSuspend+0xd2>
	__asm volatile
 800a73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a740:	f383 8811 	msr	BASEPRI, r3
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	60bb      	str	r3, [r7, #8]
}
 800a74e:	bf00      	nop
 800a750:	e7fe      	b.n	800a750 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800a752:	4b12      	ldr	r3, [pc, #72]	; (800a79c <vTaskSuspend+0x11c>)
 800a754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a762:	e00b      	b.n	800a77c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800a764:	4b0a      	ldr	r3, [pc, #40]	; (800a790 <vTaskSuspend+0x110>)
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	4b0d      	ldr	r3, [pc, #52]	; (800a7a0 <vTaskSuspend+0x120>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d103      	bne.n	800a778 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800a770:	4b04      	ldr	r3, [pc, #16]	; (800a784 <vTaskSuspend+0x104>)
 800a772:	2200      	movs	r2, #0
 800a774:	601a      	str	r2, [r3, #0]
	}
 800a776:	e001      	b.n	800a77c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800a778:	f000 fafe 	bl	800ad78 <vTaskSwitchContext>
	}
 800a77c:	bf00      	nop
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	20001284 	.word	0x20001284
 800a788:	20001288 	.word	0x20001288
 800a78c:	2000138c 	.word	0x2000138c
 800a790:	20001370 	.word	0x20001370
 800a794:	20001390 	.word	0x20001390
 800a798:	200013ac 	.word	0x200013ac
 800a79c:	e000ed04 	.word	0xe000ed04
 800a7a0:	20001384 	.word	0x20001384

0800a7a4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b087      	sub	sp, #28
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10a      	bne.n	800a7d0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	60fb      	str	r3, [r7, #12]
}
 800a7cc:	bf00      	nop
 800a7ce:	e7fe      	b.n	800a7ce <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	4a0e      	ldr	r2, [pc, #56]	; (800a810 <prvTaskIsTaskSuspended+0x6c>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d101      	bne.n	800a7de <prvTaskIsTaskSuspended+0x3a>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e000      	b.n	800a7e0 <prvTaskIsTaskSuspended+0x3c>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00f      	beq.n	800a804 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e8:	4a0a      	ldr	r2, [pc, #40]	; (800a814 <prvTaskIsTaskSuspended+0x70>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d00a      	beq.n	800a804 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d101      	bne.n	800a7fa <prvTaskIsTaskSuspended+0x56>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e000      	b.n	800a7fc <prvTaskIsTaskSuspended+0x58>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800a800:	2301      	movs	r3, #1
 800a802:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a804:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a806:	4618      	mov	r0, r3
 800a808:	371c      	adds	r7, #28
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bc80      	pop	{r7}
 800a80e:	4770      	bx	lr
 800a810:	20001370 	.word	0x20001370
 800a814:	20001344 	.word	0x20001344

0800a818 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10a      	bne.n	800a840 <vTaskResume+0x28>
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	60bb      	str	r3, [r7, #8]
}
 800a83c:	bf00      	nop
 800a83e:	e7fe      	b.n	800a83e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d039      	beq.n	800a8ba <vTaskResume+0xa2>
 800a846:	4b1f      	ldr	r3, [pc, #124]	; (800a8c4 <vTaskResume+0xac>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d034      	beq.n	800a8ba <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800a850:	f001 f8b4 	bl	800b9bc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f7ff ffa5 	bl	800a7a4 <prvTaskIsTaskSuspended>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d02a      	beq.n	800a8b6 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	3304      	adds	r3, #4
 800a864:	4618      	mov	r0, r3
 800a866:	f7fe ff4b 	bl	8009700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86e:	2201      	movs	r2, #1
 800a870:	409a      	lsls	r2, r3
 800a872:	4b15      	ldr	r3, [pc, #84]	; (800a8c8 <vTaskResume+0xb0>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4313      	orrs	r3, r2
 800a878:	4a13      	ldr	r2, [pc, #76]	; (800a8c8 <vTaskResume+0xb0>)
 800a87a:	6013      	str	r3, [r2, #0]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a880:	4613      	mov	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4a10      	ldr	r2, [pc, #64]	; (800a8cc <vTaskResume+0xb4>)
 800a88a:	441a      	add	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	3304      	adds	r3, #4
 800a890:	4619      	mov	r1, r3
 800a892:	4610      	mov	r0, r2
 800a894:	f7fe fed9 	bl	800964a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a89c:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <vTaskResume+0xac>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d307      	bcc.n	800a8b6 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a8a6:	4b0a      	ldr	r3, [pc, #40]	; (800a8d0 <vTaskResume+0xb8>)
 800a8a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a8b6:	f001 f8b1 	bl	800ba1c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8ba:	bf00      	nop
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20001284 	.word	0x20001284
 800a8c8:	2000138c 	.word	0x2000138c
 800a8cc:	20001288 	.word	0x20001288
 800a8d0:	e000ed04 	.word	0xe000ed04

0800a8d4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b08a      	sub	sp, #40	; 0x28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10a      	bne.n	800a900 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800a8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ee:	f383 8811 	msr	BASEPRI, r3
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	61bb      	str	r3, [r7, #24]
}
 800a8fc:	bf00      	nop
 800a8fe:	e7fe      	b.n	800a8fe <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a900:	f001 f91e 	bl	800bb40 <vPortValidateInterruptPriority>
	__asm volatile
 800a904:	f3ef 8211 	mrs	r2, BASEPRI
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	617a      	str	r2, [r7, #20]
 800a91a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a91c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a91e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a920:	6a38      	ldr	r0, [r7, #32]
 800a922:	f7ff ff3f 	bl	800a7a4 <prvTaskIsTaskSuspended>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d02f      	beq.n	800a98c <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a92c:	4b1d      	ldr	r3, [pc, #116]	; (800a9a4 <xTaskResumeFromISR+0xd0>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d125      	bne.n	800a980 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a934:	6a3b      	ldr	r3, [r7, #32]
 800a936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a938:	4b1b      	ldr	r3, [pc, #108]	; (800a9a8 <xTaskResumeFromISR+0xd4>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93e:	429a      	cmp	r2, r3
 800a940:	d301      	bcc.n	800a946 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800a942:	2301      	movs	r3, #1
 800a944:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a946:	6a3b      	ldr	r3, [r7, #32]
 800a948:	3304      	adds	r3, #4
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fe fed8 	bl	8009700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a954:	2201      	movs	r2, #1
 800a956:	409a      	lsls	r2, r3
 800a958:	4b14      	ldr	r3, [pc, #80]	; (800a9ac <xTaskResumeFromISR+0xd8>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	4a13      	ldr	r2, [pc, #76]	; (800a9ac <xTaskResumeFromISR+0xd8>)
 800a960:	6013      	str	r3, [r2, #0]
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a966:	4613      	mov	r3, r2
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	4413      	add	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4a10      	ldr	r2, [pc, #64]	; (800a9b0 <xTaskResumeFromISR+0xdc>)
 800a970:	441a      	add	r2, r3
 800a972:	6a3b      	ldr	r3, [r7, #32]
 800a974:	3304      	adds	r3, #4
 800a976:	4619      	mov	r1, r3
 800a978:	4610      	mov	r0, r2
 800a97a:	f7fe fe66 	bl	800964a <vListInsertEnd>
 800a97e:	e005      	b.n	800a98c <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	3318      	adds	r3, #24
 800a984:	4619      	mov	r1, r3
 800a986:	480b      	ldr	r0, [pc, #44]	; (800a9b4 <xTaskResumeFromISR+0xe0>)
 800a988:	f7fe fe5f 	bl	800964a <vListInsertEnd>
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f383 8811 	msr	BASEPRI, r3
}
 800a996:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800a998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3728      	adds	r7, #40	; 0x28
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	200013ac 	.word	0x200013ac
 800a9a8:	20001284 	.word	0x20001284
 800a9ac:	2000138c 	.word	0x2000138c
 800a9b0:	20001288 	.word	0x20001288
 800a9b4:	20001344 	.word	0x20001344

0800a9b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b08a      	sub	sp, #40	; 0x28
 800a9bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9c6:	463a      	mov	r2, r7
 800a9c8:	1d39      	adds	r1, r7, #4
 800a9ca:	f107 0308 	add.w	r3, r7, #8
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7f7 f9e0 	bl	8001d94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	9202      	str	r2, [sp, #8]
 800a9dc:	9301      	str	r3, [sp, #4]
 800a9de:	2300      	movs	r3, #0
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	460a      	mov	r2, r1
 800a9e6:	4921      	ldr	r1, [pc, #132]	; (800aa6c <vTaskStartScheduler+0xb4>)
 800a9e8:	4821      	ldr	r0, [pc, #132]	; (800aa70 <vTaskStartScheduler+0xb8>)
 800a9ea:	f7ff fbf5 	bl	800a1d8 <xTaskCreateStatic>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	4a20      	ldr	r2, [pc, #128]	; (800aa74 <vTaskStartScheduler+0xbc>)
 800a9f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9f4:	4b1f      	ldr	r3, [pc, #124]	; (800aa74 <vTaskStartScheduler+0xbc>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	617b      	str	r3, [r7, #20]
 800aa00:	e001      	b.n	800aa06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa02:	2300      	movs	r3, #0
 800aa04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d11b      	bne.n	800aa44 <vTaskStartScheduler+0x8c>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	613b      	str	r3, [r7, #16]
}
 800aa1e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa20:	4b15      	ldr	r3, [pc, #84]	; (800aa78 <vTaskStartScheduler+0xc0>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	334c      	adds	r3, #76	; 0x4c
 800aa26:	4a15      	ldr	r2, [pc, #84]	; (800aa7c <vTaskStartScheduler+0xc4>)
 800aa28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa2a:	4b15      	ldr	r3, [pc, #84]	; (800aa80 <vTaskStartScheduler+0xc8>)
 800aa2c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa32:	4b14      	ldr	r3, [pc, #80]	; (800aa84 <vTaskStartScheduler+0xcc>)
 800aa34:	2201      	movs	r2, #1
 800aa36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800aa38:	4b13      	ldr	r3, [pc, #76]	; (800aa88 <vTaskStartScheduler+0xd0>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa3e:	f000 ff4b 	bl	800b8d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa42:	e00e      	b.n	800aa62 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4a:	d10a      	bne.n	800aa62 <vTaskStartScheduler+0xaa>
	__asm volatile
 800aa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa50:	f383 8811 	msr	BASEPRI, r3
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	60fb      	str	r3, [r7, #12]
}
 800aa5e:	bf00      	nop
 800aa60:	e7fe      	b.n	800aa60 <vTaskStartScheduler+0xa8>
}
 800aa62:	bf00      	nop
 800aa64:	3718      	adds	r7, #24
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	0800cd54 	.word	0x0800cd54
 800aa70:	0800b051 	.word	0x0800b051
 800aa74:	200013a8 	.word	0x200013a8
 800aa78:	20001284 	.word	0x20001284
 800aa7c:	2000025c 	.word	0x2000025c
 800aa80:	200013a4 	.word	0x200013a4
 800aa84:	20001390 	.word	0x20001390
 800aa88:	20001388 	.word	0x20001388

0800aa8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800aa90:	4b04      	ldr	r3, [pc, #16]	; (800aaa4 <vTaskSuspendAll+0x18>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3301      	adds	r3, #1
 800aa96:	4a03      	ldr	r2, [pc, #12]	; (800aaa4 <vTaskSuspendAll+0x18>)
 800aa98:	6013      	str	r3, [r2, #0]
}
 800aa9a:	bf00      	nop
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bc80      	pop	{r7}
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	200013ac 	.word	0x200013ac

0800aaa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aaae:	2300      	movs	r3, #0
 800aab0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aab2:	2300      	movs	r3, #0
 800aab4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aab6:	4b41      	ldr	r3, [pc, #260]	; (800abbc <xTaskResumeAll+0x114>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10a      	bne.n	800aad4 <xTaskResumeAll+0x2c>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	603b      	str	r3, [r7, #0]
}
 800aad0:	bf00      	nop
 800aad2:	e7fe      	b.n	800aad2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aad4:	f000 ff72 	bl	800b9bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aad8:	4b38      	ldr	r3, [pc, #224]	; (800abbc <xTaskResumeAll+0x114>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	3b01      	subs	r3, #1
 800aade:	4a37      	ldr	r2, [pc, #220]	; (800abbc <xTaskResumeAll+0x114>)
 800aae0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aae2:	4b36      	ldr	r3, [pc, #216]	; (800abbc <xTaskResumeAll+0x114>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d161      	bne.n	800abae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aaea:	4b35      	ldr	r3, [pc, #212]	; (800abc0 <xTaskResumeAll+0x118>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d05d      	beq.n	800abae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aaf2:	e02e      	b.n	800ab52 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800aaf4:	4b33      	ldr	r3, [pc, #204]	; (800abc4 <xTaskResumeAll+0x11c>)
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	3318      	adds	r3, #24
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fe fdfd 	bl	8009700 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe fdf8 	bl	8009700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab14:	2201      	movs	r2, #1
 800ab16:	409a      	lsls	r2, r3
 800ab18:	4b2b      	ldr	r3, [pc, #172]	; (800abc8 <xTaskResumeAll+0x120>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	4a2a      	ldr	r2, [pc, #168]	; (800abc8 <xTaskResumeAll+0x120>)
 800ab20:	6013      	str	r3, [r2, #0]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab26:	4613      	mov	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	4413      	add	r3, r2
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	4a27      	ldr	r2, [pc, #156]	; (800abcc <xTaskResumeAll+0x124>)
 800ab30:	441a      	add	r2, r3
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	3304      	adds	r3, #4
 800ab36:	4619      	mov	r1, r3
 800ab38:	4610      	mov	r0, r2
 800ab3a:	f7fe fd86 	bl	800964a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab42:	4b23      	ldr	r3, [pc, #140]	; (800abd0 <xTaskResumeAll+0x128>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d302      	bcc.n	800ab52 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ab4c:	4b21      	ldr	r3, [pc, #132]	; (800abd4 <xTaskResumeAll+0x12c>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab52:	4b1c      	ldr	r3, [pc, #112]	; (800abc4 <xTaskResumeAll+0x11c>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1cc      	bne.n	800aaf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab60:	f000 fb30 	bl	800b1c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ab64:	4b1c      	ldr	r3, [pc, #112]	; (800abd8 <xTaskResumeAll+0x130>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d010      	beq.n	800ab92 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab70:	f000 f844 	bl	800abfc <xTaskIncrementTick>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d002      	beq.n	800ab80 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ab7a:	4b16      	ldr	r3, [pc, #88]	; (800abd4 <xTaskResumeAll+0x12c>)
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	3b01      	subs	r3, #1
 800ab84:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1f1      	bne.n	800ab70 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800ab8c:	4b12      	ldr	r3, [pc, #72]	; (800abd8 <xTaskResumeAll+0x130>)
 800ab8e:	2200      	movs	r2, #0
 800ab90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab92:	4b10      	ldr	r3, [pc, #64]	; (800abd4 <xTaskResumeAll+0x12c>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d009      	beq.n	800abae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab9e:	4b0f      	ldr	r3, [pc, #60]	; (800abdc <xTaskResumeAll+0x134>)
 800aba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba4:	601a      	str	r2, [r3, #0]
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abae:	f000 ff35 	bl	800ba1c <vPortExitCritical>

	return xAlreadyYielded;
 800abb2:	68bb      	ldr	r3, [r7, #8]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3710      	adds	r7, #16
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	200013ac 	.word	0x200013ac
 800abc0:	20001384 	.word	0x20001384
 800abc4:	20001344 	.word	0x20001344
 800abc8:	2000138c 	.word	0x2000138c
 800abcc:	20001288 	.word	0x20001288
 800abd0:	20001284 	.word	0x20001284
 800abd4:	20001398 	.word	0x20001398
 800abd8:	20001394 	.word	0x20001394
 800abdc:	e000ed04 	.word	0xe000ed04

0800abe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800abe6:	4b04      	ldr	r3, [pc, #16]	; (800abf8 <xTaskGetTickCount+0x18>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800abec:	687b      	ldr	r3, [r7, #4]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	370c      	adds	r7, #12
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bc80      	pop	{r7}
 800abf6:	4770      	bx	lr
 800abf8:	20001388 	.word	0x20001388

0800abfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac02:	2300      	movs	r3, #0
 800ac04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac06:	4b51      	ldr	r3, [pc, #324]	; (800ad4c <xTaskIncrementTick+0x150>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f040 808d 	bne.w	800ad2a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac10:	4b4f      	ldr	r3, [pc, #316]	; (800ad50 <xTaskIncrementTick+0x154>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	3301      	adds	r3, #1
 800ac16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac18:	4a4d      	ldr	r2, [pc, #308]	; (800ad50 <xTaskIncrementTick+0x154>)
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d120      	bne.n	800ac66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac24:	4b4b      	ldr	r3, [pc, #300]	; (800ad54 <xTaskIncrementTick+0x158>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00a      	beq.n	800ac44 <xTaskIncrementTick+0x48>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	603b      	str	r3, [r7, #0]
}
 800ac40:	bf00      	nop
 800ac42:	e7fe      	b.n	800ac42 <xTaskIncrementTick+0x46>
 800ac44:	4b43      	ldr	r3, [pc, #268]	; (800ad54 <xTaskIncrementTick+0x158>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	60fb      	str	r3, [r7, #12]
 800ac4a:	4b43      	ldr	r3, [pc, #268]	; (800ad58 <xTaskIncrementTick+0x15c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a41      	ldr	r2, [pc, #260]	; (800ad54 <xTaskIncrementTick+0x158>)
 800ac50:	6013      	str	r3, [r2, #0]
 800ac52:	4a41      	ldr	r2, [pc, #260]	; (800ad58 <xTaskIncrementTick+0x15c>)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	4b40      	ldr	r3, [pc, #256]	; (800ad5c <xTaskIncrementTick+0x160>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	4a3f      	ldr	r2, [pc, #252]	; (800ad5c <xTaskIncrementTick+0x160>)
 800ac60:	6013      	str	r3, [r2, #0]
 800ac62:	f000 faaf 	bl	800b1c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac66:	4b3e      	ldr	r3, [pc, #248]	; (800ad60 <xTaskIncrementTick+0x164>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	693a      	ldr	r2, [r7, #16]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d34d      	bcc.n	800ad0c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac70:	4b38      	ldr	r3, [pc, #224]	; (800ad54 <xTaskIncrementTick+0x158>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d101      	bne.n	800ac7e <xTaskIncrementTick+0x82>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e000      	b.n	800ac80 <xTaskIncrementTick+0x84>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d004      	beq.n	800ac8e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac84:	4b36      	ldr	r3, [pc, #216]	; (800ad60 <xTaskIncrementTick+0x164>)
 800ac86:	f04f 32ff 	mov.w	r2, #4294967295
 800ac8a:	601a      	str	r2, [r3, #0]
					break;
 800ac8c:	e03e      	b.n	800ad0c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ac8e:	4b31      	ldr	r3, [pc, #196]	; (800ad54 <xTaskIncrementTick+0x158>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac9e:	693a      	ldr	r2, [r7, #16]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d203      	bcs.n	800acae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aca6:	4a2e      	ldr	r2, [pc, #184]	; (800ad60 <xTaskIncrementTick+0x164>)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6013      	str	r3, [r2, #0]
						break;
 800acac:	e02e      	b.n	800ad0c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	3304      	adds	r3, #4
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fe fd24 	bl	8009700 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d004      	beq.n	800acca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	3318      	adds	r3, #24
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7fe fd1b 	bl	8009700 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acce:	2201      	movs	r2, #1
 800acd0:	409a      	lsls	r2, r3
 800acd2:	4b24      	ldr	r3, [pc, #144]	; (800ad64 <xTaskIncrementTick+0x168>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	4a22      	ldr	r2, [pc, #136]	; (800ad64 <xTaskIncrementTick+0x168>)
 800acda:	6013      	str	r3, [r2, #0]
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace0:	4613      	mov	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4a1f      	ldr	r2, [pc, #124]	; (800ad68 <xTaskIncrementTick+0x16c>)
 800acea:	441a      	add	r2, r3
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	3304      	adds	r3, #4
 800acf0:	4619      	mov	r1, r3
 800acf2:	4610      	mov	r0, r2
 800acf4:	f7fe fca9 	bl	800964a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acfc:	4b1b      	ldr	r3, [pc, #108]	; (800ad6c <xTaskIncrementTick+0x170>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d3b4      	bcc.n	800ac70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ad06:	2301      	movs	r3, #1
 800ad08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad0a:	e7b1      	b.n	800ac70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad0c:	4b17      	ldr	r3, [pc, #92]	; (800ad6c <xTaskIncrementTick+0x170>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad12:	4915      	ldr	r1, [pc, #84]	; (800ad68 <xTaskIncrementTick+0x16c>)
 800ad14:	4613      	mov	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	4413      	add	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	440b      	add	r3, r1
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d907      	bls.n	800ad34 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800ad24:	2301      	movs	r3, #1
 800ad26:	617b      	str	r3, [r7, #20]
 800ad28:	e004      	b.n	800ad34 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ad2a:	4b11      	ldr	r3, [pc, #68]	; (800ad70 <xTaskIncrementTick+0x174>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	4a0f      	ldr	r2, [pc, #60]	; (800ad70 <xTaskIncrementTick+0x174>)
 800ad32:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ad34:	4b0f      	ldr	r3, [pc, #60]	; (800ad74 <xTaskIncrementTick+0x178>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d001      	beq.n	800ad40 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ad40:	697b      	ldr	r3, [r7, #20]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3718      	adds	r7, #24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	200013ac 	.word	0x200013ac
 800ad50:	20001388 	.word	0x20001388
 800ad54:	2000133c 	.word	0x2000133c
 800ad58:	20001340 	.word	0x20001340
 800ad5c:	2000139c 	.word	0x2000139c
 800ad60:	200013a4 	.word	0x200013a4
 800ad64:	2000138c 	.word	0x2000138c
 800ad68:	20001288 	.word	0x20001288
 800ad6c:	20001284 	.word	0x20001284
 800ad70:	20001394 	.word	0x20001394
 800ad74:	20001398 	.word	0x20001398

0800ad78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad7e:	4b29      	ldr	r3, [pc, #164]	; (800ae24 <vTaskSwitchContext+0xac>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d003      	beq.n	800ad8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad86:	4b28      	ldr	r3, [pc, #160]	; (800ae28 <vTaskSwitchContext+0xb0>)
 800ad88:	2201      	movs	r2, #1
 800ad8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad8c:	e044      	b.n	800ae18 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800ad8e:	4b26      	ldr	r3, [pc, #152]	; (800ae28 <vTaskSwitchContext+0xb0>)
 800ad90:	2200      	movs	r2, #0
 800ad92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ad94:	4b25      	ldr	r3, [pc, #148]	; (800ae2c <vTaskSwitchContext+0xb4>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	fab3 f383 	clz	r3, r3
 800ada0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ada2:	7afb      	ldrb	r3, [r7, #11]
 800ada4:	f1c3 031f 	rsb	r3, r3, #31
 800ada8:	617b      	str	r3, [r7, #20]
 800adaa:	4921      	ldr	r1, [pc, #132]	; (800ae30 <vTaskSwitchContext+0xb8>)
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	4613      	mov	r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4413      	add	r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	440b      	add	r3, r1
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10a      	bne.n	800add4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	607b      	str	r3, [r7, #4]
}
 800add0:	bf00      	nop
 800add2:	e7fe      	b.n	800add2 <vTaskSwitchContext+0x5a>
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	4613      	mov	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4a14      	ldr	r2, [pc, #80]	; (800ae30 <vTaskSwitchContext+0xb8>)
 800ade0:	4413      	add	r3, r2
 800ade2:	613b      	str	r3, [r7, #16]
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	685a      	ldr	r2, [r3, #4]
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	605a      	str	r2, [r3, #4]
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	685a      	ldr	r2, [r3, #4]
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	3308      	adds	r3, #8
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d104      	bne.n	800ae04 <vTaskSwitchContext+0x8c>
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	605a      	str	r2, [r3, #4]
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	4a0a      	ldr	r2, [pc, #40]	; (800ae34 <vTaskSwitchContext+0xbc>)
 800ae0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae0e:	4b09      	ldr	r3, [pc, #36]	; (800ae34 <vTaskSwitchContext+0xbc>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	334c      	adds	r3, #76	; 0x4c
 800ae14:	4a08      	ldr	r2, [pc, #32]	; (800ae38 <vTaskSwitchContext+0xc0>)
 800ae16:	6013      	str	r3, [r2, #0]
}
 800ae18:	bf00      	nop
 800ae1a:	371c      	adds	r7, #28
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bc80      	pop	{r7}
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	200013ac 	.word	0x200013ac
 800ae28:	20001398 	.word	0x20001398
 800ae2c:	2000138c 	.word	0x2000138c
 800ae30:	20001288 	.word	0x20001288
 800ae34:	20001284 	.word	0x20001284
 800ae38:	2000025c 	.word	0x2000025c

0800ae3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d10a      	bne.n	800ae62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ae4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae50:	f383 8811 	msr	BASEPRI, r3
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	60fb      	str	r3, [r7, #12]
}
 800ae5e:	bf00      	nop
 800ae60:	e7fe      	b.n	800ae60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae62:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <vTaskPlaceOnEventList+0x44>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	3318      	adds	r3, #24
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f7fe fc10 	bl	8009690 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae70:	2101      	movs	r1, #1
 800ae72:	6838      	ldr	r0, [r7, #0]
 800ae74:	f000 fc48 	bl	800b708 <prvAddCurrentTaskToDelayedList>
}
 800ae78:	bf00      	nop
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	20001284 	.word	0x20001284

0800ae84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10a      	bne.n	800aeb0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ae9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9e:	f383 8811 	msr	BASEPRI, r3
 800aea2:	f3bf 8f6f 	isb	sy
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	60fb      	str	r3, [r7, #12]
}
 800aeac:	bf00      	nop
 800aeae:	e7fe      	b.n	800aeae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	3318      	adds	r3, #24
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fe fc23 	bl	8009700 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeba:	4b1d      	ldr	r3, [pc, #116]	; (800af30 <xTaskRemoveFromEventList+0xac>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d11c      	bne.n	800aefc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	3304      	adds	r3, #4
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fc1a 	bl	8009700 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed0:	2201      	movs	r2, #1
 800aed2:	409a      	lsls	r2, r3
 800aed4:	4b17      	ldr	r3, [pc, #92]	; (800af34 <xTaskRemoveFromEventList+0xb0>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	4a16      	ldr	r2, [pc, #88]	; (800af34 <xTaskRemoveFromEventList+0xb0>)
 800aedc:	6013      	str	r3, [r2, #0]
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee2:	4613      	mov	r3, r2
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	4413      	add	r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4a13      	ldr	r2, [pc, #76]	; (800af38 <xTaskRemoveFromEventList+0xb4>)
 800aeec:	441a      	add	r2, r3
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	3304      	adds	r3, #4
 800aef2:	4619      	mov	r1, r3
 800aef4:	4610      	mov	r0, r2
 800aef6:	f7fe fba8 	bl	800964a <vListInsertEnd>
 800aefa:	e005      	b.n	800af08 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	3318      	adds	r3, #24
 800af00:	4619      	mov	r1, r3
 800af02:	480e      	ldr	r0, [pc, #56]	; (800af3c <xTaskRemoveFromEventList+0xb8>)
 800af04:	f7fe fba1 	bl	800964a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af0c:	4b0c      	ldr	r3, [pc, #48]	; (800af40 <xTaskRemoveFromEventList+0xbc>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af12:	429a      	cmp	r2, r3
 800af14:	d905      	bls.n	800af22 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af16:	2301      	movs	r3, #1
 800af18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af1a:	4b0a      	ldr	r3, [pc, #40]	; (800af44 <xTaskRemoveFromEventList+0xc0>)
 800af1c:	2201      	movs	r2, #1
 800af1e:	601a      	str	r2, [r3, #0]
 800af20:	e001      	b.n	800af26 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800af22:	2300      	movs	r3, #0
 800af24:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800af26:	697b      	ldr	r3, [r7, #20]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3718      	adds	r7, #24
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	200013ac 	.word	0x200013ac
 800af34:	2000138c 	.word	0x2000138c
 800af38:	20001288 	.word	0x20001288
 800af3c:	20001344 	.word	0x20001344
 800af40:	20001284 	.word	0x20001284
 800af44:	20001398 	.word	0x20001398

0800af48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af50:	4b06      	ldr	r3, [pc, #24]	; (800af6c <vTaskInternalSetTimeOutState+0x24>)
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af58:	4b05      	ldr	r3, [pc, #20]	; (800af70 <vTaskInternalSetTimeOutState+0x28>)
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	605a      	str	r2, [r3, #4]
}
 800af60:	bf00      	nop
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	bc80      	pop	{r7}
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	2000139c 	.word	0x2000139c
 800af70:	20001388 	.word	0x20001388

0800af74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10a      	bne.n	800af9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800af84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	613b      	str	r3, [r7, #16]
}
 800af96:	bf00      	nop
 800af98:	e7fe      	b.n	800af98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10a      	bne.n	800afb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	60fb      	str	r3, [r7, #12]
}
 800afb2:	bf00      	nop
 800afb4:	e7fe      	b.n	800afb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800afb6:	f000 fd01 	bl	800b9bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800afba:	4b1d      	ldr	r3, [pc, #116]	; (800b030 <xTaskCheckForTimeOut+0xbc>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	69ba      	ldr	r2, [r7, #24]
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd2:	d102      	bne.n	800afda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800afd4:	2300      	movs	r3, #0
 800afd6:	61fb      	str	r3, [r7, #28]
 800afd8:	e023      	b.n	800b022 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	4b15      	ldr	r3, [pc, #84]	; (800b034 <xTaskCheckForTimeOut+0xc0>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d007      	beq.n	800aff6 <xTaskCheckForTimeOut+0x82>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	69ba      	ldr	r2, [r7, #24]
 800afec:	429a      	cmp	r2, r3
 800afee:	d302      	bcc.n	800aff6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aff0:	2301      	movs	r3, #1
 800aff2:	61fb      	str	r3, [r7, #28]
 800aff4:	e015      	b.n	800b022 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	429a      	cmp	r2, r3
 800affe:	d20b      	bcs.n	800b018 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	1ad2      	subs	r2, r2, r3
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f7ff ff9b 	bl	800af48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b012:	2300      	movs	r3, #0
 800b014:	61fb      	str	r3, [r7, #28]
 800b016:	e004      	b.n	800b022 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	2200      	movs	r2, #0
 800b01c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b01e:	2301      	movs	r3, #1
 800b020:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b022:	f000 fcfb 	bl	800ba1c <vPortExitCritical>

	return xReturn;
 800b026:	69fb      	ldr	r3, [r7, #28]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3720      	adds	r7, #32
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	20001388 	.word	0x20001388
 800b034:	2000139c 	.word	0x2000139c

0800b038 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b038:	b480      	push	{r7}
 800b03a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b03c:	4b03      	ldr	r3, [pc, #12]	; (800b04c <vTaskMissedYield+0x14>)
 800b03e:	2201      	movs	r2, #1
 800b040:	601a      	str	r2, [r3, #0]
}
 800b042:	bf00      	nop
 800b044:	46bd      	mov	sp, r7
 800b046:	bc80      	pop	{r7}
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	20001398 	.word	0x20001398

0800b050 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b058:	f000 f852 	bl	800b100 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b05c:	4b06      	ldr	r3, [pc, #24]	; (800b078 <prvIdleTask+0x28>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b01      	cmp	r3, #1
 800b062:	d9f9      	bls.n	800b058 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b064:	4b05      	ldr	r3, [pc, #20]	; (800b07c <prvIdleTask+0x2c>)
 800b066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b074:	e7f0      	b.n	800b058 <prvIdleTask+0x8>
 800b076:	bf00      	nop
 800b078:	20001288 	.word	0x20001288
 800b07c:	e000ed04 	.word	0xe000ed04

0800b080 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b086:	2300      	movs	r3, #0
 800b088:	607b      	str	r3, [r7, #4]
 800b08a:	e00c      	b.n	800b0a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	4613      	mov	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4a12      	ldr	r2, [pc, #72]	; (800b0e0 <prvInitialiseTaskLists+0x60>)
 800b098:	4413      	add	r3, r2
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fe faaa 	bl	80095f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	607b      	str	r3, [r7, #4]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b06      	cmp	r3, #6
 800b0aa:	d9ef      	bls.n	800b08c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b0ac:	480d      	ldr	r0, [pc, #52]	; (800b0e4 <prvInitialiseTaskLists+0x64>)
 800b0ae:	f7fe faa1 	bl	80095f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b0b2:	480d      	ldr	r0, [pc, #52]	; (800b0e8 <prvInitialiseTaskLists+0x68>)
 800b0b4:	f7fe fa9e 	bl	80095f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b0b8:	480c      	ldr	r0, [pc, #48]	; (800b0ec <prvInitialiseTaskLists+0x6c>)
 800b0ba:	f7fe fa9b 	bl	80095f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b0be:	480c      	ldr	r0, [pc, #48]	; (800b0f0 <prvInitialiseTaskLists+0x70>)
 800b0c0:	f7fe fa98 	bl	80095f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b0c4:	480b      	ldr	r0, [pc, #44]	; (800b0f4 <prvInitialiseTaskLists+0x74>)
 800b0c6:	f7fe fa95 	bl	80095f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b0ca:	4b0b      	ldr	r3, [pc, #44]	; (800b0f8 <prvInitialiseTaskLists+0x78>)
 800b0cc:	4a05      	ldr	r2, [pc, #20]	; (800b0e4 <prvInitialiseTaskLists+0x64>)
 800b0ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b0d0:	4b0a      	ldr	r3, [pc, #40]	; (800b0fc <prvInitialiseTaskLists+0x7c>)
 800b0d2:	4a05      	ldr	r2, [pc, #20]	; (800b0e8 <prvInitialiseTaskLists+0x68>)
 800b0d4:	601a      	str	r2, [r3, #0]
}
 800b0d6:	bf00      	nop
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	20001288 	.word	0x20001288
 800b0e4:	20001314 	.word	0x20001314
 800b0e8:	20001328 	.word	0x20001328
 800b0ec:	20001344 	.word	0x20001344
 800b0f0:	20001358 	.word	0x20001358
 800b0f4:	20001370 	.word	0x20001370
 800b0f8:	2000133c 	.word	0x2000133c
 800b0fc:	20001340 	.word	0x20001340

0800b100 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b106:	e019      	b.n	800b13c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b108:	f000 fc58 	bl	800b9bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b10c:	4b10      	ldr	r3, [pc, #64]	; (800b150 <prvCheckTasksWaitingTermination+0x50>)
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	3304      	adds	r3, #4
 800b118:	4618      	mov	r0, r3
 800b11a:	f7fe faf1 	bl	8009700 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b11e:	4b0d      	ldr	r3, [pc, #52]	; (800b154 <prvCheckTasksWaitingTermination+0x54>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	3b01      	subs	r3, #1
 800b124:	4a0b      	ldr	r2, [pc, #44]	; (800b154 <prvCheckTasksWaitingTermination+0x54>)
 800b126:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b128:	4b0b      	ldr	r3, [pc, #44]	; (800b158 <prvCheckTasksWaitingTermination+0x58>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	4a0a      	ldr	r2, [pc, #40]	; (800b158 <prvCheckTasksWaitingTermination+0x58>)
 800b130:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b132:	f000 fc73 	bl	800ba1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f810 	bl	800b15c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b13c:	4b06      	ldr	r3, [pc, #24]	; (800b158 <prvCheckTasksWaitingTermination+0x58>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d1e1      	bne.n	800b108 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b144:	bf00      	nop
 800b146:	bf00      	nop
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	20001358 	.word	0x20001358
 800b154:	20001384 	.word	0x20001384
 800b158:	2000136c 	.word	0x2000136c

0800b15c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	334c      	adds	r3, #76	; 0x4c
 800b168:	4618      	mov	r0, r3
 800b16a:	f000 fff1 	bl	800c150 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b174:	2b00      	cmp	r3, #0
 800b176:	d108      	bne.n	800b18a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 fde1 	bl	800bd44 <vPortFree>
				vPortFree( pxTCB );
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fdde 	bl	800bd44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b188:	e018      	b.n	800b1bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b190:	2b01      	cmp	r3, #1
 800b192:	d103      	bne.n	800b19c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fdd5 	bl	800bd44 <vPortFree>
	}
 800b19a:	e00f      	b.n	800b1bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d00a      	beq.n	800b1bc <prvDeleteTCB+0x60>
	__asm volatile
 800b1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1aa:	f383 8811 	msr	BASEPRI, r3
 800b1ae:	f3bf 8f6f 	isb	sy
 800b1b2:	f3bf 8f4f 	dsb	sy
 800b1b6:	60fb      	str	r3, [r7, #12]
}
 800b1b8:	bf00      	nop
 800b1ba:	e7fe      	b.n	800b1ba <prvDeleteTCB+0x5e>
	}
 800b1bc:	bf00      	nop
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1ca:	4b0e      	ldr	r3, [pc, #56]	; (800b204 <prvResetNextTaskUnblockTime+0x40>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <prvResetNextTaskUnblockTime+0x14>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e000      	b.n	800b1da <prvResetNextTaskUnblockTime+0x16>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d004      	beq.n	800b1e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b1de:	4b0a      	ldr	r3, [pc, #40]	; (800b208 <prvResetNextTaskUnblockTime+0x44>)
 800b1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b1e6:	e008      	b.n	800b1fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b1e8:	4b06      	ldr	r3, [pc, #24]	; (800b204 <prvResetNextTaskUnblockTime+0x40>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	4a04      	ldr	r2, [pc, #16]	; (800b208 <prvResetNextTaskUnblockTime+0x44>)
 800b1f8:	6013      	str	r3, [r2, #0]
}
 800b1fa:	bf00      	nop
 800b1fc:	370c      	adds	r7, #12
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bc80      	pop	{r7}
 800b202:	4770      	bx	lr
 800b204:	2000133c 	.word	0x2000133c
 800b208:	200013a4 	.word	0x200013a4

0800b20c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b212:	4b0b      	ldr	r3, [pc, #44]	; (800b240 <xTaskGetSchedulerState+0x34>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d102      	bne.n	800b220 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b21a:	2301      	movs	r3, #1
 800b21c:	607b      	str	r3, [r7, #4]
 800b21e:	e008      	b.n	800b232 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b220:	4b08      	ldr	r3, [pc, #32]	; (800b244 <xTaskGetSchedulerState+0x38>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d102      	bne.n	800b22e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b228:	2302      	movs	r3, #2
 800b22a:	607b      	str	r3, [r7, #4]
 800b22c:	e001      	b.n	800b232 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b22e:	2300      	movs	r3, #0
 800b230:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b232:	687b      	ldr	r3, [r7, #4]
	}
 800b234:	4618      	mov	r0, r3
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	bc80      	pop	{r7}
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	20001390 	.word	0x20001390
 800b244:	200013ac 	.word	0x200013ac

0800b248 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b254:	2300      	movs	r3, #0
 800b256:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d06e      	beq.n	800b33c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b25e:	4b3a      	ldr	r3, [pc, #232]	; (800b348 <xTaskPriorityDisinherit+0x100>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	693a      	ldr	r2, [r7, #16]
 800b264:	429a      	cmp	r2, r3
 800b266:	d00a      	beq.n	800b27e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26c:	f383 8811 	msr	BASEPRI, r3
 800b270:	f3bf 8f6f 	isb	sy
 800b274:	f3bf 8f4f 	dsb	sy
 800b278:	60fb      	str	r3, [r7, #12]
}
 800b27a:	bf00      	nop
 800b27c:	e7fe      	b.n	800b27c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b282:	2b00      	cmp	r3, #0
 800b284:	d10a      	bne.n	800b29c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28a:	f383 8811 	msr	BASEPRI, r3
 800b28e:	f3bf 8f6f 	isb	sy
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	60bb      	str	r3, [r7, #8]
}
 800b298:	bf00      	nop
 800b29a:	e7fe      	b.n	800b29a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2a0:	1e5a      	subs	r2, r3, #1
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d044      	beq.n	800b33c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d140      	bne.n	800b33c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fe fa1e 	bl	8009700 <uxListRemove>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d115      	bne.n	800b2f6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ce:	491f      	ldr	r1, [pc, #124]	; (800b34c <xTaskPriorityDisinherit+0x104>)
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	4413      	add	r3, r2
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	440b      	add	r3, r1
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10a      	bne.n	800b2f6 <xTaskPriorityDisinherit+0xae>
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ea:	43da      	mvns	r2, r3
 800b2ec:	4b18      	ldr	r3, [pc, #96]	; (800b350 <xTaskPriorityDisinherit+0x108>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	4a17      	ldr	r2, [pc, #92]	; (800b350 <xTaskPriorityDisinherit+0x108>)
 800b2f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b302:	f1c3 0207 	rsb	r2, r3, #7
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30e:	2201      	movs	r2, #1
 800b310:	409a      	lsls	r2, r3
 800b312:	4b0f      	ldr	r3, [pc, #60]	; (800b350 <xTaskPriorityDisinherit+0x108>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4313      	orrs	r3, r2
 800b318:	4a0d      	ldr	r2, [pc, #52]	; (800b350 <xTaskPriorityDisinherit+0x108>)
 800b31a:	6013      	str	r3, [r2, #0]
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b320:	4613      	mov	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4413      	add	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	4a08      	ldr	r2, [pc, #32]	; (800b34c <xTaskPriorityDisinherit+0x104>)
 800b32a:	441a      	add	r2, r3
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	3304      	adds	r3, #4
 800b330:	4619      	mov	r1, r3
 800b332:	4610      	mov	r0, r2
 800b334:	f7fe f989 	bl	800964a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b338:	2301      	movs	r3, #1
 800b33a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b33c:	697b      	ldr	r3, [r7, #20]
	}
 800b33e:	4618      	mov	r0, r3
 800b340:	3718      	adds	r7, #24
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	20001284 	.word	0x20001284
 800b34c:	20001288 	.word	0x20001288
 800b350:	2000138c 	.word	0x2000138c

0800b354 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
 800b360:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b362:	f000 fb2b 	bl	800b9bc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b366:	4b29      	ldr	r3, [pc, #164]	; (800b40c <xTaskNotifyWait+0xb8>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	2b02      	cmp	r3, #2
 800b372:	d01c      	beq.n	800b3ae <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b374:	4b25      	ldr	r3, [pc, #148]	; (800b40c <xTaskNotifyWait+0xb8>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	43d2      	mvns	r2, r2
 800b380:	400a      	ands	r2, r1
 800b382:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b386:	4b21      	ldr	r3, [pc, #132]	; (800b40c <xTaskNotifyWait+0xb8>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00b      	beq.n	800b3ae <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b396:	2101      	movs	r1, #1
 800b398:	6838      	ldr	r0, [r7, #0]
 800b39a:	f000 f9b5 	bl	800b708 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b39e:	4b1c      	ldr	r3, [pc, #112]	; (800b410 <xTaskNotifyWait+0xbc>)
 800b3a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b3ae:	f000 fb35 	bl	800ba1c <vPortExitCritical>

		taskENTER_CRITICAL();
 800b3b2:	f000 fb03 	bl	800b9bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d005      	beq.n	800b3c8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b3bc:	4b13      	ldr	r3, [pc, #76]	; (800b40c <xTaskNotifyWait+0xb8>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b3c8:	4b10      	ldr	r3, [pc, #64]	; (800b40c <xTaskNotifyWait+0xb8>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d002      	beq.n	800b3dc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	617b      	str	r3, [r7, #20]
 800b3da:	e00a      	b.n	800b3f2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b3dc:	4b0b      	ldr	r3, [pc, #44]	; (800b40c <xTaskNotifyWait+0xb8>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	43d2      	mvns	r2, r2
 800b3e8:	400a      	ands	r2, r1
 800b3ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b3f2:	4b06      	ldr	r3, [pc, #24]	; (800b40c <xTaskNotifyWait+0xb8>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800b3fc:	f000 fb0e 	bl	800ba1c <vPortExitCritical>

		return xReturn;
 800b400:	697b      	ldr	r3, [r7, #20]
	}
 800b402:	4618      	mov	r0, r3
 800b404:	3718      	adds	r7, #24
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	20001284 	.word	0x20001284
 800b410:	e000ed04 	.word	0xe000ed04

0800b414 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b414:	b580      	push	{r7, lr}
 800b416:	b08a      	sub	sp, #40	; 0x28
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	603b      	str	r3, [r7, #0]
 800b420:	4613      	mov	r3, r2
 800b422:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b424:	2301      	movs	r3, #1
 800b426:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d10a      	bne.n	800b444 <xTaskGenericNotify+0x30>
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	61bb      	str	r3, [r7, #24]
}
 800b440:	bf00      	nop
 800b442:	e7fe      	b.n	800b442 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b448:	f000 fab8 	bl	800b9bc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d004      	beq.n	800b45c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b45c:	6a3b      	ldr	r3, [r7, #32]
 800b45e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b462:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b464:	6a3b      	ldr	r3, [r7, #32]
 800b466:	2202      	movs	r2, #2
 800b468:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800b46c:	79fb      	ldrb	r3, [r7, #7]
 800b46e:	2b04      	cmp	r3, #4
 800b470:	d82d      	bhi.n	800b4ce <xTaskGenericNotify+0xba>
 800b472:	a201      	add	r2, pc, #4	; (adr r2, 800b478 <xTaskGenericNotify+0x64>)
 800b474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b478:	0800b4cf 	.word	0x0800b4cf
 800b47c:	0800b48d 	.word	0x0800b48d
 800b480:	0800b49f 	.word	0x0800b49f
 800b484:	0800b4af 	.word	0x0800b4af
 800b488:	0800b4b9 	.word	0x0800b4b9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b48c:	6a3b      	ldr	r3, [r7, #32]
 800b48e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	431a      	orrs	r2, r3
 800b496:	6a3b      	ldr	r3, [r7, #32]
 800b498:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b49c:	e017      	b.n	800b4ce <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b49e:	6a3b      	ldr	r3, [r7, #32]
 800b4a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4a4:	1c5a      	adds	r2, r3, #1
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
 800b4a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b4ac:	e00f      	b.n	800b4ce <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b4ae:	6a3b      	ldr	r3, [r7, #32]
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b4b6:	e00a      	b.n	800b4ce <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b4b8:	7ffb      	ldrb	r3, [r7, #31]
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d004      	beq.n	800b4c8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b4be:	6a3b      	ldr	r3, [r7, #32]
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b4c6:	e001      	b.n	800b4cc <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b4cc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b4ce:	7ffb      	ldrb	r3, [r7, #31]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d139      	bne.n	800b548 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4d4:	6a3b      	ldr	r3, [r7, #32]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7fe f911 	bl	8009700 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b4de:	6a3b      	ldr	r3, [r7, #32]
 800b4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	409a      	lsls	r2, r3
 800b4e6:	4b1c      	ldr	r3, [pc, #112]	; (800b558 <xTaskGenericNotify+0x144>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	4a1a      	ldr	r2, [pc, #104]	; (800b558 <xTaskGenericNotify+0x144>)
 800b4ee:	6013      	str	r3, [r2, #0]
 800b4f0:	6a3b      	ldr	r3, [r7, #32]
 800b4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	4413      	add	r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	4a17      	ldr	r2, [pc, #92]	; (800b55c <xTaskGenericNotify+0x148>)
 800b4fe:	441a      	add	r2, r3
 800b500:	6a3b      	ldr	r3, [r7, #32]
 800b502:	3304      	adds	r3, #4
 800b504:	4619      	mov	r1, r3
 800b506:	4610      	mov	r0, r2
 800b508:	f7fe f89f 	bl	800964a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00a      	beq.n	800b52a <xTaskGenericNotify+0x116>
	__asm volatile
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	f383 8811 	msr	BASEPRI, r3
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	617b      	str	r3, [r7, #20]
}
 800b526:	bf00      	nop
 800b528:	e7fe      	b.n	800b528 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b52a:	6a3b      	ldr	r3, [r7, #32]
 800b52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52e:	4b0c      	ldr	r3, [pc, #48]	; (800b560 <xTaskGenericNotify+0x14c>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b534:	429a      	cmp	r2, r3
 800b536:	d907      	bls.n	800b548 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b538:	4b0a      	ldr	r3, [pc, #40]	; (800b564 <xTaskGenericNotify+0x150>)
 800b53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b53e:	601a      	str	r2, [r3, #0]
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b548:	f000 fa68 	bl	800ba1c <vPortExitCritical>

		return xReturn;
 800b54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b54e:	4618      	mov	r0, r3
 800b550:	3728      	adds	r7, #40	; 0x28
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	2000138c 	.word	0x2000138c
 800b55c:	20001288 	.word	0x20001288
 800b560:	20001284 	.word	0x20001284
 800b564:	e000ed04 	.word	0xe000ed04

0800b568 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b08e      	sub	sp, #56	; 0x38
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	603b      	str	r3, [r7, #0]
 800b574:	4613      	mov	r3, r2
 800b576:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b578:	2301      	movs	r3, #1
 800b57a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d10a      	bne.n	800b598 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b586:	f383 8811 	msr	BASEPRI, r3
 800b58a:	f3bf 8f6f 	isb	sy
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b594:	bf00      	nop
 800b596:	e7fe      	b.n	800b596 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b598:	f000 fad2 	bl	800bb40 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b5a0:	f3ef 8211 	mrs	r2, BASEPRI
 800b5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	623a      	str	r2, [r7, #32]
 800b5b6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b5b8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d004      	beq.n	800b5cc <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ce:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b5d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d8:	2202      	movs	r2, #2
 800b5da:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800b5de:	79fb      	ldrb	r3, [r7, #7]
 800b5e0:	2b04      	cmp	r3, #4
 800b5e2:	d82f      	bhi.n	800b644 <xTaskGenericNotifyFromISR+0xdc>
 800b5e4:	a201      	add	r2, pc, #4	; (adr r2, 800b5ec <xTaskGenericNotifyFromISR+0x84>)
 800b5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ea:	bf00      	nop
 800b5ec:	0800b645 	.word	0x0800b645
 800b5f0:	0800b601 	.word	0x0800b601
 800b5f4:	0800b613 	.word	0x0800b613
 800b5f8:	0800b623 	.word	0x0800b623
 800b5fc:	0800b62d 	.word	0x0800b62d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	431a      	orrs	r2, r3
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b610:	e018      	b.n	800b644 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b618:	1c5a      	adds	r2, r3, #1
 800b61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b620:	e010      	b.n	800b644 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b62a:	e00b      	b.n	800b644 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b62c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b630:	2b02      	cmp	r3, #2
 800b632:	d004      	beq.n	800b63e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b636:	68ba      	ldr	r2, [r7, #8]
 800b638:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b63c:	e001      	b.n	800b642 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 800b63e:	2300      	movs	r3, #0
 800b640:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b642:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b644:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d146      	bne.n	800b6da <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00a      	beq.n	800b66a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	61bb      	str	r3, [r7, #24]
}
 800b666:	bf00      	nop
 800b668:	e7fe      	b.n	800b668 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b66a:	4b21      	ldr	r3, [pc, #132]	; (800b6f0 <xTaskGenericNotifyFromISR+0x188>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d11c      	bne.n	800b6ac <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	3304      	adds	r3, #4
 800b676:	4618      	mov	r0, r3
 800b678:	f7fe f842 	bl	8009700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b680:	2201      	movs	r2, #1
 800b682:	409a      	lsls	r2, r3
 800b684:	4b1b      	ldr	r3, [pc, #108]	; (800b6f4 <xTaskGenericNotifyFromISR+0x18c>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4313      	orrs	r3, r2
 800b68a:	4a1a      	ldr	r2, [pc, #104]	; (800b6f4 <xTaskGenericNotifyFromISR+0x18c>)
 800b68c:	6013      	str	r3, [r2, #0]
 800b68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b692:	4613      	mov	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	4413      	add	r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	4a17      	ldr	r2, [pc, #92]	; (800b6f8 <xTaskGenericNotifyFromISR+0x190>)
 800b69c:	441a      	add	r2, r3
 800b69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a0:	3304      	adds	r3, #4
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	4610      	mov	r0, r2
 800b6a6:	f7fd ffd0 	bl	800964a <vListInsertEnd>
 800b6aa:	e005      	b.n	800b6b8 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ae:	3318      	adds	r3, #24
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	4812      	ldr	r0, [pc, #72]	; (800b6fc <xTaskGenericNotifyFromISR+0x194>)
 800b6b4:	f7fd ffc9 	bl	800964a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6bc:	4b10      	ldr	r3, [pc, #64]	; (800b700 <xTaskGenericNotifyFromISR+0x198>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d909      	bls.n	800b6da <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b6c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d003      	beq.n	800b6d4 <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	601a      	str	r2, [r3, #0]
 800b6d2:	e002      	b.n	800b6da <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800b6d4:	4b0b      	ldr	r3, [pc, #44]	; (800b704 <xTaskGenericNotifyFromISR+0x19c>)
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	601a      	str	r2, [r3, #0]
 800b6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6dc:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	f383 8811 	msr	BASEPRI, r3
}
 800b6e4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3738      	adds	r7, #56	; 0x38
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	200013ac 	.word	0x200013ac
 800b6f4:	2000138c 	.word	0x2000138c
 800b6f8:	20001288 	.word	0x20001288
 800b6fc:	20001344 	.word	0x20001344
 800b700:	20001284 	.word	0x20001284
 800b704:	20001398 	.word	0x20001398

0800b708 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b712:	4b29      	ldr	r3, [pc, #164]	; (800b7b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b718:	4b28      	ldr	r3, [pc, #160]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	3304      	adds	r3, #4
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fd ffee 	bl	8009700 <uxListRemove>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10b      	bne.n	800b742 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b72a:	4b24      	ldr	r3, [pc, #144]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b730:	2201      	movs	r2, #1
 800b732:	fa02 f303 	lsl.w	r3, r2, r3
 800b736:	43da      	mvns	r2, r3
 800b738:	4b21      	ldr	r3, [pc, #132]	; (800b7c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4013      	ands	r3, r2
 800b73e:	4a20      	ldr	r2, [pc, #128]	; (800b7c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b740:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b748:	d10a      	bne.n	800b760 <prvAddCurrentTaskToDelayedList+0x58>
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d007      	beq.n	800b760 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b750:	4b1a      	ldr	r3, [pc, #104]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	3304      	adds	r3, #4
 800b756:	4619      	mov	r1, r3
 800b758:	481a      	ldr	r0, [pc, #104]	; (800b7c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b75a:	f7fd ff76 	bl	800964a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b75e:	e026      	b.n	800b7ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4413      	add	r3, r2
 800b766:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b768:	4b14      	ldr	r3, [pc, #80]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b770:	68ba      	ldr	r2, [r7, #8]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	429a      	cmp	r2, r3
 800b776:	d209      	bcs.n	800b78c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b778:	4b13      	ldr	r3, [pc, #76]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	4b0f      	ldr	r3, [pc, #60]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3304      	adds	r3, #4
 800b782:	4619      	mov	r1, r3
 800b784:	4610      	mov	r0, r2
 800b786:	f7fd ff83 	bl	8009690 <vListInsert>
}
 800b78a:	e010      	b.n	800b7ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b78c:	4b0f      	ldr	r3, [pc, #60]	; (800b7cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	4b0a      	ldr	r3, [pc, #40]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3304      	adds	r3, #4
 800b796:	4619      	mov	r1, r3
 800b798:	4610      	mov	r0, r2
 800b79a:	f7fd ff79 	bl	8009690 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b79e:	4b0c      	ldr	r3, [pc, #48]	; (800b7d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d202      	bcs.n	800b7ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b7a8:	4a09      	ldr	r2, [pc, #36]	; (800b7d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	6013      	str	r3, [r2, #0]
}
 800b7ae:	bf00      	nop
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20001388 	.word	0x20001388
 800b7bc:	20001284 	.word	0x20001284
 800b7c0:	2000138c 	.word	0x2000138c
 800b7c4:	20001370 	.word	0x20001370
 800b7c8:	20001340 	.word	0x20001340
 800b7cc:	2000133c 	.word	0x2000133c
 800b7d0:	200013a4 	.word	0x200013a4

0800b7d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	3b04      	subs	r3, #4
 800b7e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b7ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	3b04      	subs	r3, #4
 800b7f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	f023 0201 	bic.w	r2, r3, #1
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	3b04      	subs	r3, #4
 800b802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b804:	4a08      	ldr	r2, [pc, #32]	; (800b828 <pxPortInitialiseStack+0x54>)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	3b14      	subs	r3, #20
 800b80e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	3b20      	subs	r3, #32
 800b81a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b81c:	68fb      	ldr	r3, [r7, #12]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3714      	adds	r7, #20
 800b822:	46bd      	mov	sp, r7
 800b824:	bc80      	pop	{r7}
 800b826:	4770      	bx	lr
 800b828:	0800b82d 	.word	0x0800b82d

0800b82c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b832:	2300      	movs	r3, #0
 800b834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b836:	4b12      	ldr	r3, [pc, #72]	; (800b880 <prvTaskExitError+0x54>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83e:	d00a      	beq.n	800b856 <prvTaskExitError+0x2a>
	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	60fb      	str	r3, [r7, #12]
}
 800b852:	bf00      	nop
 800b854:	e7fe      	b.n	800b854 <prvTaskExitError+0x28>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	60bb      	str	r3, [r7, #8]
}
 800b868:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b86a:	bf00      	nop
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d0fc      	beq.n	800b86c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b872:	bf00      	nop
 800b874:	bf00      	nop
 800b876:	3714      	adds	r7, #20
 800b878:	46bd      	mov	sp, r7
 800b87a:	bc80      	pop	{r7}
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	2000020c 	.word	0x2000020c
	...

0800b890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b890:	4b07      	ldr	r3, [pc, #28]	; (800b8b0 <pxCurrentTCBConst2>)
 800b892:	6819      	ldr	r1, [r3, #0]
 800b894:	6808      	ldr	r0, [r1, #0]
 800b896:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b89a:	f380 8809 	msr	PSP, r0
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f04f 0000 	mov.w	r0, #0
 800b8a6:	f380 8811 	msr	BASEPRI, r0
 800b8aa:	f04e 0e0d 	orr.w	lr, lr, #13
 800b8ae:	4770      	bx	lr

0800b8b0 <pxCurrentTCBConst2>:
 800b8b0:	20001284 	.word	0x20001284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b8b4:	bf00      	nop
 800b8b6:	bf00      	nop

0800b8b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b8b8:	4806      	ldr	r0, [pc, #24]	; (800b8d4 <prvPortStartFirstTask+0x1c>)
 800b8ba:	6800      	ldr	r0, [r0, #0]
 800b8bc:	6800      	ldr	r0, [r0, #0]
 800b8be:	f380 8808 	msr	MSP, r0
 800b8c2:	b662      	cpsie	i
 800b8c4:	b661      	cpsie	f
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	f3bf 8f6f 	isb	sy
 800b8ce:	df00      	svc	0
 800b8d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b8d2:	bf00      	nop
 800b8d4:	e000ed08 	.word	0xe000ed08

0800b8d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b8de:	4b32      	ldr	r3, [pc, #200]	; (800b9a8 <xPortStartScheduler+0xd0>)
 800b8e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	22ff      	movs	r2, #255	; 0xff
 800b8ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8f8:	78fb      	ldrb	r3, [r7, #3]
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b900:	b2da      	uxtb	r2, r3
 800b902:	4b2a      	ldr	r3, [pc, #168]	; (800b9ac <xPortStartScheduler+0xd4>)
 800b904:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b906:	4b2a      	ldr	r3, [pc, #168]	; (800b9b0 <xPortStartScheduler+0xd8>)
 800b908:	2207      	movs	r2, #7
 800b90a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b90c:	e009      	b.n	800b922 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b90e:	4b28      	ldr	r3, [pc, #160]	; (800b9b0 <xPortStartScheduler+0xd8>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	3b01      	subs	r3, #1
 800b914:	4a26      	ldr	r2, [pc, #152]	; (800b9b0 <xPortStartScheduler+0xd8>)
 800b916:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b918:	78fb      	ldrb	r3, [r7, #3]
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	005b      	lsls	r3, r3, #1
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b922:	78fb      	ldrb	r3, [r7, #3]
 800b924:	b2db      	uxtb	r3, r3
 800b926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b92a:	2b80      	cmp	r3, #128	; 0x80
 800b92c:	d0ef      	beq.n	800b90e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b92e:	4b20      	ldr	r3, [pc, #128]	; (800b9b0 <xPortStartScheduler+0xd8>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f1c3 0307 	rsb	r3, r3, #7
 800b936:	2b04      	cmp	r3, #4
 800b938:	d00a      	beq.n	800b950 <xPortStartScheduler+0x78>
	__asm volatile
 800b93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	60bb      	str	r3, [r7, #8]
}
 800b94c:	bf00      	nop
 800b94e:	e7fe      	b.n	800b94e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b950:	4b17      	ldr	r3, [pc, #92]	; (800b9b0 <xPortStartScheduler+0xd8>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	021b      	lsls	r3, r3, #8
 800b956:	4a16      	ldr	r2, [pc, #88]	; (800b9b0 <xPortStartScheduler+0xd8>)
 800b958:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b95a:	4b15      	ldr	r3, [pc, #84]	; (800b9b0 <xPortStartScheduler+0xd8>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b962:	4a13      	ldr	r2, [pc, #76]	; (800b9b0 <xPortStartScheduler+0xd8>)
 800b964:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	b2da      	uxtb	r2, r3
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b96e:	4b11      	ldr	r3, [pc, #68]	; (800b9b4 <xPortStartScheduler+0xdc>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a10      	ldr	r2, [pc, #64]	; (800b9b4 <xPortStartScheduler+0xdc>)
 800b974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b978:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b97a:	4b0e      	ldr	r3, [pc, #56]	; (800b9b4 <xPortStartScheduler+0xdc>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a0d      	ldr	r2, [pc, #52]	; (800b9b4 <xPortStartScheduler+0xdc>)
 800b980:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b984:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b986:	f000 f8b9 	bl	800bafc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b98a:	4b0b      	ldr	r3, [pc, #44]	; (800b9b8 <xPortStartScheduler+0xe0>)
 800b98c:	2200      	movs	r2, #0
 800b98e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b990:	f7ff ff92 	bl	800b8b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b994:	f7ff f9f0 	bl	800ad78 <vTaskSwitchContext>
	prvTaskExitError();
 800b998:	f7ff ff48 	bl	800b82c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	e000e400 	.word	0xe000e400
 800b9ac:	200013b0 	.word	0x200013b0
 800b9b0:	200013b4 	.word	0x200013b4
 800b9b4:	e000ed20 	.word	0xe000ed20
 800b9b8:	2000020c 	.word	0x2000020c

0800b9bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
	__asm volatile
 800b9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	607b      	str	r3, [r7, #4]
}
 800b9d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b9d6:	4b0f      	ldr	r3, [pc, #60]	; (800ba14 <vPortEnterCritical+0x58>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	4a0d      	ldr	r2, [pc, #52]	; (800ba14 <vPortEnterCritical+0x58>)
 800b9de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b9e0:	4b0c      	ldr	r3, [pc, #48]	; (800ba14 <vPortEnterCritical+0x58>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d10f      	bne.n	800ba08 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b9e8:	4b0b      	ldr	r3, [pc, #44]	; (800ba18 <vPortEnterCritical+0x5c>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00a      	beq.n	800ba08 <vPortEnterCritical+0x4c>
	__asm volatile
 800b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	603b      	str	r3, [r7, #0]
}
 800ba04:	bf00      	nop
 800ba06:	e7fe      	b.n	800ba06 <vPortEnterCritical+0x4a>
	}
}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bc80      	pop	{r7}
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	2000020c 	.word	0x2000020c
 800ba18:	e000ed04 	.word	0xe000ed04

0800ba1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba22:	4b11      	ldr	r3, [pc, #68]	; (800ba68 <vPortExitCritical+0x4c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d10a      	bne.n	800ba40 <vPortExitCritical+0x24>
	__asm volatile
 800ba2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2e:	f383 8811 	msr	BASEPRI, r3
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	f3bf 8f4f 	dsb	sy
 800ba3a:	607b      	str	r3, [r7, #4]
}
 800ba3c:	bf00      	nop
 800ba3e:	e7fe      	b.n	800ba3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba40:	4b09      	ldr	r3, [pc, #36]	; (800ba68 <vPortExitCritical+0x4c>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	3b01      	subs	r3, #1
 800ba46:	4a08      	ldr	r2, [pc, #32]	; (800ba68 <vPortExitCritical+0x4c>)
 800ba48:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba4a:	4b07      	ldr	r3, [pc, #28]	; (800ba68 <vPortExitCritical+0x4c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d105      	bne.n	800ba5e <vPortExitCritical+0x42>
 800ba52:	2300      	movs	r3, #0
 800ba54:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	f383 8811 	msr	BASEPRI, r3
}
 800ba5c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba5e:	bf00      	nop
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bc80      	pop	{r7}
 800ba66:	4770      	bx	lr
 800ba68:	2000020c 	.word	0x2000020c
 800ba6c:	00000000 	.word	0x00000000

0800ba70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba70:	f3ef 8009 	mrs	r0, PSP
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	4b0d      	ldr	r3, [pc, #52]	; (800bab0 <pxCurrentTCBConst>)
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ba80:	6010      	str	r0, [r2, #0]
 800ba82:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ba86:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ba8a:	f380 8811 	msr	BASEPRI, r0
 800ba8e:	f7ff f973 	bl	800ad78 <vTaskSwitchContext>
 800ba92:	f04f 0000 	mov.w	r0, #0
 800ba96:	f380 8811 	msr	BASEPRI, r0
 800ba9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ba9e:	6819      	ldr	r1, [r3, #0]
 800baa0:	6808      	ldr	r0, [r1, #0]
 800baa2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800baa6:	f380 8809 	msr	PSP, r0
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	4770      	bx	lr

0800bab0 <pxCurrentTCBConst>:
 800bab0:	20001284 	.word	0x20001284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bab4:	bf00      	nop
 800bab6:	bf00      	nop

0800bab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
	__asm volatile
 800babe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac2:	f383 8811 	msr	BASEPRI, r3
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	607b      	str	r3, [r7, #4]
}
 800bad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bad2:	f7ff f893 	bl	800abfc <xTaskIncrementTick>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d003      	beq.n	800bae4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800badc:	4b06      	ldr	r3, [pc, #24]	; (800baf8 <SysTick_Handler+0x40>)
 800bade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	2300      	movs	r3, #0
 800bae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	f383 8811 	msr	BASEPRI, r3
}
 800baee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800baf0:	bf00      	nop
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	e000ed04 	.word	0xe000ed04

0800bafc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bafc:	b480      	push	{r7}
 800bafe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb00:	4b0a      	ldr	r3, [pc, #40]	; (800bb2c <vPortSetupTimerInterrupt+0x30>)
 800bb02:	2200      	movs	r2, #0
 800bb04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb06:	4b0a      	ldr	r3, [pc, #40]	; (800bb30 <vPortSetupTimerInterrupt+0x34>)
 800bb08:	2200      	movs	r2, #0
 800bb0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb0c:	4b09      	ldr	r3, [pc, #36]	; (800bb34 <vPortSetupTimerInterrupt+0x38>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a09      	ldr	r2, [pc, #36]	; (800bb38 <vPortSetupTimerInterrupt+0x3c>)
 800bb12:	fba2 2303 	umull	r2, r3, r2, r3
 800bb16:	099b      	lsrs	r3, r3, #6
 800bb18:	4a08      	ldr	r2, [pc, #32]	; (800bb3c <vPortSetupTimerInterrupt+0x40>)
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb1e:	4b03      	ldr	r3, [pc, #12]	; (800bb2c <vPortSetupTimerInterrupt+0x30>)
 800bb20:	2207      	movs	r2, #7
 800bb22:	601a      	str	r2, [r3, #0]
}
 800bb24:	bf00      	nop
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bc80      	pop	{r7}
 800bb2a:	4770      	bx	lr
 800bb2c:	e000e010 	.word	0xe000e010
 800bb30:	e000e018 	.word	0xe000e018
 800bb34:	20000200 	.word	0x20000200
 800bb38:	10624dd3 	.word	0x10624dd3
 800bb3c:	e000e014 	.word	0xe000e014

0800bb40 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb46:	f3ef 8305 	mrs	r3, IPSR
 800bb4a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2b0f      	cmp	r3, #15
 800bb50:	d914      	bls.n	800bb7c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb52:	4a16      	ldr	r2, [pc, #88]	; (800bbac <vPortValidateInterruptPriority+0x6c>)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	4413      	add	r3, r2
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bb5c:	4b14      	ldr	r3, [pc, #80]	; (800bbb0 <vPortValidateInterruptPriority+0x70>)
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	7afa      	ldrb	r2, [r7, #11]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d20a      	bcs.n	800bb7c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6a:	f383 8811 	msr	BASEPRI, r3
 800bb6e:	f3bf 8f6f 	isb	sy
 800bb72:	f3bf 8f4f 	dsb	sy
 800bb76:	607b      	str	r3, [r7, #4]
}
 800bb78:	bf00      	nop
 800bb7a:	e7fe      	b.n	800bb7a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb7c:	4b0d      	ldr	r3, [pc, #52]	; (800bbb4 <vPortValidateInterruptPriority+0x74>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bb84:	4b0c      	ldr	r3, [pc, #48]	; (800bbb8 <vPortValidateInterruptPriority+0x78>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d90a      	bls.n	800bba2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	603b      	str	r3, [r7, #0]
}
 800bb9e:	bf00      	nop
 800bba0:	e7fe      	b.n	800bba0 <vPortValidateInterruptPriority+0x60>
	}
 800bba2:	bf00      	nop
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bc80      	pop	{r7}
 800bbaa:	4770      	bx	lr
 800bbac:	e000e3f0 	.word	0xe000e3f0
 800bbb0:	200013b0 	.word	0x200013b0
 800bbb4:	e000ed0c 	.word	0xe000ed0c
 800bbb8:	200013b4 	.word	0x200013b4

0800bbbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08a      	sub	sp, #40	; 0x28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bbc8:	f7fe ff60 	bl	800aa8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bbcc:	4b58      	ldr	r3, [pc, #352]	; (800bd30 <pvPortMalloc+0x174>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d101      	bne.n	800bbd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bbd4:	f000 f910 	bl	800bdf8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bbd8:	4b56      	ldr	r3, [pc, #344]	; (800bd34 <pvPortMalloc+0x178>)
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4013      	ands	r3, r2
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f040 808e 	bne.w	800bd02 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d01d      	beq.n	800bc28 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bbec:	2208      	movs	r2, #8
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f003 0307 	and.w	r3, r3, #7
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d014      	beq.n	800bc28 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f023 0307 	bic.w	r3, r3, #7
 800bc04:	3308      	adds	r3, #8
 800bc06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f003 0307 	and.w	r3, r3, #7
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00a      	beq.n	800bc28 <pvPortMalloc+0x6c>
	__asm volatile
 800bc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	617b      	str	r3, [r7, #20]
}
 800bc24:	bf00      	nop
 800bc26:	e7fe      	b.n	800bc26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d069      	beq.n	800bd02 <pvPortMalloc+0x146>
 800bc2e:	4b42      	ldr	r3, [pc, #264]	; (800bd38 <pvPortMalloc+0x17c>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d864      	bhi.n	800bd02 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bc38:	4b40      	ldr	r3, [pc, #256]	; (800bd3c <pvPortMalloc+0x180>)
 800bc3a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bc3c:	4b3f      	ldr	r3, [pc, #252]	; (800bd3c <pvPortMalloc+0x180>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc42:	e004      	b.n	800bc4e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc46:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d903      	bls.n	800bc60 <pvPortMalloc+0xa4>
 800bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d1f1      	bne.n	800bc44 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bc60:	4b33      	ldr	r3, [pc, #204]	; (800bd30 <pvPortMalloc+0x174>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d04b      	beq.n	800bd02 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bc6a:	6a3b      	ldr	r3, [r7, #32]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2208      	movs	r2, #8
 800bc70:	4413      	add	r3, r2
 800bc72:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	6a3b      	ldr	r3, [r7, #32]
 800bc7a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7e:	685a      	ldr	r2, [r3, #4]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	1ad2      	subs	r2, r2, r3
 800bc84:	2308      	movs	r3, #8
 800bc86:	005b      	lsls	r3, r3, #1
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d91f      	bls.n	800bccc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bc8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4413      	add	r3, r2
 800bc92:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc94:	69bb      	ldr	r3, [r7, #24]
 800bc96:	f003 0307 	and.w	r3, r3, #7
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00a      	beq.n	800bcb4 <pvPortMalloc+0xf8>
	__asm volatile
 800bc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca2:	f383 8811 	msr	BASEPRI, r3
 800bca6:	f3bf 8f6f 	isb	sy
 800bcaa:	f3bf 8f4f 	dsb	sy
 800bcae:	613b      	str	r3, [r7, #16]
}
 800bcb0:	bf00      	nop
 800bcb2:	e7fe      	b.n	800bcb2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb6:	685a      	ldr	r2, [r3, #4]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	1ad2      	subs	r2, r2, r3
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bcc6:	69b8      	ldr	r0, [r7, #24]
 800bcc8:	f000 f8f8 	bl	800bebc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bccc:	4b1a      	ldr	r3, [pc, #104]	; (800bd38 <pvPortMalloc+0x17c>)
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	4a18      	ldr	r2, [pc, #96]	; (800bd38 <pvPortMalloc+0x17c>)
 800bcd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bcda:	4b17      	ldr	r3, [pc, #92]	; (800bd38 <pvPortMalloc+0x17c>)
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	4b18      	ldr	r3, [pc, #96]	; (800bd40 <pvPortMalloc+0x184>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d203      	bcs.n	800bcee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bce6:	4b14      	ldr	r3, [pc, #80]	; (800bd38 <pvPortMalloc+0x17c>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a15      	ldr	r2, [pc, #84]	; (800bd40 <pvPortMalloc+0x184>)
 800bcec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	685a      	ldr	r2, [r3, #4]
 800bcf2:	4b10      	ldr	r3, [pc, #64]	; (800bd34 <pvPortMalloc+0x178>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	431a      	orrs	r2, r3
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	2200      	movs	r2, #0
 800bd00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bd02:	f7fe fed1 	bl	800aaa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	f003 0307 	and.w	r3, r3, #7
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00a      	beq.n	800bd26 <pvPortMalloc+0x16a>
	__asm volatile
 800bd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	60fb      	str	r3, [r7, #12]
}
 800bd22:	bf00      	nop
 800bd24:	e7fe      	b.n	800bd24 <pvPortMalloc+0x168>
	return pvReturn;
 800bd26:	69fb      	ldr	r3, [r7, #28]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3728      	adds	r7, #40	; 0x28
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20001fc0 	.word	0x20001fc0
 800bd34:	20001fcc 	.word	0x20001fcc
 800bd38:	20001fc4 	.word	0x20001fc4
 800bd3c:	20001fb8 	.word	0x20001fb8
 800bd40:	20001fc8 	.word	0x20001fc8

0800bd44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b086      	sub	sp, #24
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d048      	beq.n	800bde8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bd56:	2308      	movs	r3, #8
 800bd58:	425b      	negs	r3, r3
 800bd5a:	697a      	ldr	r2, [r7, #20]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	685a      	ldr	r2, [r3, #4]
 800bd68:	4b21      	ldr	r3, [pc, #132]	; (800bdf0 <vPortFree+0xac>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4013      	ands	r3, r2
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d10a      	bne.n	800bd88 <vPortFree+0x44>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	60fb      	str	r3, [r7, #12]
}
 800bd84:	bf00      	nop
 800bd86:	e7fe      	b.n	800bd86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00a      	beq.n	800bda6 <vPortFree+0x62>
	__asm volatile
 800bd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	60bb      	str	r3, [r7, #8]
}
 800bda2:	bf00      	nop
 800bda4:	e7fe      	b.n	800bda4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	685a      	ldr	r2, [r3, #4]
 800bdaa:	4b11      	ldr	r3, [pc, #68]	; (800bdf0 <vPortFree+0xac>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4013      	ands	r3, r2
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d019      	beq.n	800bde8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d115      	bne.n	800bde8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	685a      	ldr	r2, [r3, #4]
 800bdc0:	4b0b      	ldr	r3, [pc, #44]	; (800bdf0 <vPortFree+0xac>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	43db      	mvns	r3, r3
 800bdc6:	401a      	ands	r2, r3
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bdcc:	f7fe fe5e 	bl	800aa8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	685a      	ldr	r2, [r3, #4]
 800bdd4:	4b07      	ldr	r3, [pc, #28]	; (800bdf4 <vPortFree+0xb0>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4413      	add	r3, r2
 800bdda:	4a06      	ldr	r2, [pc, #24]	; (800bdf4 <vPortFree+0xb0>)
 800bddc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bdde:	6938      	ldr	r0, [r7, #16]
 800bde0:	f000 f86c 	bl	800bebc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bde4:	f7fe fe60 	bl	800aaa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bde8:	bf00      	nop
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	20001fcc 	.word	0x20001fcc
 800bdf4:	20001fc4 	.word	0x20001fc4

0800bdf8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bdfe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800be02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800be04:	4b27      	ldr	r3, [pc, #156]	; (800bea4 <prvHeapInit+0xac>)
 800be06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f003 0307 	and.w	r3, r3, #7
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00c      	beq.n	800be2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	3307      	adds	r3, #7
 800be16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f023 0307 	bic.w	r3, r3, #7
 800be1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	4a1f      	ldr	r2, [pc, #124]	; (800bea4 <prvHeapInit+0xac>)
 800be28:	4413      	add	r3, r2
 800be2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800be30:	4a1d      	ldr	r2, [pc, #116]	; (800bea8 <prvHeapInit+0xb0>)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800be36:	4b1c      	ldr	r3, [pc, #112]	; (800bea8 <prvHeapInit+0xb0>)
 800be38:	2200      	movs	r2, #0
 800be3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	4413      	add	r3, r2
 800be42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800be44:	2208      	movs	r2, #8
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	1a9b      	subs	r3, r3, r2
 800be4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f023 0307 	bic.w	r3, r3, #7
 800be52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	4a15      	ldr	r2, [pc, #84]	; (800beac <prvHeapInit+0xb4>)
 800be58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800be5a:	4b14      	ldr	r3, [pc, #80]	; (800beac <prvHeapInit+0xb4>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2200      	movs	r2, #0
 800be60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800be62:	4b12      	ldr	r3, [pc, #72]	; (800beac <prvHeapInit+0xb4>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2200      	movs	r2, #0
 800be68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	1ad2      	subs	r2, r2, r3
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800be78:	4b0c      	ldr	r3, [pc, #48]	; (800beac <prvHeapInit+0xb4>)
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	4a0a      	ldr	r2, [pc, #40]	; (800beb0 <prvHeapInit+0xb8>)
 800be86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	4a09      	ldr	r2, [pc, #36]	; (800beb4 <prvHeapInit+0xbc>)
 800be8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800be90:	4b09      	ldr	r3, [pc, #36]	; (800beb8 <prvHeapInit+0xc0>)
 800be92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800be96:	601a      	str	r2, [r3, #0]
}
 800be98:	bf00      	nop
 800be9a:	3714      	adds	r7, #20
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bc80      	pop	{r7}
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	200013b8 	.word	0x200013b8
 800bea8:	20001fb8 	.word	0x20001fb8
 800beac:	20001fc0 	.word	0x20001fc0
 800beb0:	20001fc8 	.word	0x20001fc8
 800beb4:	20001fc4 	.word	0x20001fc4
 800beb8:	20001fcc 	.word	0x20001fcc

0800bebc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bec4:	4b27      	ldr	r3, [pc, #156]	; (800bf64 <prvInsertBlockIntoFreeList+0xa8>)
 800bec6:	60fb      	str	r3, [r7, #12]
 800bec8:	e002      	b.n	800bed0 <prvInsertBlockIntoFreeList+0x14>
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d8f7      	bhi.n	800beca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	68ba      	ldr	r2, [r7, #8]
 800bee4:	4413      	add	r3, r2
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d108      	bne.n	800befe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	685a      	ldr	r2, [r3, #4]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	441a      	add	r2, r3
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	68ba      	ldr	r2, [r7, #8]
 800bf08:	441a      	add	r2, r3
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d118      	bne.n	800bf44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	4b14      	ldr	r3, [pc, #80]	; (800bf68 <prvInsertBlockIntoFreeList+0xac>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d00d      	beq.n	800bf3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	441a      	add	r2, r3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	601a      	str	r2, [r3, #0]
 800bf38:	e008      	b.n	800bf4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bf3a:	4b0b      	ldr	r3, [pc, #44]	; (800bf68 <prvInsertBlockIntoFreeList+0xac>)
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	e003      	b.n	800bf4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d002      	beq.n	800bf5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf5a:	bf00      	nop
 800bf5c:	3714      	adds	r7, #20
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bc80      	pop	{r7}
 800bf62:	4770      	bx	lr
 800bf64:	20001fb8 	.word	0x20001fb8
 800bf68:	20001fc0 	.word	0x20001fc0

0800bf6c <malloc>:
 800bf6c:	4b02      	ldr	r3, [pc, #8]	; (800bf78 <malloc+0xc>)
 800bf6e:	4601      	mov	r1, r0
 800bf70:	6818      	ldr	r0, [r3, #0]
 800bf72:	f000 b823 	b.w	800bfbc <_malloc_r>
 800bf76:	bf00      	nop
 800bf78:	2000025c 	.word	0x2000025c

0800bf7c <sbrk_aligned>:
 800bf7c:	b570      	push	{r4, r5, r6, lr}
 800bf7e:	4e0e      	ldr	r6, [pc, #56]	; (800bfb8 <sbrk_aligned+0x3c>)
 800bf80:	460c      	mov	r4, r1
 800bf82:	6831      	ldr	r1, [r6, #0]
 800bf84:	4605      	mov	r5, r0
 800bf86:	b911      	cbnz	r1, 800bf8e <sbrk_aligned+0x12>
 800bf88:	f000 f938 	bl	800c1fc <_sbrk_r>
 800bf8c:	6030      	str	r0, [r6, #0]
 800bf8e:	4621      	mov	r1, r4
 800bf90:	4628      	mov	r0, r5
 800bf92:	f000 f933 	bl	800c1fc <_sbrk_r>
 800bf96:	1c43      	adds	r3, r0, #1
 800bf98:	d00a      	beq.n	800bfb0 <sbrk_aligned+0x34>
 800bf9a:	1cc4      	adds	r4, r0, #3
 800bf9c:	f024 0403 	bic.w	r4, r4, #3
 800bfa0:	42a0      	cmp	r0, r4
 800bfa2:	d007      	beq.n	800bfb4 <sbrk_aligned+0x38>
 800bfa4:	1a21      	subs	r1, r4, r0
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f000 f928 	bl	800c1fc <_sbrk_r>
 800bfac:	3001      	adds	r0, #1
 800bfae:	d101      	bne.n	800bfb4 <sbrk_aligned+0x38>
 800bfb0:	f04f 34ff 	mov.w	r4, #4294967295
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	bd70      	pop	{r4, r5, r6, pc}
 800bfb8:	20001fd4 	.word	0x20001fd4

0800bfbc <_malloc_r>:
 800bfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfc0:	1ccd      	adds	r5, r1, #3
 800bfc2:	f025 0503 	bic.w	r5, r5, #3
 800bfc6:	3508      	adds	r5, #8
 800bfc8:	2d0c      	cmp	r5, #12
 800bfca:	bf38      	it	cc
 800bfcc:	250c      	movcc	r5, #12
 800bfce:	2d00      	cmp	r5, #0
 800bfd0:	4607      	mov	r7, r0
 800bfd2:	db01      	blt.n	800bfd8 <_malloc_r+0x1c>
 800bfd4:	42a9      	cmp	r1, r5
 800bfd6:	d905      	bls.n	800bfe4 <_malloc_r+0x28>
 800bfd8:	230c      	movs	r3, #12
 800bfda:	2600      	movs	r6, #0
 800bfdc:	603b      	str	r3, [r7, #0]
 800bfde:	4630      	mov	r0, r6
 800bfe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfe4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c0b8 <_malloc_r+0xfc>
 800bfe8:	f000 f868 	bl	800c0bc <__malloc_lock>
 800bfec:	f8d8 3000 	ldr.w	r3, [r8]
 800bff0:	461c      	mov	r4, r3
 800bff2:	bb5c      	cbnz	r4, 800c04c <_malloc_r+0x90>
 800bff4:	4629      	mov	r1, r5
 800bff6:	4638      	mov	r0, r7
 800bff8:	f7ff ffc0 	bl	800bf7c <sbrk_aligned>
 800bffc:	1c43      	adds	r3, r0, #1
 800bffe:	4604      	mov	r4, r0
 800c000:	d155      	bne.n	800c0ae <_malloc_r+0xf2>
 800c002:	f8d8 4000 	ldr.w	r4, [r8]
 800c006:	4626      	mov	r6, r4
 800c008:	2e00      	cmp	r6, #0
 800c00a:	d145      	bne.n	800c098 <_malloc_r+0xdc>
 800c00c:	2c00      	cmp	r4, #0
 800c00e:	d048      	beq.n	800c0a2 <_malloc_r+0xe6>
 800c010:	6823      	ldr	r3, [r4, #0]
 800c012:	4631      	mov	r1, r6
 800c014:	4638      	mov	r0, r7
 800c016:	eb04 0903 	add.w	r9, r4, r3
 800c01a:	f000 f8ef 	bl	800c1fc <_sbrk_r>
 800c01e:	4581      	cmp	r9, r0
 800c020:	d13f      	bne.n	800c0a2 <_malloc_r+0xe6>
 800c022:	6821      	ldr	r1, [r4, #0]
 800c024:	4638      	mov	r0, r7
 800c026:	1a6d      	subs	r5, r5, r1
 800c028:	4629      	mov	r1, r5
 800c02a:	f7ff ffa7 	bl	800bf7c <sbrk_aligned>
 800c02e:	3001      	adds	r0, #1
 800c030:	d037      	beq.n	800c0a2 <_malloc_r+0xe6>
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	442b      	add	r3, r5
 800c036:	6023      	str	r3, [r4, #0]
 800c038:	f8d8 3000 	ldr.w	r3, [r8]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d038      	beq.n	800c0b2 <_malloc_r+0xf6>
 800c040:	685a      	ldr	r2, [r3, #4]
 800c042:	42a2      	cmp	r2, r4
 800c044:	d12b      	bne.n	800c09e <_malloc_r+0xe2>
 800c046:	2200      	movs	r2, #0
 800c048:	605a      	str	r2, [r3, #4]
 800c04a:	e00f      	b.n	800c06c <_malloc_r+0xb0>
 800c04c:	6822      	ldr	r2, [r4, #0]
 800c04e:	1b52      	subs	r2, r2, r5
 800c050:	d41f      	bmi.n	800c092 <_malloc_r+0xd6>
 800c052:	2a0b      	cmp	r2, #11
 800c054:	d917      	bls.n	800c086 <_malloc_r+0xca>
 800c056:	1961      	adds	r1, r4, r5
 800c058:	42a3      	cmp	r3, r4
 800c05a:	6025      	str	r5, [r4, #0]
 800c05c:	bf18      	it	ne
 800c05e:	6059      	strne	r1, [r3, #4]
 800c060:	6863      	ldr	r3, [r4, #4]
 800c062:	bf08      	it	eq
 800c064:	f8c8 1000 	streq.w	r1, [r8]
 800c068:	5162      	str	r2, [r4, r5]
 800c06a:	604b      	str	r3, [r1, #4]
 800c06c:	4638      	mov	r0, r7
 800c06e:	f104 060b 	add.w	r6, r4, #11
 800c072:	f000 f829 	bl	800c0c8 <__malloc_unlock>
 800c076:	f026 0607 	bic.w	r6, r6, #7
 800c07a:	1d23      	adds	r3, r4, #4
 800c07c:	1af2      	subs	r2, r6, r3
 800c07e:	d0ae      	beq.n	800bfde <_malloc_r+0x22>
 800c080:	1b9b      	subs	r3, r3, r6
 800c082:	50a3      	str	r3, [r4, r2]
 800c084:	e7ab      	b.n	800bfde <_malloc_r+0x22>
 800c086:	42a3      	cmp	r3, r4
 800c088:	6862      	ldr	r2, [r4, #4]
 800c08a:	d1dd      	bne.n	800c048 <_malloc_r+0x8c>
 800c08c:	f8c8 2000 	str.w	r2, [r8]
 800c090:	e7ec      	b.n	800c06c <_malloc_r+0xb0>
 800c092:	4623      	mov	r3, r4
 800c094:	6864      	ldr	r4, [r4, #4]
 800c096:	e7ac      	b.n	800bff2 <_malloc_r+0x36>
 800c098:	4634      	mov	r4, r6
 800c09a:	6876      	ldr	r6, [r6, #4]
 800c09c:	e7b4      	b.n	800c008 <_malloc_r+0x4c>
 800c09e:	4613      	mov	r3, r2
 800c0a0:	e7cc      	b.n	800c03c <_malloc_r+0x80>
 800c0a2:	230c      	movs	r3, #12
 800c0a4:	4638      	mov	r0, r7
 800c0a6:	603b      	str	r3, [r7, #0]
 800c0a8:	f000 f80e 	bl	800c0c8 <__malloc_unlock>
 800c0ac:	e797      	b.n	800bfde <_malloc_r+0x22>
 800c0ae:	6025      	str	r5, [r4, #0]
 800c0b0:	e7dc      	b.n	800c06c <_malloc_r+0xb0>
 800c0b2:	605b      	str	r3, [r3, #4]
 800c0b4:	deff      	udf	#255	; 0xff
 800c0b6:	bf00      	nop
 800c0b8:	20001fd0 	.word	0x20001fd0

0800c0bc <__malloc_lock>:
 800c0bc:	4801      	ldr	r0, [pc, #4]	; (800c0c4 <__malloc_lock+0x8>)
 800c0be:	f000 b8d7 	b.w	800c270 <__retarget_lock_acquire_recursive>
 800c0c2:	bf00      	nop
 800c0c4:	20002114 	.word	0x20002114

0800c0c8 <__malloc_unlock>:
 800c0c8:	4801      	ldr	r0, [pc, #4]	; (800c0d0 <__malloc_unlock+0x8>)
 800c0ca:	f000 b8d2 	b.w	800c272 <__retarget_lock_release_recursive>
 800c0ce:	bf00      	nop
 800c0d0:	20002114 	.word	0x20002114

0800c0d4 <siprintf>:
 800c0d4:	b40e      	push	{r1, r2, r3}
 800c0d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0da:	b500      	push	{lr}
 800c0dc:	b09c      	sub	sp, #112	; 0x70
 800c0de:	ab1d      	add	r3, sp, #116	; 0x74
 800c0e0:	9002      	str	r0, [sp, #8]
 800c0e2:	9006      	str	r0, [sp, #24]
 800c0e4:	9107      	str	r1, [sp, #28]
 800c0e6:	9104      	str	r1, [sp, #16]
 800c0e8:	4808      	ldr	r0, [pc, #32]	; (800c10c <siprintf+0x38>)
 800c0ea:	4909      	ldr	r1, [pc, #36]	; (800c110 <siprintf+0x3c>)
 800c0ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0f0:	9105      	str	r1, [sp, #20]
 800c0f2:	6800      	ldr	r0, [r0, #0]
 800c0f4:	a902      	add	r1, sp, #8
 800c0f6:	9301      	str	r3, [sp, #4]
 800c0f8:	f000 f974 	bl	800c3e4 <_svfiprintf_r>
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	9b02      	ldr	r3, [sp, #8]
 800c100:	701a      	strb	r2, [r3, #0]
 800c102:	b01c      	add	sp, #112	; 0x70
 800c104:	f85d eb04 	ldr.w	lr, [sp], #4
 800c108:	b003      	add	sp, #12
 800c10a:	4770      	bx	lr
 800c10c:	2000025c 	.word	0x2000025c
 800c110:	ffff0208 	.word	0xffff0208

0800c114 <memset>:
 800c114:	4603      	mov	r3, r0
 800c116:	4402      	add	r2, r0
 800c118:	4293      	cmp	r3, r2
 800c11a:	d100      	bne.n	800c11e <memset+0xa>
 800c11c:	4770      	bx	lr
 800c11e:	f803 1b01 	strb.w	r1, [r3], #1
 800c122:	e7f9      	b.n	800c118 <memset+0x4>

0800c124 <strstr>:
 800c124:	780a      	ldrb	r2, [r1, #0]
 800c126:	b570      	push	{r4, r5, r6, lr}
 800c128:	b96a      	cbnz	r2, 800c146 <strstr+0x22>
 800c12a:	bd70      	pop	{r4, r5, r6, pc}
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d109      	bne.n	800c144 <strstr+0x20>
 800c130:	460c      	mov	r4, r1
 800c132:	4605      	mov	r5, r0
 800c134:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d0f6      	beq.n	800c12a <strstr+0x6>
 800c13c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c140:	429e      	cmp	r6, r3
 800c142:	d0f7      	beq.n	800c134 <strstr+0x10>
 800c144:	3001      	adds	r0, #1
 800c146:	7803      	ldrb	r3, [r0, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d1ef      	bne.n	800c12c <strstr+0x8>
 800c14c:	4618      	mov	r0, r3
 800c14e:	e7ec      	b.n	800c12a <strstr+0x6>

0800c150 <_reclaim_reent>:
 800c150:	4b29      	ldr	r3, [pc, #164]	; (800c1f8 <_reclaim_reent+0xa8>)
 800c152:	b570      	push	{r4, r5, r6, lr}
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4604      	mov	r4, r0
 800c158:	4283      	cmp	r3, r0
 800c15a:	d04b      	beq.n	800c1f4 <_reclaim_reent+0xa4>
 800c15c:	69c3      	ldr	r3, [r0, #28]
 800c15e:	b143      	cbz	r3, 800c172 <_reclaim_reent+0x22>
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d144      	bne.n	800c1f0 <_reclaim_reent+0xa0>
 800c166:	69e3      	ldr	r3, [r4, #28]
 800c168:	6819      	ldr	r1, [r3, #0]
 800c16a:	b111      	cbz	r1, 800c172 <_reclaim_reent+0x22>
 800c16c:	4620      	mov	r0, r4
 800c16e:	f000 f897 	bl	800c2a0 <_free_r>
 800c172:	6961      	ldr	r1, [r4, #20]
 800c174:	b111      	cbz	r1, 800c17c <_reclaim_reent+0x2c>
 800c176:	4620      	mov	r0, r4
 800c178:	f000 f892 	bl	800c2a0 <_free_r>
 800c17c:	69e1      	ldr	r1, [r4, #28]
 800c17e:	b111      	cbz	r1, 800c186 <_reclaim_reent+0x36>
 800c180:	4620      	mov	r0, r4
 800c182:	f000 f88d 	bl	800c2a0 <_free_r>
 800c186:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c188:	b111      	cbz	r1, 800c190 <_reclaim_reent+0x40>
 800c18a:	4620      	mov	r0, r4
 800c18c:	f000 f888 	bl	800c2a0 <_free_r>
 800c190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c192:	b111      	cbz	r1, 800c19a <_reclaim_reent+0x4a>
 800c194:	4620      	mov	r0, r4
 800c196:	f000 f883 	bl	800c2a0 <_free_r>
 800c19a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c19c:	b111      	cbz	r1, 800c1a4 <_reclaim_reent+0x54>
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f000 f87e 	bl	800c2a0 <_free_r>
 800c1a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c1a6:	b111      	cbz	r1, 800c1ae <_reclaim_reent+0x5e>
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f000 f879 	bl	800c2a0 <_free_r>
 800c1ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c1b0:	b111      	cbz	r1, 800c1b8 <_reclaim_reent+0x68>
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f000 f874 	bl	800c2a0 <_free_r>
 800c1b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c1ba:	b111      	cbz	r1, 800c1c2 <_reclaim_reent+0x72>
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f000 f86f 	bl	800c2a0 <_free_r>
 800c1c2:	6a23      	ldr	r3, [r4, #32]
 800c1c4:	b1b3      	cbz	r3, 800c1f4 <_reclaim_reent+0xa4>
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c1cc:	4718      	bx	r3
 800c1ce:	5949      	ldr	r1, [r1, r5]
 800c1d0:	b941      	cbnz	r1, 800c1e4 <_reclaim_reent+0x94>
 800c1d2:	3504      	adds	r5, #4
 800c1d4:	69e3      	ldr	r3, [r4, #28]
 800c1d6:	2d80      	cmp	r5, #128	; 0x80
 800c1d8:	68d9      	ldr	r1, [r3, #12]
 800c1da:	d1f8      	bne.n	800c1ce <_reclaim_reent+0x7e>
 800c1dc:	4620      	mov	r0, r4
 800c1de:	f000 f85f 	bl	800c2a0 <_free_r>
 800c1e2:	e7c0      	b.n	800c166 <_reclaim_reent+0x16>
 800c1e4:	680e      	ldr	r6, [r1, #0]
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f000 f85a 	bl	800c2a0 <_free_r>
 800c1ec:	4631      	mov	r1, r6
 800c1ee:	e7ef      	b.n	800c1d0 <_reclaim_reent+0x80>
 800c1f0:	2500      	movs	r5, #0
 800c1f2:	e7ef      	b.n	800c1d4 <_reclaim_reent+0x84>
 800c1f4:	bd70      	pop	{r4, r5, r6, pc}
 800c1f6:	bf00      	nop
 800c1f8:	2000025c 	.word	0x2000025c

0800c1fc <_sbrk_r>:
 800c1fc:	b538      	push	{r3, r4, r5, lr}
 800c1fe:	2300      	movs	r3, #0
 800c200:	4d05      	ldr	r5, [pc, #20]	; (800c218 <_sbrk_r+0x1c>)
 800c202:	4604      	mov	r4, r0
 800c204:	4608      	mov	r0, r1
 800c206:	602b      	str	r3, [r5, #0]
 800c208:	f7f7 f8f4 	bl	80033f4 <_sbrk>
 800c20c:	1c43      	adds	r3, r0, #1
 800c20e:	d102      	bne.n	800c216 <_sbrk_r+0x1a>
 800c210:	682b      	ldr	r3, [r5, #0]
 800c212:	b103      	cbz	r3, 800c216 <_sbrk_r+0x1a>
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	bd38      	pop	{r3, r4, r5, pc}
 800c218:	20002110 	.word	0x20002110

0800c21c <__errno>:
 800c21c:	4b01      	ldr	r3, [pc, #4]	; (800c224 <__errno+0x8>)
 800c21e:	6818      	ldr	r0, [r3, #0]
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	2000025c 	.word	0x2000025c

0800c228 <__libc_init_array>:
 800c228:	b570      	push	{r4, r5, r6, lr}
 800c22a:	2600      	movs	r6, #0
 800c22c:	4d0c      	ldr	r5, [pc, #48]	; (800c260 <__libc_init_array+0x38>)
 800c22e:	4c0d      	ldr	r4, [pc, #52]	; (800c264 <__libc_init_array+0x3c>)
 800c230:	1b64      	subs	r4, r4, r5
 800c232:	10a4      	asrs	r4, r4, #2
 800c234:	42a6      	cmp	r6, r4
 800c236:	d109      	bne.n	800c24c <__libc_init_array+0x24>
 800c238:	f000 fbc6 	bl	800c9c8 <_init>
 800c23c:	2600      	movs	r6, #0
 800c23e:	4d0a      	ldr	r5, [pc, #40]	; (800c268 <__libc_init_array+0x40>)
 800c240:	4c0a      	ldr	r4, [pc, #40]	; (800c26c <__libc_init_array+0x44>)
 800c242:	1b64      	subs	r4, r4, r5
 800c244:	10a4      	asrs	r4, r4, #2
 800c246:	42a6      	cmp	r6, r4
 800c248:	d105      	bne.n	800c256 <__libc_init_array+0x2e>
 800c24a:	bd70      	pop	{r4, r5, r6, pc}
 800c24c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c250:	4798      	blx	r3
 800c252:	3601      	adds	r6, #1
 800c254:	e7ee      	b.n	800c234 <__libc_init_array+0xc>
 800c256:	f855 3b04 	ldr.w	r3, [r5], #4
 800c25a:	4798      	blx	r3
 800c25c:	3601      	adds	r6, #1
 800c25e:	e7f2      	b.n	800c246 <__libc_init_array+0x1e>
 800c260:	0800cdbc 	.word	0x0800cdbc
 800c264:	0800cdbc 	.word	0x0800cdbc
 800c268:	0800cdbc 	.word	0x0800cdbc
 800c26c:	0800cdc0 	.word	0x0800cdc0

0800c270 <__retarget_lock_acquire_recursive>:
 800c270:	4770      	bx	lr

0800c272 <__retarget_lock_release_recursive>:
 800c272:	4770      	bx	lr

0800c274 <strcpy>:
 800c274:	4603      	mov	r3, r0
 800c276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c27a:	f803 2b01 	strb.w	r2, [r3], #1
 800c27e:	2a00      	cmp	r2, #0
 800c280:	d1f9      	bne.n	800c276 <strcpy+0x2>
 800c282:	4770      	bx	lr

0800c284 <memcpy>:
 800c284:	440a      	add	r2, r1
 800c286:	4291      	cmp	r1, r2
 800c288:	f100 33ff 	add.w	r3, r0, #4294967295
 800c28c:	d100      	bne.n	800c290 <memcpy+0xc>
 800c28e:	4770      	bx	lr
 800c290:	b510      	push	{r4, lr}
 800c292:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c296:	4291      	cmp	r1, r2
 800c298:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c29c:	d1f9      	bne.n	800c292 <memcpy+0xe>
 800c29e:	bd10      	pop	{r4, pc}

0800c2a0 <_free_r>:
 800c2a0:	b538      	push	{r3, r4, r5, lr}
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	2900      	cmp	r1, #0
 800c2a6:	d040      	beq.n	800c32a <_free_r+0x8a>
 800c2a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ac:	1f0c      	subs	r4, r1, #4
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	bfb8      	it	lt
 800c2b2:	18e4      	addlt	r4, r4, r3
 800c2b4:	f7ff ff02 	bl	800c0bc <__malloc_lock>
 800c2b8:	4a1c      	ldr	r2, [pc, #112]	; (800c32c <_free_r+0x8c>)
 800c2ba:	6813      	ldr	r3, [r2, #0]
 800c2bc:	b933      	cbnz	r3, 800c2cc <_free_r+0x2c>
 800c2be:	6063      	str	r3, [r4, #4]
 800c2c0:	6014      	str	r4, [r2, #0]
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2c8:	f7ff befe 	b.w	800c0c8 <__malloc_unlock>
 800c2cc:	42a3      	cmp	r3, r4
 800c2ce:	d908      	bls.n	800c2e2 <_free_r+0x42>
 800c2d0:	6820      	ldr	r0, [r4, #0]
 800c2d2:	1821      	adds	r1, r4, r0
 800c2d4:	428b      	cmp	r3, r1
 800c2d6:	bf01      	itttt	eq
 800c2d8:	6819      	ldreq	r1, [r3, #0]
 800c2da:	685b      	ldreq	r3, [r3, #4]
 800c2dc:	1809      	addeq	r1, r1, r0
 800c2de:	6021      	streq	r1, [r4, #0]
 800c2e0:	e7ed      	b.n	800c2be <_free_r+0x1e>
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	b10b      	cbz	r3, 800c2ec <_free_r+0x4c>
 800c2e8:	42a3      	cmp	r3, r4
 800c2ea:	d9fa      	bls.n	800c2e2 <_free_r+0x42>
 800c2ec:	6811      	ldr	r1, [r2, #0]
 800c2ee:	1850      	adds	r0, r2, r1
 800c2f0:	42a0      	cmp	r0, r4
 800c2f2:	d10b      	bne.n	800c30c <_free_r+0x6c>
 800c2f4:	6820      	ldr	r0, [r4, #0]
 800c2f6:	4401      	add	r1, r0
 800c2f8:	1850      	adds	r0, r2, r1
 800c2fa:	4283      	cmp	r3, r0
 800c2fc:	6011      	str	r1, [r2, #0]
 800c2fe:	d1e0      	bne.n	800c2c2 <_free_r+0x22>
 800c300:	6818      	ldr	r0, [r3, #0]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	4408      	add	r0, r1
 800c306:	6010      	str	r0, [r2, #0]
 800c308:	6053      	str	r3, [r2, #4]
 800c30a:	e7da      	b.n	800c2c2 <_free_r+0x22>
 800c30c:	d902      	bls.n	800c314 <_free_r+0x74>
 800c30e:	230c      	movs	r3, #12
 800c310:	602b      	str	r3, [r5, #0]
 800c312:	e7d6      	b.n	800c2c2 <_free_r+0x22>
 800c314:	6820      	ldr	r0, [r4, #0]
 800c316:	1821      	adds	r1, r4, r0
 800c318:	428b      	cmp	r3, r1
 800c31a:	bf01      	itttt	eq
 800c31c:	6819      	ldreq	r1, [r3, #0]
 800c31e:	685b      	ldreq	r3, [r3, #4]
 800c320:	1809      	addeq	r1, r1, r0
 800c322:	6021      	streq	r1, [r4, #0]
 800c324:	6063      	str	r3, [r4, #4]
 800c326:	6054      	str	r4, [r2, #4]
 800c328:	e7cb      	b.n	800c2c2 <_free_r+0x22>
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
 800c32c:	20001fd0 	.word	0x20001fd0

0800c330 <__ssputs_r>:
 800c330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c334:	461f      	mov	r7, r3
 800c336:	688e      	ldr	r6, [r1, #8]
 800c338:	4682      	mov	sl, r0
 800c33a:	42be      	cmp	r6, r7
 800c33c:	460c      	mov	r4, r1
 800c33e:	4690      	mov	r8, r2
 800c340:	680b      	ldr	r3, [r1, #0]
 800c342:	d82c      	bhi.n	800c39e <__ssputs_r+0x6e>
 800c344:	898a      	ldrh	r2, [r1, #12]
 800c346:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c34a:	d026      	beq.n	800c39a <__ssputs_r+0x6a>
 800c34c:	6965      	ldr	r5, [r4, #20]
 800c34e:	6909      	ldr	r1, [r1, #16]
 800c350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c354:	eba3 0901 	sub.w	r9, r3, r1
 800c358:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c35c:	1c7b      	adds	r3, r7, #1
 800c35e:	444b      	add	r3, r9
 800c360:	106d      	asrs	r5, r5, #1
 800c362:	429d      	cmp	r5, r3
 800c364:	bf38      	it	cc
 800c366:	461d      	movcc	r5, r3
 800c368:	0553      	lsls	r3, r2, #21
 800c36a:	d527      	bpl.n	800c3bc <__ssputs_r+0x8c>
 800c36c:	4629      	mov	r1, r5
 800c36e:	f7ff fe25 	bl	800bfbc <_malloc_r>
 800c372:	4606      	mov	r6, r0
 800c374:	b360      	cbz	r0, 800c3d0 <__ssputs_r+0xa0>
 800c376:	464a      	mov	r2, r9
 800c378:	6921      	ldr	r1, [r4, #16]
 800c37a:	f7ff ff83 	bl	800c284 <memcpy>
 800c37e:	89a3      	ldrh	r3, [r4, #12]
 800c380:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c388:	81a3      	strh	r3, [r4, #12]
 800c38a:	6126      	str	r6, [r4, #16]
 800c38c:	444e      	add	r6, r9
 800c38e:	6026      	str	r6, [r4, #0]
 800c390:	463e      	mov	r6, r7
 800c392:	6165      	str	r5, [r4, #20]
 800c394:	eba5 0509 	sub.w	r5, r5, r9
 800c398:	60a5      	str	r5, [r4, #8]
 800c39a:	42be      	cmp	r6, r7
 800c39c:	d900      	bls.n	800c3a0 <__ssputs_r+0x70>
 800c39e:	463e      	mov	r6, r7
 800c3a0:	4632      	mov	r2, r6
 800c3a2:	4641      	mov	r1, r8
 800c3a4:	6820      	ldr	r0, [r4, #0]
 800c3a6:	f000 faaf 	bl	800c908 <memmove>
 800c3aa:	2000      	movs	r0, #0
 800c3ac:	68a3      	ldr	r3, [r4, #8]
 800c3ae:	1b9b      	subs	r3, r3, r6
 800c3b0:	60a3      	str	r3, [r4, #8]
 800c3b2:	6823      	ldr	r3, [r4, #0]
 800c3b4:	4433      	add	r3, r6
 800c3b6:	6023      	str	r3, [r4, #0]
 800c3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3bc:	462a      	mov	r2, r5
 800c3be:	f000 facb 	bl	800c958 <_realloc_r>
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d1e0      	bne.n	800c38a <__ssputs_r+0x5a>
 800c3c8:	4650      	mov	r0, sl
 800c3ca:	6921      	ldr	r1, [r4, #16]
 800c3cc:	f7ff ff68 	bl	800c2a0 <_free_r>
 800c3d0:	230c      	movs	r3, #12
 800c3d2:	f8ca 3000 	str.w	r3, [sl]
 800c3d6:	89a3      	ldrh	r3, [r4, #12]
 800c3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3e0:	81a3      	strh	r3, [r4, #12]
 800c3e2:	e7e9      	b.n	800c3b8 <__ssputs_r+0x88>

0800c3e4 <_svfiprintf_r>:
 800c3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e8:	4698      	mov	r8, r3
 800c3ea:	898b      	ldrh	r3, [r1, #12]
 800c3ec:	4607      	mov	r7, r0
 800c3ee:	061b      	lsls	r3, r3, #24
 800c3f0:	460d      	mov	r5, r1
 800c3f2:	4614      	mov	r4, r2
 800c3f4:	b09d      	sub	sp, #116	; 0x74
 800c3f6:	d50e      	bpl.n	800c416 <_svfiprintf_r+0x32>
 800c3f8:	690b      	ldr	r3, [r1, #16]
 800c3fa:	b963      	cbnz	r3, 800c416 <_svfiprintf_r+0x32>
 800c3fc:	2140      	movs	r1, #64	; 0x40
 800c3fe:	f7ff fddd 	bl	800bfbc <_malloc_r>
 800c402:	6028      	str	r0, [r5, #0]
 800c404:	6128      	str	r0, [r5, #16]
 800c406:	b920      	cbnz	r0, 800c412 <_svfiprintf_r+0x2e>
 800c408:	230c      	movs	r3, #12
 800c40a:	603b      	str	r3, [r7, #0]
 800c40c:	f04f 30ff 	mov.w	r0, #4294967295
 800c410:	e0d0      	b.n	800c5b4 <_svfiprintf_r+0x1d0>
 800c412:	2340      	movs	r3, #64	; 0x40
 800c414:	616b      	str	r3, [r5, #20]
 800c416:	2300      	movs	r3, #0
 800c418:	9309      	str	r3, [sp, #36]	; 0x24
 800c41a:	2320      	movs	r3, #32
 800c41c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c420:	2330      	movs	r3, #48	; 0x30
 800c422:	f04f 0901 	mov.w	r9, #1
 800c426:	f8cd 800c 	str.w	r8, [sp, #12]
 800c42a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c5cc <_svfiprintf_r+0x1e8>
 800c42e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c432:	4623      	mov	r3, r4
 800c434:	469a      	mov	sl, r3
 800c436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c43a:	b10a      	cbz	r2, 800c440 <_svfiprintf_r+0x5c>
 800c43c:	2a25      	cmp	r2, #37	; 0x25
 800c43e:	d1f9      	bne.n	800c434 <_svfiprintf_r+0x50>
 800c440:	ebba 0b04 	subs.w	fp, sl, r4
 800c444:	d00b      	beq.n	800c45e <_svfiprintf_r+0x7a>
 800c446:	465b      	mov	r3, fp
 800c448:	4622      	mov	r2, r4
 800c44a:	4629      	mov	r1, r5
 800c44c:	4638      	mov	r0, r7
 800c44e:	f7ff ff6f 	bl	800c330 <__ssputs_r>
 800c452:	3001      	adds	r0, #1
 800c454:	f000 80a9 	beq.w	800c5aa <_svfiprintf_r+0x1c6>
 800c458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c45a:	445a      	add	r2, fp
 800c45c:	9209      	str	r2, [sp, #36]	; 0x24
 800c45e:	f89a 3000 	ldrb.w	r3, [sl]
 800c462:	2b00      	cmp	r3, #0
 800c464:	f000 80a1 	beq.w	800c5aa <_svfiprintf_r+0x1c6>
 800c468:	2300      	movs	r3, #0
 800c46a:	f04f 32ff 	mov.w	r2, #4294967295
 800c46e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c472:	f10a 0a01 	add.w	sl, sl, #1
 800c476:	9304      	str	r3, [sp, #16]
 800c478:	9307      	str	r3, [sp, #28]
 800c47a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c47e:	931a      	str	r3, [sp, #104]	; 0x68
 800c480:	4654      	mov	r4, sl
 800c482:	2205      	movs	r2, #5
 800c484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c488:	4850      	ldr	r0, [pc, #320]	; (800c5cc <_svfiprintf_r+0x1e8>)
 800c48a:	f000 fa57 	bl	800c93c <memchr>
 800c48e:	9a04      	ldr	r2, [sp, #16]
 800c490:	b9d8      	cbnz	r0, 800c4ca <_svfiprintf_r+0xe6>
 800c492:	06d0      	lsls	r0, r2, #27
 800c494:	bf44      	itt	mi
 800c496:	2320      	movmi	r3, #32
 800c498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c49c:	0711      	lsls	r1, r2, #28
 800c49e:	bf44      	itt	mi
 800c4a0:	232b      	movmi	r3, #43	; 0x2b
 800c4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c4aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ac:	d015      	beq.n	800c4da <_svfiprintf_r+0xf6>
 800c4ae:	4654      	mov	r4, sl
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	f04f 0c0a 	mov.w	ip, #10
 800c4b6:	9a07      	ldr	r2, [sp, #28]
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4be:	3b30      	subs	r3, #48	; 0x30
 800c4c0:	2b09      	cmp	r3, #9
 800c4c2:	d94d      	bls.n	800c560 <_svfiprintf_r+0x17c>
 800c4c4:	b1b0      	cbz	r0, 800c4f4 <_svfiprintf_r+0x110>
 800c4c6:	9207      	str	r2, [sp, #28]
 800c4c8:	e014      	b.n	800c4f4 <_svfiprintf_r+0x110>
 800c4ca:	eba0 0308 	sub.w	r3, r0, r8
 800c4ce:	fa09 f303 	lsl.w	r3, r9, r3
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	46a2      	mov	sl, r4
 800c4d6:	9304      	str	r3, [sp, #16]
 800c4d8:	e7d2      	b.n	800c480 <_svfiprintf_r+0x9c>
 800c4da:	9b03      	ldr	r3, [sp, #12]
 800c4dc:	1d19      	adds	r1, r3, #4
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	9103      	str	r1, [sp, #12]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	bfbb      	ittet	lt
 800c4e6:	425b      	neglt	r3, r3
 800c4e8:	f042 0202 	orrlt.w	r2, r2, #2
 800c4ec:	9307      	strge	r3, [sp, #28]
 800c4ee:	9307      	strlt	r3, [sp, #28]
 800c4f0:	bfb8      	it	lt
 800c4f2:	9204      	strlt	r2, [sp, #16]
 800c4f4:	7823      	ldrb	r3, [r4, #0]
 800c4f6:	2b2e      	cmp	r3, #46	; 0x2e
 800c4f8:	d10c      	bne.n	800c514 <_svfiprintf_r+0x130>
 800c4fa:	7863      	ldrb	r3, [r4, #1]
 800c4fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c4fe:	d134      	bne.n	800c56a <_svfiprintf_r+0x186>
 800c500:	9b03      	ldr	r3, [sp, #12]
 800c502:	3402      	adds	r4, #2
 800c504:	1d1a      	adds	r2, r3, #4
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	9203      	str	r2, [sp, #12]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	bfb8      	it	lt
 800c50e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c512:	9305      	str	r3, [sp, #20]
 800c514:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c5d0 <_svfiprintf_r+0x1ec>
 800c518:	2203      	movs	r2, #3
 800c51a:	4650      	mov	r0, sl
 800c51c:	7821      	ldrb	r1, [r4, #0]
 800c51e:	f000 fa0d 	bl	800c93c <memchr>
 800c522:	b138      	cbz	r0, 800c534 <_svfiprintf_r+0x150>
 800c524:	2240      	movs	r2, #64	; 0x40
 800c526:	9b04      	ldr	r3, [sp, #16]
 800c528:	eba0 000a 	sub.w	r0, r0, sl
 800c52c:	4082      	lsls	r2, r0
 800c52e:	4313      	orrs	r3, r2
 800c530:	3401      	adds	r4, #1
 800c532:	9304      	str	r3, [sp, #16]
 800c534:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c538:	2206      	movs	r2, #6
 800c53a:	4826      	ldr	r0, [pc, #152]	; (800c5d4 <_svfiprintf_r+0x1f0>)
 800c53c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c540:	f000 f9fc 	bl	800c93c <memchr>
 800c544:	2800      	cmp	r0, #0
 800c546:	d038      	beq.n	800c5ba <_svfiprintf_r+0x1d6>
 800c548:	4b23      	ldr	r3, [pc, #140]	; (800c5d8 <_svfiprintf_r+0x1f4>)
 800c54a:	bb1b      	cbnz	r3, 800c594 <_svfiprintf_r+0x1b0>
 800c54c:	9b03      	ldr	r3, [sp, #12]
 800c54e:	3307      	adds	r3, #7
 800c550:	f023 0307 	bic.w	r3, r3, #7
 800c554:	3308      	adds	r3, #8
 800c556:	9303      	str	r3, [sp, #12]
 800c558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c55a:	4433      	add	r3, r6
 800c55c:	9309      	str	r3, [sp, #36]	; 0x24
 800c55e:	e768      	b.n	800c432 <_svfiprintf_r+0x4e>
 800c560:	460c      	mov	r4, r1
 800c562:	2001      	movs	r0, #1
 800c564:	fb0c 3202 	mla	r2, ip, r2, r3
 800c568:	e7a6      	b.n	800c4b8 <_svfiprintf_r+0xd4>
 800c56a:	2300      	movs	r3, #0
 800c56c:	f04f 0c0a 	mov.w	ip, #10
 800c570:	4619      	mov	r1, r3
 800c572:	3401      	adds	r4, #1
 800c574:	9305      	str	r3, [sp, #20]
 800c576:	4620      	mov	r0, r4
 800c578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c57c:	3a30      	subs	r2, #48	; 0x30
 800c57e:	2a09      	cmp	r2, #9
 800c580:	d903      	bls.n	800c58a <_svfiprintf_r+0x1a6>
 800c582:	2b00      	cmp	r3, #0
 800c584:	d0c6      	beq.n	800c514 <_svfiprintf_r+0x130>
 800c586:	9105      	str	r1, [sp, #20]
 800c588:	e7c4      	b.n	800c514 <_svfiprintf_r+0x130>
 800c58a:	4604      	mov	r4, r0
 800c58c:	2301      	movs	r3, #1
 800c58e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c592:	e7f0      	b.n	800c576 <_svfiprintf_r+0x192>
 800c594:	ab03      	add	r3, sp, #12
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	462a      	mov	r2, r5
 800c59a:	4638      	mov	r0, r7
 800c59c:	4b0f      	ldr	r3, [pc, #60]	; (800c5dc <_svfiprintf_r+0x1f8>)
 800c59e:	a904      	add	r1, sp, #16
 800c5a0:	f3af 8000 	nop.w
 800c5a4:	1c42      	adds	r2, r0, #1
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	d1d6      	bne.n	800c558 <_svfiprintf_r+0x174>
 800c5aa:	89ab      	ldrh	r3, [r5, #12]
 800c5ac:	065b      	lsls	r3, r3, #25
 800c5ae:	f53f af2d 	bmi.w	800c40c <_svfiprintf_r+0x28>
 800c5b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5b4:	b01d      	add	sp, #116	; 0x74
 800c5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ba:	ab03      	add	r3, sp, #12
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	462a      	mov	r2, r5
 800c5c0:	4638      	mov	r0, r7
 800c5c2:	4b06      	ldr	r3, [pc, #24]	; (800c5dc <_svfiprintf_r+0x1f8>)
 800c5c4:	a904      	add	r1, sp, #16
 800c5c6:	f000 f87d 	bl	800c6c4 <_printf_i>
 800c5ca:	e7eb      	b.n	800c5a4 <_svfiprintf_r+0x1c0>
 800c5cc:	0800cd86 	.word	0x0800cd86
 800c5d0:	0800cd8c 	.word	0x0800cd8c
 800c5d4:	0800cd90 	.word	0x0800cd90
 800c5d8:	00000000 	.word	0x00000000
 800c5dc:	0800c331 	.word	0x0800c331

0800c5e0 <_printf_common>:
 800c5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e4:	4616      	mov	r6, r2
 800c5e6:	4699      	mov	r9, r3
 800c5e8:	688a      	ldr	r2, [r1, #8]
 800c5ea:	690b      	ldr	r3, [r1, #16]
 800c5ec:	4607      	mov	r7, r0
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	bfb8      	it	lt
 800c5f2:	4613      	movlt	r3, r2
 800c5f4:	6033      	str	r3, [r6, #0]
 800c5f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5fa:	460c      	mov	r4, r1
 800c5fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c600:	b10a      	cbz	r2, 800c606 <_printf_common+0x26>
 800c602:	3301      	adds	r3, #1
 800c604:	6033      	str	r3, [r6, #0]
 800c606:	6823      	ldr	r3, [r4, #0]
 800c608:	0699      	lsls	r1, r3, #26
 800c60a:	bf42      	ittt	mi
 800c60c:	6833      	ldrmi	r3, [r6, #0]
 800c60e:	3302      	addmi	r3, #2
 800c610:	6033      	strmi	r3, [r6, #0]
 800c612:	6825      	ldr	r5, [r4, #0]
 800c614:	f015 0506 	ands.w	r5, r5, #6
 800c618:	d106      	bne.n	800c628 <_printf_common+0x48>
 800c61a:	f104 0a19 	add.w	sl, r4, #25
 800c61e:	68e3      	ldr	r3, [r4, #12]
 800c620:	6832      	ldr	r2, [r6, #0]
 800c622:	1a9b      	subs	r3, r3, r2
 800c624:	42ab      	cmp	r3, r5
 800c626:	dc2b      	bgt.n	800c680 <_printf_common+0xa0>
 800c628:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c62c:	1e13      	subs	r3, r2, #0
 800c62e:	6822      	ldr	r2, [r4, #0]
 800c630:	bf18      	it	ne
 800c632:	2301      	movne	r3, #1
 800c634:	0692      	lsls	r2, r2, #26
 800c636:	d430      	bmi.n	800c69a <_printf_common+0xba>
 800c638:	4649      	mov	r1, r9
 800c63a:	4638      	mov	r0, r7
 800c63c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c640:	47c0      	blx	r8
 800c642:	3001      	adds	r0, #1
 800c644:	d023      	beq.n	800c68e <_printf_common+0xae>
 800c646:	6823      	ldr	r3, [r4, #0]
 800c648:	6922      	ldr	r2, [r4, #16]
 800c64a:	f003 0306 	and.w	r3, r3, #6
 800c64e:	2b04      	cmp	r3, #4
 800c650:	bf14      	ite	ne
 800c652:	2500      	movne	r5, #0
 800c654:	6833      	ldreq	r3, [r6, #0]
 800c656:	f04f 0600 	mov.w	r6, #0
 800c65a:	bf08      	it	eq
 800c65c:	68e5      	ldreq	r5, [r4, #12]
 800c65e:	f104 041a 	add.w	r4, r4, #26
 800c662:	bf08      	it	eq
 800c664:	1aed      	subeq	r5, r5, r3
 800c666:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c66a:	bf08      	it	eq
 800c66c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c670:	4293      	cmp	r3, r2
 800c672:	bfc4      	itt	gt
 800c674:	1a9b      	subgt	r3, r3, r2
 800c676:	18ed      	addgt	r5, r5, r3
 800c678:	42b5      	cmp	r5, r6
 800c67a:	d11a      	bne.n	800c6b2 <_printf_common+0xd2>
 800c67c:	2000      	movs	r0, #0
 800c67e:	e008      	b.n	800c692 <_printf_common+0xb2>
 800c680:	2301      	movs	r3, #1
 800c682:	4652      	mov	r2, sl
 800c684:	4649      	mov	r1, r9
 800c686:	4638      	mov	r0, r7
 800c688:	47c0      	blx	r8
 800c68a:	3001      	adds	r0, #1
 800c68c:	d103      	bne.n	800c696 <_printf_common+0xb6>
 800c68e:	f04f 30ff 	mov.w	r0, #4294967295
 800c692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c696:	3501      	adds	r5, #1
 800c698:	e7c1      	b.n	800c61e <_printf_common+0x3e>
 800c69a:	2030      	movs	r0, #48	; 0x30
 800c69c:	18e1      	adds	r1, r4, r3
 800c69e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6a2:	1c5a      	adds	r2, r3, #1
 800c6a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6a8:	4422      	add	r2, r4
 800c6aa:	3302      	adds	r3, #2
 800c6ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6b0:	e7c2      	b.n	800c638 <_printf_common+0x58>
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	4622      	mov	r2, r4
 800c6b6:	4649      	mov	r1, r9
 800c6b8:	4638      	mov	r0, r7
 800c6ba:	47c0      	blx	r8
 800c6bc:	3001      	adds	r0, #1
 800c6be:	d0e6      	beq.n	800c68e <_printf_common+0xae>
 800c6c0:	3601      	adds	r6, #1
 800c6c2:	e7d9      	b.n	800c678 <_printf_common+0x98>

0800c6c4 <_printf_i>:
 800c6c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6c8:	7e0f      	ldrb	r7, [r1, #24]
 800c6ca:	4691      	mov	r9, r2
 800c6cc:	2f78      	cmp	r7, #120	; 0x78
 800c6ce:	4680      	mov	r8, r0
 800c6d0:	460c      	mov	r4, r1
 800c6d2:	469a      	mov	sl, r3
 800c6d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c6d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c6da:	d807      	bhi.n	800c6ec <_printf_i+0x28>
 800c6dc:	2f62      	cmp	r7, #98	; 0x62
 800c6de:	d80a      	bhi.n	800c6f6 <_printf_i+0x32>
 800c6e0:	2f00      	cmp	r7, #0
 800c6e2:	f000 80d5 	beq.w	800c890 <_printf_i+0x1cc>
 800c6e6:	2f58      	cmp	r7, #88	; 0x58
 800c6e8:	f000 80c1 	beq.w	800c86e <_printf_i+0x1aa>
 800c6ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c6f4:	e03a      	b.n	800c76c <_printf_i+0xa8>
 800c6f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c6fa:	2b15      	cmp	r3, #21
 800c6fc:	d8f6      	bhi.n	800c6ec <_printf_i+0x28>
 800c6fe:	a101      	add	r1, pc, #4	; (adr r1, 800c704 <_printf_i+0x40>)
 800c700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c704:	0800c75d 	.word	0x0800c75d
 800c708:	0800c771 	.word	0x0800c771
 800c70c:	0800c6ed 	.word	0x0800c6ed
 800c710:	0800c6ed 	.word	0x0800c6ed
 800c714:	0800c6ed 	.word	0x0800c6ed
 800c718:	0800c6ed 	.word	0x0800c6ed
 800c71c:	0800c771 	.word	0x0800c771
 800c720:	0800c6ed 	.word	0x0800c6ed
 800c724:	0800c6ed 	.word	0x0800c6ed
 800c728:	0800c6ed 	.word	0x0800c6ed
 800c72c:	0800c6ed 	.word	0x0800c6ed
 800c730:	0800c877 	.word	0x0800c877
 800c734:	0800c79d 	.word	0x0800c79d
 800c738:	0800c831 	.word	0x0800c831
 800c73c:	0800c6ed 	.word	0x0800c6ed
 800c740:	0800c6ed 	.word	0x0800c6ed
 800c744:	0800c899 	.word	0x0800c899
 800c748:	0800c6ed 	.word	0x0800c6ed
 800c74c:	0800c79d 	.word	0x0800c79d
 800c750:	0800c6ed 	.word	0x0800c6ed
 800c754:	0800c6ed 	.word	0x0800c6ed
 800c758:	0800c839 	.word	0x0800c839
 800c75c:	682b      	ldr	r3, [r5, #0]
 800c75e:	1d1a      	adds	r2, r3, #4
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	602a      	str	r2, [r5, #0]
 800c764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c76c:	2301      	movs	r3, #1
 800c76e:	e0a0      	b.n	800c8b2 <_printf_i+0x1ee>
 800c770:	6820      	ldr	r0, [r4, #0]
 800c772:	682b      	ldr	r3, [r5, #0]
 800c774:	0607      	lsls	r7, r0, #24
 800c776:	f103 0104 	add.w	r1, r3, #4
 800c77a:	6029      	str	r1, [r5, #0]
 800c77c:	d501      	bpl.n	800c782 <_printf_i+0xbe>
 800c77e:	681e      	ldr	r6, [r3, #0]
 800c780:	e003      	b.n	800c78a <_printf_i+0xc6>
 800c782:	0646      	lsls	r6, r0, #25
 800c784:	d5fb      	bpl.n	800c77e <_printf_i+0xba>
 800c786:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c78a:	2e00      	cmp	r6, #0
 800c78c:	da03      	bge.n	800c796 <_printf_i+0xd2>
 800c78e:	232d      	movs	r3, #45	; 0x2d
 800c790:	4276      	negs	r6, r6
 800c792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c796:	230a      	movs	r3, #10
 800c798:	4859      	ldr	r0, [pc, #356]	; (800c900 <_printf_i+0x23c>)
 800c79a:	e012      	b.n	800c7c2 <_printf_i+0xfe>
 800c79c:	682b      	ldr	r3, [r5, #0]
 800c79e:	6820      	ldr	r0, [r4, #0]
 800c7a0:	1d19      	adds	r1, r3, #4
 800c7a2:	6029      	str	r1, [r5, #0]
 800c7a4:	0605      	lsls	r5, r0, #24
 800c7a6:	d501      	bpl.n	800c7ac <_printf_i+0xe8>
 800c7a8:	681e      	ldr	r6, [r3, #0]
 800c7aa:	e002      	b.n	800c7b2 <_printf_i+0xee>
 800c7ac:	0641      	lsls	r1, r0, #25
 800c7ae:	d5fb      	bpl.n	800c7a8 <_printf_i+0xe4>
 800c7b0:	881e      	ldrh	r6, [r3, #0]
 800c7b2:	2f6f      	cmp	r7, #111	; 0x6f
 800c7b4:	bf0c      	ite	eq
 800c7b6:	2308      	moveq	r3, #8
 800c7b8:	230a      	movne	r3, #10
 800c7ba:	4851      	ldr	r0, [pc, #324]	; (800c900 <_printf_i+0x23c>)
 800c7bc:	2100      	movs	r1, #0
 800c7be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7c2:	6865      	ldr	r5, [r4, #4]
 800c7c4:	2d00      	cmp	r5, #0
 800c7c6:	bfa8      	it	ge
 800c7c8:	6821      	ldrge	r1, [r4, #0]
 800c7ca:	60a5      	str	r5, [r4, #8]
 800c7cc:	bfa4      	itt	ge
 800c7ce:	f021 0104 	bicge.w	r1, r1, #4
 800c7d2:	6021      	strge	r1, [r4, #0]
 800c7d4:	b90e      	cbnz	r6, 800c7da <_printf_i+0x116>
 800c7d6:	2d00      	cmp	r5, #0
 800c7d8:	d04b      	beq.n	800c872 <_printf_i+0x1ae>
 800c7da:	4615      	mov	r5, r2
 800c7dc:	fbb6 f1f3 	udiv	r1, r6, r3
 800c7e0:	fb03 6711 	mls	r7, r3, r1, r6
 800c7e4:	5dc7      	ldrb	r7, [r0, r7]
 800c7e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c7ea:	4637      	mov	r7, r6
 800c7ec:	42bb      	cmp	r3, r7
 800c7ee:	460e      	mov	r6, r1
 800c7f0:	d9f4      	bls.n	800c7dc <_printf_i+0x118>
 800c7f2:	2b08      	cmp	r3, #8
 800c7f4:	d10b      	bne.n	800c80e <_printf_i+0x14a>
 800c7f6:	6823      	ldr	r3, [r4, #0]
 800c7f8:	07de      	lsls	r6, r3, #31
 800c7fa:	d508      	bpl.n	800c80e <_printf_i+0x14a>
 800c7fc:	6923      	ldr	r3, [r4, #16]
 800c7fe:	6861      	ldr	r1, [r4, #4]
 800c800:	4299      	cmp	r1, r3
 800c802:	bfde      	ittt	le
 800c804:	2330      	movle	r3, #48	; 0x30
 800c806:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c80a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c80e:	1b52      	subs	r2, r2, r5
 800c810:	6122      	str	r2, [r4, #16]
 800c812:	464b      	mov	r3, r9
 800c814:	4621      	mov	r1, r4
 800c816:	4640      	mov	r0, r8
 800c818:	f8cd a000 	str.w	sl, [sp]
 800c81c:	aa03      	add	r2, sp, #12
 800c81e:	f7ff fedf 	bl	800c5e0 <_printf_common>
 800c822:	3001      	adds	r0, #1
 800c824:	d14a      	bne.n	800c8bc <_printf_i+0x1f8>
 800c826:	f04f 30ff 	mov.w	r0, #4294967295
 800c82a:	b004      	add	sp, #16
 800c82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c830:	6823      	ldr	r3, [r4, #0]
 800c832:	f043 0320 	orr.w	r3, r3, #32
 800c836:	6023      	str	r3, [r4, #0]
 800c838:	2778      	movs	r7, #120	; 0x78
 800c83a:	4832      	ldr	r0, [pc, #200]	; (800c904 <_printf_i+0x240>)
 800c83c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c840:	6823      	ldr	r3, [r4, #0]
 800c842:	6829      	ldr	r1, [r5, #0]
 800c844:	061f      	lsls	r7, r3, #24
 800c846:	f851 6b04 	ldr.w	r6, [r1], #4
 800c84a:	d402      	bmi.n	800c852 <_printf_i+0x18e>
 800c84c:	065f      	lsls	r7, r3, #25
 800c84e:	bf48      	it	mi
 800c850:	b2b6      	uxthmi	r6, r6
 800c852:	07df      	lsls	r7, r3, #31
 800c854:	bf48      	it	mi
 800c856:	f043 0320 	orrmi.w	r3, r3, #32
 800c85a:	6029      	str	r1, [r5, #0]
 800c85c:	bf48      	it	mi
 800c85e:	6023      	strmi	r3, [r4, #0]
 800c860:	b91e      	cbnz	r6, 800c86a <_printf_i+0x1a6>
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	f023 0320 	bic.w	r3, r3, #32
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	2310      	movs	r3, #16
 800c86c:	e7a6      	b.n	800c7bc <_printf_i+0xf8>
 800c86e:	4824      	ldr	r0, [pc, #144]	; (800c900 <_printf_i+0x23c>)
 800c870:	e7e4      	b.n	800c83c <_printf_i+0x178>
 800c872:	4615      	mov	r5, r2
 800c874:	e7bd      	b.n	800c7f2 <_printf_i+0x12e>
 800c876:	682b      	ldr	r3, [r5, #0]
 800c878:	6826      	ldr	r6, [r4, #0]
 800c87a:	1d18      	adds	r0, r3, #4
 800c87c:	6961      	ldr	r1, [r4, #20]
 800c87e:	6028      	str	r0, [r5, #0]
 800c880:	0635      	lsls	r5, r6, #24
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	d501      	bpl.n	800c88a <_printf_i+0x1c6>
 800c886:	6019      	str	r1, [r3, #0]
 800c888:	e002      	b.n	800c890 <_printf_i+0x1cc>
 800c88a:	0670      	lsls	r0, r6, #25
 800c88c:	d5fb      	bpl.n	800c886 <_printf_i+0x1c2>
 800c88e:	8019      	strh	r1, [r3, #0]
 800c890:	2300      	movs	r3, #0
 800c892:	4615      	mov	r5, r2
 800c894:	6123      	str	r3, [r4, #16]
 800c896:	e7bc      	b.n	800c812 <_printf_i+0x14e>
 800c898:	682b      	ldr	r3, [r5, #0]
 800c89a:	2100      	movs	r1, #0
 800c89c:	1d1a      	adds	r2, r3, #4
 800c89e:	602a      	str	r2, [r5, #0]
 800c8a0:	681d      	ldr	r5, [r3, #0]
 800c8a2:	6862      	ldr	r2, [r4, #4]
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	f000 f849 	bl	800c93c <memchr>
 800c8aa:	b108      	cbz	r0, 800c8b0 <_printf_i+0x1ec>
 800c8ac:	1b40      	subs	r0, r0, r5
 800c8ae:	6060      	str	r0, [r4, #4]
 800c8b0:	6863      	ldr	r3, [r4, #4]
 800c8b2:	6123      	str	r3, [r4, #16]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8ba:	e7aa      	b.n	800c812 <_printf_i+0x14e>
 800c8bc:	462a      	mov	r2, r5
 800c8be:	4649      	mov	r1, r9
 800c8c0:	4640      	mov	r0, r8
 800c8c2:	6923      	ldr	r3, [r4, #16]
 800c8c4:	47d0      	blx	sl
 800c8c6:	3001      	adds	r0, #1
 800c8c8:	d0ad      	beq.n	800c826 <_printf_i+0x162>
 800c8ca:	6823      	ldr	r3, [r4, #0]
 800c8cc:	079b      	lsls	r3, r3, #30
 800c8ce:	d413      	bmi.n	800c8f8 <_printf_i+0x234>
 800c8d0:	68e0      	ldr	r0, [r4, #12]
 800c8d2:	9b03      	ldr	r3, [sp, #12]
 800c8d4:	4298      	cmp	r0, r3
 800c8d6:	bfb8      	it	lt
 800c8d8:	4618      	movlt	r0, r3
 800c8da:	e7a6      	b.n	800c82a <_printf_i+0x166>
 800c8dc:	2301      	movs	r3, #1
 800c8de:	4632      	mov	r2, r6
 800c8e0:	4649      	mov	r1, r9
 800c8e2:	4640      	mov	r0, r8
 800c8e4:	47d0      	blx	sl
 800c8e6:	3001      	adds	r0, #1
 800c8e8:	d09d      	beq.n	800c826 <_printf_i+0x162>
 800c8ea:	3501      	adds	r5, #1
 800c8ec:	68e3      	ldr	r3, [r4, #12]
 800c8ee:	9903      	ldr	r1, [sp, #12]
 800c8f0:	1a5b      	subs	r3, r3, r1
 800c8f2:	42ab      	cmp	r3, r5
 800c8f4:	dcf2      	bgt.n	800c8dc <_printf_i+0x218>
 800c8f6:	e7eb      	b.n	800c8d0 <_printf_i+0x20c>
 800c8f8:	2500      	movs	r5, #0
 800c8fa:	f104 0619 	add.w	r6, r4, #25
 800c8fe:	e7f5      	b.n	800c8ec <_printf_i+0x228>
 800c900:	0800cd97 	.word	0x0800cd97
 800c904:	0800cda8 	.word	0x0800cda8

0800c908 <memmove>:
 800c908:	4288      	cmp	r0, r1
 800c90a:	b510      	push	{r4, lr}
 800c90c:	eb01 0402 	add.w	r4, r1, r2
 800c910:	d902      	bls.n	800c918 <memmove+0x10>
 800c912:	4284      	cmp	r4, r0
 800c914:	4623      	mov	r3, r4
 800c916:	d807      	bhi.n	800c928 <memmove+0x20>
 800c918:	1e43      	subs	r3, r0, #1
 800c91a:	42a1      	cmp	r1, r4
 800c91c:	d008      	beq.n	800c930 <memmove+0x28>
 800c91e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c922:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c926:	e7f8      	b.n	800c91a <memmove+0x12>
 800c928:	4601      	mov	r1, r0
 800c92a:	4402      	add	r2, r0
 800c92c:	428a      	cmp	r2, r1
 800c92e:	d100      	bne.n	800c932 <memmove+0x2a>
 800c930:	bd10      	pop	{r4, pc}
 800c932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c93a:	e7f7      	b.n	800c92c <memmove+0x24>

0800c93c <memchr>:
 800c93c:	4603      	mov	r3, r0
 800c93e:	b510      	push	{r4, lr}
 800c940:	b2c9      	uxtb	r1, r1
 800c942:	4402      	add	r2, r0
 800c944:	4293      	cmp	r3, r2
 800c946:	4618      	mov	r0, r3
 800c948:	d101      	bne.n	800c94e <memchr+0x12>
 800c94a:	2000      	movs	r0, #0
 800c94c:	e003      	b.n	800c956 <memchr+0x1a>
 800c94e:	7804      	ldrb	r4, [r0, #0]
 800c950:	3301      	adds	r3, #1
 800c952:	428c      	cmp	r4, r1
 800c954:	d1f6      	bne.n	800c944 <memchr+0x8>
 800c956:	bd10      	pop	{r4, pc}

0800c958 <_realloc_r>:
 800c958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c95c:	4680      	mov	r8, r0
 800c95e:	4614      	mov	r4, r2
 800c960:	460e      	mov	r6, r1
 800c962:	b921      	cbnz	r1, 800c96e <_realloc_r+0x16>
 800c964:	4611      	mov	r1, r2
 800c966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c96a:	f7ff bb27 	b.w	800bfbc <_malloc_r>
 800c96e:	b92a      	cbnz	r2, 800c97c <_realloc_r+0x24>
 800c970:	f7ff fc96 	bl	800c2a0 <_free_r>
 800c974:	4625      	mov	r5, r4
 800c976:	4628      	mov	r0, r5
 800c978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c97c:	f000 f81b 	bl	800c9b6 <_malloc_usable_size_r>
 800c980:	4284      	cmp	r4, r0
 800c982:	4607      	mov	r7, r0
 800c984:	d802      	bhi.n	800c98c <_realloc_r+0x34>
 800c986:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c98a:	d812      	bhi.n	800c9b2 <_realloc_r+0x5a>
 800c98c:	4621      	mov	r1, r4
 800c98e:	4640      	mov	r0, r8
 800c990:	f7ff fb14 	bl	800bfbc <_malloc_r>
 800c994:	4605      	mov	r5, r0
 800c996:	2800      	cmp	r0, #0
 800c998:	d0ed      	beq.n	800c976 <_realloc_r+0x1e>
 800c99a:	42bc      	cmp	r4, r7
 800c99c:	4622      	mov	r2, r4
 800c99e:	4631      	mov	r1, r6
 800c9a0:	bf28      	it	cs
 800c9a2:	463a      	movcs	r2, r7
 800c9a4:	f7ff fc6e 	bl	800c284 <memcpy>
 800c9a8:	4631      	mov	r1, r6
 800c9aa:	4640      	mov	r0, r8
 800c9ac:	f7ff fc78 	bl	800c2a0 <_free_r>
 800c9b0:	e7e1      	b.n	800c976 <_realloc_r+0x1e>
 800c9b2:	4635      	mov	r5, r6
 800c9b4:	e7df      	b.n	800c976 <_realloc_r+0x1e>

0800c9b6 <_malloc_usable_size_r>:
 800c9b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9ba:	1f18      	subs	r0, r3, #4
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	bfbc      	itt	lt
 800c9c0:	580b      	ldrlt	r3, [r1, r0]
 800c9c2:	18c0      	addlt	r0, r0, r3
 800c9c4:	4770      	bx	lr
	...

0800c9c8 <_init>:
 800c9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ca:	bf00      	nop
 800c9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ce:	bc08      	pop	{r3}
 800c9d0:	469e      	mov	lr, r3
 800c9d2:	4770      	bx	lr

0800c9d4 <_fini>:
 800c9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d6:	bf00      	nop
 800c9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9da:	bc08      	pop	{r3}
 800c9dc:	469e      	mov	lr, r3
 800c9de:	4770      	bx	lr
