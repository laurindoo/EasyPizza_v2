
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c364  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800c474  0800c474  0001c474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca5c  0800ca5c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ca5c  0800ca5c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ca5c  0800ca5c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca5c  0800ca5c  0001ca5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca60  0800ca60  0001ca60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800ca64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ce0  20000070  0800cad0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002d50  0800cad0  00022d50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003269f  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000635b  00000000  00000000  00052777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00011830  00000000  00000000  00058ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001cc0  00000000  00000000  0006a308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000173a  00000000  00000000  0006bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f24e  00000000  00000000  0006d702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00031291  00000000  00000000  0008c950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a1fc2  00000000  00000000  000bdbe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005f7c  00000000  00000000  0015fba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00165b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c45c 	.word	0x0800c45c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800c45c 	.word	0x0800c45c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <sendAknowladge>:
/**
 * \brief 	Simples envio de aknowladge indexado a comando
 * \param 	*ble - Ponteiro para o objeto pai.
 * \param 	Cmd - comando que esta enviando o Aknowladge.
 */
void 			sendAknowladge(Bluetooth* ble,uint8_t Cmd){
 8001094:	b500      	push	{lr}
 8001096:	b083      	sub	sp, #12
	unsigned char	TXCRC[3];
	TXCRC[0] = 0x01;
 8001098:	2301      	movs	r3, #1
 800109a:	f88d 3004 	strb.w	r3, [sp, #4]
	TXCRC[1] = 0xFF;
 800109e:	23ff      	movs	r3, #255	; 0xff
 80010a0:	f88d 3005 	strb.w	r3, [sp, #5]
	TXCRC[2] = Cmd;
 80010a4:	f88d 1006 	strb.w	r1, [sp, #6]
	HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TXCRC, 3,50);
 80010a8:	2332      	movs	r3, #50	; 0x32
 80010aa:	2203      	movs	r2, #3
 80010ac:	a901      	add	r1, sp, #4
 80010ae:	6800      	ldr	r0, [r0, #0]
 80010b0:	f007 f912 	bl	80082d8 <HAL_UART_Transmit>
}
 80010b4:	b003      	add	sp, #12
 80010b6:	f85d fb04 	ldr.w	pc, [sp], #4

080010ba <bleAddComp>:
	if (ble == NULL || _blecomm == NULL) {
 80010ba:	4603      	mov	r3, r0
 80010bc:	b188      	cbz	r0, 80010e2 <bleAddComp+0x28>
 80010be:	b191      	cbz	r1, 80010e6 <bleAddComp+0x2c>
	if(ble->contComandos>=BLUETOOTH_MAX_COMANDOS_COUNT)
 80010c0:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
 80010c4:	281d      	cmp	r0, #29
 80010c6:	d810      	bhi.n	80010ea <bleAddComp+0x30>
	_blecomm->_comando 	= __comando;
 80010c8:	700a      	strb	r2, [r1, #0]
	_blecomm->_tipo 	= ComandoBasico;
 80010ca:	2000      	movs	r0, #0
 80010cc:	7048      	strb	r0, [r1, #1]
	ble->_BleCommArr[ble->contComandos] = _blecomm;
 80010ce:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
 80010d2:	f102 0c16 	add.w	ip, r2, #22
 80010d6:	f843 102c 	str.w	r1, [r3, ip, lsl #2]
	ble->contComandos++;
 80010da:	3201      	adds	r2, #1
 80010dc:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	return BLE_SUCCESS;
 80010e0:	4770      	bx	lr
		return BLE_OBJETO_NULO;
 80010e2:	2001      	movs	r0, #1
 80010e4:	4770      	bx	lr
 80010e6:	2001      	movs	r0, #1
 80010e8:	4770      	bx	lr
		return BLE_COMANDO_NAO_CRIADO;
 80010ea:	2007      	movs	r0, #7
}
 80010ec:	4770      	bx	lr

080010ee <bleAddCompConexao>:
	if (ble == NULL || _blecomm == NULL) {
 80010ee:	4603      	mov	r3, r0
 80010f0:	b190      	cbz	r0, 8001118 <bleAddCompConexao+0x2a>
 80010f2:	b199      	cbz	r1, 800111c <bleAddCompConexao+0x2e>
	if(ble->contComandos>=BLUETOOTH_MAX_COMANDOS_COUNT)
 80010f4:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
 80010f8:	281d      	cmp	r0, #29
 80010fa:	d811      	bhi.n	8001120 <bleAddCompConexao+0x32>
	_blecomm->_comando 	= __comando;
 80010fc:	700a      	strb	r2, [r1, #0]
	_blecomm->_tipo 	= ComandoConexao;
 80010fe:	2201      	movs	r2, #1
 8001100:	704a      	strb	r2, [r1, #1]
	ble->_BleCommArr[ble->contComandos] = _blecomm;
 8001102:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
 8001106:	f102 0016 	add.w	r0, r2, #22
 800110a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	ble->contComandos++;
 800110e:	3201      	adds	r2, #1
 8001110:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	return BLE_SUCCESS;
 8001114:	2000      	movs	r0, #0
 8001116:	4770      	bx	lr
		return BLE_OBJETO_NULO;
 8001118:	2001      	movs	r0, #1
 800111a:	4770      	bx	lr
 800111c:	2001      	movs	r0, #1
 800111e:	4770      	bx	lr
		return BLE_COMANDOCON_NAO_CRIADO;
 8001120:	2008      	movs	r0, #8
}
 8001122:	4770      	bx	lr

08001124 <bluetoothPutFila>:
BLE_ErrorCode 	bluetoothPutFila(Bluetooth* ble, TypeComandoBle tipo){
 8001124:	b510      	push	{r4, lr}
	switch (tipo) {
 8001126:	b121      	cbz	r1, 8001132 <bluetoothPutFila+0xe>
 8001128:	2901      	cmp	r1, #1
 800112a:	d00f      	beq.n	800114c <bluetoothPutFila+0x28>
 800112c:	2404      	movs	r4, #4
}
 800112e:	4620      	mov	r0, r4
 8001130:	bd10      	pop	{r4, pc}
		if(ble->ComandoAtual._tipo == ComandoBasico ){
 8001132:	f890 4052 	ldrb.w	r4, [r0, #82]	; 0x52
 8001136:	b10c      	cbz	r4, 800113c <bluetoothPutFila+0x18>
		return BLE_COMANDO_NAO_PERMITIDO;
 8001138:	2405      	movs	r4, #5
 800113a:	e7f8      	b.n	800112e <bluetoothPutFila+0xa>
			osMessagePut(*ble->filaComandosRX, ble->ComandoAtual._comando, 0);
 800113c:	6a03      	ldr	r3, [r0, #32]
 800113e:	2200      	movs	r2, #0
 8001140:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	f007 fde9 	bl	8008d1c <osMessagePut>
			return BLE_SUCCESS;
 800114a:	e7f0      	b.n	800112e <bluetoothPutFila+0xa>
		if(ble->ComandoAtual._tipo == ComandoConexao ){
 800114c:	f890 3052 	ldrb.w	r3, [r0, #82]	; 0x52
 8001150:	2b01      	cmp	r3, #1
 8001152:	d001      	beq.n	8001158 <bluetoothPutFila+0x34>
		return BLE_COMANDO_NAO_PERMITIDO;
 8001154:	2405      	movs	r4, #5
 8001156:	e7ea      	b.n	800112e <bluetoothPutFila+0xa>
			switch (ble->ComandoAtual._comando) {
 8001158:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800115c:	2b40      	cmp	r3, #64	; 0x40
 800115e:	d009      	beq.n	8001174 <bluetoothPutFila+0x50>
 8001160:	2b42      	cmp	r3, #66	; 0x42
 8001162:	d10f      	bne.n	8001184 <bluetoothPutFila+0x60>
				osMessagePut(*ble->filaComandoInternoTX, COMANDO_SOLICITACAO_SENHA, 0);
 8001164:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001166:	2200      	movs	r2, #0
 8001168:	218a      	movs	r1, #138	; 0x8a
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	f007 fdd6 	bl	8008d1c <osMessagePut>
				return BLE_SUCCESS;
 8001170:	2400      	movs	r4, #0
 8001172:	e7dc      	b.n	800112e <bluetoothPutFila+0xa>
				osMessagePut(*ble->filaComandoInternoTX, COMANDO_AVALIACAO_CHAVE, 0);
 8001174:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001176:	2200      	movs	r2, #0
 8001178:	218b      	movs	r1, #139	; 0x8b
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	f007 fdce 	bl	8008d1c <osMessagePut>
				return BLE_SUCCESS;
 8001180:	2400      	movs	r4, #0
 8001182:	e7d4      	b.n	800112e <bluetoothPutFila+0xa>
 8001184:	2405      	movs	r4, #5
 8001186:	e7d2      	b.n	800112e <bluetoothPutFila+0xa>

08001188 <bluetoothErroCRC>:
{
 8001188:	b530      	push	{r4, r5, lr}
 800118a:	b083      	sub	sp, #12
 800118c:	4604      	mov	r4, r0
	CRCKey.byte.hi	= ble->_RxDataArr[ble->RxSize-2];
 800118e:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
 8001192:	1e8b      	subs	r3, r1, #2
 8001194:	4403      	add	r3, r0
 8001196:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800119a:	f04f 0500 	mov.w	r5, #0
 800119e:	f363 0507 	bfi	r5, r3, #0, #8
	CRCKey.byte.lo 	= ble->_RxDataArr[ble->RxSize-1];
 80011a2:	1e4b      	subs	r3, r1, #1
 80011a4:	4403      	add	r3, r0
 80011a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80011aa:	f363 250f 	bfi	r5, r3, #8, #8
	CRCReceive = CRC16(ble->_RxDataArr,ble->RxSize-2);
 80011ae:	3902      	subs	r1, #2
 80011b0:	b289      	uxth	r1, r1
 80011b2:	302c      	adds	r0, #44	; 0x2c
 80011b4:	f000 fc6a 	bl	8001a8c <CRC16>
 80011b8:	4601      	mov	r1, r0
	if(validaCRC(CRCKey,CRCReceive)){
 80011ba:	4628      	mov	r0, r5
 80011bc:	f000 fc82 	bl	8001ac4 <validaCRC>
 80011c0:	b908      	cbnz	r0, 80011c6 <bluetoothErroCRC+0x3e>
}
 80011c2:	b003      	add	sp, #12
 80011c4:	bd30      	pop	{r4, r5, pc}
		TXCRC[0] = 0x01;
 80011c6:	2301      	movs	r3, #1
 80011c8:	f88d 3004 	strb.w	r3, [sp, #4]
		TXCRC[1] = 0xEE;
 80011cc:	23ee      	movs	r3, #238	; 0xee
 80011ce:	f88d 3005 	strb.w	r3, [sp, #5]
		TXCRC[2] = 0xEE;
 80011d2:	f88d 3006 	strb.w	r3, [sp, #6]
		HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TXCRC, 3,50);
 80011d6:	2332      	movs	r3, #50	; 0x32
 80011d8:	2203      	movs	r2, #3
 80011da:	a901      	add	r1, sp, #4
 80011dc:	6820      	ldr	r0, [r4, #0]
 80011de:	f007 f87b 	bl	80082d8 <HAL_UART_Transmit>
		return BLE_CRC_INCORRETO;
 80011e2:	2003      	movs	r0, #3
 80011e4:	e7ed      	b.n	80011c2 <bluetoothErroCRC+0x3a>

080011e6 <readComando>:
BLE_ErrorCode 	readComando(Bluetooth* ble, TypeComandoBle tipo){
 80011e6:	b530      	push	{r4, r5, lr}
 80011e8:	b083      	sub	sp, #12
 80011ea:	4604      	mov	r4, r0
 80011ec:	460d      	mov	r5, r1
	if (bluetoothErroCRC(ble)) {
 80011ee:	f7ff ffcb 	bl	8001188 <bluetoothErroCRC>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b9f8      	cbnz	r0, 8001236 <readComando+0x50>
	for(uint8_t i = 0; i < ble->contComandos; i++)	{
 80011f6:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d918      	bls.n	8001230 <readComando+0x4a>
		comandoRX = *ble->_BleCommArr[i];
 80011fe:	f103 0216 	add.w	r2, r3, #22
 8001202:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8001206:	8812      	ldrh	r2, [r2, #0]
 8001208:	f8ad 2004 	strh.w	r2, [sp, #4]
		if( ble->_RxDataArr[1] == comandoRX._comando){
 800120c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8001210:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001214:	4290      	cmp	r0, r2
 8001216:	d002      	beq.n	800121e <readComando+0x38>
	for(uint8_t i = 0; i < ble->contComandos; i++)	{
 8001218:	3301      	adds	r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	e7eb      	b.n	80011f6 <readComando+0x10>
			ble->ComandoAtual = comandoRX;
 800121e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001222:	f8a4 3051 	strh.w	r3, [r4, #81]	; 0x51
			ret = bluetoothPutFila(ble,tipo);
 8001226:	4629      	mov	r1, r5
 8001228:	4620      	mov	r0, r4
 800122a:	f7ff ff7b 	bl	8001124 <bluetoothPutFila>
			return ret;
 800122e:	e000      	b.n	8001232 <readComando+0x4c>
	return BLE_COMANDO_NAO_ENCONTRADO;
 8001230:	2004      	movs	r0, #4
}
 8001232:	b003      	add	sp, #12
 8001234:	bd30      	pop	{r4, r5, pc}
		return BLE_CRC_INCORRETO;
 8001236:	2003      	movs	r0, #3
 8001238:	e7fb      	b.n	8001232 <readComando+0x4c>
	...

0800123c <BLEDMA_IrqHandler>:
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){
 800123c:	6843      	ldr	r3, [r0, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	f012 0f02 	tst.w	r2, #2
 8001246:	f000 80c1 	beq.w	80013cc <BLEDMA_IrqHandler+0x190>
{
 800124a:	b530      	push	{r4, r5, lr}
 800124c:	b08b      	sub	sp, #44	; 0x2c
 800124e:	4604      	mov	r4, r0
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 8001250:	4a5f      	ldr	r2, [pc, #380]	; (80013d0 <BLEDMA_IrqHandler+0x194>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d014      	beq.n	8001280 <BLEDMA_IrqHandler+0x44>
 8001256:	3214      	adds	r2, #20
 8001258:	4293      	cmp	r3, r2
 800125a:	d02c      	beq.n	80012b6 <BLEDMA_IrqHandler+0x7a>
 800125c:	3214      	adds	r2, #20
 800125e:	4293      	cmp	r3, r2
 8001260:	d02b      	beq.n	80012ba <BLEDMA_IrqHandler+0x7e>
 8001262:	3214      	adds	r2, #20
 8001264:	4293      	cmp	r3, r2
 8001266:	d02b      	beq.n	80012c0 <BLEDMA_IrqHandler+0x84>
 8001268:	3214      	adds	r2, #20
 800126a:	4293      	cmp	r3, r2
 800126c:	d02b      	beq.n	80012c6 <BLEDMA_IrqHandler+0x8a>
 800126e:	3214      	adds	r2, #20
 8001270:	4293      	cmp	r3, r2
 8001272:	d002      	beq.n	800127a <BLEDMA_IrqHandler+0x3e>
 8001274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001278:	e003      	b.n	8001282 <BLEDMA_IrqHandler+0x46>
 800127a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800127e:	e000      	b.n	8001282 <BLEDMA_IrqHandler+0x46>
 8001280:	2202      	movs	r2, #2
 8001282:	4b54      	ldr	r3, [pc, #336]	; (80013d4 <BLEDMA_IrqHandler+0x198>)
 8001284:	605a      	str	r2, [r3, #4]
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - ble->UARTDMAHandle->Instance->CNDTR;
 8001286:	6863      	ldr	r3, [r4, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f1c3 0318 	rsb	r3, r3, #24
 8001290:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		sprintf(StringRecebida,"%s",ble->_RxDataArr);
 8001294:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8001298:	4629      	mov	r1, r5
 800129a:	a801      	add	r0, sp, #4
 800129c:	f00a fac3 	bl	800b826 <strcpy>
		ble->msDesconectado = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
		switch(ble->MaquinaConexao){
 80012a6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d852      	bhi.n	8001354 <BLEDMA_IrqHandler+0x118>
 80012ae:	e8df f003 	tbb	[pc, r3]
 80012b2:	2e0d      	.short	0x2e0d
 80012b4:	6f46      	.short	0x6f46
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 80012b6:	2220      	movs	r2, #32
 80012b8:	e7e3      	b.n	8001282 <BLEDMA_IrqHandler+0x46>
 80012ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012be:	e7e0      	b.n	8001282 <BLEDMA_IrqHandler+0x46>
 80012c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c4:	e7dd      	b.n	8001282 <BLEDMA_IrqHandler+0x46>
 80012c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012ca:	e7da      	b.n	8001282 <BLEDMA_IrqHandler+0x46>
			ble->msIdle=0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
			ss = strstr(StringRecebida, "OK+ADDR:");
 80012d2:	4941      	ldr	r1, [pc, #260]	; (80013d8 <BLEDMA_IrqHandler+0x19c>)
 80012d4:	a801      	add	r0, sp, #4
 80012d6:	f00a f9b7 	bl	800b648 <strstr>
			if (ss != NULL){
 80012da:	2800      	cmp	r0, #0
 80012dc:	d03a      	beq.n	8001354 <BLEDMA_IrqHandler+0x118>
				PontoExato = ss - StringRecebida;
 80012de:	aa01      	add	r2, sp, #4
 80012e0:	1a80      	subs	r0, r0, r2
				for (int i = 0; i < 12; i++) {
 80012e2:	2200      	movs	r2, #0
 80012e4:	e00a      	b.n	80012fc <BLEDMA_IrqHandler+0xc0>
					addr8Bits[i] = ble->_RxDataArr[i+PontoExato+8];
 80012e6:	1813      	adds	r3, r2, r0
 80012e8:	3308      	adds	r3, #8
 80012ea:	4423      	add	r3, r4
 80012ec:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80012f0:	f102 0328 	add.w	r3, r2, #40	; 0x28
 80012f4:	446b      	add	r3, sp
 80012f6:	f803 1c0c 	strb.w	r1, [r3, #-12]
				for (int i = 0; i < 12; i++) {
 80012fa:	3201      	adds	r2, #1
 80012fc:	2a0b      	cmp	r2, #11
 80012fe:	ddf2      	ble.n	80012e6 <BLEDMA_IrqHandler+0xaa>
				ble->chave = CRC16(addr8Bits,12);
 8001300:	210c      	movs	r1, #12
 8001302:	a807      	add	r0, sp, #28
 8001304:	f000 fbc2 	bl	8001a8c <CRC16>
 8001308:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 800130c:	e022      	b.n	8001354 <BLEDMA_IrqHandler+0x118>
			ble->msIdle=0;
 800130e:	2300      	movs	r3, #0
 8001310:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
			ble->StatusSenha = false;
 8001314:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
			ss = strstr(StringRecebida, "OK+CONN");
 8001318:	4930      	ldr	r1, [pc, #192]	; (80013dc <BLEDMA_IrqHandler+0x1a0>)
 800131a:	a801      	add	r0, sp, #4
 800131c:	f00a f994 	bl	800b648 <strstr>
			if ((ss != NULL  && ble->RxSize == TAMANHO_MENSAGEM_CONECTOU) || MACRO_LE_BT_STATUS){
 8001320:	b118      	cbz	r0, 800132a <BLEDMA_IrqHandler+0xee>
 8001322:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001326:	2b07      	cmp	r3, #7
 8001328:	d005      	beq.n	8001336 <BLEDMA_IrqHandler+0xfa>
 800132a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132e:	482c      	ldr	r0, [pc, #176]	; (80013e0 <BLEDMA_IrqHandler+0x1a4>)
 8001330:	f004 fd50 	bl	8005dd4 <HAL_GPIO_ReadPin>
 8001334:	b170      	cbz	r0, 8001354 <BLEDMA_IrqHandler+0x118>
				ble->MaquinaConexao = RX_CONECTADO;
 8001336:	2302      	movs	r3, #2
 8001338:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800133c:	e00a      	b.n	8001354 <BLEDMA_IrqHandler+0x118>
			ss = strstr(StringRecebida, "LOST");
 800133e:	4929      	ldr	r1, [pc, #164]	; (80013e4 <BLEDMA_IrqHandler+0x1a8>)
 8001340:	a801      	add	r0, sp, #4
 8001342:	f00a f981 	bl	800b648 <strstr>
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 8001346:	b1a0      	cbz	r0, 8001372 <BLEDMA_IrqHandler+0x136>
				ble->StatusSenha 		= false;
 8001348:	2300      	movs	r3, #0
 800134a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 800134e:	2301      	movs	r3, #1
 8001350:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		ble->UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr; /* Set memory address for DMA again */
 8001354:	6863      	ldr	r3, [r4, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60dd      	str	r5, [r3, #12]
		ble->UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    	/* Set number of bytes to receive */
 800135a:	6863      	ldr	r3, [r4, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2218      	movs	r2, #24
 8001360:	605a      	str	r2, [r3, #4]
		ble->UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            	/* Start DMA transfer */
 8001362:	6863      	ldr	r3, [r4, #4]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	6813      	ldr	r3, [r2, #0]
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6013      	str	r3, [r2, #0]
}
 800136e:	b00b      	add	sp, #44	; 0x2c
 8001370:	bd30      	pop	{r4, r5, pc}
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 8001372:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001376:	481a      	ldr	r0, [pc, #104]	; (80013e0 <BLEDMA_IrqHandler+0x1a4>)
 8001378:	f004 fd2c 	bl	8005dd4 <HAL_GPIO_ReadPin>
 800137c:	2800      	cmp	r0, #0
 800137e:	d0e3      	beq.n	8001348 <BLEDMA_IrqHandler+0x10c>
				if(readComando(ble,ComandoConexao)!=0)	{
 8001380:	2101      	movs	r1, #1
 8001382:	4620      	mov	r0, r4
 8001384:	f7ff ff2f 	bl	80011e6 <readComando>
 8001388:	2800      	cmp	r0, #0
 800138a:	d0e3      	beq.n	8001354 <BLEDMA_IrqHandler+0x118>
					__NOP();//ERRO todo tratar esse erro.
 800138c:	bf00      	nop
 800138e:	e7e1      	b.n	8001354 <BLEDMA_IrqHandler+0x118>
			ble->msIdle=0;
 8001390:	2300      	movs	r3, #0
 8001392:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
			ss = strstr(StringRecebida, "LOST");
 8001396:	4913      	ldr	r1, [pc, #76]	; (80013e4 <BLEDMA_IrqHandler+0x1a8>)
 8001398:	a801      	add	r0, sp, #4
 800139a:	f00a f955 	bl	800b648 <strstr>
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 800139e:	b130      	cbz	r0, 80013ae <BLEDMA_IrqHandler+0x172>
				ble->StatusSenha 		= false;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 80013a6:	2301      	movs	r3, #1
 80013a8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80013ac:	e7d2      	b.n	8001354 <BLEDMA_IrqHandler+0x118>
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 80013ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <BLEDMA_IrqHandler+0x1a4>)
 80013b4:	f004 fd0e 	bl	8005dd4 <HAL_GPIO_ReadPin>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d0f1      	beq.n	80013a0 <BLEDMA_IrqHandler+0x164>
				if(readComando(ble,ComandoBasico)!=0)	{
 80013bc:	2100      	movs	r1, #0
 80013be:	4620      	mov	r0, r4
 80013c0:	f7ff ff11 	bl	80011e6 <readComando>
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d0c5      	beq.n	8001354 <BLEDMA_IrqHandler+0x118>
					__NOP();//ERRO todo tratar esse erro.
 80013c8:	bf00      	nop
 80013ca:	e7c3      	b.n	8001354 <BLEDMA_IrqHandler+0x118>
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40020008 	.word	0x40020008
 80013d4:	40020000 	.word	0x40020000
 80013d8:	0800c530 	.word	0x0800c530
 80013dc:	0800c53c 	.word	0x0800c53c
 80013e0:	40010c00 	.word	0x40010c00
 80013e4:	0800c544 	.word	0x0800c544

080013e8 <bluetooth1000ms>:
	if(ble->JanelaConexao>0)
 80013e8:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 80013ec:	b113      	cbz	r3, 80013f4 <bluetooth1000ms+0xc>
		ble->JanelaConexao--;
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 80013f4:	4770      	bx	lr

080013f6 <BLEUSART_IrqHandler>:
	if (ble->UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 80013f6:	6803      	ldr	r3, [r0, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	f012 0f10 	tst.w	r2, #16
 8001400:	d100      	bne.n	8001404 <BLEUSART_IrqHandler+0xe>
 8001402:	4770      	bx	lr
{ //todo comentar melhor
 8001404:	b500      	push	{lr}
 8001406:	b083      	sub	sp, #12
		tmp = ble->UARTHandle->Instance->SR;                 /* Read status register */
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	9201      	str	r2, [sp, #4]
		tmp = ble->UARTHandle->Instance->DR;                 /* Read data register */
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	9301      	str	r3, [sp, #4]
		__HAL_DMA_DISABLE (ble->UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 8001410:	6843      	ldr	r3, [r0, #4]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	6813      	ldr	r3, [r2, #0]
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	6013      	str	r3, [r2, #0]
		__HAL_UART_ENABLE_IT 	(ble->UARTHandle, UART_IT_IDLE);		// HABILITA idle line INTERRUPT
 800141c:	6803      	ldr	r3, [r0, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68d3      	ldr	r3, [r2, #12]
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	60d3      	str	r3, [r2, #12]
		__HAL_DMA_ENABLE_IT 	(ble->UARTDMAHandle, DMA_IT_TC);		// HABILITA O DMA Tx cplt INTERRUPT
 8001428:	6843      	ldr	r3, [r0, #4]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	6813      	ldr	r3, [r2, #0]
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	6013      	str	r3, [r2, #0]
		BLEDMA_IrqHandler (ble);
 8001434:	f7ff ff02 	bl	800123c <BLEDMA_IrqHandler>
}
 8001438:	b003      	add	sp, #12
 800143a:	f85d fb04 	ldr.w	pc, [sp], #4

0800143e <bluetoothEnviaComando>:
{
 800143e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001442:	af00      	add	r7, sp, #0
 8001444:	4606      	mov	r6, r0
 8001446:	4608      	mov	r0, r1
 8001448:	4614      	mov	r4, r2
	uint8_t	TX_Buffer		[size+3];
 800144a:	f102 0802 	add.w	r8, r2, #2
 800144e:	f102 030a 	add.w	r3, r2, #10
 8001452:	f023 0307 	bic.w	r3, r3, #7
 8001456:	ebad 0d03 	sub.w	sp, sp, r3
 800145a:	466d      	mov	r5, sp
	for (int i = 0; i <= size; ++i) {
 800145c:	2300      	movs	r3, #0
 800145e:	e002      	b.n	8001466 <bluetoothEnviaComando+0x28>
		TX_Buffer[i]=_out[i];
 8001460:	5cc2      	ldrb	r2, [r0, r3]
 8001462:	54ea      	strb	r2, [r5, r3]
	for (int i = 0; i <= size; ++i) {
 8001464:	3301      	adds	r3, #1
 8001466:	42a3      	cmp	r3, r4
 8001468:	ddfa      	ble.n	8001460 <bluetoothEnviaComando+0x22>
	CRCVar = CRC16(_out,size+1);
 800146a:	fa1f f984 	uxth.w	r9, r4
 800146e:	f109 0101 	add.w	r1, r9, #1
 8001472:	b289      	uxth	r1, r1
 8001474:	f000 fb0a 	bl	8001a8c <CRC16>
	TX_Buffer[size+2] = (unsigned char) CRCVar.byte.lo;
 8001478:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800147c:	f805 3008 	strb.w	r3, [r5, r8]
	TX_Buffer[size+1] = (unsigned char) CRCVar.byte.hi;
 8001480:	3401      	adds	r4, #1
 8001482:	5528      	strb	r0, [r5, r4]
	return HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TX_Buffer, size+3,50);
 8001484:	f109 0203 	add.w	r2, r9, #3
 8001488:	2332      	movs	r3, #50	; 0x32
 800148a:	b292      	uxth	r2, r2
 800148c:	4629      	mov	r1, r5
 800148e:	6830      	ldr	r0, [r6, #0]
 8001490:	f006 ff22 	bl	80082d8 <HAL_UART_Transmit>
}
 8001494:	46bd      	mov	sp, r7
 8001496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800149a <txBleComando>:
BLE_ErrorCode 	txBleComando(Bluetooth *ble){
 800149a:	b530      	push	{r4, r5, lr}
 800149c:	b087      	sub	sp, #28
 800149e:	4604      	mov	r4, r0
	evttx = osMessageGet(*ble->filaComandoInternoTX, 0);
 80014a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80014a2:	2200      	movs	r2, #0
 80014a4:	6819      	ldr	r1, [r3, #0]
 80014a6:	4668      	mov	r0, sp
 80014a8:	f007 fc6b 	bl	8008d82 <osMessageGet>
	if (evttx.status == osEventMessage) {
 80014ac:	9b00      	ldr	r3, [sp, #0]
 80014ae:	2b10      	cmp	r3, #16
 80014b0:	d003      	beq.n	80014ba <txBleComando+0x20>
	return BLE_SUCCESS;
 80014b2:	2500      	movs	r5, #0
}
 80014b4:	4628      	mov	r0, r5
 80014b6:	b007      	add	sp, #28
 80014b8:	bd30      	pop	{r4, r5, pc}
		switch ((unsigned int)evttx.value.p) {
 80014ba:	9b01      	ldr	r3, [sp, #4]
 80014bc:	2b8a      	cmp	r3, #138	; 0x8a
 80014be:	d003      	beq.n	80014c8 <txBleComando+0x2e>
 80014c0:	2b8b      	cmp	r3, #139	; 0x8b
 80014c2:	d033      	beq.n	800152c <txBleComando+0x92>
 80014c4:	2504      	movs	r5, #4
 80014c6:	e7f5      	b.n	80014b4 <txBleComando+0x1a>
			if(ble->JanelaConexao > 0){
 80014c8:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80014cc:	b1c3      	cbz	r3, 8001500 <txBleComando+0x66>
				Buffer[0] 	= 0x01;
 80014ce:	2301      	movs	r3, #1
 80014d0:	f88d 300c 	strb.w	r3, [sp, #12]
				Buffer[1] 	= 0x51;
 80014d4:	2251      	movs	r2, #81	; 0x51
 80014d6:	f88d 200d 	strb.w	r2, [sp, #13]
				Buffer[2] 	= 0x51;
 80014da:	f88d 200e 	strb.w	r2, [sp, #14]
				Buffer[3] 	= 0x01;
 80014de:	f88d 300f 	strb.w	r3, [sp, #15]
				Buffer[4] 	= ble->chave.byte.hi	;
 80014e2:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 80014e6:	f88d 3010 	strb.w	r3, [sp, #16]
				Buffer[5] 	= ble->chave.byte.lo	;
 80014ea:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 80014ee:	f88d 3011 	strb.w	r3, [sp, #17]
				bluetoothEnviaComando(ble,Buffer, 5);
 80014f2:	2205      	movs	r2, #5
 80014f4:	a903      	add	r1, sp, #12
 80014f6:	4620      	mov	r0, r4
 80014f8:	f7ff ffa1 	bl	800143e <bluetoothEnviaComando>
				return BLE_SUCCESS;
 80014fc:	2500      	movs	r5, #0
 80014fe:	e7d9      	b.n	80014b4 <txBleComando+0x1a>
				Buffer[0] 	= 0x01;
 8001500:	2301      	movs	r3, #1
 8001502:	f88d 300c 	strb.w	r3, [sp, #12]
				Buffer[1] 	= 0x51;
 8001506:	2351      	movs	r3, #81	; 0x51
 8001508:	f88d 300d 	strb.w	r3, [sp, #13]
				Buffer[2] 	= 0x51;
 800150c:	f88d 300e 	strb.w	r3, [sp, #14]
				Buffer[3] 	= 0x00;
 8001510:	2300      	movs	r3, #0
 8001512:	f88d 300f 	strb.w	r3, [sp, #15]
				Buffer[4] 	= 0x00;
 8001516:	f88d 3010 	strb.w	r3, [sp, #16]
				Buffer[5] 	= 0x00;
 800151a:	f88d 3011 	strb.w	r3, [sp, #17]
				bluetoothEnviaComando(ble,Buffer, 5);
 800151e:	2205      	movs	r2, #5
 8001520:	a903      	add	r1, sp, #12
 8001522:	4620      	mov	r0, r4
 8001524:	f7ff ff8b 	bl	800143e <bluetoothEnviaComando>
				return BLE_NEW_DEVICE_NEGADO;
 8001528:	2509      	movs	r5, #9
 800152a:	e7c3      	b.n	80014b4 <txBleComando+0x1a>
			chaveApp.byte.hi = ble->_RxDataArr[3];
 800152c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8001530:	f04f 0100 	mov.w	r1, #0
 8001534:	f363 0107 	bfi	r1, r3, #0, #8
			chaveApp.byte.lo = ble->_RxDataArr[4];
 8001538:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800153c:	f363 210f 	bfi	r1, r3, #8, #8
			if(validaCRC(ble->chave, chaveApp)){
 8001540:	f8b4 004e 	ldrh.w	r0, [r4, #78]	; 0x4e
 8001544:	f000 fabe 	bl	8001ac4 <validaCRC>
 8001548:	4605      	mov	r5, r0
 800154a:	b188      	cbz	r0, 8001570 <txBleComando+0xd6>
				Buffer[0] 	= 0x01;
 800154c:	2301      	movs	r3, #1
 800154e:	f88d 300c 	strb.w	r3, [sp, #12]
				Buffer[1] 	= 0x52;
 8001552:	2352      	movs	r3, #82	; 0x52
 8001554:	f88d 300d 	strb.w	r3, [sp, #13]
				Buffer[2] 	= 0x52;
 8001558:	f88d 300e 	strb.w	r3, [sp, #14]
				Buffer[3] 	= 0x00;
 800155c:	2300      	movs	r3, #0
 800155e:	f88d 300f 	strb.w	r3, [sp, #15]
				bluetoothEnviaComando(ble,Buffer, 3);
 8001562:	2203      	movs	r2, #3
 8001564:	a903      	add	r1, sp, #12
 8001566:	4620      	mov	r0, r4
 8001568:	f7ff ff69 	bl	800143e <bluetoothEnviaComando>
				return BLE_SENHA_ERRADA;
 800156c:	250a      	movs	r5, #10
 800156e:	e7a1      	b.n	80014b4 <txBleComando+0x1a>
				ble->MaquinaConexao	= RX_VALIDADO;
 8001570:	2203      	movs	r2, #3
 8001572:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
				Buffer[0] 	= 0x01;
 8001576:	2301      	movs	r3, #1
 8001578:	f88d 300c 	strb.w	r3, [sp, #12]
				Buffer[1] 	= 0x52;
 800157c:	2152      	movs	r1, #82	; 0x52
 800157e:	f88d 100d 	strb.w	r1, [sp, #13]
				Buffer[2] 	= 0x52;
 8001582:	f88d 100e 	strb.w	r1, [sp, #14]
				Buffer[3] 	= 0x01;
 8001586:	f88d 300f 	strb.w	r3, [sp, #15]
				bluetoothEnviaComando(ble,Buffer, 3);
 800158a:	a903      	add	r1, sp, #12
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff ff56 	bl	800143e <bluetoothEnviaComando>
				return BLE_SUCCESS;
 8001592:	e78f      	b.n	80014b4 <txBleComando+0x1a>

08001594 <comandHM10>:
void 			comandHM10(Bluetooth *ble, char _out[], uint16_t delay){
 8001594:	b570      	push	{r4, r5, r6, lr}
 8001596:	4606      	mov	r6, r0
 8001598:	460c      	mov	r4, r1
 800159a:	4615      	mov	r5, r2
	HAL_UART_Transmit(ble->UARTHandle, (uint8_t *) _out, strlen(_out),100);
 800159c:	4608      	mov	r0, r1
 800159e:	f7fe fdd7 	bl	8000150 <strlen>
 80015a2:	2364      	movs	r3, #100	; 0x64
 80015a4:	b282      	uxth	r2, r0
 80015a6:	4621      	mov	r1, r4
 80015a8:	6830      	ldr	r0, [r6, #0]
 80015aa:	f006 fe95 	bl	80082d8 <HAL_UART_Transmit>
	if(delay != 0){
 80015ae:	b905      	cbnz	r5, 80015b2 <comandHM10+0x1e>
}
 80015b0:	bd70      	pop	{r4, r5, r6, pc}
		osDelay(delay);
 80015b2:	4628      	mov	r0, r5
 80015b4:	f007 fabd 	bl	8008b32 <osDelay>
}
 80015b8:	e7fa      	b.n	80015b0 <comandHM10+0x1c>
	...

080015bc <bluetoothDescon>:
void 			bluetoothDescon(Bluetooth* ble){
 80015bc:	b538      	push	{r3, r4, r5, lr}
 80015be:	4604      	mov	r4, r0
	comandHM10(ble,"AT",50);//DESCONECTA
 80015c0:	4d05      	ldr	r5, [pc, #20]	; (80015d8 <bluetoothDescon+0x1c>)
 80015c2:	2232      	movs	r2, #50	; 0x32
 80015c4:	4629      	mov	r1, r5
 80015c6:	f7ff ffe5 	bl	8001594 <comandHM10>
	comandHM10(ble,"AT",50);//DESCONECTA
 80015ca:	2232      	movs	r2, #50	; 0x32
 80015cc:	4629      	mov	r1, r5
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7ff ffe0 	bl	8001594 <comandHM10>
}
 80015d4:	bd38      	pop	{r3, r4, r5, pc}
 80015d6:	bf00      	nop
 80015d8:	0800c54c 	.word	0x0800c54c

080015dc <iniciaBleHm10>:
BLE_ErrorCode 	iniciaBleHm10(Bluetooth* ble){
 80015dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015de:	b08f      	sub	sp, #60	; 0x3c
 80015e0:	4604      	mov	r4, r0
		switch (ble->sequenciaBLE) {
 80015e2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d8fb      	bhi.n	80015e2 <iniciaBleHm10+0x6>
 80015ea:	e8df f013 	tbh	[pc, r3, lsl #1]
 80015ee:	0005      	.short	0x0005
 80015f0:	0138004c 	.word	0x0138004c
 80015f4:	01720145 	.word	0x01720145
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 80015f8:	4db7      	ldr	r5, [pc, #732]	; (80018d8 <iniciaBleHm10+0x2fc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001600:	4628      	mov	r0, r5
 8001602:	f004 fbee 	bl	8005de2 <HAL_GPIO_WritePin>
 8001606:	20c8      	movs	r0, #200	; 0xc8
 8001608:	f007 fa93 	bl	8008b32 <osDelay>
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001612:	4628      	mov	r0, r5
 8001614:	f004 fbe5 	bl	8005de2 <HAL_GPIO_WritePin>
			comandHM10(ble,"AT+ADTY3",100);	//BLOQUEIA CONEXAO
 8001618:	4db0      	ldr	r5, [pc, #704]	; (80018dc <iniciaBleHm10+0x300>)
 800161a:	2264      	movs	r2, #100	; 0x64
 800161c:	4629      	mov	r1, r5
 800161e:	4620      	mov	r0, r4
 8001620:	f7ff ffb8 	bl	8001594 <comandHM10>
			comandHM10(ble,"AT+ADTY3",100);	//BLOQUEIA CONEXAO
 8001624:	2264      	movs	r2, #100	; 0x64
 8001626:	4629      	mov	r1, r5
 8001628:	4620      	mov	r0, r4
 800162a:	f7ff ffb3 	bl	8001594 <comandHM10>
			SETUP_UART(115200)
 800162e:	6820      	ldr	r0, [r4, #0]
 8001630:	f006 fef8 	bl	8008424 <HAL_UART_Abort_IT>
 8001634:	6820      	ldr	r0, [r4, #0]
 8001636:	f006 fe35 	bl	80082a4 <HAL_UART_DeInit>
 800163a:	2032      	movs	r0, #50	; 0x32
 800163c:	f007 fa79 	bl	8008b32 <osDelay>
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	6820      	ldr	r0, [r4, #0]
 800164a:	f006 fdfb 	bl	8008244 <HAL_UART_Init>
 800164e:	2032      	movs	r0, #50	; 0x32
 8001650:	f007 fa6f 	bl	8008b32 <osDelay>
			bluetoothDescon(ble);
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff ffb1 	bl	80015bc <bluetoothDescon>
			MACRO_DEFINE_INTERRUPT
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68d3      	ldr	r3, [r2, #12]
 8001660:	f043 0310 	orr.w	r3, r3, #16
 8001664:	60d3      	str	r3, [r2, #12]
 8001666:	6863      	ldr	r3, [r4, #4]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	6813      	ldr	r3, [r2, #0]
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4621      	mov	r1, r4
 8001674:	f851 0b2c 	ldr.w	r0, [r1], #44
 8001678:	2218      	movs	r2, #24
 800167a:	f007 f9f7 	bl	8008a6c <HAL_UART_Receive_DMA>
			ble->sequenciaBLE = redefineBle;
 800167e:	2301      	movs	r3, #1
 8001680:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			break;
 8001684:	e7ad      	b.n	80015e2 <iniciaBleHm10+0x6>
			SETUP_UART(115200)
 8001686:	6820      	ldr	r0, [r4, #0]
 8001688:	f006 fecc 	bl	8008424 <HAL_UART_Abort_IT>
 800168c:	6820      	ldr	r0, [r4, #0]
 800168e:	f006 fe09 	bl	80082a4 <HAL_UART_DeInit>
 8001692:	2032      	movs	r0, #50	; 0x32
 8001694:	f007 fa4d 	bl	8008b32 <osDelay>
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
 800169e:	605e      	str	r6, [r3, #4]
 80016a0:	6820      	ldr	r0, [r4, #0]
 80016a2:	f006 fdcf 	bl	8008244 <HAL_UART_Init>
 80016a6:	2032      	movs	r0, #50	; 0x32
 80016a8:	f007 fa43 	bl	8008b32 <osDelay>
			comandHM10(ble,"AT",100);	//
 80016ac:	4d8c      	ldr	r5, [pc, #560]	; (80018e0 <iniciaBleHm10+0x304>)
 80016ae:	2264      	movs	r2, #100	; 0x64
 80016b0:	4629      	mov	r1, r5
 80016b2:	4620      	mov	r0, r4
 80016b4:	f7ff ff6e 	bl	8001594 <comandHM10>
			comandHM10(ble,"AT",100);	//
 80016b8:	2264      	movs	r2, #100	; 0x64
 80016ba:	4629      	mov	r1, r5
 80016bc:	4620      	mov	r0, r4
 80016be:	f7ff ff69 	bl	8001594 <comandHM10>
			comandHM10(ble,"AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 80016c2:	4f88      	ldr	r7, [pc, #544]	; (80018e4 <iniciaBleHm10+0x308>)
 80016c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016c8:	4639      	mov	r1, r7
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff ff62 	bl	8001594 <comandHM10>
			SETUP_UART(9600)
 80016d0:	6820      	ldr	r0, [r4, #0]
 80016d2:	f006 fea7 	bl	8008424 <HAL_UART_Abort_IT>
 80016d6:	6820      	ldr	r0, [r4, #0]
 80016d8:	f006 fde4 	bl	80082a4 <HAL_UART_DeInit>
 80016dc:	2032      	movs	r0, #50	; 0x32
 80016de:	f007 fa28 	bl	8008b32 <osDelay>
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	6820      	ldr	r0, [r4, #0]
 80016ec:	f006 fdaa 	bl	8008244 <HAL_UART_Init>
 80016f0:	2032      	movs	r0, #50	; 0x32
 80016f2:	f007 fa1e 	bl	8008b32 <osDelay>
			comandHM10(ble,"AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 80016f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016fa:	4639      	mov	r1, r7
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7ff ff49 	bl	8001594 <comandHM10>
			comandHM10(ble,"AT",100);	//
 8001702:	2264      	movs	r2, #100	; 0x64
 8001704:	4629      	mov	r1, r5
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff ff44 	bl	8001594 <comandHM10>
			comandHM10(ble,"AT",100);	//
 800170c:	2264      	movs	r2, #100	; 0x64
 800170e:	4629      	mov	r1, r5
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff ff3f 	bl	8001594 <comandHM10>
			comandHM10(ble,"AT+ADTY3",300);	//BLOQUEIA CONEXAO
 8001716:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800171a:	4970      	ldr	r1, [pc, #448]	; (80018dc <iniciaBleHm10+0x300>)
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff ff39 	bl	8001594 <comandHM10>
			comandHM10(ble,"AT+BAUD4",300);	//COLOCA BAUD EM 115200
 8001722:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001726:	4970      	ldr	r1, [pc, #448]	; (80018e8 <iniciaBleHm10+0x30c>)
 8001728:	4620      	mov	r0, r4
 800172a:	f7ff ff33 	bl	8001594 <comandHM10>
			SETUP_UART(115200)
 800172e:	6820      	ldr	r0, [r4, #0]
 8001730:	f006 fe78 	bl	8008424 <HAL_UART_Abort_IT>
 8001734:	6820      	ldr	r0, [r4, #0]
 8001736:	f006 fdb5 	bl	80082a4 <HAL_UART_DeInit>
 800173a:	2032      	movs	r0, #50	; 0x32
 800173c:	f007 f9f9 	bl	8008b32 <osDelay>
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	605e      	str	r6, [r3, #4]
 8001744:	6820      	ldr	r0, [r4, #0]
 8001746:	f006 fd7d 	bl	8008244 <HAL_UART_Init>
 800174a:	2032      	movs	r0, #50	; 0x32
 800174c:	f007 f9f1 	bl	8008b32 <osDelay>
			MACRO_RESET_BLE
 8001750:	4e61      	ldr	r6, [pc, #388]	; (80018d8 <iniciaBleHm10+0x2fc>)
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001758:	4630      	mov	r0, r6
 800175a:	f004 fb42 	bl	8005de2 <HAL_GPIO_WritePin>
 800175e:	20c8      	movs	r0, #200	; 0xc8
 8001760:	f007 f9e7 	bl	8008b32 <osDelay>
 8001764:	2201      	movs	r2, #1
 8001766:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800176a:	4630      	mov	r0, r6
 800176c:	f004 fb39 	bl	8005de2 <HAL_GPIO_WritePin>
			comandHM10(ble,"AT",100);	//
 8001770:	2264      	movs	r2, #100	; 0x64
 8001772:	4629      	mov	r1, r5
 8001774:	4620      	mov	r0, r4
 8001776:	f7ff ff0d 	bl	8001594 <comandHM10>
			comandHM10(ble,"AT",100);	//
 800177a:	2264      	movs	r2, #100	; 0x64
 800177c:	4629      	mov	r1, r5
 800177e:	4620      	mov	r0, r4
 8001780:	f7ff ff08 	bl	8001594 <comandHM10>
			comandHM10(ble,"AT+POWE3",300);	//POTENCIA MAXIMA
 8001784:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001788:	4958      	ldr	r1, [pc, #352]	; (80018ec <iniciaBleHm10+0x310>)
 800178a:	4620      	mov	r0, r4
 800178c:	f7ff ff02 	bl	8001594 <comandHM10>
			comandHM10(ble,"AT+SHOW3",300);	//MOSTRA O NOME e rssi
 8001790:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001794:	4956      	ldr	r1, [pc, #344]	; (80018f0 <iniciaBleHm10+0x314>)
 8001796:	4620      	mov	r0, r4
 8001798:	f7ff fefc 	bl	8001594 <comandHM10>
			comandHM10(ble,"AT+GAIN1",300);	//INSERE GANHO
 800179c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017a0:	4954      	ldr	r1, [pc, #336]	; (80018f4 <iniciaBleHm10+0x318>)
 80017a2:	4620      	mov	r0, r4
 80017a4:	f7ff fef6 	bl	8001594 <comandHM10>
			comandHM10(ble,"AT+NOTI1",300);	//NOTIFICA QUE CONECTOU
 80017a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017ac:	4952      	ldr	r1, [pc, #328]	; (80018f8 <iniciaBleHm10+0x31c>)
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff fef0 	bl	8001594 <comandHM10>
			comandHM10(ble,"AT+PIO11",300);	//1 - CONECT = 1  \  DISC = 0
 80017b4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017b8:	4950      	ldr	r1, [pc, #320]	; (80018fc <iniciaBleHm10+0x320>)
 80017ba:	4620      	mov	r0, r4
 80017bc:	f7ff feea 	bl	8001594 <comandHM10>
			snprintf(comando, sizeof(comando), "AT+NAME%s", BLE_DEVICE_NAME);
 80017c0:	4b4f      	ldr	r3, [pc, #316]	; (8001900 <iniciaBleHm10+0x324>)
 80017c2:	4a50      	ldr	r2, [pc, #320]	; (8001904 <iniciaBleHm10+0x328>)
 80017c4:	2132      	movs	r1, #50	; 0x32
 80017c6:	a801      	add	r0, sp, #4
 80017c8:	f009 fe2a 	bl	800b420 <sniprintf>
			comandHM10(ble,comando, 400); 	// Configura o nome no dispositivo
 80017cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80017d0:	a901      	add	r1, sp, #4
 80017d2:	4620      	mov	r0, r4
 80017d4:	f7ff fede 	bl	8001594 <comandHM10>
			M_BLE_RESET
 80017d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80017dc:	494a      	ldr	r1, [pc, #296]	; (8001908 <iniciaBleHm10+0x32c>)
 80017de:	4620      	mov	r0, r4
 80017e0:	f7ff fed8 	bl	8001594 <comandHM10>
			ble->sequenciaBLE = capturaAddr;
 80017e4:	2302      	movs	r3, #2
 80017e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			break;
 80017ea:	e6fa      	b.n	80015e2 <iniciaBleHm10+0x6>
				comandHM10(ble,"AT+ADDR?",300);//pede addr
 80017ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017f0:	4946      	ldr	r1, [pc, #280]	; (800190c <iniciaBleHm10+0x330>)
 80017f2:	4620      	mov	r0, r4
 80017f4:	f7ff fece 	bl	8001594 <comandHM10>
				MACRO_DEFINE_INTERRUPT
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68d3      	ldr	r3, [r2, #12]
 80017fe:	f043 0310 	orr.w	r3, r3, #16
 8001802:	60d3      	str	r3, [r2, #12]
 8001804:	6863      	ldr	r3, [r4, #4]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	6813      	ldr	r3, [r2, #0]
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4625      	mov	r5, r4
 8001812:	f855 0b2c 	ldr.w	r0, [r5], #44
 8001816:	2218      	movs	r2, #24
 8001818:	4629      	mov	r1, r5
 800181a:	f007 f927 	bl	8008a6c <HAL_UART_Receive_DMA>
				if (ble->chave.hilo != 0){
 800181e:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 8001822:	b923      	cbnz	r3, 800182e <iniciaBleHm10+0x252>
					tryingAddr++;
 8001824:	4a3a      	ldr	r2, [pc, #232]	; (8001910 <iniciaBleHm10+0x334>)
 8001826:	7813      	ldrb	r3, [r2, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	7013      	strb	r3, [r2, #0]
					break;
 800182c:	e01b      	b.n	8001866 <iniciaBleHm10+0x28a>
					ble->sequenciaBLE = final;
 800182e:	2303      	movs	r3, #3
 8001830:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
					MACRO_DEFINE_INTERRUPT
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68d3      	ldr	r3, [r2, #12]
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	60d3      	str	r3, [r2, #12]
 8001840:	6863      	ldr	r3, [r4, #4]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	6813      	ldr	r3, [r2, #0]
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	2218      	movs	r2, #24
 800184e:	4629      	mov	r1, r5
 8001850:	6820      	ldr	r0, [r4, #0]
 8001852:	f007 f90b 	bl	8008a6c <HAL_UART_Receive_DMA>
					tryingAddr=0;
 8001856:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <iniciaBleHm10+0x334>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
					break;
 800185c:	e003      	b.n	8001866 <iniciaBleHm10+0x28a>
			while (tryingAddr < max_attempts) {
 800185e:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <iniciaBleHm10+0x334>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b0e      	cmp	r3, #14
 8001864:	d9c2      	bls.n	80017ec <iniciaBleHm10+0x210>
			if(tryingAddr >= max_attempts){
 8001866:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <iniciaBleHm10+0x334>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b0e      	cmp	r3, #14
 800186c:	f67f aeb9 	bls.w	80015e2 <iniciaBleHm10+0x6>
				ble->sequenciaBLE = erro;//extrapolou as tentativas
 8001870:	2304      	movs	r3, #4
 8001872:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			break;
 8001876:	e6b4      	b.n	80015e2 <iniciaBleHm10+0x6>
			comandHM10(ble,"AT+ADTY0",300);	//DESBLOQUEIA CONEXA
 8001878:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800187c:	4925      	ldr	r1, [pc, #148]	; (8001914 <iniciaBleHm10+0x338>)
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff fe88 	bl	8001594 <comandHM10>
			MACRO_RESET_BLE
 8001884:	4d14      	ldr	r5, [pc, #80]	; (80018d8 <iniciaBleHm10+0x2fc>)
 8001886:	2200      	movs	r2, #0
 8001888:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800188c:	4628      	mov	r0, r5
 800188e:	f004 faa8 	bl	8005de2 <HAL_GPIO_WritePin>
 8001892:	20c8      	movs	r0, #200	; 0xc8
 8001894:	f007 f94d 	bl	8008b32 <osDelay>
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189e:	4628      	mov	r0, r5
 80018a0:	f004 fa9f 	bl	8005de2 <HAL_GPIO_WritePin>
			__HAL_UART_ENABLE_IT 	(ble->UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68d3      	ldr	r3, [r2, #12]
 80018aa:	f043 0310 	orr.w	r3, r3, #16
 80018ae:	60d3      	str	r3, [r2, #12]
			__HAL_DMA_ENABLE_IT 	(ble->UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
 80018b0:	6863      	ldr	r3, [r4, #4]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	6813      	ldr	r3, [r2, #0]
 80018b6:	f043 0302 	orr.w	r3, r3, #2
 80018ba:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_DMA 	(ble->UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 80018bc:	4621      	mov	r1, r4
 80018be:	f851 0b2c 	ldr.w	r0, [r1], #44
 80018c2:	2218      	movs	r2, #24
 80018c4:	f007 f8d2 	bl	8008a6c <HAL_UART_Receive_DMA>
			ble->MaquinaConexao = RX_DESCONECTADO;
 80018c8:	2301      	movs	r3, #1
 80018ca:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			return BLE_SUCCESS;
 80018ce:	2000      	movs	r0, #0
 80018d0:	e000      	b.n	80018d4 <iniciaBleHm10+0x2f8>
		switch (ble->sequenciaBLE) {
 80018d2:	2002      	movs	r0, #2
}
 80018d4:	b00f      	add	sp, #60	; 0x3c
 80018d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d8:	40010c00 	.word	0x40010c00
 80018dc:	0800c550 	.word	0x0800c550
 80018e0:	0800c54c 	.word	0x0800c54c
 80018e4:	0800c55c 	.word	0x0800c55c
 80018e8:	0800c568 	.word	0x0800c568
 80018ec:	0800c574 	.word	0x0800c574
 80018f0:	0800c580 	.word	0x0800c580
 80018f4:	0800c58c 	.word	0x0800c58c
 80018f8:	0800c598 	.word	0x0800c598
 80018fc:	0800c5a4 	.word	0x0800c5a4
 8001900:	0800c5b0 	.word	0x0800c5b0
 8001904:	0800c5bc 	.word	0x0800c5bc
 8001908:	0800c5c8 	.word	0x0800c5c8
 800190c:	0800c5d4 	.word	0x0800c5d4
 8001910:	2000008c 	.word	0x2000008c
 8001914:	0800c5e0 	.word	0x0800c5e0

08001918 <bleConstrutora>:
	if (ble == NULL || UARTHandle == NULL || UARTDMAHandle == NULL || filaRX == NULL || filaTX == NULL || filaComandoInternoTX == NULL) {
 8001918:	b368      	cbz	r0, 8001976 <bleConstrutora+0x5e>
BLE_ErrorCode 	bleConstrutora(Bluetooth *ble, UART_HandleTypeDef *UARTHandle, DMA_HandleTypeDef *UARTDMAHandle, osMessageQId *filaRX, osMessageQId *filaTX, osMessageQId *filaComandoInternoTX){
 800191a:	b510      	push	{r4, lr}
 800191c:	4604      	mov	r4, r0
	if (ble == NULL || UARTHandle == NULL || UARTDMAHandle == NULL || filaRX == NULL || filaTX == NULL || filaComandoInternoTX == NULL) {
 800191e:	b361      	cbz	r1, 800197a <bleConstrutora+0x62>
 8001920:	b36a      	cbz	r2, 800197e <bleConstrutora+0x66>
 8001922:	b373      	cbz	r3, 8001982 <bleConstrutora+0x6a>
 8001924:	9802      	ldr	r0, [sp, #8]
 8001926:	b370      	cbz	r0, 8001986 <bleConstrutora+0x6e>
 8001928:	9803      	ldr	r0, [sp, #12]
 800192a:	b370      	cbz	r0, 800198a <bleConstrutora+0x72>
	ble->UARTHandle 	= UARTHandle;
 800192c:	6021      	str	r1, [r4, #0]
	ble->UARTDMAHandle 	= UARTDMAHandle;
 800192e:	6062      	str	r2, [r4, #4]
	ble->filaComandosRX = filaRX;
 8001930:	6223      	str	r3, [r4, #32]
	ble->filaComandosTX = filaTX;
 8001932:	9b02      	ldr	r3, [sp, #8]
 8001934:	6263      	str	r3, [r4, #36]	; 0x24
	ble->filaComandoInternoTX = filaComandoInternoTX;
 8001936:	62a0      	str	r0, [r4, #40]	; 0x28
	ble->contComandos 	= 0; 	// Renomeado para ter um nome mais explícito e sem _ inicial.
 8001938:	2300      	movs	r3, #0
 800193a:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	ble->JanelaConexao 	= 120; 	// 120 segundos.
 800193e:	2378      	movs	r3, #120	; 0x78
 8001940:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	if (iniciaBleHm10(ble) == BLE_EXTRAPOLOU_TRY) {
 8001944:	4620      	mov	r0, r4
 8001946:	f7ff fe49 	bl	80015dc <iniciaBleHm10>
 800194a:	2802      	cmp	r0, #2
 800194c:	d016      	beq.n	800197c <bleConstrutora+0x64>
	if (bleAddCompConexao(ble, &ble->BLEPedeSenha, RX_PEDE_SENHA) != BLE_SUCCESS ||
 800194e:	2242      	movs	r2, #66	; 0x42
 8001950:	f104 0153 	add.w	r1, r4, #83	; 0x53
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff fbca 	bl	80010ee <bleAddCompConexao>
 800195a:	b950      	cbnz	r0, 8001972 <bleConstrutora+0x5a>
			bleAddCompConexao(ble, &ble->BLERecebeuSenha, RX_RECEBEU_SENHA) != BLE_SUCCESS) {
 800195c:	2240      	movs	r2, #64	; 0x40
 800195e:	f104 0155 	add.w	r1, r4, #85	; 0x55
 8001962:	4620      	mov	r0, r4
 8001964:	f7ff fbc3 	bl	80010ee <bleAddCompConexao>
	if (bleAddCompConexao(ble, &ble->BLEPedeSenha, RX_PEDE_SENHA) != BLE_SUCCESS ||
 8001968:	b918      	cbnz	r0, 8001972 <bleConstrutora+0x5a>
	ble->aknowladge	= sendAknowladge;
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <bleConstrutora+0x78>)
 800196c:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	return BLE_SUCCESS;
 8001970:	e004      	b.n	800197c <bleConstrutora+0x64>
		return BLE_OBJETO_NAO_CRIADO; // Use a constante apropriada para erro.
 8001972:	2006      	movs	r0, #6
 8001974:	e002      	b.n	800197c <bleConstrutora+0x64>
		return BLE_OBJETO_NULO;
 8001976:	2001      	movs	r0, #1
}
 8001978:	4770      	bx	lr
		return BLE_OBJETO_NULO;
 800197a:	2001      	movs	r0, #1
}
 800197c:	bd10      	pop	{r4, pc}
		return BLE_OBJETO_NULO;
 800197e:	2001      	movs	r0, #1
 8001980:	e7fc      	b.n	800197c <bleConstrutora+0x64>
 8001982:	2001      	movs	r0, #1
 8001984:	e7fa      	b.n	800197c <bleConstrutora+0x64>
 8001986:	2001      	movs	r0, #1
 8001988:	e7f8      	b.n	800197c <bleConstrutora+0x64>
 800198a:	2001      	movs	r0, #1
 800198c:	e7f6      	b.n	800197c <bleConstrutora+0x64>
 800198e:	bf00      	nop
 8001990:	08001095 	.word	0x08001095

08001994 <bluetooth10ms>:
void 			bluetooth10ms(Bluetooth* ble){
 8001994:	b510      	push	{r4, lr}
 8001996:	4604      	mov	r4, r0
	(ble->msIdle<=DEF_TEMPO_MAX_S_MSG_LOW)?ble->msIdle++:0;
 8001998:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 800199c:	2b78      	cmp	r3, #120	; 0x78
 800199e:	d802      	bhi.n	80019a6 <bluetooth10ms+0x12>
 80019a0:	3301      	adds	r3, #1
 80019a2:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
	if(ble->JanelaConexao>0){
 80019a6:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80019aa:	b143      	cbz	r3, 80019be <bluetooth10ms+0x2a>
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_HIGH)	{
 80019ac:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80019b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80019b4:	d904      	bls.n	80019c0 <bluetooth10ms+0x2c>
			bluetoothDescon(ble);
 80019b6:	4620      	mov	r0, r4
 80019b8:	f7ff fe00 	bl	80015bc <bluetoothDescon>
 80019bc:	e000      	b.n	80019c0 <bluetooth10ms+0x2c>
		__NOP();
 80019be:	bf00      	nop
	if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_LOW)	{
 80019c0:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80019c4:	2b78      	cmp	r3, #120	; 0x78
 80019c6:	d800      	bhi.n	80019ca <bluetooth10ms+0x36>
}
 80019c8:	bd10      	pop	{r4, pc}
		bluetoothDescon(ble);
 80019ca:	4620      	mov	r0, r4
 80019cc:	f7ff fdf6 	bl	80015bc <bluetoothDescon>
}
 80019d0:	e7fa      	b.n	80019c8 <bluetooth10ms+0x34>
	...

080019d4 <vetor4b_TO_Double>:
 *  Created on: Dec 6, 2023
 *      Author: lucas
 */
#include "Conversoes.h"

void vetor4b_TO_Double(double *destino, uint8_t *vetor, uint8_t inicio) {
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d6:	b083      	sub	sp, #12
 80019d8:	4607      	mov	r7, r0
 80019da:	460e      	mov	r6, r1
 80019dc:	4615      	mov	r5, r2
	// Verificar se o destino e o vetor não são nulos
	floatAsBytes myValue;

	// Copia os bytes do double para o vetor, um por vez, começando no índice 'inicio'
	for (int i = 0; i < 4; ++i) {
 80019de:	2400      	movs	r4, #0
 80019e0:	e00a      	b.n	80019f8 <vetor4b_TO_Double+0x24>
		myValue.bytes[i] = vetor[inicio + i] ;
 80019e2:	192b      	adds	r3, r5, r4
 80019e4:	5cf1      	ldrb	r1, [r6, r3]
 80019e6:	f104 0308 	add.w	r3, r4, #8
 80019ea:	446b      	add	r3, sp
 80019ec:	f803 1c04 	strb.w	r1, [r3, #-4]
		printf("%d \n",myValue.bytes[i]);
 80019f0:	4806      	ldr	r0, [pc, #24]	; (8001a0c <vetor4b_TO_Double+0x38>)
 80019f2:	f009 fca7 	bl	800b344 <iprintf>
	for (int i = 0; i < 4; ++i) {
 80019f6:	3401      	adds	r4, #1
 80019f8:	2c03      	cmp	r4, #3
 80019fa:	ddf2      	ble.n	80019e2 <vetor4b_TO_Double+0xe>
	}

	*destino = (double)myValue.value;
 80019fc:	9801      	ldr	r0, [sp, #4]
 80019fe:	f7fe fd13 	bl	8000428 <__aeabi_f2d>
 8001a02:	e9c7 0100 	strd	r0, r1, [r7]
}
 8001a06:	b003      	add	sp, #12
 8001a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	0800c5ec 	.word	0x0800c5ec

08001a10 <vetor2b_TO_uint16>:
void vetor2b_TO_uint16(uint16_t *destino, uint8_t *vetor, uint8_t inicio) {
 8001a10:	b508      	push	{r3, lr}

	// Verificar se o destino e o vetor não são nulos
	if (destino == NULL || vetor == NULL) {
 8001a12:	b148      	cbz	r0, 8001a28 <vetor2b_TO_uint16+0x18>
 8001a14:	4684      	mov	ip, r0
 8001a16:	b139      	cbz	r1, 8001a28 <vetor2b_TO_uint16+0x18>
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
		return;
	}

	*destino = vetor[inicio] << 8 | vetor[inicio+1];
 8001a18:	5c88      	ldrb	r0, [r1, r2]
 8001a1a:	4411      	add	r1, r2
 8001a1c:	784b      	ldrb	r3, [r1, #1]
 8001a1e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001a22:	f8ac 3000 	strh.w	r3, [ip]
}
 8001a26:	bd08      	pop	{r3, pc}
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 8001a28:	4801      	ldr	r0, [pc, #4]	; (8001a30 <vetor2b_TO_uint16+0x20>)
 8001a2a:	f009 fcf1 	bl	800b410 <puts>
		return;
 8001a2e:	e7fa      	b.n	8001a26 <vetor2b_TO_uint16+0x16>
 8001a30:	0800c5f4 	.word	0x0800c5f4

08001a34 <vetor2b_TO_Double>:
void vetor2b_TO_Double(double *destino, uint8_t *vetor, uint8_t inicio) {
 8001a34:	b510      	push	{r4, lr}

	// Verificar se o destino e o vetor não são nulos
	if (destino == NULL || vetor == NULL) {
 8001a36:	b158      	cbz	r0, 8001a50 <vetor2b_TO_Double+0x1c>
 8001a38:	4604      	mov	r4, r0
 8001a3a:	b149      	cbz	r1, 8001a50 <vetor2b_TO_Double+0x1c>
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
		return;
	}

	*destino = vetor[inicio] << 8 | vetor[inicio+1];
 8001a3c:	5c88      	ldrb	r0, [r1, r2]
 8001a3e:	4411      	add	r1, r2
 8001a40:	784b      	ldrb	r3, [r1, #1]
 8001a42:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001a46:	f7fe fcdd 	bl	8000404 <__aeabi_i2d>
 8001a4a:	e9c4 0100 	strd	r0, r1, [r4]
}
 8001a4e:	bd10      	pop	{r4, pc}
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 8001a50:	4801      	ldr	r0, [pc, #4]	; (8001a58 <vetor2b_TO_Double+0x24>)
 8001a52:	f009 fcdd 	bl	800b410 <puts>
		return;
 8001a56:	e7fa      	b.n	8001a4e <vetor2b_TO_Double+0x1a>
 8001a58:	0800c5f4 	.word	0x0800c5f4

08001a5c <float_TO_vetor4b>:
		myValue.bytes[i] = vetor[inicio + i];
	}

	*destino = myValue.value;
}
void float_TO_vetor4b(double valor, uint8_t *vetor, uint8_t inicio) {
 8001a5c:	b530      	push	{r4, r5, lr}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	4615      	mov	r5, r2
 8001a62:	461c      	mov	r4, r3

	// Cria uma união e armazena o valor float nela
	floatAsBytes myValue;
	myValue.value = (float)valor;
 8001a64:	f7fe fff2 	bl	8000a4c <__aeabi_d2f>
 8001a68:	9001      	str	r0, [sp, #4]

	// Copia os bytes do float para o vetor, um por vez, começando no índice 'inicio'
	for (int i = 0; i < sizeof(myValue.value); ++i) {
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	e009      	b.n	8001a82 <float_TO_vetor4b+0x26>
		vetor[inicio + i] = myValue.bytes[i];
 8001a6e:	1860      	adds	r0, r4, r1
 8001a70:	f101 0308 	add.w	r3, r1, #8
 8001a74:	eb0d 0c03 	add.w	ip, sp, r3
 8001a78:	f81c cc04 	ldrb.w	ip, [ip, #-4]
 8001a7c:	f805 c000 	strb.w	ip, [r5, r0]
	for (int i = 0; i < sizeof(myValue.value); ++i) {
 8001a80:	3101      	adds	r1, #1
 8001a82:	2903      	cmp	r1, #3
 8001a84:	d9f3      	bls.n	8001a6e <float_TO_vetor4b+0x12>
	}
}
 8001a86:	b003      	add	sp, #12
 8001a88:	bd30      	pop	{r4, r5, pc}
	...

08001a8c <CRC16>:
 */

#include "Crc.h"

CRC_short CRC16 (unsigned char *puchMsg, unsigned short usDataLen)
{
 8001a8c:	b500      	push	{lr}
			0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
			0x40
	};

	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001a8e:	22ff      	movs	r2, #255	; 0xff
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001a90:	4696      	mov	lr, r2
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001a92:	e00a      	b.n	8001aaa <CRC16+0x1e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001a94:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001a98:	4053      	eors	r3, r2
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001a9a:	4a08      	ldr	r2, [pc, #32]	; (8001abc <CRC16+0x30>)
 8001a9c:	5cd2      	ldrb	r2, [r2, r3]
 8001a9e:	ea82 020e 	eor.w	r2, r2, lr
		uchCRCHi = auchCRCLo[uIndex] ;
 8001aa2:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <CRC16+0x34>)
 8001aa4:	f811 e003 	ldrb.w	lr, [r1, r3]
	while (usDataLen--) /* pass through message buffer */
 8001aa8:	4661      	mov	r1, ip
 8001aaa:	1e4b      	subs	r3, r1, #1
 8001aac:	fa1f fc83 	uxth.w	ip, r3
 8001ab0:	2900      	cmp	r1, #0
 8001ab2:	d1ef      	bne.n	8001a94 <CRC16+0x8>
	}
	ret.hilo = (uchCRCHi << 8 | uchCRCLo);
//	ret.byte.lo = uchCRCHi << 8;

	return ret ;
}
 8001ab4:	ea42 200e 	orr.w	r0, r2, lr, lsl #8
 8001ab8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001abc:	0800c63c 	.word	0x0800c63c
 8001ac0:	0800c73c 	.word	0x0800c73c

08001ac4 <validaCRC>:

uint8_t validaCRC(CRC_short referencia, CRC_short chave){
 8001ac4:	b082      	sub	sp, #8
	if(referencia.byte.hi != chave.byte.hi ||referencia.byte.lo != chave.byte.lo  ){
 8001ac6:	f8ad 0004 	strh.w	r0, [sp, #4]
 8001aca:	b282      	uxth	r2, r0
 8001acc:	f8ad 1004 	strh.w	r1, [sp, #4]
 8001ad0:	b28b      	uxth	r3, r1
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d102      	bne.n	8001adc <validaCRC+0x18>
		return 1;
	}
	return 0;
 8001ad6:	2000      	movs	r0, #0
}
 8001ad8:	b002      	add	sp, #8
 8001ada:	4770      	bx	lr
		return 1;
 8001adc:	2001      	movs	r0, #1
 8001ade:	e7fb      	b.n	8001ad8 <validaCRC+0x14>

08001ae0 <EepromAddVar>:
		default:
			break;
		}
	}
}
uint8_t EepromAddVar(Eeprom *eeprom, bool resetavel, EepromVariaveis* _var, char* _name, uint16_t addr, TypeData tipo, uint32_t minimo, uint32_t padrao,uint32_t maximo, void *_addrVar){
 8001ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ae4:	4605      	mov	r5, r0
 8001ae6:	4688      	mov	r8, r1
 8001ae8:	4614      	mov	r4, r2
 8001aea:	461f      	mov	r7, r3
 8001aec:	f89d 601c 	ldrb.w	r6, [sp, #28]
	//todo implementar erros e tratar de alguma forma
	//Make space before passing the object name to the nexcomp struct
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fb2d 	bl	8000150 <strlen>
 8001af6:	3001      	adds	r0, #1
 8001af8:	f009 faae 	bl	800b058 <malloc>
 8001afc:	6060      	str	r0, [r4, #4]

	//Nome do objeto
	strcpy(_var->objname, _name);
 8001afe:	4639      	mov	r1, r7
 8001b00:	f009 fe91 	bl	800b826 <strcpy>

	//Endereco
	_var->_addrEprom = addr;
 8001b04:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8001b08:	8123      	strh	r3, [r4, #8]

	//passando o tamnho da variavel
	_var->_sizeType = tipo;
 8001b0a:	7726      	strb	r6, [r4, #28]

	//torna nao resetavel ao softreset
	_var->flagResetavel = resetavel;
 8001b0c:	f884 8000 	strb.w	r8, [r4]


	switch (tipo) {
 8001b10:	2e02      	cmp	r6, #2
 8001b12:	d01c      	beq.n	8001b4e <EepromAddVar+0x6e>
 8001b14:	2e04      	cmp	r6, #4
 8001b16:	d026      	beq.n	8001b66 <EepromAddVar+0x86>
 8001b18:	2e01      	cmp	r6, #1
 8001b1a:	d00c      	beq.n	8001b36 <EepromAddVar+0x56>
		//erro, parametro errado
		break;
	}

	//Adiciona o componente na respectiva estrutura
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _var;
 8001b1c:	f895 3124 	ldrb.w	r3, [r5, #292]	; 0x124
 8001b20:	f103 020c 	add.w	r2, r3, #12
 8001b24:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001b28:	6054      	str	r4, [r2, #4]
	eeprom->_EepromVarCount++;
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f885 3124 	strb.w	r3, [r5, #292]	; 0x124

	return 0;
}
 8001b30:	2000      	movs	r0, #0
 8001b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_var->minValue 		= (uint8_t)minimo;
 8001b36:	9b08      	ldr	r3, [sp, #32]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	6163      	str	r3, [r4, #20]
		_var->defaultValue 	= (uint8_t)padrao;
 8001b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	6123      	str	r3, [r4, #16]
		_var->maxValue 		= (uint8_t)maximo;
 8001b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	61a3      	str	r3, [r4, #24]
		_var->ptr8			= (uint8_t *)_addrVar;
 8001b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001b4a:	6223      	str	r3, [r4, #32]
		break;
 8001b4c:	e7e6      	b.n	8001b1c <EepromAddVar+0x3c>
		_var->minValue 		= (uint16_t)minimo;
 8001b4e:	9b08      	ldr	r3, [sp, #32]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	6163      	str	r3, [r4, #20]
		_var->defaultValue 	= (uint16_t)padrao;
 8001b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	6123      	str	r3, [r4, #16]
		_var->maxValue 		= (uint16_t)maximo;
 8001b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	61a3      	str	r3, [r4, #24]
		_var->ptr16			= (uint16_t *)_addrVar;
 8001b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001b62:	6263      	str	r3, [r4, #36]	; 0x24
		break;
 8001b64:	e7da      	b.n	8001b1c <EepromAddVar+0x3c>
		_var->minValue 		= (uint32_t)minimo;
 8001b66:	9b08      	ldr	r3, [sp, #32]
 8001b68:	6163      	str	r3, [r4, #20]
		_var->defaultValue 	= (uint32_t)padrao;
 8001b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b6c:	6123      	str	r3, [r4, #16]
		_var->maxValue 		= (uint32_t)maximo;
 8001b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b70:	61a3      	str	r3, [r4, #24]
		_var->ptr32			= (uint32_t *)_addrVar;
 8001b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001b74:	62a3      	str	r3, [r4, #40]	; 0x28
		break;
 8001b76:	e7d1      	b.n	8001b1c <EepromAddVar+0x3c>

08001b78 <EepromInit>:
uint8_t EepromInit	(Eeprom *eeprom, I2C_HandleTypeDef *i2c, osMessageQId *fila){
 8001b78:	b510      	push	{r4, lr}
 8001b7a:	b086      	sub	sp, #24
	eeprom->i2cHandle = i2c;
 8001b7c:	62c1      	str	r1, [r0, #44]	; 0x2c
	eeprom->filaComandos = fila;
 8001b7e:	6302      	str	r2, [r0, #48]	; 0x30
	eeprom->_EepromVarCount  = 0;
 8001b80:	2400      	movs	r4, #0
 8001b82:	f880 4124 	strb.w	r4, [r0, #292]	; 0x124
	eeprom->_EepromVarFloatingCount  = 0;
 8001b86:	f880 4125 	strb.w	r4, [r0, #293]	; 0x125
	EepromAddVar(eeprom, 0, &eeprom->RefFlag,	"addrREF_MEM_FLAG",	addrREF_MEM_FLAG,	DATA8BITS,	0,	STD_REF_MEM	,254	,0);
 8001b8a:	9405      	str	r4, [sp, #20]
 8001b8c:	23fe      	movs	r3, #254	; 0xfe
 8001b8e:	9304      	str	r3, [sp, #16]
 8001b90:	2325      	movs	r3, #37	; 0x25
 8001b92:	9303      	str	r3, [sp, #12]
 8001b94:	9402      	str	r4, [sp, #8]
 8001b96:	2301      	movs	r3, #1
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	234d      	movs	r3, #77	; 0x4d
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <EepromInit+0x38>)
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	f7ff ff9c 	bl	8001ae0 <EepromAddVar>
}
 8001ba8:	4620      	mov	r0, r4
 8001baa:	b006      	add	sp, #24
 8001bac:	bd10      	pop	{r4, pc}
 8001bae:	bf00      	nop
 8001bb0:	0800c83c 	.word	0x0800c83c

08001bb4 <EepromAddVarFloating>:
uint8_t EepromAddVarFloating(Eeprom *eeprom, bool resetavel, EepromVarFloating* _var, char* _name,uint16_t addr,TypeDataFloating tipo,double minimo,double padrao,double maximo, void *_addrVar)
{
 8001bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb8:	4605      	mov	r5, r0
 8001bba:	4688      	mov	r8, r1
 8001bbc:	4614      	mov	r4, r2
 8001bbe:	461e      	mov	r6, r3
 8001bc0:	f89d 701c 	ldrb.w	r7, [sp, #28]
	//todo implementar erros e tratar de alguma forma
	//Make space before passing the object name to the nexcomp struct
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fac3 	bl	8000150 <strlen>
 8001bca:	3001      	adds	r0, #1
 8001bcc:	f009 fa44 	bl	800b058 <malloc>
 8001bd0:	6060      	str	r0, [r4, #4]

	//Nome do objeto
	strcpy(_var->objname, _name);
 8001bd2:	4631      	mov	r1, r6
 8001bd4:	f009 fe27 	bl	800b826 <strcpy>

	//Endereco
	_var->_addrEprom = addr;
 8001bd8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8001bdc:	8123      	strh	r3, [r4, #8]

	//passando o tamnho da variavel
	_var->_sizeType = tipo;
 8001bde:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38

	//torna nao resetavel ao softreset
	_var->flagResetavel = resetavel;
 8001be2:	f884 8000 	strb.w	r8, [r4]
	switch (tipo) {
 8001be6:	2f20      	cmp	r7, #32
 8001be8:	d00e      	beq.n	8001c08 <EepromAddVarFloating+0x54>
 8001bea:	2f40      	cmp	r7, #64	; 0x40
 8001bec:	d027      	beq.n	8001c3e <EepromAddVarFloating+0x8a>
		_var->ptrDouble		= (double *)_addrVar;
		break;
	}

	//Adiciona o componente na respectiva estrutura
	eeprom->_EepromVarFloatingArr[eeprom->_EepromVarFloatingCount] = _var;
 8001bee:	f895 3125 	ldrb.w	r3, [r5, #293]	; 0x125
 8001bf2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8001bf6:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001bfa:	6054      	str	r4, [r2, #4]
	eeprom->_EepromVarFloatingCount++;
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f885 3125 	strb.w	r3, [r5, #293]	; 0x125

	return 0;
}
 8001c02:	2000      	movs	r0, #0
 8001c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_var->minValue 		= (float)minimo;
 8001c08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001c0c:	f7fe ff1e 	bl	8000a4c <__aeabi_d2f>
 8001c10:	f7fe fc0a 	bl	8000428 <__aeabi_f2d>
 8001c14:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
		_var->defaultValue 	= (float)padrao;
 8001c18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001c1c:	f7fe ff16 	bl	8000a4c <__aeabi_d2f>
 8001c20:	f7fe fc02 	bl	8000428 <__aeabi_f2d>
 8001c24:	e9c4 0108 	strd	r0, r1, [r4, #32]
		_var->maxValue 		= (float)maximo;
 8001c28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001c2c:	f7fe ff0e 	bl	8000a4c <__aeabi_d2f>
 8001c30:	f7fe fbfa 	bl	8000428 <__aeabi_f2d>
 8001c34:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		_var->ptrFloat		= (float *)_addrVar;
 8001c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001c3a:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8001c3c:	e7d7      	b.n	8001bee <EepromAddVarFloating+0x3a>
		_var->minValue 		= (double)minimo;
 8001c3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001c42:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
		_var->defaultValue 	= (double)padrao;
 8001c46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8001c4a:	e9c4 2308 	strd	r2, r3, [r4, #32]
		_var->maxValue 		= (double)maximo;
 8001c4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001c52:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
		_var->ptrDouble		= (double *)_addrVar;
 8001c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001c58:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8001c5a:	e7c8      	b.n	8001bee <EepromAddVarFloating+0x3a>

08001c5c <EepromSetVar>:
bool EepromSetVar	(Eeprom *eeprom, EepromVariaveis *_var, uint32_t valor){
 8001c5c:	b530      	push	{r4, r5, lr}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	4605      	mov	r5, r0
 8001c62:	460c      	mov	r4, r1
	HAL_StatusTypeDef result;
	uint8_t 		buffer1b[1];
	shortAsBytes 	buffer2b;
	uint32AsBytes	buffer4b;

	LIBERA_EEPROM
 8001c64:	2200      	movs	r2, #0
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	482b      	ldr	r0, [pc, #172]	; (8001d18 <EepromSetVar+0xbc>)
 8001c6a:	f004 f8ba 	bl	8005de2 <HAL_GPIO_WritePin>
 8001c6e:	2005      	movs	r0, #5
 8001c70:	f003 fa68 	bl	8005144 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,50,HAL_MAX_DELAY);
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
 8001c78:	2232      	movs	r2, #50	; 0x32
 8001c7a:	21a2      	movs	r1, #162	; 0xa2
 8001c7c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001c7e:	f004 fe75 	bl	800696c <HAL_I2C_IsDeviceReady>
	if (result==HAL_OK)
 8001c82:	b930      	cbnz	r0, 8001c92 <EepromSetVar+0x36>
	{
		switch (_var->_sizeType) {
 8001c84:	7f23      	ldrb	r3, [r4, #28]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d023      	beq.n	8001cd2 <EepromSetVar+0x76>
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d033      	beq.n	8001cf6 <EepromSetVar+0x9a>
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d00d      	beq.n	8001cae <EepromSetVar+0x52>
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);

			break;
		}
	}
	osDelay(20);
 8001c92:	2014      	movs	r0, #20
 8001c94:	f006 ff4d 	bl	8008b32 <osDelay>
	TRAVA_EEPROM
 8001c98:	2005      	movs	r0, #5
 8001c9a:	f003 fa53 	bl	8005144 <HAL_Delay>
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2180      	movs	r1, #128	; 0x80
 8001ca2:	481d      	ldr	r0, [pc, #116]	; (8001d18 <EepromSetVar+0xbc>)
 8001ca4:	f004 f89d 	bl	8005de2 <HAL_GPIO_WritePin>
	return 1;
}
 8001ca8:	2001      	movs	r0, #1
 8001caa:	b009      	add	sp, #36	; 0x24
 8001cac:	bd30      	pop	{r4, r5, pc}
			_var->valor = *_var->ptr8;
 8001cae:	6a23      	ldr	r3, [r4, #32]
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	60e3      	str	r3, [r4, #12]
			buffer1b[0] 		= (uint8_t)_var->valor;
 8001cb4:	f88d 301c 	strb.w	r3, [sp, #28]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b, 1, 200);
 8001cb8:	23c8      	movs	r3, #200	; 0xc8
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	ab07      	add	r3, sp, #28
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2310      	movs	r3, #16
 8001cc6:	8922      	ldrh	r2, [r4, #8]
 8001cc8:	21a2      	movs	r1, #162	; 0xa2
 8001cca:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001ccc:	f004 fbf8 	bl	80064c0 <HAL_I2C_Mem_Write>
			break;
 8001cd0:	e7df      	b.n	8001c92 <EepromSetVar+0x36>
			_var->valor = *_var->ptr16;
 8001cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	60e3      	str	r3, [r4, #12]
			buffer2b.value 		= (uint16_t)_var->valor;
 8001cd8:	f8ad 3018 	strh.w	r3, [sp, #24]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2b.bytes, 2, 200);
 8001cdc:	23c8      	movs	r3, #200	; 0xc8
 8001cde:	9302      	str	r3, [sp, #8]
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	ab06      	add	r3, sp, #24
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2310      	movs	r3, #16
 8001cea:	8922      	ldrh	r2, [r4, #8]
 8001cec:	21a2      	movs	r1, #162	; 0xa2
 8001cee:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001cf0:	f004 fbe6 	bl	80064c0 <HAL_I2C_Mem_Write>
			break;
 8001cf4:	e7cd      	b.n	8001c92 <EepromSetVar+0x36>
			_var->valor = *_var->ptr32;
 8001cf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60e3      	str	r3, [r4, #12]
			buffer4b.value 		= (uint32_t)_var->valor;
 8001cfc:	9305      	str	r3, [sp, #20]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
 8001cfe:	23c8      	movs	r3, #200	; 0xc8
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	2304      	movs	r3, #4
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	ab05      	add	r3, sp, #20
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2310      	movs	r3, #16
 8001d0c:	8922      	ldrh	r2, [r4, #8]
 8001d0e:	21a2      	movs	r1, #162	; 0xa2
 8001d10:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001d12:	f004 fbd5 	bl	80064c0 <HAL_I2C_Mem_Write>
			break;
 8001d16:	e7bc      	b.n	8001c92 <EepromSetVar+0x36>
 8001d18:	40010c00 	.word	0x40010c00

08001d1c <EepromSetVarFloating>:
bool EepromSetVarFloating	(Eeprom *eeprom, EepromVarFloating *_var, double valor){
 8001d1c:	b530      	push	{r4, r5, lr}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	4605      	mov	r5, r0
 8001d22:	460c      	mov	r4, r1
	//retomar leitura direto da variavel interna no objeto
	__IO HAL_StatusTypeDef result;
	__IO floatAsBytes	floatBuff;
	__IO doubleAsBytes 	doubleBuff;

	LIBERA_EEPROM
 8001d24:	2200      	movs	r2, #0
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	4825      	ldr	r0, [pc, #148]	; (8001dc0 <EepromSetVarFloating+0xa4>)
 8001d2a:	f004 f85a 	bl	8005de2 <HAL_GPIO_WritePin>
 8001d2e:	2005      	movs	r0, #5
 8001d30:	f003 fa08 	bl	8005144 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,50,HAL_MAX_DELAY);
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	2232      	movs	r2, #50	; 0x32
 8001d3a:	21a2      	movs	r1, #162	; 0xa2
 8001d3c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001d3e:	f004 fe15 	bl	800696c <HAL_I2C_IsDeviceReady>
 8001d42:	f88d 001f 	strb.w	r0, [sp, #31]
	if (result==HAL_OK)
 8001d46:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8001d4a:	b92b      	cbnz	r3, 8001d58 <EepromSetVarFloating+0x3c>
	{
		switch (_var->_sizeType) {
 8001d4c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d00f      	beq.n	8001d74 <EepromSetVarFloating+0x58>
 8001d54:	2b40      	cmp	r3, #64	; 0x40
 8001d56:	d01e      	beq.n	8001d96 <EepromSetVarFloating+0x7a>
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);

			break;
		}
	}
	osDelay(30);
 8001d58:	201e      	movs	r0, #30
 8001d5a:	f006 feea 	bl	8008b32 <osDelay>
	TRAVA_EEPROM
 8001d5e:	2005      	movs	r0, #5
 8001d60:	f003 f9f0 	bl	8005144 <HAL_Delay>
 8001d64:	2201      	movs	r2, #1
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	4815      	ldr	r0, [pc, #84]	; (8001dc0 <EepromSetVarFloating+0xa4>)
 8001d6a:	f004 f83a 	bl	8005de2 <HAL_GPIO_WritePin>
	return 1;
}
 8001d6e:	2001      	movs	r0, #1
 8001d70:	b009      	add	sp, #36	; 0x24
 8001d72:	bd30      	pop	{r4, r5, pc}
			_var->valorFloat = *_var->ptrFloat;
 8001d74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	61a3      	str	r3, [r4, #24]
			floatBuff.value = (float)_var->valorFloat;
 8001d7a:	9306      	str	r3, [sp, #24]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200);
 8001d7c:	23c8      	movs	r3, #200	; 0xc8
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	2304      	movs	r3, #4
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	ab06      	add	r3, sp, #24
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2310      	movs	r3, #16
 8001d8a:	8922      	ldrh	r2, [r4, #8]
 8001d8c:	21a2      	movs	r1, #162	; 0xa2
 8001d8e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001d90:	f004 fb96 	bl	80064c0 <HAL_I2C_Mem_Write>
			break;
 8001d94:	e7e0      	b.n	8001d58 <EepromSetVarFloating+0x3c>
			_var->valorDouble = *_var->ptrDouble;
 8001d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	e9c4 2304 	strd	r2, r3, [r4, #16]
			doubleBuff.value = (double)_var->valorDouble;
 8001da0:	e9cd 2304 	strd	r2, r3, [sp, #16]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);
 8001da4:	23c8      	movs	r3, #200	; 0xc8
 8001da6:	9302      	str	r3, [sp, #8]
 8001da8:	2308      	movs	r3, #8
 8001daa:	9301      	str	r3, [sp, #4]
 8001dac:	ab04      	add	r3, sp, #16
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2310      	movs	r3, #16
 8001db2:	8922      	ldrh	r2, [r4, #8]
 8001db4:	21a2      	movs	r1, #162	; 0xa2
 8001db6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001db8:	f004 fb82 	bl	80064c0 <HAL_I2C_Mem_Write>
			break;
 8001dbc:	e7cc      	b.n	8001d58 <EepromSetVarFloating+0x3c>
 8001dbe:	bf00      	nop
 8001dc0:	40010c00 	.word	0x40010c00

08001dc4 <RestauraEeprom>:
			RestauraEeprom(eeprom, hardReset);
			return;
		}
	}
}
void RestauraEeprom			(Eeprom *eeprom ,TypeRestauracao tipo){
 8001dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc6:	b08b      	sub	sp, #44	; 0x2c
 8001dc8:	4604      	mov	r4, r0
 8001dca:	460f      	mov	r7, r1
	__IO shortAsBytes 	buffer2b;
	__IO uint32AsBytes	buffer4b;
	__IO floatAsBytes	floatBuff;
	__IO doubleAsBytes 	doubleBuff;

	LIBERA_EEPROM
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	4863      	ldr	r0, [pc, #396]	; (8001f60 <RestauraEeprom+0x19c>)
 8001dd2:	f004 f806 	bl	8005de2 <HAL_GPIO_WritePin>
 8001dd6:	2005      	movs	r0, #5
 8001dd8:	f003 f9b4 	bl	8005144 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,30,HAL_MAX_DELAY);
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8001de0:	221e      	movs	r2, #30
 8001de2:	21a2      	movs	r1, #162	; 0xa2
 8001de4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001de6:	f004 fdc1 	bl	800696c <HAL_I2C_IsDeviceReady>
	if (result==HAL_OK){
 8001dea:	2800      	cmp	r0, #0
 8001dec:	f040 80ad 	bne.w	8001f4a <RestauraEeprom+0x186>
 8001df0:	4605      	mov	r5, r0
		//redefine para default variaveis normais
		for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001df2:	4606      	mov	r6, r0
 8001df4:	e00b      	b.n	8001e0e <RestauraEeprom+0x4a>
			//verifica se item é resetavel
			if(!eeprom->_EepromVarArr[i]->flagResetavel || tipo == hardReset){
				switch (eeprom->_EepromVarArr[i]->_sizeType) {
 8001df6:	7f1a      	ldrb	r2, [r3, #28]
 8001df8:	2a02      	cmp	r2, #2
 8001dfa:	d02a      	beq.n	8001e52 <RestauraEeprom+0x8e>
 8001dfc:	2a04      	cmp	r2, #4
 8001dfe:	d03b      	beq.n	8001e78 <RestauraEeprom+0xb4>
 8001e00:	2a01      	cmp	r2, #1
 8001e02:	d013      	beq.n	8001e2c <RestauraEeprom+0x68>
					buffer4b.value 					= (uint32_t)eeprom->_EepromVarArr[i]->defaultValue;
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
					break;
				}
			}
			osDelay(20);
 8001e04:	2014      	movs	r0, #20
 8001e06:	f006 fe94 	bl	8008b32 <osDelay>
		for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001e0a:	3601      	adds	r6, #1
 8001e0c:	b2f6      	uxtb	r6, r6
 8001e0e:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8001e12:	42b3      	cmp	r3, r6
 8001e14:	d94c      	bls.n	8001eb0 <RestauraEeprom+0xec>
			if(!eeprom->_EepromVarArr[i]->flagResetavel || tipo == hardReset){
 8001e16:	f106 030c 	add.w	r3, r6, #12
 8001e1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	2a00      	cmp	r2, #0
 8001e24:	d0e7      	beq.n	8001df6 <RestauraEeprom+0x32>
 8001e26:	2f01      	cmp	r7, #1
 8001e28:	d1ec      	bne.n	8001e04 <RestauraEeprom+0x40>
 8001e2a:	e7e4      	b.n	8001df6 <RestauraEeprom+0x32>
					buffer1b.value					=0x00;
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
					buffer1b.value 					= (uint8_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001e32:	7c1a      	ldrb	r2, [r3, #16]
 8001e34:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b.bytes, 1, 200);
 8001e38:	891a      	ldrh	r2, [r3, #8]
 8001e3a:	23c8      	movs	r3, #200	; 0xc8
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	2301      	movs	r3, #1
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	ab09      	add	r3, sp, #36	; 0x24
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2310      	movs	r3, #16
 8001e48:	21a2      	movs	r1, #162	; 0xa2
 8001e4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e4c:	f004 fb38 	bl	80064c0 <HAL_I2C_Mem_Write>
					break;
 8001e50:	e7d8      	b.n	8001e04 <RestauraEeprom+0x40>
					buffer2b.value					=0x0000;
 8001e52:	2200      	movs	r2, #0
 8001e54:	f8ad 2020 	strh.w	r2, [sp, #32]
					buffer2b.value 					= (uint16_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001e58:	8a1a      	ldrh	r2, [r3, #16]
 8001e5a:	f8ad 2020 	strh.w	r2, [sp, #32]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2b.bytes, 2, 200);
 8001e5e:	891a      	ldrh	r2, [r3, #8]
 8001e60:	23c8      	movs	r3, #200	; 0xc8
 8001e62:	9302      	str	r3, [sp, #8]
 8001e64:	2302      	movs	r3, #2
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	ab08      	add	r3, sp, #32
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	21a2      	movs	r1, #162	; 0xa2
 8001e70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e72:	f004 fb25 	bl	80064c0 <HAL_I2C_Mem_Write>
					break;
 8001e76:	e7c5      	b.n	8001e04 <RestauraEeprom+0x40>
					buffer4b.value					=0x00000000;
 8001e78:	2200      	movs	r2, #0
 8001e7a:	9207      	str	r2, [sp, #28]
					buffer4b.value 					= (uint32_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	9207      	str	r2, [sp, #28]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
 8001e80:	891a      	ldrh	r2, [r3, #8]
 8001e82:	23c8      	movs	r3, #200	; 0xc8
 8001e84:	9302      	str	r3, [sp, #8]
 8001e86:	2304      	movs	r3, #4
 8001e88:	9301      	str	r3, [sp, #4]
 8001e8a:	ab07      	add	r3, sp, #28
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	2310      	movs	r3, #16
 8001e90:	21a2      	movs	r1, #162	; 0xa2
 8001e92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e94:	f004 fb14 	bl	80064c0 <HAL_I2C_Mem_Write>
					break;
 8001e98:	e7b4      	b.n	8001e04 <RestauraEeprom+0x40>
		}
		//redefine para default variaveis floating
		for(uint8_t k = 0; k < eeprom->_EepromVarFloatingCount; k++){
			//verifica se item é resetavel
			if(!eeprom->_EepromVarFloatingArr[k]->flagResetavel || tipo == hardReset){
				switch (eeprom->_EepromVarFloatingArr[k]->_sizeType) {
 8001e9a:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d015      	beq.n	8001ece <RestauraEeprom+0x10a>
 8001ea2:	2b40      	cmp	r3, #64	; 0x40
 8001ea4:	d027      	beq.n	8001ef6 <RestauraEeprom+0x132>
					doubleBuff.value 							= (double)eeprom->_EepromVarFloatingArr[k]->defaultValue;
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);
					break;
				}
			}
			osDelay(40);
 8001ea6:	2028      	movs	r0, #40	; 0x28
 8001ea8:	f006 fe43 	bl	8008b32 <osDelay>
		for(uint8_t k = 0; k < eeprom->_EepromVarFloatingCount; k++){
 8001eac:	3501      	adds	r5, #1
 8001eae:	b2ed      	uxtb	r5, r5
 8001eb0:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
 8001eb4:	42ab      	cmp	r3, r5
 8001eb6:	d933      	bls.n	8001f20 <RestauraEeprom+0x15c>
			if(!eeprom->_EepromVarFloatingArr[k]->flagResetavel || tipo == hardReset){
 8001eb8:	f105 032a 	add.w	r3, r5, #42	; 0x2a
 8001ebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001ec0:	685e      	ldr	r6, [r3, #4]
 8001ec2:	7833      	ldrb	r3, [r6, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0e8      	beq.n	8001e9a <RestauraEeprom+0xd6>
 8001ec8:	2f01      	cmp	r7, #1
 8001eca:	d1ec      	bne.n	8001ea6 <RestauraEeprom+0xe2>
 8001ecc:	e7e5      	b.n	8001e9a <RestauraEeprom+0xd6>
					floatBuff.value 							= 0x0000;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9306      	str	r3, [sp, #24]
					floatBuff.value 							= (float)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001ed2:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 8001ed6:	f7fe fdb9 	bl	8000a4c <__aeabi_d2f>
 8001eda:	9006      	str	r0, [sp, #24]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200);
 8001edc:	8932      	ldrh	r2, [r6, #8]
 8001ede:	23c8      	movs	r3, #200	; 0xc8
 8001ee0:	9302      	str	r3, [sp, #8]
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	ab06      	add	r3, sp, #24
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2310      	movs	r3, #16
 8001eec:	21a2      	movs	r1, #162	; 0xa2
 8001eee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001ef0:	f004 fae6 	bl	80064c0 <HAL_I2C_Mem_Write>
					break;
 8001ef4:	e7d7      	b.n	8001ea6 <RestauraEeprom+0xe2>
					doubleBuff.value 							= 0x00000000;
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e9cd 2304 	strd	r2, r3, [sp, #16]
					doubleBuff.value 							= (double)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001efe:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
 8001f02:	e9cd 2304 	strd	r2, r3, [sp, #16]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);
 8001f06:	8932      	ldrh	r2, [r6, #8]
 8001f08:	23c8      	movs	r3, #200	; 0xc8
 8001f0a:	9302      	str	r3, [sp, #8]
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	ab04      	add	r3, sp, #16
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2310      	movs	r3, #16
 8001f16:	21a2      	movs	r1, #162	; 0xa2
 8001f18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f1a:	f004 fad1 	bl	80064c0 <HAL_I2C_Mem_Write>
					break;
 8001f1e:	e7c2      	b.n	8001ea6 <RestauraEeprom+0xe2>
		}

		//grava valor padrao standart
		buffer1b.value					= (uint8_t)STD_REF_MEM;
 8001f20:	2325      	movs	r3, #37	; 0x25
 8001f22:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		eeprom->RefFlag.valor			= buffer1b.value;
 8001f26:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8001f2a:	60e3      	str	r3, [r4, #12]
		HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->RefFlag._addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b.bytes, 1, 200);
 8001f2c:	23c8      	movs	r3, #200	; 0xc8
 8001f2e:	9302      	str	r3, [sp, #8]
 8001f30:	2301      	movs	r3, #1
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	ab09      	add	r3, sp, #36	; 0x24
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2310      	movs	r3, #16
 8001f3a:	8922      	ldrh	r2, [r4, #8]
 8001f3c:	21a2      	movs	r1, #162	; 0xa2
 8001f3e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f40:	f004 fabe 	bl	80064c0 <HAL_I2C_Mem_Write>
		osDelay(40);
 8001f44:	2028      	movs	r0, #40	; 0x28
 8001f46:	f006 fdf4 	bl	8008b32 <osDelay>
	}
	TRAVA_EEPROM
 8001f4a:	2005      	movs	r0, #5
 8001f4c:	f003 f8fa 	bl	8005144 <HAL_Delay>
 8001f50:	2201      	movs	r2, #1
 8001f52:	2180      	movs	r1, #128	; 0x80
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <RestauraEeprom+0x19c>)
 8001f56:	f003 ff44 	bl	8005de2 <HAL_GPIO_WritePin>
}
 8001f5a:	b00b      	add	sp, #44	; 0x2c
 8001f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40010c00 	.word	0x40010c00

08001f64 <EepromDownloadValores>:
void EepromDownloadValores	(Eeprom *eeprom){
 8001f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f68:	b08d      	sub	sp, #52	; 0x34
 8001f6a:	4605      	mov	r5, r0
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001f6c:	f04f 0a00 	mov.w	sl, #0
 8001f70:	e108      	b.n	8002184 <EepromDownloadValores+0x220>
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR,eeprom->_EepromVarArr[i]->_addrEprom,I2C_MEMADD_SIZE_16BIT,buffer1b.bytes, 1, 200);
 8001f72:	8912      	ldrh	r2, [r2, #8]
 8001f74:	23c8      	movs	r3, #200	; 0xc8
 8001f76:	9302      	str	r3, [sp, #8]
 8001f78:	2301      	movs	r3, #1
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	ab0b      	add	r3, sp, #44	; 0x2c
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2310      	movs	r3, #16
 8001f82:	21a3      	movs	r1, #163	; 0xa3
 8001f84:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001f86:	f004 fb4d 	bl	8006624 <HAL_I2C_Mem_Read>
				eeprom->_EepromVarArr[i]->valor = buffer1b.value;
 8001f8a:	f10a 030c 	add.w	r3, sl, #12
 8001f8e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8001f98:	60d1      	str	r1, [r2, #12]
				if(eeprom->_EepromVarArr[i]->ptr8 !=0){
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	6a13      	ldr	r3, [r2, #32]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 810c 	beq.w	80021bc <EepromDownloadValores+0x258>
					*eeprom->_EepromVarArr[i]->ptr8 = eeprom->_EepromVarArr[i]->valor;
 8001fa4:	68d2      	ldr	r2, [r2, #12]
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e108      	b.n	80021bc <EepromDownloadValores+0x258>
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR,eeprom->_EepromVarArr[i]->_addrEprom,I2C_MEMADD_SIZE_16BIT,buffer2b.bytes, 2, 200);//tentar usar o & todo
 8001faa:	8912      	ldrh	r2, [r2, #8]
 8001fac:	23c8      	movs	r3, #200	; 0xc8
 8001fae:	9302      	str	r3, [sp, #8]
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	ab0a      	add	r3, sp, #40	; 0x28
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2310      	movs	r3, #16
 8001fba:	21a3      	movs	r1, #163	; 0xa3
 8001fbc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001fbe:	f004 fb31 	bl	8006624 <HAL_I2C_Mem_Read>
				eeprom->_EepromVarArr[i]->valor = buffer2b.value;
 8001fc2:	f10a 030c 	add.w	r3, sl, #12
 8001fc6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8001fd0:	60d1      	str	r1, [r2, #12]
				if(eeprom->_EepromVarArr[i]->ptr16 !=0){
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80f0 	beq.w	80021bc <EepromDownloadValores+0x258>
					*eeprom->_EepromVarArr[i]->ptr16 = eeprom->_EepromVarArr[i]->valor;
 8001fdc:	68d2      	ldr	r2, [r2, #12]
 8001fde:	801a      	strh	r2, [r3, #0]
 8001fe0:	e0ec      	b.n	80021bc <EepromDownloadValores+0x258>
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR,eeprom->_EepromVarArr[i]->_addrEprom,I2C_MEMADD_SIZE_16BIT,buffer4b.bytes, 4, 200);
 8001fe2:	8912      	ldrh	r2, [r2, #8]
 8001fe4:	23c8      	movs	r3, #200	; 0xc8
 8001fe6:	9302      	str	r3, [sp, #8]
 8001fe8:	2304      	movs	r3, #4
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	ab09      	add	r3, sp, #36	; 0x24
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2310      	movs	r3, #16
 8001ff2:	21a3      	movs	r1, #163	; 0xa3
 8001ff4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001ff6:	f004 fb15 	bl	8006624 <HAL_I2C_Mem_Read>
				eeprom->_EepromVarArr[i]->valor =  buffer4b.value;
 8001ffa:	f10a 030c 	add.w	r3, sl, #12
 8001ffe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002006:	60d1      	str	r1, [r2, #12]
				if(eeprom->_EepromVarArr[i]->ptr32 !=0){
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80d5 	beq.w	80021bc <EepromDownloadValores+0x258>
					*eeprom->_EepromVarArr[i]->ptr32 = eeprom->_EepromVarArr[i]->valor;
 8002012:	68d2      	ldr	r2, [r2, #12]
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	e0d1      	b.n	80021bc <EepromDownloadValores+0x258>
					HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, eeprom->_EepromVarFloatingArr[y]->_addrEprom, I2C_MEMADD_SIZE_16BIT, floatBuff.bytes, 4, 200);
 8002018:	8912      	ldrh	r2, [r2, #8]
 800201a:	23c8      	movs	r3, #200	; 0xc8
 800201c:	9302      	str	r3, [sp, #8]
 800201e:	2304      	movs	r3, #4
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	ab05      	add	r3, sp, #20
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2310      	movs	r3, #16
 8002028:	21a3      	movs	r1, #163	; 0xa3
 800202a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800202c:	f004 fafa 	bl	8006624 <HAL_I2C_Mem_Read>
					eeprom->_EepromVarFloatingArr[y]->valorFloat =  floatBuff.value;
 8002030:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 8002034:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	9905      	ldr	r1, [sp, #20]
 800203c:	6191      	str	r1, [r2, #24]
					if (eeprom->_EepromVarFloatingArr[y]->ptrFloat != 0) {
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002042:	b10b      	cbz	r3, 8002048 <EepromDownloadValores+0xe4>
						*eeprom->_EepromVarFloatingArr[y]->ptrFloat = eeprom->_EepromVarFloatingArr[y]->valorFloat;
 8002044:	6992      	ldr	r2, [r2, #24]
 8002046:	601a      	str	r2, [r3, #0]
					if(eeprom->_EepromVarFloatingArr[y]->defaultValue>0 && (eeprom->_EepromVarFloatingArr[y]->valorFloat == 0 || eeprom->_EepromVarFloatingArr[y]->valorFloat > eeprom->_EepromVarFloatingArr[y]->maxValue || eeprom->_EepromVarFloatingArr[y]->valorFloat < eeprom->_EepromVarFloatingArr[y]->minValue))
 8002048:	362a      	adds	r6, #42	; 0x2a
 800204a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800204e:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8002052:	e9db 6708 	ldrd	r6, r7, [fp, #32]
 8002056:	2200      	movs	r2, #0
 8002058:	2300      	movs	r3, #0
 800205a:	4630      	mov	r0, r6
 800205c:	4639      	mov	r1, r7
 800205e:	f7fe fccb 	bl	80009f8 <__aeabi_dcmpgt>
 8002062:	b318      	cbz	r0, 80020ac <EepromDownloadValores+0x148>
 8002064:	f8db 8018 	ldr.w	r8, [fp, #24]
 8002068:	2100      	movs	r1, #0
 800206a:	4640      	mov	r0, r8
 800206c:	f7fe ffe0 	bl	8001030 <__aeabi_fcmpeq>
 8002070:	b980      	cbnz	r0, 8002094 <EepromDownloadValores+0x130>
 8002072:	4640      	mov	r0, r8
 8002074:	f7fe f9d8 	bl	8000428 <__aeabi_f2d>
 8002078:	4680      	mov	r8, r0
 800207a:	4689      	mov	r9, r1
 800207c:	e9db 230c 	ldrd	r2, r3, [fp, #48]	; 0x30
 8002080:	f7fe fcba 	bl	80009f8 <__aeabi_dcmpgt>
 8002084:	b930      	cbnz	r0, 8002094 <EepromDownloadValores+0x130>
 8002086:	e9db 230a 	ldrd	r2, r3, [fp, #40]	; 0x28
 800208a:	4640      	mov	r0, r8
 800208c:	4649      	mov	r1, r9
 800208e:	f7fe fc95 	bl	80009bc <__aeabi_dcmplt>
 8002092:	b158      	cbz	r0, 80020ac <EepromDownloadValores+0x148>
						EepromSetVarFloating(eeprom, eeprom->_EepromVarFloatingArr[y], (float)eeprom->_EepromVarFloatingArr[y]->defaultValue);
 8002094:	4630      	mov	r0, r6
 8002096:	4639      	mov	r1, r7
 8002098:	f7fe fcd8 	bl	8000a4c <__aeabi_d2f>
 800209c:	f7fe f9c4 	bl	8000428 <__aeabi_f2d>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4659      	mov	r1, fp
 80020a6:	4628      	mov	r0, r5
 80020a8:	f7ff fe38 	bl	8001d1c <EepromSetVarFloating>
		for(uint8_t y = 0; y < eeprom->_EepromVarFloatingCount; y++){
 80020ac:	3401      	adds	r4, #1
 80020ae:	b2e4      	uxtb	r4, r4
 80020b0:	f895 3125 	ldrb.w	r3, [r5, #293]	; 0x125
 80020b4:	42a3      	cmp	r3, r4
 80020b6:	d95e      	bls.n	8002176 <EepromDownloadValores+0x212>
			if (HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_READ_ADDR,30,HAL_MAX_DELAY)==HAL_OK){
 80020b8:	f04f 33ff 	mov.w	r3, #4294967295
 80020bc:	221e      	movs	r2, #30
 80020be:	21a3      	movs	r1, #163	; 0xa3
 80020c0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80020c2:	f004 fc53 	bl	800696c <HAL_I2C_IsDeviceReady>
 80020c6:	2800      	cmp	r0, #0
 80020c8:	d1f0      	bne.n	80020ac <EepromDownloadValores+0x148>
				switch (eeprom->_EepromVarFloatingArr[y]->_sizeType) {
 80020ca:	4626      	mov	r6, r4
 80020cc:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 80020d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d09c      	beq.n	8002018 <EepromDownloadValores+0xb4>
 80020de:	2b40      	cmp	r3, #64	; 0x40
 80020e0:	d1e4      	bne.n	80020ac <EepromDownloadValores+0x148>
					HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, eeprom->_EepromVarFloatingArr[y]->_addrEprom, I2C_MEMADD_SIZE_16BIT, doubleBuff.bytes, 8, 200);
 80020e2:	8912      	ldrh	r2, [r2, #8]
 80020e4:	23c8      	movs	r3, #200	; 0xc8
 80020e6:	9302      	str	r3, [sp, #8]
 80020e8:	2308      	movs	r3, #8
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	ab06      	add	r3, sp, #24
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	2310      	movs	r3, #16
 80020f2:	21a3      	movs	r1, #163	; 0xa3
 80020f4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80020f6:	f004 fa95 	bl	8006624 <HAL_I2C_Mem_Read>
					eeprom->_EepromVarFloatingArr[y]->valorDouble =  doubleBuff.value;
 80020fa:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 80020fe:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8002102:	6848      	ldr	r0, [r1, #4]
 8002104:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002108:	e9c0 2304 	strd	r2, r3, [r0, #16]
					if (eeprom->_EepromVarFloatingArr[y]->ptrDouble != 0) {
 800210c:	684b      	ldr	r3, [r1, #4]
 800210e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002110:	b119      	cbz	r1, 800211a <EepromDownloadValores+0x1b6>
						*eeprom->_EepromVarFloatingArr[y]->ptrDouble = eeprom->_EepromVarFloatingArr[y]->valorDouble;
 8002112:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002116:	e9c1 2300 	strd	r2, r3, [r1]
					if(eeprom->_EepromVarFloatingArr[y]->defaultValue>0 && (eeprom->_EepromVarFloatingArr[y]->valorDouble == 0 || eeprom->_EepromVarFloatingArr[y]->valorDouble > eeprom->_EepromVarFloatingArr[y]->maxValue || eeprom->_EepromVarFloatingArr[y]->valorDouble < eeprom->_EepromVarFloatingArr[y]->minValue))
 800211a:	362a      	adds	r6, #42	; 0x2a
 800211c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8002120:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8002124:	e9db 6708 	ldrd	r6, r7, [fp, #32]
 8002128:	2200      	movs	r2, #0
 800212a:	2300      	movs	r3, #0
 800212c:	4630      	mov	r0, r6
 800212e:	4639      	mov	r1, r7
 8002130:	f7fe fc62 	bl	80009f8 <__aeabi_dcmpgt>
 8002134:	2800      	cmp	r0, #0
 8002136:	d0b9      	beq.n	80020ac <EepromDownloadValores+0x148>
 8002138:	e9db 8904 	ldrd	r8, r9, [fp, #16]
 800213c:	2200      	movs	r2, #0
 800213e:	2300      	movs	r3, #0
 8002140:	4640      	mov	r0, r8
 8002142:	4649      	mov	r1, r9
 8002144:	f7fe fc30 	bl	80009a8 <__aeabi_dcmpeq>
 8002148:	b970      	cbnz	r0, 8002168 <EepromDownloadValores+0x204>
 800214a:	e9db 230c 	ldrd	r2, r3, [fp, #48]	; 0x30
 800214e:	4640      	mov	r0, r8
 8002150:	4649      	mov	r1, r9
 8002152:	f7fe fc51 	bl	80009f8 <__aeabi_dcmpgt>
 8002156:	b938      	cbnz	r0, 8002168 <EepromDownloadValores+0x204>
 8002158:	e9db 230a 	ldrd	r2, r3, [fp, #40]	; 0x28
 800215c:	4640      	mov	r0, r8
 800215e:	4649      	mov	r1, r9
 8002160:	f7fe fc2c 	bl	80009bc <__aeabi_dcmplt>
 8002164:	2800      	cmp	r0, #0
 8002166:	d0a1      	beq.n	80020ac <EepromDownloadValores+0x148>
						EepromSetVarFloating(eeprom, eeprom->_EepromVarFloatingArr[y], (double)eeprom->_EepromVarFloatingArr[y]->defaultValue);
 8002168:	4632      	mov	r2, r6
 800216a:	463b      	mov	r3, r7
 800216c:	4659      	mov	r1, fp
 800216e:	4628      	mov	r0, r5
 8002170:	f7ff fdd4 	bl	8001d1c <EepromSetVarFloating>
 8002174:	e79a      	b.n	80020ac <EepromDownloadValores+0x148>
		if(eeprom->RefFlag.valor != STD_REF_MEM)
 8002176:	68eb      	ldr	r3, [r5, #12]
 8002178:	2b25      	cmp	r3, #37	; 0x25
 800217a:	d132      	bne.n	80021e2 <EepromDownloadValores+0x27e>
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 800217c:	f10a 0a01 	add.w	sl, sl, #1
 8002180:	fa5f fa8a 	uxtb.w	sl, sl
 8002184:	f895 3124 	ldrb.w	r3, [r5, #292]	; 0x124
 8002188:	4553      	cmp	r3, sl
 800218a:	d92e      	bls.n	80021ea <EepromDownloadValores+0x286>
		if (HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_READ_ADDR,50,HAL_MAX_DELAY)==HAL_OK){
 800218c:	f04f 33ff 	mov.w	r3, #4294967295
 8002190:	2232      	movs	r2, #50	; 0x32
 8002192:	21a3      	movs	r1, #163	; 0xa3
 8002194:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002196:	f004 fbe9 	bl	800696c <HAL_I2C_IsDeviceReady>
 800219a:	bb00      	cbnz	r0, 80021de <EepromDownloadValores+0x27a>
			switch (eeprom->_EepromVarArr[i]->_sizeType) {
 800219c:	4654      	mov	r4, sl
 800219e:	f10a 030c 	add.w	r3, sl, #12
 80021a2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	7f13      	ldrb	r3, [r2, #28]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	f43f aefd 	beq.w	8001faa <EepromDownloadValores+0x46>
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	f43f af16 	beq.w	8001fe2 <EepromDownloadValores+0x7e>
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	f43f aedb 	beq.w	8001f72 <EepromDownloadValores+0xe>
			if(eeprom->_EepromVarArr[i]->defaultValue>0 && (eeprom->_EepromVarArr[i]->valor == 0 || eeprom->_EepromVarArr[i]->valor > eeprom->_EepromVarArr[i]->maxValue || eeprom->_EepromVarArr[i]->valor < eeprom->_EepromVarArr[i]->minValue))
 80021bc:	340c      	adds	r4, #12
 80021be:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80021c2:	6861      	ldr	r1, [r4, #4]
 80021c4:	690a      	ldr	r2, [r1, #16]
 80021c6:	b152      	cbz	r2, 80021de <EepromDownloadValores+0x27a>
 80021c8:	68cb      	ldr	r3, [r1, #12]
 80021ca:	b12b      	cbz	r3, 80021d8 <EepromDownloadValores+0x274>
 80021cc:	6988      	ldr	r0, [r1, #24]
 80021ce:	4283      	cmp	r3, r0
 80021d0:	d802      	bhi.n	80021d8 <EepromDownloadValores+0x274>
 80021d2:	6948      	ldr	r0, [r1, #20]
 80021d4:	4283      	cmp	r3, r0
 80021d6:	d202      	bcs.n	80021de <EepromDownloadValores+0x27a>
				EepromSetVar(eeprom, eeprom->_EepromVarArr[i], eeprom->_EepromVarArr[i]->defaultValue);
 80021d8:	4628      	mov	r0, r5
 80021da:	f7ff fd3f 	bl	8001c5c <EepromSetVar>
void EepromDownloadValores	(Eeprom *eeprom){
 80021de:	2400      	movs	r4, #0
 80021e0:	e766      	b.n	80020b0 <EepromDownloadValores+0x14c>
			RestauraEeprom(eeprom, hardReset);
 80021e2:	2101      	movs	r1, #1
 80021e4:	4628      	mov	r0, r5
 80021e6:	f7ff fded 	bl	8001dc4 <RestauraEeprom>
}
 80021ea:	b00d      	add	sp, #52	; 0x34
 80021ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080021f0 <OutputAddDigital>:

uint8_t OutputAddDigital(OutputDigital* Output,IndviduoOutput* _individ, uint16_t _pinoOUT,GPIO_TypeDef *_portaOUT,
		void (*callback)(),uint16_t limitOn,uint16_t limitOff){

	//montando a fila
	Output->_OutDigitalArr[Output->_DigitalCount] = _individ;
 80021f0:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
 80021f4:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
	Output->_DigitalCount++;
 80021f8:	f10c 0c01 	add.w	ip, ip, #1
 80021fc:	f880 c028 	strb.w	ip, [r0, #40]	; 0x28

	//definicao dos pinos
	_individ->GPIO_Pin	=	_pinoOUT;
 8002200:	800a      	strh	r2, [r1, #0]
	_individ->GPIOx		=	_portaOUT;
 8002202:	604b      	str	r3, [r1, #4]

	//Bind the correct callback functions together
	_individ->timeOut = callback;
 8002204:	9b00      	ldr	r3, [sp, #0]
 8002206:	614b      	str	r3, [r1, #20]

	//se houver limite ligado
	_individ->limitOn = limitOn;
 8002208:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800220c:	81cb      	strh	r3, [r1, #14]

	//se houver limite desligado
	_individ->limitOff = limitOff;
 800220e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8002212:	820b      	strh	r3, [r1, #16]


	//Return OK
	return 0;
}
 8002214:	2000      	movs	r0, #0
 8002216:	4770      	bx	lr

08002218 <OutputAddPID>:
uint8_t OutputAddPID(OutputDigital* Output,IndviduoPID* _individ, TIM_HandleTypeDef *htim, uint32_t Channel, double Kp, double Ki, double Kd, uint16_t histerese,
		uint16_t limit_on,void (*callback)()){
 8002218:	b500      	push	{lr}

	//montando a fila
	Output->_OutPidArr[Output->_PidCount] = _individ;
 800221a:	f890 c029 	ldrb.w	ip, [r0, #41]	; 0x29
 800221e:	f10c 0e06 	add.w	lr, ip, #6
 8002222:	f840 102e 	str.w	r1, [r0, lr, lsl #2]
	Output->_PidCount++;
 8002226:	f10c 0c01 	add.w	ip, ip, #1
 800222a:	f880 c029 	strb.w	ip, [r0, #41]	; 0x29

	//definicao do timer
	_individ->TimHandle = htim;
 800222e:	600a      	str	r2, [r1, #0]
	_individ->Channel   = Channel;
 8002230:	604b      	str	r3, [r1, #4]

	//tunning de PID
	_individ->kp	= Kp;
 8002232:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8002236:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_individ->ki	= Ki;
 800223a:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800223e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_individ->kd	= Kd;
 8002242:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8002246:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_individ->histerese	= histerese;
 800224a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800224e:	874b      	strh	r3, [r1, #58]	; 0x3a

	//Bind the correct callback functions together
	_individ->timeOut = callback;
 8002250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002252:	644b      	str	r3, [r1, #68]	; 0x44

	//Return OK
	return 0;
}
 8002254:	2000      	movs	r0, #0
 8002256:	f85d fb04 	ldr.w	pc, [sp], #4

0800225a <onDigital>:
void onDigital(IndviduoOutput* outPut) {
 800225a:	b510      	push	{r4, lr}
 800225c:	4604      	mov	r4, r0
	// Implementação do método ON.
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_SET);
 800225e:	2201      	movs	r2, #1
 8002260:	8801      	ldrh	r1, [r0, #0]
 8002262:	6840      	ldr	r0, [r0, #4]
 8002264:	f003 fdbd 	bl	8005de2 <HAL_GPIO_WritePin>
	outPut->_state = on; // Exemplo hipotético
 8002268:	2301      	movs	r3, #1
 800226a:	7223      	strb	r3, [r4, #8]
}
 800226c:	bd10      	pop	{r4, pc}

0800226e <offDigital>:
void offDigital(IndviduoOutput* outPut) {
 800226e:	b510      	push	{r4, lr}
 8002270:	4604      	mov	r4, r0
	// Implementação do método OFF.
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_RESET);
 8002272:	2200      	movs	r2, #0
 8002274:	8801      	ldrh	r1, [r0, #0]
 8002276:	6840      	ldr	r0, [r0, #4]
 8002278:	f003 fdb3 	bl	8005de2 <HAL_GPIO_WritePin>
	outPut->_state = off; // Exemplo hipotético
 800227c:	2300      	movs	r3, #0
 800227e:	7223      	strb	r3, [r4, #8]
}
 8002280:	bd10      	pop	{r4, pc}

08002282 <contadorOutput>:
void contadorOutput(OutputDigital* Output){
 8002282:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002286:	4604      	mov	r4, r0
	//chamar essa funcao em um timer com passo de 1 segundo

	//Varregura pelas saidas -------------DIGITAIS----------------
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 8002288:	2500      	movs	r5, #0
 800228a:	e00d      	b.n	80022a8 <contadorOutput+0x26>

		//--- CONTADORES DIGITAIS
		if(Output->_OutDigitalArr[i]->_state == on){
			Output->_OutDigitalArr[i]->timeOff = 0;
 800228c:	2200      	movs	r2, #0
 800228e:	819a      	strh	r2, [r3, #12]
			(Output->_OutDigitalArr[i]->timeOn<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOn++:0;
 8002290:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 8002294:	8953      	ldrh	r3, [r2, #10]
 8002296:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800229a:	428b      	cmp	r3, r1
 800229c:	d019      	beq.n	80022d2 <contadorOutput+0x50>
 800229e:	3301      	adds	r3, #1
 80022a0:	8153      	strh	r3, [r2, #10]
 80022a2:	e016      	b.n	80022d2 <contadorOutput+0x50>
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 80022a4:	3501      	adds	r5, #1
 80022a6:	b2ed      	uxtb	r5, r5
 80022a8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80022ac:	42ab      	cmp	r3, r5
 80022ae:	d924      	bls.n	80022fa <contadorOutput+0x78>
		if(Output->_OutDigitalArr[i]->_state == on){
 80022b0:	462e      	mov	r6, r5
 80022b2:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
 80022b6:	7a1a      	ldrb	r2, [r3, #8]
 80022b8:	2a01      	cmp	r2, #1
 80022ba:	d0e7      	beq.n	800228c <contadorOutput+0xa>
		}else{
			Output->_OutDigitalArr[i]->timeOn = 0;
 80022bc:	2200      	movs	r2, #0
 80022be:	815a      	strh	r2, [r3, #10]
			(Output->_OutDigitalArr[i]->timeOff<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOff++:0;
 80022c0:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 80022c4:	8993      	ldrh	r3, [r2, #12]
 80022c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022ca:	428b      	cmp	r3, r1
 80022cc:	d001      	beq.n	80022d2 <contadorOutput+0x50>
 80022ce:	3301      	adds	r3, #1
 80022d0:	8193      	strh	r3, [r2, #12]
		}

		//## --- ANALISE DE POSSIVEIS TIMEOUT ---
		//------ possui limite ligado
		if(Output->_OutDigitalArr[i]->limitOn != 0){
 80022d2:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 80022d6:	89da      	ldrh	r2, [r3, #14]
 80022d8:	b122      	cbz	r2, 80022e4 <contadorOutput+0x62>
			if(Output->_OutDigitalArr[i]->timeOn >= Output->_OutDigitalArr[i]->limitOn){
 80022da:	8959      	ldrh	r1, [r3, #10]
 80022dc:	428a      	cmp	r2, r1
 80022de:	d801      	bhi.n	80022e4 <contadorOutput+0x62>
				//chama callback de timeout
				Output->_OutDigitalArr[i]->timeOut();
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	4798      	blx	r3
			}
		}

		//------ possui limite desligado
		if(Output->_OutDigitalArr[i]->limitOff != 0){
 80022e4:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 80022e8:	8a1a      	ldrh	r2, [r3, #16]
 80022ea:	2a00      	cmp	r2, #0
 80022ec:	d0da      	beq.n	80022a4 <contadorOutput+0x22>
			if(Output->_OutDigitalArr[i]->timeOff >= Output->_OutDigitalArr[i]->limitOff){
 80022ee:	8999      	ldrh	r1, [r3, #12]
 80022f0:	428a      	cmp	r2, r1
 80022f2:	d8d7      	bhi.n	80022a4 <contadorOutput+0x22>
				//chama callback de timeout
				Output->_OutDigitalArr[i]->timeOut();
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	4798      	blx	r3
 80022f8:	e7d4      	b.n	80022a4 <contadorOutput+0x22>
			}
		}
	}

	//Varregura pelas saidas -------------PID----------------
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 80022fa:	2500      	movs	r5, #0
 80022fc:	e020      	b.n	8002340 <contadorOutput+0xbe>
#endif
#ifndef CALCULA_POR_PWMOUT
		//---CATEGORIZA STATE
		if(Output->_OutPidArr[i]->realtime >=  Output->_OutPidArr[i]->setPoint ){
			Output->_OutPidArr[i]->_PWMstate = idle;
		}else if(Output->_OutPidArr[i]->realtime + Output->_OutPidArr[i]->histerese >  Output->_OutPidArr[i]->setPoint ){
 80022fe:	f8bb 003a 	ldrh.w	r0, [fp, #58]	; 0x3a
 8002302:	f7fe f87f 	bl	8000404 <__aeabi_i2d>
 8002306:	4642      	mov	r2, r8
 8002308:	464b      	mov	r3, r9
 800230a:	f7fd ff2f 	bl	800016c <__adddf3>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4630      	mov	r0, r6
 8002314:	4639      	mov	r1, r7
 8002316:	f7fe fb51 	bl	80009bc <__aeabi_dcmplt>
 800231a:	b118      	cbz	r0, 8002324 <contadorOutput+0xa2>
			Output->_OutPidArr[i]->_PWMstate = mantendo;
 800231c:	2302      	movs	r3, #2
 800231e:	f88b 303c 	strb.w	r3, [fp, #60]	; 0x3c
 8002322:	e024      	b.n	800236e <contadorOutput+0xec>
		}else
			Output->_OutPidArr[i]->_PWMstate = buscando;
 8002324:	2301      	movs	r3, #1
 8002326:	f88b 303c 	strb.w	r3, [fp, #60]	; 0x3c
 800232a:	e020      	b.n	800236e <contadorOutput+0xec>
#endif
		//---CONTADORES PID
		if(Output->_OutPidArr[i]->_PWMstate == mantendo){
			(Output->_OutPidArr[i]->timeOn<UINT16_MAX)?Output->_OutPidArr[i]->timeOn++:0;
 800232c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800232e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002332:	428a      	cmp	r2, r1
 8002334:	d025      	beq.n	8002382 <contadorOutput+0x100>
 8002336:	3201      	adds	r2, #1
 8002338:	87da      	strh	r2, [r3, #62]	; 0x3e
 800233a:	e022      	b.n	8002382 <contadorOutput+0x100>
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 800233c:	3501      	adds	r5, #1
 800233e:	b2ed      	uxtb	r5, r5
 8002340:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8002344:	42ab      	cmp	r3, r5
 8002346:	d92a      	bls.n	800239e <contadorOutput+0x11c>
		if(Output->_OutPidArr[i]->realtime >=  Output->_OutPidArr[i]->setPoint ){
 8002348:	46aa      	mov	sl, r5
 800234a:	1dab      	adds	r3, r5, #6
 800234c:	f854 b023 	ldr.w	fp, [r4, r3, lsl #2]
 8002350:	e9db 890a 	ldrd	r8, r9, [fp, #40]	; 0x28
 8002354:	e9db 670c 	ldrd	r6, r7, [fp, #48]	; 0x30
 8002358:	4632      	mov	r2, r6
 800235a:	463b      	mov	r3, r7
 800235c:	4640      	mov	r0, r8
 800235e:	4649      	mov	r1, r9
 8002360:	f7fe fb40 	bl	80009e4 <__aeabi_dcmpge>
 8002364:	2800      	cmp	r0, #0
 8002366:	d0ca      	beq.n	80022fe <contadorOutput+0x7c>
			Output->_OutPidArr[i]->_PWMstate = idle;
 8002368:	2300      	movs	r3, #0
 800236a:	f88b 303c 	strb.w	r3, [fp, #60]	; 0x3c
		if(Output->_OutPidArr[i]->_PWMstate == mantendo){
 800236e:	f10a 0306 	add.w	r3, sl, #6
 8002372:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002376:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800237a:	2a02      	cmp	r2, #2
 800237c:	d0d6      	beq.n	800232c <contadorOutput+0xaa>
		}else{
			Output->_OutPidArr[i]->timeOn=0;
 800237e:	2200      	movs	r2, #0
 8002380:	87da      	strh	r2, [r3, #62]	; 0x3e
		}

		//## --- ANALISE DE POSSIVEIS TIMEOUT ---
		//------ possui limite ligado
		if(Output->_OutPidArr[i]->limiteOn != 0){
 8002382:	f10a 0a06 	add.w	sl, sl, #6
 8002386:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 800238a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800238e:	2a00      	cmp	r2, #0
 8002390:	d0d4      	beq.n	800233c <contadorOutput+0xba>
			if(Output->_OutPidArr[i]->timeOn >= Output->_OutPidArr[i]->limiteOn){
 8002392:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8002394:	428a      	cmp	r2, r1
 8002396:	d8d1      	bhi.n	800233c <contadorOutput+0xba>
				//chama callback de timeout
				Output->_OutPidArr[i]->timeOut();
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	4798      	blx	r3
 800239c:	e7ce      	b.n	800233c <contadorOutput+0xba>
			}
		}
	}
}
 800239e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080023a2 <IndviduoPID_SetPWMValue>:
void IndviduoPID_SetPWMValue(IndviduoPID *pid, double pwmValue) {
 80023a2:	b510      	push	{r4, lr}
 80023a4:	b088      	sub	sp, #32
 80023a6:	4604      	mov	r4, r0
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
	TIM_OC_InitTypeDef sConfigOC = {0};
 80023ac:	2300      	movs	r3, #0
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	9302      	str	r3, [sp, #8]
 80023b2:	9303      	str	r3, [sp, #12]
 80023b4:	9304      	str	r3, [sp, #16]
 80023b6:	9305      	str	r3, [sp, #20]
 80023b8:	9306      	str	r3, [sp, #24]
 80023ba:	9307      	str	r3, [sp, #28]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023bc:	2360      	movs	r3, #96	; 0x60
 80023be:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 80023c0:	f7fe fb24 	bl	8000a0c <__aeabi_d2uiz>
 80023c4:	9002      	str	r0, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(pid->TimHandle, &sConfigOC, pid->Channel) != HAL_OK) {
 80023c6:	6862      	ldr	r2, [r4, #4]
 80023c8:	a901      	add	r1, sp, #4
 80023ca:	6820      	ldr	r0, [r4, #0]
 80023cc:	f005 fc50 	bl	8007c70 <HAL_TIM_PWM_ConfigChannel>
		// Tratamento de erro
	}

	if (HAL_TIM_PWM_Start(pid->TimHandle, pid->Channel) != HAL_OK) {
 80023d0:	6861      	ldr	r1, [r4, #4]
 80023d2:	6820      	ldr	r0, [r4, #0]
 80023d4:	f005 fd54 	bl	8007e80 <HAL_TIM_PWM_Start>
		// Tratamento de erro
	}
}
 80023d8:	b008      	add	sp, #32
 80023da:	bd10      	pop	{r4, pc}

080023dc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <vApplicationGetIdleTaskMemory+0x10>)
 80023de:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <vApplicationGetIdleTaskMemory+0x14>)
 80023e2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000290 	.word	0x20000290
 80023f0:	20000090 	.word	0x20000090

080023f4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <vApplicationGetTimerTaskMemory+0x10>)
 80023f6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <vApplicationGetTimerTaskMemory+0x14>)
 80023fa:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80023fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002400:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8002402:	4770      	bx	lr
 8002404:	20000730 	.word	0x20000730
 8002408:	20000330 	.word	0x20000330

0800240c <timeoutAquecimento>:
		PrimitiveStates.Lastro.realtime = TempLastro-34;
		i=0;
	}
}

void timeoutAquecimento (void){
 800240c:	b538      	push	{r3, r4, r5, lr}
	//verifica erro temperatura lastro
	if(PrimitiveStates.Lastro.realtime < PrimitiveStates.Lastro.setPoint-5)
 800240e:	4917      	ldr	r1, [pc, #92]	; (800246c <timeoutAquecimento+0x60>)
 8002410:	e9d1 4546 	ldrd	r4, r5, [r1, #280]	; 0x118
 8002414:	2200      	movs	r2, #0
 8002416:	4b16      	ldr	r3, [pc, #88]	; (8002470 <timeoutAquecimento+0x64>)
 8002418:	e9d1 0148 	ldrd	r0, r1, [r1, #288]	; 0x120
 800241c:	f7fd fea4 	bl	8000168 <__aeabi_dsub>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4620      	mov	r0, r4
 8002426:	4629      	mov	r1, r5
 8002428:	f7fe fac8 	bl	80009bc <__aeabi_dcmplt>
 800242c:	b130      	cbz	r0, 800243c <timeoutAquecimento+0x30>
		PrimitiveStates.Erro.bit.IdleLastro=1;
 800242e:	4a0f      	ldr	r2, [pc, #60]	; (800246c <timeoutAquecimento+0x60>)
 8002430:	f892 313f 	ldrb.w	r3, [r2, #319]	; 0x13f
 8002434:	f043 0308 	orr.w	r3, r3, #8
 8002438:	f882 313f 	strb.w	r3, [r2, #319]	; 0x13f

	//verifica erro temperatura teto
	if(PrimitiveStates.Teto.realtime < PrimitiveStates.Teto.setPoint-5)
 800243c:	490b      	ldr	r1, [pc, #44]	; (800246c <timeoutAquecimento+0x60>)
 800243e:	e9d1 4534 	ldrd	r4, r5, [r1, #208]	; 0xd0
 8002442:	2200      	movs	r2, #0
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <timeoutAquecimento+0x64>)
 8002446:	e9d1 0136 	ldrd	r0, r1, [r1, #216]	; 0xd8
 800244a:	f7fd fe8d 	bl	8000168 <__aeabi_dsub>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4620      	mov	r0, r4
 8002454:	4629      	mov	r1, r5
 8002456:	f7fe fab1 	bl	80009bc <__aeabi_dcmplt>
 800245a:	b130      	cbz	r0, 800246a <timeoutAquecimento+0x5e>
		PrimitiveStates.Erro.bit.IdleTeto=1;
 800245c:	4a03      	ldr	r2, [pc, #12]	; (800246c <timeoutAquecimento+0x60>)
 800245e:	f892 313f 	ldrb.w	r3, [r2, #319]	; 0x13f
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	f882 313f 	strb.w	r3, [r2, #319]	; 0x13f
}
 800246a:	bd38      	pop	{r3, r4, r5, pc}
 800246c:	20000898 	.word	0x20000898
 8002470:	40140000 	.word	0x40140000

08002474 <MX_GPIO_Init>:
{
 8002474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002478:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247a:	2400      	movs	r4, #0
 800247c:	9402      	str	r4, [sp, #8]
 800247e:	9403      	str	r4, [sp, #12]
 8002480:	9404      	str	r4, [sp, #16]
 8002482:	9405      	str	r4, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002484:	4b2f      	ldr	r3, [pc, #188]	; (8002544 <MX_GPIO_Init+0xd0>)
 8002486:	699a      	ldr	r2, [r3, #24]
 8002488:	f042 0204 	orr.w	r2, r2, #4
 800248c:	619a      	str	r2, [r3, #24]
 800248e:	699a      	ldr	r2, [r3, #24]
 8002490:	f002 0204 	and.w	r2, r2, #4
 8002494:	9200      	str	r2, [sp, #0]
 8002496:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	f042 0208 	orr.w	r2, r2, #8
 800249e:	619a      	str	r2, [r3, #24]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 80024aa:	4d27      	ldr	r5, [pc, #156]	; (8002548 <MX_GPIO_Init+0xd4>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80024b2:	4628      	mov	r0, r5
 80024b4:	f003 fc95 	bl	8005de2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 80024b8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800254c <MX_GPIO_Init+0xd8>
 80024bc:	4622      	mov	r2, r4
 80024be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024c2:	4640      	mov	r0, r8
 80024c4:	f003 fc8d 	bl	8005de2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin
 80024c8:	4622      	mov	r2, r4
 80024ca:	21f8      	movs	r1, #248	; 0xf8
 80024cc:	4628      	mov	r0, r5
 80024ce:	f003 fc88 	bl	8005de2 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BLE_EN_Pin|BLE_RESET_Pin|RELE_2_Pin|RELE_3_Pin
 80024d2:	f246 0378 	movw	r3, #24696	; 0x6078
 80024d6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d8:	2701      	movs	r7, #1
 80024da:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2602      	movs	r6, #2
 80024e0:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e2:	a902      	add	r1, sp, #8
 80024e4:	4628      	mov	r0, r5
 80024e6:	f003 fae1 	bl	8005aac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BLE_STATUS_Pin;
 80024ea:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 80024ee:	f8cd 9008 	str.w	r9, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024f2:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8002550 <MX_GPIO_Init+0xdc>
 80024f6:	f8cd a00c 	str.w	sl, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 80024fc:	a902      	add	r1, sp, #8
 80024fe:	4628      	mov	r0, r5
 8002500:	f003 fad4 	bl	8005aac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BOTAO_BLE_Pin;
 8002504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002508:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800250a:	f8cd a00c 	str.w	sl, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 8002510:	a902      	add	r1, sp, #8
 8002512:	4640      	mov	r0, r8
 8002514:	f003 faca 	bl	8005aac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RELE_1_Pin;
 8002518:	f8cd 9008 	str.w	r9, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 8002522:	a902      	add	r1, sp, #8
 8002524:	4640      	mov	r0, r8
 8002526:	f003 fac1 	bl	8005aac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EEPROM_EN_Pin;
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252e:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002530:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002532:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 8002534:	a902      	add	r1, sp, #8
 8002536:	4628      	mov	r0, r5
 8002538:	f003 fab8 	bl	8005aac <HAL_GPIO_Init>
}
 800253c:	b006      	add	sp, #24
 800253e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	40010c00 	.word	0x40010c00
 800254c:	40010800 	.word	0x40010800
 8002550:	10110000 	.word	0x10110000

08002554 <MX_DMA_Init>:
{
 8002554:	b500      	push	{lr}
 8002556:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <MX_DMA_Init+0x50>)
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	615a      	str	r2, [r3, #20]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800256c:	2200      	movs	r2, #0
 800256e:	2105      	movs	r1, #5
 8002570:	200b      	movs	r0, #11
 8002572:	f003 f877 	bl	8005664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002576:	200b      	movs	r0, #11
 8002578:	f003 f8ac 	bl	80056d4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800257c:	2200      	movs	r2, #0
 800257e:	2105      	movs	r1, #5
 8002580:	200d      	movs	r0, #13
 8002582:	f003 f86f 	bl	8005664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002586:	200d      	movs	r0, #13
 8002588:	f003 f8a4 	bl	80056d4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800258c:	2200      	movs	r2, #0
 800258e:	2105      	movs	r1, #5
 8002590:	200f      	movs	r0, #15
 8002592:	f003 f867 	bl	8005664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002596:	200f      	movs	r0, #15
 8002598:	f003 f89c 	bl	80056d4 <HAL_NVIC_EnableIRQ>
}
 800259c:	b003      	add	sp, #12
 800259e:	f85d fb04 	ldr.w	pc, [sp], #4
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000

080025a8 <timeoutDesligaLampada>:

void timeoutDesligaLampada(void){
 80025a8:	b508      	push	{r3, lr}

	offDigital(&PrimitiveStates.Lampada);
 80025aa:	4802      	ldr	r0, [pc, #8]	; (80025b4 <timeoutDesligaLampada+0xc>)
 80025ac:	f7ff fe5f 	bl	800226e <offDigital>
}
 80025b0:	bd08      	pop	{r3, pc}
 80025b2:	bf00      	nop
 80025b4:	200008c4 	.word	0x200008c4

080025b8 <CBTimer10ms>:
  /* USER CODE END StartEeprom */
}

/* CBTimer10ms function */
void CBTimer10ms(void const * argument)
{
 80025b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CBTimer10ms */

	bluetooth10ms(&bluetooth);
 80025ba:	4802      	ldr	r0, [pc, #8]	; (80025c4 <CBTimer10ms+0xc>)
 80025bc:	f7ff f9ea 	bl	8001994 <bluetooth10ms>

  /* USER CODE END CBTimer10ms */
}
 80025c0:	bd08      	pop	{r3, pc}
 80025c2:	bf00      	nop
 80025c4:	20000f2c 	.word	0x20000f2c

080025c8 <desligaForno>:
	PrimitiveStates.RTTimerMinutos 	= 0;
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <desligaForno+0x28>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	PrimitiveStates.RTTimerSegundos = 0;
 80025d0:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	PrimitiveStates.SPTimerMinutos 	= 0;
 80025d4:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	PrimitiveStates.SPTimerSegundos = 0;
 80025d8:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	PrimitiveStates.Lastro.setPoint	= 0;
 80025dc:	2000      	movs	r0, #0
 80025de:	2100      	movs	r1, #0
 80025e0:	e9c3 0148 	strd	r0, r1, [r3, #288]	; 0x120
	PrimitiveStates.Teto.setPoint 	= 0;
 80025e4:	e9c3 0136 	strd	r0, r1, [r3, #216]	; 0xd8
	PrimitiveStates.stateTimer 		= TIMER_idle;
 80025e8:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000898 	.word	0x20000898
 80025f4:	00000000 	.word	0x00000000

080025f8 <controleCooler>:
void controleCooler(void){
 80025f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(PrimitiveStates.Lastro.realtime>200 || PrimitiveStates.Teto.realtime>200){
 80025fa:	4b19      	ldr	r3, [pc, #100]	; (8002660 <controleCooler+0x68>)
 80025fc:	e9d3 4546 	ldrd	r4, r5, [r3, #280]	; 0x118
 8002600:	2200      	movs	r2, #0
 8002602:	4b18      	ldr	r3, [pc, #96]	; (8002664 <controleCooler+0x6c>)
 8002604:	4620      	mov	r0, r4
 8002606:	4629      	mov	r1, r5
 8002608:	f7fe f9f6 	bl	80009f8 <__aeabi_dcmpgt>
 800260c:	b948      	cbnz	r0, 8002622 <controleCooler+0x2a>
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <controleCooler+0x68>)
 8002610:	e9d3 6734 	ldrd	r6, r7, [r3, #208]	; 0xd0
 8002614:	2200      	movs	r2, #0
 8002616:	4b13      	ldr	r3, [pc, #76]	; (8002664 <controleCooler+0x6c>)
 8002618:	4630      	mov	r0, r6
 800261a:	4639      	mov	r1, r7
 800261c:	f7fe f9ec 	bl	80009f8 <__aeabi_dcmpgt>
 8002620:	b118      	cbz	r0, 800262a <controleCooler+0x32>
		onDigital(&PrimitiveStates.Cooler);
 8002622:	4811      	ldr	r0, [pc, #68]	; (8002668 <controleCooler+0x70>)
 8002624:	f7ff fe19 	bl	800225a <onDigital>
}
 8002628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}else 	if(PrimitiveStates.Lastro.realtime<195 && PrimitiveStates.Teto.realtime<195){
 800262a:	a30b      	add	r3, pc, #44	; (adr r3, 8002658 <controleCooler+0x60>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fe f9c2 	bl	80009bc <__aeabi_dcmplt>
 8002638:	2800      	cmp	r0, #0
 800263a:	d0f5      	beq.n	8002628 <controleCooler+0x30>
 800263c:	a306      	add	r3, pc, #24	; (adr r3, 8002658 <controleCooler+0x60>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	4630      	mov	r0, r6
 8002644:	4639      	mov	r1, r7
 8002646:	f7fe f9b9 	bl	80009bc <__aeabi_dcmplt>
 800264a:	2800      	cmp	r0, #0
 800264c:	d0ec      	beq.n	8002628 <controleCooler+0x30>
		offDigital(&PrimitiveStates.Cooler);
 800264e:	4806      	ldr	r0, [pc, #24]	; (8002668 <controleCooler+0x70>)
 8002650:	f7ff fe0d 	bl	800226e <offDigital>
}
 8002654:	e7e8      	b.n	8002628 <controleCooler+0x30>
 8002656:	bf00      	nop
 8002658:	00000000 	.word	0x00000000
 800265c:	40686000 	.word	0x40686000
 8002660:	20000898 	.word	0x20000898
 8002664:	40690000 	.word	0x40690000
 8002668:	200008dc 	.word	0x200008dc

0800266c <CBTimer1000ms>:

/* CBTimer1000ms function */
void CBTimer1000ms(void const * argument)
{
 800266c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN CBTimer1000ms */

	bluetooth1000ms(&bluetooth);
 800266e:	480a      	ldr	r0, [pc, #40]	; (8002698 <CBTimer1000ms+0x2c>)
 8002670:	f7fe feba 	bl	80013e8 <bluetooth1000ms>
	taskTemperatura1sec();
 8002674:	f002 fcca 	bl	800500c <taskTemperatura1sec>
	taskBluetooth1sec();
 8002678:	f001 f9d4 	bl	8003a24 <taskBluetooth1sec>
	controleCooler();
 800267c:	f7ff ffbc 	bl	80025f8 <controleCooler>

	//contadores de todas as saidas digitais
	contadorOutput(&PrimitiveStates.outPuts);
 8002680:	4c06      	ldr	r4, [pc, #24]	; (800269c <CBTimer1000ms+0x30>)
 8002682:	4620      	mov	r0, r4
 8002684:	f7ff fdfd 	bl	8002282 <contadorOutput>

	//se existir erros do tipo abaixo, o forno é desligado
	if(PrimitiveStates.Erro.byte != 0){
 8002688:	f894 313f 	ldrb.w	r3, [r4, #319]	; 0x13f
 800268c:	b903      	cbnz	r3, 8002690 <CBTimer1000ms+0x24>
		desligaForno();
	}
  /* USER CODE END CBTimer1000ms */
}
 800268e:	bd10      	pop	{r4, pc}
		desligaForno();
 8002690:	f7ff ff9a 	bl	80025c8 <desligaForno>
}
 8002694:	e7fb      	b.n	800268e <CBTimer1000ms+0x22>
 8002696:	bf00      	nop
 8002698:	20000f2c 	.word	0x20000f2c
 800269c:	20000898 	.word	0x20000898

080026a0 <HAL_ADC_ConvCpltCallback>:
{
 80026a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(i<TAM){
 80026a4:	4b27      	ldr	r3, [pc, #156]	; (8002744 <HAL_ADC_ConvCpltCallback+0xa4>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026ac:	d20f      	bcs.n	80026ce <HAL_ADC_ConvCpltCallback+0x2e>
		somatorio1+=buffer_ADC[1]; // somatorio
 80026ae:	4926      	ldr	r1, [pc, #152]	; (8002748 <HAL_ADC_ConvCpltCallback+0xa8>)
 80026b0:	684c      	ldr	r4, [r1, #4]
 80026b2:	4826      	ldr	r0, [pc, #152]	; (800274c <HAL_ADC_ConvCpltCallback+0xac>)
 80026b4:	6802      	ldr	r2, [r0, #0]
 80026b6:	4422      	add	r2, r4
 80026b8:	6002      	str	r2, [r0, #0]
		somatorio2+=buffer_ADC[0]; // somatorio
 80026ba:	6808      	ldr	r0, [r1, #0]
 80026bc:	4924      	ldr	r1, [pc, #144]	; (8002750 <HAL_ADC_ConvCpltCallback+0xb0>)
 80026be:	680a      	ldr	r2, [r1, #0]
 80026c0:	4402      	add	r2, r0
 80026c2:	600a      	str	r2, [r1, #0]
		i++;
 80026c4:	3301      	adds	r3, #1
 80026c6:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <HAL_ADC_ConvCpltCallback+0xa4>)
 80026c8:	8013      	strh	r3, [r2, #0]
}
 80026ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		somatorio1 = somatorio1 / TAM; //calc media
 80026ce:	4d1f      	ldr	r5, [pc, #124]	; (800274c <HAL_ADC_ConvCpltCallback+0xac>)
 80026d0:	6828      	ldr	r0, [r5, #0]
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_ADC_ConvCpltCallback+0xb4>)
 80026d4:	fb83 1200 	smull	r1, r2, r3, r0
 80026d8:	17c0      	asrs	r0, r0, #31
 80026da:	ebc0 1062 	rsb	r0, r0, r2, asr #5
 80026de:	6028      	str	r0, [r5, #0]
		somatorio2 = somatorio2 / TAM; //calc media
 80026e0:	4e1b      	ldr	r6, [pc, #108]	; (8002750 <HAL_ADC_ConvCpltCallback+0xb0>)
 80026e2:	6834      	ldr	r4, [r6, #0]
 80026e4:	fb83 2304 	smull	r2, r3, r3, r4
 80026e8:	17e4      	asrs	r4, r4, #31
 80026ea:	ebc4 1463 	rsb	r4, r4, r3, asr #5
 80026ee:	6034      	str	r4, [r6, #0]
		Temp1 = somatorio1*16; //calc valor final
 80026f0:	0100      	lsls	r0, r0, #4
 80026f2:	f7fe fab5 	bl	8000c60 <__aeabi_i2f>
		Temp1 = Temp1/100;
 80026f6:	4918      	ldr	r1, [pc, #96]	; (8002758 <HAL_ADC_ConvCpltCallback+0xb8>)
 80026f8:	f7fe fbba 	bl	8000e70 <__aeabi_fdiv>
 80026fc:	4680      	mov	r8, r0
		somatorio1 = 0; 		//zera somatorio
 80026fe:	2700      	movs	r7, #0
 8002700:	602f      	str	r7, [r5, #0]
		Temp2 = somatorio2*16; 	//calc valor final
 8002702:	0120      	lsls	r0, r4, #4
 8002704:	f7fe faac 	bl	8000c60 <__aeabi_i2f>
		Temp2 = Temp2/100;
 8002708:	4913      	ldr	r1, [pc, #76]	; (8002758 <HAL_ADC_ConvCpltCallback+0xb8>)
 800270a:	f7fe fbb1 	bl	8000e70 <__aeabi_fdiv>
		somatorio2 = 0; 		//zera somatorio
 800270e:	6037      	str	r7, [r6, #0]
		TempLastro=(double)Temp2;
 8002710:	f7fd fe8a 	bl	8000428 <__aeabi_f2d>
 8002714:	4604      	mov	r4, r0
 8002716:	460d      	mov	r5, r1
		TempTeto=(double)Temp1;
 8002718:	4640      	mov	r0, r8
 800271a:	f7fd fe85 	bl	8000428 <__aeabi_f2d>
		PrimitiveStates.Teto.realtime = TempTeto-34;
 800271e:	2200      	movs	r2, #0
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <HAL_ADC_ConvCpltCallback+0xbc>)
 8002722:	f7fd fd21 	bl	8000168 <__aeabi_dsub>
 8002726:	4e0e      	ldr	r6, [pc, #56]	; (8002760 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002728:	e9c6 0134 	strd	r0, r1, [r6, #208]	; 0xd0
		PrimitiveStates.Lastro.realtime = TempLastro-34;
 800272c:	2200      	movs	r2, #0
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_ADC_ConvCpltCallback+0xbc>)
 8002730:	4620      	mov	r0, r4
 8002732:	4629      	mov	r1, r5
 8002734:	f7fd fd18 	bl	8000168 <__aeabi_dsub>
 8002738:	e9c6 0146 	strd	r0, r1, [r6, #280]	; 0x118
		i=0;
 800273c:	4b01      	ldr	r3, [pc, #4]	; (8002744 <HAL_ADC_ConvCpltCallback+0xa4>)
 800273e:	801f      	strh	r7, [r3, #0]
}
 8002740:	e7c3      	b.n	80026ca <HAL_ADC_ConvCpltCallback+0x2a>
 8002742:	bf00      	nop
 8002744:	20001294 	.word	0x20001294
 8002748:	20001004 	.word	0x20001004
 800274c:	20001298 	.word	0x20001298
 8002750:	2000129c 	.word	0x2000129c
 8002754:	10624dd3 	.word	0x10624dd3
 8002758:	42c80000 	.word	0x42c80000
 800275c:	40410000 	.word	0x40410000
 8002760:	20000898 	.word	0x20000898

08002764 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002764:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002766:	6802      	ldr	r2, [r0, #0]
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800276a:	429a      	cmp	r2, r3
 800276c:	d000      	beq.n	8002770 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800276e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002770:	f002 fcd6 	bl	8005120 <HAL_IncTick>
}
 8002774:	e7fb      	b.n	800276e <HAL_TIM_PeriodElapsedCallback+0xa>
 8002776:	bf00      	nop
 8002778:	40012c00 	.word	0x40012c00

0800277c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800277c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800277e:	e7fe      	b.n	800277e <Error_Handler+0x2>

08002780 <MX_ADC1_Init>:
{
 8002780:	b500      	push	{lr}
 8002782:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8002784:	2300      	movs	r3, #0
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	9302      	str	r3, [sp, #8]
 800278a:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800278c:	481c      	ldr	r0, [pc, #112]	; (8002800 <MX_ADC1_Init+0x80>)
 800278e:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <MX_ADC1_Init+0x84>)
 8002790:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002796:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002798:	2201      	movs	r2, #1
 800279a:	7302      	strb	r2, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800279c:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800279e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80027a2:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027a4:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 3;
 80027a6:	2303      	movs	r3, #3
 80027a8:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027aa:	f002 fec5 	bl	8005538 <HAL_ADC_Init>
 80027ae:	b9f8      	cbnz	r0, 80027f0 <MX_ADC1_Init+0x70>
  sConfig.Channel = ADC_CHANNEL_0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027b4:	2301      	movs	r3, #1
 80027b6:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80027b8:	2306      	movs	r3, #6
 80027ba:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027bc:	a901      	add	r1, sp, #4
 80027be:	4810      	ldr	r0, [pc, #64]	; (8002800 <MX_ADC1_Init+0x80>)
 80027c0:	f002 fd12 	bl	80051e8 <HAL_ADC_ConfigChannel>
 80027c4:	b9b0      	cbnz	r0, 80027f4 <MX_ADC1_Init+0x74>
  sConfig.Channel = ADC_CHANNEL_1;
 80027c6:	2301      	movs	r3, #1
 80027c8:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80027ca:	2302      	movs	r3, #2
 80027cc:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027ce:	a901      	add	r1, sp, #4
 80027d0:	480b      	ldr	r0, [pc, #44]	; (8002800 <MX_ADC1_Init+0x80>)
 80027d2:	f002 fd09 	bl	80051e8 <HAL_ADC_ConfigChannel>
 80027d6:	b978      	cbnz	r0, 80027f8 <MX_ADC1_Init+0x78>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80027d8:	2310      	movs	r3, #16
 80027da:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80027dc:	2303      	movs	r3, #3
 80027de:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027e0:	a901      	add	r1, sp, #4
 80027e2:	4807      	ldr	r0, [pc, #28]	; (8002800 <MX_ADC1_Init+0x80>)
 80027e4:	f002 fd00 	bl	80051e8 <HAL_ADC_ConfigChannel>
 80027e8:	b940      	cbnz	r0, 80027fc <MX_ADC1_Init+0x7c>
}
 80027ea:	b005      	add	sp, #20
 80027ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80027f0:	f7ff ffc4 	bl	800277c <Error_Handler>
    Error_Handler();
 80027f4:	f7ff ffc2 	bl	800277c <Error_Handler>
    Error_Handler();
 80027f8:	f7ff ffc0 	bl	800277c <Error_Handler>
    Error_Handler();
 80027fc:	f7ff ffbe 	bl	800277c <Error_Handler>
 8002800:	20001010 	.word	0x20001010
 8002804:	40012400 	.word	0x40012400

08002808 <MX_I2C1_Init>:
{
 8002808:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800280a:	480a      	ldr	r0, [pc, #40]	; (8002834 <MX_I2C1_Init+0x2c>)
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <MX_I2C1_Init+0x30>)
 800280e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <MX_I2C1_Init+0x34>)
 8002812:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002814:	2300      	movs	r3, #0
 8002816:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002818:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800281a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800281e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002820:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002822:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002824:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002826:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002828:	f003 fd6c 	bl	8006304 <HAL_I2C_Init>
 800282c:	b900      	cbnz	r0, 8002830 <MX_I2C1_Init+0x28>
}
 800282e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002830:	f7ff ffa4 	bl	800277c <Error_Handler>
 8002834:	2000110c 	.word	0x2000110c
 8002838:	40005400 	.word	0x40005400
 800283c:	000186a0 	.word	0x000186a0

08002840 <MX_TIM3_Init>:
{
 8002840:	b500      	push	{lr}
 8002842:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002844:	2300      	movs	r3, #0
 8002846:	930a      	str	r3, [sp, #40]	; 0x28
 8002848:	930b      	str	r3, [sp, #44]	; 0x2c
 800284a:	930c      	str	r3, [sp, #48]	; 0x30
 800284c:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800284e:	9308      	str	r3, [sp, #32]
 8002850:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	9302      	str	r3, [sp, #8]
 8002856:	9303      	str	r3, [sp, #12]
 8002858:	9304      	str	r3, [sp, #16]
 800285a:	9305      	str	r3, [sp, #20]
 800285c:	9306      	str	r3, [sp, #24]
 800285e:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8002860:	482d      	ldr	r0, [pc, #180]	; (8002918 <MX_TIM3_Init+0xd8>)
 8002862:	4a2e      	ldr	r2, [pc, #184]	; (800291c <MX_TIM3_Init+0xdc>)
 8002864:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 4000-1;
 8002866:	f640 729f 	movw	r2, #3999	; 0xf9f
 800286a:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286c:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 100-1;
 800286e:	2263      	movs	r2, #99	; 0x63
 8002870:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002872:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002874:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002876:	f005 f971 	bl	8007b5c <HAL_TIM_Base_Init>
 800287a:	2800      	cmp	r0, #0
 800287c:	d13b      	bne.n	80028f6 <MX_TIM3_Init+0xb6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800287e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002882:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002884:	a90a      	add	r1, sp, #40	; 0x28
 8002886:	4824      	ldr	r0, [pc, #144]	; (8002918 <MX_TIM3_Init+0xd8>)
 8002888:	f005 fa6c 	bl	8007d64 <HAL_TIM_ConfigClockSource>
 800288c:	2800      	cmp	r0, #0
 800288e:	d134      	bne.n	80028fa <MX_TIM3_Init+0xba>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002890:	4821      	ldr	r0, [pc, #132]	; (8002918 <MX_TIM3_Init+0xd8>)
 8002892:	f005 f98f 	bl	8007bb4 <HAL_TIM_PWM_Init>
 8002896:	2800      	cmp	r0, #0
 8002898:	d131      	bne.n	80028fe <MX_TIM3_Init+0xbe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800289a:	2300      	movs	r3, #0
 800289c:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800289e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028a0:	a908      	add	r1, sp, #32
 80028a2:	481d      	ldr	r0, [pc, #116]	; (8002918 <MX_TIM3_Init+0xd8>)
 80028a4:	f005 fb9c 	bl	8007fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80028a8:	bb58      	cbnz	r0, 8002902 <MX_TIM3_Init+0xc2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028aa:	2360      	movs	r3, #96	; 0x60
 80028ac:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80028ae:	2200      	movs	r2, #0
 80028b0:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b2:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80028b4:	2304      	movs	r3, #4
 80028b6:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028b8:	eb0d 0103 	add.w	r1, sp, r3
 80028bc:	4816      	ldr	r0, [pc, #88]	; (8002918 <MX_TIM3_Init+0xd8>)
 80028be:	f005 f9d7 	bl	8007c70 <HAL_TIM_PWM_ConfigChannel>
 80028c2:	bb00      	cbnz	r0, 8002906 <MX_TIM3_Init+0xc6>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028c4:	2204      	movs	r2, #4
 80028c6:	eb0d 0102 	add.w	r1, sp, r2
 80028ca:	4813      	ldr	r0, [pc, #76]	; (8002918 <MX_TIM3_Init+0xd8>)
 80028cc:	f005 f9d0 	bl	8007c70 <HAL_TIM_PWM_ConfigChannel>
 80028d0:	b9d8      	cbnz	r0, 800290a <MX_TIM3_Init+0xca>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028d2:	2208      	movs	r2, #8
 80028d4:	a901      	add	r1, sp, #4
 80028d6:	4810      	ldr	r0, [pc, #64]	; (8002918 <MX_TIM3_Init+0xd8>)
 80028d8:	f005 f9ca 	bl	8007c70 <HAL_TIM_PWM_ConfigChannel>
 80028dc:	b9b8      	cbnz	r0, 800290e <MX_TIM3_Init+0xce>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028de:	220c      	movs	r2, #12
 80028e0:	a901      	add	r1, sp, #4
 80028e2:	480d      	ldr	r0, [pc, #52]	; (8002918 <MX_TIM3_Init+0xd8>)
 80028e4:	f005 f9c4 	bl	8007c70 <HAL_TIM_PWM_ConfigChannel>
 80028e8:	b998      	cbnz	r0, 8002912 <MX_TIM3_Init+0xd2>
  HAL_TIM_MspPostInit(&htim3);
 80028ea:	480b      	ldr	r0, [pc, #44]	; (8002918 <MX_TIM3_Init+0xd8>)
 80028ec:	f000 fdd4 	bl	8003498 <HAL_TIM_MspPostInit>
}
 80028f0:	b00f      	add	sp, #60	; 0x3c
 80028f2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80028f6:	f7ff ff41 	bl	800277c <Error_Handler>
    Error_Handler();
 80028fa:	f7ff ff3f 	bl	800277c <Error_Handler>
    Error_Handler();
 80028fe:	f7ff ff3d 	bl	800277c <Error_Handler>
    Error_Handler();
 8002902:	f7ff ff3b 	bl	800277c <Error_Handler>
    Error_Handler();
 8002906:	f7ff ff39 	bl	800277c <Error_Handler>
    Error_Handler();
 800290a:	f7ff ff37 	bl	800277c <Error_Handler>
    Error_Handler();
 800290e:	f7ff ff35 	bl	800277c <Error_Handler>
    Error_Handler();
 8002912:	f7ff ff33 	bl	800277c <Error_Handler>
 8002916:	bf00      	nop
 8002918:	200011bc 	.word	0x200011bc
 800291c:	40000400 	.word	0x40000400

08002920 <MX_TIM2_Init>:
{
 8002920:	b500      	push	{lr}
 8002922:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002924:	2300      	movs	r3, #0
 8002926:	930a      	str	r3, [sp, #40]	; 0x28
 8002928:	930b      	str	r3, [sp, #44]	; 0x2c
 800292a:	930c      	str	r3, [sp, #48]	; 0x30
 800292c:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800292e:	9308      	str	r3, [sp, #32]
 8002930:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	9302      	str	r3, [sp, #8]
 8002936:	9303      	str	r3, [sp, #12]
 8002938:	9304      	str	r3, [sp, #16]
 800293a:	9305      	str	r3, [sp, #20]
 800293c:	9306      	str	r3, [sp, #24]
 800293e:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8002940:	481f      	ldr	r0, [pc, #124]	; (80029c0 <MX_TIM2_Init+0xa0>)
 8002942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002946:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 165-1;
 8002948:	22a4      	movs	r2, #164	; 0xa4
 800294a:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 100-1;
 800294e:	2263      	movs	r2, #99	; 0x63
 8002950:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002952:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002954:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002956:	f005 f901 	bl	8007b5c <HAL_TIM_Base_Init>
 800295a:	bb30      	cbnz	r0, 80029aa <MX_TIM2_Init+0x8a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800295c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002960:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002962:	a90a      	add	r1, sp, #40	; 0x28
 8002964:	4816      	ldr	r0, [pc, #88]	; (80029c0 <MX_TIM2_Init+0xa0>)
 8002966:	f005 f9fd 	bl	8007d64 <HAL_TIM_ConfigClockSource>
 800296a:	bb00      	cbnz	r0, 80029ae <MX_TIM2_Init+0x8e>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800296c:	4814      	ldr	r0, [pc, #80]	; (80029c0 <MX_TIM2_Init+0xa0>)
 800296e:	f005 f921 	bl	8007bb4 <HAL_TIM_PWM_Init>
 8002972:	b9f0      	cbnz	r0, 80029b2 <MX_TIM2_Init+0x92>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002974:	2300      	movs	r3, #0
 8002976:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002978:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800297a:	a908      	add	r1, sp, #32
 800297c:	4810      	ldr	r0, [pc, #64]	; (80029c0 <MX_TIM2_Init+0xa0>)
 800297e:	f005 fb2f 	bl	8007fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8002982:	b9c0      	cbnz	r0, 80029b6 <MX_TIM2_Init+0x96>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002984:	2360      	movs	r3, #96	; 0x60
 8002986:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 50;
 8002988:	2332      	movs	r3, #50	; 0x32
 800298a:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800298c:	2300      	movs	r3, #0
 800298e:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002990:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002992:	220c      	movs	r2, #12
 8002994:	a901      	add	r1, sp, #4
 8002996:	480a      	ldr	r0, [pc, #40]	; (80029c0 <MX_TIM2_Init+0xa0>)
 8002998:	f005 f96a 	bl	8007c70 <HAL_TIM_PWM_ConfigChannel>
 800299c:	b968      	cbnz	r0, 80029ba <MX_TIM2_Init+0x9a>
  HAL_TIM_MspPostInit(&htim2);
 800299e:	4808      	ldr	r0, [pc, #32]	; (80029c0 <MX_TIM2_Init+0xa0>)
 80029a0:	f000 fd7a 	bl	8003498 <HAL_TIM_MspPostInit>
}
 80029a4:	b00f      	add	sp, #60	; 0x3c
 80029a6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80029aa:	f7ff fee7 	bl	800277c <Error_Handler>
    Error_Handler();
 80029ae:	f7ff fee5 	bl	800277c <Error_Handler>
    Error_Handler();
 80029b2:	f7ff fee3 	bl	800277c <Error_Handler>
    Error_Handler();
 80029b6:	f7ff fee1 	bl	800277c <Error_Handler>
    Error_Handler();
 80029ba:	f7ff fedf 	bl	800277c <Error_Handler>
 80029be:	bf00      	nop
 80029c0:	20001174 	.word	0x20001174

080029c4 <MX_USART1_UART_Init>:
{
 80029c4:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80029c6:	480a      	ldr	r0, [pc, #40]	; (80029f0 <MX_USART1_UART_Init+0x2c>)
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <MX_USART1_UART_Init+0x30>)
 80029ca:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 80029cc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80029d0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029d2:	2300      	movs	r3, #0
 80029d4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029d6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029d8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029da:	220c      	movs	r2, #12
 80029dc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029de:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029e2:	f005 fc2f 	bl	8008244 <HAL_UART_Init>
 80029e6:	b900      	cbnz	r0, 80029ea <MX_USART1_UART_Init+0x26>
}
 80029e8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80029ea:	f7ff fec7 	bl	800277c <Error_Handler>
 80029ee:	bf00      	nop
 80029f0:	20001204 	.word	0x20001204
 80029f4:	40013800 	.word	0x40013800

080029f8 <MX_USART3_UART_Init>:
{
 80029f8:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80029fa:	480a      	ldr	r0, [pc, #40]	; (8002a24 <MX_USART3_UART_Init+0x2c>)
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <MX_USART3_UART_Init+0x30>)
 80029fe:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8002a00:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002a04:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a06:	2300      	movs	r3, #0
 8002a08:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a0a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a0c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a0e:	220c      	movs	r2, #12
 8002a10:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a12:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a14:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a16:	f005 fc15 	bl	8008244 <HAL_UART_Init>
 8002a1a:	b900      	cbnz	r0, 8002a1e <MX_USART3_UART_Init+0x26>
}
 8002a1c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002a1e:	f7ff fead 	bl	800277c <Error_Handler>
 8002a22:	bf00      	nop
 8002a24:	2000124c 	.word	0x2000124c
 8002a28:	40004800 	.word	0x40004800

08002a2c <MX_RTC_Init>:
{
 8002a2c:	b500      	push	{lr}
 8002a2e:	b083      	sub	sp, #12
  RTC_TimeTypeDef sTime = {0};
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002a36:	f88d 3006 	strb.w	r3, [sp, #6]
  RTC_DateTypeDef DateToUpdate = {0};
 8002a3a:	9300      	str	r3, [sp, #0]
  hrtc.Instance = RTC;
 8002a3c:	4818      	ldr	r0, [pc, #96]	; (8002aa0 <MX_RTC_Init+0x74>)
 8002a3e:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <MX_RTC_Init+0x78>)
 8002a40:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
 8002a46:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a4c:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a4e:	f004 fe4b 	bl	80076e8 <HAL_RTC_Init>
 8002a52:	b9f0      	cbnz	r0, 8002a92 <MX_RTC_Init+0x66>
  sTime.Hours = 0x0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8002a5a:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8002a5e:	f88d 3006 	strb.w	r3, [sp, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a62:	2201      	movs	r2, #1
 8002a64:	a901      	add	r1, sp, #4
 8002a66:	480e      	ldr	r0, [pc, #56]	; (8002aa0 <MX_RTC_Init+0x74>)
 8002a68:	f004 fd57 	bl	800751a <HAL_RTC_SetTime>
 8002a6c:	b998      	cbnz	r0, 8002a96 <MX_RTC_Init+0x6a>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f88d 2000 	strb.w	r2, [sp]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002a74:	f88d 2001 	strb.w	r2, [sp, #1]
  DateToUpdate.Date = 0x1;
 8002a78:	f88d 2002 	strb.w	r2, [sp, #2]
  DateToUpdate.Year = 0x0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002a82:	4669      	mov	r1, sp
 8002a84:	4806      	ldr	r0, [pc, #24]	; (8002aa0 <MX_RTC_Init+0x74>)
 8002a86:	f004 fda9 	bl	80075dc <HAL_RTC_SetDate>
 8002a8a:	b930      	cbnz	r0, 8002a9a <MX_RTC_Init+0x6e>
}
 8002a8c:	b003      	add	sp, #12
 8002a8e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002a92:	f7ff fe73 	bl	800277c <Error_Handler>
    Error_Handler();
 8002a96:	f7ff fe71 	bl	800277c <Error_Handler>
    Error_Handler();
 8002a9a:	f7ff fe6f 	bl	800277c <Error_Handler>
 8002a9e:	bf00      	nop
 8002aa0:	20001160 	.word	0x20001160
 8002aa4:	40002800 	.word	0x40002800

08002aa8 <SystemClock_Config>:
{
 8002aa8:	b500      	push	{lr}
 8002aaa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aac:	2228      	movs	r2, #40	; 0x28
 8002aae:	2100      	movs	r1, #0
 8002ab0:	eb0d 0002 	add.w	r0, sp, r2
 8002ab4:	f008 fdc0 	bl	800b638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ab8:	2300      	movs	r3, #0
 8002aba:	9305      	str	r3, [sp, #20]
 8002abc:	9306      	str	r3, [sp, #24]
 8002abe:	9307      	str	r3, [sp, #28]
 8002ac0:	9308      	str	r3, [sp, #32]
 8002ac2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	9302      	str	r3, [sp, #8]
 8002ac8:	9303      	str	r3, [sp, #12]
 8002aca:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002acc:	230a      	movs	r3, #10
 8002ace:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ad4:	2210      	movs	r2, #16
 8002ad6:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ad8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ada:	2302      	movs	r3, #2
 8002adc:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8002ade:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ae2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ae4:	a80a      	add	r0, sp, #40	; 0x28
 8002ae6:	f004 f827 	bl	8006b38 <HAL_RCC_OscConfig>
 8002aea:	b9e8      	cbnz	r0, 8002b28 <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aec:	230f      	movs	r3, #15
 8002aee:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002af0:	2302      	movs	r3, #2
 8002af2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002af4:	2300      	movs	r3, #0
 8002af6:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002afc:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002afe:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b00:	2101      	movs	r1, #1
 8002b02:	a805      	add	r0, sp, #20
 8002b04:	f004 fa4a 	bl	8006f9c <HAL_RCC_ClockConfig>
 8002b08:	b980      	cbnz	r0, 8002b2c <SystemClock_Config+0x84>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	9301      	str	r3, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b12:	9302      	str	r3, [sp, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002b14:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002b18:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b1a:	a801      	add	r0, sp, #4
 8002b1c:	f004 fb38 	bl	8007190 <HAL_RCCEx_PeriphCLKConfig>
 8002b20:	b930      	cbnz	r0, 8002b30 <SystemClock_Config+0x88>
}
 8002b22:	b015      	add	sp, #84	; 0x54
 8002b24:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002b28:	f7ff fe28 	bl	800277c <Error_Handler>
    Error_Handler();
 8002b2c:	f7ff fe26 	bl	800277c <Error_Handler>
    Error_Handler();
 8002b30:	f7ff fe24 	bl	800277c <Error_Handler>
 8002b34:	0000      	movs	r0, r0
	...

08002b38 <main>:
{
 8002b38:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002b3c:	b0c5      	sub	sp, #276	; 0x114
  HAL_Init();
 8002b3e:	f002 fadd 	bl	80050fc <HAL_Init>
  SystemClock_Config();
 8002b42:	f7ff ffb1 	bl	8002aa8 <SystemClock_Config>
  MX_GPIO_Init();
 8002b46:	f7ff fc95 	bl	8002474 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b4a:	f7ff fd03 	bl	8002554 <MX_DMA_Init>
  MX_ADC1_Init();
 8002b4e:	f7ff fe17 	bl	8002780 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002b52:	f7ff fe59 	bl	8002808 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002b56:	f7ff fe73 	bl	8002840 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002b5a:	f7ff fee1 	bl	8002920 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002b5e:	f7ff ff31 	bl	80029c4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002b62:	f7ff ff49 	bl	80029f8 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8002b66:	f7ff ff61 	bl	8002a2c <MX_RTC_Init>
	HAL_Delay(1000);
 8002b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b6e:	f002 fae9 	bl	8005144 <HAL_Delay>
	HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 3	);// ADC_DMA
 8002b72:	2203      	movs	r2, #3
 8002b74:	4998      	ldr	r1, [pc, #608]	; (8002dd8 <main+0x2a0>)
 8002b76:	4899      	ldr	r0, [pc, #612]	; (8002ddc <main+0x2a4>)
 8002b78:	f002 fc1a 	bl	80053b0 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_3);
 8002b7c:	4e98      	ldr	r6, [pc, #608]	; (8002de0 <main+0x2a8>)
 8002b7e:	2108      	movs	r1, #8
 8002b80:	4630      	mov	r0, r6
 8002b82:	f005 f97d 	bl	8007e80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_4);
 8002b86:	210c      	movs	r1, #12
 8002b88:	4630      	mov	r0, r6
 8002b8a:	f005 f979 	bl	8007e80 <HAL_TIM_PWM_Start>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.Lampada		,RELE_1_Pin	,RELE_1_GPIO_Port	,timeoutDesligaLampada	,45	,0);
 8002b8e:	4d95      	ldr	r5, [pc, #596]	; (8002de4 <main+0x2ac>)
 8002b90:	2400      	movs	r4, #0
 8002b92:	9402      	str	r4, [sp, #8]
 8002b94:	232d      	movs	r3, #45	; 0x2d
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	4b93      	ldr	r3, [pc, #588]	; (8002de8 <main+0x2b0>)
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	4b93      	ldr	r3, [pc, #588]	; (8002dec <main+0x2b4>)
 8002b9e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ba2:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	f7ff fb22 	bl	80021f0 <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.Cooler		,RELE_2_Pin	,RELE_2_GPIO_Port	,0	,0	,0);
 8002bac:	4f90      	ldr	r7, [pc, #576]	; (8002df0 <main+0x2b8>)
 8002bae:	9402      	str	r4, [sp, #8]
 8002bb0:	9401      	str	r4, [sp, #4]
 8002bb2:	9400      	str	r4, [sp, #0]
 8002bb4:	463b      	mov	r3, r7
 8002bb6:	2208      	movs	r2, #8
 8002bb8:	f105 0144 	add.w	r1, r5, #68	; 0x44
 8002bbc:	4628      	mov	r0, r5
 8002bbe:	f7ff fb17 	bl	80021f0 <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.LedLastro	,RELE_3_Pin	,RELE_3_GPIO_Port	,0	,0	,0);
 8002bc2:	9402      	str	r4, [sp, #8]
 8002bc4:	9401      	str	r4, [sp, #4]
 8002bc6:	9400      	str	r4, [sp, #0]
 8002bc8:	463b      	mov	r3, r7
 8002bca:	2210      	movs	r2, #16
 8002bcc:	f105 018c 	add.w	r1, r5, #140	; 0x8c
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	f7ff fb0d 	bl	80021f0 <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.LedTeto		,RELE_4_Pin	,RELE_4_GPIO_Port	,0	,0	,0);
 8002bd6:	9402      	str	r4, [sp, #8]
 8002bd8:	9401      	str	r4, [sp, #4]
 8002bda:	9400      	str	r4, [sp, #0]
 8002bdc:	463b      	mov	r3, r7
 8002bde:	2220      	movs	r2, #32
 8002be0:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002be4:	4628      	mov	r0, r5
 8002be6:	f7ff fb03 	bl	80021f0 <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.LedVerde		,RELE_5_Pin	,RELE_5_GPIO_Port	,0	,0	,0);
 8002bea:	9402      	str	r4, [sp, #8]
 8002bec:	9401      	str	r4, [sp, #4]
 8002bee:	9400      	str	r4, [sp, #0]
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	2240      	movs	r2, #64	; 0x40
 8002bf4:	f105 015c 	add.w	r1, r5, #92	; 0x5c
 8002bf8:	4628      	mov	r0, r5
 8002bfa:	f7ff faf9 	bl	80021f0 <OutputAddDigital>
	OutputAddPID(&PrimitiveStates.outPuts,&PrimitiveStates.Teto		,&htim3	,TIM_CHANNEL_4	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 8002bfe:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8002df4 <main+0x2bc>
 8002c02:	f8cd b020 	str.w	fp, [sp, #32]
 8002c06:	f44f 7a16 	mov.w	sl, #600	; 0x258
 8002c0a:	f8cd a01c 	str.w	sl, [sp, #28]
 8002c0e:	2703      	movs	r7, #3
 8002c10:	9706      	str	r7, [sp, #24]
 8002c12:	f20f 19b4 	addw	r9, pc, #436	; 0x1b4
 8002c16:	e9d9 8900 	ldrd	r8, r9, [r9]
 8002c1a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002c1e:	a36c      	add	r3, pc, #432	; (adr r3, 8002dd0 <main+0x298>)
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4a73      	ldr	r2, [pc, #460]	; (8002df8 <main+0x2c0>)
 8002c2c:	e9cd 1200 	strd	r1, r2, [sp]
 8002c30:	230c      	movs	r3, #12
 8002c32:	4632      	mov	r2, r6
 8002c34:	f105 01a8 	add.w	r1, r5, #168	; 0xa8
 8002c38:	4628      	mov	r0, r5
 8002c3a:	f7ff faed 	bl	8002218 <OutputAddPID>
	OutputAddPID(&PrimitiveStates.outPuts,&PrimitiveStates.Lastro	,&htim3	,TIM_CHANNEL_3	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 8002c3e:	f8cd b020 	str.w	fp, [sp, #32]
 8002c42:	f8cd a01c 	str.w	sl, [sp, #28]
 8002c46:	9706      	str	r7, [sp, #24]
 8002c48:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002c4c:	a360      	add	r3, pc, #384	; (adr r3, 8002dd0 <main+0x298>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c56:	2100      	movs	r1, #0
 8002c58:	4a67      	ldr	r2, [pc, #412]	; (8002df8 <main+0x2c0>)
 8002c5a:	e9cd 1200 	strd	r1, r2, [sp]
 8002c5e:	2308      	movs	r3, #8
 8002c60:	4632      	mov	r2, r6
 8002c62:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
 8002c66:	4628      	mov	r0, r5
 8002c68:	f7ff fad6 	bl	8002218 <OutputAddPID>
  osSemaphoreDef(BinSemUartTx);
 8002c6c:	9442      	str	r4, [sp, #264]	; 0x108
 8002c6e:	9443      	str	r4, [sp, #268]	; 0x10c
  BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8002c70:	2101      	movs	r1, #1
 8002c72:	a842      	add	r0, sp, #264	; 0x108
 8002c74:	f006 f819 	bl	8008caa <osSemaphoreCreate>
 8002c78:	4b60      	ldr	r3, [pc, #384]	; (8002dfc <main+0x2c4>)
 8002c7a:	6018      	str	r0, [r3, #0]
  osTimerDef(timer10ms, CBTimer10ms);
 8002c7c:	4b60      	ldr	r3, [pc, #384]	; (8002e00 <main+0x2c8>)
 8002c7e:	9340      	str	r3, [sp, #256]	; 0x100
 8002c80:	9441      	str	r4, [sp, #260]	; 0x104
  timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 8002c82:	4622      	mov	r2, r4
 8002c84:	2101      	movs	r1, #1
 8002c86:	a840      	add	r0, sp, #256	; 0x100
 8002c88:	f005 ff5a 	bl	8008b40 <osTimerCreate>
 8002c8c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8002e04 <main+0x2cc>
 8002c90:	f8c8 0000 	str.w	r0, [r8]
  osTimerDef(timer1000ms, CBTimer1000ms);
 8002c94:	4b5c      	ldr	r3, [pc, #368]	; (8002e08 <main+0x2d0>)
 8002c96:	933e      	str	r3, [sp, #248]	; 0xf8
 8002c98:	943f      	str	r4, [sp, #252]	; 0xfc
  timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002c9a:	4622      	mov	r2, r4
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	a83e      	add	r0, sp, #248	; 0xf8
 8002ca0:	f005 ff4e 	bl	8008b40 <osTimerCreate>
 8002ca4:	4f59      	ldr	r7, [pc, #356]	; (8002e0c <main+0x2d4>)
 8002ca6:	6038      	str	r0, [r7, #0]
  osMessageQDef(FilaBleComando, 5, uint8_t);
 8002ca8:	4d59      	ldr	r5, [pc, #356]	; (8002e10 <main+0x2d8>)
 8002caa:	ae3a      	add	r6, sp, #232	; 0xe8
 8002cac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002cb0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  FilaBleComandoHandle = osMessageCreate(osMessageQ(FilaBleComando), NULL);
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	f006 f81b 	bl	8008cf2 <osMessageCreate>
 8002cbc:	4b55      	ldr	r3, [pc, #340]	; (8002e14 <main+0x2dc>)
 8002cbe:	6018      	str	r0, [r3, #0]
  osMessageQStaticDef(FilaTXBluetooth, 5, uint8_t, FilaTXBluetoothBuffer, &FilaTXBluetoothControlBlock);
 8002cc0:	ae36      	add	r6, sp, #216	; 0xd8
 8002cc2:	f105 0310 	add.w	r3, r5, #16
 8002cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cc8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  FilaTXBluetoothHandle = osMessageCreate(osMessageQ(FilaTXBluetooth), NULL);
 8002ccc:	4621      	mov	r1, r4
 8002cce:	4630      	mov	r0, r6
 8002cd0:	f006 f80f 	bl	8008cf2 <osMessageCreate>
 8002cd4:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <main+0x2e0>)
 8002cd6:	6018      	str	r0, [r3, #0]
  osMessageQStaticDef(FilaRXBluetooth, 5, uint8_t, FilaRXBluetoothBuffer, &FilaRXBluetoothControlBlock);
 8002cd8:	ae32      	add	r6, sp, #200	; 0xc8
 8002cda:	f105 0320 	add.w	r3, r5, #32
 8002cde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ce0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  FilaRXBluetoothHandle = osMessageCreate(osMessageQ(FilaRXBluetooth), NULL);
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	4630      	mov	r0, r6
 8002ce8:	f006 f803 	bl	8008cf2 <osMessageCreate>
 8002cec:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <main+0x2e4>)
 8002cee:	6018      	str	r0, [r3, #0]
  osMessageQDef(FilaEeprom, 5, uint8_t);
 8002cf0:	ae2e      	add	r6, sp, #184	; 0xb8
 8002cf2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002cf6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	4630      	mov	r0, r6
 8002cfe:	f005 fff8 	bl	8008cf2 <osMessageCreate>
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <main+0x2e8>)
 8002d04:	6018      	str	r0, [r3, #0]
  osThreadDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 256);
 8002d06:	ae27      	add	r6, sp, #156	; 0x9c
 8002d08:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8002d0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002d10:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002d12:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002d16:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	a827      	add	r0, sp, #156	; 0x9c
 8002d1e:	f005 fec9 	bl	8008ab4 <osThreadCreate>
 8002d22:	4b40      	ldr	r3, [pc, #256]	; (8002e24 <main+0x2ec>)
 8002d24:	6018      	str	r0, [r3, #0]
  osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 8002d26:	ae20      	add	r6, sp, #128	; 0x80
 8002d28:	f105 0c4c 	add.w	ip, r5, #76	; 0x4c
 8002d2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002d30:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002d32:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002d36:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	a820      	add	r0, sp, #128	; 0x80
 8002d3e:	f005 feb9 	bl	8008ab4 <osThreadCreate>
 8002d42:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8002e28 <main+0x2f0>
 8002d46:	f8c9 0000 	str.w	r0, [r9]
  osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8002d4a:	ae19      	add	r6, sp, #100	; 0x64
 8002d4c:	f105 0c68 	add.w	ip, r5, #104	; 0x68
 8002d50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002d54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002d56:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002d5a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8002d5e:	4621      	mov	r1, r4
 8002d60:	a819      	add	r0, sp, #100	; 0x64
 8002d62:	f005 fea7 	bl	8008ab4 <osThreadCreate>
 8002d66:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <main+0x2f4>)
 8002d68:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8002d6a:	ae12      	add	r6, sp, #72	; 0x48
 8002d6c:	f105 0c84 	add.w	ip, r5, #132	; 0x84
 8002d70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002d74:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002d76:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002d7a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8002d7e:	4621      	mov	r1, r4
 8002d80:	a812      	add	r0, sp, #72	; 0x48
 8002d82:	f005 fe97 	bl	8008ab4 <osThreadCreate>
 8002d86:	4b2a      	ldr	r3, [pc, #168]	; (8002e30 <main+0x2f8>)
 8002d88:	6018      	str	r0, [r3, #0]
  osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 8002d8a:	ae0b      	add	r6, sp, #44	; 0x2c
 8002d8c:	35a0      	adds	r5, #160	; 0xa0
 8002d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002d92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d96:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TaskEepromHandle = osThreadCreate(osThread(TaskEeprom), NULL);
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	a80b      	add	r0, sp, #44	; 0x2c
 8002d9e:	f005 fe89 	bl	8008ab4 <osThreadCreate>
 8002da2:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <main+0x2fc>)
 8002da4:	6018      	str	r0, [r3, #0]
	osThreadSuspend(TaskTemperaturaHandle); //só é liberada após taskeeprom
 8002da6:	f8d9 0000 	ldr.w	r0, [r9]
 8002daa:	f006 f82e 	bl	8008e0a <osThreadSuspend>
	osTimerStart(timer10msHandle,10);
 8002dae:	210a      	movs	r1, #10
 8002db0:	f8d8 0000 	ldr.w	r0, [r8]
 8002db4:	f005 fee6 	bl	8008b84 <osTimerStart>
	osTimerStart(timer1000msHandle,1000);
 8002db8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002dbc:	6838      	ldr	r0, [r7, #0]
 8002dbe:	f005 fee1 	bl	8008b84 <osTimerStart>
  osKernelStart();
 8002dc2:	f005 fe72 	bl	8008aaa <osKernelStart>
	while (1)
 8002dc6:	e7fe      	b.n	8002dc6 <main+0x28e>
 8002dc8:	33333333 	.word	0x33333333
 8002dcc:	3fd33333 	.word	0x3fd33333
 8002dd0:	47ae147b 	.word	0x47ae147b
 8002dd4:	3f847ae1 	.word	0x3f847ae1
 8002dd8:	20001004 	.word	0x20001004
 8002ddc:	20001010 	.word	0x20001010
 8002de0:	200011bc 	.word	0x200011bc
 8002de4:	20000898 	.word	0x20000898
 8002de8:	080025a9 	.word	0x080025a9
 8002dec:	40010800 	.word	0x40010800
 8002df0:	40010c00 	.word	0x40010c00
 8002df4:	0800240d 	.word	0x0800240d
 8002df8:	403e0000 	.word	0x403e0000
 8002dfc:	200007d0 	.word	0x200007d0
 8002e00:	080025b9 	.word	0x080025b9
 8002e04:	200012a4 	.word	0x200012a4
 8002e08:	0800266d 	.word	0x0800266d
 8002e0c:	200012a0 	.word	0x200012a0
 8002e10:	0800c474 	.word	0x0800c474
 8002e14:	200007e4 	.word	0x200007e4
 8002e18:	20000890 	.word	0x20000890
 8002e1c:	2000083c 	.word	0x2000083c
 8002e20:	200007e8 	.word	0x200007e8
 8002e24:	200009d8 	.word	0x200009d8
 8002e28:	20000c84 	.word	0x20000c84
 8002e2c:	20000c7c 	.word	0x20000c7c
 8002e30:	20000f28 	.word	0x20000f28
 8002e34:	20000c80 	.word	0x20000c80

08002e38 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8002e38:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 8002e3c:	4604      	mov	r4, r0
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002e3e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002e40:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002e44:	e9c0 6714 	strd	r6, r7, [r0, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8002e48:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4e:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8002e52:	e9d0 891a 	ldrd	r8, r9, [r0, #104]	; 0x68
 8002e56:	4642      	mov	r2, r8
 8002e58:	464b      	mov	r3, r9
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	4639      	mov	r1, r7
 8002e5e:	f7fd fdcb 	bl	80009f8 <__aeabi_dcmpgt>
 8002e62:	b118      	cbz	r0, 8002e6c <PID_Init+0x34>
	{
		uPID->OutputSum = uPID->OutMax;
 8002e64:	e9c4 8914 	strd	r8, r9, [r4, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8002e68:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
	else if (uPID->OutputSum < uPID->OutMin)
 8002e6c:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
 8002e70:	4642      	mov	r2, r8
 8002e72:	464b      	mov	r3, r9
 8002e74:	4630      	mov	r0, r6
 8002e76:	4639      	mov	r1, r7
 8002e78:	f7fd fda0 	bl	80009bc <__aeabi_dcmplt>
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	d0f3      	beq.n	8002e68 <PID_Init+0x30>
		uPID->OutputSum = uPID->OutMin;
 8002e80:	e9c4 8914 	strd	r8, r9, [r4, #80]	; 0x50
}
 8002e84:	e7f0      	b.n	8002e68 <PID_Init+0x30>

08002e86 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002e86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	4604      	mov	r4, r0
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002e8e:	7840      	ldrb	r0, [r0, #1]
 8002e90:	b910      	cbnz	r0, 8002e98 <PID_Compute+0x12>
	else
	{
		return _FALSE;
	}
	
}
 8002e92:	b009      	add	sp, #36	; 0x24
 8002e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	now        = GetTime();
 8002e98:	f002 f94e 	bl	8005138 <HAL_GetTick>
 8002e9c:	4605      	mov	r5, r0
	timeChange = (now - uPID->LastTime);
 8002e9e:	6863      	ldr	r3, [r4, #4]
 8002ea0:	1ac3      	subs	r3, r0, r3
	if (timeChange >= uPID->SampleTime)
 8002ea2:	68a2      	ldr	r2, [r4, #8]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	f200 8096 	bhi.w	8002fd6 <PID_Compute+0x150>
		input   = *uPID->MyInput;
 8002eaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002eac:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002eb0:	e9cd 6700 	strd	r6, r7, [sp]
		error   = *uPID->MySetpoint - input;
 8002eb4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002eb6:	4632      	mov	r2, r6
 8002eb8:	463b      	mov	r3, r7
 8002eba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ebe:	f7fd f953 	bl	8000168 <__aeabi_dsub>
 8002ec2:	4680      	mov	r8, r0
 8002ec4:	4689      	mov	r9, r1
 8002ec6:	e9cd 8904 	strd	r8, r9, [sp, #16]
		dInput  = (input - uPID->LastInput);
 8002eca:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
 8002ece:	4630      	mov	r0, r6
 8002ed0:	4639      	mov	r1, r7
 8002ed2:	f7fd f949 	bl	8000168 <__aeabi_dsub>
 8002ed6:	4682      	mov	sl, r0
 8002ed8:	468b      	mov	fp, r1
 8002eda:	e9cd ab02 	strd	sl, fp, [sp, #8]
		uPID->OutputSum     += (uPID->Ki * error);
 8002ede:	4642      	mov	r2, r8
 8002ee0:	464b      	mov	r3, r9
 8002ee2:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8002ee6:	f7fd faf7 	bl	80004d8 <__aeabi_dmul>
 8002eea:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 8002eee:	f7fd f93d 	bl	800016c <__adddf3>
 8002ef2:	4606      	mov	r6, r0
 8002ef4:	460f      	mov	r7, r1
 8002ef6:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (!uPID->POnE)
 8002efa:	f894 8000 	ldrb.w	r8, [r4]
 8002efe:	f1b8 0f00 	cmp.w	r8, #0
 8002f02:	d10d      	bne.n	8002f20 <PID_Compute+0x9a>
			uPID->OutputSum -= uPID->Kp * dInput;
 8002f04:	4652      	mov	r2, sl
 8002f06:	465b      	mov	r3, fp
 8002f08:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8002f0c:	f7fd fae4 	bl	80004d8 <__aeabi_dmul>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4630      	mov	r0, r6
 8002f16:	4639      	mov	r1, r7
 8002f18:	f7fd f926 	bl	8000168 <__aeabi_dsub>
 8002f1c:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
		if (uPID->OutputSum > uPID->OutMax)
 8002f20:	e9d4 6714 	ldrd	r6, r7, [r4, #80]	; 0x50
 8002f24:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
 8002f28:	4652      	mov	r2, sl
 8002f2a:	465b      	mov	r3, fp
 8002f2c:	4630      	mov	r0, r6
 8002f2e:	4639      	mov	r1, r7
 8002f30:	f7fd fd62 	bl	80009f8 <__aeabi_dcmpgt>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d03c      	beq.n	8002fb2 <PID_Compute+0x12c>
			uPID->OutputSum = uPID->OutMax;
 8002f38:	e9c4 ab14 	strd	sl, fp, [r4, #80]	; 0x50
		if (uPID->POnE)
 8002f3c:	f1b8 0f00 	cmp.w	r8, #0
 8002f40:	d046      	beq.n	8002fd0 <PID_Compute+0x14a>
			output = uPID->Kp * error;
 8002f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f46:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8002f4a:	f7fd fac5 	bl	80004d8 <__aeabi_dmul>
 8002f4e:	4606      	mov	r6, r0
 8002f50:	460f      	mov	r7, r1
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002f52:	e9d4 8914 	ldrd	r8, r9, [r4, #80]	; 0x50
 8002f56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f5a:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8002f5e:	f7fd fabb 	bl	80004d8 <__aeabi_dmul>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4640      	mov	r0, r8
 8002f68:	4649      	mov	r1, r9
 8002f6a:	f7fd f8fd 	bl	8000168 <__aeabi_dsub>
 8002f6e:	4632      	mov	r2, r6
 8002f70:	463b      	mov	r3, r7
 8002f72:	f7fd f8fb 	bl	800016c <__adddf3>
 8002f76:	4606      	mov	r6, r0
 8002f78:	460f      	mov	r7, r1
		if (output > uPID->OutMax)
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4650      	mov	r0, sl
 8002f80:	4659      	mov	r1, fp
 8002f82:	f7fd fd1b 	bl	80009bc <__aeabi_dcmplt>
 8002f86:	b950      	cbnz	r0, 8002f9e <PID_Compute+0x118>
		else if (output < uPID->OutMin)
 8002f88:	e9d4 ab18 	ldrd	sl, fp, [r4, #96]	; 0x60
 8002f8c:	4632      	mov	r2, r6
 8002f8e:	463b      	mov	r3, r7
 8002f90:	4650      	mov	r0, sl
 8002f92:	4659      	mov	r1, fp
 8002f94:	f7fd fd30 	bl	80009f8 <__aeabi_dcmpgt>
 8002f98:	b908      	cbnz	r0, 8002f9e <PID_Compute+0x118>
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002f9a:	46b2      	mov	sl, r6
 8002f9c:	46bb      	mov	fp, r7
		*uPID->MyOutput = output;
 8002f9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fa0:	e9c3 ab00 	strd	sl, fp, [r3]
		uPID->LastInput = input;
 8002fa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002fa8:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
		uPID->LastTime = now;
 8002fac:	6065      	str	r5, [r4, #4]
		return _TRUE;
 8002fae:	2001      	movs	r0, #1
 8002fb0:	e76f      	b.n	8002e92 <PID_Compute+0xc>
		else if (uPID->OutputSum < uPID->OutMin)
 8002fb2:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 8002fb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002fba:	4630      	mov	r0, r6
 8002fbc:	4639      	mov	r1, r7
 8002fbe:	f7fd fcfd 	bl	80009bc <__aeabi_dcmplt>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d0ba      	beq.n	8002f3c <PID_Compute+0xb6>
			uPID->OutputSum = uPID->OutMin;
 8002fc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002fca:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8002fce:	e7b5      	b.n	8002f3c <PID_Compute+0xb6>
			output = 0;
 8002fd0:	2600      	movs	r6, #0
 8002fd2:	2700      	movs	r7, #0
 8002fd4:	e7bd      	b.n	8002f52 <PID_Compute+0xcc>
		return _FALSE;
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	e75b      	b.n	8002e92 <PID_Compute+0xc>

08002fda <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002fda:	b538      	push	{r3, r4, r5, lr}
 8002fdc:	4604      	mov	r4, r0
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002fde:	2901      	cmp	r1, #1
 8002fe0:	bf0c      	ite	eq
 8002fe2:	2501      	moveq	r5, #1
 8002fe4:	2500      	movne	r5, #0
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002fe6:	d001      	beq.n	8002fec <PID_SetMode+0x12>
	{
		PID_Init(uPID);
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002fe8:	7065      	strb	r5, [r4, #1]
	
}
 8002fea:	bd38      	pop	{r3, r4, r5, pc}
	if (newAuto && !uPID->InAuto)
 8002fec:	7843      	ldrb	r3, [r0, #1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1fa      	bne.n	8002fe8 <PID_SetMode+0xe>
		PID_Init(uPID);
 8002ff2:	f7ff ff21 	bl	8002e38 <PID_Init>
 8002ff6:	e7f7      	b.n	8002fe8 <PID_SetMode+0xe>

08002ff8 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ffc:	4682      	mov	sl, r0
 8002ffe:	4614      	mov	r4, r2
 8003000:	461d      	mov	r5, r3
 8003002:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8003006:	4632      	mov	r2, r6
 8003008:	463b      	mov	r3, r7
 800300a:	4620      	mov	r0, r4
 800300c:	4629      	mov	r1, r5
 800300e:	f7fd fce9 	bl	80009e4 <__aeabi_dcmpge>
 8003012:	bb00      	cbnz	r0, 8003056 <PID_SetOutputLimits+0x5e>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8003014:	e9ca 4518 	strd	r4, r5, [sl, #96]	; 0x60
	uPID->OutMax = Max;
 8003018:	e9ca 671a 	strd	r6, r7, [sl, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 800301c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8003020:	b1cb      	cbz	r3, 8003056 <PID_SetOutputLimits+0x5e>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8003022:	f8da b044 	ldr.w	fp, [sl, #68]	; 0x44
 8003026:	e9db 8900 	ldrd	r8, r9, [fp]
 800302a:	4632      	mov	r2, r6
 800302c:	463b      	mov	r3, r7
 800302e:	4640      	mov	r0, r8
 8003030:	4649      	mov	r1, r9
 8003032:	f7fd fce1 	bl	80009f8 <__aeabi_dcmpgt>
 8003036:	b180      	cbz	r0, 800305a <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 8003038:	e9cb 6700 	strd	r6, r7, [fp]
			*uPID->MyOutput = uPID->OutMin;
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 800303c:	e9da 4514 	ldrd	r4, r5, [sl, #80]	; 0x50
 8003040:	e9da 671a 	ldrd	r6, r7, [sl, #104]	; 0x68
 8003044:	4632      	mov	r2, r6
 8003046:	463b      	mov	r3, r7
 8003048:	4620      	mov	r0, r4
 800304a:	4629      	mov	r1, r5
 800304c:	f7fd fcd4 	bl	80009f8 <__aeabi_dcmpgt>
 8003050:	b170      	cbz	r0, 8003070 <PID_SetOutputLimits+0x78>
		{
			uPID->OutputSum = uPID->OutMax;
 8003052:	e9ca 6714 	strd	r6, r7, [sl, #80]	; 0x50
		}
		else { }
		
	}
	
}
 8003056:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if (*uPID->MyOutput < uPID->OutMin)
 800305a:	4622      	mov	r2, r4
 800305c:	462b      	mov	r3, r5
 800305e:	4640      	mov	r0, r8
 8003060:	4649      	mov	r1, r9
 8003062:	f7fd fcab 	bl	80009bc <__aeabi_dcmplt>
 8003066:	2800      	cmp	r0, #0
 8003068:	d0e8      	beq.n	800303c <PID_SetOutputLimits+0x44>
			*uPID->MyOutput = uPID->OutMin;
 800306a:	e9cb 4500 	strd	r4, r5, [fp]
 800306e:	e7e5      	b.n	800303c <PID_SetOutputLimits+0x44>
		else if (uPID->OutputSum < uPID->OutMin)
 8003070:	e9da 6718 	ldrd	r6, r7, [sl, #96]	; 0x60
 8003074:	4632      	mov	r2, r6
 8003076:	463b      	mov	r3, r7
 8003078:	4620      	mov	r0, r4
 800307a:	4629      	mov	r1, r5
 800307c:	f7fd fc9e 	bl	80009bc <__aeabi_dcmplt>
 8003080:	2800      	cmp	r0, #0
 8003082:	d0e8      	beq.n	8003056 <PID_SetOutputLimits+0x5e>
			uPID->OutputSum = uPID->OutMin;
 8003084:	e9ca 6714 	strd	r6, r7, [sl, #80]	; 0x50
		else { }
 8003088:	e7e5      	b.n	8003056 <PID_SetOutputLimits+0x5e>
	...

0800308c <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 800308c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003090:	4682      	mov	sl, r0
 8003092:	4614      	mov	r4, r2
 8003094:	461d      	mov	r5, r3
 8003096:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 800309a:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 800309e:	2200      	movs	r2, #0
 80030a0:	2300      	movs	r3, #0
 80030a2:	4620      	mov	r0, r4
 80030a4:	4629      	mov	r1, r5
 80030a6:	f7fd fc89 	bl	80009bc <__aeabi_dcmplt>
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d146      	bne.n	800313c <PID_SetTunings2+0xb0>
 80030ae:	2200      	movs	r2, #0
 80030b0:	2300      	movs	r3, #0
 80030b2:	4630      	mov	r0, r6
 80030b4:	4639      	mov	r1, r7
 80030b6:	f7fd fc81 	bl	80009bc <__aeabi_dcmplt>
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d13e      	bne.n	800313c <PID_SetTunings2+0xb0>
 80030be:	2200      	movs	r2, #0
 80030c0:	2300      	movs	r3, #0
 80030c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80030c6:	f7fd fc79 	bl	80009bc <__aeabi_dcmplt>
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d136      	bne.n	800313c <PID_SetTunings2+0xb0>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80030ce:	f88a 8002 	strb.w	r8, [sl, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80030d2:	f1b8 0f01 	cmp.w	r8, #1
 80030d6:	bf14      	ite	ne
 80030d8:	f04f 0800 	movne.w	r8, #0
 80030dc:	f04f 0801 	moveq.w	r8, #1
 80030e0:	f88a 8000 	strb.w	r8, [sl]

	uPID->DispKp = Kp;
 80030e4:	e9ca 4504 	strd	r4, r5, [sl, #16]
	uPID->DispKi = Ki;
 80030e8:	e9ca 6706 	strd	r6, r7, [sl, #24]
	uPID->DispKd = Kd;
 80030ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80030f0:	e9ca 2308 	strd	r2, r3, [sl, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80030f4:	f8da 0008 	ldr.w	r0, [sl, #8]
 80030f8:	f7fd f974 	bl	80003e4 <__aeabi_ui2d>
 80030fc:	2200      	movs	r2, #0
 80030fe:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <PID_SetTunings2+0xe8>)
 8003100:	f7fd fb14 	bl	800072c <__aeabi_ddiv>
 8003104:	4680      	mov	r8, r0
 8003106:	4689      	mov	r9, r1
	
	uPID->Kp = Kp;
 8003108:	e9ca 450a 	strd	r4, r5, [sl, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4630      	mov	r0, r6
 8003112:	4639      	mov	r1, r7
 8003114:	f7fd f9e0 	bl	80004d8 <__aeabi_dmul>
 8003118:	4606      	mov	r6, r0
 800311a:	460f      	mov	r7, r1
 800311c:	e9ca 670c 	strd	r6, r7, [sl, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8003120:	4642      	mov	r2, r8
 8003122:	464b      	mov	r3, r9
 8003124:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003128:	f7fd fb00 	bl	800072c <__aeabi_ddiv>
 800312c:	4680      	mov	r8, r0
 800312e:	4689      	mov	r9, r1
 8003130:	e9ca 890e 	strd	r8, r9, [sl, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8003134:	f89a 3003 	ldrb.w	r3, [sl, #3]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d001      	beq.n	8003140 <PID_SetTunings2+0xb4>
		uPID->Ki = (0 - uPID->Ki);
		uPID->Kd = (0 - uPID->Kd);
		
	}
	
}
 800313c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uPID->Kp = (0 - uPID->Kp);
 8003140:	4622      	mov	r2, r4
 8003142:	462b      	mov	r3, r5
 8003144:	2000      	movs	r0, #0
 8003146:	2100      	movs	r1, #0
 8003148:	f7fd f80e 	bl	8000168 <__aeabi_dsub>
 800314c:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003150:	4632      	mov	r2, r6
 8003152:	463b      	mov	r3, r7
 8003154:	2000      	movs	r0, #0
 8003156:	2100      	movs	r1, #0
 8003158:	f7fd f806 	bl	8000168 <__aeabi_dsub>
 800315c:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003160:	4642      	mov	r2, r8
 8003162:	464b      	mov	r3, r9
 8003164:	2000      	movs	r0, #0
 8003166:	2100      	movs	r1, #0
 8003168:	f7fc fffe 	bl	8000168 <__aeabi_dsub>
 800316c:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
 8003170:	e7e4      	b.n	800313c <PID_SetTunings2+0xb0>
 8003172:	bf00      	nop
 8003174:	408f4000 	.word	0x408f4000

08003178 <PID_SetTunings>:
{
 8003178:	e92d 4800 	stmdb	sp!, {fp, lr}
 800317c:	b086      	sub	sp, #24
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 800317e:	7881      	ldrb	r1, [r0, #2]
 8003180:	9104      	str	r1, [sp, #16]
 8003182:	e9dd bc0a 	ldrd	fp, ip, [sp, #40]	; 0x28
 8003186:	e9cd bc02 	strd	fp, ip, [sp, #8]
 800318a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800318e:	e9cd bc00 	strd	fp, ip, [sp]
 8003192:	f7ff ff7b 	bl	800308c <PID_SetTunings2>
}
 8003196:	b006      	add	sp, #24
 8003198:	e8bd 8800 	ldmia.w	sp!, {fp, pc}

0800319c <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 800319c:	b538      	push	{r3, r4, r5, lr}
 800319e:	4604      	mov	r4, r0
 80031a0:	460d      	mov	r5, r1
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80031a2:	7843      	ldrb	r3, [r0, #1]
 80031a4:	b1d3      	cbz	r3, 80031dc <PID_SetControllerDirection+0x40>
 80031a6:	78c3      	ldrb	r3, [r0, #3]
 80031a8:	428b      	cmp	r3, r1
 80031aa:	d017      	beq.n	80031dc <PID_SetControllerDirection+0x40>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80031ac:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 80031b0:	2000      	movs	r0, #0
 80031b2:	2100      	movs	r1, #0
 80031b4:	f7fc ffd8 	bl	8000168 <__aeabi_dsub>
 80031b8:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80031bc:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80031c0:	2000      	movs	r0, #0
 80031c2:	2100      	movs	r1, #0
 80031c4:	f7fc ffd0 	bl	8000168 <__aeabi_dsub>
 80031c8:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80031cc:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80031d0:	2000      	movs	r0, #0
 80031d2:	2100      	movs	r1, #0
 80031d4:	f7fc ffc8 	bl	8000168 <__aeabi_dsub>
 80031d8:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 80031dc:	70e5      	strb	r5, [r4, #3]
	
}
 80031de:	bd38      	pop	{r3, r4, r5, pc}

080031e0 <PID>:
{
 80031e0:	b510      	push	{r4, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	4604      	mov	r4, r0
	uPID->MyOutput   = Output;
 80031e6:	6442      	str	r2, [r0, #68]	; 0x44
	uPID->MyInput    = Input;
 80031e8:	6401      	str	r1, [r0, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 80031ea:	6483      	str	r3, [r0, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80031ec:	2300      	movs	r3, #0
 80031ee:	7043      	strb	r3, [r0, #1]
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80031f0:	a313      	add	r3, pc, #76	; (adr r3, 8003240 <PID+0x60>)
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	e9cd 2300 	strd	r2, r3, [sp]
 80031fa:	2200      	movs	r2, #0
 80031fc:	2300      	movs	r3, #0
 80031fe:	f7ff fefb 	bl	8002ff8 <PID_SetOutputLimits>
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003202:	2364      	movs	r3, #100	; 0x64
 8003204:	60a3      	str	r3, [r4, #8]
	PID_SetControllerDirection(uPID, ControllerDirection);
 8003206:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800320a:	4620      	mov	r0, r4
 800320c:	f7ff ffc6 	bl	800319c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8003210:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8003214:	9304      	str	r3, [sp, #16]
 8003216:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800321a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800321e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003222:	e9cd 2300 	strd	r2, r3, [sp]
 8003226:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800322a:	4620      	mov	r0, r4
 800322c:	f7ff ff2e 	bl	800308c <PID_SetTunings2>
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8003230:	f001 ff82 	bl	8005138 <HAL_GetTick>
 8003234:	68a3      	ldr	r3, [r4, #8]
 8003236:	1ac0      	subs	r0, r0, r3
 8003238:	6060      	str	r0, [r4, #4]
}
 800323a:	b006      	add	sp, #24
 800323c:	bd10      	pop	{r4, pc}
 800323e:	bf00      	nop
 8003240:	00000000 	.word	0x00000000
 8003244:	406fe000 	.word	0x406fe000

08003248 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800324a:	1e0d      	subs	r5, r1, #0
 800324c:	dd21      	ble.n	8003292 <PID_SetSampleTime+0x4a>
 800324e:	4604      	mov	r4, r0
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8003250:	4628      	mov	r0, r5
 8003252:	f7fd f8d7 	bl	8000404 <__aeabi_i2d>
 8003256:	4606      	mov	r6, r0
 8003258:	460f      	mov	r7, r1
 800325a:	68a0      	ldr	r0, [r4, #8]
 800325c:	f7fd f8c2 	bl	80003e4 <__aeabi_ui2d>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4630      	mov	r0, r6
 8003266:	4639      	mov	r1, r7
 8003268:	f7fd fa60 	bl	800072c <__aeabi_ddiv>
 800326c:	4606      	mov	r6, r0
 800326e:	460f      	mov	r7, r1
		
		uPID->Ki *= ratio;
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8003278:	f7fd f92e 	bl	80004d8 <__aeabi_dmul>
 800327c:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd /= ratio;
 8003280:	4632      	mov	r2, r6
 8003282:	463b      	mov	r3, r7
 8003284:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8003288:	f7fd fa50 	bl	800072c <__aeabi_ddiv>
 800328c:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003290:	60a5      	str	r5, [r4, #8]
		
	}
	
}
 8003292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003294 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003294:	b500      	push	{lr}
 8003296:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_MspInit+0x4c>)
 800329a:	699a      	ldr	r2, [r3, #24]
 800329c:	f042 0201 	orr.w	r2, r2, #1
 80032a0:	619a      	str	r2, [r3, #24]
 80032a2:	699a      	ldr	r2, [r3, #24]
 80032a4:	f002 0201 	and.w	r2, r2, #1
 80032a8:	9200      	str	r2, [sp, #0]
 80032aa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ac:	69da      	ldr	r2, [r3, #28]
 80032ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032b2:	61da      	str	r2, [r3, #28]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032be:	2200      	movs	r2, #0
 80032c0:	210f      	movs	r1, #15
 80032c2:	f06f 0001 	mvn.w	r0, #1
 80032c6:	f002 f9cd 	bl	8005664 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032ca:	4a06      	ldr	r2, [pc, #24]	; (80032e4 <HAL_MspInit+0x50>)
 80032cc:	6853      	ldr	r3, [r2, #4]
 80032ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80032d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032d6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032d8:	b003      	add	sp, #12
 80032da:	f85d fb04 	ldr.w	pc, [sp], #4
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40010000 	.word	0x40010000

080032e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032e8:	b510      	push	{r4, lr}
 80032ea:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ec:	2300      	movs	r3, #0
 80032ee:	9302      	str	r3, [sp, #8]
 80032f0:	9303      	str	r3, [sp, #12]
 80032f2:	9304      	str	r3, [sp, #16]
 80032f4:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 80032f6:	6802      	ldr	r2, [r0, #0]
 80032f8:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_ADC_MspInit+0x88>)
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d001      	beq.n	8003302 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032fe:	b006      	add	sp, #24
 8003300:	bd10      	pop	{r4, pc}
 8003302:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003304:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330e:	619a      	str	r2, [r3, #24]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003316:	9200      	str	r2, [sp, #0]
 8003318:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331a:	699a      	ldr	r2, [r3, #24]
 800331c:	f042 0204 	orr.w	r2, r2, #4
 8003320:	619a      	str	r2, [r3, #24]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800332c:	2303      	movs	r3, #3
 800332e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003330:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003332:	a902      	add	r1, sp, #8
 8003334:	480f      	ldr	r0, [pc, #60]	; (8003374 <HAL_ADC_MspInit+0x8c>)
 8003336:	f002 fbb9 	bl	8005aac <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800333a:	480f      	ldr	r0, [pc, #60]	; (8003378 <HAL_ADC_MspInit+0x90>)
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <HAL_ADC_MspInit+0x94>)
 800333e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003340:	2300      	movs	r3, #0
 8003342:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003344:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800334a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800334e:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003354:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003356:	2220      	movs	r2, #32
 8003358:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800335a:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800335c:	f002 f9f0 	bl	8005740 <HAL_DMA_Init>
 8003360:	b918      	cbnz	r0, 800336a <HAL_ADC_MspInit+0x82>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_ADC_MspInit+0x90>)
 8003364:	6223      	str	r3, [r4, #32]
 8003366:	625c      	str	r4, [r3, #36]	; 0x24
}
 8003368:	e7c9      	b.n	80032fe <HAL_ADC_MspInit+0x16>
      Error_Handler();
 800336a:	f7ff fa07 	bl	800277c <Error_Handler>
 800336e:	e7f8      	b.n	8003362 <HAL_ADC_MspInit+0x7a>
 8003370:	40012400 	.word	0x40012400
 8003374:	40010800 	.word	0x40010800
 8003378:	20001040 	.word	0x20001040
 800337c:	40020008 	.word	0x40020008

08003380 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003380:	b510      	push	{r4, lr}
 8003382:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003384:	2300      	movs	r3, #0
 8003386:	9302      	str	r3, [sp, #8]
 8003388:	9303      	str	r3, [sp, #12]
 800338a:	9304      	str	r3, [sp, #16]
 800338c:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 800338e:	6802      	ldr	r2, [r0, #0]
 8003390:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <HAL_I2C_MspInit+0x68>)
 8003392:	429a      	cmp	r2, r3
 8003394:	d001      	beq.n	800339a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003396:	b006      	add	sp, #24
 8003398:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339a:	4c14      	ldr	r4, [pc, #80]	; (80033ec <HAL_I2C_MspInit+0x6c>)
 800339c:	69a3      	ldr	r3, [r4, #24]
 800339e:	f043 0308 	orr.w	r3, r3, #8
 80033a2:	61a3      	str	r3, [r4, #24]
 80033a4:	69a3      	ldr	r3, [r4, #24]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033b2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033b4:	2312      	movs	r3, #18
 80033b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033b8:	2303      	movs	r3, #3
 80033ba:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033bc:	a902      	add	r1, sp, #8
 80033be:	480c      	ldr	r0, [pc, #48]	; (80033f0 <HAL_I2C_MspInit+0x70>)
 80033c0:	f002 fb74 	bl	8005aac <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80033c4:	4a0b      	ldr	r2, [pc, #44]	; (80033f4 <HAL_I2C_MspInit+0x74>)
 80033c6:	6853      	ldr	r3, [r2, #4]
 80033c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033d2:	69e3      	ldr	r3, [r4, #28]
 80033d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033d8:	61e3      	str	r3, [r4, #28]
 80033da:	69e3      	ldr	r3, [r4, #28]
 80033dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	9b01      	ldr	r3, [sp, #4]
}
 80033e4:	e7d7      	b.n	8003396 <HAL_I2C_MspInit+0x16>
 80033e6:	bf00      	nop
 80033e8:	40005400 	.word	0x40005400
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40010c00 	.word	0x40010c00
 80033f4:	40010000 	.word	0x40010000

080033f8 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80033f8:	6802      	ldr	r2, [r0, #0]
 80033fa:	4b0c      	ldr	r3, [pc, #48]	; (800342c <HAL_RTC_MspInit+0x34>)
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d000      	beq.n	8003402 <HAL_RTC_MspInit+0xa>
 8003400:	4770      	bx	lr
{
 8003402:	b500      	push	{lr}
 8003404:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003406:	f003 fb7b 	bl	8006b00 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800340a:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_RTC_MspInit+0x38>)
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003412:	61da      	str	r2, [r3, #28]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800341a:	9301      	str	r3, [sp, #4]
 800341c:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RTC_MspInit+0x3c>)
 8003420:	2201      	movs	r2, #1
 8003422:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003426:	b003      	add	sp, #12
 8003428:	f85d fb04 	ldr.w	pc, [sp], #4
 800342c:	40002800 	.word	0x40002800
 8003430:	40021000 	.word	0x40021000
 8003434:	42420000 	.word	0x42420000

08003438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003438:	b500      	push	{lr}
 800343a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 800343c:	6803      	ldr	r3, [r0, #0]
 800343e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003442:	d005      	beq.n	8003450 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003444:	4a12      	ldr	r2, [pc, #72]	; (8003490 <HAL_TIM_Base_MspInit+0x58>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00e      	beq.n	8003468 <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800344a:	b003      	add	sp, #12
 800344c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003450:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003454:	69da      	ldr	r2, [r3, #28]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	61da      	str	r2, [r3, #28]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	9b00      	ldr	r3, [sp, #0]
 8003466:	e7f0      	b.n	800344a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_TIM_Base_MspInit+0x5c>)
 800346a:	69da      	ldr	r2, [r3, #28]
 800346c:	f042 0202 	orr.w	r2, r2, #2
 8003470:	61da      	str	r2, [r3, #28]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800347c:	2200      	movs	r2, #0
 800347e:	2105      	movs	r1, #5
 8003480:	201d      	movs	r0, #29
 8003482:	f002 f8ef 	bl	8005664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003486:	201d      	movs	r0, #29
 8003488:	f002 f924 	bl	80056d4 <HAL_NVIC_EnableIRQ>
}
 800348c:	e7dd      	b.n	800344a <HAL_TIM_Base_MspInit+0x12>
 800348e:	bf00      	nop
 8003490:	40000400 	.word	0x40000400
 8003494:	40021000 	.word	0x40021000

08003498 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003498:	b510      	push	{r4, lr}
 800349a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349c:	2300      	movs	r3, #0
 800349e:	9304      	str	r3, [sp, #16]
 80034a0:	9305      	str	r3, [sp, #20]
 80034a2:	9306      	str	r3, [sp, #24]
 80034a4:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM2)
 80034a6:	6803      	ldr	r3, [r0, #0]
 80034a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ac:	d004      	beq.n	80034b8 <HAL_TIM_MspPostInit+0x20>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 80034ae:	4a1f      	ldr	r2, [pc, #124]	; (800352c <HAL_TIM_MspPostInit+0x94>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d016      	beq.n	80034e2 <HAL_TIM_MspPostInit+0x4a>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80034b4:	b008      	add	sp, #32
 80034b6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	f042 0204 	orr.w	r2, r2, #4
 80034c2:	619a      	str	r2, [r3, #24]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034ce:	2308      	movs	r3, #8
 80034d0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d2:	2302      	movs	r3, #2
 80034d4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d8:	a904      	add	r1, sp, #16
 80034da:	4815      	ldr	r0, [pc, #84]	; (8003530 <HAL_TIM_MspPostInit+0x98>)
 80034dc:	f002 fae6 	bl	8005aac <HAL_GPIO_Init>
 80034e0:	e7e8      	b.n	80034b4 <HAL_TIM_MspPostInit+0x1c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e2:	4b14      	ldr	r3, [pc, #80]	; (8003534 <HAL_TIM_MspPostInit+0x9c>)
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	f042 0204 	orr.w	r2, r2, #4
 80034ea:	619a      	str	r2, [r3, #24]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	f002 0204 	and.w	r2, r2, #4
 80034f2:	9202      	str	r2, [sp, #8]
 80034f4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f6:	699a      	ldr	r2, [r3, #24]
 80034f8:	f042 0208 	orr.w	r2, r2, #8
 80034fc:	619a      	str	r2, [r3, #24]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	9303      	str	r3, [sp, #12]
 8003506:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003508:	23c0      	movs	r3, #192	; 0xc0
 800350a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350c:	2402      	movs	r4, #2
 800350e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003512:	a904      	add	r1, sp, #16
 8003514:	4806      	ldr	r0, [pc, #24]	; (8003530 <HAL_TIM_MspPostInit+0x98>)
 8003516:	f002 fac9 	bl	8005aac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800351a:	2303      	movs	r3, #3
 800351c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003520:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003522:	a904      	add	r1, sp, #16
 8003524:	4804      	ldr	r0, [pc, #16]	; (8003538 <HAL_TIM_MspPostInit+0xa0>)
 8003526:	f002 fac1 	bl	8005aac <HAL_GPIO_Init>
}
 800352a:	e7c3      	b.n	80034b4 <HAL_TIM_MspPostInit+0x1c>
 800352c:	40000400 	.word	0x40000400
 8003530:	40010800 	.word	0x40010800
 8003534:	40021000 	.word	0x40021000
 8003538:	40010c00 	.word	0x40010c00

0800353c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003542:	2300      	movs	r3, #0
 8003544:	9304      	str	r3, [sp, #16]
 8003546:	9305      	str	r3, [sp, #20]
 8003548:	9306      	str	r3, [sp, #24]
 800354a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800354c:	6803      	ldr	r3, [r0, #0]
 800354e:	4a46      	ldr	r2, [pc, #280]	; (8003668 <HAL_UART_MspInit+0x12c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d004      	beq.n	800355e <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8003554:	4a45      	ldr	r2, [pc, #276]	; (800366c <HAL_UART_MspInit+0x130>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d047      	beq.n	80035ea <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800355a:	b008      	add	sp, #32
 800355c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800355e:	4b44      	ldr	r3, [pc, #272]	; (8003670 <HAL_UART_MspInit+0x134>)
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003566:	619a      	str	r2, [r3, #24]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800356e:	9200      	str	r2, [sp, #0]
 8003570:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	f042 0204 	orr.w	r2, r2, #4
 8003578:	619a      	str	r2, [r3, #24]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003588:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358a:	2302      	movs	r3, #2
 800358c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800358e:	2303      	movs	r3, #3
 8003590:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003592:	4e38      	ldr	r6, [pc, #224]	; (8003674 <HAL_UART_MspInit+0x138>)
 8003594:	a904      	add	r1, sp, #16
 8003596:	4630      	mov	r0, r6
 8003598:	f002 fa88 	bl	8005aac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800359c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035a2:	2500      	movs	r5, #0
 80035a4:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a8:	a904      	add	r1, sp, #16
 80035aa:	4630      	mov	r0, r6
 80035ac:	f002 fa7e 	bl	8005aac <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80035b0:	4831      	ldr	r0, [pc, #196]	; (8003678 <HAL_UART_MspInit+0x13c>)
 80035b2:	4b32      	ldr	r3, [pc, #200]	; (800367c <HAL_UART_MspInit+0x140>)
 80035b4:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035b6:	6045      	str	r5, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b8:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035ba:	2380      	movs	r3, #128	; 0x80
 80035bc:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035be:	6105      	str	r5, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035c0:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80035c2:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035c4:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035c6:	f002 f8bb 	bl	8005740 <HAL_DMA_Init>
 80035ca:	b958      	cbnz	r0, 80035e4 <HAL_UART_MspInit+0xa8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80035cc:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <HAL_UART_MspInit+0x13c>)
 80035ce:	63e3      	str	r3, [r4, #60]	; 0x3c
 80035d0:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80035d2:	2200      	movs	r2, #0
 80035d4:	2105      	movs	r1, #5
 80035d6:	2025      	movs	r0, #37	; 0x25
 80035d8:	f002 f844 	bl	8005664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035dc:	2025      	movs	r0, #37	; 0x25
 80035de:	f002 f879 	bl	80056d4 <HAL_NVIC_EnableIRQ>
 80035e2:	e7ba      	b.n	800355a <HAL_UART_MspInit+0x1e>
      Error_Handler();
 80035e4:	f7ff f8ca 	bl	800277c <Error_Handler>
 80035e8:	e7f0      	b.n	80035cc <HAL_UART_MspInit+0x90>
    __HAL_RCC_USART3_CLK_ENABLE();
 80035ea:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_UART_MspInit+0x134>)
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80035f2:	61da      	str	r2, [r3, #28]
 80035f4:	69da      	ldr	r2, [r3, #28]
 80035f6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80035fa:	9202      	str	r2, [sp, #8]
 80035fc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	f042 0208 	orr.w	r2, r2, #8
 8003604:	619a      	str	r2, [r3, #24]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	9303      	str	r3, [sp, #12]
 800360e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003614:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003616:	2302      	movs	r3, #2
 8003618:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800361a:	2303      	movs	r3, #3
 800361c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361e:	4e18      	ldr	r6, [pc, #96]	; (8003680 <HAL_UART_MspInit+0x144>)
 8003620:	a904      	add	r1, sp, #16
 8003622:	4630      	mov	r0, r6
 8003624:	f002 fa42 	bl	8005aac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003628:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800362c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800362e:	2500      	movs	r5, #0
 8003630:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003632:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003634:	a904      	add	r1, sp, #16
 8003636:	4630      	mov	r0, r6
 8003638:	f002 fa38 	bl	8005aac <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800363c:	4811      	ldr	r0, [pc, #68]	; (8003684 <HAL_UART_MspInit+0x148>)
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_UART_MspInit+0x14c>)
 8003640:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003642:	6045      	str	r5, [r0, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003644:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800364a:	6105      	str	r5, [r0, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800364c:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800364e:	2320      	movs	r3, #32
 8003650:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003652:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003654:	f002 f874 	bl	8005740 <HAL_DMA_Init>
 8003658:	b918      	cbnz	r0, 8003662 <HAL_UART_MspInit+0x126>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800365a:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_UART_MspInit+0x148>)
 800365c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800365e:	625c      	str	r4, [r3, #36]	; 0x24
}
 8003660:	e77b      	b.n	800355a <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8003662:	f7ff f88b 	bl	800277c <Error_Handler>
 8003666:	e7f8      	b.n	800365a <HAL_UART_MspInit+0x11e>
 8003668:	40013800 	.word	0x40013800
 800366c:	40004800 	.word	0x40004800
 8003670:	40021000 	.word	0x40021000
 8003674:	40010800 	.word	0x40010800
 8003678:	20001084 	.word	0x20001084
 800367c:	40020058 	.word	0x40020058
 8003680:	40010c00 	.word	0x40010c00
 8003684:	200010c8 	.word	0x200010c8
 8003688:	40020030 	.word	0x40020030

0800368c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800368c:	b510      	push	{r4, lr}
 800368e:	4604      	mov	r4, r0
  if(huart->Instance==USART1)
 8003690:	6803      	ldr	r3, [r0, #0]
 8003692:	4a14      	ldr	r2, [pc, #80]	; (80036e4 <HAL_UART_MspDeInit+0x58>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <HAL_UART_MspDeInit+0x14>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 8003698:	4a13      	ldr	r2, [pc, #76]	; (80036e8 <HAL_UART_MspDeInit+0x5c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d012      	beq.n	80036c4 <HAL_UART_MspDeInit+0x38>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800369e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 80036a0:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80036a4:	6993      	ldr	r3, [r2, #24]
 80036a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036aa:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80036ac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80036b0:	480e      	ldr	r0, [pc, #56]	; (80036ec <HAL_UART_MspDeInit+0x60>)
 80036b2:	f002 fb0d 	bl	8005cd0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80036b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80036b8:	f002 f878 	bl	80057ac <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80036bc:	2025      	movs	r0, #37	; 0x25
 80036be:	f002 f817 	bl	80056f0 <HAL_NVIC_DisableIRQ>
 80036c2:	e7ec      	b.n	800369e <HAL_UART_MspDeInit+0x12>
    __HAL_RCC_USART3_CLK_DISABLE();
 80036c4:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80036c8:	69d3      	ldr	r3, [r2, #28]
 80036ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ce:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80036d0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80036d4:	4806      	ldr	r0, [pc, #24]	; (80036f0 <HAL_UART_MspDeInit+0x64>)
 80036d6:	f002 fafb 	bl	8005cd0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80036da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80036dc:	f002 f866 	bl	80057ac <HAL_DMA_DeInit>
}
 80036e0:	e7dd      	b.n	800369e <HAL_UART_MspDeInit+0x12>
 80036e2:	bf00      	nop
 80036e4:	40013800 	.word	0x40013800
 80036e8:	40004800 	.word	0x40004800
 80036ec:	40010800 	.word	0x40010800
 80036f0:	40010c00 	.word	0x40010c00

080036f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f4:	b530      	push	{r4, r5, lr}
 80036f6:	b089      	sub	sp, #36	; 0x24
 80036f8:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80036fa:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <HAL_InitTick+0x80>)
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003702:	619a      	str	r2, [r3, #24]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800370e:	a902      	add	r1, sp, #8
 8003710:	a803      	add	r0, sp, #12
 8003712:	f003 fd1f 	bl	8007154 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003716:	f003 fd0d 	bl	8007134 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800371a:	4a17      	ldr	r2, [pc, #92]	; (8003778 <HAL_InitTick+0x84>)
 800371c:	fba2 2300 	umull	r2, r3, r2, r0
 8003720:	0c9b      	lsrs	r3, r3, #18
 8003722:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003724:	4815      	ldr	r0, [pc, #84]	; (800377c <HAL_InitTick+0x88>)
 8003726:	4a16      	ldr	r2, [pc, #88]	; (8003780 <HAL_InitTick+0x8c>)
 8003728:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800372a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800372e:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003730:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003736:	6083      	str	r3, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003738:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800373a:	f004 fa0f 	bl	8007b5c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800373e:	4605      	mov	r5, r0
 8003740:	b110      	cbz	r0, 8003748 <HAL_InitTick+0x54>
    }
  }

 /* Return function status */
  return status;
}
 8003742:	4628      	mov	r0, r5
 8003744:	b009      	add	sp, #36	; 0x24
 8003746:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003748:	480c      	ldr	r0, [pc, #48]	; (800377c <HAL_InitTick+0x88>)
 800374a:	f004 f8d7 	bl	80078fc <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800374e:	4605      	mov	r5, r0
 8003750:	2800      	cmp	r0, #0
 8003752:	d1f6      	bne.n	8003742 <HAL_InitTick+0x4e>
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003754:	2019      	movs	r0, #25
 8003756:	f001 ffbd 	bl	80056d4 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800375a:	2c0f      	cmp	r4, #15
 800375c:	d901      	bls.n	8003762 <HAL_InitTick+0x6e>
        status = HAL_ERROR;
 800375e:	2501      	movs	r5, #1
 8003760:	e7ef      	b.n	8003742 <HAL_InitTick+0x4e>
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8003762:	2200      	movs	r2, #0
 8003764:	4621      	mov	r1, r4
 8003766:	2019      	movs	r0, #25
 8003768:	f001 ff7c 	bl	8005664 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_InitTick+0x90>)
 800376e:	601c      	str	r4, [r3, #0]
 8003770:	e7e7      	b.n	8003742 <HAL_InitTick+0x4e>
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000
 8003778:	431bde83 	.word	0x431bde83
 800377c:	200012a8 	.word	0x200012a8
 8003780:	40012c00 	.word	0x40012c00
 8003784:	20000008 	.word	0x20000008

08003788 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003788:	e7fe      	b.n	8003788 <NMI_Handler>

0800378a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800378a:	e7fe      	b.n	800378a <HardFault_Handler>

0800378c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800378c:	e7fe      	b.n	800378c <MemManage_Handler>

0800378e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800378e:	e7fe      	b.n	800378e <BusFault_Handler>

08003790 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003790:	e7fe      	b.n	8003790 <UsageFault_Handler>

08003792 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003792:	4770      	bx	lr

08003794 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003794:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003796:	4802      	ldr	r0, [pc, #8]	; (80037a0 <DMA1_Channel1_IRQHandler+0xc>)
 8003798:	f002 f8e6 	bl	8005968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800379c:	bd08      	pop	{r3, pc}
 800379e:	bf00      	nop
 80037a0:	20001040 	.word	0x20001040

080037a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80037a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80037a6:	4802      	ldr	r0, [pc, #8]	; (80037b0 <DMA1_Channel3_IRQHandler+0xc>)
 80037a8:	f002 f8de 	bl	8005968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80037ac:	bd08      	pop	{r3, pc}
 80037ae:	bf00      	nop
 80037b0:	200010c8 	.word	0x200010c8

080037b4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80037b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80037b6:	4803      	ldr	r0, [pc, #12]	; (80037c4 <DMA1_Channel5_IRQHandler+0x10>)
 80037b8:	f002 f8d6 	bl	8005968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  BLEDMA_IrqHandler(&bluetooth);
 80037bc:	4802      	ldr	r0, [pc, #8]	; (80037c8 <DMA1_Channel5_IRQHandler+0x14>)
 80037be:	f7fd fd3d 	bl	800123c <BLEDMA_IrqHandler>
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80037c2:	bd08      	pop	{r3, pc}
 80037c4:	20001084 	.word	0x20001084
 80037c8:	20000f2c 	.word	0x20000f2c

080037cc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80037cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037ce:	4802      	ldr	r0, [pc, #8]	; (80037d8 <TIM1_UP_IRQHandler+0xc>)
 80037d0:	f004 f8cd 	bl	800796e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80037d4:	bd08      	pop	{r3, pc}
 80037d6:	bf00      	nop
 80037d8:	200012a8 	.word	0x200012a8

080037dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80037de:	4802      	ldr	r0, [pc, #8]	; (80037e8 <TIM3_IRQHandler+0xc>)
 80037e0:	f004 f8c5 	bl	800796e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80037e4:	bd08      	pop	{r3, pc}
 80037e6:	bf00      	nop
 80037e8:	200011bc 	.word	0x200011bc

080037ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80037ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037ee:	4803      	ldr	r0, [pc, #12]	; (80037fc <USART1_IRQHandler+0x10>)
 80037f0:	f004 ff4a 	bl	8008688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  BLEUSART_IrqHandler(&bluetooth);
 80037f4:	4802      	ldr	r0, [pc, #8]	; (8003800 <USART1_IRQHandler+0x14>)
 80037f6:	f7fd fdfe 	bl	80013f6 <BLEUSART_IrqHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80037fa:	bd08      	pop	{r3, pc}
 80037fc:	20001204 	.word	0x20001204
 8003800:	20000f2c 	.word	0x20000f2c

08003804 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	460c      	mov	r4, r1
 8003808:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800380a:	2500      	movs	r5, #0
 800380c:	e006      	b.n	800381c <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800380e:	f3af 8000 	nop.w
 8003812:	4621      	mov	r1, r4
 8003814:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003818:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800381a:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800381c:	42b5      	cmp	r5, r6
 800381e:	dbf6      	blt.n	800380e <_read+0xa>
  }

  return len;
}
 8003820:	4630      	mov	r0, r6
 8003822:	bd70      	pop	{r4, r5, r6, pc}

08003824 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003824:	b570      	push	{r4, r5, r6, lr}
 8003826:	460c      	mov	r4, r1
 8003828:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382a:	2500      	movs	r5, #0
 800382c:	e004      	b.n	8003838 <_write+0x14>
  {
    __io_putchar(*ptr++);
 800382e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003832:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003836:	3501      	adds	r5, #1
 8003838:	42b5      	cmp	r5, r6
 800383a:	dbf8      	blt.n	800382e <_write+0xa>
  }
  return len;
}
 800383c:	4630      	mov	r0, r6
 800383e:	bd70      	pop	{r4, r5, r6, pc}

08003840 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003840:	f04f 30ff 	mov.w	r0, #4294967295
 8003844:	4770      	bx	lr

08003846 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800384a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800384c:	2000      	movs	r0, #0
 800384e:	4770      	bx	lr

08003850 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003850:	2001      	movs	r0, #1
 8003852:	4770      	bx	lr

08003854 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003854:	2000      	movs	r0, #0
 8003856:	4770      	bx	lr

08003858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003858:	b510      	push	{r4, lr}
 800385a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800385c:	4a0c      	ldr	r2, [pc, #48]	; (8003890 <_sbrk+0x38>)
 800385e:	490d      	ldr	r1, [pc, #52]	; (8003894 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003860:	480d      	ldr	r0, [pc, #52]	; (8003898 <_sbrk+0x40>)
 8003862:	6800      	ldr	r0, [r0, #0]
 8003864:	b140      	cbz	r0, 8003878 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003866:	480c      	ldr	r0, [pc, #48]	; (8003898 <_sbrk+0x40>)
 8003868:	6800      	ldr	r0, [r0, #0]
 800386a:	4403      	add	r3, r0
 800386c:	1a52      	subs	r2, r2, r1
 800386e:	4293      	cmp	r3, r2
 8003870:	d806      	bhi.n	8003880 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003872:	4a09      	ldr	r2, [pc, #36]	; (8003898 <_sbrk+0x40>)
 8003874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8003876:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003878:	4807      	ldr	r0, [pc, #28]	; (8003898 <_sbrk+0x40>)
 800387a:	4c08      	ldr	r4, [pc, #32]	; (800389c <_sbrk+0x44>)
 800387c:	6004      	str	r4, [r0, #0]
 800387e:	e7f2      	b.n	8003866 <_sbrk+0xe>
    errno = ENOMEM;
 8003880:	f007 ffa4 	bl	800b7cc <__errno>
 8003884:	230c      	movs	r3, #12
 8003886:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	e7f3      	b.n	8003876 <_sbrk+0x1e>
 800388e:	bf00      	nop
 8003890:	20005000 	.word	0x20005000
 8003894:	00000400 	.word	0x00000400
 8003898:	200012f0 	.word	0x200012f0
 800389c:	20002d50 	.word	0x20002d50

080038a0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038a0:	4770      	bx	lr
	...

080038a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038a4:	f7ff fffc 	bl	80038a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038a8:	480b      	ldr	r0, [pc, #44]	; (80038d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80038aa:	490c      	ldr	r1, [pc, #48]	; (80038dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80038ac:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80038ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038b0:	e002      	b.n	80038b8 <LoopCopyDataInit>

080038b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038b6:	3304      	adds	r3, #4

080038b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038bc:	d3f9      	bcc.n	80038b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038be:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80038c0:	4c09      	ldr	r4, [pc, #36]	; (80038e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038c4:	e001      	b.n	80038ca <LoopFillZerobss>

080038c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038c8:	3204      	adds	r2, #4

080038ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038cc:	d3fb      	bcc.n	80038c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038ce:	f007 ff83 	bl	800b7d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038d2:	f7ff f931 	bl	8002b38 <main>
  bx lr
 80038d6:	4770      	bx	lr
  ldr r0, =_sdata
 80038d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038dc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80038e0:	0800ca64 	.word	0x0800ca64
  ldr r2, =_sbss
 80038e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80038e8:	20002d50 	.word	0x20002d50

080038ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038ec:	e7fe      	b.n	80038ec <ADC1_2_IRQHandler>
	...

080038f0 <initBluetooth>:

		osThreadYield();
		osDelay(40);
	}
}
void initBluetooth(void){
 80038f0:	b510      	push	{r4, lr}
 80038f2:	b082      	sub	sp, #8

	//inicializacao do bluetooth
	//todo tratar returns
	bleConstrutora(&bluetooth, &huart1, &hdma_usart1_rx, &FilaRXBluetoothHandle,&FilaTXBluetoothHandle,&FilaBleComandoHandle);
 80038f4:	4c33      	ldr	r4, [pc, #204]	; (80039c4 <initBluetooth+0xd4>)
 80038f6:	4b34      	ldr	r3, [pc, #208]	; (80039c8 <initBluetooth+0xd8>)
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	4b34      	ldr	r3, [pc, #208]	; (80039cc <initBluetooth+0xdc>)
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	4b34      	ldr	r3, [pc, #208]	; (80039d0 <initBluetooth+0xe0>)
 8003900:	4a34      	ldr	r2, [pc, #208]	; (80039d4 <initBluetooth+0xe4>)
 8003902:	4935      	ldr	r1, [pc, #212]	; (80039d8 <initBluetooth+0xe8>)
 8003904:	4620      	mov	r0, r4
 8003906:	f7fe f807 	bl	8001918 <bleConstrutora>

	//possiveis comandos a serem recebidos pelo bluetooth
	bleAddComp(&bluetooth, &BLEAtualizaRealtime,	RX_SOLICITA_REALTIME	);
 800390a:	2215      	movs	r2, #21
 800390c:	4933      	ldr	r1, [pc, #204]	; (80039dc <initBluetooth+0xec>)
 800390e:	4620      	mov	r0, r4
 8003910:	f7fd fbd3 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLESolicitaSincronia, 	RX_SOLICITA_SINCRONIA	);
 8003914:	2217      	movs	r2, #23
 8003916:	4932      	ldr	r1, [pc, #200]	; (80039e0 <initBluetooth+0xf0>)
 8003918:	4620      	mov	r0, r4
 800391a:	f7fd fbce 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLEAlteraLimiteTemp, 	RX_LIMITE_TEMPERATURA	);
 800391e:	2226      	movs	r2, #38	; 0x26
 8003920:	4930      	ldr	r1, [pc, #192]	; (80039e4 <initBluetooth+0xf4>)
 8003922:	4620      	mov	r0, r4
 8003924:	f7fd fbc9 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLEAtualizaDataHora,	RX_ATUALIZA_HORA		);
 8003928:	2203      	movs	r2, #3
 800392a:	492f      	ldr	r1, [pc, #188]	; (80039e8 <initBluetooth+0xf8>)
 800392c:	4620      	mov	r0, r4
 800392e:	f7fd fbc4 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLERestaura, 			RX_RESTAURA				);
 8003932:	2210      	movs	r2, #16
 8003934:	492d      	ldr	r1, [pc, #180]	; (80039ec <initBluetooth+0xfc>)
 8003936:	4620      	mov	r0, r4
 8003938:	f7fd fbbf 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLERestauraHard, 		RX_RESTAURA_HARD		);
 800393c:	2209      	movs	r2, #9
 800393e:	492c      	ldr	r1, [pc, #176]	; (80039f0 <initBluetooth+0x100>)
 8003940:	4620      	mov	r0, r4
 8003942:	f7fd fbba 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLESPTeto,     			RX_SP_TEMP_TETO			);
 8003946:	2221      	movs	r2, #33	; 0x21
 8003948:	492a      	ldr	r1, [pc, #168]	; (80039f4 <initBluetooth+0x104>)
 800394a:	4620      	mov	r0, r4
 800394c:	f7fd fbb5 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLESPLastro,     	   	RX_SP_TEMP_LASTRO		);
 8003950:	2222      	movs	r2, #34	; 0x22
 8003952:	4929      	ldr	r1, [pc, #164]	; (80039f8 <initBluetooth+0x108>)
 8003954:	4620      	mov	r0, r4
 8003956:	f7fd fbb0 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLESPTempo,     		RX_SP_TEMPO				);
 800395a:	2223      	movs	r2, #35	; 0x23
 800395c:	4927      	ldr	r1, [pc, #156]	; (80039fc <initBluetooth+0x10c>)
 800395e:	4620      	mov	r0, r4
 8003960:	f7fd fbab 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLEToggleTempo,      	RX_TOGGLE_TEMPO			);
 8003964:	2224      	movs	r2, #36	; 0x24
 8003966:	4926      	ldr	r1, [pc, #152]	; (8003a00 <initBluetooth+0x110>)
 8003968:	4620      	mov	r0, r4
 800396a:	f7fd fba6 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLEReceita,     	  	RX_RECEITA				);
 800396e:	2225      	movs	r2, #37	; 0x25
 8003970:	4924      	ldr	r1, [pc, #144]	; (8003a04 <initBluetooth+0x114>)
 8003972:	4620      	mov	r0, r4
 8003974:	f7fd fba1 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLELightOn,     	  	RX_LIGA_LAMPADA			);
 8003978:	2227      	movs	r2, #39	; 0x27
 800397a:	4923      	ldr	r1, [pc, #140]	; (8003a08 <initBluetooth+0x118>)
 800397c:	4620      	mov	r0, r4
 800397e:	f7fd fb9c 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLELightOff,     	 	RX_DESLIGA_LAMPADA		);
 8003982:	2228      	movs	r2, #40	; 0x28
 8003984:	4921      	ldr	r1, [pc, #132]	; (8003a0c <initBluetooth+0x11c>)
 8003986:	4620      	mov	r0, r4
 8003988:	f7fd fb97 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLESetaLampada,     	RX_LIMITE_LAMPADA		);
 800398c:	2230      	movs	r2, #48	; 0x30
 800398e:	4920      	ldr	r1, [pc, #128]	; (8003a10 <initBluetooth+0x120>)
 8003990:	4620      	mov	r0, r4
 8003992:	f7fd fb92 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLECancelaProcesso,   	RX_CANCELA_PROCESSO		);
 8003996:	2229      	movs	r2, #41	; 0x29
 8003998:	491e      	ldr	r1, [pc, #120]	; (8003a14 <initBluetooth+0x124>)
 800399a:	4620      	mov	r0, r4
 800399c:	f7fd fb8d 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLETunningTeto,     	RX_TUNNING_TETO			);
 80039a0:	2233      	movs	r2, #51	; 0x33
 80039a2:	491d      	ldr	r1, [pc, #116]	; (8003a18 <initBluetooth+0x128>)
 80039a4:	4620      	mov	r0, r4
 80039a6:	f7fd fb88 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLETunningLastro,  		RX_TUNNING_LASTRO		);
 80039aa:	2234      	movs	r2, #52	; 0x34
 80039ac:	491b      	ldr	r1, [pc, #108]	; (8003a1c <initBluetooth+0x12c>)
 80039ae:	4620      	mov	r0, r4
 80039b0:	f7fd fb83 	bl	80010ba <bleAddComp>
	bleAddComp(&bluetooth, &BLEToggleBuzzer,  		RX_TOGGLE_BUZZER		);
 80039b4:	2235      	movs	r2, #53	; 0x35
 80039b6:	491a      	ldr	r1, [pc, #104]	; (8003a20 <initBluetooth+0x130>)
 80039b8:	4620      	mov	r0, r4
 80039ba:	f7fd fb7e 	bl	80010ba <bleAddComp>

}
 80039be:	b002      	add	sp, #8
 80039c0:	bd10      	pop	{r4, pc}
 80039c2:	bf00      	nop
 80039c4:	20000f2c 	.word	0x20000f2c
 80039c8:	200007e4 	.word	0x200007e4
 80039cc:	20000890 	.word	0x20000890
 80039d0:	2000083c 	.word	0x2000083c
 80039d4:	20001084 	.word	0x20001084
 80039d8:	20001204 	.word	0x20001204
 80039dc:	200012fc 	.word	0x200012fc
 80039e0:	20001328 	.word	0x20001328
 80039e4:	200012f4 	.word	0x200012f4
 80039e8:	200012f8 	.word	0x200012f8
 80039ec:	20001310 	.word	0x20001310
 80039f0:	20001314 	.word	0x20001314
 80039f4:	20001320 	.word	0x20001320
 80039f8:	20001318 	.word	0x20001318
 80039fc:	2000131c 	.word	0x2000131c
 8003a00:	20001330 	.word	0x20001330
 8003a04:	2000130c 	.word	0x2000130c
 8003a08:	20001308 	.word	0x20001308
 8003a0c:	20001304 	.word	0x20001304
 8003a10:	20001324 	.word	0x20001324
 8003a14:	20001300 	.word	0x20001300
 8003a18:	20001338 	.word	0x20001338
 8003a1c:	20001334 	.word	0x20001334
 8003a20:	2000132c 	.word	0x2000132c

08003a24 <taskBluetooth1sec>:
void taskBluetooth1sec(void){
 8003a24:	b508      	push	{r3, lr}

	//---monitor de inatividade
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 8003a26:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <taskBluetooth1sec+0x38>)
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003a2e:	d20d      	bcs.n	8003a4c <taskBluetooth1sec+0x28>
		desligaForno();
	}else if(PrimitiveStates.stateTimer != TIMER_decrementando){
 8003a30:	4a0b      	ldr	r2, [pc, #44]	; (8003a60 <taskBluetooth1sec+0x3c>)
 8003a32:	f892 213e 	ldrb.w	r2, [r2, #318]	; 0x13e
 8003a36:	2a01      	cmp	r2, #1
 8003a38:	d002      	beq.n	8003a40 <taskBluetooth1sec+0x1c>
		tempoSemAtividade++;
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	4a07      	ldr	r2, [pc, #28]	; (8003a5c <taskBluetooth1sec+0x38>)
 8003a3e:	8013      	strh	r3, [r2, #0]
	}

	//---sequenciamento de envio de sincronia
	if(bluetooth.MaquinaConexao == RX_DESCONECTADO){
 8003a40:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <taskBluetooth1sec+0x40>)
 8003a42:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d003      	beq.n	8003a52 <taskBluetooth1sec+0x2e>
	}
	/*
	 * ao conectar, seta a FlagSincronia
	 * ao desconectar, reseta a FlagSincronia
	 * */
}
 8003a4a:	bd08      	pop	{r3, pc}
		desligaForno();
 8003a4c:	f7fe fdbc 	bl	80025c8 <desligaForno>
 8003a50:	e7f6      	b.n	8003a40 <taskBluetooth1sec+0x1c>
		FlagSincronia.cont=0;
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <taskBluetooth1sec+0x44>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	705a      	strb	r2, [r3, #1]
		FlagSincronia.flag=0;
 8003a58:	701a      	strb	r2, [r3, #0]
}
 8003a5a:	e7f6      	b.n	8003a4a <taskBluetooth1sec+0x26>
 8003a5c:	2000133e 	.word	0x2000133e
 8003a60:	20000898 	.word	0x20000898
 8003a64:	20000f2c 	.word	0x20000f2c
 8003a68:	2000133c 	.word	0x2000133c

08003a6c <txBluetooth>:
void txBluetooth(void){
 8003a6c:	b510      	push	{r4, lr}
 8003a6e:	b08a      	sub	sp, #40	; 0x28
	unsigned char	Buffer		[BLUETOOTH_MAX_BUFF_LEN];
	osEvent  evttx;
	evttx = osMessageGet(FilaTXBluetoothHandle, 10);
 8003a70:	220a      	movs	r2, #10
 8003a72:	4bb7      	ldr	r3, [pc, #732]	; (8003d50 <txBluetooth+0x2e4>)
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	a801      	add	r0, sp, #4
 8003a78:	f005 f983 	bl	8008d82 <osMessageGet>
	if (evttx.status == osEventMessage) {
 8003a7c:	9b01      	ldr	r3, [sp, #4]
 8003a7e:	2b10      	cmp	r3, #16
 8003a80:	d001      	beq.n	8003a86 <txBluetooth+0x1a>
			bluetoothEnviaComando(&bluetooth,Buffer, 2);

			break;
		}
	}
}
 8003a82:	b00a      	add	sp, #40	; 0x28
 8003a84:	bd10      	pop	{r4, pc}
		switch ((unsigned int)evttx.value.p) {
 8003a86:	9b02      	ldr	r3, [sp, #8]
 8003a88:	3b16      	subs	r3, #22
 8003a8a:	2b1a      	cmp	r3, #26
 8003a8c:	d8f9      	bhi.n	8003a82 <txBluetooth+0x16>
 8003a8e:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <txBluetooth+0x28>)
 8003a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a94:	08003b01 	.word	0x08003b01
 8003a98:	08003b8b 	.word	0x08003b8b
 8003a9c:	08003bfb 	.word	0x08003bfb
 8003aa0:	08003c5d 	.word	0x08003c5d
 8003aa4:	08003a83 	.word	0x08003a83
 8003aa8:	08003a83 	.word	0x08003a83
 8003aac:	08003a83 	.word	0x08003a83
 8003ab0:	08003a83 	.word	0x08003a83
 8003ab4:	08003a83 	.word	0x08003a83
 8003ab8:	08003a83 	.word	0x08003a83
 8003abc:	08003cb7 	.word	0x08003cb7
 8003ac0:	08003a83 	.word	0x08003a83
 8003ac4:	08003a83 	.word	0x08003a83
 8003ac8:	08003a83 	.word	0x08003a83
 8003acc:	08003a83 	.word	0x08003a83
 8003ad0:	08003a83 	.word	0x08003a83
 8003ad4:	08003a83 	.word	0x08003a83
 8003ad8:	08003a83 	.word	0x08003a83
 8003adc:	08003a83 	.word	0x08003a83
 8003ae0:	08003d11 	.word	0x08003d11
 8003ae4:	08003a83 	.word	0x08003a83
 8003ae8:	08003a83 	.word	0x08003a83
 8003aec:	08003a83 	.word	0x08003a83
 8003af0:	08003a83 	.word	0x08003a83
 8003af4:	08003a83 	.word	0x08003a83
 8003af8:	08003a83 	.word	0x08003a83
 8003afc:	08003d2d 	.word	0x08003d2d
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003b00:	2301      	movs	r3, #1
 8003b02:	f88d 3010 	strb.w	r3, [sp, #16]
			Buffer[1] 	= 0x16;									// FUNÇÃO -
 8003b06:	2316      	movs	r3, #22
 8003b08:	f88d 3011 	strb.w	r3, [sp, #17]
			Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003b0c:	4c91      	ldr	r4, [pc, #580]	; (8003d54 <txBluetooth+0x2e8>)
 8003b0e:	f894 313f 	ldrb.w	r3, [r4, #319]	; 0x13f
 8003b12:	f88d 3012 	strb.w	r3, [sp, #18]
			Buffer[3] 	= PrimitiveStates.Teto._PWMstate;
 8003b16:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8003b1a:	f88d 3013 	strb.w	r3, [sp, #19]
			Buffer[4] 	= PrimitiveStates.Lastro._PWMstate;
 8003b1e:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8003b22:	f88d 3014 	strb.w	r3, [sp, #20]
			Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003b26:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
 8003b2a:	f7fc ff6f 	bl	8000a0c <__aeabi_d2uiz>
 8003b2e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003b32:	f88d 3015 	strb.w	r3, [sp, #21]
			Buffer[6] 	= (uint16_t)PrimitiveStates.Teto.realtime 		& 0x00FF;
 8003b36:	f88d 0016 	strb.w	r0, [sp, #22]
			Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003b3a:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
 8003b3e:	f7fc ff65 	bl	8000a0c <__aeabi_d2uiz>
 8003b42:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003b46:	f88d 3017 	strb.w	r3, [sp, #23]
			Buffer[8] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		& 0x00FF;
 8003b4a:	f88d 0018 	strb.w	r0, [sp, #24]
			Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 8003b4e:	e9d4 0146 	ldrd	r0, r1, [r4, #280]	; 0x118
 8003b52:	f7fc ff5b 	bl	8000a0c <__aeabi_d2uiz>
 8003b56:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003b5a:	f88d 3019 	strb.w	r3, [sp, #25]
			Buffer[10] 	= (uint16_t)PrimitiveStates.Lastro.realtime 	& 0x00FF;
 8003b5e:	f88d 001a 	strb.w	r0, [sp, #26]
			Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 8003b62:	e9d4 0148 	ldrd	r0, r1, [r4, #288]	; 0x120
 8003b66:	f7fc ff51 	bl	8000a0c <__aeabi_d2uiz>
 8003b6a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003b6e:	f88d 301b 	strb.w	r3, [sp, #27]
			Buffer[12] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	& 0x00FF;
 8003b72:	f88d 001c 	strb.w	r0, [sp, #28]
			Buffer[13] 	= PrimitiveStates.Buzzer;
 8003b76:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
 8003b7a:	f88d 301d 	strb.w	r3, [sp, #29]
			bluetoothEnviaComando(&bluetooth,Buffer, 13);
 8003b7e:	220d      	movs	r2, #13
 8003b80:	a904      	add	r1, sp, #16
 8003b82:	4875      	ldr	r0, [pc, #468]	; (8003d58 <txBluetooth+0x2ec>)
 8003b84:	f7fd fc5b 	bl	800143e <bluetoothEnviaComando>
			break;
 8003b88:	e77b      	b.n	8003a82 <txBluetooth+0x16>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	f88d 3010 	strb.w	r3, [sp, #16]
			Buffer[1] 	= 0x17;									// FUNÇÃO -
 8003b90:	2317      	movs	r3, #23
 8003b92:	f88d 3011 	strb.w	r3, [sp, #17]
			Buffer[2] 	= PrimitiveStates.stateTimer;			// State da maquina de timer
 8003b96:	4b6f      	ldr	r3, [pc, #444]	; (8003d54 <txBluetooth+0x2e8>)
 8003b98:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8003b9c:	f88d 2012 	strb.w	r2, [sp, #18]
			Buffer[3] 	= PrimitiveStates.RTTimerMinutos;
 8003ba0:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 8003ba4:	f88d 2013 	strb.w	r2, [sp, #19]
			Buffer[4] 	= PrimitiveStates.RTTimerSegundos;
 8003ba8:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 8003bac:	f88d 2014 	strb.w	r2, [sp, #20]
			Buffer[5] 	= PrimitiveStates.SPTimerMinutos;
 8003bb0:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8003bb4:	f88d 2015 	strb.w	r2, [sp, #21]
			Buffer[6] 	= PrimitiveStates.SPTimerSegundos;
 8003bb8:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
 8003bbc:	f88d 2016 	strb.w	r2, [sp, #22]
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 8003bc0:	4a66      	ldr	r2, [pc, #408]	; (8003d5c <txBluetooth+0x2f0>)
 8003bc2:	68d2      	ldr	r2, [r2, #12]
 8003bc4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003bc8:	f88d 1017 	strb.w	r1, [sp, #23]
			Buffer[8] 	= (uint16_t)horimetroHoras.valor & 0x00FF;
 8003bcc:	f88d 2018 	strb.w	r2, [sp, #24]
			Buffer[9] 	= (uint8_t)horimetroMinutos.valor;
 8003bd0:	4a63      	ldr	r2, [pc, #396]	; (8003d60 <txBluetooth+0x2f4>)
 8003bd2:	7b12      	ldrb	r2, [r2, #12]
 8003bd4:	f88d 2019 	strb.w	r2, [sp, #25]
			Buffer[10]	= PrimitiveStates.Lampada._state;
 8003bd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bdc:	f88d 301a 	strb.w	r3, [sp, #26]
			Buffer[11] 	= (uint16_t)Calendario.TotalCiclos >> 8;
 8003be0:	4b60      	ldr	r3, [pc, #384]	; (8003d64 <txBluetooth+0x2f8>)
 8003be2:	891b      	ldrh	r3, [r3, #8]
 8003be4:	0a1a      	lsrs	r2, r3, #8
 8003be6:	f88d 201b 	strb.w	r2, [sp, #27]
			Buffer[12] 	= (uint16_t)Calendario.TotalCiclos & 0x00FF;
 8003bea:	f88d 301c 	strb.w	r3, [sp, #28]
			bluetoothEnviaComando(&bluetooth,Buffer, 12);
 8003bee:	220c      	movs	r2, #12
 8003bf0:	a904      	add	r1, sp, #16
 8003bf2:	4859      	ldr	r0, [pc, #356]	; (8003d58 <txBluetooth+0x2ec>)
 8003bf4:	f7fd fc23 	bl	800143e <bluetoothEnviaComando>
			break;
 8003bf8:	e743      	b.n	8003a82 <txBluetooth+0x16>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f88d 3010 	strb.w	r3, [sp, #16]
			Buffer[1] 	= 0x18;									// FUNÇÃO -
 8003c00:	2218      	movs	r2, #24
 8003c02:	f88d 2011 	strb.w	r2, [sp, #17]
			Buffer[2] 	= 0x01;									// Modelo
 8003c06:	f88d 3012 	strb.w	r3, [sp, #18]
			Buffer[3] 	= (uint16_t)PrimitiveStates.Lampada.limitOn >> 8;
 8003c0a:	4b52      	ldr	r3, [pc, #328]	; (8003d54 <txBluetooth+0x2e8>)
 8003c0c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003c0e:	0a1a      	lsrs	r2, r3, #8
 8003c10:	f88d 2013 	strb.w	r2, [sp, #19]
			Buffer[4] 	= (uint16_t)PrimitiveStates.Lampada.limitOn & 0x00FF;
 8003c14:	f88d 3014 	strb.w	r3, [sp, #20]
			Buffer[5] 	= (uint8_t)instalacaoDia.valor;
 8003c18:	4b53      	ldr	r3, [pc, #332]	; (8003d68 <txBluetooth+0x2fc>)
 8003c1a:	7b1b      	ldrb	r3, [r3, #12]
 8003c1c:	f88d 3015 	strb.w	r3, [sp, #21]
			Buffer[6] 	= (uint8_t)instalacaoMes.valor;
 8003c20:	4b52      	ldr	r3, [pc, #328]	; (8003d6c <txBluetooth+0x300>)
 8003c22:	7b1b      	ldrb	r3, [r3, #12]
 8003c24:	f88d 3016 	strb.w	r3, [sp, #22]
			Buffer[7] 	= (uint8_t)instalacaoAno.valor;
 8003c28:	4b51      	ldr	r3, [pc, #324]	; (8003d70 <txBluetooth+0x304>)
 8003c2a:	7b1b      	ldrb	r3, [r3, #12]
 8003c2c:	f88d 3017 	strb.w	r3, [sp, #23]
			Buffer[8]	= VERSAO;
 8003c30:	2302      	movs	r3, #2
 8003c32:	f88d 3018 	strb.w	r3, [sp, #24]
			Buffer[9] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 8003c36:	4b4b      	ldr	r3, [pc, #300]	; (8003d64 <txBluetooth+0x2f8>)
 8003c38:	895a      	ldrh	r2, [r3, #10]
 8003c3a:	0a11      	lsrs	r1, r2, #8
 8003c3c:	f88d 1019 	strb.w	r1, [sp, #25]
			Buffer[10] 	= (uint16_t)Calendario.ContMaxTeto & 0x00FF;
 8003c40:	f88d 201a 	strb.w	r2, [sp, #26]
			Buffer[11] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 8003c44:	899b      	ldrh	r3, [r3, #12]
 8003c46:	0a1a      	lsrs	r2, r3, #8
 8003c48:	f88d 201b 	strb.w	r2, [sp, #27]
			Buffer[12] 	= (uint16_t)Calendario.ContMaxLastro & 0x00FF;
 8003c4c:	f88d 301c 	strb.w	r3, [sp, #28]
			bluetoothEnviaComando(&bluetooth,Buffer, 12);
 8003c50:	220c      	movs	r2, #12
 8003c52:	a904      	add	r1, sp, #16
 8003c54:	4840      	ldr	r0, [pc, #256]	; (8003d58 <txBluetooth+0x2ec>)
 8003c56:	f7fd fbf2 	bl	800143e <bluetoothEnviaComando>
			break;
 8003c5a:	e712      	b.n	8003a82 <txBluetooth+0x16>
			Buffer[0] = 0x01;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f88d 3010 	strb.w	r3, [sp, #16]
			Buffer[1] = 0x19;
 8003c62:	2319      	movs	r3, #25
 8003c64:	f88d 3011 	strb.w	r3, [sp, #17]
			float_TO_vetor4b(PrimitiveStates.Teto.kp, Buffer, 2);
 8003c68:	4c3a      	ldr	r4, [pc, #232]	; (8003d54 <txBluetooth+0x2e8>)
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	aa04      	add	r2, sp, #16
 8003c6e:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
 8003c72:	f7fd fef3 	bl	8001a5c <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Teto.ki, Buffer, 6);
 8003c76:	2306      	movs	r3, #6
 8003c78:	aa04      	add	r2, sp, #16
 8003c7a:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
 8003c7e:	f7fd feed 	bl	8001a5c <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Teto.kd, Buffer, 10);
 8003c82:	230a      	movs	r3, #10
 8003c84:	aa04      	add	r2, sp, #16
 8003c86:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	; 0xc0
 8003c8a:	f7fd fee7 	bl	8001a5c <float_TO_vetor4b>
			Buffer[14] 	= (uint16_t)PrimitiveStates.Teto.histerese 	>>8;
 8003c8e:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
 8003c92:	0a1a      	lsrs	r2, r3, #8
 8003c94:	f88d 201e 	strb.w	r2, [sp, #30]
			Buffer[15] 	= (uint16_t)PrimitiveStates.Teto.histerese 	& 0x00FF;
 8003c98:	f88d 301f 	strb.w	r3, [sp, #31]
			Buffer[16] 	= (uint16_t)PrimitiveStates.Teto.limite 		>>8;
 8003c9c:	f8b4 30e0 	ldrh.w	r3, [r4, #224]	; 0xe0
 8003ca0:	0a1a      	lsrs	r2, r3, #8
 8003ca2:	f88d 2020 	strb.w	r2, [sp, #32]
			Buffer[17] 	= (uint16_t)PrimitiveStates.Teto.limite 		& 0x00FF;
 8003ca6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			bluetoothEnviaComando(&bluetooth,Buffer, 17);
 8003caa:	2211      	movs	r2, #17
 8003cac:	a904      	add	r1, sp, #16
 8003cae:	482a      	ldr	r0, [pc, #168]	; (8003d58 <txBluetooth+0x2ec>)
 8003cb0:	f7fd fbc5 	bl	800143e <bluetoothEnviaComando>
			break;
 8003cb4:	e6e5      	b.n	8003a82 <txBluetooth+0x16>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f88d 3010 	strb.w	r3, [sp, #16]
			Buffer[1] 	= 0x20;									// FUNÇÃO -
 8003cbc:	2320      	movs	r3, #32
 8003cbe:	f88d 3011 	strb.w	r3, [sp, #17]
			float_TO_vetor4b(PrimitiveStates.Lastro.kp, Buffer, 2);
 8003cc2:	4c24      	ldr	r4, [pc, #144]	; (8003d54 <txBluetooth+0x2e8>)
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	aa04      	add	r2, sp, #16
 8003cc8:	e9d4 013e 	ldrd	r0, r1, [r4, #248]	; 0xf8
 8003ccc:	f7fd fec6 	bl	8001a5c <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Lastro.ki, Buffer, 6);
 8003cd0:	2306      	movs	r3, #6
 8003cd2:	aa04      	add	r2, sp, #16
 8003cd4:	e9d4 0140 	ldrd	r0, r1, [r4, #256]	; 0x100
 8003cd8:	f7fd fec0 	bl	8001a5c <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Lastro.kd, Buffer, 10);
 8003cdc:	230a      	movs	r3, #10
 8003cde:	aa04      	add	r2, sp, #16
 8003ce0:	e9d4 0142 	ldrd	r0, r1, [r4, #264]	; 0x108
 8003ce4:	f7fd feba 	bl	8001a5c <float_TO_vetor4b>
			Buffer[14] 	= (uint16_t)PrimitiveStates.Lastro.histerese 	>>8;
 8003ce8:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8003cec:	0a1a      	lsrs	r2, r3, #8
 8003cee:	f88d 201e 	strb.w	r2, [sp, #30]
			Buffer[15] 	= (uint16_t)PrimitiveStates.Lastro.histerese 	& 0x00FF;
 8003cf2:	f88d 301f 	strb.w	r3, [sp, #31]
			Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 8003cf6:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8003cfa:	0a1a      	lsrs	r2, r3, #8
 8003cfc:	f88d 2020 	strb.w	r2, [sp, #32]
			Buffer[17] 	= (uint16_t)PrimitiveStates.Lastro.limite 		& 0x00FF;
 8003d00:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			bluetoothEnviaComando(&bluetooth,Buffer, 17);
 8003d04:	2211      	movs	r2, #17
 8003d06:	a904      	add	r1, sp, #16
 8003d08:	4813      	ldr	r0, [pc, #76]	; (8003d58 <txBluetooth+0x2ec>)
 8003d0a:	f7fd fb98 	bl	800143e <bluetoothEnviaComando>
			break;
 8003d0e:	e6b8      	b.n	8003a82 <txBluetooth+0x16>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003d10:	2301      	movs	r3, #1
 8003d12:	f88d 3010 	strb.w	r3, [sp, #16]
			Buffer[1] 	= 0x29;									// FUNÇÃO -
 8003d16:	2329      	movs	r3, #41	; 0x29
 8003d18:	f88d 3011 	strb.w	r3, [sp, #17]
			Buffer[2] 	= 0x29;									// FUNÇÃO -
 8003d1c:	f88d 3012 	strb.w	r3, [sp, #18]
			bluetoothEnviaComando(&bluetooth,Buffer, 2);
 8003d20:	2202      	movs	r2, #2
 8003d22:	a904      	add	r1, sp, #16
 8003d24:	480c      	ldr	r0, [pc, #48]	; (8003d58 <txBluetooth+0x2ec>)
 8003d26:	f7fd fb8a 	bl	800143e <bluetoothEnviaComando>
			break;
 8003d2a:	e6aa      	b.n	8003a82 <txBluetooth+0x16>
			FlagSincronia.flag=0;
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <txBluetooth+0x308>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	701a      	strb	r2, [r3, #0]
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003d32:	2301      	movs	r3, #1
 8003d34:	f88d 3010 	strb.w	r3, [sp, #16]
			Buffer[1] 	= 0x30;									// FUNÇÃO -
 8003d38:	2330      	movs	r3, #48	; 0x30
 8003d3a:	f88d 3011 	strb.w	r3, [sp, #17]
			Buffer[2] 	= 0x30;									// FUNÇÃO -
 8003d3e:	f88d 3012 	strb.w	r3, [sp, #18]
			bluetoothEnviaComando(&bluetooth,Buffer, 2);
 8003d42:	2202      	movs	r2, #2
 8003d44:	a904      	add	r1, sp, #16
 8003d46:	4804      	ldr	r0, [pc, #16]	; (8003d58 <txBluetooth+0x2ec>)
 8003d48:	f7fd fb79 	bl	800143e <bluetoothEnviaComando>
}
 8003d4c:	e699      	b.n	8003a82 <txBluetooth+0x16>
 8003d4e:	bf00      	nop
 8003d50:	20000890 	.word	0x20000890
 8003d54:	20000898 	.word	0x20000898
 8003d58:	20000f2c 	.word	0x20000f2c
 8003d5c:	20001548 	.word	0x20001548
 8003d60:	20001574 	.word	0x20001574
 8003d64:	200007d4 	.word	0x200007d4
 8003d68:	200015cc 	.word	0x200015cc
 8003d6c:	200015f8 	.word	0x200015f8
 8003d70:	200015a0 	.word	0x200015a0
 8003d74:	2000133c 	.word	0x2000133c

08003d78 <verificaLimiteSetpoint>:
			bluetooth.aknowladge(&bluetooth,RX_TOGGLE_BUZZER);
			break;
		}
	}
}
void verificaLimiteSetpoint(IndviduoPID	*canal){
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7a:	4604      	mov	r4, r0
	if(canal->setPoint < canal->limite)
 8003d7c:	e9d0 670c 	ldrd	r6, r7, [r0, #48]	; 0x30
 8003d80:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8003d82:	4628      	mov	r0, r5
 8003d84:	f7fc fb3e 	bl	8000404 <__aeabi_i2d>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	4639      	mov	r1, r7
 8003d90:	f7fc fe14 	bl	80009bc <__aeabi_dcmplt>
 8003d94:	b920      	cbnz	r0, 8003da0 <verificaLimiteSetpoint+0x28>
		return;

	canal->setPoint = canal->limite;
 8003d96:	4628      	mov	r0, r5
 8003d98:	f7fc fb24 	bl	80003e4 <__aeabi_ui2d>
 8003d9c:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
	return;
}
 8003da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003da4 <sincAutomatico>:
bool sincAutomatico(void){ //1==permite 0==recusa

	//envia sincronia junto do realtime apenas 3 vezes por reconexao
	if(!FlagSincronia.flag){
 8003da4:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <sincAutomatico+0x28>)
 8003da6:	7818      	ldrb	r0, [r3, #0]
 8003da8:	b968      	cbnz	r0, 8003dc6 <sincAutomatico+0x22>
		if(FlagSincronia.cont<3){
 8003daa:	785b      	ldrb	r3, [r3, #1]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d804      	bhi.n	8003dba <sincAutomatico+0x16>
			FlagSincronia.cont++; //permite 3 envios antes de resetar a flag
 8003db0:	3301      	adds	r3, #1
 8003db2:	4a06      	ldr	r2, [pc, #24]	; (8003dcc <sincAutomatico+0x28>)
 8003db4:	7053      	strb	r3, [r2, #1]
			return 1;
 8003db6:	2001      	movs	r0, #1
 8003db8:	4770      	bx	lr
		}else{
			FlagSincronia.cont = 0; //zera o contador
 8003dba:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <sincAutomatico+0x28>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	705a      	strb	r2, [r3, #1]
			FlagSincronia.flag = 1; //reseta a flag
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	701a      	strb	r2, [r3, #0]
			return 0;
 8003dc4:	4770      	bx	lr
		}
	}
	return 0;
 8003dc6:	2000      	movs	r0, #0
}
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	2000133c 	.word	0x2000133c

08003dd0 <rxBluetooth>:
void rxBluetooth(void){
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	b086      	sub	sp, #24
	evtrx = osMessageGet(FilaRXBluetoothHandle, 10);
 8003dd4:	220a      	movs	r2, #10
 8003dd6:	4bc5      	ldr	r3, [pc, #788]	; (80040ec <rxBluetooth+0x31c>)
 8003dd8:	6819      	ldr	r1, [r3, #0]
 8003dda:	a803      	add	r0, sp, #12
 8003ddc:	f004 ffd1 	bl	8008d82 <osMessageGet>
	if (evtrx.status == osEventMessage) {
 8003de0:	9b03      	ldr	r3, [sp, #12]
 8003de2:	2b10      	cmp	r3, #16
 8003de4:	d001      	beq.n	8003dea <rxBluetooth+0x1a>
}
 8003de6:	b006      	add	sp, #24
 8003de8:	bd70      	pop	{r4, r5, r6, pc}
		switch (bluetooth._RxDataArr[1]) {
 8003dea:	4bc1      	ldr	r3, [pc, #772]	; (80040f0 <rxBluetooth+0x320>)
 8003dec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003df0:	3b03      	subs	r3, #3
 8003df2:	2b32      	cmp	r3, #50	; 0x32
 8003df4:	d8f7      	bhi.n	8003de6 <rxBluetooth+0x16>
 8003df6:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <rxBluetooth+0x2c>)
 8003df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfc:	08003f17 	.word	0x08003f17
 8003e00:	08003de7 	.word	0x08003de7
 8003e04:	08003de7 	.word	0x08003de7
 8003e08:	08003de7 	.word	0x08003de7
 8003e0c:	08003de7 	.word	0x08003de7
 8003e10:	08003de7 	.word	0x08003de7
 8003e14:	08003f65 	.word	0x08003f65
 8003e18:	08003de7 	.word	0x08003de7
 8003e1c:	08003de7 	.word	0x08003de7
 8003e20:	08003de7 	.word	0x08003de7
 8003e24:	08003de7 	.word	0x08003de7
 8003e28:	08003de7 	.word	0x08003de7
 8003e2c:	08003de7 	.word	0x08003de7
 8003e30:	08003f7f 	.word	0x08003f7f
 8003e34:	08003de7 	.word	0x08003de7
 8003e38:	08003de7 	.word	0x08003de7
 8003e3c:	08003de7 	.word	0x08003de7
 8003e40:	08003de7 	.word	0x08003de7
 8003e44:	08003ec9 	.word	0x08003ec9
 8003e48:	08003de7 	.word	0x08003de7
 8003e4c:	08003f09 	.word	0x08003f09
 8003e50:	08003de7 	.word	0x08003de7
 8003e54:	08003de7 	.word	0x08003de7
 8003e58:	08003de7 	.word	0x08003de7
 8003e5c:	08003de7 	.word	0x08003de7
 8003e60:	08003de7 	.word	0x08003de7
 8003e64:	08003de7 	.word	0x08003de7
 8003e68:	08003de7 	.word	0x08003de7
 8003e6c:	08003de7 	.word	0x08003de7
 8003e70:	08003de7 	.word	0x08003de7
 8003e74:	08003f99 	.word	0x08003f99
 8003e78:	08003fc3 	.word	0x08003fc3
 8003e7c:	08003fed 	.word	0x08003fed
 8003e80:	0800404b 	.word	0x0800404b
 8003e84:	08004129 	.word	0x08004129
 8003e88:	08003de7 	.word	0x08003de7
 8003e8c:	080041b5 	.word	0x080041b5
 8003e90:	080041e3 	.word	0x080041e3
 8003e94:	08004243 	.word	0x08004243
 8003e98:	08003de7 	.word	0x08003de7
 8003e9c:	08003de7 	.word	0x08003de7
 8003ea0:	08003de7 	.word	0x08003de7
 8003ea4:	08003de7 	.word	0x08003de7
 8003ea8:	08003de7 	.word	0x08003de7
 8003eac:	08003de7 	.word	0x08003de7
 8003eb0:	08004211 	.word	0x08004211
 8003eb4:	08003de7 	.word	0x08003de7
 8003eb8:	08003de7 	.word	0x08003de7
 8003ebc:	0800425d 	.word	0x0800425d
 8003ec0:	080042cd 	.word	0x080042cd
 8003ec4:	0800433d 	.word	0x0800433d
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA, 0);
 8003ec8:	4c8a      	ldr	r4, [pc, #552]	; (80040f4 <rxBluetooth+0x324>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2116      	movs	r1, #22
 8003ece:	6820      	ldr	r0, [r4, #0]
 8003ed0:	f004 ff24 	bl	8008d1c <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA2, 0);
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2117      	movs	r1, #23
 8003ed8:	6820      	ldr	r0, [r4, #0]
 8003eda:	f004 ff1f 	bl	8008d1c <osMessagePut>
			if(sincAutomatico()){
 8003ede:	f7ff ff61 	bl	8003da4 <sincAutomatico>
 8003ee2:	2800      	cmp	r0, #0
 8003ee4:	f43f af7f 	beq.w	8003de6 <rxBluetooth+0x16>
				osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA,  0);
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2118      	movs	r1, #24
 8003eec:	6820      	ldr	r0, [r4, #0]
 8003eee:	f004 ff15 	bl	8008d1c <osMessagePut>
				osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA2, 0);
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2119      	movs	r1, #25
 8003ef6:	6820      	ldr	r0, [r4, #0]
 8003ef8:	f004 ff10 	bl	8008d1c <osMessagePut>
				osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA3, 0);
 8003efc:	2200      	movs	r2, #0
 8003efe:	2120      	movs	r1, #32
 8003f00:	6820      	ldr	r0, [r4, #0]
 8003f02:	f004 ff0b 	bl	8008d1c <osMessagePut>
 8003f06:	e76e      	b.n	8003de6 <rxBluetooth+0x16>
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2118      	movs	r1, #24
 8003f0c:	4b79      	ldr	r3, [pc, #484]	; (80040f4 <rxBluetooth+0x324>)
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	f004 ff04 	bl	8008d1c <osMessagePut>
			break;
 8003f14:	e767      	b.n	8003de6 <rxBluetooth+0x16>
			datetoUpdate.WeekDay 	= bluetooth._RxDataArr[2]; //Dia da semana p/atualizar
 8003f16:	4c76      	ldr	r4, [pc, #472]	; (80040f0 <rxBluetooth+0x320>)
 8003f18:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8003f1c:	f88d 3008 	strb.w	r3, [sp, #8]
			datetoUpdate.Date 		= bluetooth._RxDataArr[3]; //Dia do mes p/atualizar
 8003f20:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8003f24:	f88d 300a 	strb.w	r3, [sp, #10]
			datetoUpdate.Month 		= bluetooth._RxDataArr[4]; //mes p/atualizar
 8003f28:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8003f2c:	f88d 3009 	strb.w	r3, [sp, #9]
			datetoUpdate.Year 		= bluetooth._RxDataArr[5]; //ano p/atualizar
 8003f30:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8003f34:	f88d 300b 	strb.w	r3, [sp, #11]
			timeToUpdate.Hours 		= bluetooth._RxDataArr[6]; //hora p/atualizar
 8003f38:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8003f3c:	f88d 3004 	strb.w	r3, [sp, #4]
			timeToUpdate.Minutes 	= bluetooth._RxDataArr[7]; //minuto p/atualizar
 8003f40:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8003f44:	f88d 3005 	strb.w	r3, [sp, #5]
			timeToUpdate.Seconds 	= bluetooth._RxDataArr[8]; //segundos p/atualizar
 8003f48:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003f4c:	f88d 3006 	strb.w	r3, [sp, #6]
			atualizaDataEeprom(datetoUpdate, timeToUpdate);
 8003f50:	9901      	ldr	r1, [sp, #4]
 8003f52:	9802      	ldr	r0, [sp, #8]
 8003f54:	f000 fe62 	bl	8004c1c <atualizaDataEeprom>
			bluetooth.aknowladge(&bluetooth,RX_ATUALIZA_HORA);
 8003f58:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8003f5c:	2103      	movs	r1, #3
 8003f5e:	4620      	mov	r0, r4
 8003f60:	4798      	blx	r3
			break;
 8003f62:	e740      	b.n	8003de6 <rxBluetooth+0x16>
			osMessagePut(FilaEepromHandle, CEepromHardReset, 0);
 8003f64:	2200      	movs	r2, #0
 8003f66:	2102      	movs	r1, #2
 8003f68:	4b63      	ldr	r3, [pc, #396]	; (80040f8 <rxBluetooth+0x328>)
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	f004 fed6 	bl	8008d1c <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_RESETANDO, 0);
 8003f70:	2200      	movs	r2, #0
 8003f72:	2129      	movs	r1, #41	; 0x29
 8003f74:	4b5f      	ldr	r3, [pc, #380]	; (80040f4 <rxBluetooth+0x324>)
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	f004 fed0 	bl	8008d1c <osMessagePut>
			break;
 8003f7c:	e733      	b.n	8003de6 <rxBluetooth+0x16>
			osMessagePut(FilaEepromHandle, CEepromSoftReset, 0);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2103      	movs	r1, #3
 8003f82:	4b5d      	ldr	r3, [pc, #372]	; (80040f8 <rxBluetooth+0x328>)
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	f004 fec9 	bl	8008d1c <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_RESETANDO, 0);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2129      	movs	r1, #41	; 0x29
 8003f8e:	4b59      	ldr	r3, [pc, #356]	; (80040f4 <rxBluetooth+0x324>)
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	f004 fec3 	bl	8008d1c <osMessagePut>
			break;
 8003f96:	e726      	b.n	8003de6 <rxBluetooth+0x16>
			MACRO_ANULA_INATIVIDADE
 8003f98:	4b58      	ldr	r3, [pc, #352]	; (80040fc <rxBluetooth+0x32c>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	801a      	strh	r2, [r3, #0]
			vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr,2);
 8003f9e:	4c58      	ldr	r4, [pc, #352]	; (8004100 <rxBluetooth+0x330>)
 8003fa0:	4d58      	ldr	r5, [pc, #352]	; (8004104 <rxBluetooth+0x334>)
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f7fd fd44 	bl	8001a34 <vetor2b_TO_Double>
			verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8003fac:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8003fb0:	f7ff fee2 	bl	8003d78 <verificaLimiteSetpoint>
			bluetooth.aknowladge(&bluetooth,RX_SP_TEMP_TETO);
 8003fb4:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
 8003fb8:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8003fbc:	2121      	movs	r1, #33	; 0x21
 8003fbe:	4798      	blx	r3
			break;
 8003fc0:	e711      	b.n	8003de6 <rxBluetooth+0x16>
			MACRO_ANULA_INATIVIDADE
 8003fc2:	4b4e      	ldr	r3, [pc, #312]	; (80040fc <rxBluetooth+0x32c>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	801a      	strh	r2, [r3, #0]
			vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr,2);
 8003fc8:	4c4d      	ldr	r4, [pc, #308]	; (8004100 <rxBluetooth+0x330>)
 8003fca:	4d4f      	ldr	r5, [pc, #316]	; (8004108 <rxBluetooth+0x338>)
 8003fcc:	2202      	movs	r2, #2
 8003fce:	4621      	mov	r1, r4
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	f7fd fd2f 	bl	8001a34 <vetor2b_TO_Double>
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8003fd6:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8003fda:	f7ff fecd 	bl	8003d78 <verificaLimiteSetpoint>
			bluetooth.aknowladge(&bluetooth,RX_SP_TEMP_LASTRO);
 8003fde:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
 8003fe2:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8003fe6:	2122      	movs	r1, #34	; 0x22
 8003fe8:	4798      	blx	r3
			break;
 8003fea:	e6fc      	b.n	8003de6 <rxBluetooth+0x16>
			MACRO_ANULA_INATIVIDADE
 8003fec:	4b43      	ldr	r3, [pc, #268]	; (80040fc <rxBluetooth+0x32c>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	801a      	strh	r2, [r3, #0]
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003ff2:	4a3f      	ldr	r2, [pc, #252]	; (80040f0 <rxBluetooth+0x320>)
 8003ff4:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
 8003ff8:	4b44      	ldr	r3, [pc, #272]	; (800410c <rxBluetooth+0x33c>)
 8003ffa:	f883 113a 	strb.w	r1, [r3, #314]	; 0x13a
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8003ffe:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8004002:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8004006:	f883 113c 	strb.w	r1, [r3, #316]	; 0x13c
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 800400a:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
			if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 800400e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004012:	2b01      	cmp	r3, #1
 8004014:	d004      	beq.n	8004020 <rxBluetooth+0x250>
 8004016:	4b3d      	ldr	r3, [pc, #244]	; (800410c <rxBluetooth+0x33c>)
 8004018:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 800401c:	2b01      	cmp	r3, #1
 800401e:	d10a      	bne.n	8004036 <rxBluetooth+0x266>
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8004020:	2102      	movs	r1, #2
 8004022:	4b3b      	ldr	r3, [pc, #236]	; (8004110 <rxBluetooth+0x340>)
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	f004 fde2 	bl	8008bee <osSignalSet>
			bluetooth.aknowladge(&bluetooth,RX_SP_TEMPO);
 800402a:	4831      	ldr	r0, [pc, #196]	; (80040f0 <rxBluetooth+0x320>)
 800402c:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8004030:	2123      	movs	r1, #35	; 0x23
 8004032:	4798      	blx	r3
		break;
 8004034:	e6d7      	b.n	8003de6 <rxBluetooth+0x16>
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8004036:	4b35      	ldr	r3, [pc, #212]	; (800410c <rxBluetooth+0x33c>)
 8004038:	2201      	movs	r2, #1
 800403a:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 800403e:	2104      	movs	r1, #4
 8004040:	4b33      	ldr	r3, [pc, #204]	; (8004110 <rxBluetooth+0x340>)
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	f004 fdd3 	bl	8008bee <osSignalSet>
 8004048:	e7ef      	b.n	800402a <rxBluetooth+0x25a>
			MACRO_ANULA_INATIVIDADE
 800404a:	4b2c      	ldr	r3, [pc, #176]	; (80040fc <rxBluetooth+0x32c>)
 800404c:	2200      	movs	r2, #0
 800404e:	801a      	strh	r2, [r3, #0]
			switch (PrimitiveStates.stateTimer) {
 8004050:	4b2e      	ldr	r3, [pc, #184]	; (800410c <rxBluetooth+0x33c>)
 8004052:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8004056:	2b01      	cmp	r3, #1
 8004058:	d05c      	beq.n	8004114 <rxBluetooth+0x344>
 800405a:	2b02      	cmp	r3, #2
 800405c:	d02c      	beq.n	80040b8 <rxBluetooth+0x2e8>
 800405e:	b12b      	cbz	r3, 800406c <rxBluetooth+0x29c>
			bluetooth.aknowladge(&bluetooth,RX_TOGGLE_TEMPO);
 8004060:	4823      	ldr	r0, [pc, #140]	; (80040f0 <rxBluetooth+0x320>)
 8004062:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8004066:	2124      	movs	r1, #36	; 0x24
 8004068:	4798      	blx	r3
		break;
 800406a:	e6bc      	b.n	8003de6 <rxBluetooth+0x16>
				PrimitiveStates.RTTimerMinutos 	= PrimitiveStates.SPTimerMinutos;
 800406c:	4b27      	ldr	r3, [pc, #156]	; (800410c <rxBluetooth+0x33c>)
 800406e:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8004072:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
				PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8004076:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
 800407a:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
				if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 800407e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004082:	2b01      	cmp	r3, #1
 8004084:	d004      	beq.n	8004090 <rxBluetooth+0x2c0>
 8004086:	4b21      	ldr	r3, [pc, #132]	; (800410c <rxBluetooth+0x33c>)
 8004088:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 800408c:	2b01      	cmp	r3, #1
 800408e:	d109      	bne.n	80040a4 <rxBluetooth+0x2d4>
					PrimitiveStates.stateTimer = TIMER_idle;
 8004090:	4b1e      	ldr	r3, [pc, #120]	; (800410c <rxBluetooth+0x33c>)
 8004092:	2200      	movs	r2, #0
 8004094:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
					osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8004098:	2102      	movs	r1, #2
 800409a:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <rxBluetooth+0x340>)
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	f004 fda6 	bl	8008bee <osSignalSet>
 80040a2:	e7dd      	b.n	8004060 <rxBluetooth+0x290>
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <rxBluetooth+0x33c>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80040ac:	2104      	movs	r1, #4
 80040ae:	4b18      	ldr	r3, [pc, #96]	; (8004110 <rxBluetooth+0x340>)
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	f004 fd9c 	bl	8008bee <osSignalSet>
 80040b6:	e7d3      	b.n	8004060 <rxBluetooth+0x290>
				if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 80040b8:	4b14      	ldr	r3, [pc, #80]	; (800410c <rxBluetooth+0x33c>)
 80040ba:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d004      	beq.n	80040cc <rxBluetooth+0x2fc>
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <rxBluetooth+0x33c>)
 80040c4:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d104      	bne.n	80040d6 <rxBluetooth+0x306>
					PrimitiveStates.stateTimer = TIMER_idle;
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <rxBluetooth+0x33c>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 80040d4:	e7c4      	b.n	8004060 <rxBluetooth+0x290>
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <rxBluetooth+0x33c>)
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80040de:	2104      	movs	r1, #4
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <rxBluetooth+0x340>)
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	f004 fd83 	bl	8008bee <osSignalSet>
 80040e8:	e7ba      	b.n	8004060 <rxBluetooth+0x290>
 80040ea:	bf00      	nop
 80040ec:	2000083c 	.word	0x2000083c
 80040f0:	20000f2c 	.word	0x20000f2c
 80040f4:	20000890 	.word	0x20000890
 80040f8:	200007e8 	.word	0x200007e8
 80040fc:	2000133e 	.word	0x2000133e
 8004100:	20000f58 	.word	0x20000f58
 8004104:	20000970 	.word	0x20000970
 8004108:	200009b8 	.word	0x200009b8
 800410c:	20000898 	.word	0x20000898
 8004110:	20000c7c 	.word	0x20000c7c
				PrimitiveStates.stateTimer 	= TIMER_pausado;
 8004114:	4b9b      	ldr	r3, [pc, #620]	; (8004384 <rxBluetooth+0x5b4>)
 8004116:	2202      	movs	r2, #2
 8004118:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 800411c:	2104      	movs	r1, #4
 800411e:	4b9a      	ldr	r3, [pc, #616]	; (8004388 <rxBluetooth+0x5b8>)
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	f004 fd64 	bl	8008bee <osSignalSet>
				break;
 8004126:	e79b      	b.n	8004060 <rxBluetooth+0x290>
			MACRO_ANULA_INATIVIDADE
 8004128:	4b98      	ldr	r3, [pc, #608]	; (800438c <rxBluetooth+0x5bc>)
 800412a:	2200      	movs	r2, #0
 800412c:	801a      	strh	r2, [r3, #0]
			vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr	,2);
 800412e:	4d98      	ldr	r5, [pc, #608]	; (8004390 <rxBluetooth+0x5c0>)
 8004130:	4c98      	ldr	r4, [pc, #608]	; (8004394 <rxBluetooth+0x5c4>)
 8004132:	2202      	movs	r2, #2
 8004134:	4629      	mov	r1, r5
 8004136:	4620      	mov	r0, r4
 8004138:	f7fd fc7c 	bl	8001a34 <vetor2b_TO_Double>
			vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr	,4);
 800413c:	2204      	movs	r2, #4
 800413e:	4629      	mov	r1, r5
 8004140:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8004144:	f7fd fc76 	bl	8001a34 <vetor2b_TO_Double>
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8004148:	f104 0018 	add.w	r0, r4, #24
 800414c:	f7ff fe14 	bl	8003d78 <verificaLimiteSetpoint>
			verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8004150:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
 8004154:	f7ff fe10 	bl	8003d78 <verificaLimiteSetpoint>
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8004158:	79aa      	ldrb	r2, [r5, #6]
 800415a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 800415e:	79eb      	ldrb	r3, [r5, #7]
 8004160:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8004164:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8004168:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 800416c:	3cd8      	subs	r4, #216	; 0xd8
			contadorOutput(&PrimitiveStates.outPuts);
 800416e:	4620      	mov	r0, r4
 8004170:	f7fe f887 	bl	8002282 <contadorOutput>
			if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8004174:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d003      	beq.n	8004184 <rxBluetooth+0x3b4>
 800417c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8004180:	2b01      	cmp	r3, #1
 8004182:	d10e      	bne.n	80041a2 <rxBluetooth+0x3d2>
				PrimitiveStates.stateTimer = TIMER_idle;
 8004184:	4b7f      	ldr	r3, [pc, #508]	; (8004384 <rxBluetooth+0x5b4>)
 8004186:	2200      	movs	r2, #0
 8004188:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 800418c:	2102      	movs	r1, #2
 800418e:	4b7e      	ldr	r3, [pc, #504]	; (8004388 <rxBluetooth+0x5b8>)
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	f004 fd2c 	bl	8008bee <osSignalSet>
			bluetooth.aknowladge(&bluetooth,RX_RECEITA);
 8004196:	4880      	ldr	r0, [pc, #512]	; (8004398 <rxBluetooth+0x5c8>)
 8004198:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 800419c:	2125      	movs	r1, #37	; 0x25
 800419e:	4798      	blx	r3
		break;
 80041a0:	e621      	b.n	8003de6 <rxBluetooth+0x16>
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 80041a2:	2201      	movs	r2, #1
 80041a4:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80041a8:	2104      	movs	r1, #4
 80041aa:	4b77      	ldr	r3, [pc, #476]	; (8004388 <rxBluetooth+0x5b8>)
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	f004 fd1e 	bl	8008bee <osSignalSet>
 80041b2:	e7f0      	b.n	8004196 <rxBluetooth+0x3c6>
			MACRO_ANULA_INATIVIDADE
 80041b4:	2400      	movs	r4, #0
 80041b6:	4b75      	ldr	r3, [pc, #468]	; (800438c <rxBluetooth+0x5bc>)
 80041b8:	801c      	strh	r4, [r3, #0]
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80041ba:	2104      	movs	r1, #4
 80041bc:	4b72      	ldr	r3, [pc, #456]	; (8004388 <rxBluetooth+0x5b8>)
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	f004 fd15 	bl	8008bee <osSignalSet>
			onDigital(&PrimitiveStates.Lampada);
 80041c4:	4875      	ldr	r0, [pc, #468]	; (800439c <rxBluetooth+0x5cc>)
 80041c6:	f7fe f848 	bl	800225a <onDigital>
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA2, 0);
 80041ca:	4622      	mov	r2, r4
 80041cc:	2117      	movs	r1, #23
 80041ce:	4b74      	ldr	r3, [pc, #464]	; (80043a0 <rxBluetooth+0x5d0>)
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	f004 fda3 	bl	8008d1c <osMessagePut>
			bluetooth.aknowladge(&bluetooth,RX_LIGA_LAMPADA);
 80041d6:	4870      	ldr	r0, [pc, #448]	; (8004398 <rxBluetooth+0x5c8>)
 80041d8:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 80041dc:	2127      	movs	r1, #39	; 0x27
 80041de:	4798      	blx	r3
			break;
 80041e0:	e601      	b.n	8003de6 <rxBluetooth+0x16>
			MACRO_ANULA_INATIVIDADE
 80041e2:	2400      	movs	r4, #0
 80041e4:	4b69      	ldr	r3, [pc, #420]	; (800438c <rxBluetooth+0x5bc>)
 80041e6:	801c      	strh	r4, [r3, #0]
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80041e8:	2104      	movs	r1, #4
 80041ea:	4b67      	ldr	r3, [pc, #412]	; (8004388 <rxBluetooth+0x5b8>)
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	f004 fcfe 	bl	8008bee <osSignalSet>
			offDigital(&PrimitiveStates.Lampada);
 80041f2:	486a      	ldr	r0, [pc, #424]	; (800439c <rxBluetooth+0x5cc>)
 80041f4:	f7fe f83b 	bl	800226e <offDigital>
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA2, 0);
 80041f8:	4622      	mov	r2, r4
 80041fa:	2117      	movs	r1, #23
 80041fc:	4b68      	ldr	r3, [pc, #416]	; (80043a0 <rxBluetooth+0x5d0>)
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	f004 fd8c 	bl	8008d1c <osMessagePut>
			bluetooth.aknowladge(&bluetooth,RX_DESLIGA_LAMPADA);
 8004204:	4864      	ldr	r0, [pc, #400]	; (8004398 <rxBluetooth+0x5c8>)
 8004206:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 800420a:	2128      	movs	r1, #40	; 0x28
 800420c:	4798      	blx	r3
			break;
 800420e:	e5ea      	b.n	8003de6 <rxBluetooth+0x16>
			PrimitiveStates.Lampada.limitOn = bluetooth._RxDataArr[3];
 8004210:	4b61      	ldr	r3, [pc, #388]	; (8004398 <rxBluetooth+0x5c8>)
 8004212:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004216:	4b5b      	ldr	r3, [pc, #364]	; (8004384 <rxBluetooth+0x5b4>)
 8004218:	875a      	strh	r2, [r3, #58]	; 0x3a
			osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 800421a:	2200      	movs	r2, #0
 800421c:	2106      	movs	r1, #6
 800421e:	4b61      	ldr	r3, [pc, #388]	; (80043a4 <rxBluetooth+0x5d4>)
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	f004 fd7b 	bl	8008d1c <osMessagePut>
			FlagSincronia.cont=0;
 8004226:	2200      	movs	r2, #0
 8004228:	4b5f      	ldr	r3, [pc, #380]	; (80043a8 <rxBluetooth+0x5d8>)
 800422a:	705a      	strb	r2, [r3, #1]
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 800422c:	2118      	movs	r1, #24
 800422e:	4b5c      	ldr	r3, [pc, #368]	; (80043a0 <rxBluetooth+0x5d0>)
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	f004 fd73 	bl	8008d1c <osMessagePut>
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004236:	2104      	movs	r1, #4
 8004238:	4b53      	ldr	r3, [pc, #332]	; (8004388 <rxBluetooth+0x5b8>)
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	f004 fcd7 	bl	8008bee <osSignalSet>
			break;
 8004240:	e5d1      	b.n	8003de6 <rxBluetooth+0x16>
			desligaForno();
 8004242:	f7fe f9c1 	bl	80025c8 <desligaForno>
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004246:	2104      	movs	r1, #4
 8004248:	4b4f      	ldr	r3, [pc, #316]	; (8004388 <rxBluetooth+0x5b8>)
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	f004 fccf 	bl	8008bee <osSignalSet>
			bluetooth.aknowladge(&bluetooth,RX_CANCELA_PROCESSO);
 8004250:	4851      	ldr	r0, [pc, #324]	; (8004398 <rxBluetooth+0x5c8>)
 8004252:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8004256:	2129      	movs	r1, #41	; 0x29
 8004258:	4798      	blx	r3
			break;
 800425a:	e5c4      	b.n	8003de6 <rxBluetooth+0x16>
			MACRO_ANULA_INATIVIDADE
 800425c:	2600      	movs	r6, #0
 800425e:	4b4b      	ldr	r3, [pc, #300]	; (800438c <rxBluetooth+0x5bc>)
 8004260:	801e      	strh	r6, [r3, #0]
			vetor4b_TO_Double(&PrimitiveStates.Teto.kp,bluetooth._RxDataArr,2);
 8004262:	4d4b      	ldr	r5, [pc, #300]	; (8004390 <rxBluetooth+0x5c0>)
 8004264:	4c51      	ldr	r4, [pc, #324]	; (80043ac <rxBluetooth+0x5dc>)
 8004266:	2202      	movs	r2, #2
 8004268:	4629      	mov	r1, r5
 800426a:	4620      	mov	r0, r4
 800426c:	f7fd fbb2 	bl	80019d4 <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Teto.ki,bluetooth._RxDataArr,6);
 8004270:	2206      	movs	r2, #6
 8004272:	4629      	mov	r1, r5
 8004274:	f104 0008 	add.w	r0, r4, #8
 8004278:	f7fd fbac 	bl	80019d4 <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Teto.kd,bluetooth._RxDataArr,10);
 800427c:	220a      	movs	r2, #10
 800427e:	4629      	mov	r1, r5
 8004280:	f104 0010 	add.w	r0, r4, #16
 8004284:	f7fd fba6 	bl	80019d4 <vetor4b_TO_Double>
			vetor2b_TO_uint16(&PrimitiveStates.Teto.histerese,bluetooth._RxDataArr,14);
 8004288:	220e      	movs	r2, #14
 800428a:	4629      	mov	r1, r5
 800428c:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8004290:	f7fd fbbe 	bl	8001a10 <vetor2b_TO_uint16>
			vetor2b_TO_uint16(&PrimitiveStates.Teto.limite ,bluetooth._RxDataArr,16);
 8004294:	2210      	movs	r2, #16
 8004296:	4629      	mov	r1, r5
 8004298:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800429c:	f7fd fbb8 	bl	8001a10 <vetor2b_TO_uint16>
			verificaLimiteSetpoint(&PrimitiveStates.Teto);
 80042a0:	f1a4 0008 	sub.w	r0, r4, #8
 80042a4:	f7ff fd68 	bl	8003d78 <verificaLimiteSetpoint>
			osMessagePut(FilaEepromHandle, CEepromTunning, 0);
 80042a8:	4632      	mov	r2, r6
 80042aa:	210a      	movs	r1, #10
 80042ac:	4b3d      	ldr	r3, [pc, #244]	; (80043a4 <rxBluetooth+0x5d4>)
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	f004 fd34 	bl	8008d1c <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA2, 0);
 80042b4:	4632      	mov	r2, r6
 80042b6:	2119      	movs	r1, #25
 80042b8:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <rxBluetooth+0x5d0>)
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	f004 fd2e 	bl	8008d1c <osMessagePut>
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80042c0:	2104      	movs	r1, #4
 80042c2:	4b31      	ldr	r3, [pc, #196]	; (8004388 <rxBluetooth+0x5b8>)
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	f004 fc92 	bl	8008bee <osSignalSet>
			break;
 80042ca:	e58c      	b.n	8003de6 <rxBluetooth+0x16>
			MACRO_ANULA_INATIVIDADE
 80042cc:	2600      	movs	r6, #0
 80042ce:	4b2f      	ldr	r3, [pc, #188]	; (800438c <rxBluetooth+0x5bc>)
 80042d0:	801e      	strh	r6, [r3, #0]
			vetor4b_TO_Double(&PrimitiveStates.Lastro.kp,bluetooth._RxDataArr,2);
 80042d2:	4d2f      	ldr	r5, [pc, #188]	; (8004390 <rxBluetooth+0x5c0>)
 80042d4:	4c36      	ldr	r4, [pc, #216]	; (80043b0 <rxBluetooth+0x5e0>)
 80042d6:	2202      	movs	r2, #2
 80042d8:	4629      	mov	r1, r5
 80042da:	4620      	mov	r0, r4
 80042dc:	f7fd fb7a 	bl	80019d4 <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Lastro.ki,bluetooth._RxDataArr,6);
 80042e0:	2206      	movs	r2, #6
 80042e2:	4629      	mov	r1, r5
 80042e4:	f104 0008 	add.w	r0, r4, #8
 80042e8:	f7fd fb74 	bl	80019d4 <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Lastro.kd,bluetooth._RxDataArr,10);
 80042ec:	220a      	movs	r2, #10
 80042ee:	4629      	mov	r1, r5
 80042f0:	f104 0010 	add.w	r0, r4, #16
 80042f4:	f7fd fb6e 	bl	80019d4 <vetor4b_TO_Double>
			vetor2b_TO_uint16(&PrimitiveStates.Lastro.histerese,bluetooth._RxDataArr,14);
 80042f8:	220e      	movs	r2, #14
 80042fa:	4629      	mov	r1, r5
 80042fc:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8004300:	f7fd fb86 	bl	8001a10 <vetor2b_TO_uint16>
			vetor2b_TO_uint16(&PrimitiveStates.Lastro.limite ,bluetooth._RxDataArr,16);
 8004304:	2210      	movs	r2, #16
 8004306:	4629      	mov	r1, r5
 8004308:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800430c:	f7fd fb80 	bl	8001a10 <vetor2b_TO_uint16>
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8004310:	f1a4 0008 	sub.w	r0, r4, #8
 8004314:	f7ff fd30 	bl	8003d78 <verificaLimiteSetpoint>
			osMessagePut(FilaEepromHandle, CEepromTunning, 0);
 8004318:	4632      	mov	r2, r6
 800431a:	210a      	movs	r1, #10
 800431c:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <rxBluetooth+0x5d4>)
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	f004 fcfc 	bl	8008d1c <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA3, 0);
 8004324:	4632      	mov	r2, r6
 8004326:	2120      	movs	r1, #32
 8004328:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <rxBluetooth+0x5d0>)
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	f004 fcf6 	bl	8008d1c <osMessagePut>
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004330:	2104      	movs	r1, #4
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <rxBluetooth+0x5b8>)
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	f004 fc5a 	bl	8008bee <osSignalSet>
			break;
 800433a:	e554      	b.n	8003de6 <rxBluetooth+0x16>
			MACRO_ANULA_INATIVIDADE
 800433c:	4b13      	ldr	r3, [pc, #76]	; (800438c <rxBluetooth+0x5bc>)
 800433e:	2200      	movs	r2, #0
 8004340:	801a      	strh	r2, [r3, #0]
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004342:	2104      	movs	r1, #4
 8004344:	4b10      	ldr	r3, [pc, #64]	; (8004388 <rxBluetooth+0x5b8>)
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	f004 fc51 	bl	8008bee <osSignalSet>
			PrimitiveStates.Buzzer = !PrimitiveStates.Buzzer;
 800434c:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <rxBluetooth+0x5b4>)
 800434e:	f892 3139 	ldrb.w	r3, [r2, #313]	; 0x139
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
			if(PrimitiveStates.Buzzer){
 800435c:	b95b      	cbnz	r3, 8004376 <rxBluetooth+0x5a6>
			osMessagePut(FilaEepromHandle, CEepromToogleBuzzer, 0);
 800435e:	2200      	movs	r2, #0
 8004360:	210b      	movs	r1, #11
 8004362:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <rxBluetooth+0x5d4>)
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	f004 fcd9 	bl	8008d1c <osMessagePut>
			bluetooth.aknowladge(&bluetooth,RX_TOGGLE_BUZZER);
 800436a:	480b      	ldr	r0, [pc, #44]	; (8004398 <rxBluetooth+0x5c8>)
 800436c:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8004370:	2135      	movs	r1, #53	; 0x35
 8004372:	4798      	blx	r3
}
 8004374:	e537      	b.n	8003de6 <rxBluetooth+0x16>
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004376:	2104      	movs	r1, #4
 8004378:	4b03      	ldr	r3, [pc, #12]	; (8004388 <rxBluetooth+0x5b8>)
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	f004 fc37 	bl	8008bee <osSignalSet>
 8004380:	e7ed      	b.n	800435e <rxBluetooth+0x58e>
 8004382:	bf00      	nop
 8004384:	20000898 	.word	0x20000898
 8004388:	20000c7c 	.word	0x20000c7c
 800438c:	2000133e 	.word	0x2000133e
 8004390:	20000f58 	.word	0x20000f58
 8004394:	20000970 	.word	0x20000970
 8004398:	20000f2c 	.word	0x20000f2c
 800439c:	200008c4 	.word	0x200008c4
 80043a0:	20000890 	.word	0x20000890
 80043a4:	200007e8 	.word	0x200007e8
 80043a8:	2000133c 	.word	0x2000133c
 80043ac:	20000948 	.word	0x20000948
 80043b0:	20000990 	.word	0x20000990

080043b4 <StartBluetooth>:
{
 80043b4:	b508      	push	{r3, lr}
	initBluetooth();
 80043b6:	f7ff fa9b 	bl	80038f0 <initBluetooth>
		txBleComando(&bluetooth);
 80043ba:	4806      	ldr	r0, [pc, #24]	; (80043d4 <StartBluetooth+0x20>)
 80043bc:	f7fd f86d 	bl	800149a <txBleComando>
		rxBluetooth();
 80043c0:	f7ff fd06 	bl	8003dd0 <rxBluetooth>
		txBluetooth();
 80043c4:	f7ff fb52 	bl	8003a6c <txBluetooth>
		osThreadYield();
 80043c8:	f004 fba7 	bl	8008b1a <osThreadYield>
		osDelay(40);
 80043cc:	2028      	movs	r0, #40	; 0x28
 80043ce:	f004 fbb0 	bl	8008b32 <osDelay>
	for(;;)
 80043d2:	e7f2      	b.n	80043ba <StartBluetooth+0x6>
 80043d4:	20000f2c 	.word	0x20000f2c

080043d8 <sequencia2Buzzer>:
		M_BUZZER_OFF
		offDigital(&PrimitiveStates.Lampada);
		osDelay(100);
	}
}
void sequencia2Buzzer(void){
 80043d8:	b538      	push	{r3, r4, r5, lr}
	M_BUZZER_ON
 80043da:	4d0a      	ldr	r5, [pc, #40]	; (8004404 <sequencia2Buzzer+0x2c>)
 80043dc:	210c      	movs	r1, #12
 80043de:	4628      	mov	r0, r5
 80043e0:	f003 fd4e 	bl	8007e80 <HAL_TIM_PWM_Start>
	onDigital(&PrimitiveStates.Lampada);
 80043e4:	4c08      	ldr	r4, [pc, #32]	; (8004408 <sequencia2Buzzer+0x30>)
 80043e6:	4620      	mov	r0, r4
 80043e8:	f7fd ff37 	bl	800225a <onDigital>
	osDelay(100);
 80043ec:	2064      	movs	r0, #100	; 0x64
 80043ee:	f004 fba0 	bl	8008b32 <osDelay>
	M_BUZZER_OFF
 80043f2:	210c      	movs	r1, #12
 80043f4:	4628      	mov	r0, r5
 80043f6:	f003 fdb1 	bl	8007f5c <HAL_TIM_PWM_Stop>
	offDigital(&PrimitiveStates.Lampada);
 80043fa:	4620      	mov	r0, r4
 80043fc:	f7fd ff37 	bl	800226e <offDigital>
}
 8004400:	bd38      	pop	{r3, r4, r5, pc}
 8004402:	bf00      	nop
 8004404:	20001174 	.word	0x20001174
 8004408:	200008c4 	.word	0x200008c4

0800440c <waitBuzzerSignal>:
void waitBuzzerSignal(void){
 800440c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800440e:	b085      	sub	sp, #20
	const int32_t signals = SINAL_TEMP_REACH | SINAL_COMFIRMA | SINAL_NEGADO | SINAL_PRONTO;
	osEvent evt;

	// Aguarde até que qualquer um dos sinais seja recebido
	evt = osSignalWait(signals, osWaitForever);
 8004410:	f04f 32ff 	mov.w	r2, #4294967295
 8004414:	210f      	movs	r1, #15
 8004416:	a801      	add	r0, sp, #4
 8004418:	f004 fc1b 	bl	8008c52 <osSignalWait>

	// Verifique os sinais
	if (evt.status == osEventSignal) {
 800441c:	9b01      	ldr	r3, [sp, #4]
 800441e:	2b08      	cmp	r3, #8
 8004420:	d001      	beq.n	8004426 <waitBuzzerSignal+0x1a>
				osDelay(100);
			}
			onDigital(&PrimitiveStates.Lampada);//DEIXA LAMPADA LIGADA
		}
	}
}
 8004422:	b005      	add	sp, #20
 8004424:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (evt.value.signals & SINAL_TEMP_REACH) {
 8004426:	9f02      	ldr	r7, [sp, #8]
 8004428:	f017 0f01 	tst.w	r7, #1
 800442c:	d139      	bne.n	80044a2 <waitBuzzerSignal+0x96>
		if (evt.value.signals & SINAL_COMFIRMA) {
 800442e:	f017 0f04 	tst.w	r7, #4
 8004432:	d013      	beq.n	800445c <waitBuzzerSignal+0x50>
			if(!PrimitiveStates.Buzzer){
 8004434:	4b3b      	ldr	r3, [pc, #236]	; (8004524 <waitBuzzerSignal+0x118>)
 8004436:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 800443a:	b3a3      	cbz	r3, 80044a6 <waitBuzzerSignal+0x9a>
			M_BUZZER_ON
 800443c:	4c3a      	ldr	r4, [pc, #232]	; (8004528 <waitBuzzerSignal+0x11c>)
 800443e:	210c      	movs	r1, #12
 8004440:	4620      	mov	r0, r4
 8004442:	f003 fd1d 	bl	8007e80 <HAL_TIM_PWM_Start>
			osDelay(70);
 8004446:	2046      	movs	r0, #70	; 0x46
 8004448:	f004 fb73 	bl	8008b32 <osDelay>
			M_BUZZER_OFF
 800444c:	210c      	movs	r1, #12
 800444e:	4620      	mov	r0, r4
 8004450:	f003 fd84 	bl	8007f5c <HAL_TIM_PWM_Stop>
			osDelay(500);
 8004454:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004458:	f004 fb6b 	bl	8008b32 <osDelay>
		if (evt.value.signals & SINAL_NEGADO) {
 800445c:	f017 0f02 	tst.w	r7, #2
 8004460:	d03d      	beq.n	80044de <waitBuzzerSignal+0xd2>
			if(!PrimitiveStates.Buzzer){
 8004462:	4b30      	ldr	r3, [pc, #192]	; (8004524 <waitBuzzerSignal+0x118>)
 8004464:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8004468:	b313      	cbz	r3, 80044b0 <waitBuzzerSignal+0xa4>
			for (int i = 0; i < 2; ++i) {
 800446a:	2400      	movs	r4, #0
 800446c:	e035      	b.n	80044da <waitBuzzerSignal+0xce>
				M_BUZZER_ON
 800446e:	4e2e      	ldr	r6, [pc, #184]	; (8004528 <waitBuzzerSignal+0x11c>)
 8004470:	210c      	movs	r1, #12
 8004472:	4630      	mov	r0, r6
 8004474:	f003 fd04 	bl	8007e80 <HAL_TIM_PWM_Start>
				onDigital(&PrimitiveStates.Lampada);
 8004478:	4d2c      	ldr	r5, [pc, #176]	; (800452c <waitBuzzerSignal+0x120>)
 800447a:	4628      	mov	r0, r5
 800447c:	f7fd feed 	bl	800225a <onDigital>
				osDelay(50);
 8004480:	2032      	movs	r0, #50	; 0x32
 8004482:	f004 fb56 	bl	8008b32 <osDelay>
				M_BUZZER_OFF
 8004486:	210c      	movs	r1, #12
 8004488:	4630      	mov	r0, r6
 800448a:	f003 fd67 	bl	8007f5c <HAL_TIM_PWM_Stop>
				offDigital(&PrimitiveStates.Lampada);
 800448e:	4628      	mov	r0, r5
 8004490:	f7fd feed 	bl	800226e <offDigital>
				osDelay(30);
 8004494:	201e      	movs	r0, #30
 8004496:	f004 fb4c 	bl	8008b32 <osDelay>
			for (int i = 0; i < 5; ++i) {
 800449a:	3401      	adds	r4, #1
 800449c:	2c04      	cmp	r4, #4
 800449e:	dde6      	ble.n	800446e <waitBuzzerSignal+0x62>
 80044a0:	e7c5      	b.n	800442e <waitBuzzerSignal+0x22>
 80044a2:	2400      	movs	r4, #0
 80044a4:	e7fa      	b.n	800449c <waitBuzzerSignal+0x90>
				M_BUZZER_OFF
 80044a6:	210c      	movs	r1, #12
 80044a8:	481f      	ldr	r0, [pc, #124]	; (8004528 <waitBuzzerSignal+0x11c>)
 80044aa:	f003 fd57 	bl	8007f5c <HAL_TIM_PWM_Stop>
				return;
 80044ae:	e7b8      	b.n	8004422 <waitBuzzerSignal+0x16>
				M_BUZZER_OFF
 80044b0:	210c      	movs	r1, #12
 80044b2:	481d      	ldr	r0, [pc, #116]	; (8004528 <waitBuzzerSignal+0x11c>)
 80044b4:	f003 fd52 	bl	8007f5c <HAL_TIM_PWM_Stop>
				return;
 80044b8:	e7b3      	b.n	8004422 <waitBuzzerSignal+0x16>
				M_BUZZER_ON
 80044ba:	4d1b      	ldr	r5, [pc, #108]	; (8004528 <waitBuzzerSignal+0x11c>)
 80044bc:	210c      	movs	r1, #12
 80044be:	4628      	mov	r0, r5
 80044c0:	f003 fcde 	bl	8007e80 <HAL_TIM_PWM_Start>
				osDelay(70);
 80044c4:	2046      	movs	r0, #70	; 0x46
 80044c6:	f004 fb34 	bl	8008b32 <osDelay>
				M_BUZZER_OFF
 80044ca:	210c      	movs	r1, #12
 80044cc:	4628      	mov	r0, r5
 80044ce:	f003 fd45 	bl	8007f5c <HAL_TIM_PWM_Stop>
				osDelay(50);
 80044d2:	2032      	movs	r0, #50	; 0x32
 80044d4:	f004 fb2d 	bl	8008b32 <osDelay>
			for (int i = 0; i < 2; ++i) {
 80044d8:	3401      	adds	r4, #1
 80044da:	2c01      	cmp	r4, #1
 80044dc:	dded      	ble.n	80044ba <waitBuzzerSignal+0xae>
		if (evt.value.signals & SINAL_PRONTO) {
 80044de:	f017 0f08 	tst.w	r7, #8
 80044e2:	d09e      	beq.n	8004422 <waitBuzzerSignal+0x16>
			for (int i = 0; i < 10; ++i) {
 80044e4:	2400      	movs	r4, #0
 80044e6:	e016      	b.n	8004516 <waitBuzzerSignal+0x10a>
				M_BUZZER_ON
 80044e8:	4e0f      	ldr	r6, [pc, #60]	; (8004528 <waitBuzzerSignal+0x11c>)
 80044ea:	210c      	movs	r1, #12
 80044ec:	4630      	mov	r0, r6
 80044ee:	f003 fcc7 	bl	8007e80 <HAL_TIM_PWM_Start>
				onDigital(&PrimitiveStates.Lampada);
 80044f2:	4d0e      	ldr	r5, [pc, #56]	; (800452c <waitBuzzerSignal+0x120>)
 80044f4:	4628      	mov	r0, r5
 80044f6:	f7fd feb0 	bl	800225a <onDigital>
				osDelay(250);
 80044fa:	20fa      	movs	r0, #250	; 0xfa
 80044fc:	f004 fb19 	bl	8008b32 <osDelay>
				M_BUZZER_OFF
 8004500:	210c      	movs	r1, #12
 8004502:	4630      	mov	r0, r6
 8004504:	f003 fd2a 	bl	8007f5c <HAL_TIM_PWM_Stop>
				offDigital(&PrimitiveStates.Lampada);
 8004508:	4628      	mov	r0, r5
 800450a:	f7fd feb0 	bl	800226e <offDigital>
				osDelay(100);
 800450e:	2064      	movs	r0, #100	; 0x64
 8004510:	f004 fb0f 	bl	8008b32 <osDelay>
			for (int i = 0; i < 10; ++i) {
 8004514:	3401      	adds	r4, #1
 8004516:	2c09      	cmp	r4, #9
 8004518:	dde6      	ble.n	80044e8 <waitBuzzerSignal+0xdc>
			onDigital(&PrimitiveStates.Lampada);//DEIXA LAMPADA LIGADA
 800451a:	4804      	ldr	r0, [pc, #16]	; (800452c <waitBuzzerSignal+0x120>)
 800451c:	f7fd fe9d 	bl	800225a <onDigital>
 8004520:	e77f      	b.n	8004422 <waitBuzzerSignal+0x16>
 8004522:	bf00      	nop
 8004524:	20000898 	.word	0x20000898
 8004528:	20001174 	.word	0x20001174
 800452c:	200008c4 	.word	0x200008c4

08004530 <StartBuzzer>:
{
 8004530:	b508      	push	{r3, lr}
	sequencia2Buzzer();
 8004532:	f7ff ff51 	bl	80043d8 <sequencia2Buzzer>
		waitBuzzerSignal();
 8004536:	f7ff ff69 	bl	800440c <waitBuzzerSignal>
		osThreadYield();
 800453a:	f004 faee 	bl	8008b1a <osThreadYield>
		osDelay(100);
 800453e:	2064      	movs	r0, #100	; 0x64
 8004540:	f004 faf7 	bl	8008b32 <osDelay>
	for(;;)
 8004544:	e7f7      	b.n	8004536 <StartBuzzer+0x6>
	...

08004548 <initEeprom>:
		osThreadYield();
		osDelay(500);
	}
}

void initEeprom(void){
 8004548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800454c:	b08b      	sub	sp, #44	; 0x2c

	//inicializacao ad eeprom
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 800454e:	4db2      	ldr	r5, [pc, #712]	; (8004818 <initEeprom+0x2d0>)
 8004550:	4ab2      	ldr	r2, [pc, #712]	; (800481c <initEeprom+0x2d4>)
 8004552:	49b3      	ldr	r1, [pc, #716]	; (8004820 <initEeprom+0x2d8>)
 8004554:	4628      	mov	r0, r5
 8004556:	f7fd fb0f 	bl	8001b78 <EepromInit>

	//criacao dos objetos variaveis
	EepromAddVar(&eeprom,0,&tempoDelayLuz, 		"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA16BITS,	0,		45,		60000	,&PrimitiveStates.Lampada.limitOn);
 800455a:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8004824 <initEeprom+0x2dc>
 800455e:	f8cd a014 	str.w	sl, [sp, #20]
 8004562:	f64e 2960 	movw	r9, #60000	; 0xea60
 8004566:	f8cd 9010 	str.w	r9, [sp, #16]
 800456a:	232d      	movs	r3, #45	; 0x2d
 800456c:	9303      	str	r3, [sp, #12]
 800456e:	2400      	movs	r4, #0
 8004570:	9402      	str	r4, [sp, #8]
 8004572:	f04f 0802 	mov.w	r8, #2
 8004576:	f8cd 8004 	str.w	r8, [sp, #4]
 800457a:	2601      	movs	r6, #1
 800457c:	9600      	str	r6, [sp, #0]
 800457e:	4baa      	ldr	r3, [pc, #680]	; (8004828 <initEeprom+0x2e0>)
 8004580:	4aaa      	ldr	r2, [pc, #680]	; (800482c <initEeprom+0x2e4>)
 8004582:	4621      	mov	r1, r4
 8004584:	4628      	mov	r0, r5
 8004586:	f7fd faab 	bl	8001ae0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&horimetroHoras, 	"addrHORIMETRO", 		addrHORIMETRO,		DATA16BITS,	0,		0,		60000	,&Calendario.Horimetro_horas);
 800458a:	4fa9      	ldr	r7, [pc, #676]	; (8004830 <initEeprom+0x2e8>)
 800458c:	9705      	str	r7, [sp, #20]
 800458e:	f8cd 9010 	str.w	r9, [sp, #16]
 8004592:	9403      	str	r4, [sp, #12]
 8004594:	9402      	str	r4, [sp, #8]
 8004596:	f8cd 8004 	str.w	r8, [sp, #4]
 800459a:	f04f 0b03 	mov.w	fp, #3
 800459e:	f8cd b000 	str.w	fp, [sp]
 80045a2:	4ba4      	ldr	r3, [pc, #656]	; (8004834 <initEeprom+0x2ec>)
 80045a4:	4aa4      	ldr	r2, [pc, #656]	; (8004838 <initEeprom+0x2f0>)
 80045a6:	4631      	mov	r1, r6
 80045a8:	4628      	mov	r0, r5
 80045aa:	f7fd fa99 	bl	8001ae0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&horimetroMinutos, 	"addrMINUTIMETRO", 		addrMINUTIMETRO,	DATA8BITS,	0,		0,		254		,&Calendario.Horimetro_parcial_min);
 80045ae:	eb07 0308 	add.w	r3, r7, r8
 80045b2:	9305      	str	r3, [sp, #20]
 80045b4:	23fe      	movs	r3, #254	; 0xfe
 80045b6:	9304      	str	r3, [sp, #16]
 80045b8:	9403      	str	r4, [sp, #12]
 80045ba:	9402      	str	r4, [sp, #8]
 80045bc:	9601      	str	r6, [sp, #4]
 80045be:	2305      	movs	r3, #5
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	4b9e      	ldr	r3, [pc, #632]	; (800483c <initEeprom+0x2f4>)
 80045c4:	4a9e      	ldr	r2, [pc, #632]	; (8004840 <initEeprom+0x2f8>)
 80045c6:	4631      	mov	r1, r6
 80045c8:	4628      	mov	r0, r5
 80045ca:	f7fd fa89 	bl	8001ae0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&instalacaoDia, 		"addrINST_DIA", 		addrINST_DIA,		DATA8BITS,	1,		0,		31		,&Calendario.Data_instalacao.Date);
 80045ce:	1ebb      	subs	r3, r7, #2
 80045d0:	9305      	str	r3, [sp, #20]
 80045d2:	231f      	movs	r3, #31
 80045d4:	9304      	str	r3, [sp, #16]
 80045d6:	9403      	str	r4, [sp, #12]
 80045d8:	9602      	str	r6, [sp, #8]
 80045da:	9601      	str	r6, [sp, #4]
 80045dc:	2306      	movs	r3, #6
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	4b98      	ldr	r3, [pc, #608]	; (8004844 <initEeprom+0x2fc>)
 80045e2:	4a99      	ldr	r2, [pc, #612]	; (8004848 <initEeprom+0x300>)
 80045e4:	4631      	mov	r1, r6
 80045e6:	4628      	mov	r0, r5
 80045e8:	f7fd fa7a 	bl	8001ae0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&instalacaoMes, 		"addrINST_MES", 		addrINST_MES,		DATA8BITS,	1,		1,		12		,&Calendario.Data_instalacao.Month);
 80045ec:	1efb      	subs	r3, r7, #3
 80045ee:	9305      	str	r3, [sp, #20]
 80045f0:	230c      	movs	r3, #12
 80045f2:	9304      	str	r3, [sp, #16]
 80045f4:	9603      	str	r6, [sp, #12]
 80045f6:	9602      	str	r6, [sp, #8]
 80045f8:	9601      	str	r6, [sp, #4]
 80045fa:	2307      	movs	r3, #7
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	4b93      	ldr	r3, [pc, #588]	; (800484c <initEeprom+0x304>)
 8004600:	4a93      	ldr	r2, [pc, #588]	; (8004850 <initEeprom+0x308>)
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	f7fd fa6b 	bl	8001ae0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&instalacaoAno, 		"addrINST_ANO", 		addrINST_ANO,		DATA8BITS,	23,		23,		99		,&Calendario.Data_instalacao.Year);
 800460a:	1e7b      	subs	r3, r7, #1
 800460c:	9305      	str	r3, [sp, #20]
 800460e:	2363      	movs	r3, #99	; 0x63
 8004610:	9304      	str	r3, [sp, #16]
 8004612:	2317      	movs	r3, #23
 8004614:	9303      	str	r3, [sp, #12]
 8004616:	9302      	str	r3, [sp, #8]
 8004618:	9601      	str	r6, [sp, #4]
 800461a:	2308      	movs	r3, #8
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	4b8d      	ldr	r3, [pc, #564]	; (8004854 <initEeprom+0x30c>)
 8004620:	4a8d      	ldr	r2, [pc, #564]	; (8004858 <initEeprom+0x310>)
 8004622:	4631      	mov	r1, r6
 8004624:	4628      	mov	r0, r5
 8004626:	f7fd fa5b 	bl	8001ae0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&totalCiclos, 		"addrTOTAL_GERAL", 		addrTOTAL_GERAL,	DATA16BITS,	0,		0,		60000	,&Calendario.TotalCiclos);
 800462a:	1d3b      	adds	r3, r7, #4
 800462c:	9305      	str	r3, [sp, #20]
 800462e:	f8cd 9010 	str.w	r9, [sp, #16]
 8004632:	9403      	str	r4, [sp, #12]
 8004634:	9402      	str	r4, [sp, #8]
 8004636:	f8cd 8004 	str.w	r8, [sp, #4]
 800463a:	2309      	movs	r3, #9
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	4b87      	ldr	r3, [pc, #540]	; (800485c <initEeprom+0x314>)
 8004640:	4a87      	ldr	r2, [pc, #540]	; (8004860 <initEeprom+0x318>)
 8004642:	4631      	mov	r1, r6
 8004644:	4628      	mov	r0, r5
 8004646:	f7fd fa4b 	bl	8001ae0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&ContTetoMax, 		"addrCONT_MAX_TETO", 	addrCONT_MAX_TETO,	DATA16BITS,	0,		0,		60000	,&Calendario.ContMaxTeto);
 800464a:	1dbb      	adds	r3, r7, #6
 800464c:	9305      	str	r3, [sp, #20]
 800464e:	f8cd 9010 	str.w	r9, [sp, #16]
 8004652:	9403      	str	r4, [sp, #12]
 8004654:	9402      	str	r4, [sp, #8]
 8004656:	f8cd 8004 	str.w	r8, [sp, #4]
 800465a:	230b      	movs	r3, #11
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	4b81      	ldr	r3, [pc, #516]	; (8004864 <initEeprom+0x31c>)
 8004660:	4a81      	ldr	r2, [pc, #516]	; (8004868 <initEeprom+0x320>)
 8004662:	4631      	mov	r1, r6
 8004664:	4628      	mov	r0, r5
 8004666:	f7fd fa3b 	bl	8001ae0 <EepromAddVar>
	EepromAddVar(&eeprom,1,&ContLastroMax, 		"addrCONT_MAX_LASTRO", 	addrCONT_MAX_LASTRO,DATA16BITS,	0,		0,		60000	,&Calendario.ContMaxLastro);
 800466a:	3708      	adds	r7, #8
 800466c:	9705      	str	r7, [sp, #20]
 800466e:	f8cd 9010 	str.w	r9, [sp, #16]
 8004672:	9403      	str	r4, [sp, #12]
 8004674:	9402      	str	r4, [sp, #8]
 8004676:	f8cd 8004 	str.w	r8, [sp, #4]
 800467a:	230d      	movs	r3, #13
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	4b7b      	ldr	r3, [pc, #492]	; (800486c <initEeprom+0x324>)
 8004680:	4a7b      	ldr	r2, [pc, #492]	; (8004870 <initEeprom+0x328>)
 8004682:	4631      	mov	r1, r6
 8004684:	4628      	mov	r0, r5
 8004686:	f7fd fa2b 	bl	8001ae0 <EepromAddVar>

	EepromAddVar(&eeprom,0,&hitereseStateTeto, 	"addrTETO_HIST", 		addrTETO_HIST,		DATA16BITS,	0,		STD_HISTERESE,10	,&PrimitiveStates.Teto.histerese);
 800468a:	f10a 03a8 	add.w	r3, sl, #168	; 0xa8
 800468e:	9305      	str	r3, [sp, #20]
 8004690:	f04f 090a 	mov.w	r9, #10
 8004694:	f8cd 9010 	str.w	r9, [sp, #16]
 8004698:	f8cd b00c 	str.w	fp, [sp, #12]
 800469c:	9402      	str	r4, [sp, #8]
 800469e:	f8cd 8004 	str.w	r8, [sp, #4]
 80046a2:	2329      	movs	r3, #41	; 0x29
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	4b73      	ldr	r3, [pc, #460]	; (8004874 <initEeprom+0x32c>)
 80046a8:	4a73      	ldr	r2, [pc, #460]	; (8004878 <initEeprom+0x330>)
 80046aa:	4621      	mov	r1, r4
 80046ac:	4628      	mov	r0, r5
 80046ae:	f7fd fa17 	bl	8001ae0 <EepromAddVar>
	EepromAddVar(&eeprom,0,&limiteTeto, 		"addrTETO_LIMIT", 		addrTETO_LIMIT,		DATA16BITS,	0,		475			,500	,&PrimitiveStates.Teto.limite);
 80046b2:	f10a 03a6 	add.w	r3, sl, #166	; 0xa6
 80046b6:	9305      	str	r3, [sp, #20]
 80046b8:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 80046bc:	9704      	str	r7, [sp, #16]
 80046be:	f240 13db 	movw	r3, #475	; 0x1db
 80046c2:	9303      	str	r3, [sp, #12]
 80046c4:	9402      	str	r4, [sp, #8]
 80046c6:	f8cd 8004 	str.w	r8, [sp, #4]
 80046ca:	232b      	movs	r3, #43	; 0x2b
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	4b6b      	ldr	r3, [pc, #428]	; (800487c <initEeprom+0x334>)
 80046d0:	4a6b      	ldr	r2, [pc, #428]	; (8004880 <initEeprom+0x338>)
 80046d2:	4621      	mov	r1, r4
 80046d4:	4628      	mov	r0, r5
 80046d6:	f7fd fa03 	bl	8001ae0 <EepromAddVar>
	EepromAddVar(&eeprom,0,&hitereseStateLastro,"addrLASTRO_HIST", 		addrLASTRO_HIST,	DATA16BITS,	0,		STD_HISTERESE,10	,&PrimitiveStates.Lastro.histerese);
 80046da:	f10a 03f0 	add.w	r3, sl, #240	; 0xf0
 80046de:	9305      	str	r3, [sp, #20]
 80046e0:	f8cd 9010 	str.w	r9, [sp, #16]
 80046e4:	f8cd b00c 	str.w	fp, [sp, #12]
 80046e8:	9402      	str	r4, [sp, #8]
 80046ea:	f8cd 8004 	str.w	r8, [sp, #4]
 80046ee:	2349      	movs	r3, #73	; 0x49
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	4b64      	ldr	r3, [pc, #400]	; (8004884 <initEeprom+0x33c>)
 80046f4:	4a64      	ldr	r2, [pc, #400]	; (8004888 <initEeprom+0x340>)
 80046f6:	4621      	mov	r1, r4
 80046f8:	4628      	mov	r0, r5
 80046fa:	f7fd f9f1 	bl	8001ae0 <EepromAddVar>
	EepromAddVar(&eeprom,0,&limiteLastro,		"addrLASTRO_LIMIT", 	addrLASTRO_LIMIT,	DATA16BITS,	0,		STD_LIMITE	,500	,&PrimitiveStates.Lastro.limite);
 80046fe:	f10a 03ee 	add.w	r3, sl, #238	; 0xee
 8004702:	9305      	str	r3, [sp, #20]
 8004704:	9704      	str	r7, [sp, #16]
 8004706:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800470a:	9303      	str	r3, [sp, #12]
 800470c:	9402      	str	r4, [sp, #8]
 800470e:	f8cd 8004 	str.w	r8, [sp, #4]
 8004712:	234b      	movs	r3, #75	; 0x4b
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	4b5d      	ldr	r3, [pc, #372]	; (800488c <initEeprom+0x344>)
 8004718:	4a5d      	ldr	r2, [pc, #372]	; (8004890 <initEeprom+0x348>)
 800471a:	4621      	mov	r1, r4
 800471c:	4628      	mov	r0, r5
 800471e:	f7fd f9df 	bl	8001ae0 <EepromAddVar>
	EepromAddVar(&eeprom,0,&FlagBuzzer,			"addrBUZZER", 			addrBUZZER,			DATA8BITS,	0,		1			,1  	,&PrimitiveStates.Buzzer);
 8004722:	f10a 03ff 	add.w	r3, sl, #255	; 0xff
 8004726:	9305      	str	r3, [sp, #20]
 8004728:	9604      	str	r6, [sp, #16]
 800472a:	9603      	str	r6, [sp, #12]
 800472c:	9402      	str	r4, [sp, #8]
 800472e:	9601      	str	r6, [sp, #4]
 8004730:	233d      	movs	r3, #61	; 0x3d
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	4b57      	ldr	r3, [pc, #348]	; (8004894 <initEeprom+0x34c>)
 8004736:	4a58      	ldr	r2, [pc, #352]	; (8004898 <initEeprom+0x350>)
 8004738:	4621      	mov	r1, r4
 800473a:	4628      	mov	r0, r5
 800473c:	f7fd f9d0 	bl	8001ae0 <EepromAddVar>

	EepromAddVarFloating(&eeprom, 0, &kPTeto, 	"addrTETO_KP", 			addrTETO_KP,		DATADOUBLE,	0,		STD_KP		,1000	,&PrimitiveStates.Teto.kp);
 8004740:	f10a 0376 	add.w	r3, sl, #118	; 0x76
 8004744:	9308      	str	r3, [sp, #32]
 8004746:	2600      	movs	r6, #0
 8004748:	4f54      	ldr	r7, [pc, #336]	; (800489c <initEeprom+0x354>)
 800474a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800474e:	2200      	movs	r2, #0
 8004750:	4b53      	ldr	r3, [pc, #332]	; (80048a0 <initEeprom+0x358>)
 8004752:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004756:	f04f 0800 	mov.w	r8, #0
 800475a:	f04f 0900 	mov.w	r9, #0
 800475e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004762:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8004766:	f8cd b004 	str.w	fp, [sp, #4]
 800476a:	230f      	movs	r3, #15
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	4b4d      	ldr	r3, [pc, #308]	; (80048a4 <initEeprom+0x35c>)
 8004770:	4a4d      	ldr	r2, [pc, #308]	; (80048a8 <initEeprom+0x360>)
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f7fd fa1d 	bl	8001bb4 <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kITeto, 	"addrTETO_KI", 			addrTETO_KI,		DATADOUBLE,	0,		STD_KI		,1000	,&PrimitiveStates.Teto.ki);
 800477a:	f10a 037e 	add.w	r3, sl, #126	; 0x7e
 800477e:	9308      	str	r3, [sp, #32]
 8004780:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004784:	a220      	add	r2, pc, #128	; (adr r2, 8004808 <initEeprom+0x2c0>)
 8004786:	e9d2 1200 	ldrd	r1, r2, [r2]
 800478a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800478e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004792:	f8cd b004 	str.w	fp, [sp, #4]
 8004796:	2317      	movs	r3, #23
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	4b44      	ldr	r3, [pc, #272]	; (80048ac <initEeprom+0x364>)
 800479c:	4a44      	ldr	r2, [pc, #272]	; (80048b0 <initEeprom+0x368>)
 800479e:	4621      	mov	r1, r4
 80047a0:	4628      	mov	r0, r5
 80047a2:	f7fd fa07 	bl	8001bb4 <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kDTeto, 	"addrTETO_KD", 			addrTETO_KD,		DATADOUBLE,	0,		STD_KD		,1000	,&PrimitiveStates.Teto.kd);
 80047a6:	f10a 0386 	add.w	r3, sl, #134	; 0x86
 80047aa:	9308      	str	r3, [sp, #32]
 80047ac:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80047b0:	a117      	add	r1, pc, #92	; (adr r1, 8004810 <initEeprom+0x2c8>)
 80047b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047ba:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80047be:	f8cd b004 	str.w	fp, [sp, #4]
 80047c2:	2321      	movs	r3, #33	; 0x21
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	4b3b      	ldr	r3, [pc, #236]	; (80048b4 <initEeprom+0x36c>)
 80047c8:	4a3b      	ldr	r2, [pc, #236]	; (80048b8 <initEeprom+0x370>)
 80047ca:	4621      	mov	r1, r4
 80047cc:	4628      	mov	r0, r5
 80047ce:	f7fd f9f1 	bl	8001bb4 <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kPLastro,	"addrLASTRO_KP", 		addrLASTRO_KP,		DATADOUBLE,	0,		STD_KP		,1000	,&PrimitiveStates.Lastro.kp);
 80047d2:	f10a 03be 	add.w	r3, sl, #190	; 0xbe
 80047d6:	9308      	str	r3, [sp, #32]
 80047d8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80047dc:	2200      	movs	r2, #0
 80047de:	4b30      	ldr	r3, [pc, #192]	; (80048a0 <initEeprom+0x358>)
 80047e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047e4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80047e8:	f8cd b004 	str.w	fp, [sp, #4]
 80047ec:	232d      	movs	r3, #45	; 0x2d
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	4b32      	ldr	r3, [pc, #200]	; (80048bc <initEeprom+0x374>)
 80047f2:	4a33      	ldr	r2, [pc, #204]	; (80048c0 <initEeprom+0x378>)
 80047f4:	4621      	mov	r1, r4
 80047f6:	4628      	mov	r0, r5
 80047f8:	f7fd f9dc 	bl	8001bb4 <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kILastro,	"addrLASTRO_KI", 		addrLASTRO_KI,		DATADOUBLE,	0,		STD_KI		,1000	,&PrimitiveStates.Lastro.ki);
 80047fc:	f10a 03c6 	add.w	r3, sl, #198	; 0xc6
 8004800:	9308      	str	r3, [sp, #32]
 8004802:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004806:	e05d      	b.n	80048c4 <initEeprom+0x37c>
 8004808:	47ae147b 	.word	0x47ae147b
 800480c:	3f847ae1 	.word	0x3f847ae1
 8004810:	33333333 	.word	0x33333333
 8004814:	3fd33333 	.word	0x3fd33333
 8004818:	200013c8 	.word	0x200013c8
 800481c:	200007e8 	.word	0x200007e8
 8004820:	2000110c 	.word	0x2000110c
 8004824:	200008d2 	.word	0x200008d2
 8004828:	0800c8ac 	.word	0x0800c8ac
 800482c:	20001830 	.word	0x20001830
 8004830:	200007d8 	.word	0x200007d8
 8004834:	0800c8bc 	.word	0x0800c8bc
 8004838:	20001548 	.word	0x20001548
 800483c:	0800c8cc 	.word	0x0800c8cc
 8004840:	20001574 	.word	0x20001574
 8004844:	0800c8dc 	.word	0x0800c8dc
 8004848:	200015cc 	.word	0x200015cc
 800484c:	0800c8ec 	.word	0x0800c8ec
 8004850:	200015f8 	.word	0x200015f8
 8004854:	0800c8fc 	.word	0x0800c8fc
 8004858:	200015a0 	.word	0x200015a0
 800485c:	0800c90c 	.word	0x0800c90c
 8004860:	20001860 	.word	0x20001860
 8004864:	0800c91c 	.word	0x0800c91c
 8004868:	2000136c 	.word	0x2000136c
 800486c:	0800c930 	.word	0x0800c930
 8004870:	20001340 	.word	0x20001340
 8004874:	0800c944 	.word	0x0800c944
 8004878:	2000151c 	.word	0x2000151c
 800487c:	0800c954 	.word	0x0800c954
 8004880:	20001804 	.word	0x20001804
 8004884:	0800c964 	.word	0x0800c964
 8004888:	200014f0 	.word	0x200014f0
 800488c:	0800c974 	.word	0x0800c974
 8004890:	200017d8 	.word	0x200017d8
 8004894:	0800c988 	.word	0x0800c988
 8004898:	20001398 	.word	0x20001398
 800489c:	408f4000 	.word	0x408f4000
 80048a0:	403e0000 	.word	0x403e0000
 80048a4:	0800c994 	.word	0x0800c994
 80048a8:	20001790 	.word	0x20001790
 80048ac:	0800c9a0 	.word	0x0800c9a0
 80048b0:	20001700 	.word	0x20001700
 80048b4:	0800c9ac 	.word	0x0800c9ac
 80048b8:	20001670 	.word	0x20001670
 80048bc:	0800c9b8 	.word	0x0800c9b8
 80048c0:	20001748 	.word	0x20001748
 80048c4:	a21a      	add	r2, pc, #104	; (adr r2, 8004930 <initEeprom+0x3e8>)
 80048c6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80048ca:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80048ce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80048d2:	f8cd b004 	str.w	fp, [sp, #4]
 80048d6:	2335      	movs	r3, #53	; 0x35
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	4b19      	ldr	r3, [pc, #100]	; (8004940 <initEeprom+0x3f8>)
 80048dc:	4a19      	ldr	r2, [pc, #100]	; (8004944 <initEeprom+0x3fc>)
 80048de:	4621      	mov	r1, r4
 80048e0:	4628      	mov	r0, r5
 80048e2:	f7fd f967 	bl	8001bb4 <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kDLastro,	"addrLASTRO_KD", 		addrLASTRO_KD,		DATADOUBLE,	0,		STD_KD		,1000	,&PrimitiveStates.Lastro.kd);
 80048e6:	f10a 03ce 	add.w	r3, sl, #206	; 0xce
 80048ea:	9308      	str	r3, [sp, #32]
 80048ec:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80048f0:	a111      	add	r1, pc, #68	; (adr r1, 8004938 <initEeprom+0x3f0>)
 80048f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80048fe:	f8cd b004 	str.w	fp, [sp, #4]
 8004902:	2341      	movs	r3, #65	; 0x41
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	4b10      	ldr	r3, [pc, #64]	; (8004948 <initEeprom+0x400>)
 8004908:	4a10      	ldr	r2, [pc, #64]	; (800494c <initEeprom+0x404>)
 800490a:	4621      	mov	r1, r4
 800490c:	4628      	mov	r0, r5
 800490e:	f7fd f951 	bl	8001bb4 <EepromAddVarFloating>
	//todo altera funcao setavar e retirar possibilidade de alterar o valor por ela
	//todo criar uma funcao que restaure tudo

	//	RestauraSoft(&eeprom);

	__NOP();
 8004912:	bf00      	nop

	//faz o download dos objetos
	EepromDownloadValores(&eeprom);
 8004914:	4628      	mov	r0, r5
 8004916:	f7fd fb25 	bl	8001f64 <EepromDownloadValores>

	__NOP();
 800491a:	bf00      	nop

	//	RestauraSoft(&eeprom);

	__NOP();
 800491c:	bf00      	nop

	osThreadResume(TaskTemperaturaHandle);
 800491e:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <initEeprom+0x408>)
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	f004 fa77 	bl	8008e14 <osThreadResume>
}
 8004926:	b00b      	add	sp, #44	; 0x2c
 8004928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492c:	f3af 8000 	nop.w
 8004930:	47ae147b 	.word	0x47ae147b
 8004934:	3f847ae1 	.word	0x3f847ae1
 8004938:	33333333 	.word	0x33333333
 800493c:	3fd33333 	.word	0x3fd33333
 8004940:	0800c9c8 	.word	0x0800c9c8
 8004944:	200016b8 	.word	0x200016b8
 8004948:	0800c9d8 	.word	0x0800c9d8
 800494c:	20001628 	.word	0x20001628
 8004950:	20000c84 	.word	0x20000c84

08004954 <processaEeprom>:

void processaEeprom(void){
 8004954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004956:	b089      	sub	sp, #36	; 0x24
	osEvent  evt;

	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 8004958:	f04f 32ff 	mov.w	r2, #4294967295
 800495c:	4b8b      	ldr	r3, [pc, #556]	; (8004b8c <processaEeprom+0x238>)
 800495e:	6819      	ldr	r1, [r3, #0]
 8004960:	a805      	add	r0, sp, #20
 8004962:	f004 fa0e 	bl	8008d82 <osMessageGet>
	if (evt.status == osEventMessage) {
 8004966:	9b05      	ldr	r3, [sp, #20]
 8004968:	2b10      	cmp	r3, #16
 800496a:	d001      	beq.n	8004970 <processaEeprom+0x1c>
			break;
		default:
			break;
		}
	}
}
 800496c:	b009      	add	sp, #36	; 0x24
 800496e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch ((unsigned int)evt.value.p) {
 8004970:	9b06      	ldr	r3, [sp, #24]
 8004972:	2b0b      	cmp	r3, #11
 8004974:	d8fa      	bhi.n	800496c <processaEeprom+0x18>
 8004976:	e8df f013 	tbh	[pc, r3, lsl #1]
 800497a:	0016      	.short	0x0016
 800497c:	00630030 	.word	0x00630030
 8004980:	00720054 	.word	0x00720054
 8004984:	00920086 	.word	0x00920086
 8004988:	0098000c 	.word	0x0098000c
 800498c:	00ac00a2 	.word	0x00ac00a2
 8004990:	0103      	.short	0x0103
			Calendario.TotalCiclos+=1;
 8004992:	4a7f      	ldr	r2, [pc, #508]	; (8004b90 <processaEeprom+0x23c>)
 8004994:	8913      	ldrh	r3, [r2, #8]
 8004996:	3301      	adds	r3, #1
 8004998:	8113      	strh	r3, [r2, #8]
			EepromSetVar(&eeprom, &totalCiclos, 	0);
 800499a:	2200      	movs	r2, #0
 800499c:	497d      	ldr	r1, [pc, #500]	; (8004b94 <processaEeprom+0x240>)
 800499e:	487e      	ldr	r0, [pc, #504]	; (8004b98 <processaEeprom+0x244>)
 80049a0:	f7fd f95c 	bl	8001c5c <EepromSetVar>
			break;
 80049a4:	e7e2      	b.n	800496c <processaEeprom+0x18>
			if(Calendario.Horimetro_parcial_min<59){
 80049a6:	4b7a      	ldr	r3, [pc, #488]	; (8004b90 <processaEeprom+0x23c>)
 80049a8:	799b      	ldrb	r3, [r3, #6]
 80049aa:	2b3a      	cmp	r3, #58	; 0x3a
 80049ac:	d80e      	bhi.n	80049cc <processaEeprom+0x78>
				Calendario.Horimetro_parcial_min++;
 80049ae:	3301      	adds	r3, #1
 80049b0:	4a77      	ldr	r2, [pc, #476]	; (8004b90 <processaEeprom+0x23c>)
 80049b2:	7193      	strb	r3, [r2, #6]
			EepromSetVar(&eeprom, &horimetroHoras, 		0);
 80049b4:	4c78      	ldr	r4, [pc, #480]	; (8004b98 <processaEeprom+0x244>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	4978      	ldr	r1, [pc, #480]	; (8004b9c <processaEeprom+0x248>)
 80049ba:	4620      	mov	r0, r4
 80049bc:	f7fd f94e 	bl	8001c5c <EepromSetVar>
			EepromSetVar(&eeprom, &horimetroMinutos, 	0);
 80049c0:	2200      	movs	r2, #0
 80049c2:	4977      	ldr	r1, [pc, #476]	; (8004ba0 <processaEeprom+0x24c>)
 80049c4:	4620      	mov	r0, r4
 80049c6:	f7fd f949 	bl	8001c5c <EepromSetVar>
			break;
 80049ca:	e7cf      	b.n	800496c <processaEeprom+0x18>
				Calendario.Horimetro_parcial_min=0;
 80049cc:	4b70      	ldr	r3, [pc, #448]	; (8004b90 <processaEeprom+0x23c>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	719a      	strb	r2, [r3, #6]
				Calendario.Horimetro_horas++;
 80049d2:	889a      	ldrh	r2, [r3, #4]
 80049d4:	3201      	adds	r2, #1
 80049d6:	809a      	strh	r2, [r3, #4]
 80049d8:	e7ec      	b.n	80049b4 <processaEeprom+0x60>
			EepromSetVar(&eeprom, &instalacaoDia, 	datetoUpdate.Date);
 80049da:	4d72      	ldr	r5, [pc, #456]	; (8004ba4 <processaEeprom+0x250>)
 80049dc:	4c6e      	ldr	r4, [pc, #440]	; (8004b98 <processaEeprom+0x244>)
 80049de:	78aa      	ldrb	r2, [r5, #2]
 80049e0:	4971      	ldr	r1, [pc, #452]	; (8004ba8 <processaEeprom+0x254>)
 80049e2:	4620      	mov	r0, r4
 80049e4:	f7fd f93a 	bl	8001c5c <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoMes, 	datetoUpdate.Month);
 80049e8:	786a      	ldrb	r2, [r5, #1]
 80049ea:	4970      	ldr	r1, [pc, #448]	; (8004bac <processaEeprom+0x258>)
 80049ec:	4620      	mov	r0, r4
 80049ee:	f7fd f935 	bl	8001c5c <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoAno, 	datetoUpdate.Year);
 80049f2:	78ea      	ldrb	r2, [r5, #3]
 80049f4:	496e      	ldr	r1, [pc, #440]	; (8004bb0 <processaEeprom+0x25c>)
 80049f6:	4620      	mov	r0, r4
 80049f8:	f7fd f930 	bl	8001c5c <EepromSetVar>
			if (HAL_RTC_SetTime(&hrtc, &timeToUpdate, RTC_FORMAT_BIN) != HAL_OK){
 80049fc:	2200      	movs	r2, #0
 80049fe:	496d      	ldr	r1, [pc, #436]	; (8004bb4 <processaEeprom+0x260>)
 8004a00:	486d      	ldr	r0, [pc, #436]	; (8004bb8 <processaEeprom+0x264>)
 8004a02:	f002 fd8a 	bl	800751a <HAL_RTC_SetTime>
 8004a06:	b948      	cbnz	r0, 8004a1c <processaEeprom+0xc8>
			if (HAL_RTC_SetDate(&hrtc, &datetoUpdate, RTC_FORMAT_BIN) != HAL_OK){
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4966      	ldr	r1, [pc, #408]	; (8004ba4 <processaEeprom+0x250>)
 8004a0c:	486a      	ldr	r0, [pc, #424]	; (8004bb8 <processaEeprom+0x264>)
 8004a0e:	f002 fde5 	bl	80075dc <HAL_RTC_SetDate>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d0aa      	beq.n	800496c <processaEeprom+0x18>
				Error_Handler();
 8004a16:	f7fd feb1 	bl	800277c <Error_Handler>
 8004a1a:	e7a7      	b.n	800496c <processaEeprom+0x18>
				Error_Handler();
 8004a1c:	f7fd feae 	bl	800277c <Error_Handler>
 8004a20:	e7f2      	b.n	8004a08 <processaEeprom+0xb4>
			RestauraEeprom(&eeprom,softReset);	// restaura
 8004a22:	4c5d      	ldr	r4, [pc, #372]	; (8004b98 <processaEeprom+0x244>)
 8004a24:	2100      	movs	r1, #0
 8004a26:	4620      	mov	r0, r4
 8004a28:	f7fd f9cc 	bl	8001dc4 <RestauraEeprom>
			EepromDownloadValores(&eeprom);		//le
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f7fd fa99 	bl	8001f64 <EepromDownloadValores>
			osMessagePut(FilaTXBluetoothHandle, TX_RESETADO_OK, 0);
 8004a32:	2200      	movs	r2, #0
 8004a34:	2130      	movs	r1, #48	; 0x30
 8004a36:	4b61      	ldr	r3, [pc, #388]	; (8004bbc <processaEeprom+0x268>)
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	f004 f96f 	bl	8008d1c <osMessagePut>
			break;
 8004a3e:	e795      	b.n	800496c <processaEeprom+0x18>
			RestauraEeprom(&eeprom,hardReset); 	// restaura
 8004a40:	4c55      	ldr	r4, [pc, #340]	; (8004b98 <processaEeprom+0x244>)
 8004a42:	2101      	movs	r1, #1
 8004a44:	4620      	mov	r0, r4
 8004a46:	f7fd f9bd 	bl	8001dc4 <RestauraEeprom>
			EepromDownloadValores(&eeprom);		// le
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f7fd fa8a 	bl	8001f64 <EepromDownloadValores>
			osMessagePut(FilaTXBluetoothHandle, TX_RESETADO_OK, 0);
 8004a50:	2200      	movs	r2, #0
 8004a52:	2130      	movs	r1, #48	; 0x30
 8004a54:	4b59      	ldr	r3, [pc, #356]	; (8004bbc <processaEeprom+0x268>)
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	f004 f960 	bl	8008d1c <osMessagePut>
			break;
 8004a5c:	e786      	b.n	800496c <processaEeprom+0x18>
			if (HAL_RTC_SetTime(&hrtc, &timeToUpdate, RTC_FORMAT_BIN) != HAL_OK){
 8004a5e:	2200      	movs	r2, #0
 8004a60:	4954      	ldr	r1, [pc, #336]	; (8004bb4 <processaEeprom+0x260>)
 8004a62:	4855      	ldr	r0, [pc, #340]	; (8004bb8 <processaEeprom+0x264>)
 8004a64:	f002 fd59 	bl	800751a <HAL_RTC_SetTime>
 8004a68:	b950      	cbnz	r0, 8004a80 <processaEeprom+0x12c>
			if (HAL_RTC_SetDate(&hrtc, &datetoUpdate, RTC_FORMAT_BIN) != HAL_OK){
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	494d      	ldr	r1, [pc, #308]	; (8004ba4 <processaEeprom+0x250>)
 8004a6e:	4852      	ldr	r0, [pc, #328]	; (8004bb8 <processaEeprom+0x264>)
 8004a70:	f002 fdb4 	bl	80075dc <HAL_RTC_SetDate>
 8004a74:	2800      	cmp	r0, #0
 8004a76:	f43f af79 	beq.w	800496c <processaEeprom+0x18>
				Error_Handler();
 8004a7a:	f7fd fe7f 	bl	800277c <Error_Handler>
 8004a7e:	e775      	b.n	800496c <processaEeprom+0x18>
				Error_Handler();
 8004a80:	f7fd fe7c 	bl	800277c <Error_Handler>
 8004a84:	e7f1      	b.n	8004a6a <processaEeprom+0x116>
			EepromSetVar(&eeprom, &limiteTeto, 	0);
 8004a86:	4c44      	ldr	r4, [pc, #272]	; (8004b98 <processaEeprom+0x244>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	494d      	ldr	r1, [pc, #308]	; (8004bc0 <processaEeprom+0x26c>)
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f7fd f8e5 	bl	8001c5c <EepromSetVar>
			EepromSetVar(&eeprom, &limiteLastro, 	0);
 8004a92:	2200      	movs	r2, #0
 8004a94:	494b      	ldr	r1, [pc, #300]	; (8004bc4 <processaEeprom+0x270>)
 8004a96:	4620      	mov	r0, r4
 8004a98:	f7fd f8e0 	bl	8001c5c <EepromSetVar>
			break;
 8004a9c:	e766      	b.n	800496c <processaEeprom+0x18>
			EepromSetVar(&eeprom, &tempoDelayLuz, 	0);
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	4949      	ldr	r1, [pc, #292]	; (8004bc8 <processaEeprom+0x274>)
 8004aa2:	483d      	ldr	r0, [pc, #244]	; (8004b98 <processaEeprom+0x244>)
 8004aa4:	f7fd f8da 	bl	8001c5c <EepromSetVar>
			break;
 8004aa8:	e760      	b.n	800496c <processaEeprom+0x18>
			Calendario.ContMaxTeto+=1;
 8004aaa:	4a39      	ldr	r2, [pc, #228]	; (8004b90 <processaEeprom+0x23c>)
 8004aac:	8953      	ldrh	r3, [r2, #10]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	8153      	strh	r3, [r2, #10]
			EepromSetVar(&eeprom, &ContTetoMax, 	0);
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	4945      	ldr	r1, [pc, #276]	; (8004bcc <processaEeprom+0x278>)
 8004ab6:	4838      	ldr	r0, [pc, #224]	; (8004b98 <processaEeprom+0x244>)
 8004ab8:	f7fd f8d0 	bl	8001c5c <EepromSetVar>
			break;
 8004abc:	e756      	b.n	800496c <processaEeprom+0x18>
			Calendario.ContMaxLastro+=1;
 8004abe:	4a34      	ldr	r2, [pc, #208]	; (8004b90 <processaEeprom+0x23c>)
 8004ac0:	8993      	ldrh	r3, [r2, #12]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	8193      	strh	r3, [r2, #12]
			EepromSetVar(&eeprom, &ContLastroMax, 	0);
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	4941      	ldr	r1, [pc, #260]	; (8004bd0 <processaEeprom+0x27c>)
 8004aca:	4833      	ldr	r0, [pc, #204]	; (8004b98 <processaEeprom+0x244>)
 8004acc:	f7fd f8c6 	bl	8001c5c <EepromSetVar>
			break;
 8004ad0:	e74c      	b.n	800496c <processaEeprom+0x18>
			EepromSetVar(&eeprom, &hitereseStateTeto, 	0);
 8004ad2:	4c31      	ldr	r4, [pc, #196]	; (8004b98 <processaEeprom+0x244>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	493f      	ldr	r1, [pc, #252]	; (8004bd4 <processaEeprom+0x280>)
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f7fd f8bf 	bl	8001c5c <EepromSetVar>
			EepromSetVarFloating(&eeprom, &kPTeto, 	0);
 8004ade:	2600      	movs	r6, #0
 8004ae0:	2700      	movs	r7, #0
 8004ae2:	4632      	mov	r2, r6
 8004ae4:	463b      	mov	r3, r7
 8004ae6:	493c      	ldr	r1, [pc, #240]	; (8004bd8 <processaEeprom+0x284>)
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f7fd f917 	bl	8001d1c <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kITeto, 	0);
 8004aee:	4632      	mov	r2, r6
 8004af0:	463b      	mov	r3, r7
 8004af2:	493a      	ldr	r1, [pc, #232]	; (8004bdc <processaEeprom+0x288>)
 8004af4:	4620      	mov	r0, r4
 8004af6:	f7fd f911 	bl	8001d1c <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kDTeto, 	0);
 8004afa:	4632      	mov	r2, r6
 8004afc:	463b      	mov	r3, r7
 8004afe:	4938      	ldr	r1, [pc, #224]	; (8004be0 <processaEeprom+0x28c>)
 8004b00:	4620      	mov	r0, r4
 8004b02:	f7fd f90b 	bl	8001d1c <EepromSetVarFloating>
			EepromSetVar(&eeprom, &limiteTeto, 	0);
 8004b06:	2200      	movs	r2, #0
 8004b08:	492d      	ldr	r1, [pc, #180]	; (8004bc0 <processaEeprom+0x26c>)
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f7fd f8a6 	bl	8001c5c <EepromSetVar>
			PID_SetTunings(&TPIDTeto, PrimitiveStates.Teto.kp, PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd);
 8004b10:	4d34      	ldr	r5, [pc, #208]	; (8004be4 <processaEeprom+0x290>)
 8004b12:	e9d5 2330 	ldrd	r2, r3, [r5, #192]	; 0xc0
 8004b16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b1a:	e9d5 232e 	ldrd	r2, r3, [r5, #184]	; 0xb8
 8004b1e:	e9cd 2300 	strd	r2, r3, [sp]
 8004b22:	e9d5 232c 	ldrd	r2, r3, [r5, #176]	; 0xb0
 8004b26:	4830      	ldr	r0, [pc, #192]	; (8004be8 <processaEeprom+0x294>)
 8004b28:	f7fe fb26 	bl	8003178 <PID_SetTunings>
			EepromSetVar(&eeprom, &hitereseStateLastro, 0);
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	492f      	ldr	r1, [pc, #188]	; (8004bec <processaEeprom+0x298>)
 8004b30:	4620      	mov	r0, r4
 8004b32:	f7fd f893 	bl	8001c5c <EepromSetVar>
			EepromSetVarFloating(&eeprom, &kPLastro, 	0);
 8004b36:	4632      	mov	r2, r6
 8004b38:	463b      	mov	r3, r7
 8004b3a:	492d      	ldr	r1, [pc, #180]	; (8004bf0 <processaEeprom+0x29c>)
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f7fd f8ed 	bl	8001d1c <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kILastro, 	0);
 8004b42:	4632      	mov	r2, r6
 8004b44:	463b      	mov	r3, r7
 8004b46:	492b      	ldr	r1, [pc, #172]	; (8004bf4 <processaEeprom+0x2a0>)
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f7fd f8e7 	bl	8001d1c <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kDLastro, 	0);
 8004b4e:	4632      	mov	r2, r6
 8004b50:	463b      	mov	r3, r7
 8004b52:	4929      	ldr	r1, [pc, #164]	; (8004bf8 <processaEeprom+0x2a4>)
 8004b54:	4620      	mov	r0, r4
 8004b56:	f7fd f8e1 	bl	8001d1c <EepromSetVarFloating>
			EepromSetVar(&eeprom, &limiteLastro, 	0);
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	4919      	ldr	r1, [pc, #100]	; (8004bc4 <processaEeprom+0x270>)
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f7fd f87c 	bl	8001c5c <EepromSetVar>
			PID_SetTunings(&TPIDLastro, PrimitiveStates.Lastro.kp, PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd);
 8004b64:	e9d5 2342 	ldrd	r2, r3, [r5, #264]	; 0x108
 8004b68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b6c:	e9d5 2340 	ldrd	r2, r3, [r5, #256]	; 0x100
 8004b70:	e9cd 2300 	strd	r2, r3, [sp]
 8004b74:	e9d5 233e 	ldrd	r2, r3, [r5, #248]	; 0xf8
 8004b78:	4820      	ldr	r0, [pc, #128]	; (8004bfc <processaEeprom+0x2a8>)
 8004b7a:	f7fe fafd 	bl	8003178 <PID_SetTunings>
			break;
 8004b7e:	e6f5      	b.n	800496c <processaEeprom+0x18>
			EepromSetVar(&eeprom, &FlagBuzzer, 0);
 8004b80:	2200      	movs	r2, #0
 8004b82:	491f      	ldr	r1, [pc, #124]	; (8004c00 <processaEeprom+0x2ac>)
 8004b84:	4804      	ldr	r0, [pc, #16]	; (8004b98 <processaEeprom+0x244>)
 8004b86:	f7fd f869 	bl	8001c5c <EepromSetVar>
}
 8004b8a:	e6ef      	b.n	800496c <processaEeprom+0x18>
 8004b8c:	200007e8 	.word	0x200007e8
 8004b90:	200007d4 	.word	0x200007d4
 8004b94:	20001860 	.word	0x20001860
 8004b98:	200013c8 	.word	0x200013c8
 8004b9c:	20001548 	.word	0x20001548
 8004ba0:	20001574 	.word	0x20001574
 8004ba4:	200013c4 	.word	0x200013c4
 8004ba8:	200015cc 	.word	0x200015cc
 8004bac:	200015f8 	.word	0x200015f8
 8004bb0:	200015a0 	.word	0x200015a0
 8004bb4:	2000185c 	.word	0x2000185c
 8004bb8:	20001160 	.word	0x20001160
 8004bbc:	20000890 	.word	0x20000890
 8004bc0:	20001804 	.word	0x20001804
 8004bc4:	200017d8 	.word	0x200017d8
 8004bc8:	20001830 	.word	0x20001830
 8004bcc:	2000136c 	.word	0x2000136c
 8004bd0:	20001340 	.word	0x20001340
 8004bd4:	2000151c 	.word	0x2000151c
 8004bd8:	20001790 	.word	0x20001790
 8004bdc:	20001700 	.word	0x20001700
 8004be0:	20001670 	.word	0x20001670
 8004be4:	20000898 	.word	0x20000898
 8004be8:	20001900 	.word	0x20001900
 8004bec:	200014f0 	.word	0x200014f0
 8004bf0:	20001748 	.word	0x20001748
 8004bf4:	200016b8 	.word	0x200016b8
 8004bf8:	20001628 	.word	0x20001628
 8004bfc:	20001890 	.word	0x20001890
 8004c00:	20001398 	.word	0x20001398

08004c04 <StartEeprom>:
{
 8004c04:	b508      	push	{r3, lr}
	initEeprom();
 8004c06:	f7ff fc9f 	bl	8004548 <initEeprom>
		processaEeprom();
 8004c0a:	f7ff fea3 	bl	8004954 <processaEeprom>
		osThreadYield();
 8004c0e:	f003 ff84 	bl	8008b1a <osThreadYield>
		osDelay(500);
 8004c12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c16:	f003 ff8c 	bl	8008b32 <osDelay>
	for(;;)
 8004c1a:	e7f6      	b.n	8004c0a <StartEeprom+0x6>

08004c1c <atualizaDataEeprom>:

void atualizaDataEeprom(RTC_DateTypeDef data, RTC_TimeTypeDef hora){
 8004c1c:	b500      	push	{lr}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	9001      	str	r0, [sp, #4]
 8004c22:	9100      	str	r1, [sp, #0]
	datetoUpdate = data;
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <atualizaDataEeprom+0x54>)
 8004c26:	6018      	str	r0, [r3, #0]
	timeToUpdate = hora;
 8004c28:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <atualizaDataEeprom+0x58>)
 8004c2a:	8011      	strh	r1, [r2, #0]
 8004c2c:	0c0b      	lsrs	r3, r1, #16
 8004c2e:	7093      	strb	r3, [r2, #2]

	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 8004c30:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <atualizaDataEeprom+0x5c>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	2b1e      	cmp	r3, #30
 8004c38:	d909      	bls.n	8004c4e <atualizaDataEeprom+0x32>
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 8004c3a:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <atualizaDataEeprom+0x60>)
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	3b01      	subs	r3, #1
	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 8004c40:	2b0b      	cmp	r3, #11
 8004c42:	d904      	bls.n	8004c4e <atualizaDataEeprom+0x32>
			(instalacaoAno.valor == 0 || instalacaoAno.valor > 200)){
 8004c44:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <atualizaDataEeprom+0x64>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	3b01      	subs	r3, #1
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 8004c4a:	2bc7      	cmp	r3, #199	; 0xc7
 8004c4c:	d808      	bhi.n	8004c60 <atualizaDataEeprom+0x44>
		//primeiro recebimento de data
		osMessagePut(FilaEepromHandle, CEepromDataInstalacao, 0);
	}else{
		//gravacao padrao de data e hora
		osMessagePut(FilaEepromHandle, CEepromAtualizaHora, 0);
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2104      	movs	r1, #4
 8004c52:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <atualizaDataEeprom+0x68>)
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	f004 f861 	bl	8008d1c <osMessagePut>
	}
}
 8004c5a:	b003      	add	sp, #12
 8004c5c:	f85d fb04 	ldr.w	pc, [sp], #4
		osMessagePut(FilaEepromHandle, CEepromDataInstalacao, 0);
 8004c60:	2200      	movs	r2, #0
 8004c62:	2101      	movs	r1, #1
 8004c64:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <atualizaDataEeprom+0x68>)
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	f004 f858 	bl	8008d1c <osMessagePut>
 8004c6c:	e7f5      	b.n	8004c5a <atualizaDataEeprom+0x3e>
 8004c6e:	bf00      	nop
 8004c70:	200013c4 	.word	0x200013c4
 8004c74:	2000185c 	.word	0x2000185c
 8004c78:	200015cc 	.word	0x200015cc
 8004c7c:	200015f8 	.word	0x200015f8
 8004c80:	200015a0 	.word	0x200015a0
 8004c84:	200007e8 	.word	0x200007e8

08004c88 <initPID>:

	}
}


void initPID(void){
 8004c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8c:	b088      	sub	sp, #32

	PID(&TPIDTeto, 		&PrimitiveStates.Teto.realtime, 	&PrimitiveStates.Teto.PWMOut, 	&PrimitiveStates.Teto.setPoint, 	PrimitiveStates.Teto.kp,PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004c8e:	4b2e      	ldr	r3, [pc, #184]	; (8004d48 <initPID+0xc0>)
 8004c90:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004d4c <initPID+0xc4>
 8004c94:	2700      	movs	r7, #0
 8004c96:	9707      	str	r7, [sp, #28]
 8004c98:	2601      	movs	r6, #1
 8004c9a:	9606      	str	r6, [sp, #24]
 8004c9c:	f1a3 04d8 	sub.w	r4, r3, #216	; 0xd8
 8004ca0:	e953 0106 	ldrd	r0, r1, [r3, #-24]
 8004ca4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ca8:	e953 0108 	ldrd	r0, r1, [r3, #-32]
 8004cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cb0:	e953 010a 	ldrd	r0, r1, [r3, #-40]	; 0x28
 8004cb4:	e9cd 0100 	strd	r0, r1, [sp]
 8004cb8:	f1a3 0210 	sub.w	r2, r3, #16
 8004cbc:	f1a3 0108 	sub.w	r1, r3, #8
 8004cc0:	4650      	mov	r0, sl
 8004cc2:	f7fe fa8d 	bl	80031e0 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.Lastro.realtime, 	&PrimitiveStates.Lastro.PWMOut,	&PrimitiveStates.Lastro.setPoint, 	PrimitiveStates.Lastro.kp,PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004cc6:	4d22      	ldr	r5, [pc, #136]	; (8004d50 <initPID+0xc8>)
 8004cc8:	9707      	str	r7, [sp, #28]
 8004cca:	9606      	str	r6, [sp, #24]
 8004ccc:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
 8004cd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004cd4:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	; 0x100
 8004cd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cdc:	e9d4 233e 	ldrd	r2, r3, [r4, #248]	; 0xf8
 8004ce0:	e9cd 2300 	strd	r2, r3, [sp]
 8004ce4:	f504 7390 	add.w	r3, r4, #288	; 0x120
 8004ce8:	f504 7288 	add.w	r2, r4, #272	; 0x110
 8004cec:	f504 718c 	add.w	r1, r4, #280	; 0x118
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f7fe fa75 	bl	80031e0 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 8004cf6:	4631      	mov	r1, r6
 8004cf8:	4650      	mov	r0, sl
 8004cfa:	f7fe f96e 	bl	8002fda <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 8004cfe:	4631      	mov	r1, r6
 8004d00:	4628      	mov	r0, r5
 8004d02:	f7fe f96a 	bl	8002fda <PID_SetMode>

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 8004d06:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004d0a:	4650      	mov	r0, sl
 8004d0c:	f7fe fa9c 	bl	8003248 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 8004d10:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004d14:	4628      	mov	r0, r5
 8004d16:	f7fe fa97 	bl	8003248 <PID_SetSampleTime>

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8004d1a:	2600      	movs	r6, #0
 8004d1c:	2700      	movs	r7, #0
 8004d1e:	f04f 0800 	mov.w	r8, #0
 8004d22:	f8df 9030 	ldr.w	r9, [pc, #48]	; 8004d54 <initPID+0xcc>
 8004d26:	e9cd 8900 	strd	r8, r9, [sp]
 8004d2a:	4632      	mov	r2, r6
 8004d2c:	463b      	mov	r3, r7
 8004d2e:	4650      	mov	r0, sl
 8004d30:	f7fe f962 	bl	8002ff8 <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 8004d34:	e9cd 8900 	strd	r8, r9, [sp]
 8004d38:	4632      	mov	r2, r6
 8004d3a:	463b      	mov	r3, r7
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	f7fe f95b 	bl	8002ff8 <PID_SetOutputLimits>
}
 8004d42:	b008      	add	sp, #32
 8004d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d48:	20000970 	.word	0x20000970
 8004d4c:	20001900 	.word	0x20001900
 8004d50:	20001890 	.word	0x20001890
 8004d54:	40590000 	.word	0x40590000

08004d58 <computaPID>:
void computaPID(void){
 8004d58:	b510      	push	{r4, lr}

	PID_Compute(&TPIDTeto);
 8004d5a:	480a      	ldr	r0, [pc, #40]	; (8004d84 <computaPID+0x2c>)
 8004d5c:	f7fe f893 	bl	8002e86 <PID_Compute>
	PID_Compute(&TPIDLastro);
 8004d60:	4809      	ldr	r0, [pc, #36]	; (8004d88 <computaPID+0x30>)
 8004d62:	f7fe f890 	bl	8002e86 <PID_Compute>

	//transformar para a classe realizar isso //
	IndviduoPID_SetPWMValue(&PrimitiveStates.Teto, PrimitiveStates.Teto.PWMOut);
 8004d66:	4c09      	ldr	r4, [pc, #36]	; (8004d8c <computaPID+0x34>)
 8004d68:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
 8004d6c:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8004d70:	f7fd fb17 	bl	80023a2 <IndviduoPID_SetPWMValue>
	IndviduoPID_SetPWMValue(&PrimitiveStates.Lastro, PrimitiveStates.Lastro.PWMOut);
 8004d74:	e9d4 2344 	ldrd	r2, r3, [r4, #272]	; 0x110
 8004d78:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
 8004d7c:	f7fd fb11 	bl	80023a2 <IndviduoPID_SetPWMValue>
}
 8004d80:	bd10      	pop	{r4, pc}
 8004d82:	bf00      	nop
 8004d84:	20001900 	.word	0x20001900
 8004d88:	20001890 	.word	0x20001890
 8004d8c:	20000898 	.word	0x20000898

08004d90 <StartTemperatura>:
void StartTemperatura(void const * argument){
 8004d90:	b500      	push	{lr}
 8004d92:	b083      	sub	sp, #12
	xLastWakeTime = xTaskGetTickCount();
 8004d94:	f004 ff8e 	bl	8009cb4 <xTaskGetTickCount>
 8004d98:	9001      	str	r0, [sp, #4]
	initPID();
 8004d9a:	f7ff ff75 	bl	8004c88 <initPID>
		computaPID();
 8004d9e:	f7ff ffdb 	bl	8004d58 <computaPID>
		osDelayUntil(&xLastWakeTime,TIME_PID_CALC);
 8004da2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004da6:	a801      	add	r0, sp, #4
 8004da8:	f004 f84e 	bl	8008e48 <osDelayUntil>
		osThreadYield();
 8004dac:	f003 feb5 	bl	8008b1a <osThreadYield>
	for(;;)	{
 8004db0:	e7f5      	b.n	8004d9e <StartTemperatura+0xe>
	...

08004db4 <WatchDogLimitesTemperatura>:
	SaidasLeds();

	//Contador do horimetro
	Horimetro();
}
void WatchDogLimitesTemperatura(void){
 8004db4:	b538      	push	{r3, r4, r5, lr}
	static bool flagMaxLastro,flagMaxTeto,flagTimer,flagTimerLastro;

	//Atingiu limite no TETO com incremento a cada ciclo
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 8004db6:	4b4d      	ldr	r3, [pc, #308]	; (8004eec <WatchDogLimitesTemperatura+0x138>)
 8004db8:	e9d3 4534 	ldrd	r4, r5, [r3, #208]	; 0xd0
 8004dbc:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 8004dc0:	f7fb fb20 	bl	8000404 <__aeabi_i2d>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4620      	mov	r0, r4
 8004dca:	4629      	mov	r1, r5
 8004dcc:	f7fb fe14 	bl	80009f8 <__aeabi_dcmpgt>
 8004dd0:	b158      	cbz	r0, 8004dea <WatchDogLimitesTemperatura+0x36>
		if(!flagMaxTeto){
 8004dd2:	4b47      	ldr	r3, [pc, #284]	; (8004ef0 <WatchDogLimitesTemperatura+0x13c>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d060      	beq.n	8004e9c <WatchDogLimitesTemperatura+0xe8>
			flagMaxTeto = 1;
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
		}
		if(!flagTimer && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004dda:	4b46      	ldr	r3, [pc, #280]	; (8004ef4 <WatchDogLimitesTemperatura+0x140>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	b923      	cbnz	r3, 8004dea <WatchDogLimitesTemperatura+0x36>
 8004de0:	4b42      	ldr	r3, [pc, #264]	; (8004eec <WatchDogLimitesTemperatura+0x138>)
 8004de2:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d062      	beq.n	8004eb0 <WatchDogLimitesTemperatura+0xfc>
			flagTimer = 1;
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
		}
	}
	//cancela flags
	if(flagMaxTeto && PrimitiveStates.Teto.realtime<PrimitiveStates.Teto.limite-20)
 8004dea:	4b41      	ldr	r3, [pc, #260]	; (8004ef0 <WatchDogLimitesTemperatura+0x13c>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	b18b      	cbz	r3, 8004e14 <WatchDogLimitesTemperatura+0x60>
 8004df0:	4b3e      	ldr	r3, [pc, #248]	; (8004eec <WatchDogLimitesTemperatura+0x138>)
 8004df2:	e9d3 4534 	ldrd	r4, r5, [r3, #208]	; 0xd0
 8004df6:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 8004dfa:	3814      	subs	r0, #20
 8004dfc:	f7fb fb02 	bl	8000404 <__aeabi_i2d>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4620      	mov	r0, r4
 8004e06:	4629      	mov	r1, r5
 8004e08:	f7fb fdd8 	bl	80009bc <__aeabi_dcmplt>
 8004e0c:	b110      	cbz	r0, 8004e14 <WatchDogLimitesTemperatura+0x60>
		flagMaxTeto = 0;
 8004e0e:	4b38      	ldr	r3, [pc, #224]	; (8004ef0 <WatchDogLimitesTemperatura+0x13c>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	701a      	strb	r2, [r3, #0]
	if(flagTimer && PrimitiveStates.stateTimer == TIMER_idle)
 8004e14:	4b37      	ldr	r3, [pc, #220]	; (8004ef4 <WatchDogLimitesTemperatura+0x140>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	b133      	cbz	r3, 8004e28 <WatchDogLimitesTemperatura+0x74>
 8004e1a:	4b34      	ldr	r3, [pc, #208]	; (8004eec <WatchDogLimitesTemperatura+0x138>)
 8004e1c:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8004e20:	b913      	cbnz	r3, 8004e28 <WatchDogLimitesTemperatura+0x74>
		flagTimer=0;
 8004e22:	4b34      	ldr	r3, [pc, #208]	; (8004ef4 <WatchDogLimitesTemperatura+0x140>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]

	//Atingiu limite no LASTRO com incremento a cada ciclo
	if(PrimitiveStates.Lastro.realtime>PrimitiveStates.Lastro.limite){
 8004e28:	4b30      	ldr	r3, [pc, #192]	; (8004eec <WatchDogLimitesTemperatura+0x138>)
 8004e2a:	e9d3 4546 	ldrd	r4, r5, [r3, #280]	; 0x118
 8004e2e:	f8b3 0128 	ldrh.w	r0, [r3, #296]	; 0x128
 8004e32:	f7fb fae7 	bl	8000404 <__aeabi_i2d>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	f7fb fddb 	bl	80009f8 <__aeabi_dcmpgt>
 8004e42:	b158      	cbz	r0, 8004e5c <WatchDogLimitesTemperatura+0xa8>
		if(!flagMaxLastro){
 8004e44:	4b2c      	ldr	r3, [pc, #176]	; (8004ef8 <WatchDogLimitesTemperatura+0x144>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d03b      	beq.n	8004ec4 <WatchDogLimitesTemperatura+0x110>
			flagMaxLastro = 1;
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
		}
		if(!flagTimerLastro && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004e4c:	4b2b      	ldr	r3, [pc, #172]	; (8004efc <WatchDogLimitesTemperatura+0x148>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	b923      	cbnz	r3, 8004e5c <WatchDogLimitesTemperatura+0xa8>
 8004e52:	4b26      	ldr	r3, [pc, #152]	; (8004eec <WatchDogLimitesTemperatura+0x138>)
 8004e54:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d03d      	beq.n	8004ed8 <WatchDogLimitesTemperatura+0x124>
			flagTimerLastro = 1;
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
		}
	}
	//cancela flags
	if(flagMaxLastro && PrimitiveStates.Lastro.realtime<PrimitiveStates.Lastro.limite-20)
 8004e5c:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <WatchDogLimitesTemperatura+0x144>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b18b      	cbz	r3, 8004e86 <WatchDogLimitesTemperatura+0xd2>
 8004e62:	4b22      	ldr	r3, [pc, #136]	; (8004eec <WatchDogLimitesTemperatura+0x138>)
 8004e64:	e9d3 4546 	ldrd	r4, r5, [r3, #280]	; 0x118
 8004e68:	f8b3 0128 	ldrh.w	r0, [r3, #296]	; 0x128
 8004e6c:	3814      	subs	r0, #20
 8004e6e:	f7fb fac9 	bl	8000404 <__aeabi_i2d>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4620      	mov	r0, r4
 8004e78:	4629      	mov	r1, r5
 8004e7a:	f7fb fd9f 	bl	80009bc <__aeabi_dcmplt>
 8004e7e:	b110      	cbz	r0, 8004e86 <WatchDogLimitesTemperatura+0xd2>
		flagMaxLastro = 0;
 8004e80:	4b1d      	ldr	r3, [pc, #116]	; (8004ef8 <WatchDogLimitesTemperatura+0x144>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
	if(flagTimerLastro && PrimitiveStates.stateTimer == TIMER_idle)
 8004e86:	4b1d      	ldr	r3, [pc, #116]	; (8004efc <WatchDogLimitesTemperatura+0x148>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	b133      	cbz	r3, 8004e9a <WatchDogLimitesTemperatura+0xe6>
 8004e8c:	4b17      	ldr	r3, [pc, #92]	; (8004eec <WatchDogLimitesTemperatura+0x138>)
 8004e8e:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8004e92:	b913      	cbnz	r3, 8004e9a <WatchDogLimitesTemperatura+0xe6>
		flagTimerLastro=0;
 8004e94:	4b19      	ldr	r3, [pc, #100]	; (8004efc <WatchDogLimitesTemperatura+0x148>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	701a      	strb	r2, [r3, #0]


}
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
			flagMaxTeto = 1;
 8004e9c:	4b14      	ldr	r3, [pc, #80]	; (8004ef0 <WatchDogLimitesTemperatura+0x13c>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2108      	movs	r1, #8
 8004ea6:	4b16      	ldr	r3, [pc, #88]	; (8004f00 <WatchDogLimitesTemperatura+0x14c>)
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	f003 ff37 	bl	8008d1c <osMessagePut>
 8004eae:	e794      	b.n	8004dda <WatchDogLimitesTemperatura+0x26>
			flagTimer = 1;
 8004eb0:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <WatchDogLimitesTemperatura+0x140>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2108      	movs	r1, #8
 8004eba:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <WatchDogLimitesTemperatura+0x14c>)
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	f003 ff2d 	bl	8008d1c <osMessagePut>
 8004ec2:	e792      	b.n	8004dea <WatchDogLimitesTemperatura+0x36>
			flagMaxLastro = 1;
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <WatchDogLimitesTemperatura+0x144>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	701a      	strb	r2, [r3, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2109      	movs	r1, #9
 8004ece:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <WatchDogLimitesTemperatura+0x14c>)
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	f003 ff23 	bl	8008d1c <osMessagePut>
 8004ed6:	e7b9      	b.n	8004e4c <WatchDogLimitesTemperatura+0x98>
			flagTimerLastro = 1;
 8004ed8:	4b08      	ldr	r3, [pc, #32]	; (8004efc <WatchDogLimitesTemperatura+0x148>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	701a      	strb	r2, [r3, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2109      	movs	r1, #9
 8004ee2:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <WatchDogLimitesTemperatura+0x14c>)
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	f003 ff19 	bl	8008d1c <osMessagePut>
 8004eea:	e7b7      	b.n	8004e5c <WatchDogLimitesTemperatura+0xa8>
 8004eec:	20000898 	.word	0x20000898
 8004ef0:	20001973 	.word	0x20001973
 8004ef4:	20001974 	.word	0x20001974
 8004ef8:	20001972 	.word	0x20001972
 8004efc:	20001975 	.word	0x20001975
 8004f00:	200007e8 	.word	0x200007e8

08004f04 <SaidasLeds>:
void SaidasLeds(void){
 8004f04:	b508      	push	{r3, lr}

	//LED VERDE - indica que as 2 saidas estao ok
	if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando ){
 8004f06:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <SaidasLeds+0x58>)
 8004f08:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d004      	beq.n	8004f1a <SaidasLeds+0x16>
 8004f10:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <SaidasLeds+0x58>)
 8004f12:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d113      	bne.n	8004f42 <SaidasLeds+0x3e>
		onDigital(&PrimitiveStates.LedVerde);
	}else{
		offDigital(&PrimitiveStates.LedVerde);
 8004f1a:	4811      	ldr	r0, [pc, #68]	; (8004f60 <SaidasLeds+0x5c>)
 8004f1c:	f7fd f9a7 	bl	800226e <offDigital>
	}

	//LED VERMELHO TETO
	if(PrimitiveStates.Teto._PWMstate == buscando){
 8004f20:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <SaidasLeds+0x58>)
 8004f22:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d00f      	beq.n	8004f4a <SaidasLeds+0x46>
		onDigital(&PrimitiveStates.LedTeto);
	}else{
		offDigital(&PrimitiveStates.LedTeto);
 8004f2a:	480e      	ldr	r0, [pc, #56]	; (8004f64 <SaidasLeds+0x60>)
 8004f2c:	f7fd f99f 	bl	800226e <offDigital>
	}

	//LED VERMELHO LASTRO
	if(PrimitiveStates.Lastro._PWMstate == buscando){
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <SaidasLeds+0x58>)
 8004f32:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d00b      	beq.n	8004f52 <SaidasLeds+0x4e>
		onDigital(&PrimitiveStates.LedLastro);
	}else{
		offDigital(&PrimitiveStates.LedLastro);
 8004f3a:	480b      	ldr	r0, [pc, #44]	; (8004f68 <SaidasLeds+0x64>)
 8004f3c:	f7fd f997 	bl	800226e <offDigital>
	}
}
 8004f40:	bd08      	pop	{r3, pc}
		onDigital(&PrimitiveStates.LedVerde);
 8004f42:	4807      	ldr	r0, [pc, #28]	; (8004f60 <SaidasLeds+0x5c>)
 8004f44:	f7fd f989 	bl	800225a <onDigital>
 8004f48:	e7ea      	b.n	8004f20 <SaidasLeds+0x1c>
		onDigital(&PrimitiveStates.LedTeto);
 8004f4a:	4806      	ldr	r0, [pc, #24]	; (8004f64 <SaidasLeds+0x60>)
 8004f4c:	f7fd f985 	bl	800225a <onDigital>
 8004f50:	e7ee      	b.n	8004f30 <SaidasLeds+0x2c>
		onDigital(&PrimitiveStates.LedLastro);
 8004f52:	4805      	ldr	r0, [pc, #20]	; (8004f68 <SaidasLeds+0x64>)
 8004f54:	f7fd f981 	bl	800225a <onDigital>
 8004f58:	e7f2      	b.n	8004f40 <SaidasLeds+0x3c>
 8004f5a:	bf00      	nop
 8004f5c:	20000898 	.word	0x20000898
 8004f60:	200008f4 	.word	0x200008f4
 8004f64:	2000090c 	.word	0x2000090c
 8004f68:	20000924 	.word	0x20000924

08004f6c <Horimetro>:
void Horimetro(void){
 8004f6c:	b508      	push	{r3, lr}
	static uint8_t segundos=0;
	//esperar implementacao digital output
	if(PrimitiveStates.Lastro._PWMstate != idle || PrimitiveStates.Teto._PWMstate != idle){
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <Horimetro+0x3c>)
 8004f70:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004f74:	b91b      	cbnz	r3, 8004f7e <Horimetro+0x12>
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <Horimetro+0x3c>)
 8004f78:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8004f7c:	b17b      	cbz	r3, 8004f9e <Horimetro+0x32>
		segundos++;
 8004f7e:	4a0b      	ldr	r2, [pc, #44]	; (8004fac <Horimetro+0x40>)
 8004f80:	7813      	ldrb	r3, [r2, #0]
 8004f82:	3301      	adds	r3, #1
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	7013      	strb	r3, [r2, #0]
		if(segundos == 60){
 8004f88:	2b3c      	cmp	r3, #60	; 0x3c
 8004f8a:	d000      	beq.n	8004f8e <Horimetro+0x22>
		}

	}else{
		segundos = 1;
	}
}
 8004f8c:	bd08      	pop	{r3, pc}
			segundos = 0;
 8004f8e:	2100      	movs	r1, #0
 8004f90:	7011      	strb	r1, [r2, #0]
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
 8004f92:	460a      	mov	r2, r1
 8004f94:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <Horimetro+0x44>)
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	f003 fec0 	bl	8008d1c <osMessagePut>
 8004f9c:	e7f6      	b.n	8004f8c <Horimetro+0x20>
		segundos = 1;
 8004f9e:	4b03      	ldr	r3, [pc, #12]	; (8004fac <Horimetro+0x40>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	701a      	strb	r2, [r3, #0]
}
 8004fa4:	e7f2      	b.n	8004f8c <Horimetro+0x20>
 8004fa6:	bf00      	nop
 8004fa8:	20000898 	.word	0x20000898
 8004fac:	20001976 	.word	0x20001976
 8004fb0:	200007e8 	.word	0x200007e8

08004fb4 <sinalizacaoReachTemp>:
void sinalizacaoReachTemp(void){
 8004fb4:	b508      	push	{r3, lr}
	static GenericPwmState __StateTeto, __StateLastro;

	//verifica se o estado anterior estava em buscando em qualquer dos dois PID
	if(__StateTeto == buscando || __StateLastro == buscando){
 8004fb6:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <sinalizacaoReachTemp+0x48>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d00d      	beq.n	8004fda <sinalizacaoReachTemp+0x26>
 8004fbe:	4b10      	ldr	r3, [pc, #64]	; (8005000 <sinalizacaoReachTemp+0x4c>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d009      	beq.n	8004fda <sinalizacaoReachTemp+0x26>
		if(PrimitiveStates.Teto._PWMstate != buscando && PrimitiveStates.Lastro._PWMstate != buscando ){
			//notifica que chegou na temperatura
			osSignalSet(TaskBuzzerHandle, SINAL_TEMP_REACH);
		}
	}
	__StateTeto 	= PrimitiveStates.Teto._PWMstate;
 8004fc6:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <sinalizacaoReachTemp+0x50>)
 8004fc8:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
 8004fcc:	4a0b      	ldr	r2, [pc, #44]	; (8004ffc <sinalizacaoReachTemp+0x48>)
 8004fce:	7011      	strb	r1, [r2, #0]
	__StateLastro 	= PrimitiveStates.Lastro._PWMstate;
 8004fd0:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8004fd4:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <sinalizacaoReachTemp+0x4c>)
 8004fd6:	701a      	strb	r2, [r3, #0]


}
 8004fd8:	bd08      	pop	{r3, pc}
		if(PrimitiveStates.Teto._PWMstate != buscando && PrimitiveStates.Lastro._PWMstate != buscando ){
 8004fda:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <sinalizacaoReachTemp+0x50>)
 8004fdc:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d0f0      	beq.n	8004fc6 <sinalizacaoReachTemp+0x12>
 8004fe4:	4b07      	ldr	r3, [pc, #28]	; (8005004 <sinalizacaoReachTemp+0x50>)
 8004fe6:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d0eb      	beq.n	8004fc6 <sinalizacaoReachTemp+0x12>
			osSignalSet(TaskBuzzerHandle, SINAL_TEMP_REACH);
 8004fee:	2101      	movs	r1, #1
 8004ff0:	4b05      	ldr	r3, [pc, #20]	; (8005008 <sinalizacaoReachTemp+0x54>)
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	f003 fdfb 	bl	8008bee <osSignalSet>
 8004ff8:	e7e5      	b.n	8004fc6 <sinalizacaoReachTemp+0x12>
 8004ffa:	bf00      	nop
 8004ffc:	20001971 	.word	0x20001971
 8005000:	20001970 	.word	0x20001970
 8005004:	20000898 	.word	0x20000898
 8005008:	20000c7c 	.word	0x20000c7c

0800500c <taskTemperatura1sec>:
void taskTemperatura1sec(void){
 800500c:	b508      	push	{r3, lr}
	WatchDogLimitesTemperatura();
 800500e:	f7ff fed1 	bl	8004db4 <WatchDogLimitesTemperatura>
	sinalizacaoReachTemp();
 8005012:	f7ff ffcf 	bl	8004fb4 <sinalizacaoReachTemp>
	SaidasLeds();
 8005016:	f7ff ff75 	bl	8004f04 <SaidasLeds>
	Horimetro();
 800501a:	f7ff ffa7 	bl	8004f6c <Horimetro>
}
 800501e:	bd08      	pop	{r3, pc}

08005020 <funcionamentoTimer>:
}

void funcionamentoTimer(void){

	//Decremento de minutos e segundos
	if((PrimitiveStates.RTTimerMinutos>0 && PrimitiveStates.RTTimerSegundos==0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 8005020:	4b1e      	ldr	r3, [pc, #120]	; (800509c <funcionamentoTimer+0x7c>)
 8005022:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 8005026:	b142      	cbz	r2, 800503a <funcionamentoTimer+0x1a>
 8005028:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800502c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005030:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005038:	d009      	beq.n	800504e <funcionamentoTimer+0x2e>
		PrimitiveStates.RTTimerSegundos = 59;
		PrimitiveStates.RTTimerMinutos--;
	}else if((PrimitiveStates.RTTimerMinutos>0 || PrimitiveStates.RTTimerSegundos>0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 800503a:	4b18      	ldr	r3, [pc, #96]	; (800509c <funcionamentoTimer+0x7c>)
 800503c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8005040:	b123      	cbz	r3, 800504c <funcionamentoTimer+0x2c>
 8005042:	4b16      	ldr	r3, [pc, #88]	; (800509c <funcionamentoTimer+0x7c>)
 8005044:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8005048:	2b01      	cmp	r3, #1
 800504a:	d008      	beq.n	800505e <funcionamentoTimer+0x3e>
 800504c:	4770      	bx	lr
		PrimitiveStates.RTTimerSegundos = 59;
 800504e:	4b13      	ldr	r3, [pc, #76]	; (800509c <funcionamentoTimer+0x7c>)
 8005050:	213b      	movs	r1, #59	; 0x3b
 8005052:	f883 113d 	strb.w	r1, [r3, #317]	; 0x13d
		PrimitiveStates.RTTimerMinutos--;
 8005056:	3a01      	subs	r2, #1
 8005058:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 800505c:	4770      	bx	lr
		PrimitiveStates.RTTimerSegundos--;
 800505e:	4a0f      	ldr	r2, [pc, #60]	; (800509c <funcionamentoTimer+0x7c>)
 8005060:	f892 113d 	ldrb.w	r1, [r2, #317]	; 0x13d
 8005064:	3901      	subs	r1, #1
 8005066:	f882 113d 	strb.w	r1, [r2, #317]	; 0x13d

		//chegou ao zero --- ROTINA DE FIM DE CICLO
		if(PrimitiveStates.RTTimerSegundos==0 && PrimitiveStates.RTTimerMinutos==0 && PrimitiveStates.stateTimer != TIMER_idle){
 800506a:	f8b2 213c 	ldrh.w	r2, [r2, #316]	; 0x13c
 800506e:	2a00      	cmp	r2, #0
 8005070:	d1ec      	bne.n	800504c <funcionamentoTimer+0x2c>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0ea      	beq.n	800504c <funcionamentoTimer+0x2c>
void funcionamentoTimer(void){
 8005076:	b510      	push	{r4, lr}
			osMessagePut(FilaEepromHandle, CEepromNewCile, 0);
 8005078:	2107      	movs	r1, #7
 800507a:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <funcionamentoTimer+0x80>)
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	f003 fe4d 	bl	8008d1c <osMessagePut>
			//notifica buzzer
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
 8005082:	4c08      	ldr	r4, [pc, #32]	; (80050a4 <funcionamentoTimer+0x84>)
 8005084:	2108      	movs	r1, #8
 8005086:	6820      	ldr	r0, [r4, #0]
 8005088:	f003 fdb1 	bl	8008bee <osSignalSet>
			PrimitiveStates.stateTimer = TIMER_idle;
 800508c:	4b03      	ldr	r3, [pc, #12]	; (800509c <funcionamentoTimer+0x7c>)
 800508e:	2200      	movs	r2, #0
 8005090:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
			osThreadResume(TaskBuzzerHandle);
 8005094:	6820      	ldr	r0, [r4, #0]
 8005096:	f003 febd 	bl	8008e14 <osThreadResume>
		}
	}
}
 800509a:	bd10      	pop	{r4, pc}
 800509c:	20000898 	.word	0x20000898
 80050a0:	200007e8 	.word	0x200007e8
 80050a4:	20000c7c 	.word	0x20000c7c

080050a8 <verificaErro>:


void verificaErro(void){
 80050a8:	b500      	push	{lr}
 80050aa:	b085      	sub	sp, #20
	osEvent evt;
	evt = osSignalWait (ERRO_CRITICO, 0);
 80050ac:	2200      	movs	r2, #0
 80050ae:	210f      	movs	r1, #15
 80050b0:	a801      	add	r0, sp, #4
 80050b2:	f003 fdce 	bl	8008c52 <osSignalWait>
	if (evt.status == osEventSignal){
 80050b6:	9b01      	ldr	r3, [sp, #4]
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d002      	beq.n	80050c2 <verificaErro+0x1a>

		if(evt.value.v == ERRO_CRITICO){
			osThreadSuspend(TaskTimerHandle);
		}
	}
}
 80050bc:	b005      	add	sp, #20
 80050be:	f85d fb04 	ldr.w	pc, [sp], #4
		if(evt.value.v == ERRO_CRITICO){
 80050c2:	9b02      	ldr	r3, [sp, #8]
 80050c4:	2b0f      	cmp	r3, #15
 80050c6:	d1f9      	bne.n	80050bc <verificaErro+0x14>
			osThreadSuspend(TaskTimerHandle);
 80050c8:	4b02      	ldr	r3, [pc, #8]	; (80050d4 <verificaErro+0x2c>)
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	f003 fe9d 	bl	8008e0a <osThreadSuspend>
}
 80050d0:	e7f4      	b.n	80050bc <verificaErro+0x14>
 80050d2:	bf00      	nop
 80050d4:	20000f28 	.word	0x20000f28

080050d8 <StartTimer>:
{
 80050d8:	b500      	push	{lr}
 80050da:	b083      	sub	sp, #12
	xLastWakeTime = xTaskGetTickCount();
 80050dc:	f004 fdea 	bl	8009cb4 <xTaskGetTickCount>
 80050e0:	9001      	str	r0, [sp, #4]
		verificaErro();
 80050e2:	f7ff ffe1 	bl	80050a8 <verificaErro>
		funcionamentoTimer();
 80050e6:	f7ff ff9b 	bl	8005020 <funcionamentoTimer>
		osThreadYield();
 80050ea:	f003 fd16 	bl	8008b1a <osThreadYield>
		osDelayUntil(&xLastWakeTime,1000);
 80050ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80050f2:	a801      	add	r0, sp, #4
 80050f4:	f003 fea8 	bl	8008e48 <osDelayUntil>
	for(;;)
 80050f8:	e7f3      	b.n	80050e2 <StartTimer+0xa>
	...

080050fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050fc:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050fe:	4a07      	ldr	r2, [pc, #28]	; (800511c <HAL_Init+0x20>)
 8005100:	6813      	ldr	r3, [r2, #0]
 8005102:	f043 0310 	orr.w	r3, r3, #16
 8005106:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005108:	2003      	movs	r0, #3
 800510a:	f000 fa99 	bl	8005640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800510e:	200f      	movs	r0, #15
 8005110:	f7fe faf0 	bl	80036f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005114:	f7fe f8be 	bl	8003294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8005118:	2000      	movs	r0, #0
 800511a:	bd08      	pop	{r3, pc}
 800511c:	40022000 	.word	0x40022000

08005120 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005120:	4a03      	ldr	r2, [pc, #12]	; (8005130 <HAL_IncTick+0x10>)
 8005122:	6811      	ldr	r1, [r2, #0]
 8005124:	4b03      	ldr	r3, [pc, #12]	; (8005134 <HAL_IncTick+0x14>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	440b      	add	r3, r1
 800512a:	6013      	str	r3, [r2, #0]
}
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20001978 	.word	0x20001978
 8005134:	20000004 	.word	0x20000004

08005138 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005138:	4b01      	ldr	r3, [pc, #4]	; (8005140 <HAL_GetTick+0x8>)
 800513a:	6818      	ldr	r0, [r3, #0]
}
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20001978 	.word	0x20001978

08005144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005148:	f7ff fff6 	bl	8005138 <HAL_GetTick>
 800514c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800514e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005152:	d002      	beq.n	800515a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8005154:	4b04      	ldr	r3, [pc, #16]	; (8005168 <HAL_Delay+0x24>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800515a:	f7ff ffed 	bl	8005138 <HAL_GetTick>
 800515e:	1b40      	subs	r0, r0, r5
 8005160:	42a0      	cmp	r0, r4
 8005162:	d3fa      	bcc.n	800515a <HAL_Delay+0x16>
  {
  }
}
 8005164:	bd38      	pop	{r3, r4, r5, pc}
 8005166:	bf00      	nop
 8005168:	20000004 	.word	0x20000004

0800516c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800516c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800516e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005172:	f012 0f50 	tst.w	r2, #80	; 0x50
 8005176:	d11e      	bne.n	80051b6 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800517a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800517e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	6892      	ldr	r2, [r2, #8]
 8005184:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8005188:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800518c:	d003      	beq.n	8005196 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800518e:	4618      	mov	r0, r3
 8005190:	f7fd fa86 	bl	80026a0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005194:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005196:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005198:	2a00      	cmp	r2, #0
 800519a:	d1f8      	bne.n	800518e <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800519c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800519e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051a2:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051a6:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80051aa:	d1f0      	bne.n	800518e <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28
 80051b4:	e7eb      	b.n	800518e <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	4798      	blx	r3
}
 80051bc:	e7ea      	b.n	8005194 <ADC_DMAConvCplt+0x28>

080051be <HAL_ADC_ConvHalfCpltCallback>:
}
 80051be:	4770      	bx	lr

080051c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80051c0:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80051c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80051c4:	f7ff fffb 	bl	80051be <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051c8:	bd08      	pop	{r3, pc}

080051ca <HAL_ADC_ErrorCallback>:
}
 80051ca:	4770      	bx	lr

080051cc <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80051cc:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80051ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80051d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80051d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051d6:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80051d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80051da:	f043 0304 	orr.w	r3, r3, #4
 80051de:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80051e0:	f7ff fff3 	bl	80051ca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051e4:	bd08      	pop	{r3, pc}
	...

080051e8 <HAL_ADC_ConfigChannel>:
{ 
 80051e8:	b430      	push	{r4, r5}
 80051ea:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80051ec:	2200      	movs	r2, #0
 80051ee:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80051f0:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80051f4:	2a01      	cmp	r2, #1
 80051f6:	f000 808f 	beq.w	8005318 <HAL_ADC_ConfigChannel+0x130>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2201      	movs	r2, #1
 80051fe:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8005202:	684a      	ldr	r2, [r1, #4]
 8005204:	2a06      	cmp	r2, #6
 8005206:	d82d      	bhi.n	8005264 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005208:	6804      	ldr	r4, [r0, #0]
 800520a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800520c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005210:	3a05      	subs	r2, #5
 8005212:	f04f 0c1f 	mov.w	ip, #31
 8005216:	fa0c fc02 	lsl.w	ip, ip, r2
 800521a:	ea20 000c 	bic.w	r0, r0, ip
 800521e:	680d      	ldr	r5, [r1, #0]
 8005220:	fa05 f202 	lsl.w	r2, r5, r2
 8005224:	4302      	orrs	r2, r0
 8005226:	6362      	str	r2, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005228:	680a      	ldr	r2, [r1, #0]
 800522a:	2a09      	cmp	r2, #9
 800522c:	d938      	bls.n	80052a0 <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800522e:	681c      	ldr	r4, [r3, #0]
 8005230:	68e0      	ldr	r0, [r4, #12]
 8005232:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005236:	3a1e      	subs	r2, #30
 8005238:	f04f 0c07 	mov.w	ip, #7
 800523c:	fa0c fc02 	lsl.w	ip, ip, r2
 8005240:	ea20 000c 	bic.w	r0, r0, ip
 8005244:	688d      	ldr	r5, [r1, #8]
 8005246:	fa05 f202 	lsl.w	r2, r5, r2
 800524a:	4302      	orrs	r2, r0
 800524c:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800524e:	680a      	ldr	r2, [r1, #0]
 8005250:	3a10      	subs	r2, #16
 8005252:	2a01      	cmp	r2, #1
 8005254:	d934      	bls.n	80052c0 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005256:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800525e:	b002      	add	sp, #8
 8005260:	bc30      	pop	{r4, r5}
 8005262:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8005264:	2a0c      	cmp	r2, #12
 8005266:	d80d      	bhi.n	8005284 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005268:	6805      	ldr	r5, [r0, #0]
 800526a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800526c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005270:	3a23      	subs	r2, #35	; 0x23
 8005272:	241f      	movs	r4, #31
 8005274:	4094      	lsls	r4, r2
 8005276:	ea20 0004 	bic.w	r0, r0, r4
 800527a:	680c      	ldr	r4, [r1, #0]
 800527c:	4094      	lsls	r4, r2
 800527e:	4320      	orrs	r0, r4
 8005280:	6328      	str	r0, [r5, #48]	; 0x30
 8005282:	e7d1      	b.n	8005228 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005284:	6805      	ldr	r5, [r0, #0]
 8005286:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005288:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800528c:	3a41      	subs	r2, #65	; 0x41
 800528e:	241f      	movs	r4, #31
 8005290:	4094      	lsls	r4, r2
 8005292:	ea20 0004 	bic.w	r0, r0, r4
 8005296:	680c      	ldr	r4, [r1, #0]
 8005298:	4094      	lsls	r4, r2
 800529a:	4320      	orrs	r0, r4
 800529c:	62e8      	str	r0, [r5, #44]	; 0x2c
 800529e:	e7c3      	b.n	8005228 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80052a0:	681c      	ldr	r4, [r3, #0]
 80052a2:	6920      	ldr	r0, [r4, #16]
 80052a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80052a8:	f04f 0c07 	mov.w	ip, #7
 80052ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80052b0:	ea20 000c 	bic.w	r0, r0, ip
 80052b4:	688d      	ldr	r5, [r1, #8]
 80052b6:	fa05 f202 	lsl.w	r2, r5, r2
 80052ba:	4302      	orrs	r2, r0
 80052bc:	6122      	str	r2, [r4, #16]
 80052be:	e7c6      	b.n	800524e <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4816      	ldr	r0, [pc, #88]	; (800531c <HAL_ADC_ConfigChannel+0x134>)
 80052c4:	4282      	cmp	r2, r0
 80052c6:	d005      	beq.n	80052d4 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ca:	f042 0220 	orr.w	r2, r2, #32
 80052ce:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80052d0:	2001      	movs	r0, #1
 80052d2:	e7c1      	b.n	8005258 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80052d4:	6890      	ldr	r0, [r2, #8]
 80052d6:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80052da:	d11b      	bne.n	8005314 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80052dc:	6890      	ldr	r0, [r2, #8]
 80052de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80052e2:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052e4:	680a      	ldr	r2, [r1, #0]
 80052e6:	2a10      	cmp	r2, #16
 80052e8:	d001      	beq.n	80052ee <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052ea:	2000      	movs	r0, #0
 80052ec:	e7b4      	b.n	8005258 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80052ee:	4a0c      	ldr	r2, [pc, #48]	; (8005320 <HAL_ADC_ConfigChannel+0x138>)
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	490c      	ldr	r1, [pc, #48]	; (8005324 <HAL_ADC_ConfigChannel+0x13c>)
 80052f4:	fba1 1202 	umull	r1, r2, r1, r2
 80052f8:	0c92      	lsrs	r2, r2, #18
 80052fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80052fe:	0052      	lsls	r2, r2, #1
 8005300:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8005302:	e002      	b.n	800530a <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8005304:	9a01      	ldr	r2, [sp, #4]
 8005306:	3a01      	subs	r2, #1
 8005308:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800530a:	9a01      	ldr	r2, [sp, #4]
 800530c:	2a00      	cmp	r2, #0
 800530e:	d1f9      	bne.n	8005304 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005310:	2000      	movs	r0, #0
 8005312:	e7a1      	b.n	8005258 <HAL_ADC_ConfigChannel+0x70>
 8005314:	2000      	movs	r0, #0
 8005316:	e79f      	b.n	8005258 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8005318:	2002      	movs	r0, #2
 800531a:	e7a0      	b.n	800525e <HAL_ADC_ConfigChannel+0x76>
 800531c:	40012400 	.word	0x40012400
 8005320:	20000000 	.word	0x20000000
 8005324:	431bde83 	.word	0x431bde83

08005328 <ADC_Enable>:
{
 8005328:	b530      	push	{r4, r5, lr}
 800532a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005330:	6803      	ldr	r3, [r0, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	f012 0f01 	tst.w	r2, #1
 8005338:	d133      	bne.n	80053a2 <ADC_Enable+0x7a>
 800533a:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005344:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <ADC_Enable+0x80>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a18      	ldr	r2, [pc, #96]	; (80053ac <ADC_Enable+0x84>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	0c9b      	lsrs	r3, r3, #18
 8005350:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8005352:	e002      	b.n	800535a <ADC_Enable+0x32>
      wait_loop_index--;
 8005354:	9b01      	ldr	r3, [sp, #4]
 8005356:	3b01      	subs	r3, #1
 8005358:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800535a:	9b01      	ldr	r3, [sp, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1f9      	bne.n	8005354 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8005360:	f7ff feea 	bl	8005138 <HAL_GetTick>
 8005364:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f013 0f01 	tst.w	r3, #1
 800536e:	d116      	bne.n	800539e <ADC_Enable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005370:	f7ff fee2 	bl	8005138 <HAL_GetTick>
 8005374:	1b43      	subs	r3, r0, r5
 8005376:	2b02      	cmp	r3, #2
 8005378:	d9f5      	bls.n	8005366 <ADC_Enable+0x3e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f013 0f01 	tst.w	r3, #1
 8005382:	d1f0      	bne.n	8005366 <ADC_Enable+0x3e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005384:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005386:	f043 0310 	orr.w	r3, r3, #16
 800538a:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800538c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800538e:	f043 0301 	orr.w	r3, r3, #1
 8005392:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8005394:	2300      	movs	r3, #0
 8005396:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 800539a:	2001      	movs	r0, #1
 800539c:	e002      	b.n	80053a4 <ADC_Enable+0x7c>
  return HAL_OK;
 800539e:	2000      	movs	r0, #0
 80053a0:	e000      	b.n	80053a4 <ADC_Enable+0x7c>
 80053a2:	2000      	movs	r0, #0
}
 80053a4:	b003      	add	sp, #12
 80053a6:	bd30      	pop	{r4, r5, pc}
 80053a8:	20000000 	.word	0x20000000
 80053ac:	431bde83 	.word	0x431bde83

080053b0 <HAL_ADC_Start_DMA>:
{
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	4604      	mov	r4, r0
 80053b4:	460d      	mov	r5, r1
 80053b6:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80053b8:	6801      	ldr	r1, [r0, #0]
 80053ba:	4844      	ldr	r0, [pc, #272]	; (80054cc <HAL_ADC_Start_DMA+0x11c>)
 80053bc:	4281      	cmp	r1, r0
 80053be:	d059      	beq.n	8005474 <HAL_ADC_Start_DMA+0xc4>
 80053c0:	4b43      	ldr	r3, [pc, #268]	; (80054d0 <HAL_ADC_Start_DMA+0x120>)
 80053c2:	4299      	cmp	r1, r3
 80053c4:	d056      	beq.n	8005474 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 80053c6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d07c      	beq.n	80054c8 <HAL_ADC_Start_DMA+0x118>
 80053ce:	2301      	movs	r3, #1
 80053d0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80053d4:	4620      	mov	r0, r4
 80053d6:	f7ff ffa7 	bl	8005328 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80053da:	4607      	mov	r7, r0
 80053dc:	2800      	cmp	r0, #0
 80053de:	d16e      	bne.n	80054be <HAL_ADC_Start_DMA+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 80053e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80053e2:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 80053e6:	f021 0101 	bic.w	r1, r1, #1
 80053ea:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80053ee:	62a1      	str	r1, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80053f0:	6822      	ldr	r2, [r4, #0]
 80053f2:	4b37      	ldr	r3, [pc, #220]	; (80054d0 <HAL_ADC_Start_DMA+0x120>)
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d044      	beq.n	8005482 <HAL_ADC_Start_DMA+0xd2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80053f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80053fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80053fe:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005400:	6853      	ldr	r3, [r2, #4]
 8005402:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005406:	d005      	beq.n	8005414 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005408:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800540a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800540e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005412:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005414:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005416:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800541a:	d048      	beq.n	80054ae <HAL_ADC_Start_DMA+0xfe>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800541c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800541e:	f023 0306 	bic.w	r3, r3, #6
 8005422:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8005424:	2300      	movs	r3, #0
 8005426:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800542a:	6a23      	ldr	r3, [r4, #32]
 800542c:	4a29      	ldr	r2, [pc, #164]	; (80054d4 <HAL_ADC_Start_DMA+0x124>)
 800542e:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005430:	6a23      	ldr	r3, [r4, #32]
 8005432:	4a29      	ldr	r2, [pc, #164]	; (80054d8 <HAL_ADC_Start_DMA+0x128>)
 8005434:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005436:	6a23      	ldr	r3, [r4, #32]
 8005438:	4a28      	ldr	r2, [pc, #160]	; (80054dc <HAL_ADC_Start_DMA+0x12c>)
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	f06f 0202 	mvn.w	r2, #2
 8005442:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005444:	6822      	ldr	r2, [r4, #0]
 8005446:	6893      	ldr	r3, [r2, #8]
 8005448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544c:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800544e:	6821      	ldr	r1, [r4, #0]
 8005450:	4633      	mov	r3, r6
 8005452:	462a      	mov	r2, r5
 8005454:	314c      	adds	r1, #76	; 0x4c
 8005456:	6a20      	ldr	r0, [r4, #32]
 8005458:	f000 f9dc 	bl	8005814 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8005464:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8005468:	d024      	beq.n	80054b4 <HAL_ADC_Start_DMA+0x104>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005470:	609a      	str	r2, [r3, #8]
 8005472:	e027      	b.n	80054c4 <HAL_ADC_Start_DMA+0x114>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005474:	4b15      	ldr	r3, [pc, #84]	; (80054cc <HAL_ADC_Start_DMA+0x11c>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800547c:	d0a3      	beq.n	80053c6 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 800547e:	2701      	movs	r7, #1
 8005480:	e020      	b.n	80054c4 <HAL_ADC_Start_DMA+0x114>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005482:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800548c:	d0b4      	beq.n	80053f8 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800548e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005494:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005496:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <HAL_ADC_Start_DMA+0x11c>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800549e:	d0b9      	beq.n	8005414 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80054a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80054ac:	e7b2      	b.n	8005414 <HAL_ADC_Start_DMA+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 80054ae:	2300      	movs	r3, #0
 80054b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054b2:	e7b7      	b.n	8005424 <HAL_ADC_Start_DMA+0x74>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80054ba:	609a      	str	r2, [r3, #8]
 80054bc:	e002      	b.n	80054c4 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 80054be:	2300      	movs	r3, #0
 80054c0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80054c4:	4638      	mov	r0, r7
 80054c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80054c8:	2702      	movs	r7, #2
 80054ca:	e7fb      	b.n	80054c4 <HAL_ADC_Start_DMA+0x114>
 80054cc:	40012400 	.word	0x40012400
 80054d0:	40012800 	.word	0x40012800
 80054d4:	0800516d 	.word	0x0800516d
 80054d8:	080051c1 	.word	0x080051c1
 80054dc:	080051cd 	.word	0x080051cd

080054e0 <ADC_ConversionStop_Disable>:
{
 80054e0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80054e2:	6803      	ldr	r3, [r0, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	f012 0f01 	tst.w	r2, #1
 80054ea:	d101      	bne.n	80054f0 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80054ec:	2000      	movs	r0, #0
}
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	f022 0201 	bic.w	r2, r2, #1
 80054f8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80054fa:	f7ff fe1d 	bl	8005138 <HAL_GetTick>
 80054fe:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f013 0f01 	tst.w	r3, #1
 8005508:	d013      	beq.n	8005532 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800550a:	f7ff fe15 	bl	8005138 <HAL_GetTick>
 800550e:	1b43      	subs	r3, r0, r5
 8005510:	2b02      	cmp	r3, #2
 8005512:	d9f5      	bls.n	8005500 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f013 0f01 	tst.w	r3, #1
 800551c:	d0f0      	beq.n	8005500 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800551e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005520:	f043 0310 	orr.w	r3, r3, #16
 8005524:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005526:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800552e:	2001      	movs	r0, #1
 8005530:	e7dd      	b.n	80054ee <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8005532:	2000      	movs	r0, #0
 8005534:	e7db      	b.n	80054ee <ADC_ConversionStop_Disable+0xe>
	...

08005538 <HAL_ADC_Init>:
  if(hadc == NULL)
 8005538:	2800      	cmp	r0, #0
 800553a:	d07b      	beq.n	8005634 <HAL_ADC_Init+0xfc>
{
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005540:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005542:	2b00      	cmp	r3, #0
 8005544:	d04d      	beq.n	80055e2 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005546:	4620      	mov	r0, r4
 8005548:	f7ff ffca 	bl	80054e0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800554c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800554e:	f013 0310 	ands.w	r3, r3, #16
 8005552:	d169      	bne.n	8005628 <HAL_ADC_Init+0xf0>
 8005554:	2800      	cmp	r0, #0
 8005556:	d167      	bne.n	8005628 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8005558:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800555a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800555e:	f022 0202 	bic.w	r2, r2, #2
 8005562:	f042 0202 	orr.w	r2, r2, #2
 8005566:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005568:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800556a:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800556c:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800556e:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005570:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005574:	68a5      	ldr	r5, [r4, #8]
 8005576:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800557a:	d002      	beq.n	8005582 <HAL_ADC_Init+0x4a>
 800557c:	2d01      	cmp	r5, #1
 800557e:	d036      	beq.n	80055ee <HAL_ADC_Init+0xb6>
 8005580:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005582:	7d26      	ldrb	r6, [r4, #20]
 8005584:	2e01      	cmp	r6, #1
 8005586:	d035      	beq.n	80055f4 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8005588:	6826      	ldr	r6, [r4, #0]
 800558a:	6871      	ldr	r1, [r6, #4]
 800558c:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8005590:	4329      	orrs	r1, r5
 8005592:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8005594:	6825      	ldr	r5, [r4, #0]
 8005596:	68ae      	ldr	r6, [r5, #8]
 8005598:	4927      	ldr	r1, [pc, #156]	; (8005638 <HAL_ADC_Init+0x100>)
 800559a:	4031      	ands	r1, r6
 800559c:	4311      	orrs	r1, r2
 800559e:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80055a0:	68a1      	ldr	r1, [r4, #8]
 80055a2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80055a6:	d001      	beq.n	80055ac <HAL_ADC_Init+0x74>
 80055a8:	2901      	cmp	r1, #1
 80055aa:	d102      	bne.n	80055b2 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80055ac:	6923      	ldr	r3, [r4, #16]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80055b2:	6825      	ldr	r5, [r4, #0]
 80055b4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80055b6:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80055ba:	430b      	orrs	r3, r1
 80055bc:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	6899      	ldr	r1, [r3, #8]
 80055c2:	4b1e      	ldr	r3, [pc, #120]	; (800563c <HAL_ADC_Init+0x104>)
 80055c4:	400b      	ands	r3, r1
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d025      	beq.n	8005616 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 80055ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80055cc:	f023 0312 	bic.w	r3, r3, #18
 80055d0:	f043 0310 	orr.w	r3, r3, #16
 80055d4:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 80055de:	2001      	movs	r0, #1
 80055e0:	e027      	b.n	8005632 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 80055e2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80055e4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80055e8:	f7fd fe7e 	bl	80032e8 <HAL_ADC_MspInit>
 80055ec:	e7ab      	b.n	8005546 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80055ee:	f44f 7580 	mov.w	r5, #256	; 0x100
 80055f2:	e7c6      	b.n	8005582 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80055f4:	b931      	cbnz	r1, 8005604 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80055f6:	69a1      	ldr	r1, [r4, #24]
 80055f8:	3901      	subs	r1, #1
 80055fa:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 80055fe:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8005602:	e7c1      	b.n	8005588 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005604:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005606:	f041 0120 	orr.w	r1, r1, #32
 800560a:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800560c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800560e:	f041 0101 	orr.w	r1, r1, #1
 8005612:	62e1      	str	r1, [r4, #44]	; 0x2c
 8005614:	e7b8      	b.n	8005588 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8005616:	2300      	movs	r3, #0
 8005618:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800561a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800561c:	f023 0303 	bic.w	r3, r3, #3
 8005620:	f043 0301 	orr.w	r3, r3, #1
 8005624:	62a3      	str	r3, [r4, #40]	; 0x28
 8005626:	e004      	b.n	8005632 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800562a:	f043 0310 	orr.w	r3, r3, #16
 800562e:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8005630:	2001      	movs	r0, #1
}
 8005632:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005634:	2001      	movs	r0, #1
}
 8005636:	4770      	bx	lr
 8005638:	ffe1f7fd 	.word	0xffe1f7fd
 800563c:	ff1f0efe 	.word	0xff1f0efe

08005640 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005640:	4a07      	ldr	r2, [pc, #28]	; (8005660 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005642:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005644:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005648:	041b      	lsls	r3, r3, #16
 800564a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800564c:	0200      	lsls	r0, r0, #8
 800564e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005652:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8005654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800565c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800565e:	4770      	bx	lr
 8005660:	e000ed00 	.word	0xe000ed00

08005664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005664:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005666:	4b19      	ldr	r3, [pc, #100]	; (80056cc <HAL_NVIC_SetPriority+0x68>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800566e:	f1c3 0c07 	rsb	ip, r3, #7
 8005672:	f1bc 0f04 	cmp.w	ip, #4
 8005676:	bf28      	it	cs
 8005678:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800567c:	f103 0e04 	add.w	lr, r3, #4
 8005680:	f1be 0f06 	cmp.w	lr, #6
 8005684:	d918      	bls.n	80056b8 <HAL_NVIC_SetPriority+0x54>
 8005686:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005688:	f04f 3eff 	mov.w	lr, #4294967295
 800568c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005690:	ea21 010c 	bic.w	r1, r1, ip
 8005694:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005696:	fa0e fe03 	lsl.w	lr, lr, r3
 800569a:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800569e:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80056a0:	2800      	cmp	r0, #0
 80056a2:	db0b      	blt.n	80056bc <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056a4:	0112      	lsls	r2, r2, #4
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80056ac:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80056b0:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80056b4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056b8:	2300      	movs	r3, #0
 80056ba:	e7e5      	b.n	8005688 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056bc:	f000 000f 	and.w	r0, r0, #15
 80056c0:	0112      	lsls	r2, r2, #4
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <HAL_NVIC_SetPriority+0x6c>)
 80056c6:	541a      	strb	r2, [r3, r0]
 80056c8:	e7f4      	b.n	80056b4 <HAL_NVIC_SetPriority+0x50>
 80056ca:	bf00      	nop
 80056cc:	e000ed00 	.word	0xe000ed00
 80056d0:	e000ed14 	.word	0xe000ed14

080056d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80056d4:	2800      	cmp	r0, #0
 80056d6:	db07      	blt.n	80056e8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056d8:	f000 021f 	and.w	r2, r0, #31
 80056dc:	0940      	lsrs	r0, r0, #5
 80056de:	2301      	movs	r3, #1
 80056e0:	4093      	lsls	r3, r2
 80056e2:	4a02      	ldr	r2, [pc, #8]	; (80056ec <HAL_NVIC_EnableIRQ+0x18>)
 80056e4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	e000e100 	.word	0xe000e100

080056f0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80056f0:	2800      	cmp	r0, #0
 80056f2:	db0c      	blt.n	800570e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056f4:	f000 021f 	and.w	r2, r0, #31
 80056f8:	0940      	lsrs	r0, r0, #5
 80056fa:	2301      	movs	r3, #1
 80056fc:	4093      	lsls	r3, r2
 80056fe:	3020      	adds	r0, #32
 8005700:	4a03      	ldr	r2, [pc, #12]	; (8005710 <HAL_NVIC_DisableIRQ+0x20>)
 8005702:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005706:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800570a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800570e:	4770      	bx	lr
 8005710:	e000e100 	.word	0xe000e100

08005714 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005714:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005716:	2401      	movs	r4, #1
 8005718:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800571a:	40ac      	lsls	r4, r5
 800571c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800571e:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005720:	6804      	ldr	r4, [r0, #0]
 8005722:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005724:	6843      	ldr	r3, [r0, #4]
 8005726:	2b10      	cmp	r3, #16
 8005728:	d005      	beq.n	8005736 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800572a:	6803      	ldr	r3, [r0, #0]
 800572c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800572e:	6803      	ldr	r3, [r0, #0]
 8005730:	60da      	str	r2, [r3, #12]
  }
}
 8005732:	bc30      	pop	{r4, r5}
 8005734:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8005736:	6803      	ldr	r3, [r0, #0]
 8005738:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800573a:	6803      	ldr	r3, [r0, #0]
 800573c:	60d9      	str	r1, [r3, #12]
 800573e:	e7f8      	b.n	8005732 <DMA_SetConfig+0x1e>

08005740 <HAL_DMA_Init>:
  if(hdma == NULL)
 8005740:	b360      	cbz	r0, 800579c <HAL_DMA_Init+0x5c>
{
 8005742:	b410      	push	{r4}
 8005744:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005746:	6801      	ldr	r1, [r0, #0]
 8005748:	4b15      	ldr	r3, [pc, #84]	; (80057a0 <HAL_DMA_Init+0x60>)
 800574a:	440b      	add	r3, r1
 800574c:	4815      	ldr	r0, [pc, #84]	; (80057a4 <HAL_DMA_Init+0x64>)
 800574e:	fba0 0303 	umull	r0, r3, r0, r3
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005758:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <HAL_DMA_Init+0x68>)
 800575a:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 800575c:	2302      	movs	r3, #2
 800575e:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8005762:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005764:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8005768:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 800576c:	6853      	ldr	r3, [r2, #4]
 800576e:	6894      	ldr	r4, [r2, #8]
 8005770:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005772:	68d4      	ldr	r4, [r2, #12]
 8005774:	4323      	orrs	r3, r4
 8005776:	6914      	ldr	r4, [r2, #16]
 8005778:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800577a:	6954      	ldr	r4, [r2, #20]
 800577c:	4323      	orrs	r3, r4
 800577e:	6994      	ldr	r4, [r2, #24]
 8005780:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8005782:	69d4      	ldr	r4, [r2, #28]
 8005784:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8005786:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8005788:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800578a:	2000      	movs	r0, #0
 800578c:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800578e:	2301      	movs	r3, #1
 8005790:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8005794:	f882 0020 	strb.w	r0, [r2, #32]
}
 8005798:	bc10      	pop	{r4}
 800579a:	4770      	bx	lr
    return HAL_ERROR;
 800579c:	2001      	movs	r0, #1
}
 800579e:	4770      	bx	lr
 80057a0:	bffdfff8 	.word	0xbffdfff8
 80057a4:	cccccccd 	.word	0xcccccccd
 80057a8:	40020000 	.word	0x40020000

080057ac <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d029      	beq.n	8005804 <HAL_DMA_DeInit+0x58>
{
 80057b0:	b410      	push	{r4}
 80057b2:	4603      	mov	r3, r0
  __HAL_DMA_DISABLE(hdma);
 80057b4:	6801      	ldr	r1, [r0, #0]
 80057b6:	680a      	ldr	r2, [r1, #0]
 80057b8:	f022 0201 	bic.w	r2, r2, #1
 80057bc:	600a      	str	r2, [r1, #0]
  hdma->Instance->CCR  = 0U;
 80057be:	6802      	ldr	r2, [r0, #0]
 80057c0:	2000      	movs	r0, #0
 80057c2:	6010      	str	r0, [r2, #0]
  hdma->Instance->CNDTR = 0U;
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	6050      	str	r0, [r2, #4]
  hdma->Instance->CPAR  = 0U;
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	6090      	str	r0, [r2, #8]
  hdma->Instance->CMAR = 0U;
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	60d0      	str	r0, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057d0:	6819      	ldr	r1, [r3, #0]
 80057d2:	4a0d      	ldr	r2, [pc, #52]	; (8005808 <HAL_DMA_DeInit+0x5c>)
 80057d4:	440a      	add	r2, r1
 80057d6:	490d      	ldr	r1, [pc, #52]	; (800580c <HAL_DMA_DeInit+0x60>)
 80057d8:	fba1 1202 	umull	r1, r2, r1, r2
 80057dc:	0912      	lsrs	r2, r2, #4
 80057de:	0092      	lsls	r2, r2, #2
 80057e0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80057e2:	4c0b      	ldr	r4, [pc, #44]	; (8005810 <HAL_DMA_DeInit+0x64>)
 80057e4:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80057e6:	2101      	movs	r1, #1
 80057e8:	fa01 f202 	lsl.w	r2, r1, r2
 80057ec:	6062      	str	r2, [r4, #4]
  hdma->XferCpltCallback = NULL;
 80057ee:	6298      	str	r0, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80057f0:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80057f2:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80057f4:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057f6:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_RESET;
 80057f8:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 80057fc:	f883 0020 	strb.w	r0, [r3, #32]
}
 8005800:	bc10      	pop	{r4}
 8005802:	4770      	bx	lr
    return HAL_ERROR;
 8005804:	2001      	movs	r0, #1
}
 8005806:	4770      	bx	lr
 8005808:	bffdfff8 	.word	0xbffdfff8
 800580c:	cccccccd 	.word	0xcccccccd
 8005810:	40020000 	.word	0x40020000

08005814 <HAL_DMA_Start_IT>:
{
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8005818:	f890 0020 	ldrb.w	r0, [r0, #32]
 800581c:	2801      	cmp	r0, #1
 800581e:	d032      	beq.n	8005886 <HAL_DMA_Start_IT+0x72>
 8005820:	2001      	movs	r0, #1
 8005822:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8005826:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 800582a:	b2c0      	uxtb	r0, r0
 800582c:	2801      	cmp	r0, #1
 800582e:	d004      	beq.n	800583a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8005830:	2300      	movs	r3, #0
 8005832:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8005836:	2002      	movs	r0, #2
}
 8005838:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800583a:	2002      	movs	r0, #2
 800583c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005840:	2000      	movs	r0, #0
 8005842:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8005844:	6825      	ldr	r5, [r4, #0]
 8005846:	6828      	ldr	r0, [r5, #0]
 8005848:	f020 0001 	bic.w	r0, r0, #1
 800584c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800584e:	4620      	mov	r0, r4
 8005850:	f7ff ff60 	bl	8005714 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8005854:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005856:	b15b      	cbz	r3, 8005870 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005858:	6822      	ldr	r2, [r4, #0]
 800585a:	6813      	ldr	r3, [r2, #0]
 800585c:	f043 030e 	orr.w	r3, r3, #14
 8005860:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8005862:	6822      	ldr	r2, [r4, #0]
 8005864:	6813      	ldr	r3, [r2, #0]
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800586c:	2000      	movs	r0, #0
 800586e:	e7e3      	b.n	8005838 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005870:	6822      	ldr	r2, [r4, #0]
 8005872:	6813      	ldr	r3, [r2, #0]
 8005874:	f023 0304 	bic.w	r3, r3, #4
 8005878:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800587a:	6822      	ldr	r2, [r4, #0]
 800587c:	6813      	ldr	r3, [r2, #0]
 800587e:	f043 030a 	orr.w	r3, r3, #10
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	e7ed      	b.n	8005862 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8005886:	2002      	movs	r0, #2
 8005888:	e7d6      	b.n	8005838 <HAL_DMA_Start_IT+0x24>

0800588a <HAL_DMA_Abort>:
{
 800588a:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800588c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	2a02      	cmp	r2, #2
 8005894:	d006      	beq.n	80058a4 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005896:	2204      	movs	r2, #4
 8005898:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800589a:	2200      	movs	r2, #0
 800589c:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 80058a0:	2001      	movs	r0, #1
 80058a2:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058a4:	6801      	ldr	r1, [r0, #0]
 80058a6:	680a      	ldr	r2, [r1, #0]
 80058a8:	f022 020e 	bic.w	r2, r2, #14
 80058ac:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80058ae:	6801      	ldr	r1, [r0, #0]
 80058b0:	680a      	ldr	r2, [r1, #0]
 80058b2:	f022 0201 	bic.w	r2, r2, #1
 80058b6:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058b8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80058ba:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80058bc:	2101      	movs	r1, #1
 80058be:	fa01 f202 	lsl.w	r2, r1, r2
 80058c2:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 80058c4:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 80058c8:	2000      	movs	r0, #0
 80058ca:	f883 0020 	strb.w	r0, [r3, #32]
}
 80058ce:	4770      	bx	lr

080058d0 <HAL_DMA_Abort_IT>:
{  
 80058d0:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80058d2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d003      	beq.n	80058e4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058dc:	2304      	movs	r3, #4
 80058de:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80058e0:	2001      	movs	r0, #1
}
 80058e2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058e4:	6802      	ldr	r2, [r0, #0]
 80058e6:	6813      	ldr	r3, [r2, #0]
 80058e8:	f023 030e 	bic.w	r3, r3, #14
 80058ec:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80058ee:	6802      	ldr	r2, [r0, #0]
 80058f0:	6813      	ldr	r3, [r2, #0]
 80058f2:	f023 0301 	bic.w	r3, r3, #1
 80058f6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80058f8:	6803      	ldr	r3, [r0, #0]
 80058fa:	4a19      	ldr	r2, [pc, #100]	; (8005960 <HAL_DMA_Abort_IT+0x90>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d014      	beq.n	800592a <HAL_DMA_Abort_IT+0x5a>
 8005900:	3214      	adds	r2, #20
 8005902:	4293      	cmp	r3, r2
 8005904:	d01f      	beq.n	8005946 <HAL_DMA_Abort_IT+0x76>
 8005906:	3214      	adds	r2, #20
 8005908:	4293      	cmp	r3, r2
 800590a:	d01e      	beq.n	800594a <HAL_DMA_Abort_IT+0x7a>
 800590c:	3214      	adds	r2, #20
 800590e:	4293      	cmp	r3, r2
 8005910:	d01e      	beq.n	8005950 <HAL_DMA_Abort_IT+0x80>
 8005912:	3214      	adds	r2, #20
 8005914:	4293      	cmp	r3, r2
 8005916:	d01e      	beq.n	8005956 <HAL_DMA_Abort_IT+0x86>
 8005918:	3214      	adds	r2, #20
 800591a:	4293      	cmp	r3, r2
 800591c:	d002      	beq.n	8005924 <HAL_DMA_Abort_IT+0x54>
 800591e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005922:	e003      	b.n	800592c <HAL_DMA_Abort_IT+0x5c>
 8005924:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005928:	e000      	b.n	800592c <HAL_DMA_Abort_IT+0x5c>
 800592a:	2201      	movs	r2, #1
 800592c:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <HAL_DMA_Abort_IT+0x94>)
 800592e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005930:	2301      	movs	r3, #1
 8005932:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8005936:	2300      	movs	r3, #0
 8005938:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800593c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800593e:	b16b      	cbz	r3, 800595c <HAL_DMA_Abort_IT+0x8c>
      hdma->XferAbortCallback(hdma);
 8005940:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005942:	2000      	movs	r0, #0
 8005944:	e7cd      	b.n	80058e2 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005946:	2210      	movs	r2, #16
 8005948:	e7f0      	b.n	800592c <HAL_DMA_Abort_IT+0x5c>
 800594a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800594e:	e7ed      	b.n	800592c <HAL_DMA_Abort_IT+0x5c>
 8005950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005954:	e7ea      	b.n	800592c <HAL_DMA_Abort_IT+0x5c>
 8005956:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800595a:	e7e7      	b.n	800592c <HAL_DMA_Abort_IT+0x5c>
  HAL_StatusTypeDef status = HAL_OK;
 800595c:	2000      	movs	r0, #0
 800595e:	e7c0      	b.n	80058e2 <HAL_DMA_Abort_IT+0x12>
 8005960:	40020008 	.word	0x40020008
 8005964:	40020000 	.word	0x40020000

08005968 <HAL_DMA_IRQHandler>:
{
 8005968:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800596a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800596c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800596e:	6804      	ldr	r4, [r0, #0]
 8005970:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005972:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005974:	2304      	movs	r3, #4
 8005976:	408b      	lsls	r3, r1
 8005978:	4213      	tst	r3, r2
 800597a:	d035      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x80>
 800597c:	f015 0f04 	tst.w	r5, #4
 8005980:	d032      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	f013 0f20 	tst.w	r3, #32
 8005988:	d103      	bne.n	8005992 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	f023 0304 	bic.w	r3, r3, #4
 8005990:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005992:	6803      	ldr	r3, [r0, #0]
 8005994:	4a43      	ldr	r2, [pc, #268]	; (8005aa4 <HAL_DMA_IRQHandler+0x13c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d014      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x5c>
 800599a:	3214      	adds	r2, #20
 800599c:	4293      	cmp	r3, r2
 800599e:	d018      	beq.n	80059d2 <HAL_DMA_IRQHandler+0x6a>
 80059a0:	3214      	adds	r2, #20
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d017      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x6e>
 80059a6:	3214      	adds	r2, #20
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d017      	beq.n	80059dc <HAL_DMA_IRQHandler+0x74>
 80059ac:	3214      	adds	r2, #20
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d017      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x7a>
 80059b2:	3214      	adds	r2, #20
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d002      	beq.n	80059be <HAL_DMA_IRQHandler+0x56>
 80059b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80059bc:	e003      	b.n	80059c6 <HAL_DMA_IRQHandler+0x5e>
 80059be:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80059c2:	e000      	b.n	80059c6 <HAL_DMA_IRQHandler+0x5e>
 80059c4:	2204      	movs	r2, #4
 80059c6:	4b38      	ldr	r3, [pc, #224]	; (8005aa8 <HAL_DMA_IRQHandler+0x140>)
 80059c8:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80059ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80059cc:	b103      	cbz	r3, 80059d0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 80059ce:	4798      	blx	r3
}
 80059d0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80059d2:	2240      	movs	r2, #64	; 0x40
 80059d4:	e7f7      	b.n	80059c6 <HAL_DMA_IRQHandler+0x5e>
 80059d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059da:	e7f4      	b.n	80059c6 <HAL_DMA_IRQHandler+0x5e>
 80059dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059e0:	e7f1      	b.n	80059c6 <HAL_DMA_IRQHandler+0x5e>
 80059e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80059e6:	e7ee      	b.n	80059c6 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80059e8:	2302      	movs	r3, #2
 80059ea:	408b      	lsls	r3, r1
 80059ec:	4213      	tst	r3, r2
 80059ee:	d03c      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x102>
 80059f0:	f015 0f02 	tst.w	r5, #2
 80059f4:	d039      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	f013 0f20 	tst.w	r3, #32
 80059fc:	d106      	bne.n	8005a0c <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	f023 030a 	bic.w	r3, r3, #10
 8005a04:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a0c:	6803      	ldr	r3, [r0, #0]
 8005a0e:	4a25      	ldr	r2, [pc, #148]	; (8005aa4 <HAL_DMA_IRQHandler+0x13c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d014      	beq.n	8005a3e <HAL_DMA_IRQHandler+0xd6>
 8005a14:	3214      	adds	r2, #20
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d01c      	beq.n	8005a54 <HAL_DMA_IRQHandler+0xec>
 8005a1a:	3214      	adds	r2, #20
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d01b      	beq.n	8005a58 <HAL_DMA_IRQHandler+0xf0>
 8005a20:	3214      	adds	r2, #20
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01b      	beq.n	8005a5e <HAL_DMA_IRQHandler+0xf6>
 8005a26:	3214      	adds	r2, #20
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d01b      	beq.n	8005a64 <HAL_DMA_IRQHandler+0xfc>
 8005a2c:	3214      	adds	r2, #20
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d002      	beq.n	8005a38 <HAL_DMA_IRQHandler+0xd0>
 8005a32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a36:	e003      	b.n	8005a40 <HAL_DMA_IRQHandler+0xd8>
 8005a38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a3c:	e000      	b.n	8005a40 <HAL_DMA_IRQHandler+0xd8>
 8005a3e:	2202      	movs	r2, #2
 8005a40:	4b19      	ldr	r3, [pc, #100]	; (8005aa8 <HAL_DMA_IRQHandler+0x140>)
 8005a42:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8005a44:	2300      	movs	r3, #0
 8005a46:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8005a4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0bf      	beq.n	80059d0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8005a50:	4798      	blx	r3
 8005a52:	e7bd      	b.n	80059d0 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a54:	2220      	movs	r2, #32
 8005a56:	e7f3      	b.n	8005a40 <HAL_DMA_IRQHandler+0xd8>
 8005a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a5c:	e7f0      	b.n	8005a40 <HAL_DMA_IRQHandler+0xd8>
 8005a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a62:	e7ed      	b.n	8005a40 <HAL_DMA_IRQHandler+0xd8>
 8005a64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a68:	e7ea      	b.n	8005a40 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005a6a:	2308      	movs	r3, #8
 8005a6c:	408b      	lsls	r3, r1
 8005a6e:	4213      	tst	r3, r2
 8005a70:	d0ae      	beq.n	80059d0 <HAL_DMA_IRQHandler+0x68>
 8005a72:	f015 0f08 	tst.w	r5, #8
 8005a76:	d0ab      	beq.n	80059d0 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	f023 030e 	bic.w	r3, r3, #14
 8005a7e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005a80:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005a82:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005a84:	2301      	movs	r3, #1
 8005a86:	fa03 f202 	lsl.w	r2, r3, r2
 8005a8a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a8c:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8005a8e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8005a92:	2300      	movs	r3, #0
 8005a94:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8005a98:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d098      	beq.n	80059d0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8005a9e:	4798      	blx	r3
  return;
 8005aa0:	e796      	b.n	80059d0 <HAL_DMA_IRQHandler+0x68>
 8005aa2:	bf00      	nop
 8005aa4:	40020008 	.word	0x40020008
 8005aa8:	40020000 	.word	0x40020000

08005aac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005aac:	b570      	push	{r4, r5, r6, lr}
 8005aae:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005ab0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8005ab2:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ab4:	e0a6      	b.n	8005c04 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005ab6:	4d80      	ldr	r5, [pc, #512]	; (8005cb8 <HAL_GPIO_Init+0x20c>)
 8005ab8:	42ab      	cmp	r3, r5
 8005aba:	d010      	beq.n	8005ade <HAL_GPIO_Init+0x32>
 8005abc:	d907      	bls.n	8005ace <HAL_GPIO_Init+0x22>
 8005abe:	4d7f      	ldr	r5, [pc, #508]	; (8005cbc <HAL_GPIO_Init+0x210>)
 8005ac0:	42ab      	cmp	r3, r5
 8005ac2:	d00c      	beq.n	8005ade <HAL_GPIO_Init+0x32>
 8005ac4:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8005ac8:	42ab      	cmp	r3, r5
 8005aca:	d008      	beq.n	8005ade <HAL_GPIO_Init+0x32>
 8005acc:	e013      	b.n	8005af6 <HAL_GPIO_Init+0x4a>
 8005ace:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005ad2:	42ab      	cmp	r3, r5
 8005ad4:	d003      	beq.n	8005ade <HAL_GPIO_Init+0x32>
 8005ad6:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8005ada:	42ab      	cmp	r3, r5
 8005adc:	d107      	bne.n	8005aee <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005ade:	688b      	ldr	r3, [r1, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d058      	beq.n	8005b96 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d051      	beq.n	8005b8c <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8005ae8:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005aea:	2408      	movs	r4, #8
 8005aec:	e003      	b.n	8005af6 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8005aee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005af2:	42ab      	cmp	r3, r5
 8005af4:	d0f3      	beq.n	8005ade <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005af6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8005afa:	d84e      	bhi.n	8005b9a <HAL_GPIO_Init+0xee>
 8005afc:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005afe:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8005b02:	d84c      	bhi.n	8005b9e <HAL_GPIO_Init+0xf2>
 8005b04:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005b08:	6833      	ldr	r3, [r6, #0]
 8005b0a:	250f      	movs	r5, #15
 8005b0c:	4095      	lsls	r5, r2
 8005b0e:	ea23 0305 	bic.w	r3, r3, r5
 8005b12:	fa04 f202 	lsl.w	r2, r4, r2
 8005b16:	4313      	orrs	r3, r2
 8005b18:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b1a:	684b      	ldr	r3, [r1, #4]
 8005b1c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005b20:	d06e      	beq.n	8005c00 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005b22:	4b67      	ldr	r3, [pc, #412]	; (8005cc0 <HAL_GPIO_Init+0x214>)
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	619a      	str	r2, [r3, #24]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	9301      	str	r3, [sp, #4]
 8005b34:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8005b36:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8005b3a:	1c95      	adds	r5, r2, #2
 8005b3c:	4b61      	ldr	r3, [pc, #388]	; (8005cc4 <HAL_GPIO_Init+0x218>)
 8005b3e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005b42:	f00c 0503 	and.w	r5, ip, #3
 8005b46:	00ad      	lsls	r5, r5, #2
 8005b48:	230f      	movs	r3, #15
 8005b4a:	40ab      	lsls	r3, r5
 8005b4c:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005b50:	4b5d      	ldr	r3, [pc, #372]	; (8005cc8 <HAL_GPIO_Init+0x21c>)
 8005b52:	4298      	cmp	r0, r3
 8005b54:	d029      	beq.n	8005baa <HAL_GPIO_Init+0xfe>
 8005b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b5a:	4298      	cmp	r0, r3
 8005b5c:	f000 808e 	beq.w	8005c7c <HAL_GPIO_Init+0x1d0>
 8005b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b64:	4298      	cmp	r0, r3
 8005b66:	f000 808b 	beq.w	8005c80 <HAL_GPIO_Init+0x1d4>
 8005b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b6e:	4298      	cmp	r0, r3
 8005b70:	d019      	beq.n	8005ba6 <HAL_GPIO_Init+0xfa>
 8005b72:	2304      	movs	r3, #4
 8005b74:	e01a      	b.n	8005bac <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005b76:	68cc      	ldr	r4, [r1, #12]
          break;
 8005b78:	e7bd      	b.n	8005af6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005b7a:	68cc      	ldr	r4, [r1, #12]
 8005b7c:	3404      	adds	r4, #4
          break;
 8005b7e:	e7ba      	b.n	8005af6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005b80:	68cc      	ldr	r4, [r1, #12]
 8005b82:	3408      	adds	r4, #8
          break;
 8005b84:	e7b7      	b.n	8005af6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005b86:	68cc      	ldr	r4, [r1, #12]
 8005b88:	340c      	adds	r4, #12
          break;
 8005b8a:	e7b4      	b.n	8005af6 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8005b8c:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b8e:	2408      	movs	r4, #8
 8005b90:	e7b1      	b.n	8005af6 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005b92:	2400      	movs	r4, #0
 8005b94:	e7af      	b.n	8005af6 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005b96:	2404      	movs	r4, #4
 8005b98:	e7ad      	b.n	8005af6 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b9a:	1d06      	adds	r6, r0, #4
 8005b9c:	e7af      	b.n	8005afe <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005b9e:	f1ac 0208 	sub.w	r2, ip, #8
 8005ba2:	0092      	lsls	r2, r2, #2
 8005ba4:	e7b0      	b.n	8005b08 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e000      	b.n	8005bac <HAL_GPIO_Init+0x100>
 8005baa:	2300      	movs	r3, #0
 8005bac:	40ab      	lsls	r3, r5
 8005bae:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8005bb0:	3202      	adds	r2, #2
 8005bb2:	4d44      	ldr	r5, [pc, #272]	; (8005cc4 <HAL_GPIO_Init+0x218>)
 8005bb4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bb8:	684b      	ldr	r3, [r1, #4]
 8005bba:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005bbe:	d061      	beq.n	8005c84 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005bc0:	4a42      	ldr	r2, [pc, #264]	; (8005ccc <HAL_GPIO_Init+0x220>)
 8005bc2:	6893      	ldr	r3, [r2, #8]
 8005bc4:	ea43 030e 	orr.w	r3, r3, lr
 8005bc8:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bca:	684b      	ldr	r3, [r1, #4]
 8005bcc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005bd0:	d05e      	beq.n	8005c90 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005bd2:	4a3e      	ldr	r2, [pc, #248]	; (8005ccc <HAL_GPIO_Init+0x220>)
 8005bd4:	68d3      	ldr	r3, [r2, #12]
 8005bd6:	ea43 030e 	orr.w	r3, r3, lr
 8005bda:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bdc:	684b      	ldr	r3, [r1, #4]
 8005bde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005be2:	d05b      	beq.n	8005c9c <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005be4:	4a39      	ldr	r2, [pc, #228]	; (8005ccc <HAL_GPIO_Init+0x220>)
 8005be6:	6853      	ldr	r3, [r2, #4]
 8005be8:	ea43 030e 	orr.w	r3, r3, lr
 8005bec:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005bee:	684b      	ldr	r3, [r1, #4]
 8005bf0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005bf4:	d058      	beq.n	8005ca8 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005bf6:	4a35      	ldr	r2, [pc, #212]	; (8005ccc <HAL_GPIO_Init+0x220>)
 8005bf8:	6813      	ldr	r3, [r2, #0]
 8005bfa:	ea43 030e 	orr.w	r3, r3, lr
 8005bfe:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8005c00:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c04:	680b      	ldr	r3, [r1, #0]
 8005c06:	fa33 f20c 	lsrs.w	r2, r3, ip
 8005c0a:	d053      	beq.n	8005cb4 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c12:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8005c16:	ea32 0303 	bics.w	r3, r2, r3
 8005c1a:	d1f1      	bne.n	8005c00 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8005c1c:	684b      	ldr	r3, [r1, #4]
 8005c1e:	2b12      	cmp	r3, #18
 8005c20:	f63f af49 	bhi.w	8005ab6 <HAL_GPIO_Init+0xa>
 8005c24:	2b12      	cmp	r3, #18
 8005c26:	f63f af66 	bhi.w	8005af6 <HAL_GPIO_Init+0x4a>
 8005c2a:	a501      	add	r5, pc, #4	; (adr r5, 8005c30 <HAL_GPIO_Init+0x184>)
 8005c2c:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8005c30:	08005adf 	.word	0x08005adf
 8005c34:	08005b77 	.word	0x08005b77
 8005c38:	08005b81 	.word	0x08005b81
 8005c3c:	08005b93 	.word	0x08005b93
 8005c40:	08005af7 	.word	0x08005af7
 8005c44:	08005af7 	.word	0x08005af7
 8005c48:	08005af7 	.word	0x08005af7
 8005c4c:	08005af7 	.word	0x08005af7
 8005c50:	08005af7 	.word	0x08005af7
 8005c54:	08005af7 	.word	0x08005af7
 8005c58:	08005af7 	.word	0x08005af7
 8005c5c:	08005af7 	.word	0x08005af7
 8005c60:	08005af7 	.word	0x08005af7
 8005c64:	08005af7 	.word	0x08005af7
 8005c68:	08005af7 	.word	0x08005af7
 8005c6c:	08005af7 	.word	0x08005af7
 8005c70:	08005af7 	.word	0x08005af7
 8005c74:	08005b7b 	.word	0x08005b7b
 8005c78:	08005b87 	.word	0x08005b87
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e795      	b.n	8005bac <HAL_GPIO_Init+0x100>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e793      	b.n	8005bac <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005c84:	4a11      	ldr	r2, [pc, #68]	; (8005ccc <HAL_GPIO_Init+0x220>)
 8005c86:	6893      	ldr	r3, [r2, #8]
 8005c88:	ea23 030e 	bic.w	r3, r3, lr
 8005c8c:	6093      	str	r3, [r2, #8]
 8005c8e:	e79c      	b.n	8005bca <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005c90:	4a0e      	ldr	r2, [pc, #56]	; (8005ccc <HAL_GPIO_Init+0x220>)
 8005c92:	68d3      	ldr	r3, [r2, #12]
 8005c94:	ea23 030e 	bic.w	r3, r3, lr
 8005c98:	60d3      	str	r3, [r2, #12]
 8005c9a:	e79f      	b.n	8005bdc <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005c9c:	4a0b      	ldr	r2, [pc, #44]	; (8005ccc <HAL_GPIO_Init+0x220>)
 8005c9e:	6853      	ldr	r3, [r2, #4]
 8005ca0:	ea23 030e 	bic.w	r3, r3, lr
 8005ca4:	6053      	str	r3, [r2, #4]
 8005ca6:	e7a2      	b.n	8005bee <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005ca8:	4a08      	ldr	r2, [pc, #32]	; (8005ccc <HAL_GPIO_Init+0x220>)
 8005caa:	6813      	ldr	r3, [r2, #0]
 8005cac:	ea23 030e 	bic.w	r3, r3, lr
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	e7a5      	b.n	8005c00 <HAL_GPIO_Init+0x154>
  }
}
 8005cb4:	b002      	add	sp, #8
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	10220000 	.word	0x10220000
 8005cbc:	10310000 	.word	0x10310000
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40010000 	.word	0x40010000
 8005cc8:	40010800 	.word	0x40010800
 8005ccc:	40010400 	.word	0x40010400

08005cd0 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8005cd0:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8005cd2:	e06e      	b.n	8005db2 <HAL_GPIO_DeInit+0xe2>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005cd4:	2503      	movs	r5, #3
 8005cd6:	e000      	b.n	8005cda <HAL_GPIO_DeInit+0xa>
 8005cd8:	2500      	movs	r5, #0
 8005cda:	fa05 f404 	lsl.w	r4, r5, r4
 8005cde:	4564      	cmp	r4, ip
 8005ce0:	d044      	beq.n	8005d6c <HAL_GPIO_DeInit+0x9c>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ce2:	2bff      	cmp	r3, #255	; 0xff
 8005ce4:	d85c      	bhi.n	8005da0 <HAL_GPIO_DeInit+0xd0>
 8005ce6:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005ce8:	2bff      	cmp	r3, #255	; 0xff
 8005cea:	d85c      	bhi.n	8005da6 <HAL_GPIO_DeInit+0xd6>
 8005cec:	0095      	lsls	r5, r2, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005cee:	f8de 4000 	ldr.w	r4, [lr]
 8005cf2:	f04f 0c0f 	mov.w	ip, #15
 8005cf6:	fa0c fc05 	lsl.w	ip, ip, r5
 8005cfa:	ea24 040c 	bic.w	r4, r4, ip
 8005cfe:	f04f 0c04 	mov.w	ip, #4
 8005d02:	fa0c fc05 	lsl.w	ip, ip, r5
 8005d06:	ea44 040c 	orr.w	r4, r4, ip
 8005d0a:	f8ce 4000 	str.w	r4, [lr]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005d0e:	68c4      	ldr	r4, [r0, #12]
 8005d10:	ea24 0303 	bic.w	r3, r4, r3
 8005d14:	60c3      	str	r3, [r0, #12]
    }

    position++;
 8005d16:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8005d18:	fa31 f302 	lsrs.w	r3, r1, r2
 8005d1c:	d047      	beq.n	8005dae <HAL_GPIO_DeInit+0xde>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005d1e:	2301      	movs	r3, #1
 8005d20:	4093      	lsls	r3, r2
    if (iocurrent)
 8005d22:	400b      	ands	r3, r1
 8005d24:	d0f7      	beq.n	8005d16 <HAL_GPIO_DeInit+0x46>
      tmp = AFIO->EXTICR[position >> 2u];
 8005d26:	0896      	lsrs	r6, r2, #2
 8005d28:	1cb5      	adds	r5, r6, #2
 8005d2a:	4c27      	ldr	r4, [pc, #156]	; (8005dc8 <HAL_GPIO_DeInit+0xf8>)
 8005d2c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005d30:	f002 0403 	and.w	r4, r2, #3
 8005d34:	00a4      	lsls	r4, r4, #2
 8005d36:	f04f 0c0f 	mov.w	ip, #15
 8005d3a:	fa0c fe04 	lsl.w	lr, ip, r4
 8005d3e:	ea0e 0c05 	and.w	ip, lr, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005d42:	4d22      	ldr	r5, [pc, #136]	; (8005dcc <HAL_GPIO_DeInit+0xfc>)
 8005d44:	42a8      	cmp	r0, r5
 8005d46:	d0c7      	beq.n	8005cd8 <HAL_GPIO_DeInit+0x8>
 8005d48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d4c:	42a8      	cmp	r0, r5
 8005d4e:	d009      	beq.n	8005d64 <HAL_GPIO_DeInit+0x94>
 8005d50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d54:	42a8      	cmp	r0, r5
 8005d56:	d007      	beq.n	8005d68 <HAL_GPIO_DeInit+0x98>
 8005d58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d5c:	42a8      	cmp	r0, r5
 8005d5e:	d0b9      	beq.n	8005cd4 <HAL_GPIO_DeInit+0x4>
 8005d60:	2504      	movs	r5, #4
 8005d62:	e7ba      	b.n	8005cda <HAL_GPIO_DeInit+0xa>
 8005d64:	2501      	movs	r5, #1
 8005d66:	e7b8      	b.n	8005cda <HAL_GPIO_DeInit+0xa>
 8005d68:	2502      	movs	r5, #2
 8005d6a:	e7b6      	b.n	8005cda <HAL_GPIO_DeInit+0xa>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005d6c:	4c18      	ldr	r4, [pc, #96]	; (8005dd0 <HAL_GPIO_DeInit+0x100>)
 8005d6e:	6825      	ldr	r5, [r4, #0]
 8005d70:	ea25 0503 	bic.w	r5, r5, r3
 8005d74:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005d76:	6865      	ldr	r5, [r4, #4]
 8005d78:	ea25 0503 	bic.w	r5, r5, r3
 8005d7c:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005d7e:	68e5      	ldr	r5, [r4, #12]
 8005d80:	ea25 0503 	bic.w	r5, r5, r3
 8005d84:	60e5      	str	r5, [r4, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005d86:	68a5      	ldr	r5, [r4, #8]
 8005d88:	ea25 0503 	bic.w	r5, r5, r3
 8005d8c:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005d8e:	4f0e      	ldr	r7, [pc, #56]	; (8005dc8 <HAL_GPIO_DeInit+0xf8>)
 8005d90:	1cb4      	adds	r4, r6, #2
 8005d92:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005d96:	ea25 050e 	bic.w	r5, r5, lr
 8005d9a:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 8005d9e:	e7a0      	b.n	8005ce2 <HAL_GPIO_DeInit+0x12>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005da0:	f100 0e04 	add.w	lr, r0, #4
 8005da4:	e7a0      	b.n	8005ce8 <HAL_GPIO_DeInit+0x18>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005da6:	f1a2 0508 	sub.w	r5, r2, #8
 8005daa:	00ad      	lsls	r5, r5, #2
 8005dac:	e79f      	b.n	8005cee <HAL_GPIO_DeInit+0x1e>
  }
}
 8005dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 8005db0:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8005db2:	fa31 f302 	lsrs.w	r3, r1, r2
 8005db6:	d005      	beq.n	8005dc4 <HAL_GPIO_DeInit+0xf4>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005db8:	2301      	movs	r3, #1
 8005dba:	4093      	lsls	r3, r2
    if (iocurrent)
 8005dbc:	400b      	ands	r3, r1
 8005dbe:	d0f7      	beq.n	8005db0 <HAL_GPIO_DeInit+0xe0>
{
 8005dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dc2:	e7b0      	b.n	8005d26 <HAL_GPIO_DeInit+0x56>
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40010000 	.word	0x40010000
 8005dcc:	40010800 	.word	0x40010800
 8005dd0:	40010400 	.word	0x40010400

08005dd4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005dd4:	6883      	ldr	r3, [r0, #8]
 8005dd6:	4219      	tst	r1, r3
 8005dd8:	d001      	beq.n	8005dde <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8005dda:	2001      	movs	r0, #1
 8005ddc:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005dde:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8005de0:	4770      	bx	lr

08005de2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005de2:	b10a      	cbz	r2, 8005de8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005de4:	6101      	str	r1, [r0, #16]
 8005de6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005de8:	0409      	lsls	r1, r1, #16
 8005dea:	6101      	str	r1, [r0, #16]
  }
}
 8005dec:	4770      	bx	lr

08005dee <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dee:	6803      	ldr	r3, [r0, #0]
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005df6:	d101      	bne.n	8005dfc <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8005df8:	2000      	movs	r0, #0
}
 8005dfa:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e00:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e02:	2300      	movs	r3, #0
 8005e04:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e06:	2220      	movs	r2, #32
 8005e08:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e0c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e10:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005e12:	f042 0204 	orr.w	r2, r2, #4
 8005e16:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8005e18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8005e1c:	2001      	movs	r0, #1
 8005e1e:	4770      	bx	lr

08005e20 <I2C_WaitOnFlagUntilTimeout>:
{
 8005e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e24:	4606      	mov	r6, r0
 8005e26:	460c      	mov	r4, r1
 8005e28:	4617      	mov	r7, r2
 8005e2a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e2c:	e03b      	b.n	8005ea6 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2e:	f7ff f983 	bl	8005138 <HAL_GetTick>
 8005e32:	9b06      	ldr	r3, [sp, #24]
 8005e34:	1ac0      	subs	r0, r0, r3
 8005e36:	4540      	cmp	r0, r8
 8005e38:	d802      	bhi.n	8005e40 <I2C_WaitOnFlagUntilTimeout+0x20>
 8005e3a:	f1b8 0f00 	cmp.w	r8, #0
 8005e3e:	d132      	bne.n	8005ea6 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e40:	2d01      	cmp	r5, #1
 8005e42:	d018      	beq.n	8005e76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005e44:	6833      	ldr	r3, [r6, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	ea24 0303 	bic.w	r3, r4, r3
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	fab3 f383 	clz	r3, r3
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	429f      	cmp	r7, r3
 8005e56:	d126      	bne.n	8005ea6 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e62:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e66:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8005e68:	f042 0220 	orr.w	r2, r2, #32
 8005e6c:	6432      	str	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005e6e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          return HAL_ERROR;
 8005e72:	2001      	movs	r0, #1
 8005e74:	e027      	b.n	8005ec6 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e76:	6833      	ldr	r3, [r6, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	ea24 0303 	bic.w	r3, r4, r3
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	fab3 f383 	clz	r3, r3
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	e7e5      	b.n	8005e54 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e88:	6833      	ldr	r3, [r6, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	ea24 0c03 	bic.w	ip, r4, r3
 8005e90:	fa1f fc8c 	uxth.w	ip, ip
 8005e94:	fabc fc8c 	clz	ip, ip
 8005e98:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8005e9c:	4567      	cmp	r7, ip
 8005e9e:	d111      	bne.n	8005ec4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8005ea0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005ea4:	d1c3      	bne.n	8005e2e <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ea6:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8005eaa:	2d01      	cmp	r5, #1
 8005eac:	d0ec      	beq.n	8005e88 <I2C_WaitOnFlagUntilTimeout+0x68>
 8005eae:	6833      	ldr	r3, [r6, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	ea24 0c03 	bic.w	ip, r4, r3
 8005eb6:	fa1f fc8c 	uxth.w	ip, ip
 8005eba:	fabc fc8c 	clz	ip, ip
 8005ebe:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8005ec2:	e7eb      	b.n	8005e9c <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8005ec4:	2000      	movs	r0, #0
}
 8005ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005eca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005eca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ece:	4605      	mov	r5, r0
 8005ed0:	460e      	mov	r6, r1
 8005ed2:	4690      	mov	r8, r2
 8005ed4:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ed6:	e053      	b.n	8005f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ede:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ee6:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005eec:	2220      	movs	r2, #32
 8005eee:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ef6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005ef8:	f042 0204 	orr.w	r2, r2, #4
 8005efc:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005efe:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8005f02:	2001      	movs	r0, #1
 8005f04:	e04a      	b.n	8005f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f06:	f7ff f917 	bl	8005138 <HAL_GetTick>
 8005f0a:	eba0 0009 	sub.w	r0, r0, r9
 8005f0e:	4540      	cmp	r0, r8
 8005f10:	d802      	bhi.n	8005f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8005f12:	f1b8 0f00 	cmp.w	r8, #0
 8005f16:	d133      	bne.n	8005f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005f18:	2f01      	cmp	r7, #1
 8005f1a:	d017      	beq.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	ea26 0303 	bic.w	r3, r6, r3
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b00      	subs	r3, #0
 8005f28:	bf18      	it	ne
 8005f2a:	2301      	movne	r3, #1
 8005f2c:	b343      	cbz	r3, 8005f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f32:	2220      	movs	r2, #32
 8005f34:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f38:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f3c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005f3e:	f042 0220 	orr.w	r2, r2, #32
 8005f42:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005f44:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8005f48:	2001      	movs	r0, #1
 8005f4a:	e027      	b.n	8005f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	ea26 0303 	bic.w	r3, r6, r3
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	3b00      	subs	r3, #0
 8005f58:	bf18      	it	ne
 8005f5a:	2301      	movne	r3, #1
 8005f5c:	e7e6      	b.n	8005f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f5e:	682b      	ldr	r3, [r5, #0]
 8005f60:	699c      	ldr	r4, [r3, #24]
 8005f62:	ea26 0404 	bic.w	r4, r6, r4
 8005f66:	b2a4      	uxth	r4, r4
 8005f68:	3c00      	subs	r4, #0
 8005f6a:	bf18      	it	ne
 8005f6c:	2401      	movne	r4, #1
 8005f6e:	b1a4      	cbz	r4, 8005f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	695a      	ldr	r2, [r3, #20]
 8005f74:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005f78:	d1ae      	bne.n	8005ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8005f7a:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005f7e:	d1c2      	bne.n	8005f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f80:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8005f84:	2f01      	cmp	r7, #1
 8005f86:	d1ea      	bne.n	8005f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	695c      	ldr	r4, [r3, #20]
 8005f8c:	ea26 0404 	bic.w	r4, r6, r4
 8005f90:	b2a4      	uxth	r4, r4
 8005f92:	3c00      	subs	r4, #0
 8005f94:	bf18      	it	ne
 8005f96:	2401      	movne	r4, #1
 8005f98:	e7e9      	b.n	8005f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8005f9a:	2000      	movs	r0, #0
}
 8005f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005fa0 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005fa0:	b570      	push	{r4, r5, r6, lr}
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	460d      	mov	r5, r1
 8005fa6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005fb0:	d121      	bne.n	8005ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f7ff ff1b 	bl	8005dee <I2C_IsAcknowledgeFailed>
 8005fb8:	b9f8      	cbnz	r0, 8005ffa <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8005fba:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005fbe:	d0f3      	beq.n	8005fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc0:	f7ff f8ba 	bl	8005138 <HAL_GetTick>
 8005fc4:	1b80      	subs	r0, r0, r6
 8005fc6:	42a8      	cmp	r0, r5
 8005fc8:	d801      	bhi.n	8005fce <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005fca:	2d00      	cmp	r5, #0
 8005fcc:	d1ec      	bne.n	8005fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005fd6:	d1e7      	bne.n	8005fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fe6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005fe8:	f042 0220 	orr.w	r2, r2, #32
 8005fec:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005fee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8005ff2:	2001      	movs	r0, #1
 8005ff4:	e000      	b.n	8005ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8005ff6:	2000      	movs	r0, #0
}
 8005ff8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	e7fc      	b.n	8005ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
	...

08006000 <I2C_RequestMemoryWrite>:
{
 8006000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006004:	b085      	sub	sp, #20
 8006006:	4604      	mov	r4, r0
 8006008:	460d      	mov	r5, r1
 800600a:	4691      	mov	r9, r2
 800600c:	461f      	mov	r7, r3
 800600e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006012:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006014:	6803      	ldr	r3, [r0, #0]
 8006016:	6819      	ldr	r1, [r3, #0]
 8006018:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800601c:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800601e:	9600      	str	r6, [sp, #0]
 8006020:	4643      	mov	r3, r8
 8006022:	2200      	movs	r2, #0
 8006024:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006028:	f7ff fefa 	bl	8005e20 <I2C_WaitOnFlagUntilTimeout>
 800602c:	b960      	cbnz	r0, 8006048 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8006034:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006036:	4633      	mov	r3, r6
 8006038:	4642      	mov	r2, r8
 800603a:	4926      	ldr	r1, [pc, #152]	; (80060d4 <I2C_RequestMemoryWrite+0xd4>)
 800603c:	4620      	mov	r0, r4
 800603e:	f7ff ff44 	bl	8005eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006042:	b168      	cbz	r0, 8006060 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8006044:	2001      	movs	r0, #1
 8006046:	e008      	b.n	800605a <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006050:	d002      	beq.n	8006058 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006056:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8006058:	2003      	movs	r0, #3
}
 800605a:	b005      	add	sp, #20
 800605c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006060:	2300      	movs	r3, #0
 8006062:	9303      	str	r3, [sp, #12]
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	9203      	str	r2, [sp, #12]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	9303      	str	r3, [sp, #12]
 800606e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006070:	4632      	mov	r2, r6
 8006072:	4641      	mov	r1, r8
 8006074:	4620      	mov	r0, r4
 8006076:	f7ff ff93 	bl	8005fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 800607a:	b930      	cbnz	r0, 800608a <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800607c:	2f01      	cmp	r7, #1
 800607e:	d10f      	bne.n	80060a0 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	fa5f f689 	uxtb.w	r6, r9
 8006086:	611e      	str	r6, [r3, #16]
 8006088:	e7e7      	b.n	800605a <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800608a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800608c:	2b04      	cmp	r3, #4
 800608e:	d001      	beq.n	8006094 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8006090:	2001      	movs	r0, #1
 8006092:	e7e2      	b.n	800605a <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006094:	6822      	ldr	r2, [r4, #0]
 8006096:	6813      	ldr	r3, [r2, #0]
 8006098:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	e7f7      	b.n	8006090 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80060a6:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a8:	4632      	mov	r2, r6
 80060aa:	4641      	mov	r1, r8
 80060ac:	4620      	mov	r0, r4
 80060ae:	f7ff ff77 	bl	8005fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80060b2:	b920      	cbnz	r0, 80060be <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	fa5f f689 	uxtb.w	r6, r9
 80060ba:	611e      	str	r6, [r3, #16]
 80060bc:	e7cd      	b.n	800605a <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d001      	beq.n	80060c8 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 80060c4:	2001      	movs	r0, #1
 80060c6:	e7c8      	b.n	800605a <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c8:	6822      	ldr	r2, [r4, #0]
 80060ca:	6813      	ldr	r3, [r2, #0]
 80060cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	e7f7      	b.n	80060c4 <I2C_RequestMemoryWrite+0xc4>
 80060d4:	00010002 	.word	0x00010002

080060d8 <I2C_RequestMemoryRead>:
{
 80060d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	4604      	mov	r4, r0
 80060e0:	460d      	mov	r5, r1
 80060e2:	4616      	mov	r6, r2
 80060e4:	4699      	mov	r9, r3
 80060e6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80060e8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ec:	6802      	ldr	r2, [r0, #0]
 80060ee:	6813      	ldr	r3, [r2, #0]
 80060f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060f4:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060f6:	6803      	ldr	r3, [r0, #0]
 80060f8:	6819      	ldr	r1, [r3, #0]
 80060fa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80060fe:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006100:	f8cd 8000 	str.w	r8, [sp]
 8006104:	463b      	mov	r3, r7
 8006106:	2200      	movs	r2, #0
 8006108:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800610c:	f7ff fe88 	bl	8005e20 <I2C_WaitOnFlagUntilTimeout>
 8006110:	b970      	cbnz	r0, 8006130 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006112:	fa5f fa85 	uxtb.w	sl, r5
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800611c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800611e:	4643      	mov	r3, r8
 8006120:	463a      	mov	r2, r7
 8006122:	4941      	ldr	r1, [pc, #260]	; (8006228 <I2C_RequestMemoryRead+0x150>)
 8006124:	4620      	mov	r0, r4
 8006126:	f7ff fed0 	bl	8005eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800612a:	b168      	cbz	r0, 8006148 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 800612c:	2001      	movs	r0, #1
 800612e:	e008      	b.n	8006142 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006138:	d002      	beq.n	8006140 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800613a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800613e:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8006140:	2003      	movs	r0, #3
}
 8006142:	b004      	add	sp, #16
 8006144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006148:	2300      	movs	r3, #0
 800614a:	9303      	str	r3, [sp, #12]
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	9203      	str	r2, [sp, #12]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	9303      	str	r3, [sp, #12]
 8006156:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006158:	4642      	mov	r2, r8
 800615a:	4639      	mov	r1, r7
 800615c:	4620      	mov	r0, r4
 800615e:	f7ff ff1f 	bl	8005fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006162:	b980      	cbnz	r0, 8006186 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006164:	f1b9 0f01 	cmp.w	r9, #1
 8006168:	d118      	bne.n	800619c <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	b2f6      	uxtb	r6, r6
 800616e:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006170:	4642      	mov	r2, r8
 8006172:	4639      	mov	r1, r7
 8006174:	4620      	mov	r0, r4
 8006176:	f7ff ff13 	bl	8005fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 800617a:	b368      	cbz	r0, 80061d8 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800617c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800617e:	2b04      	cmp	r3, #4
 8006180:	d024      	beq.n	80061cc <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8006182:	2001      	movs	r0, #1
 8006184:	e7dd      	b.n	8006142 <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006188:	2b04      	cmp	r3, #4
 800618a:	d001      	beq.n	8006190 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 800618c:	2001      	movs	r0, #1
 800618e:	e7d8      	b.n	8006142 <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006190:	6822      	ldr	r2, [r4, #0]
 8006192:	6813      	ldr	r3, [r2, #0]
 8006194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	e7f7      	b.n	800618c <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	0a32      	lsrs	r2, r6, #8
 80061a0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a2:	4642      	mov	r2, r8
 80061a4:	4639      	mov	r1, r7
 80061a6:	4620      	mov	r0, r4
 80061a8:	f7ff fefa 	bl	8005fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80061ac:	b918      	cbnz	r0, 80061b6 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	b2f6      	uxtb	r6, r6
 80061b2:	611e      	str	r6, [r3, #16]
 80061b4:	e7dc      	b.n	8006170 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d001      	beq.n	80061c0 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 80061bc:	2001      	movs	r0, #1
 80061be:	e7c0      	b.n	8006142 <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c0:	6822      	ldr	r2, [r4, #0]
 80061c2:	6813      	ldr	r3, [r2, #0]
 80061c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	e7f7      	b.n	80061bc <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061cc:	6822      	ldr	r2, [r4, #0]
 80061ce:	6813      	ldr	r3, [r2, #0]
 80061d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e7d4      	b.n	8006182 <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d8:	6822      	ldr	r2, [r4, #0]
 80061da:	6813      	ldr	r3, [r2, #0]
 80061dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e0:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061e2:	f8cd 8000 	str.w	r8, [sp]
 80061e6:	463b      	mov	r3, r7
 80061e8:	2200      	movs	r2, #0
 80061ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061ee:	4620      	mov	r0, r4
 80061f0:	f7ff fe16 	bl	8005e20 <I2C_WaitOnFlagUntilTimeout>
 80061f4:	b968      	cbnz	r0, 8006212 <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80061f6:	6822      	ldr	r2, [r4, #0]
 80061f8:	f04a 0301 	orr.w	r3, sl, #1
 80061fc:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061fe:	4643      	mov	r3, r8
 8006200:	463a      	mov	r2, r7
 8006202:	4909      	ldr	r1, [pc, #36]	; (8006228 <I2C_RequestMemoryRead+0x150>)
 8006204:	4620      	mov	r0, r4
 8006206:	f7ff fe60 	bl	8005eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800620a:	2800      	cmp	r0, #0
 800620c:	d099      	beq.n	8006142 <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 800620e:	2001      	movs	r0, #1
 8006210:	e797      	b.n	8006142 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f413 7f80 	tst.w	r3, #256	; 0x100
 800621a:	d002      	beq.n	8006222 <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800621c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006220:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8006222:	2003      	movs	r0, #3
 8006224:	e78d      	b.n	8006142 <I2C_RequestMemoryRead+0x6a>
 8006226:	bf00      	nop
 8006228:	00010002 	.word	0x00010002

0800622c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	4604      	mov	r4, r0
 8006230:	460d      	mov	r5, r1
 8006232:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	f013 0f04 	tst.w	r3, #4
 800623c:	d121      	bne.n	8006282 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800623e:	4620      	mov	r0, r4
 8006240:	f7ff fdd5 	bl	8005dee <I2C_IsAcknowledgeFailed>
 8006244:	b9f8      	cbnz	r0, 8006286 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8006246:	f1b5 3fff 	cmp.w	r5, #4294967295
 800624a:	d0f3      	beq.n	8006234 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800624c:	f7fe ff74 	bl	8005138 <HAL_GetTick>
 8006250:	1b80      	subs	r0, r0, r6
 8006252:	42a8      	cmp	r0, r5
 8006254:	d801      	bhi.n	800625a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8006256:	2d00      	cmp	r5, #0
 8006258:	d1ec      	bne.n	8006234 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	f013 0f04 	tst.w	r3, #4
 8006262:	d1e7      	bne.n	8006234 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006264:	2300      	movs	r3, #0
 8006266:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006268:	2220      	movs	r2, #32
 800626a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800626e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006272:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006274:	f042 0220 	orr.w	r2, r2, #32
 8006278:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 800627a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 800627e:	2001      	movs	r0, #1
 8006280:	e000      	b.n	8006284 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8006282:	2000      	movs	r0, #0
}
 8006284:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006286:	2001      	movs	r0, #1
 8006288:	e7fc      	b.n	8006284 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

0800628a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800628a:	b570      	push	{r4, r5, r6, lr}
 800628c:	4604      	mov	r4, r0
 800628e:	460d      	mov	r5, r1
 8006290:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006292:	e014      	b.n	80062be <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006294:	f06f 0210 	mvn.w	r2, #16
 8006298:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800629a:	2300      	movs	r3, #0
 800629c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800629e:	2220      	movs	r2, #32
 80062a0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80062aa:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80062ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80062b0:	2001      	movs	r0, #1
 80062b2:	e025      	b.n	8006300 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80062bc:	d010      	beq.n	80062e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	6958      	ldr	r0, [r3, #20]
 80062c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062c6:	d11a      	bne.n	80062fe <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062c8:	6958      	ldr	r0, [r3, #20]
 80062ca:	f010 0f10 	tst.w	r0, #16
 80062ce:	d1e1      	bne.n	8006294 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d0:	f7fe ff32 	bl	8005138 <HAL_GetTick>
 80062d4:	1b80      	subs	r0, r0, r6
 80062d6:	42a8      	cmp	r0, r5
 80062d8:	d8ec      	bhi.n	80062b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 80062da:	2d00      	cmp	r5, #0
 80062dc:	d1ef      	bne.n	80062be <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 80062de:	e7e9      	b.n	80062b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062e0:	2300      	movs	r3, #0
 80062e2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062e4:	2220      	movs	r2, #32
 80062e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80062f0:	f042 0220 	orr.w	r2, r2, #32
 80062f4:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80062f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80062fa:	2001      	movs	r0, #1
 80062fc:	e000      	b.n	8006300 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 80062fe:	2000      	movs	r0, #0
}
 8006300:	bd70      	pop	{r4, r5, r6, pc}
	...

08006304 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006304:	2800      	cmp	r0, #0
 8006306:	f000 80cc 	beq.w	80064a2 <HAL_I2C_Init+0x19e>
{
 800630a:	b570      	push	{r4, r5, r6, lr}
 800630c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800630e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006312:	2b00      	cmp	r3, #0
 8006314:	d077      	beq.n	8006406 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006316:	2324      	movs	r3, #36	; 0x24
 8006318:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800631c:	6822      	ldr	r2, [r4, #0]
 800631e:	6813      	ldr	r3, [r2, #0]
 8006320:	f023 0301 	bic.w	r3, r3, #1
 8006324:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	6813      	ldr	r3, [r2, #0]
 800632a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800632e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006330:	6822      	ldr	r2, [r4, #0]
 8006332:	6813      	ldr	r3, [r2, #0]
 8006334:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006338:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800633a:	f000 feeb 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800633e:	6862      	ldr	r2, [r4, #4]
 8006340:	4b5a      	ldr	r3, [pc, #360]	; (80064ac <HAL_I2C_Init+0x1a8>)
 8006342:	429a      	cmp	r2, r3
 8006344:	d864      	bhi.n	8006410 <HAL_I2C_Init+0x10c>
 8006346:	4b5a      	ldr	r3, [pc, #360]	; (80064b0 <HAL_I2C_Init+0x1ac>)
 8006348:	4298      	cmp	r0, r3
 800634a:	bf8c      	ite	hi
 800634c:	2300      	movhi	r3, #0
 800634e:	2301      	movls	r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	f040 80a8 	bne.w	80064a6 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8006356:	4957      	ldr	r1, [pc, #348]	; (80064b4 <HAL_I2C_Init+0x1b0>)
 8006358:	fba1 3100 	umull	r3, r1, r1, r0
 800635c:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800635e:	6825      	ldr	r5, [r4, #0]
 8006360:	686a      	ldr	r2, [r5, #4]
 8006362:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006366:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800636a:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800636c:	6821      	ldr	r1, [r4, #0]
 800636e:	6a0a      	ldr	r2, [r1, #32]
 8006370:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006374:	6866      	ldr	r6, [r4, #4]
 8006376:	4d4d      	ldr	r5, [pc, #308]	; (80064ac <HAL_I2C_Init+0x1a8>)
 8006378:	42ae      	cmp	r6, r5
 800637a:	d84f      	bhi.n	800641c <HAL_I2C_Init+0x118>
 800637c:	3301      	adds	r3, #1
 800637e:	4313      	orrs	r3, r2
 8006380:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006382:	6821      	ldr	r1, [r4, #0]
 8006384:	69ca      	ldr	r2, [r1, #28]
 8006386:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 800638a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800638e:	6865      	ldr	r5, [r4, #4]
 8006390:	4b46      	ldr	r3, [pc, #280]	; (80064ac <HAL_I2C_Init+0x1a8>)
 8006392:	429d      	cmp	r5, r3
 8006394:	d84c      	bhi.n	8006430 <HAL_I2C_Init+0x12c>
 8006396:	1e43      	subs	r3, r0, #1
 8006398:	006d      	lsls	r5, r5, #1
 800639a:	fbb3 f3f5 	udiv	r3, r3, r5
 800639e:	3301      	adds	r3, #1
 80063a0:	f640 70fc 	movw	r0, #4092	; 0xffc
 80063a4:	4203      	tst	r3, r0
 80063a6:	d078      	beq.n	800649a <HAL_I2C_Init+0x196>
 80063a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063ac:	431a      	orrs	r2, r3
 80063ae:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80063b0:	6821      	ldr	r1, [r4, #0]
 80063b2:	680b      	ldr	r3, [r1, #0]
 80063b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063b8:	69e2      	ldr	r2, [r4, #28]
 80063ba:	6a20      	ldr	r0, [r4, #32]
 80063bc:	4302      	orrs	r2, r0
 80063be:	4313      	orrs	r3, r2
 80063c0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80063c2:	6821      	ldr	r1, [r4, #0]
 80063c4:	688b      	ldr	r3, [r1, #8]
 80063c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80063ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063ce:	6922      	ldr	r2, [r4, #16]
 80063d0:	68e0      	ldr	r0, [r4, #12]
 80063d2:	4302      	orrs	r2, r0
 80063d4:	4313      	orrs	r3, r2
 80063d6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80063d8:	6821      	ldr	r1, [r4, #0]
 80063da:	68cb      	ldr	r3, [r1, #12]
 80063dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063e0:	6962      	ldr	r2, [r4, #20]
 80063e2:	69a0      	ldr	r0, [r4, #24]
 80063e4:	4302      	orrs	r2, r0
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80063ea:	6822      	ldr	r2, [r4, #0]
 80063ec:	6813      	ldr	r3, [r2, #0]
 80063ee:	f043 0301 	orr.w	r3, r3, #1
 80063f2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063f4:	2000      	movs	r0, #0
 80063f6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063f8:	2320      	movs	r3, #32
 80063fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063fe:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006400:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8006404:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006406:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800640a:	f7fc ffb9 	bl	8003380 <HAL_I2C_MspInit>
 800640e:	e782      	b.n	8006316 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006410:	4b29      	ldr	r3, [pc, #164]	; (80064b8 <HAL_I2C_Init+0x1b4>)
 8006412:	4298      	cmp	r0, r3
 8006414:	bf8c      	ite	hi
 8006416:	2300      	movhi	r3, #0
 8006418:	2301      	movls	r3, #1
 800641a:	e799      	b.n	8006350 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800641c:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8006420:	fb05 f303 	mul.w	r3, r5, r3
 8006424:	4d25      	ldr	r5, [pc, #148]	; (80064bc <HAL_I2C_Init+0x1b8>)
 8006426:	fba5 5303 	umull	r5, r3, r5, r3
 800642a:	099b      	lsrs	r3, r3, #6
 800642c:	3301      	adds	r3, #1
 800642e:	e7a6      	b.n	800637e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006430:	68a6      	ldr	r6, [r4, #8]
 8006432:	b9be      	cbnz	r6, 8006464 <HAL_I2C_Init+0x160>
 8006434:	1e43      	subs	r3, r0, #1
 8006436:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800643a:	fbb3 f3fc 	udiv	r3, r3, ip
 800643e:	3301      	adds	r3, #1
 8006440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006444:	fab3 f383 	clz	r3, r3
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	bb43      	cbnz	r3, 800649e <HAL_I2C_Init+0x19a>
 800644c:	b9c6      	cbnz	r6, 8006480 <HAL_I2C_Init+0x17c>
 800644e:	1e43      	subs	r3, r0, #1
 8006450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006454:	fbb3 f3f5 	udiv	r3, r3, r5
 8006458:	3301      	adds	r3, #1
 800645a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800645e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006462:	e7a3      	b.n	80063ac <HAL_I2C_Init+0xa8>
 8006464:	1e43      	subs	r3, r0, #1
 8006466:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 800646a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800646e:	fbb3 f3fc 	udiv	r3, r3, ip
 8006472:	3301      	adds	r3, #1
 8006474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006478:	fab3 f383 	clz	r3, r3
 800647c:	095b      	lsrs	r3, r3, #5
 800647e:	e7e4      	b.n	800644a <HAL_I2C_Init+0x146>
 8006480:	1e43      	subs	r3, r0, #1
 8006482:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006486:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800648a:	fbb3 f3f5 	udiv	r3, r3, r5
 800648e:	3301      	adds	r3, #1
 8006490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006498:	e788      	b.n	80063ac <HAL_I2C_Init+0xa8>
 800649a:	2304      	movs	r3, #4
 800649c:	e786      	b.n	80063ac <HAL_I2C_Init+0xa8>
 800649e:	2301      	movs	r3, #1
 80064a0:	e784      	b.n	80063ac <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80064a2:	2001      	movs	r0, #1
}
 80064a4:	4770      	bx	lr
    return HAL_ERROR;
 80064a6:	2001      	movs	r0, #1
 80064a8:	e7ac      	b.n	8006404 <HAL_I2C_Init+0x100>
 80064aa:	bf00      	nop
 80064ac:	000186a0 	.word	0x000186a0
 80064b0:	001e847f 	.word	0x001e847f
 80064b4:	431bde83 	.word	0x431bde83
 80064b8:	003d08ff 	.word	0x003d08ff
 80064bc:	10624dd3 	.word	0x10624dd3

080064c0 <HAL_I2C_Mem_Write>:
{
 80064c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064c4:	b083      	sub	sp, #12
 80064c6:	4604      	mov	r4, r0
 80064c8:	460f      	mov	r7, r1
 80064ca:	4690      	mov	r8, r2
 80064cc:	4699      	mov	r9, r3
 80064ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80064d0:	f7fe fe32 	bl	8005138 <HAL_GetTick>
 80064d4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80064d6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80064da:	b2c0      	uxtb	r0, r0
 80064dc:	2820      	cmp	r0, #32
 80064de:	d003      	beq.n	80064e8 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 80064e0:	2002      	movs	r0, #2
}
 80064e2:	b003      	add	sp, #12
 80064e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064e8:	9500      	str	r5, [sp, #0]
 80064ea:	2319      	movs	r3, #25
 80064ec:	2201      	movs	r2, #1
 80064ee:	494b      	ldr	r1, [pc, #300]	; (800661c <HAL_I2C_Mem_Write+0x15c>)
 80064f0:	4620      	mov	r0, r4
 80064f2:	f7ff fc95 	bl	8005e20 <I2C_WaitOnFlagUntilTimeout>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	f040 8089 	bne.w	800660e <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 80064fc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006500:	2b01      	cmp	r3, #1
 8006502:	f000 8086 	beq.w	8006612 <HAL_I2C_Mem_Write+0x152>
 8006506:	2301      	movs	r3, #1
 8006508:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	f012 0f01 	tst.w	r2, #1
 8006514:	d103      	bne.n	800651e <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	f042 0201 	orr.w	r2, r2, #1
 800651c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800651e:	6822      	ldr	r2, [r4, #0]
 8006520:	6813      	ldr	r3, [r2, #0]
 8006522:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006526:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006528:	2321      	movs	r3, #33	; 0x21
 800652a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800652e:	2340      	movs	r3, #64	; 0x40
 8006530:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006534:	2300      	movs	r3, #0
 8006536:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800653a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800653c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8006540:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006542:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006544:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006546:	4b36      	ldr	r3, [pc, #216]	; (8006620 <HAL_I2C_Mem_Write+0x160>)
 8006548:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800654a:	9501      	str	r5, [sp, #4]
 800654c:	9600      	str	r6, [sp, #0]
 800654e:	464b      	mov	r3, r9
 8006550:	4642      	mov	r2, r8
 8006552:	4639      	mov	r1, r7
 8006554:	4620      	mov	r0, r4
 8006556:	f7ff fd53 	bl	8006000 <I2C_RequestMemoryWrite>
 800655a:	2800      	cmp	r0, #0
 800655c:	d15b      	bne.n	8006616 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 800655e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006560:	2b00      	cmp	r3, #0
 8006562:	d035      	beq.n	80065d0 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006564:	462a      	mov	r2, r5
 8006566:	4631      	mov	r1, r6
 8006568:	4620      	mov	r0, r4
 800656a:	f7ff fd19 	bl	8005fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 800656e:	bb20      	cbnz	r0, 80065ba <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006570:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	7812      	ldrb	r2, [r2, #0]
 8006576:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006578:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800657a:	1c53      	adds	r3, r2, #1
 800657c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800657e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8006580:	3901      	subs	r1, #1
 8006582:	b289      	uxth	r1, r1
 8006584:	8521      	strh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006586:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	b29b      	uxth	r3, r3
 800658e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	6958      	ldr	r0, [r3, #20]
 8006594:	f010 0f04 	tst.w	r0, #4
 8006598:	d0e1      	beq.n	800655e <HAL_I2C_Mem_Write+0x9e>
 800659a:	2900      	cmp	r1, #0
 800659c:	d0df      	beq.n	800655e <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800659e:	7852      	ldrb	r2, [r2, #1]
 80065a0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80065a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065a4:	3301      	adds	r3, #1
 80065a6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80065a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80065aa:	3b01      	subs	r3, #1
 80065ac:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80065ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80065b8:	e7d1      	b.n	800655e <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d001      	beq.n	80065c4 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 80065c0:	2001      	movs	r0, #1
 80065c2:	e78e      	b.n	80064e2 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c4:	6822      	ldr	r2, [r4, #0]
 80065c6:	6813      	ldr	r3, [r2, #0]
 80065c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	e7f7      	b.n	80065c0 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065d0:	462a      	mov	r2, r5
 80065d2:	4631      	mov	r1, r6
 80065d4:	4620      	mov	r0, r4
 80065d6:	f7ff fe29 	bl	800622c <I2C_WaitOnBTFFlagUntilTimeout>
 80065da:	b150      	cbz	r0, 80065f2 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d001      	beq.n	80065e6 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 80065e2:	2001      	movs	r0, #1
 80065e4:	e77d      	b.n	80064e2 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e6:	6822      	ldr	r2, [r4, #0]
 80065e8:	6813      	ldr	r3, [r2, #0]
 80065ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	e7f7      	b.n	80065e2 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f2:	6822      	ldr	r2, [r4, #0]
 80065f4:	6813      	ldr	r3, [r2, #0]
 80065f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065fa:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80065fc:	2320      	movs	r3, #32
 80065fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006602:	2300      	movs	r3, #0
 8006604:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8006608:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800660c:	e769      	b.n	80064e2 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 800660e:	2002      	movs	r0, #2
 8006610:	e767      	b.n	80064e2 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8006612:	2002      	movs	r0, #2
 8006614:	e765      	b.n	80064e2 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8006616:	2001      	movs	r0, #1
 8006618:	e763      	b.n	80064e2 <HAL_I2C_Mem_Write+0x22>
 800661a:	bf00      	nop
 800661c:	00100002 	.word	0x00100002
 8006620:	ffff0000 	.word	0xffff0000

08006624 <HAL_I2C_Mem_Read>:
{
 8006624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006628:	b089      	sub	sp, #36	; 0x24
 800662a:	4604      	mov	r4, r0
 800662c:	460f      	mov	r7, r1
 800662e:	4690      	mov	r8, r2
 8006630:	4699      	mov	r9, r3
 8006632:	9e12      	ldr	r6, [sp, #72]	; 0x48
  __IO uint32_t count = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 8006638:	f7fe fd7e 	bl	8005138 <HAL_GetTick>
 800663c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800663e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8006642:	b2c0      	uxtb	r0, r0
 8006644:	2820      	cmp	r0, #32
 8006646:	d004      	beq.n	8006652 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8006648:	2702      	movs	r7, #2
}
 800664a:	4638      	mov	r0, r7
 800664c:	b009      	add	sp, #36	; 0x24
 800664e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006652:	9500      	str	r5, [sp, #0]
 8006654:	2319      	movs	r3, #25
 8006656:	2201      	movs	r2, #1
 8006658:	4981      	ldr	r1, [pc, #516]	; (8006860 <HAL_I2C_Mem_Read+0x23c>)
 800665a:	4620      	mov	r0, r4
 800665c:	f7ff fbe0 	bl	8005e20 <I2C_WaitOnFlagUntilTimeout>
 8006660:	2800      	cmp	r0, #0
 8006662:	f040 8172 	bne.w	800694a <HAL_I2C_Mem_Read+0x326>
    __HAL_LOCK(hi2c);
 8006666:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800666a:	2b01      	cmp	r3, #1
 800666c:	f000 816f 	beq.w	800694e <HAL_I2C_Mem_Read+0x32a>
 8006670:	2301      	movs	r3, #1
 8006672:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	f012 0f01 	tst.w	r2, #1
 800667e:	d103      	bne.n	8006688 <HAL_I2C_Mem_Read+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006688:	6822      	ldr	r2, [r4, #0]
 800668a:	6813      	ldr	r3, [r2, #0]
 800668c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006690:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006692:	2322      	movs	r3, #34	; 0x22
 8006694:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006698:	2340      	movs	r3, #64	; 0x40
 800669a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800669e:	2300      	movs	r3, #0
 80066a0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80066a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066a4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80066a6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80066aa:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066ae:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066b0:	4b6c      	ldr	r3, [pc, #432]	; (8006864 <HAL_I2C_Mem_Read+0x240>)
 80066b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066b4:	9501      	str	r5, [sp, #4]
 80066b6:	9600      	str	r6, [sp, #0]
 80066b8:	464b      	mov	r3, r9
 80066ba:	4642      	mov	r2, r8
 80066bc:	4639      	mov	r1, r7
 80066be:	4620      	mov	r0, r4
 80066c0:	f7ff fd0a 	bl	80060d8 <I2C_RequestMemoryRead>
 80066c4:	4607      	mov	r7, r0
 80066c6:	2800      	cmp	r0, #0
 80066c8:	f040 8143 	bne.w	8006952 <HAL_I2C_Mem_Read+0x32e>
    if (hi2c->XferSize == 0U)
 80066cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80066ce:	b95b      	cbnz	r3, 80066e8 <HAL_I2C_Mem_Read+0xc4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066d0:	9303      	str	r3, [sp, #12]
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	695a      	ldr	r2, [r3, #20]
 80066d6:	9203      	str	r2, [sp, #12]
 80066d8:	699a      	ldr	r2, [r3, #24]
 80066da:	9203      	str	r2, [sp, #12]
 80066dc:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	e0ed      	b.n	80068c4 <HAL_I2C_Mem_Read+0x2a0>
    else if (hi2c->XferSize == 1U)
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d00f      	beq.n	800670c <HAL_I2C_Mem_Read+0xe8>
    else if (hi2c->XferSize == 2U)
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d021      	beq.n	8006734 <HAL_I2C_Mem_Read+0x110>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f0:	6822      	ldr	r2, [r4, #0]
 80066f2:	6813      	ldr	r3, [r2, #0]
 80066f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066f8:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066fa:	2300      	movs	r3, #0
 80066fc:	9306      	str	r3, [sp, #24]
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	695a      	ldr	r2, [r3, #20]
 8006702:	9206      	str	r2, [sp, #24]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	9306      	str	r3, [sp, #24]
 8006708:	9b06      	ldr	r3, [sp, #24]
 800670a:	e0db      	b.n	80068c4 <HAL_I2C_Mem_Read+0x2a0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800670c:	6822      	ldr	r2, [r4, #0]
 800670e:	6813      	ldr	r3, [r2, #0]
 8006710:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006714:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006716:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006718:	2300      	movs	r3, #0
 800671a:	9304      	str	r3, [sp, #16]
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	695a      	ldr	r2, [r3, #20]
 8006720:	9204      	str	r2, [sp, #16]
 8006722:	699a      	ldr	r2, [r3, #24]
 8006724:	9204      	str	r2, [sp, #16]
 8006726:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800672e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006730:	b662      	cpsie	i
}
 8006732:	e0c7      	b.n	80068c4 <HAL_I2C_Mem_Read+0x2a0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006734:	6822      	ldr	r2, [r4, #0]
 8006736:	6813      	ldr	r3, [r2, #0]
 8006738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800673c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800673e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006740:	2300      	movs	r3, #0
 8006742:	9305      	str	r3, [sp, #20]
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	695a      	ldr	r2, [r3, #20]
 8006748:	9205      	str	r2, [sp, #20]
 800674a:	699a      	ldr	r2, [r3, #24]
 800674c:	9205      	str	r2, [sp, #20]
 800674e:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006756:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006758:	b662      	cpsie	i
}
 800675a:	e0b3      	b.n	80068c4 <HAL_I2C_Mem_Read+0x2a0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800675c:	462a      	mov	r2, r5
 800675e:	4631      	mov	r1, r6
 8006760:	4620      	mov	r0, r4
 8006762:	f7ff fd92 	bl	800628a <I2C_WaitOnRXNEFlagUntilTimeout>
 8006766:	2800      	cmp	r0, #0
 8006768:	f040 80f5 	bne.w	8006956 <HAL_I2C_Mem_Read+0x332>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	691a      	ldr	r2, [r3, #16]
 8006770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006772:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006776:	3301      	adds	r3, #1
 8006778:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800677a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800677c:	3b01      	subs	r3, #1
 800677e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006780:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29b      	uxth	r3, r3
 8006788:	8563      	strh	r3, [r4, #42]	; 0x2a
 800678a:	e09b      	b.n	80068c4 <HAL_I2C_Mem_Read+0x2a0>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800678c:	9500      	str	r5, [sp, #0]
 800678e:	4633      	mov	r3, r6
 8006790:	2200      	movs	r2, #0
 8006792:	4935      	ldr	r1, [pc, #212]	; (8006868 <HAL_I2C_Mem_Read+0x244>)
 8006794:	4620      	mov	r0, r4
 8006796:	f7ff fb43 	bl	8005e20 <I2C_WaitOnFlagUntilTimeout>
 800679a:	2800      	cmp	r0, #0
 800679c:	f040 80df 	bne.w	800695e <HAL_I2C_Mem_Read+0x33a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a0:	6822      	ldr	r2, [r4, #0]
 80067a2:	6813      	ldr	r3, [r2, #0]
 80067a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067a8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80067aa:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	691a      	ldr	r2, [r3, #16]
 80067b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80067b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b6:	3301      	adds	r3, #1
 80067b8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80067ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80067bc:	3b01      	subs	r3, #1
 80067be:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80067c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80067ca:	4b28      	ldr	r3, [pc, #160]	; (800686c <HAL_I2C_Mem_Read+0x248>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	08db      	lsrs	r3, r3, #3
 80067d0:	4a27      	ldr	r2, [pc, #156]	; (8006870 <HAL_I2C_Mem_Read+0x24c>)
 80067d2:	fba2 2303 	umull	r2, r3, r2, r3
 80067d6:	0a1b      	lsrs	r3, r3, #8
 80067d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80067dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80067e0:	9307      	str	r3, [sp, #28]
            count--;
 80067e2:	9b07      	ldr	r3, [sp, #28]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 80067e8:	9b07      	ldr	r3, [sp, #28]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d028      	beq.n	8006840 <HAL_I2C_Mem_Read+0x21c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	695a      	ldr	r2, [r3, #20]
 80067f2:	f012 0f04 	tst.w	r2, #4
 80067f6:	d0f4      	beq.n	80067e2 <HAL_I2C_Mem_Read+0x1be>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067fe:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006806:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800680a:	3301      	adds	r3, #1
 800680c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800680e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006810:	3b01      	subs	r3, #1
 8006812:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006814:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006816:	b29b      	uxth	r3, r3
 8006818:	3b01      	subs	r3, #1
 800681a:	b29b      	uxth	r3, r3
 800681c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800681e:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006826:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800682a:	3301      	adds	r3, #1
 800682c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800682e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006830:	3b01      	subs	r3, #1
 8006832:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006834:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29b      	uxth	r3, r3
 800683c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800683e:	e041      	b.n	80068c4 <HAL_I2C_Mem_Read+0x2a0>
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006840:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006842:	2220      	movs	r2, #32
 8006844:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006848:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800684c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800684e:	f042 0220 	orr.w	r2, r2, #32
 8006852:	6422      	str	r2, [r4, #64]	; 0x40
 8006854:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8006856:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 800685a:	2701      	movs	r7, #1
 800685c:	e6f5      	b.n	800664a <HAL_I2C_Mem_Read+0x26>
 800685e:	bf00      	nop
 8006860:	00100002 	.word	0x00100002
 8006864:	ffff0000 	.word	0xffff0000
 8006868:	00010004 	.word	0x00010004
 800686c:	20000000 	.word	0x20000000
 8006870:	14f8b589 	.word	0x14f8b589
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006874:	462a      	mov	r2, r5
 8006876:	4631      	mov	r1, r6
 8006878:	4620      	mov	r0, r4
 800687a:	f7ff fd06 	bl	800628a <I2C_WaitOnRXNEFlagUntilTimeout>
 800687e:	2800      	cmp	r0, #0
 8006880:	d16f      	bne.n	8006962 <HAL_I2C_Mem_Read+0x33e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	691a      	ldr	r2, [r3, #16]
 8006886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006888:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800688a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800688c:	1c53      	adds	r3, r2, #1
 800688e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006890:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006892:	3b01      	subs	r3, #1
 8006894:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006896:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	b29b      	uxth	r3, r3
 800689e:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	6959      	ldr	r1, [r3, #20]
 80068a4:	f011 0f04 	tst.w	r1, #4
 80068a8:	d00c      	beq.n	80068c4 <HAL_I2C_Mem_Read+0x2a0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80068ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068b0:	3301      	adds	r3, #1
 80068b2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80068b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80068b6:	3b01      	subs	r3, #1
 80068b8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80068ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80068bc:	b29b      	uxth	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d036      	beq.n	8006938 <HAL_I2C_Mem_Read+0x314>
      if (hi2c->XferSize <= 3U)
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d8d2      	bhi.n	8006874 <HAL_I2C_Mem_Read+0x250>
        if (hi2c->XferSize == 1U)
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	f43f af44 	beq.w	800675c <HAL_I2C_Mem_Read+0x138>
        else if (hi2c->XferSize == 2U)
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	f47f af59 	bne.w	800678c <HAL_I2C_Mem_Read+0x168>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068da:	9500      	str	r5, [sp, #0]
 80068dc:	4633      	mov	r3, r6
 80068de:	2200      	movs	r2, #0
 80068e0:	4921      	ldr	r1, [pc, #132]	; (8006968 <HAL_I2C_Mem_Read+0x344>)
 80068e2:	4620      	mov	r0, r4
 80068e4:	f7ff fa9c 	bl	8005e20 <I2C_WaitOnFlagUntilTimeout>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d136      	bne.n	800695a <HAL_I2C_Mem_Read+0x336>
  __ASM volatile ("cpsid i" : : : "memory");
 80068ec:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ee:	6822      	ldr	r2, [r4, #0]
 80068f0:	6813      	ldr	r3, [r2, #0]
 80068f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068f6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068fe:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006902:	3301      	adds	r3, #1
 8006904:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006906:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006908:	3b01      	subs	r3, #1
 800690a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800690c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800690e:	b29b      	uxth	r3, r3
 8006910:	3b01      	subs	r3, #1
 8006912:	b29b      	uxth	r3, r3
 8006914:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006916:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800691e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006922:	3301      	adds	r3, #1
 8006924:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006926:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006928:	3b01      	subs	r3, #1
 800692a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800692c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800692e:	b29b      	uxth	r3, r3
 8006930:	3b01      	subs	r3, #1
 8006932:	b29b      	uxth	r3, r3
 8006934:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006936:	e7c5      	b.n	80068c4 <HAL_I2C_Mem_Read+0x2a0>
    hi2c->State = HAL_I2C_STATE_READY;
 8006938:	2320      	movs	r3, #32
 800693a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800693e:	2300      	movs	r3, #0
 8006940:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8006944:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8006948:	e67f      	b.n	800664a <HAL_I2C_Mem_Read+0x26>
      return HAL_BUSY;
 800694a:	2702      	movs	r7, #2
 800694c:	e67d      	b.n	800664a <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 800694e:	2702      	movs	r7, #2
 8006950:	e67b      	b.n	800664a <HAL_I2C_Mem_Read+0x26>
      return HAL_ERROR;
 8006952:	2701      	movs	r7, #1
 8006954:	e679      	b.n	800664a <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8006956:	2701      	movs	r7, #1
 8006958:	e677      	b.n	800664a <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 800695a:	2701      	movs	r7, #1
 800695c:	e675      	b.n	800664a <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 800695e:	2701      	movs	r7, #1
 8006960:	e673      	b.n	800664a <HAL_I2C_Mem_Read+0x26>
          return HAL_ERROR;
 8006962:	2701      	movs	r7, #1
 8006964:	e671      	b.n	800664a <HAL_I2C_Mem_Read+0x26>
 8006966:	bf00      	nop
 8006968:	00010004 	.word	0x00010004

0800696c <HAL_I2C_IsDeviceReady>:
{
 800696c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006970:	b085      	sub	sp, #20
 8006972:	4604      	mov	r4, r0
 8006974:	4688      	mov	r8, r1
 8006976:	4691      	mov	r9, r2
 8006978:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800697a:	f7fe fbdd 	bl	8005138 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800697e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b20      	cmp	r3, #32
 8006986:	d003      	beq.n	8006990 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8006988:	2002      	movs	r0, #2
}
 800698a:	b005      	add	sp, #20
 800698c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006990:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006992:	9000      	str	r0, [sp, #0]
 8006994:	2319      	movs	r3, #25
 8006996:	2201      	movs	r2, #1
 8006998:	4957      	ldr	r1, [pc, #348]	; (8006af8 <HAL_I2C_IsDeviceReady+0x18c>)
 800699a:	4620      	mov	r0, r4
 800699c:	f7ff fa40 	bl	8005e20 <I2C_WaitOnFlagUntilTimeout>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	f040 80a0 	bne.w	8006ae6 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 80069a6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	f000 809d 	beq.w	8006aea <HAL_I2C_IsDeviceReady+0x17e>
 80069b0:	2301      	movs	r3, #1
 80069b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	f012 0f01 	tst.w	r2, #1
 80069be:	d103      	bne.n	80069c8 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	f042 0201 	orr.w	r2, r2, #1
 80069c6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069c8:	6822      	ldr	r2, [r4, #0]
 80069ca:	6813      	ldr	r3, [r2, #0]
 80069cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069d0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80069d2:	2324      	movs	r3, #36	; 0x24
 80069d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069d8:	2700      	movs	r7, #0
 80069da:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069dc:	4b47      	ldr	r3, [pc, #284]	; (8006afc <HAL_I2C_IsDeviceReady+0x190>)
 80069de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069e0:	e040      	b.n	8006a64 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80069ea:	d002      	beq.n	80069f2 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069f0:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80069f2:	2003      	movs	r0, #3
 80069f4:	e7c9      	b.n	800698a <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80069f6:	23a0      	movs	r3, #160	; 0xa0
 80069f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80069fc:	6822      	ldr	r2, [r4, #0]
 80069fe:	6953      	ldr	r3, [r2, #20]
 8006a00:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006a04:	6952      	ldr	r2, [r2, #20]
 8006a06:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006a0a:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
 8006a0e:	fa5f fc8c 	uxtb.w	ip, ip
 8006a12:	f1bc 0fa0 	cmp.w	ip, #160	; 0xa0
 8006a16:	d009      	beq.n	8006a2c <HAL_I2C_IsDeviceReady+0xc0>
 8006a18:	b943      	cbnz	r3, 8006a2c <HAL_I2C_IsDeviceReady+0xc0>
 8006a1a:	b93a      	cbnz	r2, 8006a2c <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a1c:	f7fe fb8c 	bl	8005138 <HAL_GetTick>
 8006a20:	1b80      	subs	r0, r0, r6
 8006a22:	42a8      	cmp	r0, r5
 8006a24:	d8e7      	bhi.n	80069f6 <HAL_I2C_IsDeviceReady+0x8a>
 8006a26:	2d00      	cmp	r5, #0
 8006a28:	d1e8      	bne.n	80069fc <HAL_I2C_IsDeviceReady+0x90>
 8006a2a:	e7e4      	b.n	80069f6 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8006a2c:	2320      	movs	r3, #32
 8006a2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	695a      	ldr	r2, [r3, #20]
 8006a36:	f012 0f02 	tst.w	r2, #2
 8006a3a:	d131      	bne.n	8006aa0 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a42:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a4a:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a4c:	9600      	str	r6, [sp, #0]
 8006a4e:	2319      	movs	r3, #25
 8006a50:	2201      	movs	r2, #1
 8006a52:	4929      	ldr	r1, [pc, #164]	; (8006af8 <HAL_I2C_IsDeviceReady+0x18c>)
 8006a54:	4620      	mov	r0, r4
 8006a56:	f7ff f9e3 	bl	8005e20 <I2C_WaitOnFlagUntilTimeout>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d149      	bne.n	8006af2 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8006a5e:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8006a60:	454f      	cmp	r7, r9
 8006a62:	d238      	bcs.n	8006ad6 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a64:	6822      	ldr	r2, [r4, #0]
 8006a66:	6813      	ldr	r3, [r2, #0]
 8006a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a6c:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006a6e:	9600      	str	r6, [sp, #0]
 8006a70:	462b      	mov	r3, r5
 8006a72:	2200      	movs	r2, #0
 8006a74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f7ff f9d1 	bl	8005e20 <I2C_WaitOnFlagUntilTimeout>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d1af      	bne.n	80069e2 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8006a88:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8006a8a:	f7fe fb55 	bl	8005138 <HAL_GetTick>
 8006a8e:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a90:	6822      	ldr	r2, [r4, #0]
 8006a92:	6953      	ldr	r3, [r2, #20]
 8006a94:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006a98:	6952      	ldr	r2, [r2, #20]
 8006a9a:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006a9e:	e7b4      	b.n	8006a0a <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aa6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	9303      	str	r3, [sp, #12]
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	695a      	ldr	r2, [r3, #20]
 8006ab0:	9203      	str	r2, [sp, #12]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	9303      	str	r3, [sp, #12]
 8006ab6:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ab8:	9600      	str	r6, [sp, #0]
 8006aba:	2319      	movs	r3, #25
 8006abc:	2201      	movs	r2, #1
 8006abe:	490e      	ldr	r1, [pc, #56]	; (8006af8 <HAL_I2C_IsDeviceReady+0x18c>)
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f7ff f9ad 	bl	8005e20 <I2C_WaitOnFlagUntilTimeout>
 8006ac6:	b990      	cbnz	r0, 8006aee <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8006ac8:	2320      	movs	r3, #32
 8006aca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_OK;
 8006ad4:	e759      	b.n	800698a <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ad6:	2320      	movs	r3, #32
 8006ad8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8006adc:	2300      	movs	r3, #0
 8006ade:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	e751      	b.n	800698a <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8006ae6:	2002      	movs	r0, #2
 8006ae8:	e74f      	b.n	800698a <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8006aea:	2002      	movs	r0, #2
 8006aec:	e74d      	b.n	800698a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8006aee:	2001      	movs	r0, #1
 8006af0:	e74b      	b.n	800698a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8006af2:	2001      	movs	r0, #1
 8006af4:	e749      	b.n	800698a <HAL_I2C_IsDeviceReady+0x1e>
 8006af6:	bf00      	nop
 8006af8:	00100002 	.word	0x00100002
 8006afc:	ffff0000 	.word	0xffff0000

08006b00 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006b00:	4b01      	ldr	r3, [pc, #4]	; (8006b08 <HAL_PWR_EnableBkUpAccess+0x8>)
 8006b02:	2201      	movs	r2, #1
 8006b04:	621a      	str	r2, [r3, #32]
}
 8006b06:	4770      	bx	lr
 8006b08:	420e0000 	.word	0x420e0000

08006b0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b0c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b0e:	4b08      	ldr	r3, [pc, #32]	; (8006b30 <RCC_Delay+0x24>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a08      	ldr	r2, [pc, #32]	; (8006b34 <RCC_Delay+0x28>)
 8006b14:	fba2 2303 	umull	r2, r3, r2, r3
 8006b18:	0a5b      	lsrs	r3, r3, #9
 8006b1a:	fb00 f303 	mul.w	r3, r0, r3
 8006b1e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8006b20:	bf00      	nop
  }
  while (Delay --);
 8006b22:	9b01      	ldr	r3, [sp, #4]
 8006b24:	1e5a      	subs	r2, r3, #1
 8006b26:	9201      	str	r2, [sp, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1f9      	bne.n	8006b20 <RCC_Delay+0x14>
}
 8006b2c:	b002      	add	sp, #8
 8006b2e:	4770      	bx	lr
 8006b30:	20000000 	.word	0x20000000
 8006b34:	10624dd3 	.word	0x10624dd3

08006b38 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	f000 81f1 	beq.w	8006f20 <HAL_RCC_OscConfig+0x3e8>
{
 8006b3e:	b570      	push	{r4, r5, r6, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b44:	6803      	ldr	r3, [r0, #0]
 8006b46:	f013 0f01 	tst.w	r3, #1
 8006b4a:	d02c      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b4c:	4b99      	ldr	r3, [pc, #612]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f003 030c 	and.w	r3, r3, #12
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	d01d      	beq.n	8006b94 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006b58:	4b96      	ldr	r3, [pc, #600]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f003 030c 	and.w	r3, r3, #12
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d012      	beq.n	8006b8a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b64:	6863      	ldr	r3, [r4, #4]
 8006b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6a:	d041      	beq.n	8006bf0 <HAL_RCC_OscConfig+0xb8>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d155      	bne.n	8006c1c <HAL_RCC_OscConfig+0xe4>
 8006b70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b74:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	e037      	b.n	8006bfa <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006b8a:	4b8a      	ldr	r3, [pc, #552]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006b92:	d0e7      	beq.n	8006b64 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b94:	4b87      	ldr	r3, [pc, #540]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006b9c:	d003      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x6e>
 8006b9e:	6863      	ldr	r3, [r4, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 81bf 	beq.w	8006f24 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	f013 0f02 	tst.w	r3, #2
 8006bac:	d075      	beq.n	8006c9a <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bae:	4b81      	ldr	r3, [pc, #516]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f013 0f0c 	tst.w	r3, #12
 8006bb6:	d05f      	beq.n	8006c78 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006bb8:	4b7e      	ldr	r3, [pc, #504]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f003 030c 	and.w	r3, r3, #12
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d054      	beq.n	8006c6e <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bc4:	6923      	ldr	r3, [r4, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 808a 	beq.w	8006ce0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8006bcc:	4b7a      	ldr	r3, [pc, #488]	; (8006db8 <HAL_RCC_OscConfig+0x280>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006bd2:	f7fe fab1 	bl	8005138 <HAL_GetTick>
 8006bd6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd8:	4b76      	ldr	r3, [pc, #472]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f013 0f02 	tst.w	r3, #2
 8006be0:	d175      	bne.n	8006cce <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006be2:	f7fe faa9 	bl	8005138 <HAL_GetTick>
 8006be6:	1b40      	subs	r0, r0, r5
 8006be8:	2802      	cmp	r0, #2
 8006bea:	d9f5      	bls.n	8006bd8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8006bec:	2003      	movs	r0, #3
 8006bee:	e19e      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bf0:	4a70      	ldr	r2, [pc, #448]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006bf2:	6813      	ldr	r3, [r2, #0]
 8006bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf8:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bfa:	6863      	ldr	r3, [r4, #4]
 8006bfc:	b343      	cbz	r3, 8006c50 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8006bfe:	f7fe fa9b 	bl	8005138 <HAL_GetTick>
 8006c02:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c04:	4b6b      	ldr	r3, [pc, #428]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006c0c:	d1cb      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c0e:	f7fe fa93 	bl	8005138 <HAL_GetTick>
 8006c12:	1b40      	subs	r0, r0, r5
 8006c14:	2864      	cmp	r0, #100	; 0x64
 8006c16:	d9f5      	bls.n	8006c04 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8006c18:	2003      	movs	r0, #3
 8006c1a:	e188      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c20:	d009      	beq.n	8006c36 <HAL_RCC_OscConfig+0xfe>
 8006c22:	4b64      	ldr	r3, [pc, #400]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	e7e1      	b.n	8006bfa <HAL_RCC_OscConfig+0xc2>
 8006c36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c3a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e7d4      	b.n	8006bfa <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8006c50:	f7fe fa72 	bl	8005138 <HAL_GetTick>
 8006c54:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c56:	4b57      	ldr	r3, [pc, #348]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006c5e:	d0a2      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c60:	f7fe fa6a 	bl	8005138 <HAL_GetTick>
 8006c64:	1b40      	subs	r0, r0, r5
 8006c66:	2864      	cmp	r0, #100	; 0x64
 8006c68:	d9f5      	bls.n	8006c56 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8006c6a:	2003      	movs	r0, #3
 8006c6c:	e15f      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006c6e:	4b51      	ldr	r3, [pc, #324]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006c76:	d1a5      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c78:	4b4e      	ldr	r3, [pc, #312]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f013 0f02 	tst.w	r3, #2
 8006c80:	d003      	beq.n	8006c8a <HAL_RCC_OscConfig+0x152>
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	f040 814f 	bne.w	8006f28 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c8a:	4a4a      	ldr	r2, [pc, #296]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006c8c:	6813      	ldr	r3, [r2, #0]
 8006c8e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006c92:	6961      	ldr	r1, [r4, #20]
 8006c94:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006c98:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	f013 0f08 	tst.w	r3, #8
 8006ca0:	d033      	beq.n	8006d0a <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ca2:	69a3      	ldr	r3, [r4, #24]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d05c      	beq.n	8006d62 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8006ca8:	4b43      	ldr	r3, [pc, #268]	; (8006db8 <HAL_RCC_OscConfig+0x280>)
 8006caa:	2201      	movs	r2, #1
 8006cac:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8006cb0:	f7fe fa42 	bl	8005138 <HAL_GetTick>
 8006cb4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cb6:	4b3f      	ldr	r3, [pc, #252]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	f013 0f02 	tst.w	r3, #2
 8006cbe:	d121      	bne.n	8006d04 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cc0:	f7fe fa3a 	bl	8005138 <HAL_GetTick>
 8006cc4:	1b40      	subs	r0, r0, r5
 8006cc6:	2802      	cmp	r0, #2
 8006cc8:	d9f5      	bls.n	8006cb6 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8006cca:	2003      	movs	r0, #3
 8006ccc:	e12f      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cce:	4a39      	ldr	r2, [pc, #228]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006cd0:	6813      	ldr	r3, [r2, #0]
 8006cd2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006cd6:	6961      	ldr	r1, [r4, #20]
 8006cd8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	e7dc      	b.n	8006c9a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8006ce0:	4b35      	ldr	r3, [pc, #212]	; (8006db8 <HAL_RCC_OscConfig+0x280>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006ce6:	f7fe fa27 	bl	8005138 <HAL_GetTick>
 8006cea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cec:	4b31      	ldr	r3, [pc, #196]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f013 0f02 	tst.w	r3, #2
 8006cf4:	d0d1      	beq.n	8006c9a <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cf6:	f7fe fa1f 	bl	8005138 <HAL_GetTick>
 8006cfa:	1b40      	subs	r0, r0, r5
 8006cfc:	2802      	cmp	r0, #2
 8006cfe:	d9f5      	bls.n	8006cec <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8006d00:	2003      	movs	r0, #3
 8006d02:	e114      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8006d04:	2001      	movs	r0, #1
 8006d06:	f7ff ff01 	bl	8006b0c <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	f013 0f04 	tst.w	r3, #4
 8006d10:	f000 8096 	beq.w	8006e40 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d14:	4b27      	ldr	r3, [pc, #156]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006d1c:	d134      	bne.n	8006d88 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d1e:	4b25      	ldr	r3, [pc, #148]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006d20:	69da      	ldr	r2, [r3, #28]
 8006d22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006d26:	61da      	str	r2, [r3, #28]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	9301      	str	r3, [sp, #4]
 8006d30:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006d32:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d34:	4b21      	ldr	r3, [pc, #132]	; (8006dbc <HAL_RCC_OscConfig+0x284>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006d3c:	d026      	beq.n	8006d8c <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d3e:	68e3      	ldr	r3, [r4, #12]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d03d      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x288>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d153      	bne.n	8006df0 <HAL_RCC_OscConfig+0x2b8>
 8006d48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d4c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8006d50:	6a1a      	ldr	r2, [r3, #32]
 8006d52:	f022 0201 	bic.w	r2, r2, #1
 8006d56:	621a      	str	r2, [r3, #32]
 8006d58:	6a1a      	ldr	r2, [r3, #32]
 8006d5a:	f022 0204 	bic.w	r2, r2, #4
 8006d5e:	621a      	str	r2, [r3, #32]
 8006d60:	e033      	b.n	8006dca <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8006d62:	4b15      	ldr	r3, [pc, #84]	; (8006db8 <HAL_RCC_OscConfig+0x280>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8006d6a:	f7fe f9e5 	bl	8005138 <HAL_GetTick>
 8006d6e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d70:	4b10      	ldr	r3, [pc, #64]	; (8006db4 <HAL_RCC_OscConfig+0x27c>)
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	f013 0f02 	tst.w	r3, #2
 8006d78:	d0c7      	beq.n	8006d0a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d7a:	f7fe f9dd 	bl	8005138 <HAL_GetTick>
 8006d7e:	1b40      	subs	r0, r0, r5
 8006d80:	2802      	cmp	r0, #2
 8006d82:	d9f5      	bls.n	8006d70 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8006d84:	2003      	movs	r0, #3
 8006d86:	e0d2      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8006d88:	2500      	movs	r5, #0
 8006d8a:	e7d3      	b.n	8006d34 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d8c:	4a0b      	ldr	r2, [pc, #44]	; (8006dbc <HAL_RCC_OscConfig+0x284>)
 8006d8e:	6813      	ldr	r3, [r2, #0]
 8006d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d94:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006d96:	f7fe f9cf 	bl	8005138 <HAL_GetTick>
 8006d9a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d9c:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <HAL_RCC_OscConfig+0x284>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006da4:	d1cb      	bne.n	8006d3e <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006da6:	f7fe f9c7 	bl	8005138 <HAL_GetTick>
 8006daa:	1b80      	subs	r0, r0, r6
 8006dac:	2864      	cmp	r0, #100	; 0x64
 8006dae:	d9f5      	bls.n	8006d9c <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8006db0:	2003      	movs	r0, #3
 8006db2:	e0bc      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
 8006db4:	40021000 	.word	0x40021000
 8006db8:	42420000 	.word	0x42420000
 8006dbc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dc0:	4a5f      	ldr	r2, [pc, #380]	; (8006f40 <HAL_RCC_OscConfig+0x408>)
 8006dc2:	6a13      	ldr	r3, [r2, #32]
 8006dc4:	f043 0301 	orr.w	r3, r3, #1
 8006dc8:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006dca:	68e3      	ldr	r3, [r4, #12]
 8006dcc:	b333      	cbz	r3, 8006e1c <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8006dce:	f7fe f9b3 	bl	8005138 <HAL_GetTick>
 8006dd2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd4:	4b5a      	ldr	r3, [pc, #360]	; (8006f40 <HAL_RCC_OscConfig+0x408>)
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	f013 0f02 	tst.w	r3, #2
 8006ddc:	d12f      	bne.n	8006e3e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dde:	f7fe f9ab 	bl	8005138 <HAL_GetTick>
 8006de2:	1b80      	subs	r0, r0, r6
 8006de4:	f241 3388 	movw	r3, #5000	; 0x1388
 8006de8:	4298      	cmp	r0, r3
 8006dea:	d9f3      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8006dec:	2003      	movs	r0, #3
 8006dee:	e09e      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006df0:	2b05      	cmp	r3, #5
 8006df2:	d009      	beq.n	8006e08 <HAL_RCC_OscConfig+0x2d0>
 8006df4:	4b52      	ldr	r3, [pc, #328]	; (8006f40 <HAL_RCC_OscConfig+0x408>)
 8006df6:	6a1a      	ldr	r2, [r3, #32]
 8006df8:	f022 0201 	bic.w	r2, r2, #1
 8006dfc:	621a      	str	r2, [r3, #32]
 8006dfe:	6a1a      	ldr	r2, [r3, #32]
 8006e00:	f022 0204 	bic.w	r2, r2, #4
 8006e04:	621a      	str	r2, [r3, #32]
 8006e06:	e7e0      	b.n	8006dca <HAL_RCC_OscConfig+0x292>
 8006e08:	4b4d      	ldr	r3, [pc, #308]	; (8006f40 <HAL_RCC_OscConfig+0x408>)
 8006e0a:	6a1a      	ldr	r2, [r3, #32]
 8006e0c:	f042 0204 	orr.w	r2, r2, #4
 8006e10:	621a      	str	r2, [r3, #32]
 8006e12:	6a1a      	ldr	r2, [r3, #32]
 8006e14:	f042 0201 	orr.w	r2, r2, #1
 8006e18:	621a      	str	r2, [r3, #32]
 8006e1a:	e7d6      	b.n	8006dca <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8006e1c:	f7fe f98c 	bl	8005138 <HAL_GetTick>
 8006e20:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e22:	4b47      	ldr	r3, [pc, #284]	; (8006f40 <HAL_RCC_OscConfig+0x408>)
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	f013 0f02 	tst.w	r3, #2
 8006e2a:	d008      	beq.n	8006e3e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e2c:	f7fe f984 	bl	8005138 <HAL_GetTick>
 8006e30:	1b80      	subs	r0, r0, r6
 8006e32:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e36:	4298      	cmp	r0, r3
 8006e38:	d9f3      	bls.n	8006e22 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8006e3a:	2003      	movs	r0, #3
 8006e3c:	e077      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8006e3e:	b9e5      	cbnz	r5, 8006e7a <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e40:	69e3      	ldr	r3, [r4, #28]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d072      	beq.n	8006f2c <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e46:	4a3e      	ldr	r2, [pc, #248]	; (8006f40 <HAL_RCC_OscConfig+0x408>)
 8006e48:	6852      	ldr	r2, [r2, #4]
 8006e4a:	f002 020c 	and.w	r2, r2, #12
 8006e4e:	2a08      	cmp	r2, #8
 8006e50:	d056      	beq.n	8006f00 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d017      	beq.n	8006e86 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8006e56:	4b3b      	ldr	r3, [pc, #236]	; (8006f44 <HAL_RCC_OscConfig+0x40c>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8006e5c:	f7fe f96c 	bl	8005138 <HAL_GetTick>
 8006e60:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e62:	4b37      	ldr	r3, [pc, #220]	; (8006f40 <HAL_RCC_OscConfig+0x408>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006e6a:	d047      	beq.n	8006efc <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e6c:	f7fe f964 	bl	8005138 <HAL_GetTick>
 8006e70:	1b00      	subs	r0, r0, r4
 8006e72:	2802      	cmp	r0, #2
 8006e74:	d9f5      	bls.n	8006e62 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8006e76:	2003      	movs	r0, #3
 8006e78:	e059      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e7a:	4a31      	ldr	r2, [pc, #196]	; (8006f40 <HAL_RCC_OscConfig+0x408>)
 8006e7c:	69d3      	ldr	r3, [r2, #28]
 8006e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e82:	61d3      	str	r3, [r2, #28]
 8006e84:	e7dc      	b.n	8006e40 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8006e86:	4b2f      	ldr	r3, [pc, #188]	; (8006f44 <HAL_RCC_OscConfig+0x40c>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8006e8c:	f7fe f954 	bl	8005138 <HAL_GetTick>
 8006e90:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e92:	4b2b      	ldr	r3, [pc, #172]	; (8006f40 <HAL_RCC_OscConfig+0x408>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006e9a:	d006      	beq.n	8006eaa <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e9c:	f7fe f94c 	bl	8005138 <HAL_GetTick>
 8006ea0:	1b40      	subs	r0, r0, r5
 8006ea2:	2802      	cmp	r0, #2
 8006ea4:	d9f5      	bls.n	8006e92 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8006ea6:	2003      	movs	r0, #3
 8006ea8:	e041      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006eaa:	6a23      	ldr	r3, [r4, #32]
 8006eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb0:	d01a      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eb2:	4923      	ldr	r1, [pc, #140]	; (8006f40 <HAL_RCC_OscConfig+0x408>)
 8006eb4:	684b      	ldr	r3, [r1, #4]
 8006eb6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8006eba:	6a22      	ldr	r2, [r4, #32]
 8006ebc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006ebe:	4302      	orrs	r2, r0
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8006ec4:	4b1f      	ldr	r3, [pc, #124]	; (8006f44 <HAL_RCC_OscConfig+0x40c>)
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8006eca:	f7fe f935 	bl	8005138 <HAL_GetTick>
 8006ece:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <HAL_RCC_OscConfig+0x408>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006ed8:	d10e      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eda:	f7fe f92d 	bl	8005138 <HAL_GetTick>
 8006ede:	1b00      	subs	r0, r0, r4
 8006ee0:	2802      	cmp	r0, #2
 8006ee2:	d9f5      	bls.n	8006ed0 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8006ee4:	2003      	movs	r0, #3
 8006ee6:	e022      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006ee8:	4a15      	ldr	r2, [pc, #84]	; (8006f40 <HAL_RCC_OscConfig+0x408>)
 8006eea:	6853      	ldr	r3, [r2, #4]
 8006eec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ef0:	68a1      	ldr	r1, [r4, #8]
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	6053      	str	r3, [r2, #4]
 8006ef6:	e7dc      	b.n	8006eb2 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8006ef8:	2000      	movs	r0, #0
 8006efa:	e018      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
 8006efc:	2000      	movs	r0, #0
 8006efe:	e016      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d016      	beq.n	8006f32 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8006f04:	4b0e      	ldr	r3, [pc, #56]	; (8006f40 <HAL_RCC_OscConfig+0x408>)
 8006f06:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f08:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8006f0c:	6a22      	ldr	r2, [r4, #32]
 8006f0e:	4291      	cmp	r1, r2
 8006f10:	d111      	bne.n	8006f36 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006f12:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006f16:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d10e      	bne.n	8006f3a <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	e006      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8006f20:	2001      	movs	r0, #1
}
 8006f22:	4770      	bx	lr
        return HAL_ERROR;
 8006f24:	2001      	movs	r0, #1
 8006f26:	e002      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8006f28:	2001      	movs	r0, #1
 8006f2a:	e000      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8006f2c:	2000      	movs	r0, #0
}
 8006f2e:	b002      	add	sp, #8
 8006f30:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006f32:	2001      	movs	r0, #1
 8006f34:	e7fb      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8006f36:	2001      	movs	r0, #1
 8006f38:	e7f9      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	e7f7      	b.n	8006f2e <HAL_RCC_OscConfig+0x3f6>
 8006f3e:	bf00      	nop
 8006f40:	40021000 	.word	0x40021000
 8006f44:	42420000 	.word	0x42420000

08006f48 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8006f48:	4b0f      	ldr	r3, [pc, #60]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x40>)
 8006f4a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006f4c:	f003 020c 	and.w	r2, r3, #12
 8006f50:	2a08      	cmp	r2, #8
 8006f52:	d001      	beq.n	8006f58 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8006f54:	480d      	ldr	r0, [pc, #52]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x44>)
}
 8006f56:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006f58:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8006f5c:	490c      	ldr	r1, [pc, #48]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x48>)
 8006f5e:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f60:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006f64:	d00b      	beq.n	8006f7e <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006f66:	4b08      	ldr	r3, [pc, #32]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x40>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8006f6e:	4a09      	ldr	r2, [pc, #36]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x4c>)
 8006f70:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006f72:	4a06      	ldr	r2, [pc, #24]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x44>)
 8006f74:	fb02 f000 	mul.w	r0, r2, r0
 8006f78:	fbb0 f0f3 	udiv	r0, r0, r3
 8006f7c:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f7e:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x50>)
 8006f80:	fb03 f000 	mul.w	r0, r3, r0
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	007a1200 	.word	0x007a1200
 8006f90:	0800c9e8 	.word	0x0800c9e8
 8006f94:	0800c9f8 	.word	0x0800c9f8
 8006f98:	003d0900 	.word	0x003d0900

08006f9c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	f000 80a0 	beq.w	80070e2 <HAL_RCC_ClockConfig+0x146>
{
 8006fa2:	b570      	push	{r4, r5, r6, lr}
 8006fa4:	460d      	mov	r5, r1
 8006fa6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fa8:	4b52      	ldr	r3, [pc, #328]	; (80070f4 <HAL_RCC_ClockConfig+0x158>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0307 	and.w	r3, r3, #7
 8006fb0:	428b      	cmp	r3, r1
 8006fb2:	d20b      	bcs.n	8006fcc <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fb4:	4a4f      	ldr	r2, [pc, #316]	; (80070f4 <HAL_RCC_ClockConfig+0x158>)
 8006fb6:	6813      	ldr	r3, [r2, #0]
 8006fb8:	f023 0307 	bic.w	r3, r3, #7
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fc0:	6813      	ldr	r3, [r2, #0]
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	428b      	cmp	r3, r1
 8006fc8:	f040 808d 	bne.w	80070e6 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	f013 0f02 	tst.w	r3, #2
 8006fd2:	d017      	beq.n	8007004 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fd4:	f013 0f04 	tst.w	r3, #4
 8006fd8:	d004      	beq.n	8006fe4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fda:	4a47      	ldr	r2, [pc, #284]	; (80070f8 <HAL_RCC_ClockConfig+0x15c>)
 8006fdc:	6853      	ldr	r3, [r2, #4]
 8006fde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006fe2:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	f013 0f08 	tst.w	r3, #8
 8006fea:	d004      	beq.n	8006ff6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fec:	4a42      	ldr	r2, [pc, #264]	; (80070f8 <HAL_RCC_ClockConfig+0x15c>)
 8006fee:	6853      	ldr	r3, [r2, #4]
 8006ff0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006ff4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ff6:	4a40      	ldr	r2, [pc, #256]	; (80070f8 <HAL_RCC_ClockConfig+0x15c>)
 8006ff8:	6853      	ldr	r3, [r2, #4]
 8006ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ffe:	68a1      	ldr	r1, [r4, #8]
 8007000:	430b      	orrs	r3, r1
 8007002:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	f013 0f01 	tst.w	r3, #1
 800700a:	d031      	beq.n	8007070 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800700c:	6863      	ldr	r3, [r4, #4]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d020      	beq.n	8007054 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007012:	2b02      	cmp	r3, #2
 8007014:	d025      	beq.n	8007062 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007016:	4a38      	ldr	r2, [pc, #224]	; (80070f8 <HAL_RCC_ClockConfig+0x15c>)
 8007018:	6812      	ldr	r2, [r2, #0]
 800701a:	f012 0f02 	tst.w	r2, #2
 800701e:	d064      	beq.n	80070ea <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007020:	4935      	ldr	r1, [pc, #212]	; (80070f8 <HAL_RCC_ClockConfig+0x15c>)
 8007022:	684a      	ldr	r2, [r1, #4]
 8007024:	f022 0203 	bic.w	r2, r2, #3
 8007028:	4313      	orrs	r3, r2
 800702a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800702c:	f7fe f884 	bl	8005138 <HAL_GetTick>
 8007030:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007032:	4b31      	ldr	r3, [pc, #196]	; (80070f8 <HAL_RCC_ClockConfig+0x15c>)
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f003 030c 	and.w	r3, r3, #12
 800703a:	6862      	ldr	r2, [r4, #4]
 800703c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007040:	d016      	beq.n	8007070 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007042:	f7fe f879 	bl	8005138 <HAL_GetTick>
 8007046:	1b80      	subs	r0, r0, r6
 8007048:	f241 3388 	movw	r3, #5000	; 0x1388
 800704c:	4298      	cmp	r0, r3
 800704e:	d9f0      	bls.n	8007032 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8007050:	2003      	movs	r0, #3
 8007052:	e045      	b.n	80070e0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007054:	4a28      	ldr	r2, [pc, #160]	; (80070f8 <HAL_RCC_ClockConfig+0x15c>)
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800705c:	d1e0      	bne.n	8007020 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800705e:	2001      	movs	r0, #1
 8007060:	e03e      	b.n	80070e0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007062:	4a25      	ldr	r2, [pc, #148]	; (80070f8 <HAL_RCC_ClockConfig+0x15c>)
 8007064:	6812      	ldr	r2, [r2, #0]
 8007066:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800706a:	d1d9      	bne.n	8007020 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800706c:	2001      	movs	r0, #1
 800706e:	e037      	b.n	80070e0 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007070:	4b20      	ldr	r3, [pc, #128]	; (80070f4 <HAL_RCC_ClockConfig+0x158>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	42ab      	cmp	r3, r5
 800707a:	d90a      	bls.n	8007092 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707c:	4a1d      	ldr	r2, [pc, #116]	; (80070f4 <HAL_RCC_ClockConfig+0x158>)
 800707e:	6813      	ldr	r3, [r2, #0]
 8007080:	f023 0307 	bic.w	r3, r3, #7
 8007084:	432b      	orrs	r3, r5
 8007086:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007088:	6813      	ldr	r3, [r2, #0]
 800708a:	f003 0307 	and.w	r3, r3, #7
 800708e:	42ab      	cmp	r3, r5
 8007090:	d12d      	bne.n	80070ee <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	f013 0f04 	tst.w	r3, #4
 8007098:	d006      	beq.n	80070a8 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800709a:	4a17      	ldr	r2, [pc, #92]	; (80070f8 <HAL_RCC_ClockConfig+0x15c>)
 800709c:	6853      	ldr	r3, [r2, #4]
 800709e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80070a2:	68e1      	ldr	r1, [r4, #12]
 80070a4:	430b      	orrs	r3, r1
 80070a6:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	f013 0f08 	tst.w	r3, #8
 80070ae:	d007      	beq.n	80070c0 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80070b0:	4a11      	ldr	r2, [pc, #68]	; (80070f8 <HAL_RCC_ClockConfig+0x15c>)
 80070b2:	6853      	ldr	r3, [r2, #4]
 80070b4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80070b8:	6921      	ldr	r1, [r4, #16]
 80070ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80070be:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070c0:	f7ff ff42 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 80070c4:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <HAL_RCC_ClockConfig+0x15c>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80070cc:	4a0b      	ldr	r2, [pc, #44]	; (80070fc <HAL_RCC_ClockConfig+0x160>)
 80070ce:	5cd3      	ldrb	r3, [r2, r3]
 80070d0:	40d8      	lsrs	r0, r3
 80070d2:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <HAL_RCC_ClockConfig+0x164>)
 80070d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80070d6:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <HAL_RCC_ClockConfig+0x168>)
 80070d8:	6818      	ldr	r0, [r3, #0]
 80070da:	f7fc fb0b 	bl	80036f4 <HAL_InitTick>
  return HAL_OK;
 80070de:	2000      	movs	r0, #0
}
 80070e0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80070e2:	2001      	movs	r0, #1
}
 80070e4:	4770      	bx	lr
    return HAL_ERROR;
 80070e6:	2001      	movs	r0, #1
 80070e8:	e7fa      	b.n	80070e0 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80070ea:	2001      	movs	r0, #1
 80070ec:	e7f8      	b.n	80070e0 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 80070ee:	2001      	movs	r0, #1
 80070f0:	e7f6      	b.n	80070e0 <HAL_RCC_ClockConfig+0x144>
 80070f2:	bf00      	nop
 80070f4:	40022000 	.word	0x40022000
 80070f8:	40021000 	.word	0x40021000
 80070fc:	0800c894 	.word	0x0800c894
 8007100:	20000000 	.word	0x20000000
 8007104:	20000008 	.word	0x20000008

08007108 <HAL_RCC_GetHCLKFreq>:
}
 8007108:	4b01      	ldr	r3, [pc, #4]	; (8007110 <HAL_RCC_GetHCLKFreq+0x8>)
 800710a:	6818      	ldr	r0, [r3, #0]
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	20000000 	.word	0x20000000

08007114 <HAL_RCC_GetPCLK1Freq>:
{
 8007114:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007116:	f7ff fff7 	bl	8007108 <HAL_RCC_GetHCLKFreq>
 800711a:	4b04      	ldr	r3, [pc, #16]	; (800712c <HAL_RCC_GetPCLK1Freq+0x18>)
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007122:	4a03      	ldr	r2, [pc, #12]	; (8007130 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007124:	5cd3      	ldrb	r3, [r2, r3]
}
 8007126:	40d8      	lsrs	r0, r3
 8007128:	bd08      	pop	{r3, pc}
 800712a:	bf00      	nop
 800712c:	40021000 	.word	0x40021000
 8007130:	0800c8a4 	.word	0x0800c8a4

08007134 <HAL_RCC_GetPCLK2Freq>:
{
 8007134:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007136:	f7ff ffe7 	bl	8007108 <HAL_RCC_GetHCLKFreq>
 800713a:	4b04      	ldr	r3, [pc, #16]	; (800714c <HAL_RCC_GetPCLK2Freq+0x18>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007142:	4a03      	ldr	r2, [pc, #12]	; (8007150 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007144:	5cd3      	ldrb	r3, [r2, r3]
}
 8007146:	40d8      	lsrs	r0, r3
 8007148:	bd08      	pop	{r3, pc}
 800714a:	bf00      	nop
 800714c:	40021000 	.word	0x40021000
 8007150:	0800c8a4 	.word	0x0800c8a4

08007154 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007154:	230f      	movs	r3, #15
 8007156:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007158:	4b0b      	ldr	r3, [pc, #44]	; (8007188 <HAL_RCC_GetClockConfig+0x34>)
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	f002 0203 	and.w	r2, r2, #3
 8007160:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007168:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007170:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	08db      	lsrs	r3, r3, #3
 8007176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800717a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800717c:	4b03      	ldr	r3, [pc, #12]	; (800718c <HAL_RCC_GetClockConfig+0x38>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	600b      	str	r3, [r1, #0]
}
 8007186:	4770      	bx	lr
 8007188:	40021000 	.word	0x40021000
 800718c:	40022000 	.word	0x40022000

08007190 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007196:	6803      	ldr	r3, [r0, #0]
 8007198:	f013 0f01 	tst.w	r3, #1
 800719c:	d036      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800719e:	4b3f      	ldr	r3, [pc, #252]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80071a6:	d149      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071a8:	4b3c      	ldr	r3, [pc, #240]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80071aa:	69da      	ldr	r2, [r3, #28]
 80071ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80071b0:	61da      	str	r2, [r3, #28]
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80071bc:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071be:	4b38      	ldr	r3, [pc, #224]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80071c6:	d03b      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071c8:	4b34      	ldr	r3, [pc, #208]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80071ca:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071cc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80071d0:	d013      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80071d2:	6862      	ldr	r2, [r4, #4]
 80071d4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80071d8:	429a      	cmp	r2, r3
 80071da:	d00e      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071dc:	4a2f      	ldr	r2, [pc, #188]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80071de:	6a13      	ldr	r3, [r2, #32]
 80071e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071e4:	492f      	ldr	r1, [pc, #188]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80071e6:	2601      	movs	r6, #1
 80071e8:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071ec:	2600      	movs	r6, #0
 80071ee:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80071f2:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80071f4:	f013 0f01 	tst.w	r3, #1
 80071f8:	d136      	bne.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071fa:	4a28      	ldr	r2, [pc, #160]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80071fc:	6a13      	ldr	r3, [r2, #32]
 80071fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007202:	6861      	ldr	r1, [r4, #4]
 8007204:	430b      	orrs	r3, r1
 8007206:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007208:	2d00      	cmp	r5, #0
 800720a:	d13e      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	f013 0f02 	tst.w	r3, #2
 8007212:	d006      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007214:	4a21      	ldr	r2, [pc, #132]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8007216:	6853      	ldr	r3, [r2, #4]
 8007218:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800721c:	68a1      	ldr	r1, [r4, #8]
 800721e:	430b      	orrs	r3, r1
 8007220:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	f013 0f10 	tst.w	r3, #16
 8007228:	d034      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800722a:	4a1c      	ldr	r2, [pc, #112]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800722c:	6853      	ldr	r3, [r2, #4]
 800722e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007232:	68e1      	ldr	r1, [r4, #12]
 8007234:	430b      	orrs	r3, r1
 8007236:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007238:	2000      	movs	r0, #0
 800723a:	e02c      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 800723c:	2500      	movs	r5, #0
 800723e:	e7be      	b.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007240:	4a17      	ldr	r2, [pc, #92]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8007242:	6813      	ldr	r3, [r2, #0]
 8007244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007248:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800724a:	f7fd ff75 	bl	8005138 <HAL_GetTick>
 800724e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007250:	4b13      	ldr	r3, [pc, #76]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007258:	d1b6      	bne.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800725a:	f7fd ff6d 	bl	8005138 <HAL_GetTick>
 800725e:	1b80      	subs	r0, r0, r6
 8007260:	2864      	cmp	r0, #100	; 0x64
 8007262:	d9f5      	bls.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8007264:	2003      	movs	r0, #3
 8007266:	e016      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8007268:	f7fd ff66 	bl	8005138 <HAL_GetTick>
 800726c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800726e:	4b0b      	ldr	r3, [pc, #44]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	f013 0f02 	tst.w	r3, #2
 8007276:	d1c0      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007278:	f7fd ff5e 	bl	8005138 <HAL_GetTick>
 800727c:	1b80      	subs	r0, r0, r6
 800727e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007282:	4298      	cmp	r0, r3
 8007284:	d9f3      	bls.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8007286:	2003      	movs	r0, #3
 8007288:	e005      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 800728a:	69d3      	ldr	r3, [r2, #28]
 800728c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007290:	61d3      	str	r3, [r2, #28]
 8007292:	e7bb      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8007294:	2000      	movs	r0, #0
}
 8007296:	b002      	add	sp, #8
 8007298:	bd70      	pop	{r4, r5, r6, pc}
 800729a:	bf00      	nop
 800729c:	40021000 	.word	0x40021000
 80072a0:	40007000 	.word	0x40007000
 80072a4:	42420000 	.word	0x42420000

080072a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072a8:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80072aa:	2802      	cmp	r0, #2
 80072ac:	d04e      	beq.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80072ae:	2810      	cmp	r0, #16
 80072b0:	d003      	beq.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 80072b2:	2801      	cmp	r0, #1
 80072b4:	d028      	beq.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80072b6:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 80072b8:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 80072ba:	4b2b      	ldr	r3, [pc, #172]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80072bc:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80072c4:	d0f8      	beq.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80072c6:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80072ca:	4928      	ldr	r1, [pc, #160]	; (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80072cc:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80072ce:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80072d2:	d015      	beq.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80072d4:	4b24      	ldr	r3, [pc, #144]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80072dc:	4a24      	ldr	r2, [pc, #144]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 80072de:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80072e0:	4b24      	ldr	r3, [pc, #144]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 80072e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80072e6:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80072ea:	4b1f      	ldr	r3, [pc, #124]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80072f2:	d1e1      	bne.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 80072f4:	0040      	lsls	r0, r0, #1
 80072f6:	4b20      	ldr	r3, [pc, #128]	; (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 80072f8:	fba3 3000 	umull	r3, r0, r3, r0
 80072fc:	0840      	lsrs	r0, r0, #1
 80072fe:	e7db      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007300:	4b1e      	ldr	r3, [pc, #120]	; (800737c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8007302:	fb03 f000 	mul.w	r0, r3, r0
 8007306:	e7f0      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      temp_reg = RCC->BDCR;
 8007308:	4b17      	ldr	r3, [pc, #92]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800730a:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800730c:	f240 3202 	movw	r2, #770	; 0x302
 8007310:	401a      	ands	r2, r3
 8007312:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8007316:	d024      	beq.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800731c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007320:	d004      	beq.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007326:	d009      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 8007328:	2000      	movs	r0, #0
 800732a:	e7c5      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800732c:	4a0e      	ldr	r2, [pc, #56]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800732e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007330:	f012 0f02 	tst.w	r2, #2
 8007334:	d0f5      	beq.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSI_VALUE;
 8007336:	f649 4040 	movw	r0, #40000	; 0x9c40
 800733a:	e7bd      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800733c:	4b0a      	ldr	r3, [pc, #40]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800733e:	6818      	ldr	r0, [r3, #0]
 8007340:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8007344:	d0b8      	beq.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = HSE_VALUE / 128U;
 8007346:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 800734a:	e7b5      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800734c:	f7ff fef2 	bl	8007134 <HAL_RCC_GetPCLK2Freq>
 8007350:	4b05      	ldr	r3, [pc, #20]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8007358:	3301      	adds	r3, #1
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8007360:	e7aa      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = LSE_VALUE;
 8007362:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007366:	e7a7      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8007368:	40021000 	.word	0x40021000
 800736c:	0800c9fc 	.word	0x0800c9fc
 8007370:	0800ca0c 	.word	0x0800ca0c
 8007374:	007a1200 	.word	0x007a1200
 8007378:	aaaaaaab 	.word	0xaaaaaaab
 800737c:	003d0900 	.word	0x003d0900

08007380 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8007380:	b500      	push	{lr}
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007382:	6803      	ldr	r3, [r0, #0]
 8007384:	6999      	ldr	r1, [r3, #24]
 8007386:	fa1f fe81 	uxth.w	lr, r1
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800738a:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800738c:	699a      	ldr	r2, [r3, #24]
 800738e:	fa1f fc82 	uxth.w	ip, r2

  if (high1 != high2)
 8007392:	45e6      	cmp	lr, ip
 8007394:	d005      	beq.n	80073a2 <RTC_ReadTimeCounter+0x22>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8007396:	69d8      	ldr	r0, [r3, #28]
 8007398:	b280      	uxth	r0, r0
 800739a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
  }

  return timecounter;
}
 800739e:	f85d fb04 	ldr.w	pc, [sp], #4
    timecounter = (((uint32_t) high1 << 16U) | low);
 80073a2:	b280      	uxth	r0, r0
 80073a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
  return timecounter;
 80073a8:	e7f9      	b.n	800739e <RTC_ReadTimeCounter+0x1e>

080073aa <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80073aa:	6803      	ldr	r3, [r0, #0]
 80073ac:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 80073b0:	b29b      	uxth	r3, r3
}
 80073b2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80073b6:	4770      	bx	lr

080073b8 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80073b8:	0903      	lsrs	r3, r0, #4
 80073ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80073be:	f000 000f 	and.w	r0, r0, #15
 80073c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80073c6:	b2c0      	uxtb	r0, r0
 80073c8:	4770      	bx	lr
	...

080073cc <RTC_WeekDayNum>:
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 80073cc:	f500 6cfa 	add.w	ip, r0, #2000	; 0x7d0

  if (nMonth < 3U)
 80073d0:	2902      	cmp	r1, #2
 80073d2:	d821      	bhi.n	8007418 <RTC_WeekDayNum+0x4c>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80073d4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80073d8:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 80073dc:	4b1e      	ldr	r3, [pc, #120]	; (8007458 <RTC_WeekDayNum+0x8c>)
 80073de:	fba3 3101 	umull	r3, r1, r3, r1
 80073e2:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 80073e6:	4463      	add	r3, ip
 80073e8:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 80073ec:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 80073f0:	4a1a      	ldr	r2, [pc, #104]	; (800745c <RTC_WeekDayNum+0x90>)
 80073f2:	fba2 2000 	umull	r2, r0, r2, r0
 80073f6:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
 80073fa:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
 80073fe:	3304      	adds	r3, #4
 8007400:	4817      	ldr	r0, [pc, #92]	; (8007460 <RTC_WeekDayNum+0x94>)
 8007402:	fba0 2003 	umull	r2, r0, r0, r3
 8007406:	1a1a      	subs	r2, r3, r0
 8007408:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 800740c:	0880      	lsrs	r0, r0, #2
 800740e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007412:	1a18      	subs	r0, r3, r0
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
  }

  return (uint8_t)weekday;
}
 8007414:	b2c0      	uxtb	r0, r0
 8007416:	4770      	bx	lr
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007418:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800741c:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 8007420:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <RTC_WeekDayNum+0x8c>)
 8007422:	fba3 3101 	umull	r3, r1, r3, r1
 8007426:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 800742a:	4463      	add	r3, ip
 800742c:	eb03 039c 	add.w	r3, r3, ip, lsr #2
 8007430:	4a0a      	ldr	r2, [pc, #40]	; (800745c <RTC_WeekDayNum+0x90>)
 8007432:	fba2 120c 	umull	r1, r2, r2, ip
 8007436:	eba3 1352 	sub.w	r3, r3, r2, lsr #5
 800743a:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 800743e:	3302      	adds	r3, #2
 8007440:	4807      	ldr	r0, [pc, #28]	; (8007460 <RTC_WeekDayNum+0x94>)
 8007442:	fba0 2003 	umull	r2, r0, r0, r3
 8007446:	1a1a      	subs	r2, r3, r0
 8007448:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 800744c:	0880      	lsrs	r0, r0, #2
 800744e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007452:	1a18      	subs	r0, r3, r0
 8007454:	e7de      	b.n	8007414 <RTC_WeekDayNum+0x48>
 8007456:	bf00      	nop
 8007458:	38e38e39 	.word	0x38e38e39
 800745c:	51eb851f 	.word	0x51eb851f
 8007460:	24924925 	.word	0x24924925

08007464 <RTC_EnterInitMode>:
{
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8007468:	f7fd fe66 	bl	8005138 <HAL_GetTick>
 800746c:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	f012 0f20 	tst.w	r2, #32
 8007476:	d107      	bne.n	8007488 <RTC_EnterInitMode+0x24>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007478:	f7fd fe5e 	bl	8005138 <HAL_GetTick>
 800747c:	1b40      	subs	r0, r0, r5
 800747e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007482:	d9f4      	bls.n	800746e <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8007484:	2003      	movs	r0, #3
 8007486:	e004      	b.n	8007492 <RTC_EnterInitMode+0x2e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	f042 0210 	orr.w	r2, r2, #16
 800748e:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8007490:	2000      	movs	r0, #0
}
 8007492:	bd38      	pop	{r3, r4, r5, pc}

08007494 <RTC_ExitInitMode>:
{
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007498:	6802      	ldr	r2, [r0, #0]
 800749a:	6853      	ldr	r3, [r2, #4]
 800749c:	f023 0310 	bic.w	r3, r3, #16
 80074a0:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80074a2:	f7fd fe49 	bl	8005138 <HAL_GetTick>
 80074a6:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f013 0f20 	tst.w	r3, #32
 80074b0:	d107      	bne.n	80074c2 <RTC_ExitInitMode+0x2e>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80074b2:	f7fd fe41 	bl	8005138 <HAL_GetTick>
 80074b6:	1b40      	subs	r0, r0, r5
 80074b8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80074bc:	d9f4      	bls.n	80074a8 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80074be:	2003      	movs	r0, #3
 80074c0:	e000      	b.n	80074c4 <RTC_ExitInitMode+0x30>
  return HAL_OK;
 80074c2:	2000      	movs	r0, #0
}
 80074c4:	bd38      	pop	{r3, r4, r5, pc}

080074c6 <RTC_WriteTimeCounter>:
{
 80074c6:	b538      	push	{r3, r4, r5, lr}
 80074c8:	4605      	mov	r5, r0
 80074ca:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80074cc:	f7ff ffca 	bl	8007464 <RTC_EnterInitMode>
 80074d0:	b108      	cbz	r0, 80074d6 <RTC_WriteTimeCounter+0x10>
    status = HAL_ERROR;
 80074d2:	2001      	movs	r0, #1
}
 80074d4:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80074d6:	682b      	ldr	r3, [r5, #0]
 80074d8:	0c22      	lsrs	r2, r4, #16
 80074da:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	b2a4      	uxth	r4, r4
 80074e0:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80074e2:	4628      	mov	r0, r5
 80074e4:	f7ff ffd6 	bl	8007494 <RTC_ExitInitMode>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d0f3      	beq.n	80074d4 <RTC_WriteTimeCounter+0xe>
      status = HAL_ERROR;
 80074ec:	2001      	movs	r0, #1
 80074ee:	e7f1      	b.n	80074d4 <RTC_WriteTimeCounter+0xe>

080074f0 <RTC_WriteAlarmCounter>:
{
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4605      	mov	r5, r0
 80074f4:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80074f6:	f7ff ffb5 	bl	8007464 <RTC_EnterInitMode>
 80074fa:	b108      	cbz	r0, 8007500 <RTC_WriteAlarmCounter+0x10>
    status = HAL_ERROR;
 80074fc:	2001      	movs	r0, #1
}
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	0c22      	lsrs	r2, r4, #16
 8007504:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8007506:	682b      	ldr	r3, [r5, #0]
 8007508:	b2a4      	uxth	r4, r4
 800750a:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800750c:	4628      	mov	r0, r5
 800750e:	f7ff ffc1 	bl	8007494 <RTC_ExitInitMode>
 8007512:	2800      	cmp	r0, #0
 8007514:	d0f3      	beq.n	80074fe <RTC_WriteAlarmCounter+0xe>
      status = HAL_ERROR;
 8007516:	2001      	movs	r0, #1
 8007518:	e7f1      	b.n	80074fe <RTC_WriteAlarmCounter+0xe>

0800751a <HAL_RTC_SetTime>:
{
 800751a:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 800751c:	2800      	cmp	r0, #0
 800751e:	d057      	beq.n	80075d0 <HAL_RTC_SetTime+0xb6>
 8007520:	460d      	mov	r5, r1
 8007522:	4606      	mov	r6, r0
 8007524:	2900      	cmp	r1, #0
 8007526:	d055      	beq.n	80075d4 <HAL_RTC_SetTime+0xba>
  __HAL_LOCK(hrtc);
 8007528:	7c03      	ldrb	r3, [r0, #16]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d054      	beq.n	80075d8 <HAL_RTC_SetTime+0xbe>
 800752e:	2301      	movs	r3, #1
 8007530:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007532:	2302      	movs	r3, #2
 8007534:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 8007536:	b9ba      	cbnz	r2, 8007568 <HAL_RTC_SetTime+0x4e>
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007538:	780b      	ldrb	r3, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 800753a:	784c      	ldrb	r4, [r1, #1]
 800753c:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8007540:	00a4      	lsls	r4, r4, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007542:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8007546:	fb02 4403 	mla	r4, r2, r3, r4
                              ((uint32_t)sTime->Seconds));
 800754a:	788b      	ldrb	r3, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800754c:	441c      	add	r4, r3
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800754e:	4621      	mov	r1, r4
 8007550:	4630      	mov	r0, r6
 8007552:	f7ff ffb8 	bl	80074c6 <RTC_WriteTimeCounter>
 8007556:	4605      	mov	r5, r0
 8007558:	b1c8      	cbz	r0, 800758e <HAL_RTC_SetTime+0x74>
    hrtc->State = HAL_RTC_STATE_ERROR;
 800755a:	2304      	movs	r3, #4
 800755c:	7473      	strb	r3, [r6, #17]
    __HAL_UNLOCK(hrtc);
 800755e:	2300      	movs	r3, #0
 8007560:	7433      	strb	r3, [r6, #16]
    return HAL_ERROR;
 8007562:	2501      	movs	r5, #1
}
 8007564:	4628      	mov	r0, r5
 8007566:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007568:	7808      	ldrb	r0, [r1, #0]
 800756a:	f7ff ff25 	bl	80073b8 <RTC_Bcd2ToByte>
 800756e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007572:	fb03 f400 	mul.w	r4, r3, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007576:	7868      	ldrb	r0, [r5, #1]
 8007578:	f7ff ff1e 	bl	80073b8 <RTC_Bcd2ToByte>
 800757c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007580:	eb04 0480 	add.w	r4, r4, r0, lsl #2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8007584:	78a8      	ldrb	r0, [r5, #2]
 8007586:	f7ff ff17 	bl	80073b8 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800758a:	4404      	add	r4, r0
 800758c:	e7df      	b.n	800754e <HAL_RTC_SetTime+0x34>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800758e:	6832      	ldr	r2, [r6, #0]
 8007590:	6853      	ldr	r3, [r2, #4]
 8007592:	f023 0305 	bic.w	r3, r3, #5
 8007596:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007598:	4630      	mov	r0, r6
 800759a:	f7ff ff06 	bl	80073aa <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800759e:	f1b0 3fff 	cmp.w	r0, #4294967295
 80075a2:	d001      	beq.n	80075a8 <HAL_RTC_SetTime+0x8e>
      if (counter_alarm < counter_time)
 80075a4:	4284      	cmp	r4, r0
 80075a6:	d804      	bhi.n	80075b2 <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 80075a8:	2301      	movs	r3, #1
 80075aa:	7473      	strb	r3, [r6, #17]
    __HAL_UNLOCK(hrtc);
 80075ac:	2300      	movs	r3, #0
 80075ae:	7433      	strb	r3, [r6, #16]
    return HAL_OK;
 80075b0:	e7d8      	b.n	8007564 <HAL_RTC_SetTime+0x4a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80075b2:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80075b6:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80075ba:	4630      	mov	r0, r6
 80075bc:	f7ff ff98 	bl	80074f0 <RTC_WriteAlarmCounter>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d0f1      	beq.n	80075a8 <HAL_RTC_SetTime+0x8e>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80075c4:	2304      	movs	r3, #4
 80075c6:	7473      	strb	r3, [r6, #17]
          __HAL_UNLOCK(hrtc);
 80075c8:	2300      	movs	r3, #0
 80075ca:	7433      	strb	r3, [r6, #16]
          return HAL_ERROR;
 80075cc:	2501      	movs	r5, #1
 80075ce:	e7c9      	b.n	8007564 <HAL_RTC_SetTime+0x4a>
    return HAL_ERROR;
 80075d0:	2501      	movs	r5, #1
 80075d2:	e7c7      	b.n	8007564 <HAL_RTC_SetTime+0x4a>
 80075d4:	2501      	movs	r5, #1
 80075d6:	e7c5      	b.n	8007564 <HAL_RTC_SetTime+0x4a>
  __HAL_LOCK(hrtc);
 80075d8:	2502      	movs	r5, #2
 80075da:	e7c3      	b.n	8007564 <HAL_RTC_SetTime+0x4a>

080075dc <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 80075dc:	2800      	cmp	r0, #0
 80075de:	d05a      	beq.n	8007696 <HAL_RTC_SetDate+0xba>
{
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	460d      	mov	r5, r1
 80075e4:	4604      	mov	r4, r0
  if ((hrtc == NULL) || (sDate == NULL))
 80075e6:	2900      	cmp	r1, #0
 80075e8:	d057      	beq.n	800769a <HAL_RTC_SetDate+0xbe>
  __HAL_LOCK(hrtc);
 80075ea:	7c03      	ldrb	r3, [r0, #16]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d056      	beq.n	800769e <HAL_RTC_SetDate+0xc2>
 80075f0:	2301      	movs	r3, #1
 80075f2:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80075f4:	2302      	movs	r3, #2
 80075f6:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 80075f8:	b9ba      	cbnz	r2, 800762a <HAL_RTC_SetDate+0x4e>
    hrtc->DateToUpdate.Year  = sDate->Year;
 80075fa:	78cb      	ldrb	r3, [r1, #3]
 80075fc:	73c3      	strb	r3, [r0, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80075fe:	784b      	ldrb	r3, [r1, #1]
 8007600:	7343      	strb	r3, [r0, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8007602:	788b      	ldrb	r3, [r1, #2]
 8007604:	7383      	strb	r3, [r0, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8007606:	7ba2      	ldrb	r2, [r4, #14]
 8007608:	7b61      	ldrb	r1, [r4, #13]
 800760a:	7be0      	ldrb	r0, [r4, #15]
 800760c:	f7ff fede 	bl	80073cc <RTC_WeekDayNum>
 8007610:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8007612:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8007614:	4620      	mov	r0, r4
 8007616:	f7ff feb3 	bl	8007380 <RTC_ReadTimeCounter>
  if (hours > 24U)
 800761a:	4b22      	ldr	r3, [pc, #136]	; (80076a4 <HAL_RTC_SetDate+0xc8>)
 800761c:	4298      	cmp	r0, r3
 800761e:	d811      	bhi.n	8007644 <HAL_RTC_SetDate+0x68>
  hrtc->State = HAL_RTC_STATE_READY ;
 8007620:	2301      	movs	r3, #1
 8007622:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8007624:	2000      	movs	r0, #0
 8007626:	7420      	strb	r0, [r4, #16]
}
 8007628:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800762a:	78c8      	ldrb	r0, [r1, #3]
 800762c:	f7ff fec4 	bl	80073b8 <RTC_Bcd2ToByte>
 8007630:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8007632:	7868      	ldrb	r0, [r5, #1]
 8007634:	f7ff fec0 	bl	80073b8 <RTC_Bcd2ToByte>
 8007638:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800763a:	78a8      	ldrb	r0, [r5, #2]
 800763c:	f7ff febc 	bl	80073b8 <RTC_Bcd2ToByte>
 8007640:	73a0      	strb	r0, [r4, #14]
 8007642:	e7e0      	b.n	8007606 <HAL_RTC_SetDate+0x2a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8007644:	4d18      	ldr	r5, [pc, #96]	; (80076a8 <HAL_RTC_SetDate+0xcc>)
 8007646:	fba5 3500 	umull	r3, r5, r5, r0
 800764a:	0c2d      	lsrs	r5, r5, #16
 800764c:	4b17      	ldr	r3, [pc, #92]	; (80076ac <HAL_RTC_SetDate+0xd0>)
 800764e:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007652:	4629      	mov	r1, r5
 8007654:	4620      	mov	r0, r4
 8007656:	f7ff ff36 	bl	80074c6 <RTC_WriteTimeCounter>
 800765a:	b128      	cbz	r0, 8007668 <HAL_RTC_SetDate+0x8c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800765c:	2304      	movs	r3, #4
 800765e:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8007660:	2300      	movs	r3, #0
 8007662:	7423      	strb	r3, [r4, #16]
      return HAL_ERROR;
 8007664:	2001      	movs	r0, #1
 8007666:	e7df      	b.n	8007628 <HAL_RTC_SetDate+0x4c>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007668:	4620      	mov	r0, r4
 800766a:	f7ff fe9e 	bl	80073aa <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800766e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007672:	d0d5      	beq.n	8007620 <HAL_RTC_SetDate+0x44>
      if (counter_alarm < counter_time)
 8007674:	4285      	cmp	r5, r0
 8007676:	d9d3      	bls.n	8007620 <HAL_RTC_SetDate+0x44>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007678:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 800767c:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8007680:	4620      	mov	r0, r4
 8007682:	f7ff ff35 	bl	80074f0 <RTC_WriteAlarmCounter>
 8007686:	2800      	cmp	r0, #0
 8007688:	d0ca      	beq.n	8007620 <HAL_RTC_SetDate+0x44>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800768a:	2304      	movs	r3, #4
 800768c:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 800768e:	2300      	movs	r3, #0
 8007690:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8007692:	2001      	movs	r0, #1
 8007694:	e7c8      	b.n	8007628 <HAL_RTC_SetDate+0x4c>
    return HAL_ERROR;
 8007696:	2001      	movs	r0, #1
}
 8007698:	4770      	bx	lr
    return HAL_ERROR;
 800769a:	2001      	movs	r0, #1
 800769c:	e7c4      	b.n	8007628 <HAL_RTC_SetDate+0x4c>
  __HAL_LOCK(hrtc);
 800769e:	2002      	movs	r0, #2
 80076a0:	e7c2      	b.n	8007628 <HAL_RTC_SetDate+0x4c>
 80076a2:	bf00      	nop
 80076a4:	00015f8f 	.word	0x00015f8f
 80076a8:	c22e4507 	.word	0xc22e4507
 80076ac:	00015180 	.word	0x00015180

080076b0 <HAL_RTC_WaitForSynchro>:
  if (hrtc == NULL)
 80076b0:	b1c0      	cbz	r0, 80076e4 <HAL_RTC_WaitForSynchro+0x34>
{
 80076b2:	b538      	push	{r3, r4, r5, lr}
 80076b4:	4605      	mov	r5, r0
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80076b6:	6802      	ldr	r2, [r0, #0]
 80076b8:	6853      	ldr	r3, [r2, #4]
 80076ba:	f023 0308 	bic.w	r3, r3, #8
 80076be:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80076c0:	f7fd fd3a 	bl	8005138 <HAL_GetTick>
 80076c4:	4604      	mov	r4, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80076c6:	682b      	ldr	r3, [r5, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f013 0f08 	tst.w	r3, #8
 80076ce:	d107      	bne.n	80076e0 <HAL_RTC_WaitForSynchro+0x30>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80076d0:	f7fd fd32 	bl	8005138 <HAL_GetTick>
 80076d4:	1b00      	subs	r0, r0, r4
 80076d6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80076da:	d9f4      	bls.n	80076c6 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 80076dc:	2003      	movs	r0, #3
 80076de:	e000      	b.n	80076e2 <HAL_RTC_WaitForSynchro+0x32>
  return HAL_OK;
 80076e0:	2000      	movs	r0, #0
}
 80076e2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80076e4:	2001      	movs	r0, #1
}
 80076e6:	4770      	bx	lr

080076e8 <HAL_RTC_Init>:
  if (hrtc == NULL)
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d050      	beq.n	800778e <HAL_RTC_Init+0xa6>
{
 80076ec:	b510      	push	{r4, lr}
 80076ee:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80076f0:	7c43      	ldrb	r3, [r0, #17]
 80076f2:	b14b      	cbz	r3, 8007708 <HAL_RTC_Init+0x20>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80076f4:	2302      	movs	r3, #2
 80076f6:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80076f8:	4620      	mov	r0, r4
 80076fa:	f7ff ffd9 	bl	80076b0 <HAL_RTC_WaitForSynchro>
 80076fe:	b138      	cbz	r0, 8007710 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007700:	2304      	movs	r3, #4
 8007702:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8007704:	2001      	movs	r0, #1
}
 8007706:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8007708:	7403      	strb	r3, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 800770a:	f7fb fe75 	bl	80033f8 <HAL_RTC_MspInit>
 800770e:	e7f1      	b.n	80076f4 <HAL_RTC_Init+0xc>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007710:	4620      	mov	r0, r4
 8007712:	f7ff fea7 	bl	8007464 <RTC_EnterInitMode>
 8007716:	bb28      	cbnz	r0, 8007764 <HAL_RTC_Init+0x7c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8007718:	6822      	ldr	r2, [r4, #0]
 800771a:	6853      	ldr	r3, [r2, #4]
 800771c:	f023 0307 	bic.w	r3, r3, #7
 8007720:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007722:	68a3      	ldr	r3, [r4, #8]
 8007724:	b123      	cbz	r3, 8007730 <HAL_RTC_Init+0x48>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007726:	4a1b      	ldr	r2, [pc, #108]	; (8007794 <HAL_RTC_Init+0xac>)
 8007728:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800772a:	f023 0301 	bic.w	r3, r3, #1
 800772e:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007730:	4a18      	ldr	r2, [pc, #96]	; (8007794 <HAL_RTC_Init+0xac>)
 8007732:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007734:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8007738:	68a1      	ldr	r1, [r4, #8]
 800773a:	430b      	orrs	r3, r1
 800773c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800773e:	6863      	ldr	r3, [r4, #4]
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d012      	beq.n	800776c <HAL_RTC_Init+0x84>
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	f3c3 4103 	ubfx	r1, r3, #16, #4
 800774c:	6091      	str	r1, [r2, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800774e:	6822      	ldr	r2, [r4, #0]
 8007750:	b29b      	uxth	r3, r3
 8007752:	60d3      	str	r3, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007754:	4620      	mov	r0, r4
 8007756:	f7ff fe9d 	bl	8007494 <RTC_ExitInitMode>
 800775a:	b188      	cbz	r0, 8007780 <HAL_RTC_Init+0x98>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800775c:	2304      	movs	r3, #4
 800775e:	7463      	strb	r3, [r4, #17]
      return HAL_ERROR;
 8007760:	2001      	movs	r0, #1
 8007762:	e7d0      	b.n	8007706 <HAL_RTC_Init+0x1e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007764:	2304      	movs	r3, #4
 8007766:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8007768:	2001      	movs	r0, #1
 800776a:	e7cc      	b.n	8007706 <HAL_RTC_Init+0x1e>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800776c:	2001      	movs	r0, #1
 800776e:	f7ff fd9b 	bl	80072a8 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8007772:	b108      	cbz	r0, 8007778 <HAL_RTC_Init+0x90>
        prescaler = prescaler - 1U;
 8007774:	1e43      	subs	r3, r0, #1
 8007776:	e7e6      	b.n	8007746 <HAL_RTC_Init+0x5e>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007778:	2304      	movs	r3, #4
 800777a:	7463      	strb	r3, [r4, #17]
        return HAL_ERROR;
 800777c:	2001      	movs	r0, #1
 800777e:	e7c2      	b.n	8007706 <HAL_RTC_Init+0x1e>
    hrtc->DateToUpdate.Year = 0x00U;
 8007780:	2300      	movs	r3, #0
 8007782:	73e3      	strb	r3, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007784:	2301      	movs	r3, #1
 8007786:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007788:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 800778a:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 800778c:	e7bb      	b.n	8007706 <HAL_RTC_Init+0x1e>
    return HAL_ERROR;
 800778e:	2001      	movs	r0, #1
}
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	40006c00 	.word	0x40006c00

08007798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007798:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800779a:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800779c:	6a03      	ldr	r3, [r0, #32]
 800779e:	f023 0301 	bic.w	r3, r3, #1
 80077a2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077a6:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077a8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077ac:	680c      	ldr	r4, [r1, #0]
 80077ae:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077b0:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077b4:	688b      	ldr	r3, [r1, #8]
 80077b6:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077b8:	4a0d      	ldr	r2, [pc, #52]	; (80077f0 <TIM_OC1_SetConfig+0x58>)
 80077ba:	4290      	cmp	r0, r2
 80077bc:	d009      	beq.n	80077d2 <TIM_OC1_SetConfig+0x3a>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077be:	4a0c      	ldr	r2, [pc, #48]	; (80077f0 <TIM_OC1_SetConfig+0x58>)
 80077c0:	4290      	cmp	r0, r2
 80077c2:	d00d      	beq.n	80077e0 <TIM_OC1_SetConfig+0x48>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077c4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077c6:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077c8:	684a      	ldr	r2, [r1, #4]
 80077ca:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077cc:	6203      	str	r3, [r0, #32]
}
 80077ce:	bc30      	pop	{r4, r5}
 80077d0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80077d2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80077d6:	68ca      	ldr	r2, [r1, #12]
 80077d8:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 80077da:	f022 0304 	bic.w	r3, r2, #4
 80077de:	e7ee      	b.n	80077be <TIM_OC1_SetConfig+0x26>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077e0:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80077e4:	694a      	ldr	r2, [r1, #20]
 80077e6:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80077e8:	698d      	ldr	r5, [r1, #24]
 80077ea:	4315      	orrs	r5, r2
 80077ec:	e7ea      	b.n	80077c4 <TIM_OC1_SetConfig+0x2c>
 80077ee:	bf00      	nop
 80077f0:	40012c00 	.word	0x40012c00

080077f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077f4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077f8:	6a02      	ldr	r2, [r0, #32]
 80077fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077fe:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007800:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007802:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007804:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007808:	680d      	ldr	r5, [r1, #0]
 800780a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800780c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007810:	688a      	ldr	r2, [r1, #8]
 8007812:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007816:	4a0f      	ldr	r2, [pc, #60]	; (8007854 <TIM_OC3_SetConfig+0x60>)
 8007818:	4290      	cmp	r0, r2
 800781a:	d009      	beq.n	8007830 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781c:	4a0d      	ldr	r2, [pc, #52]	; (8007854 <TIM_OC3_SetConfig+0x60>)
 800781e:	4290      	cmp	r0, r2
 8007820:	d00e      	beq.n	8007840 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007822:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007824:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007826:	684a      	ldr	r2, [r1, #4]
 8007828:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782a:	6203      	str	r3, [r0, #32]
}
 800782c:	bc30      	pop	{r4, r5}
 800782e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8007830:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007834:	68ca      	ldr	r2, [r1, #12]
 8007836:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800783a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800783e:	e7ed      	b.n	800781c <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007840:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007844:	694a      	ldr	r2, [r1, #20]
 8007846:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800784a:	698a      	ldr	r2, [r1, #24]
 800784c:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8007850:	e7e7      	b.n	8007822 <TIM_OC3_SetConfig+0x2e>
 8007852:	bf00      	nop
 8007854:	40012c00 	.word	0x40012c00

08007858 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007858:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800785c:	6a02      	ldr	r2, [r0, #32]
 800785e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007862:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007864:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007866:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007868:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800786c:	680d      	ldr	r5, [r1, #0]
 800786e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007872:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007876:	688d      	ldr	r5, [r1, #8]
 8007878:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800787c:	4d07      	ldr	r5, [pc, #28]	; (800789c <TIM_OC4_SetConfig+0x44>)
 800787e:	42a8      	cmp	r0, r5
 8007880:	d006      	beq.n	8007890 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007882:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007884:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007886:	684a      	ldr	r2, [r1, #4]
 8007888:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800788a:	6203      	str	r3, [r0, #32]
}
 800788c:	bc30      	pop	{r4, r5}
 800788e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007890:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007894:	694d      	ldr	r5, [r1, #20]
 8007896:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800789a:	e7f2      	b.n	8007882 <TIM_OC4_SetConfig+0x2a>
 800789c:	40012c00 	.word	0x40012c00

080078a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078a0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078a2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078a4:	6a04      	ldr	r4, [r0, #32]
 80078a6:	f024 0401 	bic.w	r4, r4, #1
 80078aa:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078ac:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078ae:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078b2:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078b6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80078ba:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078bc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80078be:	6203      	str	r3, [r0, #32]
}
 80078c0:	bc10      	pop	{r4}
 80078c2:	4770      	bx	lr

080078c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078c4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078c6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078c8:	6a04      	ldr	r4, [r0, #32]
 80078ca:	f024 0410 	bic.w	r4, r4, #16
 80078ce:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078d0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078d2:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078d6:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80078de:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078e2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80078e4:	6203      	str	r3, [r0, #32]
}
 80078e6:	bc10      	pop	{r4}
 80078e8:	4770      	bx	lr

080078ea <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078ea:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078f0:	430b      	orrs	r3, r1
 80078f2:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078f6:	6083      	str	r3, [r0, #8]
}
 80078f8:	4770      	bx	lr
	...

080078fc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80078fc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b01      	cmp	r3, #1
 8007904:	d127      	bne.n	8007956 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007906:	2302      	movs	r3, #2
 8007908:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800790c:	6802      	ldr	r2, [r0, #0]
 800790e:	68d3      	ldr	r3, [r2, #12]
 8007910:	f043 0301 	orr.w	r3, r3, #1
 8007914:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007916:	6803      	ldr	r3, [r0, #0]
 8007918:	4a11      	ldr	r2, [pc, #68]	; (8007960 <HAL_TIM_Base_Start_IT+0x64>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d010      	beq.n	8007940 <HAL_TIM_Base_Start_IT+0x44>
 800791e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007922:	d00d      	beq.n	8007940 <HAL_TIM_Base_Start_IT+0x44>
 8007924:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007928:	4293      	cmp	r3, r2
 800792a:	d009      	beq.n	8007940 <HAL_TIM_Base_Start_IT+0x44>
 800792c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007930:	4293      	cmp	r3, r2
 8007932:	d005      	beq.n	8007940 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	f042 0201 	orr.w	r2, r2, #1
 800793a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800793c:	2000      	movs	r0, #0
 800793e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007940:	689a      	ldr	r2, [r3, #8]
 8007942:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007946:	2a06      	cmp	r2, #6
 8007948:	d007      	beq.n	800795a <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	f042 0201 	orr.w	r2, r2, #1
 8007950:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007952:	2000      	movs	r0, #0
 8007954:	4770      	bx	lr
    return HAL_ERROR;
 8007956:	2001      	movs	r0, #1
 8007958:	4770      	bx	lr
  return HAL_OK;
 800795a:	2000      	movs	r0, #0
}
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	40012c00 	.word	0x40012c00

08007964 <HAL_TIM_PWM_MspInit>:
}
 8007964:	4770      	bx	lr

08007966 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8007966:	4770      	bx	lr

08007968 <HAL_TIM_IC_CaptureCallback>:
}
 8007968:	4770      	bx	lr

0800796a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800796a:	4770      	bx	lr

0800796c <HAL_TIM_TriggerCallback>:
}
 800796c:	4770      	bx	lr

0800796e <HAL_TIM_IRQHandler>:
{
 800796e:	b510      	push	{r4, lr}
 8007970:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007972:	6803      	ldr	r3, [r0, #0]
 8007974:	691a      	ldr	r2, [r3, #16]
 8007976:	f012 0f02 	tst.w	r2, #2
 800797a:	d011      	beq.n	80079a0 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	f012 0f02 	tst.w	r2, #2
 8007982:	d00d      	beq.n	80079a0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007984:	f06f 0202 	mvn.w	r2, #2
 8007988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800798a:	2301      	movs	r3, #1
 800798c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800798e:	6803      	ldr	r3, [r0, #0]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	f013 0f03 	tst.w	r3, #3
 8007996:	d070      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8007998:	f7ff ffe6 	bl	8007968 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800799c:	2300      	movs	r3, #0
 800799e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	691a      	ldr	r2, [r3, #16]
 80079a4:	f012 0f04 	tst.w	r2, #4
 80079a8:	d012      	beq.n	80079d0 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	f012 0f04 	tst.w	r2, #4
 80079b0:	d00e      	beq.n	80079d0 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079b2:	f06f 0204 	mvn.w	r2, #4
 80079b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079b8:	2302      	movs	r3, #2
 80079ba:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80079c4:	d05f      	beq.n	8007a86 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80079c6:	4620      	mov	r0, r4
 80079c8:	f7ff ffce 	bl	8007968 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079cc:	2300      	movs	r3, #0
 80079ce:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	691a      	ldr	r2, [r3, #16]
 80079d4:	f012 0f08 	tst.w	r2, #8
 80079d8:	d012      	beq.n	8007a00 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	f012 0f08 	tst.w	r2, #8
 80079e0:	d00e      	beq.n	8007a00 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079e2:	f06f 0208 	mvn.w	r2, #8
 80079e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079e8:	2304      	movs	r3, #4
 80079ea:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	f013 0f03 	tst.w	r3, #3
 80079f4:	d04e      	beq.n	8007a94 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80079f6:	4620      	mov	r0, r4
 80079f8:	f7ff ffb6 	bl	8007968 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079fc:	2300      	movs	r3, #0
 80079fe:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	691a      	ldr	r2, [r3, #16]
 8007a04:	f012 0f10 	tst.w	r2, #16
 8007a08:	d012      	beq.n	8007a30 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	f012 0f10 	tst.w	r2, #16
 8007a10:	d00e      	beq.n	8007a30 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a12:	f06f 0210 	mvn.w	r2, #16
 8007a16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a18:	2308      	movs	r3, #8
 8007a1a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007a24:	d03d      	beq.n	8007aa2 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8007a26:	4620      	mov	r0, r4
 8007a28:	f7ff ff9e 	bl	8007968 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	691a      	ldr	r2, [r3, #16]
 8007a34:	f012 0f01 	tst.w	r2, #1
 8007a38:	d003      	beq.n	8007a42 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a3a:	68da      	ldr	r2, [r3, #12]
 8007a3c:	f012 0f01 	tst.w	r2, #1
 8007a40:	d136      	bne.n	8007ab0 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	691a      	ldr	r2, [r3, #16]
 8007a46:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007a4a:	d003      	beq.n	8007a54 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007a52:	d134      	bne.n	8007abe <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007a5c:	d003      	beq.n	8007a66 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007a64:	d132      	bne.n	8007acc <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	691a      	ldr	r2, [r3, #16]
 8007a6a:	f012 0f20 	tst.w	r2, #32
 8007a6e:	d003      	beq.n	8007a78 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a70:	68da      	ldr	r2, [r3, #12]
 8007a72:	f012 0f20 	tst.w	r2, #32
 8007a76:	d130      	bne.n	8007ada <HAL_TIM_IRQHandler+0x16c>
}
 8007a78:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7a:	f7ff ff74 	bl	8007966 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f7ff ff73 	bl	800796a <HAL_TIM_PWM_PulseFinishedCallback>
 8007a84:	e78a      	b.n	800799c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a86:	4620      	mov	r0, r4
 8007a88:	f7ff ff6d 	bl	8007966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f7ff ff6c 	bl	800796a <HAL_TIM_PWM_PulseFinishedCallback>
 8007a92:	e79b      	b.n	80079cc <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a94:	4620      	mov	r0, r4
 8007a96:	f7ff ff66 	bl	8007966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f7ff ff65 	bl	800796a <HAL_TIM_PWM_PulseFinishedCallback>
 8007aa0:	e7ac      	b.n	80079fc <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f7ff ff5f 	bl	8007966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f7ff ff5e 	bl	800796a <HAL_TIM_PWM_PulseFinishedCallback>
 8007aae:	e7bd      	b.n	8007a2c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ab0:	f06f 0201 	mvn.w	r2, #1
 8007ab4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f7fa fe54 	bl	8002764 <HAL_TIM_PeriodElapsedCallback>
 8007abc:	e7c1      	b.n	8007a42 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007abe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ac2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f000 fac2 	bl	800804e <HAL_TIMEx_BreakCallback>
 8007aca:	e7c3      	b.n	8007a54 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007acc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ad0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f7ff ff4a 	bl	800796c <HAL_TIM_TriggerCallback>
 8007ad8:	e7c5      	b.n	8007a66 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ada:	f06f 0220 	mvn.w	r2, #32
 8007ade:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 fab3 	bl	800804c <HAL_TIMEx_CommutCallback>
}
 8007ae6:	e7c7      	b.n	8007a78 <HAL_TIM_IRQHandler+0x10a>

08007ae8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8007ae8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aea:	4a1b      	ldr	r2, [pc, #108]	; (8007b58 <TIM_Base_SetConfig+0x70>)
 8007aec:	4290      	cmp	r0, r2
 8007aee:	d00a      	beq.n	8007b06 <TIM_Base_SetConfig+0x1e>
 8007af0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007af4:	d007      	beq.n	8007b06 <TIM_Base_SetConfig+0x1e>
 8007af6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007afa:	4290      	cmp	r0, r2
 8007afc:	d003      	beq.n	8007b06 <TIM_Base_SetConfig+0x1e>
 8007afe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b02:	4290      	cmp	r0, r2
 8007b04:	d103      	bne.n	8007b0e <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007b0a:	684a      	ldr	r2, [r1, #4]
 8007b0c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b0e:	4a12      	ldr	r2, [pc, #72]	; (8007b58 <TIM_Base_SetConfig+0x70>)
 8007b10:	4290      	cmp	r0, r2
 8007b12:	d00a      	beq.n	8007b2a <TIM_Base_SetConfig+0x42>
 8007b14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007b18:	d007      	beq.n	8007b2a <TIM_Base_SetConfig+0x42>
 8007b1a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007b1e:	4290      	cmp	r0, r2
 8007b20:	d003      	beq.n	8007b2a <TIM_Base_SetConfig+0x42>
 8007b22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b26:	4290      	cmp	r0, r2
 8007b28:	d103      	bne.n	8007b32 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b2e:	68ca      	ldr	r2, [r1, #12]
 8007b30:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b36:	694a      	ldr	r2, [r1, #20]
 8007b38:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007b3a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b3c:	688b      	ldr	r3, [r1, #8]
 8007b3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007b40:	680b      	ldr	r3, [r1, #0]
 8007b42:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b44:	4b04      	ldr	r3, [pc, #16]	; (8007b58 <TIM_Base_SetConfig+0x70>)
 8007b46:	4298      	cmp	r0, r3
 8007b48:	d002      	beq.n	8007b50 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	6143      	str	r3, [r0, #20]
}
 8007b4e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8007b50:	690b      	ldr	r3, [r1, #16]
 8007b52:	6303      	str	r3, [r0, #48]	; 0x30
 8007b54:	e7f9      	b.n	8007b4a <TIM_Base_SetConfig+0x62>
 8007b56:	bf00      	nop
 8007b58:	40012c00 	.word	0x40012c00

08007b5c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007b5c:	b340      	cbz	r0, 8007bb0 <HAL_TIM_Base_Init+0x54>
{
 8007b5e:	b510      	push	{r4, lr}
 8007b60:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007b62:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007b66:	b1f3      	cbz	r3, 8007ba6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007b68:	2302      	movs	r3, #2
 8007b6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b6e:	4621      	mov	r1, r4
 8007b70:	f851 0b04 	ldr.w	r0, [r1], #4
 8007b74:	f7ff ffb8 	bl	8007ae8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007b82:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007b86:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007b8a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007b9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007b9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007ba2:	2000      	movs	r0, #0
}
 8007ba4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007ba6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007baa:	f7fb fc45 	bl	8003438 <HAL_TIM_Base_MspInit>
 8007bae:	e7db      	b.n	8007b68 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8007bb0:	2001      	movs	r0, #1
}
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007bb4:	b340      	cbz	r0, 8007c08 <HAL_TIM_PWM_Init+0x54>
{
 8007bb6:	b510      	push	{r4, lr}
 8007bb8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007bba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007bbe:	b1f3      	cbz	r3, 8007bfe <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	f851 0b04 	ldr.w	r0, [r1], #4
 8007bcc:	f7ff ff8c 	bl	8007ae8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007bda:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007bde:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007be2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007bf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007bf6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007bfa:	2000      	movs	r0, #0
}
 8007bfc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007bfe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007c02:	f7ff feaf 	bl	8007964 <HAL_TIM_PWM_MspInit>
 8007c06:	e7db      	b.n	8007bc0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8007c08:	2001      	movs	r0, #1
}
 8007c0a:	4770      	bx	lr

08007c0c <TIM_OC2_SetConfig>:
{
 8007c0c:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8007c0e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c10:	6a02      	ldr	r2, [r0, #32]
 8007c12:	f022 0210 	bic.w	r2, r2, #16
 8007c16:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007c18:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007c1a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c1c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c20:	680d      	ldr	r5, [r1, #0]
 8007c22:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8007c26:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c2a:	688d      	ldr	r5, [r1, #8]
 8007c2c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c30:	4d0e      	ldr	r5, [pc, #56]	; (8007c6c <TIM_OC2_SetConfig+0x60>)
 8007c32:	42a8      	cmp	r0, r5
 8007c34:	d009      	beq.n	8007c4a <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c36:	4d0d      	ldr	r5, [pc, #52]	; (8007c6c <TIM_OC2_SetConfig+0x60>)
 8007c38:	42a8      	cmp	r0, r5
 8007c3a:	d00e      	beq.n	8007c5a <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8007c3c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007c3e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007c40:	684a      	ldr	r2, [r1, #4]
 8007c42:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007c44:	6203      	str	r3, [r0, #32]
}
 8007c46:	bc30      	pop	{r4, r5}
 8007c48:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c4e:	68cd      	ldr	r5, [r1, #12]
 8007c50:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c58:	e7ed      	b.n	8007c36 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c5a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c5e:	694d      	ldr	r5, [r1, #20]
 8007c60:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c64:	698d      	ldr	r5, [r1, #24]
 8007c66:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8007c6a:	e7e7      	b.n	8007c3c <TIM_OC2_SetConfig+0x30>
 8007c6c:	40012c00 	.word	0x40012c00

08007c70 <HAL_TIM_PWM_ConfigChannel>:
{
 8007c70:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007c72:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d066      	beq.n	8007d48 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	460d      	mov	r5, r1
 8007c7e:	2301      	movs	r3, #1
 8007c80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007c84:	2a0c      	cmp	r2, #12
 8007c86:	d85a      	bhi.n	8007d3e <HAL_TIM_PWM_ConfigChannel+0xce>
 8007c88:	e8df f002 	tbb	[pc, r2]
 8007c8c:	59595907 	.word	0x59595907
 8007c90:	5959591b 	.word	0x5959591b
 8007c94:	59595930 	.word	0x59595930
 8007c98:	44          	.byte	0x44
 8007c99:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c9a:	6800      	ldr	r0, [r0, #0]
 8007c9c:	f7ff fd7c 	bl	8007798 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ca0:	6822      	ldr	r2, [r4, #0]
 8007ca2:	6993      	ldr	r3, [r2, #24]
 8007ca4:	f043 0308 	orr.w	r3, r3, #8
 8007ca8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007caa:	6822      	ldr	r2, [r4, #0]
 8007cac:	6993      	ldr	r3, [r2, #24]
 8007cae:	f023 0304 	bic.w	r3, r3, #4
 8007cb2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cb4:	6822      	ldr	r2, [r4, #0]
 8007cb6:	6993      	ldr	r3, [r2, #24]
 8007cb8:	6929      	ldr	r1, [r5, #16]
 8007cba:	430b      	orrs	r3, r1
 8007cbc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007cbe:	2000      	movs	r0, #0
      break;
 8007cc0:	e03e      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cc2:	6800      	ldr	r0, [r0, #0]
 8007cc4:	f7ff ffa2 	bl	8007c0c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cc8:	6822      	ldr	r2, [r4, #0]
 8007cca:	6993      	ldr	r3, [r2, #24]
 8007ccc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007cd0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cd2:	6822      	ldr	r2, [r4, #0]
 8007cd4:	6993      	ldr	r3, [r2, #24]
 8007cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cda:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cdc:	6822      	ldr	r2, [r4, #0]
 8007cde:	6993      	ldr	r3, [r2, #24]
 8007ce0:	6929      	ldr	r1, [r5, #16]
 8007ce2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007ce6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce8:	2000      	movs	r0, #0
      break;
 8007cea:	e029      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cec:	6800      	ldr	r0, [r0, #0]
 8007cee:	f7ff fd81 	bl	80077f4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cf2:	6822      	ldr	r2, [r4, #0]
 8007cf4:	69d3      	ldr	r3, [r2, #28]
 8007cf6:	f043 0308 	orr.w	r3, r3, #8
 8007cfa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cfc:	6822      	ldr	r2, [r4, #0]
 8007cfe:	69d3      	ldr	r3, [r2, #28]
 8007d00:	f023 0304 	bic.w	r3, r3, #4
 8007d04:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d06:	6822      	ldr	r2, [r4, #0]
 8007d08:	69d3      	ldr	r3, [r2, #28]
 8007d0a:	6929      	ldr	r1, [r5, #16]
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007d10:	2000      	movs	r0, #0
      break;
 8007d12:	e015      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d14:	6800      	ldr	r0, [r0, #0]
 8007d16:	f7ff fd9f 	bl	8007858 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d1a:	6822      	ldr	r2, [r4, #0]
 8007d1c:	69d3      	ldr	r3, [r2, #28]
 8007d1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007d22:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d24:	6822      	ldr	r2, [r4, #0]
 8007d26:	69d3      	ldr	r3, [r2, #28]
 8007d28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d2c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d2e:	6822      	ldr	r2, [r4, #0]
 8007d30:	69d3      	ldr	r3, [r2, #28]
 8007d32:	6929      	ldr	r1, [r5, #16]
 8007d34:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007d38:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007d3a:	2000      	movs	r0, #0
      break;
 8007d3c:	e000      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8007d3e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8007d40:	2300      	movs	r3, #0
 8007d42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007d46:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8007d48:	2002      	movs	r0, #2
 8007d4a:	e7fc      	b.n	8007d46 <HAL_TIM_PWM_ConfigChannel+0xd6>

08007d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d4c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d4e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d50:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d54:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d5e:	6082      	str	r2, [r0, #8]
}
 8007d60:	bc10      	pop	{r4}
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007d64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d078      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0xfa>
{
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007d70:	2301      	movs	r3, #1
 8007d72:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007d76:	2302      	movs	r3, #2
 8007d78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007d7c:	6802      	ldr	r2, [r0, #0]
 8007d7e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d84:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007d88:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007d8a:	680b      	ldr	r3, [r1, #0]
 8007d8c:	2b60      	cmp	r3, #96	; 0x60
 8007d8e:	d04c      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0xc6>
 8007d90:	d829      	bhi.n	8007de6 <HAL_TIM_ConfigClockSource+0x82>
 8007d92:	2b40      	cmp	r3, #64	; 0x40
 8007d94:	d054      	beq.n	8007e40 <HAL_TIM_ConfigClockSource+0xdc>
 8007d96:	d90c      	bls.n	8007db2 <HAL_TIM_ConfigClockSource+0x4e>
 8007d98:	2b50      	cmp	r3, #80	; 0x50
 8007d9a:	d122      	bne.n	8007de2 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d9c:	68ca      	ldr	r2, [r1, #12]
 8007d9e:	6849      	ldr	r1, [r1, #4]
 8007da0:	6800      	ldr	r0, [r0, #0]
 8007da2:	f7ff fd7d 	bl	80078a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007da6:	2150      	movs	r1, #80	; 0x50
 8007da8:	6820      	ldr	r0, [r4, #0]
 8007daa:	f7ff fd9e 	bl	80078ea <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007dae:	2000      	movs	r0, #0
      break;
 8007db0:	e005      	b.n	8007dbe <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d00d      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0x6e>
 8007db6:	d909      	bls.n	8007dcc <HAL_TIM_ConfigClockSource+0x68>
 8007db8:	2b30      	cmp	r3, #48	; 0x30
 8007dba:	d00a      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8007dbc:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007dca:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8007dcc:	b10b      	cbz	r3, 8007dd2 <HAL_TIM_ConfigClockSource+0x6e>
 8007dce:	2b10      	cmp	r3, #16
 8007dd0:	d105      	bne.n	8007dde <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6820      	ldr	r0, [r4, #0]
 8007dd6:	f7ff fd88 	bl	80078ea <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007dda:	2000      	movs	r0, #0
      break;
 8007ddc:	e7ef      	b.n	8007dbe <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8007dde:	2001      	movs	r0, #1
 8007de0:	e7ed      	b.n	8007dbe <HAL_TIM_ConfigClockSource+0x5a>
 8007de2:	2001      	movs	r0, #1
 8007de4:	e7eb      	b.n	8007dbe <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dea:	d034      	beq.n	8007e56 <HAL_TIM_ConfigClockSource+0xf2>
 8007dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007df0:	d10c      	bne.n	8007e0c <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8007df2:	68cb      	ldr	r3, [r1, #12]
 8007df4:	684a      	ldr	r2, [r1, #4]
 8007df6:	6889      	ldr	r1, [r1, #8]
 8007df8:	6800      	ldr	r0, [r0, #0]
 8007dfa:	f7ff ffa7 	bl	8007d4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dfe:	6822      	ldr	r2, [r4, #0]
 8007e00:	6893      	ldr	r3, [r2, #8]
 8007e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e06:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007e08:	2000      	movs	r0, #0
      break;
 8007e0a:	e7d8      	b.n	8007dbe <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007e0c:	2b70      	cmp	r3, #112	; 0x70
 8007e0e:	d124      	bne.n	8007e5a <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8007e10:	68cb      	ldr	r3, [r1, #12]
 8007e12:	684a      	ldr	r2, [r1, #4]
 8007e14:	6889      	ldr	r1, [r1, #8]
 8007e16:	6800      	ldr	r0, [r0, #0]
 8007e18:	f7ff ff98 	bl	8007d4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007e1c:	6822      	ldr	r2, [r4, #0]
 8007e1e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007e24:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007e26:	2000      	movs	r0, #0
      break;
 8007e28:	e7c9      	b.n	8007dbe <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e2a:	68ca      	ldr	r2, [r1, #12]
 8007e2c:	6849      	ldr	r1, [r1, #4]
 8007e2e:	6800      	ldr	r0, [r0, #0]
 8007e30:	f7ff fd48 	bl	80078c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e34:	2160      	movs	r1, #96	; 0x60
 8007e36:	6820      	ldr	r0, [r4, #0]
 8007e38:	f7ff fd57 	bl	80078ea <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007e3c:	2000      	movs	r0, #0
      break;
 8007e3e:	e7be      	b.n	8007dbe <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e40:	68ca      	ldr	r2, [r1, #12]
 8007e42:	6849      	ldr	r1, [r1, #4]
 8007e44:	6800      	ldr	r0, [r0, #0]
 8007e46:	f7ff fd2b 	bl	80078a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e4a:	2140      	movs	r1, #64	; 0x40
 8007e4c:	6820      	ldr	r0, [r4, #0]
 8007e4e:	f7ff fd4c 	bl	80078ea <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007e52:	2000      	movs	r0, #0
      break;
 8007e54:	e7b3      	b.n	8007dbe <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007e56:	2000      	movs	r0, #0
 8007e58:	e7b1      	b.n	8007dbe <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	e7af      	b.n	8007dbe <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8007e5e:	2002      	movs	r0, #2
}
 8007e60:	4770      	bx	lr

08007e62 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e62:	f001 011f 	and.w	r1, r1, #31
 8007e66:	f04f 0c01 	mov.w	ip, #1
 8007e6a:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e6e:	6a03      	ldr	r3, [r0, #32]
 8007e70:	ea23 030c 	bic.w	r3, r3, ip
 8007e74:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e76:	6a03      	ldr	r3, [r0, #32]
 8007e78:	408a      	lsls	r2, r1
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	6203      	str	r3, [r0, #32]
}
 8007e7e:	4770      	bx	lr

08007e80 <HAL_TIM_PWM_Start>:
{
 8007e80:	b510      	push	{r4, lr}
 8007e82:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e84:	4608      	mov	r0, r1
 8007e86:	bb51      	cbnz	r1, 8007ede <HAL_TIM_PWM_Start+0x5e>
 8007e88:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	bf18      	it	ne
 8007e92:	2301      	movne	r3, #1
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d15b      	bne.n	8007f50 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d139      	bne.n	8007f10 <HAL_TIM_PWM_Start+0x90>
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	4601      	mov	r1, r0
 8007ea6:	6820      	ldr	r0, [r4, #0]
 8007ea8:	f7ff ffdb 	bl	8007e62 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	4a2a      	ldr	r2, [pc, #168]	; (8007f58 <HAL_TIM_PWM_Start+0xd8>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d03d      	beq.n	8007f30 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	4a28      	ldr	r2, [pc, #160]	; (8007f58 <HAL_TIM_PWM_Start+0xd8>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d03e      	beq.n	8007f3a <HAL_TIM_PWM_Start+0xba>
 8007ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec0:	d03b      	beq.n	8007f3a <HAL_TIM_PWM_Start+0xba>
 8007ec2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d037      	beq.n	8007f3a <HAL_TIM_PWM_Start+0xba>
 8007eca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d033      	beq.n	8007f3a <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	f042 0201 	orr.w	r2, r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007eda:	2000      	movs	r0, #0
 8007edc:	e039      	b.n	8007f52 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ede:	2904      	cmp	r1, #4
 8007ee0:	d008      	beq.n	8007ef4 <HAL_TIM_PWM_Start+0x74>
 8007ee2:	2908      	cmp	r1, #8
 8007ee4:	d00d      	beq.n	8007f02 <HAL_TIM_PWM_Start+0x82>
 8007ee6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	3b01      	subs	r3, #1
 8007eee:	bf18      	it	ne
 8007ef0:	2301      	movne	r3, #1
 8007ef2:	e7cf      	b.n	8007e94 <HAL_TIM_PWM_Start+0x14>
 8007ef4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	3b01      	subs	r3, #1
 8007efc:	bf18      	it	ne
 8007efe:	2301      	movne	r3, #1
 8007f00:	e7c8      	b.n	8007e94 <HAL_TIM_PWM_Start+0x14>
 8007f02:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	bf18      	it	ne
 8007f0c:	2301      	movne	r3, #1
 8007f0e:	e7c1      	b.n	8007e94 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f10:	2804      	cmp	r0, #4
 8007f12:	d005      	beq.n	8007f20 <HAL_TIM_PWM_Start+0xa0>
 8007f14:	2808      	cmp	r0, #8
 8007f16:	d007      	beq.n	8007f28 <HAL_TIM_PWM_Start+0xa8>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007f1e:	e7c0      	b.n	8007ea2 <HAL_TIM_PWM_Start+0x22>
 8007f20:	2302      	movs	r3, #2
 8007f22:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007f26:	e7bc      	b.n	8007ea2 <HAL_TIM_PWM_Start+0x22>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007f2e:	e7b8      	b.n	8007ea2 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8007f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f36:	645a      	str	r2, [r3, #68]	; 0x44
 8007f38:	e7bc      	b.n	8007eb4 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f3a:	689a      	ldr	r2, [r3, #8]
 8007f3c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f40:	2a06      	cmp	r2, #6
 8007f42:	d007      	beq.n	8007f54 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	f042 0201 	orr.w	r2, r2, #1
 8007f4a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	e000      	b.n	8007f52 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8007f50:	2001      	movs	r0, #1
}
 8007f52:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8007f54:	2000      	movs	r0, #0
 8007f56:	e7fc      	b.n	8007f52 <HAL_TIM_PWM_Start+0xd2>
 8007f58:	40012c00 	.word	0x40012c00

08007f5c <HAL_TIM_PWM_Stop>:
{
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4604      	mov	r4, r0
 8007f60:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007f62:	2200      	movs	r2, #0
 8007f64:	6800      	ldr	r0, [r0, #0]
 8007f66:	f7ff ff7c 	bl	8007e62 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	4a1b      	ldr	r2, [pc, #108]	; (8007fdc <HAL_TIM_PWM_Stop+0x80>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d014      	beq.n	8007f9c <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	6a19      	ldr	r1, [r3, #32]
 8007f76:	f241 1211 	movw	r2, #4369	; 0x1111
 8007f7a:	4211      	tst	r1, r2
 8007f7c:	d108      	bne.n	8007f90 <HAL_TIM_PWM_Stop+0x34>
 8007f7e:	6a19      	ldr	r1, [r3, #32]
 8007f80:	f240 4244 	movw	r2, #1092	; 0x444
 8007f84:	4211      	tst	r1, r2
 8007f86:	d103      	bne.n	8007f90 <HAL_TIM_PWM_Stop+0x34>
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	f022 0201 	bic.w	r2, r2, #1
 8007f8e:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007f90:	b99d      	cbnz	r5, 8007fba <HAL_TIM_PWM_Stop+0x5e>
 8007f92:	2301      	movs	r3, #1
 8007f94:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8007f98:	2000      	movs	r0, #0
 8007f9a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8007f9c:	6a19      	ldr	r1, [r3, #32]
 8007f9e:	f241 1211 	movw	r2, #4369	; 0x1111
 8007fa2:	4211      	tst	r1, r2
 8007fa4:	d1e5      	bne.n	8007f72 <HAL_TIM_PWM_Stop+0x16>
 8007fa6:	6a19      	ldr	r1, [r3, #32]
 8007fa8:	f240 4244 	movw	r2, #1092	; 0x444
 8007fac:	4211      	tst	r1, r2
 8007fae:	d1e0      	bne.n	8007f72 <HAL_TIM_PWM_Stop+0x16>
 8007fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fb6:	645a      	str	r2, [r3, #68]	; 0x44
 8007fb8:	e7db      	b.n	8007f72 <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007fba:	2d04      	cmp	r5, #4
 8007fbc:	d005      	beq.n	8007fca <HAL_TIM_PWM_Stop+0x6e>
 8007fbe:	2d08      	cmp	r5, #8
 8007fc0:	d007      	beq.n	8007fd2 <HAL_TIM_PWM_Stop+0x76>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007fc8:	e7e6      	b.n	8007f98 <HAL_TIM_PWM_Stop+0x3c>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007fd0:	e7e2      	b.n	8007f98 <HAL_TIM_PWM_Stop+0x3c>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007fd8:	e7de      	b.n	8007f98 <HAL_TIM_PWM_Stop+0x3c>
 8007fda:	bf00      	nop
 8007fdc:	40012c00 	.word	0x40012c00

08007fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fe0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8007fe4:	2a01      	cmp	r2, #1
 8007fe6:	d02c      	beq.n	8008042 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8007fe8:	b410      	push	{r4}
 8007fea:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8007fec:	2201      	movs	r2, #1
 8007fee:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ff8:	6802      	ldr	r2, [r0, #0]
 8007ffa:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ffc:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ffe:	f020 0c70 	bic.w	ip, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008002:	6808      	ldr	r0, [r1, #0]
 8008004:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008008:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	480e      	ldr	r0, [pc, #56]	; (8008048 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800800e:	4282      	cmp	r2, r0
 8008010:	d00a      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8008012:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008016:	d007      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8008018:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800801c:	4282      	cmp	r2, r0
 800801e:	d003      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8008020:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008024:	4282      	cmp	r2, r0
 8008026:	d104      	bne.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008028:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800802c:	6849      	ldr	r1, [r1, #4]
 800802e:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008030:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008032:	2201      	movs	r2, #1
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008038:	2000      	movs	r0, #0
 800803a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 800803e:	bc10      	pop	{r4}
 8008040:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008042:	2002      	movs	r0, #2
}
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	40012c00 	.word	0x40012c00

0800804c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800804c:	4770      	bx	lr

0800804e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800804e:	4770      	bx	lr

08008050 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008050:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	f102 030c 	add.w	r3, r2, #12
 8008056:	e853 3f00 	ldrex	r3, [r3]
 800805a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	320c      	adds	r2, #12
 8008060:	e842 3100 	strex	r1, r3, [r2]
 8008064:	2900      	cmp	r1, #0
 8008066:	d1f3      	bne.n	8008050 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008068:	2320      	movs	r3, #32
 800806a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
}
 800806e:	4770      	bx	lr

08008070 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008070:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	f102 030c 	add.w	r3, r2, #12
 8008076:	e853 3f00 	ldrex	r3, [r3]
 800807a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807e:	320c      	adds	r2, #12
 8008080:	e842 3100 	strex	r1, r3, [r2]
 8008084:	2900      	cmp	r1, #0
 8008086:	d1f3      	bne.n	8008070 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008088:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	f102 0314 	add.w	r3, r2, #20
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	3214      	adds	r2, #20
 8008098:	e842 3100 	strex	r1, r3, [r2]
 800809c:	2900      	cmp	r1, #0
 800809e:	d1f3      	bne.n	8008088 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d005      	beq.n	80080b2 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080a6:	2320      	movs	r3, #32
 80080a8:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ac:	2300      	movs	r3, #0
 80080ae:	6303      	str	r3, [r0, #48]	; 0x30
}
 80080b0:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b4:	f102 030c 	add.w	r3, r2, #12
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c0:	320c      	adds	r2, #12
 80080c2:	e842 3100 	strex	r1, r3, [r2]
 80080c6:	2900      	cmp	r1, #0
 80080c8:	d1f3      	bne.n	80080b2 <UART_EndRxTransfer+0x42>
 80080ca:	e7ec      	b.n	80080a6 <UART_EndRxTransfer+0x36>

080080cc <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080cc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b21      	cmp	r3, #33	; 0x21
 80080d4:	d001      	beq.n	80080da <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80080d6:	2002      	movs	r0, #2
  }
}
 80080d8:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080da:	6883      	ldr	r3, [r0, #8]
 80080dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e0:	d017      	beq.n	8008112 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080e2:	6a03      	ldr	r3, [r0, #32]
 80080e4:	1c5a      	adds	r2, r3, #1
 80080e6:	6202      	str	r2, [r0, #32]
 80080e8:	781a      	ldrb	r2, [r3, #0]
 80080ea:	6803      	ldr	r3, [r0, #0]
 80080ec:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80080ee:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	84c3      	strh	r3, [r0, #38]	; 0x26
 80080f8:	b94b      	cbnz	r3, 800810e <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080fa:	6802      	ldr	r2, [r0, #0]
 80080fc:	68d3      	ldr	r3, [r2, #12]
 80080fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008102:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008104:	6802      	ldr	r2, [r0, #0]
 8008106:	68d3      	ldr	r3, [r2, #12]
 8008108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800810c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800810e:	2000      	movs	r0, #0
 8008110:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008112:	6903      	ldr	r3, [r0, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1e4      	bne.n	80080e2 <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008118:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	6802      	ldr	r2, [r0, #0]
 800811e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008122:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8008124:	6a03      	ldr	r3, [r0, #32]
 8008126:	3302      	adds	r3, #2
 8008128:	6203      	str	r3, [r0, #32]
 800812a:	e7e0      	b.n	80080ee <UART_Transmit_IT+0x22>

0800812c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800812c:	b510      	push	{r4, lr}
 800812e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008130:	6802      	ldr	r2, [r0, #0]
 8008132:	6913      	ldr	r3, [r2, #16]
 8008134:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008138:	68c1      	ldr	r1, [r0, #12]
 800813a:	430b      	orrs	r3, r1
 800813c:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800813e:	6883      	ldr	r3, [r0, #8]
 8008140:	6902      	ldr	r2, [r0, #16]
 8008142:	4313      	orrs	r3, r2
 8008144:	6942      	ldr	r2, [r0, #20]
 8008146:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8008148:	6801      	ldr	r1, [r0, #0]
 800814a:	68cb      	ldr	r3, [r1, #12]
 800814c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008150:	f023 030c 	bic.w	r3, r3, #12
 8008154:	4313      	orrs	r3, r2
 8008156:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008158:	6802      	ldr	r2, [r0, #0]
 800815a:	6953      	ldr	r3, [r2, #20]
 800815c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008160:	6981      	ldr	r1, [r0, #24]
 8008162:	430b      	orrs	r3, r1
 8008164:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8008166:	6802      	ldr	r2, [r0, #0]
 8008168:	4b13      	ldr	r3, [pc, #76]	; (80081b8 <UART_SetConfig+0x8c>)
 800816a:	429a      	cmp	r2, r3
 800816c:	d020      	beq.n	80081b0 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800816e:	f7fe ffd1 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 8008172:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008174:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008178:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800817c:	6863      	ldr	r3, [r4, #4]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	fbb2 f2f3 	udiv	r2, r2, r3
 8008184:	480d      	ldr	r0, [pc, #52]	; (80081bc <UART_SetConfig+0x90>)
 8008186:	fba0 3102 	umull	r3, r1, r0, r2
 800818a:	0949      	lsrs	r1, r1, #5
 800818c:	2364      	movs	r3, #100	; 0x64
 800818e:	fb03 2311 	mls	r3, r3, r1, r2
 8008192:	011b      	lsls	r3, r3, #4
 8008194:	3332      	adds	r3, #50	; 0x32
 8008196:	fba0 0303 	umull	r0, r3, r0, r3
 800819a:	095b      	lsrs	r3, r3, #5
 800819c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80081a0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	6821      	ldr	r1, [r4, #0]
 80081aa:	4413      	add	r3, r2
 80081ac:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 80081ae:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80081b0:	f7fe ffc0 	bl	8007134 <HAL_RCC_GetPCLK2Freq>
 80081b4:	4602      	mov	r2, r0
 80081b6:	e7dd      	b.n	8008174 <UART_SetConfig+0x48>
 80081b8:	40013800 	.word	0x40013800
 80081bc:	51eb851f 	.word	0x51eb851f

080081c0 <UART_WaitOnFlagUntilTimeout>:
{
 80081c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081c4:	4605      	mov	r5, r0
 80081c6:	460f      	mov	r7, r1
 80081c8:	4616      	mov	r6, r2
 80081ca:	4699      	mov	r9, r3
 80081cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081d0:	682b      	ldr	r3, [r5, #0]
 80081d2:	681c      	ldr	r4, [r3, #0]
 80081d4:	ea37 0404 	bics.w	r4, r7, r4
 80081d8:	bf0c      	ite	eq
 80081da:	2401      	moveq	r4, #1
 80081dc:	2400      	movne	r4, #0
 80081de:	42b4      	cmp	r4, r6
 80081e0:	d12d      	bne.n	800823e <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 80081e2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80081e6:	d0f3      	beq.n	80081d0 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80081e8:	f1b8 0f00 	cmp.w	r8, #0
 80081ec:	d005      	beq.n	80081fa <UART_WaitOnFlagUntilTimeout+0x3a>
 80081ee:	f7fc ffa3 	bl	8005138 <HAL_GetTick>
 80081f2:	eba0 0009 	sub.w	r0, r0, r9
 80081f6:	4540      	cmp	r0, r8
 80081f8:	d9ea      	bls.n	80081d0 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081fa:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fc:	f102 030c 	add.w	r3, r2, #12
 8008200:	e853 3f00 	ldrex	r3, [r3]
 8008204:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	320c      	adds	r2, #12
 800820a:	e842 3100 	strex	r1, r3, [r2]
 800820e:	2900      	cmp	r1, #0
 8008210:	d1f3      	bne.n	80081fa <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008212:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	f102 0314 	add.w	r3, r2, #20
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008220:	3214      	adds	r2, #20
 8008222:	e842 3100 	strex	r1, r3, [r2]
 8008226:	2900      	cmp	r1, #0
 8008228:	d1f3      	bne.n	8008212 <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 800822a:	2320      	movs	r3, #32
 800822c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008230:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(huart);
 8008234:	2300      	movs	r3, #0
 8008236:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 800823a:	2003      	movs	r0, #3
 800823c:	e000      	b.n	8008240 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 800823e:	2000      	movs	r0, #0
}
 8008240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008244 <HAL_UART_Init>:
  if (huart == NULL)
 8008244:	b360      	cbz	r0, 80082a0 <HAL_UART_Init+0x5c>
{
 8008246:	b510      	push	{r4, lr}
 8008248:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800824a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800824e:	b313      	cbz	r3, 8008296 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8008250:	2324      	movs	r3, #36	; 0x24
 8008252:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8008256:	6822      	ldr	r2, [r4, #0]
 8008258:	68d3      	ldr	r3, [r2, #12]
 800825a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800825e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8008260:	4620      	mov	r0, r4
 8008262:	f7ff ff63 	bl	800812c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008266:	6822      	ldr	r2, [r4, #0]
 8008268:	6913      	ldr	r3, [r2, #16]
 800826a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800826e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008270:	6822      	ldr	r2, [r4, #0]
 8008272:	6953      	ldr	r3, [r2, #20]
 8008274:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8008278:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800827a:	6822      	ldr	r2, [r4, #0]
 800827c:	68d3      	ldr	r3, [r2, #12]
 800827e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008282:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008284:	2000      	movs	r0, #0
 8008286:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008288:	2320      	movs	r3, #32
 800828a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800828e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008292:	6360      	str	r0, [r4, #52]	; 0x34
}
 8008294:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008296:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 800829a:	f7fb f94f 	bl	800353c <HAL_UART_MspInit>
 800829e:	e7d7      	b.n	8008250 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80082a0:	2001      	movs	r0, #1
}
 80082a2:	4770      	bx	lr

080082a4 <HAL_UART_DeInit>:
  if (huart == NULL)
 80082a4:	b1b0      	cbz	r0, 80082d4 <HAL_UART_DeInit+0x30>
{
 80082a6:	b510      	push	{r4, lr}
 80082a8:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80082aa:	2324      	movs	r3, #36	; 0x24
 80082ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80082b0:	6802      	ldr	r2, [r0, #0]
 80082b2:	68d3      	ldr	r3, [r2, #12]
 80082b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082b8:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 80082ba:	f7fb f9e7 	bl	800368c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082be:	2000      	movs	r0, #0
 80082c0:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80082c2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80082c6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ca:	6320      	str	r0, [r4, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082cc:	6360      	str	r0, [r4, #52]	; 0x34
  __HAL_UNLOCK(huart);
 80082ce:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80082d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80082d4:	2001      	movs	r0, #1
}
 80082d6:	4770      	bx	lr

080082d8 <HAL_UART_Transmit>:
{
 80082d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082dc:	b082      	sub	sp, #8
 80082de:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80082e0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b20      	cmp	r3, #32
 80082e8:	d14b      	bne.n	8008382 <HAL_UART_Transmit+0xaa>
 80082ea:	4604      	mov	r4, r0
 80082ec:	460d      	mov	r5, r1
 80082ee:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80082f0:	2900      	cmp	r1, #0
 80082f2:	d04a      	beq.n	800838a <HAL_UART_Transmit+0xb2>
 80082f4:	b90a      	cbnz	r2, 80082fa <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80082f6:	2001      	movs	r0, #1
 80082f8:	e044      	b.n	8008384 <HAL_UART_Transmit+0xac>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082fa:	2300      	movs	r3, #0
 80082fc:	6443      	str	r3, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082fe:	2321      	movs	r3, #33	; 0x21
 8008300:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8008304:	f7fc ff18 	bl	8005138 <HAL_GetTick>
 8008308:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800830a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800830e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008312:	68a3      	ldr	r3, [r4, #8]
 8008314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008318:	d002      	beq.n	8008320 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 800831a:	f04f 0800 	mov.w	r8, #0
 800831e:	e00f      	b.n	8008340 <HAL_UART_Transmit+0x68>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008320:	6923      	ldr	r3, [r4, #16]
 8008322:	b1fb      	cbz	r3, 8008364 <HAL_UART_Transmit+0x8c>
      pdata16bits = NULL;
 8008324:	f04f 0800 	mov.w	r8, #0
 8008328:	e00a      	b.n	8008340 <HAL_UART_Transmit+0x68>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800832a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800832e:	6822      	ldr	r2, [r4, #0]
 8008330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008334:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8008336:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8008338:	b292      	uxth	r2, r2
 800833a:	3a01      	subs	r2, #1
 800833c:	b292      	uxth	r2, r2
 800833e:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008340:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008342:	b29b      	uxth	r3, r3
 8008344:	b18b      	cbz	r3, 800836a <HAL_UART_Transmit+0x92>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008346:	9600      	str	r6, [sp, #0]
 8008348:	463b      	mov	r3, r7
 800834a:	2200      	movs	r2, #0
 800834c:	2180      	movs	r1, #128	; 0x80
 800834e:	4620      	mov	r0, r4
 8008350:	f7ff ff36 	bl	80081c0 <UART_WaitOnFlagUntilTimeout>
 8008354:	b9d8      	cbnz	r0, 800838e <HAL_UART_Transmit+0xb6>
      if (pdata8bits == NULL)
 8008356:	2d00      	cmp	r5, #0
 8008358:	d0e7      	beq.n	800832a <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800835a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008362:	e7e8      	b.n	8008336 <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 8008364:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8008366:	2500      	movs	r5, #0
 8008368:	e7ea      	b.n	8008340 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800836a:	9600      	str	r6, [sp, #0]
 800836c:	463b      	mov	r3, r7
 800836e:	2200      	movs	r2, #0
 8008370:	2140      	movs	r1, #64	; 0x40
 8008372:	4620      	mov	r0, r4
 8008374:	f7ff ff24 	bl	80081c0 <UART_WaitOnFlagUntilTimeout>
 8008378:	b958      	cbnz	r0, 8008392 <HAL_UART_Transmit+0xba>
    huart->gState = HAL_UART_STATE_READY;
 800837a:	2320      	movs	r3, #32
 800837c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8008380:	e000      	b.n	8008384 <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 8008382:	2002      	movs	r0, #2
}
 8008384:	b002      	add	sp, #8
 8008386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800838a:	2001      	movs	r0, #1
 800838c:	e7fa      	b.n	8008384 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 800838e:	2003      	movs	r0, #3
 8008390:	e7f8      	b.n	8008384 <HAL_UART_Transmit+0xac>
      return HAL_TIMEOUT;
 8008392:	2003      	movs	r0, #3
 8008394:	e7f6      	b.n	8008384 <HAL_UART_Transmit+0xac>

08008396 <HAL_UART_TxCpltCallback>:
}
 8008396:	4770      	bx	lr

08008398 <UART_EndTransmit_IT>:
{
 8008398:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800839a:	6801      	ldr	r1, [r0, #0]
 800839c:	68ca      	ldr	r2, [r1, #12]
 800839e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083a2:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80083a4:	2220      	movs	r2, #32
 80083a6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 80083aa:	f7ff fff4 	bl	8008396 <HAL_UART_TxCpltCallback>
}
 80083ae:	2000      	movs	r0, #0
 80083b0:	bd08      	pop	{r3, pc}

080083b2 <HAL_UART_RxCpltCallback>:
}
 80083b2:	4770      	bx	lr

080083b4 <HAL_UART_RxHalfCpltCallback>:
}
 80083b4:	4770      	bx	lr

080083b6 <HAL_UART_ErrorCallback>:
}
 80083b6:	4770      	bx	lr

080083b8 <UART_DMAError>:
{
 80083b8:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80083c0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b21      	cmp	r3, #33	; 0x21
 80083c8:	d010      	beq.n	80083ec <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	695a      	ldr	r2, [r3, #20]
 80083ce:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80083d2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b22      	cmp	r3, #34	; 0x22
 80083da:	d011      	beq.n	8008400 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80083dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80083de:	f043 0310 	orr.w	r3, r3, #16
 80083e2:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_UART_ErrorCallback(huart);
 80083e4:	4620      	mov	r0, r4
 80083e6:	f7ff ffe6 	bl	80083b6 <HAL_UART_ErrorCallback>
}
 80083ea:	bd10      	pop	{r4, pc}
 80083ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80083f0:	2a00      	cmp	r2, #0
 80083f2:	d0ea      	beq.n	80083ca <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80083f8:	4620      	mov	r0, r4
 80083fa:	f7ff fe29 	bl	8008050 <UART_EndTxTransfer>
 80083fe:	e7e4      	b.n	80083ca <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008400:	2a00      	cmp	r2, #0
 8008402:	d0eb      	beq.n	80083dc <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8008404:	2300      	movs	r3, #0
 8008406:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008408:	4620      	mov	r0, r4
 800840a:	f7ff fe31 	bl	8008070 <UART_EndRxTransfer>
 800840e:	e7e5      	b.n	80083dc <UART_DMAError+0x24>

08008410 <UART_DMAAbortOnError>:
{
 8008410:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008412:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8008414:	2300      	movs	r3, #0
 8008416:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008418:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800841a:	f7ff ffcc 	bl	80083b6 <HAL_UART_ErrorCallback>
}
 800841e:	bd08      	pop	{r3, pc}

08008420 <HAL_UART_AbortCpltCallback>:
}
 8008420:	4770      	bx	lr
	...

08008424 <HAL_UART_Abort_IT>:
{
 8008424:	b538      	push	{r3, r4, r5, lr}
 8008426:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8008428:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	f102 030c 	add.w	r3, r2, #12
 800842e:	e853 3f00 	ldrex	r3, [r3]
 8008432:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	320c      	adds	r2, #12
 8008438:	e842 3100 	strex	r1, r3, [r2]
 800843c:	2900      	cmp	r1, #0
 800843e:	d1f3      	bne.n	8008428 <HAL_UART_Abort_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008440:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008442:	f102 0314 	add.w	r3, r2, #20
 8008446:	e853 3f00 	ldrex	r3, [r3]
 800844a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844e:	3214      	adds	r2, #20
 8008450:	e842 3100 	strex	r1, r3, [r2]
 8008454:	2900      	cmp	r1, #0
 8008456:	d1f3      	bne.n	8008440 <HAL_UART_Abort_IT+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008458:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800845a:	2b01      	cmp	r3, #1
 800845c:	d02e      	beq.n	80084bc <HAL_UART_Abort_IT+0x98>
  if (huart->hdmatx != NULL)
 800845e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008460:	b133      	cbz	r3, 8008470 <HAL_UART_Abort_IT+0x4c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008462:	6822      	ldr	r2, [r4, #0]
 8008464:	6952      	ldr	r2, [r2, #20]
 8008466:	f012 0f80 	tst.w	r2, #128	; 0x80
 800846a:	d034      	beq.n	80084d6 <HAL_UART_Abort_IT+0xb2>
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800846c:	4a34      	ldr	r2, [pc, #208]	; (8008540 <HAL_UART_Abort_IT+0x11c>)
 800846e:	635a      	str	r2, [r3, #52]	; 0x34
  if (huart->hdmarx != NULL)
 8008470:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008472:	b133      	cbz	r3, 8008482 <HAL_UART_Abort_IT+0x5e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008474:	6822      	ldr	r2, [r4, #0]
 8008476:	6952      	ldr	r2, [r2, #20]
 8008478:	f012 0f40 	tst.w	r2, #64	; 0x40
 800847c:	d02e      	beq.n	80084dc <HAL_UART_Abort_IT+0xb8>
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800847e:	4a31      	ldr	r2, [pc, #196]	; (8008544 <HAL_UART_Abort_IT+0x120>)
 8008480:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	f013 0f80 	tst.w	r3, #128	; 0x80
 800848a:	d02a      	beq.n	80084e2 <HAL_UART_Abort_IT+0xbe>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800848c:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	f101 0314 	add.w	r3, r1, #20
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849a:	3114      	adds	r1, #20
 800849c:	e841 3200 	strex	r2, r3, [r1]
 80084a0:	4615      	mov	r5, r2
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	d1f2      	bne.n	800848c <HAL_UART_Abort_IT+0x68>
    if (huart->hdmatx != NULL)
 80084a6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d042      	beq.n	8008532 <HAL_UART_Abort_IT+0x10e>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80084ac:	f7fd fa10 	bl	80058d0 <HAL_DMA_Abort_IT>
 80084b0:	b1c0      	cbz	r0, 80084e4 <HAL_UART_Abort_IT+0xc0>
        huart->hdmatx->XferAbortCallback = NULL;
 80084b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80084b4:	2200      	movs	r2, #0
 80084b6:	635a      	str	r2, [r3, #52]	; 0x34
  uint32_t AbortCplt = 0x01U;
 80084b8:	2501      	movs	r5, #1
 80084ba:	e013      	b.n	80084e4 <HAL_UART_Abort_IT+0xc0>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80084bc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084be:	f102 030c 	add.w	r3, r2, #12
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ca:	320c      	adds	r2, #12
 80084cc:	e842 3100 	strex	r1, r3, [r2]
 80084d0:	2900      	cmp	r1, #0
 80084d2:	d1f3      	bne.n	80084bc <HAL_UART_Abort_IT+0x98>
 80084d4:	e7c3      	b.n	800845e <HAL_UART_Abort_IT+0x3a>
      huart->hdmatx->XferAbortCallback = NULL;
 80084d6:	2200      	movs	r2, #0
 80084d8:	635a      	str	r2, [r3, #52]	; 0x34
 80084da:	e7c9      	b.n	8008470 <HAL_UART_Abort_IT+0x4c>
      huart->hdmarx->XferAbortCallback = NULL;
 80084dc:	2200      	movs	r2, #0
 80084de:	635a      	str	r2, [r3, #52]	; 0x34
 80084e0:	e7cf      	b.n	8008482 <HAL_UART_Abort_IT+0x5e>
  uint32_t AbortCplt = 0x01U;
 80084e2:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80084ec:	d023      	beq.n	8008536 <HAL_UART_Abort_IT+0x112>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f0:	f102 0314 	add.w	r3, r2, #20
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	3214      	adds	r2, #20
 80084fe:	e842 3100 	strex	r1, r3, [r2]
 8008502:	2900      	cmp	r1, #0
 8008504:	d1f3      	bne.n	80084ee <HAL_UART_Abort_IT+0xca>
    if (huart->hdmarx != NULL)
 8008506:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008508:	b1a8      	cbz	r0, 8008536 <HAL_UART_Abort_IT+0x112>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800850a:	f7fd f9e1 	bl	80058d0 <HAL_DMA_Abort_IT>
 800850e:	b1a0      	cbz	r0, 800853a <HAL_UART_Abort_IT+0x116>
        huart->hdmarx->XferAbortCallback = NULL;
 8008510:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008512:	2200      	movs	r2, #0
 8008514:	635a      	str	r2, [r3, #52]	; 0x34
    huart->TxXferCount = 0x00U;
 8008516:	2300      	movs	r3, #0
 8008518:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800851a:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800851c:	6463      	str	r3, [r4, #68]	; 0x44
    huart->gState  = HAL_UART_STATE_READY;
 800851e:	2220      	movs	r2, #32
 8008520:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8008524:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008528:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_UART_AbortCpltCallback(huart);
 800852a:	4620      	mov	r0, r4
 800852c:	f7ff ff78 	bl	8008420 <HAL_UART_AbortCpltCallback>
 8008530:	e003      	b.n	800853a <HAL_UART_Abort_IT+0x116>
  uint32_t AbortCplt = 0x01U;
 8008532:	2501      	movs	r5, #1
 8008534:	e7d6      	b.n	80084e4 <HAL_UART_Abort_IT+0xc0>
  if (AbortCplt == 0x01U)
 8008536:	2d01      	cmp	r5, #1
 8008538:	d0ed      	beq.n	8008516 <HAL_UART_Abort_IT+0xf2>
}
 800853a:	2000      	movs	r0, #0
 800853c:	bd38      	pop	{r3, r4, r5, pc}
 800853e:	bf00      	nop
 8008540:	08008575 	.word	0x08008575
 8008544:	08008549 	.word	0x08008549

08008548 <UART_DMARxAbortCallback>:
{
 8008548:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800854a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmarx->XferAbortCallback = NULL;
 800854c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800854e:	2200      	movs	r2, #0
 8008550:	635a      	str	r2, [r3, #52]	; 0x34
  if (huart->hdmatx != NULL)
 8008552:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008554:	b10b      	cbz	r3, 800855a <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 8008556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008558:	b95b      	cbnz	r3, 8008572 <UART_DMARxAbortCallback+0x2a>
  huart->TxXferCount = 0x00U;
 800855a:	2300      	movs	r3, #0
 800855c:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800855e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008560:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 8008562:	2220      	movs	r2, #32
 8008564:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008568:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856c:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 800856e:	f7ff ff57 	bl	8008420 <HAL_UART_AbortCpltCallback>
}
 8008572:	bd08      	pop	{r3, pc}

08008574 <UART_DMATxAbortCallback>:
{
 8008574:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008576:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmatx->XferAbortCallback = NULL;
 8008578:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800857a:	2200      	movs	r2, #0
 800857c:	635a      	str	r2, [r3, #52]	; 0x34
  if (huart->hdmarx != NULL)
 800857e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008580:	b10b      	cbz	r3, 8008586 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8008582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008584:	b95b      	cbnz	r3, 800859e <UART_DMATxAbortCallback+0x2a>
  huart->TxXferCount = 0x00U;
 8008586:	2300      	movs	r3, #0
 8008588:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800858a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800858c:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 800858e:	2220      	movs	r2, #32
 8008590:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008594:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008598:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 800859a:	f7ff ff41 	bl	8008420 <HAL_UART_AbortCpltCallback>
}
 800859e:	bd08      	pop	{r3, pc}

080085a0 <HAL_UARTEx_RxEventCallback>:
}
 80085a0:	4770      	bx	lr

080085a2 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085a2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b22      	cmp	r3, #34	; 0x22
 80085aa:	d169      	bne.n	8008680 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085ac:	6883      	ldr	r3, [r0, #8]
 80085ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b2:	d04f      	beq.n	8008654 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ba:	d004      	beq.n	80085c6 <UART_Receive_IT+0x24>
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d156      	bne.n	800866e <UART_Receive_IT+0xcc>
 80085c0:	6903      	ldr	r3, [r0, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d153      	bne.n	800866e <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085c6:	6803      	ldr	r3, [r0, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80085cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80085ce:	3301      	adds	r3, #1
 80085d0:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80085d2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	3b01      	subs	r3, #1
 80085d8:	b29b      	uxth	r3, r3
 80085da:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d151      	bne.n	8008684 <UART_Receive_IT+0xe2>
{
 80085e0:	b500      	push	{lr}
 80085e2:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80085e4:	6802      	ldr	r2, [r0, #0]
 80085e6:	68d3      	ldr	r3, [r2, #12]
 80085e8:	f023 0320 	bic.w	r3, r3, #32
 80085ec:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80085ee:	6802      	ldr	r2, [r0, #0]
 80085f0:	68d3      	ldr	r3, [r2, #12]
 80085f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085f6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80085f8:	6802      	ldr	r2, [r0, #0]
 80085fa:	6953      	ldr	r3, [r2, #20]
 80085fc:	f023 0301 	bic.w	r3, r3, #1
 8008600:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8008602:	2320      	movs	r3, #32
 8008604:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008608:	2300      	movs	r3, #0
 800860a:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800860c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800860e:	2b01      	cmp	r3, #1
 8008610:	d133      	bne.n	800867a <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008612:	2300      	movs	r3, #0
 8008614:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008616:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008618:	f102 030c 	add.w	r3, r2, #12
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008624:	320c      	adds	r2, #12
 8008626:	e842 3100 	strex	r1, r3, [r2]
 800862a:	2900      	cmp	r1, #0
 800862c:	d1f3      	bne.n	8008616 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800862e:	6803      	ldr	r3, [r0, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	f012 0f10 	tst.w	r2, #16
 8008636:	d006      	beq.n	8008646 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008638:	2200      	movs	r2, #0
 800863a:	9201      	str	r2, [sp, #4]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	9201      	str	r2, [sp, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008646:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8008648:	f7ff ffaa 	bl	80085a0 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800864c:	2000      	movs	r0, #0
}
 800864e:	b003      	add	sp, #12
 8008650:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008654:	6902      	ldr	r2, [r0, #16]
 8008656:	2a00      	cmp	r2, #0
 8008658:	d1ac      	bne.n	80085b4 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800865a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800865c:	6803      	ldr	r3, [r0, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008664:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8008666:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008668:	3302      	adds	r3, #2
 800866a:	6283      	str	r3, [r0, #40]	; 0x28
 800866c:	e7b1      	b.n	80085d2 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800866e:	6803      	ldr	r3, [r0, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008676:	7013      	strb	r3, [r2, #0]
 8008678:	e7a8      	b.n	80085cc <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 800867a:	f7ff fe9a 	bl	80083b2 <HAL_UART_RxCpltCallback>
 800867e:	e7e5      	b.n	800864c <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8008680:	2002      	movs	r0, #2
 8008682:	4770      	bx	lr
    return HAL_OK;
 8008684:	2000      	movs	r0, #0
}
 8008686:	4770      	bx	lr

08008688 <HAL_UART_IRQHandler>:
{
 8008688:	b530      	push	{r4, r5, lr}
 800868a:	b083      	sub	sp, #12
 800868c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800868e:	6802      	ldr	r2, [r0, #0]
 8008690:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008692:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008694:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8008696:	f013 050f 	ands.w	r5, r3, #15
 800869a:	d105      	bne.n	80086a8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800869c:	f013 0f20 	tst.w	r3, #32
 80086a0:	d002      	beq.n	80086a8 <HAL_UART_IRQHandler+0x20>
 80086a2:	f010 0f20 	tst.w	r0, #32
 80086a6:	d119      	bne.n	80086dc <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80086a8:	b12d      	cbz	r5, 80086b6 <HAL_UART_IRQHandler+0x2e>
 80086aa:	f011 0101 	ands.w	r1, r1, #1
 80086ae:	d119      	bne.n	80086e4 <HAL_UART_IRQHandler+0x5c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086b0:	f410 7f90 	tst.w	r0, #288	; 0x120
 80086b4:	d116      	bne.n	80086e4 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80086b8:	2901      	cmp	r1, #1
 80086ba:	d07d      	beq.n	80087b8 <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80086c0:	d003      	beq.n	80086ca <HAL_UART_IRQHandler+0x42>
 80086c2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80086c6:	f040 8118 	bne.w	80088fa <HAL_UART_IRQHandler+0x272>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80086ce:	d003      	beq.n	80086d8 <HAL_UART_IRQHandler+0x50>
 80086d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086d4:	f040 8115 	bne.w	8008902 <HAL_UART_IRQHandler+0x27a>
}
 80086d8:	b003      	add	sp, #12
 80086da:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 80086dc:	4620      	mov	r0, r4
 80086de:	f7ff ff60 	bl	80085a2 <UART_Receive_IT>
      return;
 80086e2:	e7f9      	b.n	80086d8 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086e4:	f013 0f01 	tst.w	r3, #1
 80086e8:	d006      	beq.n	80086f8 <HAL_UART_IRQHandler+0x70>
 80086ea:	f410 7f80 	tst.w	r0, #256	; 0x100
 80086ee:	d003      	beq.n	80086f8 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80086f2:	f042 0201 	orr.w	r2, r2, #1
 80086f6:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086f8:	f013 0f04 	tst.w	r3, #4
 80086fc:	d004      	beq.n	8008708 <HAL_UART_IRQHandler+0x80>
 80086fe:	b119      	cbz	r1, 8008708 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008700:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008702:	f042 0202 	orr.w	r2, r2, #2
 8008706:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008708:	f013 0f02 	tst.w	r3, #2
 800870c:	d004      	beq.n	8008718 <HAL_UART_IRQHandler+0x90>
 800870e:	b119      	cbz	r1, 8008718 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008710:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008712:	f042 0204 	orr.w	r2, r2, #4
 8008716:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008718:	f013 0f08 	tst.w	r3, #8
 800871c:	d007      	beq.n	800872e <HAL_UART_IRQHandler+0xa6>
 800871e:	f010 0f20 	tst.w	r0, #32
 8008722:	d100      	bne.n	8008726 <HAL_UART_IRQHandler+0x9e>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008724:	b119      	cbz	r1, 800872e <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008726:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008728:	f042 0208 	orr.w	r2, r2, #8
 800872c:	6462      	str	r2, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800872e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008730:	2a00      	cmp	r2, #0
 8008732:	d0d1      	beq.n	80086d8 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008734:	f013 0f20 	tst.w	r3, #32
 8008738:	d002      	beq.n	8008740 <HAL_UART_IRQHandler+0xb8>
 800873a:	f010 0f20 	tst.w	r0, #32
 800873e:	d129      	bne.n	8008794 <HAL_UART_IRQHandler+0x10c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008748:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800874a:	f012 0f08 	tst.w	r2, #8
 800874e:	d100      	bne.n	8008752 <HAL_UART_IRQHandler+0xca>
 8008750:	b363      	cbz	r3, 80087ac <HAL_UART_IRQHandler+0x124>
        UART_EndRxTransfer(huart);
 8008752:	4620      	mov	r0, r4
 8008754:	f7ff fc8c 	bl	8008070 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008760:	d020      	beq.n	80087a4 <HAL_UART_IRQHandler+0x11c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008762:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	f102 0314 	add.w	r3, r2, #20
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008770:	3214      	adds	r2, #20
 8008772:	e842 3100 	strex	r1, r3, [r2]
 8008776:	2900      	cmp	r1, #0
 8008778:	d1f3      	bne.n	8008762 <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx != NULL)
 800877a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800877c:	b173      	cbz	r3, 800879c <HAL_UART_IRQHandler+0x114>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800877e:	4a63      	ldr	r2, [pc, #396]	; (800890c <HAL_UART_IRQHandler+0x284>)
 8008780:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008782:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008784:	f7fd f8a4 	bl	80058d0 <HAL_DMA_Abort_IT>
 8008788:	2800      	cmp	r0, #0
 800878a:	d0a5      	beq.n	80086d8 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800878c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800878e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008790:	4798      	blx	r3
 8008792:	e7a1      	b.n	80086d8 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8008794:	4620      	mov	r0, r4
 8008796:	f7ff ff04 	bl	80085a2 <UART_Receive_IT>
 800879a:	e7d1      	b.n	8008740 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 800879c:	4620      	mov	r0, r4
 800879e:	f7ff fe0a 	bl	80083b6 <HAL_UART_ErrorCallback>
 80087a2:	e799      	b.n	80086d8 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 80087a4:	4620      	mov	r0, r4
 80087a6:	f7ff fe06 	bl	80083b6 <HAL_UART_ErrorCallback>
 80087aa:	e795      	b.n	80086d8 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 80087ac:	4620      	mov	r0, r4
 80087ae:	f7ff fe02 	bl	80083b6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b2:	2300      	movs	r3, #0
 80087b4:	6463      	str	r3, [r4, #68]	; 0x44
    return;
 80087b6:	e78f      	b.n	80086d8 <HAL_UART_IRQHandler+0x50>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087b8:	f013 0f10 	tst.w	r3, #16
 80087bc:	f43f af7e 	beq.w	80086bc <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80087c0:	f010 0f10 	tst.w	r0, #16
 80087c4:	f43f af7a 	beq.w	80086bc <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087c8:	2300      	movs	r3, #0
 80087ca:	9301      	str	r3, [sp, #4]
 80087cc:	6813      	ldr	r3, [r2, #0]
 80087ce:	9301      	str	r3, [sp, #4]
 80087d0:	6853      	ldr	r3, [r2, #4]
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d6:	6953      	ldr	r3, [r2, #20]
 80087d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80087dc:	d051      	beq.n	8008882 <HAL_UART_IRQHandler+0x1fa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80087e0:	6813      	ldr	r3, [r2, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f43f af76 	beq.w	80086d8 <HAL_UART_IRQHandler+0x50>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087ec:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80087ee:	4299      	cmp	r1, r3
 80087f0:	f67f af72 	bls.w	80086d8 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 80087f4:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087f6:	6993      	ldr	r3, [r2, #24]
 80087f8:	2b20      	cmp	r3, #32
 80087fa:	d037      	beq.n	800886c <HAL_UART_IRQHandler+0x1e4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	f102 030c 	add.w	r3, r2, #12
 8008802:	e853 3f00 	ldrex	r3, [r3]
 8008806:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880a:	320c      	adds	r2, #12
 800880c:	e842 3100 	strex	r1, r3, [r2]
 8008810:	2900      	cmp	r1, #0
 8008812:	d1f3      	bne.n	80087fc <HAL_UART_IRQHandler+0x174>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008814:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	f102 0314 	add.w	r3, r2, #20
 800881a:	e853 3f00 	ldrex	r3, [r3]
 800881e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	3214      	adds	r2, #20
 8008824:	e842 3100 	strex	r1, r3, [r2]
 8008828:	2900      	cmp	r1, #0
 800882a:	d1f3      	bne.n	8008814 <HAL_UART_IRQHandler+0x18c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800882c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882e:	f102 0314 	add.w	r3, r2, #20
 8008832:	e853 3f00 	ldrex	r3, [r3]
 8008836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883a:	3214      	adds	r2, #20
 800883c:	e842 3100 	strex	r1, r3, [r2]
 8008840:	2900      	cmp	r1, #0
 8008842:	d1f3      	bne.n	800882c <HAL_UART_IRQHandler+0x1a4>
          huart->RxState = HAL_UART_STATE_READY;
 8008844:	2320      	movs	r3, #32
 8008846:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884a:	2300      	movs	r3, #0
 800884c:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800884e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008850:	f102 030c 	add.w	r3, r2, #12
 8008854:	e853 3f00 	ldrex	r3, [r3]
 8008858:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885c:	320c      	adds	r2, #12
 800885e:	e842 3100 	strex	r1, r3, [r2]
 8008862:	2900      	cmp	r1, #0
 8008864:	d1f3      	bne.n	800884e <HAL_UART_IRQHandler+0x1c6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008866:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008868:	f7fd f80f 	bl	800588a <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800886c:	2302      	movs	r3, #2
 800886e:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008870:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8008872:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8008874:	b29b      	uxth	r3, r3
 8008876:	1ac9      	subs	r1, r1, r3
 8008878:	b289      	uxth	r1, r1
 800887a:	4620      	mov	r0, r4
 800887c:	f7ff fe90 	bl	80085a0 <HAL_UARTEx_RxEventCallback>
      return;
 8008880:	e72a      	b.n	80086d8 <HAL_UART_IRQHandler+0x50>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008882:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8008884:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8008886:	b29b      	uxth	r3, r3
 8008888:	1ac9      	subs	r1, r1, r3
 800888a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800888c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800888e:	b29b      	uxth	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	f43f af21 	beq.w	80086d8 <HAL_UART_IRQHandler+0x50>
          && (nb_rx_data > 0U))
 8008896:	2900      	cmp	r1, #0
 8008898:	f43f af1e 	beq.w	80086d8 <HAL_UART_IRQHandler+0x50>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800889c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889e:	f102 030c 	add.w	r3, r2, #12
 80088a2:	e853 3f00 	ldrex	r3, [r3]
 80088a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	320c      	adds	r2, #12
 80088ac:	e842 3000 	strex	r0, r3, [r2]
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d1f3      	bne.n	800889c <HAL_UART_IRQHandler+0x214>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b6:	f102 0314 	add.w	r3, r2, #20
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	3214      	adds	r2, #20
 80088c4:	e842 3000 	strex	r0, r3, [r2]
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d1f3      	bne.n	80088b4 <HAL_UART_IRQHandler+0x22c>
        huart->RxState = HAL_UART_STATE_READY;
 80088cc:	2320      	movs	r3, #32
 80088ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088d2:	2300      	movs	r3, #0
 80088d4:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	f102 030c 	add.w	r3, r2, #12
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	320c      	adds	r2, #12
 80088e6:	e842 3000 	strex	r0, r3, [r2]
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d1f3      	bne.n	80088d6 <HAL_UART_IRQHandler+0x24e>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088ee:	2302      	movs	r3, #2
 80088f0:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088f2:	4620      	mov	r0, r4
 80088f4:	f7ff fe54 	bl	80085a0 <HAL_UARTEx_RxEventCallback>
      return;
 80088f8:	e6ee      	b.n	80086d8 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 80088fa:	4620      	mov	r0, r4
 80088fc:	f7ff fbe6 	bl	80080cc <UART_Transmit_IT>
    return;
 8008900:	e6ea      	b.n	80086d8 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8008902:	4620      	mov	r0, r4
 8008904:	f7ff fd48 	bl	8008398 <UART_EndTransmit_IT>
    return;
 8008908:	e6e6      	b.n	80086d8 <HAL_UART_IRQHandler+0x50>
 800890a:	bf00      	nop
 800890c:	08008411 	.word	0x08008411

08008910 <UART_DMARxHalfCplt>:
{
 8008910:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008912:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008914:	2301      	movs	r3, #1
 8008916:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008918:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800891a:	2b01      	cmp	r3, #1
 800891c:	d002      	beq.n	8008924 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800891e:	f7ff fd49 	bl	80083b4 <HAL_UART_RxHalfCpltCallback>
}
 8008922:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008924:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8008926:	0849      	lsrs	r1, r1, #1
 8008928:	f7ff fe3a 	bl	80085a0 <HAL_UARTEx_RxEventCallback>
 800892c:	e7f9      	b.n	8008922 <UART_DMARxHalfCplt+0x12>

0800892e <UART_DMAReceiveCplt>:
{
 800892e:	b508      	push	{r3, lr}
 8008930:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008932:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f013 0f20 	tst.w	r3, #32
 800893c:	d12b      	bne.n	8008996 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008942:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008944:	f102 030c 	add.w	r3, r2, #12
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008950:	320c      	adds	r2, #12
 8008952:	e842 3100 	strex	r1, r3, [r2]
 8008956:	2900      	cmp	r1, #0
 8008958:	d1f3      	bne.n	8008942 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800895a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	f102 0314 	add.w	r3, r2, #20
 8008960:	e853 3f00 	ldrex	r3, [r3]
 8008964:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008968:	3214      	adds	r2, #20
 800896a:	e842 3100 	strex	r1, r3, [r2]
 800896e:	2900      	cmp	r1, #0
 8008970:	d1f3      	bne.n	800895a <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008972:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008974:	f102 0314 	add.w	r3, r2, #20
 8008978:	e853 3f00 	ldrex	r3, [r3]
 800897c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	3214      	adds	r2, #20
 8008982:	e842 3100 	strex	r1, r3, [r2]
 8008986:	2900      	cmp	r1, #0
 8008988:	d1f3      	bne.n	8008972 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 800898a:	2320      	movs	r3, #32
 800898c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008990:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008992:	2b01      	cmp	r3, #1
 8008994:	d007      	beq.n	80089a6 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008996:	2300      	movs	r3, #0
 8008998:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800899a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800899c:	2b01      	cmp	r3, #1
 800899e:	d00f      	beq.n	80089c0 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 80089a0:	f7ff fd07 	bl	80083b2 <HAL_UART_RxCpltCallback>
}
 80089a4:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a8:	f102 030c 	add.w	r3, r2, #12
 80089ac:	e853 3f00 	ldrex	r3, [r3]
 80089b0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	320c      	adds	r2, #12
 80089b6:	e842 3100 	strex	r1, r3, [r2]
 80089ba:	2900      	cmp	r1, #0
 80089bc:	d1f3      	bne.n	80089a6 <UART_DMAReceiveCplt+0x78>
 80089be:	e7ea      	b.n	8008996 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089c0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80089c2:	f7ff fded 	bl	80085a0 <HAL_UARTEx_RxEventCallback>
 80089c6:	e7ed      	b.n	80089a4 <UART_DMAReceiveCplt+0x76>

080089c8 <UART_Start_Receive_DMA>:
{
 80089c8:	b530      	push	{r4, r5, lr}
 80089ca:	b083      	sub	sp, #12
 80089cc:	4604      	mov	r4, r0
 80089ce:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 80089d0:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 80089d2:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d4:	2500      	movs	r5, #0
 80089d6:	6445      	str	r5, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089d8:	2222      	movs	r2, #34	; 0x22
 80089da:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80089de:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80089e0:	481f      	ldr	r0, [pc, #124]	; (8008a60 <UART_Start_Receive_DMA+0x98>)
 80089e2:	6290      	str	r0, [r2, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80089e6:	481f      	ldr	r0, [pc, #124]	; (8008a64 <UART_Start_Receive_DMA+0x9c>)
 80089e8:	62d0      	str	r0, [r2, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80089ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80089ec:	481e      	ldr	r0, [pc, #120]	; (8008a68 <UART_Start_Receive_DMA+0xa0>)
 80089ee:	6310      	str	r0, [r2, #48]	; 0x30
  huart->hdmarx->XferAbortCallback = NULL;
 80089f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80089f2:	6355      	str	r5, [r2, #52]	; 0x34
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80089f4:	6820      	ldr	r0, [r4, #0]
 80089f6:	460a      	mov	r2, r1
 80089f8:	1d01      	adds	r1, r0, #4
 80089fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80089fc:	f7fc ff0a 	bl	8005814 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008a00:	9501      	str	r5, [sp, #4]
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	9201      	str	r2, [sp, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	9301      	str	r3, [sp, #4]
 8008a0c:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a0e:	6923      	ldr	r3, [r4, #16]
 8008a10:	b15b      	cbz	r3, 8008a2a <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a12:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a14:	f102 030c 	add.w	r3, r2, #12
 8008a18:	e853 3f00 	ldrex	r3, [r3]
 8008a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	320c      	adds	r2, #12
 8008a22:	e842 3100 	strex	r1, r3, [r2]
 8008a26:	2900      	cmp	r1, #0
 8008a28:	d1f3      	bne.n	8008a12 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a2a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2c:	f102 0314 	add.w	r3, r2, #20
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a38:	3214      	adds	r2, #20
 8008a3a:	e842 3100 	strex	r1, r3, [r2]
 8008a3e:	2900      	cmp	r1, #0
 8008a40:	d1f3      	bne.n	8008a2a <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a42:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a44:	f102 0314 	add.w	r3, r2, #20
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	3214      	adds	r2, #20
 8008a52:	e842 3100 	strex	r1, r3, [r2]
 8008a56:	2900      	cmp	r1, #0
 8008a58:	d1f3      	bne.n	8008a42 <UART_Start_Receive_DMA+0x7a>
}
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	b003      	add	sp, #12
 8008a5e:	bd30      	pop	{r4, r5, pc}
 8008a60:	0800892f 	.word	0x0800892f
 8008a64:	08008911 	.word	0x08008911
 8008a68:	080083b9 	.word	0x080083b9

08008a6c <HAL_UART_Receive_DMA>:
{
 8008a6c:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a6e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b20      	cmp	r3, #32
 8008a76:	d108      	bne.n	8008a8a <HAL_UART_Receive_DMA+0x1e>
    if ((pData == NULL) || (Size == 0U))
 8008a78:	b149      	cbz	r1, 8008a8e <HAL_UART_Receive_DMA+0x22>
 8008a7a:	b90a      	cbnz	r2, 8008a80 <HAL_UART_Receive_DMA+0x14>
      return HAL_ERROR;
 8008a7c:	2001      	movs	r0, #1
}
 8008a7e:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a80:	2300      	movs	r3, #0
 8008a82:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008a84:	f7ff ffa0 	bl	80089c8 <UART_Start_Receive_DMA>
 8008a88:	e7f9      	b.n	8008a7e <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 8008a8a:	2002      	movs	r0, #2
 8008a8c:	e7f7      	b.n	8008a7e <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 8008a8e:	2001      	movs	r0, #1
 8008a90:	e7f5      	b.n	8008a7e <HAL_UART_Receive_DMA+0x12>

08008a92 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8008a92:	2884      	cmp	r0, #132	; 0x84
 8008a94:	d001      	beq.n	8008a9a <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8008a96:	3003      	adds	r0, #3
 8008a98:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008a9a:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8008a9c:	4770      	bx	lr

08008a9e <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a9e:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8008aa2:	3800      	subs	r0, #0
 8008aa4:	bf18      	it	ne
 8008aa6:	2001      	movne	r0, #1
 8008aa8:	4770      	bx	lr

08008aaa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008aaa:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8008aac:	f001 f8a4 	bl	8009bf8 <vTaskStartScheduler>
  
  return osOK;
}
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	bd08      	pop	{r3, pc}

08008ab4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ab8:	b087      	sub	sp, #28
 8008aba:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008abc:	6944      	ldr	r4, [r0, #20]
 8008abe:	b1c4      	cbz	r4, 8008af2 <osThreadCreate+0x3e>
 8008ac0:	6985      	ldr	r5, [r0, #24]
 8008ac2:	b1b5      	cbz	r5, 8008af2 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ac4:	6847      	ldr	r7, [r0, #4]
 8008ac6:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008aca:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ace:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8008ad2:	f7ff ffde 	bl	8008a92 <makeFreeRtosPriority>
 8008ad6:	9502      	str	r5, [sp, #8]
 8008ad8:	9401      	str	r4, [sp, #4]
 8008ada:	9000      	str	r0, [sp, #0]
 8008adc:	4633      	mov	r3, r6
 8008ade:	464a      	mov	r2, r9
 8008ae0:	4641      	mov	r1, r8
 8008ae2:	4638      	mov	r0, r7
 8008ae4:	f000 ff84 	bl	80099f0 <xTaskCreateStatic>
 8008ae8:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008aea:	9805      	ldr	r0, [sp, #20]
}
 8008aec:	b007      	add	sp, #28
 8008aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008af2:	6844      	ldr	r4, [r0, #4]
 8008af4:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008af6:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008af8:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8008afc:	f7ff ffc9 	bl	8008a92 <makeFreeRtosPriority>
 8008b00:	ab05      	add	r3, sp, #20
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	9000      	str	r0, [sp, #0]
 8008b06:	4633      	mov	r3, r6
 8008b08:	b2ba      	uxth	r2, r7
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f000 ffa9 	bl	8009a64 <xTaskCreate>
 8008b12:	2801      	cmp	r0, #1
 8008b14:	d0e9      	beq.n	8008aea <osThreadCreate+0x36>
      return NULL;
 8008b16:	2000      	movs	r0, #0
 8008b18:	e7e8      	b.n	8008aec <osThreadCreate+0x38>

08008b1a <osThreadYield>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
  taskYIELD();
 8008b1a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b22:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	f3bf 8f6f 	isb	sy
  
  return osOK;
}
 8008b2e:	2000      	movs	r0, #0
 8008b30:	4770      	bx	lr

08008b32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008b32:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008b34:	b900      	cbnz	r0, 8008b38 <osDelay+0x6>
 8008b36:	2001      	movs	r0, #1
 8008b38:	f001 fa1c 	bl	8009f74 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	bd08      	pop	{r3, pc}

08008b40 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8008b40:	b510      	push	{r4, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8008b46:	6844      	ldr	r4, [r0, #4]
 8008b48:	b16c      	cbz	r4, 8008b66 <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 8008b4a:	2901      	cmp	r1, #1
 8008b4c:	d009      	beq.n	8008b62 <osTimerCreate+0x22>
 8008b4e:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8008b50:	6801      	ldr	r1, [r0, #0]
    return xTimerCreateStatic((const char *)"",
 8008b52:	9401      	str	r4, [sp, #4]
 8008b54:	9100      	str	r1, [sp, #0]
 8008b56:	2101      	movs	r1, #1
 8008b58:	4809      	ldr	r0, [pc, #36]	; (8008b80 <osTimerCreate+0x40>)
 8008b5a:	f001 fe65 	bl	800a828 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8008b5e:	b002      	add	sp, #8
 8008b60:	bd10      	pop	{r4, pc}
    return xTimerCreateStatic((const char *)"",
 8008b62:	2201      	movs	r2, #1
 8008b64:	e7f4      	b.n	8008b50 <osTimerCreate+0x10>
    return xTimerCreate((const char *)"",
 8008b66:	2901      	cmp	r1, #1
 8008b68:	d007      	beq.n	8008b7a <osTimerCreate+0x3a>
 8008b6a:	2200      	movs	r2, #0
                      (TaskFunction_t)timer_def->ptimer);
 8008b6c:	6801      	ldr	r1, [r0, #0]
    return xTimerCreate((const char *)"",
 8008b6e:	9100      	str	r1, [sp, #0]
 8008b70:	2101      	movs	r1, #1
 8008b72:	4803      	ldr	r0, [pc, #12]	; (8008b80 <osTimerCreate+0x40>)
 8008b74:	f001 fe3c 	bl	800a7f0 <xTimerCreate>
 8008b78:	e7f1      	b.n	8008b5e <osTimerCreate+0x1e>
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	e7f6      	b.n	8008b6c <osTimerCreate+0x2c>
 8008b7e:	bf00      	nop
 8008b80:	0800c5f0 	.word	0x0800c5f0

08008b84 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8008b84:	b530      	push	{r4, r5, lr}
 8008b86:	b085      	sub	sp, #20
 8008b88:	4604      	mov	r4, r0
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	9303      	str	r3, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8008b8e:	460d      	mov	r5, r1
 8008b90:	b901      	cbnz	r1, 8008b94 <osTimerStart+0x10>
    ticks = 1;
 8008b92:	2501      	movs	r5, #1
    
  if (inHandlerMode()) 
 8008b94:	f7ff ff83 	bl	8008a9e <inHandlerMode>
 8008b98:	b1d0      	cbz	r0, 8008bd0 <osTimerStart+0x4c>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	ab03      	add	r3, sp, #12
 8008ba0:	462a      	mov	r2, r5
 8008ba2:	2109      	movs	r1, #9
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f001 fe67 	bl	800a878 <xTimerGenericCommand>
 8008baa:	2801      	cmp	r0, #1
 8008bac:	d002      	beq.n	8008bb4 <osTimerStart+0x30>
    {
      result = osErrorOS;
 8008bae:	20ff      	movs	r0, #255	; 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 8008bb0:	b005      	add	sp, #20
 8008bb2:	bd30      	pop	{r4, r5, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8008bb4:	9b03      	ldr	r3, [sp, #12]
 8008bb6:	b1c3      	cbz	r3, 8008bea <osTimerStart+0x66>
 8008bb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8008bcc:	2000      	movs	r0, #0
 8008bce:	e7ef      	b.n	8008bb0 <osTimerStart+0x2c>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	462a      	mov	r2, r5
 8008bd6:	2104      	movs	r1, #4
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f001 fe4d 	bl	800a878 <xTimerGenericCommand>
 8008bde:	2801      	cmp	r0, #1
 8008be0:	d001      	beq.n	8008be6 <osTimerStart+0x62>
      result = osErrorOS;
 8008be2:	20ff      	movs	r0, #255	; 0xff
  return result;
 8008be4:	e7e4      	b.n	8008bb0 <osTimerStart+0x2c>
  osStatus result = osOK;
 8008be6:	2000      	movs	r0, #0
 8008be8:	e7e2      	b.n	8008bb0 <osTimerStart+0x2c>
 8008bea:	2000      	movs	r0, #0
 8008bec:	e7e0      	b.n	8008bb0 <osTimerStart+0x2c>

08008bee <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8008bee:	b530      	push	{r4, r5, lr}
 8008bf0:	b085      	sub	sp, #20
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	460d      	mov	r5, r1
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	9303      	str	r3, [sp, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8008bfa:	9302      	str	r3, [sp, #8]
  
  if (inHandlerMode())
 8008bfc:	f7ff ff4f 	bl	8008a9e <inHandlerMode>
 8008c00:	b1b0      	cbz	r0, 8008c30 <osSignalSet+0x42>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8008c02:	ab03      	add	r3, sp, #12
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	ab02      	add	r3, sp, #8
 8008c08:	2201      	movs	r2, #1
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f001 fc9f 	bl	800a550 <xTaskGenericNotifyFromISR>
 8008c12:	2801      	cmp	r0, #1
 8008c14:	d117      	bne.n	8008c46 <osSignalSet+0x58>
      return 0x80000000;
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8008c16:	9b03      	ldr	r3, [sp, #12]
 8008c18:	b193      	cbz	r3, 8008c40 <osSignalSet+0x52>
 8008c1a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c22:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	e007      	b.n	8008c40 <osSignalSet+0x52>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8008c30:	ab02      	add	r3, sp, #8
 8008c32:	2201      	movs	r2, #1
 8008c34:	4629      	mov	r1, r5
 8008c36:	4620      	mov	r0, r4
 8008c38:	f001 fc12 	bl	800a460 <xTaskGenericNotify>
 8008c3c:	2801      	cmp	r0, #1
 8008c3e:	d105      	bne.n	8008c4c <osSignalSet+0x5e>
    return 0x80000000;
  
  return ulPreviousNotificationValue;
 8008c40:	9802      	ldr	r0, [sp, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8008c42:	b005      	add	sp, #20
 8008c44:	bd30      	pop	{r4, r5, pc}
      return 0x80000000;
 8008c46:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008c4a:	e7fa      	b.n	8008c42 <osSignalSet+0x54>
    return 0x80000000;
 8008c4c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008c50:	e7f7      	b.n	8008c42 <osSignalSet+0x54>

08008c52 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8008c52:	b570      	push	{r4, r5, r6, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	4604      	mov	r4, r0
 8008c58:	460e      	mov	r6, r1
 8008c5a:	4615      	mov	r5, r2

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9302      	str	r3, [sp, #8]
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 8008c60:	f7ff ff1d 	bl	8008a9e <inHandlerMode>
 8008c64:	b148      	cbz	r0, 8008c7a <osSignalWait+0x28>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8008c66:	2382      	movs	r3, #130	; 0x82
 8008c68:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8008c6a:	ab04      	add	r3, sp, #16
 8008c6c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8008c70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008c74:	4620      	mov	r0, r4
 8008c76:	b004      	add	sp, #16
 8008c78:	bd70      	pop	{r4, r5, r6, pc}
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8008c7a:	462b      	mov	r3, r5
 8008c7c:	aa02      	add	r2, sp, #8
 8008c7e:	4631      	mov	r1, r6
 8008c80:	2000      	movs	r0, #0
 8008c82:	f001 fb9b 	bl	800a3bc <xTaskNotifyWait>
 8008c86:	2801      	cmp	r0, #1
 8008c88:	d006      	beq.n	8008c98 <osSignalWait+0x46>
      if(ticks == 0)  ret.status = osOK;
 8008c8a:	b915      	cbnz	r5, 8008c92 <osSignalWait+0x40>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	9301      	str	r3, [sp, #4]
 8008c90:	e7eb      	b.n	8008c6a <osSignalWait+0x18>
      else  ret.status = osEventTimeout;
 8008c92:	2340      	movs	r3, #64	; 0x40
 8008c94:	9301      	str	r3, [sp, #4]
 8008c96:	e7e8      	b.n	8008c6a <osSignalWait+0x18>
    else if(ret.value.signals < 0)
 8008c98:	9b02      	ldr	r3, [sp, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	db02      	blt.n	8008ca4 <osSignalWait+0x52>
    else  ret.status =  osEventSignal;
 8008c9e:	2308      	movs	r3, #8
 8008ca0:	9301      	str	r3, [sp, #4]
 8008ca2:	e7e2      	b.n	8008c6a <osSignalWait+0x18>
      ret.status =  osErrorValue;     
 8008ca4:	2386      	movs	r3, #134	; 0x86
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	e7df      	b.n	8008c6a <osSignalWait+0x18>

08008caa <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008caa:	b510      	push	{r4, lr}
 8008cac:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008cae:	6844      	ldr	r4, [r0, #4]
 8008cb0:	b17c      	cbz	r4, 8008cd2 <osSemaphoreCreate+0x28>
    if (count == 1) {
 8008cb2:	2901      	cmp	r1, #1
 8008cb4:	d003      	beq.n	8008cbe <osSemaphoreCreate+0x14>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008cb6:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008cb8:	4620      	mov	r0, r4
 8008cba:	b002      	add	sp, #8
 8008cbc:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	4623      	mov	r3, r4
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	2001      	movs	r0, #1
 8008cca:	f000 f9f9 	bl	80090c0 <xQueueGenericCreateStatic>
 8008cce:	4604      	mov	r4, r0
 8008cd0:	e7f2      	b.n	8008cb8 <osSemaphoreCreate+0xe>
    if (count == 1) {
 8008cd2:	2901      	cmp	r1, #1
 8008cd4:	d1f0      	bne.n	8008cb8 <osSemaphoreCreate+0xe>
      vSemaphoreCreateBinary(sema);
 8008cd6:	2203      	movs	r2, #3
 8008cd8:	2100      	movs	r1, #0
 8008cda:	2001      	movs	r0, #1
 8008cdc:	f000 fa39 	bl	8009152 <xQueueGenericCreate>
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d0e8      	beq.n	8008cb8 <osSemaphoreCreate+0xe>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	461a      	mov	r2, r3
 8008cea:	4619      	mov	r1, r3
 8008cec:	f000 fa58 	bl	80091a0 <xQueueGenericSend>
      return sema;
 8008cf0:	e7e2      	b.n	8008cb8 <osSemaphoreCreate+0xe>

08008cf2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008cf2:	b500      	push	{lr}
 8008cf4:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008cf6:	6882      	ldr	r2, [r0, #8]
 8008cf8:	b142      	cbz	r2, 8008d0c <osMessageCreate+0x1a>
 8008cfa:	68c3      	ldr	r3, [r0, #12]
 8008cfc:	b133      	cbz	r3, 8008d0c <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008cfe:	2100      	movs	r1, #0
 8008d00:	9100      	str	r1, [sp, #0]
 8008d02:	6841      	ldr	r1, [r0, #4]
 8008d04:	6800      	ldr	r0, [r0, #0]
 8008d06:	f000 f9db 	bl	80090c0 <xQueueGenericCreateStatic>
 8008d0a:	e004      	b.n	8008d16 <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	6841      	ldr	r1, [r0, #4]
 8008d10:	6800      	ldr	r0, [r0, #0]
 8008d12:	f000 fa1e 	bl	8009152 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008d16:	b003      	add	sp, #12
 8008d18:	f85d fb04 	ldr.w	pc, [sp], #4

08008d1c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008d1c:	b530      	push	{r4, r5, lr}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	4604      	mov	r4, r0
 8008d22:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008d24:	2300      	movs	r3, #0
 8008d26:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8008d28:	4615      	mov	r5, r2
 8008d2a:	b902      	cbnz	r2, 8008d2e <osMessagePut+0x12>
    ticks = 1;
 8008d2c:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8008d2e:	f7ff feb6 	bl	8008a9e <inHandlerMode>
 8008d32:	b1a8      	cbz	r0, 8008d60 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008d34:	2300      	movs	r3, #0
 8008d36:	aa03      	add	r2, sp, #12
 8008d38:	a901      	add	r1, sp, #4
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f000 faf4 	bl	8009328 <xQueueGenericSendFromISR>
 8008d40:	2801      	cmp	r0, #1
 8008d42:	d118      	bne.n	8008d76 <osMessagePut+0x5a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008d44:	9b03      	ldr	r3, [sp, #12]
 8008d46:	b1c3      	cbz	r3, 8008d7a <osMessagePut+0x5e>
 8008d48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d50:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	e008      	b.n	8008d72 <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008d60:	2300      	movs	r3, #0
 8008d62:	462a      	mov	r2, r5
 8008d64:	a901      	add	r1, sp, #4
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 fa1a 	bl	80091a0 <xQueueGenericSend>
 8008d6c:	2801      	cmp	r0, #1
 8008d6e:	d106      	bne.n	8008d7e <osMessagePut+0x62>
  return osOK;
 8008d70:	2000      	movs	r0, #0
}
 8008d72:	b005      	add	sp, #20
 8008d74:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 8008d76:	20ff      	movs	r0, #255	; 0xff
 8008d78:	e7fb      	b.n	8008d72 <osMessagePut+0x56>
  return osOK;
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	e7f9      	b.n	8008d72 <osMessagePut+0x56>
      return osErrorOS;
 8008d7e:	20ff      	movs	r0, #255	; 0xff
 8008d80:	e7f7      	b.n	8008d72 <osMessagePut+0x56>

08008d82 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008d82:	b570      	push	{r4, r5, r6, lr}
 8008d84:	b084      	sub	sp, #16
 8008d86:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008d88:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8008d8e:	b1e1      	cbz	r1, 8008dca <osMessageGet+0x48>
 8008d90:	460d      	mov	r5, r1
 8008d92:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8008d94:	2300      	movs	r3, #0
 8008d96:	9303      	str	r3, [sp, #12]
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8008d98:	f7ff fe81 	bl	8008a9e <inHandlerMode>
 8008d9c:	b300      	cbz	r0, 8008de0 <osMessageGet+0x5e>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008d9e:	aa03      	add	r2, sp, #12
 8008da0:	a901      	add	r1, sp, #4
 8008da2:	4628      	mov	r0, r5
 8008da4:	f000 fbd5 	bl	8009552 <xQueueReceiveFromISR>
 8008da8:	2801      	cmp	r0, #1
 8008daa:	d016      	beq.n	8008dda <osMessageGet+0x58>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008db0:	9b03      	ldr	r3, [sp, #12]
 8008db2:	b1fb      	cbz	r3, 8008df4 <osMessageGet+0x72>
 8008db4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dbc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	e014      	b.n	8008df4 <osMessageGet+0x72>
    event.status = osErrorParameter;
 8008dca:	2380      	movs	r3, #128	; 0x80
 8008dcc:	9300      	str	r3, [sp, #0]
    return event;
 8008dce:	466b      	mov	r3, sp
 8008dd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008dd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008dd8:	e011      	b.n	8008dfe <osMessageGet+0x7c>
      event.status = osEventMessage;
 8008dda:	2310      	movs	r3, #16
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	e7e7      	b.n	8008db0 <osMessageGet+0x2e>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008de0:	4632      	mov	r2, r6
 8008de2:	a901      	add	r1, sp, #4
 8008de4:	4628      	mov	r0, r5
 8008de6:	f000 fb05 	bl	80093f4 <xQueueReceive>
 8008dea:	2801      	cmp	r0, #1
 8008dec:	d00a      	beq.n	8008e04 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008dee:	b106      	cbz	r6, 8008df2 <osMessageGet+0x70>
 8008df0:	2640      	movs	r6, #64	; 0x40
 8008df2:	9600      	str	r6, [sp, #0]
    }
  }
  
  return event;
 8008df4:	466b      	mov	r3, sp
 8008df6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008dfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008dfe:	4620      	mov	r0, r4
 8008e00:	b004      	add	sp, #16
 8008e02:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8008e04:	2310      	movs	r3, #16
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	e7f4      	b.n	8008df4 <osMessageGet+0x72>

08008e0a <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8008e0a:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8008e0c:	f001 f92a 	bl	800a064 <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 8008e10:	2000      	movs	r0, #0
 8008e12:	bd08      	pop	{r3, pc}

08008e14 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8008e14:	b510      	push	{r4, lr}
 8008e16:	4604      	mov	r4, r0
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8008e18:	f7ff fe41 	bl	8008a9e <inHandlerMode>
 8008e1c:	b178      	cbz	r0, 8008e3e <osThreadResume+0x2a>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f000 fe98 	bl	8009b54 <xTaskResumeFromISR>
 8008e24:	2801      	cmp	r0, #1
 8008e26:	d10d      	bne.n	8008e44 <osThreadResume+0x30>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8008e28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e30:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	e002      	b.n	8008e44 <osThreadResume+0x30>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f000 fe44 	bl	8009acc <vTaskResume>
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 8008e44:	2000      	movs	r0, #0
 8008e46:	bd10      	pop	{r4, pc}

08008e48 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8008e48:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8008e4a:	b901      	cbnz	r1, 8008e4e <osDelayUntil+0x6>
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	f001 f83f 	bl	8009ed0 <vTaskDelayUntil>
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8008e52:	2000      	movs	r0, #0
 8008e54:	bd08      	pop	{r3, pc}

08008e56 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e56:	f100 0308 	add.w	r3, r0, #8
 8008e5a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e60:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e62:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e64:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e6a:	4770      	bx	lr

08008e6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e70:	4770      	bx	lr

08008e72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e72:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008e74:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e76:	689a      	ldr	r2, [r3, #8]
 8008e78:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e7a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e7c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008e7e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008e80:	6803      	ldr	r3, [r0, #0]
 8008e82:	3301      	adds	r3, #1
 8008e84:	6003      	str	r3, [r0, #0]
}
 8008e86:	4770      	bx	lr

08008e88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e88:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e8a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e8c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008e90:	d011      	beq.n	8008eb6 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e92:	f100 0308 	add.w	r3, r0, #8
 8008e96:	461c      	mov	r4, r3
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	42aa      	cmp	r2, r5
 8008e9e:	d9fa      	bls.n	8008e96 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ea0:	6863      	ldr	r3, [r4, #4]
 8008ea2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ea4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ea6:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ea8:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008eaa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008eac:	6803      	ldr	r3, [r0, #0]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	6003      	str	r3, [r0, #0]
}
 8008eb2:	bc30      	pop	{r4, r5}
 8008eb4:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8008eb6:	6904      	ldr	r4, [r0, #16]
 8008eb8:	e7f2      	b.n	8008ea0 <vListInsert+0x18>

08008eba <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008eba:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ebc:	6841      	ldr	r1, [r0, #4]
 8008ebe:	6882      	ldr	r2, [r0, #8]
 8008ec0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ec2:	6841      	ldr	r1, [r0, #4]
 8008ec4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	4282      	cmp	r2, r0
 8008eca:	d006      	beq.n	8008eda <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008ecc:	2200      	movs	r2, #0
 8008ece:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	3a01      	subs	r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ed6:	6818      	ldr	r0, [r3, #0]
}
 8008ed8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008eda:	6882      	ldr	r2, [r0, #8]
 8008edc:	605a      	str	r2, [r3, #4]
 8008ede:	e7f5      	b.n	8008ecc <uxListRemove+0x12>

08008ee0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ee4:	f001 fe8e 	bl	800ac04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ee8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008eea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d004      	beq.n	8008efa <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8008ef0:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8008ef2:	f001 fea9 	bl	800ac48 <vPortExitCritical>

	return xReturn;
}
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008efa:	2401      	movs	r4, #1
 8008efc:	e7f9      	b.n	8008ef2 <prvIsQueueFull+0x12>

08008efe <prvIsQueueEmpty>:
{
 8008efe:	b510      	push	{r4, lr}
 8008f00:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008f02:	f001 fe7f 	bl	800ac04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f08:	b923      	cbnz	r3, 8008f14 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8008f0a:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8008f0c:	f001 fe9c 	bl	800ac48 <vPortExitCritical>
}
 8008f10:	4620      	mov	r0, r4
 8008f12:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8008f14:	2400      	movs	r4, #0
 8008f16:	e7f9      	b.n	8008f0c <prvIsQueueEmpty+0xe>

08008f18 <prvCopyDataToQueue>:
{
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f1e:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f20:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008f22:	b95a      	cbnz	r2, 8008f3c <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f24:	6803      	ldr	r3, [r0, #0]
 8008f26:	b11b      	cbz	r3, 8008f30 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8008f28:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f2a:	3601      	adds	r6, #1
 8008f2c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008f30:	6840      	ldr	r0, [r0, #4]
 8008f32:	f001 f9eb 	bl	800a30c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8008f36:	2300      	movs	r3, #0
 8008f38:	6063      	str	r3, [r4, #4]
 8008f3a:	e7f6      	b.n	8008f2a <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008f3c:	b96d      	cbnz	r5, 8008f5a <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008f3e:	6880      	ldr	r0, [r0, #8]
 8008f40:	f002 fc79 	bl	800b836 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008f44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008f46:	68a3      	ldr	r3, [r4, #8]
 8008f48:	4413      	add	r3, r2
 8008f4a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f4c:	6862      	ldr	r2, [r4, #4]
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d319      	bcc.n	8008f86 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8008f56:	4628      	mov	r0, r5
 8008f58:	e7e7      	b.n	8008f2a <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f5a:	68c0      	ldr	r0, [r0, #12]
 8008f5c:	f002 fc6b 	bl	800b836 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008f60:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008f62:	4251      	negs	r1, r2
 8008f64:	68e3      	ldr	r3, [r4, #12]
 8008f66:	1a9b      	subs	r3, r3, r2
 8008f68:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f6a:	6822      	ldr	r2, [r4, #0]
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d202      	bcs.n	8008f76 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008f70:	6863      	ldr	r3, [r4, #4]
 8008f72:	440b      	add	r3, r1
 8008f74:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008f76:	2d02      	cmp	r5, #2
 8008f78:	d001      	beq.n	8008f7e <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	e7d5      	b.n	8008f2a <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f7e:	b126      	cbz	r6, 8008f8a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8008f80:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8008f82:	2000      	movs	r0, #0
 8008f84:	e7d1      	b.n	8008f2a <prvCopyDataToQueue+0x12>
 8008f86:	4628      	mov	r0, r5
 8008f88:	e7cf      	b.n	8008f2a <prvCopyDataToQueue+0x12>
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	e7cd      	b.n	8008f2a <prvCopyDataToQueue+0x12>

08008f8e <prvCopyDataFromQueue>:
{
 8008f8e:	b508      	push	{r3, lr}
 8008f90:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f92:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008f94:	b162      	cbz	r2, 8008fb0 <prvCopyDataFromQueue+0x22>
 8008f96:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008f98:	68d9      	ldr	r1, [r3, #12]
 8008f9a:	4411      	add	r1, r2
 8008f9c:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f9e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8008fa2:	4561      	cmp	r1, ip
 8008fa4:	d301      	bcc.n	8008faa <prvCopyDataFromQueue+0x1c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008fa6:	6819      	ldr	r1, [r3, #0]
 8008fa8:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008faa:	68d9      	ldr	r1, [r3, #12]
 8008fac:	f002 fc43 	bl	800b836 <memcpy>
}
 8008fb0:	bd08      	pop	{r3, pc}

08008fb2 <prvUnlockQueue>:
{
 8008fb2:	b538      	push	{r3, r4, r5, lr}
 8008fb4:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8008fb6:	f001 fe25 	bl	800ac04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008fba:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8008fbe:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fc0:	e001      	b.n	8008fc6 <prvUnlockQueue+0x14>
			--cTxLock;
 8008fc2:	3c01      	subs	r4, #1
 8008fc4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fc6:	2c00      	cmp	r4, #0
 8008fc8:	dd0a      	ble.n	8008fe0 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fcc:	b143      	cbz	r3, 8008fe0 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fce:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008fd2:	f001 f8f1 	bl	800a1b8 <xTaskRemoveFromEventList>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d0f3      	beq.n	8008fc2 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8008fda:	f001 f981 	bl	800a2e0 <vTaskMissedYield>
 8008fde:	e7f0      	b.n	8008fc2 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8008fe0:	23ff      	movs	r3, #255	; 0xff
 8008fe2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008fe6:	f001 fe2f 	bl	800ac48 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008fea:	f001 fe0b 	bl	800ac04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008fee:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8008ff2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ff4:	e001      	b.n	8008ffa <prvUnlockQueue+0x48>
				--cRxLock;
 8008ff6:	3c01      	subs	r4, #1
 8008ff8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ffa:	2c00      	cmp	r4, #0
 8008ffc:	dd0a      	ble.n	8009014 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ffe:	692b      	ldr	r3, [r5, #16]
 8009000:	b143      	cbz	r3, 8009014 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009002:	f105 0010 	add.w	r0, r5, #16
 8009006:	f001 f8d7 	bl	800a1b8 <xTaskRemoveFromEventList>
 800900a:	2800      	cmp	r0, #0
 800900c:	d0f3      	beq.n	8008ff6 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800900e:	f001 f967 	bl	800a2e0 <vTaskMissedYield>
 8009012:	e7f0      	b.n	8008ff6 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8009014:	23ff      	movs	r3, #255	; 0xff
 8009016:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800901a:	f001 fe15 	bl	800ac48 <vPortExitCritical>
}
 800901e:	bd38      	pop	{r3, r4, r5, pc}

08009020 <xQueueGenericReset>:
{
 8009020:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8009022:	b1e0      	cbz	r0, 800905e <xQueueGenericReset+0x3e>
 8009024:	460d      	mov	r5, r1
 8009026:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009028:	f001 fdec 	bl	800ac04 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009030:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009032:	fb01 3002 	mla	r0, r1, r2, r3
 8009036:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009038:	2000      	movs	r0, #0
 800903a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800903c:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800903e:	3a01      	subs	r2, #1
 8009040:	fb02 3301 	mla	r3, r2, r1, r3
 8009044:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009046:	23ff      	movs	r3, #255	; 0xff
 8009048:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800904c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8009050:	b9fd      	cbnz	r5, 8009092 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009052:	6923      	ldr	r3, [r4, #16]
 8009054:	b963      	cbnz	r3, 8009070 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8009056:	f001 fdf7 	bl	800ac48 <vPortExitCritical>
}
 800905a:	2001      	movs	r0, #1
 800905c:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800906e:	e7fe      	b.n	800906e <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009070:	f104 0010 	add.w	r0, r4, #16
 8009074:	f001 f8a0 	bl	800a1b8 <xTaskRemoveFromEventList>
 8009078:	2800      	cmp	r0, #0
 800907a:	d0ec      	beq.n	8009056 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800907c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009084:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	e7e1      	b.n	8009056 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009092:	f104 0010 	add.w	r0, r4, #16
 8009096:	f7ff fede 	bl	8008e56 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800909a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800909e:	f7ff feda 	bl	8008e56 <vListInitialise>
 80090a2:	e7d8      	b.n	8009056 <xQueueGenericReset+0x36>

080090a4 <prvInitialiseNewQueue>:
{
 80090a4:	b510      	push	{r4, lr}
 80090a6:	4603      	mov	r3, r0
 80090a8:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80090aa:	460c      	mov	r4, r1
 80090ac:	b931      	cbnz	r1, 80090bc <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80090ae:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80090b0:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80090b2:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80090b4:	2101      	movs	r1, #1
 80090b6:	f7ff ffb3 	bl	8009020 <xQueueGenericReset>
}
 80090ba:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80090bc:	6002      	str	r2, [r0, #0]
 80090be:	e7f7      	b.n	80090b0 <prvInitialiseNewQueue+0xc>

080090c0 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090c0:	b940      	cbnz	r0, 80090d4 <xQueueGenericCreateStatic+0x14>
 80090c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	e7fe      	b.n	80090d2 <xQueueGenericCreateStatic+0x12>
	{
 80090d4:	b510      	push	{r4, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	461c      	mov	r4, r3
 80090da:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 80090dc:	b153      	cbz	r3, 80090f4 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80090de:	b192      	cbz	r2, 8009106 <xQueueGenericCreateStatic+0x46>
 80090e0:	b989      	cbnz	r1, 8009106 <xQueueGenericCreateStatic+0x46>
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	e7fe      	b.n	80090f2 <xQueueGenericCreateStatic+0x32>
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8009104:	e7fe      	b.n	8009104 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009106:	b16a      	cbz	r2, 8009124 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009108:	2348      	movs	r3, #72	; 0x48
 800910a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800910c:	9b03      	ldr	r3, [sp, #12]
 800910e:	2b48      	cmp	r3, #72	; 0x48
 8009110:	d013      	beq.n	800913a <xQueueGenericCreateStatic+0x7a>
 8009112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009116:	f383 8811 	msr	BASEPRI, r3
 800911a:	f3bf 8f6f 	isb	sy
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	e7fe      	b.n	8009122 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009124:	2900      	cmp	r1, #0
 8009126:	d0ef      	beq.n	8009108 <xQueueGenericCreateStatic+0x48>
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	e7fe      	b.n	8009138 <xQueueGenericCreateStatic+0x78>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800913a:	2301      	movs	r3, #1
 800913c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009140:	9400      	str	r4, [sp, #0]
 8009142:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8009146:	4660      	mov	r0, ip
 8009148:	f7ff ffac 	bl	80090a4 <prvInitialiseNewQueue>
	}
 800914c:	4620      	mov	r0, r4
 800914e:	b004      	add	sp, #16
 8009150:	bd10      	pop	{r4, pc}

08009152 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009152:	b940      	cbnz	r0, 8009166 <xQueueGenericCreate+0x14>
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	e7fe      	b.n	8009164 <xQueueGenericCreate+0x12>
	{
 8009166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009168:	b083      	sub	sp, #12
 800916a:	460c      	mov	r4, r1
 800916c:	4615      	mov	r5, r2
 800916e:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8009170:	b1a1      	cbz	r1, 800919c <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009172:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009176:	3048      	adds	r0, #72	; 0x48
 8009178:	f001 febe 	bl	800aef8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800917c:	4606      	mov	r6, r0
 800917e:	b150      	cbz	r0, 8009196 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009180:	2300      	movs	r3, #0
 8009182:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009186:	9000      	str	r0, [sp, #0]
 8009188:	462b      	mov	r3, r5
 800918a:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800918e:	4621      	mov	r1, r4
 8009190:	4638      	mov	r0, r7
 8009192:	f7ff ff87 	bl	80090a4 <prvInitialiseNewQueue>
	}
 8009196:	4630      	mov	r0, r6
 8009198:	b003      	add	sp, #12
 800919a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 800919c:	4608      	mov	r0, r1
 800919e:	e7ea      	b.n	8009176 <xQueueGenericCreate+0x24>

080091a0 <xQueueGenericSend>:
{
 80091a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091a2:	b085      	sub	sp, #20
 80091a4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80091a6:	b188      	cbz	r0, 80091cc <xQueueGenericSend+0x2c>
 80091a8:	460f      	mov	r7, r1
 80091aa:	461d      	mov	r5, r3
 80091ac:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091ae:	b1b1      	cbz	r1, 80091de <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091b0:	2d02      	cmp	r5, #2
 80091b2:	d120      	bne.n	80091f6 <xQueueGenericSend+0x56>
 80091b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d01d      	beq.n	80091f6 <xQueueGenericSend+0x56>
 80091ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	e7fe      	b.n	80091ca <xQueueGenericSend+0x2a>
 80091cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80091dc:	e7fe      	b.n	80091dc <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d0e5      	beq.n	80091b0 <xQueueGenericSend+0x10>
 80091e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e8:	f383 8811 	msr	BASEPRI, r3
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	e7fe      	b.n	80091f4 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091f6:	f001 f879 	bl	800a2ec <xTaskGetSchedulerState>
 80091fa:	4606      	mov	r6, r0
 80091fc:	b958      	cbnz	r0, 8009216 <xQueueGenericSend+0x76>
 80091fe:	9b01      	ldr	r3, [sp, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d048      	beq.n	8009296 <xQueueGenericSend+0xf6>
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	e7fe      	b.n	8009214 <xQueueGenericSend+0x74>
 8009216:	2600      	movs	r6, #0
 8009218:	e03d      	b.n	8009296 <xQueueGenericSend+0xf6>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800921a:	462a      	mov	r2, r5
 800921c:	4639      	mov	r1, r7
 800921e:	4620      	mov	r0, r4
 8009220:	f7ff fe7a 	bl	8008f18 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009226:	b97b      	cbnz	r3, 8009248 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8009228:	b148      	cbz	r0, 800923e <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800922a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800922e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009232:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800923e:	f001 fd03 	bl	800ac48 <vPortExitCritical>
				return pdPASS;
 8009242:	2001      	movs	r0, #1
}
 8009244:	b005      	add	sp, #20
 8009246:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009248:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800924c:	f000 ffb4 	bl	800a1b8 <xTaskRemoveFromEventList>
 8009250:	2800      	cmp	r0, #0
 8009252:	d0f4      	beq.n	800923e <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8009254:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800925c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	e7e9      	b.n	800923e <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800926a:	f001 fced 	bl	800ac48 <vPortExitCritical>
					return errQUEUE_FULL;
 800926e:	2000      	movs	r0, #0
 8009270:	e7e8      	b.n	8009244 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009272:	a802      	add	r0, sp, #8
 8009274:	f000 ffe6 	bl	800a244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009278:	2601      	movs	r6, #1
 800927a:	e019      	b.n	80092b0 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800927c:	2300      	movs	r3, #0
 800927e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009282:	e021      	b.n	80092c8 <xQueueGenericSend+0x128>
 8009284:	2300      	movs	r3, #0
 8009286:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800928a:	e023      	b.n	80092d4 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800928c:	4620      	mov	r0, r4
 800928e:	f7ff fe90 	bl	8008fb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009292:	f000 fda1 	bl	8009dd8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8009296:	f001 fcb5 	bl	800ac04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800929a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800929c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800929e:	429a      	cmp	r2, r3
 80092a0:	d3bb      	bcc.n	800921a <xQueueGenericSend+0x7a>
 80092a2:	2d02      	cmp	r5, #2
 80092a4:	d0b9      	beq.n	800921a <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80092a6:	9b01      	ldr	r3, [sp, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d0de      	beq.n	800926a <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 80092ac:	2e00      	cmp	r6, #0
 80092ae:	d0e0      	beq.n	8009272 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 80092b0:	f001 fcca 	bl	800ac48 <vPortExitCritical>
		vTaskSuspendAll();
 80092b4:	f000 fcf6 	bl	8009ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092b8:	f001 fca4 	bl	800ac04 <vPortEnterCritical>
 80092bc:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80092c0:	b252      	sxtb	r2, r2
 80092c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80092c6:	d0d9      	beq.n	800927c <xQueueGenericSend+0xdc>
 80092c8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80092cc:	b252      	sxtb	r2, r2
 80092ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 80092d2:	d0d7      	beq.n	8009284 <xQueueGenericSend+0xe4>
 80092d4:	f001 fcb8 	bl	800ac48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092d8:	a901      	add	r1, sp, #4
 80092da:	a802      	add	r0, sp, #8
 80092dc:	f000 ffbe 	bl	800a25c <xTaskCheckForTimeOut>
 80092e0:	b9d8      	cbnz	r0, 800931a <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80092e2:	4620      	mov	r0, r4
 80092e4:	f7ff fdfc 	bl	8008ee0 <prvIsQueueFull>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d0cf      	beq.n	800928c <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80092ec:	9901      	ldr	r1, [sp, #4]
 80092ee:	f104 0010 	add.w	r0, r4, #16
 80092f2:	f000 ff2d 	bl	800a150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092f6:	4620      	mov	r0, r4
 80092f8:	f7ff fe5b 	bl	8008fb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80092fc:	f000 fd6c 	bl	8009dd8 <xTaskResumeAll>
 8009300:	2800      	cmp	r0, #0
 8009302:	d1c8      	bne.n	8009296 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8009304:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	e7bd      	b.n	8009296 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800931a:	4620      	mov	r0, r4
 800931c:	f7ff fe49 	bl	8008fb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009320:	f000 fd5a 	bl	8009dd8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8009324:	2000      	movs	r0, #0
 8009326:	e78d      	b.n	8009244 <xQueueGenericSend+0xa4>

08009328 <xQueueGenericSendFromISR>:
{
 8009328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800932c:	b190      	cbz	r0, 8009354 <xQueueGenericSendFromISR+0x2c>
 800932e:	460f      	mov	r7, r1
 8009330:	4616      	mov	r6, r2
 8009332:	461c      	mov	r4, r3
 8009334:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009336:	b1b1      	cbz	r1, 8009366 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009338:	2c02      	cmp	r4, #2
 800933a:	d120      	bne.n	800937e <xQueueGenericSendFromISR+0x56>
 800933c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800933e:	2b01      	cmp	r3, #1
 8009340:	d01d      	beq.n	800937e <xQueueGenericSendFromISR+0x56>
 8009342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	e7fe      	b.n	8009352 <xQueueGenericSendFromISR+0x2a>
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009364:	e7fe      	b.n	8009364 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009366:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0e5      	beq.n	8009338 <xQueueGenericSendFromISR+0x10>
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	e7fe      	b.n	800937c <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800937e:	f001 fd2b 	bl	800add8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009382:	f3ef 8811 	mrs	r8, BASEPRI
 8009386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009396:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8009398:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800939a:	429a      	cmp	r2, r3
 800939c:	d306      	bcc.n	80093ac <xQueueGenericSendFromISR+0x84>
 800939e:	2c02      	cmp	r4, #2
 80093a0:	d004      	beq.n	80093ac <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80093a2:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093a4:	f388 8811 	msr	BASEPRI, r8
}
 80093a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80093ac:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 80093b0:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093b4:	4622      	mov	r2, r4
 80093b6:	4639      	mov	r1, r7
 80093b8:	4628      	mov	r0, r5
 80093ba:	f7ff fdad 	bl	8008f18 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80093be:	f1b9 3fff 	cmp.w	r9, #4294967295
 80093c2:	d006      	beq.n	80093d2 <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80093c4:	f109 0301 	add.w	r3, r9, #1
 80093c8:	b25b      	sxtb	r3, r3
 80093ca:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 80093ce:	2001      	movs	r0, #1
 80093d0:	e7e8      	b.n	80093a4 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093d4:	b90b      	cbnz	r3, 80093da <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 80093d6:	2001      	movs	r0, #1
 80093d8:	e7e4      	b.n	80093a4 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093da:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80093de:	f000 feeb 	bl	800a1b8 <xTaskRemoveFromEventList>
 80093e2:	b118      	cbz	r0, 80093ec <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 80093e4:	b126      	cbz	r6, 80093f0 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093e6:	2001      	movs	r0, #1
 80093e8:	6030      	str	r0, [r6, #0]
 80093ea:	e7db      	b.n	80093a4 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80093ec:	2001      	movs	r0, #1
 80093ee:	e7d9      	b.n	80093a4 <xQueueGenericSendFromISR+0x7c>
 80093f0:	2001      	movs	r0, #1
 80093f2:	e7d7      	b.n	80093a4 <xQueueGenericSendFromISR+0x7c>

080093f4 <xQueueReceive>:
{
 80093f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093f6:	b085      	sub	sp, #20
 80093f8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80093fa:	b190      	cbz	r0, 8009422 <xQueueReceive+0x2e>
 80093fc:	460f      	mov	r7, r1
 80093fe:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009400:	b1c1      	cbz	r1, 8009434 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009402:	f000 ff73 	bl	800a2ec <xTaskGetSchedulerState>
 8009406:	4606      	mov	r6, r0
 8009408:	bb00      	cbnz	r0, 800944c <xQueueReceive+0x58>
 800940a:	9b01      	ldr	r3, [sp, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d05e      	beq.n	80094ce <xQueueReceive+0xda>
	__asm volatile
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	e7fe      	b.n	8009420 <xQueueReceive+0x2c>
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8009432:	e7fe      	b.n	8009432 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009434:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009436:	2b00      	cmp	r3, #0
 8009438:	d0e3      	beq.n	8009402 <xQueueReceive+0xe>
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	e7fe      	b.n	800944a <xQueueReceive+0x56>
 800944c:	2600      	movs	r6, #0
 800944e:	e03e      	b.n	80094ce <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009450:	4639      	mov	r1, r7
 8009452:	4620      	mov	r0, r4
 8009454:	f7ff fd9b 	bl	8008f8e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009458:	3d01      	subs	r5, #1
 800945a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800945c:	6923      	ldr	r3, [r4, #16]
 800945e:	b923      	cbnz	r3, 800946a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8009460:	f001 fbf2 	bl	800ac48 <vPortExitCritical>
				return pdPASS;
 8009464:	2001      	movs	r0, #1
}
 8009466:	b005      	add	sp, #20
 8009468:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800946a:	f104 0010 	add.w	r0, r4, #16
 800946e:	f000 fea3 	bl	800a1b8 <xTaskRemoveFromEventList>
 8009472:	2800      	cmp	r0, #0
 8009474:	d0f4      	beq.n	8009460 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8009476:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800947a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800947e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	e7e9      	b.n	8009460 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800948c:	f001 fbdc 	bl	800ac48 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009490:	2000      	movs	r0, #0
 8009492:	e7e8      	b.n	8009466 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009494:	a802      	add	r0, sp, #8
 8009496:	f000 fed5 	bl	800a244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800949a:	2601      	movs	r6, #1
 800949c:	e021      	b.n	80094e2 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800949e:	2300      	movs	r3, #0
 80094a0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80094a4:	e029      	b.n	80094fa <xQueueReceive+0x106>
 80094a6:	2300      	movs	r3, #0
 80094a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094ac:	e02b      	b.n	8009506 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80094ae:	4620      	mov	r0, r4
 80094b0:	f7ff fd7f 	bl	8008fb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094b4:	f000 fc90 	bl	8009dd8 <xTaskResumeAll>
 80094b8:	e009      	b.n	80094ce <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80094ba:	4620      	mov	r0, r4
 80094bc:	f7ff fd79 	bl	8008fb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094c0:	f000 fc8a 	bl	8009dd8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094c4:	4620      	mov	r0, r4
 80094c6:	f7ff fd1a 	bl	8008efe <prvIsQueueEmpty>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d13f      	bne.n	800954e <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 80094ce:	f001 fb99 	bl	800ac04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094d2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094d4:	2d00      	cmp	r5, #0
 80094d6:	d1bb      	bne.n	8009450 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80094d8:	9b01      	ldr	r3, [sp, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d0d6      	beq.n	800948c <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80094de:	2e00      	cmp	r6, #0
 80094e0:	d0d8      	beq.n	8009494 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 80094e2:	f001 fbb1 	bl	800ac48 <vPortExitCritical>
		vTaskSuspendAll();
 80094e6:	f000 fbdd 	bl	8009ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094ea:	f001 fb8b 	bl	800ac04 <vPortEnterCritical>
 80094ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80094f2:	b25b      	sxtb	r3, r3
 80094f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f8:	d0d1      	beq.n	800949e <xQueueReceive+0xaa>
 80094fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80094fe:	b25b      	sxtb	r3, r3
 8009500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009504:	d0cf      	beq.n	80094a6 <xQueueReceive+0xb2>
 8009506:	f001 fb9f 	bl	800ac48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800950a:	a901      	add	r1, sp, #4
 800950c:	a802      	add	r0, sp, #8
 800950e:	f000 fea5 	bl	800a25c <xTaskCheckForTimeOut>
 8009512:	2800      	cmp	r0, #0
 8009514:	d1d1      	bne.n	80094ba <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009516:	4620      	mov	r0, r4
 8009518:	f7ff fcf1 	bl	8008efe <prvIsQueueEmpty>
 800951c:	2800      	cmp	r0, #0
 800951e:	d0c6      	beq.n	80094ae <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009520:	9901      	ldr	r1, [sp, #4]
 8009522:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009526:	f000 fe13 	bl	800a150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800952a:	4620      	mov	r0, r4
 800952c:	f7ff fd41 	bl	8008fb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009530:	f000 fc52 	bl	8009dd8 <xTaskResumeAll>
 8009534:	2800      	cmp	r0, #0
 8009536:	d1ca      	bne.n	80094ce <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8009538:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800953c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009540:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	e7bf      	b.n	80094ce <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800954e:	2000      	movs	r0, #0
 8009550:	e789      	b.n	8009466 <xQueueReceive+0x72>

08009552 <xQueueReceiveFromISR>:
{
 8009552:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009556:	b1b0      	cbz	r0, 8009586 <xQueueReceiveFromISR+0x34>
 8009558:	460d      	mov	r5, r1
 800955a:	4690      	mov	r8, r2
 800955c:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800955e:	b1d9      	cbz	r1, 8009598 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009560:	f001 fc3a 	bl	800add8 <vPortValidateInterruptPriority>
	__asm volatile
 8009564:	f3ef 8711 	mrs	r7, BASEPRI
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009578:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800957a:	b9ce      	cbnz	r6, 80095b0 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800957c:	2000      	movs	r0, #0
	__asm volatile
 800957e:	f387 8811 	msr	BASEPRI, r7
}
 8009582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009596:	e7fe      	b.n	8009596 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009598:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800959a:	2b00      	cmp	r3, #0
 800959c:	d0e0      	beq.n	8009560 <xQueueReceiveFromISR+0xe>
 800959e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	e7fe      	b.n	80095ae <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80095b0:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 80095b4:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095b8:	4629      	mov	r1, r5
 80095ba:	4620      	mov	r0, r4
 80095bc:	f7ff fce7 	bl	8008f8e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80095c0:	1e73      	subs	r3, r6, #1
 80095c2:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80095c4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80095c8:	d006      	beq.n	80095d8 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80095ca:	f109 0301 	add.w	r3, r9, #1
 80095ce:	b25b      	sxtb	r3, r3
 80095d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80095d4:	2001      	movs	r0, #1
 80095d6:	e7d2      	b.n	800957e <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095d8:	6923      	ldr	r3, [r4, #16]
 80095da:	b90b      	cbnz	r3, 80095e0 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 80095dc:	2001      	movs	r0, #1
 80095de:	e7ce      	b.n	800957e <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095e0:	f104 0010 	add.w	r0, r4, #16
 80095e4:	f000 fde8 	bl	800a1b8 <xTaskRemoveFromEventList>
 80095e8:	b130      	cbz	r0, 80095f8 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 80095ea:	f1b8 0f00 	cmp.w	r8, #0
 80095ee:	d005      	beq.n	80095fc <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80095f0:	2001      	movs	r0, #1
 80095f2:	f8c8 0000 	str.w	r0, [r8]
 80095f6:	e7c2      	b.n	800957e <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 80095f8:	2001      	movs	r0, #1
 80095fa:	e7c0      	b.n	800957e <xQueueReceiveFromISR+0x2c>
 80095fc:	2001      	movs	r0, #1
 80095fe:	e7be      	b.n	800957e <xQueueReceiveFromISR+0x2c>

08009600 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009600:	2300      	movs	r3, #0
 8009602:	2b07      	cmp	r3, #7
 8009604:	d80c      	bhi.n	8009620 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009606:	4a07      	ldr	r2, [pc, #28]	; (8009624 <vQueueAddToRegistry+0x24>)
 8009608:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800960c:	b10a      	cbz	r2, 8009612 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800960e:	3301      	adds	r3, #1
 8009610:	e7f7      	b.n	8009602 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009612:	4a04      	ldr	r2, [pc, #16]	; (8009624 <vQueueAddToRegistry+0x24>)
 8009614:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009618:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800961c:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800961e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	2000197c 	.word	0x2000197c

08009628 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	4604      	mov	r4, r0
 800962c:	460d      	mov	r5, r1
 800962e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009630:	f001 fae8 	bl	800ac04 <vPortEnterCritical>
 8009634:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009638:	b25b      	sxtb	r3, r3
 800963a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963e:	d00d      	beq.n	800965c <vQueueWaitForMessageRestricted+0x34>
 8009640:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009644:	b25b      	sxtb	r3, r3
 8009646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964a:	d00b      	beq.n	8009664 <vQueueWaitForMessageRestricted+0x3c>
 800964c:	f001 fafc 	bl	800ac48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009650:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009652:	b15b      	cbz	r3, 800966c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009654:	4620      	mov	r0, r4
 8009656:	f7ff fcac 	bl	8008fb2 <prvUnlockQueue>
	}
 800965a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800965c:	2300      	movs	r3, #0
 800965e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009662:	e7ed      	b.n	8009640 <vQueueWaitForMessageRestricted+0x18>
 8009664:	2300      	movs	r3, #0
 8009666:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800966a:	e7ef      	b.n	800964c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800966c:	4632      	mov	r2, r6
 800966e:	4629      	mov	r1, r5
 8009670:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009674:	f000 fd84 	bl	800a180 <vTaskPlaceOnEventListRestricted>
 8009678:	e7ec      	b.n	8009654 <vQueueWaitForMessageRestricted+0x2c>
	...

0800967c <prvTaskIsTaskSuspended>:

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800967c:	b128      	cbz	r0, 800968a <prvTaskIsTaskSuspended+0xe>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800967e:	6941      	ldr	r1, [r0, #20]
 8009680:	4a0c      	ldr	r2, [pc, #48]	; (80096b4 <prvTaskIsTaskSuspended+0x38>)
 8009682:	4291      	cmp	r1, r2
 8009684:	d00a      	beq.n	800969c <prvTaskIsTaskSuspended+0x20>
	BaseType_t xReturn = pdFALSE;
 8009686:	2000      	movs	r0, #0
 8009688:	4770      	bx	lr
 800968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
		configASSERT( xTask );
 800969a:	e7fe      	b.n	800969a <prvTaskIsTaskSuspended+0x1e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800969c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800969e:	4a06      	ldr	r2, [pc, #24]	; (80096b8 <prvTaskIsTaskSuspended+0x3c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d002      	beq.n	80096aa <prvTaskIsTaskSuspended+0x2e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80096a4:	b11b      	cbz	r3, 80096ae <prvTaskIsTaskSuspended+0x32>
	BaseType_t xReturn = pdFALSE;
 80096a6:	2000      	movs	r0, #0
 80096a8:	4770      	bx	lr
 80096aa:	2000      	movs	r0, #0
 80096ac:	4770      	bx	lr
				{
					xReturn = pdTRUE;
 80096ae:	2001      	movs	r0, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	20001ab8 	.word	0x20001ab8
 80096b8:	20001aa0 	.word	0x20001aa0

080096bc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096bc:	4b08      	ldr	r3, [pc, #32]	; (80096e0 <prvResetNextTaskUnblockTime+0x24>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	b923      	cbnz	r3, 80096ce <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096c4:	4b07      	ldr	r3, [pc, #28]	; (80096e4 <prvResetNextTaskUnblockTime+0x28>)
 80096c6:	f04f 32ff 	mov.w	r2, #4294967295
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80096ce:	4b04      	ldr	r3, [pc, #16]	; (80096e0 <prvResetNextTaskUnblockTime+0x24>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80096d6:	685a      	ldr	r2, [r3, #4]
 80096d8:	4b02      	ldr	r3, [pc, #8]	; (80096e4 <prvResetNextTaskUnblockTime+0x28>)
 80096da:	601a      	str	r2, [r3, #0]
	}
}
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	200019c0 	.word	0x200019c0
 80096e4:	20001a98 	.word	0x20001a98

080096e8 <prvInitialiseNewTask>:
{
 80096e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ec:	4607      	mov	r7, r0
 80096ee:	4698      	mov	r8, r3
 80096f0:	9d08      	ldr	r5, [sp, #32]
 80096f2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80096f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80096f8:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80096fa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80096fe:	3a01      	subs	r2, #1
 8009700:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009704:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009708:	f04f 0c00 	mov.w	ip, #0
 800970c:	f1bc 0f0f 	cmp.w	ip, #15
 8009710:	d809      	bhi.n	8009726 <prvInitialiseNewTask+0x3e>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009712:	f811 200c 	ldrb.w	r2, [r1, ip]
 8009716:	eb04 030c 	add.w	r3, r4, ip
 800971a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800971e:	b112      	cbz	r2, 8009726 <prvInitialiseNewTask+0x3e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009720:	f10c 0c01 	add.w	ip, ip, #1
 8009724:	e7f2      	b.n	800970c <prvInitialiseNewTask+0x24>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009726:	2300      	movs	r3, #0
 8009728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800972c:	2d06      	cmp	r5, #6
 800972e:	d900      	bls.n	8009732 <prvInitialiseNewTask+0x4a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009730:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8009732:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009734:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009736:	f04f 0a00 	mov.w	sl, #0
 800973a:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800973e:	1d20      	adds	r0, r4, #4
 8009740:	f7ff fb94 	bl	8008e6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009744:	f104 0018 	add.w	r0, r4, #24
 8009748:	f7ff fb90 	bl	8008e6c <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800974c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800974e:	f1c5 0507 	rsb	r5, r5, #7
 8009752:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009754:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8009756:	f8c4 a098 	str.w	sl, [r4, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800975a:	f884 a09c 	strb.w	sl, [r4, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800975e:	224c      	movs	r2, #76	; 0x4c
 8009760:	4651      	mov	r1, sl
 8009762:	18a0      	adds	r0, r4, r2
 8009764:	f001 ff68 	bl	800b638 <memset>
 8009768:	4b09      	ldr	r3, [pc, #36]	; (8009790 <prvInitialiseNewTask+0xa8>)
 800976a:	6523      	str	r3, [r4, #80]	; 0x50
 800976c:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009770:	6562      	str	r2, [r4, #84]	; 0x54
 8009772:	33d0      	adds	r3, #208	; 0xd0
 8009774:	65a3      	str	r3, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009776:	4642      	mov	r2, r8
 8009778:	4639      	mov	r1, r7
 800977a:	4630      	mov	r0, r6
 800977c:	f001 fa1c 	bl	800abb8 <pxPortInitialiseStack>
 8009780:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8009782:	f1b9 0f00 	cmp.w	r9, #0
 8009786:	d001      	beq.n	800978c <prvInitialiseNewTask+0xa4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009788:	f8c9 4000 	str.w	r4, [r9]
}
 800978c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009790:	20002c0c 	.word	0x20002c0c

08009794 <prvInitialiseTaskLists>:
{
 8009794:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009796:	2400      	movs	r4, #0
 8009798:	e007      	b.n	80097aa <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800979a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800979e:	0093      	lsls	r3, r2, #2
 80097a0:	480e      	ldr	r0, [pc, #56]	; (80097dc <prvInitialiseTaskLists+0x48>)
 80097a2:	4418      	add	r0, r3
 80097a4:	f7ff fb57 	bl	8008e56 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097a8:	3401      	adds	r4, #1
 80097aa:	2c06      	cmp	r4, #6
 80097ac:	d9f5      	bls.n	800979a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80097ae:	4d0c      	ldr	r5, [pc, #48]	; (80097e0 <prvInitialiseTaskLists+0x4c>)
 80097b0:	4628      	mov	r0, r5
 80097b2:	f7ff fb50 	bl	8008e56 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097b6:	4c0b      	ldr	r4, [pc, #44]	; (80097e4 <prvInitialiseTaskLists+0x50>)
 80097b8:	4620      	mov	r0, r4
 80097ba:	f7ff fb4c 	bl	8008e56 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097be:	480a      	ldr	r0, [pc, #40]	; (80097e8 <prvInitialiseTaskLists+0x54>)
 80097c0:	f7ff fb49 	bl	8008e56 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80097c4:	4809      	ldr	r0, [pc, #36]	; (80097ec <prvInitialiseTaskLists+0x58>)
 80097c6:	f7ff fb46 	bl	8008e56 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80097ca:	4809      	ldr	r0, [pc, #36]	; (80097f0 <prvInitialiseTaskLists+0x5c>)
 80097cc:	f7ff fb43 	bl	8008e56 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80097d0:	4b08      	ldr	r3, [pc, #32]	; (80097f4 <prvInitialiseTaskLists+0x60>)
 80097d2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80097d4:	4b08      	ldr	r3, [pc, #32]	; (80097f8 <prvInitialiseTaskLists+0x64>)
 80097d6:	601c      	str	r4, [r3, #0]
}
 80097d8:	bd38      	pop	{r3, r4, r5, pc}
 80097da:	bf00      	nop
 80097dc:	200019c8 	.word	0x200019c8
 80097e0:	20001a6c 	.word	0x20001a6c
 80097e4:	20001a80 	.word	0x20001a80
 80097e8:	20001aa0 	.word	0x20001aa0
 80097ec:	20001acc 	.word	0x20001acc
 80097f0:	20001ab8 	.word	0x20001ab8
 80097f4:	200019c0 	.word	0x200019c0
 80097f8:	200019c4 	.word	0x200019c4

080097fc <prvAddNewTaskToReadyList>:
{
 80097fc:	b510      	push	{r4, lr}
 80097fe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009800:	f001 fa00 	bl	800ac04 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009804:	4a21      	ldr	r2, [pc, #132]	; (800988c <prvAddNewTaskToReadyList+0x90>)
 8009806:	6813      	ldr	r3, [r2, #0]
 8009808:	3301      	adds	r3, #1
 800980a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800980c:	4b20      	ldr	r3, [pc, #128]	; (8009890 <prvAddNewTaskToReadyList+0x94>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	b15b      	cbz	r3, 800982a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8009812:	4b20      	ldr	r3, [pc, #128]	; (8009894 <prvAddNewTaskToReadyList+0x98>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	b96b      	cbnz	r3, 8009834 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009818:	4b1d      	ldr	r3, [pc, #116]	; (8009890 <prvAddNewTaskToReadyList+0x94>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009820:	429a      	cmp	r2, r3
 8009822:	d807      	bhi.n	8009834 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009824:	4b1a      	ldr	r3, [pc, #104]	; (8009890 <prvAddNewTaskToReadyList+0x94>)
 8009826:	601c      	str	r4, [r3, #0]
 8009828:	e004      	b.n	8009834 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800982a:	4b19      	ldr	r3, [pc, #100]	; (8009890 <prvAddNewTaskToReadyList+0x94>)
 800982c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800982e:	6813      	ldr	r3, [r2, #0]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d028      	beq.n	8009886 <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 8009834:	4a18      	ldr	r2, [pc, #96]	; (8009898 <prvAddNewTaskToReadyList+0x9c>)
 8009836:	6813      	ldr	r3, [r2, #0]
 8009838:	3301      	adds	r3, #1
 800983a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800983c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800983e:	2301      	movs	r3, #1
 8009840:	4083      	lsls	r3, r0
 8009842:	4a16      	ldr	r2, [pc, #88]	; (800989c <prvAddNewTaskToReadyList+0xa0>)
 8009844:	6811      	ldr	r1, [r2, #0]
 8009846:	430b      	orrs	r3, r1
 8009848:	6013      	str	r3, [r2, #0]
 800984a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800984e:	1d21      	adds	r1, r4, #4
 8009850:	4b13      	ldr	r3, [pc, #76]	; (80098a0 <prvAddNewTaskToReadyList+0xa4>)
 8009852:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009856:	f7ff fb0c 	bl	8008e72 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800985a:	f001 f9f5 	bl	800ac48 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800985e:	4b0d      	ldr	r3, [pc, #52]	; (8009894 <prvAddNewTaskToReadyList+0x98>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	b17b      	cbz	r3, 8009884 <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009864:	4b0a      	ldr	r3, [pc, #40]	; (8009890 <prvAddNewTaskToReadyList+0x94>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800986a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800986c:	429a      	cmp	r2, r3
 800986e:	d209      	bcs.n	8009884 <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 8009870:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009878:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	f3bf 8f6f 	isb	sy
}
 8009884:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8009886:	f7ff ff85 	bl	8009794 <prvInitialiseTaskLists>
 800988a:	e7d3      	b.n	8009834 <prvAddNewTaskToReadyList+0x38>
 800988c:	20001a54 	.word	0x20001a54
 8009890:	200019bc 	.word	0x200019bc
 8009894:	20001ab4 	.word	0x20001ab4
 8009898:	20001a64 	.word	0x20001a64
 800989c:	20001a68 	.word	0x20001a68
 80098a0:	200019c8 	.word	0x200019c8

080098a4 <prvDeleteTCB>:
	{
 80098a4:	b510      	push	{r4, lr}
 80098a6:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80098a8:	304c      	adds	r0, #76	; 0x4c
 80098aa:	f001 fef3 	bl	800b694 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098ae:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 80098b2:	b163      	cbz	r3, 80098ce <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d011      	beq.n	80098dc <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d00e      	beq.n	80098da <prvDeleteTCB+0x36>
 80098bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	e7fe      	b.n	80098cc <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 80098ce:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80098d0:	f001 fb8a 	bl	800afe8 <vPortFree>
				vPortFree( pxTCB );
 80098d4:	4620      	mov	r0, r4
 80098d6:	f001 fb87 	bl	800afe8 <vPortFree>
	}
 80098da:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80098dc:	4620      	mov	r0, r4
 80098de:	f001 fb83 	bl	800afe8 <vPortFree>
 80098e2:	e7fa      	b.n	80098da <prvDeleteTCB+0x36>

080098e4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098e4:	4b0f      	ldr	r3, [pc, #60]	; (8009924 <prvCheckTasksWaitingTermination+0x40>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	b1d3      	cbz	r3, 8009920 <prvCheckTasksWaitingTermination+0x3c>
{
 80098ea:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80098ec:	f001 f98a 	bl	800ac04 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80098f0:	4b0d      	ldr	r3, [pc, #52]	; (8009928 <prvCheckTasksWaitingTermination+0x44>)
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098f6:	1d20      	adds	r0, r4, #4
 80098f8:	f7ff fadf 	bl	8008eba <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098fc:	4a0b      	ldr	r2, [pc, #44]	; (800992c <prvCheckTasksWaitingTermination+0x48>)
 80098fe:	6813      	ldr	r3, [r2, #0]
 8009900:	3b01      	subs	r3, #1
 8009902:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009904:	4a07      	ldr	r2, [pc, #28]	; (8009924 <prvCheckTasksWaitingTermination+0x40>)
 8009906:	6813      	ldr	r3, [r2, #0]
 8009908:	3b01      	subs	r3, #1
 800990a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800990c:	f001 f99c 	bl	800ac48 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009910:	4620      	mov	r0, r4
 8009912:	f7ff ffc7 	bl	80098a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009916:	4b03      	ldr	r3, [pc, #12]	; (8009924 <prvCheckTasksWaitingTermination+0x40>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e6      	bne.n	80098ec <prvCheckTasksWaitingTermination+0x8>
}
 800991e:	bd10      	pop	{r4, pc}
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	20001a58 	.word	0x20001a58
 8009928:	20001acc 	.word	0x20001acc
 800992c:	20001a54 	.word	0x20001a54

08009930 <prvIdleTask>:
{
 8009930:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8009932:	f7ff ffd7 	bl	80098e4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009936:	4b07      	ldr	r3, [pc, #28]	; (8009954 <prvIdleTask+0x24>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d9f9      	bls.n	8009932 <prvIdleTask+0x2>
				taskYIELD();
 800993e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009946:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	e7ee      	b.n	8009932 <prvIdleTask+0x2>
 8009954:	200019c8 	.word	0x200019c8

08009958 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009958:	b570      	push	{r4, r5, r6, lr}
 800995a:	4604      	mov	r4, r0
 800995c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800995e:	4b1d      	ldr	r3, [pc, #116]	; (80099d4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8009960:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009962:	4b1d      	ldr	r3, [pc, #116]	; (80099d8 <prvAddCurrentTaskToDelayedList+0x80>)
 8009964:	6818      	ldr	r0, [r3, #0]
 8009966:	3004      	adds	r0, #4
 8009968:	f7ff faa7 	bl	8008eba <uxListRemove>
 800996c:	b948      	cbnz	r0, 8009982 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800996e:	4b1a      	ldr	r3, [pc, #104]	; (80099d8 <prvAddCurrentTaskToDelayedList+0x80>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009974:	2201      	movs	r2, #1
 8009976:	409a      	lsls	r2, r3
 8009978:	4918      	ldr	r1, [pc, #96]	; (80099dc <prvAddCurrentTaskToDelayedList+0x84>)
 800997a:	680b      	ldr	r3, [r1, #0]
 800997c:	ea23 0302 	bic.w	r3, r3, r2
 8009980:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009982:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009986:	d00d      	beq.n	80099a4 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009988:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800998a:	4b13      	ldr	r3, [pc, #76]	; (80099d8 <prvAddCurrentTaskToDelayedList+0x80>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8009990:	42a6      	cmp	r6, r4
 8009992:	d910      	bls.n	80099b6 <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009994:	4b12      	ldr	r3, [pc, #72]	; (80099e0 <prvAddCurrentTaskToDelayedList+0x88>)
 8009996:	6818      	ldr	r0, [r3, #0]
 8009998:	4b0f      	ldr	r3, [pc, #60]	; (80099d8 <prvAddCurrentTaskToDelayedList+0x80>)
 800999a:	6819      	ldr	r1, [r3, #0]
 800999c:	3104      	adds	r1, #4
 800999e:	f7ff fa73 	bl	8008e88 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80099a2:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80099a4:	2d00      	cmp	r5, #0
 80099a6:	d0ef      	beq.n	8009988 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099a8:	4b0b      	ldr	r3, [pc, #44]	; (80099d8 <prvAddCurrentTaskToDelayedList+0x80>)
 80099aa:	6819      	ldr	r1, [r3, #0]
 80099ac:	3104      	adds	r1, #4
 80099ae:	480d      	ldr	r0, [pc, #52]	; (80099e4 <prvAddCurrentTaskToDelayedList+0x8c>)
 80099b0:	f7ff fa5f 	bl	8008e72 <vListInsertEnd>
 80099b4:	e7f5      	b.n	80099a2 <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099b6:	4b0c      	ldr	r3, [pc, #48]	; (80099e8 <prvAddCurrentTaskToDelayedList+0x90>)
 80099b8:	6818      	ldr	r0, [r3, #0]
 80099ba:	4b07      	ldr	r3, [pc, #28]	; (80099d8 <prvAddCurrentTaskToDelayedList+0x80>)
 80099bc:	6819      	ldr	r1, [r3, #0]
 80099be:	3104      	adds	r1, #4
 80099c0:	f7ff fa62 	bl	8008e88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099c4:	4b09      	ldr	r3, [pc, #36]	; (80099ec <prvAddCurrentTaskToDelayedList+0x94>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	42a3      	cmp	r3, r4
 80099ca:	d9ea      	bls.n	80099a2 <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 80099cc:	4b07      	ldr	r3, [pc, #28]	; (80099ec <prvAddCurrentTaskToDelayedList+0x94>)
 80099ce:	601c      	str	r4, [r3, #0]
}
 80099d0:	e7e7      	b.n	80099a2 <prvAddCurrentTaskToDelayedList+0x4a>
 80099d2:	bf00      	nop
 80099d4:	20001ae0 	.word	0x20001ae0
 80099d8:	200019bc 	.word	0x200019bc
 80099dc:	20001a68 	.word	0x20001a68
 80099e0:	200019c4 	.word	0x200019c4
 80099e4:	20001ab8 	.word	0x20001ab8
 80099e8:	200019c0 	.word	0x200019c0
 80099ec:	20001a98 	.word	0x20001a98

080099f0 <xTaskCreateStatic>:
	{
 80099f0:	b530      	push	{r4, r5, lr}
 80099f2:	b087      	sub	sp, #28
 80099f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80099f6:	b17c      	cbz	r4, 8009a18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80099f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099fa:	b1b5      	cbz	r5, 8009a2a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80099fc:	25a0      	movs	r5, #160	; 0xa0
 80099fe:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a00:	9d04      	ldr	r5, [sp, #16]
 8009a02:	2da0      	cmp	r5, #160	; 0xa0
 8009a04:	d01a      	beq.n	8009a3c <xTaskCreateStatic+0x4c>
 8009a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0a:	f383 8811 	msr	BASEPRI, r3
 8009a0e:	f3bf 8f6f 	isb	sy
 8009a12:	f3bf 8f4f 	dsb	sy
 8009a16:	e7fe      	b.n	8009a16 <xTaskCreateStatic+0x26>
 8009a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8009a28:	e7fe      	b.n	8009a28 <xTaskCreateStatic+0x38>
 8009a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2e:	f383 8811 	msr	BASEPRI, r3
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8009a3a:	e7fe      	b.n	8009a3a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a3e:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a40:	2402      	movs	r4, #2
 8009a42:	f885 409d 	strb.w	r4, [r5, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a46:	2400      	movs	r4, #0
 8009a48:	9403      	str	r4, [sp, #12]
 8009a4a:	9502      	str	r5, [sp, #8]
 8009a4c:	ac05      	add	r4, sp, #20
 8009a4e:	9401      	str	r4, [sp, #4]
 8009a50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009a52:	9400      	str	r4, [sp, #0]
 8009a54:	f7ff fe48 	bl	80096e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a58:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009a5a:	f7ff fecf 	bl	80097fc <prvAddNewTaskToReadyList>
	}
 8009a5e:	9805      	ldr	r0, [sp, #20]
 8009a60:	b007      	add	sp, #28
 8009a62:	bd30      	pop	{r4, r5, pc}

08009a64 <xTaskCreate>:
	{
 8009a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a68:	b085      	sub	sp, #20
 8009a6a:	4607      	mov	r7, r0
 8009a6c:	4688      	mov	r8, r1
 8009a6e:	4614      	mov	r4, r2
 8009a70:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a72:	0090      	lsls	r0, r2, #2
 8009a74:	f001 fa40 	bl	800aef8 <pvPortMalloc>
			if( pxStack != NULL )
 8009a78:	b300      	cbz	r0, 8009abc <xTaskCreate+0x58>
 8009a7a:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009a7c:	20a0      	movs	r0, #160	; 0xa0
 8009a7e:	f001 fa3b 	bl	800aef8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009a82:	4605      	mov	r5, r0
 8009a84:	b1b0      	cbz	r0, 8009ab4 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8009a86:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8009a8a:	b1e5      	cbz	r5, 8009ac6 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a92:	9303      	str	r3, [sp, #12]
 8009a94:	9502      	str	r5, [sp, #8]
 8009a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a98:	9301      	str	r3, [sp, #4]
 8009a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	4633      	mov	r3, r6
 8009aa0:	4622      	mov	r2, r4
 8009aa2:	4641      	mov	r1, r8
 8009aa4:	4638      	mov	r0, r7
 8009aa6:	f7ff fe1f 	bl	80096e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f7ff fea6 	bl	80097fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ab0:	2001      	movs	r0, #1
 8009ab2:	e005      	b.n	8009ac0 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8009ab4:	4648      	mov	r0, r9
 8009ab6:	f001 fa97 	bl	800afe8 <vPortFree>
 8009aba:	e7e6      	b.n	8009a8a <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009abc:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009ac0:	b005      	add	sp, #20
 8009ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ac6:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8009aca:	e7f9      	b.n	8009ac0 <xTaskCreate+0x5c>

08009acc <vTaskResume>:
	{
 8009acc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( xTaskToResume );
 8009ace:	b168      	cbz	r0, 8009aec <vTaskResume+0x20>
 8009ad0:	4604      	mov	r4, r0
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8009ad2:	4b1d      	ldr	r3, [pc, #116]	; (8009b48 <vTaskResume+0x7c>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4283      	cmp	r3, r0
 8009ad8:	d007      	beq.n	8009aea <vTaskResume+0x1e>
			taskENTER_CRITICAL();
 8009ada:	f001 f893 	bl	800ac04 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f7ff fdcc 	bl	800967c <prvTaskIsTaskSuspended>
 8009ae4:	b958      	cbnz	r0, 8009afe <vTaskResume+0x32>
			taskEXIT_CRITICAL();
 8009ae6:	f001 f8af 	bl	800ac48 <vPortExitCritical>
	}
 8009aea:	bd38      	pop	{r3, r4, r5, pc}
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 8009afc:	e7fe      	b.n	8009afc <vTaskResume+0x30>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009afe:	1d25      	adds	r5, r4, #4
 8009b00:	4628      	mov	r0, r5
 8009b02:	f7ff f9da 	bl	8008eba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b06:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009b08:	2301      	movs	r3, #1
 8009b0a:	4083      	lsls	r3, r0
 8009b0c:	4a0f      	ldr	r2, [pc, #60]	; (8009b4c <vTaskResume+0x80>)
 8009b0e:	6811      	ldr	r1, [r2, #0]
 8009b10:	430b      	orrs	r3, r1
 8009b12:	6013      	str	r3, [r2, #0]
 8009b14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009b18:	4629      	mov	r1, r5
 8009b1a:	4b0d      	ldr	r3, [pc, #52]	; (8009b50 <vTaskResume+0x84>)
 8009b1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b20:	f7ff f9a7 	bl	8008e72 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009b26:	4b08      	ldr	r3, [pc, #32]	; (8009b48 <vTaskResume+0x7c>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d3da      	bcc.n	8009ae6 <vTaskResume+0x1a>
						taskYIELD_IF_USING_PREEMPTION();
 8009b30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b38:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	e7cf      	b.n	8009ae6 <vTaskResume+0x1a>
 8009b46:	bf00      	nop
 8009b48:	200019bc 	.word	0x200019bc
 8009b4c:	20001a68 	.word	0x20001a68
 8009b50:	200019c8 	.word	0x200019c8

08009b54 <xTaskResumeFromISR>:
	{
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 8009b56:	b390      	cbz	r0, 8009bbe <xTaskResumeFromISR+0x6a>
 8009b58:	4605      	mov	r5, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b5a:	f001 f93d 	bl	800add8 <vPortValidateInterruptPriority>
	__asm volatile
 8009b5e:	f3ef 8411 	mrs	r4, BASEPRI
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009b72:	4628      	mov	r0, r5
 8009b74:	f7ff fd82 	bl	800967c <prvTaskIsTaskSuspended>
 8009b78:	4606      	mov	r6, r0
 8009b7a:	b1e0      	cbz	r0, 8009bb6 <xTaskResumeFromISR+0x62>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b7c:	4b19      	ldr	r3, [pc, #100]	; (8009be4 <xTaskResumeFromISR+0x90>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	bb43      	cbnz	r3, 8009bd4 <xTaskResumeFromISR+0x80>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b82:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8009b84:	4b18      	ldr	r3, [pc, #96]	; (8009be8 <xTaskResumeFromISR+0x94>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d220      	bcs.n	8009bd0 <xTaskResumeFromISR+0x7c>
	BaseType_t xYieldRequired = pdFALSE;
 8009b8e:	2600      	movs	r6, #0
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b90:	1d2f      	adds	r7, r5, #4
 8009b92:	4638      	mov	r0, r7
 8009b94:	f7ff f991 	bl	8008eba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b98:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	4083      	lsls	r3, r0
 8009b9e:	4a13      	ldr	r2, [pc, #76]	; (8009bec <xTaskResumeFromISR+0x98>)
 8009ba0:	6811      	ldr	r1, [r2, #0]
 8009ba2:	430b      	orrs	r3, r1
 8009ba4:	6013      	str	r3, [r2, #0]
 8009ba6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009baa:	4639      	mov	r1, r7
 8009bac:	4b10      	ldr	r3, [pc, #64]	; (8009bf0 <xTaskResumeFromISR+0x9c>)
 8009bae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009bb2:	f7ff f95e 	bl	8008e72 <vListInsertEnd>
	__asm volatile
 8009bb6:	f384 8811 	msr	BASEPRI, r4
	}
 8009bba:	4630      	mov	r0, r6
 8009bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 8009bce:	e7fe      	b.n	8009bce <xTaskResumeFromISR+0x7a>
						xYieldRequired = pdTRUE;
 8009bd0:	2601      	movs	r6, #1
 8009bd2:	e7dd      	b.n	8009b90 <xTaskResumeFromISR+0x3c>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009bd4:	f105 0118 	add.w	r1, r5, #24
 8009bd8:	4806      	ldr	r0, [pc, #24]	; (8009bf4 <xTaskResumeFromISR+0xa0>)
 8009bda:	f7ff f94a 	bl	8008e72 <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 8009bde:	2600      	movs	r6, #0
 8009be0:	e7e9      	b.n	8009bb6 <xTaskResumeFromISR+0x62>
 8009be2:	bf00      	nop
 8009be4:	20001a60 	.word	0x20001a60
 8009be8:	200019bc 	.word	0x200019bc
 8009bec:	20001a68 	.word	0x20001a68
 8009bf0:	200019c8 	.word	0x200019c8
 8009bf4:	20001aa0 	.word	0x20001aa0

08009bf8 <vTaskStartScheduler>:
{
 8009bf8:	b510      	push	{r4, lr}
 8009bfa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009bfc:	2400      	movs	r4, #0
 8009bfe:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c00:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c02:	aa07      	add	r2, sp, #28
 8009c04:	a906      	add	r1, sp, #24
 8009c06:	a805      	add	r0, sp, #20
 8009c08:	f7f8 fbe8 	bl	80023dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c0c:	9b05      	ldr	r3, [sp, #20]
 8009c0e:	9302      	str	r3, [sp, #8]
 8009c10:	9b06      	ldr	r3, [sp, #24]
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	9400      	str	r4, [sp, #0]
 8009c16:	4623      	mov	r3, r4
 8009c18:	9a07      	ldr	r2, [sp, #28]
 8009c1a:	491a      	ldr	r1, [pc, #104]	; (8009c84 <vTaskStartScheduler+0x8c>)
 8009c1c:	481a      	ldr	r0, [pc, #104]	; (8009c88 <vTaskStartScheduler+0x90>)
 8009c1e:	f7ff fee7 	bl	80099f0 <xTaskCreateStatic>
 8009c22:	4b1a      	ldr	r3, [pc, #104]	; (8009c8c <vTaskStartScheduler+0x94>)
 8009c24:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8009c26:	b140      	cbz	r0, 8009c3a <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 8009c28:	f000 fdb0 	bl	800a78c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009c2c:	2801      	cmp	r0, #1
 8009c2e:	d006      	beq.n	8009c3e <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c34:	d01d      	beq.n	8009c72 <vTaskStartScheduler+0x7a>
}
 8009c36:	b008      	add	sp, #32
 8009c38:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	e7f6      	b.n	8009c2c <vTaskStartScheduler+0x34>
 8009c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c4e:	4b10      	ldr	r3, [pc, #64]	; (8009c90 <vTaskStartScheduler+0x98>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	334c      	adds	r3, #76	; 0x4c
 8009c54:	4a0f      	ldr	r2, [pc, #60]	; (8009c94 <vTaskStartScheduler+0x9c>)
 8009c56:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c58:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <vTaskStartScheduler+0xa0>)
 8009c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c60:	4b0e      	ldr	r3, [pc, #56]	; (8009c9c <vTaskStartScheduler+0xa4>)
 8009c62:	2201      	movs	r2, #1
 8009c64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009c66:	4b0e      	ldr	r3, [pc, #56]	; (8009ca0 <vTaskStartScheduler+0xa8>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8009c6c:	f001 f854 	bl	800ad18 <xPortStartScheduler>
 8009c70:	e7e1      	b.n	8009c36 <vTaskStartScheduler+0x3e>
 8009c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c76:	f383 8811 	msr	BASEPRI, r3
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c82:	e7fe      	b.n	8009c82 <vTaskStartScheduler+0x8a>
 8009c84:	0800ca10 	.word	0x0800ca10
 8009c88:	08009931 	.word	0x08009931
 8009c8c:	20001a94 	.word	0x20001a94
 8009c90:	200019bc 	.word	0x200019bc
 8009c94:	20000068 	.word	0x20000068
 8009c98:	20001a98 	.word	0x20001a98
 8009c9c:	20001ab4 	.word	0x20001ab4
 8009ca0:	20001ae0 	.word	0x20001ae0

08009ca4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009ca4:	4a02      	ldr	r2, [pc, #8]	; (8009cb0 <vTaskSuspendAll+0xc>)
 8009ca6:	6813      	ldr	r3, [r2, #0]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	6013      	str	r3, [r2, #0]
}
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	20001a60 	.word	0x20001a60

08009cb4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009cb4:	4b01      	ldr	r3, [pc, #4]	; (8009cbc <xTaskGetTickCount+0x8>)
 8009cb6:	6818      	ldr	r0, [r3, #0]
}
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	20001ae0 	.word	0x20001ae0

08009cc0 <xTaskIncrementTick>:
{
 8009cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cc2:	4b3a      	ldr	r3, [pc, #232]	; (8009dac <xTaskIncrementTick+0xec>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d164      	bne.n	8009d94 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009cca:	4b39      	ldr	r3, [pc, #228]	; (8009db0 <xTaskIncrementTick+0xf0>)
 8009ccc:	681d      	ldr	r5, [r3, #0]
 8009cce:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009cd0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009cd2:	b9c5      	cbnz	r5, 8009d06 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009cd4:	4b37      	ldr	r3, [pc, #220]	; (8009db4 <xTaskIncrementTick+0xf4>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	b143      	cbz	r3, 8009cee <xTaskIncrementTick+0x2e>
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	e7fe      	b.n	8009cec <xTaskIncrementTick+0x2c>
 8009cee:	4a31      	ldr	r2, [pc, #196]	; (8009db4 <xTaskIncrementTick+0xf4>)
 8009cf0:	6811      	ldr	r1, [r2, #0]
 8009cf2:	4b31      	ldr	r3, [pc, #196]	; (8009db8 <xTaskIncrementTick+0xf8>)
 8009cf4:	6818      	ldr	r0, [r3, #0]
 8009cf6:	6010      	str	r0, [r2, #0]
 8009cf8:	6019      	str	r1, [r3, #0]
 8009cfa:	4a30      	ldr	r2, [pc, #192]	; (8009dbc <xTaskIncrementTick+0xfc>)
 8009cfc:	6813      	ldr	r3, [r2, #0]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	6013      	str	r3, [r2, #0]
 8009d02:	f7ff fcdb 	bl	80096bc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d06:	4b2e      	ldr	r3, [pc, #184]	; (8009dc0 <xTaskIncrementTick+0x100>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	42ab      	cmp	r3, r5
 8009d0c:	d938      	bls.n	8009d80 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8009d0e:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d10:	4b2c      	ldr	r3, [pc, #176]	; (8009dc4 <xTaskIncrementTick+0x104>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009d1a:	009a      	lsls	r2, r3, #2
 8009d1c:	4b2a      	ldr	r3, [pc, #168]	; (8009dc8 <xTaskIncrementTick+0x108>)
 8009d1e:	589b      	ldr	r3, [r3, r2]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d93c      	bls.n	8009d9e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8009d24:	2701      	movs	r7, #1
 8009d26:	e03a      	b.n	8009d9e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8009d28:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d2a:	4b22      	ldr	r3, [pc, #136]	; (8009db4 <xTaskIncrementTick+0xf4>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	b343      	cbz	r3, 8009d84 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009d32:	4b20      	ldr	r3, [pc, #128]	; (8009db4 <xTaskIncrementTick+0xf4>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d3a:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8009d3c:	429d      	cmp	r5, r3
 8009d3e:	d326      	bcc.n	8009d8e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d40:	1d26      	adds	r6, r4, #4
 8009d42:	4630      	mov	r0, r6
 8009d44:	f7ff f8b9 	bl	8008eba <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009d4a:	b11b      	cbz	r3, 8009d54 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d4c:	f104 0018 	add.w	r0, r4, #24
 8009d50:	f7ff f8b3 	bl	8008eba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009d56:	2201      	movs	r2, #1
 8009d58:	409a      	lsls	r2, r3
 8009d5a:	491c      	ldr	r1, [pc, #112]	; (8009dcc <xTaskIncrementTick+0x10c>)
 8009d5c:	6808      	ldr	r0, [r1, #0]
 8009d5e:	4302      	orrs	r2, r0
 8009d60:	600a      	str	r2, [r1, #0]
 8009d62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009d66:	009a      	lsls	r2, r3, #2
 8009d68:	4631      	mov	r1, r6
 8009d6a:	4817      	ldr	r0, [pc, #92]	; (8009dc8 <xTaskIncrementTick+0x108>)
 8009d6c:	4410      	add	r0, r2
 8009d6e:	f7ff f880 	bl	8008e72 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009d74:	4b13      	ldr	r3, [pc, #76]	; (8009dc4 <xTaskIncrementTick+0x104>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d2d4      	bcs.n	8009d28 <xTaskIncrementTick+0x68>
 8009d7e:	e7d4      	b.n	8009d2a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8009d80:	2700      	movs	r7, #0
 8009d82:	e7d2      	b.n	8009d2a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d84:	4b0e      	ldr	r3, [pc, #56]	; (8009dc0 <xTaskIncrementTick+0x100>)
 8009d86:	f04f 32ff 	mov.w	r2, #4294967295
 8009d8a:	601a      	str	r2, [r3, #0]
					break;
 8009d8c:	e7c0      	b.n	8009d10 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8009d8e:	4a0c      	ldr	r2, [pc, #48]	; (8009dc0 <xTaskIncrementTick+0x100>)
 8009d90:	6013      	str	r3, [r2, #0]
						break;
 8009d92:	e7bd      	b.n	8009d10 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8009d94:	4a0e      	ldr	r2, [pc, #56]	; (8009dd0 <xTaskIncrementTick+0x110>)
 8009d96:	6813      	ldr	r3, [r2, #0]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009d9c:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 8009d9e:	4b0d      	ldr	r3, [pc, #52]	; (8009dd4 <xTaskIncrementTick+0x114>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	b103      	cbz	r3, 8009da6 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8009da4:	2701      	movs	r7, #1
}
 8009da6:	4638      	mov	r0, r7
 8009da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009daa:	bf00      	nop
 8009dac:	20001a60 	.word	0x20001a60
 8009db0:	20001ae0 	.word	0x20001ae0
 8009db4:	200019c0 	.word	0x200019c0
 8009db8:	200019c4 	.word	0x200019c4
 8009dbc:	20001a9c 	.word	0x20001a9c
 8009dc0:	20001a98 	.word	0x20001a98
 8009dc4:	200019bc 	.word	0x200019bc
 8009dc8:	200019c8 	.word	0x200019c8
 8009dcc:	20001a68 	.word	0x20001a68
 8009dd0:	20001a5c 	.word	0x20001a5c
 8009dd4:	20001ae4 	.word	0x20001ae4

08009dd8 <xTaskResumeAll>:
{
 8009dd8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8009dda:	4b35      	ldr	r3, [pc, #212]	; (8009eb0 <xTaskResumeAll+0xd8>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	b943      	cbnz	r3, 8009df2 <xTaskResumeAll+0x1a>
 8009de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	e7fe      	b.n	8009df0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8009df2:	f000 ff07 	bl	800ac04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009df6:	4b2e      	ldr	r3, [pc, #184]	; (8009eb0 <xTaskResumeAll+0xd8>)
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	3a01      	subs	r2, #1
 8009dfc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d14f      	bne.n	8009ea4 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e04:	4b2b      	ldr	r3, [pc, #172]	; (8009eb4 <xTaskResumeAll+0xdc>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	b90b      	cbnz	r3, 8009e0e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8009e0a:	2400      	movs	r4, #0
 8009e0c:	e04b      	b.n	8009ea6 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8009e0e:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e10:	4b29      	ldr	r3, [pc, #164]	; (8009eb8 <xTaskResumeAll+0xe0>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	b31b      	cbz	r3, 8009e5e <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009e16:	4b28      	ldr	r3, [pc, #160]	; (8009eb8 <xTaskResumeAll+0xe0>)
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e1c:	f104 0018 	add.w	r0, r4, #24
 8009e20:	f7ff f84b 	bl	8008eba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e24:	1d25      	adds	r5, r4, #4
 8009e26:	4628      	mov	r0, r5
 8009e28:	f7ff f847 	bl	8008eba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e2c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009e2e:	2301      	movs	r3, #1
 8009e30:	4083      	lsls	r3, r0
 8009e32:	4a22      	ldr	r2, [pc, #136]	; (8009ebc <xTaskResumeAll+0xe4>)
 8009e34:	6811      	ldr	r1, [r2, #0]
 8009e36:	430b      	orrs	r3, r1
 8009e38:	6013      	str	r3, [r2, #0]
 8009e3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009e3e:	4629      	mov	r1, r5
 8009e40:	4b1f      	ldr	r3, [pc, #124]	; (8009ec0 <xTaskResumeAll+0xe8>)
 8009e42:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e46:	f7ff f814 	bl	8008e72 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009e4c:	4b1d      	ldr	r3, [pc, #116]	; (8009ec4 <xTaskResumeAll+0xec>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d3dc      	bcc.n	8009e10 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8009e56:	4b1c      	ldr	r3, [pc, #112]	; (8009ec8 <xTaskResumeAll+0xf0>)
 8009e58:	2201      	movs	r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	e7d8      	b.n	8009e10 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8009e5e:	b10c      	cbz	r4, 8009e64 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8009e60:	f7ff fc2c 	bl	80096bc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009e64:	4b19      	ldr	r3, [pc, #100]	; (8009ecc <xTaskResumeAll+0xf4>)
 8009e66:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009e68:	b984      	cbnz	r4, 8009e8c <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8009e6a:	4b17      	ldr	r3, [pc, #92]	; (8009ec8 <xTaskResumeAll+0xf0>)
 8009e6c:	681c      	ldr	r4, [r3, #0]
 8009e6e:	b1d4      	cbz	r4, 8009ea6 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8009e70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e78:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009e84:	2401      	movs	r4, #1
 8009e86:	e00e      	b.n	8009ea6 <xTaskResumeAll+0xce>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009e88:	3c01      	subs	r4, #1
 8009e8a:	d007      	beq.n	8009e9c <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8009e8c:	f7ff ff18 	bl	8009cc0 <xTaskIncrementTick>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d0f9      	beq.n	8009e88 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8009e94:	4b0c      	ldr	r3, [pc, #48]	; (8009ec8 <xTaskResumeAll+0xf0>)
 8009e96:	2201      	movs	r2, #1
 8009e98:	601a      	str	r2, [r3, #0]
 8009e9a:	e7f5      	b.n	8009e88 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8009e9c:	4b0b      	ldr	r3, [pc, #44]	; (8009ecc <xTaskResumeAll+0xf4>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	e7e2      	b.n	8009e6a <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8009ea4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009ea6:	f000 fecf 	bl	800ac48 <vPortExitCritical>
}
 8009eaa:	4620      	mov	r0, r4
 8009eac:	bd38      	pop	{r3, r4, r5, pc}
 8009eae:	bf00      	nop
 8009eb0:	20001a60 	.word	0x20001a60
 8009eb4:	20001a54 	.word	0x20001a54
 8009eb8:	20001aa0 	.word	0x20001aa0
 8009ebc:	20001a68 	.word	0x20001a68
 8009ec0:	200019c8 	.word	0x200019c8
 8009ec4:	200019bc 	.word	0x200019bc
 8009ec8:	20001ae4 	.word	0x20001ae4
 8009ecc:	20001a5c 	.word	0x20001a5c

08009ed0 <vTaskDelayUntil>:
	{
 8009ed0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8009ed2:	b158      	cbz	r0, 8009eec <vTaskDelayUntil+0x1c>
 8009ed4:	460c      	mov	r4, r1
 8009ed6:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 8009ed8:	b989      	cbnz	r1, 8009efe <vTaskDelayUntil+0x2e>
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	e7fe      	b.n	8009eea <vTaskDelayUntil+0x1a>
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 8009efc:	e7fe      	b.n	8009efc <vTaskDelayUntil+0x2c>
		configASSERT( uxSchedulerSuspended == 0 );
 8009efe:	4b1b      	ldr	r3, [pc, #108]	; (8009f6c <vTaskDelayUntil+0x9c>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	b143      	cbz	r3, 8009f16 <vTaskDelayUntil+0x46>
 8009f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	e7fe      	b.n	8009f14 <vTaskDelayUntil+0x44>
		vTaskSuspendAll();
 8009f16:	f7ff fec5 	bl	8009ca4 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8009f1a:	4b15      	ldr	r3, [pc, #84]	; (8009f70 <vTaskDelayUntil+0xa0>)
 8009f1c:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009f1e:	682b      	ldr	r3, [r5, #0]
 8009f20:	441c      	add	r4, r3
			if( xConstTickCount < *pxPreviousWakeTime )
 8009f22:	4283      	cmp	r3, r0
 8009f24:	d909      	bls.n	8009f3a <vTaskDelayUntil+0x6a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009f26:	42a3      	cmp	r3, r4
 8009f28:	d801      	bhi.n	8009f2e <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
 8009f2a:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8009f2c:	e00e      	b.n	8009f4c <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009f2e:	42a0      	cmp	r0, r4
 8009f30:	d301      	bcc.n	8009f36 <vTaskDelayUntil+0x66>
			*pxPreviousWakeTime = xTimeToWake;
 8009f32:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8009f34:	e00a      	b.n	8009f4c <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 8009f36:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8009f38:	e004      	b.n	8009f44 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009f3a:	42a3      	cmp	r3, r4
 8009f3c:	d801      	bhi.n	8009f42 <vTaskDelayUntil+0x72>
 8009f3e:	42a0      	cmp	r0, r4
 8009f40:	d212      	bcs.n	8009f68 <vTaskDelayUntil+0x98>
			*pxPreviousWakeTime = xTimeToWake;
 8009f42:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009f44:	2100      	movs	r1, #0
 8009f46:	1a20      	subs	r0, r4, r0
 8009f48:	f7ff fd06 	bl	8009958 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 8009f4c:	f7ff ff44 	bl	8009dd8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009f50:	b948      	cbnz	r0, 8009f66 <vTaskDelayUntil+0x96>
			portYIELD_WITHIN_API();
 8009f52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f5a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	f3bf 8f6f 	isb	sy
	}
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
 8009f68:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8009f6a:	e7ef      	b.n	8009f4c <vTaskDelayUntil+0x7c>
 8009f6c:	20001a60 	.word	0x20001a60
 8009f70:	20001ae0 	.word	0x20001ae0

08009f74 <vTaskDelay>:
	{
 8009f74:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f76:	b1a8      	cbz	r0, 8009fa4 <vTaskDelay+0x30>
 8009f78:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8009f7a:	4b10      	ldr	r3, [pc, #64]	; (8009fbc <vTaskDelay+0x48>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	b143      	cbz	r3, 8009f92 <vTaskDelay+0x1e>
 8009f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	e7fe      	b.n	8009f90 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8009f92:	f7ff fe87 	bl	8009ca4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f96:	2100      	movs	r1, #0
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f7ff fcdd 	bl	8009958 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009f9e:	f7ff ff1b 	bl	8009dd8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009fa2:	b948      	cbnz	r0, 8009fb8 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8009fa4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	f3bf 8f6f 	isb	sy
	}
 8009fb8:	bd10      	pop	{r4, pc}
 8009fba:	bf00      	nop
 8009fbc:	20001a60 	.word	0x20001a60

08009fc0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009fc0:	4b22      	ldr	r3, [pc, #136]	; (800a04c <vTaskSwitchContext+0x8c>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	b11b      	cbz	r3, 8009fce <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009fc6:	4b22      	ldr	r3, [pc, #136]	; (800a050 <vTaskSwitchContext+0x90>)
 8009fc8:	2201      	movs	r2, #1
 8009fca:	601a      	str	r2, [r3, #0]
 8009fcc:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8009fce:	4b20      	ldr	r3, [pc, #128]	; (800a050 <vTaskSwitchContext+0x90>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009fd4:	4b1f      	ldr	r3, [pc, #124]	; (800a054 <vTaskSwitchContext+0x94>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009fd8:	fab3 f383 	clz	r3, r3
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	f1c3 031f 	rsb	r3, r3, #31
 8009fe2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009fe6:	008a      	lsls	r2, r1, #2
 8009fe8:	491b      	ldr	r1, [pc, #108]	; (800a058 <vTaskSwitchContext+0x98>)
 8009fea:	588a      	ldr	r2, [r1, r2]
 8009fec:	b942      	cbnz	r2, 800a000 <vTaskSwitchContext+0x40>
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	e7fe      	b.n	8009ffe <vTaskSwitchContext+0x3e>
 800a000:	4915      	ldr	r1, [pc, #84]	; (800a058 <vTaskSwitchContext+0x98>)
 800a002:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800a006:	0082      	lsls	r2, r0, #2
 800a008:	440a      	add	r2, r1
 800a00a:	6850      	ldr	r0, [r2, #4]
 800a00c:	6840      	ldr	r0, [r0, #4]
 800a00e:	6050      	str	r0, [r2, #4]
 800a010:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800a014:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800a018:	3208      	adds	r2, #8
 800a01a:	4411      	add	r1, r2
 800a01c:	4288      	cmp	r0, r1
 800a01e:	d00d      	beq.n	800a03c <vTaskSwitchContext+0x7c>
 800a020:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a024:	009a      	lsls	r2, r3, #2
 800a026:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <vTaskSwitchContext+0x98>)
 800a028:	4413      	add	r3, r2
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	68da      	ldr	r2, [r3, #12]
 800a02e:	4b0b      	ldr	r3, [pc, #44]	; (800a05c <vTaskSwitchContext+0x9c>)
 800a030:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	334c      	adds	r3, #76	; 0x4c
 800a036:	4a0a      	ldr	r2, [pc, #40]	; (800a060 <vTaskSwitchContext+0xa0>)
 800a038:	6013      	str	r3, [r2, #0]
}
 800a03a:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a03c:	6840      	ldr	r0, [r0, #4]
 800a03e:	4662      	mov	r2, ip
 800a040:	0091      	lsls	r1, r2, #2
 800a042:	4a05      	ldr	r2, [pc, #20]	; (800a058 <vTaskSwitchContext+0x98>)
 800a044:	440a      	add	r2, r1
 800a046:	6050      	str	r0, [r2, #4]
 800a048:	e7ea      	b.n	800a020 <vTaskSwitchContext+0x60>
 800a04a:	bf00      	nop
 800a04c:	20001a60 	.word	0x20001a60
 800a050:	20001ae4 	.word	0x20001ae4
 800a054:	20001a68 	.word	0x20001a68
 800a058:	200019c8 	.word	0x200019c8
 800a05c:	200019bc 	.word	0x200019bc
 800a060:	20000068 	.word	0x20000068

0800a064 <vTaskSuspend>:
	{
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 800a068:	f000 fdcc 	bl	800ac04 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a06c:	b364      	cbz	r4, 800a0c8 <vTaskSuspend+0x64>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a06e:	1d25      	adds	r5, r4, #4
 800a070:	4628      	mov	r0, r5
 800a072:	f7fe ff22 	bl	8008eba <uxListRemove>
 800a076:	b970      	cbnz	r0, 800a096 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a078:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a07a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	492c      	ldr	r1, [pc, #176]	; (800a134 <vTaskSuspend+0xd0>)
 800a082:	58cb      	ldr	r3, [r1, r3]
 800a084:	b93b      	cbnz	r3, 800a096 <vTaskSuspend+0x32>
 800a086:	2301      	movs	r3, #1
 800a088:	fa03 f202 	lsl.w	r2, r3, r2
 800a08c:	492a      	ldr	r1, [pc, #168]	; (800a138 <vTaskSuspend+0xd4>)
 800a08e:	680b      	ldr	r3, [r1, #0]
 800a090:	ea23 0302 	bic.w	r3, r3, r2
 800a094:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a096:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a098:	b11b      	cbz	r3, 800a0a2 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a09a:	f104 0018 	add.w	r0, r4, #24
 800a09e:	f7fe ff0c 	bl	8008eba <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	4825      	ldr	r0, [pc, #148]	; (800a13c <vTaskSuspend+0xd8>)
 800a0a6:	f7fe fee4 	bl	8008e72 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a0aa:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d00c      	beq.n	800a0ce <vTaskSuspend+0x6a>
		taskEXIT_CRITICAL();
 800a0b4:	f000 fdc8 	bl	800ac48 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800a0b8:	4b21      	ldr	r3, [pc, #132]	; (800a140 <vTaskSuspend+0xdc>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	b95b      	cbnz	r3, 800a0d6 <vTaskSuspend+0x72>
		if( pxTCB == pxCurrentTCB )
 800a0be:	4b21      	ldr	r3, [pc, #132]	; (800a144 <vTaskSuspend+0xe0>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	42a3      	cmp	r3, r4
 800a0c4:	d00e      	beq.n	800a0e4 <vTaskSuspend+0x80>
	}
 800a0c6:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a0c8:	4b1e      	ldr	r3, [pc, #120]	; (800a144 <vTaskSuspend+0xe0>)
 800a0ca:	681c      	ldr	r4, [r3, #0]
 800a0cc:	e7cf      	b.n	800a06e <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 800a0d4:	e7ee      	b.n	800a0b4 <vTaskSuspend+0x50>
			taskENTER_CRITICAL();
 800a0d6:	f000 fd95 	bl	800ac04 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 800a0da:	f7ff faef 	bl	80096bc <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 800a0de:	f000 fdb3 	bl	800ac48 <vPortExitCritical>
 800a0e2:	e7ec      	b.n	800a0be <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
 800a0e4:	4b16      	ldr	r3, [pc, #88]	; (800a140 <vTaskSuspend+0xdc>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	b1b3      	cbz	r3, 800a118 <vTaskSuspend+0xb4>
				configASSERT( uxSchedulerSuspended == 0 );
 800a0ea:	4b17      	ldr	r3, [pc, #92]	; (800a148 <vTaskSuspend+0xe4>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	b143      	cbz	r3, 800a102 <vTaskSuspend+0x9e>
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	e7fe      	b.n	800a100 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 800a102:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a10a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	e7d6      	b.n	800a0c6 <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800a118:	4b08      	ldr	r3, [pc, #32]	; (800a13c <vTaskSuspend+0xd8>)
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	4b0b      	ldr	r3, [pc, #44]	; (800a14c <vTaskSuspend+0xe8>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d103      	bne.n	800a12c <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800a124:	4b07      	ldr	r3, [pc, #28]	; (800a144 <vTaskSuspend+0xe0>)
 800a126:	2200      	movs	r2, #0
 800a128:	601a      	str	r2, [r3, #0]
 800a12a:	e7cc      	b.n	800a0c6 <vTaskSuspend+0x62>
					vTaskSwitchContext();
 800a12c:	f7ff ff48 	bl	8009fc0 <vTaskSwitchContext>
	}
 800a130:	e7c9      	b.n	800a0c6 <vTaskSuspend+0x62>
 800a132:	bf00      	nop
 800a134:	200019c8 	.word	0x200019c8
 800a138:	20001a68 	.word	0x20001a68
 800a13c:	20001ab8 	.word	0x20001ab8
 800a140:	20001ab4 	.word	0x20001ab4
 800a144:	200019bc 	.word	0x200019bc
 800a148:	20001a60 	.word	0x20001a60
 800a14c:	20001a54 	.word	0x20001a54

0800a150 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800a150:	b158      	cbz	r0, 800a16a <vTaskPlaceOnEventList+0x1a>
{
 800a152:	b510      	push	{r4, lr}
 800a154:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a156:	4a09      	ldr	r2, [pc, #36]	; (800a17c <vTaskPlaceOnEventList+0x2c>)
 800a158:	6811      	ldr	r1, [r2, #0]
 800a15a:	3118      	adds	r1, #24
 800a15c:	f7fe fe94 	bl	8008e88 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a160:	2101      	movs	r1, #1
 800a162:	4620      	mov	r0, r4
 800a164:	f7ff fbf8 	bl	8009958 <prvAddCurrentTaskToDelayedList>
}
 800a168:	bd10      	pop	{r4, pc}
 800a16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800a17a:	e7fe      	b.n	800a17a <vTaskPlaceOnEventList+0x2a>
 800a17c:	200019bc 	.word	0x200019bc

0800a180 <vTaskPlaceOnEventListRestricted>:
	{
 800a180:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800a182:	b170      	cbz	r0, 800a1a2 <vTaskPlaceOnEventListRestricted+0x22>
 800a184:	460d      	mov	r5, r1
 800a186:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a188:	4a0a      	ldr	r2, [pc, #40]	; (800a1b4 <vTaskPlaceOnEventListRestricted+0x34>)
 800a18a:	6811      	ldr	r1, [r2, #0]
 800a18c:	3118      	adds	r1, #24
 800a18e:	f7fe fe70 	bl	8008e72 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800a192:	b10c      	cbz	r4, 800a198 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800a194:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a198:	4621      	mov	r1, r4
 800a19a:	4628      	mov	r0, r5
 800a19c:	f7ff fbdc 	bl	8009958 <prvAddCurrentTaskToDelayedList>
	}
 800a1a0:	bd38      	pop	{r3, r4, r5, pc}
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800a1b2:	e7fe      	b.n	800a1b2 <vTaskPlaceOnEventListRestricted+0x32>
 800a1b4:	200019bc 	.word	0x200019bc

0800a1b8 <xTaskRemoveFromEventList>:
{
 800a1b8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a1ba:	68c3      	ldr	r3, [r0, #12]
 800a1bc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a1be:	b324      	cbz	r4, 800a20a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a1c0:	f104 0518 	add.w	r5, r4, #24
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f7fe fe78 	bl	8008eba <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1ca:	4b18      	ldr	r3, [pc, #96]	; (800a22c <xTaskRemoveFromEventList+0x74>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	bb2b      	cbnz	r3, 800a21c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a1d0:	1d25      	adds	r5, r4, #4
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	f7fe fe71 	bl	8008eba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a1d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a1da:	2301      	movs	r3, #1
 800a1dc:	4083      	lsls	r3, r0
 800a1de:	4a14      	ldr	r2, [pc, #80]	; (800a230 <xTaskRemoveFromEventList+0x78>)
 800a1e0:	6811      	ldr	r1, [r2, #0]
 800a1e2:	430b      	orrs	r3, r1
 800a1e4:	6013      	str	r3, [r2, #0]
 800a1e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	4b11      	ldr	r3, [pc, #68]	; (800a234 <xTaskRemoveFromEventList+0x7c>)
 800a1ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a1f2:	f7fe fe3e 	bl	8008e72 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a1f8:	4b0f      	ldr	r3, [pc, #60]	; (800a238 <xTaskRemoveFromEventList+0x80>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d911      	bls.n	800a226 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800a202:	2001      	movs	r0, #1
 800a204:	4b0d      	ldr	r3, [pc, #52]	; (800a23c <xTaskRemoveFromEventList+0x84>)
 800a206:	6018      	str	r0, [r3, #0]
}
 800a208:	bd38      	pop	{r3, r4, r5, pc}
 800a20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800a21a:	e7fe      	b.n	800a21a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a21c:	4629      	mov	r1, r5
 800a21e:	4808      	ldr	r0, [pc, #32]	; (800a240 <xTaskRemoveFromEventList+0x88>)
 800a220:	f7fe fe27 	bl	8008e72 <vListInsertEnd>
 800a224:	e7e7      	b.n	800a1f6 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800a226:	2000      	movs	r0, #0
	return xReturn;
 800a228:	e7ee      	b.n	800a208 <xTaskRemoveFromEventList+0x50>
 800a22a:	bf00      	nop
 800a22c:	20001a60 	.word	0x20001a60
 800a230:	20001a68 	.word	0x20001a68
 800a234:	200019c8 	.word	0x200019c8
 800a238:	200019bc 	.word	0x200019bc
 800a23c:	20001ae4 	.word	0x20001ae4
 800a240:	20001aa0 	.word	0x20001aa0

0800a244 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a244:	4b03      	ldr	r3, [pc, #12]	; (800a254 <vTaskInternalSetTimeOutState+0x10>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a24a:	4b03      	ldr	r3, [pc, #12]	; (800a258 <vTaskInternalSetTimeOutState+0x14>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6043      	str	r3, [r0, #4]
}
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	20001a9c 	.word	0x20001a9c
 800a258:	20001ae0 	.word	0x20001ae0

0800a25c <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 800a25c:	b1d8      	cbz	r0, 800a296 <xTaskCheckForTimeOut+0x3a>
{
 800a25e:	b570      	push	{r4, r5, r6, lr}
 800a260:	460c      	mov	r4, r1
 800a262:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800a264:	b301      	cbz	r1, 800a2a8 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 800a266:	f000 fccd 	bl	800ac04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a26a:	4b1b      	ldr	r3, [pc, #108]	; (800a2d8 <xTaskCheckForTimeOut+0x7c>)
 800a26c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a26e:	686b      	ldr	r3, [r5, #4]
 800a270:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800a272:	6822      	ldr	r2, [r4, #0]
 800a274:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a278:	d027      	beq.n	800a2ca <xTaskCheckForTimeOut+0x6e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a27a:	4e18      	ldr	r6, [pc, #96]	; (800a2dc <xTaskCheckForTimeOut+0x80>)
 800a27c:	6836      	ldr	r6, [r6, #0]
 800a27e:	f8d5 c000 	ldr.w	ip, [r5]
 800a282:	45b4      	cmp	ip, r6
 800a284:	d001      	beq.n	800a28a <xTaskCheckForTimeOut+0x2e>
 800a286:	428b      	cmp	r3, r1
 800a288:	d924      	bls.n	800a2d4 <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a28a:	4282      	cmp	r2, r0
 800a28c:	d815      	bhi.n	800a2ba <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800a292:	2401      	movs	r4, #1
 800a294:	e01a      	b.n	800a2cc <xTaskCheckForTimeOut+0x70>
 800a296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800a2a6:	e7fe      	b.n	800a2a6 <xTaskCheckForTimeOut+0x4a>
 800a2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ac:	f383 8811 	msr	BASEPRI, r3
 800a2b0:	f3bf 8f6f 	isb	sy
 800a2b4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800a2b8:	e7fe      	b.n	800a2b8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 800a2ba:	1a5b      	subs	r3, r3, r1
 800a2bc:	4413      	add	r3, r2
 800a2be:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	f7ff ffbf 	bl	800a244 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a2c6:	2400      	movs	r4, #0
 800a2c8:	e000      	b.n	800a2cc <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 800a2ca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a2cc:	f000 fcbc 	bl	800ac48 <vPortExitCritical>
}
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800a2d4:	2401      	movs	r4, #1
 800a2d6:	e7f9      	b.n	800a2cc <xTaskCheckForTimeOut+0x70>
 800a2d8:	20001ae0 	.word	0x20001ae0
 800a2dc:	20001a9c 	.word	0x20001a9c

0800a2e0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a2e0:	4b01      	ldr	r3, [pc, #4]	; (800a2e8 <vTaskMissedYield+0x8>)
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	601a      	str	r2, [r3, #0]
}
 800a2e6:	4770      	bx	lr
 800a2e8:	20001ae4 	.word	0x20001ae4

0800a2ec <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a2ec:	4b05      	ldr	r3, [pc, #20]	; (800a304 <xTaskGetSchedulerState+0x18>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	b133      	cbz	r3, 800a300 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2f2:	4b05      	ldr	r3, [pc, #20]	; (800a308 <xTaskGetSchedulerState+0x1c>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	b10b      	cbz	r3, 800a2fc <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800a2f8:	2000      	movs	r0, #0
	}
 800a2fa:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800a2fc:	2002      	movs	r0, #2
 800a2fe:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a300:	2001      	movs	r0, #1
 800a302:	4770      	bx	lr
 800a304:	20001ab4 	.word	0x20001ab4
 800a308:	20001a60 	.word	0x20001a60

0800a30c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d04b      	beq.n	800a3a8 <xTaskPriorityDisinherit+0x9c>
	{
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800a314:	4b26      	ldr	r3, [pc, #152]	; (800a3b0 <xTaskPriorityDisinherit+0xa4>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4283      	cmp	r3, r0
 800a31a:	d008      	beq.n	800a32e <xTaskPriorityDisinherit+0x22>
 800a31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	e7fe      	b.n	800a32c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800a32e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800a330:	b943      	cbnz	r3, 800a344 <xTaskPriorityDisinherit+0x38>
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	e7fe      	b.n	800a342 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800a344:	3b01      	subs	r3, #1
 800a346:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a348:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a34a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a34c:	4291      	cmp	r1, r2
 800a34e:	d02d      	beq.n	800a3ac <xTaskPriorityDisinherit+0xa0>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a350:	b10b      	cbz	r3, 800a356 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800a352:	2000      	movs	r0, #0
	}
 800a354:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a356:	1d05      	adds	r5, r0, #4
 800a358:	4628      	mov	r0, r5
 800a35a:	f7fe fdae 	bl	8008eba <uxListRemove>
 800a35e:	b968      	cbnz	r0, 800a37c <xTaskPriorityDisinherit+0x70>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a360:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a362:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a366:	0092      	lsls	r2, r2, #2
 800a368:	4912      	ldr	r1, [pc, #72]	; (800a3b4 <xTaskPriorityDisinherit+0xa8>)
 800a36a:	588a      	ldr	r2, [r1, r2]
 800a36c:	b932      	cbnz	r2, 800a37c <xTaskPriorityDisinherit+0x70>
 800a36e:	2201      	movs	r2, #1
 800a370:	409a      	lsls	r2, r3
 800a372:	4911      	ldr	r1, [pc, #68]	; (800a3b8 <xTaskPriorityDisinherit+0xac>)
 800a374:	680b      	ldr	r3, [r1, #0]
 800a376:	ea23 0302 	bic.w	r3, r3, r2
 800a37a:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a37c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a37e:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a380:	f1c0 0307 	rsb	r3, r0, #7
 800a384:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a386:	2401      	movs	r4, #1
 800a388:	fa04 f300 	lsl.w	r3, r4, r0
 800a38c:	4a0a      	ldr	r2, [pc, #40]	; (800a3b8 <xTaskPriorityDisinherit+0xac>)
 800a38e:	6811      	ldr	r1, [r2, #0]
 800a390:	430b      	orrs	r3, r1
 800a392:	6013      	str	r3, [r2, #0]
 800a394:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a398:	4629      	mov	r1, r5
 800a39a:	4b06      	ldr	r3, [pc, #24]	; (800a3b4 <xTaskPriorityDisinherit+0xa8>)
 800a39c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a3a0:	f7fe fd67 	bl	8008e72 <vListInsertEnd>
					xReturn = pdTRUE;
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	e7d5      	b.n	800a354 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800a3a8:	2000      	movs	r0, #0
	}
 800a3aa:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	e7d1      	b.n	800a354 <xTaskPriorityDisinherit+0x48>
 800a3b0:	200019bc 	.word	0x200019bc
 800a3b4:	200019c8 	.word	0x200019c8
 800a3b8:	20001a68 	.word	0x20001a68

0800a3bc <xTaskNotifyWait>:
	{
 800a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3be:	4606      	mov	r6, r0
 800a3c0:	460f      	mov	r7, r1
 800a3c2:	4614      	mov	r4, r2
 800a3c4:	461d      	mov	r5, r3
		taskENTER_CRITICAL();
 800a3c6:	f000 fc1d 	bl	800ac04 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a3ca:	4b24      	ldr	r3, [pc, #144]	; (800a45c <xTaskNotifyWait+0xa0>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800a3d2:	b2d2      	uxtb	r2, r2
 800a3d4:	2a02      	cmp	r2, #2
 800a3d6:	d00c      	beq.n	800a3f2 <xTaskNotifyWait+0x36>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a3d8:	4a20      	ldr	r2, [pc, #128]	; (800a45c <xTaskNotifyWait+0xa0>)
 800a3da:	6811      	ldr	r1, [r2, #0]
 800a3dc:	f8d1 3098 	ldr.w	r3, [r1, #152]	; 0x98
 800a3e0:	ea23 0306 	bic.w	r3, r3, r6
 800a3e4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a3e8:	6813      	ldr	r3, [r2, #0]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				if( xTicksToWait > ( TickType_t ) 0 )
 800a3f0:	b9d5      	cbnz	r5, 800a428 <xTaskNotifyWait+0x6c>
		taskEXIT_CRITICAL();
 800a3f2:	f000 fc29 	bl	800ac48 <vPortExitCritical>
		taskENTER_CRITICAL();
 800a3f6:	f000 fc05 	bl	800ac04 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800a3fa:	b124      	cbz	r4, 800a406 <xTaskNotifyWait+0x4a>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a3fc:	4b17      	ldr	r3, [pc, #92]	; (800a45c <xTaskNotifyWait+0xa0>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a404:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a406:	4b15      	ldr	r3, [pc, #84]	; (800a45c <xTaskNotifyWait+0xa0>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	2b02      	cmp	r3, #2
 800a412:	d018      	beq.n	800a446 <xTaskNotifyWait+0x8a>
				xReturn = pdFALSE;
 800a414:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a416:	4b11      	ldr	r3, [pc, #68]	; (800a45c <xTaskNotifyWait+0xa0>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		taskEXIT_CRITICAL();
 800a420:	f000 fc12 	bl	800ac48 <vPortExitCritical>
	}
 800a424:	4620      	mov	r0, r4
 800a426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a428:	4611      	mov	r1, r2
 800a42a:	4628      	mov	r0, r5
 800a42c:	f7ff fa94 	bl	8009958 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800a430:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a438:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	e7d5      	b.n	800a3f2 <xTaskNotifyWait+0x36>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a446:	4b05      	ldr	r3, [pc, #20]	; (800a45c <xTaskNotifyWait+0xa0>)
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800a44e:	ea23 0307 	bic.w	r3, r3, r7
 800a452:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
				xReturn = pdTRUE;
 800a456:	2401      	movs	r4, #1
 800a458:	e7dd      	b.n	800a416 <xTaskNotifyWait+0x5a>
 800a45a:	bf00      	nop
 800a45c:	200019bc 	.word	0x200019bc

0800a460 <xTaskGenericNotify>:
	{
 800a460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 800a462:	b1b0      	cbz	r0, 800a492 <xTaskGenericNotify+0x32>
 800a464:	460e      	mov	r6, r1
 800a466:	4617      	mov	r7, r2
 800a468:	461c      	mov	r4, r3
 800a46a:	4605      	mov	r5, r0
		taskENTER_CRITICAL();
 800a46c:	f000 fbca 	bl	800ac04 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800a470:	b114      	cbz	r4, 800a478 <xTaskGenericNotify+0x18>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a472:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800a476:	6023      	str	r3, [r4, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a478:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
 800a47c:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a47e:	2202      	movs	r2, #2
 800a480:	f885 209c 	strb.w	r2, [r5, #156]	; 0x9c
			switch( eAction )
 800a484:	1e7a      	subs	r2, r7, #1
 800a486:	2a03      	cmp	r2, #3
 800a488:	d829      	bhi.n	800a4de <xTaskGenericNotify+0x7e>
 800a48a:	e8df f002 	tbb	[pc, r2]
 800a48e:	170b      	.short	0x170b
 800a490:	221e      	.short	0x221e
 800a492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800a4a2:	e7fe      	b.n	800a4a2 <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue |= ulValue;
 800a4a4:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 800a4a8:	4332      	orrs	r2, r6
 800a4aa:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a4ae:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d018      	beq.n	800a4e6 <xTaskGenericNotify+0x86>
		taskEXIT_CRITICAL();
 800a4b4:	f000 fbc8 	bl	800ac48 <vPortExitCritical>
	}
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 800a4bc:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 800a4c0:	3201      	adds	r2, #1
 800a4c2:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a4c6:	2401      	movs	r4, #1
					break;
 800a4c8:	e7f2      	b.n	800a4b0 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue = ulValue;
 800a4ca:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a4ce:	2401      	movs	r4, #1
					break;
 800a4d0:	e7ee      	b.n	800a4b0 <xTaskGenericNotify+0x50>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d005      	beq.n	800a4e2 <xTaskGenericNotify+0x82>
						pxTCB->ulNotifiedValue = ulValue;
 800a4d6:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a4da:	2401      	movs	r4, #1
 800a4dc:	e7e8      	b.n	800a4b0 <xTaskGenericNotify+0x50>
			switch( eAction )
 800a4de:	2401      	movs	r4, #1
 800a4e0:	e7e6      	b.n	800a4b0 <xTaskGenericNotify+0x50>
						xReturn = pdFAIL;
 800a4e2:	2400      	movs	r4, #0
 800a4e4:	e7e4      	b.n	800a4b0 <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4e6:	1d2e      	adds	r6, r5, #4
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f7fe fce6 	bl	8008eba <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a4ee:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	4083      	lsls	r3, r0
 800a4f4:	4a13      	ldr	r2, [pc, #76]	; (800a544 <xTaskGenericNotify+0xe4>)
 800a4f6:	6811      	ldr	r1, [r2, #0]
 800a4f8:	430b      	orrs	r3, r1
 800a4fa:	6013      	str	r3, [r2, #0]
 800a4fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a500:	4631      	mov	r1, r6
 800a502:	4b11      	ldr	r3, [pc, #68]	; (800a548 <xTaskGenericNotify+0xe8>)
 800a504:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a508:	f7fe fcb3 	bl	8008e72 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a50c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a50e:	b143      	cbz	r3, 800a522 <xTaskGenericNotify+0xc2>
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	e7fe      	b.n	800a520 <xTaskGenericNotify+0xc0>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a522:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800a524:	4b09      	ldr	r3, [pc, #36]	; (800a54c <xTaskGenericNotify+0xec>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d9c2      	bls.n	800a4b4 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 800a52e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a536:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	e7b7      	b.n	800a4b4 <xTaskGenericNotify+0x54>
 800a544:	20001a68 	.word	0x20001a68
 800a548:	200019c8 	.word	0x200019c8
 800a54c:	200019bc 	.word	0x200019bc

0800a550 <xTaskGenericNotifyFromISR>:
		configASSERT( xTaskToNotify );
 800a550:	b310      	cbz	r0, 800a598 <xTaskGenericNotifyFromISR+0x48>
	{
 800a552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a556:	460e      	mov	r6, r1
 800a558:	4617      	mov	r7, r2
 800a55a:	461c      	mov	r4, r3
 800a55c:	4605      	mov	r5, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a55e:	f000 fc3b 	bl	800add8 <vPortValidateInterruptPriority>
	__asm volatile
 800a562:	f3ef 8811 	mrs	r8, BASEPRI
 800a566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56a:	f383 8811 	msr	BASEPRI, r3
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800a576:	b114      	cbz	r4, 800a57e <xTaskGenericNotifyFromISR+0x2e>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a578:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800a57c:	6023      	str	r3, [r4, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a57e:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
 800a582:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a584:	2202      	movs	r2, #2
 800a586:	f885 209c 	strb.w	r2, [r5, #156]	; 0x9c
			switch( eAction )
 800a58a:	1e7a      	subs	r2, r7, #1
 800a58c:	2a03      	cmp	r2, #3
 800a58e:	d82a      	bhi.n	800a5e6 <xTaskGenericNotifyFromISR+0x96>
 800a590:	e8df f002 	tbb	[pc, r2]
 800a594:	231f180b 	.word	0x231f180b
	__asm volatile
 800a598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59c:	f383 8811 	msr	BASEPRI, r3
 800a5a0:	f3bf 8f6f 	isb	sy
 800a5a4:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800a5a8:	e7fe      	b.n	800a5a8 <xTaskGenericNotifyFromISR+0x58>
					pxTCB->ulNotifiedValue |= ulValue;
 800a5aa:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 800a5ae:	4332      	orrs	r2, r6
 800a5b0:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a5b4:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d019      	beq.n	800a5ee <xTaskGenericNotifyFromISR+0x9e>
	__asm volatile
 800a5ba:	f388 8811 	msr	BASEPRI, r8
	}
 800a5be:	4620      	mov	r0, r4
 800a5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					( pxTCB->ulNotifiedValue )++;
 800a5c4:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 800a5c8:	3201      	adds	r2, #1
 800a5ca:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a5ce:	2401      	movs	r4, #1
					break;
 800a5d0:	e7f1      	b.n	800a5b6 <xTaskGenericNotifyFromISR+0x66>
					pxTCB->ulNotifiedValue = ulValue;
 800a5d2:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a5d6:	2401      	movs	r4, #1
					break;
 800a5d8:	e7ed      	b.n	800a5b6 <xTaskGenericNotifyFromISR+0x66>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d005      	beq.n	800a5ea <xTaskGenericNotifyFromISR+0x9a>
						pxTCB->ulNotifiedValue = ulValue;
 800a5de:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a5e2:	2401      	movs	r4, #1
 800a5e4:	e7e7      	b.n	800a5b6 <xTaskGenericNotifyFromISR+0x66>
			switch( eAction )
 800a5e6:	2401      	movs	r4, #1
 800a5e8:	e7e5      	b.n	800a5b6 <xTaskGenericNotifyFromISR+0x66>
						xReturn = pdFAIL;
 800a5ea:	2400      	movs	r4, #0
 800a5ec:	e7e3      	b.n	800a5b6 <xTaskGenericNotifyFromISR+0x66>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a5ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a5f0:	b143      	cbz	r3, 800a604 <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 800a5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f6:	f383 8811 	msr	BASEPRI, r3
 800a5fa:	f3bf 8f6f 	isb	sy
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	e7fe      	b.n	800a602 <xTaskGenericNotifyFromISR+0xb2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a604:	4b15      	ldr	r3, [pc, #84]	; (800a65c <xTaskGenericNotifyFromISR+0x10c>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	b9f3      	cbnz	r3, 800a648 <xTaskGenericNotifyFromISR+0xf8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a60a:	1d2e      	adds	r6, r5, #4
 800a60c:	4630      	mov	r0, r6
 800a60e:	f7fe fc54 	bl	8008eba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a612:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800a614:	2301      	movs	r3, #1
 800a616:	4083      	lsls	r3, r0
 800a618:	4a11      	ldr	r2, [pc, #68]	; (800a660 <xTaskGenericNotifyFromISR+0x110>)
 800a61a:	6811      	ldr	r1, [r2, #0]
 800a61c:	430b      	orrs	r3, r1
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a624:	4631      	mov	r1, r6
 800a626:	4b0f      	ldr	r3, [pc, #60]	; (800a664 <xTaskGenericNotifyFromISR+0x114>)
 800a628:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a62c:	f7fe fc21 	bl	8008e72 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a630:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800a632:	4b0d      	ldr	r3, [pc, #52]	; (800a668 <xTaskGenericNotifyFromISR+0x118>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a638:	429a      	cmp	r2, r3
 800a63a:	d9be      	bls.n	800a5ba <xTaskGenericNotifyFromISR+0x6a>
					if( pxHigherPriorityTaskWoken != NULL )
 800a63c:	9b06      	ldr	r3, [sp, #24]
 800a63e:	b14b      	cbz	r3, 800a654 <xTaskGenericNotifyFromISR+0x104>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a640:	2301      	movs	r3, #1
 800a642:	9a06      	ldr	r2, [sp, #24]
 800a644:	6013      	str	r3, [r2, #0]
 800a646:	e7b8      	b.n	800a5ba <xTaskGenericNotifyFromISR+0x6a>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a648:	f105 0118 	add.w	r1, r5, #24
 800a64c:	4807      	ldr	r0, [pc, #28]	; (800a66c <xTaskGenericNotifyFromISR+0x11c>)
 800a64e:	f7fe fc10 	bl	8008e72 <vListInsertEnd>
 800a652:	e7ed      	b.n	800a630 <xTaskGenericNotifyFromISR+0xe0>
						xYieldPending = pdTRUE;
 800a654:	4b06      	ldr	r3, [pc, #24]	; (800a670 <xTaskGenericNotifyFromISR+0x120>)
 800a656:	2201      	movs	r2, #1
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	e7ae      	b.n	800a5ba <xTaskGenericNotifyFromISR+0x6a>
 800a65c:	20001a60 	.word	0x20001a60
 800a660:	20001a68 	.word	0x20001a68
 800a664:	200019c8 	.word	0x200019c8
 800a668:	200019bc 	.word	0x200019bc
 800a66c:	20001aa0 	.word	0x20001aa0
 800a670:	20001ae4 	.word	0x20001ae4

0800a674 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a674:	4b06      	ldr	r3, [pc, #24]	; (800a690 <prvGetNextExpireTime+0x1c>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	6813      	ldr	r3, [r2, #0]
 800a67a:	fab3 f383 	clz	r3, r3
 800a67e:	095b      	lsrs	r3, r3, #5
 800a680:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a682:	b913      	cbnz	r3, 800a68a <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a684:	68d3      	ldr	r3, [r2, #12]
 800a686:	6818      	ldr	r0, [r3, #0]
 800a688:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a68a:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	20001ae8 	.word	0x20001ae8

0800a694 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a694:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a696:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a698:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a69a:	4291      	cmp	r1, r2
 800a69c:	d80c      	bhi.n	800a6b8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a69e:	1ad2      	subs	r2, r2, r3
 800a6a0:	6983      	ldr	r3, [r0, #24]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d301      	bcc.n	800a6aa <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a6a6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800a6a8:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a6aa:	1d01      	adds	r1, r0, #4
 800a6ac:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <prvInsertTimerInActiveList+0x40>)
 800a6ae:	6818      	ldr	r0, [r3, #0]
 800a6b0:	f7fe fbea 	bl	8008e88 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	e7f7      	b.n	800a6a8 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d201      	bcs.n	800a6c0 <prvInsertTimerInActiveList+0x2c>
 800a6bc:	4299      	cmp	r1, r3
 800a6be:	d206      	bcs.n	800a6ce <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6c0:	1d01      	adds	r1, r0, #4
 800a6c2:	4b05      	ldr	r3, [pc, #20]	; (800a6d8 <prvInsertTimerInActiveList+0x44>)
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	f7fe fbdf 	bl	8008e88 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	e7ec      	b.n	800a6a8 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800a6ce:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a6d0:	e7ea      	b.n	800a6a8 <prvInsertTimerInActiveList+0x14>
 800a6d2:	bf00      	nop
 800a6d4:	20001aec 	.word	0x20001aec
 800a6d8:	20001ae8 	.word	0x20001ae8

0800a6dc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a6dc:	b530      	push	{r4, r5, lr}
 800a6de:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a6e0:	f000 fa90 	bl	800ac04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a6e4:	4b11      	ldr	r3, [pc, #68]	; (800a72c <prvCheckForValidListAndQueue+0x50>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	b11b      	cbz	r3, 800a6f2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6ea:	f000 faad 	bl	800ac48 <vPortExitCritical>
}
 800a6ee:	b003      	add	sp, #12
 800a6f0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800a6f2:	4d0f      	ldr	r5, [pc, #60]	; (800a730 <prvCheckForValidListAndQueue+0x54>)
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	f7fe fbae 	bl	8008e56 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a6fa:	4c0e      	ldr	r4, [pc, #56]	; (800a734 <prvCheckForValidListAndQueue+0x58>)
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f7fe fbaa 	bl	8008e56 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a702:	4b0d      	ldr	r3, [pc, #52]	; (800a738 <prvCheckForValidListAndQueue+0x5c>)
 800a704:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a706:	4b0d      	ldr	r3, [pc, #52]	; (800a73c <prvCheckForValidListAndQueue+0x60>)
 800a708:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a70a:	2300      	movs	r3, #0
 800a70c:	9300      	str	r3, [sp, #0]
 800a70e:	4b0c      	ldr	r3, [pc, #48]	; (800a740 <prvCheckForValidListAndQueue+0x64>)
 800a710:	4a0c      	ldr	r2, [pc, #48]	; (800a744 <prvCheckForValidListAndQueue+0x68>)
 800a712:	210c      	movs	r1, #12
 800a714:	200a      	movs	r0, #10
 800a716:	f7fe fcd3 	bl	80090c0 <xQueueGenericCreateStatic>
 800a71a:	4b04      	ldr	r3, [pc, #16]	; (800a72c <prvCheckForValidListAndQueue+0x50>)
 800a71c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800a71e:	2800      	cmp	r0, #0
 800a720:	d0e3      	beq.n	800a6ea <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a722:	4909      	ldr	r1, [pc, #36]	; (800a748 <prvCheckForValidListAndQueue+0x6c>)
 800a724:	f7fe ff6c 	bl	8009600 <vQueueAddToRegistry>
 800a728:	e7df      	b.n	800a6ea <prvCheckForValidListAndQueue+0xe>
 800a72a:	bf00      	nop
 800a72c:	20001bdc 	.word	0x20001bdc
 800a730:	20001b68 	.word	0x20001b68
 800a734:	20001b7c 	.word	0x20001b7c
 800a738:	20001ae8 	.word	0x20001ae8
 800a73c:	20001aec 	.word	0x20001aec
 800a740:	20001b94 	.word	0x20001b94
 800a744:	20001af0 	.word	0x20001af0
 800a748:	0800ca18 	.word	0x0800ca18

0800a74c <prvInitialiseNewTimer>:
{
 800a74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a750:	9f07      	ldr	r7, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a752:	b941      	cbnz	r1, 800a766 <prvInitialiseNewTimer+0x1a>
 800a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	e7fe      	b.n	800a764 <prvInitialiseNewTimer+0x18>
 800a766:	4606      	mov	r6, r0
 800a768:	4615      	mov	r5, r2
 800a76a:	461c      	mov	r4, r3
 800a76c:	4688      	mov	r8, r1
	if( pxNewTimer != NULL )
 800a76e:	b15f      	cbz	r7, 800a788 <prvInitialiseNewTimer+0x3c>
		prvCheckForValidListAndQueue();
 800a770:	f7ff ffb4 	bl	800a6dc <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 800a774:	603e      	str	r6, [r7, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a776:	f8c7 8018 	str.w	r8, [r7, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800a77a:	61fd      	str	r5, [r7, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800a77c:	623c      	str	r4, [r7, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a77e:	9b06      	ldr	r3, [sp, #24]
 800a780:	627b      	str	r3, [r7, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a782:	1d38      	adds	r0, r7, #4
 800a784:	f7fe fb72 	bl	8008e6c <vListInitialiseItem>
}
 800a788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a78c <xTimerCreateTimerTask>:
{
 800a78c:	b510      	push	{r4, lr}
 800a78e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a790:	f7ff ffa4 	bl	800a6dc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a794:	4b12      	ldr	r3, [pc, #72]	; (800a7e0 <xTimerCreateTimerTask+0x54>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	b1cb      	cbz	r3, 800a7ce <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a79a:	2400      	movs	r4, #0
 800a79c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a79e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a7a0:	aa07      	add	r2, sp, #28
 800a7a2:	a906      	add	r1, sp, #24
 800a7a4:	a805      	add	r0, sp, #20
 800a7a6:	f7f7 fe25 	bl	80023f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a7aa:	9b05      	ldr	r3, [sp, #20]
 800a7ac:	9302      	str	r3, [sp, #8]
 800a7ae:	9b06      	ldr	r3, [sp, #24]
 800a7b0:	9301      	str	r3, [sp, #4]
 800a7b2:	2302      	movs	r3, #2
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	4623      	mov	r3, r4
 800a7b8:	9a07      	ldr	r2, [sp, #28]
 800a7ba:	490a      	ldr	r1, [pc, #40]	; (800a7e4 <xTimerCreateTimerTask+0x58>)
 800a7bc:	480a      	ldr	r0, [pc, #40]	; (800a7e8 <xTimerCreateTimerTask+0x5c>)
 800a7be:	f7ff f917 	bl	80099f0 <xTaskCreateStatic>
 800a7c2:	4b0a      	ldr	r3, [pc, #40]	; (800a7ec <xTimerCreateTimerTask+0x60>)
 800a7c4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a7c6:	b110      	cbz	r0, 800a7ce <xTimerCreateTimerTask+0x42>
}
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	b008      	add	sp, #32
 800a7cc:	bd10      	pop	{r4, pc}
 800a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800a7de:	e7fe      	b.n	800a7de <xTimerCreateTimerTask+0x52>
 800a7e0:	20001bdc 	.word	0x20001bdc
 800a7e4:	0800ca20 	.word	0x0800ca20
 800a7e8:	0800ab41 	.word	0x0800ab41
 800a7ec:	20001be0 	.word	0x20001be0

0800a7f0 <xTimerCreate>:
	{
 800a7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f4:	b082      	sub	sp, #8
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	4688      	mov	r8, r1
 800a7fa:	4615      	mov	r5, r2
 800a7fc:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800a7fe:	202c      	movs	r0, #44	; 0x2c
 800a800:	f000 fb7a 	bl	800aef8 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800a804:	4607      	mov	r7, r0
 800a806:	b158      	cbz	r0, 800a820 <xTimerCreate+0x30>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a808:	9001      	str	r0, [sp, #4]
 800a80a:	9b08      	ldr	r3, [sp, #32]
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	4633      	mov	r3, r6
 800a810:	462a      	mov	r2, r5
 800a812:	4641      	mov	r1, r8
 800a814:	4620      	mov	r0, r4
 800a816:	f7ff ff99 	bl	800a74c <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800a81a:	2300      	movs	r3, #0
 800a81c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}
 800a820:	4638      	mov	r0, r7
 800a822:	b002      	add	sp, #8
 800a824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a828 <xTimerCreateStatic>:
	{
 800a828:	b510      	push	{r4, lr}
 800a82a:	b084      	sub	sp, #16
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a82c:	242c      	movs	r4, #44	; 0x2c
 800a82e:	9403      	str	r4, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a830:	9c03      	ldr	r4, [sp, #12]
 800a832:	2c2c      	cmp	r4, #44	; 0x2c
 800a834:	d008      	beq.n	800a848 <xTimerCreateStatic+0x20>
 800a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	e7fe      	b.n	800a846 <xTimerCreateStatic+0x1e>
		configASSERT( pxTimerBuffer );
 800a848:	9c07      	ldr	r4, [sp, #28]
 800a84a:	b164      	cbz	r4, 800a866 <xTimerCreateStatic+0x3e>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a84c:	9c07      	ldr	r4, [sp, #28]
 800a84e:	9401      	str	r4, [sp, #4]
 800a850:	9c06      	ldr	r4, [sp, #24]
 800a852:	9400      	str	r4, [sp, #0]
 800a854:	f7ff ff7a 	bl	800a74c <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800a858:	2301      	movs	r3, #1
 800a85a:	9a07      	ldr	r2, [sp, #28]
 800a85c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	}
 800a860:	4610      	mov	r0, r2
 800a862:	b004      	add	sp, #16
 800a864:	bd10      	pop	{r4, pc}
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
 800a876:	e7fe      	b.n	800a876 <xTimerCreateStatic+0x4e>

0800a878 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800a878:	b1b8      	cbz	r0, 800a8aa <xTimerGenericCommand+0x32>
 800a87a:	469c      	mov	ip, r3
 800a87c:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800a87e:	4818      	ldr	r0, [pc, #96]	; (800a8e0 <xTimerGenericCommand+0x68>)
 800a880:	6800      	ldr	r0, [r0, #0]
 800a882:	b358      	cbz	r0, 800a8dc <xTimerGenericCommand+0x64>
{
 800a884:	b500      	push	{lr}
 800a886:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800a888:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a88a:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a88c:	9303      	str	r3, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a88e:	2905      	cmp	r1, #5
 800a890:	dc1c      	bgt.n	800a8cc <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a892:	f7ff fd2b 	bl	800a2ec <xTaskGetSchedulerState>
 800a896:	2802      	cmp	r0, #2
 800a898:	d010      	beq.n	800a8bc <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a89a:	2300      	movs	r3, #0
 800a89c:	461a      	mov	r2, r3
 800a89e:	a901      	add	r1, sp, #4
 800a8a0:	480f      	ldr	r0, [pc, #60]	; (800a8e0 <xTimerGenericCommand+0x68>)
 800a8a2:	6800      	ldr	r0, [r0, #0]
 800a8a4:	f7fe fc7c 	bl	80091a0 <xQueueGenericSend>
 800a8a8:	e015      	b.n	800a8d6 <xTimerGenericCommand+0x5e>
 800a8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800a8ba:	e7fe      	b.n	800a8ba <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a8bc:	2300      	movs	r3, #0
 800a8be:	9a06      	ldr	r2, [sp, #24]
 800a8c0:	a901      	add	r1, sp, #4
 800a8c2:	4807      	ldr	r0, [pc, #28]	; (800a8e0 <xTimerGenericCommand+0x68>)
 800a8c4:	6800      	ldr	r0, [r0, #0]
 800a8c6:	f7fe fc6b 	bl	80091a0 <xQueueGenericSend>
 800a8ca:	e004      	b.n	800a8d6 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	4662      	mov	r2, ip
 800a8d0:	a901      	add	r1, sp, #4
 800a8d2:	f7fe fd29 	bl	8009328 <xQueueGenericSendFromISR>
}
 800a8d6:	b005      	add	sp, #20
 800a8d8:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800a8dc:	2000      	movs	r0, #0
}
 800a8de:	4770      	bx	lr
 800a8e0:	20001bdc 	.word	0x20001bdc

0800a8e4 <prvSwitchTimerLists>:
{
 800a8e4:	b570      	push	{r4, r5, r6, lr}
 800a8e6:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8e8:	4b1a      	ldr	r3, [pc, #104]	; (800a954 <prvSwitchTimerLists+0x70>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	b352      	cbz	r2, 800a946 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8f4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8f6:	1d25      	adds	r5, r4, #4
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	f7fe fade 	bl	8008eba <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a900:	4620      	mov	r0, r4
 800a902:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a904:	69e3      	ldr	r3, [r4, #28]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d1ee      	bne.n	800a8e8 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a90a:	69a3      	ldr	r3, [r4, #24]
 800a90c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800a90e:	429e      	cmp	r6, r3
 800a910:	d207      	bcs.n	800a922 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a912:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a914:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a916:	4629      	mov	r1, r5
 800a918:	4b0e      	ldr	r3, [pc, #56]	; (800a954 <prvSwitchTimerLists+0x70>)
 800a91a:	6818      	ldr	r0, [r3, #0]
 800a91c:	f7fe fab4 	bl	8008e88 <vListInsert>
 800a920:	e7e2      	b.n	800a8e8 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a922:	2100      	movs	r1, #0
 800a924:	9100      	str	r1, [sp, #0]
 800a926:	460b      	mov	r3, r1
 800a928:	4632      	mov	r2, r6
 800a92a:	4620      	mov	r0, r4
 800a92c:	f7ff ffa4 	bl	800a878 <xTimerGenericCommand>
				configASSERT( xResult );
 800a930:	2800      	cmp	r0, #0
 800a932:	d1d9      	bne.n	800a8e8 <prvSwitchTimerLists+0x4>
 800a934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	e7fe      	b.n	800a944 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 800a946:	4a04      	ldr	r2, [pc, #16]	; (800a958 <prvSwitchTimerLists+0x74>)
 800a948:	6810      	ldr	r0, [r2, #0]
 800a94a:	4902      	ldr	r1, [pc, #8]	; (800a954 <prvSwitchTimerLists+0x70>)
 800a94c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800a94e:	6013      	str	r3, [r2, #0]
}
 800a950:	b002      	add	sp, #8
 800a952:	bd70      	pop	{r4, r5, r6, pc}
 800a954:	20001ae8 	.word	0x20001ae8
 800a958:	20001aec 	.word	0x20001aec

0800a95c <prvSampleTimeNow>:
{
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800a960:	f7ff f9a8 	bl	8009cb4 <xTaskGetTickCount>
 800a964:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800a966:	4b07      	ldr	r3, [pc, #28]	; (800a984 <prvSampleTimeNow+0x28>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4283      	cmp	r3, r0
 800a96c:	d805      	bhi.n	800a97a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800a96e:	2300      	movs	r3, #0
 800a970:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800a972:	4b04      	ldr	r3, [pc, #16]	; (800a984 <prvSampleTimeNow+0x28>)
 800a974:	601c      	str	r4, [r3, #0]
}
 800a976:	4620      	mov	r0, r4
 800a978:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800a97a:	f7ff ffb3 	bl	800a8e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a97e:	2301      	movs	r3, #1
 800a980:	602b      	str	r3, [r5, #0]
 800a982:	e7f6      	b.n	800a972 <prvSampleTimeNow+0x16>
 800a984:	20001b90 	.word	0x20001b90

0800a988 <prvProcessExpiredTimer>:
{
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	4606      	mov	r6, r0
 800a98e:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a990:	4914      	ldr	r1, [pc, #80]	; (800a9e4 <prvProcessExpiredTimer+0x5c>)
 800a992:	6809      	ldr	r1, [r1, #0]
 800a994:	68c9      	ldr	r1, [r1, #12]
 800a996:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a998:	1d20      	adds	r0, r4, #4
 800a99a:	f7fe fa8e 	bl	8008eba <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a99e:	69e1      	ldr	r1, [r4, #28]
 800a9a0:	2901      	cmp	r1, #1
 800a9a2:	d004      	beq.n	800a9ae <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	4798      	blx	r3
}
 800a9aa:	b002      	add	sp, #8
 800a9ac:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a9ae:	69a1      	ldr	r1, [r4, #24]
 800a9b0:	4633      	mov	r3, r6
 800a9b2:	462a      	mov	r2, r5
 800a9b4:	4431      	add	r1, r6
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f7ff fe6c 	bl	800a694 <prvInsertTimerInActiveList>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d0f1      	beq.n	800a9a4 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	9100      	str	r1, [sp, #0]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	4632      	mov	r2, r6
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f7ff ff55 	bl	800a878 <xTimerGenericCommand>
			configASSERT( xResult );
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d1e8      	bne.n	800a9a4 <prvProcessExpiredTimer+0x1c>
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	e7fe      	b.n	800a9e2 <prvProcessExpiredTimer+0x5a>
 800a9e4:	20001ae8 	.word	0x20001ae8

0800a9e8 <prvProcessTimerOrBlockTask>:
{
 800a9e8:	b570      	push	{r4, r5, r6, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800a9f0:	f7ff f958 	bl	8009ca4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9f4:	a801      	add	r0, sp, #4
 800a9f6:	f7ff ffb1 	bl	800a95c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a9fa:	9b01      	ldr	r3, [sp, #4]
 800a9fc:	bb2b      	cbnz	r3, 800aa4a <prvProcessTimerOrBlockTask+0x62>
 800a9fe:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa00:	b90c      	cbnz	r4, 800aa06 <prvProcessTimerOrBlockTask+0x1e>
 800aa02:	42b0      	cmp	r0, r6
 800aa04:	d21a      	bcs.n	800aa3c <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800aa06:	b12c      	cbz	r4, 800aa14 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa08:	4b12      	ldr	r3, [pc, #72]	; (800aa54 <prvProcessTimerOrBlockTask+0x6c>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681c      	ldr	r4, [r3, #0]
 800aa0e:	fab4 f484 	clz	r4, r4
 800aa12:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa14:	4622      	mov	r2, r4
 800aa16:	1b71      	subs	r1, r6, r5
 800aa18:	4b0f      	ldr	r3, [pc, #60]	; (800aa58 <prvProcessTimerOrBlockTask+0x70>)
 800aa1a:	6818      	ldr	r0, [r3, #0]
 800aa1c:	f7fe fe04 	bl	8009628 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa20:	f7ff f9da 	bl	8009dd8 <xTaskResumeAll>
 800aa24:	b998      	cbnz	r0, 800aa4e <prvProcessTimerOrBlockTask+0x66>
					portYIELD_WITHIN_API();
 800aa26:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800aa2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	e008      	b.n	800aa4e <prvProcessTimerOrBlockTask+0x66>
				( void ) xTaskResumeAll();
 800aa3c:	f7ff f9cc 	bl	8009dd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa40:	4629      	mov	r1, r5
 800aa42:	4630      	mov	r0, r6
 800aa44:	f7ff ffa0 	bl	800a988 <prvProcessExpiredTimer>
 800aa48:	e001      	b.n	800aa4e <prvProcessTimerOrBlockTask+0x66>
			( void ) xTaskResumeAll();
 800aa4a:	f7ff f9c5 	bl	8009dd8 <xTaskResumeAll>
}
 800aa4e:	b002      	add	sp, #8
 800aa50:	bd70      	pop	{r4, r5, r6, pc}
 800aa52:	bf00      	nop
 800aa54:	20001aec 	.word	0x20001aec
 800aa58:	20001bdc 	.word	0x20001bdc

0800aa5c <prvProcessReceivedCommands>:
{
 800aa5c:	b510      	push	{r4, lr}
 800aa5e:	b086      	sub	sp, #24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa60:	2200      	movs	r2, #0
 800aa62:	a903      	add	r1, sp, #12
 800aa64:	4b35      	ldr	r3, [pc, #212]	; (800ab3c <prvProcessReceivedCommands+0xe0>)
 800aa66:	6818      	ldr	r0, [r3, #0]
 800aa68:	f7fe fcc4 	bl	80093f4 <xQueueReceive>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d063      	beq.n	800ab38 <prvProcessReceivedCommands+0xdc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa70:	9b03      	ldr	r3, [sp, #12]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	dbf4      	blt.n	800aa60 <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa76:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa78:	6963      	ldr	r3, [r4, #20]
 800aa7a:	b113      	cbz	r3, 800aa82 <prvProcessReceivedCommands+0x26>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa7c:	1d20      	adds	r0, r4, #4
 800aa7e:	f7fe fa1c 	bl	8008eba <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa82:	a802      	add	r0, sp, #8
 800aa84:	f7ff ff6a 	bl	800a95c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800aa88:	9b03      	ldr	r3, [sp, #12]
 800aa8a:	2b09      	cmp	r3, #9
 800aa8c:	d8e8      	bhi.n	800aa60 <prvProcessReceivedCommands+0x4>
 800aa8e:	a201      	add	r2, pc, #4	; (adr r2, 800aa94 <prvProcessReceivedCommands+0x38>)
 800aa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa94:	0800aabd 	.word	0x0800aabd
 800aa98:	0800aabd 	.word	0x0800aabd
 800aa9c:	0800aabd 	.word	0x0800aabd
 800aaa0:	0800aa61 	.word	0x0800aa61
 800aaa4:	0800ab03 	.word	0x0800ab03
 800aaa8:	0800ab29 	.word	0x0800ab29
 800aaac:	0800aabd 	.word	0x0800aabd
 800aab0:	0800aabd 	.word	0x0800aabd
 800aab4:	0800aa61 	.word	0x0800aa61
 800aab8:	0800ab03 	.word	0x0800ab03
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aabc:	9b04      	ldr	r3, [sp, #16]
 800aabe:	69a1      	ldr	r1, [r4, #24]
 800aac0:	4602      	mov	r2, r0
 800aac2:	4419      	add	r1, r3
 800aac4:	4620      	mov	r0, r4
 800aac6:	f7ff fde5 	bl	800a694 <prvInsertTimerInActiveList>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d0c8      	beq.n	800aa60 <prvProcessReceivedCommands+0x4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aad0:	4620      	mov	r0, r4
 800aad2:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800aad4:	69e3      	ldr	r3, [r4, #28]
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d1c2      	bne.n	800aa60 <prvProcessReceivedCommands+0x4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aada:	69a2      	ldr	r2, [r4, #24]
 800aadc:	2100      	movs	r1, #0
 800aade:	9100      	str	r1, [sp, #0]
 800aae0:	460b      	mov	r3, r1
 800aae2:	9804      	ldr	r0, [sp, #16]
 800aae4:	4402      	add	r2, r0
 800aae6:	4620      	mov	r0, r4
 800aae8:	f7ff fec6 	bl	800a878 <xTimerGenericCommand>
							configASSERT( xResult );
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d1b7      	bne.n	800aa60 <prvProcessReceivedCommands+0x4>
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	e7fe      	b.n	800ab00 <prvProcessReceivedCommands+0xa4>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab02:	9904      	ldr	r1, [sp, #16]
 800ab04:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab06:	b131      	cbz	r1, 800ab16 <prvProcessReceivedCommands+0xba>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab08:	4603      	mov	r3, r0
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	4401      	add	r1, r0
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f7ff fdc0 	bl	800a694 <prvInsertTimerInActiveList>
					break;
 800ab14:	e7a4      	b.n	800aa60 <prvProcessReceivedCommands+0x4>
 800ab16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab26:	e7fe      	b.n	800ab26 <prvProcessReceivedCommands+0xca>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ab28:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d197      	bne.n	800aa60 <prvProcessReceivedCommands+0x4>
							vPortFree( pxTimer );
 800ab30:	4620      	mov	r0, r4
 800ab32:	f000 fa59 	bl	800afe8 <vPortFree>
 800ab36:	e793      	b.n	800aa60 <prvProcessReceivedCommands+0x4>
}
 800ab38:	b006      	add	sp, #24
 800ab3a:	bd10      	pop	{r4, pc}
 800ab3c:	20001bdc 	.word	0x20001bdc

0800ab40 <prvTimerTask>:
{
 800ab40:	b500      	push	{lr}
 800ab42:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab44:	a801      	add	r0, sp, #4
 800ab46:	f7ff fd95 	bl	800a674 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab4a:	9901      	ldr	r1, [sp, #4]
 800ab4c:	f7ff ff4c 	bl	800a9e8 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800ab50:	f7ff ff84 	bl	800aa5c <prvProcessReceivedCommands>
	for( ;; )
 800ab54:	e7f6      	b.n	800ab44 <prvTimerTask+0x4>
	...

0800ab58 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab58:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab5e:	4b0d      	ldr	r3, [pc, #52]	; (800ab94 <prvTaskExitError+0x3c>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab66:	d008      	beq.n	800ab7a <prvTaskExitError+0x22>
 800ab68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6c:	f383 8811 	msr	BASEPRI, r3
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	e7fe      	b.n	800ab78 <prvTaskExitError+0x20>
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab8a:	9b01      	ldr	r3, [sp, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d0fc      	beq.n	800ab8a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab90:	b002      	add	sp, #8
 800ab92:	4770      	bx	lr
 800ab94:	2000000c 	.word	0x2000000c

0800ab98 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800ab98:	4806      	ldr	r0, [pc, #24]	; (800abb4 <prvPortStartFirstTask+0x1c>)
 800ab9a:	6800      	ldr	r0, [r0, #0]
 800ab9c:	6800      	ldr	r0, [r0, #0]
 800ab9e:	f380 8808 	msr	MSP, r0
 800aba2:	b662      	cpsie	i
 800aba4:	b661      	cpsie	f
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	df00      	svc	0
 800abb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abb2:	0000      	.short	0x0000
 800abb4:	e000ed08 	.word	0xe000ed08

0800abb8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800abbc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abc0:	f021 0101 	bic.w	r1, r1, #1
 800abc4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800abc8:	4b03      	ldr	r3, [pc, #12]	; (800abd8 <pxPortInitialiseStack+0x20>)
 800abca:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800abce:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800abd2:	3840      	subs	r0, #64	; 0x40
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	0800ab59 	.word	0x0800ab59
 800abdc:	00000000 	.word	0x00000000

0800abe0 <SVC_Handler>:
	__asm volatile (
 800abe0:	4b07      	ldr	r3, [pc, #28]	; (800ac00 <pxCurrentTCBConst2>)
 800abe2:	6819      	ldr	r1, [r3, #0]
 800abe4:	6808      	ldr	r0, [r1, #0]
 800abe6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800abea:	f380 8809 	msr	PSP, r0
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f04f 0000 	mov.w	r0, #0
 800abf6:	f380 8811 	msr	BASEPRI, r0
 800abfa:	f04e 0e0d 	orr.w	lr, lr, #13
 800abfe:	4770      	bx	lr

0800ac00 <pxCurrentTCBConst2>:
 800ac00:	200019bc 	.word	0x200019bc

0800ac04 <vPortEnterCritical>:
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac14:	4a0b      	ldr	r2, [pc, #44]	; (800ac44 <vPortEnterCritical+0x40>)
 800ac16:	6813      	ldr	r3, [r2, #0]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d000      	beq.n	800ac22 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800ac20:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ac26:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800ac2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ac2e:	d0f7      	beq.n	800ac20 <vPortEnterCritical+0x1c>
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	e7fe      	b.n	800ac40 <vPortEnterCritical+0x3c>
 800ac42:	bf00      	nop
 800ac44:	2000000c 	.word	0x2000000c

0800ac48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800ac48:	4b09      	ldr	r3, [pc, #36]	; (800ac70 <vPortExitCritical+0x28>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	b943      	cbnz	r3, 800ac60 <vPortExitCritical+0x18>
 800ac4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac52:	f383 8811 	msr	BASEPRI, r3
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	e7fe      	b.n	800ac5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800ac60:	3b01      	subs	r3, #1
 800ac62:	4a03      	ldr	r2, [pc, #12]	; (800ac70 <vPortExitCritical+0x28>)
 800ac64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac66:	b90b      	cbnz	r3, 800ac6c <vPortExitCritical+0x24>
	__asm volatile
 800ac68:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	2000000c 	.word	0x2000000c
	...

0800ac80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac80:	f3ef 8009 	mrs	r0, PSP
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	4b0d      	ldr	r3, [pc, #52]	; (800acc0 <pxCurrentTCBConst>)
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ac90:	6010      	str	r0, [r2, #0]
 800ac92:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ac96:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac9a:	f380 8811 	msr	BASEPRI, r0
 800ac9e:	f7ff f98f 	bl	8009fc0 <vTaskSwitchContext>
 800aca2:	f04f 0000 	mov.w	r0, #0
 800aca6:	f380 8811 	msr	BASEPRI, r0
 800acaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800acae:	6819      	ldr	r1, [r3, #0]
 800acb0:	6808      	ldr	r0, [r1, #0]
 800acb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800acb6:	f380 8809 	msr	PSP, r0
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	4770      	bx	lr

0800acc0 <pxCurrentTCBConst>:
 800acc0:	200019bc 	.word	0x200019bc

0800acc4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800acc4:	b508      	push	{r3, lr}
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800acd6:	f7fe fff3 	bl	8009cc0 <xTaskIncrementTick>
 800acda:	b128      	cbz	r0, 800ace8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acdc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ace0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ace4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800ace8:	2300      	movs	r3, #0
 800acea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800acee:	bd08      	pop	{r3, pc}

0800acf0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800acf0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800acf4:	2300      	movs	r3, #0
 800acf6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acf8:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acfa:	4b05      	ldr	r3, [pc, #20]	; (800ad10 <vPortSetupTimerInterrupt+0x20>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4905      	ldr	r1, [pc, #20]	; (800ad14 <vPortSetupTimerInterrupt+0x24>)
 800ad00:	fba1 1303 	umull	r1, r3, r1, r3
 800ad04:	099b      	lsrs	r3, r3, #6
 800ad06:	3b01      	subs	r3, #1
 800ad08:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad0a:	2307      	movs	r3, #7
 800ad0c:	6113      	str	r3, [r2, #16]
}
 800ad0e:	4770      	bx	lr
 800ad10:	20000000 	.word	0x20000000
 800ad14:	10624dd3 	.word	0x10624dd3

0800ad18 <xPortStartScheduler>:
{
 800ad18:	b510      	push	{r4, lr}
 800ad1a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad1c:	4b2a      	ldr	r3, [pc, #168]	; (800adc8 <xPortStartScheduler+0xb0>)
 800ad1e:	781a      	ldrb	r2, [r3, #0]
 800ad20:	b2d2      	uxtb	r2, r2
 800ad22:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad24:	22ff      	movs	r2, #255	; 0xff
 800ad26:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad30:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ad34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad38:	4a24      	ldr	r2, [pc, #144]	; (800adcc <xPortStartScheduler+0xb4>)
 800ad3a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad3c:	4b24      	ldr	r3, [pc, #144]	; (800add0 <xPortStartScheduler+0xb8>)
 800ad3e:	2207      	movs	r2, #7
 800ad40:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad42:	e009      	b.n	800ad58 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 800ad44:	4a22      	ldr	r2, [pc, #136]	; (800add0 <xPortStartScheduler+0xb8>)
 800ad46:	6813      	ldr	r3, [r2, #0]
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ad50:	005b      	lsls	r3, r3, #1
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad58:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ad5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ad60:	d1f0      	bne.n	800ad44 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad62:	4b1b      	ldr	r3, [pc, #108]	; (800add0 <xPortStartScheduler+0xb8>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d008      	beq.n	800ad7c <xPortStartScheduler+0x64>
	__asm volatile
 800ad6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6e:	f383 8811 	msr	BASEPRI, r3
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	e7fe      	b.n	800ad7a <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad7c:	021b      	lsls	r3, r3, #8
 800ad7e:	4a14      	ldr	r2, [pc, #80]	; (800add0 <xPortStartScheduler+0xb8>)
 800ad80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad82:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad86:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad88:	9b01      	ldr	r3, [sp, #4]
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	4a0e      	ldr	r2, [pc, #56]	; (800adc8 <xPortStartScheduler+0xb0>)
 800ad8e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ad94:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800ad98:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800ad9c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ada0:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800ada4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800ada8:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800adac:	f7ff ffa0 	bl	800acf0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800adb0:	2400      	movs	r4, #0
 800adb2:	4b08      	ldr	r3, [pc, #32]	; (800add4 <xPortStartScheduler+0xbc>)
 800adb4:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800adb6:	f7ff feef 	bl	800ab98 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800adba:	f7ff f901 	bl	8009fc0 <vTaskSwitchContext>
	prvTaskExitError();
 800adbe:	f7ff fecb 	bl	800ab58 <prvTaskExitError>
}
 800adc2:	4620      	mov	r0, r4
 800adc4:	b002      	add	sp, #8
 800adc6:	bd10      	pop	{r4, pc}
 800adc8:	e000e400 	.word	0xe000e400
 800adcc:	20001be4 	.word	0x20001be4
 800add0:	20001be8 	.word	0x20001be8
 800add4:	2000000c 	.word	0x2000000c

0800add8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800add8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800addc:	2b0f      	cmp	r3, #15
 800adde:	d90f      	bls.n	800ae00 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ade0:	4a11      	ldr	r2, [pc, #68]	; (800ae28 <vPortValidateInterruptPriority+0x50>)
 800ade2:	5c9b      	ldrb	r3, [r3, r2]
 800ade4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ade6:	4a11      	ldr	r2, [pc, #68]	; (800ae2c <vPortValidateInterruptPriority+0x54>)
 800ade8:	7812      	ldrb	r2, [r2, #0]
 800adea:	429a      	cmp	r2, r3
 800adec:	d908      	bls.n	800ae00 <vPortValidateInterruptPriority+0x28>
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	e7fe      	b.n	800adfe <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae00:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ae04:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800ae08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae0c:	4a08      	ldr	r2, [pc, #32]	; (800ae30 <vPortValidateInterruptPriority+0x58>)
 800ae0e:	6812      	ldr	r2, [r2, #0]
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d908      	bls.n	800ae26 <vPortValidateInterruptPriority+0x4e>
 800ae14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	e7fe      	b.n	800ae24 <vPortValidateInterruptPriority+0x4c>
	}
 800ae26:	4770      	bx	lr
 800ae28:	e000e3f0 	.word	0xe000e3f0
 800ae2c:	20001be4 	.word	0x20001be4
 800ae30:	20001be8 	.word	0x20001be8

0800ae34 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae34:	4a12      	ldr	r2, [pc, #72]	; (800ae80 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae36:	f012 0f07 	tst.w	r2, #7
 800ae3a:	d01e      	beq.n	800ae7a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae3c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae3e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae42:	f5c1 5380 	rsb	r3, r1, #4096	; 0x1000
 800ae46:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae48:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae4a:	480e      	ldr	r0, [pc, #56]	; (800ae84 <prvHeapInit+0x50>)
 800ae4c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae4e:	2100      	movs	r1, #0
 800ae50:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae52:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800ae54:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae56:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800ae5a:	480b      	ldr	r0, [pc, #44]	; (800ae88 <prvHeapInit+0x54>)
 800ae5c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800ae5e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae60:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae62:	1a99      	subs	r1, r3, r2
 800ae64:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae66:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae68:	4b08      	ldr	r3, [pc, #32]	; (800ae8c <prvHeapInit+0x58>)
 800ae6a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae6c:	4b08      	ldr	r3, [pc, #32]	; (800ae90 <prvHeapInit+0x5c>)
 800ae6e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae70:	4b08      	ldr	r3, [pc, #32]	; (800ae94 <prvHeapInit+0x60>)
 800ae72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae76:	601a      	str	r2, [r3, #0]
}
 800ae78:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae7e:	e7e4      	b.n	800ae4a <prvHeapInit+0x16>
 800ae80:	20001bf0 	.word	0x20001bf0
 800ae84:	20002bfc 	.word	0x20002bfc
 800ae88:	20001bec 	.word	0x20001bec
 800ae8c:	20002bf8 	.word	0x20002bf8
 800ae90:	20002bf4 	.word	0x20002bf4
 800ae94:	20002bf0 	.word	0x20002bf0

0800ae98 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae98:	4b15      	ldr	r3, [pc, #84]	; (800aef0 <prvInsertBlockIntoFreeList+0x58>)
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4283      	cmp	r3, r0
 800aea0:	d3fb      	bcc.n	800ae9a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aea2:	6851      	ldr	r1, [r2, #4]
 800aea4:	eb02 0c01 	add.w	ip, r2, r1
 800aea8:	4584      	cmp	ip, r0
 800aeaa:	d009      	beq.n	800aec0 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aeac:	6841      	ldr	r1, [r0, #4]
 800aeae:	eb00 0c01 	add.w	ip, r0, r1
 800aeb2:	4563      	cmp	r3, ip
 800aeb4:	d009      	beq.n	800aeca <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aeb6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aeb8:	4290      	cmp	r0, r2
 800aeba:	d018      	beq.n	800aeee <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aebc:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800aebe:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aec0:	6840      	ldr	r0, [r0, #4]
 800aec2:	4401      	add	r1, r0
 800aec4:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800aec6:	4610      	mov	r0, r2
 800aec8:	e7f0      	b.n	800aeac <prvInsertBlockIntoFreeList+0x14>
{
 800aeca:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aecc:	4c09      	ldr	r4, [pc, #36]	; (800aef4 <prvInsertBlockIntoFreeList+0x5c>)
 800aece:	6824      	ldr	r4, [r4, #0]
 800aed0:	42a3      	cmp	r3, r4
 800aed2:	d00a      	beq.n	800aeea <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	4419      	add	r1, r3
 800aed8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aeda:	6813      	ldr	r3, [r2, #0]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800aee0:	4290      	cmp	r0, r2
 800aee2:	d000      	beq.n	800aee6 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aee4:	6010      	str	r0, [r2, #0]
	}
}
 800aee6:	bc10      	pop	{r4}
 800aee8:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aeea:	6004      	str	r4, [r0, #0]
 800aeec:	e7f8      	b.n	800aee0 <prvInsertBlockIntoFreeList+0x48>
 800aeee:	4770      	bx	lr
 800aef0:	20002bfc 	.word	0x20002bfc
 800aef4:	20001bec 	.word	0x20001bec

0800aef8 <pvPortMalloc>:
{
 800aef8:	b570      	push	{r4, r5, r6, lr}
 800aefa:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800aefc:	f7fe fed2 	bl	8009ca4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800af00:	4b34      	ldr	r3, [pc, #208]	; (800afd4 <pvPortMalloc+0xdc>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	b1a3      	cbz	r3, 800af30 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af06:	4b34      	ldr	r3, [pc, #208]	; (800afd8 <pvPortMalloc+0xe0>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	421d      	tst	r5, r3
 800af0c:	d14a      	bne.n	800afa4 <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 800af0e:	b135      	cbz	r5, 800af1e <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800af10:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af12:	f015 0f07 	tst.w	r5, #7
 800af16:	d002      	beq.n	800af1e <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af18:	f025 0507 	bic.w	r5, r5, #7
 800af1c:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af1e:	2d00      	cmp	r5, #0
 800af20:	d042      	beq.n	800afa8 <pvPortMalloc+0xb0>
 800af22:	4b2e      	ldr	r3, [pc, #184]	; (800afdc <pvPortMalloc+0xe4>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	42ab      	cmp	r3, r5
 800af28:	d34d      	bcc.n	800afc6 <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 800af2a:	4a2d      	ldr	r2, [pc, #180]	; (800afe0 <pvPortMalloc+0xe8>)
 800af2c:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af2e:	e004      	b.n	800af3a <pvPortMalloc+0x42>
			prvHeapInit();
 800af30:	f7ff ff80 	bl	800ae34 <prvHeapInit>
 800af34:	e7e7      	b.n	800af06 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800af36:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800af38:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af3a:	6863      	ldr	r3, [r4, #4]
 800af3c:	42ab      	cmp	r3, r5
 800af3e:	d202      	bcs.n	800af46 <pvPortMalloc+0x4e>
 800af40:	6823      	ldr	r3, [r4, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1f7      	bne.n	800af36 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800af46:	4b23      	ldr	r3, [pc, #140]	; (800afd4 <pvPortMalloc+0xdc>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	42a3      	cmp	r3, r4
 800af4c:	d03d      	beq.n	800afca <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af4e:	6816      	ldr	r6, [r2, #0]
 800af50:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af56:	6863      	ldr	r3, [r4, #4]
 800af58:	1b5b      	subs	r3, r3, r5
 800af5a:	2b10      	cmp	r3, #16
 800af5c:	d910      	bls.n	800af80 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af5e:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af60:	f010 0f07 	tst.w	r0, #7
 800af64:	d008      	beq.n	800af78 <pvPortMalloc+0x80>
 800af66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6a:	f383 8811 	msr	BASEPRI, r3
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	e7fe      	b.n	800af76 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af78:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af7a:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af7c:	f7ff ff8c 	bl	800ae98 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af80:	6862      	ldr	r2, [r4, #4]
 800af82:	4916      	ldr	r1, [pc, #88]	; (800afdc <pvPortMalloc+0xe4>)
 800af84:	680b      	ldr	r3, [r1, #0]
 800af86:	1a9b      	subs	r3, r3, r2
 800af88:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af8a:	4916      	ldr	r1, [pc, #88]	; (800afe4 <pvPortMalloc+0xec>)
 800af8c:	6809      	ldr	r1, [r1, #0]
 800af8e:	428b      	cmp	r3, r1
 800af90:	d201      	bcs.n	800af96 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af92:	4914      	ldr	r1, [pc, #80]	; (800afe4 <pvPortMalloc+0xec>)
 800af94:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af96:	4b10      	ldr	r3, [pc, #64]	; (800afd8 <pvPortMalloc+0xe0>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af9e:	2300      	movs	r3, #0
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	e002      	b.n	800afaa <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 800afa4:	2600      	movs	r6, #0
 800afa6:	e000      	b.n	800afaa <pvPortMalloc+0xb2>
 800afa8:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800afaa:	f7fe ff15 	bl	8009dd8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800afae:	f016 0f07 	tst.w	r6, #7
 800afb2:	d00c      	beq.n	800afce <pvPortMalloc+0xd6>
 800afb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb8:	f383 8811 	msr	BASEPRI, r3
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	f3bf 8f4f 	dsb	sy
 800afc4:	e7fe      	b.n	800afc4 <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 800afc6:	2600      	movs	r6, #0
 800afc8:	e7ef      	b.n	800afaa <pvPortMalloc+0xb2>
 800afca:	2600      	movs	r6, #0
 800afcc:	e7ed      	b.n	800afaa <pvPortMalloc+0xb2>
}
 800afce:	4630      	mov	r0, r6
 800afd0:	bd70      	pop	{r4, r5, r6, pc}
 800afd2:	bf00      	nop
 800afd4:	20001bec 	.word	0x20001bec
 800afd8:	20002bf0 	.word	0x20002bf0
 800afdc:	20002bf4 	.word	0x20002bf4
 800afe0:	20002bfc 	.word	0x20002bfc
 800afe4:	20002bf8 	.word	0x20002bf8

0800afe8 <vPortFree>:
	if( pv != NULL )
 800afe8:	b380      	cbz	r0, 800b04c <vPortFree+0x64>
{
 800afea:	b538      	push	{r3, r4, r5, lr}
 800afec:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800afee:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aff2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800aff6:	4a16      	ldr	r2, [pc, #88]	; (800b050 <vPortFree+0x68>)
 800aff8:	6812      	ldr	r2, [r2, #0]
 800affa:	4213      	tst	r3, r2
 800affc:	d108      	bne.n	800b010 <vPortFree+0x28>
 800affe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	e7fe      	b.n	800b00e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b010:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b014:	b141      	cbz	r1, 800b028 <vPortFree+0x40>
 800b016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	e7fe      	b.n	800b026 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b028:	ea23 0302 	bic.w	r3, r3, r2
 800b02c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b030:	f7fe fe38 	bl	8009ca4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b034:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800b038:	4a06      	ldr	r2, [pc, #24]	; (800b054 <vPortFree+0x6c>)
 800b03a:	6813      	ldr	r3, [r2, #0]
 800b03c:	440b      	add	r3, r1
 800b03e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b040:	4628      	mov	r0, r5
 800b042:	f7ff ff29 	bl	800ae98 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800b046:	f7fe fec7 	bl	8009dd8 <xTaskResumeAll>
}
 800b04a:	bd38      	pop	{r3, r4, r5, pc}
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	20002bf0 	.word	0x20002bf0
 800b054:	20002bf4 	.word	0x20002bf4

0800b058 <malloc>:
 800b058:	4b02      	ldr	r3, [pc, #8]	; (800b064 <malloc+0xc>)
 800b05a:	4601      	mov	r1, r0
 800b05c:	6818      	ldr	r0, [r3, #0]
 800b05e:	f000 b823 	b.w	800b0a8 <_malloc_r>
 800b062:	bf00      	nop
 800b064:	20000068 	.word	0x20000068

0800b068 <sbrk_aligned>:
 800b068:	b570      	push	{r4, r5, r6, lr}
 800b06a:	4e0e      	ldr	r6, [pc, #56]	; (800b0a4 <sbrk_aligned+0x3c>)
 800b06c:	460c      	mov	r4, r1
 800b06e:	6831      	ldr	r1, [r6, #0]
 800b070:	4605      	mov	r5, r0
 800b072:	b911      	cbnz	r1, 800b07a <sbrk_aligned+0x12>
 800b074:	f000 fb88 	bl	800b788 <_sbrk_r>
 800b078:	6030      	str	r0, [r6, #0]
 800b07a:	4621      	mov	r1, r4
 800b07c:	4628      	mov	r0, r5
 800b07e:	f000 fb83 	bl	800b788 <_sbrk_r>
 800b082:	1c43      	adds	r3, r0, #1
 800b084:	d00a      	beq.n	800b09c <sbrk_aligned+0x34>
 800b086:	1cc4      	adds	r4, r0, #3
 800b088:	f024 0403 	bic.w	r4, r4, #3
 800b08c:	42a0      	cmp	r0, r4
 800b08e:	d007      	beq.n	800b0a0 <sbrk_aligned+0x38>
 800b090:	1a21      	subs	r1, r4, r0
 800b092:	4628      	mov	r0, r5
 800b094:	f000 fb78 	bl	800b788 <_sbrk_r>
 800b098:	3001      	adds	r0, #1
 800b09a:	d101      	bne.n	800b0a0 <sbrk_aligned+0x38>
 800b09c:	f04f 34ff 	mov.w	r4, #4294967295
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	bd70      	pop	{r4, r5, r6, pc}
 800b0a4:	20002c08 	.word	0x20002c08

0800b0a8 <_malloc_r>:
 800b0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0ac:	1ccd      	adds	r5, r1, #3
 800b0ae:	f025 0503 	bic.w	r5, r5, #3
 800b0b2:	3508      	adds	r5, #8
 800b0b4:	2d0c      	cmp	r5, #12
 800b0b6:	bf38      	it	cc
 800b0b8:	250c      	movcc	r5, #12
 800b0ba:	2d00      	cmp	r5, #0
 800b0bc:	4607      	mov	r7, r0
 800b0be:	db01      	blt.n	800b0c4 <_malloc_r+0x1c>
 800b0c0:	42a9      	cmp	r1, r5
 800b0c2:	d905      	bls.n	800b0d0 <_malloc_r+0x28>
 800b0c4:	230c      	movs	r3, #12
 800b0c6:	2600      	movs	r6, #0
 800b0c8:	603b      	str	r3, [r7, #0]
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b1a4 <_malloc_r+0xfc>
 800b0d4:	f000 f868 	bl	800b1a8 <__malloc_lock>
 800b0d8:	f8d8 3000 	ldr.w	r3, [r8]
 800b0dc:	461c      	mov	r4, r3
 800b0de:	bb5c      	cbnz	r4, 800b138 <_malloc_r+0x90>
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	4638      	mov	r0, r7
 800b0e4:	f7ff ffc0 	bl	800b068 <sbrk_aligned>
 800b0e8:	1c43      	adds	r3, r0, #1
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	d155      	bne.n	800b19a <_malloc_r+0xf2>
 800b0ee:	f8d8 4000 	ldr.w	r4, [r8]
 800b0f2:	4626      	mov	r6, r4
 800b0f4:	2e00      	cmp	r6, #0
 800b0f6:	d145      	bne.n	800b184 <_malloc_r+0xdc>
 800b0f8:	2c00      	cmp	r4, #0
 800b0fa:	d048      	beq.n	800b18e <_malloc_r+0xe6>
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	4631      	mov	r1, r6
 800b100:	4638      	mov	r0, r7
 800b102:	eb04 0903 	add.w	r9, r4, r3
 800b106:	f000 fb3f 	bl	800b788 <_sbrk_r>
 800b10a:	4581      	cmp	r9, r0
 800b10c:	d13f      	bne.n	800b18e <_malloc_r+0xe6>
 800b10e:	6821      	ldr	r1, [r4, #0]
 800b110:	4638      	mov	r0, r7
 800b112:	1a6d      	subs	r5, r5, r1
 800b114:	4629      	mov	r1, r5
 800b116:	f7ff ffa7 	bl	800b068 <sbrk_aligned>
 800b11a:	3001      	adds	r0, #1
 800b11c:	d037      	beq.n	800b18e <_malloc_r+0xe6>
 800b11e:	6823      	ldr	r3, [r4, #0]
 800b120:	442b      	add	r3, r5
 800b122:	6023      	str	r3, [r4, #0]
 800b124:	f8d8 3000 	ldr.w	r3, [r8]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d038      	beq.n	800b19e <_malloc_r+0xf6>
 800b12c:	685a      	ldr	r2, [r3, #4]
 800b12e:	42a2      	cmp	r2, r4
 800b130:	d12b      	bne.n	800b18a <_malloc_r+0xe2>
 800b132:	2200      	movs	r2, #0
 800b134:	605a      	str	r2, [r3, #4]
 800b136:	e00f      	b.n	800b158 <_malloc_r+0xb0>
 800b138:	6822      	ldr	r2, [r4, #0]
 800b13a:	1b52      	subs	r2, r2, r5
 800b13c:	d41f      	bmi.n	800b17e <_malloc_r+0xd6>
 800b13e:	2a0b      	cmp	r2, #11
 800b140:	d917      	bls.n	800b172 <_malloc_r+0xca>
 800b142:	1961      	adds	r1, r4, r5
 800b144:	42a3      	cmp	r3, r4
 800b146:	6025      	str	r5, [r4, #0]
 800b148:	bf18      	it	ne
 800b14a:	6059      	strne	r1, [r3, #4]
 800b14c:	6863      	ldr	r3, [r4, #4]
 800b14e:	bf08      	it	eq
 800b150:	f8c8 1000 	streq.w	r1, [r8]
 800b154:	5162      	str	r2, [r4, r5]
 800b156:	604b      	str	r3, [r1, #4]
 800b158:	4638      	mov	r0, r7
 800b15a:	f104 060b 	add.w	r6, r4, #11
 800b15e:	f000 f829 	bl	800b1b4 <__malloc_unlock>
 800b162:	f026 0607 	bic.w	r6, r6, #7
 800b166:	1d23      	adds	r3, r4, #4
 800b168:	1af2      	subs	r2, r6, r3
 800b16a:	d0ae      	beq.n	800b0ca <_malloc_r+0x22>
 800b16c:	1b9b      	subs	r3, r3, r6
 800b16e:	50a3      	str	r3, [r4, r2]
 800b170:	e7ab      	b.n	800b0ca <_malloc_r+0x22>
 800b172:	42a3      	cmp	r3, r4
 800b174:	6862      	ldr	r2, [r4, #4]
 800b176:	d1dd      	bne.n	800b134 <_malloc_r+0x8c>
 800b178:	f8c8 2000 	str.w	r2, [r8]
 800b17c:	e7ec      	b.n	800b158 <_malloc_r+0xb0>
 800b17e:	4623      	mov	r3, r4
 800b180:	6864      	ldr	r4, [r4, #4]
 800b182:	e7ac      	b.n	800b0de <_malloc_r+0x36>
 800b184:	4634      	mov	r4, r6
 800b186:	6876      	ldr	r6, [r6, #4]
 800b188:	e7b4      	b.n	800b0f4 <_malloc_r+0x4c>
 800b18a:	4613      	mov	r3, r2
 800b18c:	e7cc      	b.n	800b128 <_malloc_r+0x80>
 800b18e:	230c      	movs	r3, #12
 800b190:	4638      	mov	r0, r7
 800b192:	603b      	str	r3, [r7, #0]
 800b194:	f000 f80e 	bl	800b1b4 <__malloc_unlock>
 800b198:	e797      	b.n	800b0ca <_malloc_r+0x22>
 800b19a:	6025      	str	r5, [r4, #0]
 800b19c:	e7dc      	b.n	800b158 <_malloc_r+0xb0>
 800b19e:	605b      	str	r3, [r3, #4]
 800b1a0:	deff      	udf	#255	; 0xff
 800b1a2:	bf00      	nop
 800b1a4:	20002c04 	.word	0x20002c04

0800b1a8 <__malloc_lock>:
 800b1a8:	4801      	ldr	r0, [pc, #4]	; (800b1b0 <__malloc_lock+0x8>)
 800b1aa:	f000 bb3a 	b.w	800b822 <__retarget_lock_acquire_recursive>
 800b1ae:	bf00      	nop
 800b1b0:	20002d4c 	.word	0x20002d4c

0800b1b4 <__malloc_unlock>:
 800b1b4:	4801      	ldr	r0, [pc, #4]	; (800b1bc <__malloc_unlock+0x8>)
 800b1b6:	f000 bb35 	b.w	800b824 <__retarget_lock_release_recursive>
 800b1ba:	bf00      	nop
 800b1bc:	20002d4c 	.word	0x20002d4c

0800b1c0 <std>:
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	b510      	push	{r4, lr}
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	e9c0 3300 	strd	r3, r3, [r0]
 800b1ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1ce:	6083      	str	r3, [r0, #8]
 800b1d0:	8181      	strh	r1, [r0, #12]
 800b1d2:	6643      	str	r3, [r0, #100]	; 0x64
 800b1d4:	81c2      	strh	r2, [r0, #14]
 800b1d6:	6183      	str	r3, [r0, #24]
 800b1d8:	4619      	mov	r1, r3
 800b1da:	2208      	movs	r2, #8
 800b1dc:	305c      	adds	r0, #92	; 0x5c
 800b1de:	f000 fa2b 	bl	800b638 <memset>
 800b1e2:	4b0d      	ldr	r3, [pc, #52]	; (800b218 <std+0x58>)
 800b1e4:	6224      	str	r4, [r4, #32]
 800b1e6:	6263      	str	r3, [r4, #36]	; 0x24
 800b1e8:	4b0c      	ldr	r3, [pc, #48]	; (800b21c <std+0x5c>)
 800b1ea:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1ec:	4b0c      	ldr	r3, [pc, #48]	; (800b220 <std+0x60>)
 800b1ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1f0:	4b0c      	ldr	r3, [pc, #48]	; (800b224 <std+0x64>)
 800b1f2:	6323      	str	r3, [r4, #48]	; 0x30
 800b1f4:	4b0c      	ldr	r3, [pc, #48]	; (800b228 <std+0x68>)
 800b1f6:	429c      	cmp	r4, r3
 800b1f8:	d006      	beq.n	800b208 <std+0x48>
 800b1fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b1fe:	4294      	cmp	r4, r2
 800b200:	d002      	beq.n	800b208 <std+0x48>
 800b202:	33d0      	adds	r3, #208	; 0xd0
 800b204:	429c      	cmp	r4, r3
 800b206:	d105      	bne.n	800b214 <std+0x54>
 800b208:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b210:	f000 bb06 	b.w	800b820 <__retarget_lock_init_recursive>
 800b214:	bd10      	pop	{r4, pc}
 800b216:	bf00      	nop
 800b218:	0800b489 	.word	0x0800b489
 800b21c:	0800b4ab 	.word	0x0800b4ab
 800b220:	0800b4e3 	.word	0x0800b4e3
 800b224:	0800b507 	.word	0x0800b507
 800b228:	20002c0c 	.word	0x20002c0c

0800b22c <stdio_exit_handler>:
 800b22c:	4a02      	ldr	r2, [pc, #8]	; (800b238 <stdio_exit_handler+0xc>)
 800b22e:	4903      	ldr	r1, [pc, #12]	; (800b23c <stdio_exit_handler+0x10>)
 800b230:	4803      	ldr	r0, [pc, #12]	; (800b240 <stdio_exit_handler+0x14>)
 800b232:	f000 b869 	b.w	800b308 <_fwalk_sglue>
 800b236:	bf00      	nop
 800b238:	20000010 	.word	0x20000010
 800b23c:	0800c245 	.word	0x0800c245
 800b240:	2000001c 	.word	0x2000001c

0800b244 <cleanup_stdio>:
 800b244:	6841      	ldr	r1, [r0, #4]
 800b246:	4b0c      	ldr	r3, [pc, #48]	; (800b278 <cleanup_stdio+0x34>)
 800b248:	b510      	push	{r4, lr}
 800b24a:	4299      	cmp	r1, r3
 800b24c:	4604      	mov	r4, r0
 800b24e:	d001      	beq.n	800b254 <cleanup_stdio+0x10>
 800b250:	f000 fff8 	bl	800c244 <_fflush_r>
 800b254:	68a1      	ldr	r1, [r4, #8]
 800b256:	4b09      	ldr	r3, [pc, #36]	; (800b27c <cleanup_stdio+0x38>)
 800b258:	4299      	cmp	r1, r3
 800b25a:	d002      	beq.n	800b262 <cleanup_stdio+0x1e>
 800b25c:	4620      	mov	r0, r4
 800b25e:	f000 fff1 	bl	800c244 <_fflush_r>
 800b262:	68e1      	ldr	r1, [r4, #12]
 800b264:	4b06      	ldr	r3, [pc, #24]	; (800b280 <cleanup_stdio+0x3c>)
 800b266:	4299      	cmp	r1, r3
 800b268:	d004      	beq.n	800b274 <cleanup_stdio+0x30>
 800b26a:	4620      	mov	r0, r4
 800b26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b270:	f000 bfe8 	b.w	800c244 <_fflush_r>
 800b274:	bd10      	pop	{r4, pc}
 800b276:	bf00      	nop
 800b278:	20002c0c 	.word	0x20002c0c
 800b27c:	20002c74 	.word	0x20002c74
 800b280:	20002cdc 	.word	0x20002cdc

0800b284 <global_stdio_init.part.0>:
 800b284:	b510      	push	{r4, lr}
 800b286:	4b0b      	ldr	r3, [pc, #44]	; (800b2b4 <global_stdio_init.part.0+0x30>)
 800b288:	4c0b      	ldr	r4, [pc, #44]	; (800b2b8 <global_stdio_init.part.0+0x34>)
 800b28a:	4a0c      	ldr	r2, [pc, #48]	; (800b2bc <global_stdio_init.part.0+0x38>)
 800b28c:	4620      	mov	r0, r4
 800b28e:	601a      	str	r2, [r3, #0]
 800b290:	2104      	movs	r1, #4
 800b292:	2200      	movs	r2, #0
 800b294:	f7ff ff94 	bl	800b1c0 <std>
 800b298:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b29c:	2201      	movs	r2, #1
 800b29e:	2109      	movs	r1, #9
 800b2a0:	f7ff ff8e 	bl	800b1c0 <std>
 800b2a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b2a8:	2202      	movs	r2, #2
 800b2aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2ae:	2112      	movs	r1, #18
 800b2b0:	f7ff bf86 	b.w	800b1c0 <std>
 800b2b4:	20002d44 	.word	0x20002d44
 800b2b8:	20002c0c 	.word	0x20002c0c
 800b2bc:	0800b22d 	.word	0x0800b22d

0800b2c0 <__sfp_lock_acquire>:
 800b2c0:	4801      	ldr	r0, [pc, #4]	; (800b2c8 <__sfp_lock_acquire+0x8>)
 800b2c2:	f000 baae 	b.w	800b822 <__retarget_lock_acquire_recursive>
 800b2c6:	bf00      	nop
 800b2c8:	20002d4d 	.word	0x20002d4d

0800b2cc <__sfp_lock_release>:
 800b2cc:	4801      	ldr	r0, [pc, #4]	; (800b2d4 <__sfp_lock_release+0x8>)
 800b2ce:	f000 baa9 	b.w	800b824 <__retarget_lock_release_recursive>
 800b2d2:	bf00      	nop
 800b2d4:	20002d4d 	.word	0x20002d4d

0800b2d8 <__sinit>:
 800b2d8:	b510      	push	{r4, lr}
 800b2da:	4604      	mov	r4, r0
 800b2dc:	f7ff fff0 	bl	800b2c0 <__sfp_lock_acquire>
 800b2e0:	6a23      	ldr	r3, [r4, #32]
 800b2e2:	b11b      	cbz	r3, 800b2ec <__sinit+0x14>
 800b2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2e8:	f7ff bff0 	b.w	800b2cc <__sfp_lock_release>
 800b2ec:	4b04      	ldr	r3, [pc, #16]	; (800b300 <__sinit+0x28>)
 800b2ee:	6223      	str	r3, [r4, #32]
 800b2f0:	4b04      	ldr	r3, [pc, #16]	; (800b304 <__sinit+0x2c>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1f5      	bne.n	800b2e4 <__sinit+0xc>
 800b2f8:	f7ff ffc4 	bl	800b284 <global_stdio_init.part.0>
 800b2fc:	e7f2      	b.n	800b2e4 <__sinit+0xc>
 800b2fe:	bf00      	nop
 800b300:	0800b245 	.word	0x0800b245
 800b304:	20002d44 	.word	0x20002d44

0800b308 <_fwalk_sglue>:
 800b308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b30c:	4607      	mov	r7, r0
 800b30e:	4688      	mov	r8, r1
 800b310:	4614      	mov	r4, r2
 800b312:	2600      	movs	r6, #0
 800b314:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b318:	f1b9 0901 	subs.w	r9, r9, #1
 800b31c:	d505      	bpl.n	800b32a <_fwalk_sglue+0x22>
 800b31e:	6824      	ldr	r4, [r4, #0]
 800b320:	2c00      	cmp	r4, #0
 800b322:	d1f7      	bne.n	800b314 <_fwalk_sglue+0xc>
 800b324:	4630      	mov	r0, r6
 800b326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b32a:	89ab      	ldrh	r3, [r5, #12]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d907      	bls.n	800b340 <_fwalk_sglue+0x38>
 800b330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b334:	3301      	adds	r3, #1
 800b336:	d003      	beq.n	800b340 <_fwalk_sglue+0x38>
 800b338:	4629      	mov	r1, r5
 800b33a:	4638      	mov	r0, r7
 800b33c:	47c0      	blx	r8
 800b33e:	4306      	orrs	r6, r0
 800b340:	3568      	adds	r5, #104	; 0x68
 800b342:	e7e9      	b.n	800b318 <_fwalk_sglue+0x10>

0800b344 <iprintf>:
 800b344:	b40f      	push	{r0, r1, r2, r3}
 800b346:	b507      	push	{r0, r1, r2, lr}
 800b348:	4906      	ldr	r1, [pc, #24]	; (800b364 <iprintf+0x20>)
 800b34a:	ab04      	add	r3, sp, #16
 800b34c:	6808      	ldr	r0, [r1, #0]
 800b34e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b352:	6881      	ldr	r1, [r0, #8]
 800b354:	9301      	str	r3, [sp, #4]
 800b356:	f000 fc45 	bl	800bbe4 <_vfiprintf_r>
 800b35a:	b003      	add	sp, #12
 800b35c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b360:	b004      	add	sp, #16
 800b362:	4770      	bx	lr
 800b364:	20000068 	.word	0x20000068

0800b368 <_puts_r>:
 800b368:	6a03      	ldr	r3, [r0, #32]
 800b36a:	b570      	push	{r4, r5, r6, lr}
 800b36c:	4605      	mov	r5, r0
 800b36e:	460e      	mov	r6, r1
 800b370:	6884      	ldr	r4, [r0, #8]
 800b372:	b90b      	cbnz	r3, 800b378 <_puts_r+0x10>
 800b374:	f7ff ffb0 	bl	800b2d8 <__sinit>
 800b378:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b37a:	07db      	lsls	r3, r3, #31
 800b37c:	d405      	bmi.n	800b38a <_puts_r+0x22>
 800b37e:	89a3      	ldrh	r3, [r4, #12]
 800b380:	0598      	lsls	r0, r3, #22
 800b382:	d402      	bmi.n	800b38a <_puts_r+0x22>
 800b384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b386:	f000 fa4c 	bl	800b822 <__retarget_lock_acquire_recursive>
 800b38a:	89a3      	ldrh	r3, [r4, #12]
 800b38c:	0719      	lsls	r1, r3, #28
 800b38e:	d513      	bpl.n	800b3b8 <_puts_r+0x50>
 800b390:	6923      	ldr	r3, [r4, #16]
 800b392:	b18b      	cbz	r3, 800b3b8 <_puts_r+0x50>
 800b394:	3e01      	subs	r6, #1
 800b396:	68a3      	ldr	r3, [r4, #8]
 800b398:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b39c:	3b01      	subs	r3, #1
 800b39e:	60a3      	str	r3, [r4, #8]
 800b3a0:	b9e9      	cbnz	r1, 800b3de <_puts_r+0x76>
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	da2e      	bge.n	800b404 <_puts_r+0x9c>
 800b3a6:	4622      	mov	r2, r4
 800b3a8:	210a      	movs	r1, #10
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	f000 f8af 	bl	800b50e <__swbuf_r>
 800b3b0:	3001      	adds	r0, #1
 800b3b2:	d007      	beq.n	800b3c4 <_puts_r+0x5c>
 800b3b4:	250a      	movs	r5, #10
 800b3b6:	e007      	b.n	800b3c8 <_puts_r+0x60>
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	f000 f8e4 	bl	800b588 <__swsetup_r>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d0e7      	beq.n	800b394 <_puts_r+0x2c>
 800b3c4:	f04f 35ff 	mov.w	r5, #4294967295
 800b3c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3ca:	07da      	lsls	r2, r3, #31
 800b3cc:	d405      	bmi.n	800b3da <_puts_r+0x72>
 800b3ce:	89a3      	ldrh	r3, [r4, #12]
 800b3d0:	059b      	lsls	r3, r3, #22
 800b3d2:	d402      	bmi.n	800b3da <_puts_r+0x72>
 800b3d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3d6:	f000 fa25 	bl	800b824 <__retarget_lock_release_recursive>
 800b3da:	4628      	mov	r0, r5
 800b3dc:	bd70      	pop	{r4, r5, r6, pc}
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	da04      	bge.n	800b3ec <_puts_r+0x84>
 800b3e2:	69a2      	ldr	r2, [r4, #24]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	dc06      	bgt.n	800b3f6 <_puts_r+0x8e>
 800b3e8:	290a      	cmp	r1, #10
 800b3ea:	d004      	beq.n	800b3f6 <_puts_r+0x8e>
 800b3ec:	6823      	ldr	r3, [r4, #0]
 800b3ee:	1c5a      	adds	r2, r3, #1
 800b3f0:	6022      	str	r2, [r4, #0]
 800b3f2:	7019      	strb	r1, [r3, #0]
 800b3f4:	e7cf      	b.n	800b396 <_puts_r+0x2e>
 800b3f6:	4622      	mov	r2, r4
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	f000 f888 	bl	800b50e <__swbuf_r>
 800b3fe:	3001      	adds	r0, #1
 800b400:	d1c9      	bne.n	800b396 <_puts_r+0x2e>
 800b402:	e7df      	b.n	800b3c4 <_puts_r+0x5c>
 800b404:	250a      	movs	r5, #10
 800b406:	6823      	ldr	r3, [r4, #0]
 800b408:	1c5a      	adds	r2, r3, #1
 800b40a:	6022      	str	r2, [r4, #0]
 800b40c:	701d      	strb	r5, [r3, #0]
 800b40e:	e7db      	b.n	800b3c8 <_puts_r+0x60>

0800b410 <puts>:
 800b410:	4b02      	ldr	r3, [pc, #8]	; (800b41c <puts+0xc>)
 800b412:	4601      	mov	r1, r0
 800b414:	6818      	ldr	r0, [r3, #0]
 800b416:	f7ff bfa7 	b.w	800b368 <_puts_r>
 800b41a:	bf00      	nop
 800b41c:	20000068 	.word	0x20000068

0800b420 <sniprintf>:
 800b420:	b40c      	push	{r2, r3}
 800b422:	b530      	push	{r4, r5, lr}
 800b424:	4b17      	ldr	r3, [pc, #92]	; (800b484 <sniprintf+0x64>)
 800b426:	1e0c      	subs	r4, r1, #0
 800b428:	681d      	ldr	r5, [r3, #0]
 800b42a:	b09d      	sub	sp, #116	; 0x74
 800b42c:	da08      	bge.n	800b440 <sniprintf+0x20>
 800b42e:	238b      	movs	r3, #139	; 0x8b
 800b430:	f04f 30ff 	mov.w	r0, #4294967295
 800b434:	602b      	str	r3, [r5, #0]
 800b436:	b01d      	add	sp, #116	; 0x74
 800b438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b43c:	b002      	add	sp, #8
 800b43e:	4770      	bx	lr
 800b440:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b444:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b448:	bf0c      	ite	eq
 800b44a:	4623      	moveq	r3, r4
 800b44c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b450:	9304      	str	r3, [sp, #16]
 800b452:	9307      	str	r3, [sp, #28]
 800b454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b458:	9002      	str	r0, [sp, #8]
 800b45a:	9006      	str	r0, [sp, #24]
 800b45c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b460:	4628      	mov	r0, r5
 800b462:	ab21      	add	r3, sp, #132	; 0x84
 800b464:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b466:	a902      	add	r1, sp, #8
 800b468:	9301      	str	r3, [sp, #4]
 800b46a:	f000 fa95 	bl	800b998 <_svfiprintf_r>
 800b46e:	1c43      	adds	r3, r0, #1
 800b470:	bfbc      	itt	lt
 800b472:	238b      	movlt	r3, #139	; 0x8b
 800b474:	602b      	strlt	r3, [r5, #0]
 800b476:	2c00      	cmp	r4, #0
 800b478:	d0dd      	beq.n	800b436 <sniprintf+0x16>
 800b47a:	2200      	movs	r2, #0
 800b47c:	9b02      	ldr	r3, [sp, #8]
 800b47e:	701a      	strb	r2, [r3, #0]
 800b480:	e7d9      	b.n	800b436 <sniprintf+0x16>
 800b482:	bf00      	nop
 800b484:	20000068 	.word	0x20000068

0800b488 <__sread>:
 800b488:	b510      	push	{r4, lr}
 800b48a:	460c      	mov	r4, r1
 800b48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b490:	f000 f968 	bl	800b764 <_read_r>
 800b494:	2800      	cmp	r0, #0
 800b496:	bfab      	itete	ge
 800b498:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b49a:	89a3      	ldrhlt	r3, [r4, #12]
 800b49c:	181b      	addge	r3, r3, r0
 800b49e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4a2:	bfac      	ite	ge
 800b4a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4a6:	81a3      	strhlt	r3, [r4, #12]
 800b4a8:	bd10      	pop	{r4, pc}

0800b4aa <__swrite>:
 800b4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ae:	461f      	mov	r7, r3
 800b4b0:	898b      	ldrh	r3, [r1, #12]
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	05db      	lsls	r3, r3, #23
 800b4b6:	460c      	mov	r4, r1
 800b4b8:	4616      	mov	r6, r2
 800b4ba:	d505      	bpl.n	800b4c8 <__swrite+0x1e>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4c4:	f000 f93c 	bl	800b740 <_lseek_r>
 800b4c8:	89a3      	ldrh	r3, [r4, #12]
 800b4ca:	4632      	mov	r2, r6
 800b4cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4d0:	81a3      	strh	r3, [r4, #12]
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	463b      	mov	r3, r7
 800b4d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4de:	f000 b963 	b.w	800b7a8 <_write_r>

0800b4e2 <__sseek>:
 800b4e2:	b510      	push	{r4, lr}
 800b4e4:	460c      	mov	r4, r1
 800b4e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ea:	f000 f929 	bl	800b740 <_lseek_r>
 800b4ee:	1c43      	adds	r3, r0, #1
 800b4f0:	89a3      	ldrh	r3, [r4, #12]
 800b4f2:	bf15      	itete	ne
 800b4f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4fe:	81a3      	strheq	r3, [r4, #12]
 800b500:	bf18      	it	ne
 800b502:	81a3      	strhne	r3, [r4, #12]
 800b504:	bd10      	pop	{r4, pc}

0800b506 <__sclose>:
 800b506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b50a:	f000 b8b3 	b.w	800b674 <_close_r>

0800b50e <__swbuf_r>:
 800b50e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b510:	460e      	mov	r6, r1
 800b512:	4614      	mov	r4, r2
 800b514:	4605      	mov	r5, r0
 800b516:	b118      	cbz	r0, 800b520 <__swbuf_r+0x12>
 800b518:	6a03      	ldr	r3, [r0, #32]
 800b51a:	b90b      	cbnz	r3, 800b520 <__swbuf_r+0x12>
 800b51c:	f7ff fedc 	bl	800b2d8 <__sinit>
 800b520:	69a3      	ldr	r3, [r4, #24]
 800b522:	60a3      	str	r3, [r4, #8]
 800b524:	89a3      	ldrh	r3, [r4, #12]
 800b526:	071a      	lsls	r2, r3, #28
 800b528:	d525      	bpl.n	800b576 <__swbuf_r+0x68>
 800b52a:	6923      	ldr	r3, [r4, #16]
 800b52c:	b31b      	cbz	r3, 800b576 <__swbuf_r+0x68>
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	6922      	ldr	r2, [r4, #16]
 800b532:	b2f6      	uxtb	r6, r6
 800b534:	1a98      	subs	r0, r3, r2
 800b536:	6963      	ldr	r3, [r4, #20]
 800b538:	4637      	mov	r7, r6
 800b53a:	4283      	cmp	r3, r0
 800b53c:	dc04      	bgt.n	800b548 <__swbuf_r+0x3a>
 800b53e:	4621      	mov	r1, r4
 800b540:	4628      	mov	r0, r5
 800b542:	f000 fe7f 	bl	800c244 <_fflush_r>
 800b546:	b9e0      	cbnz	r0, 800b582 <__swbuf_r+0x74>
 800b548:	68a3      	ldr	r3, [r4, #8]
 800b54a:	3b01      	subs	r3, #1
 800b54c:	60a3      	str	r3, [r4, #8]
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	1c5a      	adds	r2, r3, #1
 800b552:	6022      	str	r2, [r4, #0]
 800b554:	701e      	strb	r6, [r3, #0]
 800b556:	6962      	ldr	r2, [r4, #20]
 800b558:	1c43      	adds	r3, r0, #1
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d004      	beq.n	800b568 <__swbuf_r+0x5a>
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	07db      	lsls	r3, r3, #31
 800b562:	d506      	bpl.n	800b572 <__swbuf_r+0x64>
 800b564:	2e0a      	cmp	r6, #10
 800b566:	d104      	bne.n	800b572 <__swbuf_r+0x64>
 800b568:	4621      	mov	r1, r4
 800b56a:	4628      	mov	r0, r5
 800b56c:	f000 fe6a 	bl	800c244 <_fflush_r>
 800b570:	b938      	cbnz	r0, 800b582 <__swbuf_r+0x74>
 800b572:	4638      	mov	r0, r7
 800b574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b576:	4621      	mov	r1, r4
 800b578:	4628      	mov	r0, r5
 800b57a:	f000 f805 	bl	800b588 <__swsetup_r>
 800b57e:	2800      	cmp	r0, #0
 800b580:	d0d5      	beq.n	800b52e <__swbuf_r+0x20>
 800b582:	f04f 37ff 	mov.w	r7, #4294967295
 800b586:	e7f4      	b.n	800b572 <__swbuf_r+0x64>

0800b588 <__swsetup_r>:
 800b588:	b538      	push	{r3, r4, r5, lr}
 800b58a:	4b2a      	ldr	r3, [pc, #168]	; (800b634 <__swsetup_r+0xac>)
 800b58c:	4605      	mov	r5, r0
 800b58e:	6818      	ldr	r0, [r3, #0]
 800b590:	460c      	mov	r4, r1
 800b592:	b118      	cbz	r0, 800b59c <__swsetup_r+0x14>
 800b594:	6a03      	ldr	r3, [r0, #32]
 800b596:	b90b      	cbnz	r3, 800b59c <__swsetup_r+0x14>
 800b598:	f7ff fe9e 	bl	800b2d8 <__sinit>
 800b59c:	89a3      	ldrh	r3, [r4, #12]
 800b59e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5a2:	0718      	lsls	r0, r3, #28
 800b5a4:	d422      	bmi.n	800b5ec <__swsetup_r+0x64>
 800b5a6:	06d9      	lsls	r1, r3, #27
 800b5a8:	d407      	bmi.n	800b5ba <__swsetup_r+0x32>
 800b5aa:	2309      	movs	r3, #9
 800b5ac:	602b      	str	r3, [r5, #0]
 800b5ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b6:	81a3      	strh	r3, [r4, #12]
 800b5b8:	e034      	b.n	800b624 <__swsetup_r+0x9c>
 800b5ba:	0758      	lsls	r0, r3, #29
 800b5bc:	d512      	bpl.n	800b5e4 <__swsetup_r+0x5c>
 800b5be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5c0:	b141      	cbz	r1, 800b5d4 <__swsetup_r+0x4c>
 800b5c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5c6:	4299      	cmp	r1, r3
 800b5c8:	d002      	beq.n	800b5d0 <__swsetup_r+0x48>
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	f000 f942 	bl	800b854 <_free_r>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	6363      	str	r3, [r4, #52]	; 0x34
 800b5d4:	89a3      	ldrh	r3, [r4, #12]
 800b5d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5da:	81a3      	strh	r3, [r4, #12]
 800b5dc:	2300      	movs	r3, #0
 800b5de:	6063      	str	r3, [r4, #4]
 800b5e0:	6923      	ldr	r3, [r4, #16]
 800b5e2:	6023      	str	r3, [r4, #0]
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	f043 0308 	orr.w	r3, r3, #8
 800b5ea:	81a3      	strh	r3, [r4, #12]
 800b5ec:	6923      	ldr	r3, [r4, #16]
 800b5ee:	b94b      	cbnz	r3, 800b604 <__swsetup_r+0x7c>
 800b5f0:	89a3      	ldrh	r3, [r4, #12]
 800b5f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5fa:	d003      	beq.n	800b604 <__swsetup_r+0x7c>
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	4628      	mov	r0, r5
 800b600:	f000 fe6d 	bl	800c2de <__smakebuf_r>
 800b604:	89a0      	ldrh	r0, [r4, #12]
 800b606:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b60a:	f010 0301 	ands.w	r3, r0, #1
 800b60e:	d00a      	beq.n	800b626 <__swsetup_r+0x9e>
 800b610:	2300      	movs	r3, #0
 800b612:	60a3      	str	r3, [r4, #8]
 800b614:	6963      	ldr	r3, [r4, #20]
 800b616:	425b      	negs	r3, r3
 800b618:	61a3      	str	r3, [r4, #24]
 800b61a:	6923      	ldr	r3, [r4, #16]
 800b61c:	b943      	cbnz	r3, 800b630 <__swsetup_r+0xa8>
 800b61e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b622:	d1c4      	bne.n	800b5ae <__swsetup_r+0x26>
 800b624:	bd38      	pop	{r3, r4, r5, pc}
 800b626:	0781      	lsls	r1, r0, #30
 800b628:	bf58      	it	pl
 800b62a:	6963      	ldrpl	r3, [r4, #20]
 800b62c:	60a3      	str	r3, [r4, #8]
 800b62e:	e7f4      	b.n	800b61a <__swsetup_r+0x92>
 800b630:	2000      	movs	r0, #0
 800b632:	e7f7      	b.n	800b624 <__swsetup_r+0x9c>
 800b634:	20000068 	.word	0x20000068

0800b638 <memset>:
 800b638:	4603      	mov	r3, r0
 800b63a:	4402      	add	r2, r0
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d100      	bne.n	800b642 <memset+0xa>
 800b640:	4770      	bx	lr
 800b642:	f803 1b01 	strb.w	r1, [r3], #1
 800b646:	e7f9      	b.n	800b63c <memset+0x4>

0800b648 <strstr>:
 800b648:	780a      	ldrb	r2, [r1, #0]
 800b64a:	b570      	push	{r4, r5, r6, lr}
 800b64c:	b96a      	cbnz	r2, 800b66a <strstr+0x22>
 800b64e:	bd70      	pop	{r4, r5, r6, pc}
 800b650:	429a      	cmp	r2, r3
 800b652:	d109      	bne.n	800b668 <strstr+0x20>
 800b654:	460c      	mov	r4, r1
 800b656:	4605      	mov	r5, r0
 800b658:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d0f6      	beq.n	800b64e <strstr+0x6>
 800b660:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b664:	429e      	cmp	r6, r3
 800b666:	d0f7      	beq.n	800b658 <strstr+0x10>
 800b668:	3001      	adds	r0, #1
 800b66a:	7803      	ldrb	r3, [r0, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1ef      	bne.n	800b650 <strstr+0x8>
 800b670:	4618      	mov	r0, r3
 800b672:	e7ec      	b.n	800b64e <strstr+0x6>

0800b674 <_close_r>:
 800b674:	b538      	push	{r3, r4, r5, lr}
 800b676:	2300      	movs	r3, #0
 800b678:	4d05      	ldr	r5, [pc, #20]	; (800b690 <_close_r+0x1c>)
 800b67a:	4604      	mov	r4, r0
 800b67c:	4608      	mov	r0, r1
 800b67e:	602b      	str	r3, [r5, #0]
 800b680:	f7f8 f8de 	bl	8003840 <_close>
 800b684:	1c43      	adds	r3, r0, #1
 800b686:	d102      	bne.n	800b68e <_close_r+0x1a>
 800b688:	682b      	ldr	r3, [r5, #0]
 800b68a:	b103      	cbz	r3, 800b68e <_close_r+0x1a>
 800b68c:	6023      	str	r3, [r4, #0]
 800b68e:	bd38      	pop	{r3, r4, r5, pc}
 800b690:	20002d48 	.word	0x20002d48

0800b694 <_reclaim_reent>:
 800b694:	4b29      	ldr	r3, [pc, #164]	; (800b73c <_reclaim_reent+0xa8>)
 800b696:	b570      	push	{r4, r5, r6, lr}
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4604      	mov	r4, r0
 800b69c:	4283      	cmp	r3, r0
 800b69e:	d04b      	beq.n	800b738 <_reclaim_reent+0xa4>
 800b6a0:	69c3      	ldr	r3, [r0, #28]
 800b6a2:	b143      	cbz	r3, 800b6b6 <_reclaim_reent+0x22>
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d144      	bne.n	800b734 <_reclaim_reent+0xa0>
 800b6aa:	69e3      	ldr	r3, [r4, #28]
 800b6ac:	6819      	ldr	r1, [r3, #0]
 800b6ae:	b111      	cbz	r1, 800b6b6 <_reclaim_reent+0x22>
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f000 f8cf 	bl	800b854 <_free_r>
 800b6b6:	6961      	ldr	r1, [r4, #20]
 800b6b8:	b111      	cbz	r1, 800b6c0 <_reclaim_reent+0x2c>
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f000 f8ca 	bl	800b854 <_free_r>
 800b6c0:	69e1      	ldr	r1, [r4, #28]
 800b6c2:	b111      	cbz	r1, 800b6ca <_reclaim_reent+0x36>
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f000 f8c5 	bl	800b854 <_free_r>
 800b6ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b6cc:	b111      	cbz	r1, 800b6d4 <_reclaim_reent+0x40>
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f000 f8c0 	bl	800b854 <_free_r>
 800b6d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6d6:	b111      	cbz	r1, 800b6de <_reclaim_reent+0x4a>
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 f8bb 	bl	800b854 <_free_r>
 800b6de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b6e0:	b111      	cbz	r1, 800b6e8 <_reclaim_reent+0x54>
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f000 f8b6 	bl	800b854 <_free_r>
 800b6e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b6ea:	b111      	cbz	r1, 800b6f2 <_reclaim_reent+0x5e>
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f000 f8b1 	bl	800b854 <_free_r>
 800b6f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b6f4:	b111      	cbz	r1, 800b6fc <_reclaim_reent+0x68>
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f000 f8ac 	bl	800b854 <_free_r>
 800b6fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b6fe:	b111      	cbz	r1, 800b706 <_reclaim_reent+0x72>
 800b700:	4620      	mov	r0, r4
 800b702:	f000 f8a7 	bl	800b854 <_free_r>
 800b706:	6a23      	ldr	r3, [r4, #32]
 800b708:	b1b3      	cbz	r3, 800b738 <_reclaim_reent+0xa4>
 800b70a:	4620      	mov	r0, r4
 800b70c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b710:	4718      	bx	r3
 800b712:	5949      	ldr	r1, [r1, r5]
 800b714:	b941      	cbnz	r1, 800b728 <_reclaim_reent+0x94>
 800b716:	3504      	adds	r5, #4
 800b718:	69e3      	ldr	r3, [r4, #28]
 800b71a:	2d80      	cmp	r5, #128	; 0x80
 800b71c:	68d9      	ldr	r1, [r3, #12]
 800b71e:	d1f8      	bne.n	800b712 <_reclaim_reent+0x7e>
 800b720:	4620      	mov	r0, r4
 800b722:	f000 f897 	bl	800b854 <_free_r>
 800b726:	e7c0      	b.n	800b6aa <_reclaim_reent+0x16>
 800b728:	680e      	ldr	r6, [r1, #0]
 800b72a:	4620      	mov	r0, r4
 800b72c:	f000 f892 	bl	800b854 <_free_r>
 800b730:	4631      	mov	r1, r6
 800b732:	e7ef      	b.n	800b714 <_reclaim_reent+0x80>
 800b734:	2500      	movs	r5, #0
 800b736:	e7ef      	b.n	800b718 <_reclaim_reent+0x84>
 800b738:	bd70      	pop	{r4, r5, r6, pc}
 800b73a:	bf00      	nop
 800b73c:	20000068 	.word	0x20000068

0800b740 <_lseek_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4604      	mov	r4, r0
 800b744:	4608      	mov	r0, r1
 800b746:	4611      	mov	r1, r2
 800b748:	2200      	movs	r2, #0
 800b74a:	4d05      	ldr	r5, [pc, #20]	; (800b760 <_lseek_r+0x20>)
 800b74c:	602a      	str	r2, [r5, #0]
 800b74e:	461a      	mov	r2, r3
 800b750:	f7f8 f880 	bl	8003854 <_lseek>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d102      	bne.n	800b75e <_lseek_r+0x1e>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	b103      	cbz	r3, 800b75e <_lseek_r+0x1e>
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	20002d48 	.word	0x20002d48

0800b764 <_read_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	4604      	mov	r4, r0
 800b768:	4608      	mov	r0, r1
 800b76a:	4611      	mov	r1, r2
 800b76c:	2200      	movs	r2, #0
 800b76e:	4d05      	ldr	r5, [pc, #20]	; (800b784 <_read_r+0x20>)
 800b770:	602a      	str	r2, [r5, #0]
 800b772:	461a      	mov	r2, r3
 800b774:	f7f8 f846 	bl	8003804 <_read>
 800b778:	1c43      	adds	r3, r0, #1
 800b77a:	d102      	bne.n	800b782 <_read_r+0x1e>
 800b77c:	682b      	ldr	r3, [r5, #0]
 800b77e:	b103      	cbz	r3, 800b782 <_read_r+0x1e>
 800b780:	6023      	str	r3, [r4, #0]
 800b782:	bd38      	pop	{r3, r4, r5, pc}
 800b784:	20002d48 	.word	0x20002d48

0800b788 <_sbrk_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	2300      	movs	r3, #0
 800b78c:	4d05      	ldr	r5, [pc, #20]	; (800b7a4 <_sbrk_r+0x1c>)
 800b78e:	4604      	mov	r4, r0
 800b790:	4608      	mov	r0, r1
 800b792:	602b      	str	r3, [r5, #0]
 800b794:	f7f8 f860 	bl	8003858 <_sbrk>
 800b798:	1c43      	adds	r3, r0, #1
 800b79a:	d102      	bne.n	800b7a2 <_sbrk_r+0x1a>
 800b79c:	682b      	ldr	r3, [r5, #0]
 800b79e:	b103      	cbz	r3, 800b7a2 <_sbrk_r+0x1a>
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	bd38      	pop	{r3, r4, r5, pc}
 800b7a4:	20002d48 	.word	0x20002d48

0800b7a8 <_write_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	4608      	mov	r0, r1
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	4d05      	ldr	r5, [pc, #20]	; (800b7c8 <_write_r+0x20>)
 800b7b4:	602a      	str	r2, [r5, #0]
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	f7f8 f834 	bl	8003824 <_write>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	d102      	bne.n	800b7c6 <_write_r+0x1e>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	b103      	cbz	r3, 800b7c6 <_write_r+0x1e>
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	20002d48 	.word	0x20002d48

0800b7cc <__errno>:
 800b7cc:	4b01      	ldr	r3, [pc, #4]	; (800b7d4 <__errno+0x8>)
 800b7ce:	6818      	ldr	r0, [r3, #0]
 800b7d0:	4770      	bx	lr
 800b7d2:	bf00      	nop
 800b7d4:	20000068 	.word	0x20000068

0800b7d8 <__libc_init_array>:
 800b7d8:	b570      	push	{r4, r5, r6, lr}
 800b7da:	2600      	movs	r6, #0
 800b7dc:	4d0c      	ldr	r5, [pc, #48]	; (800b810 <__libc_init_array+0x38>)
 800b7de:	4c0d      	ldr	r4, [pc, #52]	; (800b814 <__libc_init_array+0x3c>)
 800b7e0:	1b64      	subs	r4, r4, r5
 800b7e2:	10a4      	asrs	r4, r4, #2
 800b7e4:	42a6      	cmp	r6, r4
 800b7e6:	d109      	bne.n	800b7fc <__libc_init_array+0x24>
 800b7e8:	f000 fe38 	bl	800c45c <_init>
 800b7ec:	2600      	movs	r6, #0
 800b7ee:	4d0a      	ldr	r5, [pc, #40]	; (800b818 <__libc_init_array+0x40>)
 800b7f0:	4c0a      	ldr	r4, [pc, #40]	; (800b81c <__libc_init_array+0x44>)
 800b7f2:	1b64      	subs	r4, r4, r5
 800b7f4:	10a4      	asrs	r4, r4, #2
 800b7f6:	42a6      	cmp	r6, r4
 800b7f8:	d105      	bne.n	800b806 <__libc_init_array+0x2e>
 800b7fa:	bd70      	pop	{r4, r5, r6, pc}
 800b7fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b800:	4798      	blx	r3
 800b802:	3601      	adds	r6, #1
 800b804:	e7ee      	b.n	800b7e4 <__libc_init_array+0xc>
 800b806:	f855 3b04 	ldr.w	r3, [r5], #4
 800b80a:	4798      	blx	r3
 800b80c:	3601      	adds	r6, #1
 800b80e:	e7f2      	b.n	800b7f6 <__libc_init_array+0x1e>
 800b810:	0800ca5c 	.word	0x0800ca5c
 800b814:	0800ca5c 	.word	0x0800ca5c
 800b818:	0800ca5c 	.word	0x0800ca5c
 800b81c:	0800ca60 	.word	0x0800ca60

0800b820 <__retarget_lock_init_recursive>:
 800b820:	4770      	bx	lr

0800b822 <__retarget_lock_acquire_recursive>:
 800b822:	4770      	bx	lr

0800b824 <__retarget_lock_release_recursive>:
 800b824:	4770      	bx	lr

0800b826 <strcpy>:
 800b826:	4603      	mov	r3, r0
 800b828:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b82c:	f803 2b01 	strb.w	r2, [r3], #1
 800b830:	2a00      	cmp	r2, #0
 800b832:	d1f9      	bne.n	800b828 <strcpy+0x2>
 800b834:	4770      	bx	lr

0800b836 <memcpy>:
 800b836:	440a      	add	r2, r1
 800b838:	4291      	cmp	r1, r2
 800b83a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b83e:	d100      	bne.n	800b842 <memcpy+0xc>
 800b840:	4770      	bx	lr
 800b842:	b510      	push	{r4, lr}
 800b844:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b848:	4291      	cmp	r1, r2
 800b84a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b84e:	d1f9      	bne.n	800b844 <memcpy+0xe>
 800b850:	bd10      	pop	{r4, pc}
	...

0800b854 <_free_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	4605      	mov	r5, r0
 800b858:	2900      	cmp	r1, #0
 800b85a:	d040      	beq.n	800b8de <_free_r+0x8a>
 800b85c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b860:	1f0c      	subs	r4, r1, #4
 800b862:	2b00      	cmp	r3, #0
 800b864:	bfb8      	it	lt
 800b866:	18e4      	addlt	r4, r4, r3
 800b868:	f7ff fc9e 	bl	800b1a8 <__malloc_lock>
 800b86c:	4a1c      	ldr	r2, [pc, #112]	; (800b8e0 <_free_r+0x8c>)
 800b86e:	6813      	ldr	r3, [r2, #0]
 800b870:	b933      	cbnz	r3, 800b880 <_free_r+0x2c>
 800b872:	6063      	str	r3, [r4, #4]
 800b874:	6014      	str	r4, [r2, #0]
 800b876:	4628      	mov	r0, r5
 800b878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b87c:	f7ff bc9a 	b.w	800b1b4 <__malloc_unlock>
 800b880:	42a3      	cmp	r3, r4
 800b882:	d908      	bls.n	800b896 <_free_r+0x42>
 800b884:	6820      	ldr	r0, [r4, #0]
 800b886:	1821      	adds	r1, r4, r0
 800b888:	428b      	cmp	r3, r1
 800b88a:	bf01      	itttt	eq
 800b88c:	6819      	ldreq	r1, [r3, #0]
 800b88e:	685b      	ldreq	r3, [r3, #4]
 800b890:	1809      	addeq	r1, r1, r0
 800b892:	6021      	streq	r1, [r4, #0]
 800b894:	e7ed      	b.n	800b872 <_free_r+0x1e>
 800b896:	461a      	mov	r2, r3
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	b10b      	cbz	r3, 800b8a0 <_free_r+0x4c>
 800b89c:	42a3      	cmp	r3, r4
 800b89e:	d9fa      	bls.n	800b896 <_free_r+0x42>
 800b8a0:	6811      	ldr	r1, [r2, #0]
 800b8a2:	1850      	adds	r0, r2, r1
 800b8a4:	42a0      	cmp	r0, r4
 800b8a6:	d10b      	bne.n	800b8c0 <_free_r+0x6c>
 800b8a8:	6820      	ldr	r0, [r4, #0]
 800b8aa:	4401      	add	r1, r0
 800b8ac:	1850      	adds	r0, r2, r1
 800b8ae:	4283      	cmp	r3, r0
 800b8b0:	6011      	str	r1, [r2, #0]
 800b8b2:	d1e0      	bne.n	800b876 <_free_r+0x22>
 800b8b4:	6818      	ldr	r0, [r3, #0]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	4408      	add	r0, r1
 800b8ba:	6010      	str	r0, [r2, #0]
 800b8bc:	6053      	str	r3, [r2, #4]
 800b8be:	e7da      	b.n	800b876 <_free_r+0x22>
 800b8c0:	d902      	bls.n	800b8c8 <_free_r+0x74>
 800b8c2:	230c      	movs	r3, #12
 800b8c4:	602b      	str	r3, [r5, #0]
 800b8c6:	e7d6      	b.n	800b876 <_free_r+0x22>
 800b8c8:	6820      	ldr	r0, [r4, #0]
 800b8ca:	1821      	adds	r1, r4, r0
 800b8cc:	428b      	cmp	r3, r1
 800b8ce:	bf01      	itttt	eq
 800b8d0:	6819      	ldreq	r1, [r3, #0]
 800b8d2:	685b      	ldreq	r3, [r3, #4]
 800b8d4:	1809      	addeq	r1, r1, r0
 800b8d6:	6021      	streq	r1, [r4, #0]
 800b8d8:	6063      	str	r3, [r4, #4]
 800b8da:	6054      	str	r4, [r2, #4]
 800b8dc:	e7cb      	b.n	800b876 <_free_r+0x22>
 800b8de:	bd38      	pop	{r3, r4, r5, pc}
 800b8e0:	20002c04 	.word	0x20002c04

0800b8e4 <__ssputs_r>:
 800b8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e8:	461f      	mov	r7, r3
 800b8ea:	688e      	ldr	r6, [r1, #8]
 800b8ec:	4682      	mov	sl, r0
 800b8ee:	42be      	cmp	r6, r7
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	4690      	mov	r8, r2
 800b8f4:	680b      	ldr	r3, [r1, #0]
 800b8f6:	d82c      	bhi.n	800b952 <__ssputs_r+0x6e>
 800b8f8:	898a      	ldrh	r2, [r1, #12]
 800b8fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8fe:	d026      	beq.n	800b94e <__ssputs_r+0x6a>
 800b900:	6965      	ldr	r5, [r4, #20]
 800b902:	6909      	ldr	r1, [r1, #16]
 800b904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b908:	eba3 0901 	sub.w	r9, r3, r1
 800b90c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b910:	1c7b      	adds	r3, r7, #1
 800b912:	444b      	add	r3, r9
 800b914:	106d      	asrs	r5, r5, #1
 800b916:	429d      	cmp	r5, r3
 800b918:	bf38      	it	cc
 800b91a:	461d      	movcc	r5, r3
 800b91c:	0553      	lsls	r3, r2, #21
 800b91e:	d527      	bpl.n	800b970 <__ssputs_r+0x8c>
 800b920:	4629      	mov	r1, r5
 800b922:	f7ff fbc1 	bl	800b0a8 <_malloc_r>
 800b926:	4606      	mov	r6, r0
 800b928:	b360      	cbz	r0, 800b984 <__ssputs_r+0xa0>
 800b92a:	464a      	mov	r2, r9
 800b92c:	6921      	ldr	r1, [r4, #16]
 800b92e:	f7ff ff82 	bl	800b836 <memcpy>
 800b932:	89a3      	ldrh	r3, [r4, #12]
 800b934:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b93c:	81a3      	strh	r3, [r4, #12]
 800b93e:	6126      	str	r6, [r4, #16]
 800b940:	444e      	add	r6, r9
 800b942:	6026      	str	r6, [r4, #0]
 800b944:	463e      	mov	r6, r7
 800b946:	6165      	str	r5, [r4, #20]
 800b948:	eba5 0509 	sub.w	r5, r5, r9
 800b94c:	60a5      	str	r5, [r4, #8]
 800b94e:	42be      	cmp	r6, r7
 800b950:	d900      	bls.n	800b954 <__ssputs_r+0x70>
 800b952:	463e      	mov	r6, r7
 800b954:	4632      	mov	r2, r6
 800b956:	4641      	mov	r1, r8
 800b958:	6820      	ldr	r0, [r4, #0]
 800b95a:	f000 fcfc 	bl	800c356 <memmove>
 800b95e:	2000      	movs	r0, #0
 800b960:	68a3      	ldr	r3, [r4, #8]
 800b962:	1b9b      	subs	r3, r3, r6
 800b964:	60a3      	str	r3, [r4, #8]
 800b966:	6823      	ldr	r3, [r4, #0]
 800b968:	4433      	add	r3, r6
 800b96a:	6023      	str	r3, [r4, #0]
 800b96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b970:	462a      	mov	r2, r5
 800b972:	f000 fd3b 	bl	800c3ec <_realloc_r>
 800b976:	4606      	mov	r6, r0
 800b978:	2800      	cmp	r0, #0
 800b97a:	d1e0      	bne.n	800b93e <__ssputs_r+0x5a>
 800b97c:	4650      	mov	r0, sl
 800b97e:	6921      	ldr	r1, [r4, #16]
 800b980:	f7ff ff68 	bl	800b854 <_free_r>
 800b984:	230c      	movs	r3, #12
 800b986:	f8ca 3000 	str.w	r3, [sl]
 800b98a:	89a3      	ldrh	r3, [r4, #12]
 800b98c:	f04f 30ff 	mov.w	r0, #4294967295
 800b990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b994:	81a3      	strh	r3, [r4, #12]
 800b996:	e7e9      	b.n	800b96c <__ssputs_r+0x88>

0800b998 <_svfiprintf_r>:
 800b998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99c:	4698      	mov	r8, r3
 800b99e:	898b      	ldrh	r3, [r1, #12]
 800b9a0:	4607      	mov	r7, r0
 800b9a2:	061b      	lsls	r3, r3, #24
 800b9a4:	460d      	mov	r5, r1
 800b9a6:	4614      	mov	r4, r2
 800b9a8:	b09d      	sub	sp, #116	; 0x74
 800b9aa:	d50e      	bpl.n	800b9ca <_svfiprintf_r+0x32>
 800b9ac:	690b      	ldr	r3, [r1, #16]
 800b9ae:	b963      	cbnz	r3, 800b9ca <_svfiprintf_r+0x32>
 800b9b0:	2140      	movs	r1, #64	; 0x40
 800b9b2:	f7ff fb79 	bl	800b0a8 <_malloc_r>
 800b9b6:	6028      	str	r0, [r5, #0]
 800b9b8:	6128      	str	r0, [r5, #16]
 800b9ba:	b920      	cbnz	r0, 800b9c6 <_svfiprintf_r+0x2e>
 800b9bc:	230c      	movs	r3, #12
 800b9be:	603b      	str	r3, [r7, #0]
 800b9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c4:	e0d0      	b.n	800bb68 <_svfiprintf_r+0x1d0>
 800b9c6:	2340      	movs	r3, #64	; 0x40
 800b9c8:	616b      	str	r3, [r5, #20]
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ce:	2320      	movs	r3, #32
 800b9d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9d4:	2330      	movs	r3, #48	; 0x30
 800b9d6:	f04f 0901 	mov.w	r9, #1
 800b9da:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9de:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800bb80 <_svfiprintf_r+0x1e8>
 800b9e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9e6:	4623      	mov	r3, r4
 800b9e8:	469a      	mov	sl, r3
 800b9ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9ee:	b10a      	cbz	r2, 800b9f4 <_svfiprintf_r+0x5c>
 800b9f0:	2a25      	cmp	r2, #37	; 0x25
 800b9f2:	d1f9      	bne.n	800b9e8 <_svfiprintf_r+0x50>
 800b9f4:	ebba 0b04 	subs.w	fp, sl, r4
 800b9f8:	d00b      	beq.n	800ba12 <_svfiprintf_r+0x7a>
 800b9fa:	465b      	mov	r3, fp
 800b9fc:	4622      	mov	r2, r4
 800b9fe:	4629      	mov	r1, r5
 800ba00:	4638      	mov	r0, r7
 800ba02:	f7ff ff6f 	bl	800b8e4 <__ssputs_r>
 800ba06:	3001      	adds	r0, #1
 800ba08:	f000 80a9 	beq.w	800bb5e <_svfiprintf_r+0x1c6>
 800ba0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba0e:	445a      	add	r2, fp
 800ba10:	9209      	str	r2, [sp, #36]	; 0x24
 800ba12:	f89a 3000 	ldrb.w	r3, [sl]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 80a1 	beq.w	800bb5e <_svfiprintf_r+0x1c6>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba26:	f10a 0a01 	add.w	sl, sl, #1
 800ba2a:	9304      	str	r3, [sp, #16]
 800ba2c:	9307      	str	r3, [sp, #28]
 800ba2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba32:	931a      	str	r3, [sp, #104]	; 0x68
 800ba34:	4654      	mov	r4, sl
 800ba36:	2205      	movs	r2, #5
 800ba38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba3c:	4850      	ldr	r0, [pc, #320]	; (800bb80 <_svfiprintf_r+0x1e8>)
 800ba3e:	f000 fcc7 	bl	800c3d0 <memchr>
 800ba42:	9a04      	ldr	r2, [sp, #16]
 800ba44:	b9d8      	cbnz	r0, 800ba7e <_svfiprintf_r+0xe6>
 800ba46:	06d0      	lsls	r0, r2, #27
 800ba48:	bf44      	itt	mi
 800ba4a:	2320      	movmi	r3, #32
 800ba4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba50:	0711      	lsls	r1, r2, #28
 800ba52:	bf44      	itt	mi
 800ba54:	232b      	movmi	r3, #43	; 0x2b
 800ba56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba60:	d015      	beq.n	800ba8e <_svfiprintf_r+0xf6>
 800ba62:	4654      	mov	r4, sl
 800ba64:	2000      	movs	r0, #0
 800ba66:	f04f 0c0a 	mov.w	ip, #10
 800ba6a:	9a07      	ldr	r2, [sp, #28]
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba72:	3b30      	subs	r3, #48	; 0x30
 800ba74:	2b09      	cmp	r3, #9
 800ba76:	d94d      	bls.n	800bb14 <_svfiprintf_r+0x17c>
 800ba78:	b1b0      	cbz	r0, 800baa8 <_svfiprintf_r+0x110>
 800ba7a:	9207      	str	r2, [sp, #28]
 800ba7c:	e014      	b.n	800baa8 <_svfiprintf_r+0x110>
 800ba7e:	eba0 0308 	sub.w	r3, r0, r8
 800ba82:	fa09 f303 	lsl.w	r3, r9, r3
 800ba86:	4313      	orrs	r3, r2
 800ba88:	46a2      	mov	sl, r4
 800ba8a:	9304      	str	r3, [sp, #16]
 800ba8c:	e7d2      	b.n	800ba34 <_svfiprintf_r+0x9c>
 800ba8e:	9b03      	ldr	r3, [sp, #12]
 800ba90:	1d19      	adds	r1, r3, #4
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	9103      	str	r1, [sp, #12]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	bfbb      	ittet	lt
 800ba9a:	425b      	neglt	r3, r3
 800ba9c:	f042 0202 	orrlt.w	r2, r2, #2
 800baa0:	9307      	strge	r3, [sp, #28]
 800baa2:	9307      	strlt	r3, [sp, #28]
 800baa4:	bfb8      	it	lt
 800baa6:	9204      	strlt	r2, [sp, #16]
 800baa8:	7823      	ldrb	r3, [r4, #0]
 800baaa:	2b2e      	cmp	r3, #46	; 0x2e
 800baac:	d10c      	bne.n	800bac8 <_svfiprintf_r+0x130>
 800baae:	7863      	ldrb	r3, [r4, #1]
 800bab0:	2b2a      	cmp	r3, #42	; 0x2a
 800bab2:	d134      	bne.n	800bb1e <_svfiprintf_r+0x186>
 800bab4:	9b03      	ldr	r3, [sp, #12]
 800bab6:	3402      	adds	r4, #2
 800bab8:	1d1a      	adds	r2, r3, #4
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	9203      	str	r2, [sp, #12]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	bfb8      	it	lt
 800bac2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bac6:	9305      	str	r3, [sp, #20]
 800bac8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bb84 <_svfiprintf_r+0x1ec>
 800bacc:	2203      	movs	r2, #3
 800bace:	4650      	mov	r0, sl
 800bad0:	7821      	ldrb	r1, [r4, #0]
 800bad2:	f000 fc7d 	bl	800c3d0 <memchr>
 800bad6:	b138      	cbz	r0, 800bae8 <_svfiprintf_r+0x150>
 800bad8:	2240      	movs	r2, #64	; 0x40
 800bada:	9b04      	ldr	r3, [sp, #16]
 800badc:	eba0 000a 	sub.w	r0, r0, sl
 800bae0:	4082      	lsls	r2, r0
 800bae2:	4313      	orrs	r3, r2
 800bae4:	3401      	adds	r4, #1
 800bae6:	9304      	str	r3, [sp, #16]
 800bae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baec:	2206      	movs	r2, #6
 800baee:	4826      	ldr	r0, [pc, #152]	; (800bb88 <_svfiprintf_r+0x1f0>)
 800baf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baf4:	f000 fc6c 	bl	800c3d0 <memchr>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	d038      	beq.n	800bb6e <_svfiprintf_r+0x1d6>
 800bafc:	4b23      	ldr	r3, [pc, #140]	; (800bb8c <_svfiprintf_r+0x1f4>)
 800bafe:	bb1b      	cbnz	r3, 800bb48 <_svfiprintf_r+0x1b0>
 800bb00:	9b03      	ldr	r3, [sp, #12]
 800bb02:	3307      	adds	r3, #7
 800bb04:	f023 0307 	bic.w	r3, r3, #7
 800bb08:	3308      	adds	r3, #8
 800bb0a:	9303      	str	r3, [sp, #12]
 800bb0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb0e:	4433      	add	r3, r6
 800bb10:	9309      	str	r3, [sp, #36]	; 0x24
 800bb12:	e768      	b.n	800b9e6 <_svfiprintf_r+0x4e>
 800bb14:	460c      	mov	r4, r1
 800bb16:	2001      	movs	r0, #1
 800bb18:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb1c:	e7a6      	b.n	800ba6c <_svfiprintf_r+0xd4>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	f04f 0c0a 	mov.w	ip, #10
 800bb24:	4619      	mov	r1, r3
 800bb26:	3401      	adds	r4, #1
 800bb28:	9305      	str	r3, [sp, #20]
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb30:	3a30      	subs	r2, #48	; 0x30
 800bb32:	2a09      	cmp	r2, #9
 800bb34:	d903      	bls.n	800bb3e <_svfiprintf_r+0x1a6>
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d0c6      	beq.n	800bac8 <_svfiprintf_r+0x130>
 800bb3a:	9105      	str	r1, [sp, #20]
 800bb3c:	e7c4      	b.n	800bac8 <_svfiprintf_r+0x130>
 800bb3e:	4604      	mov	r4, r0
 800bb40:	2301      	movs	r3, #1
 800bb42:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb46:	e7f0      	b.n	800bb2a <_svfiprintf_r+0x192>
 800bb48:	ab03      	add	r3, sp, #12
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	462a      	mov	r2, r5
 800bb4e:	4638      	mov	r0, r7
 800bb50:	4b0f      	ldr	r3, [pc, #60]	; (800bb90 <_svfiprintf_r+0x1f8>)
 800bb52:	a904      	add	r1, sp, #16
 800bb54:	f3af 8000 	nop.w
 800bb58:	1c42      	adds	r2, r0, #1
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	d1d6      	bne.n	800bb0c <_svfiprintf_r+0x174>
 800bb5e:	89ab      	ldrh	r3, [r5, #12]
 800bb60:	065b      	lsls	r3, r3, #25
 800bb62:	f53f af2d 	bmi.w	800b9c0 <_svfiprintf_r+0x28>
 800bb66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb68:	b01d      	add	sp, #116	; 0x74
 800bb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb6e:	ab03      	add	r3, sp, #12
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	462a      	mov	r2, r5
 800bb74:	4638      	mov	r0, r7
 800bb76:	4b06      	ldr	r3, [pc, #24]	; (800bb90 <_svfiprintf_r+0x1f8>)
 800bb78:	a904      	add	r1, sp, #16
 800bb7a:	f000 f9bf 	bl	800befc <_printf_i>
 800bb7e:	e7eb      	b.n	800bb58 <_svfiprintf_r+0x1c0>
 800bb80:	0800ca28 	.word	0x0800ca28
 800bb84:	0800ca2e 	.word	0x0800ca2e
 800bb88:	0800ca32 	.word	0x0800ca32
 800bb8c:	00000000 	.word	0x00000000
 800bb90:	0800b8e5 	.word	0x0800b8e5

0800bb94 <__sfputc_r>:
 800bb94:	6893      	ldr	r3, [r2, #8]
 800bb96:	b410      	push	{r4}
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	6093      	str	r3, [r2, #8]
 800bb9e:	da07      	bge.n	800bbb0 <__sfputc_r+0x1c>
 800bba0:	6994      	ldr	r4, [r2, #24]
 800bba2:	42a3      	cmp	r3, r4
 800bba4:	db01      	blt.n	800bbaa <__sfputc_r+0x16>
 800bba6:	290a      	cmp	r1, #10
 800bba8:	d102      	bne.n	800bbb0 <__sfputc_r+0x1c>
 800bbaa:	bc10      	pop	{r4}
 800bbac:	f7ff bcaf 	b.w	800b50e <__swbuf_r>
 800bbb0:	6813      	ldr	r3, [r2, #0]
 800bbb2:	1c58      	adds	r0, r3, #1
 800bbb4:	6010      	str	r0, [r2, #0]
 800bbb6:	7019      	strb	r1, [r3, #0]
 800bbb8:	4608      	mov	r0, r1
 800bbba:	bc10      	pop	{r4}
 800bbbc:	4770      	bx	lr

0800bbbe <__sfputs_r>:
 800bbbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc0:	4606      	mov	r6, r0
 800bbc2:	460f      	mov	r7, r1
 800bbc4:	4614      	mov	r4, r2
 800bbc6:	18d5      	adds	r5, r2, r3
 800bbc8:	42ac      	cmp	r4, r5
 800bbca:	d101      	bne.n	800bbd0 <__sfputs_r+0x12>
 800bbcc:	2000      	movs	r0, #0
 800bbce:	e007      	b.n	800bbe0 <__sfputs_r+0x22>
 800bbd0:	463a      	mov	r2, r7
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd8:	f7ff ffdc 	bl	800bb94 <__sfputc_r>
 800bbdc:	1c43      	adds	r3, r0, #1
 800bbde:	d1f3      	bne.n	800bbc8 <__sfputs_r+0xa>
 800bbe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbe4 <_vfiprintf_r>:
 800bbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe8:	460d      	mov	r5, r1
 800bbea:	4614      	mov	r4, r2
 800bbec:	4698      	mov	r8, r3
 800bbee:	4606      	mov	r6, r0
 800bbf0:	b09d      	sub	sp, #116	; 0x74
 800bbf2:	b118      	cbz	r0, 800bbfc <_vfiprintf_r+0x18>
 800bbf4:	6a03      	ldr	r3, [r0, #32]
 800bbf6:	b90b      	cbnz	r3, 800bbfc <_vfiprintf_r+0x18>
 800bbf8:	f7ff fb6e 	bl	800b2d8 <__sinit>
 800bbfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbfe:	07d9      	lsls	r1, r3, #31
 800bc00:	d405      	bmi.n	800bc0e <_vfiprintf_r+0x2a>
 800bc02:	89ab      	ldrh	r3, [r5, #12]
 800bc04:	059a      	lsls	r2, r3, #22
 800bc06:	d402      	bmi.n	800bc0e <_vfiprintf_r+0x2a>
 800bc08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc0a:	f7ff fe0a 	bl	800b822 <__retarget_lock_acquire_recursive>
 800bc0e:	89ab      	ldrh	r3, [r5, #12]
 800bc10:	071b      	lsls	r3, r3, #28
 800bc12:	d501      	bpl.n	800bc18 <_vfiprintf_r+0x34>
 800bc14:	692b      	ldr	r3, [r5, #16]
 800bc16:	b99b      	cbnz	r3, 800bc40 <_vfiprintf_r+0x5c>
 800bc18:	4629      	mov	r1, r5
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	f7ff fcb4 	bl	800b588 <__swsetup_r>
 800bc20:	b170      	cbz	r0, 800bc40 <_vfiprintf_r+0x5c>
 800bc22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc24:	07dc      	lsls	r4, r3, #31
 800bc26:	d504      	bpl.n	800bc32 <_vfiprintf_r+0x4e>
 800bc28:	f04f 30ff 	mov.w	r0, #4294967295
 800bc2c:	b01d      	add	sp, #116	; 0x74
 800bc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc32:	89ab      	ldrh	r3, [r5, #12]
 800bc34:	0598      	lsls	r0, r3, #22
 800bc36:	d4f7      	bmi.n	800bc28 <_vfiprintf_r+0x44>
 800bc38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc3a:	f7ff fdf3 	bl	800b824 <__retarget_lock_release_recursive>
 800bc3e:	e7f3      	b.n	800bc28 <_vfiprintf_r+0x44>
 800bc40:	2300      	movs	r3, #0
 800bc42:	9309      	str	r3, [sp, #36]	; 0x24
 800bc44:	2320      	movs	r3, #32
 800bc46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc4a:	2330      	movs	r3, #48	; 0x30
 800bc4c:	f04f 0901 	mov.w	r9, #1
 800bc50:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc54:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800be04 <_vfiprintf_r+0x220>
 800bc58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc5c:	4623      	mov	r3, r4
 800bc5e:	469a      	mov	sl, r3
 800bc60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc64:	b10a      	cbz	r2, 800bc6a <_vfiprintf_r+0x86>
 800bc66:	2a25      	cmp	r2, #37	; 0x25
 800bc68:	d1f9      	bne.n	800bc5e <_vfiprintf_r+0x7a>
 800bc6a:	ebba 0b04 	subs.w	fp, sl, r4
 800bc6e:	d00b      	beq.n	800bc88 <_vfiprintf_r+0xa4>
 800bc70:	465b      	mov	r3, fp
 800bc72:	4622      	mov	r2, r4
 800bc74:	4629      	mov	r1, r5
 800bc76:	4630      	mov	r0, r6
 800bc78:	f7ff ffa1 	bl	800bbbe <__sfputs_r>
 800bc7c:	3001      	adds	r0, #1
 800bc7e:	f000 80a9 	beq.w	800bdd4 <_vfiprintf_r+0x1f0>
 800bc82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc84:	445a      	add	r2, fp
 800bc86:	9209      	str	r2, [sp, #36]	; 0x24
 800bc88:	f89a 3000 	ldrb.w	r3, [sl]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f000 80a1 	beq.w	800bdd4 <_vfiprintf_r+0x1f0>
 800bc92:	2300      	movs	r3, #0
 800bc94:	f04f 32ff 	mov.w	r2, #4294967295
 800bc98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc9c:	f10a 0a01 	add.w	sl, sl, #1
 800bca0:	9304      	str	r3, [sp, #16]
 800bca2:	9307      	str	r3, [sp, #28]
 800bca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bca8:	931a      	str	r3, [sp, #104]	; 0x68
 800bcaa:	4654      	mov	r4, sl
 800bcac:	2205      	movs	r2, #5
 800bcae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcb2:	4854      	ldr	r0, [pc, #336]	; (800be04 <_vfiprintf_r+0x220>)
 800bcb4:	f000 fb8c 	bl	800c3d0 <memchr>
 800bcb8:	9a04      	ldr	r2, [sp, #16]
 800bcba:	b9d8      	cbnz	r0, 800bcf4 <_vfiprintf_r+0x110>
 800bcbc:	06d1      	lsls	r1, r2, #27
 800bcbe:	bf44      	itt	mi
 800bcc0:	2320      	movmi	r3, #32
 800bcc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcc6:	0713      	lsls	r3, r2, #28
 800bcc8:	bf44      	itt	mi
 800bcca:	232b      	movmi	r3, #43	; 0x2b
 800bccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcd0:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd4:	2b2a      	cmp	r3, #42	; 0x2a
 800bcd6:	d015      	beq.n	800bd04 <_vfiprintf_r+0x120>
 800bcd8:	4654      	mov	r4, sl
 800bcda:	2000      	movs	r0, #0
 800bcdc:	f04f 0c0a 	mov.w	ip, #10
 800bce0:	9a07      	ldr	r2, [sp, #28]
 800bce2:	4621      	mov	r1, r4
 800bce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bce8:	3b30      	subs	r3, #48	; 0x30
 800bcea:	2b09      	cmp	r3, #9
 800bcec:	d94d      	bls.n	800bd8a <_vfiprintf_r+0x1a6>
 800bcee:	b1b0      	cbz	r0, 800bd1e <_vfiprintf_r+0x13a>
 800bcf0:	9207      	str	r2, [sp, #28]
 800bcf2:	e014      	b.n	800bd1e <_vfiprintf_r+0x13a>
 800bcf4:	eba0 0308 	sub.w	r3, r0, r8
 800bcf8:	fa09 f303 	lsl.w	r3, r9, r3
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	46a2      	mov	sl, r4
 800bd00:	9304      	str	r3, [sp, #16]
 800bd02:	e7d2      	b.n	800bcaa <_vfiprintf_r+0xc6>
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	1d19      	adds	r1, r3, #4
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	9103      	str	r1, [sp, #12]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	bfbb      	ittet	lt
 800bd10:	425b      	neglt	r3, r3
 800bd12:	f042 0202 	orrlt.w	r2, r2, #2
 800bd16:	9307      	strge	r3, [sp, #28]
 800bd18:	9307      	strlt	r3, [sp, #28]
 800bd1a:	bfb8      	it	lt
 800bd1c:	9204      	strlt	r2, [sp, #16]
 800bd1e:	7823      	ldrb	r3, [r4, #0]
 800bd20:	2b2e      	cmp	r3, #46	; 0x2e
 800bd22:	d10c      	bne.n	800bd3e <_vfiprintf_r+0x15a>
 800bd24:	7863      	ldrb	r3, [r4, #1]
 800bd26:	2b2a      	cmp	r3, #42	; 0x2a
 800bd28:	d134      	bne.n	800bd94 <_vfiprintf_r+0x1b0>
 800bd2a:	9b03      	ldr	r3, [sp, #12]
 800bd2c:	3402      	adds	r4, #2
 800bd2e:	1d1a      	adds	r2, r3, #4
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	9203      	str	r2, [sp, #12]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	bfb8      	it	lt
 800bd38:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd3c:	9305      	str	r3, [sp, #20]
 800bd3e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be08 <_vfiprintf_r+0x224>
 800bd42:	2203      	movs	r2, #3
 800bd44:	4650      	mov	r0, sl
 800bd46:	7821      	ldrb	r1, [r4, #0]
 800bd48:	f000 fb42 	bl	800c3d0 <memchr>
 800bd4c:	b138      	cbz	r0, 800bd5e <_vfiprintf_r+0x17a>
 800bd4e:	2240      	movs	r2, #64	; 0x40
 800bd50:	9b04      	ldr	r3, [sp, #16]
 800bd52:	eba0 000a 	sub.w	r0, r0, sl
 800bd56:	4082      	lsls	r2, r0
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	3401      	adds	r4, #1
 800bd5c:	9304      	str	r3, [sp, #16]
 800bd5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd62:	2206      	movs	r2, #6
 800bd64:	4829      	ldr	r0, [pc, #164]	; (800be0c <_vfiprintf_r+0x228>)
 800bd66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd6a:	f000 fb31 	bl	800c3d0 <memchr>
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d03f      	beq.n	800bdf2 <_vfiprintf_r+0x20e>
 800bd72:	4b27      	ldr	r3, [pc, #156]	; (800be10 <_vfiprintf_r+0x22c>)
 800bd74:	bb1b      	cbnz	r3, 800bdbe <_vfiprintf_r+0x1da>
 800bd76:	9b03      	ldr	r3, [sp, #12]
 800bd78:	3307      	adds	r3, #7
 800bd7a:	f023 0307 	bic.w	r3, r3, #7
 800bd7e:	3308      	adds	r3, #8
 800bd80:	9303      	str	r3, [sp, #12]
 800bd82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd84:	443b      	add	r3, r7
 800bd86:	9309      	str	r3, [sp, #36]	; 0x24
 800bd88:	e768      	b.n	800bc5c <_vfiprintf_r+0x78>
 800bd8a:	460c      	mov	r4, r1
 800bd8c:	2001      	movs	r0, #1
 800bd8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd92:	e7a6      	b.n	800bce2 <_vfiprintf_r+0xfe>
 800bd94:	2300      	movs	r3, #0
 800bd96:	f04f 0c0a 	mov.w	ip, #10
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	3401      	adds	r4, #1
 800bd9e:	9305      	str	r3, [sp, #20]
 800bda0:	4620      	mov	r0, r4
 800bda2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bda6:	3a30      	subs	r2, #48	; 0x30
 800bda8:	2a09      	cmp	r2, #9
 800bdaa:	d903      	bls.n	800bdb4 <_vfiprintf_r+0x1d0>
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d0c6      	beq.n	800bd3e <_vfiprintf_r+0x15a>
 800bdb0:	9105      	str	r1, [sp, #20]
 800bdb2:	e7c4      	b.n	800bd3e <_vfiprintf_r+0x15a>
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdbc:	e7f0      	b.n	800bda0 <_vfiprintf_r+0x1bc>
 800bdbe:	ab03      	add	r3, sp, #12
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	462a      	mov	r2, r5
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	4b13      	ldr	r3, [pc, #76]	; (800be14 <_vfiprintf_r+0x230>)
 800bdc8:	a904      	add	r1, sp, #16
 800bdca:	f3af 8000 	nop.w
 800bdce:	4607      	mov	r7, r0
 800bdd0:	1c78      	adds	r0, r7, #1
 800bdd2:	d1d6      	bne.n	800bd82 <_vfiprintf_r+0x19e>
 800bdd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdd6:	07d9      	lsls	r1, r3, #31
 800bdd8:	d405      	bmi.n	800bde6 <_vfiprintf_r+0x202>
 800bdda:	89ab      	ldrh	r3, [r5, #12]
 800bddc:	059a      	lsls	r2, r3, #22
 800bdde:	d402      	bmi.n	800bde6 <_vfiprintf_r+0x202>
 800bde0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bde2:	f7ff fd1f 	bl	800b824 <__retarget_lock_release_recursive>
 800bde6:	89ab      	ldrh	r3, [r5, #12]
 800bde8:	065b      	lsls	r3, r3, #25
 800bdea:	f53f af1d 	bmi.w	800bc28 <_vfiprintf_r+0x44>
 800bdee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdf0:	e71c      	b.n	800bc2c <_vfiprintf_r+0x48>
 800bdf2:	ab03      	add	r3, sp, #12
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	462a      	mov	r2, r5
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	4b06      	ldr	r3, [pc, #24]	; (800be14 <_vfiprintf_r+0x230>)
 800bdfc:	a904      	add	r1, sp, #16
 800bdfe:	f000 f87d 	bl	800befc <_printf_i>
 800be02:	e7e4      	b.n	800bdce <_vfiprintf_r+0x1ea>
 800be04:	0800ca28 	.word	0x0800ca28
 800be08:	0800ca2e 	.word	0x0800ca2e
 800be0c:	0800ca32 	.word	0x0800ca32
 800be10:	00000000 	.word	0x00000000
 800be14:	0800bbbf 	.word	0x0800bbbf

0800be18 <_printf_common>:
 800be18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be1c:	4616      	mov	r6, r2
 800be1e:	4699      	mov	r9, r3
 800be20:	688a      	ldr	r2, [r1, #8]
 800be22:	690b      	ldr	r3, [r1, #16]
 800be24:	4607      	mov	r7, r0
 800be26:	4293      	cmp	r3, r2
 800be28:	bfb8      	it	lt
 800be2a:	4613      	movlt	r3, r2
 800be2c:	6033      	str	r3, [r6, #0]
 800be2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be32:	460c      	mov	r4, r1
 800be34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be38:	b10a      	cbz	r2, 800be3e <_printf_common+0x26>
 800be3a:	3301      	adds	r3, #1
 800be3c:	6033      	str	r3, [r6, #0]
 800be3e:	6823      	ldr	r3, [r4, #0]
 800be40:	0699      	lsls	r1, r3, #26
 800be42:	bf42      	ittt	mi
 800be44:	6833      	ldrmi	r3, [r6, #0]
 800be46:	3302      	addmi	r3, #2
 800be48:	6033      	strmi	r3, [r6, #0]
 800be4a:	6825      	ldr	r5, [r4, #0]
 800be4c:	f015 0506 	ands.w	r5, r5, #6
 800be50:	d106      	bne.n	800be60 <_printf_common+0x48>
 800be52:	f104 0a19 	add.w	sl, r4, #25
 800be56:	68e3      	ldr	r3, [r4, #12]
 800be58:	6832      	ldr	r2, [r6, #0]
 800be5a:	1a9b      	subs	r3, r3, r2
 800be5c:	42ab      	cmp	r3, r5
 800be5e:	dc2b      	bgt.n	800beb8 <_printf_common+0xa0>
 800be60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be64:	1e13      	subs	r3, r2, #0
 800be66:	6822      	ldr	r2, [r4, #0]
 800be68:	bf18      	it	ne
 800be6a:	2301      	movne	r3, #1
 800be6c:	0692      	lsls	r2, r2, #26
 800be6e:	d430      	bmi.n	800bed2 <_printf_common+0xba>
 800be70:	4649      	mov	r1, r9
 800be72:	4638      	mov	r0, r7
 800be74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be78:	47c0      	blx	r8
 800be7a:	3001      	adds	r0, #1
 800be7c:	d023      	beq.n	800bec6 <_printf_common+0xae>
 800be7e:	6823      	ldr	r3, [r4, #0]
 800be80:	6922      	ldr	r2, [r4, #16]
 800be82:	f003 0306 	and.w	r3, r3, #6
 800be86:	2b04      	cmp	r3, #4
 800be88:	bf14      	ite	ne
 800be8a:	2500      	movne	r5, #0
 800be8c:	6833      	ldreq	r3, [r6, #0]
 800be8e:	f04f 0600 	mov.w	r6, #0
 800be92:	bf08      	it	eq
 800be94:	68e5      	ldreq	r5, [r4, #12]
 800be96:	f104 041a 	add.w	r4, r4, #26
 800be9a:	bf08      	it	eq
 800be9c:	1aed      	subeq	r5, r5, r3
 800be9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bea2:	bf08      	it	eq
 800bea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bea8:	4293      	cmp	r3, r2
 800beaa:	bfc4      	itt	gt
 800beac:	1a9b      	subgt	r3, r3, r2
 800beae:	18ed      	addgt	r5, r5, r3
 800beb0:	42b5      	cmp	r5, r6
 800beb2:	d11a      	bne.n	800beea <_printf_common+0xd2>
 800beb4:	2000      	movs	r0, #0
 800beb6:	e008      	b.n	800beca <_printf_common+0xb2>
 800beb8:	2301      	movs	r3, #1
 800beba:	4652      	mov	r2, sl
 800bebc:	4649      	mov	r1, r9
 800bebe:	4638      	mov	r0, r7
 800bec0:	47c0      	blx	r8
 800bec2:	3001      	adds	r0, #1
 800bec4:	d103      	bne.n	800bece <_printf_common+0xb6>
 800bec6:	f04f 30ff 	mov.w	r0, #4294967295
 800beca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bece:	3501      	adds	r5, #1
 800bed0:	e7c1      	b.n	800be56 <_printf_common+0x3e>
 800bed2:	2030      	movs	r0, #48	; 0x30
 800bed4:	18e1      	adds	r1, r4, r3
 800bed6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800beda:	1c5a      	adds	r2, r3, #1
 800bedc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bee0:	4422      	add	r2, r4
 800bee2:	3302      	adds	r3, #2
 800bee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bee8:	e7c2      	b.n	800be70 <_printf_common+0x58>
 800beea:	2301      	movs	r3, #1
 800beec:	4622      	mov	r2, r4
 800beee:	4649      	mov	r1, r9
 800bef0:	4638      	mov	r0, r7
 800bef2:	47c0      	blx	r8
 800bef4:	3001      	adds	r0, #1
 800bef6:	d0e6      	beq.n	800bec6 <_printf_common+0xae>
 800bef8:	3601      	adds	r6, #1
 800befa:	e7d9      	b.n	800beb0 <_printf_common+0x98>

0800befc <_printf_i>:
 800befc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf00:	7e0f      	ldrb	r7, [r1, #24]
 800bf02:	4691      	mov	r9, r2
 800bf04:	2f78      	cmp	r7, #120	; 0x78
 800bf06:	4680      	mov	r8, r0
 800bf08:	460c      	mov	r4, r1
 800bf0a:	469a      	mov	sl, r3
 800bf0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf12:	d807      	bhi.n	800bf24 <_printf_i+0x28>
 800bf14:	2f62      	cmp	r7, #98	; 0x62
 800bf16:	d80a      	bhi.n	800bf2e <_printf_i+0x32>
 800bf18:	2f00      	cmp	r7, #0
 800bf1a:	f000 80d5 	beq.w	800c0c8 <_printf_i+0x1cc>
 800bf1e:	2f58      	cmp	r7, #88	; 0x58
 800bf20:	f000 80c1 	beq.w	800c0a6 <_printf_i+0x1aa>
 800bf24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf2c:	e03a      	b.n	800bfa4 <_printf_i+0xa8>
 800bf2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf32:	2b15      	cmp	r3, #21
 800bf34:	d8f6      	bhi.n	800bf24 <_printf_i+0x28>
 800bf36:	a101      	add	r1, pc, #4	; (adr r1, 800bf3c <_printf_i+0x40>)
 800bf38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf3c:	0800bf95 	.word	0x0800bf95
 800bf40:	0800bfa9 	.word	0x0800bfa9
 800bf44:	0800bf25 	.word	0x0800bf25
 800bf48:	0800bf25 	.word	0x0800bf25
 800bf4c:	0800bf25 	.word	0x0800bf25
 800bf50:	0800bf25 	.word	0x0800bf25
 800bf54:	0800bfa9 	.word	0x0800bfa9
 800bf58:	0800bf25 	.word	0x0800bf25
 800bf5c:	0800bf25 	.word	0x0800bf25
 800bf60:	0800bf25 	.word	0x0800bf25
 800bf64:	0800bf25 	.word	0x0800bf25
 800bf68:	0800c0af 	.word	0x0800c0af
 800bf6c:	0800bfd5 	.word	0x0800bfd5
 800bf70:	0800c069 	.word	0x0800c069
 800bf74:	0800bf25 	.word	0x0800bf25
 800bf78:	0800bf25 	.word	0x0800bf25
 800bf7c:	0800c0d1 	.word	0x0800c0d1
 800bf80:	0800bf25 	.word	0x0800bf25
 800bf84:	0800bfd5 	.word	0x0800bfd5
 800bf88:	0800bf25 	.word	0x0800bf25
 800bf8c:	0800bf25 	.word	0x0800bf25
 800bf90:	0800c071 	.word	0x0800c071
 800bf94:	682b      	ldr	r3, [r5, #0]
 800bf96:	1d1a      	adds	r2, r3, #4
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	602a      	str	r2, [r5, #0]
 800bf9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e0a0      	b.n	800c0ea <_printf_i+0x1ee>
 800bfa8:	6820      	ldr	r0, [r4, #0]
 800bfaa:	682b      	ldr	r3, [r5, #0]
 800bfac:	0607      	lsls	r7, r0, #24
 800bfae:	f103 0104 	add.w	r1, r3, #4
 800bfb2:	6029      	str	r1, [r5, #0]
 800bfb4:	d501      	bpl.n	800bfba <_printf_i+0xbe>
 800bfb6:	681e      	ldr	r6, [r3, #0]
 800bfb8:	e003      	b.n	800bfc2 <_printf_i+0xc6>
 800bfba:	0646      	lsls	r6, r0, #25
 800bfbc:	d5fb      	bpl.n	800bfb6 <_printf_i+0xba>
 800bfbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bfc2:	2e00      	cmp	r6, #0
 800bfc4:	da03      	bge.n	800bfce <_printf_i+0xd2>
 800bfc6:	232d      	movs	r3, #45	; 0x2d
 800bfc8:	4276      	negs	r6, r6
 800bfca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfce:	230a      	movs	r3, #10
 800bfd0:	4859      	ldr	r0, [pc, #356]	; (800c138 <_printf_i+0x23c>)
 800bfd2:	e012      	b.n	800bffa <_printf_i+0xfe>
 800bfd4:	682b      	ldr	r3, [r5, #0]
 800bfd6:	6820      	ldr	r0, [r4, #0]
 800bfd8:	1d19      	adds	r1, r3, #4
 800bfda:	6029      	str	r1, [r5, #0]
 800bfdc:	0605      	lsls	r5, r0, #24
 800bfde:	d501      	bpl.n	800bfe4 <_printf_i+0xe8>
 800bfe0:	681e      	ldr	r6, [r3, #0]
 800bfe2:	e002      	b.n	800bfea <_printf_i+0xee>
 800bfe4:	0641      	lsls	r1, r0, #25
 800bfe6:	d5fb      	bpl.n	800bfe0 <_printf_i+0xe4>
 800bfe8:	881e      	ldrh	r6, [r3, #0]
 800bfea:	2f6f      	cmp	r7, #111	; 0x6f
 800bfec:	bf0c      	ite	eq
 800bfee:	2308      	moveq	r3, #8
 800bff0:	230a      	movne	r3, #10
 800bff2:	4851      	ldr	r0, [pc, #324]	; (800c138 <_printf_i+0x23c>)
 800bff4:	2100      	movs	r1, #0
 800bff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bffa:	6865      	ldr	r5, [r4, #4]
 800bffc:	2d00      	cmp	r5, #0
 800bffe:	bfa8      	it	ge
 800c000:	6821      	ldrge	r1, [r4, #0]
 800c002:	60a5      	str	r5, [r4, #8]
 800c004:	bfa4      	itt	ge
 800c006:	f021 0104 	bicge.w	r1, r1, #4
 800c00a:	6021      	strge	r1, [r4, #0]
 800c00c:	b90e      	cbnz	r6, 800c012 <_printf_i+0x116>
 800c00e:	2d00      	cmp	r5, #0
 800c010:	d04b      	beq.n	800c0aa <_printf_i+0x1ae>
 800c012:	4615      	mov	r5, r2
 800c014:	fbb6 f1f3 	udiv	r1, r6, r3
 800c018:	fb03 6711 	mls	r7, r3, r1, r6
 800c01c:	5dc7      	ldrb	r7, [r0, r7]
 800c01e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c022:	4637      	mov	r7, r6
 800c024:	42bb      	cmp	r3, r7
 800c026:	460e      	mov	r6, r1
 800c028:	d9f4      	bls.n	800c014 <_printf_i+0x118>
 800c02a:	2b08      	cmp	r3, #8
 800c02c:	d10b      	bne.n	800c046 <_printf_i+0x14a>
 800c02e:	6823      	ldr	r3, [r4, #0]
 800c030:	07de      	lsls	r6, r3, #31
 800c032:	d508      	bpl.n	800c046 <_printf_i+0x14a>
 800c034:	6923      	ldr	r3, [r4, #16]
 800c036:	6861      	ldr	r1, [r4, #4]
 800c038:	4299      	cmp	r1, r3
 800c03a:	bfde      	ittt	le
 800c03c:	2330      	movle	r3, #48	; 0x30
 800c03e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c042:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c046:	1b52      	subs	r2, r2, r5
 800c048:	6122      	str	r2, [r4, #16]
 800c04a:	464b      	mov	r3, r9
 800c04c:	4621      	mov	r1, r4
 800c04e:	4640      	mov	r0, r8
 800c050:	f8cd a000 	str.w	sl, [sp]
 800c054:	aa03      	add	r2, sp, #12
 800c056:	f7ff fedf 	bl	800be18 <_printf_common>
 800c05a:	3001      	adds	r0, #1
 800c05c:	d14a      	bne.n	800c0f4 <_printf_i+0x1f8>
 800c05e:	f04f 30ff 	mov.w	r0, #4294967295
 800c062:	b004      	add	sp, #16
 800c064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c068:	6823      	ldr	r3, [r4, #0]
 800c06a:	f043 0320 	orr.w	r3, r3, #32
 800c06e:	6023      	str	r3, [r4, #0]
 800c070:	2778      	movs	r7, #120	; 0x78
 800c072:	4832      	ldr	r0, [pc, #200]	; (800c13c <_printf_i+0x240>)
 800c074:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	6829      	ldr	r1, [r5, #0]
 800c07c:	061f      	lsls	r7, r3, #24
 800c07e:	f851 6b04 	ldr.w	r6, [r1], #4
 800c082:	d402      	bmi.n	800c08a <_printf_i+0x18e>
 800c084:	065f      	lsls	r7, r3, #25
 800c086:	bf48      	it	mi
 800c088:	b2b6      	uxthmi	r6, r6
 800c08a:	07df      	lsls	r7, r3, #31
 800c08c:	bf48      	it	mi
 800c08e:	f043 0320 	orrmi.w	r3, r3, #32
 800c092:	6029      	str	r1, [r5, #0]
 800c094:	bf48      	it	mi
 800c096:	6023      	strmi	r3, [r4, #0]
 800c098:	b91e      	cbnz	r6, 800c0a2 <_printf_i+0x1a6>
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	f023 0320 	bic.w	r3, r3, #32
 800c0a0:	6023      	str	r3, [r4, #0]
 800c0a2:	2310      	movs	r3, #16
 800c0a4:	e7a6      	b.n	800bff4 <_printf_i+0xf8>
 800c0a6:	4824      	ldr	r0, [pc, #144]	; (800c138 <_printf_i+0x23c>)
 800c0a8:	e7e4      	b.n	800c074 <_printf_i+0x178>
 800c0aa:	4615      	mov	r5, r2
 800c0ac:	e7bd      	b.n	800c02a <_printf_i+0x12e>
 800c0ae:	682b      	ldr	r3, [r5, #0]
 800c0b0:	6826      	ldr	r6, [r4, #0]
 800c0b2:	1d18      	adds	r0, r3, #4
 800c0b4:	6961      	ldr	r1, [r4, #20]
 800c0b6:	6028      	str	r0, [r5, #0]
 800c0b8:	0635      	lsls	r5, r6, #24
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	d501      	bpl.n	800c0c2 <_printf_i+0x1c6>
 800c0be:	6019      	str	r1, [r3, #0]
 800c0c0:	e002      	b.n	800c0c8 <_printf_i+0x1cc>
 800c0c2:	0670      	lsls	r0, r6, #25
 800c0c4:	d5fb      	bpl.n	800c0be <_printf_i+0x1c2>
 800c0c6:	8019      	strh	r1, [r3, #0]
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	4615      	mov	r5, r2
 800c0cc:	6123      	str	r3, [r4, #16]
 800c0ce:	e7bc      	b.n	800c04a <_printf_i+0x14e>
 800c0d0:	682b      	ldr	r3, [r5, #0]
 800c0d2:	2100      	movs	r1, #0
 800c0d4:	1d1a      	adds	r2, r3, #4
 800c0d6:	602a      	str	r2, [r5, #0]
 800c0d8:	681d      	ldr	r5, [r3, #0]
 800c0da:	6862      	ldr	r2, [r4, #4]
 800c0dc:	4628      	mov	r0, r5
 800c0de:	f000 f977 	bl	800c3d0 <memchr>
 800c0e2:	b108      	cbz	r0, 800c0e8 <_printf_i+0x1ec>
 800c0e4:	1b40      	subs	r0, r0, r5
 800c0e6:	6060      	str	r0, [r4, #4]
 800c0e8:	6863      	ldr	r3, [r4, #4]
 800c0ea:	6123      	str	r3, [r4, #16]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0f2:	e7aa      	b.n	800c04a <_printf_i+0x14e>
 800c0f4:	462a      	mov	r2, r5
 800c0f6:	4649      	mov	r1, r9
 800c0f8:	4640      	mov	r0, r8
 800c0fa:	6923      	ldr	r3, [r4, #16]
 800c0fc:	47d0      	blx	sl
 800c0fe:	3001      	adds	r0, #1
 800c100:	d0ad      	beq.n	800c05e <_printf_i+0x162>
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	079b      	lsls	r3, r3, #30
 800c106:	d413      	bmi.n	800c130 <_printf_i+0x234>
 800c108:	68e0      	ldr	r0, [r4, #12]
 800c10a:	9b03      	ldr	r3, [sp, #12]
 800c10c:	4298      	cmp	r0, r3
 800c10e:	bfb8      	it	lt
 800c110:	4618      	movlt	r0, r3
 800c112:	e7a6      	b.n	800c062 <_printf_i+0x166>
 800c114:	2301      	movs	r3, #1
 800c116:	4632      	mov	r2, r6
 800c118:	4649      	mov	r1, r9
 800c11a:	4640      	mov	r0, r8
 800c11c:	47d0      	blx	sl
 800c11e:	3001      	adds	r0, #1
 800c120:	d09d      	beq.n	800c05e <_printf_i+0x162>
 800c122:	3501      	adds	r5, #1
 800c124:	68e3      	ldr	r3, [r4, #12]
 800c126:	9903      	ldr	r1, [sp, #12]
 800c128:	1a5b      	subs	r3, r3, r1
 800c12a:	42ab      	cmp	r3, r5
 800c12c:	dcf2      	bgt.n	800c114 <_printf_i+0x218>
 800c12e:	e7eb      	b.n	800c108 <_printf_i+0x20c>
 800c130:	2500      	movs	r5, #0
 800c132:	f104 0619 	add.w	r6, r4, #25
 800c136:	e7f5      	b.n	800c124 <_printf_i+0x228>
 800c138:	0800ca39 	.word	0x0800ca39
 800c13c:	0800ca4a 	.word	0x0800ca4a

0800c140 <__sflush_r>:
 800c140:	898a      	ldrh	r2, [r1, #12]
 800c142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c144:	4605      	mov	r5, r0
 800c146:	0710      	lsls	r0, r2, #28
 800c148:	460c      	mov	r4, r1
 800c14a:	d457      	bmi.n	800c1fc <__sflush_r+0xbc>
 800c14c:	684b      	ldr	r3, [r1, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	dc04      	bgt.n	800c15c <__sflush_r+0x1c>
 800c152:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c154:	2b00      	cmp	r3, #0
 800c156:	dc01      	bgt.n	800c15c <__sflush_r+0x1c>
 800c158:	2000      	movs	r0, #0
 800c15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c15c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c15e:	2e00      	cmp	r6, #0
 800c160:	d0fa      	beq.n	800c158 <__sflush_r+0x18>
 800c162:	2300      	movs	r3, #0
 800c164:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c168:	682f      	ldr	r7, [r5, #0]
 800c16a:	6a21      	ldr	r1, [r4, #32]
 800c16c:	602b      	str	r3, [r5, #0]
 800c16e:	d032      	beq.n	800c1d6 <__sflush_r+0x96>
 800c170:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c172:	89a3      	ldrh	r3, [r4, #12]
 800c174:	075a      	lsls	r2, r3, #29
 800c176:	d505      	bpl.n	800c184 <__sflush_r+0x44>
 800c178:	6863      	ldr	r3, [r4, #4]
 800c17a:	1ac0      	subs	r0, r0, r3
 800c17c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c17e:	b10b      	cbz	r3, 800c184 <__sflush_r+0x44>
 800c180:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c182:	1ac0      	subs	r0, r0, r3
 800c184:	2300      	movs	r3, #0
 800c186:	4602      	mov	r2, r0
 800c188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c18a:	4628      	mov	r0, r5
 800c18c:	6a21      	ldr	r1, [r4, #32]
 800c18e:	47b0      	blx	r6
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	89a3      	ldrh	r3, [r4, #12]
 800c194:	d106      	bne.n	800c1a4 <__sflush_r+0x64>
 800c196:	6829      	ldr	r1, [r5, #0]
 800c198:	291d      	cmp	r1, #29
 800c19a:	d82b      	bhi.n	800c1f4 <__sflush_r+0xb4>
 800c19c:	4a28      	ldr	r2, [pc, #160]	; (800c240 <__sflush_r+0x100>)
 800c19e:	410a      	asrs	r2, r1
 800c1a0:	07d6      	lsls	r6, r2, #31
 800c1a2:	d427      	bmi.n	800c1f4 <__sflush_r+0xb4>
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	6062      	str	r2, [r4, #4]
 800c1a8:	6922      	ldr	r2, [r4, #16]
 800c1aa:	04d9      	lsls	r1, r3, #19
 800c1ac:	6022      	str	r2, [r4, #0]
 800c1ae:	d504      	bpl.n	800c1ba <__sflush_r+0x7a>
 800c1b0:	1c42      	adds	r2, r0, #1
 800c1b2:	d101      	bne.n	800c1b8 <__sflush_r+0x78>
 800c1b4:	682b      	ldr	r3, [r5, #0]
 800c1b6:	b903      	cbnz	r3, 800c1ba <__sflush_r+0x7a>
 800c1b8:	6560      	str	r0, [r4, #84]	; 0x54
 800c1ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1bc:	602f      	str	r7, [r5, #0]
 800c1be:	2900      	cmp	r1, #0
 800c1c0:	d0ca      	beq.n	800c158 <__sflush_r+0x18>
 800c1c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1c6:	4299      	cmp	r1, r3
 800c1c8:	d002      	beq.n	800c1d0 <__sflush_r+0x90>
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f7ff fb42 	bl	800b854 <_free_r>
 800c1d0:	2000      	movs	r0, #0
 800c1d2:	6360      	str	r0, [r4, #52]	; 0x34
 800c1d4:	e7c1      	b.n	800c15a <__sflush_r+0x1a>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	4628      	mov	r0, r5
 800c1da:	47b0      	blx	r6
 800c1dc:	1c41      	adds	r1, r0, #1
 800c1de:	d1c8      	bne.n	800c172 <__sflush_r+0x32>
 800c1e0:	682b      	ldr	r3, [r5, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d0c5      	beq.n	800c172 <__sflush_r+0x32>
 800c1e6:	2b1d      	cmp	r3, #29
 800c1e8:	d001      	beq.n	800c1ee <__sflush_r+0xae>
 800c1ea:	2b16      	cmp	r3, #22
 800c1ec:	d101      	bne.n	800c1f2 <__sflush_r+0xb2>
 800c1ee:	602f      	str	r7, [r5, #0]
 800c1f0:	e7b2      	b.n	800c158 <__sflush_r+0x18>
 800c1f2:	89a3      	ldrh	r3, [r4, #12]
 800c1f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1f8:	81a3      	strh	r3, [r4, #12]
 800c1fa:	e7ae      	b.n	800c15a <__sflush_r+0x1a>
 800c1fc:	690f      	ldr	r7, [r1, #16]
 800c1fe:	2f00      	cmp	r7, #0
 800c200:	d0aa      	beq.n	800c158 <__sflush_r+0x18>
 800c202:	0793      	lsls	r3, r2, #30
 800c204:	bf18      	it	ne
 800c206:	2300      	movne	r3, #0
 800c208:	680e      	ldr	r6, [r1, #0]
 800c20a:	bf08      	it	eq
 800c20c:	694b      	ldreq	r3, [r1, #20]
 800c20e:	1bf6      	subs	r6, r6, r7
 800c210:	600f      	str	r7, [r1, #0]
 800c212:	608b      	str	r3, [r1, #8]
 800c214:	2e00      	cmp	r6, #0
 800c216:	dd9f      	ble.n	800c158 <__sflush_r+0x18>
 800c218:	4633      	mov	r3, r6
 800c21a:	463a      	mov	r2, r7
 800c21c:	4628      	mov	r0, r5
 800c21e:	6a21      	ldr	r1, [r4, #32]
 800c220:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c224:	47e0      	blx	ip
 800c226:	2800      	cmp	r0, #0
 800c228:	dc06      	bgt.n	800c238 <__sflush_r+0xf8>
 800c22a:	89a3      	ldrh	r3, [r4, #12]
 800c22c:	f04f 30ff 	mov.w	r0, #4294967295
 800c230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c234:	81a3      	strh	r3, [r4, #12]
 800c236:	e790      	b.n	800c15a <__sflush_r+0x1a>
 800c238:	4407      	add	r7, r0
 800c23a:	1a36      	subs	r6, r6, r0
 800c23c:	e7ea      	b.n	800c214 <__sflush_r+0xd4>
 800c23e:	bf00      	nop
 800c240:	dfbffffe 	.word	0xdfbffffe

0800c244 <_fflush_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	690b      	ldr	r3, [r1, #16]
 800c248:	4605      	mov	r5, r0
 800c24a:	460c      	mov	r4, r1
 800c24c:	b913      	cbnz	r3, 800c254 <_fflush_r+0x10>
 800c24e:	2500      	movs	r5, #0
 800c250:	4628      	mov	r0, r5
 800c252:	bd38      	pop	{r3, r4, r5, pc}
 800c254:	b118      	cbz	r0, 800c25e <_fflush_r+0x1a>
 800c256:	6a03      	ldr	r3, [r0, #32]
 800c258:	b90b      	cbnz	r3, 800c25e <_fflush_r+0x1a>
 800c25a:	f7ff f83d 	bl	800b2d8 <__sinit>
 800c25e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d0f3      	beq.n	800c24e <_fflush_r+0xa>
 800c266:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c268:	07d0      	lsls	r0, r2, #31
 800c26a:	d404      	bmi.n	800c276 <_fflush_r+0x32>
 800c26c:	0599      	lsls	r1, r3, #22
 800c26e:	d402      	bmi.n	800c276 <_fflush_r+0x32>
 800c270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c272:	f7ff fad6 	bl	800b822 <__retarget_lock_acquire_recursive>
 800c276:	4628      	mov	r0, r5
 800c278:	4621      	mov	r1, r4
 800c27a:	f7ff ff61 	bl	800c140 <__sflush_r>
 800c27e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c280:	4605      	mov	r5, r0
 800c282:	07da      	lsls	r2, r3, #31
 800c284:	d4e4      	bmi.n	800c250 <_fflush_r+0xc>
 800c286:	89a3      	ldrh	r3, [r4, #12]
 800c288:	059b      	lsls	r3, r3, #22
 800c28a:	d4e1      	bmi.n	800c250 <_fflush_r+0xc>
 800c28c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c28e:	f7ff fac9 	bl	800b824 <__retarget_lock_release_recursive>
 800c292:	e7dd      	b.n	800c250 <_fflush_r+0xc>

0800c294 <__swhatbuf_r>:
 800c294:	b570      	push	{r4, r5, r6, lr}
 800c296:	460c      	mov	r4, r1
 800c298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c29c:	4615      	mov	r5, r2
 800c29e:	2900      	cmp	r1, #0
 800c2a0:	461e      	mov	r6, r3
 800c2a2:	b096      	sub	sp, #88	; 0x58
 800c2a4:	da0c      	bge.n	800c2c0 <__swhatbuf_r+0x2c>
 800c2a6:	89a3      	ldrh	r3, [r4, #12]
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c2ae:	bf0c      	ite	eq
 800c2b0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c2b4:	2340      	movne	r3, #64	; 0x40
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	6031      	str	r1, [r6, #0]
 800c2ba:	602b      	str	r3, [r5, #0]
 800c2bc:	b016      	add	sp, #88	; 0x58
 800c2be:	bd70      	pop	{r4, r5, r6, pc}
 800c2c0:	466a      	mov	r2, sp
 800c2c2:	f000 f863 	bl	800c38c <_fstat_r>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	dbed      	blt.n	800c2a6 <__swhatbuf_r+0x12>
 800c2ca:	9901      	ldr	r1, [sp, #4]
 800c2cc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c2d0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c2d4:	4259      	negs	r1, r3
 800c2d6:	4159      	adcs	r1, r3
 800c2d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2dc:	e7eb      	b.n	800c2b6 <__swhatbuf_r+0x22>

0800c2de <__smakebuf_r>:
 800c2de:	898b      	ldrh	r3, [r1, #12]
 800c2e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2e2:	079d      	lsls	r5, r3, #30
 800c2e4:	4606      	mov	r6, r0
 800c2e6:	460c      	mov	r4, r1
 800c2e8:	d507      	bpl.n	800c2fa <__smakebuf_r+0x1c>
 800c2ea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2ee:	6023      	str	r3, [r4, #0]
 800c2f0:	6123      	str	r3, [r4, #16]
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	6163      	str	r3, [r4, #20]
 800c2f6:	b002      	add	sp, #8
 800c2f8:	bd70      	pop	{r4, r5, r6, pc}
 800c2fa:	466a      	mov	r2, sp
 800c2fc:	ab01      	add	r3, sp, #4
 800c2fe:	f7ff ffc9 	bl	800c294 <__swhatbuf_r>
 800c302:	9900      	ldr	r1, [sp, #0]
 800c304:	4605      	mov	r5, r0
 800c306:	4630      	mov	r0, r6
 800c308:	f7fe fece 	bl	800b0a8 <_malloc_r>
 800c30c:	b948      	cbnz	r0, 800c322 <__smakebuf_r+0x44>
 800c30e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c312:	059a      	lsls	r2, r3, #22
 800c314:	d4ef      	bmi.n	800c2f6 <__smakebuf_r+0x18>
 800c316:	f023 0303 	bic.w	r3, r3, #3
 800c31a:	f043 0302 	orr.w	r3, r3, #2
 800c31e:	81a3      	strh	r3, [r4, #12]
 800c320:	e7e3      	b.n	800c2ea <__smakebuf_r+0xc>
 800c322:	89a3      	ldrh	r3, [r4, #12]
 800c324:	6020      	str	r0, [r4, #0]
 800c326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c32a:	81a3      	strh	r3, [r4, #12]
 800c32c:	9b00      	ldr	r3, [sp, #0]
 800c32e:	6120      	str	r0, [r4, #16]
 800c330:	6163      	str	r3, [r4, #20]
 800c332:	9b01      	ldr	r3, [sp, #4]
 800c334:	b15b      	cbz	r3, 800c34e <__smakebuf_r+0x70>
 800c336:	4630      	mov	r0, r6
 800c338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c33c:	f000 f838 	bl	800c3b0 <_isatty_r>
 800c340:	b128      	cbz	r0, 800c34e <__smakebuf_r+0x70>
 800c342:	89a3      	ldrh	r3, [r4, #12]
 800c344:	f023 0303 	bic.w	r3, r3, #3
 800c348:	f043 0301 	orr.w	r3, r3, #1
 800c34c:	81a3      	strh	r3, [r4, #12]
 800c34e:	89a3      	ldrh	r3, [r4, #12]
 800c350:	431d      	orrs	r5, r3
 800c352:	81a5      	strh	r5, [r4, #12]
 800c354:	e7cf      	b.n	800c2f6 <__smakebuf_r+0x18>

0800c356 <memmove>:
 800c356:	4288      	cmp	r0, r1
 800c358:	b510      	push	{r4, lr}
 800c35a:	eb01 0402 	add.w	r4, r1, r2
 800c35e:	d902      	bls.n	800c366 <memmove+0x10>
 800c360:	4284      	cmp	r4, r0
 800c362:	4623      	mov	r3, r4
 800c364:	d807      	bhi.n	800c376 <memmove+0x20>
 800c366:	1e43      	subs	r3, r0, #1
 800c368:	42a1      	cmp	r1, r4
 800c36a:	d008      	beq.n	800c37e <memmove+0x28>
 800c36c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c370:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c374:	e7f8      	b.n	800c368 <memmove+0x12>
 800c376:	4601      	mov	r1, r0
 800c378:	4402      	add	r2, r0
 800c37a:	428a      	cmp	r2, r1
 800c37c:	d100      	bne.n	800c380 <memmove+0x2a>
 800c37e:	bd10      	pop	{r4, pc}
 800c380:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c384:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c388:	e7f7      	b.n	800c37a <memmove+0x24>
	...

0800c38c <_fstat_r>:
 800c38c:	b538      	push	{r3, r4, r5, lr}
 800c38e:	2300      	movs	r3, #0
 800c390:	4d06      	ldr	r5, [pc, #24]	; (800c3ac <_fstat_r+0x20>)
 800c392:	4604      	mov	r4, r0
 800c394:	4608      	mov	r0, r1
 800c396:	4611      	mov	r1, r2
 800c398:	602b      	str	r3, [r5, #0]
 800c39a:	f7f7 fa54 	bl	8003846 <_fstat>
 800c39e:	1c43      	adds	r3, r0, #1
 800c3a0:	d102      	bne.n	800c3a8 <_fstat_r+0x1c>
 800c3a2:	682b      	ldr	r3, [r5, #0]
 800c3a4:	b103      	cbz	r3, 800c3a8 <_fstat_r+0x1c>
 800c3a6:	6023      	str	r3, [r4, #0]
 800c3a8:	bd38      	pop	{r3, r4, r5, pc}
 800c3aa:	bf00      	nop
 800c3ac:	20002d48 	.word	0x20002d48

0800c3b0 <_isatty_r>:
 800c3b0:	b538      	push	{r3, r4, r5, lr}
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	4d05      	ldr	r5, [pc, #20]	; (800c3cc <_isatty_r+0x1c>)
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	4608      	mov	r0, r1
 800c3ba:	602b      	str	r3, [r5, #0]
 800c3bc:	f7f7 fa48 	bl	8003850 <_isatty>
 800c3c0:	1c43      	adds	r3, r0, #1
 800c3c2:	d102      	bne.n	800c3ca <_isatty_r+0x1a>
 800c3c4:	682b      	ldr	r3, [r5, #0]
 800c3c6:	b103      	cbz	r3, 800c3ca <_isatty_r+0x1a>
 800c3c8:	6023      	str	r3, [r4, #0]
 800c3ca:	bd38      	pop	{r3, r4, r5, pc}
 800c3cc:	20002d48 	.word	0x20002d48

0800c3d0 <memchr>:
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	b510      	push	{r4, lr}
 800c3d4:	b2c9      	uxtb	r1, r1
 800c3d6:	4402      	add	r2, r0
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	4618      	mov	r0, r3
 800c3dc:	d101      	bne.n	800c3e2 <memchr+0x12>
 800c3de:	2000      	movs	r0, #0
 800c3e0:	e003      	b.n	800c3ea <memchr+0x1a>
 800c3e2:	7804      	ldrb	r4, [r0, #0]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	428c      	cmp	r4, r1
 800c3e8:	d1f6      	bne.n	800c3d8 <memchr+0x8>
 800c3ea:	bd10      	pop	{r4, pc}

0800c3ec <_realloc_r>:
 800c3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f0:	4680      	mov	r8, r0
 800c3f2:	4614      	mov	r4, r2
 800c3f4:	460e      	mov	r6, r1
 800c3f6:	b921      	cbnz	r1, 800c402 <_realloc_r+0x16>
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3fe:	f7fe be53 	b.w	800b0a8 <_malloc_r>
 800c402:	b92a      	cbnz	r2, 800c410 <_realloc_r+0x24>
 800c404:	f7ff fa26 	bl	800b854 <_free_r>
 800c408:	4625      	mov	r5, r4
 800c40a:	4628      	mov	r0, r5
 800c40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c410:	f000 f81b 	bl	800c44a <_malloc_usable_size_r>
 800c414:	4284      	cmp	r4, r0
 800c416:	4607      	mov	r7, r0
 800c418:	d802      	bhi.n	800c420 <_realloc_r+0x34>
 800c41a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c41e:	d812      	bhi.n	800c446 <_realloc_r+0x5a>
 800c420:	4621      	mov	r1, r4
 800c422:	4640      	mov	r0, r8
 800c424:	f7fe fe40 	bl	800b0a8 <_malloc_r>
 800c428:	4605      	mov	r5, r0
 800c42a:	2800      	cmp	r0, #0
 800c42c:	d0ed      	beq.n	800c40a <_realloc_r+0x1e>
 800c42e:	42bc      	cmp	r4, r7
 800c430:	4622      	mov	r2, r4
 800c432:	4631      	mov	r1, r6
 800c434:	bf28      	it	cs
 800c436:	463a      	movcs	r2, r7
 800c438:	f7ff f9fd 	bl	800b836 <memcpy>
 800c43c:	4631      	mov	r1, r6
 800c43e:	4640      	mov	r0, r8
 800c440:	f7ff fa08 	bl	800b854 <_free_r>
 800c444:	e7e1      	b.n	800c40a <_realloc_r+0x1e>
 800c446:	4635      	mov	r5, r6
 800c448:	e7df      	b.n	800c40a <_realloc_r+0x1e>

0800c44a <_malloc_usable_size_r>:
 800c44a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c44e:	1f18      	subs	r0, r3, #4
 800c450:	2b00      	cmp	r3, #0
 800c452:	bfbc      	itt	lt
 800c454:	580b      	ldrlt	r3, [r1, r0]
 800c456:	18c0      	addlt	r0, r0, r3
 800c458:	4770      	bx	lr
	...

0800c45c <_init>:
 800c45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c45e:	bf00      	nop
 800c460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c462:	bc08      	pop	{r3}
 800c464:	469e      	mov	lr, r3
 800c466:	4770      	bx	lr

0800c468 <_fini>:
 800c468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c46a:	bf00      	nop
 800c46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c46e:	bc08      	pop	{r3}
 800c470:	469e      	mov	lr, r3
 800c472:	4770      	bx	lr
