
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b174  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800b284  0800b284  0001b284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b950  0800b950  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b950  0800b950  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b950  0800b950  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b950  0800b950  0001b950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b954  0800b954  0001b954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800b958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004674  20000070  0800b9c4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200046e4  0800b9c4  000246e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003349d  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007150  00000000  00000000  00053575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f705  00000000  00000000  0005a6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001868  00000000  00000000  00069dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a1b  00000000  00000000  0006b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001eec6  00000000  00000000  0006d053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ff91  00000000  00000000  0008bf19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a1faa  00000000  00000000  000bbeaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000058a4  00000000  00000000  0015de54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001636f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b26c 	.word	0x0800b26c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800b26c 	.word	0x0800b26c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <BluetoothAddComp>:
	BluetoothAddComp(ble, &BLERecebeuSenha,     "RX_RECEBEU_SENHA",        	RX_RECEBEU_SENHA,          	ComandoConexao);

	//Return OK
	return 0;
}
uint8_t BluetoothAddComp(Bluetooth* ble, BleComando* _blecomm, char* objectname, uint8_t __comando, TypeComandoBle __tipo){
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	4605      	mov	r5, r0
	//Make space before passing the object name to the nexcomp struct
	_blecomm->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8001098:	4610      	mov	r0, r2
uint8_t BluetoothAddComp(Bluetooth* ble, BleComando* _blecomm, char* objectname, uint8_t __comando, TypeComandoBle __tipo){
 800109a:	460c      	mov	r4, r1
 800109c:	4616      	mov	r6, r2
 800109e:	461f      	mov	r7, r3
	_blecomm->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 80010a0:	f7ff f856 	bl	8000150 <strlen>
 80010a4:	3001      	adds	r0, #1
 80010a6:	f008 fedf 	bl	8009e68 <malloc>
	//Pass the object name to the struct
	strcpy(_blecomm->objname, objectname);
 80010aa:	4631      	mov	r1, r6
	_blecomm->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 80010ac:	6060      	str	r0, [r4, #4]
	strcpy(_blecomm->objname, objectname);
 80010ae:	f009 fac2 	bl	800a636 <strcpy>

	//Pass the corresponding data from component to component struct
	_blecomm->_comando = __comando;
	_blecomm->_tipo = __tipo;
 80010b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
	_blecomm->_comando = __comando;
 80010b6:	7027      	strb	r7, [r4, #0]
	_blecomm->_tipo = __tipo;
 80010b8:	7063      	strb	r3, [r4, #1]

	//Add the component struct to the list on the Nextion Struct
	ble->_BleCommArr[ble->_BleCommCount] = _blecomm;
 80010ba:	f895 3144 	ldrb.w	r3, [r5, #324]	; 0x144
	ble->_BleCommCount++;

	//Return OK
	return 0;
}
 80010be:	2000      	movs	r0, #0
	ble->_BleCommArr[ble->_BleCommCount] = _blecomm;
 80010c0:	f103 0224 	add.w	r2, r3, #36	; 0x24
	ble->_BleCommCount++;
 80010c4:	3301      	adds	r3, #1
	ble->_BleCommArr[ble->_BleCommCount] = _blecomm;
 80010c6:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
	ble->_BleCommCount++;
 80010ca:	f885 3144 	strb.w	r3, [r5, #324]	; 0x144
}
 80010ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080010d0 <Envia_bytes_UART>:
	TX_Buffer[size+2] = (unsigned char) (CRCVar >> 8);
	TX_Buffer[size+1] = (unsigned char) (CRCVar & 0x00FF);

	Envia_bytes_UART((uint8_t *)TX_Buffer,size+3);
}
void Envia_bytes_UART(unsigned char _out[], uint8_t size){
 80010d0:	460a      	mov	r2, r1
	HAL_UART_Transmit(UARTHandle, (uint8_t *)_out, size,50);
 80010d2:	4601      	mov	r1, r0
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <Envia_bytes_UART+0x10>)
 80010d6:	2332      	movs	r3, #50	; 0x32
 80010d8:	6800      	ldr	r0, [r0, #0]
 80010da:	f006 ba02 	b.w	80074e2 <HAL_UART_Transmit>
 80010de:	bf00      	nop
 80010e0:	200000a4 	.word	0x200000a4

080010e4 <Envia_texto_UART>:
}
void Envia_texto_UART(char _out[], uint16_t delay){
 80010e4:	b538      	push	{r3, r4, r5, lr}
 80010e6:	460c      	mov	r4, r1
 80010e8:	4605      	mov	r5, r0
	HAL_UART_Transmit(UARTHandle, (uint8_t *) _out, strlen(_out),100);
 80010ea:	f7ff f831 	bl	8000150 <strlen>
 80010ee:	b282      	uxth	r2, r0
 80010f0:	4806      	ldr	r0, [pc, #24]	; (800110c <Envia_texto_UART+0x28>)
 80010f2:	2364      	movs	r3, #100	; 0x64
 80010f4:	4629      	mov	r1, r5
 80010f6:	6800      	ldr	r0, [r0, #0]
 80010f8:	f006 f9f3 	bl	80074e2 <HAL_UART_Transmit>
	if(delay != 0){
 80010fc:	b124      	cbz	r4, 8001108 <Envia_texto_UART+0x24>
		osDelay(delay);
 80010fe:	4620      	mov	r0, r4
	}
}
 8001100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		osDelay(delay);
 8001104:	f006 bdba 	b.w	8007c7c <osDelay>
}
 8001108:	bd38      	pop	{r3, r4, r5, pc}
 800110a:	bf00      	nop
 800110c:	200000a4 	.word	0x200000a4

08001110 <CRC16>:
			0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
			0x40
	};

	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001110:	23ff      	movs	r3, #255	; 0xff
{
 8001112:	b570      	push	{r4, r5, r6, lr}
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001114:	461c      	mov	r4, r3
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001116:	4d07      	ldr	r5, [pc, #28]	; (8001134 <CRC16+0x24>)
		uchCRCHi = auchCRCLo[uIndex] ;
 8001118:	4e07      	ldr	r6, [pc, #28]	; (8001138 <CRC16+0x28>)
 800111a:	4401      	add	r1, r0
	while (usDataLen--) /* pass through message buffer */
 800111c:	4281      	cmp	r1, r0
 800111e:	d102      	bne.n	8001126 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
}//---END---//
 8001120:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 8001124:	bd70      	pop	{r4, r5, r6, pc}
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800112a:	405a      	eors	r2, r3
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800112c:	5cab      	ldrb	r3, [r5, r2]
 800112e:	4063      	eors	r3, r4
		uchCRCHi = auchCRCLo[uIndex] ;
 8001130:	5cb4      	ldrb	r4, [r6, r2]
 8001132:	e7f3      	b.n	800111c <CRC16+0xc>
 8001134:	0800b3fd 	.word	0x0800b3fd
 8001138:	0800b4fd 	.word	0x0800b4fd

0800113c <BluetoothEnviaComando>:
{
 800113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113e:	4605      	mov	r5, r0
	uint8_t	TX_Buffer		[size+3];
 8001140:	f101 030a 	add.w	r3, r1, #10
 8001144:	f023 0307 	bic.w	r3, r3, #7
{
 8001148:	af00      	add	r7, sp, #0
		TX_Buffer[i]=_out[i];
 800114a:	1c4e      	adds	r6, r1, #1
	uint8_t	TX_Buffer		[size+3];
 800114c:	ebad 0d03 	sub.w	sp, sp, r3
		TX_Buffer[i]=_out[i];
 8001150:	1c4b      	adds	r3, r1, #1
 8001152:	bfac      	ite	ge
 8001154:	4632      	movge	r2, r6
 8001156:	2200      	movlt	r2, #0
{
 8001158:	460c      	mov	r4, r1
		TX_Buffer[i]=_out[i];
 800115a:	4601      	mov	r1, r0
 800115c:	4668      	mov	r0, sp
 800115e:	f009 fa72 	bl	800a646 <memcpy>
	CRCVar = CRC16(_out,size+1);
 8001162:	b2b1      	uxth	r1, r6
 8001164:	4628      	mov	r0, r5
 8001166:	f7ff ffd3 	bl	8001110 <CRC16>
	TX_Buffer[size+2] = (unsigned char) (CRCVar >> 8);
 800116a:	eb0d 0304 	add.w	r3, sp, r4
 800116e:	0a02      	lsrs	r2, r0, #8
	Envia_bytes_UART((uint8_t *)TX_Buffer,size+3);
 8001170:	1ce1      	adds	r1, r4, #3
	TX_Buffer[size+2] = (unsigned char) (CRCVar >> 8);
 8001172:	709a      	strb	r2, [r3, #2]
	Envia_bytes_UART((uint8_t *)TX_Buffer,size+3);
 8001174:	b2c9      	uxtb	r1, r1
	TX_Buffer[size+1] = (unsigned char) (CRCVar & 0x00FF);
 8001176:	f80d 0006 	strb.w	r0, [sp, r6]
	Envia_bytes_UART((uint8_t *)TX_Buffer,size+3);
 800117a:	4668      	mov	r0, sp
 800117c:	f7ff ffa8 	bl	80010d0 <Envia_bytes_UART>
}
 8001180:	46bd      	mov	sp, r7
 8001182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001184 <solicitacaoSenhaBluetooh>:
void solicitacaoSenhaBluetooh(Bluetooth* ble){
 8001184:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(ble->JanelaConexao > 0){
 8001186:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
 800118a:	b16b      	cbz	r3, 80011a8 <solicitacaoSenhaBluetooh+0x24>
 800118c:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
		Buffer[0] 	= 0x01;									// ENDEREÇO
 8001190:	4a06      	ldr	r2, [pc, #24]	; (80011ac <solicitacaoSenhaBluetooh+0x28>)
 8001192:	ba5b      	rev16	r3, r3
		BluetoothEnviaComando(Buffer, 5);
 8001194:	2105      	movs	r1, #5
 8001196:	a801      	add	r0, sp, #4
		Buffer[0] 	= 0x01;									// ENDEREÇO
 8001198:	9201      	str	r2, [sp, #4]
		Buffer[4] 	= 0x00;
 800119a:	f8ad 3008 	strh.w	r3, [sp, #8]
		BluetoothEnviaComando(Buffer, 5);
 800119e:	f7ff ffcd 	bl	800113c <BluetoothEnviaComando>
}
 80011a2:	b007      	add	sp, #28
 80011a4:	f85d fb04 	ldr.w	pc, [sp], #4
		Buffer[0] 	= 0x01;									// ENDEREÇO
 80011a8:	4a01      	ldr	r2, [pc, #4]	; (80011b0 <solicitacaoSenhaBluetooh+0x2c>)
 80011aa:	e7f3      	b.n	8001194 <solicitacaoSenhaBluetooh+0x10>
 80011ac:	01515101 	.word	0x01515101
 80011b0:	00515101 	.word	0x00515101

080011b4 <BluetoothErroCRC>:
	}
}
void BluetoothErroCRC(void)
{
	unsigned char	TXCRC[3];
	TXCRC[0] = 0x01;\
 80011b4:	f64e 6301 	movw	r3, #60929	; 0xee01
{
 80011b8:	b507      	push	{r0, r1, r2, lr}
	TXCRC[0] = 0x01;\
 80011ba:	f8ad 3004 	strh.w	r3, [sp, #4]
	TXCRC[1] = 0xEE;\
	TXCRC[2] = 0xEE;\
 80011be:	23ee      	movs	r3, #238	; 0xee
	Envia_bytes_UART(TXCRC,3);
 80011c0:	2103      	movs	r1, #3
 80011c2:	a801      	add	r0, sp, #4
	TXCRC[2] = 0xEE;\
 80011c4:	f88d 3006 	strb.w	r3, [sp, #6]
	Envia_bytes_UART(TXCRC,3);
 80011c8:	f7ff ff82 	bl	80010d0 <Envia_bytes_UART>
}
 80011cc:	b003      	add	sp, #12
 80011ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080011d4 <BluetoothDescon>:
void BluetoothDescon(Bluetooth* ble){
 80011d4:	b538      	push	{r3, r4, r5, lr}
	unsigned char	Buffer		[20];

	Envia_texto_UART("AT",50);//DESCONECTA
 80011d6:	4d0b      	ldr	r5, [pc, #44]	; (8001204 <BluetoothDescon+0x30>)
void BluetoothDescon(Bluetooth* ble){
 80011d8:	4604      	mov	r4, r0
	Envia_texto_UART("AT",50);//DESCONECTA
 80011da:	2132      	movs	r1, #50	; 0x32
 80011dc:	4628      	mov	r0, r5
 80011de:	f7ff ff81 	bl	80010e4 <Envia_texto_UART>
	Envia_texto_UART("AT",50);//DESCONECTA
 80011e2:	2132      	movs	r1, #50	; 0x32
 80011e4:	4628      	mov	r0, r5
 80011e6:	f7ff ff7d 	bl	80010e4 <Envia_texto_UART>

	/* Prepare DMA for next transfer */
	/* Important! DMA stream won't start if all flags are not cleared first */
	UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
	UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 80011ea:	2240      	movs	r2, #64	; 0x40
	UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <BluetoothDescon+0x34>)
 80011ee:	3430      	adds	r4, #48	; 0x30
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60dc      	str	r4, [r3, #12]
	UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 80011f6:	605a      	str	r2, [r3, #4]
	UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	f042 0201 	orr.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
}
 8001200:	bd38      	pop	{r3, r4, r5, pc}
 8001202:	bf00      	nop
 8001204:	0800b340 	.word	0x0800b340
 8001208:	200000a0 	.word	0x200000a0

0800120c <avaliaSenhaRecebidaBluetooh>:
void avaliaSenhaRecebidaBluetooh(Bluetooth* ble){
 800120c:	b510      	push	{r4, lr}
	if(		ble->_RxDataArr[3] == (ble->chave >> 8) &&
 800120e:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
 8001212:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
void avaliaSenhaRecebidaBluetooh(Bluetooth* ble){
 8001216:	4604      	mov	r4, r0
	if(		ble->_RxDataArr[3] == (ble->chave >> 8) &&
 8001218:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
void avaliaSenhaRecebidaBluetooh(Bluetooth* ble){
 800121c:	b086      	sub	sp, #24
	if(		ble->_RxDataArr[3] == (ble->chave >> 8) &&
 800121e:	d10f      	bne.n	8001240 <avaliaSenhaRecebidaBluetooh+0x34>
			ble->_RxDataArr[4] == (ble->chave & 0x00ff) ){
 8001220:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8001224:	b2db      	uxtb	r3, r3
	if(		ble->_RxDataArr[3] == (ble->chave >> 8) &&
 8001226:	429a      	cmp	r2, r3
 8001228:	d10a      	bne.n	8001240 <avaliaSenhaRecebidaBluetooh+0x34>
		ble->MaquinaConexao	= RX_VALIDADO;
 800122a:	2302      	movs	r3, #2
 800122c:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
		Buffer[0] 	= 0x01;									// ENDEREÇO
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <avaliaSenhaRecebidaBluetooh+0x48>)
		BluetoothEnviaComando(Buffer, 3);
 8001232:	2103      	movs	r1, #3
 8001234:	a801      	add	r0, sp, #4
		Buffer[0] 	= 0x01;									// ENDEREÇO
 8001236:	9301      	str	r3, [sp, #4]
		BluetoothEnviaComando(Buffer, 3);
 8001238:	f7ff ff80 	bl	800113c <BluetoothEnviaComando>
}
 800123c:	b006      	add	sp, #24
 800123e:	bd10      	pop	{r4, pc}
		Buffer[0] 	= 0x01;									// ENDEREÇO
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <avaliaSenhaRecebidaBluetooh+0x4c>)
		BluetoothEnviaComando(Buffer, 3);
 8001242:	a801      	add	r0, sp, #4
 8001244:	2103      	movs	r1, #3
		Buffer[0] 	= 0x01;									// ENDEREÇO
 8001246:	9301      	str	r3, [sp, #4]
		BluetoothEnviaComando(Buffer, 3);
 8001248:	f7ff ff78 	bl	800113c <BluetoothEnviaComando>
		BluetoothDescon(ble);
 800124c:	4620      	mov	r0, r4
 800124e:	f7ff ffc1 	bl	80011d4 <BluetoothDescon>
}
 8001252:	e7f3      	b.n	800123c <avaliaSenhaRecebidaBluetooh+0x30>
 8001254:	01525201 	.word	0x01525201
 8001258:	00525201 	.word	0x00525201

0800125c <iniciaBleHm10>:
void iniciaBleHm10(Bluetooth* ble){
 800125c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001260:	4604      	mov	r4, r0
			stepBle = 8;
 8001262:	4ebe      	ldr	r6, [pc, #760]	; (800155c <iniciaBleHm10+0x300>)
			while (tryingAddr < max_attempts) {
 8001264:	4fbe      	ldr	r7, [pc, #760]	; (8001560 <iniciaBleHm10+0x304>)
void iniciaBleHm10(Bluetooth* ble){
 8001266:	b08f      	sub	sp, #60	; 0x3c
		switch (ble->sequenciaBLE) {
 8001268:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800126c:	2b05      	cmp	r3, #5
 800126e:	d8fb      	bhi.n	8001268 <iniciaBleHm10+0xc>
 8001270:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001274:	004e0006 	.word	0x004e0006
 8001278:	01340097 	.word	0x01340097
 800127c:	01d601a6 	.word	0x01d601a6
			stepBle=1;
 8001280:	2501      	movs	r5, #1
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001288:	48b6      	ldr	r0, [pc, #728]	; (8001564 <iniciaBleHm10+0x308>)
			stepBle=1;
 800128a:	7035      	strb	r5, [r6, #0]
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 800128c:	f004 fa22 	bl	80056d4 <HAL_GPIO_WritePin>
 8001290:	20c8      	movs	r0, #200	; 0xc8
 8001292:	f006 fcf3 	bl	8007c7c <osDelay>
 8001296:	462a      	mov	r2, r5
 8001298:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800129c:	48b1      	ldr	r0, [pc, #708]	; (8001564 <iniciaBleHm10+0x308>)
 800129e:	f004 fa19 	bl	80056d4 <HAL_GPIO_WritePin>
			SETUP_UART(115200)
 80012a2:	4db1      	ldr	r5, [pc, #708]	; (8001568 <iniciaBleHm10+0x30c>)
			Envia_texto_UART("AT+ADTY3",100);	//BLOQUEIA CONEXAO
 80012a4:	2164      	movs	r1, #100	; 0x64
 80012a6:	48b1      	ldr	r0, [pc, #708]	; (800156c <iniciaBleHm10+0x310>)
 80012a8:	f7ff ff1c 	bl	80010e4 <Envia_texto_UART>
			Envia_texto_UART("AT+ADTY3",100);	//BLOQUEIA CONEXAO
 80012ac:	2164      	movs	r1, #100	; 0x64
 80012ae:	48af      	ldr	r0, [pc, #700]	; (800156c <iniciaBleHm10+0x310>)
 80012b0:	f7ff ff18 	bl	80010e4 <Envia_texto_UART>
			SETUP_UART(115200)
 80012b4:	6828      	ldr	r0, [r5, #0]
 80012b6:	f006 f999 	bl	80075ec <HAL_UART_Abort_IT>
 80012ba:	6828      	ldr	r0, [r5, #0]
 80012bc:	f006 f8f7 	bl	80074ae <HAL_UART_DeInit>
 80012c0:	2032      	movs	r0, #50	; 0x32
 80012c2:	f006 fcdb 	bl	8007c7c <osDelay>
 80012c6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
			stepBle=2;
 80012ca:	f04f 0802 	mov.w	r8, #2
			SETUP_UART(115200)
 80012ce:	6828      	ldr	r0, [r5, #0]
 80012d0:	6043      	str	r3, [r0, #4]
 80012d2:	f006 f8bd 	bl	8007450 <HAL_UART_Init>
 80012d6:	2032      	movs	r0, #50	; 0x32
 80012d8:	f006 fcd0 	bl	8007c7c <osDelay>
			BluetoothDescon(ble);
 80012dc:	4620      	mov	r0, r4
			stepBle=2;
 80012de:	f886 8000 	strb.w	r8, [r6]
			BluetoothDescon(ble);
 80012e2:	f7ff ff77 	bl	80011d4 <BluetoothDescon>
			MACRO_DEFINE_INTERRUPT
 80012e6:	6828      	ldr	r0, [r5, #0]
 80012e8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80012ec:	6802      	ldr	r2, [r0, #0]
 80012ee:	68d3      	ldr	r3, [r2, #12]
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	60d3      	str	r3, [r2, #12]
 80012f6:	4b9e      	ldr	r3, [pc, #632]	; (8001570 <iniciaBleHm10+0x314>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	6813      	ldr	r3, [r2, #0]
 80012fe:	ea43 0308 	orr.w	r3, r3, r8
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	2240      	movs	r2, #64	; 0x40
 8001306:	f006 fc6f 	bl	8007be8 <HAL_UART_Receive_DMA>
			ble->sequenciaBLE = redefineBle;
 800130a:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			break;
 800130e:	e7ab      	b.n	8001268 <iniciaBleHm10+0xc>
			stepBle=3;
 8001310:	2303      	movs	r3, #3
			while (tryingName < max_attempts) {
 8001312:	4d98      	ldr	r5, [pc, #608]	; (8001574 <iniciaBleHm10+0x318>)
				Envia_texto_UART("AT+NAME?", 100);
 8001314:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8001578 <iniciaBleHm10+0x31c>
			stepBle=3;
 8001318:	7033      	strb	r3, [r6, #0]
			while (tryingName < max_attempts) {
 800131a:	782b      	ldrb	r3, [r5, #0]
 800131c:	2b0e      	cmp	r3, #14
 800131e:	d830      	bhi.n	8001382 <iniciaBleHm10+0x126>
				Envia_texto_UART("AT+NAME?", 100);
 8001320:	2164      	movs	r1, #100	; 0x64
 8001322:	4640      	mov	r0, r8
 8001324:	f7ff fede 	bl	80010e4 <Envia_texto_UART>
				MACRO_DEFINE_INTERRUPT
 8001328:	4b8f      	ldr	r3, [pc, #572]	; (8001568 <iniciaBleHm10+0x30c>)
 800132a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800132e:	6818      	ldr	r0, [r3, #0]
				ble->ss = strstr(ble->StringRecebida, "NAME");
 8001330:	f104 095e 	add.w	r9, r4, #94	; 0x5e
				MACRO_DEFINE_INTERRUPT
 8001334:	6802      	ldr	r2, [r0, #0]
 8001336:	68d3      	ldr	r3, [r2, #12]
 8001338:	f043 0310 	orr.w	r3, r3, #16
 800133c:	60d3      	str	r3, [r2, #12]
 800133e:	4b8c      	ldr	r3, [pc, #560]	; (8001570 <iniciaBleHm10+0x314>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	6813      	ldr	r3, [r2, #0]
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	2240      	movs	r2, #64	; 0x40
 800134e:	f006 fc4b 	bl	8007be8 <HAL_UART_Receive_DMA>
				osDelay(delay_between_attempts_ms);
 8001352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001356:	f006 fc91 	bl	8007c7c <osDelay>
				ble->ss = NULL;
 800135a:	2300      	movs	r3, #0
				ble->ss = strstr(ble->StringRecebida, "NAME");
 800135c:	4648      	mov	r0, r9
 800135e:	4987      	ldr	r1, [pc, #540]	; (800157c <iniciaBleHm10+0x320>)
				ble->ss = NULL;
 8001360:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				ble->ss = strstr(ble->StringRecebida, "NAME");
 8001364:	f009 f878 	bl	800a458 <strstr>
 8001368:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
				if (ble->ss != NULL){
 800136c:	b1a8      	cbz	r0, 800139a <iniciaBleHm10+0x13e>
					ble->ss = strstr(ble->StringRecebida, BLE_DEVICE_NAME);
 800136e:	4648      	mov	r0, r9
 8001370:	4983      	ldr	r1, [pc, #524]	; (8001580 <iniciaBleHm10+0x324>)
 8001372:	f009 f871 	bl	800a458 <strstr>
 8001376:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					if (ble->ss != NULL){
 800137a:	b160      	cbz	r0, 8001396 <iniciaBleHm10+0x13a>
						ble->sequenciaBLE = capturaAddr;
 800137c:	2303      	movs	r3, #3
						ble->sequenciaBLE = redefineBle;
 800137e:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
			stepBle=4;
 8001382:	2304      	movs	r3, #4
 8001384:	7033      	strb	r3, [r6, #0]
			if(tryingName >= max_attempts)
 8001386:	782b      	ldrb	r3, [r5, #0]
 8001388:	2b0e      	cmp	r3, #14
 800138a:	f67f af6d 	bls.w	8001268 <iniciaBleHm10+0xc>
				ble->sequenciaBLE = redefineBle;//extrapolou as tentativas
 800138e:	2302      	movs	r3, #2
				ble->sequenciaBLE = erro;//extrapolou as tentativas
 8001390:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
 8001394:	e768      	b.n	8001268 <iniciaBleHm10+0xc>
						ble->sequenciaBLE = redefineBle;
 8001396:	2302      	movs	r3, #2
 8001398:	e7f1      	b.n	800137e <iniciaBleHm10+0x122>
					tryingName++;
 800139a:	782b      	ldrb	r3, [r5, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	702b      	strb	r3, [r5, #0]
 80013a0:	e7bb      	b.n	800131a <iniciaBleHm10+0xbe>
			SETUP_UART(115200)
 80013a2:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
 80013a6:	4d70      	ldr	r5, [pc, #448]	; (8001568 <iniciaBleHm10+0x30c>)
 80013a8:	6828      	ldr	r0, [r5, #0]
 80013aa:	f006 f91f 	bl	80075ec <HAL_UART_Abort_IT>
 80013ae:	6828      	ldr	r0, [r5, #0]
 80013b0:	f006 f87d 	bl	80074ae <HAL_UART_DeInit>
 80013b4:	2032      	movs	r0, #50	; 0x32
 80013b6:	f006 fc61 	bl	8007c7c <osDelay>
 80013ba:	6828      	ldr	r0, [r5, #0]
 80013bc:	f8c0 8004 	str.w	r8, [r0, #4]
 80013c0:	f006 f846 	bl	8007450 <HAL_UART_Init>
 80013c4:	2032      	movs	r0, #50	; 0x32
 80013c6:	f006 fc59 	bl	8007c7c <osDelay>
			Envia_texto_UART("AT",100);	//
 80013ca:	2164      	movs	r1, #100	; 0x64
 80013cc:	486d      	ldr	r0, [pc, #436]	; (8001584 <iniciaBleHm10+0x328>)
 80013ce:	f7ff fe89 	bl	80010e4 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 80013d2:	2164      	movs	r1, #100	; 0x64
 80013d4:	486b      	ldr	r0, [pc, #428]	; (8001584 <iniciaBleHm10+0x328>)
 80013d6:	f7ff fe85 	bl	80010e4 <Envia_texto_UART>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 80013da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013de:	486a      	ldr	r0, [pc, #424]	; (8001588 <iniciaBleHm10+0x32c>)
 80013e0:	f7ff fe80 	bl	80010e4 <Envia_texto_UART>
			SETUP_UART(9600)
 80013e4:	6828      	ldr	r0, [r5, #0]
 80013e6:	f006 f901 	bl	80075ec <HAL_UART_Abort_IT>
 80013ea:	6828      	ldr	r0, [r5, #0]
 80013ec:	f006 f85f 	bl	80074ae <HAL_UART_DeInit>
 80013f0:	2032      	movs	r0, #50	; 0x32
 80013f2:	f006 fc43 	bl	8007c7c <osDelay>
 80013f6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80013fa:	6828      	ldr	r0, [r5, #0]
 80013fc:	6043      	str	r3, [r0, #4]
 80013fe:	f006 f827 	bl	8007450 <HAL_UART_Init>
 8001402:	2032      	movs	r0, #50	; 0x32
 8001404:	f006 fc3a 	bl	8007c7c <osDelay>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 8001408:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800140c:	485e      	ldr	r0, [pc, #376]	; (8001588 <iniciaBleHm10+0x32c>)
 800140e:	f7ff fe69 	bl	80010e4 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 8001412:	2164      	movs	r1, #100	; 0x64
 8001414:	485b      	ldr	r0, [pc, #364]	; (8001584 <iniciaBleHm10+0x328>)
 8001416:	f7ff fe65 	bl	80010e4 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 800141a:	2164      	movs	r1, #100	; 0x64
 800141c:	4859      	ldr	r0, [pc, #356]	; (8001584 <iniciaBleHm10+0x328>)
 800141e:	f7ff fe61 	bl	80010e4 <Envia_texto_UART>
			Envia_texto_UART("AT+ADTY3",300);	//BLOQUEIA CONEXAO
 8001422:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001426:	4851      	ldr	r0, [pc, #324]	; (800156c <iniciaBleHm10+0x310>)
 8001428:	f7ff fe5c 	bl	80010e4 <Envia_texto_UART>
			Envia_texto_UART("AT+BAUD4",300);	//COLOCA BAUD EM 115200
 800142c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001430:	4856      	ldr	r0, [pc, #344]	; (800158c <iniciaBleHm10+0x330>)
 8001432:	f7ff fe57 	bl	80010e4 <Envia_texto_UART>
			SETUP_UART(115200)
 8001436:	6828      	ldr	r0, [r5, #0]
 8001438:	f006 f8d8 	bl	80075ec <HAL_UART_Abort_IT>
 800143c:	6828      	ldr	r0, [r5, #0]
 800143e:	f006 f836 	bl	80074ae <HAL_UART_DeInit>
 8001442:	2032      	movs	r0, #50	; 0x32
 8001444:	f006 fc1a 	bl	8007c7c <osDelay>
 8001448:	6828      	ldr	r0, [r5, #0]
 800144a:	f8c0 8004 	str.w	r8, [r0, #4]
 800144e:	f005 ffff 	bl	8007450 <HAL_UART_Init>
 8001452:	2032      	movs	r0, #50	; 0x32
 8001454:	f006 fc12 	bl	8007c7c <osDelay>
			MACRO_RESET_BLE
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145e:	4841      	ldr	r0, [pc, #260]	; (8001564 <iniciaBleHm10+0x308>)
 8001460:	f004 f938 	bl	80056d4 <HAL_GPIO_WritePin>
 8001464:	20c8      	movs	r0, #200	; 0xc8
 8001466:	f006 fc09 	bl	8007c7c <osDelay>
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001470:	483c      	ldr	r0, [pc, #240]	; (8001564 <iniciaBleHm10+0x308>)
 8001472:	f004 f92f 	bl	80056d4 <HAL_GPIO_WritePin>
			Envia_texto_UART("AT",100);	//
 8001476:	2164      	movs	r1, #100	; 0x64
 8001478:	4842      	ldr	r0, [pc, #264]	; (8001584 <iniciaBleHm10+0x328>)
 800147a:	f7ff fe33 	bl	80010e4 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 800147e:	2164      	movs	r1, #100	; 0x64
 8001480:	4840      	ldr	r0, [pc, #256]	; (8001584 <iniciaBleHm10+0x328>)
 8001482:	f7ff fe2f 	bl	80010e4 <Envia_texto_UART>
			Envia_texto_UART("AT+POWE3",300);	//POTENCIA MAXIMA
 8001486:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800148a:	4841      	ldr	r0, [pc, #260]	; (8001590 <iniciaBleHm10+0x334>)
 800148c:	f7ff fe2a 	bl	80010e4 <Envia_texto_UART>
			Envia_texto_UART("AT+SHOW3",300);	//MOSTRA O NOME e rssi
 8001490:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001494:	483f      	ldr	r0, [pc, #252]	; (8001594 <iniciaBleHm10+0x338>)
 8001496:	f7ff fe25 	bl	80010e4 <Envia_texto_UART>
			Envia_texto_UART("AT+GAIN1",300);	//INSERE GANHO
 800149a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800149e:	483e      	ldr	r0, [pc, #248]	; (8001598 <iniciaBleHm10+0x33c>)
 80014a0:	f7ff fe20 	bl	80010e4 <Envia_texto_UART>
			Envia_texto_UART("AT+NOTI1",300);	//NOTIFICA QUE CONECTOU
 80014a4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80014a8:	483c      	ldr	r0, [pc, #240]	; (800159c <iniciaBleHm10+0x340>)
 80014aa:	f7ff fe1b 	bl	80010e4 <Envia_texto_UART>
			Envia_texto_UART("AT+PIO11",300);	//1 - CONECT = 1  \  DISC = 0
 80014ae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80014b2:	483b      	ldr	r0, [pc, #236]	; (80015a0 <iniciaBleHm10+0x344>)
 80014b4:	f7ff fe16 	bl	80010e4 <Envia_texto_UART>
			snprintf(comando, sizeof(comando), "AT+NAME%s", BLE_DEVICE_NAME);
 80014b8:	4b31      	ldr	r3, [pc, #196]	; (8001580 <iniciaBleHm10+0x324>)
 80014ba:	4a3a      	ldr	r2, [pc, #232]	; (80015a4 <iniciaBleHm10+0x348>)
 80014bc:	2132      	movs	r1, #50	; 0x32
 80014be:	a801      	add	r0, sp, #4
 80014c0:	f008 feb6 	bl	800a230 <sniprintf>
			Envia_texto_UART(comando, 400); // Configura o nome no dispositivo
 80014c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80014c8:	a801      	add	r0, sp, #4
 80014ca:	f7ff fe0b 	bl	80010e4 <Envia_texto_UART>
			M_BLE_RESET
 80014ce:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80014d2:	4835      	ldr	r0, [pc, #212]	; (80015a8 <iniciaBleHm10+0x34c>)
 80014d4:	f7ff fe06 	bl	80010e4 <Envia_texto_UART>
			ble->sequenciaBLE = capturaAddr;
 80014d8:	2303      	movs	r3, #3
 80014da:	e759      	b.n	8001390 <iniciaBleHm10+0x134>
			stepBle = 8;
 80014dc:	2308      	movs	r3, #8
 80014de:	7033      	strb	r3, [r6, #0]
			while (tryingAddr < max_attempts) {
 80014e0:	783b      	ldrb	r3, [r7, #0]
 80014e2:	2b0e      	cmp	r3, #14
 80014e4:	d901      	bls.n	80014ea <iniciaBleHm10+0x28e>
				ble->sequenciaBLE = erro;//extrapolou as tentativas
 80014e6:	2305      	movs	r3, #5
 80014e8:	e752      	b.n	8001390 <iniciaBleHm10+0x134>
				stepBle = 9;
 80014ea:	2309      	movs	r3, #9
				MACRO_DEFINE_INTERRUPT
 80014ec:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001568 <iniciaBleHm10+0x30c>
				Envia_texto_UART("AT+ADDR?",300);//pede addr
 80014f0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80014f4:	482d      	ldr	r0, [pc, #180]	; (80015ac <iniciaBleHm10+0x350>)
				stepBle = 9;
 80014f6:	7033      	strb	r3, [r6, #0]
				Envia_texto_UART("AT+ADDR?",300);//pede addr
 80014f8:	f7ff fdf4 	bl	80010e4 <Envia_texto_UART>
				MACRO_DEFINE_INTERRUPT
 80014fc:	f8d8 0000 	ldr.w	r0, [r8]
 8001500:	4d1b      	ldr	r5, [pc, #108]	; (8001570 <iniciaBleHm10+0x314>)
 8001502:	6802      	ldr	r2, [r0, #0]
 8001504:	f104 0930 	add.w	r9, r4, #48	; 0x30
 8001508:	68d3      	ldr	r3, [r2, #12]
 800150a:	4649      	mov	r1, r9
 800150c:	f043 0310 	orr.w	r3, r3, #16
 8001510:	60d3      	str	r3, [r2, #12]
 8001512:	682b      	ldr	r3, [r5, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	6813      	ldr	r3, [r2, #0]
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	2240      	movs	r2, #64	; 0x40
 8001520:	f006 fb62 	bl	8007be8 <HAL_UART_Receive_DMA>
				if (ble->chave != 0){
 8001524:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8001528:	2b00      	cmp	r3, #0
 800152a:	d041      	beq.n	80015b0 <iniciaBleHm10+0x354>
					ble->sequenciaBLE = final;
 800152c:	2304      	movs	r3, #4
					MACRO_DEFINE_INTERRUPT
 800152e:	f8d8 0000 	ldr.w	r0, [r8]
					ble->sequenciaBLE = final;
 8001532:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
					MACRO_DEFINE_INTERRUPT
 8001536:	6802      	ldr	r2, [r0, #0]
 8001538:	4649      	mov	r1, r9
 800153a:	68d3      	ldr	r3, [r2, #12]
 800153c:	f043 0310 	orr.w	r3, r3, #16
 8001540:	60d3      	str	r3, [r2, #12]
 8001542:	682b      	ldr	r3, [r5, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	6813      	ldr	r3, [r2, #0]
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	2240      	movs	r2, #64	; 0x40
 8001550:	f006 fb4a 	bl	8007be8 <HAL_UART_Receive_DMA>
					tryingAddr=0;
 8001554:	2300      	movs	r3, #0
 8001556:	703b      	strb	r3, [r7, #0]
			if(tryingAddr >= max_attempts){
 8001558:	e686      	b.n	8001268 <iniciaBleHm10+0xc>
 800155a:	bf00      	nop
 800155c:	20002420 	.word	0x20002420
 8001560:	200000c0 	.word	0x200000c0
 8001564:	40010c00 	.word	0x40010c00
 8001568:	200000a4 	.word	0x200000a4
 800156c:	0800b343 	.word	0x0800b343
 8001570:	200000a0 	.word	0x200000a0
 8001574:	200000c1 	.word	0x200000c1
 8001578:	0800b34c 	.word	0x0800b34c
 800157c:	0800b355 	.word	0x0800b355
 8001580:	0800b35a 	.word	0x0800b35a
 8001584:	0800b340 	.word	0x0800b340
 8001588:	0800b364 	.word	0x0800b364
 800158c:	0800b36d 	.word	0x0800b36d
 8001590:	0800b376 	.word	0x0800b376
 8001594:	0800b37f 	.word	0x0800b37f
 8001598:	0800b388 	.word	0x0800b388
 800159c:	0800b391 	.word	0x0800b391
 80015a0:	0800b39a 	.word	0x0800b39a
 80015a4:	0800b3a3 	.word	0x0800b3a3
 80015a8:	0800b3ad 	.word	0x0800b3ad
 80015ac:	0800b3b6 	.word	0x0800b3b6
					tryingAddr++;
 80015b0:	783b      	ldrb	r3, [r7, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	b2db      	uxtb	r3, r3
			if(tryingAddr >= max_attempts){
 80015b6:	2b0e      	cmp	r3, #14
					tryingAddr++;
 80015b8:	703b      	strb	r3, [r7, #0]
			if(tryingAddr >= max_attempts){
 80015ba:	f67f ae55 	bls.w	8001268 <iniciaBleHm10+0xc>
 80015be:	e792      	b.n	80014e6 <iniciaBleHm10+0x28a>
			stepBle  =10;
 80015c0:	220a      	movs	r2, #10
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <iniciaBleHm10+0x3e0>)
			Envia_texto_UART("AT+ADTY0",300);	//DESBLOQUEIA CONEXA
 80015c4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80015c8:	481d      	ldr	r0, [pc, #116]	; (8001640 <iniciaBleHm10+0x3e4>)
			stepBle  =10;
 80015ca:	701a      	strb	r2, [r3, #0]
			Envia_texto_UART("AT+ADTY0",300);	//DESBLOQUEIA CONEXA
 80015cc:	f7ff fd8a 	bl	80010e4 <Envia_texto_UART>
			MACRO_RESET_BLE
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d6:	481b      	ldr	r0, [pc, #108]	; (8001644 <iniciaBleHm10+0x3e8>)
 80015d8:	f004 f87c 	bl	80056d4 <HAL_GPIO_WritePin>
 80015dc:	20c8      	movs	r0, #200	; 0xc8
 80015de:	f006 fb4d 	bl	8007c7c <osDelay>
 80015e2:	2201      	movs	r2, #1
 80015e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e8:	4816      	ldr	r0, [pc, #88]	; (8001644 <iniciaBleHm10+0x3e8>)
 80015ea:	f004 f873 	bl	80056d4 <HAL_GPIO_WritePin>
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <iniciaBleHm10+0x3ec>)
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 80015f0:	f104 0130 	add.w	r1, r4, #48	; 0x30
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	6802      	ldr	r2, [r0, #0]
 80015f8:	68d3      	ldr	r3, [r2, #12]
 80015fa:	f043 0310 	orr.w	r3, r3, #16
 80015fe:	60d3      	str	r3, [r2, #12]
			__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <iniciaBleHm10+0x3f0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	6813      	ldr	r3, [r2, #0]
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 800160e:	2240      	movs	r2, #64	; 0x40
 8001610:	f006 faea 	bl	8007be8 <HAL_UART_Receive_DMA>
			ble->SistemaInit = 1;
 8001614:	2301      	movs	r3, #1
 8001616:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
}
 800161a:	b00f      	add	sp, #60	; 0x3c
 800161c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001620:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001624:	490a      	ldr	r1, [pc, #40]	; (8001650 <iniciaBleHm10+0x3f4>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <iniciaBleHm10+0x3f8>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001628:	68ca      	ldr	r2, [r1, #12]
 800162a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800162e:	4313      	orrs	r3, r2
 8001630:	60cb      	str	r3, [r1, #12]
 8001632:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001636:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001638:	e7fd      	b.n	8001636 <iniciaBleHm10+0x3da>
 800163a:	bf00      	nop
 800163c:	20002420 	.word	0x20002420
 8001640:	0800b3bf 	.word	0x0800b3bf
 8001644:	40010c00 	.word	0x40010c00
 8001648:	200000a4 	.word	0x200000a4
 800164c:	200000a0 	.word	0x200000a0
 8001650:	e000ed00 	.word	0xe000ed00
 8001654:	05fa0004 	.word	0x05fa0004

08001658 <BluetoothInit>:
uint8_t BluetoothInit(Bluetooth *ble, UART_HandleTypeDef *bluetoothUARTHandle, DMA_HandleTypeDef *bluetoothUARTDMAHandle, osMessageQId *filaRX, osMessageQId *filaTX){
 8001658:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ble->filaComandosRX = filaRX;
 800165a:	6283      	str	r3, [r0, #40]	; 0x28
	UARTHandle 			= ble->UARTHandle;
 800165c:	4d11      	ldr	r5, [pc, #68]	; (80016a4 <BluetoothInit+0x4c>)
	ble->filaComandosTX = filaTX;
 800165e:	9b06      	ldr	r3, [sp, #24]
	ble->UARTDMAHandle 	= bluetoothUARTDMAHandle;
 8001660:	e9c0 1200 	strd	r1, r2, [r0]
	ble->filaComandosTX = filaTX;
 8001664:	62c3      	str	r3, [r0, #44]	; 0x2c
	UARTHandle 			= ble->UARTHandle;
 8001666:	6029      	str	r1, [r5, #0]
	ble->JanelaConexao = 120;//120 segundos
 8001668:	2378      	movs	r3, #120	; 0x78
	ble->_BleCommCount  = 0;
 800166a:	2500      	movs	r5, #0
uint8_t BluetoothInit(Bluetooth *ble, UART_HandleTypeDef *bluetoothUARTHandle, DMA_HandleTypeDef *bluetoothUARTDMAHandle, osMessageQId *filaRX, osMessageQId *filaTX){
 800166c:	4604      	mov	r4, r0
	BluetoothAddComp(ble, &BLEPedeSenha,   		"RX_PEDE_SENHA",  			RX_PEDE_SENHA,   			ComandoConexao);
 800166e:	2602      	movs	r6, #2
	UARTDMAHandle 		= ble->UARTDMAHandle;
 8001670:	490d      	ldr	r1, [pc, #52]	; (80016a8 <BluetoothInit+0x50>)
	ble->_BleCommCount  = 0;
 8001672:	f880 5144 	strb.w	r5, [r0, #324]	; 0x144
	ble->JanelaConexao = 120;//120 segundos
 8001676:	f880 3053 	strb.w	r3, [r0, #83]	; 0x53
	UARTDMAHandle 		= ble->UARTDMAHandle;
 800167a:	600a      	str	r2, [r1, #0]
	iniciaBleHm10(ble);
 800167c:	f7ff fdee 	bl	800125c <iniciaBleHm10>
	BluetoothAddComp(ble, &BLEPedeSenha,   		"RX_PEDE_SENHA",  			RX_PEDE_SENHA,   			ComandoConexao);
 8001680:	2342      	movs	r3, #66	; 0x42
 8001682:	4620      	mov	r0, r4
 8001684:	4a09      	ldr	r2, [pc, #36]	; (80016ac <BluetoothInit+0x54>)
 8001686:	490a      	ldr	r1, [pc, #40]	; (80016b0 <BluetoothInit+0x58>)
 8001688:	9600      	str	r6, [sp, #0]
 800168a:	f7ff fd03 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(ble, &BLERecebeuSenha,     "RX_RECEBEU_SENHA",        	RX_RECEBEU_SENHA,          	ComandoConexao);
 800168e:	2340      	movs	r3, #64	; 0x40
 8001690:	4620      	mov	r0, r4
 8001692:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <BluetoothInit+0x5c>)
 8001694:	4908      	ldr	r1, [pc, #32]	; (80016b8 <BluetoothInit+0x60>)
 8001696:	9600      	str	r6, [sp, #0]
 8001698:	f7ff fcfc 	bl	8001094 <BluetoothAddComp>
}
 800169c:	4628      	mov	r0, r5
 800169e:	b002      	add	sp, #8
 80016a0:	bd70      	pop	{r4, r5, r6, pc}
 80016a2:	bf00      	nop
 80016a4:	200000a4 	.word	0x200000a4
 80016a8:	200000a0 	.word	0x200000a0
 80016ac:	0800b3c8 	.word	0x0800b3c8
 80016b0:	2000008c 	.word	0x2000008c
 80016b4:	0800b3d6 	.word	0x0800b3d6
 80016b8:	20000094 	.word	0x20000094

080016bc <bluetooth10ms>:
void bluetooth10ms(Bluetooth* ble){
 80016bc:	b510      	push	{r4, lr}

	/*INCREMENTO DE INATIVIDADE-------------------*/
	(ble->msIdle<=DEF_TEMPO_MAX_S_MSG_LOW)?ble->msIdle++:0;
 80016be:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
void bluetooth10ms(Bluetooth* ble){
 80016c2:	4604      	mov	r4, r0
	(ble->msIdle<=DEF_TEMPO_MAX_S_MSG_LOW)?ble->msIdle++:0;
 80016c4:	2b78      	cmp	r3, #120	; 0x78
 80016c6:	bf9c      	itt	ls
 80016c8:	3301      	addls	r3, #1
 80016ca:	f8a0 3056 	strhls.w	r3, [r0, #86]	; 0x56

	/*MONITOR INATIVIDADE-------------------------*/
	if(ble->JanelaConexao>0){
 80016ce:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
 80016d2:	b17b      	cbz	r3, 80016f4 <bluetooth10ms+0x38>
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_HIGH)	{
 80016d4:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 80016d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80016dc:	d901      	bls.n	80016e2 <bluetooth10ms+0x26>
			BluetoothDescon(ble);
 80016de:	f7ff fd79 	bl	80011d4 <BluetoothDescon>
	}
	else{
		__NOP();
	}

	if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_LOW)	{
 80016e2:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 80016e6:	2b78      	cmp	r3, #120	; 0x78
 80016e8:	d906      	bls.n	80016f8 <bluetooth10ms+0x3c>
		BluetoothDescon(ble);
 80016ea:	4620      	mov	r0, r4
	}
}
 80016ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BluetoothDescon(ble);
 80016f0:	f7ff bd70 	b.w	80011d4 <BluetoothDescon>
		__NOP();
 80016f4:	bf00      	nop
 80016f6:	e7f4      	b.n	80016e2 <bluetooth10ms+0x26>
}
 80016f8:	bd10      	pop	{r4, pc}

080016fa <bluetooth1000ms>:
void bluetooth1000ms(Bluetooth* ble){
	if(ble->JanelaConexao>0)
 80016fa:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
 80016fe:	b113      	cbz	r3, 8001706 <bluetooth1000ms+0xc>
		ble->JanelaConexao--;
 8001700:	3b01      	subs	r3, #1
 8001702:	f880 3053 	strb.w	r3, [r0, #83]	; 0x53
}
 8001706:	4770      	bx	lr

08001708 <cancelaAntecipacao>:
void cancelaAntecipacao(Bluetooth* ble){
	if(!ble->SistemaInit)
 8001708:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 800170c:	b90b      	cbnz	r3, 8001712 <cancelaAntecipacao+0xa>
		BluetoothDescon(ble);
 800170e:	f7ff bd61 	b.w	80011d4 <BluetoothDescon>
}
 8001712:	4770      	bx	lr

08001714 <BluetoothPutFila>:
void BluetoothPutFila(Bluetooth* ble){
 8001714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001718:	4604      	mov	r4, r0
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 800171a:	2600      	movs	r6, #0
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 800171c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80017d0 <BluetoothPutFila+0xbc>
 8001720:	f100 0730 	add.w	r7, r0, #48	; 0x30
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 8001724:	f894 3144 	ldrb.w	r3, [r4, #324]	; 0x144
 8001728:	b2f5      	uxtb	r5, r6
 800172a:	42ab      	cmp	r3, r5
 800172c:	d801      	bhi.n	8001732 <BluetoothPutFila+0x1e>
}
 800172e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if( ble->_RxDataArr[1] == (ble->_BleCommArr[i]->_comando)){
 8001732:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8001736:	f8d5 a090 	ldr.w	sl, [r5, #144]	; 0x90
 800173a:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800173e:	f89a 3000 	ldrb.w	r3, [sl]
 8001742:	429a      	cmp	r2, r3
 8001744:	d12a      	bne.n	800179c <BluetoothPutFila+0x88>
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 8001746:	f894 9051 	ldrb.w	r9, [r4, #81]	; 0x51
 800174a:	4638      	mov	r0, r7
 800174c:	f1a9 0102 	sub.w	r1, r9, #2
 8001750:	b289      	uxth	r1, r1
 8001752:	f7ff fcdd 	bl	8001110 <CRC16>
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 8001756:	44a1      	add	r9, r4
 8001758:	f899 202e 	ldrb.w	r2, [r9, #46]	; 0x2e
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 800175c:	b203      	sxth	r3, r0
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 800175e:	b2c0      	uxtb	r0, r0
 8001760:	4282      	cmp	r2, r0
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 8001762:	f8a8 3000 	strh.w	r3, [r8]
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 8001766:	d105      	bne.n	8001774 <BluetoothPutFila+0x60>
 8001768:	f899 202f 	ldrb.w	r2, [r9, #47]	; 0x2f
 800176c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001770:	429a      	cmp	r2, r3
 8001772:	d003      	beq.n	800177c <BluetoothPutFila+0x68>
}
 8001774:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				BluetoothErroCRC();//erro de CRC
 8001778:	f7ff bd1c 	b.w	80011b4 <BluetoothErroCRC>
			if(ble->_BleCommArr[i]->_tipo == ComandoConexao ){
 800177c:	f89a 3001 	ldrb.w	r3, [sl, #1]
				cancelaAntecipacao(ble);
 8001780:	4620      	mov	r0, r4
			if(ble->_BleCommArr[i]->_tipo == ComandoConexao ){
 8001782:	2b02      	cmp	r3, #2
 8001784:	d110      	bne.n	80017a8 <BluetoothPutFila+0x94>
				cancelaAntecipacao(ble);
 8001786:	f7ff ffbf 	bl	8001708 <cancelaAntecipacao>
				switch (ble->_RxDataArr[1]) {
 800178a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800178e:	2b40      	cmp	r3, #64	; 0x40
 8001790:	d006      	beq.n	80017a0 <BluetoothPutFila+0x8c>
 8001792:	2b42      	cmp	r3, #66	; 0x42
 8001794:	d102      	bne.n	800179c <BluetoothPutFila+0x88>
					solicitacaoSenhaBluetooh(ble);
 8001796:	4620      	mov	r0, r4
 8001798:	f7ff fcf4 	bl	8001184 <solicitacaoSenhaBluetooh>
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 800179c:	3601      	adds	r6, #1
 800179e:	e7c1      	b.n	8001724 <BluetoothPutFila+0x10>
					avaliaSenhaRecebidaBluetooh(ble);
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff fd33 	bl	800120c <avaliaSenhaRecebidaBluetooh>
					break;
 80017a6:	e7f9      	b.n	800179c <BluetoothPutFila+0x88>
			}else if(ble->_BleCommArr[i]->_tipo == ComandoBasico && ble->MaquinaConexao == RX_VALIDADO ){
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d10e      	bne.n	80017ca <BluetoothPutFila+0xb6>
 80017ac:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d10a      	bne.n	80017ca <BluetoothPutFila+0xb6>
				cancelaAntecipacao(ble);
 80017b4:	f7ff ffa8 	bl	8001708 <cancelaAntecipacao>
				osMessagePut(*ble->filaComandosRX, ble->_BleCommArr[i]->_comando, 0);
 80017b8:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 80017bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017be:	2200      	movs	r2, #0
 80017c0:	7809      	ldrb	r1, [r1, #0]
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	f006 fb25 	bl	8007e12 <osMessagePut>
 80017c8:	e7e8      	b.n	800179c <BluetoothPutFila+0x88>
				BluetoothDescon(ble);
 80017ca:	f7ff fd03 	bl	80011d4 <BluetoothDescon>
 80017ce:	e7e5      	b.n	800179c <BluetoothPutFila+0x88>
 80017d0:	2000009c 	.word	0x2000009c

080017d4 <BLEDMA_IrqHandler>:
{
 80017d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(__HAL_DMA_GET_IT_SOURCE(UARTDMAHandle, DMA_IT_TC) != RESET){   // if the source is TC
 80017d8:	4e6d      	ldr	r6, [pc, #436]	; (8001990 <BLEDMA_IrqHandler+0x1bc>)
{
 80017da:	4604      	mov	r4, r0
	if(__HAL_DMA_GET_IT_SOURCE(UARTDMAHandle, DMA_IT_TC) != RESET){   // if the source is TC
 80017dc:	6833      	ldr	r3, [r6, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	0792      	lsls	r2, r2, #30
 80017e4:	d53a      	bpl.n	800185c <BLEDMA_IrqHandler+0x88>
		__HAL_DMA_CLEAR_FLAG(UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(UARTDMAHandle));
 80017e6:	4a6b      	ldr	r2, [pc, #428]	; (8001994 <BLEDMA_IrqHandler+0x1c0>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d039      	beq.n	8001860 <BLEDMA_IrqHandler+0x8c>
 80017ec:	3214      	adds	r2, #20
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d038      	beq.n	8001864 <BLEDMA_IrqHandler+0x90>
 80017f2:	3214      	adds	r2, #20
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d037      	beq.n	8001868 <BLEDMA_IrqHandler+0x94>
 80017f8:	3214      	adds	r2, #20
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d037      	beq.n	800186e <BLEDMA_IrqHandler+0x9a>
 80017fe:	3214      	adds	r2, #20
 8001800:	4293      	cmp	r3, r2
 8001802:	d037      	beq.n	8001874 <BLEDMA_IrqHandler+0xa0>
 8001804:	3214      	adds	r2, #20
 8001806:	4293      	cmp	r3, r2
 8001808:	bf0c      	ite	eq
 800180a:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 800180e:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
		ble->msIdle=0;
 8001812:	f04f 0800 	mov.w	r8, #0
		__HAL_DMA_CLEAR_FLAG(UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(UARTDMAHandle));
 8001816:	4960      	ldr	r1, [pc, #384]	; (8001998 <BLEDMA_IrqHandler+0x1c4>)
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 8001818:	f104 075e 	add.w	r7, r4, #94	; 0x5e
		__HAL_DMA_CLEAR_FLAG(UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(UARTDMAHandle));
 800181c:	604a      	str	r2, [r1, #4]
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - UARTDMAHandle->Instance->CNDTR;
 800181e:	685b      	ldr	r3, [r3, #4]
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 8001820:	f104 0530 	add.w	r5, r4, #48	; 0x30
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - UARTDMAHandle->Instance->CNDTR;
 8001824:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001828:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 800182c:	4629      	mov	r1, r5
 800182e:	4638      	mov	r0, r7
		ble->msIdle=0;
 8001830:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 8001834:	f008 feff 	bl	800a636 <strcpy>
		switch(ble->MaquinaConexao){
 8001838:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
		ble->msDesconectado = 0;
 800183c:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
		switch(ble->MaquinaConexao){
 8001840:	b1db      	cbz	r3, 800187a <BLEDMA_IrqHandler+0xa6>
 8001842:	3b01      	subs	r3, #1
 8001844:	2b01      	cmp	r3, #1
 8001846:	f240 8084 	bls.w	8001952 <BLEDMA_IrqHandler+0x17e>
		UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 800184a:	2240      	movs	r2, #64	; 0x40
		UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
 800184c:	6833      	ldr	r3, [r6, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60dd      	str	r5, [r3, #12]
		UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 8001852:	605a      	str	r2, [r3, #4]
		UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]
}
 800185c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__HAL_DMA_CLEAR_FLAG(UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(UARTDMAHandle));
 8001860:	2202      	movs	r2, #2
 8001862:	e7d6      	b.n	8001812 <BLEDMA_IrqHandler+0x3e>
 8001864:	2220      	movs	r2, #32
 8001866:	e7d4      	b.n	8001812 <BLEDMA_IrqHandler+0x3e>
 8001868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186c:	e7d1      	b.n	8001812 <BLEDMA_IrqHandler+0x3e>
 800186e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001872:	e7ce      	b.n	8001812 <BLEDMA_IrqHandler+0x3e>
 8001874:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001878:	e7cb      	b.n	8001812 <BLEDMA_IrqHandler+0x3e>
			ble->ss = strstr(ble->StringRecebida, "OK+CONN");
 800187a:	4638      	mov	r0, r7
 800187c:	4947      	ldr	r1, [pc, #284]	; (800199c <BLEDMA_IrqHandler+0x1c8>)
			ble->StatusSenha = false;//chave de validacao
 800187e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
			ble->ss = NULL;
 8001882:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
			ble->ss = strstr(ble->StringRecebida, "OK+CONN");
 8001886:	f008 fde7 	bl	800a458 <strstr>
 800188a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
			if (((ble->ss != NULL  && ble->RxSize == 7) || MACRO_LE_BT_STATUS) && ble->SistemaInit){
 800188e:	2800      	cmp	r0, #0
 8001890:	d051      	beq.n	8001936 <BLEDMA_IrqHandler+0x162>
 8001892:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001896:	2b07      	cmp	r3, #7
 8001898:	d14d      	bne.n	8001936 <BLEDMA_IrqHandler+0x162>
 800189a:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d151      	bne.n	8001946 <BLEDMA_IrqHandler+0x172>
			ble->ss = NULL;
 80018a2:	2300      	movs	r3, #0
			ble->ss = strstr(ble->StringRecebida, "OK+ADDR:");
 80018a4:	4638      	mov	r0, r7
 80018a6:	493e      	ldr	r1, [pc, #248]	; (80019a0 <BLEDMA_IrqHandler+0x1cc>)
			ble->ss = NULL;
 80018a8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
			ble->ss = strstr(ble->StringRecebida, "OK+ADDR:");
 80018ac:	f008 fdd4 	bl	800a458 <strstr>
 80018b0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
			if (ble->ss != NULL){
 80018b4:	2800      	cmp	r0, #0
 80018b6:	d0c8      	beq.n	800184a <BLEDMA_IrqHandler+0x76>
				ble->PontoExato = ble->ss - ble->StringRecebida;
 80018b8:	1bc0      	subs	r0, r0, r7
 80018ba:	4f3a      	ldr	r7, [pc, #232]	; (80019a4 <BLEDMA_IrqHandler+0x1d0>)
 80018bc:	f100 0237 	add.w	r2, r0, #55	; 0x37
 80018c0:	463b      	mov	r3, r7
 80018c2:	f104 0143 	add.w	r1, r4, #67	; 0x43
 80018c6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
				for (int i = 0; i < 12; i++) {
 80018ca:	4422      	add	r2, r4
 80018cc:	4401      	add	r1, r0
					addr8Bits[i] = ble->_RxDataArr[i+ble->PontoExato+8];
 80018ce:	f812 0f01 	ldrb.w	r0, [r2, #1]!
				for (int i = 0; i < 12; i++) {
 80018d2:	4291      	cmp	r1, r2
					addr8Bits[i] = ble->_RxDataArr[i+ble->PontoExato+8];
 80018d4:	f807 0b01 	strb.w	r0, [r7], #1
				for (int i = 0; i < 12; i++) {
 80018d8:	d1f9      	bne.n	80018ce <BLEDMA_IrqHandler+0xfa>
				addr32Bits[0] = (addr8Bits[0]<<24)+(addr8Bits[1]<<16)+(addr8Bits[2]<<8)+(addr8Bits[3]);
 80018da:	785a      	ldrb	r2, [r3, #1]
 80018dc:	7818      	ldrb	r0, [r3, #0]
 80018de:	0412      	lsls	r2, r2, #16
 80018e0:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 80018e4:	7898      	ldrb	r0, [r3, #2]
 80018e6:	4930      	ldr	r1, [pc, #192]	; (80019a8 <BLEDMA_IrqHandler+0x1d4>)
 80018e8:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 80018ec:	78d8      	ldrb	r0, [r3, #3]
 80018ee:	4402      	add	r2, r0
 80018f0:	600a      	str	r2, [r1, #0]
				addr32Bits[1] = (addr8Bits[4]<<24)+(addr8Bits[5]<<16)+(addr8Bits[6]<<8)+(addr8Bits[7]);
 80018f2:	795a      	ldrb	r2, [r3, #5]
 80018f4:	7918      	ldrb	r0, [r3, #4]
 80018f6:	0412      	lsls	r2, r2, #16
 80018f8:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 80018fc:	7998      	ldrb	r0, [r3, #6]
 80018fe:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8001902:	79d8      	ldrb	r0, [r3, #7]
 8001904:	4402      	add	r2, r0
 8001906:	604a      	str	r2, [r1, #4]
				addr32Bits[2] = (addr8Bits[8]<<24)+(addr8Bits[9]<<16)+(addr8Bits[10]<<8)+(addr8Bits[11]);
 8001908:	7a5a      	ldrb	r2, [r3, #9]
 800190a:	7a18      	ldrb	r0, [r3, #8]
 800190c:	0412      	lsls	r2, r2, #16
 800190e:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 8001912:	7a98      	ldrb	r0, [r3, #10]
 8001914:	7adb      	ldrb	r3, [r3, #11]
 8001916:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 800191a:	4413      	add	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
				ble->chave = CRC16(addr8Bits,12);
 800191e:	4821      	ldr	r0, [pc, #132]	; (80019a4 <BLEDMA_IrqHandler+0x1d0>)
 8001920:	210c      	movs	r1, #12
 8001922:	f7ff fbf5 	bl	8001110 <CRC16>
				osSignalSet(TaskBluetoothHandle, CHEGOU_ADDR_BLE);
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <BLEDMA_IrqHandler+0x1d8>)
				ble->chave = CRC16(addr8Bits,12);
 8001928:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				osSignalSet(TaskBluetoothHandle, CHEGOU_ADDR_BLE);
 800192c:	21bf      	movs	r1, #191	; 0xbf
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	f006 f9ed 	bl	8007d0e <osSignalSet>
 8001934:	e789      	b.n	800184a <BLEDMA_IrqHandler+0x76>
			if (((ble->ss != NULL  && ble->RxSize == 7) || MACRO_LE_BT_STATUS) && ble->SistemaInit){
 8001936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800193a:	481d      	ldr	r0, [pc, #116]	; (80019b0 <BLEDMA_IrqHandler+0x1dc>)
 800193c:	f003 fec4 	bl	80056c8 <HAL_GPIO_ReadPin>
 8001940:	2800      	cmp	r0, #0
 8001942:	d1aa      	bne.n	800189a <BLEDMA_IrqHandler+0xc6>
 8001944:	e7ad      	b.n	80018a2 <BLEDMA_IrqHandler+0xce>
				ble->MaquinaConexao = RX_CONECTADO;
 8001946:	2301      	movs	r3, #1
 8001948:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
				ble->StatusConexao 	= true;
 800194c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8001950:	e7a7      	b.n	80018a2 <BLEDMA_IrqHandler+0xce>
			ble->ss = strstr(ble->StringRecebida, "LOST");
 8001952:	4638      	mov	r0, r7
 8001954:	4917      	ldr	r1, [pc, #92]	; (80019b4 <BLEDMA_IrqHandler+0x1e0>)
			ble->ss = NULL;
 8001956:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
			ble->ss = strstr(ble->StringRecebida, "LOST");
 800195a:	f008 fd7d 	bl	800a458 <strstr>
 800195e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
			if (ble->ss != NULL || !MACRO_LE_BT_STATUS){
 8001962:	b128      	cbz	r0, 8001970 <BLEDMA_IrqHandler+0x19c>
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 8001964:	2300      	movs	r3, #0
 8001966:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
				ble->StatusSenha 		= false;//chave de validacao
 800196a:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
				ble->StatusConexao 		= false;
 800196e:	e76c      	b.n	800184a <BLEDMA_IrqHandler+0x76>
			if (ble->ss != NULL || !MACRO_LE_BT_STATUS){
 8001970:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001974:	480e      	ldr	r0, [pc, #56]	; (80019b0 <BLEDMA_IrqHandler+0x1dc>)
 8001976:	f003 fea7 	bl	80056c8 <HAL_GPIO_ReadPin>
 800197a:	2800      	cmp	r0, #0
 800197c:	d0f2      	beq.n	8001964 <BLEDMA_IrqHandler+0x190>
			}else if(ble->SistemaInit){
 800197e:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8001982:	2b00      	cmp	r3, #0
 8001984:	f43f af61 	beq.w	800184a <BLEDMA_IrqHandler+0x76>
				BluetoothPutFila(ble);
 8001988:	4620      	mov	r0, r4
 800198a:	f7ff fec3 	bl	8001714 <BluetoothPutFila>
 800198e:	e75c      	b.n	800184a <BLEDMA_IrqHandler+0x76>
 8001990:	200000a0 	.word	0x200000a0
 8001994:	40020008 	.word	0x40020008
 8001998:	40020000 	.word	0x40020000
 800199c:	0800b3e7 	.word	0x0800b3e7
 80019a0:	0800b3ef 	.word	0x0800b3ef
 80019a4:	200000b4 	.word	0x200000b4
 80019a8:	200000a8 	.word	0x200000a8
 80019ac:	20001ae8 	.word	0x20001ae8
 80019b0:	40010c00 	.word	0x40010c00
 80019b4:	0800b3f8 	.word	0x0800b3f8

080019b8 <BLEUSART_IrqHandler>:
	if (UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <BLEUSART_IrqHandler+0x40>)
{
 80019ba:	b082      	sub	sp, #8
	if (UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	06d2      	lsls	r2, r2, #27
 80019c4:	d515      	bpl.n	80019f2 <BLEUSART_IrqHandler+0x3a>
		tmp = UARTHandle->Instance->SR;                 /* Read status register */
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	9201      	str	r2, [sp, #4]
		tmp = UARTHandle->Instance->DR;                 /* Read data register */
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	9201      	str	r2, [sp, #4]
		__HAL_DMA_DISABLE (UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <BLEUSART_IrqHandler+0x44>)
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	6811      	ldr	r1, [r2, #0]
 80019d6:	f021 0101 	bic.w	r1, r1, #1
 80019da:	6011      	str	r1, [r2, #0]
		__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);		// HABILITA idle line INTERRUPT
 80019dc:	68d9      	ldr	r1, [r3, #12]
 80019de:	f041 0110 	orr.w	r1, r1, #16
 80019e2:	60d9      	str	r1, [r3, #12]
		__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);		// HABILITA O DMA Tx cplt INTERRUPT
 80019e4:	6813      	ldr	r3, [r2, #0]
 80019e6:	f043 0302 	orr.w	r3, r3, #2
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	b002      	add	sp, #8
		BLEDMA_IrqHandler (ble);
 80019ee:	f7ff bef1 	b.w	80017d4 <BLEDMA_IrqHandler>
}
 80019f2:	b002      	add	sp, #8
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	200000a4 	.word	0x200000a4
 80019fc:	200000a0 	.word	0x200000a0

08001a00 <vetor4b_TO_Double>:
 *  Created on: Dec 6, 2023
 *      Author: lucas
 */
#include "Conversoes.h"

void vetor4b_TO_Double(double *destino, uint8_t *vetor, uint8_t inicio) {
 8001a00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001a04:	4605      	mov	r5, r0
	// Verificar se o destino e o vetor não são nulos
	floatAsBytes myValue;

	// Copia os bytes do double para o vetor, um por vez, começando no índice 'inicio'
	for (int i = 0; i < 4; ++i) {
 8001a06:	2600      	movs	r6, #0
		myValue.bytes[i] = vetor[inicio + i] ;
		printf("%d \n",myValue.bytes[i]);
 8001a08:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8001a34 <vetor4b_TO_Double+0x34>
 8001a0c:	188c      	adds	r4, r1, r2
 8001a0e:	af01      	add	r7, sp, #4
		myValue.bytes[i] = vetor[inicio + i] ;
 8001a10:	f814 1b01 	ldrb.w	r1, [r4], #1
		printf("%d \n",myValue.bytes[i]);
 8001a14:	4640      	mov	r0, r8
	for (int i = 0; i < 4; ++i) {
 8001a16:	3601      	adds	r6, #1
		myValue.bytes[i] = vetor[inicio + i] ;
 8001a18:	f807 1b01 	strb.w	r1, [r7], #1
		printf("%d \n",myValue.bytes[i]);
 8001a1c:	f008 fb9a 	bl	800a154 <iprintf>
	for (int i = 0; i < 4; ++i) {
 8001a20:	2e04      	cmp	r6, #4
 8001a22:	d1f5      	bne.n	8001a10 <vetor4b_TO_Double+0x10>
	}

	*destino = (double)myValue.value;
 8001a24:	9801      	ldr	r0, [sp, #4]
 8001a26:	f7fe fcff 	bl	8000428 <__aeabi_f2d>
 8001a2a:	e9c5 0100 	strd	r0, r1, [r5]
}
 8001a2e:	b002      	add	sp, #8
 8001a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a34:	0800b5fd 	.word	0x0800b5fd

08001a38 <vetor2b_TO_uint16>:
void vetor2b_TO_uint16(uint16_t *destino, uint8_t *vetor, uint8_t inicio) {
 8001a38:	b410      	push	{r4}

	// Verificar se o destino e o vetor não são nulos
	if (destino == NULL || vetor == NULL) {
 8001a3a:	b100      	cbz	r0, 8001a3e <vetor2b_TO_uint16+0x6>
 8001a3c:	b919      	cbnz	r1, 8001a46 <vetor2b_TO_uint16+0xe>
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <vetor2b_TO_uint16+0x20>)
		return;
	}

	*destino = vetor[inicio] << 8 | vetor[inicio+1];
}
 8001a40:	bc10      	pop	{r4}
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 8001a42:	f008 bbed 	b.w	800a220 <puts>
	*destino = vetor[inicio] << 8 | vetor[inicio+1];
 8001a46:	5c8c      	ldrb	r4, [r1, r2]
 8001a48:	4411      	add	r1, r2
 8001a4a:	784b      	ldrb	r3, [r1, #1]
 8001a4c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001a50:	8003      	strh	r3, [r0, #0]
}
 8001a52:	bc10      	pop	{r4}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	0800b602 	.word	0x0800b602

08001a5c <vetor2b_TO_Double>:
void vetor2b_TO_Double(double *destino, uint8_t *vetor, uint8_t inicio) {
 8001a5c:	b510      	push	{r4, lr}

	// Verificar se o destino e o vetor não são nulos
	if (destino == NULL || vetor == NULL) {
 8001a5e:	4604      	mov	r4, r0
 8001a60:	b100      	cbz	r0, 8001a64 <vetor2b_TO_Double+0x8>
 8001a62:	b921      	cbnz	r1, 8001a6e <vetor2b_TO_Double+0x12>
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
		return;
	}

	*destino = vetor[inicio] << 8 | vetor[inicio+1];
}
 8001a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 8001a68:	4806      	ldr	r0, [pc, #24]	; (8001a84 <vetor2b_TO_Double+0x28>)
 8001a6a:	f008 bbd9 	b.w	800a220 <puts>
	*destino = vetor[inicio] << 8 | vetor[inicio+1];
 8001a6e:	5c88      	ldrb	r0, [r1, r2]
 8001a70:	4411      	add	r1, r2
 8001a72:	784b      	ldrb	r3, [r1, #1]
 8001a74:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001a78:	f7fe fcc4 	bl	8000404 <__aeabi_i2d>
 8001a7c:	e9c4 0100 	strd	r0, r1, [r4]
}
 8001a80:	bd10      	pop	{r4, pc}
 8001a82:	bf00      	nop
 8001a84:	0800b602 	.word	0x0800b602

08001a88 <float_TO_vetor4b>:
		myValue.bytes[i] = vetor[inicio + i];
	}

	*destino = myValue.value;
}
void float_TO_vetor4b(double valor, uint8_t *vetor, uint8_t inicio) {
 8001a88:	b538      	push	{r3, r4, r5, lr}
 8001a8a:	4615      	mov	r5, r2
 8001a8c:	461c      	mov	r4, r3

	// Cria uma união e armazena o valor float nela
	floatAsBytes myValue;
	myValue.value = (float)valor;
 8001a8e:	f7fe ffdd 	bl	8000a4c <__aeabi_d2f>

	// Copia os bytes do float para o vetor, um por vez, começando no índice 'inicio'
	for (int i = 0; i < sizeof(myValue.value); ++i) {
		vetor[inicio + i] = myValue.bytes[i];
 8001a92:	5128      	str	r0, [r5, r4]
	}
}
 8001a94:	bd38      	pop	{r3, r4, r5, pc}

08001a96 <EepromAddVar>:
		default:
			break;
		}
	}
}
uint8_t EepromAddVar(Eeprom *eeprom, bool resetavel, EepromVariaveis* _var, char* _name, uint16_t addr, TypeData tipo, uint32_t minimo, uint32_t padrao,uint32_t maximo, void *_addrVar){
 8001a96:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a9a:	4699      	mov	r9, r3
 8001a9c:	e9dd 530e 	ldrd	r5, r3, [sp, #56]	; 0x38
 8001aa0:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	; 0x30
 8001aa4:	4680      	mov	r8, r0
	//todo implementar erros e tratar de alguma forma
	//Make space before passing the object name to the nexcomp struct
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001aa6:	4648      	mov	r0, r9
uint8_t EepromAddVar(Eeprom *eeprom, bool resetavel, EepromVariaveis* _var, char* _name, uint16_t addr, TypeData tipo, uint32_t minimo, uint32_t padrao,uint32_t maximo, void *_addrVar){
 8001aa8:	4614      	mov	r4, r2
 8001aaa:	468a      	mov	sl, r1
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001aac:	f7fe fb50 	bl	8000150 <strlen>
 8001ab0:	3001      	adds	r0, #1
uint8_t EepromAddVar(Eeprom *eeprom, bool resetavel, EepromVariaveis* _var, char* _name, uint16_t addr, TypeData tipo, uint32_t minimo, uint32_t padrao,uint32_t maximo, void *_addrVar){
 8001ab2:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001ab6:	f008 f9d7 	bl	8009e68 <malloc>

	//Nome do objeto
	strcpy(_var->objname, _name);
 8001aba:	4649      	mov	r1, r9
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001abc:	6060      	str	r0, [r4, #4]
	strcpy(_var->objname, _name);
 8001abe:	f008 fdba 	bl	800a636 <strcpy>

	//Endereco
	_var->_addrEprom = addr;
 8001ac2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28

	//torna nao resetavel ao softreset
	_var->flagResetavel = resetavel;


	switch (tipo) {
 8001ac6:	f1bb 0f02 	cmp.w	fp, #2
 8001aca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	_var->_addrEprom = addr;
 8001acc:	8122      	strh	r2, [r4, #8]
	_var->_sizeType = tipo;
 8001ace:	f884 b01c 	strb.w	fp, [r4, #28]
	_var->flagResetavel = resetavel;
 8001ad2:	f884 a000 	strb.w	sl, [r4]
	switch (tipo) {
 8001ad6:	d017      	beq.n	8001b08 <EepromAddVar+0x72>
 8001ad8:	f1bb 0f04 	cmp.w	fp, #4
 8001adc:	d01c      	beq.n	8001b18 <EepromAddVar+0x82>
 8001ade:	f1bb 0f01 	cmp.w	fp, #1
 8001ae2:	d106      	bne.n	8001af2 <EepromAddVar+0x5c>
	case DATA8BITS:
		//definindo minimos maximos e default
		_var->minValue 		= (uint8_t)minimo;
 8001ae4:	b2ff      	uxtb	r7, r7
		_var->defaultValue 	= (uint8_t)padrao;
 8001ae6:	b2f6      	uxtb	r6, r6
		_var->maxValue 		= (uint8_t)maximo;
 8001ae8:	b2ed      	uxtb	r5, r5
		_var->minValue 		= (uint8_t)minimo;
 8001aea:	6167      	str	r7, [r4, #20]
		_var->defaultValue 	= (uint8_t)padrao;
 8001aec:	6126      	str	r6, [r4, #16]
		_var->maxValue 		= (uint8_t)maximo;
 8001aee:	61a5      	str	r5, [r4, #24]
		_var->ptr8			= (uint8_t *)_addrVar;
 8001af0:	6223      	str	r3, [r4, #32]
		//erro, parametro errado
		break;
	}

	//Adiciona o componente na respectiva estrutura
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _var;
 8001af2:	f898 3124 	ldrb.w	r3, [r8, #292]	; 0x124
	eeprom->_EepromVarCount++;

	return 0;
}
 8001af6:	2000      	movs	r0, #0
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _var;
 8001af8:	eb08 0283 	add.w	r2, r8, r3, lsl #2
	eeprom->_EepromVarCount++;
 8001afc:	3301      	adds	r3, #1
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _var;
 8001afe:	6354      	str	r4, [r2, #52]	; 0x34
	eeprom->_EepromVarCount++;
 8001b00:	f888 3124 	strb.w	r3, [r8, #292]	; 0x124
}
 8001b04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		_var->minValue 		= (uint16_t)minimo;
 8001b08:	b2bf      	uxth	r7, r7
		_var->defaultValue 	= (uint16_t)padrao;
 8001b0a:	b2b6      	uxth	r6, r6
		_var->maxValue 		= (uint16_t)maximo;
 8001b0c:	b2ad      	uxth	r5, r5
		_var->minValue 		= (uint16_t)minimo;
 8001b0e:	6167      	str	r7, [r4, #20]
		_var->defaultValue 	= (uint16_t)padrao;
 8001b10:	6126      	str	r6, [r4, #16]
		_var->maxValue 		= (uint16_t)maximo;
 8001b12:	61a5      	str	r5, [r4, #24]
		_var->ptr16			= (uint16_t *)_addrVar;
 8001b14:	6263      	str	r3, [r4, #36]	; 0x24
		break;
 8001b16:	e7ec      	b.n	8001af2 <EepromAddVar+0x5c>
		_var->defaultValue 	= (uint32_t)padrao;
 8001b18:	e9c4 6704 	strd	r6, r7, [r4, #16]
		_var->maxValue 		= (uint32_t)maximo;
 8001b1c:	61a5      	str	r5, [r4, #24]
		_var->ptr32			= (uint32_t *)_addrVar;
 8001b1e:	62a3      	str	r3, [r4, #40]	; 0x28
		break;
 8001b20:	e7e7      	b.n	8001af2 <EepromAddVar+0x5c>
	...

08001b24 <EepromInit>:
uint8_t EepromInit	(Eeprom *eeprom, I2C_HandleTypeDef *i2c, osMessageQId *fila){
 8001b24:	b530      	push	{r4, r5, lr}
	EepromAddVar(eeprom, 0, &eeprom->RefFlag,	"addrREF_MEM_FLAG",	addrREF_MEM_FLAG,	DATA8BITS,	0,	STD_REF_MEM	,254	,0);
 8001b26:	2325      	movs	r3, #37	; 0x25
	eeprom->filaComandos = fila;
 8001b28:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
	eeprom->_EepromVarCount  = 0;
 8001b2c:	2500      	movs	r5, #0
	EepromAddVar(eeprom, 0, &eeprom->RefFlag,	"addrREF_MEM_FLAG",	addrREF_MEM_FLAG,	DATA8BITS,	0,	STD_REF_MEM	,254	,0);
 8001b2e:	22fe      	movs	r2, #254	; 0xfe
uint8_t EepromInit	(Eeprom *eeprom, I2C_HandleTypeDef *i2c, osMessageQId *fila){
 8001b30:	b087      	sub	sp, #28
	eeprom->_EepromVarCount  = 0;
 8001b32:	f8a0 5124 	strh.w	r5, [r0, #292]	; 0x124
	EepromAddVar(eeprom, 0, &eeprom->RefFlag,	"addrREF_MEM_FLAG",	addrREF_MEM_FLAG,	DATA8BITS,	0,	STD_REF_MEM	,254	,0);
 8001b36:	2101      	movs	r1, #1
 8001b38:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8001b3c:	234d      	movs	r3, #77	; 0x4d
 8001b3e:	4602      	mov	r2, r0
 8001b40:	e9cd 3100 	strd	r3, r1, [sp]
 8001b44:	9505      	str	r5, [sp, #20]
 8001b46:	4629      	mov	r1, r5
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <EepromInit+0x34>)
 8001b4a:	9502      	str	r5, [sp, #8]
 8001b4c:	f7ff ffa3 	bl	8001a96 <EepromAddVar>
}
 8001b50:	4628      	mov	r0, r5
 8001b52:	b007      	add	sp, #28
 8001b54:	bd30      	pop	{r4, r5, pc}
 8001b56:	bf00      	nop
 8001b58:	0800b647 	.word	0x0800b647

08001b5c <EepromAddVarFloating>:
uint8_t EepromAddVarFloating(Eeprom *eeprom, bool resetavel, EepromVarFloating* _var, char* _name,uint16_t addr,TypeDataFloating tipo,double minimo,double padrao,double maximo, void *_addrVar)
{
 8001b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b60:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8001b64:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8001b68:	4604      	mov	r4, r0
	//todo implementar erros e tratar de alguma forma
	//Make space before passing the object name to the nexcomp struct
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001b6a:	4618      	mov	r0, r3
{
 8001b6c:	4693      	mov	fp, r2
 8001b6e:	460d      	mov	r5, r1
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	f7fe faed 	bl	8000150 <strlen>
 8001b76:	3001      	adds	r0, #1
{
 8001b78:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001b7c:	f008 f974 	bl	8009e68 <malloc>

	//Nome do objeto
	strcpy(_var->objname, _name);
 8001b80:	9901      	ldr	r1, [sp, #4]
	_var->objname = (char *) malloc((strlen(_name)*sizeof(char)) + 1);
 8001b82:	f8cb 0004 	str.w	r0, [fp, #4]
	strcpy(_var->objname, _name);
 8001b86:	f008 fd56 	bl	800a636 <strcpy>

	//Endereco
	_var->_addrEprom = addr;
 8001b8a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	//passando o tamnho da variavel
	_var->_sizeType = tipo;

	//torna nao resetavel ao softreset
	_var->flagResetavel = resetavel;
	switch (tipo) {
 8001b8e:	f1ba 0f20 	cmp.w	sl, #32
	_var->_addrEprom = addr;
 8001b92:	f8ab 3008 	strh.w	r3, [fp, #8]
	_var->_sizeType = tipo;
 8001b96:	f88b a038 	strb.w	sl, [fp, #56]	; 0x38
	_var->flagResetavel = resetavel;
 8001b9a:	f88b 5000 	strb.w	r5, [fp]
	switch (tipo) {
 8001b9e:	d00f      	beq.n	8001bc0 <EepromAddVarFloating+0x64>
 8001ba0:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8001ba4:	d028      	beq.n	8001bf8 <EepromAddVarFloating+0x9c>
	//Adiciona o componente na respectiva estrutura
	eeprom->_EepromVarFloatingArr[eeprom->_EepromVarFloatingCount] = _var;
	eeprom->_EepromVarFloatingCount++;

	return 0;
}
 8001ba6:	2000      	movs	r0, #0
	eeprom->_EepromVarFloatingArr[eeprom->_EepromVarFloatingCount] = _var;
 8001ba8:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
 8001bac:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	eeprom->_EepromVarFloatingCount++;
 8001bb0:	3301      	adds	r3, #1
	eeprom->_EepromVarFloatingArr[eeprom->_EepromVarFloatingCount] = _var;
 8001bb2:	f8c2 b0ac 	str.w	fp, [r2, #172]	; 0xac
	eeprom->_EepromVarFloatingCount++;
 8001bb6:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
}
 8001bba:	b003      	add	sp, #12
 8001bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		_var->minValue 		= (float)minimo;
 8001bc0:	4649      	mov	r1, r9
 8001bc2:	4640      	mov	r0, r8
 8001bc4:	f7fe ff42 	bl	8000a4c <__aeabi_d2f>
 8001bc8:	f7fe fc2e 	bl	8000428 <__aeabi_f2d>
 8001bcc:	e9cb 010a 	strd	r0, r1, [fp, #40]	; 0x28
		_var->defaultValue 	= (float)padrao;
 8001bd0:	4639      	mov	r1, r7
 8001bd2:	4630      	mov	r0, r6
 8001bd4:	f7fe ff3a 	bl	8000a4c <__aeabi_d2f>
 8001bd8:	f7fe fc26 	bl	8000428 <__aeabi_f2d>
 8001bdc:	e9cb 0108 	strd	r0, r1, [fp, #32]
		_var->maxValue 		= (float)maximo;
 8001be0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8001be4:	f7fe ff32 	bl	8000a4c <__aeabi_d2f>
 8001be8:	f7fe fc1e 	bl	8000428 <__aeabi_f2d>
		_var->ptrFloat		= (float *)_addrVar;
 8001bec:	9b14      	ldr	r3, [sp, #80]	; 0x50
		_var->maxValue 		= (float)maximo;
 8001bee:	e9cb 010c 	strd	r0, r1, [fp, #48]	; 0x30
		_var->ptrFloat		= (float *)_addrVar;
 8001bf2:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
		break;
 8001bf6:	e7d6      	b.n	8001ba6 <EepromAddVarFloating+0x4a>
		_var->maxValue 		= (double)maximo;
 8001bf8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8001bfc:	e9cb 230c 	strd	r2, r3, [fp, #48]	; 0x30
		_var->ptrDouble		= (double *)_addrVar;
 8001c00:	9b14      	ldr	r3, [sp, #80]	; 0x50
		_var->minValue 		= (double)minimo;
 8001c02:	e9cb 890a 	strd	r8, r9, [fp, #40]	; 0x28
		_var->defaultValue 	= (double)padrao;
 8001c06:	e9cb 6708 	strd	r6, r7, [fp, #32]
		_var->ptrDouble		= (double *)_addrVar;
 8001c0a:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
		break;
 8001c0e:	e7ca      	b.n	8001ba6 <EepromAddVarFloating+0x4a>

08001c10 <EepromSetVar>:
bool EepromSetVar	(Eeprom *eeprom, EepromVariaveis *_var, uint32_t valor){
 8001c10:	b530      	push	{r4, r5, lr}
 8001c12:	4605      	mov	r5, r0
	HAL_StatusTypeDef result;
	uint8_t 		buffer1b[1];
	shortAsBytes 	buffer2b;
	uint32AsBytes	buffer4b;

	LIBERA_EEPROM
 8001c14:	2200      	movs	r2, #0
bool EepromSetVar	(Eeprom *eeprom, EepromVariaveis *_var, uint32_t valor){
 8001c16:	b089      	sub	sp, #36	; 0x24
	LIBERA_EEPROM
 8001c18:	4823      	ldr	r0, [pc, #140]	; (8001ca8 <EepromSetVar+0x98>)
bool EepromSetVar	(Eeprom *eeprom, EepromVariaveis *_var, uint32_t valor){
 8001c1a:	460c      	mov	r4, r1
	LIBERA_EEPROM
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	f003 fd59 	bl	80056d4 <HAL_GPIO_WritePin>
 8001c22:	2005      	movs	r0, #5
 8001c24:	f002 ffd6 	bl	8004bd4 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,50,HAL_MAX_DELAY);
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	2232      	movs	r2, #50	; 0x32
 8001c2e:	21a2      	movs	r1, #162	; 0xa2
 8001c30:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001c32:	f004 f9c7 	bl	8005fc4 <HAL_I2C_IsDeviceReady>
	if (result==HAL_OK)
 8001c36:	b9b0      	cbnz	r0, 8001c66 <EepromSetVar+0x56>
	{
		switch (_var->_sizeType) {
 8001c38:	7f23      	ldrb	r3, [r4, #28]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d021      	beq.n	8001c82 <EepromSetVar+0x72>
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d029      	beq.n	8001c96 <EepromSetVar+0x86>
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d10f      	bne.n	8001c66 <EepromSetVar+0x56>
		case DATA8BITS:
			_var->valor = *_var->ptr8;
 8001c46:	6a22      	ldr	r2, [r4, #32]
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	60e2      	str	r2, [r4, #12]

			//grava na memoria
			buffer1b[0] 		= (uint8_t)_var->valor;
 8001c4c:	f88d 2014 	strb.w	r2, [sp, #20]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b, 1, 200);
 8001c50:	22c8      	movs	r2, #200	; 0xc8
 8001c52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001c56:	ab05      	add	r3, sp, #20
		case DATA32BITS:
			_var->valor = *_var->ptr32;

			//grava na memoria
			buffer4b.value 		= (uint32_t)_var->valor;
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	21a2      	movs	r1, #162	; 0xa2
 8001c5c:	2310      	movs	r3, #16
 8001c5e:	8922      	ldrh	r2, [r4, #8]
 8001c60:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001c62:	f003 ffe1 	bl	8005c28 <HAL_I2C_Mem_Write>

			break;
		}
	}
	osDelay(20);
 8001c66:	2014      	movs	r0, #20
 8001c68:	f006 f808 	bl	8007c7c <osDelay>
	TRAVA_EEPROM
 8001c6c:	2005      	movs	r0, #5
 8001c6e:	f002 ffb1 	bl	8004bd4 <HAL_Delay>
 8001c72:	2201      	movs	r2, #1
 8001c74:	2180      	movs	r1, #128	; 0x80
 8001c76:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <EepromSetVar+0x98>)
 8001c78:	f003 fd2c 	bl	80056d4 <HAL_GPIO_WritePin>
	return 1;
}
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	b009      	add	sp, #36	; 0x24
 8001c80:	bd30      	pop	{r4, r5, pc}
			_var->valor = *_var->ptr16;
 8001c82:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c84:	8812      	ldrh	r2, [r2, #0]
 8001c86:	60e2      	str	r2, [r4, #12]
			buffer2b.value 		= (uint16_t)_var->valor;
 8001c88:	f8ad 2018 	strh.w	r2, [sp, #24]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2b.bytes, 2, 200);
 8001c8c:	22c8      	movs	r2, #200	; 0xc8
 8001c8e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001c92:	ab06      	add	r3, sp, #24
 8001c94:	e7e0      	b.n	8001c58 <EepromSetVar+0x48>
			_var->valor = *_var->ptr32;
 8001c96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	60e2      	str	r2, [r4, #12]
			buffer4b.value 		= (uint32_t)_var->valor;
 8001c9c:	9207      	str	r2, [sp, #28]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
 8001c9e:	22c8      	movs	r2, #200	; 0xc8
 8001ca0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001ca4:	ab07      	add	r3, sp, #28
 8001ca6:	e7d7      	b.n	8001c58 <EepromSetVar+0x48>
 8001ca8:	40010c00 	.word	0x40010c00

08001cac <EepromSetVarFloating>:
bool EepromSetVarFloating	(Eeprom *eeprom, EepromVarFloating *_var, double valor){
 8001cac:	b530      	push	{r4, r5, lr}
 8001cae:	4605      	mov	r5, r0
 8001cb0:	b089      	sub	sp, #36	; 0x24
	//retomar leitura direto da variavel interna no objeto
	__IO HAL_StatusTypeDef result;
	__IO floatAsBytes	floatBuff;
	__IO doubleAsBytes 	doubleBuff;

	LIBERA_EEPROM
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	4822      	ldr	r0, [pc, #136]	; (8001d40 <EepromSetVarFloating+0x94>)
bool EepromSetVarFloating	(Eeprom *eeprom, EepromVarFloating *_var, double valor){
 8001cb6:	460c      	mov	r4, r1
	LIBERA_EEPROM
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	f003 fd0b 	bl	80056d4 <HAL_GPIO_WritePin>
 8001cbe:	2005      	movs	r0, #5
 8001cc0:	f002 ff88 	bl	8004bd4 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,50,HAL_MAX_DELAY);
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc8:	2232      	movs	r2, #50	; 0x32
 8001cca:	21a2      	movs	r1, #162	; 0xa2
 8001ccc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001cce:	f004 f979 	bl	8005fc4 <HAL_I2C_IsDeviceReady>
 8001cd2:	f88d 0013 	strb.w	r0, [sp, #19]
	if (result==HAL_OK)
 8001cd6:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8001cda:	b92b      	cbnz	r3, 8001ce8 <EepromSetVarFloating+0x3c>
	{
		switch (_var->_sizeType) {
 8001cdc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001ce0:	2b20      	cmp	r3, #32
 8001ce2:	d00f      	beq.n	8001d04 <EepromSetVarFloating+0x58>
 8001ce4:	2b40      	cmp	r3, #64	; 0x40
 8001ce6:	d01e      	beq.n	8001d26 <EepromSetVarFloating+0x7a>
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);

			break;
		}
	}
	osDelay(30);
 8001ce8:	201e      	movs	r0, #30
 8001cea:	f005 ffc7 	bl	8007c7c <osDelay>
	TRAVA_EEPROM
 8001cee:	2005      	movs	r0, #5
 8001cf0:	f002 ff70 	bl	8004bd4 <HAL_Delay>
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	2180      	movs	r1, #128	; 0x80
 8001cf8:	4811      	ldr	r0, [pc, #68]	; (8001d40 <EepromSetVarFloating+0x94>)
 8001cfa:	f003 fceb 	bl	80056d4 <HAL_GPIO_WritePin>
	return 1;
}
 8001cfe:	2001      	movs	r0, #1
 8001d00:	b009      	add	sp, #36	; 0x24
 8001d02:	bd30      	pop	{r4, r5, pc}
			_var->valorFloat = *_var->ptrFloat;
 8001d04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200);
 8001d06:	21c8      	movs	r1, #200	; 0xc8
			_var->valorFloat = *_var->ptrFloat;
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	61a3      	str	r3, [r4, #24]
			floatBuff.value = (float)_var->valorFloat;
 8001d0c:	9305      	str	r3, [sp, #20]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200);
 8001d0e:	2304      	movs	r3, #4
 8001d10:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001d14:	ab05      	add	r3, sp, #20
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	21a2      	movs	r1, #162	; 0xa2
 8001d1a:	2310      	movs	r3, #16
 8001d1c:	8922      	ldrh	r2, [r4, #8]
 8001d1e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001d20:	f003 ff82 	bl	8005c28 <HAL_I2C_Mem_Write>
			break;
 8001d24:	e7e0      	b.n	8001ce8 <EepromSetVarFloating+0x3c>
			_var->valorDouble = *_var->ptrDouble;
 8001d26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	e9c4 2304 	strd	r2, r3, [r4, #16]
			doubleBuff.value = (double)_var->valorDouble;
 8001d30:	e9cd 2306 	strd	r2, r3, [sp, #24]
			HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,_var->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);
 8001d34:	2308      	movs	r3, #8
 8001d36:	22c8      	movs	r2, #200	; 0xc8
 8001d38:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001d3c:	ab06      	add	r3, sp, #24
 8001d3e:	e7ea      	b.n	8001d16 <EepromSetVarFloating+0x6a>
 8001d40:	40010c00 	.word	0x40010c00

08001d44 <RestauraEeprom>:
			RestauraEeprom(eeprom, hardReset);
			return;
		}
	}
}
void RestauraEeprom			(Eeprom *eeprom ,TypeRestauracao tipo){
 8001d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d48:	4604      	mov	r4, r0
	__IO shortAsBytes 	buffer2b;
	__IO uint32AsBytes	buffer4b;
	__IO floatAsBytes	floatBuff;
	__IO doubleAsBytes 	doubleBuff;

	LIBERA_EEPROM
 8001d4a:	2200      	movs	r2, #0
void RestauraEeprom			(Eeprom *eeprom ,TypeRestauracao tipo){
 8001d4c:	b08b      	sub	sp, #44	; 0x2c
	LIBERA_EEPROM
 8001d4e:	485a      	ldr	r0, [pc, #360]	; (8001eb8 <RestauraEeprom+0x174>)
void RestauraEeprom			(Eeprom *eeprom ,TypeRestauracao tipo){
 8001d50:	460e      	mov	r6, r1
	LIBERA_EEPROM
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	f003 fcbe 	bl	80056d4 <HAL_GPIO_WritePin>
 8001d58:	2005      	movs	r0, #5
 8001d5a:	f002 ff3b 	bl	8004bd4 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,30,HAL_MAX_DELAY);
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	221e      	movs	r2, #30
 8001d64:	21a2      	movs	r1, #162	; 0xa2
 8001d66:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001d68:	f004 f92c 	bl	8005fc4 <HAL_I2C_IsDeviceReady>
	if (result==HAL_OK){
 8001d6c:	4605      	mov	r5, r0
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	d066      	beq.n	8001e40 <RestauraEeprom+0xfc>
		buffer1b.value					= (uint8_t)STD_REF_MEM;
		eeprom->RefFlag.valor			= buffer1b.value;
		HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->RefFlag._addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b.bytes, 1, 200);
		osDelay(40);
	}
	TRAVA_EEPROM
 8001d72:	2005      	movs	r0, #5
 8001d74:	f002 ff2e 	bl	8004bd4 <HAL_Delay>
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2180      	movs	r1, #128	; 0x80
 8001d7c:	484e      	ldr	r0, [pc, #312]	; (8001eb8 <RestauraEeprom+0x174>)
 8001d7e:	f003 fca9 	bl	80056d4 <HAL_GPIO_WritePin>
}
 8001d82:	b00b      	add	sp, #44	; 0x2c
 8001d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(!eeprom->_EepromVarArr[i]->flagResetavel || tipo == hardReset){
 8001d88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	b10a      	cbz	r2, 8001d96 <RestauraEeprom+0x52>
 8001d92:	2e01      	cmp	r6, #1
 8001d94:	d120      	bne.n	8001dd8 <RestauraEeprom+0x94>
				switch (eeprom->_EepromVarArr[i]->_sizeType) {
 8001d96:	7f19      	ldrb	r1, [r3, #28]
 8001d98:	2902      	cmp	r1, #2
 8001d9a:	d00e      	beq.n	8001dba <RestauraEeprom+0x76>
 8001d9c:	2904      	cmp	r1, #4
 8001d9e:	d047      	beq.n	8001e30 <RestauraEeprom+0xec>
 8001da0:	2901      	cmp	r1, #1
 8001da2:	d119      	bne.n	8001dd8 <RestauraEeprom+0x94>
					buffer1b.value 					= (uint8_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001da4:	7c1a      	ldrb	r2, [r3, #16]
					buffer1b.value					=0x00;
 8001da6:	f88d 7010 	strb.w	r7, [sp, #16]
					buffer1b.value 					= (uint8_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001daa:	f88d 2010 	strb.w	r2, [sp, #16]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b.bytes, 1, 200);
 8001dae:	891a      	ldrh	r2, [r3, #8]
 8001db0:	e9cd 1801 	strd	r1, r8, [sp, #4]
 8001db4:	ab04      	add	r3, sp, #16
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	e009      	b.n	8001dce <RestauraEeprom+0x8a>
					buffer2b.value 					= (uint16_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001dba:	8a1a      	ldrh	r2, [r3, #16]
					buffer2b.value					=0x0000;
 8001dbc:	f8ad 7014 	strh.w	r7, [sp, #20]
					buffer2b.value 					= (uint16_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001dc0:	f8ad 2014 	strh.w	r2, [sp, #20]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2b.bytes, 2, 200);
 8001dc4:	891a      	ldrh	r2, [r3, #8]
 8001dc6:	e9cd 1801 	strd	r1, r8, [sp, #4]
 8001dca:	f8cd 9000 	str.w	r9, [sp]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
 8001dce:	2310      	movs	r3, #16
 8001dd0:	21a2      	movs	r1, #162	; 0xa2
 8001dd2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001dd4:	f003 ff28 	bl	8005c28 <HAL_I2C_Mem_Write>
			osDelay(20);
 8001dd8:	2014      	movs	r0, #20
 8001dda:	f005 ff4f 	bl	8007c7c <osDelay>
		for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001dde:	3501      	adds	r5, #1
 8001de0:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 8001de4:	b2eb      	uxtb	r3, r5
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d8ce      	bhi.n	8001d88 <RestauraEeprom+0x44>
 8001dea:	2500      	movs	r5, #0
					floatBuff.value 							= 0x0000;
 8001dec:	f04f 0a00 	mov.w	sl, #0
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200);
 8001df0:	27c8      	movs	r7, #200	; 0xc8
					doubleBuff.value 							= 0x00000000;
 8001df2:	f04f 0800 	mov.w	r8, #0
 8001df6:	f04f 0900 	mov.w	r9, #0
		for(uint8_t k = 0; k < eeprom->_EepromVarFloatingCount; k++){
 8001dfa:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8001dfe:	b2eb      	uxtb	r3, r5
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d823      	bhi.n	8001e4c <RestauraEeprom+0x108>
		buffer1b.value					= (uint8_t)STD_REF_MEM;
 8001e04:	2325      	movs	r3, #37	; 0x25
 8001e06:	f88d 3010 	strb.w	r3, [sp, #16]
		eeprom->RefFlag.valor			= buffer1b.value;
 8001e0a:	f89d 3010 	ldrb.w	r3, [sp, #16]
		HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->RefFlag._addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b.bytes, 1, 200);
 8001e0e:	22c8      	movs	r2, #200	; 0xc8
		eeprom->RefFlag.valor			= buffer1b.value;
 8001e10:	60e3      	str	r3, [r4, #12]
		HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->RefFlag._addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer1b.bytes, 1, 200);
 8001e12:	2301      	movs	r3, #1
 8001e14:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001e18:	ab04      	add	r3, sp, #16
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	21a2      	movs	r1, #162	; 0xa2
 8001e1e:	2310      	movs	r3, #16
 8001e20:	8922      	ldrh	r2, [r4, #8]
 8001e22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e24:	f003 ff00 	bl	8005c28 <HAL_I2C_Mem_Write>
		osDelay(40);
 8001e28:	2028      	movs	r0, #40	; 0x28
 8001e2a:	f005 ff27 	bl	8007c7c <osDelay>
 8001e2e:	e7a0      	b.n	8001d72 <RestauraEeprom+0x2e>
					buffer4b.value 					= (uint32_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001e30:	691a      	ldr	r2, [r3, #16]
					buffer4b.value					=0x00000000;
 8001e32:	9706      	str	r7, [sp, #24]
					buffer4b.value 					= (uint32_t)eeprom->_EepromVarArr[i]->defaultValue;
 8001e34:	9206      	str	r2, [sp, #24]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer4b.bytes, 4, 200);
 8001e36:	891a      	ldrh	r2, [r3, #8]
 8001e38:	e9cd 1801 	strd	r1, r8, [sp, #4]
 8001e3c:	ab06      	add	r3, sp, #24
 8001e3e:	e7ba      	b.n	8001db6 <RestauraEeprom+0x72>
					buffer2b.value					=0x0000;
 8001e40:	4607      	mov	r7, r0
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2b.bytes, 2, 200);
 8001e42:	f04f 08c8 	mov.w	r8, #200	; 0xc8
 8001e46:	f10d 0914 	add.w	r9, sp, #20
 8001e4a:	e7c9      	b.n	8001de0 <RestauraEeprom+0x9c>
			if(!eeprom->_EepromVarFloatingArr[k]->flagResetavel || tipo == hardReset){
 8001e4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001e50:	f8d3 b0ac 	ldr.w	fp, [r3, #172]	; 0xac
 8001e54:	f89b 3000 	ldrb.w	r3, [fp]
 8001e58:	b10b      	cbz	r3, 8001e5e <RestauraEeprom+0x11a>
 8001e5a:	2e01      	cmp	r6, #1
 8001e5c:	d105      	bne.n	8001e6a <RestauraEeprom+0x126>
				switch (eeprom->_EepromVarFloatingArr[k]->_sizeType) {
 8001e5e:	f89b 3038 	ldrb.w	r3, [fp, #56]	; 0x38
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	d006      	beq.n	8001e74 <RestauraEeprom+0x130>
 8001e66:	2b40      	cmp	r3, #64	; 0x40
 8001e68:	d018      	beq.n	8001e9c <RestauraEeprom+0x158>
			osDelay(40);
 8001e6a:	2028      	movs	r0, #40	; 0x28
 8001e6c:	f005 ff06 	bl	8007c7c <osDelay>
		for(uint8_t k = 0; k < eeprom->_EepromVarFloatingCount; k++){
 8001e70:	3501      	adds	r5, #1
 8001e72:	e7c2      	b.n	8001dfa <RestauraEeprom+0xb6>
					floatBuff.value 							= (float)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001e74:	e9db 0108 	ldrd	r0, r1, [fp, #32]
					floatBuff.value 							= 0x0000;
 8001e78:	f8cd a01c 	str.w	sl, [sp, #28]
					floatBuff.value 							= (float)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001e7c:	f7fe fde6 	bl	8000a4c <__aeabi_d2f>
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200);
 8001e80:	2304      	movs	r3, #4
 8001e82:	f8bb 2008 	ldrh.w	r2, [fp, #8]
					floatBuff.value 							= (float)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001e86:	9007      	str	r0, [sp, #28]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)floatBuff.bytes, 4, 200);
 8001e88:	9301      	str	r3, [sp, #4]
 8001e8a:	9702      	str	r7, [sp, #8]
 8001e8c:	ab07      	add	r3, sp, #28
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	21a2      	movs	r1, #162	; 0xa2
 8001e92:	2310      	movs	r3, #16
 8001e94:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e96:	f003 fec7 	bl	8005c28 <HAL_I2C_Mem_Write>
					break;
 8001e9a:	e7e6      	b.n	8001e6a <RestauraEeprom+0x126>
					doubleBuff.value 							= (double)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001e9c:	e9db 2308 	ldrd	r2, r3, [fp, #32]
					doubleBuff.value 							= 0x00000000;
 8001ea0:	e9cd 8908 	strd	r8, r9, [sp, #32]
					doubleBuff.value 							= (double)eeprom->_EepromVarFloatingArr[k]->defaultValue;
 8001ea4:	e9cd 2308 	strd	r2, r3, [sp, #32]
					HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eeprom->_EepromVarFloatingArr[k]->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)doubleBuff.bytes, 8, 200);
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	9702      	str	r7, [sp, #8]
 8001eb2:	ab08      	add	r3, sp, #32
 8001eb4:	e7eb      	b.n	8001e8e <RestauraEeprom+0x14a>
 8001eb6:	bf00      	nop
 8001eb8:	40010c00 	.word	0x40010c00

08001ebc <EepromDownloadValores>:
void EepromDownloadValores	(Eeprom *eeprom){
 8001ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ec0:	4604      	mov	r4, r0
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001ec2:	f04f 0a00 	mov.w	sl, #0
void EepromDownloadValores	(Eeprom *eeprom){
 8001ec6:	b08b      	sub	sp, #44	; 0x2c
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001ec8:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8001ecc:	fa5f f58a 	uxtb.w	r5, sl
 8001ed0:	42ab      	cmp	r3, r5
 8001ed2:	d942      	bls.n	8001f5a <EepromDownloadValores+0x9e>
		if (HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_READ_ADDR,50,HAL_MAX_DELAY)==HAL_OK){
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed8:	2232      	movs	r2, #50	; 0x32
 8001eda:	21a3      	movs	r1, #163	; 0xa3
 8001edc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001ede:	f004 f871 	bl	8005fc4 <HAL_I2C_IsDeviceReady>
 8001ee2:	bb48      	cbnz	r0, 8001f38 <EepromDownloadValores+0x7c>
			switch (eeprom->_EepromVarArr[i]->_sizeType) {
 8001ee4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8001ee8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001eea:	7f13      	ldrb	r3, [r2, #28]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d037      	beq.n	8001f60 <EepromDownloadValores+0xa4>
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d049      	beq.n	8001f88 <EepromDownloadValores+0xcc>
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d111      	bne.n	8001f1c <EepromDownloadValores+0x60>
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR,eeprom->_EepromVarArr[i]->_addrEprom,I2C_MEMADD_SIZE_16BIT,buffer1b.bytes, 1, 200);
 8001ef8:	21c8      	movs	r1, #200	; 0xc8
 8001efa:	8912      	ldrh	r2, [r2, #8]
 8001efc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001f00:	ab04      	add	r3, sp, #16
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	21a3      	movs	r1, #163	; 0xa3
 8001f06:	2310      	movs	r3, #16
 8001f08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f0a:	f003 ff1d 	bl	8005d48 <HAL_I2C_Mem_Read>
				eeprom->_EepromVarArr[i]->valor = buffer1b.value;
 8001f0e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001f10:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8001f14:	60da      	str	r2, [r3, #12]
				if(eeprom->_EepromVarArr[i]->ptr8 !=0){
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	b103      	cbz	r3, 8001f1c <EepromDownloadValores+0x60>
					*eeprom->_EepromVarArr[i]->ptr8 = eeprom->_EepromVarArr[i]->valor;
 8001f1a:	701a      	strb	r2, [r3, #0]
			if(eeprom->_EepromVarArr[i]->defaultValue>0 && (eeprom->_EepromVarArr[i]->valor == 0 || eeprom->_EepromVarArr[i]->valor > eeprom->_EepromVarArr[i]->maxValue || eeprom->_EepromVarArr[i]->valor < eeprom->_EepromVarArr[i]->minValue))
 8001f1c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001f1e:	690a      	ldr	r2, [r1, #16]
 8001f20:	b152      	cbz	r2, 8001f38 <EepromDownloadValores+0x7c>
 8001f22:	68cb      	ldr	r3, [r1, #12]
 8001f24:	b12b      	cbz	r3, 8001f32 <EepromDownloadValores+0x76>
 8001f26:	6988      	ldr	r0, [r1, #24]
 8001f28:	4283      	cmp	r3, r0
 8001f2a:	d802      	bhi.n	8001f32 <EepromDownloadValores+0x76>
 8001f2c:	6948      	ldr	r0, [r1, #20]
 8001f2e:	4283      	cmp	r3, r0
 8001f30:	d202      	bcs.n	8001f38 <EepromDownloadValores+0x7c>
				EepromSetVar(eeprom, eeprom->_EepromVarArr[i], eeprom->_EepromVarArr[i]->defaultValue);
 8001f32:	4620      	mov	r0, r4
 8001f34:	f7ff fe6c 	bl	8001c10 <EepromSetVar>
void EepromDownloadValores	(Eeprom *eeprom){
 8001f38:	f04f 0b00 	mov.w	fp, #0
		for(uint8_t y = 0; y < eeprom->_EepromVarFloatingCount; y++){
 8001f3c:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
 8001f40:	fa5f f58b 	uxtb.w	r5, fp
 8001f44:	42ab      	cmp	r3, r5
 8001f46:	d832      	bhi.n	8001fae <EepromDownloadValores+0xf2>
		if(eeprom->RefFlag.valor != STD_REF_MEM)
 8001f48:	68e3      	ldr	r3, [r4, #12]
 8001f4a:	f10a 0a01 	add.w	sl, sl, #1
 8001f4e:	2b25      	cmp	r3, #37	; 0x25
 8001f50:	d0ba      	beq.n	8001ec8 <EepromDownloadValores+0xc>
			RestauraEeprom(eeprom, hardReset);
 8001f52:	2101      	movs	r1, #1
 8001f54:	4620      	mov	r0, r4
 8001f56:	f7ff fef5 	bl	8001d44 <RestauraEeprom>
}
 8001f5a:	b00b      	add	sp, #44	; 0x2c
 8001f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR,eeprom->_EepromVarArr[i]->_addrEprom,I2C_MEMADD_SIZE_16BIT,buffer2b.bytes, 2, 200);//tentar usar o & todo
 8001f60:	21c8      	movs	r1, #200	; 0xc8
 8001f62:	8912      	ldrh	r2, [r2, #8]
 8001f64:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001f68:	ab05      	add	r3, sp, #20
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	21a3      	movs	r1, #163	; 0xa3
 8001f6e:	2310      	movs	r3, #16
 8001f70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f72:	f003 fee9 	bl	8005d48 <HAL_I2C_Mem_Read>
				eeprom->_EepromVarArr[i]->valor = buffer2b.value;
 8001f76:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001f78:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8001f7c:	60da      	str	r2, [r3, #12]
				if(eeprom->_EepromVarArr[i]->ptr16 !=0){
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0cb      	beq.n	8001f1c <EepromDownloadValores+0x60>
					*eeprom->_EepromVarArr[i]->ptr16 = eeprom->_EepromVarArr[i]->valor;
 8001f84:	801a      	strh	r2, [r3, #0]
 8001f86:	e7c9      	b.n	8001f1c <EepromDownloadValores+0x60>
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR,eeprom->_EepromVarArr[i]->_addrEprom,I2C_MEMADD_SIZE_16BIT,buffer4b.bytes, 4, 200);
 8001f88:	21c8      	movs	r1, #200	; 0xc8
 8001f8a:	8912      	ldrh	r2, [r2, #8]
 8001f8c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001f90:	ab06      	add	r3, sp, #24
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	21a3      	movs	r1, #163	; 0xa3
 8001f96:	2310      	movs	r3, #16
 8001f98:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f9a:	f003 fed5 	bl	8005d48 <HAL_I2C_Mem_Read>
				eeprom->_EepromVarArr[i]->valor =  buffer4b.value;
 8001f9e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001fa0:	9a06      	ldr	r2, [sp, #24]
 8001fa2:	60da      	str	r2, [r3, #12]
				if(eeprom->_EepromVarArr[i]->ptr32 !=0){
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0b8      	beq.n	8001f1c <EepromDownloadValores+0x60>
					*eeprom->_EepromVarArr[i]->ptr32 = eeprom->_EepromVarArr[i]->valor;
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e7b6      	b.n	8001f1c <EepromDownloadValores+0x60>
			if (HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_READ_ADDR,30,HAL_MAX_DELAY)==HAL_OK){
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	221e      	movs	r2, #30
 8001fb4:	21a3      	movs	r1, #163	; 0xa3
 8001fb6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001fb8:	f004 f804 	bl	8005fc4 <HAL_I2C_IsDeviceReady>
 8001fbc:	b948      	cbnz	r0, 8001fd2 <EepromDownloadValores+0x116>
				switch (eeprom->_EepromVarFloatingArr[y]->_sizeType) {
 8001fbe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8001fc2:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8001fc6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001fca:	2a20      	cmp	r2, #32
 8001fcc:	d004      	beq.n	8001fd8 <EepromDownloadValores+0x11c>
 8001fce:	2a40      	cmp	r2, #64	; 0x40
 8001fd0:	d044      	beq.n	800205c <EepromDownloadValores+0x1a0>
		for(uint8_t y = 0; y < eeprom->_EepromVarFloatingCount; y++){
 8001fd2:	f10b 0b01 	add.w	fp, fp, #1
 8001fd6:	e7b1      	b.n	8001f3c <EepromDownloadValores+0x80>
					HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, eeprom->_EepromVarFloatingArr[y]->_addrEprom, I2C_MEMADD_SIZE_16BIT, floatBuff.bytes, 4, 200);
 8001fd8:	891a      	ldrh	r2, [r3, #8]
 8001fda:	20c8      	movs	r0, #200	; 0xc8
 8001fdc:	2304      	movs	r3, #4
 8001fde:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8001fe2:	ab07      	add	r3, sp, #28
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	21a3      	movs	r1, #163	; 0xa3
 8001fe8:	2310      	movs	r3, #16
 8001fea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001fec:	f003 feac 	bl	8005d48 <HAL_I2C_Mem_Read>
					eeprom->_EepromVarFloatingArr[y]->valorFloat =  floatBuff.value;
 8001ff0:	f8d5 50ac 	ldr.w	r5, [r5, #172]	; 0xac
 8001ff4:	9a07      	ldr	r2, [sp, #28]
					if (eeprom->_EepromVarFloatingArr[y]->ptrFloat != 0) {
 8001ff6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
					eeprom->_EepromVarFloatingArr[y]->valorFloat =  floatBuff.value;
 8001ff8:	61aa      	str	r2, [r5, #24]
					if (eeprom->_EepromVarFloatingArr[y]->ptrFloat != 0) {
 8001ffa:	b103      	cbz	r3, 8001ffe <EepromDownloadValores+0x142>
						*eeprom->_EepromVarFloatingArr[y]->ptrFloat = eeprom->_EepromVarFloatingArr[y]->valorFloat;
 8001ffc:	601a      	str	r2, [r3, #0]
					if(eeprom->_EepromVarFloatingArr[y]->defaultValue>0 && (eeprom->_EepromVarFloatingArr[y]->valorFloat == 0 || eeprom->_EepromVarFloatingArr[y]->valorFloat > eeprom->_EepromVarFloatingArr[y]->maxValue || eeprom->_EepromVarFloatingArr[y]->valorFloat < eeprom->_EepromVarFloatingArr[y]->minValue))
 8001ffe:	e9d5 8908 	ldrd	r8, r9, [r5, #32]
 8002002:	2200      	movs	r2, #0
 8002004:	2300      	movs	r3, #0
 8002006:	4640      	mov	r0, r8
 8002008:	4649      	mov	r1, r9
 800200a:	f7fe fcf5 	bl	80009f8 <__aeabi_dcmpgt>
 800200e:	2800      	cmp	r0, #0
 8002010:	d0df      	beq.n	8001fd2 <EepromDownloadValores+0x116>
 8002012:	69ae      	ldr	r6, [r5, #24]
 8002014:	2100      	movs	r1, #0
 8002016:	4630      	mov	r0, r6
 8002018:	f7ff f80a 	bl	8001030 <__aeabi_fcmpeq>
 800201c:	b988      	cbnz	r0, 8002042 <EepromDownloadValores+0x186>
 800201e:	4630      	mov	r0, r6
 8002020:	f7fe fa02 	bl	8000428 <__aeabi_f2d>
 8002024:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8002028:	4606      	mov	r6, r0
 800202a:	460f      	mov	r7, r1
 800202c:	f7fe fce4 	bl	80009f8 <__aeabi_dcmpgt>
 8002030:	b938      	cbnz	r0, 8002042 <EepromDownloadValores+0x186>
 8002032:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 8002036:	4630      	mov	r0, r6
 8002038:	4639      	mov	r1, r7
 800203a:	f7fe fcbf 	bl	80009bc <__aeabi_dcmplt>
 800203e:	2800      	cmp	r0, #0
 8002040:	d0c7      	beq.n	8001fd2 <EepromDownloadValores+0x116>
						EepromSetVarFloating(eeprom, eeprom->_EepromVarFloatingArr[y], (float)eeprom->_EepromVarFloatingArr[y]->defaultValue);
 8002042:	4649      	mov	r1, r9
 8002044:	4640      	mov	r0, r8
 8002046:	f7fe fd01 	bl	8000a4c <__aeabi_d2f>
 800204a:	f7fe f9ed 	bl	8000428 <__aeabi_f2d>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
						EepromSetVarFloating(eeprom, eeprom->_EepromVarFloatingArr[y], (double)eeprom->_EepromVarFloatingArr[y]->defaultValue);
 8002052:	4629      	mov	r1, r5
 8002054:	4620      	mov	r0, r4
 8002056:	f7ff fe29 	bl	8001cac <EepromSetVarFloating>
 800205a:	e7ba      	b.n	8001fd2 <EepromDownloadValores+0x116>
					HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, eeprom->_EepromVarFloatingArr[y]->_addrEprom, I2C_MEMADD_SIZE_16BIT, doubleBuff.bytes, 8, 200);
 800205c:	891a      	ldrh	r2, [r3, #8]
 800205e:	21c8      	movs	r1, #200	; 0xc8
 8002060:	2308      	movs	r3, #8
 8002062:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8002066:	ab08      	add	r3, sp, #32
 8002068:	21a3      	movs	r1, #163	; 0xa3
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800206e:	2310      	movs	r3, #16
 8002070:	f003 fe6a 	bl	8005d48 <HAL_I2C_Mem_Read>
					eeprom->_EepromVarFloatingArr[y]->valorDouble =  doubleBuff.value;
 8002074:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002078:	f8d5 50ac 	ldr.w	r5, [r5, #172]	; 0xac
					if (eeprom->_EepromVarFloatingArr[y]->ptrDouble != 0) {
 800207c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
					eeprom->_EepromVarFloatingArr[y]->valorDouble =  doubleBuff.value;
 800207e:	e9c5 0104 	strd	r0, r1, [r5, #16]
					if (eeprom->_EepromVarFloatingArr[y]->ptrDouble != 0) {
 8002082:	b10b      	cbz	r3, 8002088 <EepromDownloadValores+0x1cc>
						*eeprom->_EepromVarFloatingArr[y]->ptrDouble = eeprom->_EepromVarFloatingArr[y]->valorDouble;
 8002084:	e9c3 0100 	strd	r0, r1, [r3]
					if(eeprom->_EepromVarFloatingArr[y]->defaultValue>0 && (eeprom->_EepromVarFloatingArr[y]->valorDouble == 0 || eeprom->_EepromVarFloatingArr[y]->valorDouble > eeprom->_EepromVarFloatingArr[y]->maxValue || eeprom->_EepromVarFloatingArr[y]->valorDouble < eeprom->_EepromVarFloatingArr[y]->minValue))
 8002088:	e9d5 8908 	ldrd	r8, r9, [r5, #32]
 800208c:	2200      	movs	r2, #0
 800208e:	2300      	movs	r3, #0
 8002090:	4640      	mov	r0, r8
 8002092:	4649      	mov	r1, r9
 8002094:	f7fe fcb0 	bl	80009f8 <__aeabi_dcmpgt>
 8002098:	2800      	cmp	r0, #0
 800209a:	d09a      	beq.n	8001fd2 <EepromDownloadValores+0x116>
 800209c:	e9d5 6704 	ldrd	r6, r7, [r5, #16]
 80020a0:	2200      	movs	r2, #0
 80020a2:	2300      	movs	r3, #0
 80020a4:	4630      	mov	r0, r6
 80020a6:	4639      	mov	r1, r7
 80020a8:	f7fe fc7e 	bl	80009a8 <__aeabi_dcmpeq>
 80020ac:	b970      	cbnz	r0, 80020cc <EepromDownloadValores+0x210>
 80020ae:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80020b2:	4630      	mov	r0, r6
 80020b4:	4639      	mov	r1, r7
 80020b6:	f7fe fc9f 	bl	80009f8 <__aeabi_dcmpgt>
 80020ba:	b938      	cbnz	r0, 80020cc <EepromDownloadValores+0x210>
 80020bc:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 80020c0:	4630      	mov	r0, r6
 80020c2:	4639      	mov	r1, r7
 80020c4:	f7fe fc7a 	bl	80009bc <__aeabi_dcmplt>
 80020c8:	2800      	cmp	r0, #0
 80020ca:	d082      	beq.n	8001fd2 <EepromDownloadValores+0x116>
						EepromSetVarFloating(eeprom, eeprom->_EepromVarFloatingArr[y], (double)eeprom->_EepromVarFloatingArr[y]->defaultValue);
 80020cc:	4642      	mov	r2, r8
 80020ce:	464b      	mov	r3, r9
 80020d0:	e7bf      	b.n	8002052 <EepromDownloadValores+0x196>

080020d2 <OutputAddDigital>:
 *      Author: lucas
 */
#include "OutputDigital.h"

uint8_t OutputAddDigital(OutputDigital* Output,IndviduoOutput* _individ, uint16_t _pinoOUT,GPIO_TypeDef *_portaOUT,
		void (*callback)(),uint16_t limitOn,uint16_t limitOff){
 80020d2:	b510      	push	{r4, lr}

	//montando a fila
	Output->_OutDigitalArr[Output->_DigitalCount] = _individ;
 80020d4:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
 80020d8:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
	Output->_DigitalCount++;
 80020dc:	3401      	adds	r4, #1
 80020de:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28

	//definicao dos pinos
	_individ->GPIO_Pin	=	_pinoOUT;
	_individ->GPIOx		=	_portaOUT;
 80020e2:	604b      	str	r3, [r1, #4]

	//Bind the correct callback functions together
	_individ->timeOut = callback;
 80020e4:	9b02      	ldr	r3, [sp, #8]
	_individ->limitOff = limitOff;


	//Return OK
	return 0;
}
 80020e6:	2000      	movs	r0, #0
	_individ->timeOut = callback;
 80020e8:	614b      	str	r3, [r1, #20]
	_individ->limitOn = limitOn;
 80020ea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	_individ->GPIO_Pin	=	_pinoOUT;
 80020ee:	800a      	strh	r2, [r1, #0]
	_individ->limitOn = limitOn;
 80020f0:	81cb      	strh	r3, [r1, #14]
	_individ->limitOff = limitOff;
 80020f2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80020f6:	820b      	strh	r3, [r1, #16]
}
 80020f8:	bd10      	pop	{r4, pc}

080020fa <OutputAddPID>:
uint8_t OutputAddPID(OutputDigital* Output,IndviduoPID* _individ, TIM_HandleTypeDef *htim, uint32_t Channel, double Kp, double Ki, double Kd, uint16_t histerese,
		uint16_t limit_on,void (*callback)()){
 80020fa:	b530      	push	{r4, r5, lr}

	//montando a fila
	Output->_OutPidArr[Output->_PidCount] = _individ;
 80020fc:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
 8002100:	1da5      	adds	r5, r4, #6
	Output->_PidCount++;
 8002102:	3401      	adds	r4, #1
	Output->_OutPidArr[Output->_PidCount] = _individ;
 8002104:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
	Output->_PidCount++;
 8002108:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29

	//definicao do timer
	_individ->TimHandle = htim;
	_individ->Channel   = Channel;
 800210c:	e9c1 2300 	strd	r2, r3, [r1]

	//tunning de PID
	_individ->kp	= Kp;
 8002110:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8002114:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_individ->ki	= Ki;
 8002118:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800211c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_individ->kd	= Kd;
 8002120:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002124:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_individ->histerese	= histerese;
 8002128:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
	//Bind the correct callback functions together
	_individ->timeOut = callback;

	//Return OK
	return 0;
}
 800212c:	2000      	movs	r0, #0
	_individ->histerese	= histerese;
 800212e:	874b      	strh	r3, [r1, #58]	; 0x3a
	_individ->timeOut = callback;
 8002130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002132:	644b      	str	r3, [r1, #68]	; 0x44
}
 8002134:	bd30      	pop	{r4, r5, pc}

08002136 <onDigital>:
void onDigital(IndviduoOutput* outPut) {
 8002136:	b510      	push	{r4, lr}
	// Implementação do método ON.
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_SET);
 8002138:	8801      	ldrh	r1, [r0, #0]
void onDigital(IndviduoOutput* outPut) {
 800213a:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_SET);
 800213c:	2201      	movs	r2, #1
 800213e:	6840      	ldr	r0, [r0, #4]
 8002140:	f003 fac8 	bl	80056d4 <HAL_GPIO_WritePin>
	outPut->_state = on; // Exemplo hipotético
 8002144:	2301      	movs	r3, #1
 8002146:	7223      	strb	r3, [r4, #8]
}
 8002148:	bd10      	pop	{r4, pc}

0800214a <offDigital>:
void offDigital(IndviduoOutput* outPut) {
 800214a:	b510      	push	{r4, lr}
	// Implementação do método OFF.
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_RESET);
 800214c:	8801      	ldrh	r1, [r0, #0]
void offDigital(IndviduoOutput* outPut) {
 800214e:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_RESET);
 8002150:	2200      	movs	r2, #0
 8002152:	6840      	ldr	r0, [r0, #4]
 8002154:	f003 fabe 	bl	80056d4 <HAL_GPIO_WritePin>
	outPut->_state = off; // Exemplo hipotético
 8002158:	2300      	movs	r3, #0
 800215a:	7223      	strb	r3, [r4, #8]
}
 800215c:	bd10      	pop	{r4, pc}

0800215e <contadorOutput>:
void contadorOutput(OutputDigital* Output){
 800215e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//chamar essa funcao em um timer com passo de 1 segundo

	//Varregura pelas saidas -------------DIGITAIS----------------
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 8002162:	2400      	movs	r4, #0
void contadorOutput(OutputDigital* Output){
 8002164:	4605      	mov	r5, r0
 8002166:	4626      	mov	r6, r4
 8002168:	f64f 77ff 	movw	r7, #65535	; 0xffff
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 800216c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8002170:	fa5f f884 	uxtb.w	r8, r4
 8002174:	4543      	cmp	r3, r8
 8002176:	d80b      	bhi.n	8002190 <contadorOutput+0x32>
 8002178:	f04f 0a00 	mov.w	sl, #0
#ifndef CALCULA_POR_PWMOUT
		//---CATEGORIZA STATE
		if(Output->_OutPidArr[i]->realtime >=  Output->_OutPidArr[i]->setPoint ){
			Output->_OutPidArr[i]->_PWMstate = idle;
		}else if(Output->_OutPidArr[i]->realtime + Output->_OutPidArr[i]->histerese >  Output->_OutPidArr[i]->setPoint ){
			Output->_OutPidArr[i]->_PWMstate = mantendo;
 800217c:	f04f 0b02 	mov.w	fp, #2
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 8002180:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8002184:	fa5f f38a 	uxtb.w	r3, sl
 8002188:	429a      	cmp	r2, r3
 800218a:	d825      	bhi.n	80021d8 <contadorOutput+0x7a>
				//chama callback de timeout
				Output->_OutPidArr[i]->timeOut();
			}
		}
	}
}
 800218c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(Output->_OutDigitalArr[i]->_state == on){
 8002190:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 8002194:	7a1a      	ldrb	r2, [r3, #8]
 8002196:	2a01      	cmp	r2, #1
 8002198:	d117      	bne.n	80021ca <contadorOutput+0x6c>
			(Output->_OutDigitalArr[i]->timeOn<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOn++:0;
 800219a:	895a      	ldrh	r2, [r3, #10]
			Output->_OutDigitalArr[i]->timeOff = 0;
 800219c:	819e      	strh	r6, [r3, #12]
			(Output->_OutDigitalArr[i]->timeOn<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOn++:0;
 800219e:	42ba      	cmp	r2, r7
 80021a0:	d001      	beq.n	80021a6 <contadorOutput+0x48>
 80021a2:	3201      	adds	r2, #1
 80021a4:	815a      	strh	r2, [r3, #10]
		if(Output->_OutDigitalArr[i]->limitOn != 0){
 80021a6:	89da      	ldrh	r2, [r3, #14]
 80021a8:	b122      	cbz	r2, 80021b4 <contadorOutput+0x56>
			if(Output->_OutDigitalArr[i]->timeOn >= Output->_OutDigitalArr[i]->limitOn){
 80021aa:	8959      	ldrh	r1, [r3, #10]
 80021ac:	4291      	cmp	r1, r2
 80021ae:	d301      	bcc.n	80021b4 <contadorOutput+0x56>
				Output->_OutDigitalArr[i]->timeOut();
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4798      	blx	r3
		if(Output->_OutDigitalArr[i]->limitOff != 0){
 80021b4:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 80021b8:	8a1a      	ldrh	r2, [r3, #16]
 80021ba:	b122      	cbz	r2, 80021c6 <contadorOutput+0x68>
			if(Output->_OutDigitalArr[i]->timeOff >= Output->_OutDigitalArr[i]->limitOff){
 80021bc:	8999      	ldrh	r1, [r3, #12]
 80021be:	4291      	cmp	r1, r2
 80021c0:	d301      	bcc.n	80021c6 <contadorOutput+0x68>
				Output->_OutDigitalArr[i]->timeOut();
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	4798      	blx	r3
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 80021c6:	3401      	adds	r4, #1
 80021c8:	e7d0      	b.n	800216c <contadorOutput+0xe>
			(Output->_OutDigitalArr[i]->timeOff<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOff++:0;
 80021ca:	899a      	ldrh	r2, [r3, #12]
			Output->_OutDigitalArr[i]->timeOn = 0;
 80021cc:	815e      	strh	r6, [r3, #10]
			(Output->_OutDigitalArr[i]->timeOff<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOff++:0;
 80021ce:	42ba      	cmp	r2, r7
 80021d0:	bf1c      	itt	ne
 80021d2:	3201      	addne	r2, #1
 80021d4:	819a      	strhne	r2, [r3, #12]
 80021d6:	e7e6      	b.n	80021a6 <contadorOutput+0x48>
		if(Output->_OutPidArr[i]->realtime >=  Output->_OutPidArr[i]->setPoint ){
 80021d8:	3306      	adds	r3, #6
 80021da:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 80021de:	e9d4 890a 	ldrd	r8, r9, [r4, #40]	; 0x28
 80021e2:	e9d4 670c 	ldrd	r6, r7, [r4, #48]	; 0x30
 80021e6:	4640      	mov	r0, r8
 80021e8:	4632      	mov	r2, r6
 80021ea:	463b      	mov	r3, r7
 80021ec:	4649      	mov	r1, r9
 80021ee:	f7fe fbf9 	bl	80009e4 <__aeabi_dcmpge>
 80021f2:	bb08      	cbnz	r0, 8002238 <contadorOutput+0xda>
		}else if(Output->_OutPidArr[i]->realtime + Output->_OutPidArr[i]->histerese >  Output->_OutPidArr[i]->setPoint ){
 80021f4:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
 80021f6:	f7fe f905 	bl	8000404 <__aeabi_i2d>
 80021fa:	4642      	mov	r2, r8
 80021fc:	464b      	mov	r3, r9
 80021fe:	f7fd ffb5 	bl	800016c <__adddf3>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4630      	mov	r0, r6
 8002208:	4639      	mov	r1, r7
 800220a:	f7fe fbd7 	bl	80009bc <__aeabi_dcmplt>
 800220e:	b1c8      	cbz	r0, 8002244 <contadorOutput+0xe6>
			(Output->_OutPidArr[i]->timeOn<UINT16_MAX)?Output->_OutPidArr[i]->timeOn++:0;
 8002210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002214:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			Output->_OutPidArr[i]->_PWMstate = mantendo;
 8002216:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
			(Output->_OutPidArr[i]->timeOn<UINT16_MAX)?Output->_OutPidArr[i]->timeOn++:0;
 800221a:	4293      	cmp	r3, r2
 800221c:	d001      	beq.n	8002222 <contadorOutput+0xc4>
 800221e:	3301      	adds	r3, #1
 8002220:	87e3      	strh	r3, [r4, #62]	; 0x3e
		if(Output->_OutPidArr[i]->limiteOn != 0){
 8002222:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8002226:	b123      	cbz	r3, 8002232 <contadorOutput+0xd4>
			if(Output->_OutPidArr[i]->timeOn >= Output->_OutPidArr[i]->limiteOn){
 8002228:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800222a:	429a      	cmp	r2, r3
 800222c:	d301      	bcc.n	8002232 <contadorOutput+0xd4>
				Output->_OutPidArr[i]->timeOut();
 800222e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002230:	4798      	blx	r3
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 8002232:	f10a 0a01 	add.w	sl, sl, #1
 8002236:	e7a3      	b.n	8002180 <contadorOutput+0x22>
 8002238:	2300      	movs	r3, #0
			Output->_OutPidArr[i]->_PWMstate = buscando;
 800223a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			Output->_OutPidArr[i]->timeOn=0;
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	e7ed      	b.n	8002220 <contadorOutput+0xc2>
 8002244:	2301      	movs	r3, #1
 8002246:	e7f8      	b.n	800223a <contadorOutput+0xdc>

08002248 <IndviduoPID_SetPWMValue>:
void IndviduoPID_SetPWMValue(IndviduoPID *pid, double pwmValue) {
 8002248:	b5d0      	push	{r4, r6, r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	4604      	mov	r4, r0
 800224e:	461f      	mov	r7, r3
 8002250:	4616      	mov	r6, r2
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002252:	2100      	movs	r1, #0
 8002254:	2214      	movs	r2, #20
 8002256:	a803      	add	r0, sp, #12
 8002258:	f008 f8f6 	bl	800a448 <memset>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800225c:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 800225e:	4639      	mov	r1, r7
 8002260:	4630      	mov	r0, r6
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002262:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 8002264:	f7fe fbd2 	bl	8000a0c <__aeabi_d2uiz>
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;

	if (HAL_TIM_PWM_ConfigChannel(pid->TimHandle, &sConfigOC, pid->Channel) != HAL_OK) {
 8002268:	6862      	ldr	r2, [r4, #4]
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 800226a:	9002      	str	r0, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(pid->TimHandle, &sConfigOC, pid->Channel) != HAL_OK) {
 800226c:	a901      	add	r1, sp, #4
 800226e:	6820      	ldr	r0, [r4, #0]
 8002270:	f004 fe88 	bl	8006f84 <HAL_TIM_PWM_ConfigChannel>
		// Tratamento de erro
	}

	if (HAL_TIM_PWM_Start(pid->TimHandle, pid->Channel) != HAL_OK) {
 8002274:	e9d4 0100 	ldrd	r0, r1, [r4]
 8002278:	f004 ffde 	bl	8007238 <HAL_TIM_PWM_Start>
		// Tratamento de erro
	}
}
 800227c:	b008      	add	sp, #32
 800227e:	bdd0      	pop	{r4, r6, r7, pc}

08002280 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <vApplicationGetIdleTaskMemory+0x10>)
 8002282:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <vApplicationGetIdleTaskMemory+0x14>)
 8002286:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	200002c4 	.word	0x200002c4
 8002294:	200000c4 	.word	0x200000c4

08002298 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <vApplicationGetTimerTaskMemory+0x10>)
 800229a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <vApplicationGetTimerTaskMemory+0x14>)
 800229e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80022a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a4:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80022a6:	4770      	bx	lr
 80022a8:	20000764 	.word	0x20000764
 80022ac:	20000364 	.word	0x20000364

080022b0 <timeoutAquecimento>:
		PrimitiveStates.Lastro.realtime = TempLastro-34;
		i=0;
	}
}

void timeoutAquecimento (void){
 80022b0:	b510      	push	{r4, lr}
	//verifica erro temperatura lastro
	if(PrimitiveStates.Lastro.realtime < PrimitiveStates.Lastro.setPoint-5)
 80022b2:	4c14      	ldr	r4, [pc, #80]	; (8002304 <timeoutAquecimento+0x54>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	e9d4 0148 	ldrd	r0, r1, [r4, #288]	; 0x120
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <timeoutAquecimento+0x58>)
 80022bc:	f7fd ff54 	bl	8000168 <__aeabi_dsub>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	e9d4 0146 	ldrd	r0, r1, [r4, #280]	; 0x118
 80022c8:	f7fe fb78 	bl	80009bc <__aeabi_dcmplt>
 80022cc:	b128      	cbz	r0, 80022da <timeoutAquecimento+0x2a>
		PrimitiveStates.Erro.bit.IdleLastro=1;
 80022ce:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e

	//verifica erro temperatura teto
	if(PrimitiveStates.Teto.realtime < PrimitiveStates.Teto.setPoint-5)
 80022da:	2200      	movs	r2, #0
 80022dc:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <timeoutAquecimento+0x58>)
 80022e2:	f7fd ff41 	bl	8000168 <__aeabi_dsub>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
 80022ee:	f7fe fb65 	bl	80009bc <__aeabi_dcmplt>
 80022f2:	b128      	cbz	r0, 8002300 <timeoutAquecimento+0x50>
		PrimitiveStates.Erro.bit.IdleTeto=1;
 80022f4:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
}
 8002300:	bd10      	pop	{r4, pc}
 8002302:	bf00      	nop
 8002304:	20000908 	.word	0x20000908
 8002308:	40140000 	.word	0x40140000

0800230c <timeoutDesligaLampada>:

void timeoutDesligaLampada(void){

	offDigital(&PrimitiveStates.Lampada);
 800230c:	4801      	ldr	r0, [pc, #4]	; (8002314 <timeoutDesligaLampada+0x8>)
 800230e:	f7ff bf1c 	b.w	800214a <offDigital>
 8002312:	bf00      	nop
 8002314:	20000934 	.word	0x20000934

08002318 <CBTimer10ms>:
/* CBTimer10ms function */
void CBTimer10ms(void const * argument)
{
	/* USER CODE BEGIN CBTimer10ms */

	bluetooth10ms(&bluetooth);
 8002318:	4801      	ldr	r0, [pc, #4]	; (8002320 <CBTimer10ms+0x8>)
 800231a:	f7ff b9cf 	b.w	80016bc <bluetooth10ms>
 800231e:	bf00      	nop
 8002320:	2000203c 	.word	0x2000203c

08002324 <SystemClock_Config>:
{
 8002324:	b530      	push	{r4, r5, lr}
 8002326:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002328:	2220      	movs	r2, #32
 800232a:	2100      	movs	r1, #0
 800232c:	a80b      	add	r0, sp, #44	; 0x2c
 800232e:	f008 f88b 	bl	800a448 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002332:	2214      	movs	r2, #20
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002334:	2510      	movs	r5, #16
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002336:	2100      	movs	r1, #0
 8002338:	eb0d 0002 	add.w	r0, sp, r2
 800233c:	f008 f884 	bl	800a448 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002340:	462a      	mov	r2, r5
 8002342:	2100      	movs	r1, #0
 8002344:	a801      	add	r0, sp, #4
 8002346:	f008 f87f 	bl	800a448 <memset>
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800234a:	2401      	movs	r4, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800234c:	230a      	movs	r3, #10
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800234e:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002352:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002354:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8002356:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800235a:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800235c:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800235e:	9511      	str	r5, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8002360:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002362:	f003 fee5 	bl	8006130 <HAL_RCC_OscConfig>
 8002366:	b108      	cbz	r0, 800236c <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8002368:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800236a:	e7fe      	b.n	800236a <SystemClock_Config+0x46>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800236c:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800236e:	e9cd 3505 	strd	r3, r5, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002372:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002376:	9007      	str	r0, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002378:	e9cd 3008 	strd	r3, r0, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800237c:	4621      	mov	r1, r4
 800237e:	a805      	add	r0, sp, #20
 8002380:	f004 f898 	bl	80064b4 <HAL_RCC_ClockConfig>
 8002384:	b108      	cbz	r0, 800238a <SystemClock_Config+0x66>
 8002386:	b672      	cpsid	i
	while (1)
 8002388:	e7fe      	b.n	8002388 <SystemClock_Config+0x64>
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800238a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800238e:	2203      	movs	r2, #3
 8002390:	e9cd 2301 	strd	r2, r3, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002394:	f44f 4340 	mov.w	r3, #49152	; 0xc000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002398:	a801      	add	r0, sp, #4
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800239a:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800239c:	f004 f964 	bl	8006668 <HAL_RCCEx_PeriphCLKConfig>
 80023a0:	b108      	cbz	r0, 80023a6 <SystemClock_Config+0x82>
 80023a2:	b672      	cpsid	i
	while (1)
 80023a4:	e7fe      	b.n	80023a4 <SystemClock_Config+0x80>
}
 80023a6:	b015      	add	sp, #84	; 0x54
 80023a8:	bd30      	pop	{r4, r5, pc}
 80023aa:	0000      	movs	r0, r0
 80023ac:	0000      	movs	r0, r0
	...

080023b0 <main>:
{
 80023b0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	2710      	movs	r7, #16
{
 80023b6:	b0c7      	sub	sp, #284	; 0x11c
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023b8:	4dab      	ldr	r5, [pc, #684]	; (8002668 <main+0x2b8>)
	HAL_Init();
 80023ba:	f002 fbe7 	bl	8004b8c <HAL_Init>
	SystemClock_Config();
 80023be:	f7ff ffb1 	bl	8002324 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c2:	463a      	mov	r2, r7
 80023c4:	2100      	movs	r1, #0
 80023c6:	a83f      	add	r0, sp, #252	; 0xfc
 80023c8:	f008 f83e 	bl	800a448 <memset>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023cc:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 80023ce:	2201      	movs	r2, #1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	61ab      	str	r3, [r5, #24]
 80023d6:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 80023d8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80023e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023e4:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 80023e6:	48a1      	ldr	r0, [pc, #644]	; (800266c <main+0x2bc>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023e8:	f043 0308 	orr.w	r3, r3, #8
 80023ec:	61ab      	str	r3, [r5, #24]
 80023ee:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2400      	movs	r4, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	930c      	str	r3, [sp, #48]	; 0x30
 80023f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 80023fa:	f003 f96b 	bl	80056d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 80023fe:	2200      	movs	r2, #0
 8002400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002404:	489a      	ldr	r0, [pc, #616]	; (8002670 <main+0x2c0>)
 8002406:	f003 f965 	bl	80056d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin
 800240a:	2200      	movs	r2, #0
 800240c:	21f8      	movs	r1, #248	; 0xf8
 800240e:	4897      	ldr	r0, [pc, #604]	; (800266c <main+0x2bc>)
 8002410:	f003 f960 	bl	80056d4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002414:	f04f 0801 	mov.w	r8, #1
 8002418:	f246 0378 	movw	r3, #24696	; 0x6078
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	f04f 0902 	mov.w	r9, #2
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002420:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
	GPIO_InitStruct.Pin = BOTAO_BLE_Pin;
 8002424:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002428:	4890      	ldr	r0, [pc, #576]	; (800266c <main+0x2bc>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800242a:	f8df b248 	ldr.w	fp, [pc, #584]	; 8002674 <main+0x2c4>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242e:	a93f      	add	r1, sp, #252	; 0xfc
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002430:	e9cd 383f 	strd	r3, r8, [sp, #252]	; 0xfc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	e9cd 4941 	strd	r4, r9, [sp, #260]	; 0x104
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002438:	f002 fffe 	bl	8005438 <HAL_GPIO_Init>
	HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 800243c:	488b      	ldr	r0, [pc, #556]	; (800266c <main+0x2bc>)
 800243e:	a93f      	add	r1, sp, #252	; 0xfc
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	9441      	str	r4, [sp, #260]	; 0x104
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002442:	e9cd ab3f 	strd	sl, fp, [sp, #252]	; 0xfc
	HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002446:	f002 fff7 	bl	8005438 <HAL_GPIO_Init>
	HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 800244a:	4889      	ldr	r0, [pc, #548]	; (8002670 <main+0x2c0>)
 800244c:	a93f      	add	r1, sp, #252	; 0xfc
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	9441      	str	r4, [sp, #260]	; 0x104
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002450:	e9cd 6b3f 	strd	r6, fp, [sp, #252]	; 0xfc
	HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 8002454:	f002 fff0 	bl	8005438 <HAL_GPIO_Init>
	HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 8002458:	4885      	ldr	r0, [pc, #532]	; (8002670 <main+0x2c0>)
 800245a:	a93f      	add	r1, sp, #252	; 0xfc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	e9cd 4941 	strd	r4, r9, [sp, #260]	; 0x104
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002460:	e9cd a83f 	strd	sl, r8, [sp, #252]	; 0xfc
	HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 8002464:	f002 ffe8 	bl	8005438 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = EEPROM_EN_Pin;
 8002468:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 800246a:	4880      	ldr	r0, [pc, #512]	; (800266c <main+0x2bc>)
 800246c:	a93f      	add	r1, sp, #252	; 0xfc
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246e:	e9cd 383f 	strd	r3, r8, [sp, #252]	; 0xfc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	e9cd 9941 	strd	r9, r9, [sp, #260]	; 0x104
	HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 8002476:	f002 ffdf 	bl	8005438 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 800247a:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800247c:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 800247e:	ea43 0308 	orr.w	r3, r3, r8
 8002482:	616b      	str	r3, [r5, #20]
 8002484:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002486:	2105      	movs	r1, #5
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002488:	ea03 0308 	and.w	r3, r3, r8
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800248c:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 800248e:	930a      	str	r3, [sp, #40]	; 0x28
 8002490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002492:	f002 fdeb 	bl	800506c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002496:	200b      	movs	r0, #11
 8002498:	f002 fe18 	bl	80050cc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800249c:	4622      	mov	r2, r4
 800249e:	2105      	movs	r1, #5
 80024a0:	200d      	movs	r0, #13
 80024a2:	f002 fde3 	bl	800506c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80024a6:	200d      	movs	r0, #13
 80024a8:	f002 fe10 	bl	80050cc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80024ac:	4622      	mov	r2, r4
 80024ae:	2105      	movs	r1, #5
 80024b0:	200f      	movs	r0, #15
 80024b2:	f002 fddb 	bl	800506c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80024b6:	200f      	movs	r0, #15
 80024b8:	f002 fe08 	bl	80050cc <HAL_NVIC_EnableIRQ>
	hadc1.Instance = ADC1;
 80024bc:	4d6e      	ldr	r5, [pc, #440]	; (8002678 <main+0x2c8>)
 80024be:	4b6f      	ldr	r3, [pc, #444]	; (800267c <main+0x2cc>)
	ADC_ChannelConfTypeDef sConfig = {0};
 80024c0:	e9cd 443f 	strd	r4, r4, [sp, #252]	; 0xfc
	hadc1.Instance = ADC1;
 80024c4:	602b      	str	r3, [r5, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80024c6:	f44f 7380 	mov.w	r3, #256	; 0x100
	ADC_ChannelConfTypeDef sConfig = {0};
 80024ca:	9441      	str	r4, [sp, #260]	; 0x104
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80024cc:	60ab      	str	r3, [r5, #8]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024ce:	752c      	strb	r4, [r5, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024d0:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024d4:	606c      	str	r4, [r5, #4]
	hadc1.Init.NbrOfConversion = 3;
 80024d6:	2403      	movs	r4, #3
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024d8:	4628      	mov	r0, r5
	hadc1.Init.ContinuousConvMode = ENABLE;
 80024da:	f885 800c 	strb.w	r8, [r5, #12]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024de:	61eb      	str	r3, [r5, #28]
	hadc1.Init.NbrOfConversion = 3;
 80024e0:	612c      	str	r4, [r5, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024e2:	f002 fd33 	bl	8004f4c <HAL_ADC_Init>
 80024e6:	b108      	cbz	r0, 80024ec <main+0x13c>
 80024e8:	b672      	cpsid	i
	while (1)
 80024ea:	e7fe      	b.n	80024ea <main+0x13a>
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80024ec:	2306      	movs	r3, #6
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80024ee:	e9cd 083f 	strd	r0, r8, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024f2:	a93f      	add	r1, sp, #252	; 0xfc
 80024f4:	4628      	mov	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80024f6:	9341      	str	r3, [sp, #260]	; 0x104
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024f8:	f002 fbba 	bl	8004c70 <HAL_ADC_ConfigChannel>
 80024fc:	b108      	cbz	r0, 8002502 <main+0x152>
 80024fe:	b672      	cpsid	i
	while (1)
 8002500:	e7fe      	b.n	8002500 <main+0x150>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002502:	4628      	mov	r0, r5
 8002504:	a93f      	add	r1, sp, #252	; 0xfc
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002506:	e9cd 893f 	strd	r8, r9, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800250a:	f002 fbb1 	bl	8004c70 <HAL_ADC_ConfigChannel>
 800250e:	b108      	cbz	r0, 8002514 <main+0x164>
 8002510:	b672      	cpsid	i
	while (1)
 8002512:	e7fe      	b.n	8002512 <main+0x162>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002514:	4628      	mov	r0, r5
 8002516:	a93f      	add	r1, sp, #252	; 0xfc
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8002518:	e9cd 743f 	strd	r7, r4, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800251c:	f002 fba8 	bl	8004c70 <HAL_ADC_ConfigChannel>
 8002520:	4603      	mov	r3, r0
 8002522:	b108      	cbz	r0, 8002528 <main+0x178>
 8002524:	b672      	cpsid	i
	while (1)
 8002526:	e7fe      	b.n	8002526 <main+0x176>
	hi2c1.Instance = I2C1;
 8002528:	4855      	ldr	r0, [pc, #340]	; (8002680 <main+0x2d0>)
	hi2c1.Init.ClockSpeed = 100000;
 800252a:	f8df c158 	ldr.w	ip, [pc, #344]	; 8002684 <main+0x2d4>
 800252e:	4a56      	ldr	r2, [pc, #344]	; (8002688 <main+0x2d8>)
	hi2c1.Init.OwnAddress1 = 0;
 8002530:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hi2c1.Init.ClockSpeed = 100000;
 8002534:	e9c0 c200 	strd	ip, r2, [r0]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002538:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800253c:	e9c0 3306 	strd	r3, r3, [r0, #24]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002540:	e9c0 2304 	strd	r2, r3, [r0, #16]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002544:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002546:	f003 fac7 	bl	8005ad8 <HAL_I2C_Init>
 800254a:	4605      	mov	r5, r0
 800254c:	b108      	cbz	r0, 8002552 <main+0x1a2>
 800254e:	b672      	cpsid	i
	while (1)
 8002550:	e7fe      	b.n	8002550 <main+0x1a0>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002552:	463a      	mov	r2, r7
 8002554:	4601      	mov	r1, r0
 8002556:	a838      	add	r0, sp, #224	; 0xe0
 8002558:	f007 ff76 	bl	800a448 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 800255c:	221c      	movs	r2, #28
 800255e:	4629      	mov	r1, r5
 8002560:	a83f      	add	r0, sp, #252	; 0xfc
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002562:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002566:	f007 ff6f 	bl	800a448 <memset>
	htim3.Init.Prescaler = 4000-1;
 800256a:	f640 739f 	movw	r3, #3999	; 0xf9f
	htim3.Instance = TIM3;
 800256e:	4c47      	ldr	r4, [pc, #284]	; (800268c <main+0x2dc>)
	htim3.Init.Prescaler = 4000-1;
 8002570:	4f47      	ldr	r7, [pc, #284]	; (8002690 <main+0x2e0>)
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002572:	4620      	mov	r0, r4
	htim3.Init.Prescaler = 4000-1;
 8002574:	e9c4 7300 	strd	r7, r3, [r4]
	htim3.Init.Period = 100-1;
 8002578:	2363      	movs	r3, #99	; 0x63
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257a:	60a5      	str	r5, [r4, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257c:	e9c4 3503 	strd	r3, r5, [r4, #12]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002580:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002582:	f004 fc7b 	bl	8006e7c <HAL_TIM_Base_Init>
 8002586:	b108      	cbz	r0, 800258c <main+0x1dc>
 8002588:	b672      	cpsid	i
	while (1)
 800258a:	e7fe      	b.n	800258a <main+0x1da>
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800258c:	4620      	mov	r0, r4
 800258e:	a938      	add	r1, sp, #224	; 0xe0
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002590:	9638      	str	r6, [sp, #224]	; 0xe0
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002592:	f004 fd5a 	bl	800704a <HAL_TIM_ConfigClockSource>
 8002596:	b108      	cbz	r0, 800259c <main+0x1ec>
 8002598:	b672      	cpsid	i
	while (1)
 800259a:	e7fe      	b.n	800259a <main+0x1ea>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800259c:	4620      	mov	r0, r4
 800259e:	f004 fc99 	bl	8006ed4 <HAL_TIM_PWM_Init>
 80025a2:	b108      	cbz	r0, 80025a8 <main+0x1f8>
 80025a4:	b672      	cpsid	i
	while (1)
 80025a6:	e7fe      	b.n	80025a6 <main+0x1f6>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a8:	e9cd 0031 	strd	r0, r0, [sp, #196]	; 0xc4
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025ac:	a931      	add	r1, sp, #196	; 0xc4
 80025ae:	4620      	mov	r0, r4
 80025b0:	f004 fe80 	bl	80072b4 <HAL_TIMEx_MasterConfigSynchronization>
 80025b4:	4602      	mov	r2, r0
 80025b6:	b108      	cbz	r0, 80025bc <main+0x20c>
 80025b8:	b672      	cpsid	i
	while (1)
 80025ba:	e7fe      	b.n	80025ba <main+0x20a>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025bc:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = 0;
 80025be:	e9cd 303f 	strd	r3, r0, [sp, #252]	; 0xfc
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80025c2:	2304      	movs	r3, #4
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025c4:	9041      	str	r0, [sp, #260]	; 0x104
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025c6:	a93f      	add	r1, sp, #252	; 0xfc
 80025c8:	4620      	mov	r0, r4
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80025ca:	9343      	str	r3, [sp, #268]	; 0x10c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025cc:	f004 fcda 	bl	8006f84 <HAL_TIM_PWM_ConfigChannel>
 80025d0:	b108      	cbz	r0, 80025d6 <main+0x226>
 80025d2:	b672      	cpsid	i
	while (1)
 80025d4:	e7fe      	b.n	80025d4 <main+0x224>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025d6:	2204      	movs	r2, #4
 80025d8:	482c      	ldr	r0, [pc, #176]	; (800268c <main+0x2dc>)
 80025da:	a93f      	add	r1, sp, #252	; 0xfc
 80025dc:	f004 fcd2 	bl	8006f84 <HAL_TIM_PWM_ConfigChannel>
 80025e0:	b108      	cbz	r0, 80025e6 <main+0x236>
 80025e2:	b672      	cpsid	i
	while (1)
 80025e4:	e7fe      	b.n	80025e4 <main+0x234>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025e6:	2208      	movs	r2, #8
 80025e8:	4828      	ldr	r0, [pc, #160]	; (800268c <main+0x2dc>)
 80025ea:	a93f      	add	r1, sp, #252	; 0xfc
 80025ec:	f004 fcca 	bl	8006f84 <HAL_TIM_PWM_ConfigChannel>
 80025f0:	b108      	cbz	r0, 80025f6 <main+0x246>
 80025f2:	b672      	cpsid	i
	while (1)
 80025f4:	e7fe      	b.n	80025f4 <main+0x244>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025f6:	220c      	movs	r2, #12
 80025f8:	4824      	ldr	r0, [pc, #144]	; (800268c <main+0x2dc>)
 80025fa:	a93f      	add	r1, sp, #252	; 0xfc
 80025fc:	f004 fcc2 	bl	8006f84 <HAL_TIM_PWM_ConfigChannel>
 8002600:	4605      	mov	r5, r0
 8002602:	b108      	cbz	r0, 8002608 <main+0x258>
 8002604:	b672      	cpsid	i
	while (1)
 8002606:	e7fe      	b.n	8002606 <main+0x256>
	HAL_TIM_MspPostInit(&htim3);
 8002608:	4820      	ldr	r0, [pc, #128]	; (800268c <main+0x2dc>)
 800260a:	f000 fe43 	bl	8003294 <HAL_TIM_MspPostInit>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800260e:	2210      	movs	r2, #16
 8002610:	4629      	mov	r1, r5
 8002612:	a838      	add	r0, sp, #224	; 0xe0
 8002614:	f007 ff18 	bl	800a448 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002618:	221c      	movs	r2, #28
 800261a:	4629      	mov	r1, r5
 800261c:	a83f      	add	r0, sp, #252	; 0xfc
	htim2.Init.Prescaler = 165-1;
 800261e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002622:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002626:	f007 ff0f 	bl	800a448 <memset>
	htim2.Init.Prescaler = 165-1;
 800262a:	23a4      	movs	r3, #164	; 0xa4
	htim2.Instance = TIM2;
 800262c:	4c19      	ldr	r4, [pc, #100]	; (8002694 <main+0x2e4>)
	htim2.Init.Prescaler = 165-1;
 800262e:	e9c4 6300 	strd	r6, r3, [r4]
	htim2.Init.Period = 100-1;
 8002632:	2363      	movs	r3, #99	; 0x63
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002634:	4620      	mov	r0, r4
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002636:	e9c4 3503 	strd	r3, r5, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263a:	60a5      	str	r5, [r4, #8]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800263c:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800263e:	f004 fc1d 	bl	8006e7c <HAL_TIM_Base_Init>
 8002642:	b108      	cbz	r0, 8002648 <main+0x298>
 8002644:	b672      	cpsid	i
	while (1)
 8002646:	e7fe      	b.n	8002646 <main+0x296>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800264c:	4620      	mov	r0, r4
 800264e:	a938      	add	r1, sp, #224	; 0xe0
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002650:	9338      	str	r3, [sp, #224]	; 0xe0
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002652:	f004 fcfa 	bl	800704a <HAL_TIM_ConfigClockSource>
 8002656:	b108      	cbz	r0, 800265c <main+0x2ac>
 8002658:	b672      	cpsid	i
	while (1)
 800265a:	e7fe      	b.n	800265a <main+0x2aa>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800265c:	4620      	mov	r0, r4
 800265e:	f004 fc39 	bl	8006ed4 <HAL_TIM_PWM_Init>
 8002662:	b1c8      	cbz	r0, 8002698 <main+0x2e8>
 8002664:	b672      	cpsid	i
	while (1)
 8002666:	e7fe      	b.n	8002666 <main+0x2b6>
 8002668:	40021000 	.word	0x40021000
 800266c:	40010c00 	.word	0x40010c00
 8002670:	40010800 	.word	0x40010800
 8002674:	10110000 	.word	0x10110000
 8002678:	20002190 	.word	0x20002190
 800267c:	40012400 	.word	0x40012400
 8002680:	2000228c 	.word	0x2000228c
 8002684:	40005400 	.word	0x40005400
 8002688:	000186a0 	.word	0x000186a0
 800268c:	2000233c 	.word	0x2000233c
 8002690:	40000400 	.word	0x40000400
 8002694:	200022f4 	.word	0x200022f4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002698:	e9cd 0031 	strd	r0, r0, [sp, #196]	; 0xc4
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800269c:	a931      	add	r1, sp, #196	; 0xc4
 800269e:	4620      	mov	r0, r4
 80026a0:	f004 fe08 	bl	80072b4 <HAL_TIMEx_MasterConfigSynchronization>
 80026a4:	b108      	cbz	r0, 80026aa <main+0x2fa>
 80026a6:	b672      	cpsid	i
	while (1)
 80026a8:	e7fe      	b.n	80026a8 <main+0x2f8>
	sConfigOC.Pulse = 50;
 80026aa:	2560      	movs	r5, #96	; 0x60
 80026ac:	2332      	movs	r3, #50	; 0x32
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ae:	9041      	str	r0, [sp, #260]	; 0x104
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b0:	9043      	str	r0, [sp, #268]	; 0x10c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026b2:	220c      	movs	r2, #12
 80026b4:	4620      	mov	r0, r4
 80026b6:	a93f      	add	r1, sp, #252	; 0xfc
	sConfigOC.Pulse = 50;
 80026b8:	e9cd 533f 	strd	r5, r3, [sp, #252]	; 0xfc
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026bc:	f004 fc62 	bl	8006f84 <HAL_TIM_PWM_ConfigChannel>
 80026c0:	4605      	mov	r5, r0
 80026c2:	b108      	cbz	r0, 80026c8 <main+0x318>
 80026c4:	b672      	cpsid	i
	while (1)
 80026c6:	e7fe      	b.n	80026c6 <main+0x316>
	HAL_TIM_MspPostInit(&htim2);
 80026c8:	4620      	mov	r0, r4
 80026ca:	f000 fde3 	bl	8003294 <HAL_TIM_MspPostInit>
	huart1.Init.BaudRate = 9600;
 80026ce:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	huart1.Instance = USART1;
 80026d2:	4827      	ldr	r0, [pc, #156]	; (8002770 <main+0x3c0>)
	huart1.Init.BaudRate = 9600;
 80026d4:	4c27      	ldr	r4, [pc, #156]	; (8002774 <main+0x3c4>)
	huart1.Init.StopBits = UART_STOPBITS_1;
 80026d6:	e9c0 5502 	strd	r5, r5, [r0, #8]
	huart1.Init.BaudRate = 9600;
 80026da:	e9c0 4300 	strd	r4, r3, [r0]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80026de:	240c      	movs	r4, #12
	huart1.Init.Parity = UART_PARITY_NONE;
 80026e0:	6105      	str	r5, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026e2:	e9c0 4505 	strd	r4, r5, [r0, #20]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e6:	61c5      	str	r5, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80026e8:	f004 feb2 	bl	8007450 <HAL_UART_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	b108      	cbz	r0, 80026f4 <main+0x344>
 80026f0:	b672      	cpsid	i
	while (1)
 80026f2:	e7fe      	b.n	80026f2 <main+0x342>
	huart3.Init.BaudRate = 115200;
 80026f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart3.Instance = USART3;
 80026f8:	481f      	ldr	r0, [pc, #124]	; (8002778 <main+0x3c8>)
	huart3.Init.BaudRate = 115200;
 80026fa:	4920      	ldr	r1, [pc, #128]	; (800277c <main+0x3cc>)
	huart3.Init.StopBits = UART_STOPBITS_1;
 80026fc:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart3.Init.BaudRate = 115200;
 8002700:	e9c0 1200 	strd	r1, r2, [r0]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002704:	e9c0 3404 	strd	r3, r4, [r0, #16]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002708:	e9c0 3306 	strd	r3, r3, [r0, #24]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800270c:	f004 fea0 	bl	8007450 <HAL_UART_Init>
 8002710:	b108      	cbz	r0, 8002716 <main+0x366>
 8002712:	b672      	cpsid	i
	while (1)
 8002714:	e7fe      	b.n	8002714 <main+0x364>
	RTC_TimeTypeDef sTime = {0};
 8002716:	2300      	movs	r3, #0
 8002718:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
 800271c:	f88d 30e2 	strb.w	r3, [sp, #226]	; 0xe2
	RTC_DateTypeDef DateToUpdate = {0};
 8002720:	933f      	str	r3, [sp, #252]	; 0xfc
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
	hrtc.Instance = RTC;
 8002726:	4c16      	ldr	r4, [pc, #88]	; (8002780 <main+0x3d0>)
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002728:	4a16      	ldr	r2, [pc, #88]	; (8002784 <main+0x3d4>)
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800272a:	4620      	mov	r0, r4
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800272c:	e9c4 2300 	strd	r2, r3, [r4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002734:	60a3      	str	r3, [r4, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002736:	f004 f9db 	bl	8006af0 <HAL_RTC_Init>
 800273a:	b108      	cbz	r0, 8002740 <main+0x390>
 800273c:	b672      	cpsid	i
	while (1)
 800273e:	e7fe      	b.n	800273e <main+0x38e>
	sTime.Hours = 0x0;
 8002740:	f8ad 00e0 	strh.w	r0, [sp, #224]	; 0xe0
	sTime.Seconds = 0x0;
 8002744:	f88d 00e2 	strb.w	r0, [sp, #226]	; 0xe2
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002748:	2201      	movs	r2, #1
 800274a:	4620      	mov	r0, r4
 800274c:	a938      	add	r1, sp, #224	; 0xe0
 800274e:	f004 f90c 	bl	800696a <HAL_RTC_SetTime>
 8002752:	b108      	cbz	r0, 8002758 <main+0x3a8>
 8002754:	b672      	cpsid	i
	while (1)
 8002756:	e7fe      	b.n	8002756 <main+0x3a6>
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <main+0x3d8>)
	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800275a:	4620      	mov	r0, r4
 800275c:	2201      	movs	r2, #1
 800275e:	a93f      	add	r1, sp, #252	; 0xfc
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002760:	933f      	str	r3, [sp, #252]	; 0xfc
	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002762:	f004 f953 	bl	8006a0c <HAL_RTC_SetDate>
 8002766:	4604      	mov	r4, r0
 8002768:	b180      	cbz	r0, 800278c <main+0x3dc>
 800276a:	b672      	cpsid	i
	while (1)
 800276c:	e7fe      	b.n	800276c <main+0x3bc>
 800276e:	bf00      	nop
 8002770:	20002384 	.word	0x20002384
 8002774:	40013800 	.word	0x40013800
 8002778:	200023cc 	.word	0x200023cc
 800277c:	40004800 	.word	0x40004800
 8002780:	200022e0 	.word	0x200022e0
 8002784:	40002800 	.word	0x40002800
 8002788:	00010101 	.word	0x00010101
	HAL_Delay(1000);
 800278c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	OutputAddPID(&PrimitiveStates.outPuts,&PrimitiveStates.Teto		,&htim3	,TIM_CHANNEL_4	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 8002790:	f20f 2944 	addw	r9, pc, #580	; 0x244
 8002794:	e9d9 8900 	ldrd	r8, r9, [r9]
 8002798:	a791      	add	r7, pc, #580	; (adr r7, 80029e0 <main+0x630>)
 800279a:	e9d7 6700 	ldrd	r6, r7, [r7]
	HAL_Delay(1000);
 800279e:	f002 fa19 	bl	8004bd4 <HAL_Delay>
	HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 3	);// ADC_DMA
 80027a2:	2203      	movs	r2, #3
 80027a4:	4990      	ldr	r1, [pc, #576]	; (80029e8 <main+0x638>)
 80027a6:	4891      	ldr	r0, [pc, #580]	; (80029ec <main+0x63c>)
 80027a8:	f002 fb1c 	bl	8004de4 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_3);
 80027ac:	2108      	movs	r1, #8
 80027ae:	4890      	ldr	r0, [pc, #576]	; (80029f0 <main+0x640>)
 80027b0:	f004 fd42 	bl	8007238 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_4);
 80027b4:	210c      	movs	r1, #12
 80027b6:	488e      	ldr	r0, [pc, #568]	; (80029f0 <main+0x640>)
 80027b8:	f004 fd3e 	bl	8007238 <HAL_TIM_PWM_Start>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.Lampada		,RELE_1_Pin	,RELE_1_GPIO_Port	,timeoutDesligaLampada	,45	,0);
 80027bc:	232d      	movs	r3, #45	; 0x2d
 80027be:	498d      	ldr	r1, [pc, #564]	; (80029f4 <main+0x644>)
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	4b8d      	ldr	r3, [pc, #564]	; (80029f8 <main+0x648>)
 80027c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	f1a1 002c 	sub.w	r0, r1, #44	; 0x2c
 80027ce:	4b8b      	ldr	r3, [pc, #556]	; (80029fc <main+0x64c>)
 80027d0:	9402      	str	r4, [sp, #8]
 80027d2:	f7ff fc7e 	bl	80020d2 <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.Cooler		,RELE_2_Pin	,RELE_2_GPIO_Port	,0	,0	,0);
 80027d6:	498a      	ldr	r1, [pc, #552]	; (8002a00 <main+0x650>)
 80027d8:	2208      	movs	r2, #8
 80027da:	4b8a      	ldr	r3, [pc, #552]	; (8002a04 <main+0x654>)
 80027dc:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
 80027e0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80027e4:	9400      	str	r4, [sp, #0]
 80027e6:	f7ff fc74 	bl	80020d2 <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.LedLastro	,RELE_3_Pin	,RELE_3_GPIO_Port	,0	,0	,0);
 80027ea:	4987      	ldr	r1, [pc, #540]	; (8002a08 <main+0x658>)
 80027ec:	2210      	movs	r2, #16
 80027ee:	4b85      	ldr	r3, [pc, #532]	; (8002a04 <main+0x654>)
 80027f0:	f1a1 008c 	sub.w	r0, r1, #140	; 0x8c
 80027f4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80027f8:	9400      	str	r4, [sp, #0]
 80027fa:	f7ff fc6a 	bl	80020d2 <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.LedTeto		,RELE_4_Pin	,RELE_4_GPIO_Port	,0	,0	,0);
 80027fe:	4983      	ldr	r1, [pc, #524]	; (8002a0c <main+0x65c>)
 8002800:	2220      	movs	r2, #32
 8002802:	4b80      	ldr	r3, [pc, #512]	; (8002a04 <main+0x654>)
 8002804:	f1a1 0074 	sub.w	r0, r1, #116	; 0x74
 8002808:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800280c:	9400      	str	r4, [sp, #0]
 800280e:	f7ff fc60 	bl	80020d2 <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.LedVerde		,RELE_5_Pin	,RELE_5_GPIO_Port	,0	,0	,0);
 8002812:	497f      	ldr	r1, [pc, #508]	; (8002a10 <main+0x660>)
 8002814:	2240      	movs	r2, #64	; 0x40
 8002816:	4b7b      	ldr	r3, [pc, #492]	; (8002a04 <main+0x654>)
 8002818:	f1a1 005c 	sub.w	r0, r1, #92	; 0x5c
 800281c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002820:	9400      	str	r4, [sp, #0]
 8002822:	f7ff fc56 	bl	80020d2 <OutputAddDigital>
	OutputAddPID(&PrimitiveStates.outPuts,&PrimitiveStates.Teto		,&htim3	,TIM_CHANNEL_4	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 8002826:	2503      	movs	r5, #3
 8002828:	f44f 7a16 	mov.w	sl, #600	; 0x258
 800282c:	2200      	movs	r2, #0
 800282e:	4979      	ldr	r1, [pc, #484]	; (8002a14 <main+0x664>)
 8002830:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8002a18 <main+0x668>
 8002834:	4b79      	ldr	r3, [pc, #484]	; (8002a1c <main+0x66c>)
 8002836:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800283a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800283e:	e9cd 2300 	strd	r2, r3, [sp]
 8002842:	e9cd 5a06 	strd	r5, sl, [sp, #24]
 8002846:	230c      	movs	r3, #12
 8002848:	4a69      	ldr	r2, [pc, #420]	; (80029f0 <main+0x640>)
 800284a:	f1a1 00a8 	sub.w	r0, r1, #168	; 0xa8
 800284e:	f8cd b020 	str.w	fp, [sp, #32]
 8002852:	f7ff fc52 	bl	80020fa <OutputAddPID>
	OutputAddPID(&PrimitiveStates.outPuts,&PrimitiveStates.Lastro	,&htim3	,TIM_CHANNEL_3	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 8002856:	2200      	movs	r2, #0
 8002858:	4971      	ldr	r1, [pc, #452]	; (8002a20 <main+0x670>)
 800285a:	4b70      	ldr	r3, [pc, #448]	; (8002a1c <main+0x66c>)
 800285c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002860:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002864:	e9cd 2300 	strd	r2, r3, [sp]
 8002868:	9506      	str	r5, [sp, #24]
 800286a:	2308      	movs	r3, #8
 800286c:	4a60      	ldr	r2, [pc, #384]	; (80029f0 <main+0x640>)
 800286e:	f1a1 00f0 	sub.w	r0, r1, #240	; 0xf0
 8002872:	e9cd ab07 	strd	sl, fp, [sp, #28]
 8002876:	f7ff fc40 	bl	80020fa <OutputAddPID>
	BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 800287a:	2101      	movs	r1, #1
 800287c:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(BinSemUartTx);
 800287e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8002882:	f005 fa91 	bl	8007da8 <osSemaphoreCreate>
 8002886:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <main+0x674>)
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 8002888:	4622      	mov	r2, r4
	BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 800288a:	6018      	str	r0, [r3, #0]
	osTimerDef(timer10ms, CBTimer10ms);
 800288c:	4b66      	ldr	r3, [pc, #408]	; (8002a28 <main+0x678>)
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 800288e:	2101      	movs	r1, #1
 8002890:	a80f      	add	r0, sp, #60	; 0x3c
	osTimerDef(timer10ms, CBTimer10ms);
 8002892:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 8002896:	f005 f9f9 	bl	8007c8c <osTimerCreate>
 800289a:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8002a2c <main+0x67c>
	osTimerDef(timer1000ms, CBTimer1000ms);
 800289e:	4b64      	ldr	r3, [pc, #400]	; (8002a30 <main+0x680>)
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 80028a0:	4622      	mov	r2, r4
 80028a2:	2101      	movs	r1, #1
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 80028a4:	f8c8 0000 	str.w	r0, [r8]
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 80028a8:	a811      	add	r0, sp, #68	; 0x44
	osTimerDef(timer1000ms, CBTimer1000ms);
 80028aa:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 80028ae:	f005 f9ed 	bl	8007c8c <osTimerCreate>
	osMessageQDef(FilaComando, 10, uint16_t);
 80028b2:	4d60      	ldr	r5, [pc, #384]	; (8002a34 <main+0x684>)
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 80028b4:	4f60      	ldr	r7, [pc, #384]	; (8002a38 <main+0x688>)
	osMessageQDef(FilaComando, 10, uint16_t);
 80028b6:	ae13      	add	r6, sp, #76	; 0x4c
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 80028b8:	6038      	str	r0, [r7, #0]
	osMessageQDef(FilaComando, 10, uint16_t);
 80028ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028be:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	FilaComandoHandle = osMessageCreate(osMessageQ(FilaComando), NULL);
 80028c2:	4621      	mov	r1, r4
 80028c4:	4630      	mov	r0, r6
 80028c6:	f005 fa92 	bl	8007dee <osMessageCreate>
 80028ca:	4b5c      	ldr	r3, [pc, #368]	; (8002a3c <main+0x68c>)
	osMessageQStaticDef(FilaTXBluetooth, 16, uint32_t, FilaTXBluetoothBuffer, &FilaTXBluetoothControlBlock);
 80028cc:	ae17      	add	r6, sp, #92	; 0x5c
	FilaComandoHandle = osMessageCreate(osMessageQ(FilaComando), NULL);
 80028ce:	6018      	str	r0, [r3, #0]
	osMessageQStaticDef(FilaTXBluetooth, 16, uint32_t, FilaTXBluetoothBuffer, &FilaTXBluetoothControlBlock);
 80028d0:	f105 0310 	add.w	r3, r5, #16
 80028d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028d6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	FilaTXBluetoothHandle = osMessageCreate(osMessageQ(FilaTXBluetooth), NULL);
 80028da:	4621      	mov	r1, r4
 80028dc:	4630      	mov	r0, r6
 80028de:	f005 fa86 	bl	8007dee <osMessageCreate>
 80028e2:	4b57      	ldr	r3, [pc, #348]	; (8002a40 <main+0x690>)
	osMessageQStaticDef(FilaRXBluetooth, 10, uint8_t, FilaRXBluetoothBuffer, &FilaRXBluetoothControlBlock);
 80028e4:	ae1b      	add	r6, sp, #108	; 0x6c
	FilaTXBluetoothHandle = osMessageCreate(osMessageQ(FilaTXBluetooth), NULL);
 80028e6:	6018      	str	r0, [r3, #0]
	osMessageQStaticDef(FilaRXBluetooth, 10, uint8_t, FilaRXBluetoothBuffer, &FilaRXBluetoothControlBlock);
 80028e8:	f105 0320 	add.w	r3, r5, #32
 80028ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ee:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	FilaRXBluetoothHandle = osMessageCreate(osMessageQ(FilaRXBluetooth), NULL);
 80028f2:	4621      	mov	r1, r4
 80028f4:	4630      	mov	r0, r6
 80028f6:	f005 fa7a 	bl	8007dee <osMessageCreate>
 80028fa:	4b52      	ldr	r3, [pc, #328]	; (8002a44 <main+0x694>)
	osMessageQDef(FilaEeprom, 10, uint16_t);
 80028fc:	ae1f      	add	r6, sp, #124	; 0x7c
	FilaRXBluetoothHandle = osMessageCreate(osMessageQ(FilaRXBluetooth), NULL);
 80028fe:	6018      	str	r0, [r3, #0]
	osMessageQDef(FilaEeprom, 10, uint16_t);
 8002900:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002904:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8002908:	4621      	mov	r1, r4
 800290a:	4630      	mov	r0, r6
 800290c:	f005 fa6f 	bl	8007dee <osMessageCreate>
 8002910:	4b4d      	ldr	r3, [pc, #308]	; (8002a48 <main+0x698>)
	osThreadStaticDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 1024, TaskBluetoothBuffer, &TaskBluetoothControlBlock);
 8002912:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8002916:	ae23      	add	r6, sp, #140	; 0x8c
	FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8002918:	6018      	str	r0, [r3, #0]
	osThreadStaticDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 1024, TaskBluetoothBuffer, &TaskBluetoothControlBlock);
 800291a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800291e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002920:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002924:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 8002928:	4621      	mov	r1, r4
 800292a:	a823      	add	r0, sp, #140	; 0x8c
 800292c:	f005 f972 	bl	8007c14 <osThreadCreate>
 8002930:	4b46      	ldr	r3, [pc, #280]	; (8002a4c <main+0x69c>)
	osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 8002932:	f105 0c4c 	add.w	ip, r5, #76	; 0x4c
 8002936:	ae2a      	add	r6, sp, #168	; 0xa8
	TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 8002938:	6018      	str	r0, [r3, #0]
	osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 800293a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800293e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002940:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002944:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8002948:	4621      	mov	r1, r4
 800294a:	a82a      	add	r0, sp, #168	; 0xa8
 800294c:	f005 f962 	bl	8007c14 <osThreadCreate>
 8002950:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002a50 <main+0x6a0>
	osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8002954:	f105 0c68 	add.w	ip, r5, #104	; 0x68
 8002958:	ae31      	add	r6, sp, #196	; 0xc4
	TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 800295a:	f8c9 0000 	str.w	r0, [r9]
	osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 800295e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002962:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002964:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002968:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 800296c:	4621      	mov	r1, r4
 800296e:	a831      	add	r0, sp, #196	; 0xc4
 8002970:	f005 f950 	bl	8007c14 <osThreadCreate>
 8002974:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <main+0x6a4>)
	osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8002976:	f105 0c84 	add.w	ip, r5, #132	; 0x84
 800297a:	ae38      	add	r6, sp, #224	; 0xe0
	TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 800297c:	6018      	str	r0, [r3, #0]
	osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 800297e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002982:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002984:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002988:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 800298c:	4621      	mov	r1, r4
 800298e:	a838      	add	r0, sp, #224	; 0xe0
 8002990:	f005 f940 	bl	8007c14 <osThreadCreate>
 8002994:	4b30      	ldr	r3, [pc, #192]	; (8002a58 <main+0x6a8>)
	osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 8002996:	ae3f      	add	r6, sp, #252	; 0xfc
 8002998:	35a0      	adds	r5, #160	; 0xa0
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 800299a:	6018      	str	r0, [r3, #0]
	osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 800299c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800299e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80029a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029a4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskEepromHandle = osThreadCreate(osThread(TaskEeprom), NULL);
 80029a8:	4621      	mov	r1, r4
 80029aa:	a83f      	add	r0, sp, #252	; 0xfc
 80029ac:	f005 f932 	bl	8007c14 <osThreadCreate>
 80029b0:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <main+0x6ac>)
 80029b2:	6018      	str	r0, [r3, #0]
	osThreadSuspend(TaskTemperaturaHandle); //só é liberada após taskeeprom
 80029b4:	f8d9 0000 	ldr.w	r0, [r9]
 80029b8:	f005 fa8d 	bl	8007ed6 <osThreadSuspend>
	osTimerStart(timer10msHandle,10);
 80029bc:	210a      	movs	r1, #10
 80029be:	f8d8 0000 	ldr.w	r0, [r8]
 80029c2:	f005 f97b 	bl	8007cbc <osTimerStart>
	osTimerStart(timer1000msHandle,1000);
 80029c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029ca:	6838      	ldr	r0, [r7, #0]
 80029cc:	f005 f976 	bl	8007cbc <osTimerStart>
	osKernelStart();
 80029d0:	f005 f91b 	bl	8007c0a <osKernelStart>
	while (1)
 80029d4:	e7fe      	b.n	80029d4 <main+0x624>
 80029d6:	bf00      	nop
 80029d8:	33333333 	.word	0x33333333
 80029dc:	3fd33333 	.word	0x3fd33333
 80029e0:	47ae147b 	.word	0x47ae147b
 80029e4:	3f847ae1 	.word	0x3f847ae1
 80029e8:	20002184 	.word	0x20002184
 80029ec:	20002190 	.word	0x20002190
 80029f0:	2000233c 	.word	0x2000233c
 80029f4:	20000934 	.word	0x20000934
 80029f8:	0800230d 	.word	0x0800230d
 80029fc:	40010800 	.word	0x40010800
 8002a00:	2000094c 	.word	0x2000094c
 8002a04:	40010c00 	.word	0x40010c00
 8002a08:	20000994 	.word	0x20000994
 8002a0c:	2000097c 	.word	0x2000097c
 8002a10:	20000964 	.word	0x20000964
 8002a14:	200009b0 	.word	0x200009b0
 8002a18:	080022b1 	.word	0x080022b1
 8002a1c:	403e0000 	.word	0x403e0000
 8002a20:	200009f8 	.word	0x200009f8
 8002a24:	20000804 	.word	0x20000804
 8002a28:	08002319 	.word	0x08002319
 8002a2c:	2000242c 	.word	0x2000242c
 8002a30:	08002b6d 	.word	0x08002b6d
 8002a34:	0800b284 	.word	0x0800b284
 8002a38:	20002428 	.word	0x20002428
 8002a3c:	20000818 	.word	0x20000818
 8002a40:	20000900 	.word	0x20000900
 8002a44:	20000874 	.word	0x20000874
 8002a48:	2000081c 	.word	0x2000081c
 8002a4c:	20001ae8 	.word	0x20001ae8
 8002a50:	20001d94 	.word	0x20001d94
 8002a54:	20001d8c 	.word	0x20001d8c
 8002a58:	20002038 	.word	0x20002038
 8002a5c:	20001d90 	.word	0x20001d90

08002a60 <desligaForno>:
	PrimitiveStates.SPTimerMinutos 	= 0;
 8002a60:	2200      	movs	r2, #0
	PrimitiveStates.Lastro.setPoint	= 0;
 8002a62:	2000      	movs	r0, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <desligaForno+0x20>)
 8002a68:	e9c3 0148 	strd	r0, r1, [r3, #288]	; 0x120
	PrimitiveStates.Teto.setPoint 	= 0;
 8002a6c:	e9c3 0136 	strd	r0, r1, [r3, #216]	; 0xd8
	PrimitiveStates.SPTimerMinutos 	= 0;
 8002a70:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	PrimitiveStates.SPTimerSegundos = 0;
 8002a74:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
	PrimitiveStates.RTTimerSegundos = 0;
 8002a78:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000908 	.word	0x20000908
 8002a84:	00000000 	.word	0x00000000

08002a88 <leTempInterna>:
void leTempInterna(void){
 8002a88:	b508      	push	{r3, lr}
	tempInterna = ((V25_ - VSENSE*buffer_ADC[2])/Avg_slope)+25;
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <leTempInterna+0x58>)
 8002a8c:	6898      	ldr	r0, [r3, #8]
 8002a8e:	f7fd fca9 	bl	80003e4 <__aeabi_ui2d>
 8002a92:	a30d      	add	r3, pc, #52	; (adr r3, 8002ac8 <leTempInterna+0x40>)
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f7fd fd1e 	bl	80004d8 <__aeabi_dmul>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	a10b      	add	r1, pc, #44	; (adr r1, 8002ad0 <leTempInterna+0x48>)
 8002aa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002aa6:	f7fd fb5f 	bl	8000168 <__aeabi_dsub>
 8002aaa:	a30b      	add	r3, pc, #44	; (adr r3, 8002ad8 <leTempInterna+0x50>)
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	f7fd fe3c 	bl	800072c <__aeabi_ddiv>
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <leTempInterna+0x5c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f7fd fb58 	bl	800016c <__adddf3>
 8002abc:	f7fd ffc6 	bl	8000a4c <__aeabi_d2f>
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <leTempInterna+0x60>)
 8002ac2:	6018      	str	r0, [r3, #0]
}
 8002ac4:	bd08      	pop	{r3, pc}
 8002ac6:	bf00      	nop
 8002ac8:	66666666 	.word	0x66666666
 8002acc:	3f4a6666 	.word	0x3f4a6666
 8002ad0:	ae147ae1 	.word	0xae147ae1
 8002ad4:	3ff6e147 	.word	0x3ff6e147
 8002ad8:	75f6fd22 	.word	0x75f6fd22
 8002adc:	3f719ce0 	.word	0x3f719ce0
 8002ae0:	20002184 	.word	0x20002184
 8002ae4:	40390000 	.word	0x40390000
 8002ae8:	20002424 	.word	0x20002424
 8002aec:	00000000 	.word	0x00000000

08002af0 <controleCooler>:
void controleCooler(void){
 8002af0:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
	if(PrimitiveStates.Lastro.realtime>200 || PrimitiveStates.Teto.realtime>200){
 8002af4:	4c1a      	ldr	r4, [pc, #104]	; (8002b60 <controleCooler+0x70>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	e9d4 8946 	ldrd	r8, r9, [r4, #280]	; 0x118
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <controleCooler+0x74>)
 8002afe:	4640      	mov	r0, r8
 8002b00:	4649      	mov	r1, r9
 8002b02:	f7fd ff79 	bl	80009f8 <__aeabi_dcmpgt>
 8002b06:	b940      	cbnz	r0, 8002b1a <controleCooler+0x2a>
 8002b08:	e9d4 6734 	ldrd	r6, r7, [r4, #208]	; 0xd0
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4630      	mov	r0, r6
 8002b10:	4639      	mov	r1, r7
 8002b12:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <controleCooler+0x74>)
 8002b14:	f7fd ff70 	bl	80009f8 <__aeabi_dcmpgt>
 8002b18:	b120      	cbz	r0, 8002b24 <controleCooler+0x34>
}
 8002b1a:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
		onDigital(&PrimitiveStates.Cooler);
 8002b1e:	4812      	ldr	r0, [pc, #72]	; (8002b68 <controleCooler+0x78>)
 8002b20:	f7ff bb09 	b.w	8002136 <onDigital>
	}else 	if(PrimitiveStates.Lastro.realtime<195 && PrimitiveStates.Teto.realtime<195){
 8002b24:	4640      	mov	r0, r8
 8002b26:	a30c      	add	r3, pc, #48	; (adr r3, 8002b58 <controleCooler+0x68>)
 8002b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	f7fd ff45 	bl	80009bc <__aeabi_dcmplt>
 8002b32:	b168      	cbz	r0, 8002b50 <controleCooler+0x60>
 8002b34:	a308      	add	r3, pc, #32	; (adr r3, 8002b58 <controleCooler+0x68>)
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	4630      	mov	r0, r6
 8002b3c:	4639      	mov	r1, r7
 8002b3e:	f7fd ff3d 	bl	80009bc <__aeabi_dcmplt>
 8002b42:	b128      	cbz	r0, 8002b50 <controleCooler+0x60>
		offDigital(&PrimitiveStates.Cooler);
 8002b44:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
 8002b48:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
		offDigital(&PrimitiveStates.Cooler);
 8002b4c:	f7ff bafd 	b.w	800214a <offDigital>
}
 8002b50:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8002b54:	f3af 8000 	nop.w
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	40686000 	.word	0x40686000
 8002b60:	20000908 	.word	0x20000908
 8002b64:	40690000 	.word	0x40690000
 8002b68:	2000094c 	.word	0x2000094c

08002b6c <CBTimer1000ms>:
{
 8002b6c:	b510      	push	{r4, lr}
	contadorOutput(&PrimitiveStates.outPuts);
 8002b6e:	4c0a      	ldr	r4, [pc, #40]	; (8002b98 <CBTimer1000ms+0x2c>)
	bluetooth1000ms(&bluetooth);
 8002b70:	480a      	ldr	r0, [pc, #40]	; (8002b9c <CBTimer1000ms+0x30>)
 8002b72:	f7fe fdc2 	bl	80016fa <bluetooth1000ms>
	taskTemperatura1sec();
 8002b76:	f001 ff99 	bl	8004aac <taskTemperatura1sec>
	taskBluetooth1sec();
 8002b7a:	f000 fda9 	bl	80036d0 <taskBluetooth1sec>
	controleCooler();
 8002b7e:	f7ff ffb7 	bl	8002af0 <controleCooler>
	contadorOutput(&PrimitiveStates.outPuts);
 8002b82:	4620      	mov	r0, r4
 8002b84:	f7ff faeb 	bl	800215e <contadorOutput>
	if(PrimitiveStates.Erro.byte != 0){
 8002b88:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8002b8c:	b11b      	cbz	r3, 8002b96 <CBTimer1000ms+0x2a>
}
 8002b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		desligaForno();
 8002b92:	f7ff bf65 	b.w	8002a60 <desligaForno>
}
 8002b96:	bd10      	pop	{r4, pc}
 8002b98:	20000908 	.word	0x20000908
 8002b9c:	2000203c 	.word	0x2000203c

08002ba0 <HAL_ADC_ConvCpltCallback>:
{
 8002ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(i<TAM){
 8002ba4:	4e25      	ldr	r6, [pc, #148]	; (8002c3c <HAL_ADC_ConvCpltCallback+0x9c>)
	leTempInterna();
 8002ba6:	f7ff ff6f 	bl	8002a88 <leTempInterna>
	if(i<TAM){
 8002baa:	8834      	ldrh	r4, [r6, #0]
		somatorio1+=buffer_ADC[1]; // somatorio
 8002bac:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8002c40 <HAL_ADC_ConvCpltCallback+0xa0>
		somatorio2+=buffer_ADC[0]; // somatorio
 8002bb0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8002c44 <HAL_ADC_ConvCpltCallback+0xa4>
	if(i<TAM){
 8002bb4:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
		somatorio1+=buffer_ADC[1]; // somatorio
 8002bb8:	f8d9 0000 	ldr.w	r0, [r9]
		somatorio2+=buffer_ADC[0]; // somatorio
 8002bbc:	f8d8 5000 	ldr.w	r5, [r8]
	if(i<TAM){
 8002bc0:	d20d      	bcs.n	8002bde <HAL_ADC_ConvCpltCallback+0x3e>
		somatorio1+=buffer_ADC[1]; // somatorio
 8002bc2:	4a21      	ldr	r2, [pc, #132]	; (8002c48 <HAL_ADC_ConvCpltCallback+0xa8>)
		i++;
 8002bc4:	3401      	adds	r4, #1
		somatorio1+=buffer_ADC[1]; // somatorio
 8002bc6:	6853      	ldr	r3, [r2, #4]
		i++;
 8002bc8:	b2a4      	uxth	r4, r4
		somatorio1+=buffer_ADC[1]; // somatorio
 8002bca:	4403      	add	r3, r0
 8002bcc:	f8c9 3000 	str.w	r3, [r9]
		somatorio2+=buffer_ADC[0]; // somatorio
 8002bd0:	6813      	ldr	r3, [r2, #0]
 8002bd2:	442b      	add	r3, r5
 8002bd4:	f8c8 3000 	str.w	r3, [r8]
		i++;
 8002bd8:	8034      	strh	r4, [r6, #0]
}
 8002bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		somatorio1 = somatorio1 / TAM; //calc media
 8002bde:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
 8002be2:	fb90 f0fa 	sdiv	r0, r0, sl
		Temp1 = somatorio1*16; //calc valor final
 8002be6:	0100      	lsls	r0, r0, #4
 8002be8:	f7fe f83a 	bl	8000c60 <__aeabi_i2f>
		somatorio2 = somatorio2 / TAM; //calc media
 8002bec:	fb95 f5fa 	sdiv	r5, r5, sl
		somatorio1 = 0; 		//zera somatorio
 8002bf0:	2400      	movs	r4, #0
		Temp1 = somatorio1*16; //calc valor final
 8002bf2:	4607      	mov	r7, r0
		Temp2 = somatorio2*16; 	//calc valor final
 8002bf4:	0128      	lsls	r0, r5, #4
		somatorio1 = 0; 		//zera somatorio
 8002bf6:	f8c9 4000 	str.w	r4, [r9]
		Temp2 = somatorio2*16; 	//calc valor final
 8002bfa:	f7fe f831 	bl	8000c60 <__aeabi_i2f>
		Temp1 = Temp1/100;
 8002bfe:	4913      	ldr	r1, [pc, #76]	; (8002c4c <HAL_ADC_ConvCpltCallback+0xac>)
		Temp2 = somatorio2*16; 	//calc valor final
 8002c00:	4605      	mov	r5, r0
		somatorio2 = 0; 		//zera somatorio
 8002c02:	f8c8 4000 	str.w	r4, [r8]
		Temp1 = Temp1/100;
 8002c06:	4638      	mov	r0, r7
 8002c08:	f7fe f932 	bl	8000e70 <__aeabi_fdiv>
		TempTeto=(double)Temp1;
 8002c0c:	f7fd fc0c 	bl	8000428 <__aeabi_f2d>
		PrimitiveStates.Teto.realtime = TempTeto-34;
 8002c10:	2200      	movs	r2, #0
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002c14:	f7fd faa8 	bl	8000168 <__aeabi_dsub>
 8002c18:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8002c54 <HAL_ADC_ConvCpltCallback+0xb4>
 8002c1c:	e9c8 0134 	strd	r0, r1, [r8, #208]	; 0xd0
		Temp2 = Temp2/100;
 8002c20:	490a      	ldr	r1, [pc, #40]	; (8002c4c <HAL_ADC_ConvCpltCallback+0xac>)
 8002c22:	4628      	mov	r0, r5
 8002c24:	f7fe f924 	bl	8000e70 <__aeabi_fdiv>
		TempLastro=(double)Temp2;
 8002c28:	f7fd fbfe 	bl	8000428 <__aeabi_f2d>
		PrimitiveStates.Lastro.realtime = TempLastro-34;
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002c30:	f7fd fa9a 	bl	8000168 <__aeabi_dsub>
 8002c34:	e9c8 0146 	strd	r0, r1, [r8, #280]	; 0x118
		i=0;
 8002c38:	e7ce      	b.n	8002bd8 <HAL_ADC_ConvCpltCallback+0x38>
 8002c3a:	bf00      	nop
 8002c3c:	20002414 	.word	0x20002414
 8002c40:	20002418 	.word	0x20002418
 8002c44:	2000241c 	.word	0x2000241c
 8002c48:	20002184 	.word	0x20002184
 8002c4c:	42c80000 	.word	0x42c80000
 8002c50:	40410000 	.word	0x40410000
 8002c54:	20000908 	.word	0x20000908

08002c58 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM1) {
 8002c58:	6802      	ldr	r2, [r0, #0]
 8002c5a:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d101      	bne.n	8002c64 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 8002c60:	f001 bfa6 	b.w	8004bb0 <HAL_IncTick>
}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40012c00 	.word	0x40012c00

08002c6c <Error_Handler>:
 8002c6c:	b672      	cpsid	i
	while (1)
 8002c6e:	e7fe      	b.n	8002c6e <Error_Handler+0x2>

08002c70 <PID_Init>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002c70:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8002c72:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
	uPID->OutputSum = *uPID->MyOutput;
 8002c76:	e9d3 6700 	ldrd	r6, r7, [r3]
	uPID->LastInput = *uPID->MyInput;
	
	if (uPID->OutputSum > uPID->OutMax)
 8002c7a:	e9d0 891a 	ldrd	r8, r9, [r0, #104]	; 0x68
	uPID->OutputSum = *uPID->MyOutput;
 8002c7e:	e9c0 6714 	strd	r6, r7, [r0, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8002c82:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8002c84:	4604      	mov	r4, r0
	uPID->LastInput = *uPID->MyInput;
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (uPID->OutputSum > uPID->OutMax)
 8002c8a:	4639      	mov	r1, r7
	uPID->LastInput = *uPID->MyInput;
 8002c8c:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
	if (uPID->OutputSum > uPID->OutMax)
 8002c90:	4642      	mov	r2, r8
 8002c92:	464b      	mov	r3, r9
 8002c94:	4630      	mov	r0, r6
 8002c96:	f7fd feaf 	bl	80009f8 <__aeabi_dcmpgt>
 8002c9a:	b110      	cbz	r0, 8002ca2 <PID_Init+0x32>
	{
		uPID->OutputSum = uPID->OutMax;
	}
	else if (uPID->OutputSum < uPID->OutMin)
	{
		uPID->OutputSum = uPID->OutMin;
 8002c9c:	e9c4 8914 	strd	r8, r9, [r4, #80]	; 0x50
	}
	else { }
	
}
 8002ca0:	e009      	b.n	8002cb6 <PID_Init+0x46>
	else if (uPID->OutputSum < uPID->OutMin)
 8002ca2:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	4642      	mov	r2, r8
 8002caa:	464b      	mov	r3, r9
 8002cac:	4639      	mov	r1, r7
 8002cae:	f7fd fe85 	bl	80009bc <__aeabi_dcmplt>
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	d1f2      	bne.n	8002c9c <PID_Init+0x2c>
}
 8002cb6:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}

08002cba <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002cba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002cbe:	7843      	ldrb	r3, [r0, #1]
{
 8002cc0:	4604      	mov	r4, r0
 8002cc2:	b089      	sub	sp, #36	; 0x24
	if (!uPID->InAuto)
 8002cc4:	b91b      	cbnz	r3, 8002cce <PID_Compute+0x14>
	{
		return _FALSE;
 8002cc6:	2000      	movs	r0, #0
	else
	{
		return _FALSE;
	}
	
}
 8002cc8:	b009      	add	sp, #36	; 0x24
 8002cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	now        = GetTime();
 8002cce:	f001 ff7b 	bl	8004bc8 <HAL_GetTick>
	timeChange = (now - uPID->LastTime);
 8002cd2:	6863      	ldr	r3, [r4, #4]
	if (timeChange >= uPID->SampleTime)
 8002cd4:	68a2      	ldr	r2, [r4, #8]
	timeChange = (now - uPID->LastTime);
 8002cd6:	1ac3      	subs	r3, r0, r3
	if (timeChange >= uPID->SampleTime)
 8002cd8:	429a      	cmp	r2, r3
	now        = GetTime();
 8002cda:	4605      	mov	r5, r0
	if (timeChange >= uPID->SampleTime)
 8002cdc:	d8f3      	bhi.n	8002cc6 <PID_Compute+0xc>
		input   = *uPID->MyInput;
 8002cde:	6c23      	ldr	r3, [r4, #64]	; 0x40
		error   = *uPID->MySetpoint - input;
 8002ce0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
		input   = *uPID->MyInput;
 8002ce2:	e9d3 ab00 	ldrd	sl, fp, [r3]
		error   = *uPID->MySetpoint - input;
 8002ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cea:	4652      	mov	r2, sl
 8002cec:	465b      	mov	r3, fp
 8002cee:	f7fd fa3b 	bl	8000168 <__aeabi_dsub>
		dInput  = (input - uPID->LastInput);
 8002cf2:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
		error   = *uPID->MySetpoint - input;
 8002cf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
		dInput  = (input - uPID->LastInput);
 8002cfa:	4650      	mov	r0, sl
 8002cfc:	4659      	mov	r1, fp
 8002cfe:	f7fd fa33 	bl	8000168 <__aeabi_dsub>
		uPID->OutputSum     += (uPID->Ki * error);
 8002d02:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
		dInput  = (input - uPID->LastInput);
 8002d06:	e9cd 0106 	strd	r0, r1, [sp, #24]
		uPID->OutputSum     += (uPID->Ki * error);
 8002d0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002d0e:	f7fd fbe3 	bl	80004d8 <__aeabi_dmul>
 8002d12:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 8002d16:	f7fd fa29 	bl	800016c <__adddf3>
 8002d1a:	4606      	mov	r6, r0
 8002d1c:	460f      	mov	r7, r1
		if (!uPID->POnE)
 8002d1e:	7823      	ldrb	r3, [r4, #0]
		uPID->OutputSum     += (uPID->Ki * error);
 8002d20:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (!uPID->POnE)
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	b96b      	cbnz	r3, 8002d44 <PID_Compute+0x8a>
			uPID->OutputSum -= uPID->Kp * dInput;
 8002d28:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8002d2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d30:	f7fd fbd2 	bl	80004d8 <__aeabi_dmul>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4630      	mov	r0, r6
 8002d3a:	4639      	mov	r1, r7
 8002d3c:	f7fd fa14 	bl	8000168 <__aeabi_dsub>
 8002d40:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
		if (uPID->OutputSum > uPID->OutMax)
 8002d44:	e9d4 8914 	ldrd	r8, r9, [r4, #80]	; 0x50
 8002d48:	e9d4 671a 	ldrd	r6, r7, [r4, #104]	; 0x68
 8002d4c:	4640      	mov	r0, r8
 8002d4e:	4632      	mov	r2, r6
 8002d50:	463b      	mov	r3, r7
 8002d52:	4649      	mov	r1, r9
 8002d54:	f7fd fe50 	bl	80009f8 <__aeabi_dcmpgt>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d038      	beq.n	8002dce <PID_Compute+0x114>
			uPID->OutputSum = uPID->OutMax;
 8002d5c:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (uPID->POnE)
 8002d60:	9b01      	ldr	r3, [sp, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d042      	beq.n	8002dec <PID_Compute+0x132>
			output = uPID->Kp * error;
 8002d66:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8002d6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002d6e:	f7fd fbb3 	bl	80004d8 <__aeabi_dmul>
 8002d72:	4680      	mov	r8, r0
 8002d74:	4689      	mov	r9, r1
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002d76:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8002d7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d7e:	f7fd fbab 	bl	80004d8 <__aeabi_dmul>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8002d8a:	f7fd f9ed 	bl	8000168 <__aeabi_dsub>
 8002d8e:	4642      	mov	r2, r8
 8002d90:	464b      	mov	r3, r9
 8002d92:	f7fd f9eb 	bl	800016c <__adddf3>
 8002d96:	4680      	mov	r8, r0
 8002d98:	4689      	mov	r9, r1
		if (output > uPID->OutMax)
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4630      	mov	r0, r6
 8002da0:	4639      	mov	r1, r7
 8002da2:	f7fd fe0b 	bl	80009bc <__aeabi_dcmplt>
 8002da6:	b950      	cbnz	r0, 8002dbe <PID_Compute+0x104>
		else if (output < uPID->OutMin)
 8002da8:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 8002dac:	4642      	mov	r2, r8
 8002dae:	464b      	mov	r3, r9
 8002db0:	4630      	mov	r0, r6
 8002db2:	4639      	mov	r1, r7
 8002db4:	f7fd fe20 	bl	80009f8 <__aeabi_dcmpgt>
 8002db8:	b908      	cbnz	r0, 8002dbe <PID_Compute+0x104>
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002dba:	4646      	mov	r6, r8
 8002dbc:	464f      	mov	r7, r9
		*uPID->MyOutput = output;
 8002dbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
		return _TRUE;
 8002dc0:	2001      	movs	r0, #1
		*uPID->MyOutput = output;
 8002dc2:	e9c3 6700 	strd	r6, r7, [r3]
		uPID->LastInput = input;
 8002dc6:	e9c4 ab16 	strd	sl, fp, [r4, #88]	; 0x58
		uPID->LastTime = now;
 8002dca:	6065      	str	r5, [r4, #4]
		return _TRUE;
 8002dcc:	e77c      	b.n	8002cc8 <PID_Compute+0xe>
		else if (uPID->OutputSum < uPID->OutMin)
 8002dce:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 8002dd2:	4640      	mov	r0, r8
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002dda:	f7fd fdef 	bl	80009bc <__aeabi_dcmplt>
 8002dde:	2800      	cmp	r0, #0
 8002de0:	d0be      	beq.n	8002d60 <PID_Compute+0xa6>
			uPID->OutputSum = uPID->OutMin;
 8002de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002de6:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8002dea:	e7b9      	b.n	8002d60 <PID_Compute+0xa6>
			output = 0;
 8002dec:	f04f 0800 	mov.w	r8, #0
 8002df0:	f04f 0900 	mov.w	r9, #0
 8002df4:	e7bf      	b.n	8002d76 <PID_Compute+0xbc>

08002df6 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002df6:	2901      	cmp	r1, #1
{
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	4604      	mov	r4, r0
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002dfc:	bf0c      	ite	eq
 8002dfe:	2501      	moveq	r5, #1
 8002e00:	2500      	movne	r5, #0
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002e02:	d103      	bne.n	8002e0c <PID_SetMode+0x16>
 8002e04:	7843      	ldrb	r3, [r0, #1]
 8002e06:	b90b      	cbnz	r3, 8002e0c <PID_SetMode+0x16>
	{
		PID_Init(uPID);
 8002e08:	f7ff ff32 	bl	8002c70 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002e0c:	7065      	strb	r5, [r4, #1]
	
}
 8002e0e:	bd38      	pop	{r3, r4, r5, pc}

08002e10 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e14:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8002e18:	4614      	mov	r4, r2
 8002e1a:	461d      	mov	r5, r3
 8002e1c:	4682      	mov	sl, r0
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002e1e:	4632      	mov	r2, r6
 8002e20:	463b      	mov	r3, r7
 8002e22:	4620      	mov	r0, r4
 8002e24:	4629      	mov	r1, r5
 8002e26:	f7fd fddd 	bl	80009e4 <__aeabi_dcmpge>
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	d137      	bne.n	8002e9e <PID_SetOutputLimits+0x8e>
	
	uPID->OutMin = Min;
	uPID->OutMax = Max;
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002e2e:	f89a 3001 	ldrb.w	r3, [sl, #1]
	uPID->OutMin = Min;
 8002e32:	e9ca 4518 	strd	r4, r5, [sl, #96]	; 0x60
	uPID->OutMax = Max;
 8002e36:	e9ca 671a 	strd	r6, r7, [sl, #104]	; 0x68
	if (uPID->InAuto)
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d02f      	beq.n	8002e9e <PID_SetOutputLimits+0x8e>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002e3e:	f8da b044 	ldr.w	fp, [sl, #68]	; 0x44
 8002e42:	4632      	mov	r2, r6
 8002e44:	e9db 8900 	ldrd	r8, r9, [fp]
 8002e48:	463b      	mov	r3, r7
 8002e4a:	4640      	mov	r0, r8
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	f7fd fdd3 	bl	80009f8 <__aeabi_dcmpgt>
 8002e52:	b178      	cbz	r0, 8002e74 <PID_SetOutputLimits+0x64>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002e54:	e9cb 6700 	strd	r6, r7, [fp]
			*uPID->MyOutput = uPID->OutMin;
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002e58:	e9da 6714 	ldrd	r6, r7, [sl, #80]	; 0x50
 8002e5c:	e9da 451a 	ldrd	r4, r5, [sl, #104]	; 0x68
 8002e60:	4630      	mov	r0, r6
 8002e62:	4622      	mov	r2, r4
 8002e64:	462b      	mov	r3, r5
 8002e66:	4639      	mov	r1, r7
 8002e68:	f7fd fdc6 	bl	80009f8 <__aeabi_dcmpgt>
 8002e6c:	b168      	cbz	r0, 8002e8a <PID_SetOutputLimits+0x7a>
		{
			uPID->OutputSum = uPID->OutMax;
		}
		else if (uPID->OutputSum < uPID->OutMin)
		{
			uPID->OutputSum = uPID->OutMin;
 8002e6e:	e9ca 4514 	strd	r4, r5, [sl, #80]	; 0x50
		}
		else { }
 8002e72:	e014      	b.n	8002e9e <PID_SetOutputLimits+0x8e>
		else if (*uPID->MyOutput < uPID->OutMin)
 8002e74:	4622      	mov	r2, r4
 8002e76:	462b      	mov	r3, r5
 8002e78:	4640      	mov	r0, r8
 8002e7a:	4649      	mov	r1, r9
 8002e7c:	f7fd fd9e 	bl	80009bc <__aeabi_dcmplt>
 8002e80:	2800      	cmp	r0, #0
 8002e82:	d0e9      	beq.n	8002e58 <PID_SetOutputLimits+0x48>
			*uPID->MyOutput = uPID->OutMin;
 8002e84:	e9cb 4500 	strd	r4, r5, [fp]
 8002e88:	e7e6      	b.n	8002e58 <PID_SetOutputLimits+0x48>
		else if (uPID->OutputSum < uPID->OutMin)
 8002e8a:	e9da 4518 	ldrd	r4, r5, [sl, #96]	; 0x60
 8002e8e:	4630      	mov	r0, r6
 8002e90:	4622      	mov	r2, r4
 8002e92:	462b      	mov	r3, r5
 8002e94:	4639      	mov	r1, r7
 8002e96:	f7fd fd91 	bl	80009bc <__aeabi_dcmplt>
 8002e9a:	2800      	cmp	r0, #0
 8002e9c:	d1e7      	bne.n	8002e6e <PID_SetOutputLimits+0x5e>
		
	}
	
}
 8002e9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002ea4 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ea8:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8002eac:	4614      	mov	r4, r2
 8002eae:	461d      	mov	r5, r3
 8002eb0:	4682      	mov	sl, r0
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	4629      	mov	r1, r5
{
 8002eba:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002ebe:	f7fd fd7d 	bl	80009bc <__aeabi_dcmplt>
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	d15a      	bne.n	8002f7c <PID_SetTunings2+0xd8>
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2300      	movs	r3, #0
 8002eca:	4640      	mov	r0, r8
 8002ecc:	4649      	mov	r1, r9
 8002ece:	f7fd fd75 	bl	80009bc <__aeabi_dcmplt>
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	d152      	bne.n	8002f7c <PID_SetTunings2+0xd8>
 8002ed6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002eda:	2200      	movs	r2, #0
 8002edc:	2300      	movs	r3, #0
 8002ede:	f7fd fd6d 	bl	80009bc <__aeabi_dcmplt>
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d14a      	bne.n	8002f7c <PID_SetTunings2+0xd8>
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002ee6:	1e73      	subs	r3, r6, #1
	uPID->POn    = POn;
 8002ee8:	f88a 6002 	strb.w	r6, [sl, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002eec:	425e      	negs	r6, r3
 8002eee:	415e      	adcs	r6, r3

	uPID->DispKp = Kp;
	uPID->DispKi = Ki;
 8002ef0:	e9ca 8906 	strd	r8, r9, [sl, #24]
	uPID->DispKd = Kd;
 8002ef4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002ef8:	f88a 6000 	strb.w	r6, [sl]
	uPID->DispKd = Kd;
 8002efc:	e9ca 2308 	strd	r2, r3, [sl, #32]
	uPID->DispKp = Kp;
 8002f00:	e9ca 4504 	strd	r4, r5, [sl, #16]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002f04:	f8da 0008 	ldr.w	r0, [sl, #8]
 8002f08:	f7fd fa6c 	bl	80003e4 <__aeabi_ui2d>
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <PID_SetTunings2+0xdc>)
 8002f10:	f7fd fc0c 	bl	800072c <__aeabi_ddiv>
	
	uPID->Kp = Kp;
 8002f14:	e9ca 450a 	strd	r4, r5, [sl, #40]	; 0x28
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002f18:	4606      	mov	r6, r0
 8002f1a:	460f      	mov	r7, r1
	uPID->Ki = Ki * SampleTimeInSec;
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4640      	mov	r0, r8
 8002f22:	4649      	mov	r1, r9
 8002f24:	f7fd fad8 	bl	80004d8 <__aeabi_dmul>
 8002f28:	4680      	mov	r8, r0
 8002f2a:	4689      	mov	r9, r1
	uPID->Kd = Kd / SampleTimeInSec;
 8002f2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f30:	463b      	mov	r3, r7
 8002f32:	4632      	mov	r2, r6
	uPID->Ki = Ki * SampleTimeInSec;
 8002f34:	e9ca 890c 	strd	r8, r9, [sl, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002f38:	f7fd fbf8 	bl	800072c <__aeabi_ddiv>
 8002f3c:	4606      	mov	r6, r0
 8002f3e:	460f      	mov	r7, r1
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002f40:	f89a 3003 	ldrb.w	r3, [sl, #3]
	uPID->Kd = Kd / SampleTimeInSec;
 8002f44:	e9ca 670e 	strd	r6, r7, [sl, #56]	; 0x38
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d117      	bne.n	8002f7c <PID_SetTunings2+0xd8>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002f4c:	4622      	mov	r2, r4
 8002f4e:	462b      	mov	r3, r5
 8002f50:	2000      	movs	r0, #0
 8002f52:	2100      	movs	r1, #0
 8002f54:	f7fd f908 	bl	8000168 <__aeabi_dsub>
		uPID->Ki = (0 - uPID->Ki);
 8002f58:	4642      	mov	r2, r8
		uPID->Kp = (0 - uPID->Kp);
 8002f5a:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002f5e:	464b      	mov	r3, r9
 8002f60:	2000      	movs	r0, #0
 8002f62:	2100      	movs	r1, #0
 8002f64:	f7fd f900 	bl	8000168 <__aeabi_dsub>
		uPID->Kd = (0 - uPID->Kd);
 8002f68:	4632      	mov	r2, r6
		uPID->Ki = (0 - uPID->Ki);
 8002f6a:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002f6e:	463b      	mov	r3, r7
 8002f70:	2000      	movs	r0, #0
 8002f72:	2100      	movs	r1, #0
 8002f74:	f7fd f8f8 	bl	8000168 <__aeabi_dsub>
 8002f78:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
		
	}
	
}
 8002f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f80:	408f4000 	.word	0x408f4000

08002f84 <PID_SetTunings>:
{
 8002f84:	b530      	push	{r4, r5, lr}
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8002f86:	7881      	ldrb	r1, [r0, #2]
{
 8002f88:	b087      	sub	sp, #28
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8002f8a:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8002f8e:	9104      	str	r1, [sp, #16]
 8002f90:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002f94:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 8002f98:	e9cd 4500 	strd	r4, r5, [sp]
 8002f9c:	f7ff ff82 	bl	8002ea4 <PID_SetTunings2>
}
 8002fa0:	b007      	add	sp, #28
 8002fa2:	bd30      	pop	{r4, r5, pc}

08002fa4 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002fa4:	b538      	push	{r3, r4, r5, lr}
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002fa6:	7843      	ldrb	r3, [r0, #1]
{
 8002fa8:	4604      	mov	r4, r0
 8002faa:	460d      	mov	r5, r1
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002fac:	b1d3      	cbz	r3, 8002fe4 <PID_SetControllerDirection+0x40>
 8002fae:	78c3      	ldrb	r3, [r0, #3]
 8002fb0:	428b      	cmp	r3, r1
 8002fb2:	d017      	beq.n	8002fe4 <PID_SetControllerDirection+0x40>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002fb4:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8002fb8:	2100      	movs	r1, #0
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f7fd f8d4 	bl	8000168 <__aeabi_dsub>
		uPID->Ki = (0 - uPID->Ki);
 8002fc0:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
		uPID->Kp = (0 - uPID->Kp);
 8002fc4:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	2100      	movs	r1, #0
 8002fcc:	f7fd f8cc 	bl	8000168 <__aeabi_dsub>
		uPID->Kd = (0 - uPID->Kd);
 8002fd0:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
		uPID->Ki = (0 - uPID->Ki);
 8002fd4:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	2100      	movs	r1, #0
 8002fdc:	f7fd f8c4 	bl	8000168 <__aeabi_dsub>
 8002fe0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8002fe4:	70e5      	strb	r5, [r4, #3]
	
}
 8002fe6:	bd38      	pop	{r3, r4, r5, pc}

08002fe8 <PID>:
{
 8002fe8:	b510      	push	{r4, lr}
	uPID->MySetpoint = Setpoint;
 8002fea:	6483      	str	r3, [r0, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002fec:	2300      	movs	r3, #0
	uPID->MyInput    = Input;
 8002fee:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002ff2:	7043      	strb	r3, [r0, #1]
	uPID->OutMin = Min;
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60
	uPID->OutMax = Max;
 8002ffc:	a312      	add	r3, pc, #72	; (adr r3, 8003048 <PID+0x60>)
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003006:	2364      	movs	r3, #100	; 0x64
{
 8003008:	4604      	mov	r4, r0
 800300a:	b086      	sub	sp, #24
	PID_SetControllerDirection(uPID, ControllerDirection);
 800300c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003010:	6083      	str	r3, [r0, #8]
	PID_SetControllerDirection(uPID, ControllerDirection);
 8003012:	f7ff ffc7 	bl	8002fa4 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8003016:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800301a:	4620      	mov	r0, r4
 800301c:	9304      	str	r3, [sp, #16]
 800301e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003022:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003026:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800302a:	e9cd 2300 	strd	r2, r3, [sp]
 800302e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003032:	f7ff ff37 	bl	8002ea4 <PID_SetTunings2>
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8003036:	f001 fdc7 	bl	8004bc8 <HAL_GetTick>
 800303a:	68a3      	ldr	r3, [r4, #8]
 800303c:	1ac0      	subs	r0, r0, r3
 800303e:	6060      	str	r0, [r4, #4]
}
 8003040:	b006      	add	sp, #24
 8003042:	bd10      	pop	{r4, pc}
 8003044:	f3af 8000 	nop.w
 8003048:	00000000 	.word	0x00000000
 800304c:	406fe000 	.word	0x406fe000

08003050 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8003052:	1e0d      	subs	r5, r1, #0
{
 8003054:	4604      	mov	r4, r0
	if (NewSampleTime > 0)
 8003056:	dd20      	ble.n	800309a <PID_SetSampleTime+0x4a>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8003058:	4628      	mov	r0, r5
 800305a:	f7fd f9d3 	bl	8000404 <__aeabi_i2d>
 800305e:	4606      	mov	r6, r0
 8003060:	68a0      	ldr	r0, [r4, #8]
 8003062:	460f      	mov	r7, r1
 8003064:	f7fd f9be 	bl	80003e4 <__aeabi_ui2d>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4630      	mov	r0, r6
 800306e:	4639      	mov	r1, r7
 8003070:	f7fd fb5c 	bl	800072c <__aeabi_ddiv>
		
		uPID->Ki *= ratio;
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8003078:	4606      	mov	r6, r0
 800307a:	460f      	mov	r7, r1
		uPID->Ki *= ratio;
 800307c:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8003080:	f7fd fa2a 	bl	80004d8 <__aeabi_dmul>
		uPID->Kd /= ratio;
 8003084:	4632      	mov	r2, r6
		uPID->Ki *= ratio;
 8003086:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd /= ratio;
 800308a:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 800308e:	463b      	mov	r3, r7
 8003090:	f7fd fb4c 	bl	800072c <__aeabi_ddiv>
 8003094:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003098:	60a5      	str	r5, [r4, #8]
		
	}
	
}
 800309a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800309c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_MspInit+0x48>)
{
 800309e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80030a0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030a2:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	619a      	str	r2, [r3, #24]
 80030aa:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030ac:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 80030b0:	f002 0201 	and.w	r2, r2, #1
 80030b4:	9200      	str	r2, [sp, #0]
 80030b6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030be:	61da      	str	r2, [r3, #28]
 80030c0:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030c2:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030cc:	f001 ffce 	bl	800506c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030d0:	4a05      	ldr	r2, [pc, #20]	; (80030e8 <HAL_MspInit+0x4c>)
 80030d2:	6853      	ldr	r3, [r2, #4]
 80030d4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80030d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030de:	b003      	add	sp, #12
 80030e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40010000 	.word	0x40010000

080030ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030ec:	b530      	push	{r4, r5, lr}
 80030ee:	4605      	mov	r5, r0
 80030f0:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f2:	2210      	movs	r2, #16
 80030f4:	2100      	movs	r1, #0
 80030f6:	a802      	add	r0, sp, #8
 80030f8:	f007 f9a6 	bl	800a448 <memset>
  if(hadc->Instance==ADC1)
 80030fc:	682a      	ldr	r2, [r5, #0]
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <HAL_ADC_MspInit+0x84>)
 8003100:	429a      	cmp	r2, r3
 8003102:	d133      	bne.n	800316c <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003104:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003108:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310a:	481a      	ldr	r0, [pc, #104]	; (8003174 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800310c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003110:	619a      	str	r2, [r3, #24]
 8003112:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003114:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003116:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800311a:	9200      	str	r2, [sp, #0]
 800311c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311e:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003120:	4c15      	ldr	r4, [pc, #84]	; (8003178 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003122:	f042 0204 	orr.w	r2, r2, #4
 8003126:	619a      	str	r2, [r3, #24]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003132:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003134:	e9cd 3302 	strd	r3, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003138:	f002 f97e 	bl	8005438 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800313c:	2300      	movs	r3, #0
 800313e:	4a0f      	ldr	r2, [pc, #60]	; (800317c <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003140:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003142:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003146:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800314a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800314e:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003152:	2220      	movs	r2, #32
 8003154:	e9c4 0205 	strd	r0, r2, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003158:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800315a:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800315c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800315e:	f001 ffd5 	bl	800510c <HAL_DMA_Init>
 8003162:	b108      	cbz	r0, 8003168 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8003164:	f7ff fd82 	bl	8002c6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003168:	622c      	str	r4, [r5, #32]
 800316a:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800316c:	b007      	add	sp, #28
 800316e:	bd30      	pop	{r4, r5, pc}
 8003170:	40012400 	.word	0x40012400
 8003174:	40010800 	.word	0x40010800
 8003178:	200021c0 	.word	0x200021c0
 800317c:	40020008 	.word	0x40020008

08003180 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003180:	b510      	push	{r4, lr}
 8003182:	4604      	mov	r4, r0
 8003184:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003186:	2210      	movs	r2, #16
 8003188:	2100      	movs	r1, #0
 800318a:	a802      	add	r0, sp, #8
 800318c:	f007 f95c 	bl	800a448 <memset>
  if(hi2c->Instance==I2C1)
 8003190:	6822      	ldr	r2, [r4, #0]
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_I2C_MspInit+0x68>)
 8003194:	429a      	cmp	r2, r3
 8003196:	d124      	bne.n	80031e2 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003198:	4c14      	ldr	r4, [pc, #80]	; (80031ec <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800319a:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800319e:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a0:	4813      	ldr	r0, [pc, #76]	; (80031f0 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a2:	f043 0308 	orr.w	r3, r3, #8
 80031a6:	61a3      	str	r3, [r4, #24]
 80031a8:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031aa:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031b4:	2312      	movs	r3, #18
 80031b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ba:	2303      	movs	r3, #3
 80031bc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031be:	f002 f93b 	bl	8005438 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80031c2:	4a0c      	ldr	r2, [pc, #48]	; (80031f4 <HAL_I2C_MspInit+0x74>)
 80031c4:	6853      	ldr	r3, [r2, #4]
 80031c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80031ca:	f043 0302 	orr.w	r3, r3, #2
 80031ce:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031d0:	69e3      	ldr	r3, [r4, #28]
 80031d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031d6:	61e3      	str	r3, [r4, #28]
 80031d8:	69e3      	ldr	r3, [r4, #28]
 80031da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031de:	9301      	str	r3, [sp, #4]
 80031e0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031e2:	b006      	add	sp, #24
 80031e4:	bd10      	pop	{r4, pc}
 80031e6:	bf00      	nop
 80031e8:	40005400 	.word	0x40005400
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40010c00 	.word	0x40010c00
 80031f4:	40010000 	.word	0x40010000

080031f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031f8:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RTC_MspInit+0x30>)
 80031fc:	6802      	ldr	r2, [r0, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d10f      	bne.n	8003222 <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003202:	f002 ff8f 	bl	8006124 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <HAL_RTC_MspInit+0x34>)
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800320e:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003210:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <HAL_RTC_MspInit+0x38>)
 800321e:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003222:	b003      	add	sp, #12
 8003224:	f85d fb04 	ldr.w	pc, [sp], #4
 8003228:	40002800 	.word	0x40002800
 800322c:	40021000 	.word	0x40021000
 8003230:	42420000 	.word	0x42420000

08003234 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8003234:	6803      	ldr	r3, [r0, #0]
{
 8003236:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8003238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323c:	d10d      	bne.n	800325a <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800323e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	f042 0201 	orr.w	r2, r2, #1
 8003248:	61da      	str	r2, [r3, #28]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003254:	b003      	add	sp, #12
 8003256:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 800325a:	4a0c      	ldr	r2, [pc, #48]	; (800328c <HAL_TIM_Base_MspInit+0x58>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d1f9      	bne.n	8003254 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_TIM_Base_MspInit+0x5c>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003262:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003264:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003266:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003268:	f042 0202 	orr.w	r2, r2, #2
 800326c:	61da      	str	r2, [r3, #28]
 800326e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003270:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800327a:	f001 fef7 	bl	800506c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800327e:	201d      	movs	r0, #29
}
 8003280:	b003      	add	sp, #12
 8003282:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003286:	f001 bf21 	b.w	80050cc <HAL_NVIC_EnableIRQ>
 800328a:	bf00      	nop
 800328c:	40000400 	.word	0x40000400
 8003290:	40021000 	.word	0x40021000

08003294 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003294:	2210      	movs	r2, #16
{
 8003296:	b510      	push	{r4, lr}
 8003298:	4604      	mov	r4, r0
 800329a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	2100      	movs	r1, #0
 800329e:	eb0d 0002 	add.w	r0, sp, r2
 80032a2:	f007 f8d1 	bl	800a448 <memset>
  if(htim->Instance==TIM2)
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ac:	d115      	bne.n	80032da <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80032b2:	699a      	ldr	r2, [r3, #24]
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b4:	481c      	ldr	r0, [pc, #112]	; (8003328 <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b6:	f042 0204 	orr.w	r2, r2, #4
 80032ba:	619a      	str	r2, [r3, #24]
 80032bc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032be:	2208      	movs	r2, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d0:	a904      	add	r1, sp, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d2:	f002 f8b1 	bl	8005438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80032d6:	b008      	add	sp, #32
 80032d8:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM3)
 80032da:	4a14      	ldr	r2, [pc, #80]	; (800332c <HAL_TIM_MspPostInit+0x98>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d1fa      	bne.n	80032d6 <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e0:	4b13      	ldr	r3, [pc, #76]	; (8003330 <HAL_TIM_MspPostInit+0x9c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e2:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e6:	4810      	ldr	r0, [pc, #64]	; (8003328 <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e8:	f042 0204 	orr.w	r2, r2, #4
 80032ec:	619a      	str	r2, [r3, #24]
 80032ee:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f0:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f2:	f002 0204 	and.w	r2, r2, #4
 80032f6:	9202      	str	r2, [sp, #8]
 80032f8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	f042 0208 	orr.w	r2, r2, #8
 8003300:	619a      	str	r2, [r3, #24]
 8003302:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003304:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	9303      	str	r3, [sp, #12]
 800330c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	23c0      	movs	r3, #192	; 0xc0
 8003310:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003314:	f002 f890 	bl	8005438 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003318:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331a:	4806      	ldr	r0, [pc, #24]	; (8003334 <HAL_TIM_MspPostInit+0xa0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003320:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003322:	a904      	add	r1, sp, #16
 8003324:	e7d5      	b.n	80032d2 <HAL_TIM_MspPostInit+0x3e>
 8003326:	bf00      	nop
 8003328:	40010800 	.word	0x40010800
 800332c:	40000400 	.word	0x40000400
 8003330:	40021000 	.word	0x40021000
 8003334:	40010c00 	.word	0x40010c00

08003338 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	2210      	movs	r2, #16
{
 800333a:	b570      	push	{r4, r5, r6, lr}
 800333c:	4606      	mov	r6, r0
 800333e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	eb0d 0002 	add.w	r0, sp, r2
 8003344:	2100      	movs	r1, #0
 8003346:	f007 f87f 	bl	800a448 <memset>
  if(huart->Instance==USART1)
 800334a:	6833      	ldr	r3, [r6, #0]
 800334c:	4a43      	ldr	r2, [pc, #268]	; (800345c <HAL_UART_MspInit+0x124>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d144      	bne.n	80033dc <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003352:	4b43      	ldr	r3, [pc, #268]	; (8003460 <HAL_UART_MspInit+0x128>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003354:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8003358:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335a:	4842      	ldr	r0, [pc, #264]	; (8003464 <HAL_UART_MspInit+0x12c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800335c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003360:	619a      	str	r2, [r3, #24]
 8003362:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003364:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8003366:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800336a:	9200      	str	r2, [sp, #0]
 800336c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003370:	4c3d      	ldr	r4, [pc, #244]	; (8003468 <HAL_UART_MspInit+0x130>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	f042 0204 	orr.w	r2, r2, #4
 8003376:	619a      	str	r2, [r3, #24]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003388:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800338c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338e:	f002 f853 	bl	8005438 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003392:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003396:	4833      	ldr	r0, [pc, #204]	; (8003464 <HAL_UART_MspInit+0x12c>)
 8003398:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800339a:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a0:	f002 f84a 	bl	8005438 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80033a4:	4b31      	ldr	r3, [pc, #196]	; (800346c <HAL_UART_MspInit+0x134>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80033a6:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033a8:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033ac:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80033ae:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033b2:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b6:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033b8:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80033ba:	f001 fea7 	bl	800510c <HAL_DMA_Init>
 80033be:	b108      	cbz	r0, 80033c4 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 80033c0:	f7ff fc54 	bl	8002c6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80033c4:	2025      	movs	r0, #37	; 0x25
 80033c6:	2200      	movs	r2, #0
 80033c8:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80033ca:	63f4      	str	r4, [r6, #60]	; 0x3c
 80033cc:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80033ce:	f001 fe4d 	bl	800506c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033d2:	2025      	movs	r0, #37	; 0x25
 80033d4:	f001 fe7a 	bl	80050cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033d8:	b008      	add	sp, #32
 80033da:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART3)
 80033dc:	4a24      	ldr	r2, [pc, #144]	; (8003470 <HAL_UART_MspInit+0x138>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d1fa      	bne.n	80033d8 <HAL_UART_MspInit+0xa0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80033e2:	4b1f      	ldr	r3, [pc, #124]	; (8003460 <HAL_UART_MspInit+0x128>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e4:	4823      	ldr	r0, [pc, #140]	; (8003474 <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80033e6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e8:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 80033ea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80033ee:	61da      	str	r2, [r3, #28]
 80033f0:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033f2:	2500      	movs	r5, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80033f4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80033f8:	9202      	str	r2, [sp, #8]
 80033fa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fc:	699a      	ldr	r2, [r3, #24]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80033fe:	4c1e      	ldr	r4, [pc, #120]	; (8003478 <HAL_UART_MspInit+0x140>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003400:	f042 0208 	orr.w	r2, r2, #8
 8003404:	619a      	str	r2, [r3, #24]
 8003406:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003408:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	9303      	str	r3, [sp, #12]
 8003412:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003414:	2302      	movs	r3, #2
 8003416:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800341a:	2303      	movs	r3, #3
 800341c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341e:	f002 f80b 	bl	8005438 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003422:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003426:	4813      	ldr	r0, [pc, #76]	; (8003474 <HAL_UART_MspInit+0x13c>)
 8003428:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800342a:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003430:	f002 f802 	bl	8005438 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_UART_MspInit+0x144>)
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003436:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003438:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800343c:	2380      	movs	r3, #128	; 0x80
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800343e:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003442:	2320      	movs	r3, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003444:	60a5      	str	r5, [r4, #8]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003446:	e9c4 3506 	strd	r3, r5, [r4, #24]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800344a:	6165      	str	r5, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800344c:	f001 fe5e 	bl	800510c <HAL_DMA_Init>
 8003450:	b108      	cbz	r0, 8003456 <HAL_UART_MspInit+0x11e>
      Error_Handler();
 8003452:	f7ff fc0b 	bl	8002c6c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003456:	63f4      	str	r4, [r6, #60]	; 0x3c
 8003458:	6266      	str	r6, [r4, #36]	; 0x24
}
 800345a:	e7bd      	b.n	80033d8 <HAL_UART_MspInit+0xa0>
 800345c:	40013800 	.word	0x40013800
 8003460:	40021000 	.word	0x40021000
 8003464:	40010800 	.word	0x40010800
 8003468:	20002204 	.word	0x20002204
 800346c:	40020058 	.word	0x40020058
 8003470:	40004800 	.word	0x40004800
 8003474:	40010c00 	.word	0x40010c00
 8003478:	20002248 	.word	0x20002248
 800347c:	40020030 	.word	0x40020030

08003480 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART1)
 8003480:	6803      	ldr	r3, [r0, #0]
 8003482:	4a16      	ldr	r2, [pc, #88]	; (80034dc <HAL_UART_MspDeInit+0x5c>)
{
 8003484:	b510      	push	{r4, lr}
  if(huart->Instance==USART1)
 8003486:	4293      	cmp	r3, r2
{
 8003488:	4604      	mov	r4, r0
  if(huart->Instance==USART1)
 800348a:	d112      	bne.n	80034b2 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800348c:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8003490:	6993      	ldr	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003492:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 8003496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800349a:	4811      	ldr	r0, [pc, #68]	; (80034e0 <HAL_UART_MspDeInit+0x60>)
    __HAL_RCC_USART1_CLK_DISABLE();
 800349c:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800349e:	f002 f8a5 	bl	80055ec <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80034a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80034a4:	f001 fe64 	bl	8005170 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80034a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80034ac:	2025      	movs	r0, #37	; 0x25
 80034ae:	f001 be1b 	b.w	80050e8 <HAL_NVIC_DisableIRQ>
  else if(huart->Instance==USART3)
 80034b2:	4a0c      	ldr	r2, [pc, #48]	; (80034e4 <HAL_UART_MspDeInit+0x64>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d10f      	bne.n	80034d8 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART3_CLK_DISABLE();
 80034b8:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80034bc:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80034be:	480a      	ldr	r0, [pc, #40]	; (80034e8 <HAL_UART_MspDeInit+0x68>)
    __HAL_RCC_USART3_CLK_DISABLE();
 80034c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80034c4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    __HAL_RCC_USART3_CLK_DISABLE();
 80034c8:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80034ca:	f002 f88f 	bl	80055ec <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80034ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 80034d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(huart->hdmarx);
 80034d4:	f001 be4c 	b.w	8005170 <HAL_DMA_DeInit>
}
 80034d8:	bd10      	pop	{r4, pc}
 80034da:	bf00      	nop
 80034dc:	40013800 	.word	0x40013800
 80034e0:	40010800 	.word	0x40010800
 80034e4:	40004800 	.word	0x40004800
 80034e8:	40010c00 	.word	0x40010c00

080034ec <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80034ec:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <HAL_InitTick+0x7c>)
{
 80034ee:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 80034f0:	699a      	ldr	r2, [r3, #24]
{
 80034f2:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 80034f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f8:	619a      	str	r2, [r3, #24]
 80034fa:	699b      	ldr	r3, [r3, #24]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034fc:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 80034fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003502:	9302      	str	r3, [sp, #8]
{
 8003504:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003506:	a803      	add	r0, sp, #12

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003508:	4d18      	ldr	r5, [pc, #96]	; (800356c <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800350a:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800350c:	f003 f88e 	bl	800662c <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003510:	f003 f87c 	bl	800660c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8003514:	4b16      	ldr	r3, [pc, #88]	; (8003570 <HAL_InitTick+0x84>)
 8003516:	602b      	str	r3, [r5, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003518:	f240 33e7 	movw	r3, #999	; 0x3e7
 800351c:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800351e:	4b15      	ldr	r3, [pc, #84]	; (8003574 <HAL_InitTick+0x88>)
 8003520:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8003524:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003526:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8003528:	6068      	str	r0, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 800352a:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 800352c:	612b      	str	r3, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800352e:	60ab      	str	r3, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003530:	61ab      	str	r3, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 8003532:	f003 fca3 	bl	8006e7c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8003536:	4604      	mov	r4, r0
 8003538:	b980      	cbnz	r0, 800355c <HAL_InitTick+0x70>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800353a:	4628      	mov	r0, r5
 800353c:	f003 fb94 	bl	8006c68 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8003540:	4604      	mov	r4, r0
 8003542:	b958      	cbnz	r0, 800355c <HAL_InitTick+0x70>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003544:	2019      	movs	r0, #25
 8003546:	f001 fdc1 	bl	80050cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800354a:	2e0f      	cmp	r6, #15
 800354c:	d809      	bhi.n	8003562 <HAL_InitTick+0x76>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800354e:	4622      	mov	r2, r4
 8003550:	4631      	mov	r1, r6
 8003552:	2019      	movs	r0, #25
 8003554:	f001 fd8a 	bl	800506c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003558:	4b07      	ldr	r3, [pc, #28]	; (8003578 <HAL_InitTick+0x8c>)
 800355a:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 800355c:	4620      	mov	r0, r4
 800355e:	b008      	add	sp, #32
 8003560:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 8003562:	2401      	movs	r4, #1
 8003564:	e7fa      	b.n	800355c <HAL_InitTick+0x70>
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	20002430 	.word	0x20002430
 8003570:	40012c00 	.word	0x40012c00
 8003574:	000f4240 	.word	0x000f4240
 8003578:	20000008 	.word	0x20000008

0800357c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800357c:	e7fe      	b.n	800357c <NMI_Handler>

0800357e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800357e:	e7fe      	b.n	800357e <HardFault_Handler>

08003580 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003580:	e7fe      	b.n	8003580 <MemManage_Handler>

08003582 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003582:	e7fe      	b.n	8003582 <BusFault_Handler>

08003584 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003584:	e7fe      	b.n	8003584 <UsageFault_Handler>

08003586 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003586:	4770      	bx	lr

08003588 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003588:	4801      	ldr	r0, [pc, #4]	; (8003590 <DMA1_Channel1_IRQHandler+0x8>)
 800358a:	f001 bec1 	b.w	8005310 <HAL_DMA_IRQHandler>
 800358e:	bf00      	nop
 8003590:	200021c0 	.word	0x200021c0

08003594 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003594:	4801      	ldr	r0, [pc, #4]	; (800359c <DMA1_Channel3_IRQHandler+0x8>)
 8003596:	f001 bebb 	b.w	8005310 <HAL_DMA_IRQHandler>
 800359a:	bf00      	nop
 800359c:	20002248 	.word	0x20002248

080035a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80035a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80035a2:	4804      	ldr	r0, [pc, #16]	; (80035b4 <DMA1_Channel5_IRQHandler+0x14>)
 80035a4:	f001 feb4 	bl	8005310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  BLEDMA_IrqHandler(&bluetooth);
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80035a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BLEDMA_IrqHandler(&bluetooth);
 80035ac:	4802      	ldr	r0, [pc, #8]	; (80035b8 <DMA1_Channel5_IRQHandler+0x18>)
 80035ae:	f7fe b911 	b.w	80017d4 <BLEDMA_IrqHandler>
 80035b2:	bf00      	nop
 80035b4:	20002204 	.word	0x20002204
 80035b8:	2000203c 	.word	0x2000203c

080035bc <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035bc:	4801      	ldr	r0, [pc, #4]	; (80035c4 <TIM1_UP_IRQHandler+0x8>)
 80035be:	f003 bb82 	b.w	8006cc6 <HAL_TIM_IRQHandler>
 80035c2:	bf00      	nop
 80035c4:	20002430 	.word	0x20002430

080035c8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035c8:	4801      	ldr	r0, [pc, #4]	; (80035d0 <TIM3_IRQHandler+0x8>)
 80035ca:	f003 bb7c 	b.w	8006cc6 <HAL_TIM_IRQHandler>
 80035ce:	bf00      	nop
 80035d0:	2000233c 	.word	0x2000233c

080035d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035d6:	4804      	ldr	r0, [pc, #16]	; (80035e8 <USART1_IRQHandler+0x14>)
 80035d8:	f004 f970 	bl	80078bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  BLEUSART_IrqHandler(&bluetooth);
  /* USER CODE END USART1_IRQn 1 */
}
 80035dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BLEUSART_IrqHandler(&bluetooth);
 80035e0:	4802      	ldr	r0, [pc, #8]	; (80035ec <USART1_IRQHandler+0x18>)
 80035e2:	f7fe b9e9 	b.w	80019b8 <BLEUSART_IrqHandler>
 80035e6:	bf00      	nop
 80035e8:	20002384 	.word	0x20002384
 80035ec:	2000203c 	.word	0x2000203c

080035f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	460d      	mov	r5, r1
 80035f4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f6:	460e      	mov	r6, r1
 80035f8:	1b73      	subs	r3, r6, r5
 80035fa:	429c      	cmp	r4, r3
 80035fc:	dc01      	bgt.n	8003602 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80035fe:	4620      	mov	r0, r4
 8003600:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8003602:	f3af 8000 	nop.w
 8003606:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800360a:	e7f5      	b.n	80035f8 <_read+0x8>

0800360c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	460d      	mov	r5, r1
 8003610:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003612:	460e      	mov	r6, r1
 8003614:	1b73      	subs	r3, r6, r5
 8003616:	429c      	cmp	r4, r3
 8003618:	dc01      	bgt.n	800361e <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800361a:	4620      	mov	r0, r4
 800361c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800361e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8003622:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003626:	e7f5      	b.n	8003614 <_write+0x8>

08003628 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003628:	f04f 30ff 	mov.w	r0, #4294967295
 800362c:	4770      	bx	lr

0800362e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800362e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8003632:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8003634:	604b      	str	r3, [r1, #4]
}
 8003636:	4770      	bx	lr

08003638 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003638:	2001      	movs	r0, #1
 800363a:	4770      	bx	lr

0800363c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800363c:	2000      	movs	r0, #0
 800363e:	4770      	bx	lr

08003640 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003640:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <_sbrk+0x30>)
{
 8003642:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8003644:	6811      	ldr	r1, [r2, #0]
{
 8003646:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003648:	b909      	cbnz	r1, 800364e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800364a:	490a      	ldr	r1, [pc, #40]	; (8003674 <_sbrk+0x34>)
 800364c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800364e:	6810      	ldr	r0, [r2, #0]
 8003650:	4909      	ldr	r1, [pc, #36]	; (8003678 <_sbrk+0x38>)
 8003652:	4c0a      	ldr	r4, [pc, #40]	; (800367c <_sbrk+0x3c>)
 8003654:	4403      	add	r3, r0
 8003656:	1b09      	subs	r1, r1, r4
 8003658:	428b      	cmp	r3, r1
 800365a:	d906      	bls.n	800366a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800365c:	f006 ffbe 	bl	800a5dc <__errno>
 8003660:	230c      	movs	r3, #12
 8003662:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003664:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003668:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800366a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800366c:	e7fc      	b.n	8003668 <_sbrk+0x28>
 800366e:	bf00      	nop
 8003670:	20002478 	.word	0x20002478
 8003674:	200046e8 	.word	0x200046e8
 8003678:	20005000 	.word	0x20005000
 800367c:	00000400 	.word	0x00000400

08003680 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003680:	4770      	bx	lr
	...

08003684 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003684:	f7ff fffc 	bl	8003680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003688:	480b      	ldr	r0, [pc, #44]	; (80036b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800368a:	490c      	ldr	r1, [pc, #48]	; (80036bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800368c:	4a0c      	ldr	r2, [pc, #48]	; (80036c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800368e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003690:	e002      	b.n	8003698 <LoopCopyDataInit>

08003692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003696:	3304      	adds	r3, #4

08003698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800369a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800369c:	d3f9      	bcc.n	8003692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369e:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80036a0:	4c09      	ldr	r4, [pc, #36]	; (80036c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a4:	e001      	b.n	80036aa <LoopFillZerobss>

080036a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a8:	3204      	adds	r2, #4

080036aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036ac:	d3fb      	bcc.n	80036a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036ae:	f006 ff9b 	bl	800a5e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036b2:	f7fe fe7d 	bl	80023b0 <main>
  bx lr
 80036b6:	4770      	bx	lr
  ldr r0, =_sdata
 80036b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036bc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80036c0:	0800b958 	.word	0x0800b958
  ldr r2, =_sbss
 80036c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80036c8:	200046e4 	.word	0x200046e4

080036cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036cc:	e7fe      	b.n	80036cc <ADC1_2_IRQHandler>
	...

080036d0 <taskBluetooth1sec>:
static uint16_t tempoSemAtividade;
#define MACRO_ANULA_INATIVIDADE tempoSemAtividade = 0;
void taskBluetooth1sec(void){

	//---monitor de inatividade
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 80036d0:	4a0b      	ldr	r2, [pc, #44]	; (8003700 <taskBluetooth1sec+0x30>)
void taskBluetooth1sec(void){
 80036d2:	b508      	push	{r3, lr}
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 80036d4:	8813      	ldrh	r3, [r2, #0]
 80036d6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80036da:	d309      	bcc.n	80036f0 <taskBluetooth1sec+0x20>
		desligaForno();
 80036dc:	f7ff f9c0 	bl	8002a60 <desligaForno>
	}else if(PrimitiveStates.stateTimer != TIMER_decrementando){
		tempoSemAtividade++;
	}

	//---sequenciamento de envio de sincronia
	if(bluetooth.MaquinaConexao == RX_DESCONECTADO){
 80036e0:	4b08      	ldr	r3, [pc, #32]	; (8003704 <taskBluetooth1sec+0x34>)
 80036e2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80036e6:	b913      	cbnz	r3, 80036ee <taskBluetooth1sec+0x1e>
		FlagSincronia.cont=0;
 80036e8:	4a07      	ldr	r2, [pc, #28]	; (8003708 <taskBluetooth1sec+0x38>)
 80036ea:	7053      	strb	r3, [r2, #1]
		FlagSincronia.flag=0;
 80036ec:	7013      	strb	r3, [r2, #0]
	}
	/*
	 * ao conectar, seta a FlagSincronia
	 * ao desconectar, reseta a FlagSincronia
	 * */
}
 80036ee:	bd08      	pop	{r3, pc}
	}else if(PrimitiveStates.stateTimer != TIMER_decrementando){
 80036f0:	4906      	ldr	r1, [pc, #24]	; (800370c <taskBluetooth1sec+0x3c>)
 80036f2:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
 80036f6:	2901      	cmp	r1, #1
		tempoSemAtividade++;
 80036f8:	bf1c      	itt	ne
 80036fa:	3301      	addne	r3, #1
 80036fc:	8013      	strhne	r3, [r2, #0]
 80036fe:	e7ef      	b.n	80036e0 <taskBluetooth1sec+0x10>
 8003700:	20002506 	.word	0x20002506
 8003704:	2000203c 	.word	0x2000203c
 8003708:	20002504 	.word	0x20002504
 800370c:	20000908 	.word	0x20000908

08003710 <initBluetooth>:
void initBluetooth(void){
 8003710:	b537      	push	{r0, r1, r2, r4, r5, lr}

	//	//inicializacao do hardware
	//	iniciaBleHm10(&bluetooth);

	//possiveis comandos a serem recebidos pelo bluetooth
	BluetoothAddComp(&bluetooth, &BLEAtualizaRealtime, 	"RX_SOLICITA_REALTIME", 	RX_SOLICITA_REALTIME, 		ComandoBasico);
 8003712:	2501      	movs	r5, #1
	BluetoothInit(&bluetooth, &huart1, &hdma_usart1_rx, &FilaRXBluetoothHandle,FilaTXBluetoothHandle);
 8003714:	4b41      	ldr	r3, [pc, #260]	; (800381c <initBluetooth+0x10c>)
 8003716:	4c42      	ldr	r4, [pc, #264]	; (8003820 <initBluetooth+0x110>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4620      	mov	r0, r4
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	4a41      	ldr	r2, [pc, #260]	; (8003824 <initBluetooth+0x114>)
 8003720:	4b41      	ldr	r3, [pc, #260]	; (8003828 <initBluetooth+0x118>)
 8003722:	4942      	ldr	r1, [pc, #264]	; (800382c <initBluetooth+0x11c>)
 8003724:	f7fd ff98 	bl	8001658 <BluetoothInit>
	BluetoothAddComp(&bluetooth, &BLEAtualizaRealtime, 	"RX_SOLICITA_REALTIME", 	RX_SOLICITA_REALTIME, 		ComandoBasico);
 8003728:	2315      	movs	r3, #21
 800372a:	4620      	mov	r0, r4
 800372c:	4a40      	ldr	r2, [pc, #256]	; (8003830 <initBluetooth+0x120>)
 800372e:	4941      	ldr	r1, [pc, #260]	; (8003834 <initBluetooth+0x124>)
 8003730:	9500      	str	r5, [sp, #0]
 8003732:	f7fd fcaf 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESolicitaSincronia,	"RX_SOLICITA_SINCRONIA", 	RX_SOLICITA_SINCRONIA, 		ComandoBasico);
 8003736:	2317      	movs	r3, #23
 8003738:	4620      	mov	r0, r4
 800373a:	4a3f      	ldr	r2, [pc, #252]	; (8003838 <initBluetooth+0x128>)
 800373c:	493f      	ldr	r1, [pc, #252]	; (800383c <initBluetooth+0x12c>)
 800373e:	9500      	str	r5, [sp, #0]
 8003740:	f7fd fca8 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAlteraLimiteTemp, 	"RX_ALTERA_VALOR_LIMITE", 	RX_LIMITE_TEMPERATURA,		ComandoBasico);
 8003744:	2326      	movs	r3, #38	; 0x26
 8003746:	4620      	mov	r0, r4
 8003748:	4a3d      	ldr	r2, [pc, #244]	; (8003840 <initBluetooth+0x130>)
 800374a:	493e      	ldr	r1, [pc, #248]	; (8003844 <initBluetooth+0x134>)
 800374c:	9500      	str	r5, [sp, #0]
 800374e:	f7fd fca1 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAtualizaDataHora, 	"RX_ATUALIZA_HORA", 		RX_ATUALIZA_HORA,			ComandoBasico);
 8003752:	2303      	movs	r3, #3
 8003754:	4620      	mov	r0, r4
 8003756:	4a3c      	ldr	r2, [pc, #240]	; (8003848 <initBluetooth+0x138>)
 8003758:	493c      	ldr	r1, [pc, #240]	; (800384c <initBluetooth+0x13c>)
 800375a:	9500      	str	r5, [sp, #0]
 800375c:	f7fd fc9a 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERestaura, 			"RX_RESTAURA", 				RX_RESTAURA,				ComandoBasico);
 8003760:	2310      	movs	r3, #16
 8003762:	4620      	mov	r0, r4
 8003764:	4a3a      	ldr	r2, [pc, #232]	; (8003850 <initBluetooth+0x140>)
 8003766:	493b      	ldr	r1, [pc, #236]	; (8003854 <initBluetooth+0x144>)
 8003768:	9500      	str	r5, [sp, #0]
 800376a:	f7fd fc93 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERestauraHard, 		"RX_RESTAURA_HARD", 		RX_RESTAURA_HARD,			ComandoBasico);
 800376e:	2309      	movs	r3, #9
 8003770:	4620      	mov	r0, r4
 8003772:	4a39      	ldr	r2, [pc, #228]	; (8003858 <initBluetooth+0x148>)
 8003774:	4939      	ldr	r1, [pc, #228]	; (800385c <initBluetooth+0x14c>)
 8003776:	9500      	str	r5, [sp, #0]
 8003778:	f7fd fc8c 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTeto,     		"RX_SP_TEMP_TETO",        	RX_SP_TEMP_TETO,          	ComandoBasico);
 800377c:	2321      	movs	r3, #33	; 0x21
 800377e:	4620      	mov	r0, r4
 8003780:	4a37      	ldr	r2, [pc, #220]	; (8003860 <initBluetooth+0x150>)
 8003782:	4938      	ldr	r1, [pc, #224]	; (8003864 <initBluetooth+0x154>)
 8003784:	9500      	str	r5, [sp, #0]
 8003786:	f7fd fc85 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPLastro,     		"RX_SP_TEMP_LASTRO",       	RX_SP_TEMP_LASTRO,          ComandoBasico);
 800378a:	2322      	movs	r3, #34	; 0x22
 800378c:	4620      	mov	r0, r4
 800378e:	4a36      	ldr	r2, [pc, #216]	; (8003868 <initBluetooth+0x158>)
 8003790:	4936      	ldr	r1, [pc, #216]	; (800386c <initBluetooth+0x15c>)
 8003792:	9500      	str	r5, [sp, #0]
 8003794:	f7fd fc7e 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTempo,     		"RX_SP_TEMPO",       		RX_SP_TEMPO,        		ComandoBasico);
 8003798:	2323      	movs	r3, #35	; 0x23
 800379a:	4620      	mov	r0, r4
 800379c:	4a34      	ldr	r2, [pc, #208]	; (8003870 <initBluetooth+0x160>)
 800379e:	4935      	ldr	r1, [pc, #212]	; (8003874 <initBluetooth+0x164>)
 80037a0:	9500      	str	r5, [sp, #0]
 80037a2:	f7fd fc77 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEToggleTempo,     	"RX_TOGGLE_TEMPO",       	RX_TOGGLE_TEMPO,        	ComandoBasico);
 80037a6:	2324      	movs	r3, #36	; 0x24
 80037a8:	4620      	mov	r0, r4
 80037aa:	4a33      	ldr	r2, [pc, #204]	; (8003878 <initBluetooth+0x168>)
 80037ac:	4933      	ldr	r1, [pc, #204]	; (800387c <initBluetooth+0x16c>)
 80037ae:	9500      	str	r5, [sp, #0]
 80037b0:	f7fd fc70 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEReceita,     		"RX_RECEITA",     		  	RX_RECEITA,        			ComandoBasico);
 80037b4:	2325      	movs	r3, #37	; 0x25
 80037b6:	4620      	mov	r0, r4
 80037b8:	4a31      	ldr	r2, [pc, #196]	; (8003880 <initBluetooth+0x170>)
 80037ba:	4932      	ldr	r1, [pc, #200]	; (8003884 <initBluetooth+0x174>)
 80037bc:	9500      	str	r5, [sp, #0]
 80037be:	f7fd fc69 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOn,     		"RX_LIGA_LAMADA",     	  	RX_LIGA_LAMPADA,     		ComandoBasico);
 80037c2:	2327      	movs	r3, #39	; 0x27
 80037c4:	4620      	mov	r0, r4
 80037c6:	4a30      	ldr	r2, [pc, #192]	; (8003888 <initBluetooth+0x178>)
 80037c8:	4930      	ldr	r1, [pc, #192]	; (800388c <initBluetooth+0x17c>)
 80037ca:	9500      	str	r5, [sp, #0]
 80037cc:	f7fd fc62 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOff,     		"RX_DESLIGA_LAMPADA",    	RX_DESLIGA_LAMPADA,  		ComandoBasico);
 80037d0:	2328      	movs	r3, #40	; 0x28
 80037d2:	4620      	mov	r0, r4
 80037d4:	4a2e      	ldr	r2, [pc, #184]	; (8003890 <initBluetooth+0x180>)
 80037d6:	492f      	ldr	r1, [pc, #188]	; (8003894 <initBluetooth+0x184>)
 80037d8:	9500      	str	r5, [sp, #0]
 80037da:	f7fd fc5b 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESetaLampada,     	"RX_LIMITE_LAMPADA",    	RX_LIMITE_LAMPADA,  		ComandoBasico);
 80037de:	2330      	movs	r3, #48	; 0x30
 80037e0:	4620      	mov	r0, r4
 80037e2:	4a2d      	ldr	r2, [pc, #180]	; (8003898 <initBluetooth+0x188>)
 80037e4:	492d      	ldr	r1, [pc, #180]	; (800389c <initBluetooth+0x18c>)
 80037e6:	9500      	str	r5, [sp, #0]
 80037e8:	f7fd fc54 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLECancelaProcesso,  	"RX_CANCELA_PROCESSO",    	RX_CANCELA_PROCESSO,  		ComandoBasico);
 80037ec:	2329      	movs	r3, #41	; 0x29
 80037ee:	4620      	mov	r0, r4
 80037f0:	4a2b      	ldr	r2, [pc, #172]	; (80038a0 <initBluetooth+0x190>)
 80037f2:	492c      	ldr	r1, [pc, #176]	; (80038a4 <initBluetooth+0x194>)
 80037f4:	9500      	str	r5, [sp, #0]
 80037f6:	f7fd fc4d 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLETunningTeto,     	"RX_TUNNING_TETO",    		RX_TUNNING_TETO,  			ComandoBasico);
 80037fa:	2333      	movs	r3, #51	; 0x33
 80037fc:	4620      	mov	r0, r4
 80037fe:	4a2a      	ldr	r2, [pc, #168]	; (80038a8 <initBluetooth+0x198>)
 8003800:	492a      	ldr	r1, [pc, #168]	; (80038ac <initBluetooth+0x19c>)
 8003802:	9500      	str	r5, [sp, #0]
 8003804:	f7fd fc46 	bl	8001094 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLETunningLastro,  	"RX_TUNNING_LASTRO",    	RX_TUNNING_LASTRO,  		ComandoBasico);
 8003808:	2334      	movs	r3, #52	; 0x34
 800380a:	4620      	mov	r0, r4
 800380c:	4a28      	ldr	r2, [pc, #160]	; (80038b0 <initBluetooth+0x1a0>)
 800380e:	4929      	ldr	r1, [pc, #164]	; (80038b4 <initBluetooth+0x1a4>)
 8003810:	9500      	str	r5, [sp, #0]
 8003812:	f7fd fc3f 	bl	8001094 <BluetoothAddComp>
	//	taskEXIT_CRITICAL();

}
 8003816:	b003      	add	sp, #12
 8003818:	bd30      	pop	{r4, r5, pc}
 800381a:	bf00      	nop
 800381c:	20000900 	.word	0x20000900
 8003820:	2000203c 	.word	0x2000203c
 8003824:	20002204 	.word	0x20002204
 8003828:	20000874 	.word	0x20000874
 800382c:	20002384 	.word	0x20002384
 8003830:	0800b6ae 	.word	0x0800b6ae
 8003834:	2000248c 	.word	0x2000248c
 8003838:	0800b6c3 	.word	0x0800b6c3
 800383c:	200024e4 	.word	0x200024e4
 8003840:	0800b6d9 	.word	0x0800b6d9
 8003844:	2000247c 	.word	0x2000247c
 8003848:	0800b6f0 	.word	0x0800b6f0
 800384c:	20002484 	.word	0x20002484
 8003850:	0800b701 	.word	0x0800b701
 8003854:	200024b4 	.word	0x200024b4
 8003858:	0800b70d 	.word	0x0800b70d
 800385c:	200024bc 	.word	0x200024bc
 8003860:	0800b71e 	.word	0x0800b71e
 8003864:	200024d4 	.word	0x200024d4
 8003868:	0800b72e 	.word	0x0800b72e
 800386c:	200024c4 	.word	0x200024c4
 8003870:	0800b740 	.word	0x0800b740
 8003874:	200024cc 	.word	0x200024cc
 8003878:	0800b74c 	.word	0x0800b74c
 800387c:	200024ec 	.word	0x200024ec
 8003880:	0800b75c 	.word	0x0800b75c
 8003884:	200024ac 	.word	0x200024ac
 8003888:	0800b767 	.word	0x0800b767
 800388c:	200024a4 	.word	0x200024a4
 8003890:	0800b776 	.word	0x0800b776
 8003894:	2000249c 	.word	0x2000249c
 8003898:	0800b789 	.word	0x0800b789
 800389c:	200024dc 	.word	0x200024dc
 80038a0:	0800b79b 	.word	0x0800b79b
 80038a4:	20002494 	.word	0x20002494
 80038a8:	0800b7af 	.word	0x0800b7af
 80038ac:	200024fc 	.word	0x200024fc
 80038b0:	0800b7bf 	.word	0x0800b7bf
 80038b4:	200024f4 	.word	0x200024f4

080038b8 <txBluetooth>:
void txBluetooth(void){
 80038b8:	b510      	push	{r4, lr}
	// Usamos um ponteiro para uint8_t para copiar byte a byte
	unsigned char	Buffer		[BLUETOOTH_MAX_BUFF_LEN];
	osEvent  evttx;
	evttx = osMessageGet(FilaTXBluetoothHandle, 10);
 80038ba:	4b83      	ldr	r3, [pc, #524]	; (8003ac8 <txBluetooth+0x210>)
void txBluetooth(void){
 80038bc:	b08c      	sub	sp, #48	; 0x30
	evttx = osMessageGet(FilaTXBluetoothHandle, 10);
 80038be:	6819      	ldr	r1, [r3, #0]
 80038c0:	220a      	movs	r2, #10
 80038c2:	a801      	add	r0, sp, #4
 80038c4:	f004 facd 	bl	8007e62 <osMessageGet>
	if (evttx.status == osEventMessage) {
 80038c8:	9b01      	ldr	r3, [sp, #4]
 80038ca:	2b10      	cmp	r3, #16
 80038cc:	d115      	bne.n	80038fa <txBluetooth+0x42>
		switch ((unsigned int)evttx.value.p) {
 80038ce:	9b02      	ldr	r3, [sp, #8]
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d80c      	bhi.n	80038ee <txBluetooth+0x36>
 80038d4:	2b15      	cmp	r3, #21
 80038d6:	d910      	bls.n	80038fa <txBluetooth+0x42>
 80038d8:	3b16      	subs	r3, #22
 80038da:	2b0a      	cmp	r3, #10
 80038dc:	d80d      	bhi.n	80038fa <txBluetooth+0x42>
 80038de:	e8df f003 	tbb	[pc, r3]
 80038e2:	4c0e      	.short	0x4c0e
 80038e4:	0c0ca27d 	.word	0x0c0ca27d
 80038e8:	0c0c0c0c 	.word	0x0c0c0c0c
 80038ec:	c5          	.byte	0xc5
 80038ed:	00          	.byte	0x00
 80038ee:	2b29      	cmp	r3, #41	; 0x29
 80038f0:	f000 80db 	beq.w	8003aaa <txBluetooth+0x1f2>
 80038f4:	2b30      	cmp	r3, #48	; 0x30
 80038f6:	f000 80e0 	beq.w	8003aba <txBluetooth+0x202>
			BluetoothEnviaComando(Buffer, 2);

			break;
		}
	}
}
 80038fa:	b00c      	add	sp, #48	; 0x30
 80038fc:	bd10      	pop	{r4, pc}
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80038fe:	f241 6301 	movw	r3, #5633	; 0x1601
			Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003902:	4c72      	ldr	r4, [pc, #456]	; (8003acc <txBluetooth+0x214>)
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003904:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003908:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
			Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 800390c:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
			Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003910:	f88d 3012 	strb.w	r3, [sp, #18]
			Buffer[3] 	= PrimitiveStates.Teto._PWMstate;
 8003914:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8003918:	f88d 3013 	strb.w	r3, [sp, #19]
			Buffer[4] 	= PrimitiveStates.Lastro._PWMstate;
 800391c:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8003920:	f88d 3014 	strb.w	r3, [sp, #20]
			Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003924:	f7fd f872 	bl	8000a0c <__aeabi_d2uiz>
 8003928:	f3c0 2307 	ubfx	r3, r0, #8, #8
			Buffer[6] 	= (uint16_t)PrimitiveStates.Teto.realtime 		& 0x00FF;
 800392c:	f88d 0016 	strb.w	r0, [sp, #22]
			Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003930:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
			Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003934:	f88d 3015 	strb.w	r3, [sp, #21]
			Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003938:	f7fd f868 	bl	8000a0c <__aeabi_d2uiz>
 800393c:	f3c0 2307 	ubfx	r3, r0, #8, #8
			Buffer[8] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		& 0x00FF;
 8003940:	f88d 0018 	strb.w	r0, [sp, #24]
			Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 8003944:	e9d4 0146 	ldrd	r0, r1, [r4, #280]	; 0x118
			Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003948:	f88d 3017 	strb.w	r3, [sp, #23]
			Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 800394c:	f7fd f85e 	bl	8000a0c <__aeabi_d2uiz>
 8003950:	f3c0 2307 	ubfx	r3, r0, #8, #8
			Buffer[10] 	= (uint16_t)PrimitiveStates.Lastro.realtime 	& 0x00FF;
 8003954:	f88d 001a 	strb.w	r0, [sp, #26]
			Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 8003958:	e9d4 0148 	ldrd	r0, r1, [r4, #288]	; 0x120
			Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 800395c:	f88d 3019 	strb.w	r3, [sp, #25]
			Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 8003960:	f7fd f854 	bl	8000a0c <__aeabi_d2uiz>
 8003964:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003968:	f88d 301b 	strb.w	r3, [sp, #27]
			Buffer[12] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	& 0x00FF;
 800396c:	f88d 001c 	strb.w	r0, [sp, #28]
			BluetoothEnviaComando(Buffer, 12);
 8003970:	210c      	movs	r1, #12
			BluetoothEnviaComando(Buffer, 2);
 8003972:	a804      	add	r0, sp, #16
 8003974:	f7fd fbe2 	bl	800113c <BluetoothEnviaComando>
}
 8003978:	e7bf      	b.n	80038fa <txBluetooth+0x42>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 800397a:	f241 7301 	movw	r3, #5889	; 0x1701
 800397e:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= PrimitiveStates.stateTimer;			// State da maquina de timer
 8003982:	4b52      	ldr	r3, [pc, #328]	; (8003acc <txBluetooth+0x214>)
 8003984:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 8003988:	f88d 2012 	strb.w	r2, [sp, #18]
			Buffer[3] 	= PrimitiveStates.RTTimerMinutos;
 800398c:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
 8003990:	f88d 2013 	strb.w	r2, [sp, #19]
			Buffer[4] 	= PrimitiveStates.RTTimerSegundos;
 8003994:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 8003998:	f88d 2014 	strb.w	r2, [sp, #20]
			Buffer[5] 	= PrimitiveStates.SPTimerMinutos;
 800399c:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 80039a0:	f88d 2015 	strb.w	r2, [sp, #21]
			Buffer[6] 	= PrimitiveStates.SPTimerSegundos;
 80039a4:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
			Buffer[10]	= PrimitiveStates.Lampada._state;
 80039a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
			Buffer[6] 	= PrimitiveStates.SPTimerSegundos;
 80039ac:	f88d 2016 	strb.w	r2, [sp, #22]
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 80039b0:	4a47      	ldr	r2, [pc, #284]	; (8003ad0 <txBluetooth+0x218>)
			Buffer[10]	= PrimitiveStates.Lampada._state;
 80039b2:	f88d 301a 	strb.w	r3, [sp, #26]
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 80039b6:	68d2      	ldr	r2, [r2, #12]
			Buffer[11] 	= (uint16_t)Calendario.TotalCiclos >> 8;
 80039b8:	4b46      	ldr	r3, [pc, #280]	; (8003ad4 <txBluetooth+0x21c>)
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 80039ba:	f3c2 2107 	ubfx	r1, r2, #8, #8
			Buffer[8] 	= (uint16_t)horimetroHoras.valor & 0x00FF;
 80039be:	f88d 2018 	strb.w	r2, [sp, #24]
			Buffer[9] 	= (uint8_t)horimetroMinutos.valor;
 80039c2:	4a45      	ldr	r2, [pc, #276]	; (8003ad8 <txBluetooth+0x220>)
			Buffer[11] 	= (uint16_t)Calendario.TotalCiclos >> 8;
 80039c4:	891b      	ldrh	r3, [r3, #8]
			Buffer[9] 	= (uint8_t)horimetroMinutos.valor;
 80039c6:	68d2      	ldr	r2, [r2, #12]
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 80039c8:	f88d 1017 	strb.w	r1, [sp, #23]
			Buffer[9] 	= (uint8_t)horimetroMinutos.valor;
 80039cc:	f88d 2019 	strb.w	r2, [sp, #25]
			Buffer[11] 	= (uint16_t)Calendario.TotalCiclos >> 8;
 80039d0:	0a1a      	lsrs	r2, r3, #8
 80039d2:	f88d 201b 	strb.w	r2, [sp, #27]
			Buffer[12] 	= (uint16_t)Calendario.TotalCiclos & 0x00FF;
 80039d6:	f88d 301c 	strb.w	r3, [sp, #28]
 80039da:	e7c9      	b.n	8003970 <txBluetooth+0xb8>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80039dc:	f641 0301 	movw	r3, #6145	; 0x1801
 80039e0:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= 0x01;									// Modelo
 80039e4:	2301      	movs	r3, #1
 80039e6:	f88d 3012 	strb.w	r3, [sp, #18]
			Buffer[3] 	= (uint8_t)PrimitiveStates.Lampada.limitOn;
 80039ea:	4b38      	ldr	r3, [pc, #224]	; (8003acc <txBluetooth+0x214>)
			Buffer[8] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 80039ec:	4a39      	ldr	r2, [pc, #228]	; (8003ad4 <txBluetooth+0x21c>)
			Buffer[3] 	= (uint8_t)PrimitiveStates.Lampada.limitOn;
 80039ee:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			BluetoothEnviaComando(Buffer, 11);
 80039f0:	210b      	movs	r1, #11
			Buffer[3] 	= (uint8_t)PrimitiveStates.Lampada.limitOn;
 80039f2:	f88d 3013 	strb.w	r3, [sp, #19]
			Buffer[4] 	= (uint8_t)instalacaoDia.valor;
 80039f6:	4b39      	ldr	r3, [pc, #228]	; (8003adc <txBluetooth+0x224>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f88d 3014 	strb.w	r3, [sp, #20]
			Buffer[5] 	= (uint8_t)instalacaoMes.valor;
 80039fe:	4b38      	ldr	r3, [pc, #224]	; (8003ae0 <txBluetooth+0x228>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f88d 3015 	strb.w	r3, [sp, #21]
			Buffer[6] 	= (uint8_t)instalacaoAno.valor;
 8003a06:	4b37      	ldr	r3, [pc, #220]	; (8003ae4 <txBluetooth+0x22c>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f88d 3016 	strb.w	r3, [sp, #22]
			Buffer[7]	= VERSAO;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	f88d 3017 	strb.w	r3, [sp, #23]
			Buffer[8] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 8003a14:	8953      	ldrh	r3, [r2, #10]
 8003a16:	ba5b      	rev16	r3, r3
 8003a18:	f8ad 3018 	strh.w	r3, [sp, #24]
			Buffer[10] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 8003a1c:	8993      	ldrh	r3, [r2, #12]
 8003a1e:	ba5b      	rev16	r3, r3
 8003a20:	f8ad 301a 	strh.w	r3, [sp, #26]
			BluetoothEnviaComando(Buffer, 11);
 8003a24:	e7a5      	b.n	8003972 <txBluetooth+0xba>
			Buffer[0] = 0x01;
 8003a26:	f641 1301 	movw	r3, #6401	; 0x1901
			float_TO_vetor4b(PrimitiveStates.Teto.kp, Buffer, 2);
 8003a2a:	4c28      	ldr	r4, [pc, #160]	; (8003acc <txBluetooth+0x214>)
			Buffer[0] = 0x01;
 8003a2c:	f8ad 3010 	strh.w	r3, [sp, #16]
			float_TO_vetor4b(PrimitiveStates.Teto.kp, Buffer, 2);
 8003a30:	aa04      	add	r2, sp, #16
 8003a32:	2302      	movs	r3, #2
 8003a34:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
 8003a38:	f7fe f826 	bl	8001a88 <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Teto.ki, Buffer, 6);
 8003a3c:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
 8003a40:	2306      	movs	r3, #6
 8003a42:	aa04      	add	r2, sp, #16
 8003a44:	f7fe f820 	bl	8001a88 <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Teto.kd, Buffer, 10);
 8003a48:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	; 0xc0
 8003a4c:	230a      	movs	r3, #10
 8003a4e:	aa04      	add	r2, sp, #16
 8003a50:	f7fe f81a 	bl	8001a88 <float_TO_vetor4b>
			Buffer[14] 	= (uint16_t)PrimitiveStates.Teto.histerese 	>>8;
 8003a54:	f8b4 30e2 	ldrh.w	r3, [r4, #226]	; 0xe2
 8003a58:	ba5b      	rev16	r3, r3
 8003a5a:	f8ad 301e 	strh.w	r3, [sp, #30]
			Buffer[16] 	= (uint16_t)PrimitiveStates.Teto.limite 		>>8;
 8003a5e:	f8b4 30e0 	ldrh.w	r3, [r4, #224]	; 0xe0
			Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 8003a62:	ba5b      	rev16	r3, r3
			BluetoothEnviaComando(Buffer, 17);
 8003a64:	2111      	movs	r1, #17
			Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 8003a66:	f8ad 3020 	strh.w	r3, [sp, #32]
			BluetoothEnviaComando(Buffer, 17);
 8003a6a:	e782      	b.n	8003972 <txBluetooth+0xba>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003a6c:	f242 0301 	movw	r3, #8193	; 0x2001
			float_TO_vetor4b(PrimitiveStates.Lastro.kp, Buffer, 2);
 8003a70:	4c16      	ldr	r4, [pc, #88]	; (8003acc <txBluetooth+0x214>)
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003a72:	f8ad 3010 	strh.w	r3, [sp, #16]
			float_TO_vetor4b(PrimitiveStates.Lastro.kp, Buffer, 2);
 8003a76:	aa04      	add	r2, sp, #16
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e9d4 013e 	ldrd	r0, r1, [r4, #248]	; 0xf8
 8003a7e:	f7fe f803 	bl	8001a88 <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Lastro.ki, Buffer, 6);
 8003a82:	e9d4 0140 	ldrd	r0, r1, [r4, #256]	; 0x100
 8003a86:	2306      	movs	r3, #6
 8003a88:	aa04      	add	r2, sp, #16
 8003a8a:	f7fd fffd 	bl	8001a88 <float_TO_vetor4b>
			float_TO_vetor4b(PrimitiveStates.Lastro.kd, Buffer, 10);
 8003a8e:	e9d4 0142 	ldrd	r0, r1, [r4, #264]	; 0x108
 8003a92:	230a      	movs	r3, #10
 8003a94:	aa04      	add	r2, sp, #16
 8003a96:	f7fd fff7 	bl	8001a88 <float_TO_vetor4b>
			Buffer[14] 	= (uint16_t)PrimitiveStates.Lastro.histerese 	>>8;
 8003a9a:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8003a9e:	ba5b      	rev16	r3, r3
 8003aa0:	f8ad 301e 	strh.w	r3, [sp, #30]
			Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 8003aa4:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8003aa8:	e7db      	b.n	8003a62 <txBluetooth+0x1aa>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003aaa:	f642 1201 	movw	r2, #10497	; 0x2901
			BluetoothEnviaComando(Buffer, 2);
 8003aae:	2102      	movs	r1, #2
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003ab0:	f8ad 2010 	strh.w	r2, [sp, #16]
			Buffer[2] 	= 0x30;									// FUNÇÃO -
 8003ab4:	f88d 3012 	strb.w	r3, [sp, #18]
			BluetoothEnviaComando(Buffer, 2);
 8003ab8:	e75b      	b.n	8003972 <txBluetooth+0xba>
			FlagSincronia.flag=0;
 8003aba:	2100      	movs	r1, #0
 8003abc:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <txBluetooth+0x230>)
 8003abe:	7011      	strb	r1, [r2, #0]
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003ac0:	f243 0201 	movw	r2, #12289	; 0x3001
 8003ac4:	e7f3      	b.n	8003aae <txBluetooth+0x1f6>
 8003ac6:	bf00      	nop
 8003ac8:	20000900 	.word	0x20000900
 8003acc:	20000908 	.word	0x20000908
 8003ad0:	200026e4 	.word	0x200026e4
 8003ad4:	20000808 	.word	0x20000808
 8003ad8:	20002710 	.word	0x20002710
 8003adc:	20002768 	.word	0x20002768
 8003ae0:	20002794 	.word	0x20002794
 8003ae4:	2000273c 	.word	0x2000273c
 8003ae8:	20002504 	.word	0x20002504

08003aec <verificaLimiteSetpoint>:

			break;
		}
	}
}
void verificaLimiteSetpoint(IndviduoPID	*canal){
 8003aec:	b538      	push	{r3, r4, r5, lr}
	if(canal->setPoint < canal->limite)
 8003aee:	8f05      	ldrh	r5, [r0, #56]	; 0x38
void verificaLimiteSetpoint(IndviduoPID	*canal){
 8003af0:	4604      	mov	r4, r0
	if(canal->setPoint < canal->limite)
 8003af2:	4628      	mov	r0, r5
 8003af4:	f7fc fc86 	bl	8000404 <__aeabi_i2d>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8003b00:	f7fc ff5c 	bl	80009bc <__aeabi_dcmplt>
 8003b04:	b920      	cbnz	r0, 8003b10 <verificaLimiteSetpoint+0x24>
		return;

	canal->setPoint = canal->limite;
 8003b06:	4628      	mov	r0, r5
 8003b08:	f7fc fc6c 	bl	80003e4 <__aeabi_ui2d>
 8003b0c:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
	return;
}
 8003b10:	bd38      	pop	{r3, r4, r5, pc}
	...

08003b14 <sincAutomatico>:
bool sincAutomatico(void){ //1==permite 0==recusa

	//envia sincronia junto do realtime apenas 3 vezes por reconexao
	if(!FlagSincronia.flag){
 8003b14:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <sincAutomatico+0x20>)
 8003b16:	7818      	ldrb	r0, [r3, #0]
 8003b18:	b950      	cbnz	r0, 8003b30 <sincAutomatico+0x1c>
		if(FlagSincronia.cont<3){
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	785a      	ldrb	r2, [r3, #1]
 8003b1e:	2a02      	cmp	r2, #2
			FlagSincronia.cont++; //permite 3 envios antes de resetar a flag
 8003b20:	bf9d      	ittte	ls
 8003b22:	1852      	addls	r2, r2, r1
			return 1;
 8003b24:	4608      	movls	r0, r1
			FlagSincronia.cont++; //permite 3 envios antes de resetar a flag
 8003b26:	705a      	strbls	r2, [r3, #1]
		}else{
			FlagSincronia.cont = 0; //zera o contador
 8003b28:	7058      	strbhi	r0, [r3, #1]
			FlagSincronia.flag = 1; //reseta a flag
 8003b2a:	bf88      	it	hi
 8003b2c:	7019      	strbhi	r1, [r3, #0]
			return 0;
 8003b2e:	4770      	bx	lr
		}
	}
	return 0;
 8003b30:	2000      	movs	r0, #0
}
 8003b32:	4770      	bx	lr
 8003b34:	20002504 	.word	0x20002504

08003b38 <rxBluetooth>:
void rxBluetooth(void){
 8003b38:	b530      	push	{r4, r5, lr}
	evtrx = osMessageGet(FilaRXBluetoothHandle, 10);
 8003b3a:	4bb2      	ldr	r3, [pc, #712]	; (8003e04 <rxBluetooth+0x2cc>)
void rxBluetooth(void){
 8003b3c:	b087      	sub	sp, #28
	evtrx = osMessageGet(FilaRXBluetoothHandle, 10);
 8003b3e:	6819      	ldr	r1, [r3, #0]
 8003b40:	220a      	movs	r2, #10
 8003b42:	a803      	add	r0, sp, #12
 8003b44:	f004 f98d 	bl	8007e62 <osMessageGet>
	if (evtrx.status == osEventMessage) {
 8003b48:	9b03      	ldr	r3, [sp, #12]
 8003b4a:	2b10      	cmp	r3, #16
 8003b4c:	f040 820f 	bne.w	8003f6e <rxBluetooth+0x436>
		switch (bluetooth._RxDataArr[1]) {
 8003b50:	4cad      	ldr	r4, [pc, #692]	; (8003e08 <rxBluetooth+0x2d0>)
 8003b52:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
 8003b56:	2d03      	cmp	r5, #3
 8003b58:	d05c      	beq.n	8003c14 <rxBluetooth+0xdc>
 8003b5a:	3d09      	subs	r5, #9
 8003b5c:	b2eb      	uxtb	r3, r5
 8003b5e:	2b2b      	cmp	r3, #43	; 0x2b
 8003b60:	f200 8205 	bhi.w	8003f6e <rxBluetooth+0x436>
 8003b64:	2d2b      	cmp	r5, #43	; 0x2b
 8003b66:	f200 8202 	bhi.w	8003f6e <rxBluetooth+0x436>
 8003b6a:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003b6e:	007a      	.short	0x007a
 8003b70:	02000200 	.word	0x02000200
 8003b74:	02000200 	.word	0x02000200
 8003b78:	02000200 	.word	0x02000200
 8003b7c:	02000083 	.word	0x02000083
 8003b80:	02000200 	.word	0x02000200
 8003b84:	002c0200 	.word	0x002c0200
 8003b88:	004e0200 	.word	0x004e0200
 8003b8c:	02000200 	.word	0x02000200
 8003b90:	02000200 	.word	0x02000200
 8003b94:	02000200 	.word	0x02000200
 8003b98:	02000200 	.word	0x02000200
 8003b9c:	00860200 	.word	0x00860200
 8003ba0:	00a90099 	.word	0x00a90099
 8003ba4:	011200d0 	.word	0x011200d0
 8003ba8:	016a0200 	.word	0x016a0200
 8003bac:	01a4017a 	.word	0x01a4017a
 8003bb0:	02000200 	.word	0x02000200
 8003bb4:	02000200 	.word	0x02000200
 8003bb8:	02000200 	.word	0x02000200
 8003bbc:	0200018a 	.word	0x0200018a
 8003bc0:	01b00200 	.word	0x01b00200
 8003bc4:	01d8      	.short	0x01d8
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA, 0);
 8003bc6:	4c91      	ldr	r4, [pc, #580]	; (8003e0c <rxBluetooth+0x2d4>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2116      	movs	r1, #22
 8003bcc:	6820      	ldr	r0, [r4, #0]
 8003bce:	f004 f920 	bl	8007e12 <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA2, 0);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2117      	movs	r1, #23
 8003bd6:	6820      	ldr	r0, [r4, #0]
 8003bd8:	f004 f91b 	bl	8007e12 <osMessagePut>
			if(sincAutomatico()){
 8003bdc:	f7ff ff9a 	bl	8003b14 <sincAutomatico>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	f000 81c4 	beq.w	8003f6e <rxBluetooth+0x436>
				osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA,  0);
 8003be6:	2200      	movs	r2, #0
 8003be8:	2118      	movs	r1, #24
 8003bea:	6820      	ldr	r0, [r4, #0]
 8003bec:	f004 f911 	bl	8007e12 <osMessagePut>
				osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA2, 0);
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2119      	movs	r1, #25
 8003bf4:	6820      	ldr	r0, [r4, #0]
 8003bf6:	f004 f90c 	bl	8007e12 <osMessagePut>
				osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA3, 0);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2120      	movs	r1, #32
 8003bfe:	6820      	ldr	r0, [r4, #0]
}
 8003c00:	b007      	add	sp, #28
 8003c02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003c06:	f004 b904 	b.w	8007e12 <osMessagePut>
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2118      	movs	r1, #24
 8003c0e:	4b7f      	ldr	r3, [pc, #508]	; (8003e0c <rxBluetooth+0x2d4>)
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	e7f5      	b.n	8003c00 <rxBluetooth+0xc8>
			datetoUpdate.WeekDay 	= bluetooth._RxDataArr[2]; //Dia da semana p/atualizar
 8003c14:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
			timeToUpdate.Hours 		= bluetooth._RxDataArr[6]; //hora p/atualizar
 8003c18:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
			datetoUpdate.WeekDay 	= bluetooth._RxDataArr[2]; //Dia da semana p/atualizar
 8003c1a:	f88d 3008 	strb.w	r3, [sp, #8]
			datetoUpdate.Date 		= bluetooth._RxDataArr[3]; //Dia do mes p/atualizar
 8003c1e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
			timeToUpdate.Hours 		= bluetooth._RxDataArr[6]; //hora p/atualizar
 8003c22:	f8ad 2004 	strh.w	r2, [sp, #4]
			datetoUpdate.Date 		= bluetooth._RxDataArr[3]; //Dia do mes p/atualizar
 8003c26:	f88d 300a 	strb.w	r3, [sp, #10]
			datetoUpdate.Month 		= bluetooth._RxDataArr[4]; //mes p/atualizar
 8003c2a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003c2e:	f88d 3009 	strb.w	r3, [sp, #9]
			datetoUpdate.Year 		= bluetooth._RxDataArr[5]; //ano p/atualizar
 8003c32:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003c36:	f88d 300b 	strb.w	r3, [sp, #11]
			timeToUpdate.Seconds 	= bluetooth._RxDataArr[8]; //segundos p/atualizar
 8003c3a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003c3e:	f88d 3006 	strb.w	r3, [sp, #6]
			atualizaDataEeprom(datetoUpdate, timeToUpdate);
 8003c42:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8003c46:	f000 fd73 	bl	8004730 <atualizaDataEeprom>
			MACRO_ENVIA_AKNOLADGE_(RX_ATUALIZA_HORA)
 8003c4a:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003c4e:	4629      	mov	r1, r5
 8003c50:	8123      	strh	r3, [r4, #8]
 8003c52:	72a5      	strb	r5, [r4, #10]
 8003c54:	f104 0008 	add.w	r0, r4, #8
}
 8003c58:	b007      	add	sp, #28
 8003c5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_TETO)
 8003c5e:	f7fd ba37 	b.w	80010d0 <Envia_bytes_UART>
			osMessagePut(FilaEepromHandle, CEepromHardReset, 0);
 8003c62:	2200      	movs	r2, #0
 8003c64:	2102      	movs	r1, #2
			osMessagePut(FilaEepromHandle, CEepromSoftReset, 0);
 8003c66:	4b6a      	ldr	r3, [pc, #424]	; (8003e10 <rxBluetooth+0x2d8>)
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	f004 f8d2 	bl	8007e12 <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_RESETANDO, 0);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2129      	movs	r1, #41	; 0x29
 8003c72:	e7cc      	b.n	8003c0e <rxBluetooth+0xd6>
			osMessagePut(FilaEepromHandle, CEepromSoftReset, 0);
 8003c74:	2200      	movs	r2, #0
 8003c76:	2103      	movs	r1, #3
 8003c78:	e7f5      	b.n	8003c66 <rxBluetooth+0x12e>
			MACRO_ANULA_INATIVIDADE
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	4b65      	ldr	r3, [pc, #404]	; (8003e14 <rxBluetooth+0x2dc>)
			vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr,2);
 8003c7e:	4966      	ldr	r1, [pc, #408]	; (8003e18 <rxBluetooth+0x2e0>)
			MACRO_ANULA_INATIVIDADE
 8003c80:	801a      	strh	r2, [r3, #0]
			vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr,2);
 8003c82:	4866      	ldr	r0, [pc, #408]	; (8003e1c <rxBluetooth+0x2e4>)
 8003c84:	2202      	movs	r2, #2
 8003c86:	f7fd fee9 	bl	8001a5c <vetor2b_TO_Double>
			verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8003c8a:	4865      	ldr	r0, [pc, #404]	; (8003e20 <rxBluetooth+0x2e8>)
 8003c8c:	f7ff ff2e 	bl	8003aec <verificaLimiteSetpoint>
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_TETO)
 8003c90:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003c94:	8123      	strh	r3, [r4, #8]
 8003c96:	2321      	movs	r3, #33	; 0x21
 8003c98:	2103      	movs	r1, #3
 8003c9a:	4862      	ldr	r0, [pc, #392]	; (8003e24 <rxBluetooth+0x2ec>)
 8003c9c:	72a3      	strb	r3, [r4, #10]
 8003c9e:	e7db      	b.n	8003c58 <rxBluetooth+0x120>
			MACRO_ANULA_INATIVIDADE
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	4b5c      	ldr	r3, [pc, #368]	; (8003e14 <rxBluetooth+0x2dc>)
			vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr,2);
 8003ca4:	495c      	ldr	r1, [pc, #368]	; (8003e18 <rxBluetooth+0x2e0>)
			MACRO_ANULA_INATIVIDADE
 8003ca6:	801a      	strh	r2, [r3, #0]
			vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr,2);
 8003ca8:	485f      	ldr	r0, [pc, #380]	; (8003e28 <rxBluetooth+0x2f0>)
 8003caa:	2202      	movs	r2, #2
 8003cac:	f7fd fed6 	bl	8001a5c <vetor2b_TO_Double>
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8003cb0:	485e      	ldr	r0, [pc, #376]	; (8003e2c <rxBluetooth+0x2f4>)
 8003cb2:	f7ff ff1b 	bl	8003aec <verificaLimiteSetpoint>
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_LASTRO)
 8003cb6:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003cba:	8123      	strh	r3, [r4, #8]
 8003cbc:	2322      	movs	r3, #34	; 0x22
 8003cbe:	e7eb      	b.n	8003c98 <rxBluetooth+0x160>
			MACRO_ANULA_INATIVIDADE
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	4b54      	ldr	r3, [pc, #336]	; (8003e14 <rxBluetooth+0x2dc>)
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003cc4:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
			MACRO_ANULA_INATIVIDADE
 8003cc8:	801a      	strh	r2, [r3, #0]
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003cca:	4b59      	ldr	r3, [pc, #356]	; (8003e30 <rxBluetooth+0x2f8>)
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8003ccc:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003cd0:	f883 1139 	strb.w	r1, [r3, #313]	; 0x139
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8003cd4:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003cd8:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003cdc:	4a55      	ldr	r2, [pc, #340]	; (8003e34 <rxBluetooth+0x2fc>)
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8003cde:	f883 113b 	strb.w	r1, [r3, #315]	; 0x13b
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003ce2:	6810      	ldr	r0, [r2, #0]
			if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003ce4:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8003ce8:	2a01      	cmp	r2, #1
 8003cea:	d00e      	beq.n	8003d0a <rxBluetooth+0x1d2>
 8003cec:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 8003cf0:	2a01      	cmp	r2, #1
 8003cf2:	d00a      	beq.n	8003d0a <rxBluetooth+0x1d2>
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003cf4:	2201      	movs	r2, #1
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003cf6:	2104      	movs	r1, #4
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003cf8:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003cfc:	f004 f807 	bl	8007d0e <osSignalSet>
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMPO)
 8003d00:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003d04:	8123      	strh	r3, [r4, #8]
 8003d06:	2323      	movs	r3, #35	; 0x23
 8003d08:	e7c6      	b.n	8003c98 <rxBluetooth+0x160>
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	e7f6      	b.n	8003cfc <rxBluetooth+0x1c4>
			MACRO_ANULA_INATIVIDADE
 8003d0e:	2200      	movs	r2, #0
 8003d10:	4b40      	ldr	r3, [pc, #256]	; (8003e14 <rxBluetooth+0x2dc>)
 8003d12:	801a      	strh	r2, [r3, #0]
			switch (PrimitiveStates.stateTimer) {
 8003d14:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <rxBluetooth+0x2f8>)
 8003d16:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 8003d1a:	2a01      	cmp	r2, #1
 8003d1c:	d037      	beq.n	8003d8e <rxBluetooth+0x256>
 8003d1e:	2a02      	cmp	r2, #2
 8003d20:	d01e      	beq.n	8003d60 <rxBluetooth+0x228>
 8003d22:	bb7a      	cbnz	r2, 8003d84 <rxBluetooth+0x24c>
				PrimitiveStates.RTTimerMinutos 	= PrimitiveStates.SPTimerMinutos;
 8003d24:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 8003d28:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
				PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003d2c:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8003d30:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003d34:	4a3f      	ldr	r2, [pc, #252]	; (8003e34 <rxBluetooth+0x2fc>)
 8003d36:	6810      	ldr	r0, [r2, #0]
				if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003d38:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8003d3c:	2a01      	cmp	r2, #1
 8003d3e:	d00a      	beq.n	8003d56 <rxBluetooth+0x21e>
 8003d40:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 8003d44:	2a01      	cmp	r2, #1
 8003d46:	d006      	beq.n	8003d56 <rxBluetooth+0x21e>
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003d48:	2201      	movs	r2, #1
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003d4a:	2104      	movs	r1, #4
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003d4c:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003d50:	f003 ffdd 	bl	8007d0e <osSignalSet>
				break;
 8003d54:	e016      	b.n	8003d84 <rxBluetooth+0x24c>
					PrimitiveStates.stateTimer = TIMER_idle;
 8003d56:	2200      	movs	r2, #0
					osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003d58:	2102      	movs	r1, #2
					PrimitiveStates.stateTimer = TIMER_idle;
 8003d5a:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
					osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003d5e:	e7f7      	b.n	8003d50 <rxBluetooth+0x218>
				if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003d60:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8003d64:	2a01      	cmp	r2, #1
 8003d66:	d00a      	beq.n	8003d7e <rxBluetooth+0x246>
 8003d68:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 8003d6c:	2a01      	cmp	r2, #1
 8003d6e:	d006      	beq.n	8003d7e <rxBluetooth+0x246>
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003d70:	2201      	movs	r2, #1
				PrimitiveStates.stateTimer 	= TIMER_pausado;
 8003d72:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003d76:	4b2f      	ldr	r3, [pc, #188]	; (8003e34 <rxBluetooth+0x2fc>)
 8003d78:	2104      	movs	r1, #4
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	e7e8      	b.n	8003d50 <rxBluetooth+0x218>
					PrimitiveStates.stateTimer = TIMER_idle;
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
			MACRO_ENVIA_AKNOLADGE_(RX_TOGGLE_TEMPO)
 8003d84:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003d88:	8123      	strh	r3, [r4, #8]
 8003d8a:	2324      	movs	r3, #36	; 0x24
 8003d8c:	e784      	b.n	8003c98 <rxBluetooth+0x160>
				PrimitiveStates.stateTimer 	= TIMER_pausado;
 8003d8e:	2202      	movs	r2, #2
 8003d90:	e7ef      	b.n	8003d72 <rxBluetooth+0x23a>
			MACRO_ANULA_INATIVIDADE
 8003d92:	2200      	movs	r2, #0
 8003d94:	4b1f      	ldr	r3, [pc, #124]	; (8003e14 <rxBluetooth+0x2dc>)
			vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr	,2);
 8003d96:	4920      	ldr	r1, [pc, #128]	; (8003e18 <rxBluetooth+0x2e0>)
			MACRO_ANULA_INATIVIDADE
 8003d98:	801a      	strh	r2, [r3, #0]
			vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr	,2);
 8003d9a:	4820      	ldr	r0, [pc, #128]	; (8003e1c <rxBluetooth+0x2e4>)
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	f7fd fe5d 	bl	8001a5c <vetor2b_TO_Double>
			vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr	,4);
 8003da2:	2204      	movs	r2, #4
 8003da4:	491c      	ldr	r1, [pc, #112]	; (8003e18 <rxBluetooth+0x2e0>)
 8003da6:	4820      	ldr	r0, [pc, #128]	; (8003e28 <rxBluetooth+0x2f0>)
 8003da8:	f7fd fe58 	bl	8001a5c <vetor2b_TO_Double>
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8003dac:	481f      	ldr	r0, [pc, #124]	; (8003e2c <rxBluetooth+0x2f4>)
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8003dae:	4d20      	ldr	r5, [pc, #128]	; (8003e30 <rxBluetooth+0x2f8>)
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8003db0:	f7ff fe9c 	bl	8003aec <verificaLimiteSetpoint>
			verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8003db4:	481a      	ldr	r0, [pc, #104]	; (8003e20 <rxBluetooth+0x2e8>)
 8003db6:	f7ff fe99 	bl	8003aec <verificaLimiteSetpoint>
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 8003dba:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8003dbe:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
			contadorOutput(&PrimitiveStates.outPuts);
 8003dc2:	4628      	mov	r0, r5
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 8003dc4:	f885 313a 	strb.w	r3, [r5, #314]	; 0x13a
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003dc8:	f885 313c 	strb.w	r3, [r5, #316]	; 0x13c
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8003dcc:	f885 2139 	strb.w	r2, [r5, #313]	; 0x139
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8003dd0:	f885 213b 	strb.w	r2, [r5, #315]	; 0x13b
			contadorOutput(&PrimitiveStates.outPuts);
 8003dd4:	f7fe f9c3 	bl	800215e <contadorOutput>
			if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003dd8:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <rxBluetooth+0x2fc>)
 8003de0:	d02a      	beq.n	8003e38 <rxBluetooth+0x300>
 8003de2:	f895 20e4 	ldrb.w	r2, [r5, #228]	; 0xe4
 8003de6:	2a01      	cmp	r2, #1
 8003de8:	d026      	beq.n	8003e38 <rxBluetooth+0x300>
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003dea:	2201      	movs	r2, #1
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003dec:	2104      	movs	r1, #4
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003dee:	f885 213d 	strb.w	r2, [r5, #317]	; 0x13d
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	f003 ff8b 	bl	8007d0e <osSignalSet>
			MACRO_ENVIA_AKNOLADGE_(RX_RECEITA)
 8003df8:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003dfc:	8123      	strh	r3, [r4, #8]
 8003dfe:	2325      	movs	r3, #37	; 0x25
 8003e00:	e74a      	b.n	8003c98 <rxBluetooth+0x160>
 8003e02:	bf00      	nop
 8003e04:	20000874 	.word	0x20000874
 8003e08:	2000203c 	.word	0x2000203c
 8003e0c:	20000900 	.word	0x20000900
 8003e10:	2000081c 	.word	0x2000081c
 8003e14:	20002506 	.word	0x20002506
 8003e18:	2000206c 	.word	0x2000206c
 8003e1c:	200009e0 	.word	0x200009e0
 8003e20:	200009b0 	.word	0x200009b0
 8003e24:	20002044 	.word	0x20002044
 8003e28:	20000a28 	.word	0x20000a28
 8003e2c:	200009f8 	.word	0x200009f8
 8003e30:	20000908 	.word	0x20000908
 8003e34:	20001d8c 	.word	0x20001d8c
				PrimitiveStates.stateTimer = TIMER_idle;
 8003e38:	2200      	movs	r2, #0
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003e3a:	2102      	movs	r1, #2
				PrimitiveStates.stateTimer = TIMER_idle;
 8003e3c:	f885 213d 	strb.w	r2, [r5, #317]	; 0x13d
				osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003e40:	e7d7      	b.n	8003df2 <rxBluetooth+0x2ba>
			MACRO_ANULA_INATIVIDADE
 8003e42:	2200      	movs	r2, #0
 8003e44:	4b4b      	ldr	r3, [pc, #300]	; (8003f74 <rxBluetooth+0x43c>)
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003e46:	2104      	movs	r1, #4
			MACRO_ANULA_INATIVIDADE
 8003e48:	801a      	strh	r2, [r3, #0]
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003e4a:	4b4b      	ldr	r3, [pc, #300]	; (8003f78 <rxBluetooth+0x440>)
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	f003 ff5e 	bl	8007d0e <osSignalSet>
			onDigital(&PrimitiveStates.Lampada);
 8003e52:	484a      	ldr	r0, [pc, #296]	; (8003f7c <rxBluetooth+0x444>)
 8003e54:	f7fe f96f 	bl	8002136 <onDigital>
			MACRO_ENVIA_AKNOLADGE_(RX_LIGA_LAMPADA)
 8003e58:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003e5c:	8123      	strh	r3, [r4, #8]
 8003e5e:	2327      	movs	r3, #39	; 0x27
 8003e60:	e71a      	b.n	8003c98 <rxBluetooth+0x160>
			MACRO_ANULA_INATIVIDADE
 8003e62:	2200      	movs	r2, #0
 8003e64:	4b43      	ldr	r3, [pc, #268]	; (8003f74 <rxBluetooth+0x43c>)
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003e66:	2104      	movs	r1, #4
			MACRO_ANULA_INATIVIDADE
 8003e68:	801a      	strh	r2, [r3, #0]
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003e6a:	4b43      	ldr	r3, [pc, #268]	; (8003f78 <rxBluetooth+0x440>)
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	f003 ff4e 	bl	8007d0e <osSignalSet>
			offDigital(&PrimitiveStates.Lampada);
 8003e72:	4842      	ldr	r0, [pc, #264]	; (8003f7c <rxBluetooth+0x444>)
 8003e74:	f7fe f969 	bl	800214a <offDigital>
			MACRO_ENVIA_AKNOLADGE_(RX_DESLIGA_LAMPADA)
 8003e78:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003e7c:	8123      	strh	r3, [r4, #8]
 8003e7e:	2328      	movs	r3, #40	; 0x28
 8003e80:	e70a      	b.n	8003c98 <rxBluetooth+0x160>
			PrimitiveStates.Lampada.limitOn = bluetooth._RxDataArr[3];
 8003e82:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 8003e86:	4b3e      	ldr	r3, [pc, #248]	; (8003f80 <rxBluetooth+0x448>)
			osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 8003e88:	2106      	movs	r1, #6
			PrimitiveStates.Lampada.limitOn = bluetooth._RxDataArr[3];
 8003e8a:	875a      	strh	r2, [r3, #58]	; 0x3a
			osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 8003e8c:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <rxBluetooth+0x44c>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	f003 ffbe 	bl	8007e12 <osMessagePut>
			FlagSincronia.cont=0;
 8003e96:	2200      	movs	r2, #0
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003e98:	2118      	movs	r1, #24
			FlagSincronia.cont=0;
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <rxBluetooth+0x450>)
 8003e9c:	705a      	strb	r2, [r3, #1]
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA3, 0);
 8003e9e:	4b3b      	ldr	r3, [pc, #236]	; (8003f8c <rxBluetooth+0x454>)
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	f003 ffb6 	bl	8007e12 <osMessagePut>
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003ea6:	2104      	movs	r1, #4
 8003ea8:	4b33      	ldr	r3, [pc, #204]	; (8003f78 <rxBluetooth+0x440>)
 8003eaa:	6818      	ldr	r0, [r3, #0]
}
 8003eac:	b007      	add	sp, #28
 8003eae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003eb2:	f003 bf2c 	b.w	8007d0e <osSignalSet>
			desligaForno();
 8003eb6:	f7fe fdd3 	bl	8002a60 <desligaForno>
			osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003eba:	4b2f      	ldr	r3, [pc, #188]	; (8003f78 <rxBluetooth+0x440>)
 8003ebc:	2104      	movs	r1, #4
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	f003 ff25 	bl	8007d0e <osSignalSet>
			MACRO_ENVIA_AKNOLADGE_(RX_CANCELA_PROCESSO)
 8003ec4:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003ec8:	8123      	strh	r3, [r4, #8]
 8003eca:	2329      	movs	r3, #41	; 0x29
 8003ecc:	e6e4      	b.n	8003c98 <rxBluetooth+0x160>
			MACRO_ANULA_INATIVIDADE
 8003ece:	2400      	movs	r4, #0
 8003ed0:	4b28      	ldr	r3, [pc, #160]	; (8003f74 <rxBluetooth+0x43c>)
			vetor4b_TO_Double(&PrimitiveStates.Teto.kp,bluetooth._RxDataArr,2);
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	492e      	ldr	r1, [pc, #184]	; (8003f90 <rxBluetooth+0x458>)
 8003ed6:	482f      	ldr	r0, [pc, #188]	; (8003f94 <rxBluetooth+0x45c>)
			MACRO_ANULA_INATIVIDADE
 8003ed8:	801c      	strh	r4, [r3, #0]
			vetor4b_TO_Double(&PrimitiveStates.Teto.kp,bluetooth._RxDataArr,2);
 8003eda:	f7fd fd91 	bl	8001a00 <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Teto.ki,bluetooth._RxDataArr,6);
 8003ede:	2206      	movs	r2, #6
 8003ee0:	492b      	ldr	r1, [pc, #172]	; (8003f90 <rxBluetooth+0x458>)
 8003ee2:	482d      	ldr	r0, [pc, #180]	; (8003f98 <rxBluetooth+0x460>)
 8003ee4:	f7fd fd8c 	bl	8001a00 <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Teto.kd,bluetooth._RxDataArr,10);
 8003ee8:	220a      	movs	r2, #10
 8003eea:	4929      	ldr	r1, [pc, #164]	; (8003f90 <rxBluetooth+0x458>)
 8003eec:	482b      	ldr	r0, [pc, #172]	; (8003f9c <rxBluetooth+0x464>)
 8003eee:	f7fd fd87 	bl	8001a00 <vetor4b_TO_Double>
			vetor2b_TO_uint16(&PrimitiveStates.Teto.histerese,bluetooth._RxDataArr,14);
 8003ef2:	220e      	movs	r2, #14
 8003ef4:	4926      	ldr	r1, [pc, #152]	; (8003f90 <rxBluetooth+0x458>)
 8003ef6:	482a      	ldr	r0, [pc, #168]	; (8003fa0 <rxBluetooth+0x468>)
 8003ef8:	f7fd fd9e 	bl	8001a38 <vetor2b_TO_uint16>
			vetor2b_TO_uint16(&PrimitiveStates.Teto.limite ,bluetooth._RxDataArr,16);
 8003efc:	2210      	movs	r2, #16
 8003efe:	4924      	ldr	r1, [pc, #144]	; (8003f90 <rxBluetooth+0x458>)
 8003f00:	4828      	ldr	r0, [pc, #160]	; (8003fa4 <rxBluetooth+0x46c>)
 8003f02:	f7fd fd99 	bl	8001a38 <vetor2b_TO_uint16>
			verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8003f06:	4828      	ldr	r0, [pc, #160]	; (8003fa8 <rxBluetooth+0x470>)
 8003f08:	f7ff fdf0 	bl	8003aec <verificaLimiteSetpoint>
			osMessagePut(FilaEepromHandle, CEepromTunning, 0);
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <rxBluetooth+0x44c>)
 8003f0e:	4622      	mov	r2, r4
 8003f10:	210a      	movs	r1, #10
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	f003 ff7d 	bl	8007e12 <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA2, 0);
 8003f18:	4622      	mov	r2, r4
 8003f1a:	2119      	movs	r1, #25
 8003f1c:	e7bf      	b.n	8003e9e <rxBluetooth+0x366>
			MACRO_ANULA_INATIVIDADE
 8003f1e:	2400      	movs	r4, #0
 8003f20:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <rxBluetooth+0x43c>)
			vetor4b_TO_Double(&PrimitiveStates.Lastro.kp,bluetooth._RxDataArr,2);
 8003f22:	2202      	movs	r2, #2
 8003f24:	491a      	ldr	r1, [pc, #104]	; (8003f90 <rxBluetooth+0x458>)
 8003f26:	4821      	ldr	r0, [pc, #132]	; (8003fac <rxBluetooth+0x474>)
			MACRO_ANULA_INATIVIDADE
 8003f28:	801c      	strh	r4, [r3, #0]
			vetor4b_TO_Double(&PrimitiveStates.Lastro.kp,bluetooth._RxDataArr,2);
 8003f2a:	f7fd fd69 	bl	8001a00 <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Lastro.ki,bluetooth._RxDataArr,6);
 8003f2e:	2206      	movs	r2, #6
 8003f30:	4917      	ldr	r1, [pc, #92]	; (8003f90 <rxBluetooth+0x458>)
 8003f32:	481f      	ldr	r0, [pc, #124]	; (8003fb0 <rxBluetooth+0x478>)
 8003f34:	f7fd fd64 	bl	8001a00 <vetor4b_TO_Double>
			vetor4b_TO_Double(&PrimitiveStates.Lastro.kd,bluetooth._RxDataArr,10);
 8003f38:	220a      	movs	r2, #10
 8003f3a:	4915      	ldr	r1, [pc, #84]	; (8003f90 <rxBluetooth+0x458>)
 8003f3c:	481d      	ldr	r0, [pc, #116]	; (8003fb4 <rxBluetooth+0x47c>)
 8003f3e:	f7fd fd5f 	bl	8001a00 <vetor4b_TO_Double>
			vetor2b_TO_uint16(&PrimitiveStates.Lastro.histerese,bluetooth._RxDataArr,14);
 8003f42:	220e      	movs	r2, #14
 8003f44:	4912      	ldr	r1, [pc, #72]	; (8003f90 <rxBluetooth+0x458>)
 8003f46:	481c      	ldr	r0, [pc, #112]	; (8003fb8 <rxBluetooth+0x480>)
 8003f48:	f7fd fd76 	bl	8001a38 <vetor2b_TO_uint16>
			vetor2b_TO_uint16(&PrimitiveStates.Lastro.limite ,bluetooth._RxDataArr,16);
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	4910      	ldr	r1, [pc, #64]	; (8003f90 <rxBluetooth+0x458>)
 8003f50:	481a      	ldr	r0, [pc, #104]	; (8003fbc <rxBluetooth+0x484>)
 8003f52:	f7fd fd71 	bl	8001a38 <vetor2b_TO_uint16>
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8003f56:	481a      	ldr	r0, [pc, #104]	; (8003fc0 <rxBluetooth+0x488>)
 8003f58:	f7ff fdc8 	bl	8003aec <verificaLimiteSetpoint>
			osMessagePut(FilaEepromHandle, CEepromTunning, 0);
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <rxBluetooth+0x44c>)
 8003f5e:	4622      	mov	r2, r4
 8003f60:	210a      	movs	r1, #10
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	f003 ff55 	bl	8007e12 <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA3, 0);
 8003f68:	4622      	mov	r2, r4
 8003f6a:	2120      	movs	r1, #32
 8003f6c:	e797      	b.n	8003e9e <rxBluetooth+0x366>
}
 8003f6e:	b007      	add	sp, #28
 8003f70:	bd30      	pop	{r4, r5, pc}
 8003f72:	bf00      	nop
 8003f74:	20002506 	.word	0x20002506
 8003f78:	20001d8c 	.word	0x20001d8c
 8003f7c:	20000934 	.word	0x20000934
 8003f80:	20000908 	.word	0x20000908
 8003f84:	2000081c 	.word	0x2000081c
 8003f88:	20002504 	.word	0x20002504
 8003f8c:	20000900 	.word	0x20000900
 8003f90:	2000206c 	.word	0x2000206c
 8003f94:	200009b8 	.word	0x200009b8
 8003f98:	200009c0 	.word	0x200009c0
 8003f9c:	200009c8 	.word	0x200009c8
 8003fa0:	200009ea 	.word	0x200009ea
 8003fa4:	200009e8 	.word	0x200009e8
 8003fa8:	200009b0 	.word	0x200009b0
 8003fac:	20000a00 	.word	0x20000a00
 8003fb0:	20000a08 	.word	0x20000a08
 8003fb4:	20000a10 	.word	0x20000a10
 8003fb8:	20000a32 	.word	0x20000a32
 8003fbc:	20000a30 	.word	0x20000a30
 8003fc0:	200009f8 	.word	0x200009f8

08003fc4 <StartBluetooth>:
{
 8003fc4:	b508      	push	{r3, lr}
	osDelay(400);
 8003fc6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003fca:	f003 fe57 	bl	8007c7c <osDelay>
	initBluetooth();
 8003fce:	f7ff fb9f 	bl	8003710 <initBluetooth>
		rxBluetooth();
 8003fd2:	f7ff fdb1 	bl	8003b38 <rxBluetooth>
		txBluetooth();
 8003fd6:	f7ff fc6f 	bl	80038b8 <txBluetooth>
		osThreadYield();
 8003fda:	f003 fe43 	bl	8007c64 <osThreadYield>
		osDelay(40);
 8003fde:	2028      	movs	r0, #40	; 0x28
 8003fe0:	f003 fe4c 	bl	8007c7c <osDelay>
	for(;;)
 8003fe4:	e7f5      	b.n	8003fd2 <StartBluetooth+0xe>
	...

08003fe8 <sequencia2Buzzer>:
		M_BUZZER_OFF
		offDigital(&PrimitiveStates.Lampada);
		osDelay(100);
	}
}
void sequencia2Buzzer(void){
 8003fe8:	b538      	push	{r3, r4, r5, lr}
	M_BUZZER_ON
 8003fea:	4d0a      	ldr	r5, [pc, #40]	; (8004014 <sequencia2Buzzer+0x2c>)
	onDigital(&PrimitiveStates.Lampada);
 8003fec:	4c0a      	ldr	r4, [pc, #40]	; (8004018 <sequencia2Buzzer+0x30>)
	M_BUZZER_ON
 8003fee:	210c      	movs	r1, #12
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	f003 f921 	bl	8007238 <HAL_TIM_PWM_Start>
	onDigital(&PrimitiveStates.Lampada);
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f7fe f89d 	bl	8002136 <onDigital>
	osDelay(100);
 8003ffc:	2064      	movs	r0, #100	; 0x64
 8003ffe:	f003 fe3d 	bl	8007c7c <osDelay>
	M_BUZZER_OFF
 8004002:	4628      	mov	r0, r5
 8004004:	210c      	movs	r1, #12
 8004006:	f003 f953 	bl	80072b0 <HAL_TIM_PWM_Stop>
	offDigital(&PrimitiveStates.Lampada);
 800400a:	4620      	mov	r0, r4
}
 800400c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	offDigital(&PrimitiveStates.Lampada);
 8004010:	f7fe b89b 	b.w	800214a <offDigital>
 8004014:	200022f4 	.word	0x200022f4
 8004018:	20000934 	.word	0x20000934

0800401c <waitBuzzerSignal>:
void waitBuzzerSignal(void){
 800401c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800401e:	b085      	sub	sp, #20
	const int32_t signals = SINAL_TEMP_REACH | SINAL_COMFIRMA | SINAL_NEGADO | SINAL_PRONTO;
	osEvent evt;

	// Aguarde até que qualquer um dos sinais seja recebido
	evt = osSignalWait(signals, osWaitForever);
 8004020:	f04f 32ff 	mov.w	r2, #4294967295
 8004024:	210f      	movs	r1, #15
 8004026:	a801      	add	r0, sp, #4
 8004028:	f003 fe9a 	bl	8007d60 <osSignalWait>

	// Verifique os sinais
	if (evt.status == osEventSignal) {
 800402c:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d16a      	bne.n	800410a <waitBuzzerSignal+0xee>
		if (evt.value.signals & SINAL_TEMP_REACH) {
 8004034:	07e0      	lsls	r0, r4, #31
 8004036:	d518      	bpl.n	800406a <waitBuzzerSignal+0x4e>
 8004038:	2505      	movs	r5, #5
			// execute o padrão de buzzer para SINAL_TEMP_REACH
			for (int i = 0; i < 5; ++i) {
				M_BUZZER_ON
 800403a:	4f35      	ldr	r7, [pc, #212]	; (8004110 <waitBuzzerSignal+0xf4>)
				onDigital(&PrimitiveStates.Lampada);
 800403c:	4e35      	ldr	r6, [pc, #212]	; (8004114 <waitBuzzerSignal+0xf8>)
				M_BUZZER_ON
 800403e:	210c      	movs	r1, #12
 8004040:	4638      	mov	r0, r7
 8004042:	f003 f8f9 	bl	8007238 <HAL_TIM_PWM_Start>
				onDigital(&PrimitiveStates.Lampada);
 8004046:	4630      	mov	r0, r6
 8004048:	f7fe f875 	bl	8002136 <onDigital>
				osDelay(50);
 800404c:	2032      	movs	r0, #50	; 0x32
 800404e:	f003 fe15 	bl	8007c7c <osDelay>
				M_BUZZER_OFF
 8004052:	210c      	movs	r1, #12
 8004054:	4638      	mov	r0, r7
 8004056:	f003 f92b 	bl	80072b0 <HAL_TIM_PWM_Stop>
				offDigital(&PrimitiveStates.Lampada);
 800405a:	4630      	mov	r0, r6
 800405c:	f7fe f875 	bl	800214a <offDigital>
				osDelay(30);
 8004060:	201e      	movs	r0, #30
 8004062:	f003 fe0b 	bl	8007c7c <osDelay>
			for (int i = 0; i < 5; ++i) {
 8004066:	3d01      	subs	r5, #1
 8004068:	d1e9      	bne.n	800403e <waitBuzzerSignal+0x22>
			}
		}

		if (evt.value.signals & SINAL_COMFIRMA) {
 800406a:	0761      	lsls	r1, r4, #29
 800406c:	d50e      	bpl.n	800408c <waitBuzzerSignal+0x70>
			// execute o padrão de buzzer para SINAL_COMFIRMA
			M_BUZZER_ON
 800406e:	210c      	movs	r1, #12
 8004070:	4827      	ldr	r0, [pc, #156]	; (8004110 <waitBuzzerSignal+0xf4>)
 8004072:	f003 f8e1 	bl	8007238 <HAL_TIM_PWM_Start>
			osDelay(70);
 8004076:	2046      	movs	r0, #70	; 0x46
 8004078:	f003 fe00 	bl	8007c7c <osDelay>
			M_BUZZER_OFF
 800407c:	210c      	movs	r1, #12
 800407e:	4824      	ldr	r0, [pc, #144]	; (8004110 <waitBuzzerSignal+0xf4>)
 8004080:	f003 f916 	bl	80072b0 <HAL_TIM_PWM_Stop>
			osDelay(500);
 8004084:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004088:	f003 fdf8 	bl	8007c7c <osDelay>
		}

		if (evt.value.signals & SINAL_NEGADO) {
 800408c:	07a2      	lsls	r2, r4, #30
 800408e:	d51b      	bpl.n	80040c8 <waitBuzzerSignal+0xac>
			// execute o padrão de buzzer para SINAL_NEGADO
			for (int i = 0; i < 2; ++i) {
				M_BUZZER_ON
 8004090:	210c      	movs	r1, #12
 8004092:	481f      	ldr	r0, [pc, #124]	; (8004110 <waitBuzzerSignal+0xf4>)
 8004094:	f003 f8d0 	bl	8007238 <HAL_TIM_PWM_Start>
				osDelay(70);
 8004098:	2046      	movs	r0, #70	; 0x46
 800409a:	f003 fdef 	bl	8007c7c <osDelay>
				M_BUZZER_OFF
 800409e:	210c      	movs	r1, #12
 80040a0:	481b      	ldr	r0, [pc, #108]	; (8004110 <waitBuzzerSignal+0xf4>)
 80040a2:	f003 f905 	bl	80072b0 <HAL_TIM_PWM_Stop>
				osDelay(50);
 80040a6:	2032      	movs	r0, #50	; 0x32
 80040a8:	f003 fde8 	bl	8007c7c <osDelay>
				M_BUZZER_ON
 80040ac:	210c      	movs	r1, #12
 80040ae:	4818      	ldr	r0, [pc, #96]	; (8004110 <waitBuzzerSignal+0xf4>)
 80040b0:	f003 f8c2 	bl	8007238 <HAL_TIM_PWM_Start>
				osDelay(70);
 80040b4:	2046      	movs	r0, #70	; 0x46
 80040b6:	f003 fde1 	bl	8007c7c <osDelay>
				M_BUZZER_OFF
 80040ba:	210c      	movs	r1, #12
 80040bc:	4814      	ldr	r0, [pc, #80]	; (8004110 <waitBuzzerSignal+0xf4>)
 80040be:	f003 f8f7 	bl	80072b0 <HAL_TIM_PWM_Stop>
				osDelay(50);
 80040c2:	2032      	movs	r0, #50	; 0x32
 80040c4:	f003 fdda 	bl	8007c7c <osDelay>
			}
		}

		if (evt.value.signals & SINAL_PRONTO) {
 80040c8:	0723      	lsls	r3, r4, #28
 80040ca:	d51e      	bpl.n	800410a <waitBuzzerSignal+0xee>
 80040cc:	240a      	movs	r4, #10
			// execute o padrão de buzzer para SINAL_PRONTO
			for (int i = 0; i < 10; ++i) {
				M_BUZZER_ON
 80040ce:	4e10      	ldr	r6, [pc, #64]	; (8004110 <waitBuzzerSignal+0xf4>)
				onDigital(&PrimitiveStates.Lampada);
 80040d0:	4d10      	ldr	r5, [pc, #64]	; (8004114 <waitBuzzerSignal+0xf8>)
				M_BUZZER_ON
 80040d2:	210c      	movs	r1, #12
 80040d4:	4630      	mov	r0, r6
 80040d6:	f003 f8af 	bl	8007238 <HAL_TIM_PWM_Start>
				onDigital(&PrimitiveStates.Lampada);
 80040da:	4628      	mov	r0, r5
 80040dc:	f7fe f82b 	bl	8002136 <onDigital>
				osDelay(250);
 80040e0:	20fa      	movs	r0, #250	; 0xfa
 80040e2:	f003 fdcb 	bl	8007c7c <osDelay>
				M_BUZZER_OFF
 80040e6:	210c      	movs	r1, #12
 80040e8:	4630      	mov	r0, r6
 80040ea:	f003 f8e1 	bl	80072b0 <HAL_TIM_PWM_Stop>
				offDigital(&PrimitiveStates.Lampada);
 80040ee:	4628      	mov	r0, r5
 80040f0:	f7fe f82b 	bl	800214a <offDigital>
				osDelay(100);
 80040f4:	2064      	movs	r0, #100	; 0x64
 80040f6:	f003 fdc1 	bl	8007c7c <osDelay>
			for (int i = 0; i < 10; ++i) {
 80040fa:	3c01      	subs	r4, #1
 80040fc:	d1e9      	bne.n	80040d2 <waitBuzzerSignal+0xb6>
			}
			onDigital(&PrimitiveStates.Lampada);//DEIXA LAMPADA LIGADA
 80040fe:	4805      	ldr	r0, [pc, #20]	; (8004114 <waitBuzzerSignal+0xf8>)
		}
	}
}
 8004100:	b005      	add	sp, #20
 8004102:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			onDigital(&PrimitiveStates.Lampada);//DEIXA LAMPADA LIGADA
 8004106:	f7fe b816 	b.w	8002136 <onDigital>
}
 800410a:	b005      	add	sp, #20
 800410c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800410e:	bf00      	nop
 8004110:	200022f4 	.word	0x200022f4
 8004114:	20000934 	.word	0x20000934

08004118 <StartBuzzer>:
{
 8004118:	b508      	push	{r3, lr}
	sequencia2Buzzer();
 800411a:	f7ff ff65 	bl	8003fe8 <sequencia2Buzzer>
		waitBuzzerSignal();
 800411e:	f7ff ff7d 	bl	800401c <waitBuzzerSignal>
		osThreadYield();
 8004122:	f003 fd9f 	bl	8007c64 <osThreadYield>
		osDelay(100);
 8004126:	2064      	movs	r0, #100	; 0x64
 8004128:	f003 fda8 	bl	8007c7c <osDelay>
	for(;;)
 800412c:	e7f7      	b.n	800411e <StartBuzzer+0x6>
	...

08004130 <initEeprom>:
		osThreadYield();
		osDelay(500);
	}
}

void initEeprom(void){
 8004130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	//inicializacao ad eeprom
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 8004134:	4dbe      	ldr	r5, [pc, #760]	; (8004430 <initEeprom+0x300>)
void initEeprom(void){
 8004136:	b08b      	sub	sp, #44	; 0x2c
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 8004138:	4628      	mov	r0, r5
 800413a:	4abe      	ldr	r2, [pc, #760]	; (8004434 <initEeprom+0x304>)
 800413c:	49be      	ldr	r1, [pc, #760]	; (8004438 <initEeprom+0x308>)

	//criacao dos objetos variaveis
	EepromAddVar(&eeprom,0,&tempoDelayLuz, 		"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA16BITS,	0,		45,		60000	,&PrimitiveStates.Lampada.limitOn);
 800413e:	2400      	movs	r4, #0
 8004140:	2601      	movs	r6, #1
 8004142:	2702      	movs	r7, #2
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 8004144:	f7fd fcee 	bl	8001b24 <EepromInit>
	EepromAddVar(&eeprom,0,&tempoDelayLuz, 		"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA16BITS,	0,		45,		60000	,&PrimitiveStates.Lampada.limitOn);
 8004148:	f64e 2b60 	movw	fp, #60000	; 0xea60
 800414c:	232d      	movs	r3, #45	; 0x2d
 800414e:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 800443c <initEeprom+0x30c>
	EepromAddVar(&eeprom,1,&horimetroHoras, 	"addrHORIMETRO", 		addrHORIMETRO,		DATA16BITS,	0,		0,		60000	,&Calendario.Horimetro_horas);
 8004152:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 8004440 <initEeprom+0x310>
	EepromAddVar(&eeprom,0,&tempoDelayLuz, 		"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA16BITS,	0,		45,		60000	,&PrimitiveStates.Lampada.limitOn);
 8004156:	e9cd 3b03 	strd	r3, fp, [sp, #12]
 800415a:	4621      	mov	r1, r4
 800415c:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004160:	9600      	str	r6, [sp, #0]
 8004162:	4628      	mov	r0, r5
 8004164:	4bb7      	ldr	r3, [pc, #732]	; (8004444 <initEeprom+0x314>)
 8004166:	4ab8      	ldr	r2, [pc, #736]	; (8004448 <initEeprom+0x318>)
 8004168:	f8cd 9014 	str.w	r9, [sp, #20]
 800416c:	f7fd fc93 	bl	8001a96 <EepromAddVar>
	EepromAddVar(&eeprom,1,&horimetroHoras, 	"addrHORIMETRO", 		addrHORIMETRO,		DATA16BITS,	0,		0,		60000	,&Calendario.Horimetro_horas);
 8004170:	e9cd b804 	strd	fp, r8, [sp, #16]
 8004174:	4631      	mov	r1, r6
 8004176:	e9cd 7700 	strd	r7, r7, [sp]
 800417a:	4628      	mov	r0, r5
 800417c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004180:	4bb2      	ldr	r3, [pc, #712]	; (800444c <initEeprom+0x31c>)
 8004182:	4ab3      	ldr	r2, [pc, #716]	; (8004450 <initEeprom+0x320>)
 8004184:	f7fd fc87 	bl	8001a96 <EepromAddVar>
	EepromAddVar(&eeprom,1,&horimetroMinutos, 	"addrMINUTIMETRO", 		addrMINUTIMETRO,	DATA8BITS,	0,		0,		254		,&Calendario.Horimetro_parcial_min);
 8004188:	eb08 0307 	add.w	r3, r8, r7
 800418c:	9305      	str	r3, [sp, #20]
 800418e:	23fe      	movs	r3, #254	; 0xfe
 8004190:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8004194:	2304      	movs	r3, #4
 8004196:	4631      	mov	r1, r6
 8004198:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	4628      	mov	r0, r5
 80041a0:	4bac      	ldr	r3, [pc, #688]	; (8004454 <initEeprom+0x324>)
 80041a2:	4aad      	ldr	r2, [pc, #692]	; (8004458 <initEeprom+0x328>)
 80041a4:	f7fd fc77 	bl	8001a96 <EepromAddVar>
	EepromAddVar(&eeprom,1,&instalacaoDia, 		"addrINST_DIA", 		addrINST_DIA,		DATA8BITS,	1,		0,		31		,&Calendario.Data_instalacao.Date);
 80041a8:	f1a8 0302 	sub.w	r3, r8, #2
 80041ac:	9305      	str	r3, [sp, #20]
 80041ae:	231f      	movs	r3, #31
 80041b0:	e9cd 4303 	strd	r4, r3, [sp, #12]
 80041b4:	2305      	movs	r3, #5
 80041b6:	4631      	mov	r1, r6
 80041b8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	4628      	mov	r0, r5
 80041c0:	4ba6      	ldr	r3, [pc, #664]	; (800445c <initEeprom+0x32c>)
 80041c2:	4aa7      	ldr	r2, [pc, #668]	; (8004460 <initEeprom+0x330>)
 80041c4:	f7fd fc67 	bl	8001a96 <EepromAddVar>
	EepromAddVar(&eeprom,1,&instalacaoMes, 		"addrINST_MES", 		addrINST_MES,		DATA8BITS,	1,		1,		12		,&Calendario.Data_instalacao.Month);
 80041c8:	f1a8 0303 	sub.w	r3, r8, #3
 80041cc:	9305      	str	r3, [sp, #20]
 80041ce:	220c      	movs	r2, #12
 80041d0:	2306      	movs	r3, #6
 80041d2:	e9cd 6203 	strd	r6, r2, [sp, #12]
 80041d6:	4631      	mov	r1, r6
 80041d8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	4628      	mov	r0, r5
 80041e0:	4ba0      	ldr	r3, [pc, #640]	; (8004464 <initEeprom+0x334>)
 80041e2:	4aa1      	ldr	r2, [pc, #644]	; (8004468 <initEeprom+0x338>)
 80041e4:	f7fd fc57 	bl	8001a96 <EepromAddVar>
	EepromAddVar(&eeprom,1,&instalacaoAno, 		"addrINST_ANO", 		addrINST_ANO,		DATA8BITS,	23,		23,		99		,&Calendario.Data_instalacao.Year);
 80041e8:	f108 33ff 	add.w	r3, r8, #4294967295
 80041ec:	9305      	str	r3, [sp, #20]
 80041ee:	2263      	movs	r2, #99	; 0x63
 80041f0:	2317      	movs	r3, #23
 80041f2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80041f6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80041fa:	2307      	movs	r3, #7
 80041fc:	4631      	mov	r1, r6
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	4628      	mov	r0, r5
 8004202:	4b9a      	ldr	r3, [pc, #616]	; (800446c <initEeprom+0x33c>)
 8004204:	4a9a      	ldr	r2, [pc, #616]	; (8004470 <initEeprom+0x340>)
 8004206:	f7fd fc46 	bl	8001a96 <EepromAddVar>
	EepromAddVar(&eeprom,1,&totalCiclos, 		"addrTOTAL_GERAL", 		addrTOTAL_GERAL,	DATA16BITS,	0,		0,		60000	,&Calendario.TotalCiclos);
 800420a:	f108 0304 	add.w	r3, r8, #4
 800420e:	e9cd b304 	strd	fp, r3, [sp, #16]
 8004212:	2308      	movs	r3, #8
	EepromAddVar(&eeprom,1,&ContTetoMax, 		"addrCONT_MAX_TETO", 	addrCONT_MAX_TETO,	DATA16BITS,	0,		0,		60000	,&Calendario.ContMaxTeto);
 8004214:	f04f 0a0a 	mov.w	sl, #10
	EepromAddVar(&eeprom,1,&totalCiclos, 		"addrTOTAL_GERAL", 		addrTOTAL_GERAL,	DATA16BITS,	0,		0,		60000	,&Calendario.TotalCiclos);
 8004218:	4631      	mov	r1, r6
 800421a:	9701      	str	r7, [sp, #4]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	4628      	mov	r0, r5
 8004220:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004224:	4b93      	ldr	r3, [pc, #588]	; (8004474 <initEeprom+0x344>)
 8004226:	4a94      	ldr	r2, [pc, #592]	; (8004478 <initEeprom+0x348>)
 8004228:	f7fd fc35 	bl	8001a96 <EepromAddVar>
	EepromAddVar(&eeprom,1,&ContTetoMax, 		"addrCONT_MAX_TETO", 	addrCONT_MAX_TETO,	DATA16BITS,	0,		0,		60000	,&Calendario.ContMaxTeto);
 800422c:	f108 0306 	add.w	r3, r8, #6
 8004230:	e9cd b304 	strd	fp, r3, [sp, #16]
 8004234:	4631      	mov	r1, r6
 8004236:	9701      	str	r7, [sp, #4]
 8004238:	f8cd a000 	str.w	sl, [sp]
 800423c:	4628      	mov	r0, r5
 800423e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004242:	4b8e      	ldr	r3, [pc, #568]	; (800447c <initEeprom+0x34c>)
 8004244:	4a8e      	ldr	r2, [pc, #568]	; (8004480 <initEeprom+0x350>)
 8004246:	f7fd fc26 	bl	8001a96 <EepromAddVar>
	EepromAddVar(&eeprom,1,&ContLastroMax, 		"addrCONT_MAX_LASTRO", 	addrCONT_MAX_LASTRO,DATA16BITS,	0,		0,		60000	,&Calendario.ContMaxLastro);
 800424a:	220c      	movs	r2, #12
 800424c:	f108 0308 	add.w	r3, r8, #8
 8004250:	e9cd b304 	strd	fp, r3, [sp, #16]
 8004254:	4631      	mov	r1, r6
 8004256:	9701      	str	r7, [sp, #4]
 8004258:	9200      	str	r2, [sp, #0]
 800425a:	4628      	mov	r0, r5
 800425c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004260:	4b88      	ldr	r3, [pc, #544]	; (8004484 <initEeprom+0x354>)
 8004262:	4a89      	ldr	r2, [pc, #548]	; (8004488 <initEeprom+0x358>)
 8004264:	f7fd fc17 	bl	8001a96 <EepromAddVar>

	EepromAddVar(&eeprom,0,&hitereseStateTeto, 	"addrTETO_HIST", 		addrTETO_HIST,		DATA16BITS,	0,		STD_HISTERESE,10	,&PrimitiveStates.Teto.histerese);
 8004268:	f109 03a8 	add.w	r3, r9, #168	; 0xa8
 800426c:	e9cd a304 	strd	sl, r3, [sp, #16]
 8004270:	f04f 0803 	mov.w	r8, #3
 8004274:	2329      	movs	r3, #41	; 0x29
 8004276:	4621      	mov	r1, r4
 8004278:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800427c:	9701      	str	r7, [sp, #4]
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	4628      	mov	r0, r5
 8004282:	4b82      	ldr	r3, [pc, #520]	; (800448c <initEeprom+0x35c>)
 8004284:	4a82      	ldr	r2, [pc, #520]	; (8004490 <initEeprom+0x360>)
 8004286:	f7fd fc06 	bl	8001a96 <EepromAddVar>
	EepromAddVar(&eeprom,0,&limiteTeto, 		"addrTETO_LIMIT", 		addrTETO_LIMIT,		DATA16BITS,	0,		475			,500	,&PrimitiveStates.Teto.limite);
 800428a:	f109 03a6 	add.w	r3, r9, #166	; 0xa6
 800428e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8004292:	9305      	str	r3, [sp, #20]
 8004294:	f240 13db 	movw	r3, #475	; 0x1db
 8004298:	e9cd 3603 	strd	r3, r6, [sp, #12]
 800429c:	232b      	movs	r3, #43	; 0x2b
 800429e:	4621      	mov	r1, r4
 80042a0:	e9cd 7401 	strd	r7, r4, [sp, #4]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	4628      	mov	r0, r5
 80042a8:	4b7a      	ldr	r3, [pc, #488]	; (8004494 <initEeprom+0x364>)
 80042aa:	4a7b      	ldr	r2, [pc, #492]	; (8004498 <initEeprom+0x368>)
 80042ac:	f7fd fbf3 	bl	8001a96 <EepromAddVar>
	EepromAddVar(&eeprom,0,&hitereseStateLastro,"addrLASTRO_HIST", 		addrLASTRO_HIST,	DATA16BITS,	0,		STD_HISTERESE,10	,&PrimitiveStates.Lastro.histerese);
 80042b0:	f109 03f0 	add.w	r3, r9, #240	; 0xf0
 80042b4:	e9cd a304 	strd	sl, r3, [sp, #16]
 80042b8:	2349      	movs	r3, #73	; 0x49
 80042ba:	4621      	mov	r1, r4
 80042bc:	e9cd 4802 	strd	r4, r8, [sp, #8]
 80042c0:	9701      	str	r7, [sp, #4]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	4628      	mov	r0, r5
 80042c6:	4b75      	ldr	r3, [pc, #468]	; (800449c <initEeprom+0x36c>)
 80042c8:	4a75      	ldr	r2, [pc, #468]	; (80044a0 <initEeprom+0x370>)
 80042ca:	f7fd fbe4 	bl	8001a96 <EepromAddVar>
	EepromAddVar(&eeprom,0,&limiteLastro,		"addrLASTRO_LIMIT", 	addrLASTRO_LIMIT,	DATA16BITS,	0,		STD_LIMITE	,500	,&PrimitiveStates.Lastro.limite);
 80042ce:	f109 03ee 	add.w	r3, r9, #238	; 0xee
 80042d2:	e9cd 6304 	strd	r6, r3, [sp, #16]
 80042d6:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80042da:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80042de:	234b      	movs	r3, #75	; 0x4b
 80042e0:	4621      	mov	r1, r4
 80042e2:	9701      	str	r7, [sp, #4]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	4628      	mov	r0, r5
 80042e8:	4b6e      	ldr	r3, [pc, #440]	; (80044a4 <initEeprom+0x374>)
 80042ea:	4a6f      	ldr	r2, [pc, #444]	; (80044a8 <initEeprom+0x378>)
 80042ec:	f7fd fbd3 	bl	8001a96 <EepromAddVar>

	EepromAddVarFloating(&eeprom, 0, &kPTeto, 	"addrTETO_KP", 			addrTETO_KP,		DATADOUBLE,	0,		STD_KP		,1000	,&PrimitiveStates.Teto.kp);
 80042f0:	2200      	movs	r2, #0
 80042f2:	f109 0376 	add.w	r3, r9, #118	; 0x76
 80042f6:	9308      	str	r3, [sp, #32]
 80042f8:	4b6c      	ldr	r3, [pc, #432]	; (80044ac <initEeprom+0x37c>)
 80042fa:	2600      	movs	r6, #0
 80042fc:	f04f 0a00 	mov.w	sl, #0
 8004300:	f04f 0b00 	mov.w	fp, #0
 8004304:	f04f 0840 	mov.w	r8, #64	; 0x40
 8004308:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800430c:	230e      	movs	r3, #14
 800430e:	4f68      	ldr	r7, [pc, #416]	; (80044b0 <initEeprom+0x380>)
 8004310:	4621      	mov	r1, r4
 8004312:	e9cd 3800 	strd	r3, r8, [sp]
 8004316:	4628      	mov	r0, r5
 8004318:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800431c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004320:	4b64      	ldr	r3, [pc, #400]	; (80044b4 <initEeprom+0x384>)
 8004322:	4a65      	ldr	r2, [pc, #404]	; (80044b8 <initEeprom+0x388>)
 8004324:	f7fd fc1a 	bl	8001b5c <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kITeto, 	"addrTETO_KI", 			addrTETO_KI,		DATADOUBLE,	0,		STD_KI		,1000	,&PrimitiveStates.Teto.ki);
 8004328:	a23d      	add	r2, pc, #244	; (adr r2, 8004420 <initEeprom+0x2f0>)
 800432a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800432e:	f109 037e 	add.w	r3, r9, #126	; 0x7e
 8004332:	9308      	str	r3, [sp, #32]
 8004334:	2316      	movs	r3, #22
 8004336:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	4621      	mov	r1, r4
 800433e:	4628      	mov	r0, r5
 8004340:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004344:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004348:	4b5c      	ldr	r3, [pc, #368]	; (80044bc <initEeprom+0x38c>)
 800434a:	4a5d      	ldr	r2, [pc, #372]	; (80044c0 <initEeprom+0x390>)
 800434c:	f8cd 8004 	str.w	r8, [sp, #4]
 8004350:	f7fd fc04 	bl	8001b5c <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kDTeto, 	"addrTETO_KD", 			addrTETO_KD,		DATADOUBLE,	0,		STD_KD		,1000	,&PrimitiveStates.Teto.kd);
 8004354:	a134      	add	r1, pc, #208	; (adr r1, 8004428 <initEeprom+0x2f8>)
 8004356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800435a:	f109 0386 	add.w	r3, r9, #134	; 0x86
 800435e:	9308      	str	r3, [sp, #32]
 8004360:	2321      	movs	r3, #33	; 0x21
 8004362:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	4621      	mov	r1, r4
 800436a:	4628      	mov	r0, r5
 800436c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004370:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004374:	4b53      	ldr	r3, [pc, #332]	; (80044c4 <initEeprom+0x394>)
 8004376:	4a54      	ldr	r2, [pc, #336]	; (80044c8 <initEeprom+0x398>)
 8004378:	f8cd 8004 	str.w	r8, [sp, #4]
 800437c:	f7fd fbee 	bl	8001b5c <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kPLastro,	"addrLASTRO_KP", 		addrLASTRO_KP,		DATADOUBLE,	0,		STD_KP		,1000	,&PrimitiveStates.Lastro.kp);
 8004380:	2200      	movs	r2, #0
 8004382:	f109 03be 	add.w	r3, r9, #190	; 0xbe
 8004386:	9308      	str	r3, [sp, #32]
 8004388:	4b48      	ldr	r3, [pc, #288]	; (80044ac <initEeprom+0x37c>)
 800438a:	4621      	mov	r1, r4
 800438c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004390:	232d      	movs	r3, #45	; 0x2d
 8004392:	4628      	mov	r0, r5
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800439a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800439e:	4b4b      	ldr	r3, [pc, #300]	; (80044cc <initEeprom+0x39c>)
 80043a0:	4a4b      	ldr	r2, [pc, #300]	; (80044d0 <initEeprom+0x3a0>)
 80043a2:	f8cd 8004 	str.w	r8, [sp, #4]
 80043a6:	f7fd fbd9 	bl	8001b5c <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kILastro,	"addrLASTRO_KI", 		addrLASTRO_KI,		DATADOUBLE,	0,		STD_KI		,1000	,&PrimitiveStates.Lastro.ki);
 80043aa:	a21d      	add	r2, pc, #116	; (adr r2, 8004420 <initEeprom+0x2f0>)
 80043ac:	e9d2 1200 	ldrd	r1, r2, [r2]
 80043b0:	f109 03c6 	add.w	r3, r9, #198	; 0xc6
 80043b4:	9308      	str	r3, [sp, #32]
 80043b6:	2335      	movs	r3, #53	; 0x35
 80043b8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	4621      	mov	r1, r4
 80043c0:	4628      	mov	r0, r5
 80043c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80043c6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80043ca:	4b42      	ldr	r3, [pc, #264]	; (80044d4 <initEeprom+0x3a4>)
 80043cc:	4a42      	ldr	r2, [pc, #264]	; (80044d8 <initEeprom+0x3a8>)
 80043ce:	f8cd 8004 	str.w	r8, [sp, #4]
 80043d2:	f7fd fbc3 	bl	8001b5c <EepromAddVarFloating>
	EepromAddVarFloating(&eeprom, 0, &kDLastro,	"addrLASTRO_KD", 		addrLASTRO_KD,		DATADOUBLE,	0,		STD_KD		,1000	,&PrimitiveStates.Lastro.kd);
 80043d6:	a114      	add	r1, pc, #80	; (adr r1, 8004428 <initEeprom+0x2f8>)
 80043d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043dc:	f109 03ce 	add.w	r3, r9, #206	; 0xce
 80043e0:	9308      	str	r3, [sp, #32]
 80043e2:	2341      	movs	r3, #65	; 0x41
 80043e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	4621      	mov	r1, r4
 80043ec:	4628      	mov	r0, r5
 80043ee:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80043f2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80043f6:	4b39      	ldr	r3, [pc, #228]	; (80044dc <initEeprom+0x3ac>)
 80043f8:	4a39      	ldr	r2, [pc, #228]	; (80044e0 <initEeprom+0x3b0>)
 80043fa:	f8cd 8004 	str.w	r8, [sp, #4]
 80043fe:	f7fd fbad 	bl	8001b5c <EepromAddVarFloating>
	//todo altera funcao setavar e retirar possibilidade de alterar o valor por ela
	//todo criar uma funcao que restaure tudo

	//	RestauraSoft(&eeprom);

	__NOP();
 8004402:	bf00      	nop

	//faz o download dos objetos
	EepromDownloadValores(&eeprom);
 8004404:	4628      	mov	r0, r5
 8004406:	f7fd fd59 	bl	8001ebc <EepromDownloadValores>

	__NOP();
 800440a:	bf00      	nop

	//	RestauraSoft(&eeprom);

	__NOP();
 800440c:	bf00      	nop

	osThreadResume(TaskTemperaturaHandle);
 800440e:	4b35      	ldr	r3, [pc, #212]	; (80044e4 <initEeprom+0x3b4>)
 8004410:	6818      	ldr	r0, [r3, #0]
}
 8004412:	b00b      	add	sp, #44	; 0x2c
 8004414:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	osThreadResume(TaskTemperaturaHandle);
 8004418:	f003 bd62 	b.w	8007ee0 <osThreadResume>
 800441c:	f3af 8000 	nop.w
 8004420:	47ae147b 	.word	0x47ae147b
 8004424:	3f847ae1 	.word	0x3f847ae1
 8004428:	33333333 	.word	0x33333333
 800442c:	3fd33333 	.word	0x3fd33333
 8004430:	20002564 	.word	0x20002564
 8004434:	2000081c 	.word	0x2000081c
 8004438:	2000228c 	.word	0x2000228c
 800443c:	20000942 	.word	0x20000942
 8004440:	2000080c 	.word	0x2000080c
 8004444:	0800b7d1 	.word	0x0800b7d1
 8004448:	200029c8 	.word	0x200029c8
 800444c:	0800b7df 	.word	0x0800b7df
 8004450:	200026e4 	.word	0x200026e4
 8004454:	0800b7ed 	.word	0x0800b7ed
 8004458:	20002710 	.word	0x20002710
 800445c:	0800b7fd 	.word	0x0800b7fd
 8004460:	20002768 	.word	0x20002768
 8004464:	0800b80a 	.word	0x0800b80a
 8004468:	20002794 	.word	0x20002794
 800446c:	0800b817 	.word	0x0800b817
 8004470:	2000273c 	.word	0x2000273c
 8004474:	0800b824 	.word	0x0800b824
 8004478:	200029f8 	.word	0x200029f8
 800447c:	0800b834 	.word	0x0800b834
 8004480:	20002534 	.word	0x20002534
 8004484:	0800b846 	.word	0x0800b846
 8004488:	20002508 	.word	0x20002508
 800448c:	0800b85a 	.word	0x0800b85a
 8004490:	200026b8 	.word	0x200026b8
 8004494:	0800b868 	.word	0x0800b868
 8004498:	2000299c 	.word	0x2000299c
 800449c:	0800b877 	.word	0x0800b877
 80044a0:	2000268c 	.word	0x2000268c
 80044a4:	0800b887 	.word	0x0800b887
 80044a8:	20002970 	.word	0x20002970
 80044ac:	403e0000 	.word	0x403e0000
 80044b0:	408f4000 	.word	0x408f4000
 80044b4:	0800b898 	.word	0x0800b898
 80044b8:	20002928 	.word	0x20002928
 80044bc:	0800b8a4 	.word	0x0800b8a4
 80044c0:	20002898 	.word	0x20002898
 80044c4:	0800b8b0 	.word	0x0800b8b0
 80044c8:	20002808 	.word	0x20002808
 80044cc:	0800b8bc 	.word	0x0800b8bc
 80044d0:	200028e0 	.word	0x200028e0
 80044d4:	0800b8ca 	.word	0x0800b8ca
 80044d8:	20002850 	.word	0x20002850
 80044dc:	0800b8d8 	.word	0x0800b8d8
 80044e0:	200027c0 	.word	0x200027c0
 80044e4:	20001d94 	.word	0x20001d94

080044e8 <processaEeprom>:

void processaEeprom(void){
 80044e8:	b510      	push	{r4, lr}
	osEvent  evt;

	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 80044ea:	4b6e      	ldr	r3, [pc, #440]	; (80046a4 <processaEeprom+0x1bc>)
void processaEeprom(void){
 80044ec:	b088      	sub	sp, #32
	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 80044ee:	6819      	ldr	r1, [r3, #0]
 80044f0:	f04f 32ff 	mov.w	r2, #4294967295
 80044f4:	a805      	add	r0, sp, #20
 80044f6:	f003 fcb4 	bl	8007e62 <osMessageGet>
	if (evt.status == osEventMessage) {
 80044fa:	9b05      	ldr	r3, [sp, #20]
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	f040 80cf 	bne.w	80046a0 <processaEeprom+0x1b8>

		switch ((unsigned int)evt.value.p) {
 8004502:	9b06      	ldr	r3, [sp, #24]
 8004504:	2b0a      	cmp	r3, #10
 8004506:	f200 80cb 	bhi.w	80046a0 <processaEeprom+0x1b8>
 800450a:	e8df f003 	tbb	[pc, r3]
 800450e:	2612      	.short	0x2612
 8004510:	5d364b5b 	.word	0x5d364b5b
 8004514:	6f680665 	.word	0x6f680665
 8004518:	76          	.byte	0x76
 8004519:	00          	.byte	0x00

		case CEepromNewCile:
			Calendario.TotalCiclos+=1;
 800451a:	4a63      	ldr	r2, [pc, #396]	; (80046a8 <processaEeprom+0x1c0>)
			EepromSetVar(&eeprom, &totalCiclos, 	0);
 800451c:	4963      	ldr	r1, [pc, #396]	; (80046ac <processaEeprom+0x1c4>)
			Calendario.TotalCiclos+=1;
 800451e:	8913      	ldrh	r3, [r2, #8]
 8004520:	3301      	adds	r3, #1
 8004522:	8113      	strh	r3, [r2, #8]
			EepromSetVar(&eeprom, &totalCiclos, 	0);
 8004524:	2200      	movs	r2, #0
			Calendario.ContMaxTeto+=1;
			EepromSetVar(&eeprom, &ContTetoMax, 	0);
			break;
		case CEepromTempMaxLastroAgain:
			Calendario.ContMaxLastro+=1;
			EepromSetVar(&eeprom, &ContLastroMax, 	0);
 8004526:	4862      	ldr	r0, [pc, #392]	; (80046b0 <processaEeprom+0x1c8>)
			break;
		default:
			break;
		}
	}
}
 8004528:	b008      	add	sp, #32
 800452a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			EepromSetVar(&eeprom, &ContLastroMax, 	0);
 800452e:	f7fd bb6f 	b.w	8001c10 <EepromSetVar>
			if(Calendario.Horimetro_parcial_min<59){
 8004532:	4b5d      	ldr	r3, [pc, #372]	; (80046a8 <processaEeprom+0x1c0>)
			EepromSetVar(&eeprom, &horimetroHoras, 		0);
 8004534:	495f      	ldr	r1, [pc, #380]	; (80046b4 <processaEeprom+0x1cc>)
			if(Calendario.Horimetro_parcial_min<59){
 8004536:	799a      	ldrb	r2, [r3, #6]
			EepromSetVar(&eeprom, &horimetroHoras, 		0);
 8004538:	485d      	ldr	r0, [pc, #372]	; (80046b0 <processaEeprom+0x1c8>)
			if(Calendario.Horimetro_parcial_min<59){
 800453a:	2a3a      	cmp	r2, #58	; 0x3a
				Calendario.Horimetro_parcial_min=0;
 800453c:	bf83      	ittte	hi
 800453e:	2200      	movhi	r2, #0
 8004540:	719a      	strbhi	r2, [r3, #6]
				Calendario.Horimetro_horas++;
 8004542:	889a      	ldrhhi	r2, [r3, #4]
				Calendario.Horimetro_parcial_min++;
 8004544:	3201      	addls	r2, #1
				Calendario.Horimetro_horas++;
 8004546:	bf8a      	itet	hi
 8004548:	3201      	addhi	r2, #1
				Calendario.Horimetro_parcial_min++;
 800454a:	719a      	strbls	r2, [r3, #6]
				Calendario.Horimetro_horas++;
 800454c:	809a      	strhhi	r2, [r3, #4]
			EepromSetVar(&eeprom, &horimetroHoras, 		0);
 800454e:	2200      	movs	r2, #0
 8004550:	f7fd fb5e 	bl	8001c10 <EepromSetVar>
			EepromSetVar(&eeprom, &horimetroMinutos, 	0);
 8004554:	2200      	movs	r2, #0
 8004556:	4958      	ldr	r1, [pc, #352]	; (80046b8 <processaEeprom+0x1d0>)
 8004558:	e7e5      	b.n	8004526 <processaEeprom+0x3e>
			EepromSetVar(&eeprom, &instalacaoDia, 	datetoUpdate.Date);
 800455a:	4c58      	ldr	r4, [pc, #352]	; (80046bc <processaEeprom+0x1d4>)
 800455c:	4958      	ldr	r1, [pc, #352]	; (80046c0 <processaEeprom+0x1d8>)
 800455e:	78a2      	ldrb	r2, [r4, #2]
 8004560:	4853      	ldr	r0, [pc, #332]	; (80046b0 <processaEeprom+0x1c8>)
 8004562:	f7fd fb55 	bl	8001c10 <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoMes, 	datetoUpdate.Month);
 8004566:	7862      	ldrb	r2, [r4, #1]
 8004568:	4956      	ldr	r1, [pc, #344]	; (80046c4 <processaEeprom+0x1dc>)
 800456a:	4851      	ldr	r0, [pc, #324]	; (80046b0 <processaEeprom+0x1c8>)
 800456c:	f7fd fb50 	bl	8001c10 <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoAno, 	datetoUpdate.Year);
 8004570:	78e2      	ldrb	r2, [r4, #3]
 8004572:	4955      	ldr	r1, [pc, #340]	; (80046c8 <processaEeprom+0x1e0>)
 8004574:	484e      	ldr	r0, [pc, #312]	; (80046b0 <processaEeprom+0x1c8>)
 8004576:	f7fd fb4b 	bl	8001c10 <EepromSetVar>
			if (HAL_RTC_SetTime(&hrtc, &timeToUpdate, RTC_FORMAT_BIN) != HAL_OK){
 800457a:	2200      	movs	r2, #0
 800457c:	4953      	ldr	r1, [pc, #332]	; (80046cc <processaEeprom+0x1e4>)
 800457e:	4854      	ldr	r0, [pc, #336]	; (80046d0 <processaEeprom+0x1e8>)
 8004580:	f002 f9f3 	bl	800696a <HAL_RTC_SetTime>
 8004584:	b108      	cbz	r0, 800458a <processaEeprom+0xa2>
				Error_Handler();
 8004586:	f7fe fb71 	bl	8002c6c <Error_Handler>
			if (HAL_RTC_SetDate(&hrtc, &datetoUpdate, RTC_FORMAT_BIN) != HAL_OK){
 800458a:	2200      	movs	r2, #0
 800458c:	494b      	ldr	r1, [pc, #300]	; (80046bc <processaEeprom+0x1d4>)
 800458e:	4850      	ldr	r0, [pc, #320]	; (80046d0 <processaEeprom+0x1e8>)
 8004590:	f002 fa3c 	bl	8006a0c <HAL_RTC_SetDate>
 8004594:	2800      	cmp	r0, #0
 8004596:	f000 8083 	beq.w	80046a0 <processaEeprom+0x1b8>
}
 800459a:	b008      	add	sp, #32
 800459c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				Error_Handler();
 80045a0:	f7fe bb64 	b.w	8002c6c <Error_Handler>
			RestauraEeprom(&eeprom,softReset);	// restaura
 80045a4:	2100      	movs	r1, #0
			RestauraEeprom(&eeprom,hardReset); 	// restaura
 80045a6:	4842      	ldr	r0, [pc, #264]	; (80046b0 <processaEeprom+0x1c8>)
 80045a8:	f7fd fbcc 	bl	8001d44 <RestauraEeprom>
			EepromDownloadValores(&eeprom);		// le
 80045ac:	4840      	ldr	r0, [pc, #256]	; (80046b0 <processaEeprom+0x1c8>)
 80045ae:	f7fd fc85 	bl	8001ebc <EepromDownloadValores>
			osMessagePut(FilaTXBluetoothHandle, TX_RESETADO_OK, 0);
 80045b2:	2200      	movs	r2, #0
 80045b4:	2130      	movs	r1, #48	; 0x30
 80045b6:	4b47      	ldr	r3, [pc, #284]	; (80046d4 <processaEeprom+0x1ec>)
 80045b8:	6818      	ldr	r0, [r3, #0]
}
 80045ba:	b008      	add	sp, #32
 80045bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			osMessagePut(FilaTXBluetoothHandle, TX_RESETADO_OK, 0);
 80045c0:	f003 bc27 	b.w	8007e12 <osMessagePut>
			RestauraEeprom(&eeprom,hardReset); 	// restaura
 80045c4:	2101      	movs	r1, #1
 80045c6:	e7ee      	b.n	80045a6 <processaEeprom+0xbe>
			EepromSetVar(&eeprom, &limiteTeto, 	0);
 80045c8:	2200      	movs	r2, #0
 80045ca:	4943      	ldr	r1, [pc, #268]	; (80046d8 <processaEeprom+0x1f0>)
 80045cc:	4838      	ldr	r0, [pc, #224]	; (80046b0 <processaEeprom+0x1c8>)
 80045ce:	f7fd fb1f 	bl	8001c10 <EepromSetVar>
			EepromSetVar(&eeprom, &limiteLastro, 	0);
 80045d2:	2200      	movs	r2, #0
 80045d4:	4941      	ldr	r1, [pc, #260]	; (80046dc <processaEeprom+0x1f4>)
 80045d6:	e7a6      	b.n	8004526 <processaEeprom+0x3e>
			EepromSetVar(&eeprom, &tempoDelayLuz, 	0);
 80045d8:	2200      	movs	r2, #0
 80045da:	4941      	ldr	r1, [pc, #260]	; (80046e0 <processaEeprom+0x1f8>)
 80045dc:	e7a3      	b.n	8004526 <processaEeprom+0x3e>
			Calendario.ContMaxTeto+=1;
 80045de:	4a32      	ldr	r2, [pc, #200]	; (80046a8 <processaEeprom+0x1c0>)
			EepromSetVar(&eeprom, &ContTetoMax, 	0);
 80045e0:	4940      	ldr	r1, [pc, #256]	; (80046e4 <processaEeprom+0x1fc>)
			Calendario.ContMaxTeto+=1;
 80045e2:	8953      	ldrh	r3, [r2, #10]
 80045e4:	3301      	adds	r3, #1
 80045e6:	8153      	strh	r3, [r2, #10]
			EepromSetVar(&eeprom, &ContTetoMax, 	0);
 80045e8:	2200      	movs	r2, #0
 80045ea:	e79c      	b.n	8004526 <processaEeprom+0x3e>
			Calendario.ContMaxLastro+=1;
 80045ec:	4a2e      	ldr	r2, [pc, #184]	; (80046a8 <processaEeprom+0x1c0>)
			EepromSetVar(&eeprom, &ContLastroMax, 	0);
 80045ee:	493e      	ldr	r1, [pc, #248]	; (80046e8 <processaEeprom+0x200>)
			Calendario.ContMaxLastro+=1;
 80045f0:	8993      	ldrh	r3, [r2, #12]
 80045f2:	3301      	adds	r3, #1
 80045f4:	8193      	strh	r3, [r2, #12]
			EepromSetVar(&eeprom, &ContLastroMax, 	0);
 80045f6:	2200      	movs	r2, #0
 80045f8:	e795      	b.n	8004526 <processaEeprom+0x3e>
			EepromSetVar(&eeprom, &hitereseStateTeto, 	0);
 80045fa:	2200      	movs	r2, #0
 80045fc:	493b      	ldr	r1, [pc, #236]	; (80046ec <processaEeprom+0x204>)
 80045fe:	482c      	ldr	r0, [pc, #176]	; (80046b0 <processaEeprom+0x1c8>)
 8004600:	f7fd fb06 	bl	8001c10 <EepromSetVar>
			EepromSetVarFloating(&eeprom, &kPTeto, 	0);
 8004604:	2200      	movs	r2, #0
 8004606:	2300      	movs	r3, #0
 8004608:	4939      	ldr	r1, [pc, #228]	; (80046f0 <processaEeprom+0x208>)
 800460a:	4829      	ldr	r0, [pc, #164]	; (80046b0 <processaEeprom+0x1c8>)
 800460c:	f7fd fb4e 	bl	8001cac <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kITeto, 	0);
 8004610:	2200      	movs	r2, #0
 8004612:	2300      	movs	r3, #0
 8004614:	4937      	ldr	r1, [pc, #220]	; (80046f4 <processaEeprom+0x20c>)
 8004616:	4826      	ldr	r0, [pc, #152]	; (80046b0 <processaEeprom+0x1c8>)
			PID_SetTunings(&TPIDTeto, PrimitiveStates.Teto.kp, PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd);
 8004618:	4c37      	ldr	r4, [pc, #220]	; (80046f8 <processaEeprom+0x210>)
			EepromSetVarFloating(&eeprom, &kITeto, 	0);
 800461a:	f7fd fb47 	bl	8001cac <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kDTeto, 	0);
 800461e:	2300      	movs	r3, #0
 8004620:	2200      	movs	r2, #0
 8004622:	4936      	ldr	r1, [pc, #216]	; (80046fc <processaEeprom+0x214>)
 8004624:	4822      	ldr	r0, [pc, #136]	; (80046b0 <processaEeprom+0x1c8>)
 8004626:	f7fd fb41 	bl	8001cac <EepromSetVarFloating>
			EepromSetVar(&eeprom, &limiteTeto, 	0);
 800462a:	492b      	ldr	r1, [pc, #172]	; (80046d8 <processaEeprom+0x1f0>)
 800462c:	2200      	movs	r2, #0
 800462e:	4820      	ldr	r0, [pc, #128]	; (80046b0 <processaEeprom+0x1c8>)
 8004630:	f7fd faee 	bl	8001c10 <EepromSetVar>
			PID_SetTunings(&TPIDTeto, PrimitiveStates.Teto.kp, PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd);
 8004634:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
 8004638:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800463c:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
 8004640:	e9cd 2300 	strd	r2, r3, [sp]
 8004644:	482e      	ldr	r0, [pc, #184]	; (8004700 <processaEeprom+0x218>)
 8004646:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
 800464a:	f7fe fc9b 	bl	8002f84 <PID_SetTunings>
			EepromSetVar(&eeprom, &hitereseStateLastro, 0);
 800464e:	2200      	movs	r2, #0
 8004650:	492c      	ldr	r1, [pc, #176]	; (8004704 <processaEeprom+0x21c>)
 8004652:	4817      	ldr	r0, [pc, #92]	; (80046b0 <processaEeprom+0x1c8>)
 8004654:	f7fd fadc 	bl	8001c10 <EepromSetVar>
			EepromSetVarFloating(&eeprom, &kPLastro, 	0);
 8004658:	2200      	movs	r2, #0
 800465a:	2300      	movs	r3, #0
 800465c:	492a      	ldr	r1, [pc, #168]	; (8004708 <processaEeprom+0x220>)
 800465e:	4814      	ldr	r0, [pc, #80]	; (80046b0 <processaEeprom+0x1c8>)
 8004660:	f7fd fb24 	bl	8001cac <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kILastro, 	0);
 8004664:	2200      	movs	r2, #0
 8004666:	2300      	movs	r3, #0
 8004668:	4928      	ldr	r1, [pc, #160]	; (800470c <processaEeprom+0x224>)
 800466a:	4811      	ldr	r0, [pc, #68]	; (80046b0 <processaEeprom+0x1c8>)
 800466c:	f7fd fb1e 	bl	8001cac <EepromSetVarFloating>
			EepromSetVarFloating(&eeprom, &kDLastro, 	0);
 8004670:	2300      	movs	r3, #0
 8004672:	2200      	movs	r2, #0
 8004674:	4926      	ldr	r1, [pc, #152]	; (8004710 <processaEeprom+0x228>)
 8004676:	480e      	ldr	r0, [pc, #56]	; (80046b0 <processaEeprom+0x1c8>)
 8004678:	f7fd fb18 	bl	8001cac <EepromSetVarFloating>
			EepromSetVar(&eeprom, &limiteLastro, 	0);
 800467c:	2200      	movs	r2, #0
 800467e:	4917      	ldr	r1, [pc, #92]	; (80046dc <processaEeprom+0x1f4>)
 8004680:	480b      	ldr	r0, [pc, #44]	; (80046b0 <processaEeprom+0x1c8>)
 8004682:	f7fd fac5 	bl	8001c10 <EepromSetVar>
			PID_SetTunings(&TPIDLastro, PrimitiveStates.Lastro.kp, PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd);
 8004686:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
 800468a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800468e:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	; 0x100
 8004692:	e9cd 2300 	strd	r2, r3, [sp]
 8004696:	481f      	ldr	r0, [pc, #124]	; (8004714 <processaEeprom+0x22c>)
 8004698:	e9d4 233e 	ldrd	r2, r3, [r4, #248]	; 0xf8
 800469c:	f7fe fc72 	bl	8002f84 <PID_SetTunings>
}
 80046a0:	b008      	add	sp, #32
 80046a2:	bd10      	pop	{r4, pc}
 80046a4:	2000081c 	.word	0x2000081c
 80046a8:	20000808 	.word	0x20000808
 80046ac:	200029f8 	.word	0x200029f8
 80046b0:	20002564 	.word	0x20002564
 80046b4:	200026e4 	.word	0x200026e4
 80046b8:	20002710 	.word	0x20002710
 80046bc:	20002560 	.word	0x20002560
 80046c0:	20002768 	.word	0x20002768
 80046c4:	20002794 	.word	0x20002794
 80046c8:	2000273c 	.word	0x2000273c
 80046cc:	200029f4 	.word	0x200029f4
 80046d0:	200022e0 	.word	0x200022e0
 80046d4:	20000900 	.word	0x20000900
 80046d8:	2000299c 	.word	0x2000299c
 80046dc:	20002970 	.word	0x20002970
 80046e0:	200029c8 	.word	0x200029c8
 80046e4:	20002534 	.word	0x20002534
 80046e8:	20002508 	.word	0x20002508
 80046ec:	200026b8 	.word	0x200026b8
 80046f0:	20002928 	.word	0x20002928
 80046f4:	20002898 	.word	0x20002898
 80046f8:	20000908 	.word	0x20000908
 80046fc:	20002808 	.word	0x20002808
 8004700:	20002a98 	.word	0x20002a98
 8004704:	2000268c 	.word	0x2000268c
 8004708:	200028e0 	.word	0x200028e0
 800470c:	20002850 	.word	0x20002850
 8004710:	200027c0 	.word	0x200027c0
 8004714:	20002a28 	.word	0x20002a28

08004718 <StartEeprom>:
{
 8004718:	b508      	push	{r3, lr}
	initEeprom();
 800471a:	f7ff fd09 	bl	8004130 <initEeprom>
		processaEeprom();
 800471e:	f7ff fee3 	bl	80044e8 <processaEeprom>
		osThreadYield();
 8004722:	f003 fa9f 	bl	8007c64 <osThreadYield>
		osDelay(500);
 8004726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800472a:	f003 faa7 	bl	8007c7c <osDelay>
	for(;;)
 800472e:	e7f6      	b.n	800471e <StartEeprom+0x6>

08004730 <atualizaDataEeprom>:

void atualizaDataEeprom(RTC_DateTypeDef data, RTC_TimeTypeDef hora){
 8004730:	b082      	sub	sp, #8
 8004732:	e9cd 1000 	strd	r1, r0, [sp]
	datetoUpdate = data;
 8004736:	4b11      	ldr	r3, [pc, #68]	; (800477c <atualizaDataEeprom+0x4c>)
	timeToUpdate = hora;
 8004738:	f8bd 1000 	ldrh.w	r1, [sp]
	datetoUpdate = data;
 800473c:	6018      	str	r0, [r3, #0]
	timeToUpdate = hora;
 800473e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8004742:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <atualizaDataEeprom+0x50>)
 8004744:	8019      	strh	r1, [r3, #0]
 8004746:	709a      	strb	r2, [r3, #2]

	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
			(instalacaoAno.valor == 0 || instalacaoAno.valor > 200)){
		//primeiro recebimento de data
		osMessagePut(FilaEepromHandle, CEepromDataInstalacao, 0);
 8004748:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <atualizaDataEeprom+0x54>)
 800474a:	6818      	ldr	r0, [r3, #0]
	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 800474c:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <atualizaDataEeprom+0x58>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	3b01      	subs	r3, #1
 8004752:	2b1e      	cmp	r3, #30
 8004754:	d90e      	bls.n	8004774 <atualizaDataEeprom+0x44>
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 8004756:	4b0d      	ldr	r3, [pc, #52]	; (800478c <atualizaDataEeprom+0x5c>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	3b01      	subs	r3, #1
	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 800475c:	2b0b      	cmp	r3, #11
 800475e:	d909      	bls.n	8004774 <atualizaDataEeprom+0x44>
			(instalacaoAno.valor == 0 || instalacaoAno.valor > 200)){
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <atualizaDataEeprom+0x60>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	3b01      	subs	r3, #1
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 8004766:	2bc7      	cmp	r3, #199	; 0xc7
 8004768:	d904      	bls.n	8004774 <atualizaDataEeprom+0x44>
		osMessagePut(FilaEepromHandle, CEepromDataInstalacao, 0);
 800476a:	2200      	movs	r2, #0
 800476c:	2101      	movs	r1, #1
	}else{
		//gravacao padrao de data e hora
		osMessagePut(FilaEepromHandle, CEepromAtualizaHora, 0);
	}
}
 800476e:	b002      	add	sp, #8
		osMessagePut(FilaEepromHandle, CEepromAtualizaHora, 0);
 8004770:	f003 bb4f 	b.w	8007e12 <osMessagePut>
 8004774:	2200      	movs	r2, #0
 8004776:	2104      	movs	r1, #4
 8004778:	e7f9      	b.n	800476e <atualizaDataEeprom+0x3e>
 800477a:	bf00      	nop
 800477c:	20002560 	.word	0x20002560
 8004780:	200029f4 	.word	0x200029f4
 8004784:	2000081c 	.word	0x2000081c
 8004788:	20002768 	.word	0x20002768
 800478c:	20002794 	.word	0x20002794
 8004790:	2000273c 	.word	0x2000273c

08004794 <initPID>:

	}
}


void initPID(void){
 8004794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	PID(&TPIDTeto, 		&PrimitiveStates.Teto.realtime, 	&PrimitiveStates.Teto.PWMOut, 	&PrimitiveStates.Teto.setPoint, 	PrimitiveStates.Teto.kp,PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004798:	f04f 0801 	mov.w	r8, #1
 800479c:	f04f 0900 	mov.w	r9, #0
void initPID(void){
 80047a0:	b089      	sub	sp, #36	; 0x24
	PID(&TPIDTeto, 		&PrimitiveStates.Teto.realtime, 	&PrimitiveStates.Teto.PWMOut, 	&PrimitiveStates.Teto.setPoint, 	PrimitiveStates.Teto.kp,PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80047a2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80047a6:	4c2b      	ldr	r4, [pc, #172]	; (8004854 <initPID+0xc0>)
 80047a8:	4f2b      	ldr	r7, [pc, #172]	; (8004858 <initPID+0xc4>)
 80047aa:	e954 2306 	ldrd	r2, r3, [r4, #-24]
 80047ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047b2:	e954 2308 	ldrd	r2, r3, [r4, #-32]
 80047b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047ba:	4638      	mov	r0, r7
 80047bc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80047c0:	f1a4 0108 	sub.w	r1, r4, #8
 80047c4:	e9cd 2300 	strd	r2, r3, [sp]
 80047c8:	4623      	mov	r3, r4
 80047ca:	f1a4 0210 	sub.w	r2, r4, #16
 80047ce:	f7fe fc0b 	bl	8002fe8 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.Lastro.realtime, 	&PrimitiveStates.Lastro.PWMOut,	&PrimitiveStates.Lastro.setPoint, 	PrimitiveStates.Lastro.kp,PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80047d2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80047d6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80047da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047de:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80047e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047e6:	4e1d      	ldr	r6, [pc, #116]	; (800485c <initPID+0xc8>)
 80047e8:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80047ec:	4630      	mov	r0, r6
 80047ee:	e9cd 2300 	strd	r2, r3, [sp]
 80047f2:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80047f6:	f104 0348 	add.w	r3, r4, #72	; 0x48
 80047fa:	f104 0238 	add.w	r2, r4, #56	; 0x38
 80047fe:	f7fe fbf3 	bl	8002fe8 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 8004802:	4641      	mov	r1, r8
 8004804:	4638      	mov	r0, r7
 8004806:	f7fe faf6 	bl	8002df6 <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 800480a:	2400      	movs	r4, #0
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 800480c:	4641      	mov	r1, r8
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 800480e:	2500      	movs	r5, #0
 8004810:	f04f 0800 	mov.w	r8, #0
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 8004814:	4630      	mov	r0, r6
 8004816:	f7fe faee 	bl	8002df6 <PID_SetMode>
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 800481a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004860 <initPID+0xcc>
	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 800481e:	4638      	mov	r0, r7
 8004820:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004824:	f7fe fc14 	bl	8003050 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 8004828:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800482c:	4630      	mov	r0, r6
 800482e:	f7fe fc0f 	bl	8003050 <PID_SetSampleTime>
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8004832:	4622      	mov	r2, r4
 8004834:	462b      	mov	r3, r5
 8004836:	4638      	mov	r0, r7
 8004838:	e9cd 8900 	strd	r8, r9, [sp]
 800483c:	f7fe fae8 	bl	8002e10 <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 8004840:	4622      	mov	r2, r4
 8004842:	462b      	mov	r3, r5
 8004844:	4630      	mov	r0, r6
 8004846:	e9cd 8900 	strd	r8, r9, [sp]
 800484a:	f7fe fae1 	bl	8002e10 <PID_SetOutputLimits>
}
 800484e:	b009      	add	sp, #36	; 0x24
 8004850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004854:	200009e0 	.word	0x200009e0
 8004858:	20002a98 	.word	0x20002a98
 800485c:	20002a28 	.word	0x20002a28
 8004860:	40590000 	.word	0x40590000

08004864 <computaPID>:
void computaPID(void){
 8004864:	b510      	push	{r4, lr}

	PID_Compute(&TPIDTeto);
 8004866:	480a      	ldr	r0, [pc, #40]	; (8004890 <computaPID+0x2c>)
	PID_Compute(&TPIDLastro);

	//transformar para a classe realizar isso //
	IndviduoPID_SetPWMValue(&PrimitiveStates.Teto, PrimitiveStates.Teto.PWMOut);
 8004868:	4c0a      	ldr	r4, [pc, #40]	; (8004894 <computaPID+0x30>)
	PID_Compute(&TPIDTeto);
 800486a:	f7fe fa26 	bl	8002cba <PID_Compute>
	PID_Compute(&TPIDLastro);
 800486e:	480a      	ldr	r0, [pc, #40]	; (8004898 <computaPID+0x34>)
 8004870:	f7fe fa23 	bl	8002cba <PID_Compute>
	IndviduoPID_SetPWMValue(&PrimitiveStates.Teto, PrimitiveStates.Teto.PWMOut);
 8004874:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
 8004878:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 800487c:	f7fd fce4 	bl	8002248 <IndviduoPID_SetPWMValue>
	IndviduoPID_SetPWMValue(&PrimitiveStates.Lastro, PrimitiveStates.Lastro.PWMOut);
 8004880:	e9d4 2344 	ldrd	r2, r3, [r4, #272]	; 0x110
 8004884:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
}
 8004888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	IndviduoPID_SetPWMValue(&PrimitiveStates.Lastro, PrimitiveStates.Lastro.PWMOut);
 800488c:	f7fd bcdc 	b.w	8002248 <IndviduoPID_SetPWMValue>
 8004890:	20002a98 	.word	0x20002a98
 8004894:	20000908 	.word	0x20000908
 8004898:	20002a28 	.word	0x20002a28

0800489c <StartTemperatura>:
void StartTemperatura(void const * argument){
 800489c:	b507      	push	{r0, r1, r2, lr}
	xLastWakeTime = xTaskGetTickCount();
 800489e:	f004 f9cb 	bl	8008c38 <xTaskGetTickCount>
 80048a2:	9001      	str	r0, [sp, #4]
	initPID();
 80048a4:	f7ff ff76 	bl	8004794 <initPID>
		computaPID();
 80048a8:	f7ff ffdc 	bl	8004864 <computaPID>
		osDelayUntil(&xLastWakeTime,TIME_PID_CALC);
 80048ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80048b0:	a801      	add	r0, sp, #4
 80048b2:	f003 fb2c 	bl	8007f0e <osDelayUntil>
		osThreadYield();
 80048b6:	f003 f9d5 	bl	8007c64 <osThreadYield>
	for(;;)	{
 80048ba:	e7f5      	b.n	80048a8 <StartTemperatura+0xc>

080048bc <WatchDogLimitesTemperatura>:
	SaidasLeds();

	//Contador do horimetro
	Horimetro();
}
void WatchDogLimitesTemperatura(void){
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static bool flagMaxLastro,flagMaxTeto,flagTimer,flagTimerLastro;

	//Atingiu limite no TETO com incremento a cada ciclo
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 80048be:	4c3a      	ldr	r4, [pc, #232]	; (80049a8 <WatchDogLimitesTemperatura+0xec>)
		if(!flagMaxTeto){
 80048c0:	4e3a      	ldr	r6, [pc, #232]	; (80049ac <WatchDogLimitesTemperatura+0xf0>)
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 80048c2:	f8b4 00e0 	ldrh.w	r0, [r4, #224]	; 0xe0
 80048c6:	f7fb fd9d 	bl	8000404 <__aeabi_i2d>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
 80048d2:	f7fc f891 	bl	80009f8 <__aeabi_dcmpgt>
		if(!flagMaxTeto){
 80048d6:	7837      	ldrb	r7, [r6, #0]
 80048d8:	4d35      	ldr	r5, [pc, #212]	; (80049b0 <WatchDogLimitesTemperatura+0xf4>)
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 80048da:	b1a0      	cbz	r0, 8004906 <WatchDogLimitesTemperatura+0x4a>
		if(!flagMaxTeto){
 80048dc:	b93f      	cbnz	r7, 80048ee <WatchDogLimitesTemperatura+0x32>
			flagMaxTeto = 1;
 80048de:	2301      	movs	r3, #1
 80048e0:	7033      	strb	r3, [r6, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
 80048e2:	4b34      	ldr	r3, [pc, #208]	; (80049b4 <WatchDogLimitesTemperatura+0xf8>)
 80048e4:	463a      	mov	r2, r7
 80048e6:	2108      	movs	r1, #8
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	f003 fa92 	bl	8007e12 <osMessagePut>
		}
		if(!flagTimer && PrimitiveStates.stateTimer == TIMER_decrementando){
 80048ee:	782a      	ldrb	r2, [r5, #0]
 80048f0:	b94a      	cbnz	r2, 8004906 <WatchDogLimitesTemperatura+0x4a>
 80048f2:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d105      	bne.n	8004906 <WatchDogLimitesTemperatura+0x4a>
			flagTimer = 1;
 80048fa:	702b      	strb	r3, [r5, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
 80048fc:	4b2d      	ldr	r3, [pc, #180]	; (80049b4 <WatchDogLimitesTemperatura+0xf8>)
 80048fe:	2108      	movs	r1, #8
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	f003 fa86 	bl	8007e12 <osMessagePut>
		}
	}
	//cancela flags
	if(flagMaxTeto && PrimitiveStates.Teto.realtime<PrimitiveStates.Teto.limite-20)
 8004906:	7833      	ldrb	r3, [r6, #0]
 8004908:	b16b      	cbz	r3, 8004926 <WatchDogLimitesTemperatura+0x6a>
 800490a:	f8b4 00e0 	ldrh.w	r0, [r4, #224]	; 0xe0
 800490e:	3814      	subs	r0, #20
 8004910:	f7fb fd78 	bl	8000404 <__aeabi_i2d>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
 800491c:	f7fc f84e 	bl	80009bc <__aeabi_dcmplt>
 8004920:	b108      	cbz	r0, 8004926 <WatchDogLimitesTemperatura+0x6a>
		flagMaxTeto = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	7033      	strb	r3, [r6, #0]
	if(flagTimer && PrimitiveStates.stateTimer == TIMER_idle)
 8004926:	782b      	ldrb	r3, [r5, #0]
 8004928:	b11b      	cbz	r3, 8004932 <WatchDogLimitesTemperatura+0x76>
 800492a:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
 800492e:	b903      	cbnz	r3, 8004932 <WatchDogLimitesTemperatura+0x76>
		flagTimer=0;
 8004930:	702b      	strb	r3, [r5, #0]

	//Atingiu limite no LASTRO com incremento a cada ciclo
	if(PrimitiveStates.Lastro.realtime>PrimitiveStates.Lastro.limite){
 8004932:	f8b4 0128 	ldrh.w	r0, [r4, #296]	; 0x128
 8004936:	f7fb fd65 	bl	8000404 <__aeabi_i2d>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	e9d4 0146 	ldrd	r0, r1, [r4, #280]	; 0x118
 8004942:	f7fc f859 	bl	80009f8 <__aeabi_dcmpgt>
		if(!flagMaxLastro){
 8004946:	4e1c      	ldr	r6, [pc, #112]	; (80049b8 <WatchDogLimitesTemperatura+0xfc>)
 8004948:	4d1c      	ldr	r5, [pc, #112]	; (80049bc <WatchDogLimitesTemperatura+0x100>)
 800494a:	7837      	ldrb	r7, [r6, #0]
	if(PrimitiveStates.Lastro.realtime>PrimitiveStates.Lastro.limite){
 800494c:	b1a0      	cbz	r0, 8004978 <WatchDogLimitesTemperatura+0xbc>
		if(!flagMaxLastro){
 800494e:	b93f      	cbnz	r7, 8004960 <WatchDogLimitesTemperatura+0xa4>
			flagMaxLastro = 1;
 8004950:	2301      	movs	r3, #1
 8004952:	7033      	strb	r3, [r6, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
 8004954:	4b17      	ldr	r3, [pc, #92]	; (80049b4 <WatchDogLimitesTemperatura+0xf8>)
 8004956:	463a      	mov	r2, r7
 8004958:	2109      	movs	r1, #9
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	f003 fa59 	bl	8007e12 <osMessagePut>
		}
		if(!flagTimerLastro && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004960:	782a      	ldrb	r2, [r5, #0]
 8004962:	b94a      	cbnz	r2, 8004978 <WatchDogLimitesTemperatura+0xbc>
 8004964:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
 8004968:	2b01      	cmp	r3, #1
 800496a:	d105      	bne.n	8004978 <WatchDogLimitesTemperatura+0xbc>
			flagTimerLastro = 1;
 800496c:	702b      	strb	r3, [r5, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
 800496e:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <WatchDogLimitesTemperatura+0xf8>)
 8004970:	2109      	movs	r1, #9
 8004972:	6818      	ldr	r0, [r3, #0]
 8004974:	f003 fa4d 	bl	8007e12 <osMessagePut>
		}
	}
	//cancela flags
	if(flagMaxLastro && PrimitiveStates.Lastro.realtime<PrimitiveStates.Lastro.limite-20)
 8004978:	7833      	ldrb	r3, [r6, #0]
 800497a:	b16b      	cbz	r3, 8004998 <WatchDogLimitesTemperatura+0xdc>
 800497c:	f8b4 0128 	ldrh.w	r0, [r4, #296]	; 0x128
 8004980:	3814      	subs	r0, #20
 8004982:	f7fb fd3f 	bl	8000404 <__aeabi_i2d>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	e9d4 0146 	ldrd	r0, r1, [r4, #280]	; 0x118
 800498e:	f7fc f815 	bl	80009bc <__aeabi_dcmplt>
 8004992:	b108      	cbz	r0, 8004998 <WatchDogLimitesTemperatura+0xdc>
		flagMaxLastro = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	7033      	strb	r3, [r6, #0]
	if(flagTimerLastro && PrimitiveStates.stateTimer == TIMER_idle)
 8004998:	782b      	ldrb	r3, [r5, #0]
 800499a:	b11b      	cbz	r3, 80049a4 <WatchDogLimitesTemperatura+0xe8>
 800499c:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
 80049a0:	b903      	cbnz	r3, 80049a4 <WatchDogLimitesTemperatura+0xe8>
		flagTimerLastro=0;
 80049a2:	702b      	strb	r3, [r5, #0]


}
 80049a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000908 	.word	0x20000908
 80049ac:	20002b0b 	.word	0x20002b0b
 80049b0:	20002b0c 	.word	0x20002b0c
 80049b4:	2000081c 	.word	0x2000081c
 80049b8:	20002b0a 	.word	0x20002b0a
 80049bc:	20002b0d 	.word	0x20002b0d

080049c0 <SaidasLeds>:
void SaidasLeds(void){
 80049c0:	b510      	push	{r4, lr}

	//LED VERDE - indica que as 2 saidas estao ok
	if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando ){
 80049c2:	4c14      	ldr	r4, [pc, #80]	; (8004a14 <SaidasLeds+0x54>)
 80049c4:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d017      	beq.n	80049fc <SaidasLeds+0x3c>
 80049cc:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d013      	beq.n	80049fc <SaidasLeds+0x3c>
		onDigital(&PrimitiveStates.LedVerde);
 80049d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80049d8:	f7fd fbad 	bl	8002136 <onDigital>
	}else{
		offDigital(&PrimitiveStates.LedVerde);
	}

	//LED VERMELHO TETO
	if(PrimitiveStates.Teto._PWMstate == buscando){
 80049dc:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
		onDigital(&PrimitiveStates.LedTeto);
 80049e0:	480d      	ldr	r0, [pc, #52]	; (8004a18 <SaidasLeds+0x58>)
	if(PrimitiveStates.Teto._PWMstate == buscando){
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d10e      	bne.n	8004a04 <SaidasLeds+0x44>
		onDigital(&PrimitiveStates.LedTeto);
 80049e6:	f7fd fba6 	bl	8002136 <onDigital>
	}else{
		offDigital(&PrimitiveStates.LedTeto);
	}

	//LED VERMELHO LASTRO
	if(PrimitiveStates.Lastro._PWMstate == buscando){
 80049ea:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
		onDigital(&PrimitiveStates.LedLastro);
 80049ee:	480b      	ldr	r0, [pc, #44]	; (8004a1c <SaidasLeds+0x5c>)
	if(PrimitiveStates.Lastro._PWMstate == buscando){
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d10a      	bne.n	8004a0a <SaidasLeds+0x4a>
	}else{
		offDigital(&PrimitiveStates.LedLastro);
	}
}
 80049f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		onDigital(&PrimitiveStates.LedLastro);
 80049f8:	f7fd bb9d 	b.w	8002136 <onDigital>
		offDigital(&PrimitiveStates.LedVerde);
 80049fc:	4808      	ldr	r0, [pc, #32]	; (8004a20 <SaidasLeds+0x60>)
 80049fe:	f7fd fba4 	bl	800214a <offDigital>
 8004a02:	e7eb      	b.n	80049dc <SaidasLeds+0x1c>
		offDigital(&PrimitiveStates.LedTeto);
 8004a04:	f7fd fba1 	bl	800214a <offDigital>
 8004a08:	e7ef      	b.n	80049ea <SaidasLeds+0x2a>
}
 8004a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		offDigital(&PrimitiveStates.LedLastro);
 8004a0e:	f7fd bb9c 	b.w	800214a <offDigital>
 8004a12:	bf00      	nop
 8004a14:	20000908 	.word	0x20000908
 8004a18:	2000097c 	.word	0x2000097c
 8004a1c:	20000994 	.word	0x20000994
 8004a20:	20000964 	.word	0x20000964

08004a24 <Horimetro>:
void Horimetro(void){
	static uint8_t segundos=0;
	//esperar implementacao digital output
	if(PrimitiveStates.Lastro._PWMstate != idle || PrimitiveStates.Teto._PWMstate != idle){
 8004a24:	4a0b      	ldr	r2, [pc, #44]	; (8004a54 <Horimetro+0x30>)
 8004a26:	490c      	ldr	r1, [pc, #48]	; (8004a58 <Horimetro+0x34>)
 8004a28:	f892 312c 	ldrb.w	r3, [r2, #300]	; 0x12c
 8004a2c:	f892 20e4 	ldrb.w	r2, [r2, #228]	; 0xe4
 8004a30:	4313      	orrs	r3, r2
 8004a32:	d00d      	beq.n	8004a50 <Horimetro+0x2c>
		segundos++;
 8004a34:	780b      	ldrb	r3, [r1, #0]
 8004a36:	3301      	adds	r3, #1
 8004a38:	b2db      	uxtb	r3, r3
		if(segundos == 60){
 8004a3a:	2b3c      	cmp	r3, #60	; 0x3c
 8004a3c:	d001      	beq.n	8004a42 <Horimetro+0x1e>
			segundos = 0;
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
		}

	}else{
		segundos = 1;
 8004a3e:	700b      	strb	r3, [r1, #0]
	}
}
 8004a40:	4770      	bx	lr
			segundos = 0;
 8004a42:	2200      	movs	r2, #0
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <Horimetro+0x38>)
			segundos = 0;
 8004a46:	700a      	strb	r2, [r1, #0]
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	f003 b9e1 	b.w	8007e12 <osMessagePut>
		segundos = 1;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e7f4      	b.n	8004a3e <Horimetro+0x1a>
 8004a54:	20000908 	.word	0x20000908
 8004a58:	20002b0e 	.word	0x20002b0e
 8004a5c:	2000081c 	.word	0x2000081c

08004a60 <sinalizacaoReachTemp>:
void sinalizacaoReachTemp(void){
 8004a60:	b570      	push	{r4, r5, r6, lr}
	static GenericPwmState __StateTeto, __StateLastro;

	//verifica se o estado anterior estava em buscando em qualquer dos dois PID
	if(__StateTeto == buscando || __StateLastro == buscando){
 8004a62:	4e0e      	ldr	r6, [pc, #56]	; (8004a9c <sinalizacaoReachTemp+0x3c>)
 8004a64:	4d0e      	ldr	r5, [pc, #56]	; (8004aa0 <sinalizacaoReachTemp+0x40>)
 8004a66:	7833      	ldrb	r3, [r6, #0]
 8004a68:	4c0e      	ldr	r4, [pc, #56]	; (8004aa4 <sinalizacaoReachTemp+0x44>)
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d002      	beq.n	8004a74 <sinalizacaoReachTemp+0x14>
 8004a6e:	782b      	ldrb	r3, [r5, #0]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d10c      	bne.n	8004a8e <sinalizacaoReachTemp+0x2e>
		if(PrimitiveStates.Teto._PWMstate != buscando && PrimitiveStates.Lastro._PWMstate != buscando ){
 8004a74:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d008      	beq.n	8004a8e <sinalizacaoReachTemp+0x2e>
 8004a7c:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d004      	beq.n	8004a8e <sinalizacaoReachTemp+0x2e>
			//notifica que chegou na temperatura
			osSignalSet(TaskBuzzerHandle, SINAL_TEMP_REACH);
 8004a84:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <sinalizacaoReachTemp+0x48>)
 8004a86:	2101      	movs	r1, #1
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	f003 f940 	bl	8007d0e <osSignalSet>
		}
	}
	__StateTeto 	= PrimitiveStates.Teto._PWMstate;
 8004a8e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8004a92:	7033      	strb	r3, [r6, #0]
	__StateLastro 	= PrimitiveStates.Lastro._PWMstate;
 8004a94:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8004a98:	702b      	strb	r3, [r5, #0]


}
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	20002b09 	.word	0x20002b09
 8004aa0:	20002b08 	.word	0x20002b08
 8004aa4:	20000908 	.word	0x20000908
 8004aa8:	20001d8c 	.word	0x20001d8c

08004aac <taskTemperatura1sec>:
void taskTemperatura1sec(void){
 8004aac:	b508      	push	{r3, lr}
	WatchDogLimitesTemperatura();
 8004aae:	f7ff ff05 	bl	80048bc <WatchDogLimitesTemperatura>
	sinalizacaoReachTemp();
 8004ab2:	f7ff ffd5 	bl	8004a60 <sinalizacaoReachTemp>
	SaidasLeds();
 8004ab6:	f7ff ff83 	bl	80049c0 <SaidasLeds>
}
 8004aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Horimetro();
 8004abe:	f7ff bfb1 	b.w	8004a24 <Horimetro>
	...

08004ac4 <funcionamentoTimer>:
		osThreadYield();
		osDelayUntil(&xLastWakeTime,1000);
	}
}

void funcionamentoTimer(void){
 8004ac4:	b570      	push	{r4, r5, r6, lr}

	//Decremento de minutos e segundos
	if((PrimitiveStates.RTTimerMinutos>0 && PrimitiveStates.RTTimerSegundos==0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004ac6:	4c1a      	ldr	r4, [pc, #104]	; (8004b30 <funcionamentoTimer+0x6c>)
 8004ac8:	f894 513b 	ldrb.w	r5, [r4, #315]	; 0x13b
 8004acc:	b15d      	cbz	r5, 8004ae6 <funcionamentoTimer+0x22>
 8004ace:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
 8004ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad6:	d10a      	bne.n	8004aee <funcionamentoTimer+0x2a>
		PrimitiveStates.RTTimerSegundos = 59;
 8004ad8:	233b      	movs	r3, #59	; 0x3b
		PrimitiveStates.RTTimerMinutos--;
 8004ada:	3d01      	subs	r5, #1
		PrimitiveStates.RTTimerSegundos = 59;
 8004adc:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
		PrimitiveStates.RTTimerMinutos--;
 8004ae0:	f884 513b 	strb.w	r5, [r4, #315]	; 0x13b
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
			PrimitiveStates.stateTimer = TIMER_idle;
			osThreadResume(TaskBuzzerHandle);
		}
	}
}
 8004ae4:	bd70      	pop	{r4, r5, r6, pc}
	}else if((PrimitiveStates.RTTimerMinutos>0 || PrimitiveStates.RTTimerSegundos>0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004ae6:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0fa      	beq.n	8004ae4 <funcionamentoTimer+0x20>
 8004aee:	f894 313d 	ldrb.w	r3, [r4, #317]	; 0x13d
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d1f6      	bne.n	8004ae4 <funcionamentoTimer+0x20>
		PrimitiveStates.RTTimerSegundos--;
 8004af6:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
		if(PrimitiveStates.RTTimerSegundos==0 && PrimitiveStates.RTTimerMinutos==0 && PrimitiveStates.stateTimer != TIMER_idle){
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1ee      	bne.n	8004ae4 <funcionamentoTimer+0x20>
 8004b06:	2d00      	cmp	r5, #0
 8004b08:	d1ec      	bne.n	8004ae4 <funcionamentoTimer+0x20>
			osMessagePut(FilaEepromHandle, CEepromNewCile, 0);
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <funcionamentoTimer+0x70>)
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
 8004b0c:	4e0a      	ldr	r6, [pc, #40]	; (8004b38 <funcionamentoTimer+0x74>)
			osMessagePut(FilaEepromHandle, CEepromNewCile, 0);
 8004b0e:	462a      	mov	r2, r5
 8004b10:	2107      	movs	r1, #7
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	f003 f97d 	bl	8007e12 <osMessagePut>
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
 8004b18:	6830      	ldr	r0, [r6, #0]
 8004b1a:	2108      	movs	r1, #8
 8004b1c:	f003 f8f7 	bl	8007d0e <osSignalSet>
			osThreadResume(TaskBuzzerHandle);
 8004b20:	6830      	ldr	r0, [r6, #0]
			PrimitiveStates.stateTimer = TIMER_idle;
 8004b22:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
}
 8004b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osThreadResume(TaskBuzzerHandle);
 8004b2a:	f003 b9d9 	b.w	8007ee0 <osThreadResume>
 8004b2e:	bf00      	nop
 8004b30:	20000908 	.word	0x20000908
 8004b34:	2000081c 	.word	0x2000081c
 8004b38:	20001d8c 	.word	0x20001d8c

08004b3c <verificaErro>:


void verificaErro(void){
 8004b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	osEvent evt;
	evt = osSignalWait (ERRO_CRITICO, 0);
 8004b3e:	2200      	movs	r2, #0
 8004b40:	210f      	movs	r1, #15
 8004b42:	a801      	add	r0, sp, #4
 8004b44:	f003 f90c 	bl	8007d60 <osSignalWait>
	if (evt.status == osEventSignal){
 8004b48:	9b01      	ldr	r3, [sp, #4]
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d109      	bne.n	8004b62 <verificaErro+0x26>

		if(evt.value.v == ERRO_CRITICO){
 8004b4e:	9b02      	ldr	r3, [sp, #8]
 8004b50:	2b0f      	cmp	r3, #15
 8004b52:	d106      	bne.n	8004b62 <verificaErro+0x26>
			osThreadSuspend(TaskTimerHandle);
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <verificaErro+0x2c>)
 8004b56:	6818      	ldr	r0, [r3, #0]
		}
	}
}
 8004b58:	b005      	add	sp, #20
 8004b5a:	f85d eb04 	ldr.w	lr, [sp], #4
			osThreadSuspend(TaskTimerHandle);
 8004b5e:	f003 b9ba 	b.w	8007ed6 <osThreadSuspend>
}
 8004b62:	b005      	add	sp, #20
 8004b64:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b68:	20002038 	.word	0x20002038

08004b6c <StartTimer>:
{
 8004b6c:	b507      	push	{r0, r1, r2, lr}
	xLastWakeTime = xTaskGetTickCount();
 8004b6e:	f004 f863 	bl	8008c38 <xTaskGetTickCount>
 8004b72:	9001      	str	r0, [sp, #4]
		verificaErro();
 8004b74:	f7ff ffe2 	bl	8004b3c <verificaErro>
		funcionamentoTimer();
 8004b78:	f7ff ffa4 	bl	8004ac4 <funcionamentoTimer>
		osThreadYield();
 8004b7c:	f003 f872 	bl	8007c64 <osThreadYield>
		osDelayUntil(&xLastWakeTime,1000);
 8004b80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b84:	a801      	add	r0, sp, #4
 8004b86:	f003 f9c2 	bl	8007f0e <osDelayUntil>
	for(;;)
 8004b8a:	e7f3      	b.n	8004b74 <StartTimer+0x8>

08004b8c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b8c:	4a07      	ldr	r2, [pc, #28]	; (8004bac <HAL_Init+0x20>)
{
 8004b8e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b90:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b92:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b94:	f043 0310 	orr.w	r3, r3, #16
 8004b98:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b9a:	f000 fa55 	bl	8005048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b9e:	200f      	movs	r0, #15
 8004ba0:	f7fe fca4 	bl	80034ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ba4:	f7fe fa7a 	bl	800309c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004ba8:	2000      	movs	r0, #0
 8004baa:	bd08      	pop	{r3, pc}
 8004bac:	40022000 	.word	0x40022000

08004bb0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004bb0:	4a03      	ldr	r2, [pc, #12]	; (8004bc0 <HAL_IncTick+0x10>)
 8004bb2:	4b04      	ldr	r3, [pc, #16]	; (8004bc4 <HAL_IncTick+0x14>)
 8004bb4:	6811      	ldr	r1, [r2, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	440b      	add	r3, r1
 8004bba:	6013      	str	r3, [r2, #0]
}
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20002b10 	.word	0x20002b10
 8004bc4:	20000004 	.word	0x20000004

08004bc8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004bc8:	4b01      	ldr	r3, [pc, #4]	; (8004bd0 <HAL_GetTick+0x8>)
 8004bca:	6818      	ldr	r0, [r3, #0]
}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	20002b10 	.word	0x20002b10

08004bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004bd8:	f7ff fff6 	bl	8004bc8 <HAL_GetTick>
 8004bdc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bde:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004be0:	bf1e      	ittt	ne
 8004be2:	4b04      	ldrne	r3, [pc, #16]	; (8004bf4 <HAL_Delay+0x20>)
 8004be4:	781b      	ldrbne	r3, [r3, #0]
 8004be6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004be8:	f7ff ffee 	bl	8004bc8 <HAL_GetTick>
 8004bec:	1b43      	subs	r3, r0, r5
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	d3fa      	bcc.n	8004be8 <HAL_Delay+0x14>
  {
  }
}
 8004bf2:	bd38      	pop	{r3, r4, r5, pc}
 8004bf4:	20000004 	.word	0x20000004

08004bf8 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bf8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004bfa:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bfe:	f012 0f50 	tst.w	r2, #80	; 0x50
 8004c02:	d11b      	bne.n	8004c3c <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	6892      	ldr	r2, [r2, #8]
 8004c10:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8004c14:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8004c18:	d10c      	bne.n	8004c34 <ADC_DMAConvCplt+0x3c>
 8004c1a:	7b1a      	ldrb	r2, [r3, #12]
 8004c1c:	b952      	cbnz	r2, 8004c34 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c24:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c28:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c2a:	bf5e      	ittt	pl
 8004c2c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8004c2e:	f042 0201 	orrpl.w	r2, r2, #1
 8004c32:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fd ffb3 	bl	8002ba0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004c3a:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
}
 8004c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	4718      	bx	r3

08004c46 <HAL_ADC_ConvHalfCpltCallback>:
 8004c46:	4770      	bx	lr

08004c48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004c48:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004c4c:	f7ff fffb 	bl	8004c46 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c50:	bd08      	pop	{r3, pc}

08004c52 <HAL_ADC_ErrorCallback>:
 8004c52:	4770      	bx	lr

08004c54 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c54:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8004c56:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c58:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c5e:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c60:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004c62:	f043 0304 	orr.w	r3, r3, #4
 8004c66:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c68:	f7ff fff3 	bl	8004c52 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c6c:	bd08      	pop	{r3, pc}
	...

08004c70 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8004c70:	2300      	movs	r3, #0
{ 
 8004c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8004c74:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004c76:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8004c7a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d06c      	beq.n	8004d5a <HAL_ADC_ConfigChannel+0xea>
 8004c80:	2301      	movs	r3, #1
 8004c82:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8004c86:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004c88:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8004c8a:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004c8c:	6808      	ldr	r0, [r1, #0]
 8004c8e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8004c92:	d822      	bhi.n	8004cda <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004c94:	261f      	movs	r6, #31
 8004c96:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8004c98:	3b05      	subs	r3, #5
 8004c9a:	409e      	lsls	r6, r3
 8004c9c:	ea25 0506 	bic.w	r5, r5, r6
 8004ca0:	fa00 f303 	lsl.w	r3, r0, r3
 8004ca4:	432b      	orrs	r3, r5
 8004ca6:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004ca8:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004caa:	688b      	ldr	r3, [r1, #8]
 8004cac:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8004cb0:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004cb4:	d929      	bls.n	8004d0a <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004cb6:	68d6      	ldr	r6, [r2, #12]
 8004cb8:	3d1e      	subs	r5, #30
 8004cba:	40a9      	lsls	r1, r5
 8004cbc:	ea26 0101 	bic.w	r1, r6, r1
 8004cc0:	40ab      	lsls	r3, r5
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004cc6:	f1a0 0310 	sub.w	r3, r0, #16
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d925      	bls.n	8004d1a <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cce:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8004cd6:	b002      	add	sp, #8
 8004cd8:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8004cda:	2d0c      	cmp	r5, #12
 8004cdc:	f04f 051f 	mov.w	r5, #31
 8004ce0:	d809      	bhi.n	8004cf6 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004ce2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8004ce4:	3b23      	subs	r3, #35	; 0x23
 8004ce6:	409d      	lsls	r5, r3
 8004ce8:	ea26 0505 	bic.w	r5, r6, r5
 8004cec:	fa00 f303 	lsl.w	r3, r0, r3
 8004cf0:	432b      	orrs	r3, r5
 8004cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8004cf4:	e7d8      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004cf6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8004cf8:	3b41      	subs	r3, #65	; 0x41
 8004cfa:	409d      	lsls	r5, r3
 8004cfc:	ea26 0505 	bic.w	r5, r6, r5
 8004d00:	fa00 f303 	lsl.w	r3, r0, r3
 8004d04:	432b      	orrs	r3, r5
 8004d06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d08:	e7ce      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004d0a:	6910      	ldr	r0, [r2, #16]
 8004d0c:	40a9      	lsls	r1, r5
 8004d0e:	ea20 0101 	bic.w	r1, r0, r1
 8004d12:	40ab      	lsls	r3, r5
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6113      	str	r3, [r2, #16]
 8004d18:	e7d9      	b.n	8004cce <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8004d1a:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <HAL_ADC_ConfigChannel+0xf0>)
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d116      	bne.n	8004d4e <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004d20:	6893      	ldr	r3, [r2, #8]
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	d4d3      	bmi.n	8004cce <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004d26:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d28:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004d2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d2e:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d30:	d1cd      	bne.n	8004cce <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d32:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <HAL_ADC_ConfigChannel+0xf4>)
 8004d34:	4a0c      	ldr	r2, [pc, #48]	; (8004d68 <HAL_ADC_ConfigChannel+0xf8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d3c:	220a      	movs	r2, #10
 8004d3e:	4353      	muls	r3, r2
            wait_loop_index--;
 8004d40:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004d42:	9b01      	ldr	r3, [sp, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0c2      	beq.n	8004cce <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8004d48:	9b01      	ldr	r3, [sp, #4]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	e7f8      	b.n	8004d40 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8004d50:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d52:	f043 0320 	orr.w	r3, r3, #32
 8004d56:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8004d58:	e7ba      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8004d5a:	2002      	movs	r0, #2
 8004d5c:	e7bb      	b.n	8004cd6 <HAL_ADC_ConfigChannel+0x66>
 8004d5e:	bf00      	nop
 8004d60:	40012400 	.word	0x40012400
 8004d64:	20000000 	.word	0x20000000
 8004d68:	000f4240 	.word	0x000f4240

08004d6c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8004d6c:	2300      	movs	r3, #0
{
 8004d6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8004d70:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d72:	6803      	ldr	r3, [r0, #0]
{
 8004d74:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	07d2      	lsls	r2, r2, #31
 8004d7a:	d502      	bpl.n	8004d82 <ADC_Enable+0x16>
  return HAL_OK;
 8004d7c:	2000      	movs	r0, #0
}
 8004d7e:	b003      	add	sp, #12
 8004d80:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d8a:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <ADC_Enable+0x70>)
 8004d8c:	4a14      	ldr	r2, [pc, #80]	; (8004de0 <ADC_Enable+0x74>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8004d94:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8004d96:	9b01      	ldr	r3, [sp, #4]
 8004d98:	b9e3      	cbnz	r3, 8004dd4 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8004d9a:	f7ff ff15 	bl	8004bc8 <HAL_GetTick>
 8004d9e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	07db      	lsls	r3, r3, #31
 8004da6:	d4e9      	bmi.n	8004d7c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004da8:	f7ff ff0e 	bl	8004bc8 <HAL_GetTick>
 8004dac:	1b40      	subs	r0, r0, r5
 8004dae:	2802      	cmp	r0, #2
 8004db0:	d9f6      	bls.n	8004da0 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f013 0301 	ands.w	r3, r3, #1
 8004dba:	d1f1      	bne.n	8004da0 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dbc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 8004dbe:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dc0:	f042 0210 	orr.w	r2, r2, #16
 8004dc4:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8004dc8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8004dd2:	e7d4      	b.n	8004d7e <ADC_Enable+0x12>
      wait_loop_index--;
 8004dd4:	9b01      	ldr	r3, [sp, #4]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	e7dc      	b.n	8004d94 <ADC_Enable+0x28>
 8004dda:	bf00      	nop
 8004ddc:	20000000 	.word	0x20000000
 8004de0:	000f4240 	.word	0x000f4240

08004de4 <HAL_ADC_Start_DMA>:
{
 8004de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004de8:	4b40      	ldr	r3, [pc, #256]	; (8004eec <HAL_ADC_Start_DMA+0x108>)
{
 8004dea:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004dec:	6802      	ldr	r2, [r0, #0]
{
 8004dee:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004df0:	429a      	cmp	r2, r3
{
 8004df2:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004df4:	d002      	beq.n	8004dfc <HAL_ADC_Start_DMA+0x18>
 8004df6:	493e      	ldr	r1, [pc, #248]	; (8004ef0 <HAL_ADC_Start_DMA+0x10c>)
 8004df8:	428a      	cmp	r2, r1
 8004dfa:	d103      	bne.n	8004e04 <HAL_ADC_Start_DMA+0x20>
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8004e02:	d16e      	bne.n	8004ee2 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8004e04:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d06c      	beq.n	8004ee6 <HAL_ADC_Start_DMA+0x102>
 8004e0c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8004e0e:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8004e10:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8004e14:	f7ff ffaa 	bl	8004d6c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004e18:	4606      	mov	r6, r0
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d15d      	bne.n	8004eda <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8004e1e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004e20:	6821      	ldr	r1, [r4, #0]
 8004e22:	4b33      	ldr	r3, [pc, #204]	; (8004ef0 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8004e24:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8004e28:	f025 0501 	bic.w	r5, r5, #1
 8004e2c:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004e30:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8004e32:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004e34:	d104      	bne.n	8004e40 <HAL_ADC_Start_DMA+0x5c>
 8004e36:	4a2d      	ldr	r2, [pc, #180]	; (8004eec <HAL_ADC_Start_DMA+0x108>)
 8004e38:	6853      	ldr	r3, [r2, #4]
 8004e3a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8004e3e:	d13e      	bne.n	8004ebe <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004e46:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004e48:	684b      	ldr	r3, [r1, #4]
 8004e4a:	055a      	lsls	r2, r3, #21
 8004e4c:	d505      	bpl.n	8004e5a <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004e4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e58:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e5c:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e5e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004e62:	bf18      	it	ne
 8004e64:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e66:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004e68:	bf18      	it	ne
 8004e6a:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8004e6e:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8004e70:	2300      	movs	r3, #0
 8004e72:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e76:	4b1f      	ldr	r3, [pc, #124]	; (8004ef4 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e78:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e7a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e7c:	4b1e      	ldr	r3, [pc, #120]	; (8004ef8 <HAL_ADC_Start_DMA+0x114>)
 8004e7e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004e80:	4b1e      	ldr	r3, [pc, #120]	; (8004efc <HAL_ADC_Start_DMA+0x118>)
 8004e82:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004e84:	f06f 0302 	mvn.w	r3, #2
 8004e88:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004e8c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8004e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e94:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e98:	4643      	mov	r3, r8
 8004e9a:	f000 f993 	bl	80051c4 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8004ea6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	bf0c      	ite	eq
 8004eae:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004eb2:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8004eb6:	609a      	str	r2, [r3, #8]
}
 8004eb8:	4630      	mov	r0, r6
 8004eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ebe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004ec6:	6853      	ldr	r3, [r2, #4]
 8004ec8:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004eca:	bf41      	itttt	mi
 8004ecc:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8004ece:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8004ed2:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8004ed6:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8004ed8:	e7bf      	b.n	8004e5a <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8004eda:	2300      	movs	r3, #0
 8004edc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8004ee0:	e7ea      	b.n	8004eb8 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8004ee2:	2601      	movs	r6, #1
 8004ee4:	e7e8      	b.n	8004eb8 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8004ee6:	2602      	movs	r6, #2
 8004ee8:	e7e6      	b.n	8004eb8 <HAL_ADC_Start_DMA+0xd4>
 8004eea:	bf00      	nop
 8004eec:	40012400 	.word	0x40012400
 8004ef0:	40012800 	.word	0x40012800
 8004ef4:	08004bf9 	.word	0x08004bf9
 8004ef8:	08004c49 	.word	0x08004c49
 8004efc:	08004c55 	.word	0x08004c55

08004f00 <ADC_ConversionStop_Disable>:
{
 8004f00:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004f02:	6803      	ldr	r3, [r0, #0]
{
 8004f04:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	07d1      	lsls	r1, r2, #31
 8004f0a:	d401      	bmi.n	8004f10 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8004f0c:	2000      	movs	r0, #0
}
 8004f0e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	f022 0201 	bic.w	r2, r2, #1
 8004f16:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004f18:	f7ff fe56 	bl	8004bc8 <HAL_GetTick>
 8004f1c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	07db      	lsls	r3, r3, #31
 8004f24:	d5f2      	bpl.n	8004f0c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004f26:	f7ff fe4f 	bl	8004bc8 <HAL_GetTick>
 8004f2a:	1b40      	subs	r0, r0, r5
 8004f2c:	2802      	cmp	r0, #2
 8004f2e:	d9f6      	bls.n	8004f1e <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	07da      	lsls	r2, r3, #31
 8004f36:	d5f2      	bpl.n	8004f1e <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8004f3a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f3c:	f043 0310 	orr.w	r3, r3, #16
 8004f40:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f44:	f043 0301 	orr.w	r3, r3, #1
 8004f48:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8004f4a:	e7e0      	b.n	8004f0e <ADC_ConversionStop_Disable+0xe>

08004f4c <HAL_ADC_Init>:
{
 8004f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8004f4e:	4604      	mov	r4, r0
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d06d      	beq.n	8005030 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f56:	b923      	cbnz	r3, 8004f62 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8004f58:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8004f5a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8004f5e:	f7fe f8c5 	bl	80030ec <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004f62:	4620      	mov	r0, r4
 8004f64:	f7ff ffcc 	bl	8004f00 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004f68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f6a:	f013 0310 	ands.w	r3, r3, #16
 8004f6e:	d161      	bne.n	8005034 <HAL_ADC_Init+0xe8>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d15f      	bne.n	8005034 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 8004f74:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f76:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8004f78:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004f7c:	f022 0202 	bic.w	r2, r2, #2
 8004f80:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f84:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004f86:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8004f88:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004f8a:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f8c:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004f8e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004f92:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004f96:	d036      	beq.n	8005006 <HAL_ADC_Init+0xba>
 8004f98:	1e77      	subs	r7, r6, #1
 8004f9a:	427d      	negs	r5, r7
 8004f9c:	417d      	adcs	r5, r7
 8004f9e:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004fa0:	7d27      	ldrb	r7, [r4, #20]
 8004fa2:	2f01      	cmp	r7, #1
 8004fa4:	d106      	bne.n	8004fb4 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004fa6:	bb82      	cbnz	r2, 800500a <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004fa8:	69a2      	ldr	r2, [r4, #24]
 8004faa:	3a01      	subs	r2, #1
 8004fac:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8004fb0:	f442 6500 	orr.w	r5, r2, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8004fb4:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004fb6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8004fba:	6857      	ldr	r7, [r2, #4]
 8004fbc:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8004fc0:	ea45 0507 	orr.w	r5, r5, r7
 8004fc4:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8004fc6:	6897      	ldr	r7, [r2, #8]
 8004fc8:	4d1d      	ldr	r5, [pc, #116]	; (8005040 <HAL_ADC_Init+0xf4>)
 8004fca:	ea05 0507 	and.w	r5, r5, r7
 8004fce:	ea45 0501 	orr.w	r5, r5, r1
 8004fd2:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004fd4:	d001      	beq.n	8004fda <HAL_ADC_Init+0x8e>
 8004fd6:	2e01      	cmp	r6, #1
 8004fd8:	d102      	bne.n	8004fe0 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8004fe0:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8004fe2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8004fe6:	432b      	orrs	r3, r5
 8004fe8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004fea:	6892      	ldr	r2, [r2, #8]
 8004fec:	4b15      	ldr	r3, [pc, #84]	; (8005044 <HAL_ADC_Init+0xf8>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	4299      	cmp	r1, r3
 8004ff2:	d113      	bne.n	800501c <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8004ff8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8005004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005006:	4635      	mov	r5, r6
 8005008:	e7ca      	b.n	8004fa0 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800500a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800500c:	f042 0220 	orr.w	r2, r2, #32
 8005010:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005012:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005014:	f042 0201 	orr.w	r2, r2, #1
 8005018:	62e2      	str	r2, [r4, #44]	; 0x2c
 800501a:	e7cb      	b.n	8004fb4 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 800501c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800501e:	f023 0312 	bic.w	r3, r3, #18
 8005022:	f043 0310 	orr.w	r3, r3, #16
 8005026:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005028:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8005030:	2001      	movs	r0, #1
 8005032:	e7e7      	b.n	8005004 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005034:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005036:	f043 0310 	orr.w	r3, r3, #16
 800503a:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800503c:	e7f8      	b.n	8005030 <HAL_ADC_Init+0xe4>
 800503e:	bf00      	nop
 8005040:	ffe1f7fd 	.word	0xffe1f7fd
 8005044:	ff1f0efe 	.word	0xff1f0efe

08005048 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005048:	4907      	ldr	r1, [pc, #28]	; (8005068 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800504a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800504c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800504e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005052:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005056:	0412      	lsls	r2, r2, #16
 8005058:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800505a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800505c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005064:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005066:	4770      	bx	lr
 8005068:	e000ed00 	.word	0xe000ed00

0800506c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800506c:	4b15      	ldr	r3, [pc, #84]	; (80050c4 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800506e:	b530      	push	{r4, r5, lr}
 8005070:	68dc      	ldr	r4, [r3, #12]
 8005072:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005076:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800507a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800507c:	2b04      	cmp	r3, #4
 800507e:	bf28      	it	cs
 8005080:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005082:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005084:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005088:	bf94      	ite	ls
 800508a:	2400      	movls	r4, #0
 800508c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800508e:	fa05 f303 	lsl.w	r3, r5, r3
 8005092:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005096:	40a5      	lsls	r5, r4
 8005098:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800509c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800509e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050a0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a4:	bfac      	ite	ge
 80050a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050aa:	4a07      	ldrlt	r2, [pc, #28]	; (80050c8 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	bfab      	itete	ge
 80050b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050bc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050c0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80050c2:	bd30      	pop	{r4, r5, pc}
 80050c4:	e000ed00 	.word	0xe000ed00
 80050c8:	e000ed14 	.word	0xe000ed14

080050cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80050cc:	2800      	cmp	r0, #0
 80050ce:	db07      	blt.n	80050e0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050d0:	2301      	movs	r3, #1
 80050d2:	0941      	lsrs	r1, r0, #5
 80050d4:	4a03      	ldr	r2, [pc, #12]	; (80050e4 <HAL_NVIC_EnableIRQ+0x18>)
 80050d6:	f000 001f 	and.w	r0, r0, #31
 80050da:	4083      	lsls	r3, r0
 80050dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	e000e100 	.word	0xe000e100

080050e8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80050e8:	2800      	cmp	r0, #0
 80050ea:	db0c      	blt.n	8005106 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050ec:	2201      	movs	r2, #1
 80050ee:	4906      	ldr	r1, [pc, #24]	; (8005108 <HAL_NVIC_DisableIRQ+0x20>)
 80050f0:	0943      	lsrs	r3, r0, #5
 80050f2:	f000 001f 	and.w	r0, r0, #31
 80050f6:	4082      	lsls	r2, r0
 80050f8:	3320      	adds	r3, #32
 80050fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80050fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005102:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005106:	4770      	bx	lr
 8005108:	e000e100 	.word	0xe000e100

0800510c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800510c:	4603      	mov	r3, r0
{
 800510e:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8005110:	b340      	cbz	r0, 8005164 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005112:	2114      	movs	r1, #20
 8005114:	6800      	ldr	r0, [r0, #0]
 8005116:	4a14      	ldr	r2, [pc, #80]	; (8005168 <HAL_DMA_Init+0x5c>)
 8005118:	4402      	add	r2, r0
 800511a:	fbb2 f2f1 	udiv	r2, r2, r1
 800511e:	0092      	lsls	r2, r2, #2
 8005120:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005122:	4a12      	ldr	r2, [pc, #72]	; (800516c <HAL_DMA_Init+0x60>)
 8005124:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800512c:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8005130:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005132:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 8005134:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005136:	4322      	orrs	r2, r4
 8005138:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800513a:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800513e:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005140:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005142:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005146:	4322      	orrs	r2, r4
 8005148:	699c      	ldr	r4, [r3, #24]
 800514a:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800514c:	69dc      	ldr	r4, [r3, #28]
 800514e:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8005150:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005152:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005154:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005156:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005158:	6398      	str	r0, [r3, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800515a:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 800515e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
}
 8005162:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005164:	2001      	movs	r0, #1
 8005166:	e7fc      	b.n	8005162 <HAL_DMA_Init+0x56>
 8005168:	bffdfff8 	.word	0xbffdfff8
 800516c:	40020000 	.word	0x40020000

08005170 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005170:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005172:	b308      	cbz	r0, 80051b8 <HAL_DMA_DeInit+0x48>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005174:	6801      	ldr	r1, [r0, #0]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005176:	4a11      	ldr	r2, [pc, #68]	; (80051bc <HAL_DMA_DeInit+0x4c>)
  __HAL_DMA_DISABLE(hdma);
 8005178:	680b      	ldr	r3, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800517a:	440a      	add	r2, r1
  __HAL_DMA_DISABLE(hdma);
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	600b      	str	r3, [r1, #0]
  hdma->Instance->CCR  = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	600b      	str	r3, [r1, #0]
  hdma->Instance->CNDTR = 0U;
 8005186:	604b      	str	r3, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 8005188:	608b      	str	r3, [r1, #8]
  hdma->Instance->CMAR = 0U;
 800518a:	60cb      	str	r3, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800518c:	2114      	movs	r1, #20
 800518e:	fbb2 f2f1 	udiv	r2, r2, r1
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8005192:	2101      	movs	r1, #1
  hdma->DmaBaseAddress = DMA1;
 8005194:	4c0a      	ldr	r4, [pc, #40]	; (80051c0 <HAL_DMA_DeInit+0x50>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005196:	0092      	lsls	r2, r2, #2
 8005198:	6402      	str	r2, [r0, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800519a:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 800519e:	63c4      	str	r4, [r0, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80051a0:	6062      	str	r2, [r4, #4]
  hdma->XferHalfCpltCallback = NULL;
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051a2:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->XferHalfCpltCallback = NULL;
 80051a4:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 80051a8:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80051ac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80051b0:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 80051b4:	4618      	mov	r0, r3
}
 80051b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80051b8:	2001      	movs	r0, #1
 80051ba:	e7fc      	b.n	80051b6 <HAL_DMA_DeInit+0x46>
 80051bc:	bffdfff8 	.word	0xbffdfff8
 80051c0:	40020000 	.word	0x40020000

080051c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051c6:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051c8:	f890 0020 	ldrb.w	r0, [r0, #32]
 80051cc:	2801      	cmp	r0, #1
 80051ce:	d036      	beq.n	800523e <HAL_DMA_Start_IT+0x7a>
 80051d0:	2001      	movs	r0, #1
 80051d2:	f885 0020 	strb.w	r0, [r5, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80051d6:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
 80051da:	2400      	movs	r4, #0
 80051dc:	2801      	cmp	r0, #1
 80051de:	b2c6      	uxtb	r6, r0
 80051e0:	f04f 0002 	mov.w	r0, #2
 80051e4:	d128      	bne.n	8005238 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051e6:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051ea:	63ac      	str	r4, [r5, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051ec:	682c      	ldr	r4, [r5, #0]
 80051ee:	6820      	ldr	r0, [r4, #0]
 80051f0:	f020 0001 	bic.w	r0, r0, #1
 80051f4:	6020      	str	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80051f6:	e9d5 700f 	ldrd	r7, r0, [r5, #60]	; 0x3c
 80051fa:	fa06 f000 	lsl.w	r0, r6, r0
 80051fe:	6078      	str	r0, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005200:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005202:	686b      	ldr	r3, [r5, #4]
 8005204:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8005206:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005208:	bf0b      	itete	eq
 800520a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800520c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800520e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005210:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8005212:	b14b      	cbz	r3, 8005228 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 800521a:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800521c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	6023      	str	r3, [r4, #0]
}
 8005226:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	f023 0304 	bic.w	r3, r3, #4
 800522e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	f043 030a 	orr.w	r3, r3, #10
 8005236:	e7f0      	b.n	800521a <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 8005238:	f885 4020 	strb.w	r4, [r5, #32]
    status = HAL_BUSY;
 800523c:	e7f3      	b.n	8005226 <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 800523e:	2002      	movs	r0, #2
 8005240:	e7f1      	b.n	8005226 <HAL_DMA_Start_IT+0x62>

08005242 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005242:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8005246:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005248:	2a02      	cmp	r2, #2
 800524a:	d006      	beq.n	800525a <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800524c:	2204      	movs	r2, #4
 800524e:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_ERROR;
 8005250:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2020 	strb.w	r2, [r3, #32]
}
 8005258:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800525a:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800525c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800525e:	6811      	ldr	r1, [r2, #0]
 8005260:	f021 010e 	bic.w	r1, r1, #14
 8005264:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005266:	6811      	ldr	r1, [r2, #0]
 8005268:	f021 0101 	bic.w	r1, r1, #1
 800526c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800526e:	2101      	movs	r1, #1
 8005270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005272:	fa01 f202 	lsl.w	r2, r1, r2
 8005276:	6042      	str	r2, [r0, #4]
  return status; 
 8005278:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800527a:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  return status; 
 800527e:	e7e8      	b.n	8005252 <HAL_DMA_Abort+0x10>

08005280 <HAL_DMA_Abort_IT>:
{  
 8005280:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005282:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005286:	2b02      	cmp	r3, #2
 8005288:	d003      	beq.n	8005292 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800528a:	2304      	movs	r3, #4
 800528c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800528e:	2001      	movs	r0, #1
}
 8005290:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005292:	6803      	ldr	r3, [r0, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	f022 020e 	bic.w	r2, r2, #14
 800529a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80052a4:	4a18      	ldr	r2, [pc, #96]	; (8005308 <HAL_DMA_Abort_IT+0x88>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d01f      	beq.n	80052ea <HAL_DMA_Abort_IT+0x6a>
 80052aa:	3214      	adds	r2, #20
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d01e      	beq.n	80052ee <HAL_DMA_Abort_IT+0x6e>
 80052b0:	3214      	adds	r2, #20
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d01d      	beq.n	80052f2 <HAL_DMA_Abort_IT+0x72>
 80052b6:	3214      	adds	r2, #20
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d01d      	beq.n	80052f8 <HAL_DMA_Abort_IT+0x78>
 80052bc:	3214      	adds	r2, #20
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01d      	beq.n	80052fe <HAL_DMA_Abort_IT+0x7e>
 80052c2:	3214      	adds	r2, #20
 80052c4:	4293      	cmp	r3, r2
 80052c6:	bf0c      	ite	eq
 80052c8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80052cc:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80052d0:	4a0e      	ldr	r2, [pc, #56]	; (800530c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80052d2:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80052d4:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80052dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80052de:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80052e2:	b17b      	cbz	r3, 8005304 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80052e4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	4620      	mov	r0, r4
 80052e8:	e7d2      	b.n	8005290 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80052ea:	2301      	movs	r3, #1
 80052ec:	e7f0      	b.n	80052d0 <HAL_DMA_Abort_IT+0x50>
 80052ee:	2310      	movs	r3, #16
 80052f0:	e7ee      	b.n	80052d0 <HAL_DMA_Abort_IT+0x50>
 80052f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052f6:	e7eb      	b.n	80052d0 <HAL_DMA_Abort_IT+0x50>
 80052f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052fc:	e7e8      	b.n	80052d0 <HAL_DMA_Abort_IT+0x50>
 80052fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005302:	e7e5      	b.n	80052d0 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8005304:	4618      	mov	r0, r3
 8005306:	e7c3      	b.n	8005290 <HAL_DMA_Abort_IT+0x10>
 8005308:	40020008 	.word	0x40020008
 800530c:	40020000 	.word	0x40020000

08005310 <HAL_DMA_IRQHandler>:
{
 8005310:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005312:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005314:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005316:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005318:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800531a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800531c:	4095      	lsls	r5, r2
 800531e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005320:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005322:	d032      	beq.n	800538a <HAL_DMA_IRQHandler+0x7a>
 8005324:	074d      	lsls	r5, r1, #29
 8005326:	d530      	bpl.n	800538a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800532c:	bf5e      	ittt	pl
 800532e:	681a      	ldrpl	r2, [r3, #0]
 8005330:	f022 0204 	bicpl.w	r2, r2, #4
 8005334:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005336:	4a3e      	ldr	r2, [pc, #248]	; (8005430 <HAL_DMA_IRQHandler+0x120>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d019      	beq.n	8005370 <HAL_DMA_IRQHandler+0x60>
 800533c:	3214      	adds	r2, #20
 800533e:	4293      	cmp	r3, r2
 8005340:	d018      	beq.n	8005374 <HAL_DMA_IRQHandler+0x64>
 8005342:	3214      	adds	r2, #20
 8005344:	4293      	cmp	r3, r2
 8005346:	d017      	beq.n	8005378 <HAL_DMA_IRQHandler+0x68>
 8005348:	3214      	adds	r2, #20
 800534a:	4293      	cmp	r3, r2
 800534c:	d017      	beq.n	800537e <HAL_DMA_IRQHandler+0x6e>
 800534e:	3214      	adds	r2, #20
 8005350:	4293      	cmp	r3, r2
 8005352:	d017      	beq.n	8005384 <HAL_DMA_IRQHandler+0x74>
 8005354:	3214      	adds	r2, #20
 8005356:	4293      	cmp	r3, r2
 8005358:	bf0c      	ite	eq
 800535a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800535e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8005362:	4a34      	ldr	r2, [pc, #208]	; (8005434 <HAL_DMA_IRQHandler+0x124>)
 8005364:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005366:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8005368:	2b00      	cmp	r3, #0
 800536a:	d05e      	beq.n	800542a <HAL_DMA_IRQHandler+0x11a>
}
 800536c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800536e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005370:	2304      	movs	r3, #4
 8005372:	e7f6      	b.n	8005362 <HAL_DMA_IRQHandler+0x52>
 8005374:	2340      	movs	r3, #64	; 0x40
 8005376:	e7f4      	b.n	8005362 <HAL_DMA_IRQHandler+0x52>
 8005378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800537c:	e7f1      	b.n	8005362 <HAL_DMA_IRQHandler+0x52>
 800537e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005382:	e7ee      	b.n	8005362 <HAL_DMA_IRQHandler+0x52>
 8005384:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005388:	e7eb      	b.n	8005362 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800538a:	2502      	movs	r5, #2
 800538c:	4095      	lsls	r5, r2
 800538e:	4225      	tst	r5, r4
 8005390:	d035      	beq.n	80053fe <HAL_DMA_IRQHandler+0xee>
 8005392:	078d      	lsls	r5, r1, #30
 8005394:	d533      	bpl.n	80053fe <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	0694      	lsls	r4, r2, #26
 800539a:	d406      	bmi.n	80053aa <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	f022 020a 	bic.w	r2, r2, #10
 80053a2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80053a4:	2201      	movs	r2, #1
 80053a6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80053aa:	4a21      	ldr	r2, [pc, #132]	; (8005430 <HAL_DMA_IRQHandler+0x120>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d019      	beq.n	80053e4 <HAL_DMA_IRQHandler+0xd4>
 80053b0:	3214      	adds	r2, #20
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d018      	beq.n	80053e8 <HAL_DMA_IRQHandler+0xd8>
 80053b6:	3214      	adds	r2, #20
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d017      	beq.n	80053ec <HAL_DMA_IRQHandler+0xdc>
 80053bc:	3214      	adds	r2, #20
 80053be:	4293      	cmp	r3, r2
 80053c0:	d017      	beq.n	80053f2 <HAL_DMA_IRQHandler+0xe2>
 80053c2:	3214      	adds	r2, #20
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d017      	beq.n	80053f8 <HAL_DMA_IRQHandler+0xe8>
 80053c8:	3214      	adds	r2, #20
 80053ca:	4293      	cmp	r3, r2
 80053cc:	bf0c      	ite	eq
 80053ce:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80053d2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80053d6:	4a17      	ldr	r2, [pc, #92]	; (8005434 <HAL_DMA_IRQHandler+0x124>)
 80053d8:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80053da:	2300      	movs	r3, #0
 80053dc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80053e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80053e2:	e7c1      	b.n	8005368 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80053e4:	2302      	movs	r3, #2
 80053e6:	e7f6      	b.n	80053d6 <HAL_DMA_IRQHandler+0xc6>
 80053e8:	2320      	movs	r3, #32
 80053ea:	e7f4      	b.n	80053d6 <HAL_DMA_IRQHandler+0xc6>
 80053ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053f0:	e7f1      	b.n	80053d6 <HAL_DMA_IRQHandler+0xc6>
 80053f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053f6:	e7ee      	b.n	80053d6 <HAL_DMA_IRQHandler+0xc6>
 80053f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053fc:	e7eb      	b.n	80053d6 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80053fe:	2508      	movs	r5, #8
 8005400:	4095      	lsls	r5, r2
 8005402:	4225      	tst	r5, r4
 8005404:	d011      	beq.n	800542a <HAL_DMA_IRQHandler+0x11a>
 8005406:	0709      	lsls	r1, r1, #28
 8005408:	d50f      	bpl.n	800542a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800540a:	6819      	ldr	r1, [r3, #0]
 800540c:	f021 010e 	bic.w	r1, r1, #14
 8005410:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005412:	2301      	movs	r3, #1
 8005414:	fa03 f202 	lsl.w	r2, r3, r2
 8005418:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800541a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800541c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8005420:	2300      	movs	r3, #0
 8005422:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8005426:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005428:	e79e      	b.n	8005368 <HAL_DMA_IRQHandler+0x58>
}
 800542a:	bc70      	pop	{r4, r5, r6}
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40020008 	.word	0x40020008
 8005434:	40020000 	.word	0x40020000

08005438 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800543c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800543e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005440:	4f64      	ldr	r7, [pc, #400]	; (80055d4 <HAL_GPIO_Init+0x19c>)
 8005442:	4b65      	ldr	r3, [pc, #404]	; (80055d8 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8005444:	f8df c194 	ldr.w	ip, [pc, #404]	; 80055dc <HAL_GPIO_Init+0x1a4>
 8005448:	f8df e194 	ldr.w	lr, [pc, #404]	; 80055e0 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800544c:	680d      	ldr	r5, [r1, #0]
 800544e:	fa35 f406 	lsrs.w	r4, r5, r6
 8005452:	d102      	bne.n	800545a <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8005454:	b003      	add	sp, #12
 8005456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800545a:	f04f 0801 	mov.w	r8, #1
 800545e:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005462:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8005466:	ea38 0505 	bics.w	r5, r8, r5
 800546a:	d17a      	bne.n	8005562 <HAL_GPIO_Init+0x12a>
      switch (GPIO_Init->Mode)
 800546c:	684d      	ldr	r5, [r1, #4]
 800546e:	2d03      	cmp	r5, #3
 8005470:	d807      	bhi.n	8005482 <HAL_GPIO_Init+0x4a>
 8005472:	3d01      	subs	r5, #1
 8005474:	2d02      	cmp	r5, #2
 8005476:	f200 8087 	bhi.w	8005588 <HAL_GPIO_Init+0x150>
 800547a:	e8df f005 	tbb	[pc, r5]
 800547e:	9a95      	.short	0x9a95
 8005480:	a0          	.byte	0xa0
 8005481:	00          	.byte	0x00
 8005482:	2d12      	cmp	r5, #18
 8005484:	f000 8098 	beq.w	80055b8 <HAL_GPIO_Init+0x180>
 8005488:	d86d      	bhi.n	8005566 <HAL_GPIO_Init+0x12e>
 800548a:	2d11      	cmp	r5, #17
 800548c:	f000 808e 	beq.w	80055ac <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005490:	2cff      	cmp	r4, #255	; 0xff
 8005492:	bf98      	it	ls
 8005494:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005496:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800549a:	bf88      	it	hi
 800549c:	f100 0a04 	addhi.w	sl, r0, #4
 80054a0:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80054a4:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80054a8:	bf88      	it	hi
 80054aa:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80054ac:	fa09 fb05 	lsl.w	fp, r9, r5
 80054b0:	ea28 080b 	bic.w	r8, r8, fp
 80054b4:	fa02 f505 	lsl.w	r5, r2, r5
 80054b8:	ea48 0505 	orr.w	r5, r8, r5
 80054bc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80054c0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80054c4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80054c8:	d04b      	beq.n	8005562 <HAL_GPIO_Init+0x12a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80054ca:	69bd      	ldr	r5, [r7, #24]
 80054cc:	f026 0803 	bic.w	r8, r6, #3
 80054d0:	f045 0501 	orr.w	r5, r5, #1
 80054d4:	61bd      	str	r5, [r7, #24]
 80054d6:	69bd      	ldr	r5, [r7, #24]
 80054d8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80054dc:	f005 0501 	and.w	r5, r5, #1
 80054e0:	9501      	str	r5, [sp, #4]
 80054e2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054e6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80054ea:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054ec:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80054f0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054f4:	fa09 f90b 	lsl.w	r9, r9, fp
 80054f8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80054fc:	4d39      	ldr	r5, [pc, #228]	; (80055e4 <HAL_GPIO_Init+0x1ac>)
 80054fe:	42a8      	cmp	r0, r5
 8005500:	d061      	beq.n	80055c6 <HAL_GPIO_Init+0x18e>
 8005502:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005506:	42a8      	cmp	r0, r5
 8005508:	d05f      	beq.n	80055ca <HAL_GPIO_Init+0x192>
 800550a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800550e:	42a8      	cmp	r0, r5
 8005510:	d05d      	beq.n	80055ce <HAL_GPIO_Init+0x196>
 8005512:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005516:	42a8      	cmp	r0, r5
 8005518:	bf0c      	ite	eq
 800551a:	2503      	moveq	r5, #3
 800551c:	2504      	movne	r5, #4
 800551e:	fa05 f50b 	lsl.w	r5, r5, fp
 8005522:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8005526:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800552a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800552c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8005530:	bf14      	ite	ne
 8005532:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005534:	43a5      	biceq	r5, r4
 8005536:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8005538:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800553a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800553e:	bf14      	ite	ne
 8005540:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005542:	43a5      	biceq	r5, r4
 8005544:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8005546:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005548:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800554c:	bf14      	ite	ne
 800554e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005550:	43a5      	biceq	r5, r4
 8005552:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8005554:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005556:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800555a:	bf14      	ite	ne
 800555c:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800555e:	43a5      	biceq	r5, r4
 8005560:	601d      	str	r5, [r3, #0]
	position++;
 8005562:	3601      	adds	r6, #1
 8005564:	e772      	b.n	800544c <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8005566:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80055e8 <HAL_GPIO_Init+0x1b0>
 800556a:	454d      	cmp	r5, r9
 800556c:	d00c      	beq.n	8005588 <HAL_GPIO_Init+0x150>
 800556e:	d817      	bhi.n	80055a0 <HAL_GPIO_Init+0x168>
 8005570:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005574:	454d      	cmp	r5, r9
 8005576:	d007      	beq.n	8005588 <HAL_GPIO_Init+0x150>
 8005578:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800557c:	454d      	cmp	r5, r9
 800557e:	d003      	beq.n	8005588 <HAL_GPIO_Init+0x150>
 8005580:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005584:	454d      	cmp	r5, r9
 8005586:	d183      	bne.n	8005490 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005588:	688a      	ldr	r2, [r1, #8]
 800558a:	b1d2      	cbz	r2, 80055c2 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800558c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800558e:	bf08      	it	eq
 8005590:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005594:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8005598:	bf18      	it	ne
 800559a:	f8c0 8014 	strne.w	r8, [r0, #20]
 800559e:	e777      	b.n	8005490 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80055a0:	4565      	cmp	r5, ip
 80055a2:	d0f1      	beq.n	8005588 <HAL_GPIO_Init+0x150>
 80055a4:	4575      	cmp	r5, lr
 80055a6:	e7ee      	b.n	8005586 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80055a8:	68ca      	ldr	r2, [r1, #12]
          break;
 80055aa:	e771      	b.n	8005490 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80055ac:	68ca      	ldr	r2, [r1, #12]
 80055ae:	3204      	adds	r2, #4
          break;
 80055b0:	e76e      	b.n	8005490 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80055b2:	68ca      	ldr	r2, [r1, #12]
 80055b4:	3208      	adds	r2, #8
          break;
 80055b6:	e76b      	b.n	8005490 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80055b8:	68ca      	ldr	r2, [r1, #12]
 80055ba:	320c      	adds	r2, #12
          break;
 80055bc:	e768      	b.n	8005490 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80055be:	2200      	movs	r2, #0
 80055c0:	e766      	b.n	8005490 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80055c2:	2204      	movs	r2, #4
 80055c4:	e764      	b.n	8005490 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80055c6:	2500      	movs	r5, #0
 80055c8:	e7a9      	b.n	800551e <HAL_GPIO_Init+0xe6>
 80055ca:	2501      	movs	r5, #1
 80055cc:	e7a7      	b.n	800551e <HAL_GPIO_Init+0xe6>
 80055ce:	2502      	movs	r5, #2
 80055d0:	e7a5      	b.n	800551e <HAL_GPIO_Init+0xe6>
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000
 80055d8:	40010400 	.word	0x40010400
 80055dc:	10310000 	.word	0x10310000
 80055e0:	10320000 	.word	0x10320000
 80055e4:	40010800 	.word	0x40010800
 80055e8:	10220000 	.word	0x10220000

080055ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80055ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80055f0:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 80055f4:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 80055f6:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80055fa:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80055fe:	eb00 030b 	add.w	r3, r0, fp
 8005602:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005604:	4b2e      	ldr	r3, [pc, #184]	; (80056c0 <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 8005606:	fa31 f402 	lsrs.w	r4, r1, r2
 800560a:	d102      	bne.n	8005612 <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 800560c:	b003      	add	sp, #12
 800560e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005612:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 8005616:	400f      	ands	r7, r1
 8005618:	d049      	beq.n	80056ae <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 800561a:	f022 0403 	bic.w	r4, r2, #3
 800561e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8005622:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005626:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 800562a:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800562c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005630:	fa08 f90c 	lsl.w	r9, r8, ip
 8005634:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005638:	4d22      	ldr	r5, [pc, #136]	; (80056c4 <HAL_GPIO_DeInit+0xd8>)
 800563a:	42a8      	cmp	r0, r5
 800563c:	d039      	beq.n	80056b2 <HAL_GPIO_DeInit+0xc6>
 800563e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005642:	42a8      	cmp	r0, r5
 8005644:	d037      	beq.n	80056b6 <HAL_GPIO_DeInit+0xca>
 8005646:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800564a:	42a8      	cmp	r0, r5
 800564c:	d035      	beq.n	80056ba <HAL_GPIO_DeInit+0xce>
 800564e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005652:	42a8      	cmp	r0, r5
 8005654:	bf0c      	ite	eq
 8005656:	2503      	moveq	r5, #3
 8005658:	2504      	movne	r5, #4
 800565a:	fa05 f50c 	lsl.w	r5, r5, ip
 800565e:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005660:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005664:	d10f      	bne.n	8005686 <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005666:	681d      	ldr	r5, [r3, #0]
 8005668:	4035      	ands	r5, r6
 800566a:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800566c:	685d      	ldr	r5, [r3, #4]
 800566e:	4035      	ands	r5, r6
 8005670:	605d      	str	r5, [r3, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005672:	68dd      	ldr	r5, [r3, #12]
 8005674:	4035      	ands	r5, r6
 8005676:	60dd      	str	r5, [r3, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005678:	689d      	ldr	r5, [r3, #8]
 800567a:	4035      	ands	r5, r6
 800567c:	609d      	str	r5, [r3, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800567e:	68a5      	ldr	r5, [r4, #8]
 8005680:	ea25 0509 	bic.w	r5, r5, r9
 8005684:	60a5      	str	r5, [r4, #8]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005686:	2fff      	cmp	r7, #255	; 0xff
 8005688:	bf94      	ite	ls
 800568a:	4607      	movls	r7, r0
 800568c:	9f01      	ldrhi	r7, [sp, #4]
 800568e:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005692:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005694:	bf88      	it	hi
 8005696:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005698:	fa08 fc04 	lsl.w	ip, r8, r4
 800569c:	ea25 050c 	bic.w	r5, r5, ip
 80056a0:	fa0b f404 	lsl.w	r4, fp, r4
 80056a4:	4325      	orrs	r5, r4
 80056a6:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80056a8:	68c4      	ldr	r4, [r0, #12]
 80056aa:	4034      	ands	r4, r6
 80056ac:	60c4      	str	r4, [r0, #12]
    position++;
 80056ae:	3201      	adds	r2, #1
 80056b0:	e7a9      	b.n	8005606 <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80056b2:	2500      	movs	r5, #0
 80056b4:	e7d1      	b.n	800565a <HAL_GPIO_DeInit+0x6e>
 80056b6:	2501      	movs	r5, #1
 80056b8:	e7cf      	b.n	800565a <HAL_GPIO_DeInit+0x6e>
 80056ba:	2502      	movs	r5, #2
 80056bc:	e7cd      	b.n	800565a <HAL_GPIO_DeInit+0x6e>
 80056be:	bf00      	nop
 80056c0:	40010400 	.word	0x40010400
 80056c4:	40010800 	.word	0x40010800

080056c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056c8:	6883      	ldr	r3, [r0, #8]
 80056ca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80056cc:	bf14      	ite	ne
 80056ce:	2001      	movne	r0, #1
 80056d0:	2000      	moveq	r0, #0
 80056d2:	4770      	bx	lr

080056d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056d4:	b10a      	cbz	r2, 80056da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80056d6:	6101      	str	r1, [r0, #16]
  }
}
 80056d8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80056da:	0409      	lsls	r1, r1, #16
 80056dc:	e7fb      	b.n	80056d6 <HAL_GPIO_WritePin+0x2>

080056de <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056de:	6801      	ldr	r1, [r0, #0]
 80056e0:	2200      	movs	r2, #0
 80056e2:	694b      	ldr	r3, [r1, #20]
 80056e4:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80056e8:	d010      	beq.n	800570c <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ea:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80056ee:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80056f0:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80056f2:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f8:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056fc:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056fe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005702:	f043 0304 	orr.w	r3, r3, #4
 8005706:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8005708:	2001      	movs	r0, #1
 800570a:	4770      	bx	lr
  }
  return HAL_OK;
 800570c:	4618      	mov	r0, r3
}
 800570e:	4770      	bx	lr

08005710 <I2C_WaitOnFlagUntilTimeout>:
{
 8005710:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8005714:	4606      	mov	r6, r0
 8005716:	460f      	mov	r7, r1
 8005718:	4691      	mov	r9, r2
 800571a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800571c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005720:	6833      	ldr	r3, [r6, #0]
 8005722:	f1ba 0f01 	cmp.w	sl, #1
 8005726:	bf0c      	ite	eq
 8005728:	695c      	ldreq	r4, [r3, #20]
 800572a:	699c      	ldrne	r4, [r3, #24]
 800572c:	ea27 0404 	bic.w	r4, r7, r4
 8005730:	b2a4      	uxth	r4, r4
 8005732:	fab4 f484 	clz	r4, r4
 8005736:	0964      	lsrs	r4, r4, #5
 8005738:	45a1      	cmp	r9, r4
 800573a:	d001      	beq.n	8005740 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800573c:	2000      	movs	r0, #0
 800573e:	e025      	b.n	800578c <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8005740:	1c6a      	adds	r2, r5, #1
 8005742:	d0ee      	beq.n	8005722 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005744:	f7ff fa40 	bl	8004bc8 <HAL_GetTick>
 8005748:	9b08      	ldr	r3, [sp, #32]
 800574a:	1ac0      	subs	r0, r0, r3
 800574c:	42a8      	cmp	r0, r5
 800574e:	d801      	bhi.n	8005754 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005750:	2d00      	cmp	r5, #0
 8005752:	d1e5      	bne.n	8005720 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005754:	6833      	ldr	r3, [r6, #0]
 8005756:	f1ba 0f01 	cmp.w	sl, #1
 800575a:	bf0c      	ite	eq
 800575c:	695b      	ldreq	r3, [r3, #20]
 800575e:	699b      	ldrne	r3, [r3, #24]
 8005760:	ea27 0303 	bic.w	r3, r7, r3
 8005764:	b29b      	uxth	r3, r3
 8005766:	fab3 f383 	clz	r3, r3
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	4599      	cmp	r9, r3
 800576e:	d1d7      	bne.n	8005720 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005770:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8005772:	2220      	movs	r2, #32
          return HAL_ERROR;
 8005774:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005776:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005778:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800577c:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005780:	6c32      	ldr	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005782:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005786:	f042 0220 	orr.w	r2, r2, #32
 800578a:	6432      	str	r2, [r6, #64]	; 0x40
}
 800578c:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08005790 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005794:	4604      	mov	r4, r0
 8005796:	460f      	mov	r7, r1
 8005798:	4616      	mov	r6, r2
 800579a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800579c:	6825      	ldr	r5, [r4, #0]
 800579e:	6968      	ldr	r0, [r5, #20]
 80057a0:	ea27 0000 	bic.w	r0, r7, r0
 80057a4:	b280      	uxth	r0, r0
 80057a6:	b1b8      	cbz	r0, 80057d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057a8:	696b      	ldr	r3, [r5, #20]
 80057aa:	055a      	lsls	r2, r3, #21
 80057ac:	d516      	bpl.n	80057dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ae:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80057b0:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057b6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057b8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80057bc:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057be:	2300      	movs	r3, #0
 80057c0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80057cc:	f042 0204 	orr.w	r2, r2, #4
          return HAL_ERROR;
 80057d0:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057d2:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80057d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80057d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80057dc:	1c73      	adds	r3, r6, #1
 80057de:	d0de      	beq.n	800579e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e0:	f7ff f9f2 	bl	8004bc8 <HAL_GetTick>
 80057e4:	eba0 0008 	sub.w	r0, r0, r8
 80057e8:	42b0      	cmp	r0, r6
 80057ea:	d801      	bhi.n	80057f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 80057ec:	2e00      	cmp	r6, #0
 80057ee:	d1d5      	bne.n	800579c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	695a      	ldr	r2, [r3, #20]
 80057f4:	ea27 0202 	bic.w	r2, r7, r2
 80057f8:	b292      	uxth	r2, r2
 80057fa:	2a00      	cmp	r2, #0
 80057fc:	d0ce      	beq.n	800579c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057fe:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8005800:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005802:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005804:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005808:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800580c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800580e:	f042 0220 	orr.w	r2, r2, #32
 8005812:	e7dd      	b.n	80057d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08005814 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	4604      	mov	r4, r0
 8005818:	460d      	mov	r5, r1
 800581a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	061b      	lsls	r3, r3, #24
 8005822:	d501      	bpl.n	8005828 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8005824:	2000      	movs	r0, #0
}
 8005826:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005828:	4620      	mov	r0, r4
 800582a:	f7ff ff58 	bl	80056de <I2C_IsAcknowledgeFailed>
 800582e:	b9c8      	cbnz	r0, 8005864 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005830:	1c6a      	adds	r2, r5, #1
 8005832:	d0f3      	beq.n	800581c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005834:	f7ff f9c8 	bl	8004bc8 <HAL_GetTick>
 8005838:	1b80      	subs	r0, r0, r6
 800583a:	42a8      	cmp	r0, r5
 800583c:	d801      	bhi.n	8005842 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800583e:	2d00      	cmp	r5, #0
 8005840:	d1ec      	bne.n	800581c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800584a:	d1e7      	bne.n	800581c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 800584c:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800584e:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005850:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005854:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005858:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 800585a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800585e:	f042 0220 	orr.w	r2, r2, #32
 8005862:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005864:	2001      	movs	r0, #1
 8005866:	e7de      	b.n	8005826 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08005868 <I2C_RequestMemoryWrite>:
{
 8005868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800586c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800586e:	6802      	ldr	r2, [r0, #0]
{
 8005870:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005872:	6813      	ldr	r3, [r2, #0]
{
 8005874:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800587a:	6013      	str	r3, [r2, #0]
{
 800587c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8005880:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005882:	463b      	mov	r3, r7
 8005884:	2200      	movs	r2, #0
 8005886:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800588a:	f8cd 8000 	str.w	r8, [sp]
{
 800588e:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005890:	f7ff ff3e 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	b138      	cbz	r0, 80058a8 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	05db      	lsls	r3, r3, #23
 800589c:	d502      	bpl.n	80058a4 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800589e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058a2:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80058a4:	2003      	movs	r0, #3
 80058a6:	e00a      	b.n	80058be <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058a8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80058ac:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058ae:	463a      	mov	r2, r7
 80058b0:	4643      	mov	r3, r8
 80058b2:	4620      	mov	r0, r4
 80058b4:	4917      	ldr	r1, [pc, #92]	; (8005914 <I2C_RequestMemoryWrite+0xac>)
 80058b6:	f7ff ff6b 	bl	8005790 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058ba:	b118      	cbz	r0, 80058c4 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 80058bc:	2001      	movs	r0, #1
}
 80058be:	b005      	add	sp, #20
 80058c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	9003      	str	r0, [sp, #12]
 80058c8:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ca:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058cc:	9203      	str	r2, [sp, #12]
 80058ce:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d0:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d2:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d4:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d8:	f7ff ff9c 	bl	8005814 <I2C_WaitOnTXEFlagUntilTimeout>
 80058dc:	b140      	cbz	r0, 80058f0 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058e0:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e2:	bf01      	itttt	eq
 80058e4:	6822      	ldreq	r2, [r4, #0]
 80058e6:	6813      	ldreq	r3, [r2, #0]
 80058e8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80058ec:	6013      	streq	r3, [r2, #0]
 80058ee:	e7e5      	b.n	80058bc <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058f0:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058f6:	d102      	bne.n	80058fe <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058f8:	b2ed      	uxtb	r5, r5
 80058fa:	611d      	str	r5, [r3, #16]
 80058fc:	e7df      	b.n	80058be <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058fe:	0a2a      	lsrs	r2, r5, #8
 8005900:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005902:	4639      	mov	r1, r7
 8005904:	4642      	mov	r2, r8
 8005906:	4620      	mov	r0, r4
 8005908:	f7ff ff84 	bl	8005814 <I2C_WaitOnTXEFlagUntilTimeout>
 800590c:	2800      	cmp	r0, #0
 800590e:	d1e6      	bne.n	80058de <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	e7f1      	b.n	80058f8 <I2C_RequestMemoryWrite+0x90>
 8005914:	00010002 	.word	0x00010002

08005918 <I2C_RequestMemoryRead>:
{
 8005918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800591c:	469a      	mov	sl, r3
 800591e:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005922:	6803      	ldr	r3, [r0, #0]
{
 8005924:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005926:	681a      	ldr	r2, [r3, #0]
{
 8005928:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800592a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800592e:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005930:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005932:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005936:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800593a:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800593c:	463b      	mov	r3, r7
 800593e:	2200      	movs	r2, #0
 8005940:	f8cd 8000 	str.w	r8, [sp]
{
 8005944:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005946:	f7ff fee3 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	b148      	cbz	r0, 8005962 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800594e:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005950:	05db      	lsls	r3, r3, #23
 8005952:	d502      	bpl.n	800595a <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005958:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800595a:	2003      	movs	r0, #3
}
 800595c:	b004      	add	sp, #16
 800595e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005962:	fa5f f986 	uxtb.w	r9, r6
 8005966:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800596a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800596c:	463a      	mov	r2, r7
 800596e:	4643      	mov	r3, r8
 8005970:	4620      	mov	r0, r4
 8005972:	4929      	ldr	r1, [pc, #164]	; (8005a18 <I2C_RequestMemoryRead+0x100>)
 8005974:	f7ff ff0c 	bl	8005790 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005978:	b108      	cbz	r0, 800597e <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 800597a:	2001      	movs	r0, #1
 800597c:	e7ee      	b.n	800595c <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	9003      	str	r0, [sp, #12]
 8005982:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005984:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005986:	9203      	str	r2, [sp, #12]
 8005988:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800598a:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800598c:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800598e:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005990:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005992:	f7ff ff3f 	bl	8005814 <I2C_WaitOnTXEFlagUntilTimeout>
 8005996:	b140      	cbz	r0, 80059aa <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005998:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800599a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800599c:	bf01      	itttt	eq
 800599e:	6822      	ldreq	r2, [r4, #0]
 80059a0:	6813      	ldreq	r3, [r2, #0]
 80059a2:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80059a6:	6013      	streq	r3, [r2, #0]
 80059a8:	e7e7      	b.n	800597a <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059aa:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ae:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059b0:	d11a      	bne.n	80059e8 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059b2:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059b4:	4642      	mov	r2, r8
 80059b6:	4639      	mov	r1, r7
 80059b8:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ba:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059bc:	f7ff ff2a 	bl	8005814 <I2C_WaitOnTXEFlagUntilTimeout>
 80059c0:	4602      	mov	r2, r0
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d1e8      	bne.n	8005998 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059c6:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059c8:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ca:	680b      	ldr	r3, [r1, #0]
 80059cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d0:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059d2:	463b      	mov	r3, r7
 80059d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059d8:	f8cd 8000 	str.w	r8, [sp]
 80059dc:	f7ff fe98 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 80059e0:	6822      	ldr	r2, [r4, #0]
 80059e2:	b160      	cbz	r0, 80059fe <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059e4:	6813      	ldr	r3, [r2, #0]
 80059e6:	e7b3      	b.n	8005950 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059e8:	0a2a      	lsrs	r2, r5, #8
 80059ea:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ec:	4639      	mov	r1, r7
 80059ee:	4642      	mov	r2, r8
 80059f0:	4620      	mov	r0, r4
 80059f2:	f7ff ff0f 	bl	8005814 <I2C_WaitOnTXEFlagUntilTimeout>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d1ce      	bne.n	8005998 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	e7d9      	b.n	80059b2 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059fe:	f049 0301 	orr.w	r3, r9, #1
 8005a02:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a04:	4620      	mov	r0, r4
 8005a06:	4643      	mov	r3, r8
 8005a08:	463a      	mov	r2, r7
 8005a0a:	4903      	ldr	r1, [pc, #12]	; (8005a18 <I2C_RequestMemoryRead+0x100>)
 8005a0c:	f7ff fec0 	bl	8005790 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8005a10:	3800      	subs	r0, #0
 8005a12:	bf18      	it	ne
 8005a14:	2001      	movne	r0, #1
 8005a16:	e7a1      	b.n	800595c <I2C_RequestMemoryRead+0x44>
 8005a18:	00010002 	.word	0x00010002

08005a1c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	4604      	mov	r4, r0
 8005a20:	460d      	mov	r5, r1
 8005a22:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	075b      	lsls	r3, r3, #29
 8005a2a:	d501      	bpl.n	8005a30 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8005a2c:	2000      	movs	r0, #0
}
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a30:	4620      	mov	r0, r4
 8005a32:	f7ff fe54 	bl	80056de <I2C_IsAcknowledgeFailed>
 8005a36:	b9c8      	cbnz	r0, 8005a6c <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005a38:	1c6a      	adds	r2, r5, #1
 8005a3a:	d0f3      	beq.n	8005a24 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a3c:	f7ff f8c4 	bl	8004bc8 <HAL_GetTick>
 8005a40:	1b80      	subs	r0, r0, r6
 8005a42:	42a8      	cmp	r0, r5
 8005a44:	d801      	bhi.n	8005a4a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8005a46:	2d00      	cmp	r5, #0
 8005a48:	d1ec      	bne.n	8005a24 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f013 0304 	ands.w	r3, r3, #4
 8005a52:	d1e7      	bne.n	8005a24 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a54:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a56:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a58:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a5c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a60:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005a62:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a66:	f042 0220 	orr.w	r2, r2, #32
 8005a6a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005a6c:	2001      	movs	r0, #1
 8005a6e:	e7de      	b.n	8005a2e <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08005a70 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	4604      	mov	r4, r0
 8005a74:	460d      	mov	r5, r1
 8005a76:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a78:	6821      	ldr	r1, [r4, #0]
 8005a7a:	694b      	ldr	r3, [r1, #20]
 8005a7c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005a80:	d001      	beq.n	8005a86 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8005a82:	2000      	movs	r0, #0
 8005a84:	e010      	b.n	8005aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a86:	694a      	ldr	r2, [r1, #20]
 8005a88:	06d2      	lsls	r2, r2, #27
 8005a8a:	d50e      	bpl.n	8005aaa <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a8c:	f06f 0210 	mvn.w	r2, #16
 8005a90:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a92:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a94:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a96:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005aa0:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aa2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005aa4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005aa8:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aaa:	f7ff f88d 	bl	8004bc8 <HAL_GetTick>
 8005aae:	1b80      	subs	r0, r0, r6
 8005ab0:	42a8      	cmp	r0, r5
 8005ab2:	d801      	bhi.n	8005ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8005ab4:	2d00      	cmp	r5, #0
 8005ab6:	d1df      	bne.n	8005a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005ac0:	d1da      	bne.n	8005a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ac2:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ac6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ace:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005ad0:	f042 0220 	orr.w	r2, r2, #32
 8005ad4:	e7e4      	b.n	8005aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08005ad8 <HAL_I2C_Init>:
{
 8005ad8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8005ada:	4604      	mov	r4, r0
 8005adc:	b908      	cbnz	r0, 8005ae2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8005ade:	2001      	movs	r0, #1
}
 8005ae0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ae2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005ae6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005aea:	b91b      	cbnz	r3, 8005af4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8005aec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005af0:	f7fd fb46 	bl	8003180 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005af4:	2324      	movs	r3, #36	; 0x24
 8005af6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b12:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b14:	f000 fd6a 	bl	80065ec <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b18:	4b3f      	ldr	r3, [pc, #252]	; (8005c18 <HAL_I2C_Init+0x140>)
 8005b1a:	6865      	ldr	r5, [r4, #4]
 8005b1c:	429d      	cmp	r5, r3
 8005b1e:	bf94      	ite	ls
 8005b20:	4b3e      	ldrls	r3, [pc, #248]	; (8005c1c <HAL_I2C_Init+0x144>)
 8005b22:	4b3f      	ldrhi	r3, [pc, #252]	; (8005c20 <HAL_I2C_Init+0x148>)
 8005b24:	4298      	cmp	r0, r3
 8005b26:	bf8c      	ite	hi
 8005b28:	2300      	movhi	r3, #0
 8005b2a:	2301      	movls	r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1d6      	bne.n	8005ade <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b30:	4e39      	ldr	r6, [pc, #228]	; (8005c18 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8005b32:	4b3c      	ldr	r3, [pc, #240]	; (8005c24 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b34:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8005b36:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b3a:	bf88      	it	hi
 8005b3c:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b40:	6822      	ldr	r2, [r4, #0]
 8005b42:	6851      	ldr	r1, [r2, #4]
 8005b44:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005b48:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b4c:	bf82      	ittt	hi
 8005b4e:	4373      	mulhi	r3, r6
 8005b50:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8005b54:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b58:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b5a:	6a11      	ldr	r1, [r2, #32]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005b62:	430b      	orrs	r3, r1
 8005b64:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b66:	69d1      	ldr	r1, [r2, #28]
 8005b68:	1e43      	subs	r3, r0, #1
 8005b6a:	482b      	ldr	r0, [pc, #172]	; (8005c18 <HAL_I2C_Init+0x140>)
 8005b6c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8005b70:	4285      	cmp	r5, r0
 8005b72:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005b76:	d832      	bhi.n	8005bde <HAL_I2C_Init+0x106>
 8005b78:	006d      	lsls	r5, r5, #1
 8005b7a:	fbb3 f3f5 	udiv	r3, r3, r5
 8005b7e:	f640 70fc 	movw	r0, #4092	; 0xffc
 8005b82:	3301      	adds	r3, #1
 8005b84:	4203      	tst	r3, r0
 8005b86:	d042      	beq.n	8005c0e <HAL_I2C_Init+0x136>
 8005b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b8c:	4319      	orrs	r1, r3
 8005b8e:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b90:	6811      	ldr	r1, [r2, #0]
 8005b92:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8005b96:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8005b9a:	4303      	orrs	r3, r0
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ba0:	6891      	ldr	r1, [r2, #8]
 8005ba2:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8005ba6:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8005baa:	4303      	orrs	r3, r0
 8005bac:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005bb4:	68d1      	ldr	r1, [r2, #12]
 8005bb6:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8005bba:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005bbe:	4303      	orrs	r3, r0
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005bc4:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bc6:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005bce:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bd0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005bd2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bd6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8005bdc:	e780      	b.n	8005ae0 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bde:	68a0      	ldr	r0, [r4, #8]
 8005be0:	b950      	cbnz	r0, 8005bf8 <HAL_I2C_Init+0x120>
 8005be2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005be6:	fbb3 f3f5 	udiv	r3, r3, r5
 8005bea:	3301      	adds	r3, #1
 8005bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf0:	b17b      	cbz	r3, 8005c12 <HAL_I2C_Init+0x13a>
 8005bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf6:	e7c9      	b.n	8005b8c <HAL_I2C_Init+0xb4>
 8005bf8:	2019      	movs	r0, #25
 8005bfa:	4368      	muls	r0, r5
 8005bfc:	fbb3 f3f0 	udiv	r3, r3, r0
 8005c00:	3301      	adds	r3, #1
 8005c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c06:	b123      	cbz	r3, 8005c12 <HAL_I2C_Init+0x13a>
 8005c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c0c:	e7be      	b.n	8005b8c <HAL_I2C_Init+0xb4>
 8005c0e:	2304      	movs	r3, #4
 8005c10:	e7bc      	b.n	8005b8c <HAL_I2C_Init+0xb4>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e7ba      	b.n	8005b8c <HAL_I2C_Init+0xb4>
 8005c16:	bf00      	nop
 8005c18:	000186a0 	.word	0x000186a0
 8005c1c:	001e847f 	.word	0x001e847f
 8005c20:	003d08ff 	.word	0x003d08ff
 8005c24:	000f4240 	.word	0x000f4240

08005c28 <HAL_I2C_Mem_Write>:
{
 8005c28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	4699      	mov	r9, r3
 8005c30:	460f      	mov	r7, r1
 8005c32:	4690      	mov	r8, r2
 8005c34:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8005c36:	f7fe ffc7 	bl	8004bc8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c3a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8005c3e:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d003      	beq.n	8005c4c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8005c44:	2002      	movs	r0, #2
}
 8005c46:	b003      	add	sp, #12
 8005c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c4c:	9000      	str	r0, [sp, #0]
 8005c4e:	2319      	movs	r3, #25
 8005c50:	2201      	movs	r2, #1
 8005c52:	4620      	mov	r0, r4
 8005c54:	493a      	ldr	r1, [pc, #232]	; (8005d40 <HAL_I2C_Mem_Write+0x118>)
 8005c56:	f7ff fd5b 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d1f2      	bne.n	8005c44 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8005c5e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d0ee      	beq.n	8005c44 <HAL_I2C_Mem_Write+0x1c>
 8005c66:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c68:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005c6a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c6e:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c70:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c72:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8005c74:	bf58      	it	pl
 8005c76:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c78:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8005c7a:	bf5c      	itt	pl
 8005c7c:	f043 0301 	orrpl.w	r3, r3, #1
 8005c80:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c82:	6803      	ldr	r3, [r0, #0]
 8005c84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c88:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c8a:	2321      	movs	r3, #33	; 0x21
 8005c8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c90:	2340      	movs	r3, #64	; 0x40
 8005c92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c96:	2300      	movs	r3, #0
 8005c98:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c9c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8005c9e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ca0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ca4:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 8005ca8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005caa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005cac:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cae:	4b25      	ldr	r3, [pc, #148]	; (8005d44 <HAL_I2C_Mem_Write+0x11c>)
 8005cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cb2:	464b      	mov	r3, r9
 8005cb4:	f7ff fdd8 	bl	8005868 <I2C_RequestMemoryWrite>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d02a      	beq.n	8005d12 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8005cbc:	2001      	movs	r0, #1
 8005cbe:	e7c2      	b.n	8005c46 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cc0:	f7ff fda8 	bl	8005814 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cc4:	b140      	cbz	r0, 8005cd8 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cc8:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cca:	bf01      	itttt	eq
 8005ccc:	6822      	ldreq	r2, [r4, #0]
 8005cce:	6813      	ldreq	r3, [r2, #0]
 8005cd0:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8005cd4:	6013      	streq	r3, [r2, #0]
 8005cd6:	e7f1      	b.n	8005cbc <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cda:	6827      	ldr	r7, [r4, #0]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005ce2:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8005ce4:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005ce6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005ce8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005cea:	3a01      	subs	r2, #1
 8005cec:	b292      	uxth	r2, r2
 8005cee:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cf0:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8005cf2:	1e48      	subs	r0, r1, #1
 8005cf4:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cf6:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8005cf8:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cfa:	d50a      	bpl.n	8005d12 <HAL_I2C_Mem_Write+0xea>
 8005cfc:	b148      	cbz	r0, 8005d12 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cfe:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8005d00:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d02:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8005d04:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005d06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005d08:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005d0e:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005d10:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d12:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d14:	462a      	mov	r2, r5
 8005d16:	4631      	mov	r1, r6
 8005d18:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1d0      	bne.n	8005cc0 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d1e:	f7ff fe7d 	bl	8005a1c <I2C_WaitOnBTFFlagUntilTimeout>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d1cf      	bne.n	8005cc6 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d26:	6822      	ldr	r2, [r4, #0]
 8005d28:	6813      	ldr	r3, [r2, #0]
 8005d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d2e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005d30:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8005d32:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8005d36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8005d3e:	e782      	b.n	8005c46 <HAL_I2C_Mem_Write+0x1e>
 8005d40:	00100002 	.word	0x00100002
 8005d44:	ffff0000 	.word	0xffff0000

08005d48 <HAL_I2C_Mem_Read>:
{
 8005d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d4c:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8005d4e:	2300      	movs	r3, #0
{
 8005d50:	4604      	mov	r4, r0
 8005d52:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8005d54:	9303      	str	r3, [sp, #12]
{
 8005d56:	460d      	mov	r5, r1
 8005d58:	4690      	mov	r8, r2
 8005d5a:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8005d5c:	f7fe ff34 	bl	8004bc8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d60:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8005d64:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	d004      	beq.n	8005d74 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8005d6a:	2502      	movs	r5, #2
}
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	b009      	add	sp, #36	; 0x24
 8005d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d74:	9000      	str	r0, [sp, #0]
 8005d76:	2319      	movs	r3, #25
 8005d78:	2201      	movs	r2, #1
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	498d      	ldr	r1, [pc, #564]	; (8005fb4 <HAL_I2C_Mem_Read+0x26c>)
 8005d7e:	f7ff fcc7 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d1f1      	bne.n	8005d6a <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8005d86:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d0ed      	beq.n	8005d6a <HAL_I2C_Mem_Read+0x22>
 8005d8e:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d90:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005d92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d96:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d98:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d9a:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8005d9c:	bf58      	it	pl
 8005d9e:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005da0:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8005da2:	bf5c      	itt	pl
 8005da4:	f043 0301 	orrpl.w	r3, r3, #1
 8005da8:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005daa:	6803      	ldr	r3, [r0, #0]
 8005dac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005db0:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005db2:	2322      	movs	r3, #34	; 0x22
 8005db4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005db8:	2340      	movs	r3, #64	; 0x40
 8005dba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005dc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dc4:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8005dc6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dc8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dcc:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 8005dd0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005dd4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dd6:	4b78      	ldr	r3, [pc, #480]	; (8005fb8 <HAL_I2C_Mem_Read+0x270>)
 8005dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dda:	464b      	mov	r3, r9
 8005ddc:	f7ff fd9c 	bl	8005918 <I2C_RequestMemoryRead>
 8005de0:	4605      	mov	r5, r0
 8005de2:	b108      	cbz	r0, 8005de8 <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 8005de4:	2501      	movs	r5, #1
 8005de6:	e7c1      	b.n	8005d6c <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8005de8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dea:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8005dec:	b9c2      	cbnz	r2, 8005e20 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dee:	9004      	str	r0, [sp, #16]
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	9204      	str	r2, [sp, #16]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	9204      	str	r2, [sp, #16]
 8005df8:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e00:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e02:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8005fbc <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e06:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8005fc0 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 8005e0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d137      	bne.n	8005e80 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e10:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8005e12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8005e16:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8005e1e:	e7a5      	b.n	8005d6c <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8005e20:	2a01      	cmp	r2, #1
 8005e22:	d111      	bne.n	8005e48 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e2c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	9005      	str	r0, [sp, #20]
 8005e32:	695a      	ldr	r2, [r3, #20]
 8005e34:	9205      	str	r2, [sp, #20]
 8005e36:	699a      	ldr	r2, [r3, #24]
 8005e38:	9205      	str	r2, [sp, #20]
 8005e3a:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e44:	b662      	cpsie	i
}
 8005e46:	e7dc      	b.n	8005e02 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 8005e48:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e4a:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8005e4c:	d10e      	bne.n	8005e6c <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e54:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	9006      	str	r0, [sp, #24]
 8005e5a:	695a      	ldr	r2, [r3, #20]
 8005e5c:	9206      	str	r2, [sp, #24]
 8005e5e:	699a      	ldr	r2, [r3, #24]
 8005e60:	9206      	str	r2, [sp, #24]
 8005e62:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e6a:	e7ea      	b.n	8005e42 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e70:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e72:	9007      	str	r0, [sp, #28]
 8005e74:	695a      	ldr	r2, [r3, #20]
 8005e76:	9207      	str	r2, [sp, #28]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	9307      	str	r3, [sp, #28]
 8005e7c:	9b07      	ldr	r3, [sp, #28]
 8005e7e:	e7c0      	b.n	8005e02 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d878      	bhi.n	8005f76 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d115      	bne.n	8005eb4 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e88:	4632      	mov	r2, r6
 8005e8a:	4639      	mov	r1, r7
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f7ff fdef 	bl	8005a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	d1a6      	bne.n	8005de4 <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e9c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005ea4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005eaa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005eb2:	e7aa      	b.n	8005e0a <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8005eb4:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	463b      	mov	r3, r7
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8005ec2:	d118      	bne.n	8005ef6 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ec4:	f7ff fc24 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d18b      	bne.n	8005de4 <HAL_I2C_Mem_Read+0x9c>
 8005ecc:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ed6:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005edc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005ee4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005eea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005ef2:	b662      	cpsie	i
 8005ef4:	e7cf      	b.n	8005e96 <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ef6:	f7ff fc0b 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	f47f af72 	bne.w	8005de4 <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f00:	6822      	ldr	r2, [r4, #0]
 8005f02:	6813      	ldr	r3, [r2, #0]
 8005f04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f08:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f0a:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f0c:	f246 11a8 	movw	r1, #25000	; 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f16:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005f18:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f1a:	1c53      	adds	r3, r2, #1
 8005f1c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005f1e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005f20:	3b01      	subs	r3, #1
 8005f22:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005f24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f2c:	f8d9 3000 	ldr.w	r3, [r9]
 8005f30:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f34:	2123      	movs	r1, #35	; 0x23
 8005f36:	434b      	muls	r3, r1
 8005f38:	9303      	str	r3, [sp, #12]
            count--;
 8005f3a:	9b03      	ldr	r3, [sp, #12]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	b96b      	cbnz	r3, 8005f60 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8005f44:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005f46:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005f48:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f52:	f042 0220 	orr.w	r2, r2, #32
 8005f56:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005f58:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8005f5a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8005f5e:	e741      	b.n	8005de4 <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	6959      	ldr	r1, [r3, #20]
 8005f64:	0748      	lsls	r0, r1, #29
 8005f66:	d5e8      	bpl.n	8005f3a <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f68:	6819      	ldr	r1, [r3, #0]
 8005f6a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005f6e:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	7053      	strb	r3, [r2, #1]
 8005f74:	e7b3      	b.n	8005ede <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f76:	4632      	mov	r2, r6
 8005f78:	4639      	mov	r1, r7
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f7ff fd78 	bl	8005a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	f47f af2f 	bne.w	8005de4 <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f8c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005f8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f90:	1c53      	adds	r3, r2, #1
 8005f92:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005f94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005f96:	3b01      	subs	r3, #1
 8005f98:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005f9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	6959      	ldr	r1, [r3, #20]
 8005fa6:	0749      	lsls	r1, r1, #29
 8005fa8:	f57f af2f 	bpl.w	8005e0a <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	7053      	strb	r3, [r2, #1]
 8005fb0:	e775      	b.n	8005e9e <HAL_I2C_Mem_Read+0x156>
 8005fb2:	bf00      	nop
 8005fb4:	00100002 	.word	0x00100002
 8005fb8:	ffff0000 	.word	0xffff0000
 8005fbc:	00010004 	.word	0x00010004
 8005fc0:	20000000 	.word	0x20000000

08005fc4 <HAL_I2C_IsDeviceReady>:
{
 8005fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc8:	4604      	mov	r4, r0
 8005fca:	b085      	sub	sp, #20
 8005fcc:	461f      	mov	r7, r3
 8005fce:	4688      	mov	r8, r1
 8005fd0:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8005fd2:	f7fe fdf9 	bl	8004bc8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8005fda:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	d003      	beq.n	8005fe8 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8005fe0:	2002      	movs	r0, #2
}
 8005fe2:	b005      	add	sp, #20
 8005fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fe8:	9000      	str	r0, [sp, #0]
 8005fea:	2319      	movs	r3, #25
 8005fec:	2201      	movs	r2, #1
 8005fee:	4620      	mov	r0, r4
 8005ff0:	494a      	ldr	r1, [pc, #296]	; (800611c <HAL_I2C_IsDeviceReady+0x158>)
 8005ff2:	f7ff fb8d 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d1f2      	bne.n	8005fe0 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8005ffa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d0ee      	beq.n	8005fe0 <HAL_I2C_IsDeviceReady+0x1c>
 8006002:	2301      	movs	r3, #1
 8006004:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006008:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800600a:	2600      	movs	r6, #0
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800600c:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800600e:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800611c <HAL_I2C_IsDeviceReady+0x158>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006012:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8006014:	bf58      	it	pl
 8006016:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006018:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 800601c:	bf5c      	itt	pl
 800601e:	f042 0201 	orrpl.w	r2, r2, #1
 8006022:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800602a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800602c:	2324      	movs	r3, #36	; 0x24
 800602e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006032:	4b3b      	ldr	r3, [pc, #236]	; (8006120 <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006034:	6426      	str	r6, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006036:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006038:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800603a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800603e:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006040:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006046:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006048:	463b      	mov	r3, r7
 800604a:	2200      	movs	r2, #0
 800604c:	9500      	str	r5, [sp, #0]
 800604e:	f7ff fb5f 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	b138      	cbz	r0, 8006066 <HAL_I2C_IsDeviceReady+0xa2>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	05db      	lsls	r3, r3, #23
 800605a:	d502      	bpl.n	8006062 <HAL_I2C_IsDeviceReady+0x9e>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800605c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006060:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8006062:	2003      	movs	r0, #3
 8006064:	e7bd      	b.n	8005fe2 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006066:	f8c3 8010 	str.w	r8, [r3, #16]
      tickstart = HAL_GetTick();
 800606a:	f7fe fdad 	bl	8004bc8 <HAL_GetTick>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800606e:	f04f 09a0 	mov.w	r9, #160	; 0xa0
      tickstart = HAL_GetTick();
 8006072:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006078:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800607a:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800607e:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006082:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8006086:	29a0      	cmp	r1, #160	; 0xa0
 8006088:	d001      	beq.n	800608e <HAL_I2C_IsDeviceReady+0xca>
 800608a:	4313      	orrs	r3, r2
 800608c:	d01d      	beq.n	80060ca <HAL_I2C_IsDeviceReady+0x106>
      hi2c->State = HAL_I2C_STATE_READY;
 800608e:	f04f 0920 	mov.w	r9, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006092:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8006094:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006098:	695a      	ldr	r2, [r3, #20]
 800609a:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a4:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80060a6:	d025      	beq.n	80060f4 <HAL_I2C_IsDeviceReady+0x130>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a8:	2200      	movs	r2, #0
 80060aa:	9203      	str	r2, [sp, #12]
 80060ac:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060ae:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060b0:	9203      	str	r2, [sp, #12]
 80060b2:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060b4:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060b6:	9303      	str	r3, [sp, #12]
 80060b8:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060ba:	4918      	ldr	r1, [pc, #96]	; (800611c <HAL_I2C_IsDeviceReady+0x158>)
 80060bc:	2319      	movs	r3, #25
 80060be:	9500      	str	r5, [sp, #0]
 80060c0:	f7ff fb26 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 80060c4:	b188      	cbz	r0, 80060ea <HAL_I2C_IsDeviceReady+0x126>
    return HAL_ERROR;
 80060c6:	2001      	movs	r0, #1
 80060c8:	e78b      	b.n	8005fe2 <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060ca:	f7fe fd7d 	bl	8004bc8 <HAL_GetTick>
 80060ce:	1b40      	subs	r0, r0, r5
 80060d0:	42b8      	cmp	r0, r7
 80060d2:	d800      	bhi.n	80060d6 <HAL_I2C_IsDeviceReady+0x112>
 80060d4:	b90f      	cbnz	r7, 80060da <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80060d6:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80060de:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80060e0:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80060e4:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80060e8:	e7cb      	b.n	8006082 <HAL_I2C_IsDeviceReady+0xbe>
        hi2c->State = HAL_I2C_STATE_READY;
 80060ea:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80060ee:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 80060f2:	e776      	b.n	8005fe2 <HAL_I2C_IsDeviceReady+0x1e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060f8:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060fa:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060fc:	4620      	mov	r0, r4
 80060fe:	2319      	movs	r3, #25
 8006100:	2201      	movs	r2, #1
 8006102:	9500      	str	r5, [sp, #0]
 8006104:	f7ff fb04 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8006108:	2800      	cmp	r0, #0
 800610a:	d1dc      	bne.n	80060c6 <HAL_I2C_IsDeviceReady+0x102>
      I2C_Trials++;
 800610c:	3601      	adds	r6, #1
    while (I2C_Trials < Trials);
 800610e:	4556      	cmp	r6, sl
 8006110:	d392      	bcc.n	8006038 <HAL_I2C_IsDeviceReady+0x74>
    hi2c->State = HAL_I2C_STATE_READY;
 8006112:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8006116:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 800611a:	e7d4      	b.n	80060c6 <HAL_I2C_IsDeviceReady+0x102>
 800611c:	00100002 	.word	0x00100002
 8006120:	ffff0000 	.word	0xffff0000

08006124 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006124:	2201      	movs	r2, #1
 8006126:	4b01      	ldr	r3, [pc, #4]	; (800612c <HAL_PWR_EnableBkUpAccess+0x8>)
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	4770      	bx	lr
 800612c:	420e0000 	.word	0x420e0000

08006130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006130:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006134:	4605      	mov	r5, r0
 8006136:	b338      	cbz	r0, 8006188 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006138:	6803      	ldr	r3, [r0, #0]
 800613a:	07db      	lsls	r3, r3, #31
 800613c:	d410      	bmi.n	8006160 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800613e:	682b      	ldr	r3, [r5, #0]
 8006140:	079f      	lsls	r7, r3, #30
 8006142:	d45e      	bmi.n	8006202 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	0719      	lsls	r1, r3, #28
 8006148:	f100 8095 	bmi.w	8006276 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	075a      	lsls	r2, r3, #29
 8006150:	f100 80c1 	bmi.w	80062d6 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006154:	69e8      	ldr	r0, [r5, #28]
 8006156:	2800      	cmp	r0, #0
 8006158:	f040 812c 	bne.w	80063b4 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800615c:	2000      	movs	r0, #0
 800615e:	e029      	b.n	80061b4 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006160:	4c90      	ldr	r4, [pc, #576]	; (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006162:	6863      	ldr	r3, [r4, #4]
 8006164:	f003 030c 	and.w	r3, r3, #12
 8006168:	2b04      	cmp	r3, #4
 800616a:	d007      	beq.n	800617c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800616c:	6863      	ldr	r3, [r4, #4]
 800616e:	f003 030c 	and.w	r3, r3, #12
 8006172:	2b08      	cmp	r3, #8
 8006174:	d10a      	bne.n	800618c <HAL_RCC_OscConfig+0x5c>
 8006176:	6863      	ldr	r3, [r4, #4]
 8006178:	03de      	lsls	r6, r3, #15
 800617a:	d507      	bpl.n	800618c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	039c      	lsls	r4, r3, #14
 8006180:	d5dd      	bpl.n	800613e <HAL_RCC_OscConfig+0xe>
 8006182:	686b      	ldr	r3, [r5, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1da      	bne.n	800613e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8006188:	2001      	movs	r0, #1
 800618a:	e013      	b.n	80061b4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800618c:	686b      	ldr	r3, [r5, #4]
 800618e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006192:	d112      	bne.n	80061ba <HAL_RCC_OscConfig+0x8a>
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800619a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800619c:	f7fe fd14 	bl	8004bc8 <HAL_GetTick>
 80061a0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	0398      	lsls	r0, r3, #14
 80061a6:	d4ca      	bmi.n	800613e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061a8:	f7fe fd0e 	bl	8004bc8 <HAL_GetTick>
 80061ac:	1b80      	subs	r0, r0, r6
 80061ae:	2864      	cmp	r0, #100	; 0x64
 80061b0:	d9f7      	bls.n	80061a2 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80061b2:	2003      	movs	r0, #3
}
 80061b4:	b002      	add	sp, #8
 80061b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ba:	b99b      	cbnz	r3, 80061e4 <HAL_RCC_OscConfig+0xb4>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061c2:	6023      	str	r3, [r4, #0]
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80061cc:	f7fe fcfc 	bl	8004bc8 <HAL_GetTick>
 80061d0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	0399      	lsls	r1, r3, #14
 80061d6:	d5b2      	bpl.n	800613e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061d8:	f7fe fcf6 	bl	8004bc8 <HAL_GetTick>
 80061dc:	1b80      	subs	r0, r0, r6
 80061de:	2864      	cmp	r0, #100	; 0x64
 80061e0:	d9f7      	bls.n	80061d2 <HAL_RCC_OscConfig+0xa2>
 80061e2:	e7e6      	b.n	80061b2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	d103      	bne.n	80061f4 <HAL_RCC_OscConfig+0xc4>
 80061ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	e7cf      	b.n	8006194 <HAL_RCC_OscConfig+0x64>
 80061f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006200:	e7cb      	b.n	800619a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006202:	4c68      	ldr	r4, [pc, #416]	; (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006204:	6863      	ldr	r3, [r4, #4]
 8006206:	f013 0f0c 	tst.w	r3, #12
 800620a:	d007      	beq.n	800621c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800620c:	6863      	ldr	r3, [r4, #4]
 800620e:	f003 030c 	and.w	r3, r3, #12
 8006212:	2b08      	cmp	r3, #8
 8006214:	d110      	bne.n	8006238 <HAL_RCC_OscConfig+0x108>
 8006216:	6863      	ldr	r3, [r4, #4]
 8006218:	03da      	lsls	r2, r3, #15
 800621a:	d40d      	bmi.n	8006238 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	079b      	lsls	r3, r3, #30
 8006220:	d502      	bpl.n	8006228 <HAL_RCC_OscConfig+0xf8>
 8006222:	692b      	ldr	r3, [r5, #16]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d1af      	bne.n	8006188 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	696a      	ldr	r2, [r5, #20]
 800622c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006230:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	e785      	b.n	8006144 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006238:	692a      	ldr	r2, [r5, #16]
 800623a:	4b5b      	ldr	r3, [pc, #364]	; (80063a8 <HAL_RCC_OscConfig+0x278>)
 800623c:	b16a      	cbz	r2, 800625a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800623e:	2201      	movs	r2, #1
 8006240:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006242:	f7fe fcc1 	bl	8004bc8 <HAL_GetTick>
 8006246:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	079f      	lsls	r7, r3, #30
 800624c:	d4ec      	bmi.n	8006228 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800624e:	f7fe fcbb 	bl	8004bc8 <HAL_GetTick>
 8006252:	1b80      	subs	r0, r0, r6
 8006254:	2802      	cmp	r0, #2
 8006256:	d9f7      	bls.n	8006248 <HAL_RCC_OscConfig+0x118>
 8006258:	e7ab      	b.n	80061b2 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800625a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800625c:	f7fe fcb4 	bl	8004bc8 <HAL_GetTick>
 8006260:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	0798      	lsls	r0, r3, #30
 8006266:	f57f af6d 	bpl.w	8006144 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800626a:	f7fe fcad 	bl	8004bc8 <HAL_GetTick>
 800626e:	1b80      	subs	r0, r0, r6
 8006270:	2802      	cmp	r0, #2
 8006272:	d9f6      	bls.n	8006262 <HAL_RCC_OscConfig+0x132>
 8006274:	e79d      	b.n	80061b2 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006276:	69aa      	ldr	r2, [r5, #24]
 8006278:	4e4a      	ldr	r6, [pc, #296]	; (80063a4 <HAL_RCC_OscConfig+0x274>)
 800627a:	4b4b      	ldr	r3, [pc, #300]	; (80063a8 <HAL_RCC_OscConfig+0x278>)
 800627c:	b1e2      	cbz	r2, 80062b8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800627e:	2201      	movs	r2, #1
 8006280:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8006284:	f7fe fca0 	bl	8004bc8 <HAL_GetTick>
 8006288:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800628a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800628c:	079b      	lsls	r3, r3, #30
 800628e:	d50d      	bpl.n	80062ac <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006290:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006294:	4b45      	ldr	r3, [pc, #276]	; (80063ac <HAL_RCC_OscConfig+0x27c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	fbb3 f3f2 	udiv	r3, r3, r2
 800629c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800629e:	bf00      	nop
  }
  while (Delay --);
 80062a0:	9b01      	ldr	r3, [sp, #4]
 80062a2:	1e5a      	subs	r2, r3, #1
 80062a4:	9201      	str	r2, [sp, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1f9      	bne.n	800629e <HAL_RCC_OscConfig+0x16e>
 80062aa:	e74f      	b.n	800614c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062ac:	f7fe fc8c 	bl	8004bc8 <HAL_GetTick>
 80062b0:	1b00      	subs	r0, r0, r4
 80062b2:	2802      	cmp	r0, #2
 80062b4:	d9e9      	bls.n	800628a <HAL_RCC_OscConfig+0x15a>
 80062b6:	e77c      	b.n	80061b2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80062b8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80062bc:	f7fe fc84 	bl	8004bc8 <HAL_GetTick>
 80062c0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80062c4:	079f      	lsls	r7, r3, #30
 80062c6:	f57f af41 	bpl.w	800614c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062ca:	f7fe fc7d 	bl	8004bc8 <HAL_GetTick>
 80062ce:	1b00      	subs	r0, r0, r4
 80062d0:	2802      	cmp	r0, #2
 80062d2:	d9f6      	bls.n	80062c2 <HAL_RCC_OscConfig+0x192>
 80062d4:	e76d      	b.n	80061b2 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062d6:	4c33      	ldr	r4, [pc, #204]	; (80063a4 <HAL_RCC_OscConfig+0x274>)
 80062d8:	69e3      	ldr	r3, [r4, #28]
 80062da:	00d8      	lsls	r0, r3, #3
 80062dc:	d424      	bmi.n	8006328 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80062de:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80062e0:	69e3      	ldr	r3, [r4, #28]
 80062e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062e6:	61e3      	str	r3, [r4, #28]
 80062e8:	69e3      	ldr	r3, [r4, #28]
 80062ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f2:	4e2f      	ldr	r6, [pc, #188]	; (80063b0 <HAL_RCC_OscConfig+0x280>)
 80062f4:	6833      	ldr	r3, [r6, #0]
 80062f6:	05d9      	lsls	r1, r3, #23
 80062f8:	d518      	bpl.n	800632c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062fa:	68eb      	ldr	r3, [r5, #12]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d126      	bne.n	800634e <HAL_RCC_OscConfig+0x21e>
 8006300:	6a23      	ldr	r3, [r4, #32]
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006308:	f7fe fc5e 	bl	8004bc8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800630c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006310:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006312:	6a23      	ldr	r3, [r4, #32]
 8006314:	079b      	lsls	r3, r3, #30
 8006316:	d53f      	bpl.n	8006398 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8006318:	2f00      	cmp	r7, #0
 800631a:	f43f af1b 	beq.w	8006154 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800631e:	69e3      	ldr	r3, [r4, #28]
 8006320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006324:	61e3      	str	r3, [r4, #28]
 8006326:	e715      	b.n	8006154 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8006328:	2700      	movs	r7, #0
 800632a:	e7e2      	b.n	80062f2 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800632c:	6833      	ldr	r3, [r6, #0]
 800632e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006332:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006334:	f7fe fc48 	bl	8004bc8 <HAL_GetTick>
 8006338:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800633a:	6833      	ldr	r3, [r6, #0]
 800633c:	05da      	lsls	r2, r3, #23
 800633e:	d4dc      	bmi.n	80062fa <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006340:	f7fe fc42 	bl	8004bc8 <HAL_GetTick>
 8006344:	eba0 0008 	sub.w	r0, r0, r8
 8006348:	2864      	cmp	r0, #100	; 0x64
 800634a:	d9f6      	bls.n	800633a <HAL_RCC_OscConfig+0x20a>
 800634c:	e731      	b.n	80061b2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800634e:	b9ab      	cbnz	r3, 800637c <HAL_RCC_OscConfig+0x24c>
 8006350:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006352:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006356:	f023 0301 	bic.w	r3, r3, #1
 800635a:	6223      	str	r3, [r4, #32]
 800635c:	6a23      	ldr	r3, [r4, #32]
 800635e:	f023 0304 	bic.w	r3, r3, #4
 8006362:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006364:	f7fe fc30 	bl	8004bc8 <HAL_GetTick>
 8006368:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800636a:	6a23      	ldr	r3, [r4, #32]
 800636c:	0798      	lsls	r0, r3, #30
 800636e:	d5d3      	bpl.n	8006318 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006370:	f7fe fc2a 	bl	8004bc8 <HAL_GetTick>
 8006374:	1b80      	subs	r0, r0, r6
 8006376:	4540      	cmp	r0, r8
 8006378:	d9f7      	bls.n	800636a <HAL_RCC_OscConfig+0x23a>
 800637a:	e71a      	b.n	80061b2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800637c:	2b05      	cmp	r3, #5
 800637e:	6a23      	ldr	r3, [r4, #32]
 8006380:	d103      	bne.n	800638a <HAL_RCC_OscConfig+0x25a>
 8006382:	f043 0304 	orr.w	r3, r3, #4
 8006386:	6223      	str	r3, [r4, #32]
 8006388:	e7ba      	b.n	8006300 <HAL_RCC_OscConfig+0x1d0>
 800638a:	f023 0301 	bic.w	r3, r3, #1
 800638e:	6223      	str	r3, [r4, #32]
 8006390:	6a23      	ldr	r3, [r4, #32]
 8006392:	f023 0304 	bic.w	r3, r3, #4
 8006396:	e7b6      	b.n	8006306 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006398:	f7fe fc16 	bl	8004bc8 <HAL_GetTick>
 800639c:	1b80      	subs	r0, r0, r6
 800639e:	4540      	cmp	r0, r8
 80063a0:	d9b7      	bls.n	8006312 <HAL_RCC_OscConfig+0x1e2>
 80063a2:	e706      	b.n	80061b2 <HAL_RCC_OscConfig+0x82>
 80063a4:	40021000 	.word	0x40021000
 80063a8:	42420000 	.word	0x42420000
 80063ac:	20000000 	.word	0x20000000
 80063b0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063b4:	4c2a      	ldr	r4, [pc, #168]	; (8006460 <HAL_RCC_OscConfig+0x330>)
 80063b6:	6863      	ldr	r3, [r4, #4]
 80063b8:	f003 030c 	and.w	r3, r3, #12
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d03e      	beq.n	800643e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063c0:	2200      	movs	r2, #0
 80063c2:	4b28      	ldr	r3, [pc, #160]	; (8006464 <HAL_RCC_OscConfig+0x334>)
 80063c4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80063c6:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063c8:	d12c      	bne.n	8006424 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80063ca:	f7fe fbfd 	bl	8004bc8 <HAL_GetTick>
 80063ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	0199      	lsls	r1, r3, #6
 80063d4:	d420      	bmi.n	8006418 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80063d6:	6a2b      	ldr	r3, [r5, #32]
 80063d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063dc:	d105      	bne.n	80063ea <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80063de:	6862      	ldr	r2, [r4, #4]
 80063e0:	68a9      	ldr	r1, [r5, #8]
 80063e2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80063e6:	430a      	orrs	r2, r1
 80063e8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063ea:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80063ec:	6862      	ldr	r2, [r4, #4]
 80063ee:	430b      	orrs	r3, r1
 80063f0:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80063f4:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80063f6:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063f8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80063fa:	4b1a      	ldr	r3, [pc, #104]	; (8006464 <HAL_RCC_OscConfig+0x334>)
 80063fc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80063fe:	f7fe fbe3 	bl	8004bc8 <HAL_GetTick>
 8006402:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	019a      	lsls	r2, r3, #6
 8006408:	f53f aea8 	bmi.w	800615c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800640c:	f7fe fbdc 	bl	8004bc8 <HAL_GetTick>
 8006410:	1b40      	subs	r0, r0, r5
 8006412:	2802      	cmp	r0, #2
 8006414:	d9f6      	bls.n	8006404 <HAL_RCC_OscConfig+0x2d4>
 8006416:	e6cc      	b.n	80061b2 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006418:	f7fe fbd6 	bl	8004bc8 <HAL_GetTick>
 800641c:	1b80      	subs	r0, r0, r6
 800641e:	2802      	cmp	r0, #2
 8006420:	d9d6      	bls.n	80063d0 <HAL_RCC_OscConfig+0x2a0>
 8006422:	e6c6      	b.n	80061b2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8006424:	f7fe fbd0 	bl	8004bc8 <HAL_GetTick>
 8006428:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	019b      	lsls	r3, r3, #6
 800642e:	f57f ae95 	bpl.w	800615c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006432:	f7fe fbc9 	bl	8004bc8 <HAL_GetTick>
 8006436:	1b40      	subs	r0, r0, r5
 8006438:	2802      	cmp	r0, #2
 800643a:	d9f6      	bls.n	800642a <HAL_RCC_OscConfig+0x2fa>
 800643c:	e6b9      	b.n	80061b2 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800643e:	2801      	cmp	r0, #1
 8006440:	f43f aeb8 	beq.w	80061b4 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8006444:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006446:	6a2a      	ldr	r2, [r5, #32]
 8006448:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800644c:	4291      	cmp	r1, r2
 800644e:	f47f ae9b 	bne.w	8006188 <HAL_RCC_OscConfig+0x58>
 8006452:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006454:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006458:	4293      	cmp	r3, r2
 800645a:	f43f ae7f 	beq.w	800615c <HAL_RCC_OscConfig+0x2c>
 800645e:	e693      	b.n	8006188 <HAL_RCC_OscConfig+0x58>
 8006460:	40021000 	.word	0x40021000
 8006464:	42420000 	.word	0x42420000

08006468 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8006468:	4a0d      	ldr	r2, [pc, #52]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x38>)
 800646a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800646c:	f003 010c 	and.w	r1, r3, #12
 8006470:	2908      	cmp	r1, #8
 8006472:	d112      	bne.n	800649a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006474:	480b      	ldr	r0, [pc, #44]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006476:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800647a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800647c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800647e:	d509      	bpl.n	8006494 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006480:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006482:	4a09      	ldr	r2, [pc, #36]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006484:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006488:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800648a:	4a08      	ldr	r2, [pc, #32]	; (80064ac <HAL_RCC_GetSysClockFreq+0x44>)
 800648c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800648e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006492:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006494:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x48>)
 8006496:	4358      	muls	r0, r3
 8006498:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800649a:	4803      	ldr	r0, [pc, #12]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40021000 	.word	0x40021000
 80064a4:	0800b8e6 	.word	0x0800b8e6
 80064a8:	007a1200 	.word	0x007a1200
 80064ac:	0800b8f6 	.word	0x0800b8f6
 80064b0:	003d0900 	.word	0x003d0900

080064b4 <HAL_RCC_ClockConfig>:
{
 80064b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80064ba:	4604      	mov	r4, r0
 80064bc:	b910      	cbnz	r0, 80064c4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80064be:	2001      	movs	r0, #1
}
 80064c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064c4:	4a44      	ldr	r2, [pc, #272]	; (80065d8 <HAL_RCC_ClockConfig+0x124>)
 80064c6:	6813      	ldr	r3, [r2, #0]
 80064c8:	f003 0307 	and.w	r3, r3, #7
 80064cc:	428b      	cmp	r3, r1
 80064ce:	d328      	bcc.n	8006522 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064d0:	6821      	ldr	r1, [r4, #0]
 80064d2:	078e      	lsls	r6, r1, #30
 80064d4:	d430      	bmi.n	8006538 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064d6:	07ca      	lsls	r2, r1, #31
 80064d8:	d443      	bmi.n	8006562 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064da:	4a3f      	ldr	r2, [pc, #252]	; (80065d8 <HAL_RCC_ClockConfig+0x124>)
 80064dc:	6813      	ldr	r3, [r2, #0]
 80064de:	f003 0307 	and.w	r3, r3, #7
 80064e2:	42ab      	cmp	r3, r5
 80064e4:	d865      	bhi.n	80065b2 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e6:	6822      	ldr	r2, [r4, #0]
 80064e8:	4d3c      	ldr	r5, [pc, #240]	; (80065dc <HAL_RCC_ClockConfig+0x128>)
 80064ea:	f012 0f04 	tst.w	r2, #4
 80064ee:	d16c      	bne.n	80065ca <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f0:	0713      	lsls	r3, r2, #28
 80064f2:	d506      	bpl.n	8006502 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064f4:	686b      	ldr	r3, [r5, #4]
 80064f6:	6922      	ldr	r2, [r4, #16]
 80064f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80064fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006500:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006502:	f7ff ffb1 	bl	8006468 <HAL_RCC_GetSysClockFreq>
 8006506:	686b      	ldr	r3, [r5, #4]
 8006508:	4a35      	ldr	r2, [pc, #212]	; (80065e0 <HAL_RCC_ClockConfig+0x12c>)
 800650a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800650e:	5cd3      	ldrb	r3, [r2, r3]
 8006510:	40d8      	lsrs	r0, r3
 8006512:	4b34      	ldr	r3, [pc, #208]	; (80065e4 <HAL_RCC_ClockConfig+0x130>)
 8006514:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006516:	4b34      	ldr	r3, [pc, #208]	; (80065e8 <HAL_RCC_ClockConfig+0x134>)
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	f7fc ffe7 	bl	80034ec <HAL_InitTick>
  return HAL_OK;
 800651e:	2000      	movs	r0, #0
 8006520:	e7ce      	b.n	80064c0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006522:	6813      	ldr	r3, [r2, #0]
 8006524:	f023 0307 	bic.w	r3, r3, #7
 8006528:	430b      	orrs	r3, r1
 800652a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800652c:	6813      	ldr	r3, [r2, #0]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	428b      	cmp	r3, r1
 8006534:	d1c3      	bne.n	80064be <HAL_RCC_ClockConfig+0xa>
 8006536:	e7cb      	b.n	80064d0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006538:	4b28      	ldr	r3, [pc, #160]	; (80065dc <HAL_RCC_ClockConfig+0x128>)
 800653a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800653e:	bf1e      	ittt	ne
 8006540:	685a      	ldrne	r2, [r3, #4]
 8006542:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8006546:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006548:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800654a:	bf42      	ittt	mi
 800654c:	685a      	ldrmi	r2, [r3, #4]
 800654e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8006552:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	68a0      	ldr	r0, [r4, #8]
 8006558:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800655c:	4302      	orrs	r2, r0
 800655e:	605a      	str	r2, [r3, #4]
 8006560:	e7b9      	b.n	80064d6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006562:	6862      	ldr	r2, [r4, #4]
 8006564:	4e1d      	ldr	r6, [pc, #116]	; (80065dc <HAL_RCC_ClockConfig+0x128>)
 8006566:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006568:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800656a:	d11a      	bne.n	80065a2 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006570:	d0a5      	beq.n	80064be <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006572:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006574:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006578:	f023 0303 	bic.w	r3, r3, #3
 800657c:	4313      	orrs	r3, r2
 800657e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8006580:	f7fe fb22 	bl	8004bc8 <HAL_GetTick>
 8006584:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006586:	6873      	ldr	r3, [r6, #4]
 8006588:	6862      	ldr	r2, [r4, #4]
 800658a:	f003 030c 	and.w	r3, r3, #12
 800658e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006592:	d0a2      	beq.n	80064da <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006594:	f7fe fb18 	bl	8004bc8 <HAL_GetTick>
 8006598:	1bc0      	subs	r0, r0, r7
 800659a:	4540      	cmp	r0, r8
 800659c:	d9f3      	bls.n	8006586 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800659e:	2003      	movs	r0, #3
 80065a0:	e78e      	b.n	80064c0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065a2:	2a02      	cmp	r2, #2
 80065a4:	d102      	bne.n	80065ac <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80065aa:	e7e1      	b.n	8006570 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ac:	f013 0f02 	tst.w	r3, #2
 80065b0:	e7de      	b.n	8006570 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b2:	6813      	ldr	r3, [r2, #0]
 80065b4:	f023 0307 	bic.w	r3, r3, #7
 80065b8:	432b      	orrs	r3, r5
 80065ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065bc:	6813      	ldr	r3, [r2, #0]
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	42ab      	cmp	r3, r5
 80065c4:	f47f af7b 	bne.w	80064be <HAL_RCC_ClockConfig+0xa>
 80065c8:	e78d      	b.n	80064e6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065ca:	686b      	ldr	r3, [r5, #4]
 80065cc:	68e1      	ldr	r1, [r4, #12]
 80065ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80065d2:	430b      	orrs	r3, r1
 80065d4:	606b      	str	r3, [r5, #4]
 80065d6:	e78b      	b.n	80064f0 <HAL_RCC_ClockConfig+0x3c>
 80065d8:	40022000 	.word	0x40022000
 80065dc:	40021000 	.word	0x40021000
 80065e0:	0800b696 	.word	0x0800b696
 80065e4:	20000000 	.word	0x20000000
 80065e8:	20000008 	.word	0x20000008

080065ec <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065ec:	4b04      	ldr	r3, [pc, #16]	; (8006600 <HAL_RCC_GetPCLK1Freq+0x14>)
 80065ee:	4a05      	ldr	r2, [pc, #20]	; (8006604 <HAL_RCC_GetPCLK1Freq+0x18>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80065f6:	5cd3      	ldrb	r3, [r2, r3]
 80065f8:	4a03      	ldr	r2, [pc, #12]	; (8006608 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80065fa:	6810      	ldr	r0, [r2, #0]
}
 80065fc:	40d8      	lsrs	r0, r3
 80065fe:	4770      	bx	lr
 8006600:	40021000 	.word	0x40021000
 8006604:	0800b6a6 	.word	0x0800b6a6
 8006608:	20000000 	.word	0x20000000

0800660c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800660c:	4b04      	ldr	r3, [pc, #16]	; (8006620 <HAL_RCC_GetPCLK2Freq+0x14>)
 800660e:	4a05      	ldr	r2, [pc, #20]	; (8006624 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006616:	5cd3      	ldrb	r3, [r2, r3]
 8006618:	4a03      	ldr	r2, [pc, #12]	; (8006628 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800661a:	6810      	ldr	r0, [r2, #0]
}
 800661c:	40d8      	lsrs	r0, r3
 800661e:	4770      	bx	lr
 8006620:	40021000 	.word	0x40021000
 8006624:	0800b6a6 	.word	0x0800b6a6
 8006628:	20000000 	.word	0x20000000

0800662c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800662c:	230f      	movs	r3, #15
 800662e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006630:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <HAL_RCC_GetClockConfig+0x34>)
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	f002 0203 	and.w	r2, r2, #3
 8006638:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006640:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006648:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	08db      	lsrs	r3, r3, #3
 800664e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006652:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006654:	4b03      	ldr	r3, [pc, #12]	; (8006664 <HAL_RCC_GetClockConfig+0x38>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	600b      	str	r3, [r1, #0]
}
 800665e:	4770      	bx	lr
 8006660:	40021000 	.word	0x40021000
 8006664:	40022000 	.word	0x40022000

08006668 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006668:	6803      	ldr	r3, [r0, #0]
{
 800666a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800666e:	07d9      	lsls	r1, r3, #31
{
 8006670:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006672:	d521      	bpl.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006674:	4c36      	ldr	r4, [pc, #216]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006676:	69e3      	ldr	r3, [r4, #28]
 8006678:	00da      	lsls	r2, r3, #3
 800667a:	d433      	bmi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800667c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800667e:	69e3      	ldr	r3, [r4, #28]
 8006680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006684:	61e3      	str	r3, [r4, #28]
 8006686:	69e3      	ldr	r3, [r4, #28]
 8006688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800668c:	9301      	str	r3, [sp, #4]
 800668e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006690:	4f30      	ldr	r7, [pc, #192]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	05db      	lsls	r3, r3, #23
 8006696:	d527      	bpl.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006698:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800669a:	686a      	ldr	r2, [r5, #4]
 800669c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80066a0:	d136      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066a2:	6a23      	ldr	r3, [r4, #32]
 80066a4:	686a      	ldr	r2, [r5, #4]
 80066a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066aa:	4313      	orrs	r3, r2
 80066ac:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066ae:	b11e      	cbz	r6, 80066b8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066b0:	69e3      	ldr	r3, [r4, #28]
 80066b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066b6:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066b8:	6828      	ldr	r0, [r5, #0]
 80066ba:	0783      	lsls	r3, r0, #30
 80066bc:	d506      	bpl.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066be:	4924      	ldr	r1, [pc, #144]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80066c0:	68ab      	ldr	r3, [r5, #8]
 80066c2:	684a      	ldr	r2, [r1, #4]
 80066c4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80066c8:	431a      	orrs	r2, r3
 80066ca:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066cc:	f010 0010 	ands.w	r0, r0, #16
 80066d0:	d01b      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066d2:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80066d4:	68e9      	ldr	r1, [r5, #12]
 80066d6:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80066d8:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066da:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80066de:	430b      	orrs	r3, r1
 80066e0:	6053      	str	r3, [r2, #4]
 80066e2:	e012      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 80066e4:	2600      	movs	r6, #0
 80066e6:	e7d3      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ee:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80066f0:	f7fe fa6a 	bl	8004bc8 <HAL_GetTick>
 80066f4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	05d8      	lsls	r0, r3, #23
 80066fa:	d4cd      	bmi.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066fc:	f7fe fa64 	bl	8004bc8 <HAL_GetTick>
 8006700:	eba0 0008 	sub.w	r0, r0, r8
 8006704:	2864      	cmp	r0, #100	; 0x64
 8006706:	d9f6      	bls.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 8006708:	2003      	movs	r0, #3
}
 800670a:	b002      	add	sp, #8
 800670c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006710:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006714:	429a      	cmp	r2, r3
 8006716:	d0c4      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8006718:	2001      	movs	r0, #1
 800671a:	4a0f      	ldr	r2, [pc, #60]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800671c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800671e:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006722:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006724:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006728:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 800672c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800672e:	07d9      	lsls	r1, r3, #31
 8006730:	d5b7      	bpl.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8006732:	f7fe fa49 	bl	8004bc8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006736:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800673a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800673c:	6a23      	ldr	r3, [r4, #32]
 800673e:	079a      	lsls	r2, r3, #30
 8006740:	d4af      	bmi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006742:	f7fe fa41 	bl	8004bc8 <HAL_GetTick>
 8006746:	1bc0      	subs	r0, r0, r7
 8006748:	4540      	cmp	r0, r8
 800674a:	d9f7      	bls.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800674c:	e7dc      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800674e:	bf00      	nop
 8006750:	40021000 	.word	0x40021000
 8006754:	40007000 	.word	0x40007000
 8006758:	42420000 	.word	0x42420000

0800675c <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800675c:	2802      	cmp	r0, #2
{
 800675e:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8006760:	d044      	beq.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8006762:	2810      	cmp	r0, #16
 8006764:	d003      	beq.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8006766:	2801      	cmp	r0, #1
 8006768:	d022      	beq.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 800676a:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 800676c:	e034      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 800676e:	4b25      	ldr	r3, [pc, #148]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006770:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006772:	6818      	ldr	r0, [r3, #0]
 8006774:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8006778:	d02e      	beq.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800677a:	f3c2 4183 	ubfx	r1, r2, #18, #4
 800677e:	4822      	ldr	r0, [pc, #136]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006780:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006782:	bf48      	it	mi
 8006784:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006786:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006788:	bf41      	itttt	mi
 800678a:	4920      	ldrmi	r1, [pc, #128]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800678c:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8006790:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006792:	4a1f      	ldrmi	r2, [pc, #124]	; (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006794:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006796:	bf4c      	ite	mi
 8006798:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800679c:	4a1d      	ldrpl	r2, [pc, #116]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800679e:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80067a0:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80067a4:	d418      	bmi.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 80067a6:	2303      	movs	r3, #3
 80067a8:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80067aa:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80067ae:	e013      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80067b0:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80067b4:	4a13      	ldr	r2, [pc, #76]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80067b6:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80067b8:	4019      	ands	r1, r3
 80067ba:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80067be:	d01e      	beq.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80067c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c8:	d107      	bne.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 80067ca:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80067ce:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80067d0:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 80067d4:	bf18      	it	ne
 80067d6:	4618      	movne	r0, r3
}
 80067d8:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80067da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067de:	d1c4      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 80067e0:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80067e2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80067e6:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80067ea:	e7f3      	b.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80067ec:	f7ff ff0e 	bl	800660c <HAL_RCC_GetPCLK2Freq>
 80067f0:	4b04      	ldr	r3, [pc, #16]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80067f8:	3301      	adds	r3, #1
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	e7d5      	b.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 80067fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006802:	e7e9      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006804:	40021000 	.word	0x40021000
 8006808:	0800b8f8 	.word	0x0800b8f8
 800680c:	0800b908 	.word	0x0800b908
 8006810:	007a1200 	.word	0x007a1200
 8006814:	003d0900 	.word	0x003d0900

08006818 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006818:	6803      	ldr	r3, [r0, #0]
{
 800681a:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800681c:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800681e:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006820:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8006822:	b295      	uxth	r5, r2
 8006824:	b28c      	uxth	r4, r1
 8006826:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006828:	bf17      	itett	ne
 800682a:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800682c:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800682e:	b280      	uxthne	r0, r0
 8006830:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006834:	bf08      	it	eq
 8006836:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 800683a:	bd30      	pop	{r4, r5, pc}

0800683c <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800683c:	6803      	ldr	r3, [r0, #0]
 800683e:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8006842:	b29b      	uxth	r3, r3
}
 8006844:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006848:	4770      	bx	lr

0800684a <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 800684a:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800684c:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 800684e:	f000 000f 	and.w	r0, r0, #15
 8006852:	fb02 0003 	mla	r0, r2, r3, r0
}
 8006856:	b2c0      	uxtb	r0, r0
 8006858:	4770      	bx	lr

0800685a <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800685a:	b530      	push	{r4, r5, lr}
  year = 2000U + nYear;

  if (nMonth < 3U)
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800685c:	2517      	movs	r5, #23
 800685e:	2309      	movs	r3, #9
 8006860:	434d      	muls	r5, r1
  if (nMonth < 3U)
 8006862:	2902      	cmp	r1, #2
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006864:	fbb5 f5f3 	udiv	r5, r5, r3
  year = 2000U + nYear;
 8006868:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
  if (nMonth < 3U)
 800686c:	d817      	bhi.n	800689e <RTC_WeekDayNum+0x44>
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800686e:	f200 73cf 	addw	r3, r0, #1999	; 0x7cf
 8006872:	1d10      	adds	r0, r2, #4
 8006874:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006878:	fbb3 f2f2 	udiv	r2, r3, r2
 800687c:	4420      	add	r0, r4
 800687e:	4428      	add	r0, r5
 8006880:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 8006884:	4410      	add	r0, r2
 8006886:	2264      	movs	r2, #100	; 0x64
 8006888:	fbb3 f3f2 	udiv	r3, r3, r2
 800688c:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800688e:	2307      	movs	r3, #7
 8006890:	fbb0 f3f3 	udiv	r3, r0, r3
 8006894:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006898:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 800689a:	b2c0      	uxtb	r0, r0
 800689c:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800689e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80068a2:	fbb4 f3f3 	udiv	r3, r4, r3
 80068a6:	1c90      	adds	r0, r2, #2
 80068a8:	4420      	add	r0, r4
 80068aa:	4428      	add	r0, r5
 80068ac:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 80068b0:	4418      	add	r0, r3
 80068b2:	2364      	movs	r3, #100	; 0x64
 80068b4:	fbb4 f4f3 	udiv	r4, r4, r3
 80068b8:	1b00      	subs	r0, r0, r4
 80068ba:	e7e8      	b.n	800688e <RTC_WeekDayNum+0x34>

080068bc <RTC_EnterInitMode>:
{
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80068c0:	f7fe f982 	bl	8004bc8 <HAL_GetTick>
 80068c4:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	0692      	lsls	r2, r2, #26
 80068cc:	d505      	bpl.n	80068da <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 80068ce:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	f042 0210 	orr.w	r2, r2, #16
 80068d6:	605a      	str	r2, [r3, #4]
}
 80068d8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80068da:	f7fe f975 	bl	8004bc8 <HAL_GetTick>
 80068de:	1b40      	subs	r0, r0, r5
 80068e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80068e4:	d9ef      	bls.n	80068c6 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80068e6:	2003      	movs	r0, #3
 80068e8:	e7f6      	b.n	80068d8 <RTC_EnterInitMode+0x1c>

080068ea <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068ea:	6802      	ldr	r2, [r0, #0]
{
 80068ec:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068ee:	6853      	ldr	r3, [r2, #4]
{
 80068f0:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068f2:	f023 0310 	bic.w	r3, r3, #16
 80068f6:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80068f8:	f7fe f966 	bl	8004bc8 <HAL_GetTick>
 80068fc:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	069b      	lsls	r3, r3, #26
 8006904:	d501      	bpl.n	800690a <RTC_ExitInitMode+0x20>
  return HAL_OK;
 8006906:	2000      	movs	r0, #0
}
 8006908:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800690a:	f7fe f95d 	bl	8004bc8 <HAL_GetTick>
 800690e:	1b40      	subs	r0, r0, r5
 8006910:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006914:	d9f3      	bls.n	80068fe <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8006916:	2003      	movs	r0, #3
 8006918:	e7f6      	b.n	8006908 <RTC_ExitInitMode+0x1e>

0800691a <RTC_WriteTimeCounter>:
{
 800691a:	b538      	push	{r3, r4, r5, lr}
 800691c:	4605      	mov	r5, r0
 800691e:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006920:	f7ff ffcc 	bl	80068bc <RTC_EnterInitMode>
 8006924:	b958      	cbnz	r0, 800693e <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006926:	682b      	ldr	r3, [r5, #0]
 8006928:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800692a:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800692c:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800692e:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006930:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006932:	f7ff ffda 	bl	80068ea <RTC_ExitInitMode>
    status = HAL_ERROR;
 8006936:	3800      	subs	r0, #0
 8006938:	bf18      	it	ne
 800693a:	2001      	movne	r0, #1
}
 800693c:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 800693e:	2001      	movs	r0, #1
 8006940:	e7fc      	b.n	800693c <RTC_WriteTimeCounter+0x22>

08006942 <RTC_WriteAlarmCounter>:
{
 8006942:	b538      	push	{r3, r4, r5, lr}
 8006944:	4605      	mov	r5, r0
 8006946:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006948:	f7ff ffb8 	bl	80068bc <RTC_EnterInitMode>
 800694c:	b958      	cbnz	r0, 8006966 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800694e:	682b      	ldr	r3, [r5, #0]
 8006950:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006952:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006954:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006956:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006958:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800695a:	f7ff ffc6 	bl	80068ea <RTC_ExitInitMode>
    status = HAL_ERROR;
 800695e:	3800      	subs	r0, #0
 8006960:	bf18      	it	ne
 8006962:	2001      	movne	r0, #1
}
 8006964:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8006966:	2001      	movs	r0, #1
 8006968:	e7fc      	b.n	8006964 <RTC_WriteAlarmCounter+0x22>

0800696a <HAL_RTC_SetTime>:
{
 800696a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 800696c:	4604      	mov	r4, r0
 800696e:	b1e0      	cbz	r0, 80069aa <HAL_RTC_SetTime+0x40>
 8006970:	b1d9      	cbz	r1, 80069aa <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8006972:	7c03      	ldrb	r3, [r0, #16]
 8006974:	2502      	movs	r5, #2
 8006976:	2b01      	cmp	r3, #1
 8006978:	d045      	beq.n	8006a06 <HAL_RTC_SetTime+0x9c>
 800697a:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800697c:	7445      	strb	r5, [r0, #17]
  __HAL_LOCK(hrtc);
 800697e:	7403      	strb	r3, [r0, #16]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006980:	7808      	ldrb	r0, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006982:	784e      	ldrb	r6, [r1, #1]
                              ((uint32_t)sTime->Seconds));
 8006984:	788f      	ldrb	r7, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 8006986:	b992      	cbnz	r2, 80069ae <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006988:	233c      	movs	r3, #60	; 0x3c
 800698a:	435e      	muls	r6, r3
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800698c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006990:	fb03 6600 	mla	r6, r3, r0, r6
 8006994:	443e      	add	r6, r7
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006996:	4631      	mov	r1, r6
 8006998:	4620      	mov	r0, r4
 800699a:	f7ff ffbe 	bl	800691a <RTC_WriteTimeCounter>
 800699e:	4605      	mov	r5, r0
 80069a0:	b1b8      	cbz	r0, 80069d2 <HAL_RTC_SetTime+0x68>
    hrtc->State = HAL_RTC_STATE_ERROR;
 80069a2:	2304      	movs	r3, #4
 80069a4:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 80069a6:	2300      	movs	r3, #0
 80069a8:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 80069aa:	2501      	movs	r5, #1
 80069ac:	e02b      	b.n	8006a06 <HAL_RTC_SetTime+0x9c>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80069ae:	f7ff ff4c 	bl	800684a <RTC_Bcd2ToByte>
 80069b2:	4605      	mov	r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80069b4:	4630      	mov	r0, r6
 80069b6:	f7ff ff48 	bl	800684a <RTC_Bcd2ToByte>
 80069ba:	233c      	movs	r3, #60	; 0x3c
 80069bc:	fb03 f100 	mul.w	r1, r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80069c0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80069c4:	4638      	mov	r0, r7
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80069c6:	fb03 1105 	mla	r1, r3, r5, r1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80069ca:	f7ff ff3e 	bl	800684a <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80069ce:	1846      	adds	r6, r0, r1
 80069d0:	e7e1      	b.n	8006996 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80069d2:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80069d4:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80069d6:	6853      	ldr	r3, [r2, #4]
 80069d8:	f023 0305 	bic.w	r3, r3, #5
 80069dc:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80069de:	f7ff ff2d 	bl	800683c <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 80069e2:	4286      	cmp	r6, r0
 80069e4:	d90b      	bls.n	80069fe <HAL_RTC_SetTime+0x94>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80069e6:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80069ea:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80069ee:	4620      	mov	r0, r4
 80069f0:	f7ff ffa7 	bl	8006942 <RTC_WriteAlarmCounter>
 80069f4:	b118      	cbz	r0, 80069fe <HAL_RTC_SetTime+0x94>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80069f6:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 80069f8:	7425      	strb	r5, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 80069fa:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 80069fc:	e7d5      	b.n	80069aa <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 80069fe:	2301      	movs	r3, #1
 8006a00:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8006a02:	2300      	movs	r3, #0
 8006a04:	7423      	strb	r3, [r4, #16]
}
 8006a06:	4628      	mov	r0, r5
 8006a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a0c <HAL_RTC_SetDate>:
{
 8006a0c:	b570      	push	{r4, r5, r6, lr}
 8006a0e:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 8006a10:	4604      	mov	r4, r0
 8006a12:	b348      	cbz	r0, 8006a68 <HAL_RTC_SetDate+0x5c>
 8006a14:	b341      	cbz	r1, 8006a68 <HAL_RTC_SetDate+0x5c>
  __HAL_LOCK(hrtc);
 8006a16:	7c03      	ldrb	r3, [r0, #16]
 8006a18:	2002      	movs	r0, #2
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d047      	beq.n	8006aae <HAL_RTC_SetDate+0xa2>
 8006a1e:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a20:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 8006a22:	7423      	strb	r3, [r4, #16]
  if (Format == RTC_FORMAT_BIN)
 8006a24:	78c8      	ldrb	r0, [r1, #3]
 8006a26:	bb0a      	cbnz	r2, 8006a6c <HAL_RTC_SetDate+0x60>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006a28:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006a2a:	784b      	ldrb	r3, [r1, #1]
 8006a2c:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006a2e:	788a      	ldrb	r2, [r1, #2]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006a30:	7b61      	ldrb	r1, [r4, #13]
 8006a32:	7be0      	ldrb	r0, [r4, #15]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006a34:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006a36:	f7ff ff10 	bl	800685a <RTC_WeekDayNum>
 8006a3a:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006a3c:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f7ff feea 	bl	8006818 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8006a44:	4b1a      	ldr	r3, [pc, #104]	; (8006ab0 <HAL_RTC_SetDate+0xa4>)
 8006a46:	4298      	cmp	r0, r3
 8006a48:	d92d      	bls.n	8006aa6 <HAL_RTC_SetDate+0x9a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006a4a:	4d1a      	ldr	r5, [pc, #104]	; (8006ab4 <HAL_RTC_SetDate+0xa8>)
 8006a4c:	fbb0 f2f5 	udiv	r2, r0, r5
 8006a50:	fb05 0512 	mls	r5, r5, r2, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006a54:	4620      	mov	r0, r4
 8006a56:	4629      	mov	r1, r5
 8006a58:	f7ff ff5f 	bl	800691a <RTC_WriteTimeCounter>
 8006a5c:	4606      	mov	r6, r0
 8006a5e:	b188      	cbz	r0, 8006a84 <HAL_RTC_SetDate+0x78>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006a60:	2304      	movs	r3, #4
 8006a62:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8006a64:	2300      	movs	r3, #0
 8006a66:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8006a68:	2001      	movs	r0, #1
 8006a6a:	e020      	b.n	8006aae <HAL_RTC_SetDate+0xa2>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006a6c:	f7ff feed 	bl	800684a <RTC_Bcd2ToByte>
 8006a70:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006a72:	7848      	ldrb	r0, [r1, #1]
 8006a74:	f7ff fee9 	bl	800684a <RTC_Bcd2ToByte>
 8006a78:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006a7a:	7888      	ldrb	r0, [r1, #2]
 8006a7c:	f7ff fee5 	bl	800684a <RTC_Bcd2ToByte>
 8006a80:	4602      	mov	r2, r0
 8006a82:	e7d5      	b.n	8006a30 <HAL_RTC_SetDate+0x24>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006a84:	4620      	mov	r0, r4
 8006a86:	f7ff fed9 	bl	800683c <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 8006a8a:	4285      	cmp	r5, r0
 8006a8c:	d90b      	bls.n	8006aa6 <HAL_RTC_SetDate+0x9a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006a8e:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8006a92:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8006a96:	4620      	mov	r0, r4
 8006a98:	f7ff ff53 	bl	8006942 <RTC_WriteAlarmCounter>
 8006a9c:	b118      	cbz	r0, 8006aa6 <HAL_RTC_SetDate+0x9a>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006a9e:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8006aa0:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006aa2:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8006aa4:	e7e0      	b.n	8006a68 <HAL_RTC_SetDate+0x5c>
  hrtc->State = HAL_RTC_STATE_READY ;
 8006aa6:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8006aa8:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8006aaa:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8006aac:	7420      	strb	r0, [r4, #16]
}
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	00015f8f 	.word	0x00015f8f
 8006ab4:	00015180 	.word	0x00015180

08006ab8 <HAL_RTC_WaitForSynchro>:
{
 8006ab8:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8006aba:	4604      	mov	r4, r0
 8006abc:	b1a8      	cbz	r0, 8006aea <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006abe:	6802      	ldr	r2, [r0, #0]
 8006ac0:	6853      	ldr	r3, [r2, #4]
 8006ac2:	f023 0308 	bic.w	r3, r3, #8
 8006ac6:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8006ac8:	f7fe f87e 	bl	8004bc8 <HAL_GetTick>
 8006acc:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	071b      	lsls	r3, r3, #28
 8006ad4:	d501      	bpl.n	8006ada <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8006ad6:	2000      	movs	r0, #0
}
 8006ad8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006ada:	f7fe f875 	bl	8004bc8 <HAL_GetTick>
 8006ade:	1b40      	subs	r0, r0, r5
 8006ae0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006ae4:	d9f3      	bls.n	8006ace <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8006ae6:	2003      	movs	r0, #3
 8006ae8:	e7f6      	b.n	8006ad8 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8006aea:	2001      	movs	r0, #1
 8006aec:	e7f4      	b.n	8006ad8 <HAL_RTC_WaitForSynchro+0x20>
	...

08006af0 <HAL_RTC_Init>:
{
 8006af0:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8006af2:	4604      	mov	r4, r0
 8006af4:	b170      	cbz	r0, 8006b14 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006af6:	7c43      	ldrb	r3, [r0, #17]
 8006af8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006afc:	b913      	cbnz	r3, 8006b04 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8006afe:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8006b00:	f7fc fb7a 	bl	80031f8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b04:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b06:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b08:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b0a:	f7ff ffd5 	bl	8006ab8 <HAL_RTC_WaitForSynchro>
 8006b0e:	b118      	cbz	r0, 8006b18 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b10:	2304      	movs	r3, #4
 8006b12:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8006b14:	2001      	movs	r0, #1
 8006b16:	e02f      	b.n	8006b78 <HAL_RTC_Init+0x88>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f7ff fecf 	bl	80068bc <RTC_EnterInitMode>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d1f6      	bne.n	8006b10 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006b22:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006b24:	68a1      	ldr	r1, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006b26:	6853      	ldr	r3, [r2, #4]
 8006b28:	f023 0307 	bic.w	r3, r3, #7
 8006b2c:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006b2e:	4a13      	ldr	r2, [pc, #76]	; (8006b7c <HAL_RTC_Init+0x8c>)
 8006b30:	b119      	cbz	r1, 8006b3a <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006b32:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006b3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006b3c:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8006b40:	430b      	orrs	r3, r1
 8006b42:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006b44:	6860      	ldr	r0, [r4, #4]
 8006b46:	1c43      	adds	r3, r0, #1
 8006b48:	d105      	bne.n	8006b56 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006b4a:	2001      	movs	r0, #1
 8006b4c:	f7ff fe06 	bl	800675c <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d0dd      	beq.n	8006b10 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8006b54:	3801      	subs	r0, #1
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	f3c0 4203 	ubfx	r2, r0, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8006b5c:	b280      	uxth	r0, r0
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8006b5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8006b60:	60d8      	str	r0, [r3, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006b62:	4620      	mov	r0, r4
 8006b64:	f7ff fec1 	bl	80068ea <RTC_ExitInitMode>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	b110      	cbz	r0, 8006b72 <HAL_RTC_Init+0x82>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006b6c:	2204      	movs	r2, #4
 8006b6e:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8006b70:	e7d0      	b.n	8006b14 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006b72:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006b74:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8006b76:	7463      	strb	r3, [r4, #17]
}
 8006b78:	bd10      	pop	{r4, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40006c00 	.word	0x40006c00

08006b80 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b80:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b82:	6a02      	ldr	r2, [r0, #32]
{
 8006b84:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b86:	f022 0201 	bic.w	r2, r2, #1
 8006b8a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b8c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b8e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b90:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b92:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006b96:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b98:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006b9a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8006b9e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ba0:	4d0a      	ldr	r5, [pc, #40]	; (8006bcc <TIM_OC1_SetConfig+0x4c>)
 8006ba2:	42a8      	cmp	r0, r5
 8006ba4:	d10b      	bne.n	8006bbe <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ba6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ba8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006bac:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bae:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bb2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006bb6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bb8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bbc:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bbe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bc0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bc2:	684a      	ldr	r2, [r1, #4]
 8006bc4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc6:	6203      	str	r3, [r0, #32]
}
 8006bc8:	bd70      	pop	{r4, r5, r6, pc}
 8006bca:	bf00      	nop
 8006bcc:	40012c00 	.word	0x40012c00

08006bd0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bd2:	6a02      	ldr	r2, [r0, #32]
{
 8006bd4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bda:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bdc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bde:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006be2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006be6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006be8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006bea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bf2:	4d0b      	ldr	r5, [pc, #44]	; (8006c20 <TIM_OC3_SetConfig+0x50>)
 8006bf4:	42a8      	cmp	r0, r5
 8006bf6:	d10d      	bne.n	8006c14 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bf8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bfe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c02:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c06:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006c0a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c10:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c14:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c16:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c18:	684a      	ldr	r2, [r1, #4]
 8006c1a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c1c:	6203      	str	r3, [r0, #32]
}
 8006c1e:	bd70      	pop	{r4, r5, r6, pc}
 8006c20:	40012c00 	.word	0x40012c00

08006c24 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c24:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c26:	6a02      	ldr	r2, [r0, #32]
{
 8006c28:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c2e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c30:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c32:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c34:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c36:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c3a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c3e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8006c40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c44:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c48:	4d06      	ldr	r5, [pc, #24]	; (8006c64 <TIM_OC4_SetConfig+0x40>)
 8006c4a:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c4c:	bf02      	ittt	eq
 8006c4e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c50:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c54:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c58:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c5a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c5c:	684a      	ldr	r2, [r1, #4]
 8006c5e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c60:	6203      	str	r3, [r0, #32]
}
 8006c62:	bd30      	pop	{r4, r5, pc}
 8006c64:	40012c00 	.word	0x40012c00

08006c68 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006c68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d120      	bne.n	8006cb2 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006c70:	2302      	movs	r3, #2
 8006c72:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c76:	6803      	ldr	r3, [r0, #0]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	f042 0201 	orr.w	r2, r2, #1
 8006c7e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c80:	4a0d      	ldr	r2, [pc, #52]	; (8006cb8 <HAL_TIM_Base_Start_IT+0x50>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d00a      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x34>
 8006c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c8a:	d007      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x34>
 8006c8c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d003      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x34>
 8006c94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d104      	bne.n	8006ca6 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca2:	2a06      	cmp	r2, #6
 8006ca4:	d003      	beq.n	8006cae <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	f042 0201 	orr.w	r2, r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006cae:	2000      	movs	r0, #0
}
 8006cb0:	4770      	bx	lr
    return HAL_ERROR;
 8006cb2:	2001      	movs	r0, #1
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40012c00 	.word	0x40012c00

08006cbc <HAL_TIM_PWM_MspInit>:
 8006cbc:	4770      	bx	lr

08006cbe <HAL_TIM_OC_DelayElapsedCallback>:
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_TIM_IC_CaptureCallback>:
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_TIM_TriggerCallback>:
 8006cc4:	4770      	bx	lr

08006cc6 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cc6:	6803      	ldr	r3, [r0, #0]
{
 8006cc8:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cca:	691a      	ldr	r2, [r3, #16]
{
 8006ccc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cce:	0791      	lsls	r1, r2, #30
 8006cd0:	d50e      	bpl.n	8006cf0 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	0792      	lsls	r2, r2, #30
 8006cd6:	d50b      	bpl.n	8006cf0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cd8:	f06f 0202 	mvn.w	r2, #2
 8006cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cde:	2201      	movs	r2, #1
 8006ce0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	079b      	lsls	r3, r3, #30
 8006ce6:	d077      	beq.n	8006dd8 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8006ce8:	f7ff ffea 	bl	8006cc0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cec:	2300      	movs	r3, #0
 8006cee:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	0750      	lsls	r0, r2, #29
 8006cf6:	d510      	bpl.n	8006d1a <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	0751      	lsls	r1, r2, #29
 8006cfc:	d50d      	bpl.n	8006d1a <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cfe:	f06f 0204 	mvn.w	r2, #4
 8006d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d04:	2202      	movs	r2, #2
 8006d06:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d08:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8006d0a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d0c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006d10:	d068      	beq.n	8006de4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d12:	f7ff ffd5 	bl	8006cc0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d16:	2300      	movs	r3, #0
 8006d18:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	691a      	ldr	r2, [r3, #16]
 8006d1e:	0712      	lsls	r2, r2, #28
 8006d20:	d50f      	bpl.n	8006d42 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	0710      	lsls	r0, r2, #28
 8006d26:	d50c      	bpl.n	8006d42 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d28:	f06f 0208 	mvn.w	r2, #8
 8006d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d2e:	2204      	movs	r2, #4
 8006d30:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d32:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006d34:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d36:	0799      	lsls	r1, r3, #30
 8006d38:	d05a      	beq.n	8006df0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d3a:	f7ff ffc1 	bl	8006cc0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	691a      	ldr	r2, [r3, #16]
 8006d46:	06d2      	lsls	r2, r2, #27
 8006d48:	d510      	bpl.n	8006d6c <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d4a:	68da      	ldr	r2, [r3, #12]
 8006d4c:	06d0      	lsls	r0, r2, #27
 8006d4e:	d50d      	bpl.n	8006d6c <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d50:	f06f 0210 	mvn.w	r2, #16
 8006d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d56:	2208      	movs	r2, #8
 8006d58:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d5a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d5e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006d62:	d04b      	beq.n	8006dfc <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d64:	f7ff ffac 	bl	8006cc0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	691a      	ldr	r2, [r3, #16]
 8006d70:	07d1      	lsls	r1, r2, #31
 8006d72:	d508      	bpl.n	8006d86 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	07d2      	lsls	r2, r2, #31
 8006d78:	d505      	bpl.n	8006d86 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d7a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d7e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d80:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d82:	f7fb ff69 	bl	8002c58 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	691a      	ldr	r2, [r3, #16]
 8006d8a:	0610      	lsls	r0, r2, #24
 8006d8c:	d508      	bpl.n	8006da0 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d8e:	68da      	ldr	r2, [r3, #12]
 8006d90:	0611      	lsls	r1, r2, #24
 8006d92:	d505      	bpl.n	8006da0 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8006d98:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d9a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006d9c:	f000 fab9 	bl	8007312 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	691a      	ldr	r2, [r3, #16]
 8006da4:	0652      	lsls	r2, r2, #25
 8006da6:	d508      	bpl.n	8006dba <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	0650      	lsls	r0, r2, #25
 8006dac:	d505      	bpl.n	8006dba <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dae:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8006db2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006db4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006db6:	f7ff ff85 	bl	8006cc4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	691a      	ldr	r2, [r3, #16]
 8006dbe:	0691      	lsls	r1, r2, #26
 8006dc0:	d522      	bpl.n	8006e08 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	0692      	lsls	r2, r2, #26
 8006dc6:	d51f      	bpl.n	8006e08 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dc8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006dcc:	4620      	mov	r0, r4
}
 8006dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dd2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006dd4:	f000 ba9c 	b.w	8007310 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd8:	f7ff ff71 	bl	8006cbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f7ff ff70 	bl	8006cc2 <HAL_TIM_PWM_PulseFinishedCallback>
 8006de2:	e783      	b.n	8006cec <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de4:	f7ff ff6b 	bl	8006cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de8:	4620      	mov	r0, r4
 8006dea:	f7ff ff6a 	bl	8006cc2 <HAL_TIM_PWM_PulseFinishedCallback>
 8006dee:	e792      	b.n	8006d16 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df0:	f7ff ff65 	bl	8006cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df4:	4620      	mov	r0, r4
 8006df6:	f7ff ff64 	bl	8006cc2 <HAL_TIM_PWM_PulseFinishedCallback>
 8006dfa:	e7a0      	b.n	8006d3e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dfc:	f7ff ff5f 	bl	8006cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e00:	4620      	mov	r0, r4
 8006e02:	f7ff ff5e 	bl	8006cc2 <HAL_TIM_PWM_PulseFinishedCallback>
 8006e06:	e7af      	b.n	8006d68 <HAL_TIM_IRQHandler+0xa2>
}
 8006e08:	bd10      	pop	{r4, pc}
	...

08006e0c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e0c:	4a1a      	ldr	r2, [pc, #104]	; (8006e78 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8006e0e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e10:	4290      	cmp	r0, r2
 8006e12:	d00a      	beq.n	8006e2a <TIM_Base_SetConfig+0x1e>
 8006e14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006e18:	d007      	beq.n	8006e2a <TIM_Base_SetConfig+0x1e>
 8006e1a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006e1e:	4290      	cmp	r0, r2
 8006e20:	d003      	beq.n	8006e2a <TIM_Base_SetConfig+0x1e>
 8006e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e26:	4290      	cmp	r0, r2
 8006e28:	d115      	bne.n	8006e56 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8006e2a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006e30:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e32:	4a11      	ldr	r2, [pc, #68]	; (8006e78 <TIM_Base_SetConfig+0x6c>)
 8006e34:	4290      	cmp	r0, r2
 8006e36:	d00a      	beq.n	8006e4e <TIM_Base_SetConfig+0x42>
 8006e38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006e3c:	d007      	beq.n	8006e4e <TIM_Base_SetConfig+0x42>
 8006e3e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006e42:	4290      	cmp	r0, r2
 8006e44:	d003      	beq.n	8006e4e <TIM_Base_SetConfig+0x42>
 8006e46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e4a:	4290      	cmp	r0, r2
 8006e4c:	d103      	bne.n	8006e56 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e4e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e54:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e56:	694a      	ldr	r2, [r1, #20]
 8006e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e5c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006e5e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e60:	688b      	ldr	r3, [r1, #8]
 8006e62:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e64:	680b      	ldr	r3, [r1, #0]
 8006e66:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e68:	4b03      	ldr	r3, [pc, #12]	; (8006e78 <TIM_Base_SetConfig+0x6c>)
 8006e6a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8006e6c:	bf04      	itt	eq
 8006e6e:	690b      	ldreq	r3, [r1, #16]
 8006e70:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006e72:	2301      	movs	r3, #1
 8006e74:	6143      	str	r3, [r0, #20]
}
 8006e76:	4770      	bx	lr
 8006e78:	40012c00 	.word	0x40012c00

08006e7c <HAL_TIM_Base_Init>:
{
 8006e7c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006e7e:	4604      	mov	r4, r0
 8006e80:	b330      	cbz	r0, 8006ed0 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006e82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006e86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e8a:	b91b      	cbnz	r3, 8006e94 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006e8c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006e90:	f7fc f9d0 	bl	8003234 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006e94:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e96:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006e98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e9c:	1d21      	adds	r1, r4, #4
 8006e9e:	f7ff ffb5 	bl	8006e0c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ea2:	2301      	movs	r3, #1
  return HAL_OK;
 8006ea4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ea6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eaa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006eae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006eb2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006eb6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ec2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006ec6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006eca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006ece:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006ed0:	2001      	movs	r0, #1
 8006ed2:	e7fc      	b.n	8006ece <HAL_TIM_Base_Init+0x52>

08006ed4 <HAL_TIM_PWM_Init>:
{
 8006ed4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	b330      	cbz	r0, 8006f28 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006eda:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006ede:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006ee2:	b91b      	cbnz	r3, 8006eec <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006ee4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006ee8:	f7ff fee8 	bl	8006cbc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006eec:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eee:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ef4:	1d21      	adds	r1, r4, #4
 8006ef6:	f7ff ff89 	bl	8006e0c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006efa:	2301      	movs	r3, #1
  return HAL_OK;
 8006efc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006efe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f02:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006f06:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006f0a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006f0e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f1a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006f1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006f22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006f26:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006f28:	2001      	movs	r0, #1
 8006f2a:	e7fc      	b.n	8006f26 <HAL_TIM_PWM_Init+0x52>

08006f2c <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8006f2c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f2e:	6a02      	ldr	r2, [r0, #32]
{
 8006f30:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f32:	f022 0210 	bic.w	r2, r2, #16
 8006f36:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006f38:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006f3a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f3c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f3e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f42:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f46:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006f48:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f4c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f50:	4d0b      	ldr	r5, [pc, #44]	; (8006f80 <TIM_OC2_SetConfig+0x54>)
 8006f52:	42a8      	cmp	r0, r5
 8006f54:	d10d      	bne.n	8006f72 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f56:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f5c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f60:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f64:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006f68:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f6e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8006f72:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006f74:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006f76:	684a      	ldr	r2, [r1, #4]
 8006f78:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006f7a:	6203      	str	r3, [r0, #32]
}
 8006f7c:	bd70      	pop	{r4, r5, r6, pc}
 8006f7e:	bf00      	nop
 8006f80:	40012c00 	.word	0x40012c00

08006f84 <HAL_TIM_PWM_ConfigChannel>:
{
 8006f84:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8006f86:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8006f8a:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d050      	beq.n	8007032 <HAL_TIM_PWM_ConfigChannel+0xae>
 8006f90:	2301      	movs	r3, #1
  switch (Channel)
 8006f92:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8006f94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006f98:	d03b      	beq.n	8007012 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8006f9a:	d807      	bhi.n	8006fac <HAL_TIM_PWM_ConfigChannel+0x28>
 8006f9c:	b1c2      	cbz	r2, 8006fd0 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8006f9e:	2a04      	cmp	r2, #4
 8006fa0:	d027      	beq.n	8006ff2 <HAL_TIM_PWM_ConfigChannel+0x6e>
 8006fa2:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8006fac:	2a0c      	cmp	r2, #12
 8006fae:	d1f8      	bne.n	8006fa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fb0:	6800      	ldr	r0, [r0, #0]
 8006fb2:	f7ff fe37 	bl	8006c24 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fb6:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fb8:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006fbe:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fc0:	69c3      	ldr	r3, [r0, #28]
 8006fc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fc6:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fc8:	69c3      	ldr	r3, [r0, #28]
 8006fca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006fce:	e02e      	b.n	800702e <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fd0:	6800      	ldr	r0, [r0, #0]
 8006fd2:	f7ff fdd5 	bl	8006b80 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fd6:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fd8:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fda:	f043 0308 	orr.w	r3, r3, #8
 8006fde:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fe0:	6983      	ldr	r3, [r0, #24]
 8006fe2:	f023 0304 	bic.w	r3, r3, #4
 8006fe6:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fe8:	6983      	ldr	r3, [r0, #24]
 8006fea:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fec:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006fee:	2000      	movs	r0, #0
      break;
 8006ff0:	e7d8      	b.n	8006fa4 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ff2:	6800      	ldr	r0, [r0, #0]
 8006ff4:	f7ff ff9a 	bl	8006f2c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ff8:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ffa:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ffc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007000:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007002:	6983      	ldr	r3, [r0, #24]
 8007004:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007008:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800700a:	6983      	ldr	r3, [r0, #24]
 800700c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007010:	e7ec      	b.n	8006fec <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007012:	6800      	ldr	r0, [r0, #0]
 8007014:	f7ff fddc 	bl	8006bd0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007018:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800701a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800701c:	f043 0308 	orr.w	r3, r3, #8
 8007020:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007022:	69c3      	ldr	r3, [r0, #28]
 8007024:	f023 0304 	bic.w	r3, r3, #4
 8007028:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800702a:	69c3      	ldr	r3, [r0, #28]
 800702c:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800702e:	61c3      	str	r3, [r0, #28]
 8007030:	e7dd      	b.n	8006fee <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 8007032:	2002      	movs	r0, #2
 8007034:	e7b9      	b.n	8006faa <HAL_TIM_PWM_ConfigChannel+0x26>

08007036 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007036:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007038:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800703a:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800703c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007040:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007044:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007046:	6082      	str	r2, [r0, #8]
}
 8007048:	bd10      	pop	{r4, pc}

0800704a <HAL_TIM_ConfigClockSource>:
{
 800704a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800704c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007050:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007052:	2b01      	cmp	r3, #1
 8007054:	f04f 0002 	mov.w	r0, #2
 8007058:	f000 808e 	beq.w	8007178 <HAL_TIM_ConfigClockSource+0x12e>
 800705c:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800705e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007062:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8007064:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8007068:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800706a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800706e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007072:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8007074:	680b      	ldr	r3, [r1, #0]
 8007076:	2b60      	cmp	r3, #96	; 0x60
 8007078:	d04f      	beq.n	800711a <HAL_TIM_ConfigClockSource+0xd0>
 800707a:	d832      	bhi.n	80070e2 <HAL_TIM_ConfigClockSource+0x98>
 800707c:	2b40      	cmp	r3, #64	; 0x40
 800707e:	d064      	beq.n	800714a <HAL_TIM_ConfigClockSource+0x100>
 8007080:	d816      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x66>
 8007082:	2b20      	cmp	r3, #32
 8007084:	d00d      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x58>
 8007086:	d80a      	bhi.n	800709e <HAL_TIM_ConfigClockSource+0x54>
 8007088:	f033 0110 	bics.w	r1, r3, #16
 800708c:	d009      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 800708e:	2301      	movs	r3, #1
 8007090:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007094:	2300      	movs	r3, #0
 8007096:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800709a:	4610      	mov	r0, r2
 800709c:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800709e:	2b30      	cmp	r3, #48	; 0x30
 80070a0:	d1f5      	bne.n	800708e <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80070a2:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80070a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070a8:	4313      	orrs	r3, r2
 80070aa:	f043 0307 	orr.w	r3, r3, #7
 80070ae:	e028      	b.n	8007102 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 80070b0:	2b50      	cmp	r3, #80	; 0x50
 80070b2:	d1ec      	bne.n	800708e <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 80070b4:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80070b6:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80070b8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ba:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070bc:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070c0:	f023 0301 	bic.w	r3, r3, #1
 80070c4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070c6:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80070c8:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070ce:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80070d2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80070d4:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80070d6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80070d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070dc:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80070e0:	e00f      	b.n	8007102 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 80070e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e6:	d00d      	beq.n	8007104 <HAL_TIM_ConfigClockSource+0xba>
 80070e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ec:	d00c      	beq.n	8007108 <HAL_TIM_ConfigClockSource+0xbe>
 80070ee:	2b70      	cmp	r3, #112	; 0x70
 80070f0:	d1cd      	bne.n	800708e <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80070f2:	68cb      	ldr	r3, [r1, #12]
 80070f4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80070f8:	f7ff ff9d 	bl	8007036 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80070fc:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8007102:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007104:	2200      	movs	r2, #0
 8007106:	e7c2      	b.n	800708e <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8007108:	68cb      	ldr	r3, [r1, #12]
 800710a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800710e:	f7ff ff92 	bl	8007036 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007112:	6883      	ldr	r3, [r0, #8]
 8007114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007118:	e7f3      	b.n	8007102 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 800711a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800711c:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 800711e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007120:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8007124:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007126:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007128:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800712a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800712e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8007132:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007136:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800713a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800713c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800713e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007144:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8007148:	e7db      	b.n	8007102 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 800714a:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800714c:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800714e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007150:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007152:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007156:	f023 0301 	bic.w	r3, r3, #1
 800715a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800715c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800715e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007160:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007164:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007168:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800716a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800716c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800716e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007172:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007176:	e7c4      	b.n	8007102 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8007178:	4602      	mov	r2, r0
 800717a:	e78e      	b.n	800709a <HAL_TIM_ConfigClockSource+0x50>

0800717c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800717c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800717e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007180:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007182:	f001 011f 	and.w	r1, r1, #31
 8007186:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8007188:	ea23 0304 	bic.w	r3, r3, r4
 800718c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800718e:	6a03      	ldr	r3, [r0, #32]
 8007190:	408a      	lsls	r2, r1
 8007192:	431a      	orrs	r2, r3
 8007194:	6202      	str	r2, [r0, #32]
}
 8007196:	bd10      	pop	{r4, pc}

08007198 <HAL_TIM_OC_Start>:
{
 8007198:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800719a:	b929      	cbnz	r1, 80071a8 <HAL_TIM_OC_Start+0x10>
 800719c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d021      	beq.n	80071e8 <HAL_TIM_OC_Start+0x50>
    return HAL_ERROR;
 80071a4:	2001      	movs	r0, #1
}
 80071a6:	bd08      	pop	{r3, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071a8:	2904      	cmp	r1, #4
 80071aa:	d107      	bne.n	80071bc <HAL_TIM_OC_Start+0x24>
 80071ac:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d1f7      	bne.n	80071a4 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071b4:	2302      	movs	r3, #2
 80071b6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80071ba:	e018      	b.n	80071ee <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071bc:	2908      	cmp	r1, #8
 80071be:	d107      	bne.n	80071d0 <HAL_TIM_OC_Start+0x38>
 80071c0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d1ed      	bne.n	80071a4 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071c8:	2302      	movs	r3, #2
 80071ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80071ce:	e00e      	b.n	80071ee <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071d0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d1e5      	bne.n	80071a4 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071d8:	2904      	cmp	r1, #4
 80071da:	d0eb      	beq.n	80071b4 <HAL_TIM_OC_Start+0x1c>
 80071dc:	2908      	cmp	r1, #8
 80071de:	d0f3      	beq.n	80071c8 <HAL_TIM_OC_Start+0x30>
 80071e0:	2302      	movs	r3, #2
 80071e2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80071e6:	e002      	b.n	80071ee <HAL_TIM_OC_Start+0x56>
 80071e8:	2302      	movs	r3, #2
 80071ea:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071ee:	6800      	ldr	r0, [r0, #0]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f7ff ffc3 	bl	800717c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071f6:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <HAL_TIM_OC_Start+0x98>)
 80071f8:	4298      	cmp	r0, r3
 80071fa:	d10a      	bne.n	8007212 <HAL_TIM_OC_Start+0x7a>
    __HAL_TIM_MOE_ENABLE(htim);
 80071fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80071fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007202:	6443      	str	r3, [r0, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007204:	6883      	ldr	r3, [r0, #8]
 8007206:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800720a:	2b06      	cmp	r3, #6
 800720c:	d10b      	bne.n	8007226 <HAL_TIM_OC_Start+0x8e>
  return HAL_OK;
 800720e:	2000      	movs	r0, #0
 8007210:	e7c9      	b.n	80071a6 <HAL_TIM_OC_Start+0xe>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007212:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007216:	d0f5      	beq.n	8007204 <HAL_TIM_OC_Start+0x6c>
 8007218:	4b06      	ldr	r3, [pc, #24]	; (8007234 <HAL_TIM_OC_Start+0x9c>)
 800721a:	4298      	cmp	r0, r3
 800721c:	d0f2      	beq.n	8007204 <HAL_TIM_OC_Start+0x6c>
 800721e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007222:	4298      	cmp	r0, r3
 8007224:	d0ee      	beq.n	8007204 <HAL_TIM_OC_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 8007226:	6803      	ldr	r3, [r0, #0]
 8007228:	f043 0301 	orr.w	r3, r3, #1
 800722c:	6003      	str	r3, [r0, #0]
 800722e:	e7ee      	b.n	800720e <HAL_TIM_OC_Start+0x76>
 8007230:	40012c00 	.word	0x40012c00
 8007234:	40000400 	.word	0x40000400

08007238 <HAL_TIM_PWM_Start>:
 8007238:	f7ff bfae 	b.w	8007198 <HAL_TIM_OC_Start>

0800723c <HAL_TIM_OC_Stop>:
{
 800723c:	b538      	push	{r3, r4, r5, lr}
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800723e:	2200      	movs	r2, #0
{
 8007240:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007242:	6800      	ldr	r0, [r0, #0]
{
 8007244:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007246:	f7ff ff99 	bl	800717c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800724a:	4b18      	ldr	r3, [pc, #96]	; (80072ac <HAL_TIM_OC_Stop+0x70>)
 800724c:	4298      	cmp	r0, r3
 800724e:	d10d      	bne.n	800726c <HAL_TIM_OC_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 8007250:	f241 1311 	movw	r3, #4369	; 0x1111
 8007254:	6a02      	ldr	r2, [r0, #32]
 8007256:	421a      	tst	r2, r3
 8007258:	d108      	bne.n	800726c <HAL_TIM_OC_Stop+0x30>
 800725a:	f240 4344 	movw	r3, #1092	; 0x444
 800725e:	6a02      	ldr	r2, [r0, #32]
 8007260:	421a      	tst	r2, r3
 8007262:	bf02      	ittt	eq
 8007264:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 8007266:	f423 4300 	biceq.w	r3, r3, #32768	; 0x8000
 800726a:	6443      	streq	r3, [r0, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800726c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007270:	6a02      	ldr	r2, [r0, #32]
 8007272:	421a      	tst	r2, r3
 8007274:	d108      	bne.n	8007288 <HAL_TIM_OC_Stop+0x4c>
 8007276:	f240 4344 	movw	r3, #1092	; 0x444
 800727a:	6a02      	ldr	r2, [r0, #32]
 800727c:	421a      	tst	r2, r3
 800727e:	bf02      	ittt	eq
 8007280:	6803      	ldreq	r3, [r0, #0]
 8007282:	f023 0301 	biceq.w	r3, r3, #1
 8007286:	6003      	streq	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007288:	2301      	movs	r3, #1
 800728a:	b91d      	cbnz	r5, 8007294 <HAL_TIM_OC_Stop+0x58>
 800728c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8007290:	2000      	movs	r0, #0
 8007292:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007294:	2d04      	cmp	r5, #4
 8007296:	d102      	bne.n	800729e <HAL_TIM_OC_Stop+0x62>
 8007298:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800729c:	e7f8      	b.n	8007290 <HAL_TIM_OC_Stop+0x54>
 800729e:	2d08      	cmp	r5, #8
 80072a0:	bf0c      	ite	eq
 80072a2:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 80072a6:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 80072aa:	e7f1      	b.n	8007290 <HAL_TIM_OC_Stop+0x54>
 80072ac:	40012c00 	.word	0x40012c00

080072b0 <HAL_TIM_PWM_Stop>:
 80072b0:	f7ff bfc4 	b.w	800723c <HAL_TIM_OC_Stop>

080072b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072b4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80072ba:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80072bc:	2b01      	cmp	r3, #1
 80072be:	f04f 0002 	mov.w	r0, #2
 80072c2:	d022      	beq.n	800730a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072c4:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80072c6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80072ca:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072cc:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80072ce:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072d2:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80072d4:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072d6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072d8:	4c0c      	ldr	r4, [pc, #48]	; (800730c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80072da:	42a3      	cmp	r3, r4
 80072dc:	d00a      	beq.n	80072f4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80072de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e2:	d007      	beq.n	80072f4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80072e4:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	d003      	beq.n	80072f4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80072ec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80072f0:	42a3      	cmp	r3, r4
 80072f2:	d104      	bne.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072f4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072f6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072fa:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072fc:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072fe:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8007300:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007302:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007306:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 800730a:	bd30      	pop	{r4, r5, pc}
 800730c:	40012c00 	.word	0x40012c00

08007310 <HAL_TIMEx_CommutCallback>:
 8007310:	4770      	bx	lr

08007312 <HAL_TIMEx_BreakCallback>:
 8007312:	4770      	bx	lr

08007314 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007314:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	f102 030c 	add.w	r3, r2, #12
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007322:	320c      	adds	r2, #12
 8007324:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007328:	6802      	ldr	r2, [r0, #0]
 800732a:	2900      	cmp	r1, #0
 800732c:	d1f2      	bne.n	8007314 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732e:	f102 0314 	add.w	r3, r2, #20
 8007332:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007336:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733a:	f102 0c14 	add.w	ip, r2, #20
 800733e:	e84c 3100 	strex	r1, r3, [ip]
 8007342:	2900      	cmp	r1, #0
 8007344:	d1f3      	bne.n	800732e <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007346:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007348:	2b01      	cmp	r3, #1
 800734a:	d10b      	bne.n	8007364 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	f102 030c 	add.w	r3, r2, #12
 8007350:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007354:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	f102 0c0c 	add.w	ip, r2, #12
 800735c:	e84c 3100 	strex	r1, r3, [ip]
 8007360:	2900      	cmp	r1, #0
 8007362:	d1f3      	bne.n	800734c <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007364:	2320      	movs	r3, #32
 8007366:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736a:	2300      	movs	r3, #0
 800736c:	6303      	str	r3, [r0, #48]	; 0x30
}
 800736e:	4770      	bx	lr

08007370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007370:	b510      	push	{r4, lr}
 8007372:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007374:	6803      	ldr	r3, [r0, #0]
 8007376:	68c1      	ldr	r1, [r0, #12]
 8007378:	691a      	ldr	r2, [r3, #16]
 800737a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800737e:	430a      	orrs	r2, r1
 8007380:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007382:	6882      	ldr	r2, [r0, #8]
 8007384:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8007386:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007388:	4302      	orrs	r2, r0
 800738a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800738c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8007390:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007394:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007396:	430a      	orrs	r2, r1
 8007398:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800739a:	695a      	ldr	r2, [r3, #20]
 800739c:	69a1      	ldr	r1, [r4, #24]
 800739e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80073a2:	430a      	orrs	r2, r1
 80073a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80073a6:	4a0e      	ldr	r2, [pc, #56]	; (80073e0 <UART_SetConfig+0x70>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d115      	bne.n	80073d8 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80073ac:	f7ff f92e 	bl	800660c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073b0:	2319      	movs	r3, #25
 80073b2:	4343      	muls	r3, r0
 80073b4:	6862      	ldr	r2, [r4, #4]
 80073b6:	6820      	ldr	r0, [r4, #0]
 80073b8:	0092      	lsls	r2, r2, #2
 80073ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80073be:	2264      	movs	r2, #100	; 0x64
 80073c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80073c4:	fb02 3311 	mls	r3, r2, r1, r3
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	3332      	adds	r3, #50	; 0x32
 80073cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80073d0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80073d4:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80073d6:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80073d8:	f7ff f908 	bl	80065ec <HAL_RCC_GetPCLK1Freq>
 80073dc:	e7e8      	b.n	80073b0 <UART_SetConfig+0x40>
 80073de:	bf00      	nop
 80073e0:	40013800 	.word	0x40013800

080073e4 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	4604      	mov	r4, r0
 80073e8:	460e      	mov	r6, r1
 80073ea:	4617      	mov	r7, r2
 80073ec:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ee:	6822      	ldr	r2, [r4, #0]
 80073f0:	6813      	ldr	r3, [r2, #0]
 80073f2:	ea36 0303 	bics.w	r3, r6, r3
 80073f6:	d101      	bne.n	80073fc <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80073f8:	2000      	movs	r0, #0
 80073fa:	e028      	b.n	800744e <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80073fc:	1c6b      	adds	r3, r5, #1
 80073fe:	d0f7      	beq.n	80073f0 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007400:	b125      	cbz	r5, 800740c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8007402:	f7fd fbe1 	bl	8004bc8 <HAL_GetTick>
 8007406:	1bc0      	subs	r0, r0, r7
 8007408:	4285      	cmp	r5, r0
 800740a:	d2f0      	bcs.n	80073ee <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800740c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	f102 030c 	add.w	r3, r2, #12
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	320c      	adds	r2, #12
 800741c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8007420:	6821      	ldr	r1, [r4, #0]
 8007422:	2800      	cmp	r0, #0
 8007424:	d1f2      	bne.n	800740c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	f101 0314 	add.w	r3, r1, #20
 800742a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	f101 0014 	add.w	r0, r1, #20
 8007436:	e840 3200 	strex	r2, r3, [r0]
 800743a:	2a00      	cmp	r2, #0
 800743c:	d1f3      	bne.n	8007426 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800743e:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8007440:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8007442:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 8007446:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 800744a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800744e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007450 <HAL_UART_Init>:
{
 8007450:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007452:	4604      	mov	r4, r0
 8007454:	b348      	cbz	r0, 80074aa <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007456:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800745a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800745e:	b91b      	cbnz	r3, 8007468 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8007460:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8007464:	f7fb ff68 	bl	8003338 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8007468:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800746a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800746c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8007470:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8007472:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8007474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007478:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800747a:	f7ff ff79 	bl	8007370 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800747e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007480:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007482:	691a      	ldr	r2, [r3, #16]
 8007484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800748a:	695a      	ldr	r2, [r3, #20]
 800748c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007490:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8007492:	68da      	ldr	r2, [r3, #12]
 8007494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007498:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800749a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800749c:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800749e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80074a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074a6:	6360      	str	r0, [r4, #52]	; 0x34
}
 80074a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80074aa:	2001      	movs	r0, #1
 80074ac:	e7fc      	b.n	80074a8 <HAL_UART_Init+0x58>

080074ae <HAL_UART_DeInit>:
{
 80074ae:	b510      	push	{r4, lr}
  if (huart == NULL)
 80074b0:	4604      	mov	r4, r0
 80074b2:	b1a0      	cbz	r0, 80074de <HAL_UART_DeInit+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 80074b4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80074b6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80074b8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80074bc:	68d3      	ldr	r3, [r2, #12]
 80074be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074c2:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 80074c4:	f7fb ffdc 	bl	8003480 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c8:	2000      	movs	r0, #0
 80074ca:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(huart);
 80074cc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80074d0:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80074d4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d8:	6320      	str	r0, [r4, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074da:	6360      	str	r0, [r4, #52]	; 0x34
}
 80074dc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80074de:	2001      	movs	r0, #1
 80074e0:	e7fc      	b.n	80074dc <HAL_UART_DeInit+0x2e>

080074e2 <HAL_UART_Transmit>:
{
 80074e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e6:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80074e8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80074ec:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80074ee:	2b20      	cmp	r3, #32
{
 80074f0:	460e      	mov	r6, r1
 80074f2:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80074f4:	d13c      	bne.n	8007570 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 80074f6:	2900      	cmp	r1, #0
 80074f8:	d03c      	beq.n	8007574 <HAL_UART_Transmit+0x92>
 80074fa:	2a00      	cmp	r2, #0
 80074fc:	d03a      	beq.n	8007574 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074fe:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007500:	2500      	movs	r5, #0
 8007502:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007504:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8007508:	f7fd fb5e 	bl	8004bc8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800750c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800750e:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8007514:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8007516:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007518:	d103      	bne.n	8007522 <HAL_UART_Transmit+0x40>
 800751a:	6923      	ldr	r3, [r4, #16]
 800751c:	b90b      	cbnz	r3, 8007522 <HAL_UART_Transmit+0x40>
 800751e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8007520:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8007522:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007524:	b29b      	uxth	r3, r3
 8007526:	b953      	cbnz	r3, 800753e <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007528:	464b      	mov	r3, r9
 800752a:	4642      	mov	r2, r8
 800752c:	2140      	movs	r1, #64	; 0x40
 800752e:	4620      	mov	r0, r4
 8007530:	f7ff ff58 	bl	80073e4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8007534:	b950      	cbnz	r0, 800754c <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8007536:	2320      	movs	r3, #32
 8007538:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 800753c:	e007      	b.n	800754e <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800753e:	464b      	mov	r3, r9
 8007540:	4642      	mov	r2, r8
 8007542:	2180      	movs	r1, #128	; 0x80
 8007544:	4620      	mov	r0, r4
 8007546:	f7ff ff4d 	bl	80073e4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800754a:	b110      	cbz	r0, 8007552 <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 800754c:	2003      	movs	r0, #3
}
 800754e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007552:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8007554:	b94e      	cbnz	r6, 800756a <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007556:	f835 3b02 	ldrh.w	r3, [r5], #2
 800755a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800755e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8007560:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8007562:	3901      	subs	r1, #1
 8007564:	b289      	uxth	r1, r1
 8007566:	84e1      	strh	r1, [r4, #38]	; 0x26
 8007568:	e7db      	b.n	8007522 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800756a:	f816 3b01 	ldrb.w	r3, [r6], #1
 800756e:	e7f6      	b.n	800755e <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8007570:	2002      	movs	r0, #2
 8007572:	e7ec      	b.n	800754e <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8007574:	2001      	movs	r0, #1
 8007576:	e7ea      	b.n	800754e <HAL_UART_Transmit+0x6c>

08007578 <HAL_UART_TxCpltCallback>:
 8007578:	4770      	bx	lr

0800757a <HAL_UART_RxCpltCallback>:
 800757a:	4770      	bx	lr

0800757c <HAL_UART_RxHalfCpltCallback>:
 800757c:	4770      	bx	lr

0800757e <HAL_UART_ErrorCallback>:
 800757e:	4770      	bx	lr

08007580 <UART_DMAError>:
{
 8007580:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007582:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007584:	6803      	ldr	r3, [r0, #0]
 8007586:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007588:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800758c:	2921      	cmp	r1, #33	; 0x21
 800758e:	d112      	bne.n	80075b6 <UART_DMAError+0x36>
 8007590:	0612      	lsls	r2, r2, #24
 8007592:	d510      	bpl.n	80075b6 <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 8007594:	2200      	movs	r2, #0
 8007596:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	f103 020c 	add.w	r2, r3, #12
 800759c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80075a0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	f103 0c0c 	add.w	ip, r3, #12
 80075a8:	e84c 2100 	strex	r1, r2, [ip]
 80075ac:	2900      	cmp	r1, #0
 80075ae:	d1f3      	bne.n	8007598 <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 80075b0:	2220      	movs	r2, #32
 80075b2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075b6:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80075b8:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 80075bc:	2a22      	cmp	r2, #34	; 0x22
 80075be:	d105      	bne.n	80075cc <UART_DMAError+0x4c>
 80075c0:	065b      	lsls	r3, r3, #25
 80075c2:	d503      	bpl.n	80075cc <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80075c8:	f7ff fea4 	bl	8007314 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80075cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80075ce:	f043 0310 	orr.w	r3, r3, #16
 80075d2:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_UART_ErrorCallback(huart);
 80075d4:	f7ff ffd3 	bl	800757e <HAL_UART_ErrorCallback>
}
 80075d8:	bd08      	pop	{r3, pc}

080075da <UART_DMAAbortOnError>:
{
 80075da:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80075dc:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075de:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80075e0:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075e2:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80075e4:	f7ff ffcb 	bl	800757e <HAL_UART_ErrorCallback>
}
 80075e8:	bd08      	pop	{r3, pc}

080075ea <HAL_UART_AbortCpltCallback>:
 80075ea:	4770      	bx	lr

080075ec <HAL_UART_Abort_IT>:
{
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80075f0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f2:	f102 030c 	add.w	r3, r2, #12
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	320c      	adds	r2, #12
 8007600:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	2900      	cmp	r1, #0
 8007608:	d1f2      	bne.n	80075f0 <HAL_UART_Abort_IT+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760a:	f103 0214 	add.w	r2, r3, #20
 800760e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007612:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	f103 0014 	add.w	r0, r3, #20
 800761a:	e840 2100 	strex	r1, r2, [r0]
 800761e:	2900      	cmp	r1, #0
 8007620:	d1f3      	bne.n	800760a <HAL_UART_Abort_IT+0x1e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007622:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007624:	2a01      	cmp	r2, #1
 8007626:	d035      	beq.n	8007694 <HAL_UART_Abort_IT+0xa8>
  if (huart->hdmatx != NULL)
 8007628:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800762a:	2800      	cmp	r0, #0
 800762c:	d13f      	bne.n	80076ae <HAL_UART_Abort_IT+0xc2>
  if (huart->hdmarx != NULL)
 800762e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007630:	b129      	cbz	r1, 800763e <HAL_UART_Abort_IT+0x52>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007632:	695a      	ldr	r2, [r3, #20]
 8007634:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8007638:	bf18      	it	ne
 800763a:	4a2d      	ldrne	r2, [pc, #180]	; (80076f0 <HAL_UART_Abort_IT+0x104>)
      huart->hdmarx->XferAbortCallback = NULL;
 800763c:	634a      	str	r2, [r1, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800763e:	695a      	ldr	r2, [r3, #20]
 8007640:	0612      	lsls	r2, r2, #24
 8007642:	d43b      	bmi.n	80076bc <HAL_UART_Abort_IT+0xd0>
  uint32_t AbortCplt = 0x01U;
 8007644:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007646:	6822      	ldr	r2, [r4, #0]
 8007648:	6953      	ldr	r3, [r2, #20]
 800764a:	065b      	lsls	r3, r3, #25
 800764c:	d54b      	bpl.n	80076e6 <HAL_UART_Abort_IT+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	f102 0314 	add.w	r3, r2, #20
 8007652:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	f102 0114 	add.w	r1, r2, #20
 800765e:	e841 3600 	strex	r6, r3, [r1]
 8007662:	2e00      	cmp	r6, #0
 8007664:	d1f3      	bne.n	800764e <HAL_UART_Abort_IT+0x62>
    if (huart->hdmarx != NULL)
 8007666:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007668:	2800      	cmp	r0, #0
 800766a:	d03c      	beq.n	80076e6 <HAL_UART_Abort_IT+0xfa>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800766c:	f7fd fe08 	bl	8005280 <HAL_DMA_Abort_IT>
 8007670:	2800      	cmp	r0, #0
 8007672:	d03a      	beq.n	80076ea <HAL_UART_Abort_IT+0xfe>
        huart->hdmarx->XferAbortCallback = NULL;
 8007674:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007676:	635e      	str	r6, [r3, #52]	; 0x34
    huart->TxXferCount = 0x00U;
 8007678:	2300      	movs	r3, #0
    huart->gState  = HAL_UART_STATE_READY;
 800767a:	2220      	movs	r2, #32
    huart->TxXferCount = 0x00U;
 800767c:	84e3      	strh	r3, [r4, #38]	; 0x26
    HAL_UART_AbortCpltCallback(huart);
 800767e:	4620      	mov	r0, r4
    huart->RxXferCount = 0x00U;
 8007680:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007682:	6463      	str	r3, [r4, #68]	; 0x44
    huart->gState  = HAL_UART_STATE_READY;
 8007684:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8007688:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768c:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_UART_AbortCpltCallback(huart);
 800768e:	f7ff ffac 	bl	80075ea <HAL_UART_AbortCpltCallback>
 8007692:	e02a      	b.n	80076ea <HAL_UART_Abort_IT+0xfe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	f103 020c 	add.w	r2, r3, #12
 8007698:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800769c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	f103 000c 	add.w	r0, r3, #12
 80076a4:	e840 2100 	strex	r1, r2, [r0]
 80076a8:	2900      	cmp	r1, #0
 80076aa:	d1f3      	bne.n	8007694 <HAL_UART_Abort_IT+0xa8>
 80076ac:	e7bc      	b.n	8007628 <HAL_UART_Abort_IT+0x3c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80076ae:	695a      	ldr	r2, [r3, #20]
 80076b0:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80076b4:	bf18      	it	ne
 80076b6:	4a0f      	ldrne	r2, [pc, #60]	; (80076f4 <HAL_UART_Abort_IT+0x108>)
      huart->hdmatx->XferAbortCallback = NULL;
 80076b8:	6342      	str	r2, [r0, #52]	; 0x34
 80076ba:	e7b8      	b.n	800762e <HAL_UART_Abort_IT+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	f103 0214 	add.w	r2, r3, #20
 80076c0:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	f103 0114 	add.w	r1, r3, #20
 80076cc:	e841 2500 	strex	r5, r2, [r1]
 80076d0:	2d00      	cmp	r5, #0
 80076d2:	d1f3      	bne.n	80076bc <HAL_UART_Abort_IT+0xd0>
    if (huart->hdmatx != NULL)
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d0b5      	beq.n	8007644 <HAL_UART_Abort_IT+0x58>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80076d8:	f7fd fdd2 	bl	8005280 <HAL_DMA_Abort_IT>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d0b2      	beq.n	8007646 <HAL_UART_Abort_IT+0x5a>
        huart->hdmatx->XferAbortCallback = NULL;
 80076e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80076e2:	635d      	str	r5, [r3, #52]	; 0x34
 80076e4:	e7ae      	b.n	8007644 <HAL_UART_Abort_IT+0x58>
  if (AbortCplt == 0x01U)
 80076e6:	2d01      	cmp	r5, #1
 80076e8:	d0c6      	beq.n	8007678 <HAL_UART_Abort_IT+0x8c>
}
 80076ea:	2000      	movs	r0, #0
 80076ec:	bd70      	pop	{r4, r5, r6, pc}
 80076ee:	bf00      	nop
 80076f0:	080076f9 	.word	0x080076f9
 80076f4:	08007723 	.word	0x08007723

080076f8 <UART_DMARxAbortCallback>:
{
 80076f8:	b508      	push	{r3, lr}
  huart->hdmarx->XferAbortCallback = NULL;
 80076fa:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmarx->XferAbortCallback = NULL;
 80076fe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007700:	6353      	str	r3, [r2, #52]	; 0x34
  if (huart->hdmatx != NULL)
 8007702:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8007704:	b10a      	cbz	r2, 800770a <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 8007706:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007708:	b952      	cbnz	r2, 8007720 <UART_DMARxAbortCallback+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 800770a:	2220      	movs	r2, #32
  huart->TxXferCount = 0x00U;
 800770c:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800770e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007710:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 8007712:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007716:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771a:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 800771c:	f7ff ff65 	bl	80075ea <HAL_UART_AbortCpltCallback>
}
 8007720:	bd08      	pop	{r3, pc}

08007722 <UART_DMATxAbortCallback>:
{
 8007722:	b508      	push	{r3, lr}
  huart->hdmatx->XferAbortCallback = NULL;
 8007724:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007726:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmatx->XferAbortCallback = NULL;
 8007728:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800772a:	6353      	str	r3, [r2, #52]	; 0x34
  if (huart->hdmarx != NULL)
 800772c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800772e:	b10a      	cbz	r2, 8007734 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8007730:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007732:	b952      	cbnz	r2, 800774a <UART_DMATxAbortCallback+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 8007734:	2220      	movs	r2, #32
  huart->TxXferCount = 0x00U;
 8007736:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8007738:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800773a:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 800773c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007740:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007744:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 8007746:	f7ff ff50 	bl	80075ea <HAL_UART_AbortCpltCallback>
}
 800774a:	bd08      	pop	{r3, pc}

0800774c <HAL_UARTEx_RxEventCallback>:
}
 800774c:	4770      	bx	lr

0800774e <UART_DMARxHalfCplt>:
{
 800774e:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007750:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007752:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007754:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007756:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007758:	2b01      	cmp	r3, #1
 800775a:	d104      	bne.n	8007766 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800775c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800775e:	0849      	lsrs	r1, r1, #1
 8007760:	f7ff fff4 	bl	800774c <HAL_UARTEx_RxEventCallback>
}
 8007764:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8007766:	f7ff ff09 	bl	800757c <HAL_UART_RxHalfCpltCallback>
}
 800776a:	e7fb      	b.n	8007764 <UART_DMARxHalfCplt+0x16>

0800776c <UART_DMAReceiveCplt>:
{
 800776c:	b508      	push	{r3, lr}
 800776e:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007770:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007772:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f013 0320 	ands.w	r3, r3, #32
 800777a:	d137      	bne.n	80077ec <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 800777c:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800777e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	f102 030c 	add.w	r3, r2, #12
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	320c      	adds	r2, #12
 800778e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007792:	6803      	ldr	r3, [r0, #0]
 8007794:	2900      	cmp	r1, #0
 8007796:	d1f2      	bne.n	800777e <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	f103 0214 	add.w	r2, r3, #20
 800779c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a4:	f103 0c14 	add.w	ip, r3, #20
 80077a8:	e84c 2100 	strex	r1, r2, [ip]
 80077ac:	2900      	cmp	r1, #0
 80077ae:	d1f3      	bne.n	8007798 <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	f103 0214 	add.w	r2, r3, #20
 80077b4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	f103 0c14 	add.w	ip, r3, #20
 80077c0:	e84c 2100 	strex	r1, r2, [ip]
 80077c4:	2900      	cmp	r1, #0
 80077c6:	d1f3      	bne.n	80077b0 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 80077c8:	2220      	movs	r2, #32
 80077ca:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ce:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80077d0:	2a01      	cmp	r2, #1
 80077d2:	d10b      	bne.n	80077ec <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	f103 020c 	add.w	r2, r3, #12
 80077d8:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077dc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	f103 0c0c 	add.w	ip, r3, #12
 80077e4:	e84c 2100 	strex	r1, r2, [ip]
 80077e8:	2900      	cmp	r1, #0
 80077ea:	d1f3      	bne.n	80077d4 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077ec:	2300      	movs	r3, #0
 80077ee:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d103      	bne.n	80077fe <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077f6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80077f8:	f7ff ffa8 	bl	800774c <HAL_UARTEx_RxEventCallback>
}
 80077fc:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 80077fe:	f7ff febc 	bl	800757a <HAL_UART_RxCpltCallback>
}
 8007802:	e7fb      	b.n	80077fc <UART_DMAReceiveCplt+0x90>

08007804 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007804:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007808:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800780a:	2b22      	cmp	r3, #34	; 0x22
 800780c:	d142      	bne.n	8007894 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800780e:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007810:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007812:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007816:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007818:	d13f      	bne.n	800789a <UART_Receive_IT.isra.0+0x96>
 800781a:	6901      	ldr	r1, [r0, #16]
 800781c:	2900      	cmp	r1, #0
 800781e:	d13f      	bne.n	80078a0 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007820:	6852      	ldr	r2, [r2, #4]
 8007822:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007826:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800782a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800782c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800782e:	3b01      	subs	r3, #1
 8007830:	b29b      	uxth	r3, r3
 8007832:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8007834:	2b00      	cmp	r3, #0
 8007836:	d12d      	bne.n	8007894 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007838:	6802      	ldr	r2, [r0, #0]
 800783a:	68d1      	ldr	r1, [r2, #12]
 800783c:	f021 0120 	bic.w	r1, r1, #32
 8007840:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007842:	68d1      	ldr	r1, [r2, #12]
 8007844:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007848:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800784a:	6951      	ldr	r1, [r2, #20]
 800784c:	f021 0101 	bic.w	r1, r1, #1
 8007850:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007852:	2220      	movs	r2, #32
 8007854:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007858:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800785a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800785c:	2a01      	cmp	r2, #1
 800785e:	6802      	ldr	r2, [r0, #0]
 8007860:	d128      	bne.n	80078b4 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007862:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007864:	f102 030c 	add.w	r3, r2, #12
 8007868:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800786c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	f102 0c0c 	add.w	ip, r2, #12
 8007874:	e84c 3100 	strex	r1, r3, [ip]
 8007878:	2900      	cmp	r1, #0
 800787a:	d1f3      	bne.n	8007864 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800787c:	6813      	ldr	r3, [r2, #0]
 800787e:	06db      	lsls	r3, r3, #27
 8007880:	d505      	bpl.n	800788e <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007882:	9101      	str	r1, [sp, #4]
 8007884:	6813      	ldr	r3, [r2, #0]
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	6853      	ldr	r3, [r2, #4]
 800788a:	9301      	str	r3, [sp, #4]
 800788c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800788e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007890:	f7ff ff5c 	bl	800774c <HAL_UARTEx_RxEventCallback>
}
 8007894:	b003      	add	sp, #12
 8007896:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800789a:	b939      	cbnz	r1, 80078ac <UART_Receive_IT.isra.0+0xa8>
 800789c:	6901      	ldr	r1, [r0, #16]
 800789e:	b929      	cbnz	r1, 80078ac <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078a0:	6852      	ldr	r2, [r2, #4]
 80078a2:	b2d2      	uxtb	r2, r2
 80078a4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80078a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80078a8:	3301      	adds	r3, #1
 80078aa:	e7be      	b.n	800782a <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078ac:	6852      	ldr	r2, [r2, #4]
 80078ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078b2:	e7f7      	b.n	80078a4 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 80078b4:	f7ff fe61 	bl	800757a <HAL_UART_RxCpltCallback>
 80078b8:	e7ec      	b.n	8007894 <UART_Receive_IT.isra.0+0x90>
	...

080078bc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80078bc:	6803      	ldr	r3, [r0, #0]
{
 80078be:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80078c0:	681a      	ldr	r2, [r3, #0]
{
 80078c2:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80078c4:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078c6:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078c8:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80078ca:	d108      	bne.n	80078de <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078cc:	0696      	lsls	r6, r2, #26
 80078ce:	d568      	bpl.n	80079a2 <HAL_UART_IRQHandler+0xe6>
 80078d0:	068d      	lsls	r5, r1, #26
 80078d2:	d566      	bpl.n	80079a2 <HAL_UART_IRQHandler+0xe6>
}
 80078d4:	b002      	add	sp, #8
 80078d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80078da:	f7ff bf93 	b.w	8007804 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078de:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078e2:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80078e6:	4305      	orrs	r5, r0
 80078e8:	d05b      	beq.n	80079a2 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078ea:	07d6      	lsls	r6, r2, #31
 80078ec:	d505      	bpl.n	80078fa <HAL_UART_IRQHandler+0x3e>
 80078ee:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078f0:	bf42      	ittt	mi
 80078f2:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 80078f4:	f043 0301 	orrmi.w	r3, r3, #1
 80078f8:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078fa:	0753      	lsls	r3, r2, #29
 80078fc:	d504      	bpl.n	8007908 <HAL_UART_IRQHandler+0x4c>
 80078fe:	b118      	cbz	r0, 8007908 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007900:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007902:	f043 0302 	orr.w	r3, r3, #2
 8007906:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007908:	0796      	lsls	r6, r2, #30
 800790a:	d504      	bpl.n	8007916 <HAL_UART_IRQHandler+0x5a>
 800790c:	b118      	cbz	r0, 8007916 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800790e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007910:	f043 0304 	orr.w	r3, r3, #4
 8007914:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007916:	0715      	lsls	r5, r2, #28
 8007918:	d507      	bpl.n	800792a <HAL_UART_IRQHandler+0x6e>
 800791a:	f001 0320 	and.w	r3, r1, #32
 800791e:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007920:	bf1e      	ittt	ne
 8007922:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8007924:	f043 0308 	orrne.w	r3, r3, #8
 8007928:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800792a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800792c:	2b00      	cmp	r3, #0
 800792e:	d032      	beq.n	8007996 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007930:	0692      	lsls	r2, r2, #26
 8007932:	d504      	bpl.n	800793e <HAL_UART_IRQHandler+0x82>
 8007934:	068b      	lsls	r3, r1, #26
 8007936:	d502      	bpl.n	800793e <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8007938:	4620      	mov	r0, r4
 800793a:	f7ff ff63 	bl	8007804 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800793e:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8007940:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007942:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007944:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007946:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800794a:	f002 0208 	and.w	r2, r2, #8
 800794e:	ea53 0502 	orrs.w	r5, r3, r2
 8007952:	d022      	beq.n	800799a <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8007954:	f7ff fcde 	bl	8007314 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	6973      	ldr	r3, [r6, #20]
 800795a:	065e      	lsls	r6, r3, #25
 800795c:	d518      	bpl.n	8007990 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800795e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	f102 0314 	add.w	r3, r2, #20
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796c:	3214      	adds	r2, #20
 800796e:	e842 3100 	strex	r1, r3, [r2]
 8007972:	2900      	cmp	r1, #0
 8007974:	d1f3      	bne.n	800795e <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8007976:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007978:	b150      	cbz	r0, 8007990 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800797a:	4b74      	ldr	r3, [pc, #464]	; (8007b4c <HAL_UART_IRQHandler+0x290>)
 800797c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800797e:	f7fd fc7f 	bl	8005280 <HAL_DMA_Abort_IT>
 8007982:	b140      	cbz	r0, 8007996 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007984:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007986:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8007988:	b002      	add	sp, #8
 800798a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800798e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8007990:	4620      	mov	r0, r4
 8007992:	f7ff fdf4 	bl	800757e <HAL_UART_ErrorCallback>
}
 8007996:	b002      	add	sp, #8
 8007998:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800799a:	f7ff fdf0 	bl	800757e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799e:	6465      	str	r5, [r4, #68]	; 0x44
 80079a0:	e7f9      	b.n	8007996 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80079a4:	2801      	cmp	r0, #1
 80079a6:	f040 8094 	bne.w	8007ad2 <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079aa:	06d5      	lsls	r5, r2, #27
 80079ac:	f140 8091 	bpl.w	8007ad2 <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80079b0:	06c8      	lsls	r0, r1, #27
 80079b2:	f140 808e 	bpl.w	8007ad2 <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079b6:	2200      	movs	r2, #0
 80079b8:	9201      	str	r2, [sp, #4]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	9201      	str	r2, [sp, #4]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	9201      	str	r2, [sp, #4]
 80079c2:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c4:	695a      	ldr	r2, [r3, #20]
 80079c6:	0652      	lsls	r2, r2, #25
 80079c8:	d54d      	bpl.n	8007a66 <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079ca:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80079cc:	680a      	ldr	r2, [r1, #0]
 80079ce:	6852      	ldr	r2, [r2, #4]
 80079d0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80079d2:	2a00      	cmp	r2, #0
 80079d4:	d0df      	beq.n	8007996 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079d6:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80079d8:	4290      	cmp	r0, r2
 80079da:	d9dc      	bls.n	8007996 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 80079dc:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079de:	698a      	ldr	r2, [r1, #24]
 80079e0:	2a20      	cmp	r2, #32
 80079e2:	d036      	beq.n	8007a52 <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	f103 020c 	add.w	r2, r3, #12
 80079e8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	f103 000c 	add.w	r0, r3, #12
 80079f4:	e840 2100 	strex	r1, r2, [r0]
 80079f8:	2900      	cmp	r1, #0
 80079fa:	d1f3      	bne.n	80079e4 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	f103 0214 	add.w	r2, r3, #20
 8007a00:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a04:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	f103 0014 	add.w	r0, r3, #20
 8007a0c:	e840 2100 	strex	r1, r2, [r0]
 8007a10:	2900      	cmp	r1, #0
 8007a12:	d1f3      	bne.n	80079fc <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	f103 0214 	add.w	r2, r3, #20
 8007a18:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a20:	f103 0014 	add.w	r0, r3, #20
 8007a24:	e840 2100 	strex	r1, r2, [r0]
 8007a28:	2900      	cmp	r1, #0
 8007a2a:	d1f3      	bne.n	8007a14 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a32:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	f103 020c 	add.w	r2, r3, #12
 8007a38:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a3c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	f103 000c 	add.w	r0, r3, #12
 8007a44:	e840 2100 	strex	r1, r2, [r0]
 8007a48:	2900      	cmp	r1, #0
 8007a4a:	d1f3      	bne.n	8007a34 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a4c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007a4e:	f7fd fbf8 	bl	8005242 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a52:	2302      	movs	r3, #2
 8007a54:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a56:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007a58:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007a5a:	1ac9      	subs	r1, r1, r3
 8007a5c:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f7ff fe74 	bl	800774c <HAL_UARTEx_RxEventCallback>
 8007a64:	e797      	b.n	8007996 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a66:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8007a68:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a6a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 8007a6c:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a6e:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d090      	beq.n	8007996 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a74:	1a89      	subs	r1, r1, r2
 8007a76:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8007a78:	2900      	cmp	r1, #0
 8007a7a:	d08c      	beq.n	8007996 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	f103 020c 	add.w	r2, r3, #12
 8007a80:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	f103 050c 	add.w	r5, r3, #12
 8007a8c:	e845 2000 	strex	r0, r2, [r5]
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d1f3      	bne.n	8007a7c <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	f103 0214 	add.w	r2, r3, #20
 8007a98:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a9c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	f103 0514 	add.w	r5, r3, #20
 8007aa4:	e845 2000 	strex	r0, r2, [r5]
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d1f3      	bne.n	8007a94 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 8007aac:	2220      	movs	r2, #32
 8007aae:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab2:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	f103 020c 	add.w	r2, r3, #12
 8007ab8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007abc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac0:	f103 050c 	add.w	r5, r3, #12
 8007ac4:	e845 2000 	strex	r0, r2, [r5]
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d1f3      	bne.n	8007ab4 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007acc:	2302      	movs	r3, #2
 8007ace:	6363      	str	r3, [r4, #52]	; 0x34
 8007ad0:	e7c5      	b.n	8007a5e <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ad2:	0616      	lsls	r6, r2, #24
 8007ad4:	d528      	bpl.n	8007b28 <HAL_UART_IRQHandler+0x26c>
 8007ad6:	060d      	lsls	r5, r1, #24
 8007ad8:	d526      	bpl.n	8007b28 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ada:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007ade:	2a21      	cmp	r2, #33	; 0x21
 8007ae0:	f47f af59 	bne.w	8007996 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ae4:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ae6:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ae8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007aec:	d117      	bne.n	8007b1e <HAL_UART_IRQHandler+0x262>
 8007aee:	6921      	ldr	r1, [r4, #16]
 8007af0:	b9a9      	cbnz	r1, 8007b1e <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007af2:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007af6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007afa:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007afc:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8007afe:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8007b00:	3a01      	subs	r2, #1
 8007b02:	b292      	uxth	r2, r2
 8007b04:	84e2      	strh	r2, [r4, #38]	; 0x26
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	f47f af45 	bne.w	8007996 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b12:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b1a:	60da      	str	r2, [r3, #12]
 8007b1c:	e73b      	b.n	8007996 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b1e:	1c51      	adds	r1, r2, #1
 8007b20:	6221      	str	r1, [r4, #32]
 8007b22:	7812      	ldrb	r2, [r2, #0]
 8007b24:	605a      	str	r2, [r3, #4]
 8007b26:	e7ea      	b.n	8007afe <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b28:	0650      	lsls	r0, r2, #25
 8007b2a:	f57f af34 	bpl.w	8007996 <HAL_UART_IRQHandler+0xda>
 8007b2e:	064a      	lsls	r2, r1, #25
 8007b30:	f57f af31 	bpl.w	8007996 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b34:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8007b36:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b3c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007b3e:	2320      	movs	r3, #32
 8007b40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8007b44:	f7ff fd18 	bl	8007578 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8007b48:	e725      	b.n	8007996 <HAL_UART_IRQHandler+0xda>
 8007b4a:	bf00      	nop
 8007b4c:	080075db 	.word	0x080075db

08007b50 <UART_Start_Receive_DMA>:
{
 8007b50:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b52:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 8007b54:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b56:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b58:	2222      	movs	r2, #34	; 0x22
{
 8007b5a:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8007b5c:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b5e:	6445      	str	r5, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b60:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007b64:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8007b66:	4a1d      	ldr	r2, [pc, #116]	; (8007bdc <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007b68:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007b6a:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007b6c:	4a1c      	ldr	r2, [pc, #112]	; (8007be0 <UART_Start_Receive_DMA+0x90>)
 8007b6e:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007b70:	4a1c      	ldr	r2, [pc, #112]	; (8007be4 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 8007b72:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007b76:	460a      	mov	r2, r1
 8007b78:	1d31      	adds	r1, r6, #4
 8007b7a:	f7fd fb23 	bl	80051c4 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	9501      	str	r5, [sp, #4]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	9201      	str	r2, [sp, #4]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	9201      	str	r2, [sp, #4]
 8007b8a:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b8c:	6922      	ldr	r2, [r4, #16]
 8007b8e:	b15a      	cbz	r2, 8007ba8 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	f103 020c 	add.w	r2, r3, #12
 8007b94:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	f103 000c 	add.w	r0, r3, #12
 8007ba0:	e840 2100 	strex	r1, r2, [r0]
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	d1f3      	bne.n	8007b90 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	f103 0214 	add.w	r2, r3, #20
 8007bac:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb0:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	f103 0014 	add.w	r0, r3, #20
 8007bb8:	e840 2100 	strex	r1, r2, [r0]
 8007bbc:	2900      	cmp	r1, #0
 8007bbe:	d1f3      	bne.n	8007ba8 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	f103 0214 	add.w	r2, r3, #20
 8007bc4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	f103 0114 	add.w	r1, r3, #20
 8007bd0:	e841 2000 	strex	r0, r2, [r1]
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d1f3      	bne.n	8007bc0 <UART_Start_Receive_DMA+0x70>
}
 8007bd8:	b002      	add	sp, #8
 8007bda:	bd70      	pop	{r4, r5, r6, pc}
 8007bdc:	0800776d 	.word	0x0800776d
 8007be0:	0800774f 	.word	0x0800774f
 8007be4:	08007581 	.word	0x08007581

08007be8 <HAL_UART_Receive_DMA>:
{
 8007be8:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bea:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8007bee:	2e20      	cmp	r6, #32
 8007bf0:	d106      	bne.n	8007c00 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8007bf2:	b141      	cbz	r1, 8007c06 <HAL_UART_Receive_DMA+0x1e>
 8007bf4:	b13a      	cbz	r2, 8007c06 <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf6:	2400      	movs	r4, #0
 8007bf8:	6304      	str	r4, [r0, #48]	; 0x30
}
 8007bfa:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007bfc:	f7ff bfa8 	b.w	8007b50 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8007c00:	2002      	movs	r0, #2
}
 8007c02:	bc70      	pop	{r4, r5, r6}
 8007c04:	4770      	bx	lr
      return HAL_ERROR;
 8007c06:	2001      	movs	r0, #1
 8007c08:	e7fb      	b.n	8007c02 <HAL_UART_Receive_DMA+0x1a>

08007c0a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c0a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007c0c:	f000 ffbc 	bl	8008b88 <vTaskStartScheduler>
  
  return osOK;
}
 8007c10:	2000      	movs	r0, #0
 8007c12:	bd08      	pop	{r3, pc}

08007c14 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007c14:	b570      	push	{r4, r5, r6, lr}
 8007c16:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007c18:	6946      	ldr	r6, [r0, #20]
{
 8007c1a:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c1c:	e9d0 1000 	ldrd	r1, r0, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c20:	692a      	ldr	r2, [r5, #16]
 8007c22:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8007c26:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007c28:	b176      	cbz	r6, 8007c48 <osThreadCreate+0x34>
 8007c2a:	69ad      	ldr	r5, [r5, #24]
 8007c2c:	b165      	cbz	r5, 8007c48 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8007c2e:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c30:	bf0c      	ite	eq
 8007c32:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8007c34:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c36:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8007c3a:	9400      	str	r4, [sp, #0]
 8007c3c:	f000 feae 	bl	800899c <xTaskCreateStatic>
 8007c40:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007c42:	9805      	ldr	r0, [sp, #20]
}
 8007c44:	b006      	add	sp, #24
 8007c46:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8007c48:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c4a:	bf0c      	ite	eq
 8007c4c:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8007c4e:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c50:	ad05      	add	r5, sp, #20
 8007c52:	e9cd 4500 	strd	r4, r5, [sp]
 8007c56:	b292      	uxth	r2, r2
 8007c58:	f000 fed7 	bl	8008a0a <xTaskCreate>
 8007c5c:	2801      	cmp	r0, #1
 8007c5e:	d0f0      	beq.n	8007c42 <osThreadCreate+0x2e>
      return NULL;
 8007c60:	2000      	movs	r0, #0
 8007c62:	e7ef      	b.n	8007c44 <osThreadCreate+0x30>

08007c64 <osThreadYield>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
  taskYIELD();
 8007c64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	f3bf 8f6f 	isb	sy
  
  return osOK;
}
 8007c78:	2000      	movs	r0, #0
 8007c7a:	4770      	bx	lr

08007c7c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007c7c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007c7e:	2801      	cmp	r0, #1
 8007c80:	bf38      	it	cc
 8007c82:	2001      	movcc	r0, #1
 8007c84:	f001 f930 	bl	8008ee8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007c88:	2000      	movs	r0, #0
 8007c8a:	bd08      	pop	{r3, pc}

08007c8c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007c8c:	b513      	push	{r0, r1, r4, lr}
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8007c8e:	c811      	ldmia	r0, {r0, r4}
    return xTimerCreateStatic((const char *)"",
 8007c90:	3901      	subs	r1, #1
{
 8007c92:	4613      	mov	r3, r2
    return xTimerCreateStatic((const char *)"",
 8007c94:	424a      	negs	r2, r1
 8007c96:	414a      	adcs	r2, r1
  if(timer_def->controlblock != NULL) {
 8007c98:	b13c      	cbz	r4, 8007caa <osTimerCreate+0x1e>
    return xTimerCreateStatic((const char *)"",
 8007c9a:	e9cd 0400 	strd	r0, r4, [sp]
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	4805      	ldr	r0, [pc, #20]	; (8007cb8 <osTimerCreate+0x2c>)
 8007ca2:	f001 fd04 	bl	80096ae <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8007ca6:	b002      	add	sp, #8
 8007ca8:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8007caa:	9000      	str	r0, [sp, #0]
 8007cac:	2101      	movs	r1, #1
 8007cae:	4802      	ldr	r0, [pc, #8]	; (8007cb8 <osTimerCreate+0x2c>)
 8007cb0:	f001 fcd6 	bl	8009660 <xTimerCreate>
 8007cb4:	e7f7      	b.n	8007ca6 <osTimerCreate+0x1a>
 8007cb6:	bf00      	nop
 8007cb8:	0800b601 	.word	0x0800b601

08007cbc <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8007cbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8007cbe:	2400      	movs	r4, #0
 8007cc0:	2901      	cmp	r1, #1
 8007cc2:	460a      	mov	r2, r1
 8007cc4:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8007cc6:	bf38      	it	cc
 8007cc8:	2201      	movcc	r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cca:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 8007cce:	b1b3      	cbz	r3, 8007cfe <osTimerStart+0x42>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8007cd0:	2109      	movs	r1, #9
 8007cd2:	9400      	str	r4, [sp, #0]
 8007cd4:	ab03      	add	r3, sp, #12
 8007cd6:	f001 fd27 	bl	8009728 <xTimerGenericCommand>
 8007cda:	2801      	cmp	r0, #1
 8007cdc:	d115      	bne.n	8007d0a <osTimerStart+0x4e>
    {
      result = osErrorOS;
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8007cde:	9b03      	ldr	r3, [sp, #12]
 8007ce0:	b913      	cbnz	r3, 8007ce8 <osTimerStart+0x2c>
  osStatus result = osOK;
 8007ce2:	2000      	movs	r0, #0

#else 
  result = osErrorOS;
#endif
  return result;
}
 8007ce4:	b004      	add	sp, #16
 8007ce6:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8007ce8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	e7f1      	b.n	8007ce2 <osTimerStart+0x26>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8007cfe:	2104      	movs	r1, #4
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	f001 fd11 	bl	8009728 <xTimerGenericCommand>
 8007d06:	2801      	cmp	r0, #1
 8007d08:	d0eb      	beq.n	8007ce2 <osTimerStart+0x26>
      result = osErrorOS;
 8007d0a:	20ff      	movs	r0, #255	; 0xff
  return result;
 8007d0c:	e7ea      	b.n	8007ce4 <osTimerStart+0x28>

08007d0e <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8007d0e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007d10:	2300      	movs	r3, #0
  uint32_t ulPreviousNotificationValue = 0;
 8007d12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d16:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode())
 8007d1a:	b1d3      	cbz	r3, 8007d52 <osSignalSet+0x44>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8007d1c:	ab02      	add	r3, sp, #8
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	2201      	movs	r2, #1
 8007d22:	ab03      	add	r3, sp, #12
 8007d24:	f001 fb94 	bl	8009450 <xTaskGenericNotifyFromISR>
 8007d28:	2801      	cmp	r0, #1
 8007d2a:	d004      	beq.n	8007d36 <osSignalSet+0x28>
      return 0x80000000;
 8007d2c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8007d30:	b005      	add	sp, #20
 8007d32:	f85d fb04 	ldr.w	pc, [sp], #4
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007d36:	9b02      	ldr	r3, [sp, #8]
 8007d38:	b14b      	cbz	r3, 8007d4e <osSignalSet+0x40>
 8007d3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d42:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	f3bf 8f6f 	isb	sy
  return ulPreviousNotificationValue;
 8007d4e:	9803      	ldr	r0, [sp, #12]
 8007d50:	e7ee      	b.n	8007d30 <osSignalSet+0x22>
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8007d52:	2201      	movs	r2, #1
 8007d54:	ab03      	add	r3, sp, #12
 8007d56:	f001 fb0d 	bl	8009374 <xTaskGenericNotify>
 8007d5a:	2801      	cmp	r0, #1
 8007d5c:	d0f7      	beq.n	8007d4e <osSignalSet+0x40>
 8007d5e:	e7e5      	b.n	8007d2c <osSignalSet+0x1e>

08007d60 <osSignalWait>:

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8007d60:	2300      	movs	r3, #0
{
 8007d62:	b530      	push	{r4, r5, lr}
 8007d64:	b085      	sub	sp, #20
 8007d66:	4605      	mov	r5, r0
 8007d68:	4614      	mov	r4, r2
  ret.value.signals = 0;  
 8007d6a:	9302      	str	r3, [sp, #8]
 8007d6c:	f3ef 8005 	mrs	r0, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 8007d70:	b9c0      	cbnz	r0, 8007da4 <osSignalWait+0x44>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8007d72:	4613      	mov	r3, r2
 8007d74:	aa02      	add	r2, sp, #8
 8007d76:	f001 fab3 	bl	80092e0 <xTaskNotifyWait>
 8007d7a:	2801      	cmp	r0, #1
 8007d7c:	d00c      	beq.n	8007d98 <osSignalWait+0x38>
    {
      if(ticks == 0)  ret.status = osOK;
 8007d7e:	1e23      	subs	r3, r4, #0
 8007d80:	bf18      	it	ne
 8007d82:	2301      	movne	r3, #1
 8007d84:	019b      	lsls	r3, r3, #6
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8007d86:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8007d88:	ab04      	add	r3, sp, #16
 8007d8a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007d8e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8007d92:	4628      	mov	r0, r5
 8007d94:	b005      	add	sp, #20
 8007d96:	bd30      	pop	{r4, r5, pc}
    else if(ret.value.signals < 0)
 8007d98:	9b02      	ldr	r3, [sp, #8]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	bfac      	ite	ge
 8007d9e:	2308      	movge	r3, #8
 8007da0:	2386      	movlt	r3, #134	; 0x86
 8007da2:	e7f0      	b.n	8007d86 <osSignalWait+0x26>
 8007da4:	2382      	movs	r3, #130	; 0x82
 8007da6:	e7ee      	b.n	8007d86 <osSignalWait+0x26>

08007da8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007da8:	4603      	mov	r3, r0
 8007daa:	b513      	push	{r0, r1, r4, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007dac:	685c      	ldr	r4, [r3, #4]
{ 
 8007dae:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 8007db0:	b164      	cbz	r4, 8007dcc <osSemaphoreCreate+0x24>
    if (count == 1) {
 8007db2:	2901      	cmp	r1, #1
 8007db4:	d119      	bne.n	8007dea <osSemaphoreCreate+0x42>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007db6:	2303      	movs	r3, #3
 8007db8:	2200      	movs	r2, #0
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	4623      	mov	r3, r4
 8007dc0:	f000 f9b9 	bl	8008136 <xQueueGenericCreateStatic>
 8007dc4:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	b002      	add	sp, #8
 8007dca:	bd10      	pop	{r4, pc}
    if (count == 1) {
 8007dcc:	2901      	cmp	r1, #1
 8007dce:	d1fa      	bne.n	8007dc6 <osSemaphoreCreate+0x1e>
      vSemaphoreCreateBinary(sema);
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	2203      	movs	r2, #3
 8007dd4:	f000 f9f8 	bl	80081c8 <xQueueGenericCreate>
 8007dd8:	4604      	mov	r4, r0
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d0f3      	beq.n	8007dc6 <osSemaphoreCreate+0x1e>
 8007dde:	2300      	movs	r3, #0
 8007de0:	461a      	mov	r2, r3
 8007de2:	4619      	mov	r1, r3
 8007de4:	f000 fa14 	bl	8008210 <xQueueGenericSend>
 8007de8:	e7ed      	b.n	8007dc6 <osSemaphoreCreate+0x1e>
      return NULL;
 8007dea:	2400      	movs	r4, #0
 8007dec:	e7eb      	b.n	8007dc6 <osSemaphoreCreate+0x1e>

08007dee <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007dee:	4603      	mov	r3, r0
 8007df0:	b513      	push	{r0, r1, r4, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007df2:	c807      	ldmia	r0, {r0, r1, r2}
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007df4:	b10a      	cbz	r2, 8007dfa <osMessageCreate+0xc>
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	b92b      	cbnz	r3, 8007e06 <osMessageCreate+0x18>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007dfa:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007dfc:	b002      	add	sp, #8
 8007dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007e02:	f000 b9e1 	b.w	80081c8 <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007e06:	2400      	movs	r4, #0
 8007e08:	9400      	str	r4, [sp, #0]
 8007e0a:	f000 f994 	bl	8008136 <xQueueGenericCreateStatic>
}
 8007e0e:	b002      	add	sp, #8
 8007e10:	bd10      	pop	{r4, pc}

08007e12 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007e12:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8007e14:	2400      	movs	r4, #0
{
 8007e16:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007e18:	9403      	str	r4, [sp, #12]
 8007e1a:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8007e1e:	b1b3      	cbz	r3, 8007e4e <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007e20:	4623      	mov	r3, r4
 8007e22:	aa03      	add	r2, sp, #12
 8007e24:	a901      	add	r1, sp, #4
 8007e26:	f000 faa6 	bl	8008376 <xQueueGenericSendFromISR>
 8007e2a:	2801      	cmp	r0, #1
 8007e2c:	d117      	bne.n	8007e5e <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007e2e:	9b03      	ldr	r3, [sp, #12]
 8007e30:	b913      	cbnz	r3, 8007e38 <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8007e32:	2000      	movs	r0, #0
}
 8007e34:	b004      	add	sp, #16
 8007e36:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8007e38:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e40:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	e7f1      	b.n	8007e32 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007e4e:	2a01      	cmp	r2, #1
 8007e50:	bf38      	it	cc
 8007e52:	2201      	movcc	r2, #1
 8007e54:	a901      	add	r1, sp, #4
 8007e56:	f000 f9db 	bl	8008210 <xQueueGenericSend>
 8007e5a:	2801      	cmp	r0, #1
 8007e5c:	d0e9      	beq.n	8007e32 <osMessagePut+0x20>
      return osErrorOS;
 8007e5e:	20ff      	movs	r0, #255	; 0xff
 8007e60:	e7e8      	b.n	8007e34 <osMessagePut+0x22>

08007e62 <osMessageGet>:
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8007e62:	2300      	movs	r3, #0
{
 8007e64:	b530      	push	{r4, r5, lr}
 8007e66:	b085      	sub	sp, #20
 8007e68:	4605      	mov	r5, r0
 8007e6a:	4614      	mov	r4, r2
 8007e6c:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8007e6e:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8007e70:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8007e72:	b911      	cbnz	r1, 8007e7a <osMessageGet+0x18>
    event.status = osErrorParameter;
 8007e74:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8007e76:	9301      	str	r3, [sp, #4]
 8007e78:	e018      	b.n	8007eac <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8007e80:	b1e3      	cbz	r3, 8007ebc <osMessageGet+0x5a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007e82:	466a      	mov	r2, sp
 8007e84:	a902      	add	r1, sp, #8
 8007e86:	f000 fb76 	bl	8008576 <xQueueReceiveFromISR>
 8007e8a:	1e43      	subs	r3, r0, #1
 8007e8c:	4258      	negs	r0, r3
 8007e8e:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 8007e90:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007e92:	0100      	lsls	r0, r0, #4
 8007e94:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8007e96:	b14b      	cbz	r3, 8007eac <osMessageGet+0x4a>
 8007e98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	f3bf 8f6f 	isb	sy
    return event;
 8007eac:	ab04      	add	r3, sp, #16
 8007eae:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007eb2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	b005      	add	sp, #20
 8007eba:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007ebc:	a902      	add	r1, sp, #8
 8007ebe:	f000 fabb 	bl	8008438 <xQueueReceive>
 8007ec2:	2801      	cmp	r0, #1
 8007ec4:	d101      	bne.n	8007eca <osMessageGet+0x68>
      event.status = osEventMessage;
 8007ec6:	2310      	movs	r3, #16
 8007ec8:	e7d5      	b.n	8007e76 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007eca:	3c00      	subs	r4, #0
 8007ecc:	bf18      	it	ne
 8007ece:	2401      	movne	r4, #1
 8007ed0:	01a4      	lsls	r4, r4, #6
 8007ed2:	9401      	str	r4, [sp, #4]
  return event;
 8007ed4:	e7ea      	b.n	8007eac <osMessageGet+0x4a>

08007ed6 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8007ed6:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8007ed8:	f001 f86c 	bl	8008fb4 <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 8007edc:	2000      	movs	r0, #0
 8007ede:	bd08      	pop	{r3, pc}

08007ee0 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8007ee0:	b508      	push	{r3, lr}
 8007ee2:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8007ee6:	b17b      	cbz	r3, 8007f08 <osThreadResume+0x28>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8007ee8:	f000 fdfe 	bl	8008ae8 <xTaskResumeFromISR>
 8007eec:	2801      	cmp	r0, #1
 8007eee:	d109      	bne.n	8007f04 <osThreadResume+0x24>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8007ef0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	f3bf 8f6f 	isb	sy
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 8007f04:	2000      	movs	r0, #0
 8007f06:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 8007f08:	f000 fdac 	bl	8008a64 <vTaskResume>
 8007f0c:	e7fa      	b.n	8007f04 <osThreadResume+0x24>

08007f0e <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8007f0e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8007f10:	2901      	cmp	r1, #1
 8007f12:	bf38      	it	cc
 8007f14:	2101      	movcc	r1, #1
 8007f16:	f000 ff9d 	bl	8008e54 <vTaskDelayUntil>
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	bd08      	pop	{r3, pc}

08007f1e <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f1e:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f22:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f26:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f2a:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f2c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f32:	4770      	bx	lr

08007f34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007f34:	2300      	movs	r3, #0
 8007f36:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f38:	4770      	bx	lr

08007f3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f3a:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f3c:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007f3e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f40:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f42:	689a      	ldr	r2, [r3, #8]
 8007f44:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f46:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007f48:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007f4a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	6003      	str	r3, [r0, #0]
}
 8007f50:	4770      	bx	lr

08007f52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f52:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f54:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f56:	1c63      	adds	r3, r4, #1
 8007f58:	d10a      	bne.n	8007f70 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f5a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f60:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f62:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f64:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007f66:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007f68:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	6003      	str	r3, [r0, #0]
}
 8007f6e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f70:	f100 0208 	add.w	r2, r0, #8
 8007f74:	4613      	mov	r3, r2
 8007f76:	6852      	ldr	r2, [r2, #4]
 8007f78:	6815      	ldr	r5, [r2, #0]
 8007f7a:	42a5      	cmp	r5, r4
 8007f7c:	d9fa      	bls.n	8007f74 <vListInsert+0x22>
 8007f7e:	e7ed      	b.n	8007f5c <vListInsert+0xa>

08007f80 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007f80:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f82:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007f86:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f88:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f8a:	6859      	ldr	r1, [r3, #4]
 8007f8c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f8e:	bf08      	it	eq
 8007f90:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007f92:	2200      	movs	r2, #0
 8007f94:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	3a01      	subs	r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f9c:	6818      	ldr	r0, [r3, #0]
}
 8007f9e:	4770      	bx	lr

08007fa0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fa0:	b510      	push	{r4, lr}
 8007fa2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fa4:	f001 fd66 	bl	8009a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fa8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007faa:	f001 fd83 	bl	8009ab4 <vPortExitCritical>

	return xReturn;
}
 8007fae:	fab4 f084 	clz	r0, r4
 8007fb2:	0940      	lsrs	r0, r0, #5
 8007fb4:	bd10      	pop	{r4, pc}

08007fb6 <prvCopyDataToQueue>:
{
 8007fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb8:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fba:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007fbc:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fbe:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fc0:	b952      	cbnz	r2, 8007fd8 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fc2:	6807      	ldr	r7, [r0, #0]
 8007fc4:	bb47      	cbnz	r7, 8008018 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007fc6:	6840      	ldr	r0, [r0, #4]
 8007fc8:	f001 f93a 	bl	8009240 <xTaskPriorityDisinherit>
 8007fcc:	4605      	mov	r5, r0
				pxQueue->pxMutexHolder = NULL;
 8007fce:	6067      	str	r7, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fd0:	3601      	adds	r6, #1
}
 8007fd2:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fd4:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007fd8:	b965      	cbnz	r5, 8007ff4 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007fda:	6880      	ldr	r0, [r0, #8]
 8007fdc:	f002 fb33 	bl	800a646 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007fe0:	68a3      	ldr	r3, [r4, #8]
 8007fe2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007fe4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fe6:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007fe8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d3f0      	bcc.n	8007fd0 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	60a3      	str	r3, [r4, #8]
 8007ff2:	e7ed      	b.n	8007fd0 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ff4:	68c0      	ldr	r0, [r0, #12]
 8007ff6:	f002 fb26 	bl	800a646 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007ffa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007ffc:	68e3      	ldr	r3, [r4, #12]
 8007ffe:	4251      	negs	r1, r2
 8008000:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008002:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008004:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008006:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008008:	bf3e      	ittt	cc
 800800a:	6863      	ldrcc	r3, [r4, #4]
 800800c:	185b      	addcc	r3, r3, r1
 800800e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008010:	2d02      	cmp	r5, #2
 8008012:	d101      	bne.n	8008018 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008014:	b116      	cbz	r6, 800801c <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8008016:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8008018:	2500      	movs	r5, #0
 800801a:	e7d9      	b.n	8007fd0 <prvCopyDataToQueue+0x1a>
 800801c:	4635      	mov	r5, r6
 800801e:	e7d7      	b.n	8007fd0 <prvCopyDataToQueue+0x1a>

08008020 <prvCopyDataFromQueue>:
{
 8008020:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8008024:	4608      	mov	r0, r1
 8008026:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008028:	b162      	cbz	r2, 8008044 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800802a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800802c:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800802e:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008030:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008032:	bf28      	it	cs
 8008034:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008036:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008038:	bf28      	it	cs
 800803a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800803c:	68d9      	ldr	r1, [r3, #12]
}
 800803e:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008040:	f002 bb01 	b.w	800a646 <memcpy>
}
 8008044:	bc10      	pop	{r4}
 8008046:	4770      	bx	lr

08008048 <prvUnlockQueue>:
{
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800804c:	f001 fd12 	bl	8009a74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008050:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008054:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8008058:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800805a:	2d00      	cmp	r5, #0
 800805c:	dc14      	bgt.n	8008088 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800805e:	23ff      	movs	r3, #255	; 0xff
 8008060:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008064:	f001 fd26 	bl	8009ab4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008068:	f001 fd04 	bl	8009a74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800806c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008070:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8008074:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008076:	2d00      	cmp	r5, #0
 8008078:	dc12      	bgt.n	80080a0 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800807a:	23ff      	movs	r3, #255	; 0xff
 800807c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8008080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008084:	f001 bd16 	b.w	8009ab4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0e7      	beq.n	800805e <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800808e:	4630      	mov	r0, r6
 8008090:	f001 f836 	bl	8009100 <xTaskRemoveFromEventList>
 8008094:	b108      	cbz	r0, 800809a <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8008096:	f001 f8bd 	bl	8009214 <vTaskMissedYield>
			--cTxLock;
 800809a:	3d01      	subs	r5, #1
 800809c:	b26d      	sxtb	r5, r5
 800809e:	e7dc      	b.n	800805a <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080a0:	6923      	ldr	r3, [r4, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d0e9      	beq.n	800807a <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080a6:	4630      	mov	r0, r6
 80080a8:	f001 f82a 	bl	8009100 <xTaskRemoveFromEventList>
 80080ac:	b108      	cbz	r0, 80080b2 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80080ae:	f001 f8b1 	bl	8009214 <vTaskMissedYield>
				--cRxLock;
 80080b2:	3d01      	subs	r5, #1
 80080b4:	b26d      	sxtb	r5, r5
 80080b6:	e7de      	b.n	8008076 <prvUnlockQueue+0x2e>

080080b8 <xQueueGenericReset>:
{
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80080bc:	4604      	mov	r4, r0
 80080be:	b940      	cbnz	r0, 80080d2 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	e7fe      	b.n	80080d0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80080d2:	f001 fccf 	bl	8009a74 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80080d6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 80080da:	434b      	muls	r3, r1
 80080dc:	6822      	ldr	r2, [r4, #0]
 80080de:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80080e0:	1a5b      	subs	r3, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80080e2:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080e4:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080e6:	2000      	movs	r0, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80080e8:	441a      	add	r2, r3
		pxQueue->cRxLock = queueUNLOCKED;
 80080ea:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080ec:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80080ee:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80080f8:	b9a5      	cbnz	r5, 8008124 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080fa:	6923      	ldr	r3, [r4, #16]
 80080fc:	b173      	cbz	r3, 800811c <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080fe:	f104 0010 	add.w	r0, r4, #16
 8008102:	f000 fffd 	bl	8009100 <xTaskRemoveFromEventList>
 8008106:	b148      	cbz	r0, 800811c <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8008108:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800810c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008110:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800811c:	f001 fcca 	bl	8009ab4 <vPortExitCritical>
}
 8008120:	2001      	movs	r0, #1
 8008122:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008124:	f104 0010 	add.w	r0, r4, #16
 8008128:	f7ff fef9 	bl	8007f1e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800812c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008130:	f7ff fef5 	bl	8007f1e <vListInitialise>
 8008134:	e7f2      	b.n	800811c <xQueueGenericReset+0x64>

08008136 <xQueueGenericCreateStatic>:
	{
 8008136:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008138:	460d      	mov	r5, r1
 800813a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800813c:	b940      	cbnz	r0, 8008150 <xQueueGenericCreateStatic+0x1a>
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	e7fe      	b.n	800814e <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8008150:	b943      	cbnz	r3, 8008164 <xQueueGenericCreateStatic+0x2e>
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	e7fe      	b.n	8008162 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008164:	b14a      	cbz	r2, 800817a <xQueueGenericCreateStatic+0x44>
 8008166:	b991      	cbnz	r1, 800818e <xQueueGenericCreateStatic+0x58>
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	e7fe      	b.n	8008178 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800817a:	b141      	cbz	r1, 800818e <xQueueGenericCreateStatic+0x58>
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	e7fe      	b.n	800818c <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800818e:	2348      	movs	r3, #72	; 0x48
 8008190:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008192:	9b01      	ldr	r3, [sp, #4]
 8008194:	2b48      	cmp	r3, #72	; 0x48
 8008196:	d008      	beq.n	80081aa <xQueueGenericCreateStatic+0x74>
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	e7fe      	b.n	80081a8 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081aa:	2101      	movs	r1, #1
	if( uxItemSize == ( UBaseType_t ) 0 )
 80081ac:	2d00      	cmp	r5, #0
 80081ae:	bf08      	it	eq
 80081b0:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80081b2:	e9c4 050f 	strd	r0, r5, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081b6:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081ba:	4620      	mov	r0, r4
 80081bc:	6022      	str	r2, [r4, #0]
 80081be:	f7ff ff7b 	bl	80080b8 <xQueueGenericReset>
	}
 80081c2:	4620      	mov	r0, r4
 80081c4:	b003      	add	sp, #12
 80081c6:	bd30      	pop	{r4, r5, pc}

080081c8 <xQueueGenericCreate>:
	{
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081cc:	4606      	mov	r6, r0
 80081ce:	b940      	cbnz	r0, 80081e2 <xQueueGenericCreate+0x1a>
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	e7fe      	b.n	80081e0 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081e2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80081e4:	3048      	adds	r0, #72	; 0x48
 80081e6:	f001 fd75 	bl	8009cd4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80081ea:	4604      	mov	r4, r0
 80081ec:	b160      	cbz	r0, 8008208 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80081f4:	b155      	cbz	r5, 800820c <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80081f6:	f100 0348 	add.w	r3, r0, #72	; 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081fa:	2101      	movs	r1, #1
 80081fc:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80081fe:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 8008202:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008204:	f7ff ff58 	bl	80080b8 <xQueueGenericReset>
	}
 8008208:	4620      	mov	r0, r4
 800820a:	bd70      	pop	{r4, r5, r6, pc}
 800820c:	4603      	mov	r3, r0
 800820e:	e7f4      	b.n	80081fa <xQueueGenericCreate+0x32>

08008210 <xQueueGenericSend>:
{
 8008210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008214:	b085      	sub	sp, #20
 8008216:	4688      	mov	r8, r1
 8008218:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800821a:	4604      	mov	r4, r0
{
 800821c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800821e:	b940      	cbnz	r0, 8008232 <xQueueGenericSend+0x22>
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	e7fe      	b.n	8008230 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008232:	b951      	cbnz	r1, 800824a <xQueueGenericSend+0x3a>
 8008234:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008236:	b143      	cbz	r3, 800824a <xQueueGenericSend+0x3a>
 8008238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	e7fe      	b.n	8008248 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800824a:	2f02      	cmp	r7, #2
 800824c:	d10b      	bne.n	8008266 <xQueueGenericSend+0x56>
 800824e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008250:	2b01      	cmp	r3, #1
 8008252:	d008      	beq.n	8008266 <xQueueGenericSend+0x56>
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	e7fe      	b.n	8008264 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008266:	f000 ffdb 	bl	8009220 <xTaskGetSchedulerState>
 800826a:	4606      	mov	r6, r0
 800826c:	b950      	cbnz	r0, 8008284 <xQueueGenericSend+0x74>
 800826e:	9b01      	ldr	r3, [sp, #4]
 8008270:	b14b      	cbz	r3, 8008286 <xQueueGenericSend+0x76>
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	e7fe      	b.n	8008282 <xQueueGenericSend+0x72>
 8008284:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008286:	f04f 0900 	mov.w	r9, #0
 800828a:	e037      	b.n	80082fc <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800828c:	9d01      	ldr	r5, [sp, #4]
 800828e:	b91d      	cbnz	r5, 8008298 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8008290:	f001 fc10 	bl	8009ab4 <vPortExitCritical>
			return errQUEUE_FULL;
 8008294:	2000      	movs	r0, #0
 8008296:	e052      	b.n	800833e <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 8008298:	b916      	cbnz	r6, 80082a0 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800829a:	a802      	add	r0, sp, #8
 800829c:	f000 ff72 	bl	8009184 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80082a0:	f001 fc08 	bl	8009ab4 <vPortExitCritical>
		vTaskSuspendAll();
 80082a4:	f000 fcc0 	bl	8008c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082a8:	f001 fbe4 	bl	8009a74 <vPortEnterCritical>
 80082ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80082b0:	2bff      	cmp	r3, #255	; 0xff
 80082b2:	bf08      	it	eq
 80082b4:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 80082b8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80082bc:	2bff      	cmp	r3, #255	; 0xff
 80082be:	bf08      	it	eq
 80082c0:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 80082c4:	f001 fbf6 	bl	8009ab4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082c8:	a901      	add	r1, sp, #4
 80082ca:	a802      	add	r0, sp, #8
 80082cc:	f000 ff66 	bl	800919c <xTaskCheckForTimeOut>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	d14a      	bne.n	800836a <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082d4:	f001 fbce 	bl	8009a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80082da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082dc:	429a      	cmp	r2, r3
 80082de:	d131      	bne.n	8008344 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80082e0:	f001 fbe8 	bl	8009ab4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082e4:	9901      	ldr	r1, [sp, #4]
 80082e6:	f104 0010 	add.w	r0, r4, #16
 80082ea:	f000 fecf 	bl	800908c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082ee:	4620      	mov	r0, r4
 80082f0:	f7ff feaa 	bl	8008048 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082f4:	f000 fd38 	bl	8008d68 <xTaskResumeAll>
 80082f8:	b360      	cbz	r0, 8008354 <xQueueGenericSend+0x144>
 80082fa:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80082fc:	f001 fbba 	bl	8009a74 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008300:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008302:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008304:	429a      	cmp	r2, r3
 8008306:	d301      	bcc.n	800830c <xQueueGenericSend+0xfc>
 8008308:	2f02      	cmp	r7, #2
 800830a:	d1bf      	bne.n	800828c <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800830c:	463a      	mov	r2, r7
 800830e:	4641      	mov	r1, r8
 8008310:	4620      	mov	r0, r4
 8008312:	f7ff fe50 	bl	8007fb6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008318:	b11b      	cbz	r3, 8008322 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800831a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800831e:	f000 feef 	bl	8009100 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8008322:	b148      	cbz	r0, 8008338 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 8008324:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800832c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008338:	f001 fbbc 	bl	8009ab4 <vPortExitCritical>
				return pdPASS;
 800833c:	2001      	movs	r0, #1
}
 800833e:	b005      	add	sp, #20
 8008340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8008344:	f001 fbb6 	bl	8009ab4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008348:	4620      	mov	r0, r4
 800834a:	f7ff fe7d 	bl	8008048 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800834e:	f000 fd0b 	bl	8008d68 <xTaskResumeAll>
 8008352:	e7d2      	b.n	80082fa <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8008354:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800835c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	e7c7      	b.n	80082fa <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800836a:	4620      	mov	r0, r4
 800836c:	f7ff fe6c 	bl	8008048 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008370:	f000 fcfa 	bl	8008d68 <xTaskResumeAll>
 8008374:	e78e      	b.n	8008294 <xQueueGenericSend+0x84>

08008376 <xQueueGenericSendFromISR>:
{
 8008376:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800837a:	4689      	mov	r9, r1
 800837c:	4690      	mov	r8, r2
 800837e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008380:	4604      	mov	r4, r0
 8008382:	b940      	cbnz	r0, 8008396 <xQueueGenericSendFromISR+0x20>
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	e7fe      	b.n	8008394 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008396:	b951      	cbnz	r1, 80083ae <xQueueGenericSendFromISR+0x38>
 8008398:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800839a:	b143      	cbz	r3, 80083ae <xQueueGenericSendFromISR+0x38>
 800839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	e7fe      	b.n	80083ac <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083ae:	2f02      	cmp	r7, #2
 80083b0:	d10b      	bne.n	80083ca <xQueueGenericSendFromISR+0x54>
 80083b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d008      	beq.n	80083ca <xQueueGenericSendFromISR+0x54>
 80083b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	e7fe      	b.n	80083c8 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083ca:	f001 fc2f 	bl	8009c2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083ce:	f3ef 8611 	mrs	r6, BASEPRI
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80083e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d301      	bcc.n	80083ee <xQueueGenericSendFromISR+0x78>
 80083ea:	2f02      	cmp	r7, #2
 80083ec:	d122      	bne.n	8008434 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 80083ee:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083f2:	463a      	mov	r2, r7
 80083f4:	4649      	mov	r1, r9
 80083f6:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80083f8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083fa:	f7ff fddc 	bl	8007fb6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80083fe:	1c6b      	adds	r3, r5, #1
 8008400:	d113      	bne.n	800842a <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008404:	b90b      	cbnz	r3, 800840a <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 8008406:	2001      	movs	r0, #1
 8008408:	e00b      	b.n	8008422 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800840a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800840e:	f000 fe77 	bl	8009100 <xTaskRemoveFromEventList>
 8008412:	2800      	cmp	r0, #0
 8008414:	d0f7      	beq.n	8008406 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 8008416:	f1b8 0f00 	cmp.w	r8, #0
 800841a:	d0f4      	beq.n	8008406 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800841c:	2001      	movs	r0, #1
 800841e:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008422:	f386 8811 	msr	BASEPRI, r6
}
 8008426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800842a:	3501      	adds	r5, #1
 800842c:	b26d      	sxtb	r5, r5
 800842e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8008432:	e7e8      	b.n	8008406 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 8008434:	2000      	movs	r0, #0
 8008436:	e7f4      	b.n	8008422 <xQueueGenericSendFromISR+0xac>

08008438 <xQueueReceive>:
{
 8008438:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800843c:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800843e:	4604      	mov	r4, r0
{
 8008440:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008442:	b940      	cbnz	r0, 8008456 <xQueueReceive+0x1e>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	e7fe      	b.n	8008454 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008456:	b951      	cbnz	r1, 800846e <xQueueReceive+0x36>
 8008458:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800845a:	b143      	cbz	r3, 800846e <xQueueReceive+0x36>
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	e7fe      	b.n	800846c <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800846e:	f000 fed7 	bl	8009220 <xTaskGetSchedulerState>
 8008472:	4606      	mov	r6, r0
 8008474:	b950      	cbnz	r0, 800848c <xQueueReceive+0x54>
 8008476:	9b01      	ldr	r3, [sp, #4]
 8008478:	b14b      	cbz	r3, 800848e <xQueueReceive+0x56>
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	e7fe      	b.n	800848a <xQueueReceive+0x52>
 800848c:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800848e:	f04f 0800 	mov.w	r8, #0
 8008492:	e03d      	b.n	8008510 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008494:	9d01      	ldr	r5, [sp, #4]
 8008496:	b91d      	cbnz	r5, 80084a0 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 8008498:	f001 fb0c 	bl	8009ab4 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800849c:	2000      	movs	r0, #0
 800849e:	e056      	b.n	800854e <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 80084a0:	b916      	cbnz	r6, 80084a8 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084a2:	a802      	add	r0, sp, #8
 80084a4:	f000 fe6e 	bl	8009184 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80084a8:	f001 fb04 	bl	8009ab4 <vPortExitCritical>
		vTaskSuspendAll();
 80084ac:	f000 fbbc 	bl	8008c28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084b0:	f001 fae0 	bl	8009a74 <vPortEnterCritical>
 80084b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80084b8:	2bff      	cmp	r3, #255	; 0xff
 80084ba:	bf08      	it	eq
 80084bc:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80084c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80084c4:	2bff      	cmp	r3, #255	; 0xff
 80084c6:	bf08      	it	eq
 80084c8:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80084cc:	f001 faf2 	bl	8009ab4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084d0:	a901      	add	r1, sp, #4
 80084d2:	a802      	add	r0, sp, #8
 80084d4:	f000 fe62 	bl	800919c <xTaskCheckForTimeOut>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d141      	bne.n	8008560 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084dc:	4620      	mov	r0, r4
 80084de:	f7ff fd5f 	bl	8007fa0 <prvIsQueueEmpty>
 80084e2:	b3b8      	cbz	r0, 8008554 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084e4:	9901      	ldr	r1, [sp, #4]
 80084e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80084ea:	f000 fdcf 	bl	800908c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084ee:	4620      	mov	r0, r4
 80084f0:	f7ff fdaa 	bl	8008048 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084f4:	f000 fc38 	bl	8008d68 <xTaskResumeAll>
 80084f8:	b948      	cbnz	r0, 800850e <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 80084fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80084fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008502:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008510:	f001 fab0 	bl	8009a74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008514:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008516:	2d00      	cmp	r5, #0
 8008518:	d0bc      	beq.n	8008494 <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800851a:	4639      	mov	r1, r7
 800851c:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800851e:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008520:	f7ff fd7e 	bl	8008020 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008524:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008526:	6923      	ldr	r3, [r4, #16]
 8008528:	b173      	cbz	r3, 8008548 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800852a:	f104 0010 	add.w	r0, r4, #16
 800852e:	f000 fde7 	bl	8009100 <xTaskRemoveFromEventList>
 8008532:	b148      	cbz	r0, 8008548 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8008534:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008548:	f001 fab4 	bl	8009ab4 <vPortExitCritical>
				return pdPASS;
 800854c:	2001      	movs	r0, #1
}
 800854e:	b004      	add	sp, #16
 8008550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8008554:	4620      	mov	r0, r4
 8008556:	f7ff fd77 	bl	8008048 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800855a:	f000 fc05 	bl	8008d68 <xTaskResumeAll>
 800855e:	e7d6      	b.n	800850e <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8008560:	4620      	mov	r0, r4
 8008562:	f7ff fd71 	bl	8008048 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008566:	f000 fbff 	bl	8008d68 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800856a:	4620      	mov	r0, r4
 800856c:	f7ff fd18 	bl	8007fa0 <prvIsQueueEmpty>
 8008570:	2800      	cmp	r0, #0
 8008572:	d0cc      	beq.n	800850e <xQueueReceive+0xd6>
 8008574:	e792      	b.n	800849c <xQueueReceive+0x64>

08008576 <xQueueReceiveFromISR>:
{
 8008576:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800857a:	4689      	mov	r9, r1
 800857c:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800857e:	4605      	mov	r5, r0
 8008580:	b940      	cbnz	r0, 8008594 <xQueueReceiveFromISR+0x1e>
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	e7fe      	b.n	8008592 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008594:	b951      	cbnz	r1, 80085ac <xQueueReceiveFromISR+0x36>
 8008596:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008598:	b143      	cbz	r3, 80085ac <xQueueReceiveFromISR+0x36>
 800859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	e7fe      	b.n	80085aa <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085ac:	f001 fb3e 	bl	8009c2c <vPortValidateInterruptPriority>
	__asm volatile
 80085b0:	f3ef 8711 	mrs	r7, BASEPRI
 80085b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085c4:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085c6:	b31c      	cbz	r4, 8008610 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 80085c8:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085cc:	4649      	mov	r1, r9
 80085ce:	4628      	mov	r0, r5
			const int8_t cRxLock = pxQueue->cRxLock;
 80085d0:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085d2:	f7ff fd25 	bl	8008020 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085d6:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 80085d8:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085da:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80085dc:	d113      	bne.n	8008606 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085de:	692b      	ldr	r3, [r5, #16]
 80085e0:	b90b      	cbnz	r3, 80085e6 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 80085e2:	2001      	movs	r0, #1
 80085e4:	e00b      	b.n	80085fe <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085e6:	f105 0010 	add.w	r0, r5, #16
 80085ea:	f000 fd89 	bl	8009100 <xTaskRemoveFromEventList>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d0f7      	beq.n	80085e2 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 80085f2:	f1b8 0f00 	cmp.w	r8, #0
 80085f6:	d0f4      	beq.n	80085e2 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80085f8:	2001      	movs	r0, #1
 80085fa:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80085fe:	f387 8811 	msr	BASEPRI, r7
}
 8008602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008606:	3601      	adds	r6, #1
 8008608:	b276      	sxtb	r6, r6
 800860a:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800860e:	e7e8      	b.n	80085e2 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8008610:	4620      	mov	r0, r4
 8008612:	e7f4      	b.n	80085fe <xQueueReceiveFromISR+0x88>

08008614 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008614:	2300      	movs	r3, #0
	{
 8008616:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008618:	4a06      	ldr	r2, [pc, #24]	; (8008634 <vQueueAddToRegistry+0x20>)
 800861a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800861e:	b92c      	cbnz	r4, 800862c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008620:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008624:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008628:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800862a:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800862c:	3301      	adds	r3, #1
 800862e:	2b08      	cmp	r3, #8
 8008630:	d1f3      	bne.n	800861a <vQueueAddToRegistry+0x6>
 8008632:	e7fa      	b.n	800862a <vQueueAddToRegistry+0x16>
 8008634:	20002b14 	.word	0x20002b14

08008638 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	4604      	mov	r4, r0
 800863c:	460d      	mov	r5, r1
 800863e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008640:	f001 fa18 	bl	8009a74 <vPortEnterCritical>
 8008644:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008648:	2bff      	cmp	r3, #255	; 0xff
 800864a:	bf04      	itt	eq
 800864c:	2300      	moveq	r3, #0
 800864e:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8008652:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008656:	2bff      	cmp	r3, #255	; 0xff
 8008658:	bf04      	itt	eq
 800865a:	2300      	moveq	r3, #0
 800865c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8008660:	f001 fa28 	bl	8009ab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008664:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008666:	b92b      	cbnz	r3, 8008674 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008668:	4632      	mov	r2, r6
 800866a:	4629      	mov	r1, r5
 800866c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008670:	f000 fd26 	bl	80090c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008674:	4620      	mov	r0, r4
	}
 8008676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800867a:	f7ff bce5 	b.w	8008048 <prvUnlockQueue>
	...

08008680 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008684:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008686:	f001 f9f5 	bl	8009a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800868a:	4b2f      	ldr	r3, [pc, #188]	; (8008748 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800868c:	4e2f      	ldr	r6, [pc, #188]	; (800874c <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	4f2f      	ldr	r7, [pc, #188]	; (8008750 <prvAddNewTaskToReadyList+0xd0>)
 8008692:	3201      	adds	r2, #1
 8008694:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008696:	6835      	ldr	r5, [r6, #0]
 8008698:	2d00      	cmp	r5, #0
 800869a:	d14a      	bne.n	8008732 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800869c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d11f      	bne.n	80086e4 <prvAddNewTaskToReadyList+0x64>
 80086a4:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086a6:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086a8:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086aa:	f7ff fc38 	bl	8007f1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086ae:	2d07      	cmp	r5, #7
 80086b0:	f108 0814 	add.w	r8, r8, #20
 80086b4:	d1f7      	bne.n	80086a6 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086b6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8008754 <prvAddNewTaskToReadyList+0xd4>
	vListInitialise( &xDelayedTaskList2 );
 80086ba:	4d27      	ldr	r5, [pc, #156]	; (8008758 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 80086bc:	4640      	mov	r0, r8
 80086be:	f7ff fc2e 	bl	8007f1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086c2:	4628      	mov	r0, r5
 80086c4:	f7ff fc2b 	bl	8007f1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086c8:	4824      	ldr	r0, [pc, #144]	; (800875c <prvAddNewTaskToReadyList+0xdc>)
 80086ca:	f7ff fc28 	bl	8007f1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086ce:	4824      	ldr	r0, [pc, #144]	; (8008760 <prvAddNewTaskToReadyList+0xe0>)
 80086d0:	f7ff fc25 	bl	8007f1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086d4:	4823      	ldr	r0, [pc, #140]	; (8008764 <prvAddNewTaskToReadyList+0xe4>)
 80086d6:	f7ff fc22 	bl	8007f1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086da:	4b23      	ldr	r3, [pc, #140]	; (8008768 <prvAddNewTaskToReadyList+0xe8>)
 80086dc:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086e0:	4b22      	ldr	r3, [pc, #136]	; (800876c <prvAddNewTaskToReadyList+0xec>)
 80086e2:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80086e4:	4a22      	ldr	r2, [pc, #136]	; (8008770 <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 80086e6:	4923      	ldr	r1, [pc, #140]	; (8008774 <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 80086e8:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80086ea:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80086ec:	3301      	adds	r3, #1
 80086ee:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80086f0:	2301      	movs	r3, #1
 80086f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80086f4:	4093      	lsls	r3, r2
 80086f6:	4303      	orrs	r3, r0
 80086f8:	2014      	movs	r0, #20
 80086fa:	600b      	str	r3, [r1, #0]
 80086fc:	fb00 7002 	mla	r0, r0, r2, r7
 8008700:	1d21      	adds	r1, r4, #4
 8008702:	f7ff fc1a 	bl	8007f3a <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008706:	f001 f9d5 	bl	8009ab4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800870a:	4b1b      	ldr	r3, [pc, #108]	; (8008778 <prvAddNewTaskToReadyList+0xf8>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	b173      	cbz	r3, 800872e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008710:	6833      	ldr	r3, [r6, #0]
 8008712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008714:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008716:	429a      	cmp	r2, r3
 8008718:	d209      	bcs.n	800872e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800871a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800871e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008722:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	f3bf 8f6f 	isb	sy
}
 800872e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008732:	4b11      	ldr	r3, [pc, #68]	; (8008778 <prvAddNewTaskToReadyList+0xf8>)
 8008734:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008736:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if( xSchedulerRunning == pdFALSE )
 8008738:	2a00      	cmp	r2, #0
 800873a:	d1d3      	bne.n	80086e4 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800873c:	6832      	ldr	r2, [r6, #0]
 800873e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008740:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008742:	bf98      	it	ls
 8008744:	6034      	strls	r4, [r6, #0]
 8008746:	e7cd      	b.n	80086e4 <prvAddNewTaskToReadyList+0x64>
 8008748:	20002bec 	.word	0x20002bec
 800874c:	20002b54 	.word	0x20002b54
 8008750:	20002b60 	.word	0x20002b60
 8008754:	20002c04 	.word	0x20002c04
 8008758:	20002c18 	.word	0x20002c18
 800875c:	20002c34 	.word	0x20002c34
 8008760:	20002c60 	.word	0x20002c60
 8008764:	20002c4c 	.word	0x20002c4c
 8008768:	20002b58 	.word	0x20002b58
 800876c:	20002b5c 	.word	0x20002b5c
 8008770:	20002bfc 	.word	0x20002bfc
 8008774:	20002c00 	.word	0x20002c00
 8008778:	20002c48 	.word	0x20002c48

0800877c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800877e:	4b1a      	ldr	r3, [pc, #104]	; (80087e8 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008780:	4d1a      	ldr	r5, [pc, #104]	; (80087ec <prvAddCurrentTaskToDelayedList+0x70>)
{
 8008782:	4606      	mov	r6, r0
const TickType_t xConstTickCount = xTickCount;
 8008784:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008786:	6828      	ldr	r0, [r5, #0]
{
 8008788:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800878a:	3004      	adds	r0, #4
 800878c:	f7ff fbf8 	bl	8007f80 <uxListRemove>
 8008790:	b940      	cbnz	r0, 80087a4 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008792:	682a      	ldr	r2, [r5, #0]
 8008794:	4916      	ldr	r1, [pc, #88]	; (80087f0 <prvAddCurrentTaskToDelayedList+0x74>)
 8008796:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8008798:	2201      	movs	r2, #1
 800879a:	680b      	ldr	r3, [r1, #0]
 800879c:	4082      	lsls	r2, r0
 800879e:	ea23 0302 	bic.w	r3, r3, r2
 80087a2:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087a4:	1c73      	adds	r3, r6, #1
 80087a6:	d107      	bne.n	80087b8 <prvAddCurrentTaskToDelayedList+0x3c>
 80087a8:	b137      	cbz	r7, 80087b8 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087aa:	6829      	ldr	r1, [r5, #0]
 80087ac:	4811      	ldr	r0, [pc, #68]	; (80087f4 <prvAddCurrentTaskToDelayedList+0x78>)
 80087ae:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087b4:	f7ff bbc1 	b.w	8007f3a <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80087b8:	682b      	ldr	r3, [r5, #0]
 80087ba:	19a4      	adds	r4, r4, r6
 80087bc:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087be:	d307      	bcc.n	80087d0 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087c0:	4b0d      	ldr	r3, [pc, #52]	; (80087f8 <prvAddCurrentTaskToDelayedList+0x7c>)
 80087c2:	6818      	ldr	r0, [r3, #0]
 80087c4:	6829      	ldr	r1, [r5, #0]
}
 80087c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087ca:	3104      	adds	r1, #4
 80087cc:	f7ff bbc1 	b.w	8007f52 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087d0:	4b0a      	ldr	r3, [pc, #40]	; (80087fc <prvAddCurrentTaskToDelayedList+0x80>)
 80087d2:	6818      	ldr	r0, [r3, #0]
 80087d4:	6829      	ldr	r1, [r5, #0]
 80087d6:	3104      	adds	r1, #4
 80087d8:	f7ff fbbb 	bl	8007f52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087dc:	4b08      	ldr	r3, [pc, #32]	; (8008800 <prvAddCurrentTaskToDelayedList+0x84>)
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80087e2:	bf88      	it	hi
 80087e4:	601c      	strhi	r4, [r3, #0]
}
 80087e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087e8:	20002c74 	.word	0x20002c74
 80087ec:	20002b54 	.word	0x20002b54
 80087f0:	20002c00 	.word	0x20002c00
 80087f4:	20002c4c 	.word	0x20002c4c
 80087f8:	20002b5c 	.word	0x20002b5c
 80087fc:	20002b58 	.word	0x20002b58
 8008800:	20002c2c 	.word	0x20002c2c

08008804 <prvTaskIsTaskSuspended>:
		configASSERT( xTask );
 8008804:	b940      	cbnz	r0, 8008818 <prvTaskIsTaskSuspended+0x14>
	__asm volatile
 8008806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	e7fe      	b.n	8008816 <prvTaskIsTaskSuspended+0x12>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008818:	6942      	ldr	r2, [r0, #20]
 800881a:	4b06      	ldr	r3, [pc, #24]	; (8008834 <prvTaskIsTaskSuspended+0x30>)
 800881c:	429a      	cmp	r2, r3
 800881e:	d107      	bne.n	8008830 <prvTaskIsTaskSuspended+0x2c>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008820:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8008822:	4b05      	ldr	r3, [pc, #20]	; (8008838 <prvTaskIsTaskSuspended+0x34>)
 8008824:	4298      	cmp	r0, r3
 8008826:	d003      	beq.n	8008830 <prvTaskIsTaskSuspended+0x2c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008828:	fab0 f080 	clz	r0, r0
 800882c:	0940      	lsrs	r0, r0, #5
 800882e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8008830:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008832:	4770      	bx	lr
 8008834:	20002c4c 	.word	0x20002c4c
 8008838:	20002c34 	.word	0x20002c34

0800883c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800883c:	4a06      	ldr	r2, [pc, #24]	; (8008858 <prvResetNextTaskUnblockTime+0x1c>)
 800883e:	6813      	ldr	r3, [r2, #0]
 8008840:	6819      	ldr	r1, [r3, #0]
 8008842:	4b06      	ldr	r3, [pc, #24]	; (800885c <prvResetNextTaskUnblockTime+0x20>)
 8008844:	b919      	cbnz	r1, 800884e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008846:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800884a:	601a      	str	r2, [r3, #0]
}
 800884c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800884e:	6812      	ldr	r2, [r2, #0]
 8008850:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008852:	68d2      	ldr	r2, [r2, #12]
 8008854:	6852      	ldr	r2, [r2, #4]
 8008856:	e7f8      	b.n	800884a <prvResetNextTaskUnblockTime+0xe>
 8008858:	20002b58 	.word	0x20002b58
 800885c:	20002c2c 	.word	0x20002c2c

08008860 <prvDeleteTCB>:
	{
 8008860:	b510      	push	{r4, lr}
 8008862:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008864:	304c      	adds	r0, #76	; 0x4c
 8008866:	f001 fe1d 	bl	800a4a4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800886a:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 800886e:	b93b      	cbnz	r3, 8008880 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8008870:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008872:	f001 fac1 	bl	8009df8 <vPortFree>
				vPortFree( pxTCB );
 8008876:	4620      	mov	r0, r4
	}
 8008878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800887c:	f001 babc 	b.w	8009df8 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008880:	2b01      	cmp	r3, #1
 8008882:	d0f8      	beq.n	8008876 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008884:	2b02      	cmp	r3, #2
 8008886:	d008      	beq.n	800889a <prvDeleteTCB+0x3a>
 8008888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	e7fe      	b.n	8008898 <prvDeleteTCB+0x38>
	}
 800889a:	bd10      	pop	{r4, pc}

0800889c <prvIdleTask>:
{
 800889c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800889e:	4c13      	ldr	r4, [pc, #76]	; (80088ec <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80088a0:	4f13      	ldr	r7, [pc, #76]	; (80088f0 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80088a2:	4d14      	ldr	r5, [pc, #80]	; (80088f4 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	b973      	cbnz	r3, 80088c6 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80088a8:	4b13      	ldr	r3, [pc, #76]	; (80088f8 <prvIdleTask+0x5c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d9f8      	bls.n	80088a2 <prvIdleTask+0x6>
				taskYIELD();
 80088b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80088b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	f3bf 8f6f 	isb	sy
 80088c4:	e7ed      	b.n	80088a2 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80088c6:	f001 f8d5 	bl	8009a74 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088ce:	1d30      	adds	r0, r6, #4
 80088d0:	f7ff fb56 	bl	8007f80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	3b01      	subs	r3, #1
 80088de:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80088e0:	f001 f8e8 	bl	8009ab4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7ff ffbb 	bl	8008860 <prvDeleteTCB>
 80088ea:	e7db      	b.n	80088a4 <prvIdleTask+0x8>
 80088ec:	20002bf0 	.word	0x20002bf0
 80088f0:	20002c60 	.word	0x20002c60
 80088f4:	20002bec 	.word	0x20002bec
 80088f8:	20002b60 	.word	0x20002b60

080088fc <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80088fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008900:	4607      	mov	r7, r0
 8008902:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008906:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800890a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800890c:	3a01      	subs	r2, #1
 800890e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008912:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008914:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008918:	1e4b      	subs	r3, r1, #1
 800891a:	f104 0233 	add.w	r2, r4, #51	; 0x33
 800891e:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008920:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8008924:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8008928:	b108      	cbz	r0, 800892e <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800892a:	428b      	cmp	r3, r1
 800892c:	d1f8      	bne.n	8008920 <prvInitialiseNewTask.constprop.0+0x24>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800892e:	9d08      	ldr	r5, [sp, #32]
 8008930:	f04f 0a00 	mov.w	sl, #0
 8008934:	2d06      	cmp	r5, #6
 8008936:	bf28      	it	cs
 8008938:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800893a:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800893c:	e9c4 5a11 	strd	r5, sl, [r4, #68]	; 0x44
	pxNewTCB->uxPriority = uxPriority;
 8008940:	62e5      	str	r5, [r4, #44]	; 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008942:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008946:	f7ff faf5 	bl	8007f34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800894a:	f104 0018 	add.w	r0, r4, #24
 800894e:	f7ff faf1 	bl	8007f34 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008952:	224c      	movs	r2, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008954:	f1c5 0507 	rsb	r5, r5, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008958:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800895a:	f8c4 a098 	str.w	sl, [r4, #152]	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800895e:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008960:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008962:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008964:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008966:	f884 a09c 	strb.w	sl, [r4, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800896a:	f001 fd6d 	bl	800a448 <memset>
 800896e:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <prvInitialiseNewTask.constprop.0+0x9c>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008970:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008972:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008976:	6523      	str	r3, [r4, #80]	; 0x50
 8008978:	33d0      	adds	r3, #208	; 0xd0
 800897a:	6562      	str	r2, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800897c:	4630      	mov	r0, r6
 800897e:	464a      	mov	r2, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008980:	65a3      	str	r3, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008982:	f001 f853 	bl	8009a2c <pxPortInitialiseStack>
 8008986:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008988:	f1b8 0f00 	cmp.w	r8, #0
 800898c:	d001      	beq.n	8008992 <prvInitialiseNewTask.constprop.0+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800898e:	f8c8 4000 	str.w	r4, [r8]
}
 8008992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008996:	bf00      	nop
 8008998:	200045a0 	.word	0x200045a0

0800899c <xTaskCreateStatic>:
	{
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80089a4:	b945      	cbnz	r5, 80089b8 <xTaskCreateStatic+0x1c>
 80089a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	e7fe      	b.n	80089b6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80089b8:	b944      	cbnz	r4, 80089cc <xTaskCreateStatic+0x30>
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	e7fe      	b.n	80089ca <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80089cc:	26a0      	movs	r6, #160	; 0xa0
 80089ce:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089d0:	9e05      	ldr	r6, [sp, #20]
 80089d2:	2ea0      	cmp	r6, #160	; 0xa0
 80089d4:	d008      	beq.n	80089e8 <xTaskCreateStatic+0x4c>
 80089d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	e7fe      	b.n	80089e6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089e8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089ea:	2502      	movs	r5, #2
 80089ec:	f884 509d 	strb.w	r5, [r4, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089f0:	ad04      	add	r5, sp, #16
 80089f2:	9501      	str	r5, [sp, #4]
 80089f4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80089f6:	9402      	str	r4, [sp, #8]
 80089f8:	9500      	str	r5, [sp, #0]
 80089fa:	f7ff ff7f 	bl	80088fc <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089fe:	4620      	mov	r0, r4
 8008a00:	f7ff fe3e 	bl	8008680 <prvAddNewTaskToReadyList>
	}
 8008a04:	9804      	ldr	r0, [sp, #16]
 8008a06:	b006      	add	sp, #24
 8008a08:	bd70      	pop	{r4, r5, r6, pc}

08008a0a <xTaskCreate>:
	{
 8008a0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a0e:	4607      	mov	r7, r0
 8008a10:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a12:	0090      	lsls	r0, r2, #2
	{
 8008a14:	4688      	mov	r8, r1
 8008a16:	4616      	mov	r6, r2
 8008a18:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a1a:	f001 f95b 	bl	8009cd4 <pvPortMalloc>
			if( pxStack != NULL )
 8008a1e:	4605      	mov	r5, r0
 8008a20:	b1e8      	cbz	r0, 8008a5e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008a22:	20a0      	movs	r0, #160	; 0xa0
 8008a24:	f001 f956 	bl	8009cd4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008a28:	4604      	mov	r4, r0
 8008a2a:	b1a8      	cbz	r0, 8008a58 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8008a34:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a3a:	4632      	mov	r2, r6
 8008a3c:	4641      	mov	r1, r8
 8008a3e:	9002      	str	r0, [sp, #8]
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	4638      	mov	r0, r7
 8008a44:	464b      	mov	r3, r9
 8008a46:	f7ff ff59 	bl	80088fc <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f7ff fe18 	bl	8008680 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a50:	2001      	movs	r0, #1
	}
 8008a52:	b005      	add	sp, #20
 8008a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f001 f9cd 	bl	8009df8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a5e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008a62:	e7f6      	b.n	8008a52 <xTaskCreate+0x48>

08008a64 <vTaskResume>:
	{
 8008a64:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 8008a66:	4604      	mov	r4, r0
 8008a68:	b940      	cbnz	r0, 8008a7c <vTaskResume+0x18>
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	e7fe      	b.n	8008a7a <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8008a7c:	4d17      	ldr	r5, [pc, #92]	; (8008adc <vTaskResume+0x78>)
 8008a7e:	682b      	ldr	r3, [r5, #0]
 8008a80:	4283      	cmp	r3, r0
 8008a82:	d02a      	beq.n	8008ada <vTaskResume+0x76>
			taskENTER_CRITICAL();
 8008a84:	f000 fff6 	bl	8009a74 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f7ff febb 	bl	8008804 <prvTaskIsTaskSuspended>
 8008a8e:	b300      	cbz	r0, 8008ad2 <vTaskResume+0x6e>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008a90:	1d26      	adds	r6, r4, #4
 8008a92:	4630      	mov	r0, r6
 8008a94:	f7ff fa74 	bl	8007f80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a98:	2301      	movs	r3, #1
 8008a9a:	4911      	ldr	r1, [pc, #68]	; (8008ae0 <vTaskResume+0x7c>)
 8008a9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008a9e:	6808      	ldr	r0, [r1, #0]
 8008aa0:	4093      	lsls	r3, r2
 8008aa2:	4303      	orrs	r3, r0
 8008aa4:	2014      	movs	r0, #20
 8008aa6:	600b      	str	r3, [r1, #0]
 8008aa8:	4b0e      	ldr	r3, [pc, #56]	; (8008ae4 <vTaskResume+0x80>)
 8008aaa:	4631      	mov	r1, r6
 8008aac:	fb00 3002 	mla	r0, r0, r2, r3
 8008ab0:	f7ff fa43 	bl	8007f3a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d309      	bcc.n	8008ad2 <vTaskResume+0x6e>
						taskYIELD_IF_USING_PREEMPTION();
 8008abe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	f3bf 8f6f 	isb	sy
	}
 8008ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8008ad6:	f000 bfed 	b.w	8009ab4 <vPortExitCritical>
	}
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	20002b54 	.word	0x20002b54
 8008ae0:	20002c00 	.word	0x20002c00
 8008ae4:	20002b60 	.word	0x20002b60

08008ae8 <xTaskResumeFromISR>:
	{
 8008ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 8008aea:	4605      	mov	r5, r0
 8008aec:	b940      	cbnz	r0, 8008b00 <xTaskResumeFromISR+0x18>
 8008aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	e7fe      	b.n	8008afe <xTaskResumeFromISR+0x16>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b00:	f001 f894 	bl	8009c2c <vPortValidateInterruptPriority>
	__asm volatile
 8008b04:	f3ef 8711 	mrs	r7, BASEPRI
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f7ff fe73 	bl	8008804 <prvTaskIsTaskSuspended>
 8008b1e:	4604      	mov	r4, r0
 8008b20:	b1e0      	cbz	r0, 8008b5c <xTaskResumeFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b22:	4b14      	ldr	r3, [pc, #80]	; (8008b74 <xTaskResumeFromISR+0x8c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	b9eb      	cbnz	r3, 8008b64 <xTaskResumeFromISR+0x7c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b28:	4b13      	ldr	r3, [pc, #76]	; (8008b78 <xTaskResumeFromISR+0x90>)
 8008b2a:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8008b2c:	681b      	ldr	r3, [r3, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b2e:	1d2e      	adds	r6, r5, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b32:	4630      	mov	r0, r6
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b34:	429c      	cmp	r4, r3
 8008b36:	bf34      	ite	cc
 8008b38:	2400      	movcc	r4, #0
 8008b3a:	2401      	movcs	r4, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b3c:	f7ff fa20 	bl	8007f80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b40:	2301      	movs	r3, #1
 8008b42:	490e      	ldr	r1, [pc, #56]	; (8008b7c <xTaskResumeFromISR+0x94>)
 8008b44:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8008b46:	6808      	ldr	r0, [r1, #0]
 8008b48:	4093      	lsls	r3, r2
 8008b4a:	4303      	orrs	r3, r0
 8008b4c:	2014      	movs	r0, #20
 8008b4e:	600b      	str	r3, [r1, #0]
 8008b50:	4b0b      	ldr	r3, [pc, #44]	; (8008b80 <xTaskResumeFromISR+0x98>)
 8008b52:	4631      	mov	r1, r6
 8008b54:	fb00 3002 	mla	r0, r0, r2, r3
 8008b58:	f7ff f9ef 	bl	8007f3a <vListInsertEnd>
	__asm volatile
 8008b5c:	f387 8811 	msr	BASEPRI, r7
	}
 8008b60:	4620      	mov	r0, r4
 8008b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008b64:	4807      	ldr	r0, [pc, #28]	; (8008b84 <xTaskResumeFromISR+0x9c>)
 8008b66:	f105 0118 	add.w	r1, r5, #24
 8008b6a:	f7ff f9e6 	bl	8007f3a <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 8008b6e:	2400      	movs	r4, #0
 8008b70:	e7f4      	b.n	8008b5c <xTaskResumeFromISR+0x74>
 8008b72:	bf00      	nop
 8008b74:	20002bf8 	.word	0x20002bf8
 8008b78:	20002b54 	.word	0x20002b54
 8008b7c:	20002c00 	.word	0x20002c00
 8008b80:	20002b60 	.word	0x20002b60
 8008b84:	20002c34 	.word	0x20002c34

08008b88 <vTaskStartScheduler>:
{
 8008b88:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b8a:	2400      	movs	r4, #0
{
 8008b8c:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b8e:	aa07      	add	r2, sp, #28
 8008b90:	a906      	add	r1, sp, #24
 8008b92:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b94:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b98:	f7f9 fb72 	bl	8002280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b9c:	9b05      	ldr	r3, [sp, #20]
 8008b9e:	9a07      	ldr	r2, [sp, #28]
 8008ba0:	9302      	str	r3, [sp, #8]
 8008ba2:	9b06      	ldr	r3, [sp, #24]
 8008ba4:	4919      	ldr	r1, [pc, #100]	; (8008c0c <vTaskStartScheduler+0x84>)
 8008ba6:	e9cd 4300 	strd	r4, r3, [sp]
 8008baa:	4819      	ldr	r0, [pc, #100]	; (8008c10 <vTaskStartScheduler+0x88>)
 8008bac:	4623      	mov	r3, r4
 8008bae:	f7ff fef5 	bl	800899c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008bb2:	b340      	cbz	r0, 8008c06 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8008bb4:	f000 fd22 	bl	80095fc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008bb8:	2801      	cmp	r0, #1
 8008bba:	d119      	bne.n	8008bf0 <vTaskStartScheduler+0x68>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008bcc:	4b11      	ldr	r3, [pc, #68]	; (8008c14 <vTaskStartScheduler+0x8c>)
 8008bce:	4a12      	ldr	r2, [pc, #72]	; (8008c18 <vTaskStartScheduler+0x90>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	334c      	adds	r3, #76	; 0x4c
 8008bd4:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bda:	4b10      	ldr	r3, [pc, #64]	; (8008c1c <vTaskStartScheduler+0x94>)
 8008bdc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008bde:	4b10      	ldr	r3, [pc, #64]	; (8008c20 <vTaskStartScheduler+0x98>)
 8008be0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008be2:	4b10      	ldr	r3, [pc, #64]	; (8008c24 <vTaskStartScheduler+0x9c>)
 8008be4:	601c      	str	r4, [r3, #0]
}
 8008be6:	b008      	add	sp, #32
 8008be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008bec:	f000 bfc2 	b.w	8009b74 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	d108      	bne.n	8008c06 <vTaskStartScheduler+0x7e>
 8008bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	e7fe      	b.n	8008c04 <vTaskStartScheduler+0x7c>
}
 8008c06:	b008      	add	sp, #32
 8008c08:	bd10      	pop	{r4, pc}
 8008c0a:	bf00      	nop
 8008c0c:	0800b90a 	.word	0x0800b90a
 8008c10:	0800889d 	.word	0x0800889d
 8008c14:	20002b54 	.word	0x20002b54
 8008c18:	20000068 	.word	0x20000068
 8008c1c:	20002c2c 	.word	0x20002c2c
 8008c20:	20002c48 	.word	0x20002c48
 8008c24:	20002c74 	.word	0x20002c74

08008c28 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008c28:	4a02      	ldr	r2, [pc, #8]	; (8008c34 <vTaskSuspendAll+0xc>)
 8008c2a:	6813      	ldr	r3, [r2, #0]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	6013      	str	r3, [r2, #0]
}
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	20002bf8 	.word	0x20002bf8

08008c38 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008c38:	4b01      	ldr	r3, [pc, #4]	; (8008c40 <xTaskGetTickCount+0x8>)
 8008c3a:	6818      	ldr	r0, [r3, #0]
}
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	20002c74 	.word	0x20002c74

08008c44 <xTaskIncrementTick>:
{
 8008c44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c48:	4b3c      	ldr	r3, [pc, #240]	; (8008d3c <xTaskIncrementTick+0xf8>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d16e      	bne.n	8008d2e <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c50:	4b3b      	ldr	r3, [pc, #236]	; (8008d40 <xTaskIncrementTick+0xfc>)
 8008c52:	681d      	ldr	r5, [r3, #0]
 8008c54:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008c56:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c58:	b9bd      	cbnz	r5, 8008c8a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008c5a:	4b3a      	ldr	r3, [pc, #232]	; (8008d44 <xTaskIncrementTick+0x100>)
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	6812      	ldr	r2, [r2, #0]
 8008c60:	b142      	cbz	r2, 8008c74 <xTaskIncrementTick+0x30>
 8008c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	e7fe      	b.n	8008c72 <xTaskIncrementTick+0x2e>
 8008c74:	4a34      	ldr	r2, [pc, #208]	; (8008d48 <xTaskIncrementTick+0x104>)
 8008c76:	6819      	ldr	r1, [r3, #0]
 8008c78:	6810      	ldr	r0, [r2, #0]
 8008c7a:	6018      	str	r0, [r3, #0]
 8008c7c:	6011      	str	r1, [r2, #0]
 8008c7e:	4a33      	ldr	r2, [pc, #204]	; (8008d4c <xTaskIncrementTick+0x108>)
 8008c80:	6813      	ldr	r3, [r2, #0]
 8008c82:	3301      	adds	r3, #1
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	f7ff fdd9 	bl	800883c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c8a:	4e31      	ldr	r6, [pc, #196]	; (8008d50 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8008c8c:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c8e:	6833      	ldr	r3, [r6, #0]
 8008c90:	4f30      	ldr	r7, [pc, #192]	; (8008d54 <xTaskIncrementTick+0x110>)
 8008c92:	42ab      	cmp	r3, r5
 8008c94:	d910      	bls.n	8008cb8 <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c96:	2214      	movs	r2, #20
 8008c98:	4b2f      	ldr	r3, [pc, #188]	; (8008d58 <xTaskIncrementTick+0x114>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9e:	4353      	muls	r3, r2
 8008ca0:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	bf28      	it	cs
 8008ca6:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8008ca8:	4b2c      	ldr	r3, [pc, #176]	; (8008d5c <xTaskIncrementTick+0x118>)
 8008caa:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8008cac:	2b00      	cmp	r3, #0
}
 8008cae:	bf0c      	ite	eq
 8008cb0:	4620      	moveq	r0, r4
 8008cb2:	2001      	movne	r0, #1
 8008cb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cb8:	f8df a088 	ldr.w	sl, [pc, #136]	; 8008d44 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8008cbc:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8008d60 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cc0:	f8da 3000 	ldr.w	r3, [sl]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	b91b      	cbnz	r3, 8008cd0 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ccc:	6033      	str	r3, [r6, #0]
					break;
 8008cce:	e7e2      	b.n	8008c96 <xTaskIncrementTick+0x52>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008cd0:	f8da 3000 	ldr.w	r3, [sl]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cda:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008cde:	4295      	cmp	r5, r2
 8008ce0:	d201      	bcs.n	8008ce6 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8008ce2:	6032      	str	r2, [r6, #0]
						break;
 8008ce4:	e7d7      	b.n	8008c96 <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ce6:	f10b 0804 	add.w	r8, fp, #4
 8008cea:	4640      	mov	r0, r8
 8008cec:	f7ff f948 	bl	8007f80 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cf0:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8008cf4:	b11a      	cbz	r2, 8008cfe <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cf6:	f10b 0018 	add.w	r0, fp, #24
 8008cfa:	f7ff f941 	bl	8007f80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8008d04:	f8d9 3000 	ldr.w	r3, [r9]
 8008d08:	4082      	lsls	r2, r0
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	f8c9 2000 	str.w	r2, [r9]
 8008d10:	2214      	movs	r2, #20
 8008d12:	4641      	mov	r1, r8
 8008d14:	fb02 7000 	mla	r0, r2, r0, r7
 8008d18:	f7ff f90f 	bl	8007f3a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d1c:	4b0e      	ldr	r3, [pc, #56]	; (8008d58 <xTaskIncrementTick+0x114>)
 8008d1e:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8008d22:	6819      	ldr	r1, [r3, #0]
 8008d24:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008d26:	429a      	cmp	r2, r3
 8008d28:	bf28      	it	cs
 8008d2a:	2401      	movcs	r4, #1
 8008d2c:	e7c8      	b.n	8008cc0 <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 8008d2e:	4a0d      	ldr	r2, [pc, #52]	; (8008d64 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 8008d30:	2400      	movs	r4, #0
		++uxPendedTicks;
 8008d32:	6813      	ldr	r3, [r2, #0]
 8008d34:	3301      	adds	r3, #1
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	e7b6      	b.n	8008ca8 <xTaskIncrementTick+0x64>
 8008d3a:	bf00      	nop
 8008d3c:	20002bf8 	.word	0x20002bf8
 8008d40:	20002c74 	.word	0x20002c74
 8008d44:	20002b58 	.word	0x20002b58
 8008d48:	20002b5c 	.word	0x20002b5c
 8008d4c:	20002c30 	.word	0x20002c30
 8008d50:	20002c2c 	.word	0x20002c2c
 8008d54:	20002b60 	.word	0x20002b60
 8008d58:	20002b54 	.word	0x20002b54
 8008d5c:	20002c78 	.word	0x20002c78
 8008d60:	20002c00 	.word	0x20002c00
 8008d64:	20002bf4 	.word	0x20002bf4

08008d68 <xTaskResumeAll>:
{
 8008d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8008d6c:	4c31      	ldr	r4, [pc, #196]	; (8008e34 <xTaskResumeAll+0xcc>)
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	b943      	cbnz	r3, 8008d84 <xTaskResumeAll+0x1c>
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	e7fe      	b.n	8008d82 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008d84:	f000 fe76 	bl	8009a74 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d8e:	6824      	ldr	r4, [r4, #0]
 8008d90:	b12c      	cbz	r4, 8008d9e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008d92:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008d94:	f000 fe8e 	bl	8009ab4 <vPortExitCritical>
}
 8008d98:	4620      	mov	r0, r4
 8008d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d9e:	4b26      	ldr	r3, [pc, #152]	; (8008e38 <xTaskResumeAll+0xd0>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0f5      	beq.n	8008d92 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008da6:	4d25      	ldr	r5, [pc, #148]	; (8008e3c <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8008da8:	4e25      	ldr	r6, [pc, #148]	; (8008e40 <xTaskResumeAll+0xd8>)
 8008daa:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008e44 <xTaskResumeAll+0xdc>
 8008dae:	e01f      	b.n	8008df0 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008db0:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 8008db2:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008db4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008db6:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dba:	f104 0018 	add.w	r0, r4, #24
 8008dbe:	f7ff f8df 	bl	8007f80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dc2:	4648      	mov	r0, r9
 8008dc4:	f7ff f8dc 	bl	8007f80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008dc8:	2014      	movs	r0, #20
 8008dca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008dcc:	6831      	ldr	r1, [r6, #0]
 8008dce:	fa07 f302 	lsl.w	r3, r7, r2
 8008dd2:	430b      	orrs	r3, r1
 8008dd4:	fb00 8002 	mla	r0, r0, r2, r8
 8008dd8:	4649      	mov	r1, r9
 8008dda:	6033      	str	r3, [r6, #0]
 8008ddc:	f7ff f8ad 	bl	8007f3a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008de0:	4b19      	ldr	r3, [pc, #100]	; (8008e48 <xTaskResumeAll+0xe0>)
 8008de2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d301      	bcc.n	8008df0 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8008dec:	4b17      	ldr	r3, [pc, #92]	; (8008e4c <xTaskResumeAll+0xe4>)
 8008dee:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1dc      	bne.n	8008db0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008df6:	b10c      	cbz	r4, 8008dfc <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8008df8:	f7ff fd20 	bl	800883c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008dfc:	4d14      	ldr	r5, [pc, #80]	; (8008e50 <xTaskResumeAll+0xe8>)
 8008dfe:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008e00:	b144      	cbz	r4, 8008e14 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8008e02:	2701      	movs	r7, #1
 8008e04:	4e11      	ldr	r6, [pc, #68]	; (8008e4c <xTaskResumeAll+0xe4>)
							if( xTaskIncrementTick() != pdFALSE )
 8008e06:	f7ff ff1d 	bl	8008c44 <xTaskIncrementTick>
 8008e0a:	b100      	cbz	r0, 8008e0e <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8008e0c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008e0e:	3c01      	subs	r4, #1
 8008e10:	d1f9      	bne.n	8008e06 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8008e12:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008e14:	4b0d      	ldr	r3, [pc, #52]	; (8008e4c <xTaskResumeAll+0xe4>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d0ba      	beq.n	8008d92 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8008e1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e24:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008e30:	2401      	movs	r4, #1
 8008e32:	e7af      	b.n	8008d94 <xTaskResumeAll+0x2c>
 8008e34:	20002bf8 	.word	0x20002bf8
 8008e38:	20002bec 	.word	0x20002bec
 8008e3c:	20002c34 	.word	0x20002c34
 8008e40:	20002c00 	.word	0x20002c00
 8008e44:	20002b60 	.word	0x20002b60
 8008e48:	20002b54 	.word	0x20002b54
 8008e4c:	20002c78 	.word	0x20002c78
 8008e50:	20002bf4 	.word	0x20002bf4

08008e54 <vTaskDelayUntil>:
	{
 8008e54:	b510      	push	{r4, lr}
		configASSERT( pxPreviousWakeTime );
 8008e56:	b940      	cbnz	r0, 8008e6a <vTaskDelayUntil+0x16>
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	e7fe      	b.n	8008e68 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008e6a:	b941      	cbnz	r1, 8008e7e <vTaskDelayUntil+0x2a>
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	e7fe      	b.n	8008e7c <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 8008e7e:	4b18      	ldr	r3, [pc, #96]	; (8008ee0 <vTaskDelayUntil+0x8c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	b143      	cbz	r3, 8008e96 <vTaskDelayUntil+0x42>
 8008e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	e7fe      	b.n	8008e94 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 8008e96:	f7ff fec7 	bl	8008c28 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8008e9a:	4b12      	ldr	r3, [pc, #72]	; (8008ee4 <vTaskDelayUntil+0x90>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008e9c:	6804      	ldr	r4, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 8008e9e:	681a      	ldr	r2, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008ea0:	1863      	adds	r3, r4, r1
 8008ea2:	bf2c      	ite	cs
 8008ea4:	2101      	movcs	r1, #1
 8008ea6:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8008ea8:	4294      	cmp	r4, r2
 8008eaa:	d90f      	bls.n	8008ecc <vTaskDelayUntil+0x78>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008eac:	b979      	cbnz	r1, 8008ece <vTaskDelayUntil+0x7a>
			*pxPreviousWakeTime = xTimeToWake;
 8008eae:	6003      	str	r3, [r0, #0]
		xAlreadyYielded = xTaskResumeAll();
 8008eb0:	f7ff ff5a 	bl	8008d68 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008eb4:	b948      	cbnz	r0, 8008eca <vTaskDelayUntil+0x76>
			portYIELD_WITHIN_API();
 8008eb6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ebe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	f3bf 8f6f 	isb	sy
	}
 8008eca:	bd10      	pop	{r4, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008ecc:	b909      	cbnz	r1, 8008ed2 <vTaskDelayUntil+0x7e>
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d2ed      	bcs.n	8008eae <vTaskDelayUntil+0x5a>
			*pxPreviousWakeTime = xTimeToWake;
 8008ed2:	6003      	str	r3, [r0, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	1a98      	subs	r0, r3, r2
 8008ed8:	f7ff fc50 	bl	800877c <prvAddCurrentTaskToDelayedList>
 8008edc:	e7e8      	b.n	8008eb0 <vTaskDelayUntil+0x5c>
 8008ede:	bf00      	nop
 8008ee0:	20002bf8 	.word	0x20002bf8
 8008ee4:	20002c74 	.word	0x20002c74

08008ee8 <vTaskDelay>:
	{
 8008ee8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008eea:	b950      	cbnz	r0, 8008f02 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008eec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ef4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	f3bf 8f6f 	isb	sy
	}
 8008f00:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008f02:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <vTaskDelay+0x44>)
 8008f04:	6819      	ldr	r1, [r3, #0]
 8008f06:	b141      	cbz	r1, 8008f1a <vTaskDelay+0x32>
 8008f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	e7fe      	b.n	8008f18 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008f1a:	f7ff fe85 	bl	8008c28 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f1e:	f7ff fc2d 	bl	800877c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008f22:	f7ff ff21 	bl	8008d68 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d0e0      	beq.n	8008eec <vTaskDelay+0x4>
 8008f2a:	e7e9      	b.n	8008f00 <vTaskDelay+0x18>
 8008f2c:	20002bf8 	.word	0x20002bf8

08008f30 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f30:	4b1a      	ldr	r3, [pc, #104]	; (8008f9c <vTaskSwitchContext+0x6c>)
{
 8008f32:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	4b1a      	ldr	r3, [pc, #104]	; (8008fa0 <vTaskSwitchContext+0x70>)
 8008f38:	b112      	cbz	r2, 8008f40 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]
}
 8008f3e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8008f40:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008f42:	4b18      	ldr	r3, [pc, #96]	; (8008fa4 <vTaskSwitchContext+0x74>)
 8008f44:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008f46:	fab2 f282 	clz	r2, r2
 8008f4a:	2314      	movs	r3, #20
 8008f4c:	b2d2      	uxtb	r2, r2
 8008f4e:	f1c2 021f 	rsb	r2, r2, #31
 8008f52:	4353      	muls	r3, r2
 8008f54:	4914      	ldr	r1, [pc, #80]	; (8008fa8 <vTaskSwitchContext+0x78>)
 8008f56:	58cc      	ldr	r4, [r1, r3]
 8008f58:	18c8      	adds	r0, r1, r3
 8008f5a:	b944      	cbnz	r4, 8008f6e <vTaskSwitchContext+0x3e>
	__asm volatile
 8008f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	e7fe      	b.n	8008f6c <vTaskSwitchContext+0x3c>
 8008f6e:	6844      	ldr	r4, [r0, #4]
 8008f70:	3308      	adds	r3, #8
 8008f72:	6864      	ldr	r4, [r4, #4]
 8008f74:	440b      	add	r3, r1
 8008f76:	429c      	cmp	r4, r3
 8008f78:	bf08      	it	eq
 8008f7a:	6863      	ldreq	r3, [r4, #4]
 8008f7c:	6044      	str	r4, [r0, #4]
 8008f7e:	bf08      	it	eq
 8008f80:	6043      	streq	r3, [r0, #4]
 8008f82:	2314      	movs	r3, #20
 8008f84:	fb03 1102 	mla	r1, r3, r2, r1
 8008f88:	684b      	ldr	r3, [r1, #4]
 8008f8a:	68da      	ldr	r2, [r3, #12]
 8008f8c:	4b07      	ldr	r3, [pc, #28]	; (8008fac <vTaskSwitchContext+0x7c>)
 8008f8e:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a07      	ldr	r2, [pc, #28]	; (8008fb0 <vTaskSwitchContext+0x80>)
 8008f94:	334c      	adds	r3, #76	; 0x4c
 8008f96:	6013      	str	r3, [r2, #0]
}
 8008f98:	e7d1      	b.n	8008f3e <vTaskSwitchContext+0xe>
 8008f9a:	bf00      	nop
 8008f9c:	20002bf8 	.word	0x20002bf8
 8008fa0:	20002c78 	.word	0x20002c78
 8008fa4:	20002c00 	.word	0x20002c00
 8008fa8:	20002b60 	.word	0x20002b60
 8008fac:	20002b54 	.word	0x20002b54
 8008fb0:	20000068 	.word	0x20000068

08008fb4 <vTaskSuspend>:
	{
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	4d2d      	ldr	r5, [pc, #180]	; (8009070 <vTaskSuspend+0xbc>)
		taskENTER_CRITICAL();
 8008fba:	f000 fd5b 	bl	8009a74 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008fbe:	b904      	cbnz	r4, 8008fc2 <vTaskSuspend+0xe>
 8008fc0:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fc2:	1d26      	adds	r6, r4, #4
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f7fe ffdb 	bl	8007f80 <uxListRemove>
 8008fca:	b960      	cbnz	r0, 8008fe6 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008fcc:	2314      	movs	r3, #20
 8008fce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008fd0:	4a28      	ldr	r2, [pc, #160]	; (8009074 <vTaskSuspend+0xc0>)
 8008fd2:	4343      	muls	r3, r0
 8008fd4:	58d3      	ldr	r3, [r2, r3]
 8008fd6:	b933      	cbnz	r3, 8008fe6 <vTaskSuspend+0x32>
 8008fd8:	2201      	movs	r2, #1
 8008fda:	4927      	ldr	r1, [pc, #156]	; (8009078 <vTaskSuspend+0xc4>)
 8008fdc:	4082      	lsls	r2, r0
 8008fde:	680b      	ldr	r3, [r1, #0]
 8008fe0:	ea23 0302 	bic.w	r3, r3, r2
 8008fe4:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008fe8:	b11b      	cbz	r3, 8008ff2 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fea:	f104 0018 	add.w	r0, r4, #24
 8008fee:	f7fe ffc7 	bl	8007f80 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	4821      	ldr	r0, [pc, #132]	; (800907c <vTaskSuspend+0xc8>)
 8008ff6:	f7fe ffa0 	bl	8007f3a <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008ffa:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
		if( xSchedulerRunning != pdFALSE )
 8008ffe:	4e20      	ldr	r6, [pc, #128]	; (8009080 <vTaskSuspend+0xcc>)
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009000:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009002:	bf04      	itt	eq
 8009004:	2300      	moveq	r3, #0
 8009006:	f884 309c 	strbeq.w	r3, [r4, #156]	; 0x9c
		taskEXIT_CRITICAL();
 800900a:	f000 fd53 	bl	8009ab4 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800900e:	6833      	ldr	r3, [r6, #0]
 8009010:	b12b      	cbz	r3, 800901e <vTaskSuspend+0x6a>
			taskENTER_CRITICAL();
 8009012:	f000 fd2f 	bl	8009a74 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8009016:	f7ff fc11 	bl	800883c <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 800901a:	f000 fd4b 	bl	8009ab4 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 800901e:	682b      	ldr	r3, [r5, #0]
 8009020:	42a3      	cmp	r3, r4
 8009022:	d117      	bne.n	8009054 <vTaskSuspend+0xa0>
			if( xSchedulerRunning != pdFALSE )
 8009024:	6833      	ldr	r3, [r6, #0]
 8009026:	b1b3      	cbz	r3, 8009056 <vTaskSuspend+0xa2>
				configASSERT( uxSchedulerSuspended == 0 );
 8009028:	4b16      	ldr	r3, [pc, #88]	; (8009084 <vTaskSuspend+0xd0>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	b143      	cbz	r3, 8009040 <vTaskSuspend+0x8c>
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	e7fe      	b.n	800903e <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
 8009040:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009048:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	f3bf 8f6f 	isb	sy
	}
 8009054:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8009056:	4a09      	ldr	r2, [pc, #36]	; (800907c <vTaskSuspend+0xc8>)
 8009058:	6811      	ldr	r1, [r2, #0]
 800905a:	4a0b      	ldr	r2, [pc, #44]	; (8009088 <vTaskSuspend+0xd4>)
 800905c:	6812      	ldr	r2, [r2, #0]
 800905e:	4291      	cmp	r1, r2
 8009060:	d101      	bne.n	8009066 <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
 8009062:	602b      	str	r3, [r5, #0]
 8009064:	e7f6      	b.n	8009054 <vTaskSuspend+0xa0>
	}
 8009066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 800906a:	f7ff bf61 	b.w	8008f30 <vTaskSwitchContext>
 800906e:	bf00      	nop
 8009070:	20002b54 	.word	0x20002b54
 8009074:	20002b60 	.word	0x20002b60
 8009078:	20002c00 	.word	0x20002c00
 800907c:	20002c4c 	.word	0x20002c4c
 8009080:	20002c48 	.word	0x20002c48
 8009084:	20002bf8 	.word	0x20002bf8
 8009088:	20002bec 	.word	0x20002bec

0800908c <vTaskPlaceOnEventList>:
{
 800908c:	b510      	push	{r4, lr}
 800908e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8009090:	b940      	cbnz	r0, 80090a4 <vTaskPlaceOnEventList+0x18>
 8009092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009096:	f383 8811 	msr	BASEPRI, r3
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	e7fe      	b.n	80090a2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <vTaskPlaceOnEventList+0x30>)
 80090a6:	6819      	ldr	r1, [r3, #0]
 80090a8:	3118      	adds	r1, #24
 80090aa:	f7fe ff52 	bl	8007f52 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090ae:	4620      	mov	r0, r4
}
 80090b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090b4:	2101      	movs	r1, #1
 80090b6:	f7ff bb61 	b.w	800877c <prvAddCurrentTaskToDelayedList>
 80090ba:	bf00      	nop
 80090bc:	20002b54 	.word	0x20002b54

080090c0 <vTaskPlaceOnEventListRestricted>:
	{
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	460d      	mov	r5, r1
 80090c4:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80090c6:	b940      	cbnz	r0, 80090da <vTaskPlaceOnEventListRestricted+0x1a>
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	e7fe      	b.n	80090d8 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090da:	4b08      	ldr	r3, [pc, #32]	; (80090fc <vTaskPlaceOnEventListRestricted+0x3c>)
 80090dc:	6819      	ldr	r1, [r3, #0]
 80090de:	3118      	adds	r1, #24
 80090e0:	f7fe ff2b 	bl	8007f3a <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80090e4:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80090e6:	4621      	mov	r1, r4
 80090e8:	bf08      	it	eq
 80090ea:	4628      	moveq	r0, r5
	}
 80090ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80090f0:	bf18      	it	ne
 80090f2:	f04f 30ff 	movne.w	r0, #4294967295
 80090f6:	f7ff bb41 	b.w	800877c <prvAddCurrentTaskToDelayedList>
 80090fa:	bf00      	nop
 80090fc:	20002b54 	.word	0x20002b54

08009100 <xTaskRemoveFromEventList>:
{
 8009100:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009102:	68c3      	ldr	r3, [r0, #12]
 8009104:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009106:	b944      	cbnz	r4, 800911a <xTaskRemoveFromEventList+0x1a>
 8009108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	e7fe      	b.n	8009118 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800911a:	f104 0518 	add.w	r5, r4, #24
 800911e:	4628      	mov	r0, r5
 8009120:	f7fe ff2e 	bl	8007f80 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009124:	4b11      	ldr	r3, [pc, #68]	; (800916c <xTaskRemoveFromEventList+0x6c>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	b9e3      	cbnz	r3, 8009164 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800912a:	1d25      	adds	r5, r4, #4
 800912c:	4628      	mov	r0, r5
 800912e:	f7fe ff27 	bl	8007f80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009132:	2301      	movs	r3, #1
 8009134:	490e      	ldr	r1, [pc, #56]	; (8009170 <xTaskRemoveFromEventList+0x70>)
 8009136:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009138:	6808      	ldr	r0, [r1, #0]
 800913a:	4093      	lsls	r3, r2
 800913c:	4303      	orrs	r3, r0
 800913e:	2014      	movs	r0, #20
 8009140:	600b      	str	r3, [r1, #0]
 8009142:	4629      	mov	r1, r5
 8009144:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <xTaskRemoveFromEventList+0x74>)
 8009146:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800914a:	f7fe fef6 	bl	8007f3a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800914e:	4b0a      	ldr	r3, [pc, #40]	; (8009178 <xTaskRemoveFromEventList+0x78>)
 8009150:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009156:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8009158:	bf85      	ittet	hi
 800915a:	2001      	movhi	r0, #1
 800915c:	4b07      	ldrhi	r3, [pc, #28]	; (800917c <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 800915e:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8009160:	6018      	strhi	r0, [r3, #0]
}
 8009162:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009164:	4629      	mov	r1, r5
 8009166:	4806      	ldr	r0, [pc, #24]	; (8009180 <xTaskRemoveFromEventList+0x80>)
 8009168:	e7ef      	b.n	800914a <xTaskRemoveFromEventList+0x4a>
 800916a:	bf00      	nop
 800916c:	20002bf8 	.word	0x20002bf8
 8009170:	20002c00 	.word	0x20002c00
 8009174:	20002b60 	.word	0x20002b60
 8009178:	20002b54 	.word	0x20002b54
 800917c:	20002c78 	.word	0x20002c78
 8009180:	20002c34 	.word	0x20002c34

08009184 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009184:	4b03      	ldr	r3, [pc, #12]	; (8009194 <vTaskInternalSetTimeOutState+0x10>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800918a:	4b03      	ldr	r3, [pc, #12]	; (8009198 <vTaskInternalSetTimeOutState+0x14>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6043      	str	r3, [r0, #4]
}
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	20002c30 	.word	0x20002c30
 8009198:	20002c74 	.word	0x20002c74

0800919c <xTaskCheckForTimeOut>:
{
 800919c:	b570      	push	{r4, r5, r6, lr}
 800919e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80091a0:	4605      	mov	r5, r0
 80091a2:	b940      	cbnz	r0, 80091b6 <xTaskCheckForTimeOut+0x1a>
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	e7fe      	b.n	80091b4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80091b6:	b941      	cbnz	r1, 80091ca <xTaskCheckForTimeOut+0x2e>
 80091b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	e7fe      	b.n	80091c8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80091ca:	f000 fc53 	bl	8009a74 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80091ce:	4b0f      	ldr	r3, [pc, #60]	; (800920c <xTaskCheckForTimeOut+0x70>)
 80091d0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	d010      	beq.n	80091fa <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091d8:	480d      	ldr	r0, [pc, #52]	; (8009210 <xTaskCheckForTimeOut+0x74>)
 80091da:	682e      	ldr	r6, [r5, #0]
 80091dc:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091de:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091e0:	4286      	cmp	r6, r0
 80091e2:	d001      	beq.n	80091e8 <xTaskCheckForTimeOut+0x4c>
 80091e4:	428a      	cmp	r2, r1
 80091e6:	d90f      	bls.n	8009208 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091e8:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091ea:	4283      	cmp	r3, r0
 80091ec:	d90a      	bls.n	8009204 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80091ee:	1a5b      	subs	r3, r3, r1
 80091f0:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091f2:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80091f4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091f6:	f7ff ffc5 	bl	8009184 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80091fa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80091fc:	f000 fc5a 	bl	8009ab4 <vPortExitCritical>
}
 8009200:	4620      	mov	r0, r4
 8009202:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8009204:	2300      	movs	r3, #0
 8009206:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009208:	2401      	movs	r4, #1
 800920a:	e7f7      	b.n	80091fc <xTaskCheckForTimeOut+0x60>
 800920c:	20002c74 	.word	0x20002c74
 8009210:	20002c30 	.word	0x20002c30

08009214 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009214:	2201      	movs	r2, #1
 8009216:	4b01      	ldr	r3, [pc, #4]	; (800921c <vTaskMissedYield+0x8>)
 8009218:	601a      	str	r2, [r3, #0]
}
 800921a:	4770      	bx	lr
 800921c:	20002c78 	.word	0x20002c78

08009220 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009220:	4b05      	ldr	r3, [pc, #20]	; (8009238 <xTaskGetSchedulerState+0x18>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	b133      	cbz	r3, 8009234 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009226:	4b05      	ldr	r3, [pc, #20]	; (800923c <xTaskGetSchedulerState+0x1c>)
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	fab0 f080 	clz	r0, r0
 800922e:	0940      	lsrs	r0, r0, #5
 8009230:	0040      	lsls	r0, r0, #1
 8009232:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009234:	2001      	movs	r0, #1
	}
 8009236:	4770      	bx	lr
 8009238:	20002c48 	.word	0x20002c48
 800923c:	20002bf8 	.word	0x20002bf8

08009240 <xTaskPriorityDisinherit>:
	{
 8009240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8009242:	4604      	mov	r4, r0
 8009244:	b908      	cbnz	r0, 800924a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8009246:	2000      	movs	r0, #0
	}
 8009248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800924a:	4b22      	ldr	r3, [pc, #136]	; (80092d4 <xTaskPriorityDisinherit+0x94>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4283      	cmp	r3, r0
 8009250:	d008      	beq.n	8009264 <xTaskPriorityDisinherit+0x24>
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	e7fe      	b.n	8009262 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8009264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009266:	b943      	cbnz	r3, 800927a <xTaskPriorityDisinherit+0x3a>
 8009268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	e7fe      	b.n	8009278 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800927a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800927c:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800927e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009280:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8009282:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009284:	d0df      	beq.n	8009246 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1dd      	bne.n	8009246 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800928a:	1d06      	adds	r6, r0, #4
 800928c:	4630      	mov	r0, r6
 800928e:	f7fe fe77 	bl	8007f80 <uxListRemove>
 8009292:	4f11      	ldr	r7, [pc, #68]	; (80092d8 <xTaskPriorityDisinherit+0x98>)
 8009294:	4a11      	ldr	r2, [pc, #68]	; (80092dc <xTaskPriorityDisinherit+0x9c>)
 8009296:	b950      	cbnz	r0, 80092ae <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009298:	2314      	movs	r3, #20
 800929a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800929c:	434b      	muls	r3, r1
 800929e:	58fb      	ldr	r3, [r7, r3]
 80092a0:	b92b      	cbnz	r3, 80092ae <xTaskPriorityDisinherit+0x6e>
 80092a2:	2501      	movs	r5, #1
 80092a4:	6813      	ldr	r3, [r2, #0]
 80092a6:	408d      	lsls	r5, r1
 80092a8:	ea23 0305 	bic.w	r3, r3, r5
 80092ac:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 80092b0:	2014      	movs	r0, #20
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b2:	f1c3 0107 	rsb	r1, r3, #7
 80092b6:	61a1      	str	r1, [r4, #24]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092b8:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80092ba:	2401      	movs	r4, #1
 80092bc:	6811      	ldr	r1, [r2, #0]
 80092be:	fa04 f503 	lsl.w	r5, r4, r3
 80092c2:	fb00 7003 	mla	r0, r0, r3, r7
 80092c6:	430d      	orrs	r5, r1
 80092c8:	4631      	mov	r1, r6
 80092ca:	6015      	str	r5, [r2, #0]
 80092cc:	f7fe fe35 	bl	8007f3a <vListInsertEnd>
					xReturn = pdTRUE;
 80092d0:	4620      	mov	r0, r4
		return xReturn;
 80092d2:	e7b9      	b.n	8009248 <xTaskPriorityDisinherit+0x8>
 80092d4:	20002b54 	.word	0x20002b54
 80092d8:	20002b60 	.word	0x20002b60
 80092dc:	20002c00 	.word	0x20002c00

080092e0 <xTaskNotifyWait>:
	{
 80092e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80092e4:	4c22      	ldr	r4, [pc, #136]	; (8009370 <xTaskNotifyWait+0x90>)
	{
 80092e6:	461e      	mov	r6, r3
 80092e8:	4680      	mov	r8, r0
 80092ea:	460f      	mov	r7, r1
 80092ec:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 80092ee:	f000 fbc1 	bl	8009a74 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	d018      	beq.n	800932e <xTaskNotifyWait+0x4e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80092fc:	2101      	movs	r1, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80092fe:	6822      	ldr	r2, [r4, #0]
 8009300:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8009304:	ea23 0308 	bic.w	r3, r3, r8
 8009308:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
				if( xTicksToWait > ( TickType_t ) 0 )
 8009312:	b166      	cbz	r6, 800932e <xTaskNotifyWait+0x4e>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009314:	4630      	mov	r0, r6
 8009316:	f7ff fa31 	bl	800877c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800931a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800931e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009322:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 800932e:	f000 fbc1 	bl	8009ab4 <vPortExitCritical>
		taskENTER_CRITICAL();
 8009332:	f000 fb9f 	bl	8009a74 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8009336:	b11d      	cbz	r5, 8009340 <xTaskNotifyWait+0x60>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800933e:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009346:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009348:	bf03      	ittte	eq
 800934a:	6822      	ldreq	r2, [r4, #0]
				xReturn = pdTRUE;
 800934c:	2501      	moveq	r5, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800934e:	f8d2 3098 	ldreq.w	r3, [r2, #152]	; 0x98
				xReturn = pdFALSE;
 8009352:	2500      	movne	r5, #0
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009354:	bf04      	itt	eq
 8009356:	43bb      	biceq	r3, r7
 8009358:	f8c2 3098 	streq.w	r3, [r2, #152]	; 0x98
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800935c:	2200      	movs	r2, #0
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		taskEXIT_CRITICAL();
 8009364:	f000 fba6 	bl	8009ab4 <vPortExitCritical>
	}
 8009368:	4628      	mov	r0, r5
 800936a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800936e:	bf00      	nop
 8009370:	20002b54 	.word	0x20002b54

08009374 <xTaskGenericNotify>:
	{
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	460f      	mov	r7, r1
 8009378:	4616      	mov	r6, r2
 800937a:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 800937c:	4604      	mov	r4, r0
 800937e:	b940      	cbnz	r0, 8009392 <xTaskGenericNotify+0x1e>
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	e7fe      	b.n	8009390 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 8009392:	f000 fb6f 	bl	8009a74 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8009396:	b115      	cbz	r5, 800939e <xTaskGenericNotify+0x2a>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009398:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800939c:	602b      	str	r3, [r5, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800939e:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80093a0:	f894 509c 	ldrb.w	r5, [r4, #156]	; 0x9c
			switch( eAction )
 80093a4:	1e72      	subs	r2, r6, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80093a6:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80093a8:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
			switch( eAction )
 80093ac:	2a03      	cmp	r2, #3
 80093ae:	d808      	bhi.n	80093c2 <xTaskGenericNotify+0x4e>
 80093b0:	e8df f002 	tbb	[pc, r2]
 80093b4:	12140e02 	.word	0x12140e02
					pxTCB->ulNotifiedValue |= ulValue;
 80093b8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80093bc:	433b      	orrs	r3, r7
					( pxTCB->ulNotifiedValue )++;
 80093be:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80093c2:	2d01      	cmp	r5, #1
 80093c4:	d00d      	beq.n	80093e2 <xTaskGenericNotify+0x6e>
	{
 80093c6:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 80093c8:	f000 fb74 	bl	8009ab4 <vPortExitCritical>
	}
 80093cc:	4628      	mov	r0, r5
 80093ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 80093d0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80093d4:	3301      	adds	r3, #1
 80093d6:	e7f2      	b.n	80093be <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80093d8:	2d02      	cmp	r5, #2
 80093da:	d030      	beq.n	800943e <xTaskGenericNotify+0xca>
						pxTCB->ulNotifiedValue = ulValue;
 80093dc:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
 80093e0:	e7ef      	b.n	80093c2 <xTaskGenericNotify+0x4e>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093e2:	1d26      	adds	r6, r4, #4
 80093e4:	4630      	mov	r0, r6
 80093e6:	f7fe fdcb 	bl	8007f80 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80093ea:	4916      	ldr	r1, [pc, #88]	; (8009444 <xTaskGenericNotify+0xd0>)
 80093ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80093ee:	6808      	ldr	r0, [r1, #0]
 80093f0:	fa05 f302 	lsl.w	r3, r5, r2
 80093f4:	4303      	orrs	r3, r0
 80093f6:	2014      	movs	r0, #20
 80093f8:	600b      	str	r3, [r1, #0]
 80093fa:	4b13      	ldr	r3, [pc, #76]	; (8009448 <xTaskGenericNotify+0xd4>)
 80093fc:	4631      	mov	r1, r6
 80093fe:	fb00 3002 	mla	r0, r0, r2, r3
 8009402:	f7fe fd9a 	bl	8007f3a <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009406:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009408:	b143      	cbz	r3, 800941c <xTaskGenericNotify+0xa8>
 800940a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	e7fe      	b.n	800941a <xTaskGenericNotify+0xa6>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800941c:	4b0b      	ldr	r3, [pc, #44]	; (800944c <xTaskGenericNotify+0xd8>)
 800941e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009424:	429a      	cmp	r2, r3
 8009426:	d9ce      	bls.n	80093c6 <xTaskGenericNotify+0x52>
					taskYIELD_IF_USING_PREEMPTION();
 8009428:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800942c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009430:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	e7c4      	b.n	80093c8 <xTaskGenericNotify+0x54>
						xReturn = pdFAIL;
 800943e:	2500      	movs	r5, #0
 8009440:	e7c2      	b.n	80093c8 <xTaskGenericNotify+0x54>
 8009442:	bf00      	nop
 8009444:	20002c00 	.word	0x20002c00
 8009448:	20002b60 	.word	0x20002b60
 800944c:	20002b54 	.word	0x20002b54

08009450 <xTaskGenericNotifyFromISR>:
	{
 8009450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009454:	9f08      	ldr	r7, [sp, #32]
 8009456:	4689      	mov	r9, r1
 8009458:	4690      	mov	r8, r2
 800945a:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 800945c:	4604      	mov	r4, r0
 800945e:	b940      	cbnz	r0, 8009472 <xTaskGenericNotifyFromISR+0x22>
 8009460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	e7fe      	b.n	8009470 <xTaskGenericNotifyFromISR+0x20>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009472:	f000 fbdb 	bl	8009c2c <vPortValidateInterruptPriority>
	__asm volatile
 8009476:	f3ef 8611 	mrs	r6, BASEPRI
 800947a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800948a:	b115      	cbz	r5, 8009492 <xTaskGenericNotifyFromISR+0x42>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800948c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009490:	602b      	str	r3, [r5, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009492:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009494:	f894 509c 	ldrb.w	r5, [r4, #156]	; 0x9c
			switch( eAction )
 8009498:	f108 32ff 	add.w	r2, r8, #4294967295
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800949c:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800949e:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
			switch( eAction )
 80094a2:	2a03      	cmp	r2, #3
 80094a4:	d809      	bhi.n	80094ba <xTaskGenericNotifyFromISR+0x6a>
 80094a6:	e8df f002 	tbb	[pc, r2]
 80094aa:	0f02      	.short	0x0f02
 80094ac:	1315      	.short	0x1315
					pxTCB->ulNotifiedValue |= ulValue;
 80094ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80094b2:	ea43 0309 	orr.w	r3, r3, r9
					( pxTCB->ulNotifiedValue )++;
 80094b6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80094ba:	2d01      	cmp	r5, #1
 80094bc:	d00d      	beq.n	80094da <xTaskGenericNotifyFromISR+0x8a>
	{
 80094be:	2001      	movs	r0, #1
	__asm volatile
 80094c0:	f386 8811 	msr	BASEPRI, r6
	}
 80094c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 80094c8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80094cc:	3301      	adds	r3, #1
 80094ce:	e7f2      	b.n	80094b6 <xTaskGenericNotifyFromISR+0x66>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80094d0:	2d02      	cmp	r5, #2
 80094d2:	d033      	beq.n	800953c <xTaskGenericNotifyFromISR+0xec>
						pxTCB->ulNotifiedValue = ulValue;
 80094d4:	f8c4 9098 	str.w	r9, [r4, #152]	; 0x98
 80094d8:	e7ef      	b.n	80094ba <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80094da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80094dc:	b143      	cbz	r3, 80094f0 <xTaskGenericNotifyFromISR+0xa0>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	e7fe      	b.n	80094ee <xTaskGenericNotifyFromISR+0x9e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094f0:	4b13      	ldr	r3, [pc, #76]	; (8009540 <xTaskGenericNotifyFromISR+0xf0>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	b9db      	cbnz	r3, 800952e <xTaskGenericNotifyFromISR+0xde>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094f6:	f104 0804 	add.w	r8, r4, #4
 80094fa:	4640      	mov	r0, r8
 80094fc:	f7fe fd40 	bl	8007f80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009500:	4a10      	ldr	r2, [pc, #64]	; (8009544 <xTaskGenericNotifyFromISR+0xf4>)
 8009502:	2014      	movs	r0, #20
 8009504:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009506:	6811      	ldr	r1, [r2, #0]
 8009508:	409d      	lsls	r5, r3
 800950a:	430d      	orrs	r5, r1
 800950c:	4641      	mov	r1, r8
 800950e:	6015      	str	r5, [r2, #0]
 8009510:	4a0d      	ldr	r2, [pc, #52]	; (8009548 <xTaskGenericNotifyFromISR+0xf8>)
 8009512:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009516:	f7fe fd10 	bl	8007f3a <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800951a:	4b0c      	ldr	r3, [pc, #48]	; (800954c <xTaskGenericNotifyFromISR+0xfc>)
 800951c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009522:	429a      	cmp	r2, r3
 8009524:	d9cb      	bls.n	80094be <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 8009526:	2001      	movs	r0, #1
 8009528:	b12f      	cbz	r7, 8009536 <xTaskGenericNotifyFromISR+0xe6>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800952a:	6038      	str	r0, [r7, #0]
 800952c:	e7c8      	b.n	80094c0 <xTaskGenericNotifyFromISR+0x70>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800952e:	4808      	ldr	r0, [pc, #32]	; (8009550 <xTaskGenericNotifyFromISR+0x100>)
 8009530:	f104 0118 	add.w	r1, r4, #24
 8009534:	e7ef      	b.n	8009516 <xTaskGenericNotifyFromISR+0xc6>
						xYieldPending = pdTRUE;
 8009536:	4b07      	ldr	r3, [pc, #28]	; (8009554 <xTaskGenericNotifyFromISR+0x104>)
 8009538:	6018      	str	r0, [r3, #0]
 800953a:	e7c1      	b.n	80094c0 <xTaskGenericNotifyFromISR+0x70>
						xReturn = pdFAIL;
 800953c:	2000      	movs	r0, #0
 800953e:	e7bf      	b.n	80094c0 <xTaskGenericNotifyFromISR+0x70>
 8009540:	20002bf8 	.word	0x20002bf8
 8009544:	20002c00 	.word	0x20002c00
 8009548:	20002b60 	.word	0x20002b60
 800954c:	20002b54 	.word	0x20002b54
 8009550:	20002c34 	.word	0x20002c34
 8009554:	20002c78 	.word	0x20002c78

08009558 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800955a:	4c11      	ldr	r4, [pc, #68]	; (80095a0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800955c:	f000 fa8a 	bl	8009a74 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009560:	6825      	ldr	r5, [r4, #0]
 8009562:	b9bd      	cbnz	r5, 8009594 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009564:	4f0f      	ldr	r7, [pc, #60]	; (80095a4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8009566:	4e10      	ldr	r6, [pc, #64]	; (80095a8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009568:	4638      	mov	r0, r7
 800956a:	f7fe fcd8 	bl	8007f1e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800956e:	4630      	mov	r0, r6
 8009570:	f7fe fcd5 	bl	8007f1e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009574:	4b0d      	ldr	r3, [pc, #52]	; (80095ac <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009576:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 8009578:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800957a:	4b0d      	ldr	r3, [pc, #52]	; (80095b0 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800957c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800957e:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009580:	4a0c      	ldr	r2, [pc, #48]	; (80095b4 <prvCheckForValidListAndQueue+0x5c>)
 8009582:	4b0d      	ldr	r3, [pc, #52]	; (80095b8 <prvCheckForValidListAndQueue+0x60>)
 8009584:	9500      	str	r5, [sp, #0]
 8009586:	f7fe fdd6 	bl	8008136 <xQueueGenericCreateStatic>
 800958a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800958c:	b110      	cbz	r0, 8009594 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800958e:	490b      	ldr	r1, [pc, #44]	; (80095bc <prvCheckForValidListAndQueue+0x64>)
 8009590:	f7ff f840 	bl	8008614 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8009594:	b003      	add	sp, #12
 8009596:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800959a:	f000 ba8b 	b.w	8009ab4 <vPortExitCritical>
 800959e:	bf00      	nop
 80095a0:	20002d70 	.word	0x20002d70
 80095a4:	20002cfc 	.word	0x20002cfc
 80095a8:	20002d10 	.word	0x20002d10
 80095ac:	20002c7c 	.word	0x20002c7c
 80095b0:	20002c80 	.word	0x20002c80
 80095b4:	20002c84 	.word	0x20002c84
 80095b8:	20002d28 	.word	0x20002d28
 80095bc:	0800b90f 	.word	0x0800b90f

080095c0 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80095c0:	4291      	cmp	r1, r2
{
 80095c2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095c4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095c6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80095c8:	d80a      	bhi.n	80095e0 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095ca:	1ad2      	subs	r2, r2, r3
 80095cc:	6983      	ldr	r3, [r0, #24]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d20d      	bcs.n	80095ee <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095d2:	4b08      	ldr	r3, [pc, #32]	; (80095f4 <prvInsertTimerInActiveList+0x34>)
 80095d4:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095d6:	6818      	ldr	r0, [r3, #0]
 80095d8:	f7fe fcbb 	bl	8007f52 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80095dc:	2000      	movs	r0, #0
}
 80095de:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d201      	bcs.n	80095e8 <prvInsertTimerInActiveList+0x28>
 80095e4:	4299      	cmp	r1, r3
 80095e6:	d202      	bcs.n	80095ee <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095e8:	4b03      	ldr	r3, [pc, #12]	; (80095f8 <prvInsertTimerInActiveList+0x38>)
 80095ea:	1d01      	adds	r1, r0, #4
 80095ec:	e7f3      	b.n	80095d6 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80095ee:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80095f0:	e7f5      	b.n	80095de <prvInsertTimerInActiveList+0x1e>
 80095f2:	bf00      	nop
 80095f4:	20002c80 	.word	0x20002c80
 80095f8:	20002c7c 	.word	0x20002c7c

080095fc <xTimerCreateTimerTask>:
{
 80095fc:	b510      	push	{r4, lr}
 80095fe:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009600:	f7ff ffaa 	bl	8009558 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009604:	4b12      	ldr	r3, [pc, #72]	; (8009650 <xTimerCreateTimerTask+0x54>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	b1b3      	cbz	r3, 8009638 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800960a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800960c:	aa07      	add	r2, sp, #28
 800960e:	a906      	add	r1, sp, #24
 8009610:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009612:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009616:	f7f8 fe3f 	bl	8002298 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800961a:	9b05      	ldr	r3, [sp, #20]
 800961c:	9a07      	ldr	r2, [sp, #28]
 800961e:	9302      	str	r3, [sp, #8]
 8009620:	9b06      	ldr	r3, [sp, #24]
 8009622:	490c      	ldr	r1, [pc, #48]	; (8009654 <xTimerCreateTimerTask+0x58>)
 8009624:	9301      	str	r3, [sp, #4]
 8009626:	2302      	movs	r3, #2
 8009628:	480b      	ldr	r0, [pc, #44]	; (8009658 <xTimerCreateTimerTask+0x5c>)
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	4623      	mov	r3, r4
 800962e:	f7ff f9b5 	bl	800899c <xTaskCreateStatic>
 8009632:	4b0a      	ldr	r3, [pc, #40]	; (800965c <xTimerCreateTimerTask+0x60>)
 8009634:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009636:	b940      	cbnz	r0, 800964a <xTimerCreateTimerTask+0x4e>
 8009638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8009648:	e7fe      	b.n	8009648 <xTimerCreateTimerTask+0x4c>
}
 800964a:	2001      	movs	r0, #1
 800964c:	b008      	add	sp, #32
 800964e:	bd10      	pop	{r4, pc}
 8009650:	20002d70 	.word	0x20002d70
 8009654:	0800b914 	.word	0x0800b914
 8009658:	08009825 	.word	0x08009825
 800965c:	20002d74 	.word	0x20002d74

08009660 <xTimerCreate>:
	{
 8009660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009664:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009666:	202c      	movs	r0, #44	; 0x2c
	{
 8009668:	460d      	mov	r5, r1
 800966a:	4617      	mov	r7, r2
 800966c:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800966e:	f000 fb31 	bl	8009cd4 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8009672:	4604      	mov	r4, r0
 8009674:	b1c0      	cbz	r0, 80096a8 <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009676:	b945      	cbnz	r5, 800968a <xTimerCreate+0x2a>
 8009678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	e7fe      	b.n	8009688 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 800968a:	f7ff ff65 	bl	8009558 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800968e:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009690:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009694:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 8009696:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 800969a:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800969c:	1d20      	adds	r0, r4, #4
 800969e:	f7fe fc49 	bl	8007f34 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80096a2:	2300      	movs	r3, #0
 80096a4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 80096a8:	4620      	mov	r0, r4
 80096aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080096ae <xTimerCreateStatic>:
	{
 80096ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80096b2:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 80096b4:	232c      	movs	r3, #44	; 0x2c
 80096b6:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 80096b8:	9b01      	ldr	r3, [sp, #4]
	{
 80096ba:	4680      	mov	r8, r0
			configASSERT( xSize == sizeof( Timer_t ) );
 80096bc:	2b2c      	cmp	r3, #44	; 0x2c
	{
 80096be:	460d      	mov	r5, r1
 80096c0:	4617      	mov	r7, r2
 80096c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 80096c4:	d008      	beq.n	80096d8 <xTimerCreateStatic+0x2a>
 80096c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	e7fe      	b.n	80096d6 <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 80096d8:	b944      	cbnz	r4, 80096ec <xTimerCreateStatic+0x3e>
 80096da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	e7fe      	b.n	80096ea <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80096ec:	b941      	cbnz	r1, 8009700 <xTimerCreateStatic+0x52>
 80096ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	e7fe      	b.n	80096fe <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 8009700:	f7ff ff2a 	bl	8009558 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009704:	9b08      	ldr	r3, [sp, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009706:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009708:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
 800970a:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 800970e:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8009712:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009714:	f7fe fc0e 	bl	8007f34 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8009718:	2301      	movs	r3, #1
	}
 800971a:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800971c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 8009720:	b002      	add	sp, #8
 8009722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009728 <xTimerGenericCommand>:
{
 8009728:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800972a:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800972c:	4604      	mov	r4, r0
{
 800972e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009730:	b940      	cbnz	r0, 8009744 <xTimerGenericCommand+0x1c>
 8009732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	e7fe      	b.n	8009742 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8009744:	4d0c      	ldr	r5, [pc, #48]	; (8009778 <xTimerGenericCommand+0x50>)
 8009746:	6828      	ldr	r0, [r5, #0]
 8009748:	b178      	cbz	r0, 800976a <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800974a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800974c:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009750:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009752:	dc0c      	bgt.n	800976e <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009754:	f7ff fd64 	bl	8009220 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009758:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800975a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800975c:	bf14      	ite	ne
 800975e:	461a      	movne	r2, r3
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009760:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009762:	6828      	ldr	r0, [r5, #0]
 8009764:	a901      	add	r1, sp, #4
 8009766:	f7fe fd53 	bl	8008210 <xQueueGenericSend>
}
 800976a:	b004      	add	sp, #16
 800976c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800976e:	2300      	movs	r3, #0
 8009770:	a901      	add	r1, sp, #4
 8009772:	f7fe fe00 	bl	8008376 <xQueueGenericSendFromISR>
 8009776:	e7f8      	b.n	800976a <xTimerGenericCommand+0x42>
 8009778:	20002d70 	.word	0x20002d70

0800977c <prvSampleTimeNow>:
{
 800977c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009780:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8009782:	f7ff fa59 	bl	8008c38 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009786:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8009818 <prvSampleTimeNow+0x9c>
	xTimeNow = xTaskGetTickCount();
 800978a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800978c:	f8d8 3000 	ldr.w	r3, [r8]
 8009790:	4283      	cmp	r3, r0
 8009792:	d90b      	bls.n	80097ac <prvSampleTimeNow+0x30>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009794:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009798:	4f20      	ldr	r7, [pc, #128]	; (800981c <prvSampleTimeNow+0xa0>)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	b96a      	cbnz	r2, 80097bc <prvSampleTimeNow+0x40>
	pxCurrentTimerList = pxOverflowTimerList;
 80097a0:	4a1f      	ldr	r2, [pc, #124]	; (8009820 <prvSampleTimeNow+0xa4>)
 80097a2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097a4:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80097a6:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e000      	b.n	80097ae <prvSampleTimeNow+0x32>
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 80097b0:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80097b2:	f8c8 5000 	str.w	r5, [r8]
}
 80097b6:	b003      	add	sp, #12
 80097b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097bc:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097be:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097c0:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097c4:	f104 0b04 	add.w	fp, r4, #4
 80097c8:	4658      	mov	r0, fp
 80097ca:	f7fe fbd9 	bl	8007f80 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097d0:	4620      	mov	r0, r4
 80097d2:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80097d4:	69e3      	ldr	r3, [r4, #28]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d1df      	bne.n	800979a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097da:	69a3      	ldr	r3, [r4, #24]
 80097dc:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 80097de:	459a      	cmp	sl, r3
 80097e0:	d206      	bcs.n	80097f0 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097e2:	4659      	mov	r1, fp
 80097e4:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80097e6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097e8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097ea:	f7fe fbb2 	bl	8007f52 <vListInsert>
 80097ee:	e7d4      	b.n	800979a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097f0:	2300      	movs	r3, #0
 80097f2:	4652      	mov	r2, sl
 80097f4:	4619      	mov	r1, r3
 80097f6:	4620      	mov	r0, r4
 80097f8:	f8cd 9000 	str.w	r9, [sp]
 80097fc:	f7ff ff94 	bl	8009728 <xTimerGenericCommand>
				configASSERT( xResult );
 8009800:	2800      	cmp	r0, #0
 8009802:	d1ca      	bne.n	800979a <prvSampleTimeNow+0x1e>
 8009804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	e7fe      	b.n	8009814 <prvSampleTimeNow+0x98>
 8009816:	bf00      	nop
 8009818:	20002d24 	.word	0x20002d24
 800981c:	20002c7c 	.word	0x20002c7c
 8009820:	20002c80 	.word	0x20002c80

08009824 <prvTimerTask>:
{
 8009824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009828:	4e65      	ldr	r6, [pc, #404]	; (80099c0 <prvTimerTask+0x19c>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800982a:	4f66      	ldr	r7, [pc, #408]	; (80099c4 <prvTimerTask+0x1a0>)
{
 800982c:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800982e:	6833      	ldr	r3, [r6, #0]
 8009830:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009832:	2d00      	cmp	r5, #0
 8009834:	d033      	beq.n	800989e <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800983c:	f7ff f9f4 	bl	8008c28 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009840:	a803      	add	r0, sp, #12
 8009842:	f7ff ff9b 	bl	800977c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009846:	9c03      	ldr	r4, [sp, #12]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009848:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800984a:	2c00      	cmp	r4, #0
 800984c:	d177      	bne.n	800993e <prvTimerTask+0x11a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800984e:	2d00      	cmp	r5, #0
 8009850:	d05a      	beq.n	8009908 <prvTimerTask+0xe4>
 8009852:	4540      	cmp	r0, r8
 8009854:	d35e      	bcc.n	8009914 <prvTimerTask+0xf0>
				( void ) xTaskResumeAll();
 8009856:	f7ff fa87 	bl	8008d68 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800985a:	6833      	ldr	r3, [r6, #0]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009860:	1d28      	adds	r0, r5, #4
 8009862:	f7fe fb8d 	bl	8007f80 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009866:	69eb      	ldr	r3, [r5, #28]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d11a      	bne.n	80098a2 <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800986c:	69a9      	ldr	r1, [r5, #24]
 800986e:	4643      	mov	r3, r8
 8009870:	464a      	mov	r2, r9
 8009872:	4628      	mov	r0, r5
 8009874:	4441      	add	r1, r8
 8009876:	f7ff fea3 	bl	80095c0 <prvInsertTimerInActiveList>
 800987a:	b190      	cbz	r0, 80098a2 <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800987c:	4623      	mov	r3, r4
 800987e:	4642      	mov	r2, r8
 8009880:	4621      	mov	r1, r4
 8009882:	4628      	mov	r0, r5
 8009884:	9400      	str	r4, [sp, #0]
 8009886:	f7ff ff4f 	bl	8009728 <xTimerGenericCommand>
			configASSERT( xResult );
 800988a:	b950      	cbnz	r0, 80098a2 <prvTimerTask+0x7e>
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	e7fe      	b.n	800989c <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 800989e:	46a8      	mov	r8, r5
 80098a0:	e7cc      	b.n	800983c <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098a2:	4628      	mov	r0, r5
 80098a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098a6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098a8:	2500      	movs	r5, #0
 80098aa:	2200      	movs	r2, #0
 80098ac:	6838      	ldr	r0, [r7, #0]
 80098ae:	a903      	add	r1, sp, #12
 80098b0:	f7fe fdc2 	bl	8008438 <xQueueReceive>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d0ba      	beq.n	800982e <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098b8:	9b03      	ldr	r3, [sp, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	dbf5      	blt.n	80098aa <prvTimerTask+0x86>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098be:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098c0:	6963      	ldr	r3, [r4, #20]
 80098c2:	b113      	cbz	r3, 80098ca <prvTimerTask+0xa6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098c4:	1d20      	adds	r0, r4, #4
 80098c6:	f7fe fb5b 	bl	8007f80 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098ca:	a802      	add	r0, sp, #8
 80098cc:	f7ff ff56 	bl	800977c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80098d0:	9b03      	ldr	r3, [sp, #12]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098d2:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80098d4:	2b09      	cmp	r3, #9
 80098d6:	d8e8      	bhi.n	80098aa <prvTimerTask+0x86>
 80098d8:	a101      	add	r1, pc, #4	; (adr r1, 80098e0 <prvTimerTask+0xbc>)
 80098da:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098de:	bf00      	nop
 80098e0:	08009945 	.word	0x08009945
 80098e4:	08009945 	.word	0x08009945
 80098e8:	08009945 	.word	0x08009945
 80098ec:	080098ab 	.word	0x080098ab
 80098f0:	08009989 	.word	0x08009989
 80098f4:	080099ad 	.word	0x080099ad
 80098f8:	08009945 	.word	0x08009945
 80098fc:	08009945 	.word	0x08009945
 8009900:	080098ab 	.word	0x080098ab
 8009904:	08009989 	.word	0x08009989
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009908:	4b2f      	ldr	r3, [pc, #188]	; (80099c8 <prvTimerTask+0x1a4>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681c      	ldr	r4, [r3, #0]
 800990e:	fab4 f484 	clz	r4, r4
 8009912:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009914:	4622      	mov	r2, r4
 8009916:	6838      	ldr	r0, [r7, #0]
 8009918:	eba8 0109 	sub.w	r1, r8, r9
 800991c:	f7fe fe8c 	bl	8008638 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009920:	f7ff fa22 	bl	8008d68 <xTaskResumeAll>
 8009924:	2800      	cmp	r0, #0
 8009926:	d1bf      	bne.n	80098a8 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 8009928:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800992c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009930:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	e7b4      	b.n	80098a8 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 800993e:	f7ff fa13 	bl	8008d68 <xTaskResumeAll>
 8009942:	e7b1      	b.n	80098a8 <prvTimerTask+0x84>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009944:	69a1      	ldr	r1, [r4, #24]
 8009946:	9b04      	ldr	r3, [sp, #16]
 8009948:	4620      	mov	r0, r4
 800994a:	4419      	add	r1, r3
 800994c:	f7ff fe38 	bl	80095c0 <prvInsertTimerInActiveList>
 8009950:	2800      	cmp	r0, #0
 8009952:	d0aa      	beq.n	80098aa <prvTimerTask+0x86>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009954:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009956:	4620      	mov	r0, r4
 8009958:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800995a:	69e3      	ldr	r3, [r4, #28]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d1a4      	bne.n	80098aa <prvTimerTask+0x86>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009960:	2300      	movs	r3, #0
 8009962:	69a2      	ldr	r2, [r4, #24]
 8009964:	9904      	ldr	r1, [sp, #16]
 8009966:	4620      	mov	r0, r4
 8009968:	440a      	add	r2, r1
 800996a:	9500      	str	r5, [sp, #0]
 800996c:	4619      	mov	r1, r3
 800996e:	f7ff fedb 	bl	8009728 <xTimerGenericCommand>
							configASSERT( xResult );
 8009972:	2800      	cmp	r0, #0
 8009974:	d199      	bne.n	80098aa <prvTimerTask+0x86>
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	e7fe      	b.n	8009986 <prvTimerTask+0x162>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009988:	9904      	ldr	r1, [sp, #16]
 800998a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800998c:	b941      	cbnz	r1, 80099a0 <prvTimerTask+0x17c>
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	e7fe      	b.n	800999e <prvTimerTask+0x17a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099a0:	4603      	mov	r3, r0
 80099a2:	4401      	add	r1, r0
 80099a4:	4620      	mov	r0, r4
 80099a6:	f7ff fe0b 	bl	80095c0 <prvInsertTimerInActiveList>
					break;
 80099aa:	e77e      	b.n	80098aa <prvTimerTask+0x86>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80099ac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f47f af7a 	bne.w	80098aa <prvTimerTask+0x86>
							vPortFree( pxTimer );
 80099b6:	4620      	mov	r0, r4
 80099b8:	f000 fa1e 	bl	8009df8 <vPortFree>
 80099bc:	e775      	b.n	80098aa <prvTimerTask+0x86>
 80099be:	bf00      	nop
 80099c0:	20002c7c 	.word	0x20002c7c
 80099c4:	20002d70 	.word	0x20002d70
 80099c8:	20002c80 	.word	0x20002c80

080099cc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80099cc:	4806      	ldr	r0, [pc, #24]	; (80099e8 <prvPortStartFirstTask+0x1c>)
 80099ce:	6800      	ldr	r0, [r0, #0]
 80099d0:	6800      	ldr	r0, [r0, #0]
 80099d2:	f380 8808 	msr	MSP, r0
 80099d6:	b662      	cpsie	i
 80099d8:	b661      	cpsie	f
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	df00      	svc	0
 80099e4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099e6:	0000      	.short	0x0000
 80099e8:	e000ed08 	.word	0xe000ed08

080099ec <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 80099ec:	2300      	movs	r3, #0
{
 80099ee:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80099f0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80099f2:	4b0d      	ldr	r3, [pc, #52]	; (8009a28 <prvTaskExitError+0x3c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3301      	adds	r3, #1
 80099f8:	d008      	beq.n	8009a0c <prvTaskExitError+0x20>
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	e7fe      	b.n	8009a0a <prvTaskExitError+0x1e>
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8009a1c:	9b01      	ldr	r3, [sp, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d0fc      	beq.n	8009a1c <prvTaskExitError+0x30>
}
 8009a22:	b002      	add	sp, #8
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	2000000c 	.word	0x2000000c

08009a2c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a30:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a34:	4b05      	ldr	r3, [pc, #20]	; (8009a4c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a36:	f021 0101 	bic.w	r1, r1, #1
 8009a3a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a3e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a42:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8009a46:	3840      	subs	r0, #64	; 0x40
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	080099ed 	.word	0x080099ed

08009a50 <SVC_Handler>:
	__asm volatile (
 8009a50:	4b07      	ldr	r3, [pc, #28]	; (8009a70 <pxCurrentTCBConst2>)
 8009a52:	6819      	ldr	r1, [r3, #0]
 8009a54:	6808      	ldr	r0, [r1, #0]
 8009a56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009a5a:	f380 8809 	msr	PSP, r0
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f04f 0000 	mov.w	r0, #0
 8009a66:	f380 8811 	msr	BASEPRI, r0
 8009a6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009a6e:	4770      	bx	lr

08009a70 <pxCurrentTCBConst2>:
 8009a70:	20002b54 	.word	0x20002b54

08009a74 <vPortEnterCritical>:
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a84:	4a0a      	ldr	r2, [pc, #40]	; (8009ab0 <vPortEnterCritical+0x3c>)
 8009a86:	6813      	ldr	r3, [r2, #0]
 8009a88:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a8a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8009a8c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009a8e:	d10e      	bne.n	8009aae <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009a94:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	b143      	cbz	r3, 8009aae <vPortEnterCritical+0x3a>
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	e7fe      	b.n	8009aac <vPortEnterCritical+0x38>
	}
}
 8009aae:	4770      	bx	lr
 8009ab0:	2000000c 	.word	0x2000000c

08009ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8009ab4:	4a08      	ldr	r2, [pc, #32]	; (8009ad8 <vPortExitCritical+0x24>)
 8009ab6:	6813      	ldr	r3, [r2, #0]
 8009ab8:	b943      	cbnz	r3, 8009acc <vPortExitCritical+0x18>
 8009aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	e7fe      	b.n	8009aca <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009acc:	3b01      	subs	r3, #1
 8009ace:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ad0:	b90b      	cbnz	r3, 8009ad6 <vPortExitCritical+0x22>
	__asm volatile
 8009ad2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ad6:	4770      	bx	lr
 8009ad8:	2000000c 	.word	0x2000000c
 8009adc:	00000000 	.word	0x00000000

08009ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ae0:	f3ef 8009 	mrs	r0, PSP
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	4b0d      	ldr	r3, [pc, #52]	; (8009b20 <pxCurrentTCBConst>)
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009af0:	6010      	str	r0, [r2, #0]
 8009af2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009af6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009afa:	f380 8811 	msr	BASEPRI, r0
 8009afe:	f7ff fa17 	bl	8008f30 <vTaskSwitchContext>
 8009b02:	f04f 0000 	mov.w	r0, #0
 8009b06:	f380 8811 	msr	BASEPRI, r0
 8009b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009b0e:	6819      	ldr	r1, [r3, #0]
 8009b10:	6808      	ldr	r0, [r1, #0]
 8009b12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009b16:	f380 8809 	msr	PSP, r0
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	4770      	bx	lr

08009b20 <pxCurrentTCBConst>:
 8009b20:	20002b54 	.word	0x20002b54

08009b24 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b24:	b508      	push	{r3, lr}
	__asm volatile
 8009b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2a:	f383 8811 	msr	BASEPRI, r3
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b36:	f7ff f885 	bl	8008c44 <xTaskIncrementTick>
 8009b3a:	b128      	cbz	r0, 8009b48 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b4e:	bd08      	pop	{r3, pc}

08009b50 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b50:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8009b54:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b5a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b5c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b5e:	4b04      	ldr	r3, [pc, #16]	; (8009b70 <vPortSetupTimerInterrupt+0x20>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b66:	3b01      	subs	r3, #1
 8009b68:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b6a:	2307      	movs	r3, #7
 8009b6c:	6113      	str	r3, [r2, #16]
}
 8009b6e:	4770      	bx	lr
 8009b70:	20000000 	.word	0x20000000

08009b74 <xPortStartScheduler>:
{
 8009b74:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b76:	4b29      	ldr	r3, [pc, #164]	; (8009c1c <xPortStartScheduler+0xa8>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b78:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b7a:	781a      	ldrb	r2, [r3, #0]
 8009b7c:	b2d2      	uxtb	r2, r2
 8009b7e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b80:	22ff      	movs	r2, #255	; 0xff
 8009b82:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b84:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b86:	4a26      	ldr	r2, [pc, #152]	; (8009c20 <xPortStartScheduler+0xac>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009b92:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b96:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b98:	2307      	movs	r3, #7
 8009b9a:	4a22      	ldr	r2, [pc, #136]	; (8009c24 <xPortStartScheduler+0xb0>)
 8009b9c:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b9e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009ba2:	1e5c      	subs	r4, r3, #1
 8009ba4:	0600      	lsls	r0, r0, #24
 8009ba6:	d40c      	bmi.n	8009bc2 <xPortStartScheduler+0x4e>
 8009ba8:	b111      	cbz	r1, 8009bb0 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	6013      	str	r3, [r2, #0]
 8009bae:	d011      	beq.n	8009bd4 <xPortStartScheduler+0x60>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	e7fe      	b.n	8009bc0 <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009bc2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	005b      	lsls	r3, r3, #1
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	f88d 3003 	strb.w	r3, [sp, #3]
 8009bd0:	4623      	mov	r3, r4
 8009bd2:	e7e4      	b.n	8009b9e <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009bd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009bd8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009bda:	9b01      	ldr	r3, [sp, #4]
 8009bdc:	4a0f      	ldr	r2, [pc, #60]	; (8009c1c <xPortStartScheduler+0xa8>)
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009be2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8009be6:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009be8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8009bec:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009bf0:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009bf4:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8009bf8:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8009bfc:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8009c00:	f7ff ffa6 	bl	8009b50 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009c04:	4b08      	ldr	r3, [pc, #32]	; (8009c28 <xPortStartScheduler+0xb4>)
 8009c06:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8009c08:	f7ff fee0 	bl	80099cc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009c0c:	f7ff f990 	bl	8008f30 <vTaskSwitchContext>
}
 8009c10:	4620      	mov	r0, r4
	prvTaskExitError();
 8009c12:	f7ff feeb 	bl	80099ec <prvTaskExitError>
}
 8009c16:	b002      	add	sp, #8
 8009c18:	bd10      	pop	{r4, pc}
 8009c1a:	bf00      	nop
 8009c1c:	e000e400 	.word	0xe000e400
 8009c20:	20002d78 	.word	0x20002d78
 8009c24:	20002d7c 	.word	0x20002d7c
 8009c28:	2000000c 	.word	0x2000000c

08009c2c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c2c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c30:	2b0f      	cmp	r3, #15
 8009c32:	d90e      	bls.n	8009c52 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c34:	4a11      	ldr	r2, [pc, #68]	; (8009c7c <vPortValidateInterruptPriority+0x50>)
 8009c36:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c38:	4a11      	ldr	r2, [pc, #68]	; (8009c80 <vPortValidateInterruptPriority+0x54>)
 8009c3a:	7812      	ldrb	r2, [r2, #0]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d908      	bls.n	8009c52 <vPortValidateInterruptPriority+0x26>
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	e7fe      	b.n	8009c50 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009c56:	4a0b      	ldr	r2, [pc, #44]	; (8009c84 <vPortValidateInterruptPriority+0x58>)
 8009c58:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009c5c:	6812      	ldr	r2, [r2, #0]
 8009c5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d908      	bls.n	8009c78 <vPortValidateInterruptPriority+0x4c>
 8009c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6a:	f383 8811 	msr	BASEPRI, r3
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	e7fe      	b.n	8009c76 <vPortValidateInterruptPriority+0x4a>
	}
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	e000e3f0 	.word	0xe000e3f0
 8009c80:	20002d78 	.word	0x20002d78
 8009c84:	20002d7c 	.word	0x20002d7c

08009c88 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c88:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c8a:	4b10      	ldr	r3, [pc, #64]	; (8009ccc <prvInsertBlockIntoFreeList+0x44>)
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4283      	cmp	r3, r0
 8009c92:	d3fb      	bcc.n	8009c8c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c94:	6854      	ldr	r4, [r2, #4]
 8009c96:	1911      	adds	r1, r2, r4
 8009c98:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c9a:	bf01      	itttt	eq
 8009c9c:	6841      	ldreq	r1, [r0, #4]
 8009c9e:	4610      	moveq	r0, r2
 8009ca0:	1909      	addeq	r1, r1, r4
 8009ca2:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ca4:	6844      	ldr	r4, [r0, #4]
 8009ca6:	1901      	adds	r1, r0, r4
 8009ca8:	428b      	cmp	r3, r1
 8009caa:	d10c      	bne.n	8009cc6 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009cac:	4908      	ldr	r1, [pc, #32]	; (8009cd0 <prvInsertBlockIntoFreeList+0x48>)
 8009cae:	6809      	ldr	r1, [r1, #0]
 8009cb0:	428b      	cmp	r3, r1
 8009cb2:	d003      	beq.n	8009cbc <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009cb4:	6859      	ldr	r1, [r3, #4]
 8009cb6:	4421      	add	r1, r4
 8009cb8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009cba:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cbc:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cbe:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cc0:	bf18      	it	ne
 8009cc2:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cc4:	bd10      	pop	{r4, pc}
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	e7f8      	b.n	8009cbc <prvInsertBlockIntoFreeList+0x34>
 8009cca:	bf00      	nop
 8009ccc:	20004590 	.word	0x20004590
 8009cd0:	20002d80 	.word	0x20002d80

08009cd4 <pvPortMalloc>:
{
 8009cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009cda:	f7fe ffa5 	bl	8008c28 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009cde:	4940      	ldr	r1, [pc, #256]	; (8009de0 <pvPortMalloc+0x10c>)
 8009ce0:	4d40      	ldr	r5, [pc, #256]	; (8009de4 <pvPortMalloc+0x110>)
 8009ce2:	680b      	ldr	r3, [r1, #0]
 8009ce4:	bb0b      	cbnz	r3, 8009d2a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8009ce6:	4a40      	ldr	r2, [pc, #256]	; (8009de8 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ce8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cea:	bf1f      	itttt	ne
 8009cec:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cee:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cf2:	f502 52c0 	addne.w	r2, r2, #6144	; 0x1800
 8009cf6:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cf8:	bf0c      	ite	eq
 8009cfa:	f44f 53c0 	moveq.w	r3, #6144	; 0x1800
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cfe:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 8009d00:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d02:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d04:	4e39      	ldr	r6, [pc, #228]	; (8009dec <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 8009d06:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d08:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8009d0c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d0e:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8009d10:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d14:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d16:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8009d1a:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d1c:	4b34      	ldr	r3, [pc, #208]	; (8009df0 <pvPortMalloc+0x11c>)
 8009d1e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d20:	4b34      	ldr	r3, [pc, #208]	; (8009df4 <pvPortMalloc+0x120>)
 8009d22:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d28:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d2a:	682e      	ldr	r6, [r5, #0]
 8009d2c:	4226      	tst	r6, r4
 8009d2e:	d151      	bne.n	8009dd4 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8009d30:	2c00      	cmp	r4, #0
 8009d32:	d042      	beq.n	8009dba <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8009d34:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d38:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d3a:	bf1c      	itt	ne
 8009d3c:	f023 0307 	bicne.w	r3, r3, #7
 8009d40:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d046      	beq.n	8009dd4 <pvPortMalloc+0x100>
 8009d46:	4f2b      	ldr	r7, [pc, #172]	; (8009df4 <pvPortMalloc+0x120>)
 8009d48:	683c      	ldr	r4, [r7, #0]
 8009d4a:	429c      	cmp	r4, r3
 8009d4c:	d342      	bcc.n	8009dd4 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8009d4e:	4a27      	ldr	r2, [pc, #156]	; (8009dec <pvPortMalloc+0x118>)
 8009d50:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d52:	6868      	ldr	r0, [r5, #4]
 8009d54:	4298      	cmp	r0, r3
 8009d56:	d204      	bcs.n	8009d62 <pvPortMalloc+0x8e>
 8009d58:	f8d5 c000 	ldr.w	ip, [r5]
 8009d5c:	f1bc 0f00 	cmp.w	ip, #0
 8009d60:	d115      	bne.n	8009d8e <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8009d62:	6809      	ldr	r1, [r1, #0]
 8009d64:	42a9      	cmp	r1, r5
 8009d66:	d035      	beq.n	8009dd4 <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d68:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d6a:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d6e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d70:	1ac2      	subs	r2, r0, r3
 8009d72:	2a10      	cmp	r2, #16
 8009d74:	d912      	bls.n	8009d9c <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d76:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d78:	0741      	lsls	r1, r0, #29
 8009d7a:	d00b      	beq.n	8009d94 <pvPortMalloc+0xc0>
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	e7fe      	b.n	8009d8c <pvPortMalloc+0xb8>
 8009d8e:	462a      	mov	r2, r5
 8009d90:	4665      	mov	r5, ip
 8009d92:	e7de      	b.n	8009d52 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d94:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d96:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d98:	f7ff ff76 	bl	8009c88 <prvInsertBlockIntoFreeList>
					pxBlock->pxNextFreeBlock = NULL;
 8009d9c:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d9e:	4914      	ldr	r1, [pc, #80]	; (8009df0 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009da0:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009da2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009da4:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009da6:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009da8:	ea46 0602 	orr.w	r6, r6, r2
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009dac:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009dae:	bf38      	it	cc
 8009db0:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009db2:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009db4:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8009db8:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8009dba:	f7fe ffd5 	bl	8008d68 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dbe:	0763      	lsls	r3, r4, #29
 8009dc0:	d00a      	beq.n	8009dd8 <pvPortMalloc+0x104>
 8009dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	e7fe      	b.n	8009dd2 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 8009dd4:	2400      	movs	r4, #0
 8009dd6:	e7f0      	b.n	8009dba <pvPortMalloc+0xe6>
}
 8009dd8:	4620      	mov	r0, r4
 8009dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dde:	bf00      	nop
 8009de0:	20002d80 	.word	0x20002d80
 8009de4:	20004584 	.word	0x20004584
 8009de8:	20002d84 	.word	0x20002d84
 8009dec:	20004590 	.word	0x20004590
 8009df0:	2000458c 	.word	0x2000458c
 8009df4:	20004588 	.word	0x20004588

08009df8 <vPortFree>:
{
 8009df8:	b510      	push	{r4, lr}
	if( pv != NULL )
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	b370      	cbz	r0, 8009e5c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009dfe:	4a18      	ldr	r2, [pc, #96]	; (8009e60 <vPortFree+0x68>)
 8009e00:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009e04:	6812      	ldr	r2, [r2, #0]
 8009e06:	4213      	tst	r3, r2
 8009e08:	d108      	bne.n	8009e1c <vPortFree+0x24>
 8009e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	e7fe      	b.n	8009e1a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e1c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009e20:	b141      	cbz	r1, 8009e34 <vPortFree+0x3c>
 8009e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	e7fe      	b.n	8009e32 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e34:	ea23 0302 	bic.w	r3, r3, r2
 8009e38:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009e3c:	f7fe fef4 	bl	8008c28 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e40:	4a08      	ldr	r2, [pc, #32]	; (8009e64 <vPortFree+0x6c>)
 8009e42:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009e46:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e48:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e4c:	440b      	add	r3, r1
 8009e4e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e50:	f7ff ff1a 	bl	8009c88 <prvInsertBlockIntoFreeList>
}
 8009e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8009e58:	f7fe bf86 	b.w	8008d68 <xTaskResumeAll>
}
 8009e5c:	bd10      	pop	{r4, pc}
 8009e5e:	bf00      	nop
 8009e60:	20004584 	.word	0x20004584
 8009e64:	20004588 	.word	0x20004588

08009e68 <malloc>:
 8009e68:	4b02      	ldr	r3, [pc, #8]	; (8009e74 <malloc+0xc>)
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	6818      	ldr	r0, [r3, #0]
 8009e6e:	f000 b823 	b.w	8009eb8 <_malloc_r>
 8009e72:	bf00      	nop
 8009e74:	20000068 	.word	0x20000068

08009e78 <sbrk_aligned>:
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	4e0e      	ldr	r6, [pc, #56]	; (8009eb4 <sbrk_aligned+0x3c>)
 8009e7c:	460c      	mov	r4, r1
 8009e7e:	6831      	ldr	r1, [r6, #0]
 8009e80:	4605      	mov	r5, r0
 8009e82:	b911      	cbnz	r1, 8009e8a <sbrk_aligned+0x12>
 8009e84:	f000 fb88 	bl	800a598 <_sbrk_r>
 8009e88:	6030      	str	r0, [r6, #0]
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f000 fb83 	bl	800a598 <_sbrk_r>
 8009e92:	1c43      	adds	r3, r0, #1
 8009e94:	d00a      	beq.n	8009eac <sbrk_aligned+0x34>
 8009e96:	1cc4      	adds	r4, r0, #3
 8009e98:	f024 0403 	bic.w	r4, r4, #3
 8009e9c:	42a0      	cmp	r0, r4
 8009e9e:	d007      	beq.n	8009eb0 <sbrk_aligned+0x38>
 8009ea0:	1a21      	subs	r1, r4, r0
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f000 fb78 	bl	800a598 <_sbrk_r>
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d101      	bne.n	8009eb0 <sbrk_aligned+0x38>
 8009eac:	f04f 34ff 	mov.w	r4, #4294967295
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}
 8009eb4:	2000459c 	.word	0x2000459c

08009eb8 <_malloc_r>:
 8009eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ebc:	1ccd      	adds	r5, r1, #3
 8009ebe:	f025 0503 	bic.w	r5, r5, #3
 8009ec2:	3508      	adds	r5, #8
 8009ec4:	2d0c      	cmp	r5, #12
 8009ec6:	bf38      	it	cc
 8009ec8:	250c      	movcc	r5, #12
 8009eca:	2d00      	cmp	r5, #0
 8009ecc:	4607      	mov	r7, r0
 8009ece:	db01      	blt.n	8009ed4 <_malloc_r+0x1c>
 8009ed0:	42a9      	cmp	r1, r5
 8009ed2:	d905      	bls.n	8009ee0 <_malloc_r+0x28>
 8009ed4:	230c      	movs	r3, #12
 8009ed6:	2600      	movs	r6, #0
 8009ed8:	603b      	str	r3, [r7, #0]
 8009eda:	4630      	mov	r0, r6
 8009edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ee0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009fb4 <_malloc_r+0xfc>
 8009ee4:	f000 f868 	bl	8009fb8 <__malloc_lock>
 8009ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8009eec:	461c      	mov	r4, r3
 8009eee:	bb5c      	cbnz	r4, 8009f48 <_malloc_r+0x90>
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	f7ff ffc0 	bl	8009e78 <sbrk_aligned>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	4604      	mov	r4, r0
 8009efc:	d155      	bne.n	8009faa <_malloc_r+0xf2>
 8009efe:	f8d8 4000 	ldr.w	r4, [r8]
 8009f02:	4626      	mov	r6, r4
 8009f04:	2e00      	cmp	r6, #0
 8009f06:	d145      	bne.n	8009f94 <_malloc_r+0xdc>
 8009f08:	2c00      	cmp	r4, #0
 8009f0a:	d048      	beq.n	8009f9e <_malloc_r+0xe6>
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4638      	mov	r0, r7
 8009f12:	eb04 0903 	add.w	r9, r4, r3
 8009f16:	f000 fb3f 	bl	800a598 <_sbrk_r>
 8009f1a:	4581      	cmp	r9, r0
 8009f1c:	d13f      	bne.n	8009f9e <_malloc_r+0xe6>
 8009f1e:	6821      	ldr	r1, [r4, #0]
 8009f20:	4638      	mov	r0, r7
 8009f22:	1a6d      	subs	r5, r5, r1
 8009f24:	4629      	mov	r1, r5
 8009f26:	f7ff ffa7 	bl	8009e78 <sbrk_aligned>
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d037      	beq.n	8009f9e <_malloc_r+0xe6>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	442b      	add	r3, r5
 8009f32:	6023      	str	r3, [r4, #0]
 8009f34:	f8d8 3000 	ldr.w	r3, [r8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d038      	beq.n	8009fae <_malloc_r+0xf6>
 8009f3c:	685a      	ldr	r2, [r3, #4]
 8009f3e:	42a2      	cmp	r2, r4
 8009f40:	d12b      	bne.n	8009f9a <_malloc_r+0xe2>
 8009f42:	2200      	movs	r2, #0
 8009f44:	605a      	str	r2, [r3, #4]
 8009f46:	e00f      	b.n	8009f68 <_malloc_r+0xb0>
 8009f48:	6822      	ldr	r2, [r4, #0]
 8009f4a:	1b52      	subs	r2, r2, r5
 8009f4c:	d41f      	bmi.n	8009f8e <_malloc_r+0xd6>
 8009f4e:	2a0b      	cmp	r2, #11
 8009f50:	d917      	bls.n	8009f82 <_malloc_r+0xca>
 8009f52:	1961      	adds	r1, r4, r5
 8009f54:	42a3      	cmp	r3, r4
 8009f56:	6025      	str	r5, [r4, #0]
 8009f58:	bf18      	it	ne
 8009f5a:	6059      	strne	r1, [r3, #4]
 8009f5c:	6863      	ldr	r3, [r4, #4]
 8009f5e:	bf08      	it	eq
 8009f60:	f8c8 1000 	streq.w	r1, [r8]
 8009f64:	5162      	str	r2, [r4, r5]
 8009f66:	604b      	str	r3, [r1, #4]
 8009f68:	4638      	mov	r0, r7
 8009f6a:	f104 060b 	add.w	r6, r4, #11
 8009f6e:	f000 f829 	bl	8009fc4 <__malloc_unlock>
 8009f72:	f026 0607 	bic.w	r6, r6, #7
 8009f76:	1d23      	adds	r3, r4, #4
 8009f78:	1af2      	subs	r2, r6, r3
 8009f7a:	d0ae      	beq.n	8009eda <_malloc_r+0x22>
 8009f7c:	1b9b      	subs	r3, r3, r6
 8009f7e:	50a3      	str	r3, [r4, r2]
 8009f80:	e7ab      	b.n	8009eda <_malloc_r+0x22>
 8009f82:	42a3      	cmp	r3, r4
 8009f84:	6862      	ldr	r2, [r4, #4]
 8009f86:	d1dd      	bne.n	8009f44 <_malloc_r+0x8c>
 8009f88:	f8c8 2000 	str.w	r2, [r8]
 8009f8c:	e7ec      	b.n	8009f68 <_malloc_r+0xb0>
 8009f8e:	4623      	mov	r3, r4
 8009f90:	6864      	ldr	r4, [r4, #4]
 8009f92:	e7ac      	b.n	8009eee <_malloc_r+0x36>
 8009f94:	4634      	mov	r4, r6
 8009f96:	6876      	ldr	r6, [r6, #4]
 8009f98:	e7b4      	b.n	8009f04 <_malloc_r+0x4c>
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	e7cc      	b.n	8009f38 <_malloc_r+0x80>
 8009f9e:	230c      	movs	r3, #12
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	603b      	str	r3, [r7, #0]
 8009fa4:	f000 f80e 	bl	8009fc4 <__malloc_unlock>
 8009fa8:	e797      	b.n	8009eda <_malloc_r+0x22>
 8009faa:	6025      	str	r5, [r4, #0]
 8009fac:	e7dc      	b.n	8009f68 <_malloc_r+0xb0>
 8009fae:	605b      	str	r3, [r3, #4]
 8009fb0:	deff      	udf	#255	; 0xff
 8009fb2:	bf00      	nop
 8009fb4:	20004598 	.word	0x20004598

08009fb8 <__malloc_lock>:
 8009fb8:	4801      	ldr	r0, [pc, #4]	; (8009fc0 <__malloc_lock+0x8>)
 8009fba:	f000 bb3a 	b.w	800a632 <__retarget_lock_acquire_recursive>
 8009fbe:	bf00      	nop
 8009fc0:	200046e0 	.word	0x200046e0

08009fc4 <__malloc_unlock>:
 8009fc4:	4801      	ldr	r0, [pc, #4]	; (8009fcc <__malloc_unlock+0x8>)
 8009fc6:	f000 bb35 	b.w	800a634 <__retarget_lock_release_recursive>
 8009fca:	bf00      	nop
 8009fcc:	200046e0 	.word	0x200046e0

08009fd0 <std>:
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	b510      	push	{r4, lr}
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	e9c0 3300 	strd	r3, r3, [r0]
 8009fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fde:	6083      	str	r3, [r0, #8]
 8009fe0:	8181      	strh	r1, [r0, #12]
 8009fe2:	6643      	str	r3, [r0, #100]	; 0x64
 8009fe4:	81c2      	strh	r2, [r0, #14]
 8009fe6:	6183      	str	r3, [r0, #24]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	2208      	movs	r2, #8
 8009fec:	305c      	adds	r0, #92	; 0x5c
 8009fee:	f000 fa2b 	bl	800a448 <memset>
 8009ff2:	4b0d      	ldr	r3, [pc, #52]	; (800a028 <std+0x58>)
 8009ff4:	6224      	str	r4, [r4, #32]
 8009ff6:	6263      	str	r3, [r4, #36]	; 0x24
 8009ff8:	4b0c      	ldr	r3, [pc, #48]	; (800a02c <std+0x5c>)
 8009ffa:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ffc:	4b0c      	ldr	r3, [pc, #48]	; (800a030 <std+0x60>)
 8009ffe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a000:	4b0c      	ldr	r3, [pc, #48]	; (800a034 <std+0x64>)
 800a002:	6323      	str	r3, [r4, #48]	; 0x30
 800a004:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <std+0x68>)
 800a006:	429c      	cmp	r4, r3
 800a008:	d006      	beq.n	800a018 <std+0x48>
 800a00a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a00e:	4294      	cmp	r4, r2
 800a010:	d002      	beq.n	800a018 <std+0x48>
 800a012:	33d0      	adds	r3, #208	; 0xd0
 800a014:	429c      	cmp	r4, r3
 800a016:	d105      	bne.n	800a024 <std+0x54>
 800a018:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a020:	f000 bb06 	b.w	800a630 <__retarget_lock_init_recursive>
 800a024:	bd10      	pop	{r4, pc}
 800a026:	bf00      	nop
 800a028:	0800a299 	.word	0x0800a299
 800a02c:	0800a2bb 	.word	0x0800a2bb
 800a030:	0800a2f3 	.word	0x0800a2f3
 800a034:	0800a317 	.word	0x0800a317
 800a038:	200045a0 	.word	0x200045a0

0800a03c <stdio_exit_handler>:
 800a03c:	4a02      	ldr	r2, [pc, #8]	; (800a048 <stdio_exit_handler+0xc>)
 800a03e:	4903      	ldr	r1, [pc, #12]	; (800a04c <stdio_exit_handler+0x10>)
 800a040:	4803      	ldr	r0, [pc, #12]	; (800a050 <stdio_exit_handler+0x14>)
 800a042:	f000 b869 	b.w	800a118 <_fwalk_sglue>
 800a046:	bf00      	nop
 800a048:	20000010 	.word	0x20000010
 800a04c:	0800b055 	.word	0x0800b055
 800a050:	2000001c 	.word	0x2000001c

0800a054 <cleanup_stdio>:
 800a054:	6841      	ldr	r1, [r0, #4]
 800a056:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <cleanup_stdio+0x34>)
 800a058:	b510      	push	{r4, lr}
 800a05a:	4299      	cmp	r1, r3
 800a05c:	4604      	mov	r4, r0
 800a05e:	d001      	beq.n	800a064 <cleanup_stdio+0x10>
 800a060:	f000 fff8 	bl	800b054 <_fflush_r>
 800a064:	68a1      	ldr	r1, [r4, #8]
 800a066:	4b09      	ldr	r3, [pc, #36]	; (800a08c <cleanup_stdio+0x38>)
 800a068:	4299      	cmp	r1, r3
 800a06a:	d002      	beq.n	800a072 <cleanup_stdio+0x1e>
 800a06c:	4620      	mov	r0, r4
 800a06e:	f000 fff1 	bl	800b054 <_fflush_r>
 800a072:	68e1      	ldr	r1, [r4, #12]
 800a074:	4b06      	ldr	r3, [pc, #24]	; (800a090 <cleanup_stdio+0x3c>)
 800a076:	4299      	cmp	r1, r3
 800a078:	d004      	beq.n	800a084 <cleanup_stdio+0x30>
 800a07a:	4620      	mov	r0, r4
 800a07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a080:	f000 bfe8 	b.w	800b054 <_fflush_r>
 800a084:	bd10      	pop	{r4, pc}
 800a086:	bf00      	nop
 800a088:	200045a0 	.word	0x200045a0
 800a08c:	20004608 	.word	0x20004608
 800a090:	20004670 	.word	0x20004670

0800a094 <global_stdio_init.part.0>:
 800a094:	b510      	push	{r4, lr}
 800a096:	4b0b      	ldr	r3, [pc, #44]	; (800a0c4 <global_stdio_init.part.0+0x30>)
 800a098:	4c0b      	ldr	r4, [pc, #44]	; (800a0c8 <global_stdio_init.part.0+0x34>)
 800a09a:	4a0c      	ldr	r2, [pc, #48]	; (800a0cc <global_stdio_init.part.0+0x38>)
 800a09c:	4620      	mov	r0, r4
 800a09e:	601a      	str	r2, [r3, #0]
 800a0a0:	2104      	movs	r1, #4
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f7ff ff94 	bl	8009fd0 <std>
 800a0a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	2109      	movs	r1, #9
 800a0b0:	f7ff ff8e 	bl	8009fd0 <std>
 800a0b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0be:	2112      	movs	r1, #18
 800a0c0:	f7ff bf86 	b.w	8009fd0 <std>
 800a0c4:	200046d8 	.word	0x200046d8
 800a0c8:	200045a0 	.word	0x200045a0
 800a0cc:	0800a03d 	.word	0x0800a03d

0800a0d0 <__sfp_lock_acquire>:
 800a0d0:	4801      	ldr	r0, [pc, #4]	; (800a0d8 <__sfp_lock_acquire+0x8>)
 800a0d2:	f000 baae 	b.w	800a632 <__retarget_lock_acquire_recursive>
 800a0d6:	bf00      	nop
 800a0d8:	200046e1 	.word	0x200046e1

0800a0dc <__sfp_lock_release>:
 800a0dc:	4801      	ldr	r0, [pc, #4]	; (800a0e4 <__sfp_lock_release+0x8>)
 800a0de:	f000 baa9 	b.w	800a634 <__retarget_lock_release_recursive>
 800a0e2:	bf00      	nop
 800a0e4:	200046e1 	.word	0x200046e1

0800a0e8 <__sinit>:
 800a0e8:	b510      	push	{r4, lr}
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	f7ff fff0 	bl	800a0d0 <__sfp_lock_acquire>
 800a0f0:	6a23      	ldr	r3, [r4, #32]
 800a0f2:	b11b      	cbz	r3, 800a0fc <__sinit+0x14>
 800a0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f8:	f7ff bff0 	b.w	800a0dc <__sfp_lock_release>
 800a0fc:	4b04      	ldr	r3, [pc, #16]	; (800a110 <__sinit+0x28>)
 800a0fe:	6223      	str	r3, [r4, #32]
 800a100:	4b04      	ldr	r3, [pc, #16]	; (800a114 <__sinit+0x2c>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1f5      	bne.n	800a0f4 <__sinit+0xc>
 800a108:	f7ff ffc4 	bl	800a094 <global_stdio_init.part.0>
 800a10c:	e7f2      	b.n	800a0f4 <__sinit+0xc>
 800a10e:	bf00      	nop
 800a110:	0800a055 	.word	0x0800a055
 800a114:	200046d8 	.word	0x200046d8

0800a118 <_fwalk_sglue>:
 800a118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a11c:	4607      	mov	r7, r0
 800a11e:	4688      	mov	r8, r1
 800a120:	4614      	mov	r4, r2
 800a122:	2600      	movs	r6, #0
 800a124:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a128:	f1b9 0901 	subs.w	r9, r9, #1
 800a12c:	d505      	bpl.n	800a13a <_fwalk_sglue+0x22>
 800a12e:	6824      	ldr	r4, [r4, #0]
 800a130:	2c00      	cmp	r4, #0
 800a132:	d1f7      	bne.n	800a124 <_fwalk_sglue+0xc>
 800a134:	4630      	mov	r0, r6
 800a136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a13a:	89ab      	ldrh	r3, [r5, #12]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d907      	bls.n	800a150 <_fwalk_sglue+0x38>
 800a140:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a144:	3301      	adds	r3, #1
 800a146:	d003      	beq.n	800a150 <_fwalk_sglue+0x38>
 800a148:	4629      	mov	r1, r5
 800a14a:	4638      	mov	r0, r7
 800a14c:	47c0      	blx	r8
 800a14e:	4306      	orrs	r6, r0
 800a150:	3568      	adds	r5, #104	; 0x68
 800a152:	e7e9      	b.n	800a128 <_fwalk_sglue+0x10>

0800a154 <iprintf>:
 800a154:	b40f      	push	{r0, r1, r2, r3}
 800a156:	b507      	push	{r0, r1, r2, lr}
 800a158:	4906      	ldr	r1, [pc, #24]	; (800a174 <iprintf+0x20>)
 800a15a:	ab04      	add	r3, sp, #16
 800a15c:	6808      	ldr	r0, [r1, #0]
 800a15e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a162:	6881      	ldr	r1, [r0, #8]
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	f000 fc45 	bl	800a9f4 <_vfiprintf_r>
 800a16a:	b003      	add	sp, #12
 800a16c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a170:	b004      	add	sp, #16
 800a172:	4770      	bx	lr
 800a174:	20000068 	.word	0x20000068

0800a178 <_puts_r>:
 800a178:	6a03      	ldr	r3, [r0, #32]
 800a17a:	b570      	push	{r4, r5, r6, lr}
 800a17c:	4605      	mov	r5, r0
 800a17e:	460e      	mov	r6, r1
 800a180:	6884      	ldr	r4, [r0, #8]
 800a182:	b90b      	cbnz	r3, 800a188 <_puts_r+0x10>
 800a184:	f7ff ffb0 	bl	800a0e8 <__sinit>
 800a188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a18a:	07db      	lsls	r3, r3, #31
 800a18c:	d405      	bmi.n	800a19a <_puts_r+0x22>
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	0598      	lsls	r0, r3, #22
 800a192:	d402      	bmi.n	800a19a <_puts_r+0x22>
 800a194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a196:	f000 fa4c 	bl	800a632 <__retarget_lock_acquire_recursive>
 800a19a:	89a3      	ldrh	r3, [r4, #12]
 800a19c:	0719      	lsls	r1, r3, #28
 800a19e:	d513      	bpl.n	800a1c8 <_puts_r+0x50>
 800a1a0:	6923      	ldr	r3, [r4, #16]
 800a1a2:	b18b      	cbz	r3, 800a1c8 <_puts_r+0x50>
 800a1a4:	3e01      	subs	r6, #1
 800a1a6:	68a3      	ldr	r3, [r4, #8]
 800a1a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	60a3      	str	r3, [r4, #8]
 800a1b0:	b9e9      	cbnz	r1, 800a1ee <_puts_r+0x76>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	da2e      	bge.n	800a214 <_puts_r+0x9c>
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	210a      	movs	r1, #10
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	f000 f8af 	bl	800a31e <__swbuf_r>
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d007      	beq.n	800a1d4 <_puts_r+0x5c>
 800a1c4:	250a      	movs	r5, #10
 800a1c6:	e007      	b.n	800a1d8 <_puts_r+0x60>
 800a1c8:	4621      	mov	r1, r4
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	f000 f8e4 	bl	800a398 <__swsetup_r>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d0e7      	beq.n	800a1a4 <_puts_r+0x2c>
 800a1d4:	f04f 35ff 	mov.w	r5, #4294967295
 800a1d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1da:	07da      	lsls	r2, r3, #31
 800a1dc:	d405      	bmi.n	800a1ea <_puts_r+0x72>
 800a1de:	89a3      	ldrh	r3, [r4, #12]
 800a1e0:	059b      	lsls	r3, r3, #22
 800a1e2:	d402      	bmi.n	800a1ea <_puts_r+0x72>
 800a1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1e6:	f000 fa25 	bl	800a634 <__retarget_lock_release_recursive>
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	bd70      	pop	{r4, r5, r6, pc}
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	da04      	bge.n	800a1fc <_puts_r+0x84>
 800a1f2:	69a2      	ldr	r2, [r4, #24]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	dc06      	bgt.n	800a206 <_puts_r+0x8e>
 800a1f8:	290a      	cmp	r1, #10
 800a1fa:	d004      	beq.n	800a206 <_puts_r+0x8e>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	1c5a      	adds	r2, r3, #1
 800a200:	6022      	str	r2, [r4, #0]
 800a202:	7019      	strb	r1, [r3, #0]
 800a204:	e7cf      	b.n	800a1a6 <_puts_r+0x2e>
 800a206:	4622      	mov	r2, r4
 800a208:	4628      	mov	r0, r5
 800a20a:	f000 f888 	bl	800a31e <__swbuf_r>
 800a20e:	3001      	adds	r0, #1
 800a210:	d1c9      	bne.n	800a1a6 <_puts_r+0x2e>
 800a212:	e7df      	b.n	800a1d4 <_puts_r+0x5c>
 800a214:	250a      	movs	r5, #10
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	1c5a      	adds	r2, r3, #1
 800a21a:	6022      	str	r2, [r4, #0]
 800a21c:	701d      	strb	r5, [r3, #0]
 800a21e:	e7db      	b.n	800a1d8 <_puts_r+0x60>

0800a220 <puts>:
 800a220:	4b02      	ldr	r3, [pc, #8]	; (800a22c <puts+0xc>)
 800a222:	4601      	mov	r1, r0
 800a224:	6818      	ldr	r0, [r3, #0]
 800a226:	f7ff bfa7 	b.w	800a178 <_puts_r>
 800a22a:	bf00      	nop
 800a22c:	20000068 	.word	0x20000068

0800a230 <sniprintf>:
 800a230:	b40c      	push	{r2, r3}
 800a232:	b530      	push	{r4, r5, lr}
 800a234:	4b17      	ldr	r3, [pc, #92]	; (800a294 <sniprintf+0x64>)
 800a236:	1e0c      	subs	r4, r1, #0
 800a238:	681d      	ldr	r5, [r3, #0]
 800a23a:	b09d      	sub	sp, #116	; 0x74
 800a23c:	da08      	bge.n	800a250 <sniprintf+0x20>
 800a23e:	238b      	movs	r3, #139	; 0x8b
 800a240:	f04f 30ff 	mov.w	r0, #4294967295
 800a244:	602b      	str	r3, [r5, #0]
 800a246:	b01d      	add	sp, #116	; 0x74
 800a248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a24c:	b002      	add	sp, #8
 800a24e:	4770      	bx	lr
 800a250:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a254:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a258:	bf0c      	ite	eq
 800a25a:	4623      	moveq	r3, r4
 800a25c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a260:	9304      	str	r3, [sp, #16]
 800a262:	9307      	str	r3, [sp, #28]
 800a264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a268:	9002      	str	r0, [sp, #8]
 800a26a:	9006      	str	r0, [sp, #24]
 800a26c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a270:	4628      	mov	r0, r5
 800a272:	ab21      	add	r3, sp, #132	; 0x84
 800a274:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a276:	a902      	add	r1, sp, #8
 800a278:	9301      	str	r3, [sp, #4]
 800a27a:	f000 fa95 	bl	800a7a8 <_svfiprintf_r>
 800a27e:	1c43      	adds	r3, r0, #1
 800a280:	bfbc      	itt	lt
 800a282:	238b      	movlt	r3, #139	; 0x8b
 800a284:	602b      	strlt	r3, [r5, #0]
 800a286:	2c00      	cmp	r4, #0
 800a288:	d0dd      	beq.n	800a246 <sniprintf+0x16>
 800a28a:	2200      	movs	r2, #0
 800a28c:	9b02      	ldr	r3, [sp, #8]
 800a28e:	701a      	strb	r2, [r3, #0]
 800a290:	e7d9      	b.n	800a246 <sniprintf+0x16>
 800a292:	bf00      	nop
 800a294:	20000068 	.word	0x20000068

0800a298 <__sread>:
 800a298:	b510      	push	{r4, lr}
 800a29a:	460c      	mov	r4, r1
 800a29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a0:	f000 f968 	bl	800a574 <_read_r>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	bfab      	itete	ge
 800a2a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a2ac:	181b      	addge	r3, r3, r0
 800a2ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2b2:	bfac      	ite	ge
 800a2b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2b6:	81a3      	strhlt	r3, [r4, #12]
 800a2b8:	bd10      	pop	{r4, pc}

0800a2ba <__swrite>:
 800a2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2be:	461f      	mov	r7, r3
 800a2c0:	898b      	ldrh	r3, [r1, #12]
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	05db      	lsls	r3, r3, #23
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	4616      	mov	r6, r2
 800a2ca:	d505      	bpl.n	800a2d8 <__swrite+0x1e>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d4:	f000 f93c 	bl	800a550 <_lseek_r>
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	4632      	mov	r2, r6
 800a2dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2e0:	81a3      	strh	r3, [r4, #12]
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	463b      	mov	r3, r7
 800a2e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ee:	f000 b963 	b.w	800a5b8 <_write_r>

0800a2f2 <__sseek>:
 800a2f2:	b510      	push	{r4, lr}
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fa:	f000 f929 	bl	800a550 <_lseek_r>
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	bf15      	itete	ne
 800a304:	6560      	strne	r0, [r4, #84]	; 0x54
 800a306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a30a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a30e:	81a3      	strheq	r3, [r4, #12]
 800a310:	bf18      	it	ne
 800a312:	81a3      	strhne	r3, [r4, #12]
 800a314:	bd10      	pop	{r4, pc}

0800a316 <__sclose>:
 800a316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31a:	f000 b8b3 	b.w	800a484 <_close_r>

0800a31e <__swbuf_r>:
 800a31e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a320:	460e      	mov	r6, r1
 800a322:	4614      	mov	r4, r2
 800a324:	4605      	mov	r5, r0
 800a326:	b118      	cbz	r0, 800a330 <__swbuf_r+0x12>
 800a328:	6a03      	ldr	r3, [r0, #32]
 800a32a:	b90b      	cbnz	r3, 800a330 <__swbuf_r+0x12>
 800a32c:	f7ff fedc 	bl	800a0e8 <__sinit>
 800a330:	69a3      	ldr	r3, [r4, #24]
 800a332:	60a3      	str	r3, [r4, #8]
 800a334:	89a3      	ldrh	r3, [r4, #12]
 800a336:	071a      	lsls	r2, r3, #28
 800a338:	d525      	bpl.n	800a386 <__swbuf_r+0x68>
 800a33a:	6923      	ldr	r3, [r4, #16]
 800a33c:	b31b      	cbz	r3, 800a386 <__swbuf_r+0x68>
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	6922      	ldr	r2, [r4, #16]
 800a342:	b2f6      	uxtb	r6, r6
 800a344:	1a98      	subs	r0, r3, r2
 800a346:	6963      	ldr	r3, [r4, #20]
 800a348:	4637      	mov	r7, r6
 800a34a:	4283      	cmp	r3, r0
 800a34c:	dc04      	bgt.n	800a358 <__swbuf_r+0x3a>
 800a34e:	4621      	mov	r1, r4
 800a350:	4628      	mov	r0, r5
 800a352:	f000 fe7f 	bl	800b054 <_fflush_r>
 800a356:	b9e0      	cbnz	r0, 800a392 <__swbuf_r+0x74>
 800a358:	68a3      	ldr	r3, [r4, #8]
 800a35a:	3b01      	subs	r3, #1
 800a35c:	60a3      	str	r3, [r4, #8]
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	1c5a      	adds	r2, r3, #1
 800a362:	6022      	str	r2, [r4, #0]
 800a364:	701e      	strb	r6, [r3, #0]
 800a366:	6962      	ldr	r2, [r4, #20]
 800a368:	1c43      	adds	r3, r0, #1
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d004      	beq.n	800a378 <__swbuf_r+0x5a>
 800a36e:	89a3      	ldrh	r3, [r4, #12]
 800a370:	07db      	lsls	r3, r3, #31
 800a372:	d506      	bpl.n	800a382 <__swbuf_r+0x64>
 800a374:	2e0a      	cmp	r6, #10
 800a376:	d104      	bne.n	800a382 <__swbuf_r+0x64>
 800a378:	4621      	mov	r1, r4
 800a37a:	4628      	mov	r0, r5
 800a37c:	f000 fe6a 	bl	800b054 <_fflush_r>
 800a380:	b938      	cbnz	r0, 800a392 <__swbuf_r+0x74>
 800a382:	4638      	mov	r0, r7
 800a384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a386:	4621      	mov	r1, r4
 800a388:	4628      	mov	r0, r5
 800a38a:	f000 f805 	bl	800a398 <__swsetup_r>
 800a38e:	2800      	cmp	r0, #0
 800a390:	d0d5      	beq.n	800a33e <__swbuf_r+0x20>
 800a392:	f04f 37ff 	mov.w	r7, #4294967295
 800a396:	e7f4      	b.n	800a382 <__swbuf_r+0x64>

0800a398 <__swsetup_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4b2a      	ldr	r3, [pc, #168]	; (800a444 <__swsetup_r+0xac>)
 800a39c:	4605      	mov	r5, r0
 800a39e:	6818      	ldr	r0, [r3, #0]
 800a3a0:	460c      	mov	r4, r1
 800a3a2:	b118      	cbz	r0, 800a3ac <__swsetup_r+0x14>
 800a3a4:	6a03      	ldr	r3, [r0, #32]
 800a3a6:	b90b      	cbnz	r3, 800a3ac <__swsetup_r+0x14>
 800a3a8:	f7ff fe9e 	bl	800a0e8 <__sinit>
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3b2:	0718      	lsls	r0, r3, #28
 800a3b4:	d422      	bmi.n	800a3fc <__swsetup_r+0x64>
 800a3b6:	06d9      	lsls	r1, r3, #27
 800a3b8:	d407      	bmi.n	800a3ca <__swsetup_r+0x32>
 800a3ba:	2309      	movs	r3, #9
 800a3bc:	602b      	str	r3, [r5, #0]
 800a3be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c6:	81a3      	strh	r3, [r4, #12]
 800a3c8:	e034      	b.n	800a434 <__swsetup_r+0x9c>
 800a3ca:	0758      	lsls	r0, r3, #29
 800a3cc:	d512      	bpl.n	800a3f4 <__swsetup_r+0x5c>
 800a3ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3d0:	b141      	cbz	r1, 800a3e4 <__swsetup_r+0x4c>
 800a3d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3d6:	4299      	cmp	r1, r3
 800a3d8:	d002      	beq.n	800a3e0 <__swsetup_r+0x48>
 800a3da:	4628      	mov	r0, r5
 800a3dc:	f000 f942 	bl	800a664 <_free_r>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	6363      	str	r3, [r4, #52]	; 0x34
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3ea:	81a3      	strh	r3, [r4, #12]
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	6063      	str	r3, [r4, #4]
 800a3f0:	6923      	ldr	r3, [r4, #16]
 800a3f2:	6023      	str	r3, [r4, #0]
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	f043 0308 	orr.w	r3, r3, #8
 800a3fa:	81a3      	strh	r3, [r4, #12]
 800a3fc:	6923      	ldr	r3, [r4, #16]
 800a3fe:	b94b      	cbnz	r3, 800a414 <__swsetup_r+0x7c>
 800a400:	89a3      	ldrh	r3, [r4, #12]
 800a402:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a40a:	d003      	beq.n	800a414 <__swsetup_r+0x7c>
 800a40c:	4621      	mov	r1, r4
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 fe6d 	bl	800b0ee <__smakebuf_r>
 800a414:	89a0      	ldrh	r0, [r4, #12]
 800a416:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a41a:	f010 0301 	ands.w	r3, r0, #1
 800a41e:	d00a      	beq.n	800a436 <__swsetup_r+0x9e>
 800a420:	2300      	movs	r3, #0
 800a422:	60a3      	str	r3, [r4, #8]
 800a424:	6963      	ldr	r3, [r4, #20]
 800a426:	425b      	negs	r3, r3
 800a428:	61a3      	str	r3, [r4, #24]
 800a42a:	6923      	ldr	r3, [r4, #16]
 800a42c:	b943      	cbnz	r3, 800a440 <__swsetup_r+0xa8>
 800a42e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a432:	d1c4      	bne.n	800a3be <__swsetup_r+0x26>
 800a434:	bd38      	pop	{r3, r4, r5, pc}
 800a436:	0781      	lsls	r1, r0, #30
 800a438:	bf58      	it	pl
 800a43a:	6963      	ldrpl	r3, [r4, #20]
 800a43c:	60a3      	str	r3, [r4, #8]
 800a43e:	e7f4      	b.n	800a42a <__swsetup_r+0x92>
 800a440:	2000      	movs	r0, #0
 800a442:	e7f7      	b.n	800a434 <__swsetup_r+0x9c>
 800a444:	20000068 	.word	0x20000068

0800a448 <memset>:
 800a448:	4603      	mov	r3, r0
 800a44a:	4402      	add	r2, r0
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d100      	bne.n	800a452 <memset+0xa>
 800a450:	4770      	bx	lr
 800a452:	f803 1b01 	strb.w	r1, [r3], #1
 800a456:	e7f9      	b.n	800a44c <memset+0x4>

0800a458 <strstr>:
 800a458:	780a      	ldrb	r2, [r1, #0]
 800a45a:	b570      	push	{r4, r5, r6, lr}
 800a45c:	b96a      	cbnz	r2, 800a47a <strstr+0x22>
 800a45e:	bd70      	pop	{r4, r5, r6, pc}
 800a460:	429a      	cmp	r2, r3
 800a462:	d109      	bne.n	800a478 <strstr+0x20>
 800a464:	460c      	mov	r4, r1
 800a466:	4605      	mov	r5, r0
 800a468:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0f6      	beq.n	800a45e <strstr+0x6>
 800a470:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a474:	429e      	cmp	r6, r3
 800a476:	d0f7      	beq.n	800a468 <strstr+0x10>
 800a478:	3001      	adds	r0, #1
 800a47a:	7803      	ldrb	r3, [r0, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1ef      	bne.n	800a460 <strstr+0x8>
 800a480:	4618      	mov	r0, r3
 800a482:	e7ec      	b.n	800a45e <strstr+0x6>

0800a484 <_close_r>:
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	2300      	movs	r3, #0
 800a488:	4d05      	ldr	r5, [pc, #20]	; (800a4a0 <_close_r+0x1c>)
 800a48a:	4604      	mov	r4, r0
 800a48c:	4608      	mov	r0, r1
 800a48e:	602b      	str	r3, [r5, #0]
 800a490:	f7f9 f8ca 	bl	8003628 <_close>
 800a494:	1c43      	adds	r3, r0, #1
 800a496:	d102      	bne.n	800a49e <_close_r+0x1a>
 800a498:	682b      	ldr	r3, [r5, #0]
 800a49a:	b103      	cbz	r3, 800a49e <_close_r+0x1a>
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	200046dc 	.word	0x200046dc

0800a4a4 <_reclaim_reent>:
 800a4a4:	4b29      	ldr	r3, [pc, #164]	; (800a54c <_reclaim_reent+0xa8>)
 800a4a6:	b570      	push	{r4, r5, r6, lr}
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	4283      	cmp	r3, r0
 800a4ae:	d04b      	beq.n	800a548 <_reclaim_reent+0xa4>
 800a4b0:	69c3      	ldr	r3, [r0, #28]
 800a4b2:	b143      	cbz	r3, 800a4c6 <_reclaim_reent+0x22>
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d144      	bne.n	800a544 <_reclaim_reent+0xa0>
 800a4ba:	69e3      	ldr	r3, [r4, #28]
 800a4bc:	6819      	ldr	r1, [r3, #0]
 800a4be:	b111      	cbz	r1, 800a4c6 <_reclaim_reent+0x22>
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 f8cf 	bl	800a664 <_free_r>
 800a4c6:	6961      	ldr	r1, [r4, #20]
 800a4c8:	b111      	cbz	r1, 800a4d0 <_reclaim_reent+0x2c>
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 f8ca 	bl	800a664 <_free_r>
 800a4d0:	69e1      	ldr	r1, [r4, #28]
 800a4d2:	b111      	cbz	r1, 800a4da <_reclaim_reent+0x36>
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f000 f8c5 	bl	800a664 <_free_r>
 800a4da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a4dc:	b111      	cbz	r1, 800a4e4 <_reclaim_reent+0x40>
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f000 f8c0 	bl	800a664 <_free_r>
 800a4e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4e6:	b111      	cbz	r1, 800a4ee <_reclaim_reent+0x4a>
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f000 f8bb 	bl	800a664 <_free_r>
 800a4ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a4f0:	b111      	cbz	r1, 800a4f8 <_reclaim_reent+0x54>
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f000 f8b6 	bl	800a664 <_free_r>
 800a4f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a4fa:	b111      	cbz	r1, 800a502 <_reclaim_reent+0x5e>
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f000 f8b1 	bl	800a664 <_free_r>
 800a502:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a504:	b111      	cbz	r1, 800a50c <_reclaim_reent+0x68>
 800a506:	4620      	mov	r0, r4
 800a508:	f000 f8ac 	bl	800a664 <_free_r>
 800a50c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a50e:	b111      	cbz	r1, 800a516 <_reclaim_reent+0x72>
 800a510:	4620      	mov	r0, r4
 800a512:	f000 f8a7 	bl	800a664 <_free_r>
 800a516:	6a23      	ldr	r3, [r4, #32]
 800a518:	b1b3      	cbz	r3, 800a548 <_reclaim_reent+0xa4>
 800a51a:	4620      	mov	r0, r4
 800a51c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a520:	4718      	bx	r3
 800a522:	5949      	ldr	r1, [r1, r5]
 800a524:	b941      	cbnz	r1, 800a538 <_reclaim_reent+0x94>
 800a526:	3504      	adds	r5, #4
 800a528:	69e3      	ldr	r3, [r4, #28]
 800a52a:	2d80      	cmp	r5, #128	; 0x80
 800a52c:	68d9      	ldr	r1, [r3, #12]
 800a52e:	d1f8      	bne.n	800a522 <_reclaim_reent+0x7e>
 800a530:	4620      	mov	r0, r4
 800a532:	f000 f897 	bl	800a664 <_free_r>
 800a536:	e7c0      	b.n	800a4ba <_reclaim_reent+0x16>
 800a538:	680e      	ldr	r6, [r1, #0]
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 f892 	bl	800a664 <_free_r>
 800a540:	4631      	mov	r1, r6
 800a542:	e7ef      	b.n	800a524 <_reclaim_reent+0x80>
 800a544:	2500      	movs	r5, #0
 800a546:	e7ef      	b.n	800a528 <_reclaim_reent+0x84>
 800a548:	bd70      	pop	{r4, r5, r6, pc}
 800a54a:	bf00      	nop
 800a54c:	20000068 	.word	0x20000068

0800a550 <_lseek_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4604      	mov	r4, r0
 800a554:	4608      	mov	r0, r1
 800a556:	4611      	mov	r1, r2
 800a558:	2200      	movs	r2, #0
 800a55a:	4d05      	ldr	r5, [pc, #20]	; (800a570 <_lseek_r+0x20>)
 800a55c:	602a      	str	r2, [r5, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	f7f9 f86c 	bl	800363c <_lseek>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_lseek_r+0x1e>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_lseek_r+0x1e>
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	200046dc 	.word	0x200046dc

0800a574 <_read_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	4604      	mov	r4, r0
 800a578:	4608      	mov	r0, r1
 800a57a:	4611      	mov	r1, r2
 800a57c:	2200      	movs	r2, #0
 800a57e:	4d05      	ldr	r5, [pc, #20]	; (800a594 <_read_r+0x20>)
 800a580:	602a      	str	r2, [r5, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	f7f9 f834 	bl	80035f0 <_read>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d102      	bne.n	800a592 <_read_r+0x1e>
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	b103      	cbz	r3, 800a592 <_read_r+0x1e>
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	bd38      	pop	{r3, r4, r5, pc}
 800a594:	200046dc 	.word	0x200046dc

0800a598 <_sbrk_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	2300      	movs	r3, #0
 800a59c:	4d05      	ldr	r5, [pc, #20]	; (800a5b4 <_sbrk_r+0x1c>)
 800a59e:	4604      	mov	r4, r0
 800a5a0:	4608      	mov	r0, r1
 800a5a2:	602b      	str	r3, [r5, #0]
 800a5a4:	f7f9 f84c 	bl	8003640 <_sbrk>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	d102      	bne.n	800a5b2 <_sbrk_r+0x1a>
 800a5ac:	682b      	ldr	r3, [r5, #0]
 800a5ae:	b103      	cbz	r3, 800a5b2 <_sbrk_r+0x1a>
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	bd38      	pop	{r3, r4, r5, pc}
 800a5b4:	200046dc 	.word	0x200046dc

0800a5b8 <_write_r>:
 800a5b8:	b538      	push	{r3, r4, r5, lr}
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	4611      	mov	r1, r2
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	4d05      	ldr	r5, [pc, #20]	; (800a5d8 <_write_r+0x20>)
 800a5c4:	602a      	str	r2, [r5, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	f7f9 f820 	bl	800360c <_write>
 800a5cc:	1c43      	adds	r3, r0, #1
 800a5ce:	d102      	bne.n	800a5d6 <_write_r+0x1e>
 800a5d0:	682b      	ldr	r3, [r5, #0]
 800a5d2:	b103      	cbz	r3, 800a5d6 <_write_r+0x1e>
 800a5d4:	6023      	str	r3, [r4, #0]
 800a5d6:	bd38      	pop	{r3, r4, r5, pc}
 800a5d8:	200046dc 	.word	0x200046dc

0800a5dc <__errno>:
 800a5dc:	4b01      	ldr	r3, [pc, #4]	; (800a5e4 <__errno+0x8>)
 800a5de:	6818      	ldr	r0, [r3, #0]
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	20000068 	.word	0x20000068

0800a5e8 <__libc_init_array>:
 800a5e8:	b570      	push	{r4, r5, r6, lr}
 800a5ea:	2600      	movs	r6, #0
 800a5ec:	4d0c      	ldr	r5, [pc, #48]	; (800a620 <__libc_init_array+0x38>)
 800a5ee:	4c0d      	ldr	r4, [pc, #52]	; (800a624 <__libc_init_array+0x3c>)
 800a5f0:	1b64      	subs	r4, r4, r5
 800a5f2:	10a4      	asrs	r4, r4, #2
 800a5f4:	42a6      	cmp	r6, r4
 800a5f6:	d109      	bne.n	800a60c <__libc_init_array+0x24>
 800a5f8:	f000 fe38 	bl	800b26c <_init>
 800a5fc:	2600      	movs	r6, #0
 800a5fe:	4d0a      	ldr	r5, [pc, #40]	; (800a628 <__libc_init_array+0x40>)
 800a600:	4c0a      	ldr	r4, [pc, #40]	; (800a62c <__libc_init_array+0x44>)
 800a602:	1b64      	subs	r4, r4, r5
 800a604:	10a4      	asrs	r4, r4, #2
 800a606:	42a6      	cmp	r6, r4
 800a608:	d105      	bne.n	800a616 <__libc_init_array+0x2e>
 800a60a:	bd70      	pop	{r4, r5, r6, pc}
 800a60c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a610:	4798      	blx	r3
 800a612:	3601      	adds	r6, #1
 800a614:	e7ee      	b.n	800a5f4 <__libc_init_array+0xc>
 800a616:	f855 3b04 	ldr.w	r3, [r5], #4
 800a61a:	4798      	blx	r3
 800a61c:	3601      	adds	r6, #1
 800a61e:	e7f2      	b.n	800a606 <__libc_init_array+0x1e>
 800a620:	0800b950 	.word	0x0800b950
 800a624:	0800b950 	.word	0x0800b950
 800a628:	0800b950 	.word	0x0800b950
 800a62c:	0800b954 	.word	0x0800b954

0800a630 <__retarget_lock_init_recursive>:
 800a630:	4770      	bx	lr

0800a632 <__retarget_lock_acquire_recursive>:
 800a632:	4770      	bx	lr

0800a634 <__retarget_lock_release_recursive>:
 800a634:	4770      	bx	lr

0800a636 <strcpy>:
 800a636:	4603      	mov	r3, r0
 800a638:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a63c:	f803 2b01 	strb.w	r2, [r3], #1
 800a640:	2a00      	cmp	r2, #0
 800a642:	d1f9      	bne.n	800a638 <strcpy+0x2>
 800a644:	4770      	bx	lr

0800a646 <memcpy>:
 800a646:	440a      	add	r2, r1
 800a648:	4291      	cmp	r1, r2
 800a64a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a64e:	d100      	bne.n	800a652 <memcpy+0xc>
 800a650:	4770      	bx	lr
 800a652:	b510      	push	{r4, lr}
 800a654:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a658:	4291      	cmp	r1, r2
 800a65a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a65e:	d1f9      	bne.n	800a654 <memcpy+0xe>
 800a660:	bd10      	pop	{r4, pc}
	...

0800a664 <_free_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4605      	mov	r5, r0
 800a668:	2900      	cmp	r1, #0
 800a66a:	d040      	beq.n	800a6ee <_free_r+0x8a>
 800a66c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a670:	1f0c      	subs	r4, r1, #4
 800a672:	2b00      	cmp	r3, #0
 800a674:	bfb8      	it	lt
 800a676:	18e4      	addlt	r4, r4, r3
 800a678:	f7ff fc9e 	bl	8009fb8 <__malloc_lock>
 800a67c:	4a1c      	ldr	r2, [pc, #112]	; (800a6f0 <_free_r+0x8c>)
 800a67e:	6813      	ldr	r3, [r2, #0]
 800a680:	b933      	cbnz	r3, 800a690 <_free_r+0x2c>
 800a682:	6063      	str	r3, [r4, #4]
 800a684:	6014      	str	r4, [r2, #0]
 800a686:	4628      	mov	r0, r5
 800a688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a68c:	f7ff bc9a 	b.w	8009fc4 <__malloc_unlock>
 800a690:	42a3      	cmp	r3, r4
 800a692:	d908      	bls.n	800a6a6 <_free_r+0x42>
 800a694:	6820      	ldr	r0, [r4, #0]
 800a696:	1821      	adds	r1, r4, r0
 800a698:	428b      	cmp	r3, r1
 800a69a:	bf01      	itttt	eq
 800a69c:	6819      	ldreq	r1, [r3, #0]
 800a69e:	685b      	ldreq	r3, [r3, #4]
 800a6a0:	1809      	addeq	r1, r1, r0
 800a6a2:	6021      	streq	r1, [r4, #0]
 800a6a4:	e7ed      	b.n	800a682 <_free_r+0x1e>
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	b10b      	cbz	r3, 800a6b0 <_free_r+0x4c>
 800a6ac:	42a3      	cmp	r3, r4
 800a6ae:	d9fa      	bls.n	800a6a6 <_free_r+0x42>
 800a6b0:	6811      	ldr	r1, [r2, #0]
 800a6b2:	1850      	adds	r0, r2, r1
 800a6b4:	42a0      	cmp	r0, r4
 800a6b6:	d10b      	bne.n	800a6d0 <_free_r+0x6c>
 800a6b8:	6820      	ldr	r0, [r4, #0]
 800a6ba:	4401      	add	r1, r0
 800a6bc:	1850      	adds	r0, r2, r1
 800a6be:	4283      	cmp	r3, r0
 800a6c0:	6011      	str	r1, [r2, #0]
 800a6c2:	d1e0      	bne.n	800a686 <_free_r+0x22>
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	4408      	add	r0, r1
 800a6ca:	6010      	str	r0, [r2, #0]
 800a6cc:	6053      	str	r3, [r2, #4]
 800a6ce:	e7da      	b.n	800a686 <_free_r+0x22>
 800a6d0:	d902      	bls.n	800a6d8 <_free_r+0x74>
 800a6d2:	230c      	movs	r3, #12
 800a6d4:	602b      	str	r3, [r5, #0]
 800a6d6:	e7d6      	b.n	800a686 <_free_r+0x22>
 800a6d8:	6820      	ldr	r0, [r4, #0]
 800a6da:	1821      	adds	r1, r4, r0
 800a6dc:	428b      	cmp	r3, r1
 800a6de:	bf01      	itttt	eq
 800a6e0:	6819      	ldreq	r1, [r3, #0]
 800a6e2:	685b      	ldreq	r3, [r3, #4]
 800a6e4:	1809      	addeq	r1, r1, r0
 800a6e6:	6021      	streq	r1, [r4, #0]
 800a6e8:	6063      	str	r3, [r4, #4]
 800a6ea:	6054      	str	r4, [r2, #4]
 800a6ec:	e7cb      	b.n	800a686 <_free_r+0x22>
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	20004598 	.word	0x20004598

0800a6f4 <__ssputs_r>:
 800a6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f8:	461f      	mov	r7, r3
 800a6fa:	688e      	ldr	r6, [r1, #8]
 800a6fc:	4682      	mov	sl, r0
 800a6fe:	42be      	cmp	r6, r7
 800a700:	460c      	mov	r4, r1
 800a702:	4690      	mov	r8, r2
 800a704:	680b      	ldr	r3, [r1, #0]
 800a706:	d82c      	bhi.n	800a762 <__ssputs_r+0x6e>
 800a708:	898a      	ldrh	r2, [r1, #12]
 800a70a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a70e:	d026      	beq.n	800a75e <__ssputs_r+0x6a>
 800a710:	6965      	ldr	r5, [r4, #20]
 800a712:	6909      	ldr	r1, [r1, #16]
 800a714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a718:	eba3 0901 	sub.w	r9, r3, r1
 800a71c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a720:	1c7b      	adds	r3, r7, #1
 800a722:	444b      	add	r3, r9
 800a724:	106d      	asrs	r5, r5, #1
 800a726:	429d      	cmp	r5, r3
 800a728:	bf38      	it	cc
 800a72a:	461d      	movcc	r5, r3
 800a72c:	0553      	lsls	r3, r2, #21
 800a72e:	d527      	bpl.n	800a780 <__ssputs_r+0x8c>
 800a730:	4629      	mov	r1, r5
 800a732:	f7ff fbc1 	bl	8009eb8 <_malloc_r>
 800a736:	4606      	mov	r6, r0
 800a738:	b360      	cbz	r0, 800a794 <__ssputs_r+0xa0>
 800a73a:	464a      	mov	r2, r9
 800a73c:	6921      	ldr	r1, [r4, #16]
 800a73e:	f7ff ff82 	bl	800a646 <memcpy>
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a74c:	81a3      	strh	r3, [r4, #12]
 800a74e:	6126      	str	r6, [r4, #16]
 800a750:	444e      	add	r6, r9
 800a752:	6026      	str	r6, [r4, #0]
 800a754:	463e      	mov	r6, r7
 800a756:	6165      	str	r5, [r4, #20]
 800a758:	eba5 0509 	sub.w	r5, r5, r9
 800a75c:	60a5      	str	r5, [r4, #8]
 800a75e:	42be      	cmp	r6, r7
 800a760:	d900      	bls.n	800a764 <__ssputs_r+0x70>
 800a762:	463e      	mov	r6, r7
 800a764:	4632      	mov	r2, r6
 800a766:	4641      	mov	r1, r8
 800a768:	6820      	ldr	r0, [r4, #0]
 800a76a:	f000 fcfc 	bl	800b166 <memmove>
 800a76e:	2000      	movs	r0, #0
 800a770:	68a3      	ldr	r3, [r4, #8]
 800a772:	1b9b      	subs	r3, r3, r6
 800a774:	60a3      	str	r3, [r4, #8]
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	4433      	add	r3, r6
 800a77a:	6023      	str	r3, [r4, #0]
 800a77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a780:	462a      	mov	r2, r5
 800a782:	f000 fd3b 	bl	800b1fc <_realloc_r>
 800a786:	4606      	mov	r6, r0
 800a788:	2800      	cmp	r0, #0
 800a78a:	d1e0      	bne.n	800a74e <__ssputs_r+0x5a>
 800a78c:	4650      	mov	r0, sl
 800a78e:	6921      	ldr	r1, [r4, #16]
 800a790:	f7ff ff68 	bl	800a664 <_free_r>
 800a794:	230c      	movs	r3, #12
 800a796:	f8ca 3000 	str.w	r3, [sl]
 800a79a:	89a3      	ldrh	r3, [r4, #12]
 800a79c:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7a4:	81a3      	strh	r3, [r4, #12]
 800a7a6:	e7e9      	b.n	800a77c <__ssputs_r+0x88>

0800a7a8 <_svfiprintf_r>:
 800a7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ac:	4698      	mov	r8, r3
 800a7ae:	898b      	ldrh	r3, [r1, #12]
 800a7b0:	4607      	mov	r7, r0
 800a7b2:	061b      	lsls	r3, r3, #24
 800a7b4:	460d      	mov	r5, r1
 800a7b6:	4614      	mov	r4, r2
 800a7b8:	b09d      	sub	sp, #116	; 0x74
 800a7ba:	d50e      	bpl.n	800a7da <_svfiprintf_r+0x32>
 800a7bc:	690b      	ldr	r3, [r1, #16]
 800a7be:	b963      	cbnz	r3, 800a7da <_svfiprintf_r+0x32>
 800a7c0:	2140      	movs	r1, #64	; 0x40
 800a7c2:	f7ff fb79 	bl	8009eb8 <_malloc_r>
 800a7c6:	6028      	str	r0, [r5, #0]
 800a7c8:	6128      	str	r0, [r5, #16]
 800a7ca:	b920      	cbnz	r0, 800a7d6 <_svfiprintf_r+0x2e>
 800a7cc:	230c      	movs	r3, #12
 800a7ce:	603b      	str	r3, [r7, #0]
 800a7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d4:	e0d0      	b.n	800a978 <_svfiprintf_r+0x1d0>
 800a7d6:	2340      	movs	r3, #64	; 0x40
 800a7d8:	616b      	str	r3, [r5, #20]
 800a7da:	2300      	movs	r3, #0
 800a7dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a7de:	2320      	movs	r3, #32
 800a7e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7e4:	2330      	movs	r3, #48	; 0x30
 800a7e6:	f04f 0901 	mov.w	r9, #1
 800a7ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ee:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a990 <_svfiprintf_r+0x1e8>
 800a7f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7f6:	4623      	mov	r3, r4
 800a7f8:	469a      	mov	sl, r3
 800a7fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7fe:	b10a      	cbz	r2, 800a804 <_svfiprintf_r+0x5c>
 800a800:	2a25      	cmp	r2, #37	; 0x25
 800a802:	d1f9      	bne.n	800a7f8 <_svfiprintf_r+0x50>
 800a804:	ebba 0b04 	subs.w	fp, sl, r4
 800a808:	d00b      	beq.n	800a822 <_svfiprintf_r+0x7a>
 800a80a:	465b      	mov	r3, fp
 800a80c:	4622      	mov	r2, r4
 800a80e:	4629      	mov	r1, r5
 800a810:	4638      	mov	r0, r7
 800a812:	f7ff ff6f 	bl	800a6f4 <__ssputs_r>
 800a816:	3001      	adds	r0, #1
 800a818:	f000 80a9 	beq.w	800a96e <_svfiprintf_r+0x1c6>
 800a81c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a81e:	445a      	add	r2, fp
 800a820:	9209      	str	r2, [sp, #36]	; 0x24
 800a822:	f89a 3000 	ldrb.w	r3, [sl]
 800a826:	2b00      	cmp	r3, #0
 800a828:	f000 80a1 	beq.w	800a96e <_svfiprintf_r+0x1c6>
 800a82c:	2300      	movs	r3, #0
 800a82e:	f04f 32ff 	mov.w	r2, #4294967295
 800a832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a836:	f10a 0a01 	add.w	sl, sl, #1
 800a83a:	9304      	str	r3, [sp, #16]
 800a83c:	9307      	str	r3, [sp, #28]
 800a83e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a842:	931a      	str	r3, [sp, #104]	; 0x68
 800a844:	4654      	mov	r4, sl
 800a846:	2205      	movs	r2, #5
 800a848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a84c:	4850      	ldr	r0, [pc, #320]	; (800a990 <_svfiprintf_r+0x1e8>)
 800a84e:	f000 fcc7 	bl	800b1e0 <memchr>
 800a852:	9a04      	ldr	r2, [sp, #16]
 800a854:	b9d8      	cbnz	r0, 800a88e <_svfiprintf_r+0xe6>
 800a856:	06d0      	lsls	r0, r2, #27
 800a858:	bf44      	itt	mi
 800a85a:	2320      	movmi	r3, #32
 800a85c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a860:	0711      	lsls	r1, r2, #28
 800a862:	bf44      	itt	mi
 800a864:	232b      	movmi	r3, #43	; 0x2b
 800a866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a86a:	f89a 3000 	ldrb.w	r3, [sl]
 800a86e:	2b2a      	cmp	r3, #42	; 0x2a
 800a870:	d015      	beq.n	800a89e <_svfiprintf_r+0xf6>
 800a872:	4654      	mov	r4, sl
 800a874:	2000      	movs	r0, #0
 800a876:	f04f 0c0a 	mov.w	ip, #10
 800a87a:	9a07      	ldr	r2, [sp, #28]
 800a87c:	4621      	mov	r1, r4
 800a87e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a882:	3b30      	subs	r3, #48	; 0x30
 800a884:	2b09      	cmp	r3, #9
 800a886:	d94d      	bls.n	800a924 <_svfiprintf_r+0x17c>
 800a888:	b1b0      	cbz	r0, 800a8b8 <_svfiprintf_r+0x110>
 800a88a:	9207      	str	r2, [sp, #28]
 800a88c:	e014      	b.n	800a8b8 <_svfiprintf_r+0x110>
 800a88e:	eba0 0308 	sub.w	r3, r0, r8
 800a892:	fa09 f303 	lsl.w	r3, r9, r3
 800a896:	4313      	orrs	r3, r2
 800a898:	46a2      	mov	sl, r4
 800a89a:	9304      	str	r3, [sp, #16]
 800a89c:	e7d2      	b.n	800a844 <_svfiprintf_r+0x9c>
 800a89e:	9b03      	ldr	r3, [sp, #12]
 800a8a0:	1d19      	adds	r1, r3, #4
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	9103      	str	r1, [sp, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	bfbb      	ittet	lt
 800a8aa:	425b      	neglt	r3, r3
 800a8ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a8b0:	9307      	strge	r3, [sp, #28]
 800a8b2:	9307      	strlt	r3, [sp, #28]
 800a8b4:	bfb8      	it	lt
 800a8b6:	9204      	strlt	r2, [sp, #16]
 800a8b8:	7823      	ldrb	r3, [r4, #0]
 800a8ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a8bc:	d10c      	bne.n	800a8d8 <_svfiprintf_r+0x130>
 800a8be:	7863      	ldrb	r3, [r4, #1]
 800a8c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a8c2:	d134      	bne.n	800a92e <_svfiprintf_r+0x186>
 800a8c4:	9b03      	ldr	r3, [sp, #12]
 800a8c6:	3402      	adds	r4, #2
 800a8c8:	1d1a      	adds	r2, r3, #4
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	9203      	str	r2, [sp, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	bfb8      	it	lt
 800a8d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8d6:	9305      	str	r3, [sp, #20]
 800a8d8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a994 <_svfiprintf_r+0x1ec>
 800a8dc:	2203      	movs	r2, #3
 800a8de:	4650      	mov	r0, sl
 800a8e0:	7821      	ldrb	r1, [r4, #0]
 800a8e2:	f000 fc7d 	bl	800b1e0 <memchr>
 800a8e6:	b138      	cbz	r0, 800a8f8 <_svfiprintf_r+0x150>
 800a8e8:	2240      	movs	r2, #64	; 0x40
 800a8ea:	9b04      	ldr	r3, [sp, #16]
 800a8ec:	eba0 000a 	sub.w	r0, r0, sl
 800a8f0:	4082      	lsls	r2, r0
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	3401      	adds	r4, #1
 800a8f6:	9304      	str	r3, [sp, #16]
 800a8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8fc:	2206      	movs	r2, #6
 800a8fe:	4826      	ldr	r0, [pc, #152]	; (800a998 <_svfiprintf_r+0x1f0>)
 800a900:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a904:	f000 fc6c 	bl	800b1e0 <memchr>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d038      	beq.n	800a97e <_svfiprintf_r+0x1d6>
 800a90c:	4b23      	ldr	r3, [pc, #140]	; (800a99c <_svfiprintf_r+0x1f4>)
 800a90e:	bb1b      	cbnz	r3, 800a958 <_svfiprintf_r+0x1b0>
 800a910:	9b03      	ldr	r3, [sp, #12]
 800a912:	3307      	adds	r3, #7
 800a914:	f023 0307 	bic.w	r3, r3, #7
 800a918:	3308      	adds	r3, #8
 800a91a:	9303      	str	r3, [sp, #12]
 800a91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a91e:	4433      	add	r3, r6
 800a920:	9309      	str	r3, [sp, #36]	; 0x24
 800a922:	e768      	b.n	800a7f6 <_svfiprintf_r+0x4e>
 800a924:	460c      	mov	r4, r1
 800a926:	2001      	movs	r0, #1
 800a928:	fb0c 3202 	mla	r2, ip, r2, r3
 800a92c:	e7a6      	b.n	800a87c <_svfiprintf_r+0xd4>
 800a92e:	2300      	movs	r3, #0
 800a930:	f04f 0c0a 	mov.w	ip, #10
 800a934:	4619      	mov	r1, r3
 800a936:	3401      	adds	r4, #1
 800a938:	9305      	str	r3, [sp, #20]
 800a93a:	4620      	mov	r0, r4
 800a93c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a940:	3a30      	subs	r2, #48	; 0x30
 800a942:	2a09      	cmp	r2, #9
 800a944:	d903      	bls.n	800a94e <_svfiprintf_r+0x1a6>
 800a946:	2b00      	cmp	r3, #0
 800a948:	d0c6      	beq.n	800a8d8 <_svfiprintf_r+0x130>
 800a94a:	9105      	str	r1, [sp, #20]
 800a94c:	e7c4      	b.n	800a8d8 <_svfiprintf_r+0x130>
 800a94e:	4604      	mov	r4, r0
 800a950:	2301      	movs	r3, #1
 800a952:	fb0c 2101 	mla	r1, ip, r1, r2
 800a956:	e7f0      	b.n	800a93a <_svfiprintf_r+0x192>
 800a958:	ab03      	add	r3, sp, #12
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	462a      	mov	r2, r5
 800a95e:	4638      	mov	r0, r7
 800a960:	4b0f      	ldr	r3, [pc, #60]	; (800a9a0 <_svfiprintf_r+0x1f8>)
 800a962:	a904      	add	r1, sp, #16
 800a964:	f3af 8000 	nop.w
 800a968:	1c42      	adds	r2, r0, #1
 800a96a:	4606      	mov	r6, r0
 800a96c:	d1d6      	bne.n	800a91c <_svfiprintf_r+0x174>
 800a96e:	89ab      	ldrh	r3, [r5, #12]
 800a970:	065b      	lsls	r3, r3, #25
 800a972:	f53f af2d 	bmi.w	800a7d0 <_svfiprintf_r+0x28>
 800a976:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a978:	b01d      	add	sp, #116	; 0x74
 800a97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97e:	ab03      	add	r3, sp, #12
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	462a      	mov	r2, r5
 800a984:	4638      	mov	r0, r7
 800a986:	4b06      	ldr	r3, [pc, #24]	; (800a9a0 <_svfiprintf_r+0x1f8>)
 800a988:	a904      	add	r1, sp, #16
 800a98a:	f000 f9bf 	bl	800ad0c <_printf_i>
 800a98e:	e7eb      	b.n	800a968 <_svfiprintf_r+0x1c0>
 800a990:	0800b91c 	.word	0x0800b91c
 800a994:	0800b922 	.word	0x0800b922
 800a998:	0800b926 	.word	0x0800b926
 800a99c:	00000000 	.word	0x00000000
 800a9a0:	0800a6f5 	.word	0x0800a6f5

0800a9a4 <__sfputc_r>:
 800a9a4:	6893      	ldr	r3, [r2, #8]
 800a9a6:	b410      	push	{r4}
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	6093      	str	r3, [r2, #8]
 800a9ae:	da07      	bge.n	800a9c0 <__sfputc_r+0x1c>
 800a9b0:	6994      	ldr	r4, [r2, #24]
 800a9b2:	42a3      	cmp	r3, r4
 800a9b4:	db01      	blt.n	800a9ba <__sfputc_r+0x16>
 800a9b6:	290a      	cmp	r1, #10
 800a9b8:	d102      	bne.n	800a9c0 <__sfputc_r+0x1c>
 800a9ba:	bc10      	pop	{r4}
 800a9bc:	f7ff bcaf 	b.w	800a31e <__swbuf_r>
 800a9c0:	6813      	ldr	r3, [r2, #0]
 800a9c2:	1c58      	adds	r0, r3, #1
 800a9c4:	6010      	str	r0, [r2, #0]
 800a9c6:	7019      	strb	r1, [r3, #0]
 800a9c8:	4608      	mov	r0, r1
 800a9ca:	bc10      	pop	{r4}
 800a9cc:	4770      	bx	lr

0800a9ce <__sfputs_r>:
 800a9ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d0:	4606      	mov	r6, r0
 800a9d2:	460f      	mov	r7, r1
 800a9d4:	4614      	mov	r4, r2
 800a9d6:	18d5      	adds	r5, r2, r3
 800a9d8:	42ac      	cmp	r4, r5
 800a9da:	d101      	bne.n	800a9e0 <__sfputs_r+0x12>
 800a9dc:	2000      	movs	r0, #0
 800a9de:	e007      	b.n	800a9f0 <__sfputs_r+0x22>
 800a9e0:	463a      	mov	r2, r7
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e8:	f7ff ffdc 	bl	800a9a4 <__sfputc_r>
 800a9ec:	1c43      	adds	r3, r0, #1
 800a9ee:	d1f3      	bne.n	800a9d8 <__sfputs_r+0xa>
 800a9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9f4 <_vfiprintf_r>:
 800a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f8:	460d      	mov	r5, r1
 800a9fa:	4614      	mov	r4, r2
 800a9fc:	4698      	mov	r8, r3
 800a9fe:	4606      	mov	r6, r0
 800aa00:	b09d      	sub	sp, #116	; 0x74
 800aa02:	b118      	cbz	r0, 800aa0c <_vfiprintf_r+0x18>
 800aa04:	6a03      	ldr	r3, [r0, #32]
 800aa06:	b90b      	cbnz	r3, 800aa0c <_vfiprintf_r+0x18>
 800aa08:	f7ff fb6e 	bl	800a0e8 <__sinit>
 800aa0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa0e:	07d9      	lsls	r1, r3, #31
 800aa10:	d405      	bmi.n	800aa1e <_vfiprintf_r+0x2a>
 800aa12:	89ab      	ldrh	r3, [r5, #12]
 800aa14:	059a      	lsls	r2, r3, #22
 800aa16:	d402      	bmi.n	800aa1e <_vfiprintf_r+0x2a>
 800aa18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa1a:	f7ff fe0a 	bl	800a632 <__retarget_lock_acquire_recursive>
 800aa1e:	89ab      	ldrh	r3, [r5, #12]
 800aa20:	071b      	lsls	r3, r3, #28
 800aa22:	d501      	bpl.n	800aa28 <_vfiprintf_r+0x34>
 800aa24:	692b      	ldr	r3, [r5, #16]
 800aa26:	b99b      	cbnz	r3, 800aa50 <_vfiprintf_r+0x5c>
 800aa28:	4629      	mov	r1, r5
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	f7ff fcb4 	bl	800a398 <__swsetup_r>
 800aa30:	b170      	cbz	r0, 800aa50 <_vfiprintf_r+0x5c>
 800aa32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa34:	07dc      	lsls	r4, r3, #31
 800aa36:	d504      	bpl.n	800aa42 <_vfiprintf_r+0x4e>
 800aa38:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3c:	b01d      	add	sp, #116	; 0x74
 800aa3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa42:	89ab      	ldrh	r3, [r5, #12]
 800aa44:	0598      	lsls	r0, r3, #22
 800aa46:	d4f7      	bmi.n	800aa38 <_vfiprintf_r+0x44>
 800aa48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa4a:	f7ff fdf3 	bl	800a634 <__retarget_lock_release_recursive>
 800aa4e:	e7f3      	b.n	800aa38 <_vfiprintf_r+0x44>
 800aa50:	2300      	movs	r3, #0
 800aa52:	9309      	str	r3, [sp, #36]	; 0x24
 800aa54:	2320      	movs	r3, #32
 800aa56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa5a:	2330      	movs	r3, #48	; 0x30
 800aa5c:	f04f 0901 	mov.w	r9, #1
 800aa60:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa64:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800ac14 <_vfiprintf_r+0x220>
 800aa68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa6c:	4623      	mov	r3, r4
 800aa6e:	469a      	mov	sl, r3
 800aa70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa74:	b10a      	cbz	r2, 800aa7a <_vfiprintf_r+0x86>
 800aa76:	2a25      	cmp	r2, #37	; 0x25
 800aa78:	d1f9      	bne.n	800aa6e <_vfiprintf_r+0x7a>
 800aa7a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa7e:	d00b      	beq.n	800aa98 <_vfiprintf_r+0xa4>
 800aa80:	465b      	mov	r3, fp
 800aa82:	4622      	mov	r2, r4
 800aa84:	4629      	mov	r1, r5
 800aa86:	4630      	mov	r0, r6
 800aa88:	f7ff ffa1 	bl	800a9ce <__sfputs_r>
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	f000 80a9 	beq.w	800abe4 <_vfiprintf_r+0x1f0>
 800aa92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa94:	445a      	add	r2, fp
 800aa96:	9209      	str	r2, [sp, #36]	; 0x24
 800aa98:	f89a 3000 	ldrb.w	r3, [sl]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f000 80a1 	beq.w	800abe4 <_vfiprintf_r+0x1f0>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaac:	f10a 0a01 	add.w	sl, sl, #1
 800aab0:	9304      	str	r3, [sp, #16]
 800aab2:	9307      	str	r3, [sp, #28]
 800aab4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aab8:	931a      	str	r3, [sp, #104]	; 0x68
 800aaba:	4654      	mov	r4, sl
 800aabc:	2205      	movs	r2, #5
 800aabe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac2:	4854      	ldr	r0, [pc, #336]	; (800ac14 <_vfiprintf_r+0x220>)
 800aac4:	f000 fb8c 	bl	800b1e0 <memchr>
 800aac8:	9a04      	ldr	r2, [sp, #16]
 800aaca:	b9d8      	cbnz	r0, 800ab04 <_vfiprintf_r+0x110>
 800aacc:	06d1      	lsls	r1, r2, #27
 800aace:	bf44      	itt	mi
 800aad0:	2320      	movmi	r3, #32
 800aad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aad6:	0713      	lsls	r3, r2, #28
 800aad8:	bf44      	itt	mi
 800aada:	232b      	movmi	r3, #43	; 0x2b
 800aadc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aae0:	f89a 3000 	ldrb.w	r3, [sl]
 800aae4:	2b2a      	cmp	r3, #42	; 0x2a
 800aae6:	d015      	beq.n	800ab14 <_vfiprintf_r+0x120>
 800aae8:	4654      	mov	r4, sl
 800aaea:	2000      	movs	r0, #0
 800aaec:	f04f 0c0a 	mov.w	ip, #10
 800aaf0:	9a07      	ldr	r2, [sp, #28]
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaf8:	3b30      	subs	r3, #48	; 0x30
 800aafa:	2b09      	cmp	r3, #9
 800aafc:	d94d      	bls.n	800ab9a <_vfiprintf_r+0x1a6>
 800aafe:	b1b0      	cbz	r0, 800ab2e <_vfiprintf_r+0x13a>
 800ab00:	9207      	str	r2, [sp, #28]
 800ab02:	e014      	b.n	800ab2e <_vfiprintf_r+0x13a>
 800ab04:	eba0 0308 	sub.w	r3, r0, r8
 800ab08:	fa09 f303 	lsl.w	r3, r9, r3
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	46a2      	mov	sl, r4
 800ab10:	9304      	str	r3, [sp, #16]
 800ab12:	e7d2      	b.n	800aaba <_vfiprintf_r+0xc6>
 800ab14:	9b03      	ldr	r3, [sp, #12]
 800ab16:	1d19      	adds	r1, r3, #4
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	9103      	str	r1, [sp, #12]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	bfbb      	ittet	lt
 800ab20:	425b      	neglt	r3, r3
 800ab22:	f042 0202 	orrlt.w	r2, r2, #2
 800ab26:	9307      	strge	r3, [sp, #28]
 800ab28:	9307      	strlt	r3, [sp, #28]
 800ab2a:	bfb8      	it	lt
 800ab2c:	9204      	strlt	r2, [sp, #16]
 800ab2e:	7823      	ldrb	r3, [r4, #0]
 800ab30:	2b2e      	cmp	r3, #46	; 0x2e
 800ab32:	d10c      	bne.n	800ab4e <_vfiprintf_r+0x15a>
 800ab34:	7863      	ldrb	r3, [r4, #1]
 800ab36:	2b2a      	cmp	r3, #42	; 0x2a
 800ab38:	d134      	bne.n	800aba4 <_vfiprintf_r+0x1b0>
 800ab3a:	9b03      	ldr	r3, [sp, #12]
 800ab3c:	3402      	adds	r4, #2
 800ab3e:	1d1a      	adds	r2, r3, #4
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	9203      	str	r2, [sp, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	bfb8      	it	lt
 800ab48:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab4c:	9305      	str	r3, [sp, #20]
 800ab4e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac18 <_vfiprintf_r+0x224>
 800ab52:	2203      	movs	r2, #3
 800ab54:	4650      	mov	r0, sl
 800ab56:	7821      	ldrb	r1, [r4, #0]
 800ab58:	f000 fb42 	bl	800b1e0 <memchr>
 800ab5c:	b138      	cbz	r0, 800ab6e <_vfiprintf_r+0x17a>
 800ab5e:	2240      	movs	r2, #64	; 0x40
 800ab60:	9b04      	ldr	r3, [sp, #16]
 800ab62:	eba0 000a 	sub.w	r0, r0, sl
 800ab66:	4082      	lsls	r2, r0
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	3401      	adds	r4, #1
 800ab6c:	9304      	str	r3, [sp, #16]
 800ab6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab72:	2206      	movs	r2, #6
 800ab74:	4829      	ldr	r0, [pc, #164]	; (800ac1c <_vfiprintf_r+0x228>)
 800ab76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab7a:	f000 fb31 	bl	800b1e0 <memchr>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d03f      	beq.n	800ac02 <_vfiprintf_r+0x20e>
 800ab82:	4b27      	ldr	r3, [pc, #156]	; (800ac20 <_vfiprintf_r+0x22c>)
 800ab84:	bb1b      	cbnz	r3, 800abce <_vfiprintf_r+0x1da>
 800ab86:	9b03      	ldr	r3, [sp, #12]
 800ab88:	3307      	adds	r3, #7
 800ab8a:	f023 0307 	bic.w	r3, r3, #7
 800ab8e:	3308      	adds	r3, #8
 800ab90:	9303      	str	r3, [sp, #12]
 800ab92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab94:	443b      	add	r3, r7
 800ab96:	9309      	str	r3, [sp, #36]	; 0x24
 800ab98:	e768      	b.n	800aa6c <_vfiprintf_r+0x78>
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	2001      	movs	r0, #1
 800ab9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aba2:	e7a6      	b.n	800aaf2 <_vfiprintf_r+0xfe>
 800aba4:	2300      	movs	r3, #0
 800aba6:	f04f 0c0a 	mov.w	ip, #10
 800abaa:	4619      	mov	r1, r3
 800abac:	3401      	adds	r4, #1
 800abae:	9305      	str	r3, [sp, #20]
 800abb0:	4620      	mov	r0, r4
 800abb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abb6:	3a30      	subs	r2, #48	; 0x30
 800abb8:	2a09      	cmp	r2, #9
 800abba:	d903      	bls.n	800abc4 <_vfiprintf_r+0x1d0>
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d0c6      	beq.n	800ab4e <_vfiprintf_r+0x15a>
 800abc0:	9105      	str	r1, [sp, #20]
 800abc2:	e7c4      	b.n	800ab4e <_vfiprintf_r+0x15a>
 800abc4:	4604      	mov	r4, r0
 800abc6:	2301      	movs	r3, #1
 800abc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800abcc:	e7f0      	b.n	800abb0 <_vfiprintf_r+0x1bc>
 800abce:	ab03      	add	r3, sp, #12
 800abd0:	9300      	str	r3, [sp, #0]
 800abd2:	462a      	mov	r2, r5
 800abd4:	4630      	mov	r0, r6
 800abd6:	4b13      	ldr	r3, [pc, #76]	; (800ac24 <_vfiprintf_r+0x230>)
 800abd8:	a904      	add	r1, sp, #16
 800abda:	f3af 8000 	nop.w
 800abde:	4607      	mov	r7, r0
 800abe0:	1c78      	adds	r0, r7, #1
 800abe2:	d1d6      	bne.n	800ab92 <_vfiprintf_r+0x19e>
 800abe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abe6:	07d9      	lsls	r1, r3, #31
 800abe8:	d405      	bmi.n	800abf6 <_vfiprintf_r+0x202>
 800abea:	89ab      	ldrh	r3, [r5, #12]
 800abec:	059a      	lsls	r2, r3, #22
 800abee:	d402      	bmi.n	800abf6 <_vfiprintf_r+0x202>
 800abf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abf2:	f7ff fd1f 	bl	800a634 <__retarget_lock_release_recursive>
 800abf6:	89ab      	ldrh	r3, [r5, #12]
 800abf8:	065b      	lsls	r3, r3, #25
 800abfa:	f53f af1d 	bmi.w	800aa38 <_vfiprintf_r+0x44>
 800abfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac00:	e71c      	b.n	800aa3c <_vfiprintf_r+0x48>
 800ac02:	ab03      	add	r3, sp, #12
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	462a      	mov	r2, r5
 800ac08:	4630      	mov	r0, r6
 800ac0a:	4b06      	ldr	r3, [pc, #24]	; (800ac24 <_vfiprintf_r+0x230>)
 800ac0c:	a904      	add	r1, sp, #16
 800ac0e:	f000 f87d 	bl	800ad0c <_printf_i>
 800ac12:	e7e4      	b.n	800abde <_vfiprintf_r+0x1ea>
 800ac14:	0800b91c 	.word	0x0800b91c
 800ac18:	0800b922 	.word	0x0800b922
 800ac1c:	0800b926 	.word	0x0800b926
 800ac20:	00000000 	.word	0x00000000
 800ac24:	0800a9cf 	.word	0x0800a9cf

0800ac28 <_printf_common>:
 800ac28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac2c:	4616      	mov	r6, r2
 800ac2e:	4699      	mov	r9, r3
 800ac30:	688a      	ldr	r2, [r1, #8]
 800ac32:	690b      	ldr	r3, [r1, #16]
 800ac34:	4607      	mov	r7, r0
 800ac36:	4293      	cmp	r3, r2
 800ac38:	bfb8      	it	lt
 800ac3a:	4613      	movlt	r3, r2
 800ac3c:	6033      	str	r3, [r6, #0]
 800ac3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac42:	460c      	mov	r4, r1
 800ac44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac48:	b10a      	cbz	r2, 800ac4e <_printf_common+0x26>
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	6033      	str	r3, [r6, #0]
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	0699      	lsls	r1, r3, #26
 800ac52:	bf42      	ittt	mi
 800ac54:	6833      	ldrmi	r3, [r6, #0]
 800ac56:	3302      	addmi	r3, #2
 800ac58:	6033      	strmi	r3, [r6, #0]
 800ac5a:	6825      	ldr	r5, [r4, #0]
 800ac5c:	f015 0506 	ands.w	r5, r5, #6
 800ac60:	d106      	bne.n	800ac70 <_printf_common+0x48>
 800ac62:	f104 0a19 	add.w	sl, r4, #25
 800ac66:	68e3      	ldr	r3, [r4, #12]
 800ac68:	6832      	ldr	r2, [r6, #0]
 800ac6a:	1a9b      	subs	r3, r3, r2
 800ac6c:	42ab      	cmp	r3, r5
 800ac6e:	dc2b      	bgt.n	800acc8 <_printf_common+0xa0>
 800ac70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac74:	1e13      	subs	r3, r2, #0
 800ac76:	6822      	ldr	r2, [r4, #0]
 800ac78:	bf18      	it	ne
 800ac7a:	2301      	movne	r3, #1
 800ac7c:	0692      	lsls	r2, r2, #26
 800ac7e:	d430      	bmi.n	800ace2 <_printf_common+0xba>
 800ac80:	4649      	mov	r1, r9
 800ac82:	4638      	mov	r0, r7
 800ac84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac88:	47c0      	blx	r8
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	d023      	beq.n	800acd6 <_printf_common+0xae>
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	6922      	ldr	r2, [r4, #16]
 800ac92:	f003 0306 	and.w	r3, r3, #6
 800ac96:	2b04      	cmp	r3, #4
 800ac98:	bf14      	ite	ne
 800ac9a:	2500      	movne	r5, #0
 800ac9c:	6833      	ldreq	r3, [r6, #0]
 800ac9e:	f04f 0600 	mov.w	r6, #0
 800aca2:	bf08      	it	eq
 800aca4:	68e5      	ldreq	r5, [r4, #12]
 800aca6:	f104 041a 	add.w	r4, r4, #26
 800acaa:	bf08      	it	eq
 800acac:	1aed      	subeq	r5, r5, r3
 800acae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800acb2:	bf08      	it	eq
 800acb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acb8:	4293      	cmp	r3, r2
 800acba:	bfc4      	itt	gt
 800acbc:	1a9b      	subgt	r3, r3, r2
 800acbe:	18ed      	addgt	r5, r5, r3
 800acc0:	42b5      	cmp	r5, r6
 800acc2:	d11a      	bne.n	800acfa <_printf_common+0xd2>
 800acc4:	2000      	movs	r0, #0
 800acc6:	e008      	b.n	800acda <_printf_common+0xb2>
 800acc8:	2301      	movs	r3, #1
 800acca:	4652      	mov	r2, sl
 800accc:	4649      	mov	r1, r9
 800acce:	4638      	mov	r0, r7
 800acd0:	47c0      	blx	r8
 800acd2:	3001      	adds	r0, #1
 800acd4:	d103      	bne.n	800acde <_printf_common+0xb6>
 800acd6:	f04f 30ff 	mov.w	r0, #4294967295
 800acda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acde:	3501      	adds	r5, #1
 800ace0:	e7c1      	b.n	800ac66 <_printf_common+0x3e>
 800ace2:	2030      	movs	r0, #48	; 0x30
 800ace4:	18e1      	adds	r1, r4, r3
 800ace6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acea:	1c5a      	adds	r2, r3, #1
 800acec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acf0:	4422      	add	r2, r4
 800acf2:	3302      	adds	r3, #2
 800acf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acf8:	e7c2      	b.n	800ac80 <_printf_common+0x58>
 800acfa:	2301      	movs	r3, #1
 800acfc:	4622      	mov	r2, r4
 800acfe:	4649      	mov	r1, r9
 800ad00:	4638      	mov	r0, r7
 800ad02:	47c0      	blx	r8
 800ad04:	3001      	adds	r0, #1
 800ad06:	d0e6      	beq.n	800acd6 <_printf_common+0xae>
 800ad08:	3601      	adds	r6, #1
 800ad0a:	e7d9      	b.n	800acc0 <_printf_common+0x98>

0800ad0c <_printf_i>:
 800ad0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad10:	7e0f      	ldrb	r7, [r1, #24]
 800ad12:	4691      	mov	r9, r2
 800ad14:	2f78      	cmp	r7, #120	; 0x78
 800ad16:	4680      	mov	r8, r0
 800ad18:	460c      	mov	r4, r1
 800ad1a:	469a      	mov	sl, r3
 800ad1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad22:	d807      	bhi.n	800ad34 <_printf_i+0x28>
 800ad24:	2f62      	cmp	r7, #98	; 0x62
 800ad26:	d80a      	bhi.n	800ad3e <_printf_i+0x32>
 800ad28:	2f00      	cmp	r7, #0
 800ad2a:	f000 80d5 	beq.w	800aed8 <_printf_i+0x1cc>
 800ad2e:	2f58      	cmp	r7, #88	; 0x58
 800ad30:	f000 80c1 	beq.w	800aeb6 <_printf_i+0x1aa>
 800ad34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad3c:	e03a      	b.n	800adb4 <_printf_i+0xa8>
 800ad3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad42:	2b15      	cmp	r3, #21
 800ad44:	d8f6      	bhi.n	800ad34 <_printf_i+0x28>
 800ad46:	a101      	add	r1, pc, #4	; (adr r1, 800ad4c <_printf_i+0x40>)
 800ad48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad4c:	0800ada5 	.word	0x0800ada5
 800ad50:	0800adb9 	.word	0x0800adb9
 800ad54:	0800ad35 	.word	0x0800ad35
 800ad58:	0800ad35 	.word	0x0800ad35
 800ad5c:	0800ad35 	.word	0x0800ad35
 800ad60:	0800ad35 	.word	0x0800ad35
 800ad64:	0800adb9 	.word	0x0800adb9
 800ad68:	0800ad35 	.word	0x0800ad35
 800ad6c:	0800ad35 	.word	0x0800ad35
 800ad70:	0800ad35 	.word	0x0800ad35
 800ad74:	0800ad35 	.word	0x0800ad35
 800ad78:	0800aebf 	.word	0x0800aebf
 800ad7c:	0800ade5 	.word	0x0800ade5
 800ad80:	0800ae79 	.word	0x0800ae79
 800ad84:	0800ad35 	.word	0x0800ad35
 800ad88:	0800ad35 	.word	0x0800ad35
 800ad8c:	0800aee1 	.word	0x0800aee1
 800ad90:	0800ad35 	.word	0x0800ad35
 800ad94:	0800ade5 	.word	0x0800ade5
 800ad98:	0800ad35 	.word	0x0800ad35
 800ad9c:	0800ad35 	.word	0x0800ad35
 800ada0:	0800ae81 	.word	0x0800ae81
 800ada4:	682b      	ldr	r3, [r5, #0]
 800ada6:	1d1a      	adds	r2, r3, #4
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	602a      	str	r2, [r5, #0]
 800adac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adb4:	2301      	movs	r3, #1
 800adb6:	e0a0      	b.n	800aefa <_printf_i+0x1ee>
 800adb8:	6820      	ldr	r0, [r4, #0]
 800adba:	682b      	ldr	r3, [r5, #0]
 800adbc:	0607      	lsls	r7, r0, #24
 800adbe:	f103 0104 	add.w	r1, r3, #4
 800adc2:	6029      	str	r1, [r5, #0]
 800adc4:	d501      	bpl.n	800adca <_printf_i+0xbe>
 800adc6:	681e      	ldr	r6, [r3, #0]
 800adc8:	e003      	b.n	800add2 <_printf_i+0xc6>
 800adca:	0646      	lsls	r6, r0, #25
 800adcc:	d5fb      	bpl.n	800adc6 <_printf_i+0xba>
 800adce:	f9b3 6000 	ldrsh.w	r6, [r3]
 800add2:	2e00      	cmp	r6, #0
 800add4:	da03      	bge.n	800adde <_printf_i+0xd2>
 800add6:	232d      	movs	r3, #45	; 0x2d
 800add8:	4276      	negs	r6, r6
 800adda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adde:	230a      	movs	r3, #10
 800ade0:	4859      	ldr	r0, [pc, #356]	; (800af48 <_printf_i+0x23c>)
 800ade2:	e012      	b.n	800ae0a <_printf_i+0xfe>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	6820      	ldr	r0, [r4, #0]
 800ade8:	1d19      	adds	r1, r3, #4
 800adea:	6029      	str	r1, [r5, #0]
 800adec:	0605      	lsls	r5, r0, #24
 800adee:	d501      	bpl.n	800adf4 <_printf_i+0xe8>
 800adf0:	681e      	ldr	r6, [r3, #0]
 800adf2:	e002      	b.n	800adfa <_printf_i+0xee>
 800adf4:	0641      	lsls	r1, r0, #25
 800adf6:	d5fb      	bpl.n	800adf0 <_printf_i+0xe4>
 800adf8:	881e      	ldrh	r6, [r3, #0]
 800adfa:	2f6f      	cmp	r7, #111	; 0x6f
 800adfc:	bf0c      	ite	eq
 800adfe:	2308      	moveq	r3, #8
 800ae00:	230a      	movne	r3, #10
 800ae02:	4851      	ldr	r0, [pc, #324]	; (800af48 <_printf_i+0x23c>)
 800ae04:	2100      	movs	r1, #0
 800ae06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae0a:	6865      	ldr	r5, [r4, #4]
 800ae0c:	2d00      	cmp	r5, #0
 800ae0e:	bfa8      	it	ge
 800ae10:	6821      	ldrge	r1, [r4, #0]
 800ae12:	60a5      	str	r5, [r4, #8]
 800ae14:	bfa4      	itt	ge
 800ae16:	f021 0104 	bicge.w	r1, r1, #4
 800ae1a:	6021      	strge	r1, [r4, #0]
 800ae1c:	b90e      	cbnz	r6, 800ae22 <_printf_i+0x116>
 800ae1e:	2d00      	cmp	r5, #0
 800ae20:	d04b      	beq.n	800aeba <_printf_i+0x1ae>
 800ae22:	4615      	mov	r5, r2
 800ae24:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae28:	fb03 6711 	mls	r7, r3, r1, r6
 800ae2c:	5dc7      	ldrb	r7, [r0, r7]
 800ae2e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae32:	4637      	mov	r7, r6
 800ae34:	42bb      	cmp	r3, r7
 800ae36:	460e      	mov	r6, r1
 800ae38:	d9f4      	bls.n	800ae24 <_printf_i+0x118>
 800ae3a:	2b08      	cmp	r3, #8
 800ae3c:	d10b      	bne.n	800ae56 <_printf_i+0x14a>
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	07de      	lsls	r6, r3, #31
 800ae42:	d508      	bpl.n	800ae56 <_printf_i+0x14a>
 800ae44:	6923      	ldr	r3, [r4, #16]
 800ae46:	6861      	ldr	r1, [r4, #4]
 800ae48:	4299      	cmp	r1, r3
 800ae4a:	bfde      	ittt	le
 800ae4c:	2330      	movle	r3, #48	; 0x30
 800ae4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae52:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae56:	1b52      	subs	r2, r2, r5
 800ae58:	6122      	str	r2, [r4, #16]
 800ae5a:	464b      	mov	r3, r9
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	4640      	mov	r0, r8
 800ae60:	f8cd a000 	str.w	sl, [sp]
 800ae64:	aa03      	add	r2, sp, #12
 800ae66:	f7ff fedf 	bl	800ac28 <_printf_common>
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	d14a      	bne.n	800af04 <_printf_i+0x1f8>
 800ae6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae72:	b004      	add	sp, #16
 800ae74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae78:	6823      	ldr	r3, [r4, #0]
 800ae7a:	f043 0320 	orr.w	r3, r3, #32
 800ae7e:	6023      	str	r3, [r4, #0]
 800ae80:	2778      	movs	r7, #120	; 0x78
 800ae82:	4832      	ldr	r0, [pc, #200]	; (800af4c <_printf_i+0x240>)
 800ae84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae88:	6823      	ldr	r3, [r4, #0]
 800ae8a:	6829      	ldr	r1, [r5, #0]
 800ae8c:	061f      	lsls	r7, r3, #24
 800ae8e:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae92:	d402      	bmi.n	800ae9a <_printf_i+0x18e>
 800ae94:	065f      	lsls	r7, r3, #25
 800ae96:	bf48      	it	mi
 800ae98:	b2b6      	uxthmi	r6, r6
 800ae9a:	07df      	lsls	r7, r3, #31
 800ae9c:	bf48      	it	mi
 800ae9e:	f043 0320 	orrmi.w	r3, r3, #32
 800aea2:	6029      	str	r1, [r5, #0]
 800aea4:	bf48      	it	mi
 800aea6:	6023      	strmi	r3, [r4, #0]
 800aea8:	b91e      	cbnz	r6, 800aeb2 <_printf_i+0x1a6>
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	f023 0320 	bic.w	r3, r3, #32
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	2310      	movs	r3, #16
 800aeb4:	e7a6      	b.n	800ae04 <_printf_i+0xf8>
 800aeb6:	4824      	ldr	r0, [pc, #144]	; (800af48 <_printf_i+0x23c>)
 800aeb8:	e7e4      	b.n	800ae84 <_printf_i+0x178>
 800aeba:	4615      	mov	r5, r2
 800aebc:	e7bd      	b.n	800ae3a <_printf_i+0x12e>
 800aebe:	682b      	ldr	r3, [r5, #0]
 800aec0:	6826      	ldr	r6, [r4, #0]
 800aec2:	1d18      	adds	r0, r3, #4
 800aec4:	6961      	ldr	r1, [r4, #20]
 800aec6:	6028      	str	r0, [r5, #0]
 800aec8:	0635      	lsls	r5, r6, #24
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	d501      	bpl.n	800aed2 <_printf_i+0x1c6>
 800aece:	6019      	str	r1, [r3, #0]
 800aed0:	e002      	b.n	800aed8 <_printf_i+0x1cc>
 800aed2:	0670      	lsls	r0, r6, #25
 800aed4:	d5fb      	bpl.n	800aece <_printf_i+0x1c2>
 800aed6:	8019      	strh	r1, [r3, #0]
 800aed8:	2300      	movs	r3, #0
 800aeda:	4615      	mov	r5, r2
 800aedc:	6123      	str	r3, [r4, #16]
 800aede:	e7bc      	b.n	800ae5a <_printf_i+0x14e>
 800aee0:	682b      	ldr	r3, [r5, #0]
 800aee2:	2100      	movs	r1, #0
 800aee4:	1d1a      	adds	r2, r3, #4
 800aee6:	602a      	str	r2, [r5, #0]
 800aee8:	681d      	ldr	r5, [r3, #0]
 800aeea:	6862      	ldr	r2, [r4, #4]
 800aeec:	4628      	mov	r0, r5
 800aeee:	f000 f977 	bl	800b1e0 <memchr>
 800aef2:	b108      	cbz	r0, 800aef8 <_printf_i+0x1ec>
 800aef4:	1b40      	subs	r0, r0, r5
 800aef6:	6060      	str	r0, [r4, #4]
 800aef8:	6863      	ldr	r3, [r4, #4]
 800aefa:	6123      	str	r3, [r4, #16]
 800aefc:	2300      	movs	r3, #0
 800aefe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af02:	e7aa      	b.n	800ae5a <_printf_i+0x14e>
 800af04:	462a      	mov	r2, r5
 800af06:	4649      	mov	r1, r9
 800af08:	4640      	mov	r0, r8
 800af0a:	6923      	ldr	r3, [r4, #16]
 800af0c:	47d0      	blx	sl
 800af0e:	3001      	adds	r0, #1
 800af10:	d0ad      	beq.n	800ae6e <_printf_i+0x162>
 800af12:	6823      	ldr	r3, [r4, #0]
 800af14:	079b      	lsls	r3, r3, #30
 800af16:	d413      	bmi.n	800af40 <_printf_i+0x234>
 800af18:	68e0      	ldr	r0, [r4, #12]
 800af1a:	9b03      	ldr	r3, [sp, #12]
 800af1c:	4298      	cmp	r0, r3
 800af1e:	bfb8      	it	lt
 800af20:	4618      	movlt	r0, r3
 800af22:	e7a6      	b.n	800ae72 <_printf_i+0x166>
 800af24:	2301      	movs	r3, #1
 800af26:	4632      	mov	r2, r6
 800af28:	4649      	mov	r1, r9
 800af2a:	4640      	mov	r0, r8
 800af2c:	47d0      	blx	sl
 800af2e:	3001      	adds	r0, #1
 800af30:	d09d      	beq.n	800ae6e <_printf_i+0x162>
 800af32:	3501      	adds	r5, #1
 800af34:	68e3      	ldr	r3, [r4, #12]
 800af36:	9903      	ldr	r1, [sp, #12]
 800af38:	1a5b      	subs	r3, r3, r1
 800af3a:	42ab      	cmp	r3, r5
 800af3c:	dcf2      	bgt.n	800af24 <_printf_i+0x218>
 800af3e:	e7eb      	b.n	800af18 <_printf_i+0x20c>
 800af40:	2500      	movs	r5, #0
 800af42:	f104 0619 	add.w	r6, r4, #25
 800af46:	e7f5      	b.n	800af34 <_printf_i+0x228>
 800af48:	0800b92d 	.word	0x0800b92d
 800af4c:	0800b93e 	.word	0x0800b93e

0800af50 <__sflush_r>:
 800af50:	898a      	ldrh	r2, [r1, #12]
 800af52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af54:	4605      	mov	r5, r0
 800af56:	0710      	lsls	r0, r2, #28
 800af58:	460c      	mov	r4, r1
 800af5a:	d457      	bmi.n	800b00c <__sflush_r+0xbc>
 800af5c:	684b      	ldr	r3, [r1, #4]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	dc04      	bgt.n	800af6c <__sflush_r+0x1c>
 800af62:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af64:	2b00      	cmp	r3, #0
 800af66:	dc01      	bgt.n	800af6c <__sflush_r+0x1c>
 800af68:	2000      	movs	r0, #0
 800af6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af6e:	2e00      	cmp	r6, #0
 800af70:	d0fa      	beq.n	800af68 <__sflush_r+0x18>
 800af72:	2300      	movs	r3, #0
 800af74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af78:	682f      	ldr	r7, [r5, #0]
 800af7a:	6a21      	ldr	r1, [r4, #32]
 800af7c:	602b      	str	r3, [r5, #0]
 800af7e:	d032      	beq.n	800afe6 <__sflush_r+0x96>
 800af80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	075a      	lsls	r2, r3, #29
 800af86:	d505      	bpl.n	800af94 <__sflush_r+0x44>
 800af88:	6863      	ldr	r3, [r4, #4]
 800af8a:	1ac0      	subs	r0, r0, r3
 800af8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af8e:	b10b      	cbz	r3, 800af94 <__sflush_r+0x44>
 800af90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af92:	1ac0      	subs	r0, r0, r3
 800af94:	2300      	movs	r3, #0
 800af96:	4602      	mov	r2, r0
 800af98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af9a:	4628      	mov	r0, r5
 800af9c:	6a21      	ldr	r1, [r4, #32]
 800af9e:	47b0      	blx	r6
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	89a3      	ldrh	r3, [r4, #12]
 800afa4:	d106      	bne.n	800afb4 <__sflush_r+0x64>
 800afa6:	6829      	ldr	r1, [r5, #0]
 800afa8:	291d      	cmp	r1, #29
 800afaa:	d82b      	bhi.n	800b004 <__sflush_r+0xb4>
 800afac:	4a28      	ldr	r2, [pc, #160]	; (800b050 <__sflush_r+0x100>)
 800afae:	410a      	asrs	r2, r1
 800afb0:	07d6      	lsls	r6, r2, #31
 800afb2:	d427      	bmi.n	800b004 <__sflush_r+0xb4>
 800afb4:	2200      	movs	r2, #0
 800afb6:	6062      	str	r2, [r4, #4]
 800afb8:	6922      	ldr	r2, [r4, #16]
 800afba:	04d9      	lsls	r1, r3, #19
 800afbc:	6022      	str	r2, [r4, #0]
 800afbe:	d504      	bpl.n	800afca <__sflush_r+0x7a>
 800afc0:	1c42      	adds	r2, r0, #1
 800afc2:	d101      	bne.n	800afc8 <__sflush_r+0x78>
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	b903      	cbnz	r3, 800afca <__sflush_r+0x7a>
 800afc8:	6560      	str	r0, [r4, #84]	; 0x54
 800afca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afcc:	602f      	str	r7, [r5, #0]
 800afce:	2900      	cmp	r1, #0
 800afd0:	d0ca      	beq.n	800af68 <__sflush_r+0x18>
 800afd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afd6:	4299      	cmp	r1, r3
 800afd8:	d002      	beq.n	800afe0 <__sflush_r+0x90>
 800afda:	4628      	mov	r0, r5
 800afdc:	f7ff fb42 	bl	800a664 <_free_r>
 800afe0:	2000      	movs	r0, #0
 800afe2:	6360      	str	r0, [r4, #52]	; 0x34
 800afe4:	e7c1      	b.n	800af6a <__sflush_r+0x1a>
 800afe6:	2301      	movs	r3, #1
 800afe8:	4628      	mov	r0, r5
 800afea:	47b0      	blx	r6
 800afec:	1c41      	adds	r1, r0, #1
 800afee:	d1c8      	bne.n	800af82 <__sflush_r+0x32>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d0c5      	beq.n	800af82 <__sflush_r+0x32>
 800aff6:	2b1d      	cmp	r3, #29
 800aff8:	d001      	beq.n	800affe <__sflush_r+0xae>
 800affa:	2b16      	cmp	r3, #22
 800affc:	d101      	bne.n	800b002 <__sflush_r+0xb2>
 800affe:	602f      	str	r7, [r5, #0]
 800b000:	e7b2      	b.n	800af68 <__sflush_r+0x18>
 800b002:	89a3      	ldrh	r3, [r4, #12]
 800b004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b008:	81a3      	strh	r3, [r4, #12]
 800b00a:	e7ae      	b.n	800af6a <__sflush_r+0x1a>
 800b00c:	690f      	ldr	r7, [r1, #16]
 800b00e:	2f00      	cmp	r7, #0
 800b010:	d0aa      	beq.n	800af68 <__sflush_r+0x18>
 800b012:	0793      	lsls	r3, r2, #30
 800b014:	bf18      	it	ne
 800b016:	2300      	movne	r3, #0
 800b018:	680e      	ldr	r6, [r1, #0]
 800b01a:	bf08      	it	eq
 800b01c:	694b      	ldreq	r3, [r1, #20]
 800b01e:	1bf6      	subs	r6, r6, r7
 800b020:	600f      	str	r7, [r1, #0]
 800b022:	608b      	str	r3, [r1, #8]
 800b024:	2e00      	cmp	r6, #0
 800b026:	dd9f      	ble.n	800af68 <__sflush_r+0x18>
 800b028:	4633      	mov	r3, r6
 800b02a:	463a      	mov	r2, r7
 800b02c:	4628      	mov	r0, r5
 800b02e:	6a21      	ldr	r1, [r4, #32]
 800b030:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b034:	47e0      	blx	ip
 800b036:	2800      	cmp	r0, #0
 800b038:	dc06      	bgt.n	800b048 <__sflush_r+0xf8>
 800b03a:	89a3      	ldrh	r3, [r4, #12]
 800b03c:	f04f 30ff 	mov.w	r0, #4294967295
 800b040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b044:	81a3      	strh	r3, [r4, #12]
 800b046:	e790      	b.n	800af6a <__sflush_r+0x1a>
 800b048:	4407      	add	r7, r0
 800b04a:	1a36      	subs	r6, r6, r0
 800b04c:	e7ea      	b.n	800b024 <__sflush_r+0xd4>
 800b04e:	bf00      	nop
 800b050:	dfbffffe 	.word	0xdfbffffe

0800b054 <_fflush_r>:
 800b054:	b538      	push	{r3, r4, r5, lr}
 800b056:	690b      	ldr	r3, [r1, #16]
 800b058:	4605      	mov	r5, r0
 800b05a:	460c      	mov	r4, r1
 800b05c:	b913      	cbnz	r3, 800b064 <_fflush_r+0x10>
 800b05e:	2500      	movs	r5, #0
 800b060:	4628      	mov	r0, r5
 800b062:	bd38      	pop	{r3, r4, r5, pc}
 800b064:	b118      	cbz	r0, 800b06e <_fflush_r+0x1a>
 800b066:	6a03      	ldr	r3, [r0, #32]
 800b068:	b90b      	cbnz	r3, 800b06e <_fflush_r+0x1a>
 800b06a:	f7ff f83d 	bl	800a0e8 <__sinit>
 800b06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d0f3      	beq.n	800b05e <_fflush_r+0xa>
 800b076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b078:	07d0      	lsls	r0, r2, #31
 800b07a:	d404      	bmi.n	800b086 <_fflush_r+0x32>
 800b07c:	0599      	lsls	r1, r3, #22
 800b07e:	d402      	bmi.n	800b086 <_fflush_r+0x32>
 800b080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b082:	f7ff fad6 	bl	800a632 <__retarget_lock_acquire_recursive>
 800b086:	4628      	mov	r0, r5
 800b088:	4621      	mov	r1, r4
 800b08a:	f7ff ff61 	bl	800af50 <__sflush_r>
 800b08e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b090:	4605      	mov	r5, r0
 800b092:	07da      	lsls	r2, r3, #31
 800b094:	d4e4      	bmi.n	800b060 <_fflush_r+0xc>
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	059b      	lsls	r3, r3, #22
 800b09a:	d4e1      	bmi.n	800b060 <_fflush_r+0xc>
 800b09c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b09e:	f7ff fac9 	bl	800a634 <__retarget_lock_release_recursive>
 800b0a2:	e7dd      	b.n	800b060 <_fflush_r+0xc>

0800b0a4 <__swhatbuf_r>:
 800b0a4:	b570      	push	{r4, r5, r6, lr}
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ac:	4615      	mov	r5, r2
 800b0ae:	2900      	cmp	r1, #0
 800b0b0:	461e      	mov	r6, r3
 800b0b2:	b096      	sub	sp, #88	; 0x58
 800b0b4:	da0c      	bge.n	800b0d0 <__swhatbuf_r+0x2c>
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b0be:	bf0c      	ite	eq
 800b0c0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b0c4:	2340      	movne	r3, #64	; 0x40
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	6031      	str	r1, [r6, #0]
 800b0ca:	602b      	str	r3, [r5, #0]
 800b0cc:	b016      	add	sp, #88	; 0x58
 800b0ce:	bd70      	pop	{r4, r5, r6, pc}
 800b0d0:	466a      	mov	r2, sp
 800b0d2:	f000 f863 	bl	800b19c <_fstat_r>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	dbed      	blt.n	800b0b6 <__swhatbuf_r+0x12>
 800b0da:	9901      	ldr	r1, [sp, #4]
 800b0dc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b0e0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b0e4:	4259      	negs	r1, r3
 800b0e6:	4159      	adcs	r1, r3
 800b0e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ec:	e7eb      	b.n	800b0c6 <__swhatbuf_r+0x22>

0800b0ee <__smakebuf_r>:
 800b0ee:	898b      	ldrh	r3, [r1, #12]
 800b0f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0f2:	079d      	lsls	r5, r3, #30
 800b0f4:	4606      	mov	r6, r0
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	d507      	bpl.n	800b10a <__smakebuf_r+0x1c>
 800b0fa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0fe:	6023      	str	r3, [r4, #0]
 800b100:	6123      	str	r3, [r4, #16]
 800b102:	2301      	movs	r3, #1
 800b104:	6163      	str	r3, [r4, #20]
 800b106:	b002      	add	sp, #8
 800b108:	bd70      	pop	{r4, r5, r6, pc}
 800b10a:	466a      	mov	r2, sp
 800b10c:	ab01      	add	r3, sp, #4
 800b10e:	f7ff ffc9 	bl	800b0a4 <__swhatbuf_r>
 800b112:	9900      	ldr	r1, [sp, #0]
 800b114:	4605      	mov	r5, r0
 800b116:	4630      	mov	r0, r6
 800b118:	f7fe fece 	bl	8009eb8 <_malloc_r>
 800b11c:	b948      	cbnz	r0, 800b132 <__smakebuf_r+0x44>
 800b11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b122:	059a      	lsls	r2, r3, #22
 800b124:	d4ef      	bmi.n	800b106 <__smakebuf_r+0x18>
 800b126:	f023 0303 	bic.w	r3, r3, #3
 800b12a:	f043 0302 	orr.w	r3, r3, #2
 800b12e:	81a3      	strh	r3, [r4, #12]
 800b130:	e7e3      	b.n	800b0fa <__smakebuf_r+0xc>
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	6020      	str	r0, [r4, #0]
 800b136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b13a:	81a3      	strh	r3, [r4, #12]
 800b13c:	9b00      	ldr	r3, [sp, #0]
 800b13e:	6120      	str	r0, [r4, #16]
 800b140:	6163      	str	r3, [r4, #20]
 800b142:	9b01      	ldr	r3, [sp, #4]
 800b144:	b15b      	cbz	r3, 800b15e <__smakebuf_r+0x70>
 800b146:	4630      	mov	r0, r6
 800b148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b14c:	f000 f838 	bl	800b1c0 <_isatty_r>
 800b150:	b128      	cbz	r0, 800b15e <__smakebuf_r+0x70>
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	f023 0303 	bic.w	r3, r3, #3
 800b158:	f043 0301 	orr.w	r3, r3, #1
 800b15c:	81a3      	strh	r3, [r4, #12]
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	431d      	orrs	r5, r3
 800b162:	81a5      	strh	r5, [r4, #12]
 800b164:	e7cf      	b.n	800b106 <__smakebuf_r+0x18>

0800b166 <memmove>:
 800b166:	4288      	cmp	r0, r1
 800b168:	b510      	push	{r4, lr}
 800b16a:	eb01 0402 	add.w	r4, r1, r2
 800b16e:	d902      	bls.n	800b176 <memmove+0x10>
 800b170:	4284      	cmp	r4, r0
 800b172:	4623      	mov	r3, r4
 800b174:	d807      	bhi.n	800b186 <memmove+0x20>
 800b176:	1e43      	subs	r3, r0, #1
 800b178:	42a1      	cmp	r1, r4
 800b17a:	d008      	beq.n	800b18e <memmove+0x28>
 800b17c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b180:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b184:	e7f8      	b.n	800b178 <memmove+0x12>
 800b186:	4601      	mov	r1, r0
 800b188:	4402      	add	r2, r0
 800b18a:	428a      	cmp	r2, r1
 800b18c:	d100      	bne.n	800b190 <memmove+0x2a>
 800b18e:	bd10      	pop	{r4, pc}
 800b190:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b194:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b198:	e7f7      	b.n	800b18a <memmove+0x24>
	...

0800b19c <_fstat_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	2300      	movs	r3, #0
 800b1a0:	4d06      	ldr	r5, [pc, #24]	; (800b1bc <_fstat_r+0x20>)
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	4608      	mov	r0, r1
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	602b      	str	r3, [r5, #0]
 800b1aa:	f7f8 fa40 	bl	800362e <_fstat>
 800b1ae:	1c43      	adds	r3, r0, #1
 800b1b0:	d102      	bne.n	800b1b8 <_fstat_r+0x1c>
 800b1b2:	682b      	ldr	r3, [r5, #0]
 800b1b4:	b103      	cbz	r3, 800b1b8 <_fstat_r+0x1c>
 800b1b6:	6023      	str	r3, [r4, #0]
 800b1b8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ba:	bf00      	nop
 800b1bc:	200046dc 	.word	0x200046dc

0800b1c0 <_isatty_r>:
 800b1c0:	b538      	push	{r3, r4, r5, lr}
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	4d05      	ldr	r5, [pc, #20]	; (800b1dc <_isatty_r+0x1c>)
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	4608      	mov	r0, r1
 800b1ca:	602b      	str	r3, [r5, #0]
 800b1cc:	f7f8 fa34 	bl	8003638 <_isatty>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_isatty_r+0x1a>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_isatty_r+0x1a>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	200046dc 	.word	0x200046dc

0800b1e0 <memchr>:
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	b510      	push	{r4, lr}
 800b1e4:	b2c9      	uxtb	r1, r1
 800b1e6:	4402      	add	r2, r0
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	d101      	bne.n	800b1f2 <memchr+0x12>
 800b1ee:	2000      	movs	r0, #0
 800b1f0:	e003      	b.n	800b1fa <memchr+0x1a>
 800b1f2:	7804      	ldrb	r4, [r0, #0]
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	428c      	cmp	r4, r1
 800b1f8:	d1f6      	bne.n	800b1e8 <memchr+0x8>
 800b1fa:	bd10      	pop	{r4, pc}

0800b1fc <_realloc_r>:
 800b1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b200:	4680      	mov	r8, r0
 800b202:	4614      	mov	r4, r2
 800b204:	460e      	mov	r6, r1
 800b206:	b921      	cbnz	r1, 800b212 <_realloc_r+0x16>
 800b208:	4611      	mov	r1, r2
 800b20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b20e:	f7fe be53 	b.w	8009eb8 <_malloc_r>
 800b212:	b92a      	cbnz	r2, 800b220 <_realloc_r+0x24>
 800b214:	f7ff fa26 	bl	800a664 <_free_r>
 800b218:	4625      	mov	r5, r4
 800b21a:	4628      	mov	r0, r5
 800b21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b220:	f000 f81b 	bl	800b25a <_malloc_usable_size_r>
 800b224:	4284      	cmp	r4, r0
 800b226:	4607      	mov	r7, r0
 800b228:	d802      	bhi.n	800b230 <_realloc_r+0x34>
 800b22a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b22e:	d812      	bhi.n	800b256 <_realloc_r+0x5a>
 800b230:	4621      	mov	r1, r4
 800b232:	4640      	mov	r0, r8
 800b234:	f7fe fe40 	bl	8009eb8 <_malloc_r>
 800b238:	4605      	mov	r5, r0
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d0ed      	beq.n	800b21a <_realloc_r+0x1e>
 800b23e:	42bc      	cmp	r4, r7
 800b240:	4622      	mov	r2, r4
 800b242:	4631      	mov	r1, r6
 800b244:	bf28      	it	cs
 800b246:	463a      	movcs	r2, r7
 800b248:	f7ff f9fd 	bl	800a646 <memcpy>
 800b24c:	4631      	mov	r1, r6
 800b24e:	4640      	mov	r0, r8
 800b250:	f7ff fa08 	bl	800a664 <_free_r>
 800b254:	e7e1      	b.n	800b21a <_realloc_r+0x1e>
 800b256:	4635      	mov	r5, r6
 800b258:	e7df      	b.n	800b21a <_realloc_r+0x1e>

0800b25a <_malloc_usable_size_r>:
 800b25a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b25e:	1f18      	subs	r0, r3, #4
 800b260:	2b00      	cmp	r3, #0
 800b262:	bfbc      	itt	lt
 800b264:	580b      	ldrlt	r3, [r1, r0]
 800b266:	18c0      	addlt	r0, r0, r3
 800b268:	4770      	bx	lr
	...

0800b26c <_init>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	bf00      	nop
 800b270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b272:	bc08      	pop	{r3}
 800b274:	469e      	mov	lr, r3
 800b276:	4770      	bx	lr

0800b278 <_fini>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	bf00      	nop
 800b27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b27e:	bc08      	pop	{r3}
 800b280:	469e      	mov	lr, r3
 800b282:	4770      	bx	lr
