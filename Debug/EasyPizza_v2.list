
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e84  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08009f94  08009f94  00019f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5d4  0800a5d4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800a5d4  0800a5d4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a5d4  0800a5d4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5d4  0800a5d4  0001a5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5d8  0800a5d8  0001a5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800a5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fc4  20000060  0800a63c  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003024  0800a63c  00023024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003142e  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006d06  00000000  00000000  000514fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f136  00000000  00000000  00058200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001740  00000000  00000000  00067338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000192f  00000000  00000000  00068a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e19d  00000000  00000000  0006a3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002e8df  00000000  00000000  00088544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a0a32  00000000  00000000  000b6e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005028  00000000  00000000  00157858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0015c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08009f7c 	.word	0x08009f7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08009f7c 	.word	0x08009f7c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <BluetoothAddComp>:
	BluetoothAddComp(ble, &BLERecebeuSenha,     "RX_RECEBEU_SENHA",        	RX_RECEBEU_SENHA,          	ComandoConexao);

	//Return OK
	return 0;
}
uint8_t BluetoothAddComp(Bluetooth* ble, BleComando* _blecomm, char* objectname, uint8_t __comando, TypeComandoBle __tipo){
 8000fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000faa:	4605      	mov	r5, r0
	//Make space before passing the object name to the nexcomp struct
	_blecomm->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8000fac:	4610      	mov	r0, r2
uint8_t BluetoothAddComp(Bluetooth* ble, BleComando* _blecomm, char* objectname, uint8_t __comando, TypeComandoBle __tipo){
 8000fae:	460c      	mov	r4, r1
 8000fb0:	4616      	mov	r6, r2
 8000fb2:	461f      	mov	r7, r3
	_blecomm->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8000fb4:	f7ff f8cc 	bl	8000150 <strlen>
 8000fb8:	3001      	adds	r0, #1
 8000fba:	f008 fa9d 	bl	80094f8 <malloc>
	//Pass the object name to the struct
	strcpy(_blecomm->objname, objectname);
 8000fbe:	4631      	mov	r1, r6
	_blecomm->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8000fc0:	6060      	str	r0, [r4, #4]
	strcpy(_blecomm->objname, objectname);
 8000fc2:	f008 fc31 	bl	8009828 <strcpy>

	//Pass the corresponding data from component to component struct
	_blecomm->_comando = __comando;
	_blecomm->_tipo = __tipo;
 8000fc6:	f89d 3018 	ldrb.w	r3, [sp, #24]
	_blecomm->_comando = __comando;
 8000fca:	7027      	strb	r7, [r4, #0]
	_blecomm->_tipo = __tipo;
 8000fcc:	7063      	strb	r3, [r4, #1]

	//Add the component struct to the list on the Nextion Struct
	ble->_BleCommArr[ble->_BleCommCount] = _blecomm;
 8000fce:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
	ble->_BleCommCount++;

	//Return OK
	return 0;
}
 8000fd2:	2000      	movs	r0, #0
	ble->_BleCommArr[ble->_BleCommCount] = _blecomm;
 8000fd4:	f103 0222 	add.w	r2, r3, #34	; 0x22
	ble->_BleCommCount++;
 8000fd8:	3301      	adds	r3, #1
	ble->_BleCommArr[ble->_BleCommCount] = _blecomm;
 8000fda:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
	ble->_BleCommCount++;
 8000fde:	f885 313c 	strb.w	r3, [r5, #316]	; 0x13c
}
 8000fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000fe4 <BluetoothInit>:
uint8_t BluetoothInit(Bluetooth *ble, UART_HandleTypeDef *bluetoothUARTHandle, DMA_HandleTypeDef *bluetoothUARTDMAHandle, osMessageQId *filaRX, osMessageQId *filaTX){
 8000fe4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ble->filaComandosRX = filaRX;
 8000fe6:	6283      	str	r3, [r0, #40]	; 0x28
	UARTHandle 			= ble->UARTHandle;
 8000fe8:	4d0f      	ldr	r5, [pc, #60]	; (8001028 <BluetoothInit+0x44>)
	ble->filaComandosTX = filaTX;
 8000fea:	9b06      	ldr	r3, [sp, #24]
	ble->UARTDMAHandle 	= bluetoothUARTDMAHandle;
 8000fec:	e9c0 1200 	strd	r1, r2, [r0]
	BluetoothAddComp(ble, &BLEPedeSenha,   		"RX_PEDE_SENHA",  			RX_PEDE_SENHA,   			ComandoConexao);
 8000ff0:	2602      	movs	r6, #2
	UARTHandle 			= ble->UARTHandle;
 8000ff2:	6029      	str	r1, [r5, #0]
	ble->filaComandosTX = filaTX;
 8000ff4:	62c3      	str	r3, [r0, #44]	; 0x2c
	ble->_BleCommCount  = 0;
 8000ff6:	2500      	movs	r5, #0
	ble->JanelaConexao = 120;//120 segundos
 8000ff8:	2378      	movs	r3, #120	; 0x78
uint8_t BluetoothInit(Bluetooth *ble, UART_HandleTypeDef *bluetoothUARTHandle, DMA_HandleTypeDef *bluetoothUARTDMAHandle, osMessageQId *filaRX, osMessageQId *filaTX){
 8000ffa:	4604      	mov	r4, r0
	UARTDMAHandle 		= ble->UARTDMAHandle;
 8000ffc:	490b      	ldr	r1, [pc, #44]	; (800102c <BluetoothInit+0x48>)
	ble->_BleCommCount  = 0;
 8000ffe:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
	UARTDMAHandle 		= ble->UARTDMAHandle;
 8001002:	600a      	str	r2, [r1, #0]
	ble->JanelaConexao = 120;//120 segundos
 8001004:	f880 3053 	strb.w	r3, [r0, #83]	; 0x53
	BluetoothAddComp(ble, &BLEPedeSenha,   		"RX_PEDE_SENHA",  			RX_PEDE_SENHA,   			ComandoConexao);
 8001008:	4a09      	ldr	r2, [pc, #36]	; (8001030 <BluetoothInit+0x4c>)
 800100a:	2342      	movs	r3, #66	; 0x42
 800100c:	4909      	ldr	r1, [pc, #36]	; (8001034 <BluetoothInit+0x50>)
 800100e:	9600      	str	r6, [sp, #0]
 8001010:	f7ff ffca 	bl	8000fa8 <BluetoothAddComp>
	BluetoothAddComp(ble, &BLERecebeuSenha,     "RX_RECEBEU_SENHA",        	RX_RECEBEU_SENHA,          	ComandoConexao);
 8001014:	2340      	movs	r3, #64	; 0x40
 8001016:	4620      	mov	r0, r4
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <BluetoothInit+0x54>)
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <BluetoothInit+0x58>)
 800101c:	9600      	str	r6, [sp, #0]
 800101e:	f7ff ffc3 	bl	8000fa8 <BluetoothAddComp>
}
 8001022:	4628      	mov	r0, r5
 8001024:	b002      	add	sp, #8
 8001026:	bd70      	pop	{r4, r5, r6, pc}
 8001028:	20000094 	.word	0x20000094
 800102c:	20000090 	.word	0x20000090
 8001030:	0800a050 	.word	0x0800a050
 8001034:	2000007c 	.word	0x2000007c
 8001038:	0800a05e 	.word	0x0800a05e
 800103c:	20000084 	.word	0x20000084

08001040 <Envia_bytes_UART>:
	TX_Buffer[size+2] = (unsigned char) (CRCVar >> 8);
	TX_Buffer[size+1] = (unsigned char) (CRCVar & 0x00FF);

	Envia_bytes_UART((uint8_t *)TX_Buffer,size+3);
}
void Envia_bytes_UART(unsigned char _out[], uint8_t size){
 8001040:	460a      	mov	r2, r1
	HAL_UART_Transmit(UARTHandle, (uint8_t *)_out, size,50);
 8001042:	4601      	mov	r1, r0
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <Envia_bytes_UART+0x10>)
 8001046:	2332      	movs	r3, #50	; 0x32
 8001048:	6800      	ldr	r0, [r0, #0]
 800104a:	f005 bd92 	b.w	8006b72 <HAL_UART_Transmit>
 800104e:	bf00      	nop
 8001050:	20000094 	.word	0x20000094

08001054 <Envia_texto_UART>:
}
void Envia_texto_UART(char _out[], uint16_t delay){
 8001054:	b538      	push	{r3, r4, r5, lr}
 8001056:	460c      	mov	r4, r1
 8001058:	4605      	mov	r5, r0
	HAL_UART_Transmit(UARTHandle, (uint8_t *) _out, strlen(_out),100);
 800105a:	f7ff f879 	bl	8000150 <strlen>
 800105e:	b282      	uxth	r2, r0
 8001060:	4806      	ldr	r0, [pc, #24]	; (800107c <Envia_texto_UART+0x28>)
 8001062:	2364      	movs	r3, #100	; 0x64
 8001064:	4629      	mov	r1, r5
 8001066:	6800      	ldr	r0, [r0, #0]
 8001068:	f005 fd83 	bl	8006b72 <HAL_UART_Transmit>
	if(delay != 0){
 800106c:	b124      	cbz	r4, 8001078 <Envia_texto_UART+0x24>
		osDelay(delay);
 800106e:	4620      	mov	r0, r4
	}
}
 8001070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		osDelay(delay);
 8001074:	f006 b94a 	b.w	800730c <osDelay>
}
 8001078:	bd38      	pop	{r3, r4, r5, pc}
 800107a:	bf00      	nop
 800107c:	20000094 	.word	0x20000094

08001080 <CRC16>:
			0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
			0x40
	};

	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001080:	23ff      	movs	r3, #255	; 0xff
{
 8001082:	b570      	push	{r4, r5, r6, lr}
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001084:	461c      	mov	r4, r3
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001086:	4d07      	ldr	r5, [pc, #28]	; (80010a4 <CRC16+0x24>)
		uchCRCHi = auchCRCLo[uIndex] ;
 8001088:	4e07      	ldr	r6, [pc, #28]	; (80010a8 <CRC16+0x28>)
 800108a:	4401      	add	r1, r0
	while (usDataLen--) /* pass through message buffer */
 800108c:	4281      	cmp	r1, r0
 800108e:	d102      	bne.n	8001096 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
}//---END---//
 8001090:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 8001094:	bd70      	pop	{r4, r5, r6, pc}
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800109a:	405a      	eors	r2, r3
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800109c:	5cab      	ldrb	r3, [r5, r2]
 800109e:	4063      	eors	r3, r4
		uchCRCHi = auchCRCLo[uIndex] ;
 80010a0:	5cb4      	ldrb	r4, [r6, r2]
 80010a2:	e7f3      	b.n	800108c <CRC16+0xc>
 80010a4:	0800a10d 	.word	0x0800a10d
 80010a8:	0800a20d 	.word	0x0800a20d

080010ac <BluetoothEnviaComando>:
{
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	4605      	mov	r5, r0
	uint8_t	TX_Buffer		[size+3];
 80010b0:	f101 030a 	add.w	r3, r1, #10
 80010b4:	f023 0307 	bic.w	r3, r3, #7
{
 80010b8:	af00      	add	r7, sp, #0
		TX_Buffer[i]=_out[i];
 80010ba:	1c4e      	adds	r6, r1, #1
	uint8_t	TX_Buffer		[size+3];
 80010bc:	ebad 0d03 	sub.w	sp, sp, r3
		TX_Buffer[i]=_out[i];
 80010c0:	1c4b      	adds	r3, r1, #1
 80010c2:	bfac      	ite	ge
 80010c4:	4632      	movge	r2, r6
 80010c6:	2200      	movlt	r2, #0
{
 80010c8:	460c      	mov	r4, r1
		TX_Buffer[i]=_out[i];
 80010ca:	4601      	mov	r1, r0
 80010cc:	4668      	mov	r0, sp
 80010ce:	f008 fbb3 	bl	8009838 <memcpy>
	CRCVar = CRC16(_out,size+1);
 80010d2:	b2b1      	uxth	r1, r6
 80010d4:	4628      	mov	r0, r5
 80010d6:	f7ff ffd3 	bl	8001080 <CRC16>
	TX_Buffer[size+2] = (unsigned char) (CRCVar >> 8);
 80010da:	eb0d 0304 	add.w	r3, sp, r4
 80010de:	0a02      	lsrs	r2, r0, #8
	Envia_bytes_UART((uint8_t *)TX_Buffer,size+3);
 80010e0:	1ce1      	adds	r1, r4, #3
	TX_Buffer[size+2] = (unsigned char) (CRCVar >> 8);
 80010e2:	709a      	strb	r2, [r3, #2]
	Envia_bytes_UART((uint8_t *)TX_Buffer,size+3);
 80010e4:	b2c9      	uxtb	r1, r1
	TX_Buffer[size+1] = (unsigned char) (CRCVar & 0x00FF);
 80010e6:	f80d 0006 	strb.w	r0, [sp, r6]
	Envia_bytes_UART((uint8_t *)TX_Buffer,size+3);
 80010ea:	4668      	mov	r0, sp
 80010ec:	f7ff ffa8 	bl	8001040 <Envia_bytes_UART>
}
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080010f4 <avaliaSenhaRecebidaBluetooh>:
void avaliaSenhaRecebidaBluetooh(Bluetooth* ble){
 80010f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(		ble->_RxDataArr[3] == (ble->chave >> 8) &&
 80010f6:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80010fa:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 80010fe:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
 8001102:	d110      	bne.n	8001126 <avaliaSenhaRecebidaBluetooh+0x32>
			ble->_RxDataArr[4] == (ble->chave & 0x00ff) ){
 8001104:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8001108:	b2db      	uxtb	r3, r3
	if(		ble->_RxDataArr[3] == (ble->chave >> 8) &&
 800110a:	429a      	cmp	r2, r3
 800110c:	d10b      	bne.n	8001126 <avaliaSenhaRecebidaBluetooh+0x32>
		ble->MaquinaConexao	= RX_VALIDADO;
 800110e:	2302      	movs	r3, #2
 8001110:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
		Buffer[0] 	= 0x01;									// ENDEREÇO
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <avaliaSenhaRecebidaBluetooh+0x50>)
		BluetoothEnviaComando(Buffer, 3);
 8001116:	2103      	movs	r1, #3
 8001118:	a801      	add	r0, sp, #4
		Buffer[0] 	= 0x01;									// ENDEREÇO
 800111a:	9301      	str	r3, [sp, #4]
		BluetoothEnviaComando(Buffer, 3);
 800111c:	f7ff ffc6 	bl	80010ac <BluetoothEnviaComando>
}
 8001120:	b007      	add	sp, #28
 8001122:	f85d fb04 	ldr.w	pc, [sp], #4
		Buffer[0] 	= 0x01;									// ENDEREÇO
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <avaliaSenhaRecebidaBluetooh+0x54>)
		BluetoothEnviaComando(Buffer, 3);
 8001128:	2103      	movs	r1, #3
 800112a:	a801      	add	r0, sp, #4
		Buffer[0] 	= 0x01;									// ENDEREÇO
 800112c:	9301      	str	r3, [sp, #4]
		BluetoothEnviaComando(Buffer, 3);
 800112e:	f7ff ffbd 	bl	80010ac <BluetoothEnviaComando>
		osDelay(30);
 8001132:	201e      	movs	r0, #30
 8001134:	f006 f8ea 	bl	800730c <osDelay>
		Envia_texto_UART("AT",50);//DESCONECTA
 8001138:	2132      	movs	r1, #50	; 0x32
 800113a:	4804      	ldr	r0, [pc, #16]	; (800114c <avaliaSenhaRecebidaBluetooh+0x58>)
 800113c:	f7ff ff8a 	bl	8001054 <Envia_texto_UART>
}
 8001140:	e7ee      	b.n	8001120 <avaliaSenhaRecebidaBluetooh+0x2c>
 8001142:	bf00      	nop
 8001144:	01525201 	.word	0x01525201
 8001148:	00525201 	.word	0x00525201
 800114c:	0800a06f 	.word	0x0800a06f

08001150 <solicitacaoSenhaBluetooh>:
void solicitacaoSenhaBluetooh(Bluetooth* ble){
 8001150:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(ble->JanelaConexao > 0){
 8001152:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
 8001156:	b16b      	cbz	r3, 8001174 <solicitacaoSenhaBluetooh+0x24>
 8001158:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
		Buffer[0] 	= 0x01;									// ENDEREÇO
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <solicitacaoSenhaBluetooh+0x28>)
 800115e:	ba5b      	rev16	r3, r3
		BluetoothEnviaComando(Buffer, 5);
 8001160:	2105      	movs	r1, #5
 8001162:	a801      	add	r0, sp, #4
		Buffer[0] 	= 0x01;									// ENDEREÇO
 8001164:	9201      	str	r2, [sp, #4]
		Buffer[4] 	= 0x00;
 8001166:	f8ad 3008 	strh.w	r3, [sp, #8]
		BluetoothEnviaComando(Buffer, 5);
 800116a:	f7ff ff9f 	bl	80010ac <BluetoothEnviaComando>
}
 800116e:	b007      	add	sp, #28
 8001170:	f85d fb04 	ldr.w	pc, [sp], #4
		Buffer[0] 	= 0x01;									// ENDEREÇO
 8001174:	4a01      	ldr	r2, [pc, #4]	; (800117c <solicitacaoSenhaBluetooh+0x2c>)
 8001176:	e7f3      	b.n	8001160 <solicitacaoSenhaBluetooh+0x10>
 8001178:	01515101 	.word	0x01515101
 800117c:	00515101 	.word	0x00515101

08001180 <iniciaBleHm10>:
void iniciaBleHm10(Bluetooth* ble){
 8001180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		redefineBle=2,
		capturaAddr=3,
		final=4,
		erro=5,
	} sequenciaBle;
	sequenciaBle sequenciaBLE = inicio;
 8001184:	2300      	movs	r3, #0
void iniciaBleHm10(Bluetooth* ble){
 8001186:	4604      	mov	r4, r0
			sequenciaBLE = capturaAddr;
			break;
		case capturaAddr:
			static uint8_t tryingAddr=0;

			while (tryingAddr < max_attempts) {
 8001188:	4eb8      	ldr	r6, [pc, #736]	; (800146c <iniciaBleHm10+0x2ec>)

				Envia_texto_UART("AT+ADDR?",300);//pede addr
 800118a:	4fb9      	ldr	r7, [pc, #740]	; (8001470 <iniciaBleHm10+0x2f0>)
void iniciaBleHm10(Bluetooth* ble){
 800118c:	b08e      	sub	sp, #56	; 0x38
		switch (sequenciaBLE) {
 800118e:	3b01      	subs	r3, #1
 8001190:	2b03      	cmp	r3, #3
 8001192:	d805      	bhi.n	80011a0 <iniciaBleHm10+0x20>
 8001194:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001198:	00680040 	.word	0x00680040
 800119c:	01430123 	.word	0x01430123
			SETUP_UART(115200)
 80011a0:	4db4      	ldr	r5, [pc, #720]	; (8001474 <iniciaBleHm10+0x2f4>)
			osDelay(50);
 80011a2:	2032      	movs	r0, #50	; 0x32
 80011a4:	f006 f8b2 	bl	800730c <osDelay>
			SETUP_UART(115200)
 80011a8:	6828      	ldr	r0, [r5, #0]
 80011aa:	f005 fd67 	bl	8006c7c <HAL_UART_Abort_IT>
 80011ae:	6828      	ldr	r0, [r5, #0]
 80011b0:	f005 fcc5 	bl	8006b3e <HAL_UART_DeInit>
 80011b4:	2032      	movs	r0, #50	; 0x32
 80011b6:	f006 f8a9 	bl	800730c <osDelay>
 80011ba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011be:	6828      	ldr	r0, [r5, #0]
 80011c0:	6043      	str	r3, [r0, #4]
 80011c2:	f005 fc8d 	bl	8006ae0 <HAL_UART_Init>
 80011c6:	2032      	movs	r0, #50	; 0x32
 80011c8:	f006 f8a0 	bl	800730c <osDelay>
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d2:	48a9      	ldr	r0, [pc, #676]	; (8001478 <iniciaBleHm10+0x2f8>)
 80011d4:	f003 fdc6 	bl	8004d64 <HAL_GPIO_WritePin>
 80011d8:	20c8      	movs	r0, #200	; 0xc8
 80011da:	f006 f897 	bl	800730c <osDelay>
 80011de:	2201      	movs	r2, #1
 80011e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e4:	48a4      	ldr	r0, [pc, #656]	; (8001478 <iniciaBleHm10+0x2f8>)
 80011e6:	f003 fdbd 	bl	8004d64 <HAL_GPIO_WritePin>
			Envia_texto_UART("AT+ADTY3",300);	//BLOQUEIA CONEXAO
 80011ea:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80011ee:	48a3      	ldr	r0, [pc, #652]	; (800147c <iniciaBleHm10+0x2fc>)
 80011f0:	f7ff ff30 	bl	8001054 <Envia_texto_UART>
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);							// HABILITA idle line INTERRUPT
 80011f4:	6828      	ldr	r0, [r5, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 80011f6:	f104 0130 	add.w	r1, r4, #48	; 0x30
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);							// HABILITA idle line INTERRUPT
 80011fa:	6802      	ldr	r2, [r0, #0]
 80011fc:	68d3      	ldr	r3, [r2, #12]
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	60d3      	str	r3, [r2, #12]
			__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);							// HABILITA O DMA Tx cplt INTERRUPT
 8001204:	4b9e      	ldr	r3, [pc, #632]	; (8001480 <iniciaBleHm10+0x300>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	6813      	ldr	r3, [r2, #0]
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 8001212:	2240      	movs	r2, #64	; 0x40
 8001214:	f006 f830 	bl	8007278 <HAL_UART_Receive_DMA>
			while (tryingName < max_attempts) {
 8001218:	4d9a      	ldr	r5, [pc, #616]	; (8001484 <iniciaBleHm10+0x304>)
 800121a:	782b      	ldrb	r3, [r5, #0]
 800121c:	2b04      	cmp	r3, #4
 800121e:	f200 80fa 	bhi.w	8001416 <iniciaBleHm10+0x296>
				Envia_texto_UART("AT+NAME?", 100);
 8001222:	2164      	movs	r1, #100	; 0x64
 8001224:	4898      	ldr	r0, [pc, #608]	; (8001488 <iniciaBleHm10+0x308>)
 8001226:	f7ff ff15 	bl	8001054 <Envia_texto_UART>
				osDelay(delay_between_attempts_ms);
 800122a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122e:	f006 f86d 	bl	800730c <osDelay>
				ble->ss = NULL;
 8001232:	2300      	movs	r3, #0
				ble->ss = strstr(ble->StringRecebida, "NAME");
 8001234:	f104 085c 	add.w	r8, r4, #92	; 0x5c
 8001238:	4640      	mov	r0, r8
 800123a:	4994      	ldr	r1, [pc, #592]	; (800148c <iniciaBleHm10+0x30c>)
				ble->ss = NULL;
 800123c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				ble->ss = strstr(ble->StringRecebida, "NAME");
 8001240:	f008 fa4a 	bl	80096d8 <strstr>
 8001244:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
				if (ble->ss != NULL){
 8001248:	2800      	cmp	r0, #0
 800124a:	f000 80e1 	beq.w	8001410 <iniciaBleHm10+0x290>
					ble->ss = strstr(ble->StringRecebida, BLE_DEVICE_NAME);
 800124e:	4640      	mov	r0, r8
 8001250:	498f      	ldr	r1, [pc, #572]	; (8001490 <iniciaBleHm10+0x310>)
 8001252:	f008 fa41 	bl	80096d8 <strstr>
						sequenciaBLE = redefineBle;
 8001256:	2800      	cmp	r0, #0
 8001258:	bf14      	ite	ne
 800125a:	2303      	movne	r3, #3
 800125c:	2302      	moveq	r3, #2
					ble->ss = strstr(ble->StringRecebida, BLE_DEVICE_NAME);
 800125e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
			if(tryingName >= max_attempts)
 8001262:	782a      	ldrb	r2, [r5, #0]
 8001264:	2a04      	cmp	r2, #4
 8001266:	d992      	bls.n	800118e <iniciaBleHm10+0xe>
			SETUP_UART(115200)
 8001268:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
			taskENTER_CRITICAL();
 800126c:	f007 ff4a 	bl	8009104 <vPortEnterCritical>
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001276:	4880      	ldr	r0, [pc, #512]	; (8001478 <iniciaBleHm10+0x2f8>)
 8001278:	f003 fd74 	bl	8004d64 <HAL_GPIO_WritePin>
 800127c:	20c8      	movs	r0, #200	; 0xc8
			SETUP_UART(115200)
 800127e:	4d7d      	ldr	r5, [pc, #500]	; (8001474 <iniciaBleHm10+0x2f4>)
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 8001280:	f006 f844 	bl	800730c <osDelay>
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128a:	487b      	ldr	r0, [pc, #492]	; (8001478 <iniciaBleHm10+0x2f8>)
 800128c:	f003 fd6a 	bl	8004d64 <HAL_GPIO_WritePin>
			osDelay(100);
 8001290:	2064      	movs	r0, #100	; 0x64
 8001292:	f006 f83b 	bl	800730c <osDelay>
			SETUP_UART(115200)
 8001296:	6828      	ldr	r0, [r5, #0]
 8001298:	f005 fcf0 	bl	8006c7c <HAL_UART_Abort_IT>
 800129c:	6828      	ldr	r0, [r5, #0]
 800129e:	f005 fc4e 	bl	8006b3e <HAL_UART_DeInit>
 80012a2:	2032      	movs	r0, #50	; 0x32
 80012a4:	f006 f832 	bl	800730c <osDelay>
 80012a8:	6828      	ldr	r0, [r5, #0]
 80012aa:	f8c0 8004 	str.w	r8, [r0, #4]
 80012ae:	f005 fc17 	bl	8006ae0 <HAL_UART_Init>
 80012b2:	2032      	movs	r0, #50	; 0x32
 80012b4:	f006 f82a 	bl	800730c <osDelay>
			Envia_texto_UART("AT",100);	//
 80012b8:	2164      	movs	r1, #100	; 0x64
 80012ba:	4876      	ldr	r0, [pc, #472]	; (8001494 <iniciaBleHm10+0x314>)
 80012bc:	f7ff feca 	bl	8001054 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 80012c0:	2164      	movs	r1, #100	; 0x64
 80012c2:	4874      	ldr	r0, [pc, #464]	; (8001494 <iniciaBleHm10+0x314>)
 80012c4:	f7ff fec6 	bl	8001054 <Envia_texto_UART>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 80012c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012cc:	4872      	ldr	r0, [pc, #456]	; (8001498 <iniciaBleHm10+0x318>)
 80012ce:	f7ff fec1 	bl	8001054 <Envia_texto_UART>
			SETUP_UART(9600)
 80012d2:	6828      	ldr	r0, [r5, #0]
 80012d4:	f005 fcd2 	bl	8006c7c <HAL_UART_Abort_IT>
 80012d8:	6828      	ldr	r0, [r5, #0]
 80012da:	f005 fc30 	bl	8006b3e <HAL_UART_DeInit>
 80012de:	2032      	movs	r0, #50	; 0x32
 80012e0:	f006 f814 	bl	800730c <osDelay>
 80012e4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80012e8:	6828      	ldr	r0, [r5, #0]
 80012ea:	6043      	str	r3, [r0, #4]
 80012ec:	f005 fbf8 	bl	8006ae0 <HAL_UART_Init>
 80012f0:	2032      	movs	r0, #50	; 0x32
 80012f2:	f006 f80b 	bl	800730c <osDelay>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 80012f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012fa:	4867      	ldr	r0, [pc, #412]	; (8001498 <iniciaBleHm10+0x318>)
 80012fc:	f7ff feaa 	bl	8001054 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 8001300:	2164      	movs	r1, #100	; 0x64
 8001302:	4864      	ldr	r0, [pc, #400]	; (8001494 <iniciaBleHm10+0x314>)
 8001304:	f7ff fea6 	bl	8001054 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 8001308:	2164      	movs	r1, #100	; 0x64
 800130a:	4862      	ldr	r0, [pc, #392]	; (8001494 <iniciaBleHm10+0x314>)
 800130c:	f7ff fea2 	bl	8001054 <Envia_texto_UART>
			Envia_texto_UART("AT+ADTY3",300);	//BLOQUEIA CONEXAO
 8001310:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001314:	4859      	ldr	r0, [pc, #356]	; (800147c <iniciaBleHm10+0x2fc>)
 8001316:	f7ff fe9d 	bl	8001054 <Envia_texto_UART>
			Envia_texto_UART("AT+BAUD4",300);	//COLOCA BAUD EM 115200
 800131a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800131e:	485f      	ldr	r0, [pc, #380]	; (800149c <iniciaBleHm10+0x31c>)
 8001320:	f7ff fe98 	bl	8001054 <Envia_texto_UART>
			SETUP_UART(115200)
 8001324:	6828      	ldr	r0, [r5, #0]
 8001326:	f005 fca9 	bl	8006c7c <HAL_UART_Abort_IT>
 800132a:	6828      	ldr	r0, [r5, #0]
 800132c:	f005 fc07 	bl	8006b3e <HAL_UART_DeInit>
 8001330:	2032      	movs	r0, #50	; 0x32
 8001332:	f005 ffeb 	bl	800730c <osDelay>
 8001336:	6828      	ldr	r0, [r5, #0]
 8001338:	f8c0 8004 	str.w	r8, [r0, #4]
 800133c:	f005 fbd0 	bl	8006ae0 <HAL_UART_Init>
 8001340:	2032      	movs	r0, #50	; 0x32
 8001342:	f005 ffe3 	bl	800730c <osDelay>
			MACRO_RESET_BLE
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800134c:	484a      	ldr	r0, [pc, #296]	; (8001478 <iniciaBleHm10+0x2f8>)
 800134e:	f003 fd09 	bl	8004d64 <HAL_GPIO_WritePin>
 8001352:	20c8      	movs	r0, #200	; 0xc8
 8001354:	f005 ffda 	bl	800730c <osDelay>
 8001358:	2201      	movs	r2, #1
 800135a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800135e:	4846      	ldr	r0, [pc, #280]	; (8001478 <iniciaBleHm10+0x2f8>)
 8001360:	f003 fd00 	bl	8004d64 <HAL_GPIO_WritePin>
			Envia_texto_UART("AT",100);	//
 8001364:	2164      	movs	r1, #100	; 0x64
 8001366:	484b      	ldr	r0, [pc, #300]	; (8001494 <iniciaBleHm10+0x314>)
 8001368:	f7ff fe74 	bl	8001054 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 800136c:	2164      	movs	r1, #100	; 0x64
 800136e:	4849      	ldr	r0, [pc, #292]	; (8001494 <iniciaBleHm10+0x314>)
 8001370:	f7ff fe70 	bl	8001054 <Envia_texto_UART>
			Envia_texto_UART("AT+POWE3",300);	//POTENCIA MAXIMA
 8001374:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001378:	4849      	ldr	r0, [pc, #292]	; (80014a0 <iniciaBleHm10+0x320>)
 800137a:	f7ff fe6b 	bl	8001054 <Envia_texto_UART>
			Envia_texto_UART("AT+SHOW3",300);	//MOSTRA O NOME e rssi
 800137e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001382:	4848      	ldr	r0, [pc, #288]	; (80014a4 <iniciaBleHm10+0x324>)
 8001384:	f7ff fe66 	bl	8001054 <Envia_texto_UART>
			Envia_texto_UART("AT+GAIN1",300);	//INSERE GANHO
 8001388:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800138c:	4846      	ldr	r0, [pc, #280]	; (80014a8 <iniciaBleHm10+0x328>)
 800138e:	f7ff fe61 	bl	8001054 <Envia_texto_UART>
			Envia_texto_UART("AT+NOTI1",300);	//NOTIFICA QUE CONECTOU
 8001392:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001396:	4845      	ldr	r0, [pc, #276]	; (80014ac <iniciaBleHm10+0x32c>)
 8001398:	f7ff fe5c 	bl	8001054 <Envia_texto_UART>
			Envia_texto_UART("AT+PIO11",300);	//1 - CONECT = 1  \  DISC = 0
 800139c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80013a0:	4843      	ldr	r0, [pc, #268]	; (80014b0 <iniciaBleHm10+0x330>)
 80013a2:	f7ff fe57 	bl	8001054 <Envia_texto_UART>
			M_BLE_RESET
 80013a6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80013aa:	4842      	ldr	r0, [pc, #264]	; (80014b4 <iniciaBleHm10+0x334>)
 80013ac:	f7ff fe52 	bl	8001054 <Envia_texto_UART>
			snprintf(comando, sizeof(comando), "AT+NAME%s", BLE_DEVICE_NAME);
 80013b0:	4b37      	ldr	r3, [pc, #220]	; (8001490 <iniciaBleHm10+0x310>)
 80013b2:	4a41      	ldr	r2, [pc, #260]	; (80014b8 <iniciaBleHm10+0x338>)
 80013b4:	2132      	movs	r1, #50	; 0x32
 80013b6:	a801      	add	r0, sp, #4
 80013b8:	f008 f952 	bl	8009660 <sniprintf>
			Envia_texto_UART(comando, 400); // Configura o nome no dispositivo
 80013bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80013c0:	a801      	add	r0, sp, #4
 80013c2:	f7ff fe47 	bl	8001054 <Envia_texto_UART>
			Envia_texto_UART("AT+ADTY0",300);	//DESBLOQUEIA CONEXA
 80013c6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80013ca:	483c      	ldr	r0, [pc, #240]	; (80014bc <iniciaBleHm10+0x33c>)
 80013cc:	f7ff fe42 	bl	8001054 <Envia_texto_UART>
			M_BLE_RESET
 80013d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80013d4:	4837      	ldr	r0, [pc, #220]	; (80014b4 <iniciaBleHm10+0x334>)
 80013d6:	f7ff fe3d 	bl	8001054 <Envia_texto_UART>
			taskEXIT_CRITICAL();
 80013da:	f007 feb3 	bl	8009144 <vPortExitCritical>
			while (tryingAddr < max_attempts) {
 80013de:	7833      	ldrb	r3, [r6, #0]
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d80e      	bhi.n	8001402 <iniciaBleHm10+0x282>
				Envia_texto_UART("AT+ADDR?",300);//pede addr
 80013e4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80013e8:	4638      	mov	r0, r7
 80013ea:	f7ff fe33 	bl	8001054 <Envia_texto_UART>
				osDelay(delay_between_attempts_ms);
 80013ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f2:	f005 ff8b 	bl	800730c <osDelay>

				if (ble->chave != 0){
 80013f6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80013fa:	b973      	cbnz	r3, 800141a <iniciaBleHm10+0x29a>
					sequenciaBLE = final;
					break;
				} else {
					tryingAddr++;
 80013fc:	7833      	ldrb	r3, [r6, #0]
 80013fe:	3301      	adds	r3, #1
 8001400:	7033      	strb	r3, [r6, #0]
					break;
 8001402:	2303      	movs	r3, #3
				}
			}

			if(tryingAddr >= max_attempts)
 8001404:	7832      	ldrb	r2, [r6, #0]
 8001406:	2a04      	cmp	r2, #4
 8001408:	f67f aec1 	bls.w	800118e <iniciaBleHm10+0xe>
			taskEXIT_CRITICAL();
			return;
			break;
		case erro:
			//			sequenciaBLE = final;
			__NOP();
 800140c:	bf00      	nop
		switch (sequenciaBLE) {
 800140e:	e7fd      	b.n	800140c <iniciaBleHm10+0x28c>
					tryingName++;
 8001410:	782b      	ldrb	r3, [r5, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	702b      	strb	r3, [r5, #0]
					break;
 8001416:	2301      	movs	r3, #1
 8001418:	e723      	b.n	8001262 <iniciaBleHm10+0xe2>
					sequenciaBLE = final;
 800141a:	2304      	movs	r3, #4
 800141c:	e7f2      	b.n	8001404 <iniciaBleHm10+0x284>
			taskENTER_CRITICAL();
 800141e:	f007 fe71 	bl	8009104 <vPortEnterCritical>
			Envia_texto_UART("AT+ADTY0",300);	//DESBLOQUEIA CONEXA
 8001422:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001426:	4825      	ldr	r0, [pc, #148]	; (80014bc <iniciaBleHm10+0x33c>)
 8001428:	f7ff fe14 	bl	8001054 <Envia_texto_UART>
			M_BLE_RESET
 800142c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001430:	4820      	ldr	r0, [pc, #128]	; (80014b4 <iniciaBleHm10+0x334>)
 8001432:	f7ff fe0f 	bl	8001054 <Envia_texto_UART>
			ble->SistemaInit = 1;
 8001436:	2301      	movs	r3, #1
 8001438:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <iniciaBleHm10+0x2f4>)
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 800143e:	f104 0130 	add.w	r1, r4, #48	; 0x30
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	6802      	ldr	r2, [r0, #0]
 8001446:	68d3      	ldr	r3, [r2, #12]
 8001448:	f043 0310 	orr.w	r3, r3, #16
 800144c:	60d3      	str	r3, [r2, #12]
			__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <iniciaBleHm10+0x300>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	6813      	ldr	r3, [r2, #0]
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 800145c:	2240      	movs	r2, #64	; 0x40
 800145e:	f005 ff0b 	bl	8007278 <HAL_UART_Receive_DMA>
			break;
		default:
			break;
		}
	}
}
 8001462:	b00e      	add	sp, #56	; 0x38
 8001464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			taskEXIT_CRITICAL();
 8001468:	f007 be6c 	b.w	8009144 <vPortExitCritical>
 800146c:	200000b0 	.word	0x200000b0
 8001470:	0800a0ee 	.word	0x0800a0ee
 8001474:	20000094 	.word	0x20000094
 8001478:	40010c00 	.word	0x40010c00
 800147c:	0800a072 	.word	0x0800a072
 8001480:	20000090 	.word	0x20000090
 8001484:	200000b1 	.word	0x200000b1
 8001488:	0800a07b 	.word	0x0800a07b
 800148c:	0800a084 	.word	0x0800a084
 8001490:	0800a089 	.word	0x0800a089
 8001494:	0800a06f 	.word	0x0800a06f
 8001498:	0800a093 	.word	0x0800a093
 800149c:	0800a09c 	.word	0x0800a09c
 80014a0:	0800a0a5 	.word	0x0800a0a5
 80014a4:	0800a0ae 	.word	0x0800a0ae
 80014a8:	0800a0b7 	.word	0x0800a0b7
 80014ac:	0800a0c0 	.word	0x0800a0c0
 80014b0:	0800a0c9 	.word	0x0800a0c9
 80014b4:	0800a0d2 	.word	0x0800a0d2
 80014b8:	0800a0db 	.word	0x0800a0db
 80014bc:	0800a0e5 	.word	0x0800a0e5

080014c0 <BluetoothErroCRC>:
void BluetoothErroCRC(void)
{
	unsigned char	TXCRC[3];
	TXCRC[0] = 0x01;\
 80014c0:	f64e 6301 	movw	r3, #60929	; 0xee01
{
 80014c4:	b507      	push	{r0, r1, r2, lr}
	TXCRC[0] = 0x01;\
 80014c6:	f8ad 3004 	strh.w	r3, [sp, #4]
	TXCRC[1] = 0xEE;\
	TXCRC[2] = 0xEE;\
 80014ca:	23ee      	movs	r3, #238	; 0xee
	Envia_bytes_UART(TXCRC,3);
 80014cc:	2103      	movs	r1, #3
 80014ce:	a801      	add	r0, sp, #4
	TXCRC[2] = 0xEE;\
 80014d0:	f88d 3006 	strb.w	r3, [sp, #6]
	Envia_bytes_UART(TXCRC,3);
 80014d4:	f7ff fdb4 	bl	8001040 <Envia_bytes_UART>
}
 80014d8:	b003      	add	sp, #12
 80014da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080014e0 <BluetoothPutFila>:
void BluetoothPutFila(Bluetooth* ble){
 80014e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014e4:	4604      	mov	r4, r0
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 80014e6:	2600      	movs	r6, #0
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 80014e8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001580 <BluetoothPutFila+0xa0>
 80014ec:	f100 0730 	add.w	r7, r0, #48	; 0x30
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 80014f0:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
 80014f4:	b2f3      	uxtb	r3, r6
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d801      	bhi.n	80014fe <BluetoothPutFila+0x1e>
}
 80014fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if( ble->_RxDataArr[1] == (ble->_BleCommArr[i]->_comando)){
 80014fe:	3322      	adds	r3, #34	; 0x22
 8001500:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
 8001504:	f894 9031 	ldrb.w	r9, [r4, #49]	; 0x31
 8001508:	f89a 3000 	ldrb.w	r3, [sl]
 800150c:	4599      	cmp	r9, r3
 800150e:	d131      	bne.n	8001574 <BluetoothPutFila+0x94>
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 8001510:	f894 5051 	ldrb.w	r5, [r4, #81]	; 0x51
 8001514:	4638      	mov	r0, r7
 8001516:	1ea9      	subs	r1, r5, #2
 8001518:	b289      	uxth	r1, r1
 800151a:	f7ff fdb1 	bl	8001080 <CRC16>
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 800151e:	4425      	add	r5, r4
 8001520:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 8001524:	b203      	sxth	r3, r0
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 8001526:	b2c0      	uxtb	r0, r0
 8001528:	4282      	cmp	r2, r0
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 800152a:	f8a8 3000 	strh.w	r3, [r8]
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 800152e:	d105      	bne.n	800153c <BluetoothPutFila+0x5c>
 8001530:	f895 202f 	ldrb.w	r2, [r5, #47]	; 0x2f
 8001534:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001538:	429a      	cmp	r2, r3
 800153a:	d003      	beq.n	8001544 <BluetoothPutFila+0x64>
}
 800153c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				BluetoothErroCRC();//erro de CRC
 8001540:	f7ff bfbe 	b.w	80014c0 <BluetoothErroCRC>
			if(ble->_BleCommArr[i]->_tipo == ComandoBasico ){
 8001544:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d108      	bne.n	800155e <BluetoothPutFila+0x7e>
				osMessagePut(*ble->filaComandosRX, ble->_BleCommArr[i]->_comando, osWaitForever);
 800154c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800154e:	4649      	mov	r1, r9
}
 8001550:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				osMessagePut(*ble->filaComandosRX, ble->_BleCommArr[i]->_comando, osWaitForever);
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	f005 bfa2 	b.w	80074a2 <osMessagePut>
			else if(ble->_BleCommArr[i]->_tipo == ComandoConexao ){
 800155e:	2b02      	cmp	r3, #2
 8001560:	d108      	bne.n	8001574 <BluetoothPutFila+0x94>
				switch (ble->_RxDataArr[1]) {
 8001562:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8001566:	d007      	beq.n	8001578 <BluetoothPutFila+0x98>
 8001568:	f1b9 0f42 	cmp.w	r9, #66	; 0x42
 800156c:	d102      	bne.n	8001574 <BluetoothPutFila+0x94>
					solicitacaoSenhaBluetooh(ble);
 800156e:	4620      	mov	r0, r4
 8001570:	f7ff fdee 	bl	8001150 <solicitacaoSenhaBluetooh>
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 8001574:	3601      	adds	r6, #1
 8001576:	e7bb      	b.n	80014f0 <BluetoothPutFila+0x10>
					avaliaSenhaRecebidaBluetooh(ble);
 8001578:	4620      	mov	r0, r4
 800157a:	f7ff fdbb 	bl	80010f4 <avaliaSenhaRecebidaBluetooh>
					break;
 800157e:	e7f9      	b.n	8001574 <BluetoothPutFila+0x94>
 8001580:	2000008c 	.word	0x2000008c

08001584 <BLEDMA_IrqHandler>:
{
 8001584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(__HAL_DMA_GET_IT_SOURCE(UARTDMAHandle, DMA_IT_TC) != RESET){   // if the source is TC
 8001588:	4d73      	ldr	r5, [pc, #460]	; (8001758 <BLEDMA_IrqHandler+0x1d4>)
{
 800158a:	4604      	mov	r4, r0
	if(__HAL_DMA_GET_IT_SOURCE(UARTDMAHandle, DMA_IT_TC) != RESET){   // if the source is TC
 800158c:	682b      	ldr	r3, [r5, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	079b      	lsls	r3, r3, #30
 8001594:	d548      	bpl.n	8001628 <BLEDMA_IrqHandler+0xa4>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001596:	f3ef 8711 	mrs	r7, BASEPRI
 800159a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800159e:	f383 8811 	msr	BASEPRI, r3
 80015a2:	f3bf 8f6f 	isb	sy
 80015a6:	f3bf 8f4f 	dsb	sy
		__HAL_DMA_CLEAR_FLAG(UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(UARTDMAHandle));
 80015aa:	682b      	ldr	r3, [r5, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b6b      	ldr	r3, [pc, #428]	; (800175c <BLEDMA_IrqHandler+0x1d8>)
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d03b      	beq.n	800162c <BLEDMA_IrqHandler+0xa8>
 80015b4:	3314      	adds	r3, #20
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d03a      	beq.n	8001630 <BLEDMA_IrqHandler+0xac>
 80015ba:	3314      	adds	r3, #20
 80015bc:	429a      	cmp	r2, r3
 80015be:	d039      	beq.n	8001634 <BLEDMA_IrqHandler+0xb0>
 80015c0:	3314      	adds	r3, #20
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d039      	beq.n	800163a <BLEDMA_IrqHandler+0xb6>
 80015c6:	3314      	adds	r3, #20
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d039      	beq.n	8001640 <BLEDMA_IrqHandler+0xbc>
 80015cc:	3314      	adds	r3, #20
 80015ce:	429a      	cmp	r2, r3
 80015d0:	bf0c      	ite	eq
 80015d2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80015d6:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
		ble->msIdle=0;
 80015da:	f04f 0900 	mov.w	r9, #0
		__HAL_DMA_CLEAR_FLAG(UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(UARTDMAHandle));
 80015de:	4960      	ldr	r1, [pc, #384]	; (8001760 <BLEDMA_IrqHandler+0x1dc>)
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 80015e0:	f104 085c 	add.w	r8, r4, #92	; 0x5c
		__HAL_DMA_CLEAR_FLAG(UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(UARTDMAHandle));
 80015e4:	604b      	str	r3, [r1, #4]
		ble->msIdle=0;
 80015e6:	f884 9055 	strb.w	r9, [r4, #85]	; 0x55
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - UARTDMAHandle->Instance->CNDTR;
 80015ea:	6853      	ldr	r3, [r2, #4]
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 80015ec:	f104 0630 	add.w	r6, r4, #48	; 0x30
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - UARTDMAHandle->Instance->CNDTR;
 80015f0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80015f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 80015f8:	4631      	mov	r1, r6
 80015fa:	4640      	mov	r0, r8
 80015fc:	f008 f914 	bl	8009828 <strcpy>
		switch(ble->MaquinaConexao){
 8001600:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
		ble->msDesconectado = 0;
 8001604:	f884 9054 	strb.w	r9, [r4, #84]	; 0x54
		switch(ble->MaquinaConexao){
 8001608:	b1eb      	cbz	r3, 8001646 <BLEDMA_IrqHandler+0xc2>
 800160a:	3b01      	subs	r3, #1
 800160c:	2b01      	cmp	r3, #1
 800160e:	f240 8082 	bls.w	8001716 <BLEDMA_IrqHandler+0x192>
		UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 8001612:	2240      	movs	r2, #64	; 0x40
		UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
 8001614:	682b      	ldr	r3, [r5, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60de      	str	r6, [r3, #12]
		UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 800161a:	605a      	str	r2, [r3, #4]
		UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	f042 0201 	orr.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001624:	f387 8811 	msr	BASEPRI, r7
}
 8001628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		__HAL_DMA_CLEAR_FLAG(UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(UARTDMAHandle));
 800162c:	2302      	movs	r3, #2
 800162e:	e7d4      	b.n	80015da <BLEDMA_IrqHandler+0x56>
 8001630:	2320      	movs	r3, #32
 8001632:	e7d2      	b.n	80015da <BLEDMA_IrqHandler+0x56>
 8001634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001638:	e7cf      	b.n	80015da <BLEDMA_IrqHandler+0x56>
 800163a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163e:	e7cc      	b.n	80015da <BLEDMA_IrqHandler+0x56>
 8001640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001644:	e7c9      	b.n	80015da <BLEDMA_IrqHandler+0x56>
			ble->ss = strstr(ble->StringRecebida, "OK+CONN");
 8001646:	4640      	mov	r0, r8
 8001648:	4946      	ldr	r1, [pc, #280]	; (8001764 <BLEDMA_IrqHandler+0x1e0>)
			ble->StatusSenha = false;//chave de validacao
 800164a:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
			ble->ss = NULL;
 800164e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "OK+CONN");
 8001652:	f008 f841 	bl	80096d8 <strstr>
 8001656:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
			if ((ble->ss != NULL  && ble->RxSize == 7) || MACRO_LE_BT_STATUS){
 800165a:	2800      	cmp	r0, #0
 800165c:	d053      	beq.n	8001706 <BLEDMA_IrqHandler+0x182>
 800165e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001662:	2b07      	cmp	r3, #7
 8001664:	d14f      	bne.n	8001706 <BLEDMA_IrqHandler+0x182>
				ble->MaquinaConexao = RX_CONECTADO;
 8001666:	2301      	movs	r3, #1
 8001668:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
				ble->StatusConexao 	= true;
 800166c:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
			ble->ss = NULL;
 8001670:	2300      	movs	r3, #0
			ble->ss = strstr(ble->StringRecebida, "OK+ADDR:");
 8001672:	4640      	mov	r0, r8
 8001674:	493c      	ldr	r1, [pc, #240]	; (8001768 <BLEDMA_IrqHandler+0x1e4>)
			ble->ss = NULL;
 8001676:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "OK+ADDR:");
 800167a:	f008 f82d 	bl	80096d8 <strstr>
 800167e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
			if (ble->ss != NULL){
 8001682:	2800      	cmp	r0, #0
 8001684:	d0c5      	beq.n	8001612 <BLEDMA_IrqHandler+0x8e>
				ble->PontoExato = ble->ss - ble->StringRecebida;
 8001686:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800176c <BLEDMA_IrqHandler+0x1e8>
 800168a:	eba0 0008 	sub.w	r0, r0, r8
 800168e:	4663      	mov	r3, ip
 8001690:	f100 0237 	add.w	r2, r0, #55	; 0x37
 8001694:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8001698:	67e0      	str	r0, [r4, #124]	; 0x7c
				for (int i = 0; i < 12; i++) {
 800169a:	4422      	add	r2, r4
 800169c:	4401      	add	r1, r0
					addr8Bits[i] = ble->_RxDataArr[i+ble->PontoExato+8];
 800169e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
				for (int i = 0; i < 12; i++) {
 80016a2:	4291      	cmp	r1, r2
					addr8Bits[i] = ble->_RxDataArr[i+ble->PontoExato+8];
 80016a4:	f80c 0b01 	strb.w	r0, [ip], #1
				for (int i = 0; i < 12; i++) {
 80016a8:	d1f9      	bne.n	800169e <BLEDMA_IrqHandler+0x11a>
				addr32Bits[0] = (addr8Bits[0]<<24)+(addr8Bits[1]<<16)+(addr8Bits[2]<<8)+(addr8Bits[3]);
 80016aa:	785a      	ldrb	r2, [r3, #1]
 80016ac:	7818      	ldrb	r0, [r3, #0]
 80016ae:	0412      	lsls	r2, r2, #16
 80016b0:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 80016b4:	7898      	ldrb	r0, [r3, #2]
 80016b6:	492e      	ldr	r1, [pc, #184]	; (8001770 <BLEDMA_IrqHandler+0x1ec>)
 80016b8:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 80016bc:	78d8      	ldrb	r0, [r3, #3]
 80016be:	4402      	add	r2, r0
 80016c0:	600a      	str	r2, [r1, #0]
				addr32Bits[1] = (addr8Bits[4]<<24)+(addr8Bits[5]<<16)+(addr8Bits[6]<<8)+(addr8Bits[7]);
 80016c2:	795a      	ldrb	r2, [r3, #5]
 80016c4:	7918      	ldrb	r0, [r3, #4]
 80016c6:	0412      	lsls	r2, r2, #16
 80016c8:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 80016cc:	7998      	ldrb	r0, [r3, #6]
 80016ce:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 80016d2:	79d8      	ldrb	r0, [r3, #7]
 80016d4:	4402      	add	r2, r0
 80016d6:	604a      	str	r2, [r1, #4]
				addr32Bits[2] = (addr8Bits[8]<<24)+(addr8Bits[9]<<16)+(addr8Bits[10]<<8)+(addr8Bits[11]);
 80016d8:	7a5a      	ldrb	r2, [r3, #9]
 80016da:	7a18      	ldrb	r0, [r3, #8]
 80016dc:	0412      	lsls	r2, r2, #16
 80016de:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 80016e2:	7a98      	ldrb	r0, [r3, #10]
 80016e4:	7adb      	ldrb	r3, [r3, #11]
 80016e6:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 80016ea:	4413      	add	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
				ble->chave = CRC16(addr8Bits,12);
 80016ee:	481f      	ldr	r0, [pc, #124]	; (800176c <BLEDMA_IrqHandler+0x1e8>)
 80016f0:	210c      	movs	r1, #12
 80016f2:	f7ff fcc5 	bl	8001080 <CRC16>
				osSignalSet(TaskBluetoothHandle, CHEGOU_ADDR_BLE);
 80016f6:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <BLEDMA_IrqHandler+0x1f0>)
				ble->chave = CRC16(addr8Bits,12);
 80016f8:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
				osSignalSet(TaskBluetoothHandle, CHEGOU_ADDR_BLE);
 80016fc:	21bf      	movs	r1, #191	; 0xbf
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	f005 fe4d 	bl	800739e <osSignalSet>
 8001704:	e785      	b.n	8001612 <BLEDMA_IrqHandler+0x8e>
			if ((ble->ss != NULL  && ble->RxSize == 7) || MACRO_LE_BT_STATUS){
 8001706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800170a:	481b      	ldr	r0, [pc, #108]	; (8001778 <BLEDMA_IrqHandler+0x1f4>)
 800170c:	f003 fb24 	bl	8004d58 <HAL_GPIO_ReadPin>
 8001710:	2800      	cmp	r0, #0
 8001712:	d1a8      	bne.n	8001666 <BLEDMA_IrqHandler+0xe2>
 8001714:	e7ac      	b.n	8001670 <BLEDMA_IrqHandler+0xec>
			ble->ss = strstr(ble->StringRecebida, "LOST");
 8001716:	4640      	mov	r0, r8
 8001718:	4918      	ldr	r1, [pc, #96]	; (800177c <BLEDMA_IrqHandler+0x1f8>)
			ble->ss = NULL;
 800171a:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "LOST");
 800171e:	f007 ffdb 	bl	80096d8 <strstr>
 8001722:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
			if (ble->ss != NULL || !MACRO_LE_BT_STATUS){
 8001726:	b158      	cbz	r0, 8001740 <BLEDMA_IrqHandler+0x1bc>
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 8001728:	2300      	movs	r3, #0
 800172a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
				ble->StatusSenha 		= false;//chave de validacao
 800172e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
			if(ble->SistemaInit){
 8001732:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8001736:	b15b      	cbz	r3, 8001750 <BLEDMA_IrqHandler+0x1cc>
				BluetoothPutFila(ble);
 8001738:	4620      	mov	r0, r4
 800173a:	f7ff fed1 	bl	80014e0 <BluetoothPutFila>
 800173e:	e768      	b.n	8001612 <BLEDMA_IrqHandler+0x8e>
			if (ble->ss != NULL || !MACRO_LE_BT_STATUS){
 8001740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <BLEDMA_IrqHandler+0x1f4>)
 8001746:	f003 fb07 	bl	8004d58 <HAL_GPIO_ReadPin>
 800174a:	2800      	cmp	r0, #0
 800174c:	d0ec      	beq.n	8001728 <BLEDMA_IrqHandler+0x1a4>
 800174e:	e7f0      	b.n	8001732 <BLEDMA_IrqHandler+0x1ae>
				ble->MaquinaConexao = RX_DESCONECTADO;
 8001750:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 8001754:	e75d      	b.n	8001612 <BLEDMA_IrqHandler+0x8e>
 8001756:	bf00      	nop
 8001758:	20000090 	.word	0x20000090
 800175c:	40020008 	.word	0x40020008
 8001760:	40020000 	.word	0x40020000
 8001764:	0800a0f7 	.word	0x0800a0f7
 8001768:	0800a0ff 	.word	0x0800a0ff
 800176c:	200000a4 	.word	0x200000a4
 8001770:	20000098 	.word	0x20000098
 8001774:	20000968 	.word	0x20000968
 8001778:	40010c00 	.word	0x40010c00
 800177c:	0800a108 	.word	0x0800a108

08001780 <BLEUSART_IrqHandler>:
	if (UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <BLEUSART_IrqHandler+0x40>)
{
 8001782:	b082      	sub	sp, #8
	if (UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	06d2      	lsls	r2, r2, #27
 800178c:	d515      	bpl.n	80017ba <BLEUSART_IrqHandler+0x3a>
		tmp = UARTHandle->Instance->SR;                 /* Read status register */
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	9201      	str	r2, [sp, #4]
		tmp = UARTHandle->Instance->DR;                 /* Read data register */
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	9201      	str	r2, [sp, #4]
		__HAL_DMA_DISABLE (UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 8001796:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <BLEUSART_IrqHandler+0x44>)
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	6811      	ldr	r1, [r2, #0]
 800179e:	f021 0101 	bic.w	r1, r1, #1
 80017a2:	6011      	str	r1, [r2, #0]
		__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);		// HABILITA idle line INTERRUPT
 80017a4:	68d9      	ldr	r1, [r3, #12]
 80017a6:	f041 0110 	orr.w	r1, r1, #16
 80017aa:	60d9      	str	r1, [r3, #12]
		__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);		// HABILITA O DMA Tx cplt INTERRUPT
 80017ac:	6813      	ldr	r3, [r2, #0]
 80017ae:	f043 0302 	orr.w	r3, r3, #2
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	b002      	add	sp, #8
		BLEDMA_IrqHandler (ble);
 80017b6:	f7ff bee5 	b.w	8001584 <BLEDMA_IrqHandler>
}
 80017ba:	b002      	add	sp, #8
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000094 	.word	0x20000094
 80017c4:	20000090 	.word	0x20000090

080017c8 <bluetooth10ms>:
	UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
}
void bluetooth10ms(Bluetooth* ble){

	/*INCREMENTO DE INATIVIDADE-------------------*/
	(ble->msIdle<240)?ble->msIdle++:0;
 80017c8:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 80017cc:	2bef      	cmp	r3, #239	; 0xef
 80017ce:	bf9c      	itt	ls
 80017d0:	3301      	addls	r3, #1
 80017d2:	f880 3055 	strbls.w	r3, [r0, #85]	; 0x55
	else{
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_LOW)	{
			BluetoothDescon(ble);
		}
	}
}
 80017d6:	4770      	bx	lr

080017d8 <bluetooth1000ms>:
void bluetooth1000ms(Bluetooth* ble){
	if(ble->JanelaConexao>0)
 80017d8:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
 80017dc:	b113      	cbz	r3, 80017e4 <bluetooth1000ms+0xc>
		ble->JanelaConexao--;
 80017de:	3b01      	subs	r3, #1
 80017e0:	f880 3053 	strb.w	r3, [r0, #83]	; 0x53
}
 80017e4:	4770      	bx	lr

080017e6 <EepromInit>:
//variaveis globais da EEprom
#ifndef INC_EEPROM_C_
#define INC_EEPROM_C_

uint8_t EepromInit(Eeprom *eeprom, I2C_HandleTypeDef *i2c, osMessageQId *fila)
{
 80017e6:	4603      	mov	r3, r0
	//Pass the used I2C handle to the struct
	eeprom->i2cHandle = i2c;

	//Pass the used queue to the struct
	eeprom->filaComandos = fila;
 80017e8:	e9c0 1200 	strd	r1, r2, [r0]

	//Start the component count variable from zero
	eeprom->_EepromVarCount  = 0;
 80017ec:	2000      	movs	r0, #0
 80017ee:	f883 00bc 	strb.w	r0, [r3, #188]	; 0xbc

	//Return OK
	return 0;
}
 80017f2:	4770      	bx	lr

080017f4 <EepromAddVar>:
	}
}

//variaveis de eeprom que serao manipuladas
uint8_t EepromAddVar(Eeprom *eeprom, EepromVariaveis* _eepromvar, char* objectname,uint8_t __addreeprom,TypeTamData tamanho,uint32_t minimo,uint32_t padrao,uint32_t maximo, void *addrVar)
{
 80017f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017f8:	4607      	mov	r7, r0
	//Make space before passing the object name to the nexcomp struct
	_eepromvar->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 80017fa:	4610      	mov	r0, r2
{
 80017fc:	460c      	mov	r4, r1
 80017fe:	4690      	mov	r8, r2
 8001800:	4699      	mov	r9, r3
	_eepromvar->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8001802:	f7fe fca5 	bl	8000150 <strlen>
 8001806:	3001      	adds	r0, #1
{
 8001808:	f89d 6020 	ldrb.w	r6, [sp, #32]
 800180c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	_eepromvar->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 800180e:	f007 fe73 	bl	80094f8 <malloc>

	//Pass the object name to the struct
	strcpy(_eepromvar->objname, objectname);
 8001812:	4641      	mov	r1, r8
	_eepromvar->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8001814:	6160      	str	r0, [r4, #20]
	strcpy(_eepromvar->objname, objectname);
 8001816:	f008 f807 	bl	8009828 <strcpy>

	//Pass the corresponding data from component to component struct
	_eepromvar->_addrEprom = __addreeprom;

	//definindo minimos maximos e default
	_eepromvar->minValue 		= minimo;
 800181a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	_eepromvar->_addrEprom = __addreeprom;
 800181c:	f8a4 9000 	strh.w	r9, [r4]
	_eepromvar->minValue 		= minimo;
 8001820:	60e3      	str	r3, [r4, #12]
	_eepromvar->defaultValue 	= padrao;
 8001822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	_eepromvar->maxValue 		= maximo;

	//passando o tamnho da variavel
	_eepromvar->_sizeType = tamanho;
 8001824:	7626      	strb	r6, [r4, #24]
	_eepromvar->defaultValue 	= padrao;
 8001826:	60a3      	str	r3, [r4, #8]
	_eepromvar->maxValue 		= maximo;
 8001828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800182a:	6123      	str	r3, [r4, #16]

	//Add the component struct to the list on the Nextion Struct
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _eepromvar;
 800182c:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8001830:	1c9a      	adds	r2, r3, #2
	eeprom->_EepromVarCount++;
 8001832:	3301      	adds	r3, #1
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _eepromvar;
 8001834:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
	eeprom->_EepromVarCount++;
 8001838:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc


	if(!addrVar)
 800183c:	b14d      	cbz	r5, 8001852 <EepromAddVar+0x5e>
		return 0;
	switch (tamanho) {
 800183e:	3e01      	subs	r6, #1
 8001840:	2e07      	cmp	r6, #7
 8001842:	d806      	bhi.n	8001852 <EepromAddVar+0x5e>
 8001844:	e8df f006 	tbb	[pc, r6]
 8001848:	0a050804 	.word	0x0a050804
 800184c:	0c050505 	.word	0x0c050505
	case DATA8BITS:
		_eepromvar->ptr8=(uint8_t *)addrVar;
 8001850:	61e5      	str	r5, [r4, #28]
	case DATADOUBLE:
		_eepromvar->ptrDouble=(double *)addrVar;
		break;
	}
	return 0;
}
 8001852:	2000      	movs	r0, #0
 8001854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		_eepromvar->ptr16=(uint16_t *)addrVar;
 8001858:	6225      	str	r5, [r4, #32]
		break;
 800185a:	e7fa      	b.n	8001852 <EepromAddVar+0x5e>
		_eepromvar->ptr32=(uint32_t *)addrVar;
 800185c:	6265      	str	r5, [r4, #36]	; 0x24
		break;
 800185e:	e7f8      	b.n	8001852 <EepromAddVar+0x5e>
		_eepromvar->ptrDouble=(double *)addrVar;
 8001860:	62a5      	str	r5, [r4, #40]	; 0x28
		break;
 8001862:	e7f6      	b.n	8001852 <EepromAddVar+0x5e>

08001864 <EepromSetVar>:

bool EepromSetVar(Eeprom *eeprom, EepromVariaveis *eepromvar, uint32_t valor)
{
 8001864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001868:	4606      	mov	r6, r0
 800186a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buffer0[1];
	uint8_t buffer1[2];
	uint8_t buffer2[4];
	uint8_t buffer3[8];
	//envio para memoria pagina 1
	LIBERA_EEPROM
 800186c:	488a      	ldr	r0, [pc, #552]	; (8001a98 <EepromSetVar+0x234>)
{
 800186e:	460c      	mov	r4, r1
 8001870:	4615      	mov	r5, r2
	LIBERA_EEPROM
 8001872:	2180      	movs	r1, #128	; 0x80
 8001874:	2200      	movs	r2, #0
 8001876:	f003 fa75 	bl	8004d64 <HAL_GPIO_WritePin>
 800187a:	2005      	movs	r0, #5
 800187c:	f002 fcf2 	bl	8004264 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,30,HAL_MAX_DELAY);
 8001880:	f04f 33ff 	mov.w	r3, #4294967295
 8001884:	221e      	movs	r2, #30
 8001886:	21a2      	movs	r1, #162	; 0xa2
 8001888:	6830      	ldr	r0, [r6, #0]
 800188a:	f003 fee3 	bl	8005654 <HAL_I2C_IsDeviceReady>
	if (result==HAL_OK)
 800188e:	bb00      	cbnz	r0, 80018d2 <EepromSetVar+0x6e>
	{
		if(valor!=0){ //valor recebido
			switch (eepromvar->_sizeType) {
 8001890:	7e23      	ldrb	r3, [r4, #24]
 8001892:	3b01      	subs	r3, #1
		if(valor!=0){ //valor recebido
 8001894:	2d00      	cmp	r5, #0
 8001896:	f000 8086 	beq.w	80019a6 <EepromSetVar+0x142>
			switch (eepromvar->_sizeType) {
 800189a:	2b07      	cmp	r3, #7
 800189c:	d819      	bhi.n	80018d2 <EepromSetVar+0x6e>
 800189e:	e8df f003 	tbb	[pc, r3]
 80018a2:	2404      	.short	0x2404
 80018a4:	18183b18 	.word	0x18183b18
 80018a8:	5018      	.short	0x5018
			case DATA8BITS:
				eepromvar->valor = (uint8_t)valor;
				buffer0[0] = (uint8_t)valor;
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 80018aa:	2301      	movs	r3, #1
 80018ac:	f04f 09c8 	mov.w	r9, #200	; 0xc8
				eepromvar->valor = (uint8_t)valor;
 80018b0:	b2ed      	uxtb	r5, r5
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 80018b2:	e9cd 3901 	strd	r3, r9, [sp, #4]
 80018b6:	ab05      	add	r3, sp, #20
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	21a2      	movs	r1, #162	; 0xa2
 80018bc:	2310      	movs	r3, #16
 80018be:	8822      	ldrh	r2, [r4, #0]
 80018c0:	6830      	ldr	r0, [r6, #0]
				eepromvar->valor = (uint8_t)valor;
 80018c2:	6065      	str	r5, [r4, #4]
				buffer0[0] = (uint8_t)valor;
 80018c4:	f88d 5014 	strb.w	r5, [sp, #20]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 80018c8:	f003 fcf6 	bl	80052b8 <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr8)
 80018cc:	69e3      	ldr	r3, [r4, #28]
 80018ce:	b103      	cbz	r3, 80018d2 <EepromSetVar+0x6e>
					break;
				*eepromvar->ptr8 = (uint8_t)valor;
 80018d0:	701d      	strb	r5, [r3, #0]
	//			break;
	//		}
	//	}
	//
	//	return result;
	TRAVA_EEPROM
 80018d2:	2005      	movs	r0, #5
 80018d4:	f002 fcc6 	bl	8004264 <HAL_Delay>
 80018d8:	2201      	movs	r2, #1
 80018da:	2180      	movs	r1, #128	; 0x80
 80018dc:	486e      	ldr	r0, [pc, #440]	; (8001a98 <EepromSetVar+0x234>)
 80018de:	f003 fa41 	bl	8004d64 <HAL_GPIO_WritePin>
	return 1;
}
 80018e2:	2001      	movs	r0, #1
 80018e4:	b00b      	add	sp, #44	; 0x2c
 80018e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				eepromvar->valor = (uint16_t)valor;
 80018ea:	b2ab      	uxth	r3, r5
 80018ec:	6063      	str	r3, [r4, #4]
				buffer1[0] = (uint8_t)(valor >> 8);
 80018ee:	ba6b      	rev16	r3, r5
 80018f0:	f8ad 3018 	strh.w	r3, [sp, #24]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer1, 2, 200);
 80018f4:	f04f 08c8 	mov.w	r8, #200	; 0xc8
 80018f8:	2302      	movs	r3, #2
 80018fa:	e9cd 3801 	strd	r3, r8, [sp, #4]
 80018fe:	ab06      	add	r3, sp, #24
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	21a2      	movs	r1, #162	; 0xa2
 8001904:	2310      	movs	r3, #16
 8001906:	8822      	ldrh	r2, [r4, #0]
 8001908:	6830      	ldr	r0, [r6, #0]
 800190a:	f003 fcd5 	bl	80052b8 <HAL_I2C_Mem_Write>
				if(!eepromvar->ptr16)
 800190e:	6a23      	ldr	r3, [r4, #32]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0de      	beq.n	80018d2 <EepromSetVar+0x6e>
				eepromvar->valor = (uint16_t)valor;
 8001914:	801d      	strh	r5, [r3, #0]
				break;
 8001916:	e7dc      	b.n	80018d2 <EepromSetVar+0x6e>
				eepromvar->valor = (uint32_t)valor;
 8001918:	ba2b      	rev	r3, r5
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 800191a:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
				buffer2[0] = (uint8_t)(valor >> 24);
 800191e:	9307      	str	r3, [sp, #28]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001920:	2304      	movs	r3, #4
 8001922:	e9cd 3e01 	strd	r3, lr, [sp, #4]
 8001926:	ab07      	add	r3, sp, #28
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	21a2      	movs	r1, #162	; 0xa2
 800192c:	2310      	movs	r3, #16
 800192e:	8822      	ldrh	r2, [r4, #0]
 8001930:	6830      	ldr	r0, [r6, #0]
				eepromvar->valor = (uint32_t)valor;
 8001932:	6065      	str	r5, [r4, #4]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001934:	f003 fcc0 	bl	80052b8 <HAL_I2C_Mem_Write>
				if(!eepromvar->ptr32)
 8001938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0c9      	beq.n	80018d2 <EepromSetVar+0x6e>
				*eepromvar->ptr32 = (uint32_t)valor;
 800193e:	601d      	str	r5, [r3, #0]
				break;
 8001940:	e7c7      	b.n	80018d2 <EepromSetVar+0x6e>
				    eepromvar->valor = (double)valor;
 8001942:	4628      	mov	r0, r5
 8001944:	f7fe fd4e 	bl	80003e4 <__aeabi_ui2d>
 8001948:	460f      	mov	r7, r1
				    doubleToUInt.asDouble = eepromvar->valor;
 800194a:	468c      	mov	ip, r1
 800194c:	a908      	add	r1, sp, #32
				    eepromvar->valor = (double)valor;
 800194e:	4680      	mov	r8, r0
				    doubleToUInt.asDouble = eepromvar->valor;
 8001950:	4681      	mov	r9, r0
 8001952:	2338      	movs	r3, #56	; 0x38
 8001954:	468e      	mov	lr, r1
				    eepromvar->valor = (double)valor;
 8001956:	6065      	str	r5, [r4, #4]
				        buffer3[i] = (uint8_t)(valAsUInt >> (56 - 8*i));
 8001958:	f1c3 0520 	rsb	r5, r3, #32
 800195c:	f1a3 0020 	sub.w	r0, r3, #32
 8001960:	fa29 f203 	lsr.w	r2, r9, r3
 8001964:	fa0c f505 	lsl.w	r5, ip, r5
 8001968:	432a      	orrs	r2, r5
 800196a:	fa2c f000 	lsr.w	r0, ip, r0
				    for (int i = 0; i < 8; i++) {
 800196e:	3b08      	subs	r3, #8
				        buffer3[i] = (uint8_t)(valAsUInt >> (56 - 8*i));
 8001970:	4302      	orrs	r2, r0
				    for (int i = 0; i < 8; i++) {
 8001972:	f113 0f08 	cmn.w	r3, #8
				        buffer3[i] = (uint8_t)(valAsUInt >> (56 - 8*i));
 8001976:	f801 2b01 	strb.w	r2, [r1], #1
				    for (int i = 0; i < 8; i++) {
 800197a:	d1ed      	bne.n	8001958 <EepromSetVar+0xf4>
				    HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer3, 8, 200);
 800197c:	2308      	movs	r3, #8
 800197e:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
 8001982:	21a2      	movs	r1, #162	; 0xa2
 8001984:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8001988:	8822      	ldrh	r2, [r4, #0]
 800198a:	2310      	movs	r3, #16
 800198c:	6830      	ldr	r0, [r6, #0]
 800198e:	f8cd e000 	str.w	lr, [sp]
 8001992:	f003 fc91 	bl	80052b8 <HAL_I2C_Mem_Write>
				    if (!eepromvar->ptrDouble)
 8001996:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001998:	2900      	cmp	r1, #0
 800199a:	d09a      	beq.n	80018d2 <EepromSetVar+0x6e>
				    *eepromvar->ptrDouble = (double)valor;
 800199c:	4642      	mov	r2, r8
 800199e:	463b      	mov	r3, r7
 80019a0:	e9c1 2300 	strd	r2, r3, [r1]
				    break;
 80019a4:	e795      	b.n	80018d2 <EepromSetVar+0x6e>
			switch (eepromvar->_sizeType) {
 80019a6:	2b07      	cmp	r3, #7
 80019a8:	d893      	bhi.n	80018d2 <EepromSetVar+0x6e>
 80019aa:	a201      	add	r2, pc, #4	; (adr r2, 80019b0 <EepromSetVar+0x14c>)
 80019ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b0:	080019d1 	.word	0x080019d1
 80019b4:	080019fd 	.word	0x080019fd
 80019b8:	080018d3 	.word	0x080018d3
 80019bc:	08001a21 	.word	0x08001a21
 80019c0:	080018d3 	.word	0x080018d3
 80019c4:	080018d3 	.word	0x080018d3
 80019c8:	080018d3 	.word	0x080018d3
 80019cc:	08001a53 	.word	0x08001a53
				if(!eepromvar->ptr8)
 80019d0:	69e3      	ldr	r3, [r4, #28]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f43f af7d 	beq.w	80018d2 <EepromSetVar+0x6e>
				eepromvar->valor = *eepromvar->ptr8;
 80019d8:	781a      	ldrb	r2, [r3, #0]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 80019da:	25c8      	movs	r5, #200	; 0xc8
				eepromvar->valor = *eepromvar->ptr8;
 80019dc:	6062      	str	r2, [r4, #4]
				buffer0[0] = *eepromvar->ptr8;
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	f88d 3014 	strb.w	r3, [sp, #20]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 80019e4:	2301      	movs	r3, #1
 80019e6:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80019ea:	ab05      	add	r3, sp, #20
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 80019ec:	9300      	str	r3, [sp, #0]
			    HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer3, 8, 200);
 80019ee:	2310      	movs	r3, #16
 80019f0:	21a2      	movs	r1, #162	; 0xa2
 80019f2:	8822      	ldrh	r2, [r4, #0]
 80019f4:	6830      	ldr	r0, [r6, #0]
 80019f6:	f003 fc5f 	bl	80052b8 <HAL_I2C_Mem_Write>
			    break;
 80019fa:	e76a      	b.n	80018d2 <EepromSetVar+0x6e>
				if(!eepromvar->ptr16)
 80019fc:	6a22      	ldr	r2, [r4, #32]
 80019fe:	2a00      	cmp	r2, #0
 8001a00:	f43f af67 	beq.w	80018d2 <EepromSetVar+0x6e>
				eepromvar->valor = *eepromvar->ptr16;
 8001a04:	8813      	ldrh	r3, [r2, #0]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer1, 2, 200);
 8001a06:	20c8      	movs	r0, #200	; 0xc8
				eepromvar->valor = *eepromvar->ptr16;
 8001a08:	6063      	str	r3, [r4, #4]
				buffer1[0] = (uint8_t)(*eepromvar->ptr16 >> 8);
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	f88d 3018 	strb.w	r3, [sp, #24]
				buffer1[1] = (uint8_t)(*eepromvar->ptr16 & 0xFF);
 8001a10:	8813      	ldrh	r3, [r2, #0]
 8001a12:	f88d 3019 	strb.w	r3, [sp, #25]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer1, 2, 200);
 8001a16:	2302      	movs	r3, #2
 8001a18:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8001a1c:	ab06      	add	r3, sp, #24
 8001a1e:	e7e5      	b.n	80019ec <EepromSetVar+0x188>
				if(!eepromvar->ptr32)
 8001a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f43f af55 	beq.w	80018d2 <EepromSetVar+0x6e>
				eepromvar->valor = *eepromvar->ptr32;
 8001a28:	681a      	ldr	r2, [r3, #0]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001a2a:	21c8      	movs	r1, #200	; 0xc8
				eepromvar->valor = *eepromvar->ptr32;
 8001a2c:	6062      	str	r2, [r4, #4]
				buffer2[0] = (uint8_t)(*eepromvar->ptr32 >> 24);
 8001a2e:	0e12      	lsrs	r2, r2, #24
 8001a30:	f88d 201c 	strb.w	r2, [sp, #28]
				buffer2[1] = (uint8_t)(*eepromvar->ptr32 >> 16);
 8001a34:	885a      	ldrh	r2, [r3, #2]
 8001a36:	f88d 201d 	strb.w	r2, [sp, #29]
				buffer2[2] = (uint8_t)(*eepromvar->ptr32 >> 8);
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	0a12      	lsrs	r2, r2, #8
 8001a3e:	f88d 201e 	strb.w	r2, [sp, #30]
				buffer2[3] = (uint8_t)(*eepromvar->ptr32 & 0xFF);
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f88d 301f 	strb.w	r3, [sp, #31]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001a48:	2304      	movs	r3, #4
 8001a4a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001a4e:	ab07      	add	r3, sp, #28
 8001a50:	e7cc      	b.n	80019ec <EepromSetVar+0x188>
			    if (!eepromvar->ptrDouble)
 8001a52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f43f af3c 	beq.w	80018d2 <EepromSetVar+0x6e>
			    doubleToUInt2.asDouble = *eepromvar->ptrDouble;
 8001a5a:	e9d3 e700 	ldrd	lr, r7, [r3]
			    for (int i = 0; i < 8; i++) {
 8001a5e:	a908      	add	r1, sp, #32
			    doubleToUInt2.asDouble = *eepromvar->ptrDouble;
 8001a60:	2338      	movs	r3, #56	; 0x38
 8001a62:	468c      	mov	ip, r1
			        buffer3[i] = (uint8_t)(valAsUInt2 >> (56 - 8*i));
 8001a64:	f1c3 0520 	rsb	r5, r3, #32
 8001a68:	f1a3 0020 	sub.w	r0, r3, #32
 8001a6c:	fa2e f203 	lsr.w	r2, lr, r3
 8001a70:	fa07 f505 	lsl.w	r5, r7, r5
 8001a74:	432a      	orrs	r2, r5
 8001a76:	fa27 f000 	lsr.w	r0, r7, r0
			    for (int i = 0; i < 8; i++) {
 8001a7a:	3b08      	subs	r3, #8
			        buffer3[i] = (uint8_t)(valAsUInt2 >> (56 - 8*i));
 8001a7c:	4302      	orrs	r2, r0
			    for (int i = 0; i < 8; i++) {
 8001a7e:	f113 0f08 	cmn.w	r3, #8
			        buffer3[i] = (uint8_t)(valAsUInt2 >> (56 - 8*i));
 8001a82:	f801 2b01 	strb.w	r2, [r1], #1
			    for (int i = 0; i < 8; i++) {
 8001a86:	d1ed      	bne.n	8001a64 <EepromSetVar+0x200>
			    HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer3, 8, 200);
 8001a88:	2308      	movs	r3, #8
 8001a8a:	22c8      	movs	r2, #200	; 0xc8
 8001a8c:	f8cd c000 	str.w	ip, [sp]
 8001a90:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001a94:	e7ab      	b.n	80019ee <EepromSetVar+0x18a>
 8001a96:	bf00      	nop
 8001a98:	40010c00 	.word	0x40010c00

08001a9c <EepromDownloadValores>:

void EepromDownloadValores(Eeprom *eeprom)
{
 8001a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9e:	4604      	mov	r4, r0
	uint8_t buffer1[2];
	uint8_t buffer2[4];
	uint8_t buffer3[8];

//	return (uchCRCHi << 8 | uchCRCLo)
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001aa0:	2600      	movs	r6, #0
{
 8001aa2:	b089      	sub	sp, #36	; 0x24
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001aa4:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8001aa8:	b2f5      	uxtb	r5, r6
 8001aaa:	42ab      	cmp	r3, r5
 8001aac:	d801      	bhi.n	8001ab2 <EepromDownloadValores+0x16>
		if(eeprom->_EepromVarArr[i]->defaultValue>0 && eeprom->_EepromVarArr[i]->valor == 0)
			EepromSetVar(eeprom, eeprom->_EepromVarArr[i], eeprom->_EepromVarArr[i]->defaultValue);

		HAL_Delay(10);
	}
}
 8001aae:	b009      	add	sp, #36	; 0x24
 8001ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_READ_ADDR,30,HAL_MAX_DELAY)==HAL_OK){
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	221e      	movs	r2, #30
 8001ab8:	21a3      	movs	r1, #163	; 0xa3
 8001aba:	6820      	ldr	r0, [r4, #0]
 8001abc:	f003 fdca 	bl	8005654 <HAL_I2C_IsDeviceReady>
 8001ac0:	b9f0      	cbnz	r0, 8001b00 <EepromDownloadValores+0x64>
			switch (eeprom->_EepromVarArr[i]->_sizeType) {
 8001ac2:	eb04 0785 	add.w	r7, r4, r5, lsl #2
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	7e1a      	ldrb	r2, [r3, #24]
 8001aca:	3a01      	subs	r2, #1
 8001acc:	2a07      	cmp	r2, #7
 8001ace:	d817      	bhi.n	8001b00 <EepromDownloadValores+0x64>
 8001ad0:	e8df f002 	tbb	[pc, r2]
 8001ad4:	3d162504 	.word	0x3d162504
 8001ad8:	52161616 	.word	0x52161616
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR,eeprom->_EepromVarArr[i]->_addrEprom,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&eeprom->_EepromVarArr[i]->valor, DATA8BITS, 200);
 8001adc:	2101      	movs	r1, #1
 8001ade:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
 8001ae2:	f833 2b04 	ldrh.w	r2, [r3], #4
 8001ae6:	6820      	ldr	r0, [r4, #0]
 8001ae8:	e9cd 1e01 	strd	r1, lr, [sp, #4]
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	21a3      	movs	r1, #163	; 0xa3
 8001af0:	2310      	movs	r3, #16
 8001af2:	f003 fc71 	bl	80053d8 <HAL_I2C_Mem_Read>
				if(eeprom->_EepromVarArr[i]->ptr8 !=0){
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	69d3      	ldr	r3, [r2, #28]
 8001afa:	b10b      	cbz	r3, 8001b00 <EepromDownloadValores+0x64>
					*eeprom->_EepromVarArr[i]->ptr8 = eeprom->_EepromVarArr[i]->valor;
 8001afc:	6852      	ldr	r2, [r2, #4]
 8001afe:	701a      	strb	r2, [r3, #0]
		if(eeprom->_EepromVarArr[i]->defaultValue>0 && eeprom->_EepromVarArr[i]->valor == 0)
 8001b00:	3502      	adds	r5, #2
 8001b02:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
 8001b06:	688a      	ldr	r2, [r1, #8]
 8001b08:	b122      	cbz	r2, 8001b14 <EepromDownloadValores+0x78>
 8001b0a:	684b      	ldr	r3, [r1, #4]
 8001b0c:	b913      	cbnz	r3, 8001b14 <EepromDownloadValores+0x78>
			EepromSetVar(eeprom, eeprom->_EepromVarArr[i], eeprom->_EepromVarArr[i]->defaultValue);
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff fea8 	bl	8001864 <EepromSetVar>
		HAL_Delay(10);
 8001b14:	200a      	movs	r0, #10
 8001b16:	f002 fba5 	bl	8004264 <HAL_Delay>
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001b1a:	3601      	adds	r6, #1
 8001b1c:	e7c2      	b.n	8001aa4 <EepromDownloadValores+0x8>
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR,eeprom->_EepromVarArr[i]->_addrEprom,I2C_MEMADD_SIZE_16BIT,(uint8_t *) buffer1, DATA16BITS, 200);
 8001b1e:	881a      	ldrh	r2, [r3, #0]
 8001b20:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
 8001b24:	2302      	movs	r3, #2
 8001b26:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8001b2a:	ab04      	add	r3, sp, #16
 8001b2c:	21a3      	movs	r1, #163	; 0xa3
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	6820      	ldr	r0, [r4, #0]
 8001b32:	2310      	movs	r3, #16
 8001b34:	f003 fc50 	bl	80053d8 <HAL_I2C_Mem_Read>
				eeprom->_EepromVarArr[i]->valor =  ( buffer1[0] << 8 | buffer1[1]);
 8001b38:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	ba5b      	rev16	r3, r3
 8001b40:	b299      	uxth	r1, r3
 8001b42:	6051      	str	r1, [r2, #4]
				if(eeprom->_EepromVarArr[i]->ptr16 !=0){
 8001b44:	6a12      	ldr	r2, [r2, #32]
 8001b46:	2a00      	cmp	r2, #0
 8001b48:	d0da      	beq.n	8001b00 <EepromDownloadValores+0x64>
					*eeprom->_EepromVarArr[i]->ptr16 = eeprom->_EepromVarArr[i]->valor;
 8001b4a:	8013      	strh	r3, [r2, #0]
 8001b4c:	e7d8      	b.n	8001b00 <EepromDownloadValores+0x64>
				HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR,eeprom->_EepromVarArr[i]->_addrEprom,I2C_MEMADD_SIZE_16BIT,(uint8_t *) buffer2, DATA32BITS, 200);
 8001b4e:	881a      	ldrh	r2, [r3, #0]
 8001b50:	20c8      	movs	r0, #200	; 0xc8
 8001b52:	2304      	movs	r3, #4
 8001b54:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8001b58:	ab05      	add	r3, sp, #20
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	21a3      	movs	r1, #163	; 0xa3
 8001b5e:	2310      	movs	r3, #16
 8001b60:	6820      	ldr	r0, [r4, #0]
 8001b62:	f003 fc39 	bl	80053d8 <HAL_I2C_Mem_Read>
				eeprom->_EepromVarArr[i]->valor =  ( buffer2[0] << 24 | buffer2[1] << 16 | buffer2[2] << 8 | buffer2[3]);
 8001b66:	9b05      	ldr	r3, [sp, #20]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	ba1b      	rev	r3, r3
 8001b6c:	6053      	str	r3, [r2, #4]
				if(eeprom->_EepromVarArr[i]->ptr32 !=0){
 8001b6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b70:	2a00      	cmp	r2, #0
 8001b72:	d0c5      	beq.n	8001b00 <EepromDownloadValores+0x64>
					*eeprom->_EepromVarArr[i]->ptr32 = eeprom->_EepromVarArr[i]->valor;
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e7c3      	b.n	8001b00 <EepromDownloadValores+0x64>
			    HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, eeprom->_EepromVarArr[i]->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *) buffer3, 8, 200);
 8001b78:	881a      	ldrh	r2, [r3, #0]
 8001b7a:	21c8      	movs	r1, #200	; 0xc8
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001b82:	ab06      	add	r3, sp, #24
 8001b84:	21a3      	movs	r1, #163	; 0xa3
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	6820      	ldr	r0, [r4, #0]
 8001b8a:	2310      	movs	r3, #16
 8001b8c:	f003 fc24 	bl	80053d8 <HAL_I2C_Mem_Read>
			    uint64_t valAsUInt = ((uint64_t)buffer3[0] << 56) |
 8001b90:	e9dd 0c06 	ldrd	r0, ip, [sp, #24]
			    if (eeprom->_EepromVarArr[i]->ptrDouble != 0) {
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b98:	2900      	cmp	r1, #0
 8001b9a:	d0b1      	beq.n	8001b00 <EepromDownloadValores+0x64>
			        *eeprom->_EepromVarArr[i]->ptrDouble = val;
 8001b9c:	fa9c f28c 	rev.w	r2, ip
 8001ba0:	ba03      	rev	r3, r0
 8001ba2:	e9c1 2300 	strd	r2, r3, [r1]
 8001ba6:	e7ab      	b.n	8001b00 <EepromDownloadValores+0x64>

08001ba8 <RestauraPadraoTudo>:

void RestauraPadraoTudo(Eeprom *eeprom)
{
 8001ba8:	b538      	push	{r3, r4, r5, lr}
 8001baa:	4604      	mov	r4, r0
	//redefine para default
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001bac:	2500      	movs	r5, #0
 8001bae:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
 8001bb2:	b2eb      	uxtb	r3, r5
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d800      	bhi.n	8001bba <RestauraPadraoTudo+0x12>
		EepromSetVar(eeprom, eeprom->_EepromVarArr[i], eeprom->_EepromVarArr[i]->defaultValue);
		HAL_Delay(10);
	}
}
 8001bb8:	bd38      	pop	{r3, r4, r5, pc}
		EepromSetVar(eeprom, eeprom->_EepromVarArr[i], eeprom->_EepromVarArr[i]->defaultValue);
 8001bba:	3302      	adds	r3, #2
 8001bbc:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	688a      	ldr	r2, [r1, #8]
 8001bc4:	f7ff fe4e 	bl	8001864 <EepromSetVar>
		HAL_Delay(10);
 8001bc8:	200a      	movs	r0, #10
 8001bca:	f002 fb4b 	bl	8004264 <HAL_Delay>
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001bce:	3501      	adds	r5, #1
 8001bd0:	e7ed      	b.n	8001bae <RestauraPadraoTudo+0x6>

08001bd2 <OutputAddDigital>:
 *      Author: lucas
 */
#include "OutputDigital.h"

uint8_t OutputAddDigital(OutputDigital* Output,IndviduoOutput* _individ, uint16_t _pinoOUT,GPIO_TypeDef *_portaOUT,
		void (*callback)(),uint16_t limitOn,uint16_t limitOff){
 8001bd2:	b510      	push	{r4, lr}

	//montando a fila
	Output->_OutDigitalArr[Output->_DigitalCount] = _individ;
 8001bd4:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
 8001bd8:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
	Output->_DigitalCount++;
 8001bdc:	3401      	adds	r4, #1
 8001bde:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28

	//definicao dos pinos
	_individ->GPIO_Pin	=	_pinoOUT;
	_individ->GPIOx		=	_portaOUT;
 8001be2:	604b      	str	r3, [r1, #4]

	//Bind the correct callback functions together
	_individ->timeOut = callback;
 8001be4:	9b02      	ldr	r3, [sp, #8]
	_individ->limitOff = limitOff;


	//Return OK
	return 0;
}
 8001be6:	2000      	movs	r0, #0
	_individ->timeOut = callback;
 8001be8:	614b      	str	r3, [r1, #20]
	_individ->limitOn = limitOn;
 8001bea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	_individ->GPIO_Pin	=	_pinoOUT;
 8001bee:	800a      	strh	r2, [r1, #0]
	_individ->limitOn = limitOn;
 8001bf0:	81cb      	strh	r3, [r1, #14]
	_individ->limitOff = limitOff;
 8001bf2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8001bf6:	820b      	strh	r3, [r1, #16]
}
 8001bf8:	bd10      	pop	{r4, pc}

08001bfa <OutputAddPID>:

uint8_t OutputAddPID(OutputDigital* Output,IndviduoPID* _individ, TIM_HandleTypeDef *htim, uint32_t Channel, double Kp, double Ki, double Kd, uint16_t histerese,
		uint16_t limit_on,void (*callback)()){
 8001bfa:	b530      	push	{r4, r5, lr}

	//montando a fila
	Output->_OutPidArr[Output->_PidCount] = _individ;
 8001bfc:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
 8001c00:	1da5      	adds	r5, r4, #6
	Output->_PidCount++;
 8001c02:	3401      	adds	r4, #1
	Output->_OutPidArr[Output->_PidCount] = _individ;
 8001c04:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
	Output->_PidCount++;
 8001c08:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29

	//definicao do timer
	_individ->TimHandle = htim;
	_individ->Channel   = Channel;
 8001c0c:	e9c1 2300 	strd	r2, r3, [r1]

	//tunning de PID
	_individ->kp	= Kp;
 8001c10:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8001c14:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_individ->ki	= Ki;
 8001c18:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8001c1c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_individ->kd	= Kd;
 8001c20:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8001c24:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_individ->histerese	= histerese;
 8001c28:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
	//Bind the correct callback functions together
	_individ->timeOut = callback;

	//Return OK
	return 0;
}
 8001c2c:	2000      	movs	r0, #0
	_individ->histerese	= histerese;
 8001c2e:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
	_individ->timeOut = callback;
 8001c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001c34:	648b      	str	r3, [r1, #72]	; 0x48
}
 8001c36:	bd30      	pop	{r4, r5, pc}

08001c38 <onDigital>:

void onDigital(IndviduoOutput* outPut) {
 8001c38:	b510      	push	{r4, lr}
	// Implementação do método ON.
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_SET);
 8001c3a:	8801      	ldrh	r1, [r0, #0]
void onDigital(IndviduoOutput* outPut) {
 8001c3c:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	6840      	ldr	r0, [r0, #4]
 8001c42:	f003 f88f 	bl	8004d64 <HAL_GPIO_WritePin>
	outPut->_state = on; // Exemplo hipotético
 8001c46:	2301      	movs	r3, #1
 8001c48:	7223      	strb	r3, [r4, #8]
}
 8001c4a:	bd10      	pop	{r4, pc}

08001c4c <offDigital>:

void offDigital(IndviduoOutput* outPut) {
 8001c4c:	b510      	push	{r4, lr}
	// Implementação do método OFF.
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_RESET);
 8001c4e:	8801      	ldrh	r1, [r0, #0]
void offDigital(IndviduoOutput* outPut) {
 8001c50:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	6840      	ldr	r0, [r0, #4]
 8001c56:	f003 f885 	bl	8004d64 <HAL_GPIO_WritePin>
	outPut->_state = off; // Exemplo hipotético
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	7223      	strb	r3, [r4, #8]
}
 8001c5e:	bd10      	pop	{r4, pc}

08001c60 <contadorOutput>:

void contadorOutput(OutputDigital* Output){
 8001c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//chamar essa funcao em um timer com passo de 1 segundo

	//Varregura pelas saidas -------------DIGITAIS----------------
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 8001c64:	2400      	movs	r4, #0
void contadorOutput(OutputDigital* Output){
 8001c66:	4605      	mov	r5, r0
 8001c68:	4626      	mov	r6, r4
 8001c6a:	f64f 77ff 	movw	r7, #65535	; 0xffff
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 8001c6e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8001c72:	fa5f f884 	uxtb.w	r8, r4
 8001c76:	4543      	cmp	r3, r8
 8001c78:	d80b      	bhi.n	8001c92 <contadorOutput+0x32>
 8001c7a:	f04f 0a00 	mov.w	sl, #0
#ifndef CALCULA_POR_PWMOUT
		//---CATEGORIZA STATE
		if(Output->_OutPidArr[i]->realtime >=  Output->_OutPidArr[i]->setPoint ){
					Output->_OutPidArr[i]->_PWMstate = idle;
		}else if(Output->_OutPidArr[i]->realtime + Output->_OutPidArr[i]->histerese >  Output->_OutPidArr[i]->setPoint ){
			Output->_OutPidArr[i]->_PWMstate = mantendo;
 8001c7e:	f04f 0b02 	mov.w	fp, #2
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 8001c82:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8001c86:	fa5f f38a 	uxtb.w	r3, sl
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d825      	bhi.n	8001cda <contadorOutput+0x7a>
				//chama callback de timeout
				Output->_OutPidArr[i]->timeOut();
			}
		}
	}
}
 8001c8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(Output->_OutDigitalArr[i]->_state == on){
 8001c92:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 8001c96:	7a1a      	ldrb	r2, [r3, #8]
 8001c98:	2a01      	cmp	r2, #1
 8001c9a:	d117      	bne.n	8001ccc <contadorOutput+0x6c>
			(Output->_OutDigitalArr[i]->timeOn<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOn++:0;
 8001c9c:	895a      	ldrh	r2, [r3, #10]
			Output->_OutDigitalArr[i]->timeOff = 0;
 8001c9e:	819e      	strh	r6, [r3, #12]
			(Output->_OutDigitalArr[i]->timeOn<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOn++:0;
 8001ca0:	42ba      	cmp	r2, r7
 8001ca2:	d001      	beq.n	8001ca8 <contadorOutput+0x48>
 8001ca4:	3201      	adds	r2, #1
 8001ca6:	815a      	strh	r2, [r3, #10]
		if(Output->_OutDigitalArr[i]->limitOn != 0){
 8001ca8:	89da      	ldrh	r2, [r3, #14]
 8001caa:	b122      	cbz	r2, 8001cb6 <contadorOutput+0x56>
			if(Output->_OutDigitalArr[i]->timeOn >= Output->_OutDigitalArr[i]->limitOn){
 8001cac:	8959      	ldrh	r1, [r3, #10]
 8001cae:	4291      	cmp	r1, r2
 8001cb0:	d301      	bcc.n	8001cb6 <contadorOutput+0x56>
				Output->_OutDigitalArr[i]->timeOut();
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	4798      	blx	r3
		if(Output->_OutDigitalArr[i]->limitOff != 0){
 8001cb6:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 8001cba:	8a1a      	ldrh	r2, [r3, #16]
 8001cbc:	b122      	cbz	r2, 8001cc8 <contadorOutput+0x68>
			if(Output->_OutDigitalArr[i]->timeOff >= Output->_OutDigitalArr[i]->limitOff){
 8001cbe:	8999      	ldrh	r1, [r3, #12]
 8001cc0:	4291      	cmp	r1, r2
 8001cc2:	d301      	bcc.n	8001cc8 <contadorOutput+0x68>
				Output->_OutDigitalArr[i]->timeOut();
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	4798      	blx	r3
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 8001cc8:	3401      	adds	r4, #1
 8001cca:	e7d0      	b.n	8001c6e <contadorOutput+0xe>
			(Output->_OutDigitalArr[i]->timeOff<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOff++:0;
 8001ccc:	899a      	ldrh	r2, [r3, #12]
			Output->_OutDigitalArr[i]->timeOn = 0;
 8001cce:	815e      	strh	r6, [r3, #10]
			(Output->_OutDigitalArr[i]->timeOff<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOff++:0;
 8001cd0:	42ba      	cmp	r2, r7
 8001cd2:	bf1c      	itt	ne
 8001cd4:	3201      	addne	r2, #1
 8001cd6:	819a      	strhne	r2, [r3, #12]
 8001cd8:	e7e6      	b.n	8001ca8 <contadorOutput+0x48>
		if(Output->_OutPidArr[i]->realtime >=  Output->_OutPidArr[i]->setPoint ){
 8001cda:	3306      	adds	r3, #6
 8001cdc:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8001ce0:	e9d4 890a 	ldrd	r8, r9, [r4, #40]	; 0x28
 8001ce4:	e9d4 670c 	ldrd	r6, r7, [r4, #48]	; 0x30
 8001ce8:	4640      	mov	r0, r8
 8001cea:	4632      	mov	r2, r6
 8001cec:	463b      	mov	r3, r7
 8001cee:	4649      	mov	r1, r9
 8001cf0:	f7fe fe78 	bl	80009e4 <__aeabi_dcmpge>
 8001cf4:	bb28      	cbnz	r0, 8001d42 <contadorOutput+0xe2>
		}else if(Output->_OutPidArr[i]->realtime + Output->_OutPidArr[i]->histerese >  Output->_OutPidArr[i]->setPoint ){
 8001cf6:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 8001cfa:	f7fe fb83 	bl	8000404 <__aeabi_i2d>
 8001cfe:	4642      	mov	r2, r8
 8001d00:	464b      	mov	r3, r9
 8001d02:	f7fe fa33 	bl	800016c <__adddf3>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4630      	mov	r0, r6
 8001d0c:	4639      	mov	r1, r7
 8001d0e:	f7fe fe55 	bl	80009bc <__aeabi_dcmplt>
 8001d12:	b1e0      	cbz	r0, 8001d4e <contadorOutput+0xee>
			(Output->_OutPidArr[i]->timeOn<UINT16_MAX)?Output->_OutPidArr[i]->timeOn++:0;
 8001d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d18:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
			Output->_OutPidArr[i]->_PWMstate = mantendo;
 8001d1c:	f884 b042 	strb.w	fp, [r4, #66]	; 0x42
			(Output->_OutPidArr[i]->timeOn<UINT16_MAX)?Output->_OutPidArr[i]->timeOn++:0;
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d002      	beq.n	8001d2a <contadorOutput+0xca>
 8001d24:	3301      	adds	r3, #1
 8001d26:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		if(Output->_OutPidArr[i]->limiteOn != 0){
 8001d2a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001d2e:	b12b      	cbz	r3, 8001d3c <contadorOutput+0xdc>
			if(Output->_OutPidArr[i]->timeOn >= Output->_OutPidArr[i]->limiteOn){
 8001d30:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d301      	bcc.n	8001d3c <contadorOutput+0xdc>
				Output->_OutPidArr[i]->timeOut();
 8001d38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001d3a:	4798      	blx	r3
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 8001d3c:	f10a 0a01 	add.w	sl, sl, #1
 8001d40:	e79f      	b.n	8001c82 <contadorOutput+0x22>
 8001d42:	2300      	movs	r3, #0
			Output->_OutPidArr[i]->_PWMstate = buscando;
 8001d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			Output->_OutPidArr[i]->timeOn=0;
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	e7eb      	b.n	8001d26 <contadorOutput+0xc6>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e7f8      	b.n	8001d44 <contadorOutput+0xe4>

08001d52 <IndviduoPID_SetPWMValue>:

void IndviduoPID_SetPWMValue(IndviduoPID *pid, double pwmValue) {
 8001d52:	b5d0      	push	{r4, r6, r7, lr}
 8001d54:	b088      	sub	sp, #32
 8001d56:	4604      	mov	r4, r0
 8001d58:	461f      	mov	r7, r3
 8001d5a:	4616      	mov	r6, r2
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2214      	movs	r2, #20
 8001d60:	a803      	add	r0, sp, #12
 8001d62:	f007 fcb1 	bl	80096c8 <memset>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d66:	2360      	movs	r3, #96	; 0x60
    sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 8001d68:	4639      	mov	r1, r7
 8001d6a:	4630      	mov	r0, r6
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6c:	9301      	str	r3, [sp, #4]
    sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 8001d6e:	f7fe fe4d 	bl	8000a0c <__aeabi_d2uiz>
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;

    if (HAL_TIM_PWM_ConfigChannel(pid->TimHandle, &sConfigOC, pid->Channel) != HAL_OK) {
 8001d72:	6862      	ldr	r2, [r4, #4]
    sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 8001d74:	9002      	str	r0, [sp, #8]
    if (HAL_TIM_PWM_ConfigChannel(pid->TimHandle, &sConfigOC, pid->Channel) != HAL_OK) {
 8001d76:	a901      	add	r1, sp, #4
 8001d78:	6820      	ldr	r0, [r4, #0]
 8001d7a:	f004 fc4b 	bl	8006614 <HAL_TIM_PWM_ConfigChannel>
        // Tratamento de erro
    }

    if (HAL_TIM_PWM_Start(pid->TimHandle, pid->Channel) != HAL_OK) {
 8001d7e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001d82:	f004 fda1 	bl	80068c8 <HAL_TIM_PWM_Start>
        // Tratamento de erro
    }
}
 8001d86:	b008      	add	sp, #32
 8001d88:	bdd0      	pop	{r4, r6, r7, pc}
	...

08001d8c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <vApplicationGetIdleTaskMemory+0x10>)
 8001d8e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <vApplicationGetIdleTaskMemory+0x14>)
 8001d92:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	200002b4 	.word	0x200002b4
 8001da0:	200000b4 	.word	0x200000b4

08001da4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <vApplicationGetTimerTaskMemory+0x10>)
 8001da6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <vApplicationGetTimerTaskMemory+0x14>)
 8001daa:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db0:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8001db2:	4770      	bx	lr
 8001db4:	20000754 	.word	0x20000754
 8001db8:	20000354 	.word	0x20000354

08001dbc <timeoutAquecimento>:
		PrimitiveStates.Lastro.realtime = TempLastro;
		i=0;
	}
}

void timeoutAquecimento (void){
 8001dbc:	b510      	push	{r4, lr}
	//verifica erro temperatura lastro
	if(PrimitiveStates.Lastro.realtime < PrimitiveStates.Lastro.setPoint-5)
 8001dbe:	4c14      	ldr	r4, [pc, #80]	; (8001e10 <timeoutAquecimento+0x54>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	e9d4 014a 	ldrd	r0, r1, [r4, #296]	; 0x128
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <timeoutAquecimento+0x58>)
 8001dc8:	f7fe f9ce 	bl	8000168 <__aeabi_dsub>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	e9d4 0148 	ldrd	r0, r1, [r4, #288]	; 0x120
 8001dd4:	f7fe fdf2 	bl	80009bc <__aeabi_dcmplt>
 8001dd8:	b128      	cbz	r0, 8001de6 <timeoutAquecimento+0x2a>
		PrimitiveStates.Erro.bit.IdleLastro=1;
 8001dda:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	f884 314e 	strb.w	r3, [r4, #334]	; 0x14e

	//verifica erro temperatura teto
	if(PrimitiveStates.Teto.realtime < PrimitiveStates.Teto.setPoint-5)
 8001de6:	2200      	movs	r2, #0
 8001de8:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <timeoutAquecimento+0x58>)
 8001dee:	f7fe f9bb 	bl	8000168 <__aeabi_dsub>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
 8001dfa:	f7fe fddf 	bl	80009bc <__aeabi_dcmplt>
 8001dfe:	b128      	cbz	r0, 8001e0c <timeoutAquecimento+0x50>
		PrimitiveStates.Erro.bit.IdleTeto=1;
 8001e00:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	f884 314e 	strb.w	r3, [r4, #334]	; 0x14e
}
 8001e0c:	bd10      	pop	{r4, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000818 	.word	0x20000818
 8001e14:	40140000 	.word	0x40140000

08001e18 <timeoutDesligaLampada>:

void timeoutDesligaLampada(void){

	offDigital(&PrimitiveStates.Lampada);
 8001e18:	4801      	ldr	r0, [pc, #4]	; (8001e20 <timeoutDesligaLampada+0x8>)
 8001e1a:	f7ff bf17 	b.w	8001c4c <offDigital>
 8001e1e:	bf00      	nop
 8001e20:	20000844 	.word	0x20000844

08001e24 <CBTimer10ms>:
/* CBTimer10ms function */
void CBTimer10ms(void const * argument)
{
	/* USER CODE BEGIN CBTimer10ms */

	bluetooth10ms(&bluetooth);
 8001e24:	4801      	ldr	r0, [pc, #4]	; (8001e2c <CBTimer10ms+0x8>)
 8001e26:	f7ff bccf 	b.w	80017c8 <bluetooth10ms>
 8001e2a:	bf00      	nop
 8001e2c:	20000ebc 	.word	0x20000ebc

08001e30 <SystemClock_Config>:
{
 8001e30:	b530      	push	{r4, r5, lr}
 8001e32:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e34:	2220      	movs	r2, #32
 8001e36:	2100      	movs	r1, #0
 8001e38:	a80b      	add	r0, sp, #44	; 0x2c
 8001e3a:	f007 fc45 	bl	80096c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e3e:	2214      	movs	r2, #20
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e40:	2510      	movs	r5, #16
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e42:	2100      	movs	r1, #0
 8001e44:	eb0d 0002 	add.w	r0, sp, r2
 8001e48:	f007 fc3e 	bl	80096c8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e4c:	462a      	mov	r2, r5
 8001e4e:	2100      	movs	r1, #0
 8001e50:	a801      	add	r0, sp, #4
 8001e52:	f007 fc39 	bl	80096c8 <memset>
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e56:	2401      	movs	r4, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001e58:	230a      	movs	r3, #10
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e5a:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001e5e:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e60:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8001e62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e66:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e68:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6a:	9511      	str	r5, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8001e6c:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e6e:	f003 fca7 	bl	80057c0 <HAL_RCC_OscConfig>
 8001e72:	b108      	cbz	r0, 8001e78 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e74:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e76:	e7fe      	b.n	8001e76 <SystemClock_Config+0x46>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e78:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e7a:	e9cd 3505 	strd	r3, r5, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e82:	9007      	str	r0, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e84:	e9cd 3008 	strd	r3, r0, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e88:	4621      	mov	r1, r4
 8001e8a:	a805      	add	r0, sp, #20
 8001e8c:	f003 fe5a 	bl	8005b44 <HAL_RCC_ClockConfig>
 8001e90:	b108      	cbz	r0, 8001e96 <SystemClock_Config+0x66>
 8001e92:	b672      	cpsid	i
	while (1)
 8001e94:	e7fe      	b.n	8001e94 <SystemClock_Config+0x64>
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	e9cd 2301 	strd	r2, r3, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001ea0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ea4:	a801      	add	r0, sp, #4
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001ea6:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ea8:	f003 ff26 	bl	8005cf8 <HAL_RCCEx_PeriphCLKConfig>
 8001eac:	b108      	cbz	r0, 8001eb2 <SystemClock_Config+0x82>
 8001eae:	b672      	cpsid	i
	while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <SystemClock_Config+0x80>
}
 8001eb2:	b015      	add	sp, #84	; 0x54
 8001eb4:	bd30      	pop	{r4, r5, pc}
	...

08001eb8 <main>:
{
 8001eb8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	2710      	movs	r7, #16
{
 8001ebe:	b0c7      	sub	sp, #284	; 0x11c
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec0:	4dac      	ldr	r5, [pc, #688]	; (8002174 <main+0x2bc>)
	HAL_Init();
 8001ec2:	f002 f9ab 	bl	800421c <HAL_Init>
	SystemClock_Config();
 8001ec6:	f7ff ffb3 	bl	8001e30 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	463a      	mov	r2, r7
 8001ecc:	2100      	movs	r1, #0
 8001ece:	a83f      	add	r0, sp, #252	; 0xfc
 8001ed0:	f007 fbfa 	bl	80096c8 <memset>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 8001ed6:	2201      	movs	r2, #1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	61ab      	str	r3, [r5, #24]
 8001ede:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 8001ee0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8001eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001eec:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 8001eee:	48a2      	ldr	r0, [pc, #648]	; (8002178 <main+0x2c0>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef0:	f043 0308 	orr.w	r3, r3, #8
 8001ef4:	61ab      	str	r3, [r5, #24]
 8001ef6:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2400      	movs	r4, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	930c      	str	r3, [sp, #48]	; 0x30
 8001f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 8001f02:	f002 ff2f 	bl	8004d64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f0c:	489b      	ldr	r0, [pc, #620]	; (800217c <main+0x2c4>)
 8001f0e:	f002 ff29 	bl	8004d64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin
 8001f12:	2200      	movs	r2, #0
 8001f14:	21f8      	movs	r1, #248	; 0xf8
 8001f16:	4898      	ldr	r0, [pc, #608]	; (8002178 <main+0x2c0>)
 8001f18:	f002 ff24 	bl	8004d64 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1c:	f04f 0801 	mov.w	r8, #1
 8001f20:	f246 0378 	movw	r3, #24696	; 0x6078
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	f04f 0902 	mov.w	r9, #2
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f28:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
	GPIO_InitStruct.Pin = BOTAO_BLE_Pin;
 8001f2c:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	4891      	ldr	r0, [pc, #580]	; (8002178 <main+0x2c0>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f32:	f8df b24c 	ldr.w	fp, [pc, #588]	; 8002180 <main+0x2c8>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	a93f      	add	r1, sp, #252	; 0xfc
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f38:	e9cd 383f 	strd	r3, r8, [sp, #252]	; 0xfc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	e9cd 4941 	strd	r4, r9, [sp, #260]	; 0x104
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f002 fdc2 	bl	8004ac8 <HAL_GPIO_Init>
	HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 8001f44:	488c      	ldr	r0, [pc, #560]	; (8002178 <main+0x2c0>)
 8001f46:	a93f      	add	r1, sp, #252	; 0xfc
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	9441      	str	r4, [sp, #260]	; 0x104
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f4a:	e9cd ab3f 	strd	sl, fp, [sp, #252]	; 0xfc
	HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f002 fdbb 	bl	8004ac8 <HAL_GPIO_Init>
	HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 8001f52:	488a      	ldr	r0, [pc, #552]	; (800217c <main+0x2c4>)
 8001f54:	a93f      	add	r1, sp, #252	; 0xfc
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	9441      	str	r4, [sp, #260]	; 0x104
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f58:	e9cd 6b3f 	strd	r6, fp, [sp, #252]	; 0xfc
	HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 8001f5c:	f002 fdb4 	bl	8004ac8 <HAL_GPIO_Init>
	HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 8001f60:	4886      	ldr	r0, [pc, #536]	; (800217c <main+0x2c4>)
 8001f62:	a93f      	add	r1, sp, #252	; 0xfc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	e9cd 4941 	strd	r4, r9, [sp, #260]	; 0x104
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f68:	e9cd a83f 	strd	sl, r8, [sp, #252]	; 0xfc
	HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	f002 fdac 	bl	8004ac8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = EEPROM_EN_Pin;
 8001f70:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 8001f72:	4881      	ldr	r0, [pc, #516]	; (8002178 <main+0x2c0>)
 8001f74:	a93f      	add	r1, sp, #252	; 0xfc
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f76:	e9cd 383f 	strd	r3, r8, [sp, #252]	; 0xfc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	e9cd 9941 	strd	r9, r9, [sp, #260]	; 0x104
	HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f002 fda3 	bl	8004ac8 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001f82:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001f84:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001f86:	ea43 0308 	orr.w	r3, r3, r8
 8001f8a:	616b      	str	r3, [r5, #20]
 8001f8c:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001f8e:	2105      	movs	r1, #5
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001f90:	ea03 0308 	and.w	r3, r3, r8
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001f94:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001f96:	930a      	str	r3, [sp, #40]	; 0x28
 8001f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001f9a:	f002 fbaf 	bl	80046fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f9e:	200b      	movs	r0, #11
 8001fa0:	f002 fbdc 	bl	800475c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001fa4:	4622      	mov	r2, r4
 8001fa6:	2105      	movs	r1, #5
 8001fa8:	200d      	movs	r0, #13
 8001faa:	f002 fba7 	bl	80046fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001fae:	200d      	movs	r0, #13
 8001fb0:	f002 fbd4 	bl	800475c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001fb4:	4622      	mov	r2, r4
 8001fb6:	2105      	movs	r1, #5
 8001fb8:	200f      	movs	r0, #15
 8001fba:	f002 fb9f 	bl	80046fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001fbe:	200f      	movs	r0, #15
 8001fc0:	f002 fbcc 	bl	800475c <HAL_NVIC_EnableIRQ>
	hadc1.Instance = ADC1;
 8001fc4:	4d6f      	ldr	r5, [pc, #444]	; (8002184 <main+0x2cc>)
 8001fc6:	4b70      	ldr	r3, [pc, #448]	; (8002188 <main+0x2d0>)
	ADC_ChannelConfTypeDef sConfig = {0};
 8001fc8:	e9cd 443f 	strd	r4, r4, [sp, #252]	; 0xfc
	hadc1.Instance = ADC1;
 8001fcc:	602b      	str	r3, [r5, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fce:	f44f 7380 	mov.w	r3, #256	; 0x100
	ADC_ChannelConfTypeDef sConfig = {0};
 8001fd2:	9441      	str	r4, [sp, #260]	; 0x104
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fd4:	60ab      	str	r3, [r5, #8]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fd6:	752c      	strb	r4, [r5, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fd8:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fdc:	606c      	str	r4, [r5, #4]
	hadc1.Init.NbrOfConversion = 3;
 8001fde:	2403      	movs	r4, #3
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fe0:	4628      	mov	r0, r5
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001fe2:	f885 800c 	strb.w	r8, [r5, #12]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fe6:	61eb      	str	r3, [r5, #28]
	hadc1.Init.NbrOfConversion = 3;
 8001fe8:	612c      	str	r4, [r5, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fea:	f002 faf7 	bl	80045dc <HAL_ADC_Init>
 8001fee:	b108      	cbz	r0, 8001ff4 <main+0x13c>
 8001ff0:	b672      	cpsid	i
	while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <main+0x13a>
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001ff4:	2306      	movs	r3, #6
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ff6:	e9cd 083f 	strd	r0, r8, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ffa:	a93f      	add	r1, sp, #252	; 0xfc
 8001ffc:	4628      	mov	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001ffe:	9341      	str	r3, [sp, #260]	; 0x104
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002000:	f002 f97e 	bl	8004300 <HAL_ADC_ConfigChannel>
 8002004:	b108      	cbz	r0, 800200a <main+0x152>
 8002006:	b672      	cpsid	i
	while (1)
 8002008:	e7fe      	b.n	8002008 <main+0x150>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800200a:	4628      	mov	r0, r5
 800200c:	a93f      	add	r1, sp, #252	; 0xfc
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800200e:	e9cd 893f 	strd	r8, r9, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002012:	f002 f975 	bl	8004300 <HAL_ADC_ConfigChannel>
 8002016:	b108      	cbz	r0, 800201c <main+0x164>
 8002018:	b672      	cpsid	i
	while (1)
 800201a:	e7fe      	b.n	800201a <main+0x162>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800201c:	4628      	mov	r0, r5
 800201e:	a93f      	add	r1, sp, #252	; 0xfc
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8002020:	e9cd 743f 	strd	r7, r4, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002024:	f002 f96c 	bl	8004300 <HAL_ADC_ConfigChannel>
 8002028:	4603      	mov	r3, r0
 800202a:	b108      	cbz	r0, 8002030 <main+0x178>
 800202c:	b672      	cpsid	i
	while (1)
 800202e:	e7fe      	b.n	800202e <main+0x176>
	hi2c1.Instance = I2C1;
 8002030:	4856      	ldr	r0, [pc, #344]	; (800218c <main+0x2d4>)
	hi2c1.Init.ClockSpeed = 100000;
 8002032:	f8df c15c 	ldr.w	ip, [pc, #348]	; 8002190 <main+0x2d8>
 8002036:	4a57      	ldr	r2, [pc, #348]	; (8002194 <main+0x2dc>)
	hi2c1.Init.OwnAddress1 = 0;
 8002038:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hi2c1.Init.ClockSpeed = 100000;
 800203c:	e9c0 c200 	strd	ip, r2, [r0]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002040:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002044:	e9c0 3306 	strd	r3, r3, [r0, #24]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002048:	e9c0 2304 	strd	r2, r3, [r0, #16]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800204c:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800204e:	f003 f88b 	bl	8005168 <HAL_I2C_Init>
 8002052:	4605      	mov	r5, r0
 8002054:	b108      	cbz	r0, 800205a <main+0x1a2>
 8002056:	b672      	cpsid	i
	while (1)
 8002058:	e7fe      	b.n	8002058 <main+0x1a0>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205a:	463a      	mov	r2, r7
 800205c:	4601      	mov	r1, r0
 800205e:	a838      	add	r0, sp, #224	; 0xe0
 8002060:	f007 fb32 	bl	80096c8 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002064:	221c      	movs	r2, #28
 8002066:	4629      	mov	r1, r5
 8002068:	a83f      	add	r0, sp, #252	; 0xfc
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206a:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	TIM_OC_InitTypeDef sConfigOC = {0};
 800206e:	f007 fb2b 	bl	80096c8 <memset>
	htim3.Init.Prescaler = 4000-1;
 8002072:	f640 739f 	movw	r3, #3999	; 0xf9f
	htim3.Instance = TIM3;
 8002076:	4c48      	ldr	r4, [pc, #288]	; (8002198 <main+0x2e0>)
	htim3.Init.Prescaler = 4000-1;
 8002078:	4f48      	ldr	r7, [pc, #288]	; (800219c <main+0x2e4>)
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800207a:	4620      	mov	r0, r4
	htim3.Init.Prescaler = 4000-1;
 800207c:	e9c4 7300 	strd	r7, r3, [r4]
	htim3.Init.Period = 100-1;
 8002080:	2363      	movs	r3, #99	; 0x63
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002082:	60a5      	str	r5, [r4, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002084:	e9c4 3503 	strd	r3, r5, [r4, #12]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002088:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800208a:	f004 fa3f 	bl	800650c <HAL_TIM_Base_Init>
 800208e:	b108      	cbz	r0, 8002094 <main+0x1dc>
 8002090:	b672      	cpsid	i
	while (1)
 8002092:	e7fe      	b.n	8002092 <main+0x1da>
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002094:	4620      	mov	r0, r4
 8002096:	a938      	add	r1, sp, #224	; 0xe0
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002098:	9638      	str	r6, [sp, #224]	; 0xe0
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800209a:	f004 fb1e 	bl	80066da <HAL_TIM_ConfigClockSource>
 800209e:	b108      	cbz	r0, 80020a4 <main+0x1ec>
 80020a0:	b672      	cpsid	i
	while (1)
 80020a2:	e7fe      	b.n	80020a2 <main+0x1ea>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020a4:	4620      	mov	r0, r4
 80020a6:	f004 fa5d 	bl	8006564 <HAL_TIM_PWM_Init>
 80020aa:	b108      	cbz	r0, 80020b0 <main+0x1f8>
 80020ac:	b672      	cpsid	i
	while (1)
 80020ae:	e7fe      	b.n	80020ae <main+0x1f6>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b0:	e9cd 0031 	strd	r0, r0, [sp, #196]	; 0xc4
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020b4:	a931      	add	r1, sp, #196	; 0xc4
 80020b6:	4620      	mov	r0, r4
 80020b8:	f004 fc44 	bl	8006944 <HAL_TIMEx_MasterConfigSynchronization>
 80020bc:	4602      	mov	r2, r0
 80020be:	b108      	cbz	r0, 80020c4 <main+0x20c>
 80020c0:	b672      	cpsid	i
	while (1)
 80020c2:	e7fe      	b.n	80020c2 <main+0x20a>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c4:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = 0;
 80020c6:	e9cd 303f 	strd	r3, r0, [sp, #252]	; 0xfc
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80020ca:	2304      	movs	r3, #4
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020cc:	9041      	str	r0, [sp, #260]	; 0x104
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ce:	a93f      	add	r1, sp, #252	; 0xfc
 80020d0:	4620      	mov	r0, r4
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80020d2:	9343      	str	r3, [sp, #268]	; 0x10c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020d4:	f004 fa9e 	bl	8006614 <HAL_TIM_PWM_ConfigChannel>
 80020d8:	b108      	cbz	r0, 80020de <main+0x226>
 80020da:	b672      	cpsid	i
	while (1)
 80020dc:	e7fe      	b.n	80020dc <main+0x224>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020de:	2204      	movs	r2, #4
 80020e0:	482d      	ldr	r0, [pc, #180]	; (8002198 <main+0x2e0>)
 80020e2:	a93f      	add	r1, sp, #252	; 0xfc
 80020e4:	f004 fa96 	bl	8006614 <HAL_TIM_PWM_ConfigChannel>
 80020e8:	b108      	cbz	r0, 80020ee <main+0x236>
 80020ea:	b672      	cpsid	i
	while (1)
 80020ec:	e7fe      	b.n	80020ec <main+0x234>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020ee:	2208      	movs	r2, #8
 80020f0:	4829      	ldr	r0, [pc, #164]	; (8002198 <main+0x2e0>)
 80020f2:	a93f      	add	r1, sp, #252	; 0xfc
 80020f4:	f004 fa8e 	bl	8006614 <HAL_TIM_PWM_ConfigChannel>
 80020f8:	b108      	cbz	r0, 80020fe <main+0x246>
 80020fa:	b672      	cpsid	i
	while (1)
 80020fc:	e7fe      	b.n	80020fc <main+0x244>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020fe:	220c      	movs	r2, #12
 8002100:	4825      	ldr	r0, [pc, #148]	; (8002198 <main+0x2e0>)
 8002102:	a93f      	add	r1, sp, #252	; 0xfc
 8002104:	f004 fa86 	bl	8006614 <HAL_TIM_PWM_ConfigChannel>
 8002108:	4605      	mov	r5, r0
 800210a:	b108      	cbz	r0, 8002110 <main+0x258>
 800210c:	b672      	cpsid	i
	while (1)
 800210e:	e7fe      	b.n	800210e <main+0x256>
	HAL_TIM_MspPostInit(&htim3);
 8002110:	4821      	ldr	r0, [pc, #132]	; (8002198 <main+0x2e0>)
 8002112:	f000 fe3b 	bl	8002d8c <HAL_TIM_MspPostInit>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002116:	2210      	movs	r2, #16
 8002118:	4629      	mov	r1, r5
 800211a:	a838      	add	r0, sp, #224	; 0xe0
 800211c:	f007 fad4 	bl	80096c8 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002120:	221c      	movs	r2, #28
 8002122:	4629      	mov	r1, r5
 8002124:	a83f      	add	r0, sp, #252	; 0xfc
	htim2.Init.Prescaler = 1200-1;
 8002126:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212a:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	TIM_OC_InitTypeDef sConfigOC = {0};
 800212e:	f007 facb 	bl	80096c8 <memset>
	htim2.Init.Prescaler = 1200-1;
 8002132:	f240 43af 	movw	r3, #1199	; 0x4af
	htim2.Instance = TIM2;
 8002136:	4c1a      	ldr	r4, [pc, #104]	; (80021a0 <main+0x2e8>)
	htim2.Init.Prescaler = 1200-1;
 8002138:	e9c4 6300 	strd	r6, r3, [r4]
	htim2.Init.Period = 100-1;
 800213c:	2363      	movs	r3, #99	; 0x63
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800213e:	4620      	mov	r0, r4
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002140:	e9c4 3503 	strd	r3, r5, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002144:	60a5      	str	r5, [r4, #8]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002146:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002148:	f004 f9e0 	bl	800650c <HAL_TIM_Base_Init>
 800214c:	b108      	cbz	r0, 8002152 <main+0x29a>
 800214e:	b672      	cpsid	i
	while (1)
 8002150:	e7fe      	b.n	8002150 <main+0x298>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002156:	4620      	mov	r0, r4
 8002158:	a938      	add	r1, sp, #224	; 0xe0
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215a:	9338      	str	r3, [sp, #224]	; 0xe0
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800215c:	f004 fabd 	bl	80066da <HAL_TIM_ConfigClockSource>
 8002160:	b108      	cbz	r0, 8002166 <main+0x2ae>
 8002162:	b672      	cpsid	i
	while (1)
 8002164:	e7fe      	b.n	8002164 <main+0x2ac>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002166:	4620      	mov	r0, r4
 8002168:	f004 f9fc 	bl	8006564 <HAL_TIM_PWM_Init>
 800216c:	b1d0      	cbz	r0, 80021a4 <main+0x2ec>
 800216e:	b672      	cpsid	i
	while (1)
 8002170:	e7fe      	b.n	8002170 <main+0x2b8>
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	40010c00 	.word	0x40010c00
 800217c:	40010800 	.word	0x40010800
 8002180:	10110000 	.word	0x10110000
 8002184:	20001008 	.word	0x20001008
 8002188:	40012400 	.word	0x40012400
 800218c:	20001104 	.word	0x20001104
 8002190:	40005400 	.word	0x40005400
 8002194:	000186a0 	.word	0x000186a0
 8002198:	200011b4 	.word	0x200011b4
 800219c:	40000400 	.word	0x40000400
 80021a0:	2000116c 	.word	0x2000116c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a4:	e9cd 0031 	strd	r0, r0, [sp, #196]	; 0xc4
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021a8:	a931      	add	r1, sp, #196	; 0xc4
 80021aa:	4620      	mov	r0, r4
 80021ac:	f004 fbca 	bl	8006944 <HAL_TIMEx_MasterConfigSynchronization>
 80021b0:	b108      	cbz	r0, 80021b6 <main+0x2fe>
 80021b2:	b672      	cpsid	i
	while (1)
 80021b4:	e7fe      	b.n	80021b4 <main+0x2fc>
	sConfigOC.Pulse = 50;
 80021b6:	2560      	movs	r5, #96	; 0x60
 80021b8:	2332      	movs	r3, #50	; 0x32
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ba:	9041      	str	r0, [sp, #260]	; 0x104
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021bc:	9043      	str	r0, [sp, #268]	; 0x10c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021be:	220c      	movs	r2, #12
 80021c0:	4620      	mov	r0, r4
 80021c2:	a93f      	add	r1, sp, #252	; 0xfc
	sConfigOC.Pulse = 50;
 80021c4:	e9cd 533f 	strd	r5, r3, [sp, #252]	; 0xfc
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021c8:	f004 fa24 	bl	8006614 <HAL_TIM_PWM_ConfigChannel>
 80021cc:	4605      	mov	r5, r0
 80021ce:	b108      	cbz	r0, 80021d4 <main+0x31c>
 80021d0:	b672      	cpsid	i
	while (1)
 80021d2:	e7fe      	b.n	80021d2 <main+0x31a>
	HAL_TIM_MspPostInit(&htim2);
 80021d4:	4620      	mov	r0, r4
 80021d6:	f000 fdd9 	bl	8002d8c <HAL_TIM_MspPostInit>
	huart1.Init.BaudRate = 9600;
 80021da:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	huart1.Instance = USART1;
 80021de:	4827      	ldr	r0, [pc, #156]	; (800227c <main+0x3c4>)
	huart1.Init.BaudRate = 9600;
 80021e0:	4c27      	ldr	r4, [pc, #156]	; (8002280 <main+0x3c8>)
	huart1.Init.StopBits = UART_STOPBITS_1;
 80021e2:	e9c0 5502 	strd	r5, r5, [r0, #8]
	huart1.Init.BaudRate = 9600;
 80021e6:	e9c0 4300 	strd	r4, r3, [r0]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80021ea:	240c      	movs	r4, #12
	huart1.Init.Parity = UART_PARITY_NONE;
 80021ec:	6105      	str	r5, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ee:	e9c0 4505 	strd	r4, r5, [r0, #20]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f2:	61c5      	str	r5, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80021f4:	f004 fc74 	bl	8006ae0 <HAL_UART_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	b108      	cbz	r0, 8002200 <main+0x348>
 80021fc:	b672      	cpsid	i
	while (1)
 80021fe:	e7fe      	b.n	80021fe <main+0x346>
	huart3.Init.BaudRate = 115200;
 8002200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart3.Instance = USART3;
 8002204:	481f      	ldr	r0, [pc, #124]	; (8002284 <main+0x3cc>)
	huart3.Init.BaudRate = 115200;
 8002206:	4920      	ldr	r1, [pc, #128]	; (8002288 <main+0x3d0>)
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002208:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart3.Init.BaudRate = 115200;
 800220c:	e9c0 1200 	strd	r1, r2, [r0]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002210:	e9c0 3404 	strd	r3, r4, [r0, #16]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002214:	e9c0 3306 	strd	r3, r3, [r0, #24]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8002218:	f004 fc62 	bl	8006ae0 <HAL_UART_Init>
 800221c:	b108      	cbz	r0, 8002222 <main+0x36a>
 800221e:	b672      	cpsid	i
	while (1)
 8002220:	e7fe      	b.n	8002220 <main+0x368>
	RTC_TimeTypeDef sTime = {0};
 8002222:	2300      	movs	r3, #0
 8002224:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
 8002228:	f88d 30e2 	strb.w	r3, [sp, #226]	; 0xe2
	RTC_DateTypeDef DateToUpdate = {0};
 800222c:	933f      	str	r3, [sp, #252]	; 0xfc
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
	hrtc.Instance = RTC;
 8002232:	4c16      	ldr	r4, [pc, #88]	; (800228c <main+0x3d4>)
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002234:	4a16      	ldr	r2, [pc, #88]	; (8002290 <main+0x3d8>)
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002236:	4620      	mov	r0, r4
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002238:	e9c4 2300 	strd	r2, r3, [r4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800223c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002240:	60a3      	str	r3, [r4, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002242:	f003 ff9d 	bl	8006180 <HAL_RTC_Init>
 8002246:	b108      	cbz	r0, 800224c <main+0x394>
 8002248:	b672      	cpsid	i
	while (1)
 800224a:	e7fe      	b.n	800224a <main+0x392>
	sTime.Hours = 0x0;
 800224c:	f8ad 00e0 	strh.w	r0, [sp, #224]	; 0xe0
	sTime.Seconds = 0x0;
 8002250:	f88d 00e2 	strb.w	r0, [sp, #226]	; 0xe2
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002254:	2201      	movs	r2, #1
 8002256:	4620      	mov	r0, r4
 8002258:	a938      	add	r1, sp, #224	; 0xe0
 800225a:	f003 fece 	bl	8005ffa <HAL_RTC_SetTime>
 800225e:	b108      	cbz	r0, 8002264 <main+0x3ac>
 8002260:	b672      	cpsid	i
	while (1)
 8002262:	e7fe      	b.n	8002262 <main+0x3aa>
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <main+0x3dc>)
	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002266:	4620      	mov	r0, r4
 8002268:	2201      	movs	r2, #1
 800226a:	a93f      	add	r1, sp, #252	; 0xfc
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800226c:	933f      	str	r3, [sp, #252]	; 0xfc
	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800226e:	f003 ff15 	bl	800609c <HAL_RTC_SetDate>
 8002272:	4604      	mov	r4, r0
 8002274:	b180      	cbz	r0, 8002298 <main+0x3e0>
 8002276:	b672      	cpsid	i
	while (1)
 8002278:	e7fe      	b.n	8002278 <main+0x3c0>
 800227a:	bf00      	nop
 800227c:	200011fc 	.word	0x200011fc
 8002280:	40013800 	.word	0x40013800
 8002284:	20001244 	.word	0x20001244
 8002288:	40004800 	.word	0x40004800
 800228c:	20001158 	.word	0x20001158
 8002290:	40002800 	.word	0x40002800
 8002294:	00010101 	.word	0x00010101
	HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 3	);// ADC_DMA
 8002298:	2203      	movs	r2, #3
	OutputAddPID(&PrimitiveStates.outPuts,&PrimitiveStates.Teto		,&htim3	,TIM_CHANNEL_3	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 800229a:	f20f 2954 	addw	r9, pc, #596	; 0x254
 800229e:	e9d9 8900 	ldrd	r8, r9, [r9]
 80022a2:	a795      	add	r7, pc, #596	; (adr r7, 80024f8 <main+0x640>)
 80022a4:	e9d7 6700 	ldrd	r6, r7, [r7]
	HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 3	);// ADC_DMA
 80022a8:	4995      	ldr	r1, [pc, #596]	; (8002500 <main+0x648>)
 80022aa:	4896      	ldr	r0, [pc, #600]	; (8002504 <main+0x64c>)
 80022ac:	f002 f8e2 	bl	8004474 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_3);
 80022b0:	2108      	movs	r1, #8
 80022b2:	4895      	ldr	r0, [pc, #596]	; (8002508 <main+0x650>)
 80022b4:	f004 fb08 	bl	80068c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_4);
 80022b8:	210c      	movs	r1, #12
 80022ba:	4893      	ldr	r0, [pc, #588]	; (8002508 <main+0x650>)
 80022bc:	f004 fb04 	bl	80068c8 <HAL_TIM_PWM_Start>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.Lampada		,RELE_5_Pin	,RELE_5_GPIO_Port	,timeoutDesligaLampada	,45	,0);
 80022c0:	232d      	movs	r3, #45	; 0x2d
 80022c2:	4992      	ldr	r1, [pc, #584]	; (800250c <main+0x654>)
 80022c4:	9301      	str	r3, [sp, #4]
 80022c6:	4b92      	ldr	r3, [pc, #584]	; (8002510 <main+0x658>)
 80022c8:	2240      	movs	r2, #64	; 0x40
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	f1a1 002c 	sub.w	r0, r1, #44	; 0x2c
 80022d0:	4b90      	ldr	r3, [pc, #576]	; (8002514 <main+0x65c>)
 80022d2:	9402      	str	r4, [sp, #8]
 80022d4:	f7ff fc7d 	bl	8001bd2 <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.Cooler		,RELE_4_Pin	,RELE_4_GPIO_Port	,0	,0	,0);
 80022d8:	498f      	ldr	r1, [pc, #572]	; (8002518 <main+0x660>)
 80022da:	2220      	movs	r2, #32
 80022dc:	4b8d      	ldr	r3, [pc, #564]	; (8002514 <main+0x65c>)
 80022de:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
 80022e2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80022e6:	9400      	str	r4, [sp, #0]
 80022e8:	f7ff fc73 	bl	8001bd2 <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.Cooler		,RELE_4_Pin	,RELE_4_GPIO_Port	,0	,0	,0);
 80022ec:	498a      	ldr	r1, [pc, #552]	; (8002518 <main+0x660>)
 80022ee:	2220      	movs	r2, #32
 80022f0:	4b88      	ldr	r3, [pc, #544]	; (8002514 <main+0x65c>)
 80022f2:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
 80022f6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80022fa:	9400      	str	r4, [sp, #0]
 80022fc:	f7ff fc69 	bl	8001bd2 <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.LedLastro	,RELE_3_Pin	,RELE_3_GPIO_Port	,0	,0	,0);
 8002300:	4986      	ldr	r1, [pc, #536]	; (800251c <main+0x664>)
 8002302:	2210      	movs	r2, #16
 8002304:	4b83      	ldr	r3, [pc, #524]	; (8002514 <main+0x65c>)
 8002306:	f1a1 008c 	sub.w	r0, r1, #140	; 0x8c
 800230a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800230e:	9400      	str	r4, [sp, #0]
 8002310:	f7ff fc5f 	bl	8001bd2 <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.LedTeto		,RELE_2_Pin	,RELE_2_GPIO_Port	,0	,0	,0);
 8002314:	4982      	ldr	r1, [pc, #520]	; (8002520 <main+0x668>)
 8002316:	2208      	movs	r2, #8
 8002318:	4b7e      	ldr	r3, [pc, #504]	; (8002514 <main+0x65c>)
 800231a:	f1a1 0074 	sub.w	r0, r1, #116	; 0x74
 800231e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002322:	9400      	str	r4, [sp, #0]
 8002324:	f7ff fc55 	bl	8001bd2 <OutputAddDigital>
	OutputAddDigital(&PrimitiveStates.outPuts,&PrimitiveStates.LedVerde		,RELE_1_Pin	,RELE_1_GPIO_Port	,0	,0	,0);
 8002328:	497e      	ldr	r1, [pc, #504]	; (8002524 <main+0x66c>)
 800232a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800232e:	4b7e      	ldr	r3, [pc, #504]	; (8002528 <main+0x670>)
 8002330:	f1a1 005c 	sub.w	r0, r1, #92	; 0x5c
 8002334:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002338:	9400      	str	r4, [sp, #0]
 800233a:	f7ff fc4a 	bl	8001bd2 <OutputAddDigital>
	OutputAddPID(&PrimitiveStates.outPuts,&PrimitiveStates.Teto		,&htim3	,TIM_CHANNEL_3	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 800233e:	2503      	movs	r5, #3
 8002340:	f44f 7a16 	mov.w	sl, #600	; 0x258
 8002344:	2200      	movs	r2, #0
 8002346:	4979      	ldr	r1, [pc, #484]	; (800252c <main+0x674>)
 8002348:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8002530 <main+0x678>
 800234c:	4b79      	ldr	r3, [pc, #484]	; (8002534 <main+0x67c>)
 800234e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002352:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002356:	e9cd 2300 	strd	r2, r3, [sp]
 800235a:	e9cd 5a06 	strd	r5, sl, [sp, #24]
 800235e:	2308      	movs	r3, #8
 8002360:	4a69      	ldr	r2, [pc, #420]	; (8002508 <main+0x650>)
 8002362:	f1a1 00a8 	sub.w	r0, r1, #168	; 0xa8
 8002366:	f8cd b020 	str.w	fp, [sp, #32]
 800236a:	f7ff fc46 	bl	8001bfa <OutputAddPID>
	OutputAddPID(&PrimitiveStates.outPuts,&PrimitiveStates.Lastro	,&htim3	,TIM_CHANNEL_4	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 800236e:	2200      	movs	r2, #0
 8002370:	4971      	ldr	r1, [pc, #452]	; (8002538 <main+0x680>)
 8002372:	4b70      	ldr	r3, [pc, #448]	; (8002534 <main+0x67c>)
 8002374:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002378:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800237c:	e9cd 2300 	strd	r2, r3, [sp]
 8002380:	9506      	str	r5, [sp, #24]
 8002382:	230c      	movs	r3, #12
 8002384:	4a60      	ldr	r2, [pc, #384]	; (8002508 <main+0x650>)
 8002386:	f1a1 00f8 	sub.w	r0, r1, #248	; 0xf8
 800238a:	e9cd ab07 	strd	sl, fp, [sp, #28]
 800238e:	f7ff fc34 	bl	8001bfa <OutputAddPID>
	BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8002392:	2101      	movs	r1, #1
 8002394:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(BinSemUartTx);
 8002396:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 800239a:	f005 f84d 	bl	8007438 <osSemaphoreCreate>
 800239e:	4b67      	ldr	r3, [pc, #412]	; (800253c <main+0x684>)
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 80023a0:	4622      	mov	r2, r4
	BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 80023a2:	6018      	str	r0, [r3, #0]
	osTimerDef(timer10ms, CBTimer10ms);
 80023a4:	4b66      	ldr	r3, [pc, #408]	; (8002540 <main+0x688>)
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 80023a6:	2101      	movs	r1, #1
 80023a8:	a80f      	add	r0, sp, #60	; 0x3c
	osTimerDef(timer10ms, CBTimer10ms);
 80023aa:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 80023ae:	f004 ffb5 	bl	800731c <osTimerCreate>
 80023b2:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8002544 <main+0x68c>
	osTimerDef(timer1000ms, CBTimer1000ms);
 80023b6:	4b64      	ldr	r3, [pc, #400]	; (8002548 <main+0x690>)
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 80023b8:	4622      	mov	r2, r4
 80023ba:	2101      	movs	r1, #1
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 80023bc:	f8c8 0000 	str.w	r0, [r8]
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 80023c0:	a811      	add	r0, sp, #68	; 0x44
	osTimerDef(timer1000ms, CBTimer1000ms);
 80023c2:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 80023c6:	f004 ffa9 	bl	800731c <osTimerCreate>
	osMessageQDef(FilaComando, 10, uint16_t);
 80023ca:	4d60      	ldr	r5, [pc, #384]	; (800254c <main+0x694>)
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 80023cc:	4f60      	ldr	r7, [pc, #384]	; (8002550 <main+0x698>)
	osMessageQDef(FilaComando, 10, uint16_t);
 80023ce:	ae13      	add	r6, sp, #76	; 0x4c
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 80023d0:	6038      	str	r0, [r7, #0]
	osMessageQDef(FilaComando, 10, uint16_t);
 80023d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80023d6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	FilaComandoHandle = osMessageCreate(osMessageQ(FilaComando), NULL);
 80023da:	4621      	mov	r1, r4
 80023dc:	4630      	mov	r0, r6
 80023de:	f005 f84e 	bl	800747e <osMessageCreate>
 80023e2:	4b5c      	ldr	r3, [pc, #368]	; (8002554 <main+0x69c>)
	osMessageQDef(FilaTXBluetooth, 16, uint32_t);
 80023e4:	ae17      	add	r6, sp, #92	; 0x5c
	FilaComandoHandle = osMessageCreate(osMessageQ(FilaComando), NULL);
 80023e6:	6018      	str	r0, [r3, #0]
	osMessageQDef(FilaTXBluetooth, 16, uint32_t);
 80023e8:	f105 0310 	add.w	r3, r5, #16
 80023ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ee:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	FilaTXBluetoothHandle = osMessageCreate(osMessageQ(FilaTXBluetooth), NULL);
 80023f2:	4621      	mov	r1, r4
 80023f4:	4630      	mov	r0, r6
 80023f6:	f005 f842 	bl	800747e <osMessageCreate>
 80023fa:	4b57      	ldr	r3, [pc, #348]	; (8002558 <main+0x6a0>)
	osMessageQDef(FilaRXBluetooth, 10, uint8_t);
 80023fc:	ae1b      	add	r6, sp, #108	; 0x6c
	FilaTXBluetoothHandle = osMessageCreate(osMessageQ(FilaTXBluetooth), NULL);
 80023fe:	6018      	str	r0, [r3, #0]
	osMessageQDef(FilaRXBluetooth, 10, uint8_t);
 8002400:	f105 0320 	add.w	r3, r5, #32
 8002404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002406:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	FilaRXBluetoothHandle = osMessageCreate(osMessageQ(FilaRXBluetooth), NULL);
 800240a:	4621      	mov	r1, r4
 800240c:	4630      	mov	r0, r6
 800240e:	f005 f836 	bl	800747e <osMessageCreate>
 8002412:	4b52      	ldr	r3, [pc, #328]	; (800255c <main+0x6a4>)
	osMessageQDef(FilaEeprom, 10, uint16_t);
 8002414:	ae1f      	add	r6, sp, #124	; 0x7c
	FilaRXBluetoothHandle = osMessageCreate(osMessageQ(FilaRXBluetooth), NULL);
 8002416:	6018      	str	r0, [r3, #0]
	osMessageQDef(FilaEeprom, 10, uint16_t);
 8002418:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800241c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8002420:	4621      	mov	r1, r4
 8002422:	4630      	mov	r0, r6
 8002424:	f005 f82b 	bl	800747e <osMessageCreate>
 8002428:	4b4d      	ldr	r3, [pc, #308]	; (8002560 <main+0x6a8>)
	osThreadDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 128);
 800242a:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 800242e:	ae23      	add	r6, sp, #140	; 0x8c
	FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8002430:	6018      	str	r0, [r3, #0]
	osThreadDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 128);
 8002432:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002436:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002438:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800243c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 8002440:	4621      	mov	r1, r4
 8002442:	a823      	add	r0, sp, #140	; 0x8c
 8002444:	f004 ff2e 	bl	80072a4 <osThreadCreate>
 8002448:	4b46      	ldr	r3, [pc, #280]	; (8002564 <main+0x6ac>)
	osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 800244a:	f105 0c4c 	add.w	ip, r5, #76	; 0x4c
 800244e:	ae2a      	add	r6, sp, #168	; 0xa8
	TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 8002450:	6018      	str	r0, [r3, #0]
	osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 8002452:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002456:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002458:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800245c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8002460:	4621      	mov	r1, r4
 8002462:	a82a      	add	r0, sp, #168	; 0xa8
 8002464:	f004 ff1e 	bl	80072a4 <osThreadCreate>
 8002468:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002568 <main+0x6b0>
	osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 800246c:	f105 0c68 	add.w	ip, r5, #104	; 0x68
 8002470:	ae31      	add	r6, sp, #196	; 0xc4
	TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8002472:	f8c9 0000 	str.w	r0, [r9]
	osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8002476:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800247a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800247c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002480:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8002484:	4621      	mov	r1, r4
 8002486:	a831      	add	r0, sp, #196	; 0xc4
 8002488:	f004 ff0c 	bl	80072a4 <osThreadCreate>
 800248c:	4b37      	ldr	r3, [pc, #220]	; (800256c <main+0x6b4>)
	osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 800248e:	f105 0c84 	add.w	ip, r5, #132	; 0x84
 8002492:	ae38      	add	r6, sp, #224	; 0xe0
	TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8002494:	6018      	str	r0, [r3, #0]
	osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8002496:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800249a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800249c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80024a0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 80024a4:	4621      	mov	r1, r4
 80024a6:	a838      	add	r0, sp, #224	; 0xe0
 80024a8:	f004 fefc 	bl	80072a4 <osThreadCreate>
 80024ac:	4b30      	ldr	r3, [pc, #192]	; (8002570 <main+0x6b8>)
	osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 80024ae:	ae3f      	add	r6, sp, #252	; 0xfc
 80024b0:	35a0      	adds	r5, #160	; 0xa0
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 80024b2:	6018      	str	r0, [r3, #0]
	osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 80024b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80024b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024bc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskEepromHandle = osThreadCreate(osThread(TaskEeprom), NULL);
 80024c0:	4621      	mov	r1, r4
 80024c2:	a83f      	add	r0, sp, #252	; 0xfc
 80024c4:	f004 feee 	bl	80072a4 <osThreadCreate>
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <main+0x6bc>)
 80024ca:	6018      	str	r0, [r3, #0]
	osThreadSuspend(TaskTemperaturaHandle); //só é liberada após taskeeprom
 80024cc:	f8d9 0000 	ldr.w	r0, [r9]
 80024d0:	f005 f849 	bl	8007566 <osThreadSuspend>
	osTimerStart(timer10msHandle,10);
 80024d4:	210a      	movs	r1, #10
 80024d6:	f8d8 0000 	ldr.w	r0, [r8]
 80024da:	f004 ff37 	bl	800734c <osTimerStart>
	osTimerStart(timer1000msHandle,1000);
 80024de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024e2:	6838      	ldr	r0, [r7, #0]
 80024e4:	f004 ff32 	bl	800734c <osTimerStart>
	osKernelStart();
 80024e8:	f004 fed7 	bl	800729a <osKernelStart>
	while (1)
 80024ec:	e7fe      	b.n	80024ec <main+0x634>
 80024ee:	bf00      	nop
 80024f0:	33333333 	.word	0x33333333
 80024f4:	3fd33333 	.word	0x3fd33333
 80024f8:	47ae147b 	.word	0x47ae147b
 80024fc:	3f847ae1 	.word	0x3f847ae1
 8002500:	20000ffc 	.word	0x20000ffc
 8002504:	20001008 	.word	0x20001008
 8002508:	200011b4 	.word	0x200011b4
 800250c:	20000844 	.word	0x20000844
 8002510:	08001e19 	.word	0x08001e19
 8002514:	40010c00 	.word	0x40010c00
 8002518:	2000085c 	.word	0x2000085c
 800251c:	200008a4 	.word	0x200008a4
 8002520:	2000088c 	.word	0x2000088c
 8002524:	20000874 	.word	0x20000874
 8002528:	40010800 	.word	0x40010800
 800252c:	200008c0 	.word	0x200008c0
 8002530:	08001dbd 	.word	0x08001dbd
 8002534:	403e0000 	.word	0x403e0000
 8002538:	20000910 	.word	0x20000910
 800253c:	200007f4 	.word	0x200007f4
 8002540:	08001e25 	.word	0x08001e25
 8002544:	200012a0 	.word	0x200012a0
 8002548:	0800267d 	.word	0x0800267d
 800254c:	08009f94 	.word	0x08009f94
 8002550:	2000129c 	.word	0x2000129c
 8002554:	20000808 	.word	0x20000808
 8002558:	20000814 	.word	0x20000814
 800255c:	20000810 	.word	0x20000810
 8002560:	2000080c 	.word	0x2000080c
 8002564:	20000968 	.word	0x20000968
 8002568:	20000c14 	.word	0x20000c14
 800256c:	20000c0c 	.word	0x20000c0c
 8002570:	20000eb8 	.word	0x20000eb8
 8002574:	20000c10 	.word	0x20000c10

08002578 <desligaForno>:
	PrimitiveStates.Lastro.setPoint	= 0;
 8002578:	2000      	movs	r0, #0
 800257a:	2100      	movs	r1, #0
	PrimitiveStates.RTTimerMinutos 	= 0;
 800257c:	2200      	movs	r2, #0
	PrimitiveStates.Lastro.setPoint	= 0;
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <desligaForno+0x1c>)
 8002580:	e9c3 014a 	strd	r0, r1, [r3, #296]	; 0x128
	PrimitiveStates.Teto.setPoint 	= 0;
 8002584:	e9c3 0136 	strd	r0, r1, [r3, #216]	; 0xd8
	PrimitiveStates.RTTimerMinutos 	= 0;
 8002588:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
	PrimitiveStates.RTTimerSegundos = 0;
 800258c:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000818 	.word	0x20000818

08002598 <leTempInterna>:
void leTempInterna(void){
 8002598:	b508      	push	{r3, lr}
	tempInterna = ((V25_ - VSENSE*buffer_ADC[2])/Avg_slope)+25;
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <leTempInterna+0x58>)
 800259c:	6898      	ldr	r0, [r3, #8]
 800259e:	f7fd ff21 	bl	80003e4 <__aeabi_ui2d>
 80025a2:	a30d      	add	r3, pc, #52	; (adr r3, 80025d8 <leTempInterna+0x40>)
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	f7fd ff96 	bl	80004d8 <__aeabi_dmul>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	a10b      	add	r1, pc, #44	; (adr r1, 80025e0 <leTempInterna+0x48>)
 80025b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025b6:	f7fd fdd7 	bl	8000168 <__aeabi_dsub>
 80025ba:	a30b      	add	r3, pc, #44	; (adr r3, 80025e8 <leTempInterna+0x50>)
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f7fe f8b4 	bl	800072c <__aeabi_ddiv>
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <leTempInterna+0x5c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	f7fd fdd0 	bl	800016c <__adddf3>
 80025cc:	f7fe fa3e 	bl	8000a4c <__aeabi_d2f>
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <leTempInterna+0x60>)
 80025d2:	6018      	str	r0, [r3, #0]
}
 80025d4:	bd08      	pop	{r3, pc}
 80025d6:	bf00      	nop
 80025d8:	66666666 	.word	0x66666666
 80025dc:	3f4a6666 	.word	0x3f4a6666
 80025e0:	ae147ae1 	.word	0xae147ae1
 80025e4:	3ff6e147 	.word	0x3ff6e147
 80025e8:	75f6fd22 	.word	0x75f6fd22
 80025ec:	3f719ce0 	.word	0x3f719ce0
 80025f0:	20000ffc 	.word	0x20000ffc
 80025f4:	40390000 	.word	0x40390000
 80025f8:	20001298 	.word	0x20001298
 80025fc:	00000000 	.word	0x00000000

08002600 <controleCooler>:
void controleCooler(void){
 8002600:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
	if(PrimitiveStates.Lastro.realtime>200 || PrimitiveStates.Teto.realtime>200){
 8002604:	4c1a      	ldr	r4, [pc, #104]	; (8002670 <controleCooler+0x70>)
 8002606:	2200      	movs	r2, #0
 8002608:	e9d4 8948 	ldrd	r8, r9, [r4, #288]	; 0x120
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <controleCooler+0x74>)
 800260e:	4640      	mov	r0, r8
 8002610:	4649      	mov	r1, r9
 8002612:	f7fe f9f1 	bl	80009f8 <__aeabi_dcmpgt>
 8002616:	b940      	cbnz	r0, 800262a <controleCooler+0x2a>
 8002618:	e9d4 6734 	ldrd	r6, r7, [r4, #208]	; 0xd0
 800261c:	2200      	movs	r2, #0
 800261e:	4630      	mov	r0, r6
 8002620:	4639      	mov	r1, r7
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <controleCooler+0x74>)
 8002624:	f7fe f9e8 	bl	80009f8 <__aeabi_dcmpgt>
 8002628:	b120      	cbz	r0, 8002634 <controleCooler+0x34>
}
 800262a:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
		onDigital(&PrimitiveStates.Cooler);
 800262e:	4812      	ldr	r0, [pc, #72]	; (8002678 <controleCooler+0x78>)
 8002630:	f7ff bb02 	b.w	8001c38 <onDigital>
	}else 	if(PrimitiveStates.Lastro.realtime<195 && PrimitiveStates.Teto.realtime<195){
 8002634:	4640      	mov	r0, r8
 8002636:	a30c      	add	r3, pc, #48	; (adr r3, 8002668 <controleCooler+0x68>)
 8002638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263c:	4649      	mov	r1, r9
 800263e:	f7fe f9bd 	bl	80009bc <__aeabi_dcmplt>
 8002642:	b168      	cbz	r0, 8002660 <controleCooler+0x60>
 8002644:	a308      	add	r3, pc, #32	; (adr r3, 8002668 <controleCooler+0x68>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	4630      	mov	r0, r6
 800264c:	4639      	mov	r1, r7
 800264e:	f7fe f9b5 	bl	80009bc <__aeabi_dcmplt>
 8002652:	b128      	cbz	r0, 8002660 <controleCooler+0x60>
		offDigital(&PrimitiveStates.Cooler);
 8002654:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
 8002658:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
		offDigital(&PrimitiveStates.Cooler);
 800265c:	f7ff baf6 	b.w	8001c4c <offDigital>
}
 8002660:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8002664:	f3af 8000 	nop.w
 8002668:	00000000 	.word	0x00000000
 800266c:	40686000 	.word	0x40686000
 8002670:	20000818 	.word	0x20000818
 8002674:	40690000 	.word	0x40690000
 8002678:	2000085c 	.word	0x2000085c

0800267c <CBTimer1000ms>:
{
 800267c:	b510      	push	{r4, lr}
	contadorOutput(&PrimitiveStates.outPuts);
 800267e:	4c0a      	ldr	r4, [pc, #40]	; (80026a8 <CBTimer1000ms+0x2c>)
	bluetooth1000ms(&bluetooth);
 8002680:	480a      	ldr	r0, [pc, #40]	; (80026ac <CBTimer1000ms+0x30>)
 8002682:	f7ff f8a9 	bl	80017d8 <bluetooth1000ms>
	taskTemperatura1sec();
 8002686:	f001 fd5f 	bl	8004148 <taskTemperatura1sec>
	taskBluetooth1sec();
 800268a:	f000 fd75 	bl	8003178 <taskBluetooth1sec>
	controleCooler();
 800268e:	f7ff ffb7 	bl	8002600 <controleCooler>
	contadorOutput(&PrimitiveStates.outPuts);
 8002692:	4620      	mov	r0, r4
 8002694:	f7ff fae4 	bl	8001c60 <contadorOutput>
	if(PrimitiveStates.Erro.byte != 0){
 8002698:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
 800269c:	b11b      	cbz	r3, 80026a6 <CBTimer1000ms+0x2a>
}
 800269e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		desligaForno();
 80026a2:	f7ff bf69 	b.w	8002578 <desligaForno>
}
 80026a6:	bd10      	pop	{r4, pc}
 80026a8:	20000818 	.word	0x20000818
 80026ac:	20000ebc 	.word	0x20000ebc

080026b0 <HAL_ADC_ConvCpltCallback>:
{
 80026b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(i<TAM){
 80026b4:	4f1f      	ldr	r7, [pc, #124]	; (8002734 <HAL_ADC_ConvCpltCallback+0x84>)
	leTempInterna();
 80026b6:	f7ff ff6f 	bl	8002598 <leTempInterna>
	if(i<TAM){
 80026ba:	883c      	ldrh	r4, [r7, #0]
		somatorio1+=buffer_ADC[1]; // somatorio
 80026bc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8002738 <HAL_ADC_ConvCpltCallback+0x88>
		somatorio2+=buffer_ADC[0]; // somatorio
 80026c0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800273c <HAL_ADC_ConvCpltCallback+0x8c>
	if(i<TAM){
 80026c4:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
		somatorio1+=buffer_ADC[1]; // somatorio
 80026c8:	f8d9 0000 	ldr.w	r0, [r9]
		somatorio2+=buffer_ADC[0]; // somatorio
 80026cc:	f8d8 5000 	ldr.w	r5, [r8]
	if(i<TAM){
 80026d0:	d20d      	bcs.n	80026ee <HAL_ADC_ConvCpltCallback+0x3e>
		somatorio1+=buffer_ADC[1]; // somatorio
 80026d2:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_ADC_ConvCpltCallback+0x90>)
		i++;
 80026d4:	3401      	adds	r4, #1
		somatorio1+=buffer_ADC[1]; // somatorio
 80026d6:	6853      	ldr	r3, [r2, #4]
		i++;
 80026d8:	b2a4      	uxth	r4, r4
		somatorio1+=buffer_ADC[1]; // somatorio
 80026da:	4403      	add	r3, r0
 80026dc:	f8c9 3000 	str.w	r3, [r9]
		somatorio2+=buffer_ADC[0]; // somatorio
 80026e0:	6813      	ldr	r3, [r2, #0]
 80026e2:	442b      	add	r3, r5
 80026e4:	f8c8 3000 	str.w	r3, [r8]
		i++;
 80026e8:	803c      	strh	r4, [r7, #0]
}
 80026ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		somatorio1 = somatorio1 / TAM; //calc media
 80026ee:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
 80026f2:	fb90 f0fa 	sdiv	r0, r0, sl
		Temp1 = somatorio1*16; //calc valor final
 80026f6:	0100      	lsls	r0, r0, #4
 80026f8:	f7fe fab2 	bl	8000c60 <__aeabi_i2f>
		somatorio2 = somatorio2 / TAM; //calc media
 80026fc:	fb95 f5fa 	sdiv	r5, r5, sl
		somatorio1 = 0; 		//zera somatorio
 8002700:	2400      	movs	r4, #0
		Temp1 = somatorio1*16; //calc valor final
 8002702:	4606      	mov	r6, r0
		Temp2 = somatorio2*16; 	//calc valor final
 8002704:	0128      	lsls	r0, r5, #4
		somatorio1 = 0; 		//zera somatorio
 8002706:	f8c9 4000 	str.w	r4, [r9]
		Temp2 = somatorio2*16; 	//calc valor final
 800270a:	f7fe faa9 	bl	8000c60 <__aeabi_i2f>
		Temp2 = Temp2/100;
 800270e:	490d      	ldr	r1, [pc, #52]	; (8002744 <HAL_ADC_ConvCpltCallback+0x94>)
		somatorio2 = 0; 		//zera somatorio
 8002710:	f8c8 4000 	str.w	r4, [r8]
		Temp2 = Temp2/100;
 8002714:	f7fe fbac 	bl	8000e70 <__aeabi_fdiv>
		TempTeto=(double)Temp2;
 8002718:	f7fd fe86 	bl	8000428 <__aeabi_f2d>
		PrimitiveStates.Teto.realtime = TempTeto;
 800271c:	4d0a      	ldr	r5, [pc, #40]	; (8002748 <HAL_ADC_ConvCpltCallback+0x98>)
		TempTeto=(double)Temp2;
 800271e:	e9c5 0134 	strd	r0, r1, [r5, #208]	; 0xd0
		Temp1 = Temp1/100;
 8002722:	4908      	ldr	r1, [pc, #32]	; (8002744 <HAL_ADC_ConvCpltCallback+0x94>)
 8002724:	4630      	mov	r0, r6
 8002726:	f7fe fba3 	bl	8000e70 <__aeabi_fdiv>
		TempLastro=(double)Temp1;
 800272a:	f7fd fe7d 	bl	8000428 <__aeabi_f2d>
 800272e:	e9c5 0148 	strd	r0, r1, [r5, #288]	; 0x120
		i=0;
 8002732:	e7d9      	b.n	80026e8 <HAL_ADC_ConvCpltCallback+0x38>
 8002734:	2000128c 	.word	0x2000128c
 8002738:	20001290 	.word	0x20001290
 800273c:	20001294 	.word	0x20001294
 8002740:	20000ffc 	.word	0x20000ffc
 8002744:	42c80000 	.word	0x42c80000
 8002748:	20000818 	.word	0x20000818

0800274c <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM1) {
 800274c:	6802      	ldr	r2, [r0, #0]
 800274e:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002750:	429a      	cmp	r2, r3
 8002752:	d101      	bne.n	8002758 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 8002754:	f001 bd74 	b.w	8004240 <HAL_IncTick>
}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40012c00 	.word	0x40012c00

08002760 <Error_Handler>:
 8002760:	b672      	cpsid	i
	while (1)
 8002762:	e7fe      	b.n	8002762 <Error_Handler+0x2>

08002764 <PID_Init>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002764:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8002766:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
	uPID->OutputSum = *uPID->MyOutput;
 800276a:	e9d3 6700 	ldrd	r6, r7, [r3]
	uPID->LastInput = *uPID->MyInput;
	
	if (uPID->OutputSum > uPID->OutMax)
 800276e:	e9d0 891a 	ldrd	r8, r9, [r0, #104]	; 0x68
	uPID->OutputSum = *uPID->MyOutput;
 8002772:	e9c0 6714 	strd	r6, r7, [r0, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8002776:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8002778:	4604      	mov	r4, r0
	uPID->LastInput = *uPID->MyInput;
 800277a:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (uPID->OutputSum > uPID->OutMax)
 800277e:	4639      	mov	r1, r7
	uPID->LastInput = *uPID->MyInput;
 8002780:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
	if (uPID->OutputSum > uPID->OutMax)
 8002784:	4642      	mov	r2, r8
 8002786:	464b      	mov	r3, r9
 8002788:	4630      	mov	r0, r6
 800278a:	f7fe f935 	bl	80009f8 <__aeabi_dcmpgt>
 800278e:	b110      	cbz	r0, 8002796 <PID_Init+0x32>
	{
		uPID->OutputSum = uPID->OutMax;
	}
	else if (uPID->OutputSum < uPID->OutMin)
	{
		uPID->OutputSum = uPID->OutMin;
 8002790:	e9c4 8914 	strd	r8, r9, [r4, #80]	; 0x50
	}
	else { }
	
}
 8002794:	e009      	b.n	80027aa <PID_Init+0x46>
	else if (uPID->OutputSum < uPID->OutMin)
 8002796:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
 800279a:	4630      	mov	r0, r6
 800279c:	4642      	mov	r2, r8
 800279e:	464b      	mov	r3, r9
 80027a0:	4639      	mov	r1, r7
 80027a2:	f7fe f90b 	bl	80009bc <__aeabi_dcmplt>
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d1f2      	bne.n	8002790 <PID_Init+0x2c>
}
 80027aa:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}

080027ae <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80027ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80027b2:	7843      	ldrb	r3, [r0, #1]
{
 80027b4:	4604      	mov	r4, r0
 80027b6:	b089      	sub	sp, #36	; 0x24
	if (!uPID->InAuto)
 80027b8:	b91b      	cbnz	r3, 80027c2 <PID_Compute+0x14>
	{
		return _FALSE;
 80027ba:	2000      	movs	r0, #0
	else
	{
		return _FALSE;
	}
	
}
 80027bc:	b009      	add	sp, #36	; 0x24
 80027be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	now        = GetTime();
 80027c2:	f001 fd49 	bl	8004258 <HAL_GetTick>
	timeChange = (now - uPID->LastTime);
 80027c6:	6863      	ldr	r3, [r4, #4]
	if (timeChange >= uPID->SampleTime)
 80027c8:	68a2      	ldr	r2, [r4, #8]
	timeChange = (now - uPID->LastTime);
 80027ca:	1ac3      	subs	r3, r0, r3
	if (timeChange >= uPID->SampleTime)
 80027cc:	429a      	cmp	r2, r3
	now        = GetTime();
 80027ce:	4605      	mov	r5, r0
	if (timeChange >= uPID->SampleTime)
 80027d0:	d8f3      	bhi.n	80027ba <PID_Compute+0xc>
		input   = *uPID->MyInput;
 80027d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
		error   = *uPID->MySetpoint - input;
 80027d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
		input   = *uPID->MyInput;
 80027d6:	e9d3 ab00 	ldrd	sl, fp, [r3]
		error   = *uPID->MySetpoint - input;
 80027da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027de:	4652      	mov	r2, sl
 80027e0:	465b      	mov	r3, fp
 80027e2:	f7fd fcc1 	bl	8000168 <__aeabi_dsub>
		dInput  = (input - uPID->LastInput);
 80027e6:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
		error   = *uPID->MySetpoint - input;
 80027ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
		dInput  = (input - uPID->LastInput);
 80027ee:	4650      	mov	r0, sl
 80027f0:	4659      	mov	r1, fp
 80027f2:	f7fd fcb9 	bl	8000168 <__aeabi_dsub>
		uPID->OutputSum     += (uPID->Ki * error);
 80027f6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
		dInput  = (input - uPID->LastInput);
 80027fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
		uPID->OutputSum     += (uPID->Ki * error);
 80027fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002802:	f7fd fe69 	bl	80004d8 <__aeabi_dmul>
 8002806:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 800280a:	f7fd fcaf 	bl	800016c <__adddf3>
 800280e:	4606      	mov	r6, r0
 8002810:	460f      	mov	r7, r1
		if (!uPID->POnE)
 8002812:	7823      	ldrb	r3, [r4, #0]
		uPID->OutputSum     += (uPID->Ki * error);
 8002814:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (!uPID->POnE)
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	b96b      	cbnz	r3, 8002838 <PID_Compute+0x8a>
			uPID->OutputSum -= uPID->Kp * dInput;
 800281c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8002820:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002824:	f7fd fe58 	bl	80004d8 <__aeabi_dmul>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4630      	mov	r0, r6
 800282e:	4639      	mov	r1, r7
 8002830:	f7fd fc9a 	bl	8000168 <__aeabi_dsub>
 8002834:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
		if (uPID->OutputSum > uPID->OutMax)
 8002838:	e9d4 8914 	ldrd	r8, r9, [r4, #80]	; 0x50
 800283c:	e9d4 671a 	ldrd	r6, r7, [r4, #104]	; 0x68
 8002840:	4640      	mov	r0, r8
 8002842:	4632      	mov	r2, r6
 8002844:	463b      	mov	r3, r7
 8002846:	4649      	mov	r1, r9
 8002848:	f7fe f8d6 	bl	80009f8 <__aeabi_dcmpgt>
 800284c:	2800      	cmp	r0, #0
 800284e:	d038      	beq.n	80028c2 <PID_Compute+0x114>
			uPID->OutputSum = uPID->OutMax;
 8002850:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (uPID->POnE)
 8002854:	9b01      	ldr	r3, [sp, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d042      	beq.n	80028e0 <PID_Compute+0x132>
			output = uPID->Kp * error;
 800285a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 800285e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002862:	f7fd fe39 	bl	80004d8 <__aeabi_dmul>
 8002866:	4680      	mov	r8, r0
 8002868:	4689      	mov	r9, r1
		output += uPID->OutputSum - uPID->Kd * dInput;
 800286a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800286e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002872:	f7fd fe31 	bl	80004d8 <__aeabi_dmul>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 800287e:	f7fd fc73 	bl	8000168 <__aeabi_dsub>
 8002882:	4642      	mov	r2, r8
 8002884:	464b      	mov	r3, r9
 8002886:	f7fd fc71 	bl	800016c <__adddf3>
 800288a:	4680      	mov	r8, r0
 800288c:	4689      	mov	r9, r1
		if (output > uPID->OutMax)
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4630      	mov	r0, r6
 8002894:	4639      	mov	r1, r7
 8002896:	f7fe f891 	bl	80009bc <__aeabi_dcmplt>
 800289a:	b950      	cbnz	r0, 80028b2 <PID_Compute+0x104>
		else if (output < uPID->OutMin)
 800289c:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 80028a0:	4642      	mov	r2, r8
 80028a2:	464b      	mov	r3, r9
 80028a4:	4630      	mov	r0, r6
 80028a6:	4639      	mov	r1, r7
 80028a8:	f7fe f8a6 	bl	80009f8 <__aeabi_dcmpgt>
 80028ac:	b908      	cbnz	r0, 80028b2 <PID_Compute+0x104>
		output += uPID->OutputSum - uPID->Kd * dInput;
 80028ae:	4646      	mov	r6, r8
 80028b0:	464f      	mov	r7, r9
		*uPID->MyOutput = output;
 80028b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
		return _TRUE;
 80028b4:	2001      	movs	r0, #1
		*uPID->MyOutput = output;
 80028b6:	e9c3 6700 	strd	r6, r7, [r3]
		uPID->LastInput = input;
 80028ba:	e9c4 ab16 	strd	sl, fp, [r4, #88]	; 0x58
		uPID->LastTime = now;
 80028be:	6065      	str	r5, [r4, #4]
		return _TRUE;
 80028c0:	e77c      	b.n	80027bc <PID_Compute+0xe>
		else if (uPID->OutputSum < uPID->OutMin)
 80028c2:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 80028c6:	4640      	mov	r0, r8
 80028c8:	4649      	mov	r1, r9
 80028ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028ce:	f7fe f875 	bl	80009bc <__aeabi_dcmplt>
 80028d2:	2800      	cmp	r0, #0
 80028d4:	d0be      	beq.n	8002854 <PID_Compute+0xa6>
			uPID->OutputSum = uPID->OutMin;
 80028d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80028da:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 80028de:	e7b9      	b.n	8002854 <PID_Compute+0xa6>
			output = 0;
 80028e0:	f04f 0800 	mov.w	r8, #0
 80028e4:	f04f 0900 	mov.w	r9, #0
 80028e8:	e7bf      	b.n	800286a <PID_Compute+0xbc>

080028ea <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80028ea:	2901      	cmp	r1, #1
{
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	4604      	mov	r4, r0
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80028f0:	bf0c      	ite	eq
 80028f2:	2501      	moveq	r5, #1
 80028f4:	2500      	movne	r5, #0
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80028f6:	d103      	bne.n	8002900 <PID_SetMode+0x16>
 80028f8:	7843      	ldrb	r3, [r0, #1]
 80028fa:	b90b      	cbnz	r3, 8002900 <PID_SetMode+0x16>
	{
		PID_Init(uPID);
 80028fc:	f7ff ff32 	bl	8002764 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002900:	7065      	strb	r5, [r4, #1]
	
}
 8002902:	bd38      	pop	{r3, r4, r5, pc}

08002904 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002908:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800290c:	4614      	mov	r4, r2
 800290e:	461d      	mov	r5, r3
 8002910:	4682      	mov	sl, r0
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002912:	4632      	mov	r2, r6
 8002914:	463b      	mov	r3, r7
 8002916:	4620      	mov	r0, r4
 8002918:	4629      	mov	r1, r5
 800291a:	f7fe f863 	bl	80009e4 <__aeabi_dcmpge>
 800291e:	2800      	cmp	r0, #0
 8002920:	d137      	bne.n	8002992 <PID_SetOutputLimits+0x8e>
	
	uPID->OutMin = Min;
	uPID->OutMax = Max;
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002922:	f89a 3001 	ldrb.w	r3, [sl, #1]
	uPID->OutMin = Min;
 8002926:	e9ca 4518 	strd	r4, r5, [sl, #96]	; 0x60
	uPID->OutMax = Max;
 800292a:	e9ca 671a 	strd	r6, r7, [sl, #104]	; 0x68
	if (uPID->InAuto)
 800292e:	2b00      	cmp	r3, #0
 8002930:	d02f      	beq.n	8002992 <PID_SetOutputLimits+0x8e>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002932:	f8da b044 	ldr.w	fp, [sl, #68]	; 0x44
 8002936:	4632      	mov	r2, r6
 8002938:	e9db 8900 	ldrd	r8, r9, [fp]
 800293c:	463b      	mov	r3, r7
 800293e:	4640      	mov	r0, r8
 8002940:	4649      	mov	r1, r9
 8002942:	f7fe f859 	bl	80009f8 <__aeabi_dcmpgt>
 8002946:	b178      	cbz	r0, 8002968 <PID_SetOutputLimits+0x64>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002948:	e9cb 6700 	strd	r6, r7, [fp]
			*uPID->MyOutput = uPID->OutMin;
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 800294c:	e9da 6714 	ldrd	r6, r7, [sl, #80]	; 0x50
 8002950:	e9da 451a 	ldrd	r4, r5, [sl, #104]	; 0x68
 8002954:	4630      	mov	r0, r6
 8002956:	4622      	mov	r2, r4
 8002958:	462b      	mov	r3, r5
 800295a:	4639      	mov	r1, r7
 800295c:	f7fe f84c 	bl	80009f8 <__aeabi_dcmpgt>
 8002960:	b168      	cbz	r0, 800297e <PID_SetOutputLimits+0x7a>
		{
			uPID->OutputSum = uPID->OutMax;
		}
		else if (uPID->OutputSum < uPID->OutMin)
		{
			uPID->OutputSum = uPID->OutMin;
 8002962:	e9ca 4514 	strd	r4, r5, [sl, #80]	; 0x50
		}
		else { }
 8002966:	e014      	b.n	8002992 <PID_SetOutputLimits+0x8e>
		else if (*uPID->MyOutput < uPID->OutMin)
 8002968:	4622      	mov	r2, r4
 800296a:	462b      	mov	r3, r5
 800296c:	4640      	mov	r0, r8
 800296e:	4649      	mov	r1, r9
 8002970:	f7fe f824 	bl	80009bc <__aeabi_dcmplt>
 8002974:	2800      	cmp	r0, #0
 8002976:	d0e9      	beq.n	800294c <PID_SetOutputLimits+0x48>
			*uPID->MyOutput = uPID->OutMin;
 8002978:	e9cb 4500 	strd	r4, r5, [fp]
 800297c:	e7e6      	b.n	800294c <PID_SetOutputLimits+0x48>
		else if (uPID->OutputSum < uPID->OutMin)
 800297e:	e9da 4518 	ldrd	r4, r5, [sl, #96]	; 0x60
 8002982:	4630      	mov	r0, r6
 8002984:	4622      	mov	r2, r4
 8002986:	462b      	mov	r3, r5
 8002988:	4639      	mov	r1, r7
 800298a:	f7fe f817 	bl	80009bc <__aeabi_dcmplt>
 800298e:	2800      	cmp	r0, #0
 8002990:	d1e7      	bne.n	8002962 <PID_SetOutputLimits+0x5e>
		
	}
	
}
 8002992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002998 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800299c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80029a0:	4614      	mov	r4, r2
 80029a2:	461d      	mov	r5, r3
 80029a4:	4682      	mov	sl, r0
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80029a6:	2200      	movs	r2, #0
 80029a8:	2300      	movs	r3, #0
 80029aa:	4620      	mov	r0, r4
 80029ac:	4629      	mov	r1, r5
{
 80029ae:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80029b2:	f7fe f803 	bl	80009bc <__aeabi_dcmplt>
 80029b6:	2800      	cmp	r0, #0
 80029b8:	d15a      	bne.n	8002a70 <PID_SetTunings2+0xd8>
 80029ba:	2200      	movs	r2, #0
 80029bc:	2300      	movs	r3, #0
 80029be:	4640      	mov	r0, r8
 80029c0:	4649      	mov	r1, r9
 80029c2:	f7fd fffb 	bl	80009bc <__aeabi_dcmplt>
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d152      	bne.n	8002a70 <PID_SetTunings2+0xd8>
 80029ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80029ce:	2200      	movs	r2, #0
 80029d0:	2300      	movs	r3, #0
 80029d2:	f7fd fff3 	bl	80009bc <__aeabi_dcmplt>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d14a      	bne.n	8002a70 <PID_SetTunings2+0xd8>
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80029da:	1e73      	subs	r3, r6, #1
	uPID->POn    = POn;
 80029dc:	f88a 6002 	strb.w	r6, [sl, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80029e0:	425e      	negs	r6, r3
 80029e2:	415e      	adcs	r6, r3

	uPID->DispKp = Kp;
	uPID->DispKi = Ki;
 80029e4:	e9ca 8906 	strd	r8, r9, [sl, #24]
	uPID->DispKd = Kd;
 80029e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80029ec:	f88a 6000 	strb.w	r6, [sl]
	uPID->DispKd = Kd;
 80029f0:	e9ca 2308 	strd	r2, r3, [sl, #32]
	uPID->DispKp = Kp;
 80029f4:	e9ca 4504 	strd	r4, r5, [sl, #16]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80029f8:	f8da 0008 	ldr.w	r0, [sl, #8]
 80029fc:	f7fd fcf2 	bl	80003e4 <__aeabi_ui2d>
 8002a00:	2200      	movs	r2, #0
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <PID_SetTunings2+0xdc>)
 8002a04:	f7fd fe92 	bl	800072c <__aeabi_ddiv>
	
	uPID->Kp = Kp;
 8002a08:	e9ca 450a 	strd	r4, r5, [sl, #40]	; 0x28
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002a0c:	4606      	mov	r6, r0
 8002a0e:	460f      	mov	r7, r1
	uPID->Ki = Ki * SampleTimeInSec;
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4640      	mov	r0, r8
 8002a16:	4649      	mov	r1, r9
 8002a18:	f7fd fd5e 	bl	80004d8 <__aeabi_dmul>
 8002a1c:	4680      	mov	r8, r0
 8002a1e:	4689      	mov	r9, r1
	uPID->Kd = Kd / SampleTimeInSec;
 8002a20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002a24:	463b      	mov	r3, r7
 8002a26:	4632      	mov	r2, r6
	uPID->Ki = Ki * SampleTimeInSec;
 8002a28:	e9ca 890c 	strd	r8, r9, [sl, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002a2c:	f7fd fe7e 	bl	800072c <__aeabi_ddiv>
 8002a30:	4606      	mov	r6, r0
 8002a32:	460f      	mov	r7, r1
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002a34:	f89a 3003 	ldrb.w	r3, [sl, #3]
	uPID->Kd = Kd / SampleTimeInSec;
 8002a38:	e9ca 670e 	strd	r6, r7, [sl, #56]	; 0x38
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d117      	bne.n	8002a70 <PID_SetTunings2+0xd8>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002a40:	4622      	mov	r2, r4
 8002a42:	462b      	mov	r3, r5
 8002a44:	2000      	movs	r0, #0
 8002a46:	2100      	movs	r1, #0
 8002a48:	f7fd fb8e 	bl	8000168 <__aeabi_dsub>
		uPID->Ki = (0 - uPID->Ki);
 8002a4c:	4642      	mov	r2, r8
		uPID->Kp = (0 - uPID->Kp);
 8002a4e:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002a52:	464b      	mov	r3, r9
 8002a54:	2000      	movs	r0, #0
 8002a56:	2100      	movs	r1, #0
 8002a58:	f7fd fb86 	bl	8000168 <__aeabi_dsub>
		uPID->Kd = (0 - uPID->Kd);
 8002a5c:	4632      	mov	r2, r6
		uPID->Ki = (0 - uPID->Ki);
 8002a5e:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002a62:	463b      	mov	r3, r7
 8002a64:	2000      	movs	r0, #0
 8002a66:	2100      	movs	r1, #0
 8002a68:	f7fd fb7e 	bl	8000168 <__aeabi_dsub>
 8002a6c:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
		
	}
	
}
 8002a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a74:	408f4000 	.word	0x408f4000

08002a78 <PID_SetTunings>:
{
 8002a78:	b530      	push	{r4, r5, lr}
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8002a7a:	7881      	ldrb	r1, [r0, #2]
{
 8002a7c:	b087      	sub	sp, #28
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8002a7e:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8002a82:	9104      	str	r1, [sp, #16]
 8002a84:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002a88:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 8002a8c:	e9cd 4500 	strd	r4, r5, [sp]
 8002a90:	f7ff ff82 	bl	8002998 <PID_SetTunings2>
}
 8002a94:	b007      	add	sp, #28
 8002a96:	bd30      	pop	{r4, r5, pc}

08002a98 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002a98:	b538      	push	{r3, r4, r5, lr}
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002a9a:	7843      	ldrb	r3, [r0, #1]
{
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	460d      	mov	r5, r1
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002aa0:	b1d3      	cbz	r3, 8002ad8 <PID_SetControllerDirection+0x40>
 8002aa2:	78c3      	ldrb	r3, [r0, #3]
 8002aa4:	428b      	cmp	r3, r1
 8002aa6:	d017      	beq.n	8002ad8 <PID_SetControllerDirection+0x40>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002aa8:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8002aac:	2100      	movs	r1, #0
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fd fb5a 	bl	8000168 <__aeabi_dsub>
		uPID->Ki = (0 - uPID->Ki);
 8002ab4:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
		uPID->Kp = (0 - uPID->Kp);
 8002ab8:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002abc:	2000      	movs	r0, #0
 8002abe:	2100      	movs	r1, #0
 8002ac0:	f7fd fb52 	bl	8000168 <__aeabi_dsub>
		uPID->Kd = (0 - uPID->Kd);
 8002ac4:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
		uPID->Ki = (0 - uPID->Ki);
 8002ac8:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002acc:	2000      	movs	r0, #0
 8002ace:	2100      	movs	r1, #0
 8002ad0:	f7fd fb4a 	bl	8000168 <__aeabi_dsub>
 8002ad4:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8002ad8:	70e5      	strb	r5, [r4, #3]
	
}
 8002ada:	bd38      	pop	{r3, r4, r5, pc}
 8002adc:	0000      	movs	r0, r0
	...

08002ae0 <PID>:
{
 8002ae0:	b510      	push	{r4, lr}
	uPID->MySetpoint = Setpoint;
 8002ae2:	6483      	str	r3, [r0, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002ae4:	2300      	movs	r3, #0
	uPID->MyInput    = Input;
 8002ae6:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002aea:	7043      	strb	r3, [r0, #1]
	uPID->OutMin = Min;
 8002aec:	2200      	movs	r2, #0
 8002aee:	2300      	movs	r3, #0
 8002af0:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60
	uPID->OutMax = Max;
 8002af4:	a312      	add	r3, pc, #72	; (adr r3, 8002b40 <PID+0x60>)
 8002af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afa:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002afe:	2364      	movs	r3, #100	; 0x64
{
 8002b00:	4604      	mov	r4, r0
 8002b02:	b086      	sub	sp, #24
	PID_SetControllerDirection(uPID, ControllerDirection);
 8002b04:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002b08:	6083      	str	r3, [r0, #8]
	PID_SetControllerDirection(uPID, ControllerDirection);
 8002b0a:	f7ff ffc5 	bl	8002a98 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8002b0e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002b12:	4620      	mov	r0, r4
 8002b14:	9304      	str	r3, [sp, #16]
 8002b16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002b1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b1e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002b22:	e9cd 2300 	strd	r2, r3, [sp]
 8002b26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002b2a:	f7ff ff35 	bl	8002998 <PID_SetTunings2>
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002b2e:	f001 fb93 	bl	8004258 <HAL_GetTick>
 8002b32:	68a3      	ldr	r3, [r4, #8]
 8002b34:	1ac0      	subs	r0, r0, r3
 8002b36:	6060      	str	r0, [r4, #4]
}
 8002b38:	b006      	add	sp, #24
 8002b3a:	bd10      	pop	{r4, pc}
 8002b3c:	f3af 8000 	nop.w
 8002b40:	00000000 	.word	0x00000000
 8002b44:	406fe000 	.word	0x406fe000

08002b48 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002b4a:	1e0d      	subs	r5, r1, #0
{
 8002b4c:	4604      	mov	r4, r0
	if (NewSampleTime > 0)
 8002b4e:	dd20      	ble.n	8002b92 <PID_SetSampleTime+0x4a>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002b50:	4628      	mov	r0, r5
 8002b52:	f7fd fc57 	bl	8000404 <__aeabi_i2d>
 8002b56:	4606      	mov	r6, r0
 8002b58:	68a0      	ldr	r0, [r4, #8]
 8002b5a:	460f      	mov	r7, r1
 8002b5c:	f7fd fc42 	bl	80003e4 <__aeabi_ui2d>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4630      	mov	r0, r6
 8002b66:	4639      	mov	r1, r7
 8002b68:	f7fd fde0 	bl	800072c <__aeabi_ddiv>
		
		uPID->Ki *= ratio;
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002b70:	4606      	mov	r6, r0
 8002b72:	460f      	mov	r7, r1
		uPID->Ki *= ratio;
 8002b74:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8002b78:	f7fd fcae 	bl	80004d8 <__aeabi_dmul>
		uPID->Kd /= ratio;
 8002b7c:	4632      	mov	r2, r6
		uPID->Ki *= ratio;
 8002b7e:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd /= ratio;
 8002b82:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8002b86:	463b      	mov	r3, r7
 8002b88:	f7fd fdd0 	bl	800072c <__aeabi_ddiv>
 8002b8c:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8002b90:	60a5      	str	r5, [r4, #8]
		
	}
	
}
 8002b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b94 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_MspInit+0x48>)
{
 8002b96:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b98:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b9a:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b9c:	f042 0201 	orr.w	r2, r2, #1
 8002ba0:	619a      	str	r2, [r3, #24]
 8002ba2:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ba4:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ba8:	f002 0201 	and.w	r2, r2, #1
 8002bac:	9200      	str	r2, [sp, #0]
 8002bae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bb6:	61da      	str	r2, [r3, #28]
 8002bb8:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bba:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	9301      	str	r3, [sp, #4]
 8002bc2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bc4:	f001 fd9a 	bl	80046fc <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002bc8:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <HAL_MspInit+0x4c>)
 8002bca:	6853      	ldr	r3, [r2, #4]
 8002bcc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002bd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bd6:	b003      	add	sp, #12
 8002bd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40010000 	.word	0x40010000

08002be4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002be4:	b530      	push	{r4, r5, lr}
 8002be6:	4605      	mov	r5, r0
 8002be8:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bea:	2210      	movs	r2, #16
 8002bec:	2100      	movs	r1, #0
 8002bee:	a802      	add	r0, sp, #8
 8002bf0:	f006 fd6a 	bl	80096c8 <memset>
  if(hadc->Instance==ADC1)
 8002bf4:	682a      	ldr	r2, [r5, #0]
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <HAL_ADC_MspInit+0x84>)
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d133      	bne.n	8002c64 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bfc:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002c00:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c02:	481a      	ldr	r0, [pc, #104]	; (8002c6c <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c08:	619a      	str	r2, [r3, #24]
 8002c0a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c0e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002c12:	9200      	str	r2, [sp, #0]
 8002c14:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c16:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002c18:	4c15      	ldr	r4, [pc, #84]	; (8002c70 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1a:	f042 0204 	orr.w	r2, r2, #4
 8002c1e:	619a      	str	r2, [r3, #24]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c2a:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c2c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c30:	f001 ff4a 	bl	8004ac8 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c34:	2300      	movs	r3, #0
 8002c36:	4a0f      	ldr	r2, [pc, #60]	; (8002c74 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c38:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c3a:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c42:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c46:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	e9c4 0205 	strd	r0, r2, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c50:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c52:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c54:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c56:	f001 fda1 	bl	800479c <HAL_DMA_Init>
 8002c5a:	b108      	cbz	r0, 8002c60 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8002c5c:	f7ff fd80 	bl	8002760 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c60:	622c      	str	r4, [r5, #32]
 8002c62:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c64:	b007      	add	sp, #28
 8002c66:	bd30      	pop	{r4, r5, pc}
 8002c68:	40012400 	.word	0x40012400
 8002c6c:	40010800 	.word	0x40010800
 8002c70:	20001038 	.word	0x20001038
 8002c74:	40020008 	.word	0x40020008

08002c78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c78:	b510      	push	{r4, lr}
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7e:	2210      	movs	r2, #16
 8002c80:	2100      	movs	r1, #0
 8002c82:	a802      	add	r0, sp, #8
 8002c84:	f006 fd20 	bl	80096c8 <memset>
  if(hi2c->Instance==I2C1)
 8002c88:	6822      	ldr	r2, [r4, #0]
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_I2C_MspInit+0x68>)
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d124      	bne.n	8002cda <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c90:	4c14      	ldr	r4, [pc, #80]	; (8002ce4 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c92:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c96:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c98:	4813      	ldr	r0, [pc, #76]	; (8002ce8 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9a:	f043 0308 	orr.w	r3, r3, #8
 8002c9e:	61a3      	str	r3, [r4, #24]
 8002ca0:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cac:	2312      	movs	r3, #18
 8002cae:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb6:	f001 ff07 	bl	8004ac8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002cba:	4a0c      	ldr	r2, [pc, #48]	; (8002cec <HAL_I2C_MspInit+0x74>)
 8002cbc:	6853      	ldr	r3, [r2, #4]
 8002cbe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002cc2:	f043 0302 	orr.w	r3, r3, #2
 8002cc6:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cc8:	69e3      	ldr	r3, [r4, #28]
 8002cca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cce:	61e3      	str	r3, [r4, #28]
 8002cd0:	69e3      	ldr	r3, [r4, #28]
 8002cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cda:	b006      	add	sp, #24
 8002cdc:	bd10      	pop	{r4, pc}
 8002cde:	bf00      	nop
 8002ce0:	40005400 	.word	0x40005400
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40010c00 	.word	0x40010c00
 8002cec:	40010000 	.word	0x40010000

08002cf0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002cf0:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RTC_MspInit+0x30>)
 8002cf4:	6802      	ldr	r2, [r0, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d10f      	bne.n	8002d1a <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002cfa:	f002 fd5b 	bl	80057b4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_RTC_MspInit+0x34>)
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002d06:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d08:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <HAL_RTC_MspInit+0x38>)
 8002d16:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d1a:	b003      	add	sp, #12
 8002d1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d20:	40002800 	.word	0x40002800
 8002d24:	40021000 	.word	0x40021000
 8002d28:	42420000 	.word	0x42420000

08002d2c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002d2c:	6803      	ldr	r3, [r0, #0]
{
 8002d2e:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8002d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d34:	d10d      	bne.n	8002d52 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d36:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002d3a:	69da      	ldr	r2, [r3, #28]
 8002d3c:	f042 0201 	orr.w	r2, r2, #1
 8002d40:	61da      	str	r2, [r3, #28]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d4c:	b003      	add	sp, #12
 8002d4e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 8002d52:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <HAL_TIM_Base_MspInit+0x58>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d1f9      	bne.n	8002d4c <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_TIM_Base_MspInit+0x5c>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002d5a:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d5c:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002d5e:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d60:	f042 0202 	orr.w	r2, r2, #2
 8002d64:	61da      	str	r2, [r3, #28]
 8002d66:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002d68:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002d72:	f001 fcc3 	bl	80046fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d76:	201d      	movs	r0, #29
}
 8002d78:	b003      	add	sp, #12
 8002d7a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d7e:	f001 bced 	b.w	800475c <HAL_NVIC_EnableIRQ>
 8002d82:	bf00      	nop
 8002d84:	40000400 	.word	0x40000400
 8002d88:	40021000 	.word	0x40021000

08002d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8c:	2210      	movs	r2, #16
{
 8002d8e:	b510      	push	{r4, lr}
 8002d90:	4604      	mov	r4, r0
 8002d92:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	2100      	movs	r1, #0
 8002d96:	eb0d 0002 	add.w	r0, sp, r2
 8002d9a:	f006 fc95 	bl	80096c8 <memset>
  if(htim->Instance==TIM2)
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da4:	d115      	bne.n	8002dd2 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002daa:	699a      	ldr	r2, [r3, #24]
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dac:	481c      	ldr	r0, [pc, #112]	; (8002e20 <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dae:	f042 0204 	orr.w	r2, r2, #4
 8002db2:	619a      	str	r2, [r3, #24]
 8002db4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2208      	movs	r2, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc8:	a904      	add	r1, sp, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dca:	f001 fe7d 	bl	8004ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002dce:	b008      	add	sp, #32
 8002dd0:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM3)
 8002dd2:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <HAL_TIM_MspPostInit+0x98>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d1fa      	bne.n	8002dce <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <HAL_TIM_MspPostInit+0x9c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ddc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dde:	4810      	ldr	r0, [pc, #64]	; (8002e20 <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de0:	f042 0204 	orr.w	r2, r2, #4
 8002de4:	619a      	str	r2, [r3, #24]
 8002de6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de8:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dea:	f002 0204 	and.w	r2, r2, #4
 8002dee:	9202      	str	r2, [sp, #8]
 8002df0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df2:	699a      	ldr	r2, [r3, #24]
 8002df4:	f042 0208 	orr.w	r2, r2, #8
 8002df8:	619a      	str	r2, [r3, #24]
 8002dfa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfc:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	9303      	str	r3, [sp, #12]
 8002e04:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	23c0      	movs	r3, #192	; 0xc0
 8002e08:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0c:	f001 fe5c 	bl	8004ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e10:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e12:	4806      	ldr	r0, [pc, #24]	; (8002e2c <HAL_TIM_MspPostInit+0xa0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e14:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e18:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1a:	a904      	add	r1, sp, #16
 8002e1c:	e7d5      	b.n	8002dca <HAL_TIM_MspPostInit+0x3e>
 8002e1e:	bf00      	nop
 8002e20:	40010800 	.word	0x40010800
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40010c00 	.word	0x40010c00

08002e30 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	2210      	movs	r2, #16
{
 8002e32:	b570      	push	{r4, r5, r6, lr}
 8002e34:	4606      	mov	r6, r0
 8002e36:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	eb0d 0002 	add.w	r0, sp, r2
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	f006 fc43 	bl	80096c8 <memset>
  if(huart->Instance==USART1)
 8002e42:	6833      	ldr	r3, [r6, #0]
 8002e44:	4a43      	ldr	r2, [pc, #268]	; (8002f54 <HAL_UART_MspInit+0x124>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d144      	bne.n	8002ed4 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e4a:	4b43      	ldr	r3, [pc, #268]	; (8002f58 <HAL_UART_MspInit+0x128>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e50:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e52:	4842      	ldr	r0, [pc, #264]	; (8002f5c <HAL_UART_MspInit+0x12c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e58:	619a      	str	r2, [r3, #24]
 8002e5a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e5c:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e5e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002e62:	9200      	str	r2, [sp, #0]
 8002e64:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e66:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002e68:	4c3d      	ldr	r4, [pc, #244]	; (8002f60 <HAL_UART_MspInit+0x130>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6a:	f042 0204 	orr.w	r2, r2, #4
 8002e6e:	619a      	str	r2, [r3, #24]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e80:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e82:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e84:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	f001 fe1f 	bl	8004ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8e:	4833      	ldr	r0, [pc, #204]	; (8002f5c <HAL_UART_MspInit+0x12c>)
 8002e90:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e92:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e98:	f001 fe16 	bl	8004ac8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002e9c:	4b31      	ldr	r3, [pc, #196]	; (8002f64 <HAL_UART_MspInit+0x134>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e9e:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ea0:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ea4:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002ea6:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eaa:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eae:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002eb0:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002eb2:	f001 fc73 	bl	800479c <HAL_DMA_Init>
 8002eb6:	b108      	cbz	r0, 8002ebc <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 8002eb8:	f7ff fc52 	bl	8002760 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ebc:	2025      	movs	r0, #37	; 0x25
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ec2:	63f4      	str	r4, [r6, #60]	; 0x3c
 8002ec4:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ec6:	f001 fc19 	bl	80046fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002eca:	2025      	movs	r0, #37	; 0x25
 8002ecc:	f001 fc46 	bl	800475c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ed0:	b008      	add	sp, #32
 8002ed2:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART3)
 8002ed4:	4a24      	ldr	r2, [pc, #144]	; (8002f68 <HAL_UART_MspInit+0x138>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d1fa      	bne.n	8002ed0 <HAL_UART_MspInit+0xa0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eda:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <HAL_UART_MspInit+0x128>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002edc:	4823      	ldr	r0, [pc, #140]	; (8002f6c <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ede:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee0:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ee2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002ee6:	61da      	str	r2, [r3, #28]
 8002ee8:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eea:	2500      	movs	r5, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eec:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002ef0:	9202      	str	r2, [sp, #8]
 8002ef2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef4:	699a      	ldr	r2, [r3, #24]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002ef6:	4c1e      	ldr	r4, [pc, #120]	; (8002f70 <HAL_UART_MspInit+0x140>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef8:	f042 0208 	orr.w	r2, r2, #8
 8002efc:	619a      	str	r2, [r3, #24]
 8002efe:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f00:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	9303      	str	r3, [sp, #12]
 8002f0a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f12:	2303      	movs	r3, #3
 8002f14:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f16:	f001 fdd7 	bl	8004ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1e:	4813      	ldr	r0, [pc, #76]	; (8002f6c <HAL_UART_MspInit+0x13c>)
 8002f20:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f22:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f28:	f001 fdce 	bl	8004ac8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002f2c:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <HAL_UART_MspInit+0x144>)
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002f2e:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f30:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f34:	2380      	movs	r3, #128	; 0x80
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f36:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002f3a:	2320      	movs	r3, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f3c:	60a5      	str	r5, [r4, #8]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f3e:	e9c4 3506 	strd	r3, r5, [r4, #24]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f42:	6165      	str	r5, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002f44:	f001 fc2a 	bl	800479c <HAL_DMA_Init>
 8002f48:	b108      	cbz	r0, 8002f4e <HAL_UART_MspInit+0x11e>
      Error_Handler();
 8002f4a:	f7ff fc09 	bl	8002760 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002f4e:	63f4      	str	r4, [r6, #60]	; 0x3c
 8002f50:	6266      	str	r6, [r4, #36]	; 0x24
}
 8002f52:	e7bd      	b.n	8002ed0 <HAL_UART_MspInit+0xa0>
 8002f54:	40013800 	.word	0x40013800
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40010800 	.word	0x40010800
 8002f60:	2000107c 	.word	0x2000107c
 8002f64:	40020058 	.word	0x40020058
 8002f68:	40004800 	.word	0x40004800
 8002f6c:	40010c00 	.word	0x40010c00
 8002f70:	200010c0 	.word	0x200010c0
 8002f74:	40020030 	.word	0x40020030

08002f78 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART1)
 8002f78:	6803      	ldr	r3, [r0, #0]
 8002f7a:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <HAL_UART_MspDeInit+0x5c>)
{
 8002f7c:	b510      	push	{r4, lr}
  if(huart->Instance==USART1)
 8002f7e:	4293      	cmp	r3, r2
{
 8002f80:	4604      	mov	r4, r0
  if(huart->Instance==USART1)
 8002f82:	d112      	bne.n	8002faa <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002f84:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8002f88:	6993      	ldr	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002f8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 8002f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002f92:	4811      	ldr	r0, [pc, #68]	; (8002fd8 <HAL_UART_MspDeInit+0x60>)
    __HAL_RCC_USART1_CLK_DISABLE();
 8002f94:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002f96:	f001 fe71 	bl	8004c7c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002f9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002f9c:	f001 fc30 	bl	8004800 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8002fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002fa4:	2025      	movs	r0, #37	; 0x25
 8002fa6:	f001 bbe7 	b.w	8004778 <HAL_NVIC_DisableIRQ>
  else if(huart->Instance==USART3)
 8002faa:	4a0c      	ldr	r2, [pc, #48]	; (8002fdc <HAL_UART_MspDeInit+0x64>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d10f      	bne.n	8002fd0 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART3_CLK_DISABLE();
 8002fb0:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8002fb4:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8002fb6:	480a      	ldr	r0, [pc, #40]	; (8002fe0 <HAL_UART_MspDeInit+0x68>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8002fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8002fbc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    __HAL_RCC_USART3_CLK_DISABLE();
 8002fc0:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8002fc2:	f001 fe5b 	bl	8004c7c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8002fc6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8002fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(huart->hdmarx);
 8002fcc:	f001 bc18 	b.w	8004800 <HAL_DMA_DeInit>
}
 8002fd0:	bd10      	pop	{r4, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40013800 	.word	0x40013800
 8002fd8:	40010800 	.word	0x40010800
 8002fdc:	40004800 	.word	0x40004800
 8002fe0:	40010c00 	.word	0x40010c00

08002fe4 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002fe4:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <HAL_InitTick+0x7c>)
{
 8002fe6:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002fe8:	699a      	ldr	r2, [r3, #24]
{
 8002fea:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff0:	619a      	str	r2, [r3, #24]
 8002ff2:	699b      	ldr	r3, [r3, #24]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ff4:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ffa:	9302      	str	r3, [sp, #8]
{
 8002ffc:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ffe:	a803      	add	r0, sp, #12

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003000:	4d18      	ldr	r5, [pc, #96]	; (8003064 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003002:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003004:	f002 fe5a 	bl	8005cbc <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003008:	f002 fe48 	bl	8005c9c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800300c:	4b16      	ldr	r3, [pc, #88]	; (8003068 <HAL_InitTick+0x84>)
 800300e:	602b      	str	r3, [r5, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003010:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003014:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_InitTick+0x88>)
 8003018:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800301c:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800301e:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8003020:	6068      	str	r0, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8003022:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 8003024:	612b      	str	r3, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003026:	60ab      	str	r3, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003028:	61ab      	str	r3, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 800302a:	f003 fa6f 	bl	800650c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800302e:	4604      	mov	r4, r0
 8003030:	b980      	cbnz	r0, 8003054 <HAL_InitTick+0x70>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003032:	4628      	mov	r0, r5
 8003034:	f003 f960 	bl	80062f8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8003038:	4604      	mov	r4, r0
 800303a:	b958      	cbnz	r0, 8003054 <HAL_InitTick+0x70>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800303c:	2019      	movs	r0, #25
 800303e:	f001 fb8d 	bl	800475c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003042:	2e0f      	cmp	r6, #15
 8003044:	d809      	bhi.n	800305a <HAL_InitTick+0x76>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8003046:	4622      	mov	r2, r4
 8003048:	4631      	mov	r1, r6
 800304a:	2019      	movs	r0, #25
 800304c:	f001 fb56 	bl	80046fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <HAL_InitTick+0x8c>)
 8003052:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8003054:	4620      	mov	r0, r4
 8003056:	b008      	add	sp, #32
 8003058:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 800305a:	2401      	movs	r4, #1
 800305c:	e7fa      	b.n	8003054 <HAL_InitTick+0x70>
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	200012a4 	.word	0x200012a4
 8003068:	40012c00 	.word	0x40012c00
 800306c:	000f4240 	.word	0x000f4240
 8003070:	20000008 	.word	0x20000008

08003074 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003074:	e7fe      	b.n	8003074 <NMI_Handler>

08003076 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003076:	e7fe      	b.n	8003076 <HardFault_Handler>

08003078 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003078:	e7fe      	b.n	8003078 <MemManage_Handler>

0800307a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800307a:	e7fe      	b.n	800307a <BusFault_Handler>

0800307c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800307c:	e7fe      	b.n	800307c <UsageFault_Handler>

0800307e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800307e:	4770      	bx	lr

08003080 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003080:	4801      	ldr	r0, [pc, #4]	; (8003088 <DMA1_Channel1_IRQHandler+0x8>)
 8003082:	f001 bc8d 	b.w	80049a0 <HAL_DMA_IRQHandler>
 8003086:	bf00      	nop
 8003088:	20001038 	.word	0x20001038

0800308c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800308c:	4801      	ldr	r0, [pc, #4]	; (8003094 <DMA1_Channel3_IRQHandler+0x8>)
 800308e:	f001 bc87 	b.w	80049a0 <HAL_DMA_IRQHandler>
 8003092:	bf00      	nop
 8003094:	200010c0 	.word	0x200010c0

08003098 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003098:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800309a:	4804      	ldr	r0, [pc, #16]	; (80030ac <DMA1_Channel5_IRQHandler+0x14>)
 800309c:	f001 fc80 	bl	80049a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  BLEDMA_IrqHandler(&bluetooth);
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80030a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BLEDMA_IrqHandler(&bluetooth);
 80030a4:	4802      	ldr	r0, [pc, #8]	; (80030b0 <DMA1_Channel5_IRQHandler+0x18>)
 80030a6:	f7fe ba6d 	b.w	8001584 <BLEDMA_IrqHandler>
 80030aa:	bf00      	nop
 80030ac:	2000107c 	.word	0x2000107c
 80030b0:	20000ebc 	.word	0x20000ebc

080030b4 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030b4:	4801      	ldr	r0, [pc, #4]	; (80030bc <TIM1_UP_IRQHandler+0x8>)
 80030b6:	f003 b94e 	b.w	8006356 <HAL_TIM_IRQHandler>
 80030ba:	bf00      	nop
 80030bc:	200012a4 	.word	0x200012a4

080030c0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030c0:	4801      	ldr	r0, [pc, #4]	; (80030c8 <TIM3_IRQHandler+0x8>)
 80030c2:	f003 b948 	b.w	8006356 <HAL_TIM_IRQHandler>
 80030c6:	bf00      	nop
 80030c8:	200011b4 	.word	0x200011b4

080030cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030ce:	4804      	ldr	r0, [pc, #16]	; (80030e0 <USART1_IRQHandler+0x14>)
 80030d0:	f003 ff3c 	bl	8006f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  BLEUSART_IrqHandler(&bluetooth);
  /* USER CODE END USART1_IRQn 1 */
}
 80030d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BLEUSART_IrqHandler(&bluetooth);
 80030d8:	4802      	ldr	r0, [pc, #8]	; (80030e4 <USART1_IRQHandler+0x18>)
 80030da:	f7fe bb51 	b.w	8001780 <BLEUSART_IrqHandler>
 80030de:	bf00      	nop
 80030e0:	200011fc 	.word	0x200011fc
 80030e4:	20000ebc 	.word	0x20000ebc

080030e8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030e8:	4a0b      	ldr	r2, [pc, #44]	; (8003118 <_sbrk+0x30>)
{
 80030ea:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80030ec:	6811      	ldr	r1, [r2, #0]
{
 80030ee:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80030f0:	b909      	cbnz	r1, 80030f6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80030f2:	490a      	ldr	r1, [pc, #40]	; (800311c <_sbrk+0x34>)
 80030f4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030f6:	6810      	ldr	r0, [r2, #0]
 80030f8:	4909      	ldr	r1, [pc, #36]	; (8003120 <_sbrk+0x38>)
 80030fa:	4c0a      	ldr	r4, [pc, #40]	; (8003124 <_sbrk+0x3c>)
 80030fc:	4403      	add	r3, r0
 80030fe:	1b09      	subs	r1, r1, r4
 8003100:	428b      	cmp	r3, r1
 8003102:	d906      	bls.n	8003112 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8003104:	f006 fb64 	bl	80097d0 <__errno>
 8003108:	230c      	movs	r3, #12
 800310a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800310c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003110:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003112:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8003114:	e7fc      	b.n	8003110 <_sbrk+0x28>
 8003116:	bf00      	nop
 8003118:	200012ec 	.word	0x200012ec
 800311c:	20003028 	.word	0x20003028
 8003120:	20005000 	.word	0x20005000
 8003124:	00000400 	.word	0x00000400

08003128 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003128:	4770      	bx	lr
	...

0800312c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800312c:	f7ff fffc 	bl	8003128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003130:	480b      	ldr	r0, [pc, #44]	; (8003160 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003132:	490c      	ldr	r1, [pc, #48]	; (8003164 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003134:	4a0c      	ldr	r2, [pc, #48]	; (8003168 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003138:	e002      	b.n	8003140 <LoopCopyDataInit>

0800313a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800313a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800313c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800313e:	3304      	adds	r3, #4

08003140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003144:	d3f9      	bcc.n	800313a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003146:	4a09      	ldr	r2, [pc, #36]	; (800316c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003148:	4c09      	ldr	r4, [pc, #36]	; (8003170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800314a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800314c:	e001      	b.n	8003152 <LoopFillZerobss>

0800314e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800314e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003150:	3204      	adds	r2, #4

08003152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003154:	d3fb      	bcc.n	800314e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003156:	f006 fb41 	bl	80097dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800315a:	f7fe fead 	bl	8001eb8 <main>
  bx lr
 800315e:	4770      	bx	lr
  ldr r0, =_sdata
 8003160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003164:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003168:	0800a5dc 	.word	0x0800a5dc
  ldr r2, =_sbss
 800316c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003170:	20003024 	.word	0x20003024

08003174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003174:	e7fe      	b.n	8003174 <ADC1_2_IRQHandler>
	...

08003178 <taskBluetooth1sec>:

static uint16_t tempoSemAtividade;
#define MACRO_ANULA_INATIVIDADE tempoSemAtividade = 0;

void taskBluetooth1sec(void){
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 8003178:	4a04      	ldr	r2, [pc, #16]	; (800318c <taskBluetooth1sec+0x14>)
 800317a:	8813      	ldrh	r3, [r2, #0]
 800317c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003180:	d301      	bcc.n	8003186 <taskBluetooth1sec+0xe>
		desligaForno();
 8003182:	f7ff b9f9 	b.w	8002578 <desligaForno>
	}else
		tempoSemAtividade++;
 8003186:	3301      	adds	r3, #1
 8003188:	8013      	strh	r3, [r2, #0]
}
 800318a:	4770      	bx	lr
 800318c:	20001360 	.word	0x20001360

08003190 <initBluetooth>:

void initBluetooth(void){
 8003190:	b537      	push	{r0, r1, r2, r4, r5, lr}

	//inicializacao do hardware
	iniciaBleHm10(&bluetooth);

	//possiveis comandos a serem recebidos pelo bluetooth
	BluetoothAddComp(&bluetooth, &BLEAtualizaRealtime, 	"RX_SOLICITA_REALTIME", 	RX_SOLICITA_REALTIME, 		ComandoBasico);
 8003192:	2501      	movs	r5, #1
	BluetoothInit(&bluetooth, &huart1, &hdma_usart1_rx, &FilaRXBluetoothHandle,FilaTXBluetoothHandle);
 8003194:	4b38      	ldr	r3, [pc, #224]	; (8003278 <initBluetooth+0xe8>)
 8003196:	4c39      	ldr	r4, [pc, #228]	; (800327c <initBluetooth+0xec>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a39      	ldr	r2, [pc, #228]	; (8003280 <initBluetooth+0xf0>)
 800319c:	4939      	ldr	r1, [pc, #228]	; (8003284 <initBluetooth+0xf4>)
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	4620      	mov	r0, r4
 80031a2:	4b39      	ldr	r3, [pc, #228]	; (8003288 <initBluetooth+0xf8>)
 80031a4:	f7fd ff1e 	bl	8000fe4 <BluetoothInit>
	iniciaBleHm10(&bluetooth);
 80031a8:	4620      	mov	r0, r4
 80031aa:	f7fd ffe9 	bl	8001180 <iniciaBleHm10>
	BluetoothAddComp(&bluetooth, &BLEAtualizaRealtime, 	"RX_SOLICITA_REALTIME", 	RX_SOLICITA_REALTIME, 		ComandoBasico);
 80031ae:	2315      	movs	r3, #21
 80031b0:	4620      	mov	r0, r4
 80031b2:	4a36      	ldr	r2, [pc, #216]	; (800328c <initBluetooth+0xfc>)
 80031b4:	4936      	ldr	r1, [pc, #216]	; (8003290 <initBluetooth+0x100>)
 80031b6:	9500      	str	r5, [sp, #0]
 80031b8:	f7fd fef6 	bl	8000fa8 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESolicitaSincronia,	"RX_SOLICITA_SINCRONIA", 	RX_SOLICITA_SINCRONIA, 		ComandoBasico);
 80031bc:	2317      	movs	r3, #23
 80031be:	4620      	mov	r0, r4
 80031c0:	4a34      	ldr	r2, [pc, #208]	; (8003294 <initBluetooth+0x104>)
 80031c2:	4935      	ldr	r1, [pc, #212]	; (8003298 <initBluetooth+0x108>)
 80031c4:	9500      	str	r5, [sp, #0]
 80031c6:	f7fd feef 	bl	8000fa8 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAlteraLimiteTemp, 	"RX_ALTERA_VALOR_LIMITE", 	RX_LIMITE_TEMPERATURA,		ComandoBasico);
 80031ca:	2326      	movs	r3, #38	; 0x26
 80031cc:	4620      	mov	r0, r4
 80031ce:	4a33      	ldr	r2, [pc, #204]	; (800329c <initBluetooth+0x10c>)
 80031d0:	4933      	ldr	r1, [pc, #204]	; (80032a0 <initBluetooth+0x110>)
 80031d2:	9500      	str	r5, [sp, #0]
 80031d4:	f7fd fee8 	bl	8000fa8 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAtualizaDataHora, 	"RX_ATUALIZA_HORA", 		RX_ATUALIZA_HORA,			ComandoBasico);
 80031d8:	2303      	movs	r3, #3
 80031da:	4620      	mov	r0, r4
 80031dc:	4a31      	ldr	r2, [pc, #196]	; (80032a4 <initBluetooth+0x114>)
 80031de:	4932      	ldr	r1, [pc, #200]	; (80032a8 <initBluetooth+0x118>)
 80031e0:	9500      	str	r5, [sp, #0]
 80031e2:	f7fd fee1 	bl	8000fa8 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERestaura, 			"RX_RESTAURA", 				RX_RESTAURA,				ComandoBasico);
 80031e6:	2310      	movs	r3, #16
 80031e8:	4620      	mov	r0, r4
 80031ea:	4a30      	ldr	r2, [pc, #192]	; (80032ac <initBluetooth+0x11c>)
 80031ec:	4930      	ldr	r1, [pc, #192]	; (80032b0 <initBluetooth+0x120>)
 80031ee:	9500      	str	r5, [sp, #0]
 80031f0:	f7fd feda 	bl	8000fa8 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTeto,     		"RX_SP_TEMP_TETO",        	RX_SP_TEMP_TETO,          	ComandoBasico);
 80031f4:	2321      	movs	r3, #33	; 0x21
 80031f6:	4620      	mov	r0, r4
 80031f8:	4a2e      	ldr	r2, [pc, #184]	; (80032b4 <initBluetooth+0x124>)
 80031fa:	492f      	ldr	r1, [pc, #188]	; (80032b8 <initBluetooth+0x128>)
 80031fc:	9500      	str	r5, [sp, #0]
 80031fe:	f7fd fed3 	bl	8000fa8 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPLastro,     		"RX_SP_TEMP_LASTRO",       	RX_SP_TEMP_LASTRO,          ComandoBasico);
 8003202:	2322      	movs	r3, #34	; 0x22
 8003204:	4620      	mov	r0, r4
 8003206:	4a2d      	ldr	r2, [pc, #180]	; (80032bc <initBluetooth+0x12c>)
 8003208:	492d      	ldr	r1, [pc, #180]	; (80032c0 <initBluetooth+0x130>)
 800320a:	9500      	str	r5, [sp, #0]
 800320c:	f7fd fecc 	bl	8000fa8 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTempo,     		"RX_SP_TEMPO",       		RX_SP_TEMPO,        		ComandoBasico);
 8003210:	2323      	movs	r3, #35	; 0x23
 8003212:	4620      	mov	r0, r4
 8003214:	4a2b      	ldr	r2, [pc, #172]	; (80032c4 <initBluetooth+0x134>)
 8003216:	492c      	ldr	r1, [pc, #176]	; (80032c8 <initBluetooth+0x138>)
 8003218:	9500      	str	r5, [sp, #0]
 800321a:	f7fd fec5 	bl	8000fa8 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEToggleTempo,     	"RX_TOGGLE_TEMPO",       	RX_TOGGLE_TEMPO,        	ComandoBasico);
 800321e:	2324      	movs	r3, #36	; 0x24
 8003220:	4620      	mov	r0, r4
 8003222:	4a2a      	ldr	r2, [pc, #168]	; (80032cc <initBluetooth+0x13c>)
 8003224:	492a      	ldr	r1, [pc, #168]	; (80032d0 <initBluetooth+0x140>)
 8003226:	9500      	str	r5, [sp, #0]
 8003228:	f7fd febe 	bl	8000fa8 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEReceita,     		"RX_RECEITA",     		  	RX_RECEITA,        			ComandoBasico);
 800322c:	2325      	movs	r3, #37	; 0x25
 800322e:	4620      	mov	r0, r4
 8003230:	4a28      	ldr	r2, [pc, #160]	; (80032d4 <initBluetooth+0x144>)
 8003232:	4929      	ldr	r1, [pc, #164]	; (80032d8 <initBluetooth+0x148>)
 8003234:	9500      	str	r5, [sp, #0]
 8003236:	f7fd feb7 	bl	8000fa8 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOn,     		"RX_LIGA_LAMADA",     	  	RX_LIGA_LAMPADA,     		ComandoBasico);
 800323a:	2327      	movs	r3, #39	; 0x27
 800323c:	4620      	mov	r0, r4
 800323e:	4a27      	ldr	r2, [pc, #156]	; (80032dc <initBluetooth+0x14c>)
 8003240:	4927      	ldr	r1, [pc, #156]	; (80032e0 <initBluetooth+0x150>)
 8003242:	9500      	str	r5, [sp, #0]
 8003244:	f7fd feb0 	bl	8000fa8 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOff,     		"RX_DESLIGA_LAMPADA",    	RX_DESLIGA_LAMPADA,  		ComandoBasico);
 8003248:	2328      	movs	r3, #40	; 0x28
 800324a:	4620      	mov	r0, r4
 800324c:	4a25      	ldr	r2, [pc, #148]	; (80032e4 <initBluetooth+0x154>)
 800324e:	4926      	ldr	r1, [pc, #152]	; (80032e8 <initBluetooth+0x158>)
 8003250:	9500      	str	r5, [sp, #0]
 8003252:	f7fd fea9 	bl	8000fa8 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESetaLampada,     	"RX_LIMITE_LAMPADA",    	RX_LIMITE_LAMPADA,  		ComandoBasico);
 8003256:	2330      	movs	r3, #48	; 0x30
 8003258:	4620      	mov	r0, r4
 800325a:	4a24      	ldr	r2, [pc, #144]	; (80032ec <initBluetooth+0x15c>)
 800325c:	4924      	ldr	r1, [pc, #144]	; (80032f0 <initBluetooth+0x160>)
 800325e:	9500      	str	r5, [sp, #0]
 8003260:	f7fd fea2 	bl	8000fa8 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLECancelaProcesso,  	"RX_CANCELA_PROCESSO",    	RX_CANCELA_PROCESSO,  		ComandoBasico);
 8003264:	2329      	movs	r3, #41	; 0x29
 8003266:	4620      	mov	r0, r4
 8003268:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <initBluetooth+0x164>)
 800326a:	4923      	ldr	r1, [pc, #140]	; (80032f8 <initBluetooth+0x168>)
 800326c:	9500      	str	r5, [sp, #0]
 800326e:	f7fd fe9b 	bl	8000fa8 <BluetoothAddComp>
}
 8003272:	b003      	add	sp, #12
 8003274:	bd30      	pop	{r4, r5, pc}
 8003276:	bf00      	nop
 8003278:	20000814 	.word	0x20000814
 800327c:	20000ebc 	.word	0x20000ebc
 8003280:	2000107c 	.word	0x2000107c
 8003284:	200011fc 	.word	0x200011fc
 8003288:	20000810 	.word	0x20000810
 800328c:	0800a363 	.word	0x0800a363
 8003290:	20001300 	.word	0x20001300
 8003294:	0800a378 	.word	0x0800a378
 8003298:	20001350 	.word	0x20001350
 800329c:	0800a38e 	.word	0x0800a38e
 80032a0:	200012f0 	.word	0x200012f0
 80032a4:	0800a3a5 	.word	0x0800a3a5
 80032a8:	200012f8 	.word	0x200012f8
 80032ac:	0800a3b6 	.word	0x0800a3b6
 80032b0:	20001328 	.word	0x20001328
 80032b4:	0800a3c2 	.word	0x0800a3c2
 80032b8:	20001340 	.word	0x20001340
 80032bc:	0800a3d2 	.word	0x0800a3d2
 80032c0:	20001330 	.word	0x20001330
 80032c4:	0800a3e4 	.word	0x0800a3e4
 80032c8:	20001338 	.word	0x20001338
 80032cc:	0800a3f0 	.word	0x0800a3f0
 80032d0:	20001358 	.word	0x20001358
 80032d4:	0800a400 	.word	0x0800a400
 80032d8:	20001320 	.word	0x20001320
 80032dc:	0800a40b 	.word	0x0800a40b
 80032e0:	20001318 	.word	0x20001318
 80032e4:	0800a41a 	.word	0x0800a41a
 80032e8:	20001310 	.word	0x20001310
 80032ec:	0800a42d 	.word	0x0800a42d
 80032f0:	20001348 	.word	0x20001348
 80032f4:	0800a43f 	.word	0x0800a43f
 80032f8:	20001308 	.word	0x20001308

080032fc <txBluetooth>:

void txBluetooth(void){
 80032fc:	b530      	push	{r4, r5, lr}
	unsigned char	Buffer		[BLUETOOTH_MAX_BUFF_LEN];
	osEvent  evttx;
	evttx = osMessageGet(FilaTXBluetoothHandle, 100);
 80032fe:	4d9f      	ldr	r5, [pc, #636]	; (800357c <txBluetooth+0x280>)
void txBluetooth(void){
 8003300:	b08d      	sub	sp, #52	; 0x34
	evttx = osMessageGet(FilaTXBluetoothHandle, 100);
 8003302:	2264      	movs	r2, #100	; 0x64
 8003304:	6829      	ldr	r1, [r5, #0]
 8003306:	a801      	add	r0, sp, #4
 8003308:	f004 f8f3 	bl	80074f2 <osMessageGet>
	if (evttx.status == osEventMessage) {
 800330c:	9b01      	ldr	r3, [sp, #4]
 800330e:	2b10      	cmp	r3, #16
 8003310:	d11a      	bne.n	8003348 <txBluetooth+0x4c>
		switch ((unsigned int)evttx.value.p) {
 8003312:	9b02      	ldr	r3, [sp, #8]
 8003314:	2b20      	cmp	r3, #32
 8003316:	d811      	bhi.n	800333c <txBluetooth+0x40>
 8003318:	2b15      	cmp	r3, #21
 800331a:	d915      	bls.n	8003348 <txBluetooth+0x4c>
 800331c:	3b16      	subs	r3, #22
 800331e:	2b0a      	cmp	r3, #10
 8003320:	d812      	bhi.n	8003348 <txBluetooth+0x4c>
 8003322:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003326:	0013      	.short	0x0013
 8003328:	00930059 	.word	0x00930059
 800332c:	001100c0 	.word	0x001100c0
 8003330:	00110011 	.word	0x00110011
 8003334:	00110011 	.word	0x00110011
 8003338:	00f00011 	.word	0x00f00011
 800333c:	2b29      	cmp	r3, #41	; 0x29
 800333e:	f000 810d 	beq.w	800355c <txBluetooth+0x260>
 8003342:	2b30      	cmp	r3, #48	; 0x30
 8003344:	f000 8113 	beq.w	800356e <txBluetooth+0x272>
			Buffer[2] 	= 0x20;									// FUNÇÃO -
			BluetoothEnviaComando(Buffer, 2);
			break;
		}
	}
}
 8003348:	b00d      	add	sp, #52	; 0x34
 800334a:	bd30      	pop	{r4, r5, pc}
			Buffer[0] 	= 0x01;									// ENDEREÇO
 800334c:	f241 6301 	movw	r3, #5633	; 0x1601
			Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003350:	4c8b      	ldr	r4, [pc, #556]	; (8003580 <txBluetooth+0x284>)
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003352:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003356:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
			Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 800335a:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
			Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 800335e:	f88d 3012 	strb.w	r3, [sp, #18]
			Buffer[3] 	= PrimitiveStates.Teto._PWMstate;
 8003362:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
 8003366:	f88d 3013 	strb.w	r3, [sp, #19]
			Buffer[4] 	= PrimitiveStates.Lastro._PWMstate;
 800336a:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
 800336e:	f88d 3014 	strb.w	r3, [sp, #20]
			Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003372:	f7fd fb4b 	bl	8000a0c <__aeabi_d2uiz>
 8003376:	f3c0 2307 	ubfx	r3, r0, #8, #8
			Buffer[6] 	= (uint16_t)PrimitiveStates.Teto.realtime 		& 0x00FF;
 800337a:	f88d 0016 	strb.w	r0, [sp, #22]
			Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 800337e:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
			Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003382:	f88d 3015 	strb.w	r3, [sp, #21]
			Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003386:	f7fd fb41 	bl	8000a0c <__aeabi_d2uiz>
 800338a:	f3c0 2307 	ubfx	r3, r0, #8, #8
			Buffer[8] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		& 0x00FF;
 800338e:	f88d 0018 	strb.w	r0, [sp, #24]
			Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 8003392:	e9d4 0148 	ldrd	r0, r1, [r4, #288]	; 0x120
			Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003396:	f88d 3017 	strb.w	r3, [sp, #23]
			Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 800339a:	f7fd fb37 	bl	8000a0c <__aeabi_d2uiz>
 800339e:	f3c0 2307 	ubfx	r3, r0, #8, #8
			Buffer[10] 	= (uint16_t)PrimitiveStates.Lastro.realtime 	& 0x00FF;
 80033a2:	f88d 001a 	strb.w	r0, [sp, #26]
			Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 80033a6:	e9d4 014a 	ldrd	r0, r1, [r4, #296]	; 0x128
			Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 80033aa:	f88d 3019 	strb.w	r3, [sp, #25]
			Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 80033ae:	f7fd fb2d 	bl	8000a0c <__aeabi_d2uiz>
			BluetoothEnviaComando(Buffer, 12);
 80033b2:	210c      	movs	r1, #12
			Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 80033b4:	f3c0 2307 	ubfx	r3, r0, #8, #8
			Buffer[12] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	& 0x00FF;
 80033b8:	f88d 001c 	strb.w	r0, [sp, #28]
			BluetoothEnviaComando(Buffer, 12);
 80033bc:	a804      	add	r0, sp, #16
			Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 80033be:	f88d 301b 	strb.w	r3, [sp, #27]
			BluetoothEnviaComando(Buffer, 12);
 80033c2:	f7fd fe73 	bl	80010ac <BluetoothEnviaComando>
			osDelay(10);
 80033c6:	200a      	movs	r0, #10
 80033c8:	f003 ffa0 	bl	800730c <osDelay>
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA2, 0);
 80033cc:	2200      	movs	r2, #0
 80033ce:	2117      	movs	r1, #23
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA3, 0);
 80033d0:	6828      	ldr	r0, [r5, #0]
 80033d2:	f004 f866 	bl	80074a2 <osMessagePut>
			break;
 80033d6:	e7b7      	b.n	8003348 <txBluetooth+0x4c>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80033d8:	f241 7301 	movw	r3, #5889	; 0x1701
 80033dc:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= PrimitiveStates.stateTimer;			// State da maquina de timer
 80033e0:	4b67      	ldr	r3, [pc, #412]	; (8003580 <txBluetooth+0x284>)
			BluetoothEnviaComando(Buffer, 12);
 80033e2:	a804      	add	r0, sp, #16
			Buffer[2] 	= PrimitiveStates.stateTimer;			// State da maquina de timer
 80033e4:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
 80033e8:	f88d 2012 	strb.w	r2, [sp, #18]
			Buffer[3] 	= PrimitiveStates.RTTimerMinutos;
 80033ec:	f893 214b 	ldrb.w	r2, [r3, #331]	; 0x14b
 80033f0:	f88d 2013 	strb.w	r2, [sp, #19]
			Buffer[4] 	= PrimitiveStates.RTTimerSegundos;
 80033f4:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 80033f8:	f88d 2014 	strb.w	r2, [sp, #20]
			Buffer[5] 	= PrimitiveStates.SPTimerMinutos;
 80033fc:	f893 2149 	ldrb.w	r2, [r3, #329]	; 0x149
 8003400:	f88d 2015 	strb.w	r2, [sp, #21]
			Buffer[6] 	= PrimitiveStates.SPTimerSegundos;
 8003404:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
			Buffer[10]	= PrimitiveStates.Lampada._state;
 8003408:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
			Buffer[6] 	= PrimitiveStates.SPTimerSegundos;
 800340c:	f88d 2016 	strb.w	r2, [sp, #22]
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 8003410:	4a5c      	ldr	r2, [pc, #368]	; (8003584 <txBluetooth+0x288>)
			Buffer[10]	= PrimitiveStates.Lampada._state;
 8003412:	f88d 301a 	strb.w	r3, [sp, #26]
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 8003416:	6852      	ldr	r2, [r2, #4]
			Buffer[11] 	= (uint16_t)Calendario.TotalCiclos >> 8;
 8003418:	4b5b      	ldr	r3, [pc, #364]	; (8003588 <txBluetooth+0x28c>)
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 800341a:	f3c2 2107 	ubfx	r1, r2, #8, #8
			Buffer[8] 	= (uint16_t)horimetroHoras.valor & 0x00FF;
 800341e:	f88d 2018 	strb.w	r2, [sp, #24]
			Buffer[9] 	= (uint8_t)horimetroMinutos.valor;
 8003422:	4a5a      	ldr	r2, [pc, #360]	; (800358c <txBluetooth+0x290>)
			Buffer[11] 	= (uint16_t)Calendario.TotalCiclos >> 8;
 8003424:	891b      	ldrh	r3, [r3, #8]
			Buffer[9] 	= (uint8_t)horimetroMinutos.valor;
 8003426:	6852      	ldr	r2, [r2, #4]
			Buffer[7] 	= (uint16_t)horimetroHoras.valor >> 8;
 8003428:	f88d 1017 	strb.w	r1, [sp, #23]
			Buffer[9] 	= (uint8_t)horimetroMinutos.valor;
 800342c:	f88d 2019 	strb.w	r2, [sp, #25]
			BluetoothEnviaComando(Buffer, 12);
 8003430:	210c      	movs	r1, #12
			Buffer[11] 	= (uint16_t)Calendario.TotalCiclos >> 8;
 8003432:	0a1a      	lsrs	r2, r3, #8
 8003434:	f88d 201b 	strb.w	r2, [sp, #27]
			Buffer[12] 	= (uint16_t)Calendario.TotalCiclos & 0x00FF;
 8003438:	f88d 301c 	strb.w	r3, [sp, #28]
			BluetoothEnviaComando(Buffer, 12);
 800343c:	f7fd fe36 	bl	80010ac <BluetoothEnviaComando>
			osDelay(10);
 8003440:	200a      	movs	r0, #10
 8003442:	f003 ff63 	bl	800730c <osDelay>
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003446:	2200      	movs	r2, #0
 8003448:	2118      	movs	r1, #24
 800344a:	e7c1      	b.n	80033d0 <txBluetooth+0xd4>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 800344c:	f641 0301 	movw	r3, #6145	; 0x1801
 8003450:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= 0x01;									// Modelo
 8003454:	2301      	movs	r3, #1
 8003456:	f88d 3012 	strb.w	r3, [sp, #18]
			Buffer[3] 	= (uint8_t)PrimitiveStates.Lampada.limitOn;
 800345a:	4b49      	ldr	r3, [pc, #292]	; (8003580 <txBluetooth+0x284>)
			Buffer[8] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 800345c:	4a4a      	ldr	r2, [pc, #296]	; (8003588 <txBluetooth+0x28c>)
			Buffer[3] 	= (uint8_t)PrimitiveStates.Lampada.limitOn;
 800345e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			BluetoothEnviaComando(Buffer, 11);
 8003460:	210b      	movs	r1, #11
			Buffer[3] 	= (uint8_t)PrimitiveStates.Lampada.limitOn;
 8003462:	f88d 3013 	strb.w	r3, [sp, #19]
			Buffer[4] 	= (uint8_t)instalacaoDia.valor;
 8003466:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <txBluetooth+0x294>)
			BluetoothEnviaComando(Buffer, 11);
 8003468:	a804      	add	r0, sp, #16
			Buffer[4] 	= (uint8_t)instalacaoDia.valor;
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f88d 3014 	strb.w	r3, [sp, #20]
			Buffer[5] 	= (uint8_t)instalacaoMes.valor;
 8003470:	4b48      	ldr	r3, [pc, #288]	; (8003594 <txBluetooth+0x298>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f88d 3015 	strb.w	r3, [sp, #21]
			Buffer[6] 	= (uint8_t)instalacaoAno.valor;
 8003478:	4b47      	ldr	r3, [pc, #284]	; (8003598 <txBluetooth+0x29c>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f88d 3016 	strb.w	r3, [sp, #22]
			Buffer[7]	= VERSAO;
 8003480:	2302      	movs	r3, #2
 8003482:	f88d 3017 	strb.w	r3, [sp, #23]
			Buffer[8] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 8003486:	8953      	ldrh	r3, [r2, #10]
 8003488:	ba5b      	rev16	r3, r3
 800348a:	f8ad 3018 	strh.w	r3, [sp, #24]
			Buffer[10] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 800348e:	8993      	ldrh	r3, [r2, #12]
 8003490:	ba5b      	rev16	r3, r3
 8003492:	f8ad 301a 	strh.w	r3, [sp, #26]
			BluetoothEnviaComando(Buffer, 11);
 8003496:	f7fd fe09 	bl	80010ac <BluetoothEnviaComando>
			osDelay(10);
 800349a:	200a      	movs	r0, #10
 800349c:	f003 ff36 	bl	800730c <osDelay>
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA2, 0);
 80034a0:	2200      	movs	r2, #0
 80034a2:	2119      	movs	r1, #25
 80034a4:	e794      	b.n	80033d0 <txBluetooth+0xd4>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80034a6:	f641 1301 	movw	r3, #6401	; 0x1901
			Buffer[2] 	= (uint16_t)PrimitiveStates.Teto.kp	>> 8 ;
 80034aa:	4c35      	ldr	r4, [pc, #212]	; (8003580 <txBluetooth+0x284>)
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80034ac:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= (uint16_t)PrimitiveStates.Teto.kp	>> 8 ;
 80034b0:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
 80034b4:	f7fd faaa 	bl	8000a0c <__aeabi_d2uiz>
 80034b8:	ba40      	rev16	r0, r0
 80034ba:	f8ad 0012 	strh.w	r0, [sp, #18]
			Buffer[4] 	= (uint16_t)PrimitiveStates.Teto.ki	>> 8 ;
 80034be:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
 80034c2:	f7fd faa3 	bl	8000a0c <__aeabi_d2uiz>
 80034c6:	ba40      	rev16	r0, r0
 80034c8:	f8ad 0014 	strh.w	r0, [sp, #20]
			Buffer[6] 	= (uint16_t)PrimitiveStates.Teto.kd	>> 8 ;
 80034cc:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	; 0xc0
 80034d0:	f7fd fa9c 	bl	8000a0c <__aeabi_d2uiz>
			Buffer[8] 	= (uint16_t)PrimitiveStates.Teto.histerese >> 8;
 80034d4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
			Buffer[6] 	= (uint16_t)PrimitiveStates.Teto.kd	>> 8 ;
 80034d8:	ba40      	rev16	r0, r0
			Buffer[8] 	= (uint16_t)PrimitiveStates.Teto.histerese >> 8;
 80034da:	ba5b      	rev16	r3, r3
			Buffer[6] 	= (uint16_t)PrimitiveStates.Teto.kd	>> 8 ;
 80034dc:	f8ad 0016 	strh.w	r0, [sp, #22]
			Buffer[10] 	= (uint16_t)PrimitiveStates.Teto.limite >> 8;
 80034e0:	e9d4 0138 	ldrd	r0, r1, [r4, #224]	; 0xe0
			Buffer[8] 	= (uint16_t)PrimitiveStates.Teto.histerese >> 8;
 80034e4:	f8ad 3018 	strh.w	r3, [sp, #24]
			Buffer[10] 	= (uint16_t)PrimitiveStates.Teto.limite >> 8;
 80034e8:	f7fd fa90 	bl	8000a0c <__aeabi_d2uiz>
 80034ec:	ba40      	rev16	r0, r0
			BluetoothEnviaComando(Buffer, 11);
 80034ee:	210b      	movs	r1, #11
			Buffer[10] 	= (uint16_t)PrimitiveStates.Teto.limite >> 8;
 80034f0:	f8ad 001a 	strh.w	r0, [sp, #26]
			BluetoothEnviaComando(Buffer, 11);
 80034f4:	a804      	add	r0, sp, #16
 80034f6:	f7fd fdd9 	bl	80010ac <BluetoothEnviaComando>
			osDelay(10);
 80034fa:	200a      	movs	r0, #10
 80034fc:	f003 ff06 	bl	800730c <osDelay>
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA3, 0);
 8003500:	2200      	movs	r2, #0
 8003502:	2120      	movs	r1, #32
 8003504:	e764      	b.n	80033d0 <txBluetooth+0xd4>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003506:	f242 0301 	movw	r3, #8193	; 0x2001
			Buffer[2] 	= (uint16_t)PrimitiveStates.Lastro.kp	>> 8 ;
 800350a:	4c1d      	ldr	r4, [pc, #116]	; (8003580 <txBluetooth+0x284>)
			Buffer[0] 	= 0x01;									// ENDEREÇO
 800350c:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= (uint16_t)PrimitiveStates.Lastro.kp	>> 8 ;
 8003510:	e9d4 0140 	ldrd	r0, r1, [r4, #256]	; 0x100
 8003514:	f7fd fa7a 	bl	8000a0c <__aeabi_d2uiz>
 8003518:	ba40      	rev16	r0, r0
 800351a:	f8ad 0012 	strh.w	r0, [sp, #18]
			Buffer[4] 	= (uint16_t)PrimitiveStates.Lastro.ki	>> 8 ;
 800351e:	e9d4 0142 	ldrd	r0, r1, [r4, #264]	; 0x108
 8003522:	f7fd fa73 	bl	8000a0c <__aeabi_d2uiz>
 8003526:	ba40      	rev16	r0, r0
 8003528:	f8ad 0014 	strh.w	r0, [sp, #20]
			Buffer[6] 	= (uint16_t)PrimitiveStates.Lastro.kd	>> 8 ;
 800352c:	e9d4 0144 	ldrd	r0, r1, [r4, #272]	; 0x110
 8003530:	f7fd fa6c 	bl	8000a0c <__aeabi_d2uiz>
			Buffer[8] 	= (uint16_t)PrimitiveStates.Lastro.histerese >> 8;
 8003534:	f8b4 3138 	ldrh.w	r3, [r4, #312]	; 0x138
			Buffer[6] 	= (uint16_t)PrimitiveStates.Lastro.kd	>> 8 ;
 8003538:	ba40      	rev16	r0, r0
 800353a:	f8ad 0016 	strh.w	r0, [sp, #22]
			Buffer[8] 	= (uint16_t)PrimitiveStates.Lastro.histerese >> 8;
 800353e:	ba5b      	rev16	r3, r3
			Buffer[10] 	= (uint16_t)PrimitiveStates.Lastro.limite >> 8;
 8003540:	e9d4 014c 	ldrd	r0, r1, [r4, #304]	; 0x130
			Buffer[8] 	= (uint16_t)PrimitiveStates.Lastro.histerese >> 8;
 8003544:	f8ad 3018 	strh.w	r3, [sp, #24]
			Buffer[10] 	= (uint16_t)PrimitiveStates.Lastro.limite >> 8;
 8003548:	f7fd fa60 	bl	8000a0c <__aeabi_d2uiz>
			BluetoothEnviaComando(Buffer, 11);
 800354c:	210b      	movs	r1, #11
			Buffer[10] 	= (uint16_t)PrimitiveStates.Lastro.limite >> 8;
 800354e:	ba40      	rev16	r0, r0
 8003550:	f8ad 001a 	strh.w	r0, [sp, #26]
			BluetoothEnviaComando(Buffer, 2);
 8003554:	a804      	add	r0, sp, #16
 8003556:	f7fd fda9 	bl	80010ac <BluetoothEnviaComando>
}
 800355a:	e6f5      	b.n	8003348 <txBluetooth+0x4c>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 800355c:	f641 1301 	movw	r3, #6401	; 0x1901
 8003560:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= 0x19;									// FUNÇÃO -
 8003564:	2319      	movs	r3, #25
			BluetoothEnviaComando(Buffer, 2);
 8003566:	2102      	movs	r1, #2
			Buffer[2] 	= 0x20;									// FUNÇÃO -
 8003568:	f88d 3012 	strb.w	r3, [sp, #18]
			BluetoothEnviaComando(Buffer, 2);
 800356c:	e7f2      	b.n	8003554 <txBluetooth+0x258>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 800356e:	f242 0301 	movw	r3, #8193	; 0x2001
 8003572:	f8ad 3010 	strh.w	r3, [sp, #16]
			Buffer[2] 	= 0x20;									// FUNÇÃO -
 8003576:	2320      	movs	r3, #32
 8003578:	e7f5      	b.n	8003566 <txBluetooth+0x26a>
 800357a:	bf00      	nop
 800357c:	20000814 	.word	0x20000814
 8003580:	20000818 	.word	0x20000818
 8003584:	200014d8 	.word	0x200014d8
 8003588:	200007f8 	.word	0x200007f8
 800358c:	20001504 	.word	0x20001504
 8003590:	2000155c 	.word	0x2000155c
 8003594:	20001588 	.word	0x20001588
 8003598:	20001530 	.word	0x20001530

0800359c <verificaLimiteSetpoint>:

		}
	}
}

void verificaLimiteSetpoint(IndviduoPID	*canal){
 800359c:	b5d0      	push	{r4, r6, r7, lr}
	if(canal->setPoint < canal->limite)
 800359e:	e9d0 670e 	ldrd	r6, r7, [r0, #56]	; 0x38
void verificaLimiteSetpoint(IndviduoPID	*canal){
 80035a2:	4604      	mov	r4, r0
	if(canal->setPoint < canal->limite)
 80035a4:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80035a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035ac:	4632      	mov	r2, r6
 80035ae:	463b      	mov	r3, r7
 80035b0:	f7fd fa04 	bl	80009bc <__aeabi_dcmplt>
 80035b4:	b908      	cbnz	r0, 80035ba <verificaLimiteSetpoint+0x1e>
		return;

	canal->setPoint = canal->limite;
 80035b6:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
	return;
}
 80035ba:	bdd0      	pop	{r4, r6, r7, pc}

080035bc <rxBluetooth>:
void rxBluetooth(void){
 80035bc:	b570      	push	{r4, r5, r6, lr}
	evtrx = osMessageGet(FilaRXBluetoothHandle, 100);
 80035be:	4bb0      	ldr	r3, [pc, #704]	; (8003880 <rxBluetooth+0x2c4>)
void rxBluetooth(void){
 80035c0:	b086      	sub	sp, #24
	evtrx = osMessageGet(FilaRXBluetoothHandle, 100);
 80035c2:	6819      	ldr	r1, [r3, #0]
 80035c4:	2264      	movs	r2, #100	; 0x64
 80035c6:	a803      	add	r0, sp, #12
 80035c8:	f003 ff93 	bl	80074f2 <osMessageGet>
	if (evtrx.status == osEventMessage) {
 80035cc:	9b03      	ldr	r3, [sp, #12]
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	f040 816d 	bne.w	80038ae <rxBluetooth+0x2f2>
		switch (bluetooth._RxDataArr[1]) {
 80035d4:	4cab      	ldr	r4, [pc, #684]	; (8003884 <rxBluetooth+0x2c8>)
 80035d6:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
 80035da:	2d03      	cmp	r5, #3
 80035dc:	d033      	beq.n	8003646 <rxBluetooth+0x8a>
 80035de:	3d10      	subs	r5, #16
 80035e0:	b2eb      	uxtb	r3, r5
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	f200 8163 	bhi.w	80038ae <rxBluetooth+0x2f2>
 80035e8:	2d20      	cmp	r5, #32
 80035ea:	f200 8160 	bhi.w	80038ae <rxBluetooth+0x2f2>
 80035ee:	e8df f015 	tbh	[pc, r5, lsl #1]
 80035f2:	0051      	.short	0x0051
 80035f4:	015e015e 	.word	0x015e015e
 80035f8:	015e015e 	.word	0x015e015e
 80035fc:	015e0021 	.word	0x015e0021
 8003600:	015e0122 	.word	0x015e0122
 8003604:	015e015e 	.word	0x015e015e
 8003608:	015e015e 	.word	0x015e015e
 800360c:	015e015e 	.word	0x015e015e
 8003610:	015e015e 	.word	0x015e015e
 8003614:	0071005a 	.word	0x0071005a
 8003618:	00a50085 	.word	0x00a50085
 800361c:	010200cc 	.word	0x010200cc
 8003620:	01300125 	.word	0x01300125
 8003624:	015e0157 	.word	0x015e0157
 8003628:	015e015e 	.word	0x015e015e
 800362c:	015e015e 	.word	0x015e015e
 8003630:	013b015e 	.word	0x013b015e
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA, 0);
 8003634:	2200      	movs	r2, #0
 8003636:	2116      	movs	r1, #22
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003638:	4b93      	ldr	r3, [pc, #588]	; (8003888 <rxBluetooth+0x2cc>)
 800363a:	6818      	ldr	r0, [r3, #0]
}
 800363c:	b006      	add	sp, #24
 800363e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003642:	f003 bf2e 	b.w	80074a2 <osMessagePut>
			datetoUpdate.WeekDay 	= bluetooth._RxDataArr[2]; //Dia da semana p/atualizar
 8003646:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
			timeToUpdate.Hours 		= bluetooth._RxDataArr[6]; //hora p/atualizar
 800364a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
			datetoUpdate.WeekDay 	= bluetooth._RxDataArr[2]; //Dia da semana p/atualizar
 800364c:	f88d 3008 	strb.w	r3, [sp, #8]
			datetoUpdate.Date 		= bluetooth._RxDataArr[3]; //Dia do mes p/atualizar
 8003650:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
			timeToUpdate.Hours 		= bluetooth._RxDataArr[6]; //hora p/atualizar
 8003654:	f8ad 2004 	strh.w	r2, [sp, #4]
			datetoUpdate.Date 		= bluetooth._RxDataArr[3]; //Dia do mes p/atualizar
 8003658:	f88d 300a 	strb.w	r3, [sp, #10]
			datetoUpdate.Month 		= bluetooth._RxDataArr[4]; //mes p/atualizar
 800365c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003660:	f88d 3009 	strb.w	r3, [sp, #9]
			datetoUpdate.Year 		= bluetooth._RxDataArr[5]; //ano p/atualizar
 8003664:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003668:	f88d 300b 	strb.w	r3, [sp, #11]
			timeToUpdate.Seconds 	= bluetooth._RxDataArr[8]; //segundos p/atualizar
 800366c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003670:	f88d 3006 	strb.w	r3, [sp, #6]
			atualizaDataEeprom(datetoUpdate, timeToUpdate);
 8003674:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8003678:	f000 fbfa 	bl	8003e70 <atualizaDataEeprom>
			MACRO_ENVIA_AKNOLADGE_(RX_ATUALIZA_HORA)
 800367c:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003680:	4629      	mov	r1, r5
 8003682:	8123      	strh	r3, [r4, #8]
 8003684:	72a5      	strb	r5, [r4, #10]
 8003686:	f104 0008 	add.w	r0, r4, #8
}
 800368a:	b006      	add	sp, #24
 800368c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			MACRO_ENVIA_AKNOLADGE_(RX_CANCELA_PROCESSO)
 8003690:	f7fd bcd6 	b.w	8001040 <Envia_bytes_UART>
			osMessagePut(FilaEepromHandle, CEepromHardReset, 0);
 8003694:	4b7d      	ldr	r3, [pc, #500]	; (800388c <rxBluetooth+0x2d0>)
 8003696:	2200      	movs	r2, #0
 8003698:	2102      	movs	r1, #2
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	f003 ff01 	bl	80074a2 <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_RESETANDO, 0);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2129      	movs	r1, #41	; 0x29
 80036a4:	e7c8      	b.n	8003638 <rxBluetooth+0x7c>
			MACRO_ANULA_INATIVIDADE
 80036a6:	2200      	movs	r2, #0
			PrimitiveStates.Teto.setPoint = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 80036a8:	8e60      	ldrh	r0, [r4, #50]	; 0x32
			MACRO_ANULA_INATIVIDADE
 80036aa:	4b79      	ldr	r3, [pc, #484]	; (8003890 <rxBluetooth+0x2d4>)
			PrimitiveStates.Teto.setPoint = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 80036ac:	ba40      	rev16	r0, r0
			MACRO_ANULA_INATIVIDADE
 80036ae:	801a      	strh	r2, [r3, #0]
			PrimitiveStates.Teto.setPoint = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 80036b0:	b280      	uxth	r0, r0
 80036b2:	f7fc fea7 	bl	8000404 <__aeabi_i2d>
 80036b6:	4d77      	ldr	r5, [pc, #476]	; (8003894 <rxBluetooth+0x2d8>)
 80036b8:	e9c5 0136 	strd	r0, r1, [r5, #216]	; 0xd8
			verificaLimiteSetpoint(&PrimitiveStates.Teto);
 80036bc:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
 80036c0:	f7ff ff6c 	bl	800359c <verificaLimiteSetpoint>
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_TETO)
 80036c4:	f64f 7301 	movw	r3, #65281	; 0xff01
 80036c8:	8123      	strh	r3, [r4, #8]
 80036ca:	2321      	movs	r3, #33	; 0x21
			MACRO_ENVIA_AKNOLADGE_(RX_CANCELA_PROCESSO)
 80036cc:	2103      	movs	r1, #3
 80036ce:	4872      	ldr	r0, [pc, #456]	; (8003898 <rxBluetooth+0x2dc>)
 80036d0:	72a3      	strb	r3, [r4, #10]
 80036d2:	e7da      	b.n	800368a <rxBluetooth+0xce>
			MACRO_ANULA_INATIVIDADE
 80036d4:	2200      	movs	r2, #0
			PrimitiveStates.Lastro.setPoint = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 80036d6:	8e60      	ldrh	r0, [r4, #50]	; 0x32
			MACRO_ANULA_INATIVIDADE
 80036d8:	4b6d      	ldr	r3, [pc, #436]	; (8003890 <rxBluetooth+0x2d4>)
			PrimitiveStates.Lastro.setPoint = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 80036da:	ba40      	rev16	r0, r0
			MACRO_ANULA_INATIVIDADE
 80036dc:	801a      	strh	r2, [r3, #0]
			PrimitiveStates.Lastro.setPoint = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 80036de:	b280      	uxth	r0, r0
 80036e0:	f7fc fe90 	bl	8000404 <__aeabi_i2d>
 80036e4:	4d6b      	ldr	r5, [pc, #428]	; (8003894 <rxBluetooth+0x2d8>)
 80036e6:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 80036ea:	f105 00f8 	add.w	r0, r5, #248	; 0xf8
 80036ee:	f7ff ff55 	bl	800359c <verificaLimiteSetpoint>
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_LASTRO)
 80036f2:	f64f 7301 	movw	r3, #65281	; 0xff01
 80036f6:	8123      	strh	r3, [r4, #8]
 80036f8:	2322      	movs	r3, #34	; 0x22
 80036fa:	e7e7      	b.n	80036cc <rxBluetooth+0x110>
			MACRO_ANULA_INATIVIDADE
 80036fc:	2200      	movs	r2, #0
 80036fe:	4b64      	ldr	r3, [pc, #400]	; (8003890 <rxBluetooth+0x2d4>)
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003700:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
			MACRO_ANULA_INATIVIDADE
 8003704:	801a      	strh	r2, [r3, #0]
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003706:	4b63      	ldr	r3, [pc, #396]	; (8003894 <rxBluetooth+0x2d8>)
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8003708:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 800370c:	f883 1149 	strb.w	r1, [r3, #329]	; 0x149
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8003710:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003714:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
			if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003718:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 800371c:	f883 114b 	strb.w	r1, [r3, #331]	; 0x14b
			if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003720:	2a01      	cmp	r2, #1
 8003722:	d006      	beq.n	8003732 <rxBluetooth+0x176>
 8003724:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
 8003728:	2a01      	cmp	r2, #1
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 800372a:	bf1c      	itt	ne
 800372c:	2201      	movne	r2, #1
 800372e:	f883 214d 	strbne.w	r2, [r3, #333]	; 0x14d
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMPO)
 8003732:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003736:	8123      	strh	r3, [r4, #8]
 8003738:	2323      	movs	r3, #35	; 0x23
 800373a:	e7c7      	b.n	80036cc <rxBluetooth+0x110>
			MACRO_ANULA_INATIVIDADE
 800373c:	2200      	movs	r2, #0
 800373e:	4b54      	ldr	r3, [pc, #336]	; (8003890 <rxBluetooth+0x2d4>)
 8003740:	801a      	strh	r2, [r3, #0]
			switch (PrimitiveStates.stateTimer) {
 8003742:	4b54      	ldr	r3, [pc, #336]	; (8003894 <rxBluetooth+0x2d8>)
 8003744:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
 8003748:	2a01      	cmp	r2, #1
 800374a:	d01c      	beq.n	8003786 <rxBluetooth+0x1ca>
 800374c:	2a02      	cmp	r2, #2
 800374e:	d008      	beq.n	8003762 <rxBluetooth+0x1a6>
 8003750:	b992      	cbnz	r2, 8003778 <rxBluetooth+0x1bc>
				PrimitiveStates.RTTimerMinutos 	= PrimitiveStates.SPTimerMinutos;
 8003752:	f893 2149 	ldrb.w	r2, [r3, #329]	; 0x149
 8003756:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
				PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 800375a:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
 800375e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
				if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003762:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8003766:	2a01      	cmp	r2, #1
 8003768:	d00b      	beq.n	8003782 <rxBluetooth+0x1c6>
 800376a:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
 800376e:	2a01      	cmp	r2, #1
 8003770:	d007      	beq.n	8003782 <rxBluetooth+0x1c6>
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003772:	2201      	movs	r2, #1
				PrimitiveStates.stateTimer 	= TIMER_pausado;
 8003774:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
			MACRO_ENVIA_AKNOLADGE_(RX_TOGGLE_TEMPO)
 8003778:	f64f 7301 	movw	r3, #65281	; 0xff01
 800377c:	8123      	strh	r3, [r4, #8]
 800377e:	2324      	movs	r3, #36	; 0x24
 8003780:	e7a4      	b.n	80036cc <rxBluetooth+0x110>
					PrimitiveStates.stateTimer = TIMER_idle;
 8003782:	2200      	movs	r2, #0
 8003784:	e7f6      	b.n	8003774 <rxBluetooth+0x1b8>
				PrimitiveStates.stateTimer 	= TIMER_pausado;
 8003786:	2202      	movs	r2, #2
 8003788:	e7f4      	b.n	8003774 <rxBluetooth+0x1b8>
			MACRO_ANULA_INATIVIDADE
 800378a:	2600      	movs	r6, #0
			PrimitiveStates.Teto.setPoint 	= (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 800378c:	8e60      	ldrh	r0, [r4, #50]	; 0x32
			MACRO_ANULA_INATIVIDADE
 800378e:	4b40      	ldr	r3, [pc, #256]	; (8003890 <rxBluetooth+0x2d4>)
			PrimitiveStates.Teto.setPoint 	= (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 8003790:	ba40      	rev16	r0, r0
			MACRO_ANULA_INATIVIDADE
 8003792:	801e      	strh	r6, [r3, #0]
			PrimitiveStates.Teto.setPoint 	= (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 8003794:	b280      	uxth	r0, r0
 8003796:	f7fc fe35 	bl	8000404 <__aeabi_i2d>
 800379a:	4d3e      	ldr	r5, [pc, #248]	; (8003894 <rxBluetooth+0x2d8>)
 800379c:	e9c5 0136 	strd	r0, r1, [r5, #216]	; 0xd8
			PrimitiveStates.Lastro.setPoint = (bluetooth._RxDataArr[4]<< 8) | bluetooth._RxDataArr[5];
 80037a0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80037a2:	ba40      	rev16	r0, r0
 80037a4:	b280      	uxth	r0, r0
 80037a6:	f7fc fe2d 	bl	8000404 <__aeabi_i2d>
 80037aa:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 80037ae:	f105 00f8 	add.w	r0, r5, #248	; 0xf8
 80037b2:	f7ff fef3 	bl	800359c <verificaLimiteSetpoint>
			verificaLimiteSetpoint(&PrimitiveStates.Teto);
 80037b6:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
 80037ba:	f7ff feef 	bl	800359c <verificaLimiteSetpoint>
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 80037be:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 80037c2:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 80037c6:	f885 314a 	strb.w	r3, [r5, #330]	; 0x14a
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 80037ca:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
			if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 80037ce:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 80037d2:	f885 2149 	strb.w	r2, [r5, #329]	; 0x149
			if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 80037d6:	2b01      	cmp	r3, #1
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 80037d8:	f885 214b 	strb.w	r2, [r5, #331]	; 0x14b
			if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 80037dc:	d004      	beq.n	80037e8 <rxBluetooth+0x22c>
 80037de:	f895 60ea 	ldrb.w	r6, [r5, #234]	; 0xea
				PrimitiveStates.stateTimer 	= TIMER_decrementando;
 80037e2:	3e01      	subs	r6, #1
 80037e4:	bf18      	it	ne
 80037e6:	2601      	movne	r6, #1
			MACRO_ENVIA_AKNOLADGE_(RX_RECEITA)
 80037e8:	f64f 7301 	movw	r3, #65281	; 0xff01
 80037ec:	f885 614d 	strb.w	r6, [r5, #333]	; 0x14d
 80037f0:	8123      	strh	r3, [r4, #8]
 80037f2:	2325      	movs	r3, #37	; 0x25
 80037f4:	e76a      	b.n	80036cc <rxBluetooth+0x110>
			MACRO_ANULA_INATIVIDADE
 80037f6:	2600      	movs	r6, #0
			PrimitiveStates.Teto.limite = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 80037f8:	8e60      	ldrh	r0, [r4, #50]	; 0x32
			MACRO_ANULA_INATIVIDADE
 80037fa:	4b25      	ldr	r3, [pc, #148]	; (8003890 <rxBluetooth+0x2d4>)
			PrimitiveStates.Teto.limite = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 80037fc:	ba40      	rev16	r0, r0
			MACRO_ANULA_INATIVIDADE
 80037fe:	801e      	strh	r6, [r3, #0]
			PrimitiveStates.Teto.limite = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 8003800:	b280      	uxth	r0, r0
 8003802:	f7fc fdff 	bl	8000404 <__aeabi_i2d>
 8003806:	4d23      	ldr	r5, [pc, #140]	; (8003894 <rxBluetooth+0x2d8>)
 8003808:	e9c5 0138 	strd	r0, r1, [r5, #224]	; 0xe0
			PrimitiveStates.Lastro.limite = (bluetooth._RxDataArr[4]<< 8) | bluetooth._RxDataArr[5];
 800380c:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800380e:	ba40      	rev16	r0, r0
 8003810:	b280      	uxth	r0, r0
 8003812:	f7fc fdf7 	bl	8000404 <__aeabi_i2d>
			osMessagePut(FilaEepromHandle, CEepromLimiteTemp, 0);
 8003816:	4b1d      	ldr	r3, [pc, #116]	; (800388c <rxBluetooth+0x2d0>)
			PrimitiveStates.Lastro.limite = (bluetooth._RxDataArr[4]<< 8) | bluetooth._RxDataArr[5];
 8003818:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
			osMessagePut(FilaEepromHandle, CEepromLimiteTemp, 0);
 800381c:	4632      	mov	r2, r6
 800381e:	2105      	movs	r1, #5
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	f003 fe3e 	bl	80074a2 <osMessagePut>
			verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8003826:	f105 00f8 	add.w	r0, r5, #248	; 0xf8
 800382a:	f7ff feb7 	bl	800359c <verificaLimiteSetpoint>
			verificaLimiteSetpoint(&PrimitiveStates.Teto);
 800382e:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
 8003832:	f7ff feb3 	bl	800359c <verificaLimiteSetpoint>
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003836:	2200      	movs	r2, #0
 8003838:	2118      	movs	r1, #24
 800383a:	e6fd      	b.n	8003638 <rxBluetooth+0x7c>
			MACRO_ANULA_INATIVIDADE
 800383c:	2200      	movs	r2, #0
 800383e:	4b14      	ldr	r3, [pc, #80]	; (8003890 <rxBluetooth+0x2d4>)
			onDigital(&PrimitiveStates.Lampada);
 8003840:	4816      	ldr	r0, [pc, #88]	; (800389c <rxBluetooth+0x2e0>)
			MACRO_ANULA_INATIVIDADE
 8003842:	801a      	strh	r2, [r3, #0]
			onDigital(&PrimitiveStates.Lampada);
 8003844:	f7fe f9f8 	bl	8001c38 <onDigital>
			MACRO_ENVIA_AKNOLADGE_(RX_LIGA_LAMPADA)
 8003848:	f64f 7301 	movw	r3, #65281	; 0xff01
 800384c:	8123      	strh	r3, [r4, #8]
 800384e:	2327      	movs	r3, #39	; 0x27
 8003850:	e73c      	b.n	80036cc <rxBluetooth+0x110>
			MACRO_ANULA_INATIVIDADE
 8003852:	2200      	movs	r2, #0
 8003854:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <rxBluetooth+0x2d4>)
			offDigital(&PrimitiveStates.Lampada);
 8003856:	4811      	ldr	r0, [pc, #68]	; (800389c <rxBluetooth+0x2e0>)
			MACRO_ANULA_INATIVIDADE
 8003858:	801a      	strh	r2, [r3, #0]
			offDigital(&PrimitiveStates.Lampada);
 800385a:	f7fe f9f7 	bl	8001c4c <offDigital>
			MACRO_ENVIA_AKNOLADGE_(RX_DESLIGA_LAMPADA)
 800385e:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003862:	8123      	strh	r3, [r4, #8]
 8003864:	2328      	movs	r3, #40	; 0x28
 8003866:	e731      	b.n	80036cc <rxBluetooth+0x110>
			PrimitiveStates.Lampada.limitOn = bluetooth._RxDataArr[3];
 8003868:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <rxBluetooth+0x2d8>)
			osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 800386e:	2106      	movs	r1, #6
			PrimitiveStates.Lampada.limitOn = bluetooth._RxDataArr[3];
 8003870:	875a      	strh	r2, [r3, #58]	; 0x3a
			osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 8003872:	4b06      	ldr	r3, [pc, #24]	; (800388c <rxBluetooth+0x2d0>)
 8003874:	2200      	movs	r2, #0
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	f003 fe13 	bl	80074a2 <osMessagePut>
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 800387c:	e7db      	b.n	8003836 <rxBluetooth+0x27a>
 800387e:	bf00      	nop
 8003880:	20000810 	.word	0x20000810
 8003884:	20000ebc 	.word	0x20000ebc
 8003888:	20000814 	.word	0x20000814
 800388c:	2000080c 	.word	0x2000080c
 8003890:	20001360 	.word	0x20001360
 8003894:	20000818 	.word	0x20000818
 8003898:	20000ec4 	.word	0x20000ec4
 800389c:	20000844 	.word	0x20000844
			desligaForno();
 80038a0:	f7fe fe6a 	bl	8002578 <desligaForno>
			MACRO_ENVIA_AKNOLADGE_(RX_CANCELA_PROCESSO)
 80038a4:	f64f 7301 	movw	r3, #65281	; 0xff01
 80038a8:	8123      	strh	r3, [r4, #8]
 80038aa:	2329      	movs	r3, #41	; 0x29
 80038ac:	e70e      	b.n	80036cc <rxBluetooth+0x110>
}
 80038ae:	b006      	add	sp, #24
 80038b0:	bd70      	pop	{r4, r5, r6, pc}
 80038b2:	bf00      	nop

080038b4 <StartBluetooth>:
{
 80038b4:	b508      	push	{r3, lr}
	initBluetooth();
 80038b6:	f7ff fc6b 	bl	8003190 <initBluetooth>
		rxBluetooth();
 80038ba:	f7ff fe7f 	bl	80035bc <rxBluetooth>
		txBluetooth();
 80038be:	f7ff fd1d 	bl	80032fc <txBluetooth>
		osThreadYield();
 80038c2:	f003 fd17 	bl	80072f4 <osThreadYield>
		osDelay(50);
 80038c6:	2032      	movs	r0, #50	; 0x32
 80038c8:	f003 fd20 	bl	800730c <osDelay>
	for(;;)
 80038cc:	e7f5      	b.n	80038ba <StartBluetooth+0x6>
	...

080038d0 <sequencia1Buzzer>:
		osDelay(100);
	}
	/* USER CODE END StartTaskBuzzer */
}

void sequencia1Buzzer(void){
 80038d0:	b538      	push	{r3, r4, r5, lr}
	M_BUZZER_ON
 80038d2:	4d15      	ldr	r5, [pc, #84]	; (8003928 <sequencia1Buzzer+0x58>)
	onDigital(&PrimitiveStates.Lampada);
 80038d4:	4c15      	ldr	r4, [pc, #84]	; (800392c <sequencia1Buzzer+0x5c>)
	M_BUZZER_ON
 80038d6:	210c      	movs	r1, #12
 80038d8:	4628      	mov	r0, r5
 80038da:	f002 fff5 	bl	80068c8 <HAL_TIM_PWM_Start>
	onDigital(&PrimitiveStates.Lampada);
 80038de:	4620      	mov	r0, r4
 80038e0:	f7fe f9aa 	bl	8001c38 <onDigital>
	osDelay(300);
 80038e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80038e8:	f003 fd10 	bl	800730c <osDelay>
	M_BUZZER_OFF
 80038ec:	210c      	movs	r1, #12
 80038ee:	4628      	mov	r0, r5
 80038f0:	f003 f826 	bl	8006940 <HAL_TIM_PWM_Stop>
	offDigital(&PrimitiveStates.Lampada);
 80038f4:	4620      	mov	r0, r4
 80038f6:	f7fe f9a9 	bl	8001c4c <offDigital>
	osDelay(50);
 80038fa:	2032      	movs	r0, #50	; 0x32
 80038fc:	f003 fd06 	bl	800730c <osDelay>
	M_BUZZER_ON
 8003900:	210c      	movs	r1, #12
 8003902:	4628      	mov	r0, r5
 8003904:	f002 ffe0 	bl	80068c8 <HAL_TIM_PWM_Start>
	onDigital(&PrimitiveStates.Lampada);
 8003908:	4620      	mov	r0, r4
 800390a:	f7fe f995 	bl	8001c38 <onDigital>
	osDelay(250);
 800390e:	20fa      	movs	r0, #250	; 0xfa
 8003910:	f003 fcfc 	bl	800730c <osDelay>
	M_BUZZER_OFF
 8003914:	4628      	mov	r0, r5
 8003916:	210c      	movs	r1, #12
 8003918:	f003 f812 	bl	8006940 <HAL_TIM_PWM_Stop>
	offDigital(&PrimitiveStates.Lampada);
 800391c:	4620      	mov	r0, r4

}
 800391e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	offDigital(&PrimitiveStates.Lampada);
 8003922:	f7fe b993 	b.w	8001c4c <offDigital>
 8003926:	bf00      	nop
 8003928:	2000116c 	.word	0x2000116c
 800392c:	20000844 	.word	0x20000844

08003930 <StartBuzzer>:
{
 8003930:	b508      	push	{r3, lr}
		osThreadSuspend(TaskBuzzerHandle);
 8003932:	4c06      	ldr	r4, [pc, #24]	; (800394c <StartBuzzer+0x1c>)
		sequencia1Buzzer();
 8003934:	f7ff ffcc 	bl	80038d0 <sequencia1Buzzer>
		osThreadSuspend(TaskBuzzerHandle);
 8003938:	6820      	ldr	r0, [r4, #0]
 800393a:	f003 fe14 	bl	8007566 <osThreadSuspend>
		osThreadYield();
 800393e:	f003 fcd9 	bl	80072f4 <osThreadYield>
		osDelay(100);
 8003942:	2064      	movs	r0, #100	; 0x64
 8003944:	f003 fce2 	bl	800730c <osDelay>
	for(;;)
 8003948:	e7f4      	b.n	8003934 <StartBuzzer+0x4>
 800394a:	bf00      	nop
 800394c:	20000c0c 	.word	0x20000c0c

08003950 <initEeprom>:
		osThreadYield();
		osDelay(500);
	}
}

void initEeprom(void){
 8003950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//	taskENTER_CRITICAL();

	//inicializacao ad eeprom
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 8003954:	4d8e      	ldr	r5, [pc, #568]	; (8003b90 <initEeprom+0x240>)
void initEeprom(void){
 8003956:	b087      	sub	sp, #28
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 8003958:	4628      	mov	r0, r5
 800395a:	4a8e      	ldr	r2, [pc, #568]	; (8003b94 <initEeprom+0x244>)
 800395c:	498e      	ldr	r1, [pc, #568]	; (8003b98 <initEeprom+0x248>)
 800395e:	f7fd ff42 	bl	80017e6 <EepromInit>

	//criacao dos objetos variaveis
	EepromAddVar(&eeprom, &tempoDelayLuz, 			"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA8BITS,	5,		45,		250		,(uint32_t *)&PrimitiveStates.Lampada.limitOn);
 8003962:	f04f 0a01 	mov.w	sl, #1
 8003966:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
 800396a:	f04f 0905 	mov.w	r9, #5
 800396e:	23fa      	movs	r3, #250	; 0xfa
	EepromAddVar(&eeprom, &horimetroHoras, 			"addrHORIMETRO", 		addrHORIMETRO,		DATA16BITS,	0,		0,		0		,(uint32_t *)&Calendario.Horimetro_horas);
 8003970:	2400      	movs	r4, #0
 8003972:	f04f 0802 	mov.w	r8, #2
	EepromAddVar(&eeprom, &tempoDelayLuz, 			"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA8BITS,	5,		45,		250		,(uint32_t *)&PrimitiveStates.Lampada.limitOn);
 8003976:	4e89      	ldr	r6, [pc, #548]	; (8003b9c <initEeprom+0x24c>)
	EepromAddVar(&eeprom, &horimetroHoras, 			"addrHORIMETRO", 		addrHORIMETRO,		DATA16BITS,	0,		0,		0		,(uint32_t *)&Calendario.Horimetro_horas);
 8003978:	4f89      	ldr	r7, [pc, #548]	; (8003ba0 <initEeprom+0x250>)
	EepromAddVar(&eeprom, &tempoDelayLuz, 			"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA8BITS,	5,		45,		250		,(uint32_t *)&PrimitiveStates.Lampada.limitOn);
 800397a:	e9cd a900 	strd	sl, r9, [sp]
 800397e:	e9cd b302 	strd	fp, r3, [sp, #8]
 8003982:	9604      	str	r6, [sp, #16]
 8003984:	2304      	movs	r3, #4
 8003986:	4628      	mov	r0, r5
 8003988:	4a86      	ldr	r2, [pc, #536]	; (8003ba4 <initEeprom+0x254>)
 800398a:	4987      	ldr	r1, [pc, #540]	; (8003ba8 <initEeprom+0x258>)
 800398c:	f7fd ff32 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &horimetroHoras, 			"addrHORIMETRO", 		addrHORIMETRO,		DATA16BITS,	0,		0,		0		,(uint32_t *)&Calendario.Horimetro_horas);
 8003990:	464b      	mov	r3, r9
 8003992:	9704      	str	r7, [sp, #16]
 8003994:	4628      	mov	r0, r5
 8003996:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800399a:	4a84      	ldr	r2, [pc, #528]	; (8003bac <initEeprom+0x25c>)
 800399c:	4984      	ldr	r1, [pc, #528]	; (8003bb0 <initEeprom+0x260>)
 800399e:	9401      	str	r4, [sp, #4]
 80039a0:	f8cd 8000 	str.w	r8, [sp]
 80039a4:	f7fd ff26 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &horimetroMinutos, 		"addrMINUTIMETRO", 		addrMINUTIMETRO,	DATA8BITS,	0,		0,		0		,(uint32_t *)&Calendario.Horimetro_parcial_min);
 80039a8:	eb07 0308 	add.w	r3, r7, r8
 80039ac:	e9cd 4303 	strd	r4, r3, [sp, #12]
 80039b0:	f8cd a000 	str.w	sl, [sp]
 80039b4:	2306      	movs	r3, #6
 80039b6:	4628      	mov	r0, r5
 80039b8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80039bc:	4a7d      	ldr	r2, [pc, #500]	; (8003bb4 <initEeprom+0x264>)
 80039be:	497e      	ldr	r1, [pc, #504]	; (8003bb8 <initEeprom+0x268>)
 80039c0:	f7fd ff18 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoDia, 			"addrINST_DIA", 		addrINST_DIA,		DATA8BITS,	1,		0,		31		,(uint32_t *)&Calendario.Data_instalacao.Date);
 80039c4:	1ebb      	subs	r3, r7, #2
 80039c6:	9304      	str	r3, [sp, #16]
 80039c8:	231f      	movs	r3, #31
 80039ca:	e9cd aa00 	strd	sl, sl, [sp]
 80039ce:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80039d2:	4628      	mov	r0, r5
 80039d4:	230c      	movs	r3, #12
 80039d6:	4a79      	ldr	r2, [pc, #484]	; (8003bbc <initEeprom+0x26c>)
 80039d8:	4979      	ldr	r1, [pc, #484]	; (8003bc0 <initEeprom+0x270>)
 80039da:	f7fd ff0b 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoMes, 			"addrINST_MES", 		addrINST_MES,		DATA8BITS,	1,		1,		12		,(uint32_t *)&Calendario.Data_instalacao.Month);
 80039de:	1efb      	subs	r3, r7, #3
 80039e0:	9304      	str	r3, [sp, #16]
 80039e2:	230c      	movs	r3, #12
	EepromAddVar(&eeprom, &instalacaoAno, 			"addrINST_ANO", 		addrINST_ANO,		DATA8BITS,	23,		23,		99		,(uint32_t *)&Calendario.Data_instalacao.Year);
 80039e4:	f04f 0917 	mov.w	r9, #23
	EepromAddVar(&eeprom, &instalacaoMes, 			"addrINST_MES", 		addrINST_MES,		DATA8BITS,	1,		1,		12		,(uint32_t *)&Calendario.Data_instalacao.Month);
 80039e8:	e9cd a302 	strd	sl, r3, [sp, #8]
 80039ec:	e9cd aa00 	strd	sl, sl, [sp]
 80039f0:	230d      	movs	r3, #13
 80039f2:	4628      	mov	r0, r5
 80039f4:	4a73      	ldr	r2, [pc, #460]	; (8003bc4 <initEeprom+0x274>)
 80039f6:	4974      	ldr	r1, [pc, #464]	; (8003bc8 <initEeprom+0x278>)
 80039f8:	f7fd fefc 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoAno, 			"addrINST_ANO", 		addrINST_ANO,		DATA8BITS,	23,		23,		99		,(uint32_t *)&Calendario.Data_instalacao.Year);
 80039fc:	1e7b      	subs	r3, r7, #1
 80039fe:	9304      	str	r3, [sp, #16]
 8003a00:	2363      	movs	r3, #99	; 0x63
 8003a02:	e9cd a900 	strd	sl, r9, [sp]
	EepromAddVar(&eeprom, &totalCiclos, 			"addrTOTAL_GERAL", 		addrTOTAL_GERAL,	DATA16BITS,	0,		0,		0		,(uint32_t *)&Calendario.TotalCiclos);
	EepromAddVar(&eeprom, &ContTetoMax, 			"addrCONT_MAX_TETO", 	addrCONT_MAX_TETO,	DATA16BITS,	0,		0,		700		,(uint32_t *)&Calendario.ContMaxTeto);
 8003a06:	f44f 7a2f 	mov.w	sl, #700	; 0x2bc
	EepromAddVar(&eeprom, &instalacaoAno, 			"addrINST_ANO", 		addrINST_ANO,		DATA8BITS,	23,		23,		99		,(uint32_t *)&Calendario.Data_instalacao.Year);
 8003a0a:	e9cd 9302 	strd	r9, r3, [sp, #8]
 8003a0e:	4628      	mov	r0, r5
 8003a10:	230e      	movs	r3, #14
 8003a12:	4a6e      	ldr	r2, [pc, #440]	; (8003bcc <initEeprom+0x27c>)
 8003a14:	496e      	ldr	r1, [pc, #440]	; (8003bd0 <initEeprom+0x280>)
 8003a16:	f7fd feed 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &totalCiclos, 			"addrTOTAL_GERAL", 		addrTOTAL_GERAL,	DATA16BITS,	0,		0,		0		,(uint32_t *)&Calendario.TotalCiclos);
 8003a1a:	1d3b      	adds	r3, r7, #4
 8003a1c:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003a20:	4628      	mov	r0, r5
 8003a22:	230f      	movs	r3, #15
 8003a24:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003a28:	4a6a      	ldr	r2, [pc, #424]	; (8003bd4 <initEeprom+0x284>)
 8003a2a:	496b      	ldr	r1, [pc, #428]	; (8003bd8 <initEeprom+0x288>)
 8003a2c:	f8cd 8000 	str.w	r8, [sp]
 8003a30:	f7fd fee0 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &ContTetoMax, 			"addrCONT_MAX_TETO", 	addrCONT_MAX_TETO,	DATA16BITS,	0,		0,		700		,(uint32_t *)&Calendario.ContMaxTeto);
 8003a34:	1dbb      	adds	r3, r7, #6
 8003a36:	e9cd 4a02 	strd	r4, sl, [sp, #8]
 8003a3a:	9304      	str	r3, [sp, #16]
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	2313      	movs	r3, #19
 8003a40:	e9cd 8400 	strd	r8, r4, [sp]
 8003a44:	4a65      	ldr	r2, [pc, #404]	; (8003bdc <initEeprom+0x28c>)
 8003a46:	4966      	ldr	r1, [pc, #408]	; (8003be0 <initEeprom+0x290>)
	EepromAddVar(&eeprom, &ContLastroMax, 			"addrCONT_MAX_LASTRO", 	addrCONT_MAX_LASTRO,DATA16BITS,	0,		0,		700		,(uint32_t *)&Calendario.ContMaxLastro);
 8003a48:	3708      	adds	r7, #8
	EepromAddVar(&eeprom, &ContTetoMax, 			"addrCONT_MAX_TETO", 	addrCONT_MAX_TETO,	DATA16BITS,	0,		0,		700		,(uint32_t *)&Calendario.ContMaxTeto);
 8003a4a:	f7fd fed3 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &ContLastroMax, 			"addrCONT_MAX_LASTRO", 	addrCONT_MAX_LASTRO,DATA16BITS,	0,		0,		700		,(uint32_t *)&Calendario.ContMaxLastro);
 8003a4e:	e9cd a703 	strd	sl, r7, [sp, #12]

	EepromAddVar(&eeprom, &hitereseStateTeto, 		"addrTETO_HIST", 		addrTETO_HIST,		DATA16BITS,	0,		STD_HISTERESE,0	,(uint32_t *)&PrimitiveStates.Teto.histerese);
 8003a52:	f04f 0a03 	mov.w	sl, #3
	EepromAddVar(&eeprom, &ContLastroMax, 			"addrCONT_MAX_LASTRO", 	addrCONT_MAX_LASTRO,DATA16BITS,	0,		0,		700		,(uint32_t *)&Calendario.ContMaxLastro);
 8003a56:	2315      	movs	r3, #21
 8003a58:	4628      	mov	r0, r5
 8003a5a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003a5e:	4a61      	ldr	r2, [pc, #388]	; (8003be4 <initEeprom+0x294>)
 8003a60:	4961      	ldr	r1, [pc, #388]	; (8003be8 <initEeprom+0x298>)
 8003a62:	f8cd 8000 	str.w	r8, [sp]
 8003a66:	f7fd fec5 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &hitereseStateTeto, 		"addrTETO_HIST", 		addrTETO_HIST,		DATA16BITS,	0,		STD_HISTERESE,0	,(uint32_t *)&PrimitiveStates.Teto.histerese);
 8003a6a:	f106 03ae 	add.w	r3, r6, #174	; 0xae
 8003a6e:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003a72:	4628      	mov	r0, r5
 8003a74:	2329      	movs	r3, #41	; 0x29
 8003a76:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8003a7a:	4a5c      	ldr	r2, [pc, #368]	; (8003bec <initEeprom+0x29c>)
 8003a7c:	495c      	ldr	r1, [pc, #368]	; (8003bf0 <initEeprom+0x2a0>)
 8003a7e:	f8cd 8000 	str.w	r8, [sp]
 8003a82:	f7fd feb7 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &kPTeto, 					"addrTETO_KP", 			addrTETO_KP,		DATADOUBLE,	0,		STD_KP		,0	,(uint32_t *)&PrimitiveStates.Teto.kp);
 8003a86:	f106 0376 	add.w	r3, r6, #118	; 0x76
 8003a8a:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003a8e:	231e      	movs	r3, #30
 8003a90:	2708      	movs	r7, #8
 8003a92:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8003a96:	464b      	mov	r3, r9
	EepromAddVar(&eeprom, &kITeto, 					"addrTETO_KI", 			addrTETO_KI,		DATADOUBLE,	0,		STD_KI		,0	,(uint32_t *)&PrimitiveStates.Teto.ki);
	EepromAddVar(&eeprom, &kDTeto, 					"addrTETO_KD", 			addrTETO_KD,		DATADOUBLE,	0,		STD_KD		,0	,(uint32_t *)&PrimitiveStates.Teto.kd);
	EepromAddVar(&eeprom, &limiteTeto, 				"addrTETO_LIMIT", 		addrTETO_LIMIT,		DATADOUBLE,	0,		STD_LIMITE	,0	,(uint32_t *)&PrimitiveStates.Teto.limite);
 8003a98:	f44f 79e1 	mov.w	r9, #450	; 0x1c2
	EepromAddVar(&eeprom, &kPTeto, 					"addrTETO_KP", 			addrTETO_KP,		DATADOUBLE,	0,		STD_KP		,0	,(uint32_t *)&PrimitiveStates.Teto.kp);
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	4a55      	ldr	r2, [pc, #340]	; (8003bf4 <initEeprom+0x2a4>)
 8003aa0:	4955      	ldr	r1, [pc, #340]	; (8003bf8 <initEeprom+0x2a8>)
 8003aa2:	9700      	str	r7, [sp, #0]
 8003aa4:	f7fd fea6 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &kITeto, 					"addrTETO_KI", 			addrTETO_KI,		DATADOUBLE,	0,		STD_KI		,0	,(uint32_t *)&PrimitiveStates.Teto.ki);
 8003aa8:	f106 037e 	add.w	r3, r6, #126	; 0x7e
 8003aac:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	2321      	movs	r3, #33	; 0x21
 8003ab4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003ab8:	4a50      	ldr	r2, [pc, #320]	; (8003bfc <initEeprom+0x2ac>)
 8003aba:	4951      	ldr	r1, [pc, #324]	; (8003c00 <initEeprom+0x2b0>)
 8003abc:	9700      	str	r7, [sp, #0]
 8003abe:	f7fd fe99 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &kDTeto, 					"addrTETO_KD", 			addrTETO_KD,		DATADOUBLE,	0,		STD_KD		,0	,(uint32_t *)&PrimitiveStates.Teto.kd);
 8003ac2:	f106 0386 	add.w	r3, r6, #134	; 0x86
 8003ac6:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003aca:	4628      	mov	r0, r5
 8003acc:	2325      	movs	r3, #37	; 0x25
 8003ace:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003ad2:	4a4c      	ldr	r2, [pc, #304]	; (8003c04 <initEeprom+0x2b4>)
 8003ad4:	494c      	ldr	r1, [pc, #304]	; (8003c08 <initEeprom+0x2b8>)
 8003ad6:	9700      	str	r7, [sp, #0]
 8003ad8:	f7fd fe8c 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &limiteTeto, 				"addrTETO_LIMIT", 		addrTETO_LIMIT,		DATADOUBLE,	0,		STD_LIMITE	,0	,(uint32_t *)&PrimitiveStates.Teto.limite);
 8003adc:	f106 03a6 	add.w	r3, r6, #166	; 0xa6
 8003ae0:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	465b      	mov	r3, fp
 8003ae8:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8003aec:	4a47      	ldr	r2, [pc, #284]	; (8003c0c <initEeprom+0x2bc>)
 8003aee:	4948      	ldr	r1, [pc, #288]	; (8003c10 <initEeprom+0x2c0>)
 8003af0:	9700      	str	r7, [sp, #0]
 8003af2:	f7fd fe7f 	bl	80017f4 <EepromAddVar>

	EepromAddVar(&eeprom, &hitereseStateLastro,		"addrLASTRO_HIST", 		addrLASTRO_HIST,	DATA16BITS,	0,		STD_HISTERESE,0	,(uint32_t *)&PrimitiveStates.Lastro.histerese);
 8003af6:	f106 03fe 	add.w	r3, r6, #254	; 0xfe
 8003afa:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003afe:	4628      	mov	r0, r5
 8003b00:	2341      	movs	r3, #65	; 0x41
 8003b02:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8003b06:	4a43      	ldr	r2, [pc, #268]	; (8003c14 <initEeprom+0x2c4>)
 8003b08:	4943      	ldr	r1, [pc, #268]	; (8003c18 <initEeprom+0x2c8>)
 8003b0a:	f8cd 8000 	str.w	r8, [sp]
 8003b0e:	f7fd fe71 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &kPLastro,				"addrLASTRO_KP", 		addrLASTRO_KP,		DATADOUBLE,	0,		STD_KP		,0	,(uint32_t *)&PrimitiveStates.Lastro.kp);
 8003b12:	f106 03c6 	add.w	r3, r6, #198	; 0xc6
 8003b16:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003b1a:	231e      	movs	r3, #30
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8003b22:	4a3e      	ldr	r2, [pc, #248]	; (8003c1c <initEeprom+0x2cc>)
 8003b24:	2331      	movs	r3, #49	; 0x31
 8003b26:	493e      	ldr	r1, [pc, #248]	; (8003c20 <initEeprom+0x2d0>)
 8003b28:	9700      	str	r7, [sp, #0]
 8003b2a:	f7fd fe63 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &kILastro,				"addrLASTRO_KI", 		addrLASTRO_KI,		DATADOUBLE,	0,		STD_KI		,0	,(uint32_t *)&PrimitiveStates.Lastro.ki);
 8003b2e:	f106 03ce 	add.w	r3, r6, #206	; 0xce
 8003b32:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003b36:	4628      	mov	r0, r5
 8003b38:	2335      	movs	r3, #53	; 0x35
 8003b3a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003b3e:	4a39      	ldr	r2, [pc, #228]	; (8003c24 <initEeprom+0x2d4>)
 8003b40:	4939      	ldr	r1, [pc, #228]	; (8003c28 <initEeprom+0x2d8>)
 8003b42:	9700      	str	r7, [sp, #0]
 8003b44:	f7fd fe56 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &kDLastro,				"addrLASTRO_KD", 		addrLASTRO_KD,		DATADOUBLE,	0,		STD_KD		,0	,(uint32_t *)&PrimitiveStates.Lastro.kd);
 8003b48:	f106 03d6 	add.w	r3, r6, #214	; 0xd6
 8003b4c:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003b50:	4628      	mov	r0, r5
 8003b52:	2339      	movs	r3, #57	; 0x39
 8003b54:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003b58:	4a34      	ldr	r2, [pc, #208]	; (8003c2c <initEeprom+0x2dc>)
 8003b5a:	4935      	ldr	r1, [pc, #212]	; (8003c30 <initEeprom+0x2e0>)
 8003b5c:	9700      	str	r7, [sp, #0]
	EepromAddVar(&eeprom, &limiteLastro,			"addrLASTRO_LIMIT", 	addrLASTRO_LIMIT,	DATADOUBLE,	0,		STD_LIMITE	,0	,(uint32_t *)&PrimitiveStates.Lastro.limite);
 8003b5e:	36f6      	adds	r6, #246	; 0xf6
	EepromAddVar(&eeprom, &kDLastro,				"addrLASTRO_KD", 		addrLASTRO_KD,		DATADOUBLE,	0,		STD_KD		,0	,(uint32_t *)&PrimitiveStates.Lastro.kd);
 8003b60:	f7fd fe48 	bl	80017f4 <EepromAddVar>
	EepromAddVar(&eeprom, &limiteLastro,			"addrLASTRO_LIMIT", 	addrLASTRO_LIMIT,	DATADOUBLE,	0,		STD_LIMITE	,0	,(uint32_t *)&PrimitiveStates.Lastro.limite);
 8003b64:	2345      	movs	r3, #69	; 0x45
 8003b66:	4a33      	ldr	r2, [pc, #204]	; (8003c34 <initEeprom+0x2e4>)
 8003b68:	4933      	ldr	r1, [pc, #204]	; (8003c38 <initEeprom+0x2e8>)
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	e9cd 4603 	strd	r4, r6, [sp, #12]
 8003b70:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8003b74:	9700      	str	r7, [sp, #0]
 8003b76:	f7fd fe3d 	bl	80017f4 <EepromAddVar>

//	RestauraPadraoTudo(&eeprom);
	//faz o download dos objetos
	EepromDownloadValores(&eeprom);
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f7fd ff8e 	bl	8001a9c <EepromDownloadValores>

//	taskEXIT_CRITICAL();
	osThreadResume(TaskTemperaturaHandle);
 8003b80:	4b2e      	ldr	r3, [pc, #184]	; (8003c3c <initEeprom+0x2ec>)
 8003b82:	6818      	ldr	r0, [r3, #0]
}
 8003b84:	b007      	add	sp, #28
 8003b86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	osThreadResume(TaskTemperaturaHandle);
 8003b8a:	f003 bcf1 	b.w	8007570 <osThreadResume>
 8003b8e:	bf00      	nop
 8003b90:	200013c0 	.word	0x200013c0
 8003b94:	2000080c 	.word	0x2000080c
 8003b98:	20001104 	.word	0x20001104
 8003b9c:	20000852 	.word	0x20000852
 8003ba0:	200007fc 	.word	0x200007fc
 8003ba4:	0800a453 	.word	0x0800a453
 8003ba8:	20001714 	.word	0x20001714
 8003bac:	0800a461 	.word	0x0800a461
 8003bb0:	200014d8 	.word	0x200014d8
 8003bb4:	0800a46f 	.word	0x0800a46f
 8003bb8:	20001504 	.word	0x20001504
 8003bbc:	0800a47f 	.word	0x0800a47f
 8003bc0:	2000155c 	.word	0x2000155c
 8003bc4:	0800a48c 	.word	0x0800a48c
 8003bc8:	20001588 	.word	0x20001588
 8003bcc:	0800a499 	.word	0x0800a499
 8003bd0:	20001530 	.word	0x20001530
 8003bd4:	0800a4a6 	.word	0x0800a4a6
 8003bd8:	20001744 	.word	0x20001744
 8003bdc:	0800a4b6 	.word	0x0800a4b6
 8003be0:	20001390 	.word	0x20001390
 8003be4:	0800a4c8 	.word	0x0800a4c8
 8003be8:	20001364 	.word	0x20001364
 8003bec:	0800a4dc 	.word	0x0800a4dc
 8003bf0:	200014ac 	.word	0x200014ac
 8003bf4:	0800a4ea 	.word	0x0800a4ea
 8003bf8:	20001690 	.word	0x20001690
 8003bfc:	0800a4f6 	.word	0x0800a4f6
 8003c00:	20001638 	.word	0x20001638
 8003c04:	0800a502 	.word	0x0800a502
 8003c08:	200015e0 	.word	0x200015e0
 8003c0c:	0800a50e 	.word	0x0800a50e
 8003c10:	200016e8 	.word	0x200016e8
 8003c14:	0800a51d 	.word	0x0800a51d
 8003c18:	20001480 	.word	0x20001480
 8003c1c:	0800a52d 	.word	0x0800a52d
 8003c20:	20001664 	.word	0x20001664
 8003c24:	0800a53b 	.word	0x0800a53b
 8003c28:	2000160c 	.word	0x2000160c
 8003c2c:	0800a549 	.word	0x0800a549
 8003c30:	200015b4 	.word	0x200015b4
 8003c34:	0800a557 	.word	0x0800a557
 8003c38:	200016bc 	.word	0x200016bc
 8003c3c:	20000c14 	.word	0x20000c14

08003c40 <processaEeprom>:

void processaEeprom(void){
 8003c40:	b510      	push	{r4, lr}
	osEvent  evt;

	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 8003c42:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <processaEeprom+0x1b4>)
void processaEeprom(void){
 8003c44:	b088      	sub	sp, #32
	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 8003c46:	6819      	ldr	r1, [r3, #0]
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4c:	a805      	add	r0, sp, #20
 8003c4e:	f003 fc50 	bl	80074f2 <osMessageGet>
	if (evt.status == osEventMessage) {
 8003c52:	9b05      	ldr	r3, [sp, #20]
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	f040 80cb 	bne.w	8003df0 <processaEeprom+0x1b0>

		switch ((unsigned int)evt.value.p) {
 8003c5a:	9b06      	ldr	r3, [sp, #24]
 8003c5c:	2b0a      	cmp	r3, #10
 8003c5e:	f200 80c7 	bhi.w	8003df0 <processaEeprom+0x1b0>
 8003c62:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003c66:	0017      	.short	0x0017
 8003c68:	004f002b 	.word	0x004f002b
 8003c6c:	003b00c5 	.word	0x003b00c5
 8003c70:	0067005f 	.word	0x0067005f
 8003c74:	006a000b 	.word	0x006a000b
 8003c78:	00780071 	.word	0x00780071

		case CEepromNewCile:
			Calendario.TotalCiclos+=1;
 8003c7c:	4a5e      	ldr	r2, [pc, #376]	; (8003df8 <processaEeprom+0x1b8>)
			EepromSetVar(&eeprom, &totalCiclos, 	0);
 8003c7e:	495f      	ldr	r1, [pc, #380]	; (8003dfc <processaEeprom+0x1bc>)
			Calendario.TotalCiclos+=1;
 8003c80:	8913      	ldrh	r3, [r2, #8]
 8003c82:	3301      	adds	r3, #1
 8003c84:	8113      	strh	r3, [r2, #8]
			EepromSetVar(&eeprom, &totalCiclos, 	0);
 8003c86:	2200      	movs	r2, #0
			Calendario.ContMaxTeto+=1;
			EepromSetVar(&eeprom, &ContTetoMax, 	0);
			break;
		case CEepromTempMaxLastroAgain:
			Calendario.ContMaxLastro+=1;
			EepromSetVar(&eeprom, &ContLastroMax, 	0);
 8003c88:	485d      	ldr	r0, [pc, #372]	; (8003e00 <processaEeprom+0x1c0>)
			break;
		default:
			break;
		}
	}
}
 8003c8a:	b008      	add	sp, #32
 8003c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			EepromSetVar(&eeprom, &ContLastroMax, 	0);
 8003c90:	f7fd bde8 	b.w	8001864 <EepromSetVar>
			if(Calendario.Horimetro_parcial_min<59){
 8003c94:	4b58      	ldr	r3, [pc, #352]	; (8003df8 <processaEeprom+0x1b8>)
			EepromSetVar(&eeprom, &horimetroHoras, 		0);
 8003c96:	495b      	ldr	r1, [pc, #364]	; (8003e04 <processaEeprom+0x1c4>)
			if(Calendario.Horimetro_parcial_min<59){
 8003c98:	799a      	ldrb	r2, [r3, #6]
			EepromSetVar(&eeprom, &horimetroHoras, 		0);
 8003c9a:	4859      	ldr	r0, [pc, #356]	; (8003e00 <processaEeprom+0x1c0>)
			if(Calendario.Horimetro_parcial_min<59){
 8003c9c:	2a3a      	cmp	r2, #58	; 0x3a
				Calendario.Horimetro_parcial_min=0;
 8003c9e:	bf83      	ittte	hi
 8003ca0:	2200      	movhi	r2, #0
 8003ca2:	719a      	strbhi	r2, [r3, #6]
				Calendario.Horimetro_horas++;
 8003ca4:	889a      	ldrhhi	r2, [r3, #4]
				Calendario.Horimetro_parcial_min++;
 8003ca6:	3201      	addls	r2, #1
				Calendario.Horimetro_horas++;
 8003ca8:	bf8a      	itet	hi
 8003caa:	3201      	addhi	r2, #1
				Calendario.Horimetro_parcial_min++;
 8003cac:	719a      	strbls	r2, [r3, #6]
				Calendario.Horimetro_horas++;
 8003cae:	809a      	strhhi	r2, [r3, #4]
			EepromSetVar(&eeprom, &horimetroHoras, 		0);
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f7fd fdd7 	bl	8001864 <EepromSetVar>
			EepromSetVar(&eeprom, &horimetroMinutos, 	0);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	4953      	ldr	r1, [pc, #332]	; (8003e08 <processaEeprom+0x1c8>)
 8003cba:	e7e5      	b.n	8003c88 <processaEeprom+0x48>
			EepromSetVar(&eeprom, &instalacaoDia, 	datetoUpdate.Date);
 8003cbc:	4c53      	ldr	r4, [pc, #332]	; (8003e0c <processaEeprom+0x1cc>)
 8003cbe:	4954      	ldr	r1, [pc, #336]	; (8003e10 <processaEeprom+0x1d0>)
 8003cc0:	78a2      	ldrb	r2, [r4, #2]
 8003cc2:	484f      	ldr	r0, [pc, #316]	; (8003e00 <processaEeprom+0x1c0>)
 8003cc4:	f7fd fdce 	bl	8001864 <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoMes, 	datetoUpdate.Month);
 8003cc8:	7862      	ldrb	r2, [r4, #1]
 8003cca:	4952      	ldr	r1, [pc, #328]	; (8003e14 <processaEeprom+0x1d4>)
 8003ccc:	484c      	ldr	r0, [pc, #304]	; (8003e00 <processaEeprom+0x1c0>)
 8003cce:	f7fd fdc9 	bl	8001864 <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoAno, 	datetoUpdate.Year);
 8003cd2:	78e2      	ldrb	r2, [r4, #3]
 8003cd4:	4950      	ldr	r1, [pc, #320]	; (8003e18 <processaEeprom+0x1d8>)
 8003cd6:	484a      	ldr	r0, [pc, #296]	; (8003e00 <processaEeprom+0x1c0>)
 8003cd8:	f7fd fdc4 	bl	8001864 <EepromSetVar>
			if (HAL_RTC_SetTime(&hrtc, &timeToUpdate, RTC_FORMAT_BIN) != HAL_OK){
 8003cdc:	2200      	movs	r2, #0
 8003cde:	494f      	ldr	r1, [pc, #316]	; (8003e1c <processaEeprom+0x1dc>)
 8003ce0:	484f      	ldr	r0, [pc, #316]	; (8003e20 <processaEeprom+0x1e0>)
 8003ce2:	f002 f98a 	bl	8005ffa <HAL_RTC_SetTime>
 8003ce6:	b108      	cbz	r0, 8003cec <processaEeprom+0xac>
				Error_Handler();
 8003ce8:	f7fe fd3a 	bl	8002760 <Error_Handler>
			if (HAL_RTC_SetDate(&hrtc, &datetoUpdate, RTC_FORMAT_BIN) != HAL_OK){
 8003cec:	2200      	movs	r2, #0
 8003cee:	4947      	ldr	r1, [pc, #284]	; (8003e0c <processaEeprom+0x1cc>)
 8003cf0:	484b      	ldr	r0, [pc, #300]	; (8003e20 <processaEeprom+0x1e0>)
 8003cf2:	f002 f9d3 	bl	800609c <HAL_RTC_SetDate>
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	d07a      	beq.n	8003df0 <processaEeprom+0x1b0>
}
 8003cfa:	b008      	add	sp, #32
 8003cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				Error_Handler();
 8003d00:	f7fe bd2e 	b.w	8002760 <Error_Handler>
			taskENTER_CRITICAL();
 8003d04:	f005 f9fe 	bl	8009104 <vPortEnterCritical>
			RestauraPadraoTudo(&eeprom);
 8003d08:	483d      	ldr	r0, [pc, #244]	; (8003e00 <processaEeprom+0x1c0>)
 8003d0a:	f7fd ff4d 	bl	8001ba8 <RestauraPadraoTudo>
			taskEXIT_CRITICAL();
 8003d0e:	f005 fa19 	bl	8009144 <vPortExitCritical>
			osMessagePut(FilaTXBluetoothHandle, TX_RESETADO_OK, 0);
 8003d12:	2200      	movs	r2, #0
 8003d14:	2130      	movs	r1, #48	; 0x30
 8003d16:	4b43      	ldr	r3, [pc, #268]	; (8003e24 <processaEeprom+0x1e4>)
 8003d18:	6818      	ldr	r0, [r3, #0]
}
 8003d1a:	b008      	add	sp, #32
 8003d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			osMessagePut(FilaTXBluetoothHandle, TX_RESETADO_OK, 0);
 8003d20:	f003 bbbf 	b.w	80074a2 <osMessagePut>
			EepromSetVar(&eeprom, &limiteTeto, 	0);
 8003d24:	2200      	movs	r2, #0
 8003d26:	4940      	ldr	r1, [pc, #256]	; (8003e28 <processaEeprom+0x1e8>)
 8003d28:	4835      	ldr	r0, [pc, #212]	; (8003e00 <processaEeprom+0x1c0>)
 8003d2a:	f7fd fd9b 	bl	8001864 <EepromSetVar>
			EepromSetVar(&eeprom, &limiteLastro, 	0);
 8003d2e:	2200      	movs	r2, #0
 8003d30:	493e      	ldr	r1, [pc, #248]	; (8003e2c <processaEeprom+0x1ec>)
 8003d32:	e7a9      	b.n	8003c88 <processaEeprom+0x48>
			EepromSetVar(&eeprom, &tempoDelayLuz, 	0);
 8003d34:	2200      	movs	r2, #0
 8003d36:	493e      	ldr	r1, [pc, #248]	; (8003e30 <processaEeprom+0x1f0>)
 8003d38:	e7a6      	b.n	8003c88 <processaEeprom+0x48>
			Calendario.ContMaxTeto+=1;
 8003d3a:	4a2f      	ldr	r2, [pc, #188]	; (8003df8 <processaEeprom+0x1b8>)
			EepromSetVar(&eeprom, &ContTetoMax, 	0);
 8003d3c:	493d      	ldr	r1, [pc, #244]	; (8003e34 <processaEeprom+0x1f4>)
			Calendario.ContMaxTeto+=1;
 8003d3e:	8953      	ldrh	r3, [r2, #10]
 8003d40:	3301      	adds	r3, #1
 8003d42:	8153      	strh	r3, [r2, #10]
			EepromSetVar(&eeprom, &ContTetoMax, 	0);
 8003d44:	2200      	movs	r2, #0
 8003d46:	e79f      	b.n	8003c88 <processaEeprom+0x48>
			Calendario.ContMaxLastro+=1;
 8003d48:	4a2b      	ldr	r2, [pc, #172]	; (8003df8 <processaEeprom+0x1b8>)
			EepromSetVar(&eeprom, &ContLastroMax, 	0);
 8003d4a:	493b      	ldr	r1, [pc, #236]	; (8003e38 <processaEeprom+0x1f8>)
			Calendario.ContMaxLastro+=1;
 8003d4c:	8993      	ldrh	r3, [r2, #12]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	8193      	strh	r3, [r2, #12]
			EepromSetVar(&eeprom, &ContLastroMax, 	0);
 8003d52:	2200      	movs	r2, #0
 8003d54:	e798      	b.n	8003c88 <processaEeprom+0x48>
			EepromSetVar(&eeprom, &hitereseStateTeto, 	0);
 8003d56:	2200      	movs	r2, #0
 8003d58:	4938      	ldr	r1, [pc, #224]	; (8003e3c <processaEeprom+0x1fc>)
 8003d5a:	4829      	ldr	r0, [pc, #164]	; (8003e00 <processaEeprom+0x1c0>)
 8003d5c:	f7fd fd82 	bl	8001864 <EepromSetVar>
			EepromSetVar(&eeprom, &kPTeto, 	0);
 8003d60:	2200      	movs	r2, #0
 8003d62:	4937      	ldr	r1, [pc, #220]	; (8003e40 <processaEeprom+0x200>)
 8003d64:	4826      	ldr	r0, [pc, #152]	; (8003e00 <processaEeprom+0x1c0>)
 8003d66:	f7fd fd7d 	bl	8001864 <EepromSetVar>
			EepromSetVar(&eeprom, &kITeto, 	0);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	4935      	ldr	r1, [pc, #212]	; (8003e44 <processaEeprom+0x204>)
 8003d6e:	4824      	ldr	r0, [pc, #144]	; (8003e00 <processaEeprom+0x1c0>)
			PID_SetTunings(&TPIDTeto, PrimitiveStates.Teto.kp, PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd);
 8003d70:	4c35      	ldr	r4, [pc, #212]	; (8003e48 <processaEeprom+0x208>)
			EepromSetVar(&eeprom, &kITeto, 	0);
 8003d72:	f7fd fd77 	bl	8001864 <EepromSetVar>
			EepromSetVar(&eeprom, &kDTeto, 	0);
 8003d76:	2200      	movs	r2, #0
 8003d78:	4934      	ldr	r1, [pc, #208]	; (8003e4c <processaEeprom+0x20c>)
 8003d7a:	4821      	ldr	r0, [pc, #132]	; (8003e00 <processaEeprom+0x1c0>)
 8003d7c:	f7fd fd72 	bl	8001864 <EepromSetVar>
			EepromSetVar(&eeprom, &limiteTeto, 	0);
 8003d80:	4929      	ldr	r1, [pc, #164]	; (8003e28 <processaEeprom+0x1e8>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	481e      	ldr	r0, [pc, #120]	; (8003e00 <processaEeprom+0x1c0>)
 8003d86:	f7fd fd6d 	bl	8001864 <EepromSetVar>
			PID_SetTunings(&TPIDTeto, PrimitiveStates.Teto.kp, PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd);
 8003d8a:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
 8003d8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d92:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	; 0xb8
 8003d96:	e9cd 2300 	strd	r2, r3, [sp]
 8003d9a:	482d      	ldr	r0, [pc, #180]	; (8003e50 <processaEeprom+0x210>)
 8003d9c:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	; 0xb0
 8003da0:	f7fe fe6a 	bl	8002a78 <PID_SetTunings>
			EepromSetVar(&eeprom, &hitereseStateTeto, 	0);
 8003da4:	2200      	movs	r2, #0
 8003da6:	4925      	ldr	r1, [pc, #148]	; (8003e3c <processaEeprom+0x1fc>)
 8003da8:	4815      	ldr	r0, [pc, #84]	; (8003e00 <processaEeprom+0x1c0>)
 8003daa:	f7fd fd5b 	bl	8001864 <EepromSetVar>
			EepromSetVar(&eeprom, &kPTeto, 	0);
 8003dae:	2200      	movs	r2, #0
 8003db0:	4923      	ldr	r1, [pc, #140]	; (8003e40 <processaEeprom+0x200>)
 8003db2:	4813      	ldr	r0, [pc, #76]	; (8003e00 <processaEeprom+0x1c0>)
 8003db4:	f7fd fd56 	bl	8001864 <EepromSetVar>
			EepromSetVar(&eeprom, &kITeto, 	0);
 8003db8:	2200      	movs	r2, #0
 8003dba:	4922      	ldr	r1, [pc, #136]	; (8003e44 <processaEeprom+0x204>)
 8003dbc:	4810      	ldr	r0, [pc, #64]	; (8003e00 <processaEeprom+0x1c0>)
 8003dbe:	f7fd fd51 	bl	8001864 <EepromSetVar>
			EepromSetVar(&eeprom, &kDTeto, 	0);
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	4921      	ldr	r1, [pc, #132]	; (8003e4c <processaEeprom+0x20c>)
 8003dc6:	480e      	ldr	r0, [pc, #56]	; (8003e00 <processaEeprom+0x1c0>)
 8003dc8:	f7fd fd4c 	bl	8001864 <EepromSetVar>
			EepromSetVar(&eeprom, &limiteTeto, 	0);
 8003dcc:	2200      	movs	r2, #0
 8003dce:	4916      	ldr	r1, [pc, #88]	; (8003e28 <processaEeprom+0x1e8>)
 8003dd0:	480b      	ldr	r0, [pc, #44]	; (8003e00 <processaEeprom+0x1c0>)
 8003dd2:	f7fd fd47 	bl	8001864 <EepromSetVar>
			PID_SetTunings(&TPIDLastro, PrimitiveStates.Lastro.kp, PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd);
 8003dd6:	e9d4 2344 	ldrd	r2, r3, [r4, #272]	; 0x110
 8003dda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dde:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
 8003de2:	e9cd 2300 	strd	r2, r3, [sp]
 8003de6:	481b      	ldr	r0, [pc, #108]	; (8003e54 <processaEeprom+0x214>)
 8003de8:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	; 0x100
 8003dec:	f7fe fe44 	bl	8002a78 <PID_SetTunings>
}
 8003df0:	b008      	add	sp, #32
 8003df2:	bd10      	pop	{r4, pc}
 8003df4:	2000080c 	.word	0x2000080c
 8003df8:	200007f8 	.word	0x200007f8
 8003dfc:	20001744 	.word	0x20001744
 8003e00:	200013c0 	.word	0x200013c0
 8003e04:	200014d8 	.word	0x200014d8
 8003e08:	20001504 	.word	0x20001504
 8003e0c:	200013bc 	.word	0x200013bc
 8003e10:	2000155c 	.word	0x2000155c
 8003e14:	20001588 	.word	0x20001588
 8003e18:	20001530 	.word	0x20001530
 8003e1c:	20001740 	.word	0x20001740
 8003e20:	20001158 	.word	0x20001158
 8003e24:	20000814 	.word	0x20000814
 8003e28:	200016e8 	.word	0x200016e8
 8003e2c:	200016bc 	.word	0x200016bc
 8003e30:	20001714 	.word	0x20001714
 8003e34:	20001390 	.word	0x20001390
 8003e38:	20001364 	.word	0x20001364
 8003e3c:	200014ac 	.word	0x200014ac
 8003e40:	20001690 	.word	0x20001690
 8003e44:	20001638 	.word	0x20001638
 8003e48:	20000818 	.word	0x20000818
 8003e4c:	200015e0 	.word	0x200015e0
 8003e50:	200017e0 	.word	0x200017e0
 8003e54:	20001770 	.word	0x20001770

08003e58 <StartEeprom>:
{
 8003e58:	b508      	push	{r3, lr}
	initEeprom();
 8003e5a:	f7ff fd79 	bl	8003950 <initEeprom>
		processaEeprom();
 8003e5e:	f7ff feef 	bl	8003c40 <processaEeprom>
		osThreadYield();
 8003e62:	f003 fa47 	bl	80072f4 <osThreadYield>
		osDelay(500);
 8003e66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e6a:	f003 fa4f 	bl	800730c <osDelay>
	for(;;)
 8003e6e:	e7f6      	b.n	8003e5e <StartEeprom+0x6>

08003e70 <atualizaDataEeprom>:

void atualizaDataEeprom(RTC_DateTypeDef data, RTC_TimeTypeDef hora){
 8003e70:	b082      	sub	sp, #8
 8003e72:	e9cd 1000 	strd	r1, r0, [sp]
	datetoUpdate = data;
 8003e76:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <atualizaDataEeprom+0x4c>)
	timeToUpdate = hora;
 8003e78:	f8bd 1000 	ldrh.w	r1, [sp]
	datetoUpdate = data;
 8003e7c:	6018      	str	r0, [r3, #0]
	timeToUpdate = hora;
 8003e7e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8003e82:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <atualizaDataEeprom+0x50>)
 8003e84:	8019      	strh	r1, [r3, #0]
 8003e86:	709a      	strb	r2, [r3, #2]

	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
			(instalacaoAno.valor == 0 || instalacaoAno.valor > 200)){
		//primeiro recebimento de data
		osMessagePut(FilaEepromHandle, CEepromDataInstalacao, 0);
 8003e88:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <atualizaDataEeprom+0x54>)
 8003e8a:	6818      	ldr	r0, [r3, #0]
	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 8003e8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ec8 <atualizaDataEeprom+0x58>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	2b1e      	cmp	r3, #30
 8003e94:	d90e      	bls.n	8003eb4 <atualizaDataEeprom+0x44>
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 8003e96:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <atualizaDataEeprom+0x5c>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	3b01      	subs	r3, #1
	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 8003e9c:	2b0b      	cmp	r3, #11
 8003e9e:	d909      	bls.n	8003eb4 <atualizaDataEeprom+0x44>
			(instalacaoAno.valor == 0 || instalacaoAno.valor > 200)){
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <atualizaDataEeprom+0x60>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	3b01      	subs	r3, #1
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 8003ea6:	2bc7      	cmp	r3, #199	; 0xc7
 8003ea8:	d904      	bls.n	8003eb4 <atualizaDataEeprom+0x44>
		osMessagePut(FilaEepromHandle, CEepromDataInstalacao, 0);
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2101      	movs	r1, #1
	}else{
		//gravacao padrao de data e hora
		osMessagePut(FilaEepromHandle, CEepromAtualizaHora, 0);
	}
}
 8003eae:	b002      	add	sp, #8
		osMessagePut(FilaEepromHandle, CEepromAtualizaHora, 0);
 8003eb0:	f003 baf7 	b.w	80074a2 <osMessagePut>
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2104      	movs	r1, #4
 8003eb8:	e7f9      	b.n	8003eae <atualizaDataEeprom+0x3e>
 8003eba:	bf00      	nop
 8003ebc:	200013bc 	.word	0x200013bc
 8003ec0:	20001740 	.word	0x20001740
 8003ec4:	2000080c 	.word	0x2000080c
 8003ec8:	2000155c 	.word	0x2000155c
 8003ecc:	20001588 	.word	0x20001588
 8003ed0:	20001530 	.word	0x20001530

08003ed4 <initPID>:
		osDelay(TIME_PID_CALC);
	}
}


void initPID(void){
 8003ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	PID(&TPIDTeto, 		&PrimitiveStates.Teto.realtime, 	&PrimitiveStates.Teto.PWMOut, 	&PrimitiveStates.Teto.setPoint, 	PrimitiveStates.Teto.kp,PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8003ed8:	f04f 0801 	mov.w	r8, #1
 8003edc:	f04f 0900 	mov.w	r9, #0
void initPID(void){
 8003ee0:	b089      	sub	sp, #36	; 0x24
	PID(&TPIDTeto, 		&PrimitiveStates.Teto.realtime, 	&PrimitiveStates.Teto.PWMOut, 	&PrimitiveStates.Teto.setPoint, 	PrimitiveStates.Teto.kp,PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8003ee2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003ee6:	4c2b      	ldr	r4, [pc, #172]	; (8003f94 <initPID+0xc0>)
 8003ee8:	4f2b      	ldr	r7, [pc, #172]	; (8003f98 <initPID+0xc4>)
 8003eea:	e954 2306 	ldrd	r2, r3, [r4, #-24]
 8003eee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ef2:	e954 2308 	ldrd	r2, r3, [r4, #-32]
 8003ef6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003efa:	4638      	mov	r0, r7
 8003efc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8003f00:	f1a4 0108 	sub.w	r1, r4, #8
 8003f04:	e9cd 2300 	strd	r2, r3, [sp]
 8003f08:	4623      	mov	r3, r4
 8003f0a:	f1a4 0210 	sub.w	r2, r4, #16
 8003f0e:	f7fe fde7 	bl	8002ae0 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.Lastro.realtime, 	&PrimitiveStates.Lastro.PWMOut,	&PrimitiveStates.Lastro.setPoint, 	PrimitiveStates.Lastro.kp,PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8003f12:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003f16:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8003f1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f1e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8003f22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f26:	4e1d      	ldr	r6, [pc, #116]	; (8003f9c <initPID+0xc8>)
 8003f28:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	e9cd 2300 	strd	r2, r3, [sp]
 8003f32:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8003f36:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8003f3a:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8003f3e:	f7fe fdcf 	bl	8002ae0 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 8003f42:	4641      	mov	r1, r8
 8003f44:	4638      	mov	r0, r7
 8003f46:	f7fe fcd0 	bl	80028ea <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8003f4a:	2400      	movs	r4, #0
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 8003f4c:	4641      	mov	r1, r8
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8003f4e:	2500      	movs	r5, #0
 8003f50:	f04f 0800 	mov.w	r8, #0
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 8003f54:	4630      	mov	r0, r6
 8003f56:	f7fe fcc8 	bl	80028ea <PID_SetMode>
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8003f5a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8003fa0 <initPID+0xcc>
	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 8003f5e:	4638      	mov	r0, r7
 8003f60:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003f64:	f7fe fdf0 	bl	8002b48 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 8003f68:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003f6c:	4630      	mov	r0, r6
 8003f6e:	f7fe fdeb 	bl	8002b48 <PID_SetSampleTime>
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8003f72:	4622      	mov	r2, r4
 8003f74:	462b      	mov	r3, r5
 8003f76:	4638      	mov	r0, r7
 8003f78:	e9cd 8900 	strd	r8, r9, [sp]
 8003f7c:	f7fe fcc2 	bl	8002904 <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 8003f80:	4622      	mov	r2, r4
 8003f82:	462b      	mov	r3, r5
 8003f84:	4630      	mov	r0, r6
 8003f86:	e9cd 8900 	strd	r8, r9, [sp]
 8003f8a:	f7fe fcbb 	bl	8002904 <PID_SetOutputLimits>
}
 8003f8e:	b009      	add	sp, #36	; 0x24
 8003f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f94:	200008f0 	.word	0x200008f0
 8003f98:	200017e0 	.word	0x200017e0
 8003f9c:	20001770 	.word	0x20001770
 8003fa0:	40590000 	.word	0x40590000

08003fa4 <computaPID>:
void computaPID(void){
 8003fa4:	b510      	push	{r4, lr}

	PID_Compute(&TPIDTeto);
 8003fa6:	480a      	ldr	r0, [pc, #40]	; (8003fd0 <computaPID+0x2c>)
	PID_Compute(&TPIDLastro);

	//transformar para a classe realizar isso //
	IndviduoPID_SetPWMValue(&PrimitiveStates.Teto, PrimitiveStates.Teto.PWMOut);
 8003fa8:	4c0a      	ldr	r4, [pc, #40]	; (8003fd4 <computaPID+0x30>)
	PID_Compute(&TPIDTeto);
 8003faa:	f7fe fc00 	bl	80027ae <PID_Compute>
	PID_Compute(&TPIDLastro);
 8003fae:	480a      	ldr	r0, [pc, #40]	; (8003fd8 <computaPID+0x34>)
 8003fb0:	f7fe fbfd 	bl	80027ae <PID_Compute>
	IndviduoPID_SetPWMValue(&PrimitiveStates.Teto, PrimitiveStates.Teto.PWMOut);
 8003fb4:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
 8003fb8:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8003fbc:	f7fd fec9 	bl	8001d52 <IndviduoPID_SetPWMValue>
	IndviduoPID_SetPWMValue(&PrimitiveStates.Lastro, PrimitiveStates.Lastro.PWMOut);
 8003fc0:	e9d4 2346 	ldrd	r2, r3, [r4, #280]	; 0x118
 8003fc4:	f104 00f8 	add.w	r0, r4, #248	; 0xf8

}
 8003fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	IndviduoPID_SetPWMValue(&PrimitiveStates.Lastro, PrimitiveStates.Lastro.PWMOut);
 8003fcc:	f7fd bec1 	b.w	8001d52 <IndviduoPID_SetPWMValue>
 8003fd0:	200017e0 	.word	0x200017e0
 8003fd4:	20000818 	.word	0x20000818
 8003fd8:	20001770 	.word	0x20001770

08003fdc <StartTemperatura>:
void StartTemperatura(void const * argument){
 8003fdc:	b508      	push	{r3, lr}
	initPID();
 8003fde:	f7ff ff79 	bl	8003ed4 <initPID>
		computaPID();
 8003fe2:	f7ff ffdf 	bl	8003fa4 <computaPID>
		osThreadYield();
 8003fe6:	f003 f985 	bl	80072f4 <osThreadYield>
		osDelay(TIME_PID_CALC);
 8003fea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003fee:	f003 f98d 	bl	800730c <osDelay>
	for(;;)	{
 8003ff2:	e7f6      	b.n	8003fe2 <StartTemperatura+0x6>

08003ff4 <WatchDogLimitesTemperatura>:

	//Contador do horimetro
	Horimetro();
}

void WatchDogLimitesTemperatura(void){
 8003ff4:	b570      	push	{r4, r5, r6, lr}
	static bool flagMaxLastro,flagMaxTeto;

	//Atingiu limite no teto
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 8003ff6:	4c27      	ldr	r4, [pc, #156]	; (8004094 <WatchDogLimitesTemperatura+0xa0>)
		if(!flagMaxTeto){
 8003ff8:	4d27      	ldr	r5, [pc, #156]	; (8004098 <WatchDogLimitesTemperatura+0xa4>)
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 8003ffa:	e9d4 2338 	ldrd	r2, r3, [r4, #224]	; 0xe0
 8003ffe:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
		if(!flagMaxTeto){
 8004002:	782e      	ldrb	r6, [r5, #0]
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 8004004:	f7fc fcf8 	bl	80009f8 <__aeabi_dcmpgt>
 8004008:	b368      	cbz	r0, 8004066 <WatchDogLimitesTemperatura+0x72>
		if(!flagMaxTeto){
 800400a:	b326      	cbz	r6, 8004056 <WatchDogLimitesTemperatura+0x62>
			flagMaxTeto = 1;
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
		}
	}
	if(flagMaxTeto && PrimitiveStates.Teto.realtime<PrimitiveStates.Teto.limite-20){
 800400c:	e9d4 0138 	ldrd	r0, r1, [r4, #224]	; 0xe0
 8004010:	2200      	movs	r2, #0
 8004012:	4b22      	ldr	r3, [pc, #136]	; (800409c <WatchDogLimitesTemperatura+0xa8>)
 8004014:	f7fc f8a8 	bl	8000168 <__aeabi_dsub>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
 8004020:	f7fc fccc 	bl	80009bc <__aeabi_dcmplt>
 8004024:	bb18      	cbnz	r0, 800406e <WatchDogLimitesTemperatura+0x7a>
		flagMaxTeto = 0;
	}

	//Atingiu limite no lastro
	if(PrimitiveStates.Lastro.realtime>PrimitiveStates.Lastro.limite){
 8004026:	e9d4 234c 	ldrd	r2, r3, [r4, #304]	; 0x130
 800402a:	e9d4 0148 	ldrd	r0, r1, [r4, #288]	; 0x120
		if(!flagMaxLastro){
 800402e:	4d1c      	ldr	r5, [pc, #112]	; (80040a0 <WatchDogLimitesTemperatura+0xac>)
 8004030:	782e      	ldrb	r6, [r5, #0]
	if(PrimitiveStates.Lastro.realtime>PrimitiveStates.Lastro.limite){
 8004032:	f7fc fce1 	bl	80009f8 <__aeabi_dcmpgt>
 8004036:	b328      	cbz	r0, 8004084 <WatchDogLimitesTemperatura+0x90>
		if(!flagMaxLastro){
 8004038:	b1e6      	cbz	r6, 8004074 <WatchDogLimitesTemperatura+0x80>
			flagMaxLastro = 1;
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
		}
	}
	if(flagMaxLastro && PrimitiveStates.Lastro.realtime<PrimitiveStates.Lastro.limite-20){
 800403a:	e9d4 014c 	ldrd	r0, r1, [r4, #304]	; 0x130
 800403e:	2200      	movs	r2, #0
 8004040:	4b16      	ldr	r3, [pc, #88]	; (800409c <WatchDogLimitesTemperatura+0xa8>)
 8004042:	f7fc f891 	bl	8000168 <__aeabi_dsub>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	e9d4 0148 	ldrd	r0, r1, [r4, #288]	; 0x120
 800404e:	f7fc fcb5 	bl	80009bc <__aeabi_dcmplt>
 8004052:	b9d8      	cbnz	r0, 800408c <WatchDogLimitesTemperatura+0x98>
		flagMaxLastro = 0;
	}
}
 8004054:	bd70      	pop	{r4, r5, r6, pc}
			flagMaxTeto = 1;
 8004056:	2301      	movs	r3, #1
 8004058:	702b      	strb	r3, [r5, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <WatchDogLimitesTemperatura+0xb0>)
 800405c:	4632      	mov	r2, r6
 800405e:	2108      	movs	r1, #8
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	f003 fa1e 	bl	80074a2 <osMessagePut>
	if(flagMaxTeto && PrimitiveStates.Teto.realtime<PrimitiveStates.Teto.limite-20){
 8004066:	782b      	ldrb	r3, [r5, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0dc      	beq.n	8004026 <WatchDogLimitesTemperatura+0x32>
 800406c:	e7ce      	b.n	800400c <WatchDogLimitesTemperatura+0x18>
		flagMaxTeto = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	702b      	strb	r3, [r5, #0]
 8004072:	e7d8      	b.n	8004026 <WatchDogLimitesTemperatura+0x32>
			flagMaxLastro = 1;
 8004074:	2301      	movs	r3, #1
 8004076:	702b      	strb	r3, [r5, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
 8004078:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <WatchDogLimitesTemperatura+0xb0>)
 800407a:	4632      	mov	r2, r6
 800407c:	2109      	movs	r1, #9
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	f003 fa0f 	bl	80074a2 <osMessagePut>
	if(flagMaxLastro && PrimitiveStates.Lastro.realtime<PrimitiveStates.Lastro.limite-20){
 8004084:	782b      	ldrb	r3, [r5, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0e4      	beq.n	8004054 <WatchDogLimitesTemperatura+0x60>
 800408a:	e7d6      	b.n	800403a <WatchDogLimitesTemperatura+0x46>
		flagMaxLastro = 0;
 800408c:	2300      	movs	r3, #0
 800408e:	702b      	strb	r3, [r5, #0]
}
 8004090:	e7e0      	b.n	8004054 <WatchDogLimitesTemperatura+0x60>
 8004092:	bf00      	nop
 8004094:	20000818 	.word	0x20000818
 8004098:	20001851 	.word	0x20001851
 800409c:	40340000 	.word	0x40340000
 80040a0:	20001850 	.word	0x20001850
 80040a4:	2000080c 	.word	0x2000080c

080040a8 <SaidasLeds>:

void SaidasLeds(void){
 80040a8:	b510      	push	{r4, lr}

	//LED VERDE - indica que as 2 saidas estao ok
	if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando ){
 80040aa:	4c14      	ldr	r4, [pc, #80]	; (80040fc <SaidasLeds+0x54>)
 80040ac:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d017      	beq.n	80040e4 <SaidasLeds+0x3c>
 80040b4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d013      	beq.n	80040e4 <SaidasLeds+0x3c>
		onDigital(&PrimitiveStates.LedVerde);
 80040bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040c0:	f7fd fdba 	bl	8001c38 <onDigital>
	}else{
		offDigital(&PrimitiveStates.LedVerde);
	}

	//LED VERMELHO TETO
	if(PrimitiveStates.Teto._PWMstate == buscando){
 80040c4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		onDigital(&PrimitiveStates.LedTeto);
 80040c8:	480d      	ldr	r0, [pc, #52]	; (8004100 <SaidasLeds+0x58>)
	if(PrimitiveStates.Teto._PWMstate == buscando){
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d10e      	bne.n	80040ec <SaidasLeds+0x44>
		onDigital(&PrimitiveStates.LedTeto);
 80040ce:	f7fd fdb3 	bl	8001c38 <onDigital>
	}else{
		offDigital(&PrimitiveStates.LedTeto);
	}

	//LED VERMELHO LASTRO
	if(PrimitiveStates.Lastro._PWMstate == buscando){
 80040d2:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
		onDigital(&PrimitiveStates.LedLastro);
 80040d6:	480b      	ldr	r0, [pc, #44]	; (8004104 <SaidasLeds+0x5c>)
	if(PrimitiveStates.Lastro._PWMstate == buscando){
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d10a      	bne.n	80040f2 <SaidasLeds+0x4a>
	}else{
		offDigital(&PrimitiveStates.LedLastro);
	}
}
 80040dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		onDigital(&PrimitiveStates.LedLastro);
 80040e0:	f7fd bdaa 	b.w	8001c38 <onDigital>
		offDigital(&PrimitiveStates.LedVerde);
 80040e4:	4808      	ldr	r0, [pc, #32]	; (8004108 <SaidasLeds+0x60>)
 80040e6:	f7fd fdb1 	bl	8001c4c <offDigital>
 80040ea:	e7eb      	b.n	80040c4 <SaidasLeds+0x1c>
		offDigital(&PrimitiveStates.LedTeto);
 80040ec:	f7fd fdae 	bl	8001c4c <offDigital>
 80040f0:	e7ef      	b.n	80040d2 <SaidasLeds+0x2a>
}
 80040f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		offDigital(&PrimitiveStates.LedLastro);
 80040f6:	f7fd bda9 	b.w	8001c4c <offDigital>
 80040fa:	bf00      	nop
 80040fc:	20000818 	.word	0x20000818
 8004100:	2000088c 	.word	0x2000088c
 8004104:	200008a4 	.word	0x200008a4
 8004108:	20000874 	.word	0x20000874

0800410c <Horimetro>:

void Horimetro(void){
	static uint8_t segundos=0;
	//esperar implementacao digital output
	if(PrimitiveStates.Lastro._PWMstate != idle || PrimitiveStates.Teto._PWMstate != idle){
 800410c:	4a0b      	ldr	r2, [pc, #44]	; (800413c <Horimetro+0x30>)
 800410e:	490c      	ldr	r1, [pc, #48]	; (8004140 <Horimetro+0x34>)
 8004110:	f892 313a 	ldrb.w	r3, [r2, #314]	; 0x13a
 8004114:	f892 20ea 	ldrb.w	r2, [r2, #234]	; 0xea
 8004118:	4313      	orrs	r3, r2
 800411a:	d00d      	beq.n	8004138 <Horimetro+0x2c>
		segundos++;
 800411c:	780b      	ldrb	r3, [r1, #0]
 800411e:	3301      	adds	r3, #1
 8004120:	b2db      	uxtb	r3, r3
		if(segundos == 60){
 8004122:	2b3c      	cmp	r3, #60	; 0x3c
 8004124:	d001      	beq.n	800412a <Horimetro+0x1e>
			segundos = 0;
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
		}

	}else{
		segundos = 1;
 8004126:	700b      	strb	r3, [r1, #0]
	}
}
 8004128:	4770      	bx	lr
			segundos = 0;
 800412a:	2200      	movs	r2, #0
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <Horimetro+0x38>)
			segundos = 0;
 800412e:	700a      	strb	r2, [r1, #0]
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	4611      	mov	r1, r2
 8004134:	f003 b9b5 	b.w	80074a2 <osMessagePut>
		segundos = 1;
 8004138:	2301      	movs	r3, #1
 800413a:	e7f4      	b.n	8004126 <Horimetro+0x1a>
 800413c:	20000818 	.word	0x20000818
 8004140:	20001852 	.word	0x20001852
 8004144:	2000080c 	.word	0x2000080c

08004148 <taskTemperatura1sec>:
void taskTemperatura1sec(void){
 8004148:	b508      	push	{r3, lr}
	WatchDogLimitesTemperatura();
 800414a:	f7ff ff53 	bl	8003ff4 <WatchDogLimitesTemperatura>
	SaidasLeds();
 800414e:	f7ff ffab 	bl	80040a8 <SaidasLeds>
}
 8004152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Horimetro();
 8004156:	f7ff bfd9 	b.w	800410c <Horimetro>
	...

0800415c <funcionamentoTimer>:
		osThreadYield();
		osDelayUntil(&xLastWakeTime,1000);
	}
}

void funcionamentoTimer(void){
 800415c:	b538      	push	{r3, r4, r5, lr}

	//Decremento de minutos e segundos
	if((PrimitiveStates.RTTimerMinutos>0 && PrimitiveStates.RTTimerSegundos==0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 800415e:	4c18      	ldr	r4, [pc, #96]	; (80041c0 <funcionamentoTimer+0x64>)
 8004160:	f894 514b 	ldrb.w	r5, [r4, #331]	; 0x14b
 8004164:	b15d      	cbz	r5, 800417e <funcionamentoTimer+0x22>
 8004166:	f8b4 314c 	ldrh.w	r3, [r4, #332]	; 0x14c
 800416a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800416e:	d10a      	bne.n	8004186 <funcionamentoTimer+0x2a>
		PrimitiveStates.RTTimerSegundos = 59;
 8004170:	233b      	movs	r3, #59	; 0x3b
		PrimitiveStates.RTTimerMinutos--;
 8004172:	3d01      	subs	r5, #1
		PrimitiveStates.RTTimerSegundos = 59;
 8004174:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
		PrimitiveStates.RTTimerMinutos--;
 8004178:	f884 514b 	strb.w	r5, [r4, #331]	; 0x14b
			osMessagePut(FilaEepromHandle, CEepromNewCile, 0);
			PrimitiveStates.stateTimer = TIMER_idle;
			osThreadResume(TaskBuzzerHandle);
		}
	}
}
 800417c:	bd38      	pop	{r3, r4, r5, pc}
	}else if((PrimitiveStates.RTTimerMinutos>0 || PrimitiveStates.RTTimerSegundos>0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 800417e:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0fa      	beq.n	800417c <funcionamentoTimer+0x20>
 8004186:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
 800418a:	2b01      	cmp	r3, #1
 800418c:	d1f6      	bne.n	800417c <funcionamentoTimer+0x20>
		PrimitiveStates.RTTimerSegundos--;
 800418e:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
 8004192:	3b01      	subs	r3, #1
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
		if(PrimitiveStates.RTTimerSegundos==0 && PrimitiveStates.RTTimerMinutos==0 && PrimitiveStates.stateTimer != TIMER_idle){
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1ee      	bne.n	800417c <funcionamentoTimer+0x20>
 800419e:	2d00      	cmp	r5, #0
 80041a0:	d1ec      	bne.n	800417c <funcionamentoTimer+0x20>
			osMessagePut(FilaEepromHandle, CEepromNewCile, 0);
 80041a2:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <funcionamentoTimer+0x68>)
 80041a4:	462a      	mov	r2, r5
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	2107      	movs	r1, #7
 80041aa:	f003 f97a 	bl	80074a2 <osMessagePut>
			osThreadResume(TaskBuzzerHandle);
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <funcionamentoTimer+0x6c>)
			PrimitiveStates.stateTimer = TIMER_idle;
 80041b0:	f884 514d 	strb.w	r5, [r4, #333]	; 0x14d
			osThreadResume(TaskBuzzerHandle);
 80041b4:	6818      	ldr	r0, [r3, #0]
}
 80041b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			osThreadResume(TaskBuzzerHandle);
 80041ba:	f003 b9d9 	b.w	8007570 <osThreadResume>
 80041be:	bf00      	nop
 80041c0:	20000818 	.word	0x20000818
 80041c4:	2000080c 	.word	0x2000080c
 80041c8:	20000c0c 	.word	0x20000c0c

080041cc <verificaErro>:



void verificaErro(void){
 80041cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	osEvent evt;
	evt = osSignalWait (ERRO_CRITICO, 0);
 80041ce:	2200      	movs	r2, #0
 80041d0:	210f      	movs	r1, #15
 80041d2:	a801      	add	r0, sp, #4
 80041d4:	f003 f90c 	bl	80073f0 <osSignalWait>
	if (evt.status == osEventSignal){
 80041d8:	9b01      	ldr	r3, [sp, #4]
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d109      	bne.n	80041f2 <verificaErro+0x26>

		if(evt.value.v == ERRO_CRITICO){
 80041de:	9b02      	ldr	r3, [sp, #8]
 80041e0:	2b0f      	cmp	r3, #15
 80041e2:	d106      	bne.n	80041f2 <verificaErro+0x26>
			osThreadSuspend(TaskTimerHandle);
 80041e4:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <verificaErro+0x2c>)
 80041e6:	6818      	ldr	r0, [r3, #0]
		}
	}
}
 80041e8:	b005      	add	sp, #20
 80041ea:	f85d eb04 	ldr.w	lr, [sp], #4
			osThreadSuspend(TaskTimerHandle);
 80041ee:	f003 b9ba 	b.w	8007566 <osThreadSuspend>
}
 80041f2:	b005      	add	sp, #20
 80041f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80041f8:	20000eb8 	.word	0x20000eb8

080041fc <StartTimer>:
{
 80041fc:	b507      	push	{r0, r1, r2, lr}
	xLastWakeTime = xTaskGetTickCount();
 80041fe:	f004 f863 	bl	80082c8 <xTaskGetTickCount>
 8004202:	9001      	str	r0, [sp, #4]
		verificaErro();
 8004204:	f7ff ffe2 	bl	80041cc <verificaErro>
		funcionamentoTimer();
 8004208:	f7ff ffa8 	bl	800415c <funcionamentoTimer>
		osThreadYield();
 800420c:	f003 f872 	bl	80072f4 <osThreadYield>
		osDelayUntil(&xLastWakeTime,1000);
 8004210:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004214:	a801      	add	r0, sp, #4
 8004216:	f003 f9c2 	bl	800759e <osDelayUntil>
	for(;;)
 800421a:	e7f3      	b.n	8004204 <StartTimer+0x8>

0800421c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800421c:	4a07      	ldr	r2, [pc, #28]	; (800423c <HAL_Init+0x20>)
{
 800421e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004220:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004222:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004224:	f043 0310 	orr.w	r3, r3, #16
 8004228:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800422a:	f000 fa55 	bl	80046d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800422e:	200f      	movs	r0, #15
 8004230:	f7fe fed8 	bl	8002fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004234:	f7fe fcae 	bl	8002b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004238:	2000      	movs	r0, #0
 800423a:	bd08      	pop	{r3, pc}
 800423c:	40022000 	.word	0x40022000

08004240 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004240:	4a03      	ldr	r2, [pc, #12]	; (8004250 <HAL_IncTick+0x10>)
 8004242:	4b04      	ldr	r3, [pc, #16]	; (8004254 <HAL_IncTick+0x14>)
 8004244:	6811      	ldr	r1, [r2, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	440b      	add	r3, r1
 800424a:	6013      	str	r3, [r2, #0]
}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20001854 	.word	0x20001854
 8004254:	20000004 	.word	0x20000004

08004258 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004258:	4b01      	ldr	r3, [pc, #4]	; (8004260 <HAL_GetTick+0x8>)
 800425a:	6818      	ldr	r0, [r3, #0]
}
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20001854 	.word	0x20001854

08004264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004264:	b538      	push	{r3, r4, r5, lr}
 8004266:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004268:	f7ff fff6 	bl	8004258 <HAL_GetTick>
 800426c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800426e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004270:	bf1e      	ittt	ne
 8004272:	4b04      	ldrne	r3, [pc, #16]	; (8004284 <HAL_Delay+0x20>)
 8004274:	781b      	ldrbne	r3, [r3, #0]
 8004276:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004278:	f7ff ffee 	bl	8004258 <HAL_GetTick>
 800427c:	1b43      	subs	r3, r0, r5
 800427e:	42a3      	cmp	r3, r4
 8004280:	d3fa      	bcc.n	8004278 <HAL_Delay+0x14>
  {
  }
}
 8004282:	bd38      	pop	{r3, r4, r5, pc}
 8004284:	20000004 	.word	0x20000004

08004288 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004288:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800428a:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800428c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800428e:	f012 0f50 	tst.w	r2, #80	; 0x50
 8004292:	d11b      	bne.n	80042cc <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	6892      	ldr	r2, [r2, #8]
 80042a0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80042a4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80042a8:	d10c      	bne.n	80042c4 <ADC_DMAConvCplt+0x3c>
 80042aa:	7b1a      	ldrb	r2, [r3, #12]
 80042ac:	b952      	cbnz	r2, 80042c4 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042b8:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042ba:	bf5e      	ittt	pl
 80042bc:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80042be:	f042 0201 	orrpl.w	r2, r2, #1
 80042c2:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fe f9f3 	bl	80026b0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80042ca:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80042cc:	6a1b      	ldr	r3, [r3, #32]
}
 80042ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80042d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d4:	4718      	bx	r3

080042d6 <HAL_ADC_ConvHalfCpltCallback>:
 80042d6:	4770      	bx	lr

080042d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80042d8:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042da:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80042dc:	f7ff fffb 	bl	80042d6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042e0:	bd08      	pop	{r3, pc}

080042e2 <HAL_ADC_ErrorCallback>:
 80042e2:	4770      	bx	lr

080042e4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80042e6:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80042ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ee:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80042f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80042f2:	f043 0304 	orr.w	r3, r3, #4
 80042f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042f8:	f7ff fff3 	bl	80042e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042fc:	bd08      	pop	{r3, pc}
	...

08004300 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8004300:	2300      	movs	r3, #0
{ 
 8004302:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8004304:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004306:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 800430a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800430c:	2b01      	cmp	r3, #1
 800430e:	d06c      	beq.n	80043ea <HAL_ADC_ConfigChannel+0xea>
 8004310:	2301      	movs	r3, #1
 8004312:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8004316:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004318:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 800431a:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800431c:	6808      	ldr	r0, [r1, #0]
 800431e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8004322:	d822      	bhi.n	800436a <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004324:	261f      	movs	r6, #31
 8004326:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8004328:	3b05      	subs	r3, #5
 800432a:	409e      	lsls	r6, r3
 800432c:	ea25 0506 	bic.w	r5, r5, r6
 8004330:	fa00 f303 	lsl.w	r3, r0, r3
 8004334:	432b      	orrs	r3, r5
 8004336:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004338:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800433a:	688b      	ldr	r3, [r1, #8]
 800433c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8004340:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004344:	d929      	bls.n	800439a <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004346:	68d6      	ldr	r6, [r2, #12]
 8004348:	3d1e      	subs	r5, #30
 800434a:	40a9      	lsls	r1, r5
 800434c:	ea26 0101 	bic.w	r1, r6, r1
 8004350:	40ab      	lsls	r3, r5
 8004352:	430b      	orrs	r3, r1
 8004354:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004356:	f1a0 0310 	sub.w	r3, r0, #16
 800435a:	2b01      	cmp	r3, #1
 800435c:	d925      	bls.n	80043aa <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800435e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8004360:	2300      	movs	r3, #0
 8004362:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8004366:	b002      	add	sp, #8
 8004368:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800436a:	2d0c      	cmp	r5, #12
 800436c:	f04f 051f 	mov.w	r5, #31
 8004370:	d809      	bhi.n	8004386 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004372:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8004374:	3b23      	subs	r3, #35	; 0x23
 8004376:	409d      	lsls	r5, r3
 8004378:	ea26 0505 	bic.w	r5, r6, r5
 800437c:	fa00 f303 	lsl.w	r3, r0, r3
 8004380:	432b      	orrs	r3, r5
 8004382:	6313      	str	r3, [r2, #48]	; 0x30
 8004384:	e7d8      	b.n	8004338 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004386:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8004388:	3b41      	subs	r3, #65	; 0x41
 800438a:	409d      	lsls	r5, r3
 800438c:	ea26 0505 	bic.w	r5, r6, r5
 8004390:	fa00 f303 	lsl.w	r3, r0, r3
 8004394:	432b      	orrs	r3, r5
 8004396:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004398:	e7ce      	b.n	8004338 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800439a:	6910      	ldr	r0, [r2, #16]
 800439c:	40a9      	lsls	r1, r5
 800439e:	ea20 0101 	bic.w	r1, r0, r1
 80043a2:	40ab      	lsls	r3, r5
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6113      	str	r3, [r2, #16]
 80043a8:	e7d9      	b.n	800435e <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80043aa:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <HAL_ADC_ConfigChannel+0xf0>)
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d116      	bne.n	80043de <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80043b0:	6893      	ldr	r3, [r2, #8]
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	d4d3      	bmi.n	800435e <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80043b6:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043b8:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80043ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043be:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043c0:	d1cd      	bne.n	800435e <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043c2:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <HAL_ADC_ConfigChannel+0xf4>)
 80043c4:	4a0c      	ldr	r2, [pc, #48]	; (80043f8 <HAL_ADC_ConfigChannel+0xf8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80043cc:	220a      	movs	r2, #10
 80043ce:	4353      	muls	r3, r2
            wait_loop_index--;
 80043d0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80043d2:	9b01      	ldr	r3, [sp, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0c2      	beq.n	800435e <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80043d8:	9b01      	ldr	r3, [sp, #4]
 80043da:	3b01      	subs	r3, #1
 80043dc:	e7f8      	b.n	80043d0 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80043e0:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043e2:	f043 0320 	orr.w	r3, r3, #32
 80043e6:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80043e8:	e7ba      	b.n	8004360 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80043ea:	2002      	movs	r0, #2
 80043ec:	e7bb      	b.n	8004366 <HAL_ADC_ConfigChannel+0x66>
 80043ee:	bf00      	nop
 80043f0:	40012400 	.word	0x40012400
 80043f4:	20000000 	.word	0x20000000
 80043f8:	000f4240 	.word	0x000f4240

080043fc <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80043fc:	2300      	movs	r3, #0
{
 80043fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8004400:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004402:	6803      	ldr	r3, [r0, #0]
{
 8004404:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	07d2      	lsls	r2, r2, #31
 800440a:	d502      	bpl.n	8004412 <ADC_Enable+0x16>
  return HAL_OK;
 800440c:	2000      	movs	r0, #0
}
 800440e:	b003      	add	sp, #12
 8004410:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	f042 0201 	orr.w	r2, r2, #1
 8004418:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800441a:	4b14      	ldr	r3, [pc, #80]	; (800446c <ADC_Enable+0x70>)
 800441c:	4a14      	ldr	r2, [pc, #80]	; (8004470 <ADC_Enable+0x74>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8004424:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8004426:	9b01      	ldr	r3, [sp, #4]
 8004428:	b9e3      	cbnz	r3, 8004464 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 800442a:	f7ff ff15 	bl	8004258 <HAL_GetTick>
 800442e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	07db      	lsls	r3, r3, #31
 8004436:	d4e9      	bmi.n	800440c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004438:	f7ff ff0e 	bl	8004258 <HAL_GetTick>
 800443c:	1b40      	subs	r0, r0, r5
 800443e:	2802      	cmp	r0, #2
 8004440:	d9f6      	bls.n	8004430 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f013 0301 	ands.w	r3, r3, #1
 800444a:	d1f1      	bne.n	8004430 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800444c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 800444e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004450:	f042 0210 	orr.w	r2, r2, #16
 8004454:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004456:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8004458:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800445c:	f042 0201 	orr.w	r2, r2, #1
 8004460:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8004462:	e7d4      	b.n	800440e <ADC_Enable+0x12>
      wait_loop_index--;
 8004464:	9b01      	ldr	r3, [sp, #4]
 8004466:	3b01      	subs	r3, #1
 8004468:	e7dc      	b.n	8004424 <ADC_Enable+0x28>
 800446a:	bf00      	nop
 800446c:	20000000 	.word	0x20000000
 8004470:	000f4240 	.word	0x000f4240

08004474 <HAL_ADC_Start_DMA>:
{
 8004474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004478:	4b40      	ldr	r3, [pc, #256]	; (800457c <HAL_ADC_Start_DMA+0x108>)
{
 800447a:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800447c:	6802      	ldr	r2, [r0, #0]
{
 800447e:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004480:	429a      	cmp	r2, r3
{
 8004482:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004484:	d002      	beq.n	800448c <HAL_ADC_Start_DMA+0x18>
 8004486:	493e      	ldr	r1, [pc, #248]	; (8004580 <HAL_ADC_Start_DMA+0x10c>)
 8004488:	428a      	cmp	r2, r1
 800448a:	d103      	bne.n	8004494 <HAL_ADC_Start_DMA+0x20>
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8004492:	d16e      	bne.n	8004572 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8004494:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004498:	2b01      	cmp	r3, #1
 800449a:	d06c      	beq.n	8004576 <HAL_ADC_Start_DMA+0x102>
 800449c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800449e:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80044a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80044a4:	f7ff ffaa 	bl	80043fc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80044a8:	4606      	mov	r6, r0
 80044aa:	2800      	cmp	r0, #0
 80044ac:	d15d      	bne.n	800456a <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80044ae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80044b0:	6821      	ldr	r1, [r4, #0]
 80044b2:	4b33      	ldr	r3, [pc, #204]	; (8004580 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80044b4:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 80044b8:	f025 0501 	bic.w	r5, r5, #1
 80044bc:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80044c0:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80044c2:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80044c4:	d104      	bne.n	80044d0 <HAL_ADC_Start_DMA+0x5c>
 80044c6:	4a2d      	ldr	r2, [pc, #180]	; (800457c <HAL_ADC_Start_DMA+0x108>)
 80044c8:	6853      	ldr	r3, [r2, #4]
 80044ca:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80044ce:	d13e      	bne.n	800454e <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80044d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80044d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80044d6:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044d8:	684b      	ldr	r3, [r1, #4]
 80044da:	055a      	lsls	r2, r3, #21
 80044dc:	d505      	bpl.n	80044ea <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80044de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80044e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044e8:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80044ec:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044ee:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044f2:	bf18      	it	ne
 80044f4:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044f6:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044f8:	bf18      	it	ne
 80044fa:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80044fe:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8004500:	2300      	movs	r3, #0
 8004502:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004506:	4b1f      	ldr	r3, [pc, #124]	; (8004584 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004508:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800450a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800450c:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <HAL_ADC_Start_DMA+0x114>)
 800450e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004510:	4b1e      	ldr	r3, [pc, #120]	; (800458c <HAL_ADC_Start_DMA+0x118>)
 8004512:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004514:	f06f 0302 	mvn.w	r3, #2
 8004518:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800451c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8004520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004524:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004528:	4643      	mov	r3, r8
 800452a:	f000 f993 	bl	8004854 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8004536:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	bf0c      	ite	eq
 800453e:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004542:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8004546:	609a      	str	r2, [r3, #8]
}
 8004548:	4630      	mov	r0, r6
 800454a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800454e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004554:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004556:	6853      	ldr	r3, [r2, #4]
 8004558:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800455a:	bf41      	itttt	mi
 800455c:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800455e:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8004562:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8004566:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8004568:	e7bf      	b.n	80044ea <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 800456a:	2300      	movs	r3, #0
 800456c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8004570:	e7ea      	b.n	8004548 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8004572:	2601      	movs	r6, #1
 8004574:	e7e8      	b.n	8004548 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8004576:	2602      	movs	r6, #2
 8004578:	e7e6      	b.n	8004548 <HAL_ADC_Start_DMA+0xd4>
 800457a:	bf00      	nop
 800457c:	40012400 	.word	0x40012400
 8004580:	40012800 	.word	0x40012800
 8004584:	08004289 	.word	0x08004289
 8004588:	080042d9 	.word	0x080042d9
 800458c:	080042e5 	.word	0x080042e5

08004590 <ADC_ConversionStop_Disable>:
{
 8004590:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004592:	6803      	ldr	r3, [r0, #0]
{
 8004594:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	07d1      	lsls	r1, r2, #31
 800459a:	d401      	bmi.n	80045a0 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 800459c:	2000      	movs	r0, #0
}
 800459e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80045a8:	f7ff fe56 	bl	8004258 <HAL_GetTick>
 80045ac:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	07db      	lsls	r3, r3, #31
 80045b4:	d5f2      	bpl.n	800459c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045b6:	f7ff fe4f 	bl	8004258 <HAL_GetTick>
 80045ba:	1b40      	subs	r0, r0, r5
 80045bc:	2802      	cmp	r0, #2
 80045be:	d9f6      	bls.n	80045ae <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	07da      	lsls	r2, r3, #31
 80045c6:	d5f2      	bpl.n	80045ae <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 80045ca:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045cc:	f043 0310 	orr.w	r3, r3, #16
 80045d0:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80045da:	e7e0      	b.n	800459e <ADC_ConversionStop_Disable+0xe>

080045dc <HAL_ADC_Init>:
{
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80045de:	4604      	mov	r4, r0
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d06d      	beq.n	80046c0 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80045e6:	b923      	cbnz	r3, 80045f2 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80045e8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80045ea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80045ee:	f7fe faf9 	bl	8002be4 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80045f2:	4620      	mov	r0, r4
 80045f4:	f7ff ffcc 	bl	8004590 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80045f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045fa:	f013 0310 	ands.w	r3, r3, #16
 80045fe:	d161      	bne.n	80046c4 <HAL_ADC_Init+0xe8>
 8004600:	2800      	cmp	r0, #0
 8004602:	d15f      	bne.n	80046c4 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 8004604:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004606:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8004608:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800460c:	f022 0202 	bic.w	r2, r2, #2
 8004610:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004614:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004616:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8004618:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800461a:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800461c:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800461e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004622:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004626:	d036      	beq.n	8004696 <HAL_ADC_Init+0xba>
 8004628:	1e77      	subs	r7, r6, #1
 800462a:	427d      	negs	r5, r7
 800462c:	417d      	adcs	r5, r7
 800462e:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004630:	7d27      	ldrb	r7, [r4, #20]
 8004632:	2f01      	cmp	r7, #1
 8004634:	d106      	bne.n	8004644 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004636:	bb82      	cbnz	r2, 800469a <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004638:	69a2      	ldr	r2, [r4, #24]
 800463a:	3a01      	subs	r2, #1
 800463c:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8004640:	f442 6500 	orr.w	r5, r2, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8004644:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004646:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800464a:	6857      	ldr	r7, [r2, #4]
 800464c:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8004650:	ea45 0507 	orr.w	r5, r5, r7
 8004654:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8004656:	6897      	ldr	r7, [r2, #8]
 8004658:	4d1d      	ldr	r5, [pc, #116]	; (80046d0 <HAL_ADC_Init+0xf4>)
 800465a:	ea05 0507 	and.w	r5, r5, r7
 800465e:	ea45 0501 	orr.w	r5, r5, r1
 8004662:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004664:	d001      	beq.n	800466a <HAL_ADC_Init+0x8e>
 8004666:	2e01      	cmp	r6, #1
 8004668:	d102      	bne.n	8004670 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800466a:	6923      	ldr	r3, [r4, #16]
 800466c:	3b01      	subs	r3, #1
 800466e:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8004670:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8004672:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8004676:	432b      	orrs	r3, r5
 8004678:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800467a:	6892      	ldr	r2, [r2, #8]
 800467c:	4b15      	ldr	r3, [pc, #84]	; (80046d4 <HAL_ADC_Init+0xf8>)
 800467e:	4013      	ands	r3, r2
 8004680:	4299      	cmp	r1, r3
 8004682:	d113      	bne.n	80046ac <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8004684:	2300      	movs	r3, #0
 8004686:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8004688:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800468a:	f023 0303 	bic.w	r3, r3, #3
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8004694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004696:	4635      	mov	r5, r6
 8004698:	e7ca      	b.n	8004630 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800469a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800469c:	f042 0220 	orr.w	r2, r2, #32
 80046a0:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80046a4:	f042 0201 	orr.w	r2, r2, #1
 80046a8:	62e2      	str	r2, [r4, #44]	; 0x2c
 80046aa:	e7cb      	b.n	8004644 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 80046ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046ae:	f023 0312 	bic.w	r3, r3, #18
 80046b2:	f043 0310 	orr.w	r3, r3, #16
 80046b6:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80046ba:	f043 0301 	orr.w	r3, r3, #1
 80046be:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80046c0:	2001      	movs	r0, #1
 80046c2:	e7e7      	b.n	8004694 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046c6:	f043 0310 	orr.w	r3, r3, #16
 80046ca:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80046cc:	e7f8      	b.n	80046c0 <HAL_ADC_Init+0xe4>
 80046ce:	bf00      	nop
 80046d0:	ffe1f7fd 	.word	0xffe1f7fd
 80046d4:	ff1f0efe 	.word	0xff1f0efe

080046d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046d8:	4907      	ldr	r1, [pc, #28]	; (80046f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80046da:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046dc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80046de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046e6:	0412      	lsls	r2, r2, #16
 80046e8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80046f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80046f6:	4770      	bx	lr
 80046f8:	e000ed00 	.word	0xe000ed00

080046fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046fc:	4b15      	ldr	r3, [pc, #84]	; (8004754 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046fe:	b530      	push	{r4, r5, lr}
 8004700:	68dc      	ldr	r4, [r3, #12]
 8004702:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004706:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800470a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800470c:	2b04      	cmp	r3, #4
 800470e:	bf28      	it	cs
 8004710:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004712:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004714:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004718:	bf94      	ite	ls
 800471a:	2400      	movls	r4, #0
 800471c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800471e:	fa05 f303 	lsl.w	r3, r5, r3
 8004722:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004726:	40a5      	lsls	r5, r4
 8004728:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800472c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800472e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004730:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004734:	bfac      	ite	ge
 8004736:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800473a:	4a07      	ldrlt	r2, [pc, #28]	; (8004758 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800473c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004740:	b2db      	uxtb	r3, r3
 8004742:	bfab      	itete	ge
 8004744:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004748:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800474c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004750:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004752:	bd30      	pop	{r4, r5, pc}
 8004754:	e000ed00 	.word	0xe000ed00
 8004758:	e000ed14 	.word	0xe000ed14

0800475c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800475c:	2800      	cmp	r0, #0
 800475e:	db07      	blt.n	8004770 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004760:	2301      	movs	r3, #1
 8004762:	0941      	lsrs	r1, r0, #5
 8004764:	4a03      	ldr	r2, [pc, #12]	; (8004774 <HAL_NVIC_EnableIRQ+0x18>)
 8004766:	f000 001f 	and.w	r0, r0, #31
 800476a:	4083      	lsls	r3, r0
 800476c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	e000e100 	.word	0xe000e100

08004778 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004778:	2800      	cmp	r0, #0
 800477a:	db0c      	blt.n	8004796 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800477c:	2201      	movs	r2, #1
 800477e:	4906      	ldr	r1, [pc, #24]	; (8004798 <HAL_NVIC_DisableIRQ+0x20>)
 8004780:	0943      	lsrs	r3, r0, #5
 8004782:	f000 001f 	and.w	r0, r0, #31
 8004786:	4082      	lsls	r2, r0
 8004788:	3320      	adds	r3, #32
 800478a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800478e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004792:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004796:	4770      	bx	lr
 8004798:	e000e100 	.word	0xe000e100

0800479c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800479c:	4603      	mov	r3, r0
{
 800479e:	b510      	push	{r4, lr}
  if(hdma == NULL)
 80047a0:	b340      	cbz	r0, 80047f4 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80047a2:	2114      	movs	r1, #20
 80047a4:	6800      	ldr	r0, [r0, #0]
 80047a6:	4a14      	ldr	r2, [pc, #80]	; (80047f8 <HAL_DMA_Init+0x5c>)
 80047a8:	4402      	add	r2, r0
 80047aa:	fbb2 f2f1 	udiv	r2, r2, r1
 80047ae:	0092      	lsls	r2, r2, #2
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80047b2:	4a12      	ldr	r2, [pc, #72]	; (80047fc <HAL_DMA_Init+0x60>)
 80047b4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047bc:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 80047c0:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c2:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 80047c4:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c6:	4322      	orrs	r2, r4
 80047c8:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80047ca:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047ce:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047d0:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80047d2:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047d6:	4322      	orrs	r2, r4
 80047d8:	699c      	ldr	r4, [r3, #24]
 80047da:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80047dc:	69dc      	ldr	r4, [r3, #28]
 80047de:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 80047e0:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047e2:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047e4:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80047e6:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047e8:	6398      	str	r0, [r3, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047ea:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80047ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
}
 80047f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80047f4:	2001      	movs	r0, #1
 80047f6:	e7fc      	b.n	80047f2 <HAL_DMA_Init+0x56>
 80047f8:	bffdfff8 	.word	0xbffdfff8
 80047fc:	40020000 	.word	0x40020000

08004800 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004800:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004802:	b308      	cbz	r0, 8004848 <HAL_DMA_DeInit+0x48>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004804:	6801      	ldr	r1, [r0, #0]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004806:	4a11      	ldr	r2, [pc, #68]	; (800484c <HAL_DMA_DeInit+0x4c>)
  __HAL_DMA_DISABLE(hdma);
 8004808:	680b      	ldr	r3, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800480a:	440a      	add	r2, r1
  __HAL_DMA_DISABLE(hdma);
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	600b      	str	r3, [r1, #0]
  hdma->Instance->CCR  = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	600b      	str	r3, [r1, #0]
  hdma->Instance->CNDTR = 0U;
 8004816:	604b      	str	r3, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 8004818:	608b      	str	r3, [r1, #8]
  hdma->Instance->CMAR = 0U;
 800481a:	60cb      	str	r3, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800481c:	2114      	movs	r1, #20
 800481e:	fbb2 f2f1 	udiv	r2, r2, r1
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8004822:	2101      	movs	r1, #1
  hdma->DmaBaseAddress = DMA1;
 8004824:	4c0a      	ldr	r4, [pc, #40]	; (8004850 <HAL_DMA_DeInit+0x50>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004826:	0092      	lsls	r2, r2, #2
 8004828:	6402      	str	r2, [r0, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800482a:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 800482e:	63c4      	str	r4, [r0, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8004830:	6062      	str	r2, [r4, #4]
  hdma->XferHalfCpltCallback = NULL;
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004832:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->XferHalfCpltCallback = NULL;
 8004834:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8004838:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800483c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004840:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8004844:	4618      	mov	r0, r3
}
 8004846:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004848:	2001      	movs	r0, #1
 800484a:	e7fc      	b.n	8004846 <HAL_DMA_DeInit+0x46>
 800484c:	bffdfff8 	.word	0xbffdfff8
 8004850:	40020000 	.word	0x40020000

08004854 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004856:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004858:	f890 0020 	ldrb.w	r0, [r0, #32]
 800485c:	2801      	cmp	r0, #1
 800485e:	d036      	beq.n	80048ce <HAL_DMA_Start_IT+0x7a>
 8004860:	2001      	movs	r0, #1
 8004862:	f885 0020 	strb.w	r0, [r5, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004866:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
 800486a:	2400      	movs	r4, #0
 800486c:	2801      	cmp	r0, #1
 800486e:	b2c6      	uxtb	r6, r0
 8004870:	f04f 0002 	mov.w	r0, #2
 8004874:	d128      	bne.n	80048c8 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004876:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800487a:	63ac      	str	r4, [r5, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800487c:	682c      	ldr	r4, [r5, #0]
 800487e:	6820      	ldr	r0, [r4, #0]
 8004880:	f020 0001 	bic.w	r0, r0, #1
 8004884:	6020      	str	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004886:	e9d5 700f 	ldrd	r7, r0, [r5, #60]	; 0x3c
 800488a:	fa06 f000 	lsl.w	r0, r6, r0
 800488e:	6078      	str	r0, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004890:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004892:	686b      	ldr	r3, [r5, #4]
 8004894:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8004896:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004898:	bf0b      	itete	eq
 800489a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800489c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800489e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80048a0:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80048a2:	b14b      	cbz	r3, 80048b8 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80048aa:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80048ac:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	6023      	str	r3, [r4, #0]
}
 80048b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	f023 0304 	bic.w	r3, r3, #4
 80048be:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	f043 030a 	orr.w	r3, r3, #10
 80048c6:	e7f0      	b.n	80048aa <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 80048c8:	f885 4020 	strb.w	r4, [r5, #32]
    status = HAL_BUSY;
 80048cc:	e7f3      	b.n	80048b6 <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 80048ce:	2002      	movs	r0, #2
 80048d0:	e7f1      	b.n	80048b6 <HAL_DMA_Start_IT+0x62>

080048d2 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048d2:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80048d6:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048d8:	2a02      	cmp	r2, #2
 80048da:	d006      	beq.n	80048ea <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048dc:	2204      	movs	r2, #4
 80048de:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_ERROR;
 80048e0:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2020 	strb.w	r2, [r3, #32]
}
 80048e8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ea:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80048ec:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ee:	6811      	ldr	r1, [r2, #0]
 80048f0:	f021 010e 	bic.w	r1, r1, #14
 80048f4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80048f6:	6811      	ldr	r1, [r2, #0]
 80048f8:	f021 0101 	bic.w	r1, r1, #1
 80048fc:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80048fe:	2101      	movs	r1, #1
 8004900:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004902:	fa01 f202 	lsl.w	r2, r1, r2
 8004906:	6042      	str	r2, [r0, #4]
  return status; 
 8004908:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800490a:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  return status; 
 800490e:	e7e8      	b.n	80048e2 <HAL_DMA_Abort+0x10>

08004910 <HAL_DMA_Abort_IT>:
{  
 8004910:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004912:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004916:	2b02      	cmp	r3, #2
 8004918:	d003      	beq.n	8004922 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800491a:	2304      	movs	r3, #4
 800491c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800491e:	2001      	movs	r0, #1
}
 8004920:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004922:	6803      	ldr	r3, [r0, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	f022 020e 	bic.w	r2, r2, #14
 800492a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	f022 0201 	bic.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004934:	4a18      	ldr	r2, [pc, #96]	; (8004998 <HAL_DMA_Abort_IT+0x88>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d01f      	beq.n	800497a <HAL_DMA_Abort_IT+0x6a>
 800493a:	3214      	adds	r2, #20
 800493c:	4293      	cmp	r3, r2
 800493e:	d01e      	beq.n	800497e <HAL_DMA_Abort_IT+0x6e>
 8004940:	3214      	adds	r2, #20
 8004942:	4293      	cmp	r3, r2
 8004944:	d01d      	beq.n	8004982 <HAL_DMA_Abort_IT+0x72>
 8004946:	3214      	adds	r2, #20
 8004948:	4293      	cmp	r3, r2
 800494a:	d01d      	beq.n	8004988 <HAL_DMA_Abort_IT+0x78>
 800494c:	3214      	adds	r2, #20
 800494e:	4293      	cmp	r3, r2
 8004950:	d01d      	beq.n	800498e <HAL_DMA_Abort_IT+0x7e>
 8004952:	3214      	adds	r2, #20
 8004954:	4293      	cmp	r3, r2
 8004956:	bf0c      	ite	eq
 8004958:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800495c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8004960:	4a0e      	ldr	r2, [pc, #56]	; (800499c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8004962:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004964:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004966:	2301      	movs	r3, #1
 8004968:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 800496c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800496e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8004972:	b17b      	cbz	r3, 8004994 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8004974:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004976:	4620      	mov	r0, r4
 8004978:	e7d2      	b.n	8004920 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800497a:	2301      	movs	r3, #1
 800497c:	e7f0      	b.n	8004960 <HAL_DMA_Abort_IT+0x50>
 800497e:	2310      	movs	r3, #16
 8004980:	e7ee      	b.n	8004960 <HAL_DMA_Abort_IT+0x50>
 8004982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004986:	e7eb      	b.n	8004960 <HAL_DMA_Abort_IT+0x50>
 8004988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800498c:	e7e8      	b.n	8004960 <HAL_DMA_Abort_IT+0x50>
 800498e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004992:	e7e5      	b.n	8004960 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8004994:	4618      	mov	r0, r3
 8004996:	e7c3      	b.n	8004920 <HAL_DMA_Abort_IT+0x10>
 8004998:	40020008 	.word	0x40020008
 800499c:	40020000 	.word	0x40020000

080049a0 <HAL_DMA_IRQHandler>:
{
 80049a0:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80049a2:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049a4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80049a6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049a8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80049aa:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80049ac:	4095      	lsls	r5, r2
 80049ae:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80049b0:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80049b2:	d032      	beq.n	8004a1a <HAL_DMA_IRQHandler+0x7a>
 80049b4:	074d      	lsls	r5, r1, #29
 80049b6:	d530      	bpl.n	8004a1a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049bc:	bf5e      	ittt	pl
 80049be:	681a      	ldrpl	r2, [r3, #0]
 80049c0:	f022 0204 	bicpl.w	r2, r2, #4
 80049c4:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80049c6:	4a3e      	ldr	r2, [pc, #248]	; (8004ac0 <HAL_DMA_IRQHandler+0x120>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d019      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x60>
 80049cc:	3214      	adds	r2, #20
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d018      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x64>
 80049d2:	3214      	adds	r2, #20
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d017      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x68>
 80049d8:	3214      	adds	r2, #20
 80049da:	4293      	cmp	r3, r2
 80049dc:	d017      	beq.n	8004a0e <HAL_DMA_IRQHandler+0x6e>
 80049de:	3214      	adds	r2, #20
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d017      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x74>
 80049e4:	3214      	adds	r2, #20
 80049e6:	4293      	cmp	r3, r2
 80049e8:	bf0c      	ite	eq
 80049ea:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80049ee:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80049f2:	4a34      	ldr	r2, [pc, #208]	; (8004ac4 <HAL_DMA_IRQHandler+0x124>)
 80049f4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80049f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d05e      	beq.n	8004aba <HAL_DMA_IRQHandler+0x11a>
}
 80049fc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80049fe:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004a00:	2304      	movs	r3, #4
 8004a02:	e7f6      	b.n	80049f2 <HAL_DMA_IRQHandler+0x52>
 8004a04:	2340      	movs	r3, #64	; 0x40
 8004a06:	e7f4      	b.n	80049f2 <HAL_DMA_IRQHandler+0x52>
 8004a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a0c:	e7f1      	b.n	80049f2 <HAL_DMA_IRQHandler+0x52>
 8004a0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a12:	e7ee      	b.n	80049f2 <HAL_DMA_IRQHandler+0x52>
 8004a14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004a18:	e7eb      	b.n	80049f2 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004a1a:	2502      	movs	r5, #2
 8004a1c:	4095      	lsls	r5, r2
 8004a1e:	4225      	tst	r5, r4
 8004a20:	d035      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xee>
 8004a22:	078d      	lsls	r5, r1, #30
 8004a24:	d533      	bpl.n	8004a8e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	0694      	lsls	r4, r2, #26
 8004a2a:	d406      	bmi.n	8004a3a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	f022 020a 	bic.w	r2, r2, #10
 8004a32:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004a34:	2201      	movs	r2, #1
 8004a36:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004a3a:	4a21      	ldr	r2, [pc, #132]	; (8004ac0 <HAL_DMA_IRQHandler+0x120>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d019      	beq.n	8004a74 <HAL_DMA_IRQHandler+0xd4>
 8004a40:	3214      	adds	r2, #20
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d018      	beq.n	8004a78 <HAL_DMA_IRQHandler+0xd8>
 8004a46:	3214      	adds	r2, #20
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d017      	beq.n	8004a7c <HAL_DMA_IRQHandler+0xdc>
 8004a4c:	3214      	adds	r2, #20
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d017      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xe2>
 8004a52:	3214      	adds	r2, #20
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d017      	beq.n	8004a88 <HAL_DMA_IRQHandler+0xe8>
 8004a58:	3214      	adds	r2, #20
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	bf0c      	ite	eq
 8004a5e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8004a62:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8004a66:	4a17      	ldr	r2, [pc, #92]	; (8004ac4 <HAL_DMA_IRQHandler+0x124>)
 8004a68:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8004a70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004a72:	e7c1      	b.n	80049f8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004a74:	2302      	movs	r3, #2
 8004a76:	e7f6      	b.n	8004a66 <HAL_DMA_IRQHandler+0xc6>
 8004a78:	2320      	movs	r3, #32
 8004a7a:	e7f4      	b.n	8004a66 <HAL_DMA_IRQHandler+0xc6>
 8004a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a80:	e7f1      	b.n	8004a66 <HAL_DMA_IRQHandler+0xc6>
 8004a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a86:	e7ee      	b.n	8004a66 <HAL_DMA_IRQHandler+0xc6>
 8004a88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a8c:	e7eb      	b.n	8004a66 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004a8e:	2508      	movs	r5, #8
 8004a90:	4095      	lsls	r5, r2
 8004a92:	4225      	tst	r5, r4
 8004a94:	d011      	beq.n	8004aba <HAL_DMA_IRQHandler+0x11a>
 8004a96:	0709      	lsls	r1, r1, #28
 8004a98:	d50f      	bpl.n	8004aba <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a9a:	6819      	ldr	r1, [r3, #0]
 8004a9c:	f021 010e 	bic.w	r1, r1, #14
 8004aa0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	fa03 f202 	lsl.w	r2, r3, r2
 8004aa8:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004aaa:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8004aac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8004ab6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004ab8:	e79e      	b.n	80049f8 <HAL_DMA_IRQHandler+0x58>
}
 8004aba:	bc70      	pop	{r4, r5, r6}
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40020008 	.word	0x40020008
 8004ac4:	40020000 	.word	0x40020000

08004ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004acc:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8004ace:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004ad0:	4f64      	ldr	r7, [pc, #400]	; (8004c64 <HAL_GPIO_Init+0x19c>)
 8004ad2:	4b65      	ldr	r3, [pc, #404]	; (8004c68 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8004ad4:	f8df c194 	ldr.w	ip, [pc, #404]	; 8004c6c <HAL_GPIO_Init+0x1a4>
 8004ad8:	f8df e194 	ldr.w	lr, [pc, #404]	; 8004c70 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004adc:	680d      	ldr	r5, [r1, #0]
 8004ade:	fa35 f406 	lsrs.w	r4, r5, r6
 8004ae2:	d102      	bne.n	8004aea <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8004ae4:	b003      	add	sp, #12
 8004ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8004aea:	f04f 0801 	mov.w	r8, #1
 8004aee:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004af2:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8004af6:	ea38 0505 	bics.w	r5, r8, r5
 8004afa:	d17a      	bne.n	8004bf2 <HAL_GPIO_Init+0x12a>
      switch (GPIO_Init->Mode)
 8004afc:	684d      	ldr	r5, [r1, #4]
 8004afe:	2d03      	cmp	r5, #3
 8004b00:	d807      	bhi.n	8004b12 <HAL_GPIO_Init+0x4a>
 8004b02:	3d01      	subs	r5, #1
 8004b04:	2d02      	cmp	r5, #2
 8004b06:	f200 8087 	bhi.w	8004c18 <HAL_GPIO_Init+0x150>
 8004b0a:	e8df f005 	tbb	[pc, r5]
 8004b0e:	9a95      	.short	0x9a95
 8004b10:	a0          	.byte	0xa0
 8004b11:	00          	.byte	0x00
 8004b12:	2d12      	cmp	r5, #18
 8004b14:	f000 8098 	beq.w	8004c48 <HAL_GPIO_Init+0x180>
 8004b18:	d86d      	bhi.n	8004bf6 <HAL_GPIO_Init+0x12e>
 8004b1a:	2d11      	cmp	r5, #17
 8004b1c:	f000 808e 	beq.w	8004c3c <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004b20:	2cff      	cmp	r4, #255	; 0xff
 8004b22:	bf98      	it	ls
 8004b24:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004b26:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004b2a:	bf88      	it	hi
 8004b2c:	f100 0a04 	addhi.w	sl, r0, #4
 8004b30:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004b34:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004b38:	bf88      	it	hi
 8004b3a:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004b3c:	fa09 fb05 	lsl.w	fp, r9, r5
 8004b40:	ea28 080b 	bic.w	r8, r8, fp
 8004b44:	fa02 f505 	lsl.w	r5, r2, r5
 8004b48:	ea48 0505 	orr.w	r5, r8, r5
 8004b4c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b50:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8004b54:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8004b58:	d04b      	beq.n	8004bf2 <HAL_GPIO_Init+0x12a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b5a:	69bd      	ldr	r5, [r7, #24]
 8004b5c:	f026 0803 	bic.w	r8, r6, #3
 8004b60:	f045 0501 	orr.w	r5, r5, #1
 8004b64:	61bd      	str	r5, [r7, #24]
 8004b66:	69bd      	ldr	r5, [r7, #24]
 8004b68:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8004b6c:	f005 0501 	and.w	r5, r5, #1
 8004b70:	9501      	str	r5, [sp, #4]
 8004b72:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b76:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b7a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b7c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8004b80:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b84:	fa09 f90b 	lsl.w	r9, r9, fp
 8004b88:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b8c:	4d39      	ldr	r5, [pc, #228]	; (8004c74 <HAL_GPIO_Init+0x1ac>)
 8004b8e:	42a8      	cmp	r0, r5
 8004b90:	d061      	beq.n	8004c56 <HAL_GPIO_Init+0x18e>
 8004b92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004b96:	42a8      	cmp	r0, r5
 8004b98:	d05f      	beq.n	8004c5a <HAL_GPIO_Init+0x192>
 8004b9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004b9e:	42a8      	cmp	r0, r5
 8004ba0:	d05d      	beq.n	8004c5e <HAL_GPIO_Init+0x196>
 8004ba2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004ba6:	42a8      	cmp	r0, r5
 8004ba8:	bf0c      	ite	eq
 8004baa:	2503      	moveq	r5, #3
 8004bac:	2504      	movne	r5, #4
 8004bae:	fa05 f50b 	lsl.w	r5, r5, fp
 8004bb2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8004bb6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8004bba:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bbc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8004bc0:	bf14      	ite	ne
 8004bc2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004bc4:	43a5      	biceq	r5, r4
 8004bc6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8004bc8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bca:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8004bce:	bf14      	ite	ne
 8004bd0:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004bd2:	43a5      	biceq	r5, r4
 8004bd4:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8004bd6:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bd8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8004bdc:	bf14      	ite	ne
 8004bde:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004be0:	43a5      	biceq	r5, r4
 8004be2:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8004be4:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004be6:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8004bea:	bf14      	ite	ne
 8004bec:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004bee:	43a5      	biceq	r5, r4
 8004bf0:	601d      	str	r5, [r3, #0]
	position++;
 8004bf2:	3601      	adds	r6, #1
 8004bf4:	e772      	b.n	8004adc <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8004bf6:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8004c78 <HAL_GPIO_Init+0x1b0>
 8004bfa:	454d      	cmp	r5, r9
 8004bfc:	d00c      	beq.n	8004c18 <HAL_GPIO_Init+0x150>
 8004bfe:	d817      	bhi.n	8004c30 <HAL_GPIO_Init+0x168>
 8004c00:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8004c04:	454d      	cmp	r5, r9
 8004c06:	d007      	beq.n	8004c18 <HAL_GPIO_Init+0x150>
 8004c08:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8004c0c:	454d      	cmp	r5, r9
 8004c0e:	d003      	beq.n	8004c18 <HAL_GPIO_Init+0x150>
 8004c10:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8004c14:	454d      	cmp	r5, r9
 8004c16:	d183      	bne.n	8004b20 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004c18:	688a      	ldr	r2, [r1, #8]
 8004c1a:	b1d2      	cbz	r2, 8004c52 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004c1c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8004c1e:	bf08      	it	eq
 8004c20:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004c24:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8004c28:	bf18      	it	ne
 8004c2a:	f8c0 8014 	strne.w	r8, [r0, #20]
 8004c2e:	e777      	b.n	8004b20 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8004c30:	4565      	cmp	r5, ip
 8004c32:	d0f1      	beq.n	8004c18 <HAL_GPIO_Init+0x150>
 8004c34:	4575      	cmp	r5, lr
 8004c36:	e7ee      	b.n	8004c16 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004c38:	68ca      	ldr	r2, [r1, #12]
          break;
 8004c3a:	e771      	b.n	8004b20 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004c3c:	68ca      	ldr	r2, [r1, #12]
 8004c3e:	3204      	adds	r2, #4
          break;
 8004c40:	e76e      	b.n	8004b20 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004c42:	68ca      	ldr	r2, [r1, #12]
 8004c44:	3208      	adds	r2, #8
          break;
 8004c46:	e76b      	b.n	8004b20 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004c48:	68ca      	ldr	r2, [r1, #12]
 8004c4a:	320c      	adds	r2, #12
          break;
 8004c4c:	e768      	b.n	8004b20 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	e766      	b.n	8004b20 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004c52:	2204      	movs	r2, #4
 8004c54:	e764      	b.n	8004b20 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c56:	2500      	movs	r5, #0
 8004c58:	e7a9      	b.n	8004bae <HAL_GPIO_Init+0xe6>
 8004c5a:	2501      	movs	r5, #1
 8004c5c:	e7a7      	b.n	8004bae <HAL_GPIO_Init+0xe6>
 8004c5e:	2502      	movs	r5, #2
 8004c60:	e7a5      	b.n	8004bae <HAL_GPIO_Init+0xe6>
 8004c62:	bf00      	nop
 8004c64:	40021000 	.word	0x40021000
 8004c68:	40010400 	.word	0x40010400
 8004c6c:	10310000 	.word	0x10310000
 8004c70:	10320000 	.word	0x10320000
 8004c74:	40010800 	.word	0x40010800
 8004c78:	10220000 	.word	0x10220000

08004c7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004c80:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8004c84:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004c86:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004c8a:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004c8e:	eb00 030b 	add.w	r3, r0, fp
 8004c92:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004c94:	4b2e      	ldr	r3, [pc, #184]	; (8004d50 <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 8004c96:	fa31 f402 	lsrs.w	r4, r1, r2
 8004c9a:	d102      	bne.n	8004ca2 <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8004c9c:	b003      	add	sp, #12
 8004c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004ca2:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 8004ca6:	400f      	ands	r7, r1
 8004ca8:	d049      	beq.n	8004d3e <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 8004caa:	f022 0403 	bic.w	r4, r2, #3
 8004cae:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004cb2:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004cb6:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8004cba:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004cbc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004cc0:	fa08 f90c 	lsl.w	r9, r8, ip
 8004cc4:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004cc8:	4d22      	ldr	r5, [pc, #136]	; (8004d54 <HAL_GPIO_DeInit+0xd8>)
 8004cca:	42a8      	cmp	r0, r5
 8004ccc:	d039      	beq.n	8004d42 <HAL_GPIO_DeInit+0xc6>
 8004cce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004cd2:	42a8      	cmp	r0, r5
 8004cd4:	d037      	beq.n	8004d46 <HAL_GPIO_DeInit+0xca>
 8004cd6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004cda:	42a8      	cmp	r0, r5
 8004cdc:	d035      	beq.n	8004d4a <HAL_GPIO_DeInit+0xce>
 8004cde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004ce2:	42a8      	cmp	r0, r5
 8004ce4:	bf0c      	ite	eq
 8004ce6:	2503      	moveq	r5, #3
 8004ce8:	2504      	movne	r5, #4
 8004cea:	fa05 f50c 	lsl.w	r5, r5, ip
 8004cee:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004cf0:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004cf4:	d10f      	bne.n	8004d16 <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004cf6:	681d      	ldr	r5, [r3, #0]
 8004cf8:	4035      	ands	r5, r6
 8004cfa:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8004cfc:	685d      	ldr	r5, [r3, #4]
 8004cfe:	4035      	ands	r5, r6
 8004d00:	605d      	str	r5, [r3, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8004d02:	68dd      	ldr	r5, [r3, #12]
 8004d04:	4035      	ands	r5, r6
 8004d06:	60dd      	str	r5, [r3, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8004d08:	689d      	ldr	r5, [r3, #8]
 8004d0a:	4035      	ands	r5, r6
 8004d0c:	609d      	str	r5, [r3, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8004d0e:	68a5      	ldr	r5, [r4, #8]
 8004d10:	ea25 0509 	bic.w	r5, r5, r9
 8004d14:	60a5      	str	r5, [r4, #8]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004d16:	2fff      	cmp	r7, #255	; 0xff
 8004d18:	bf94      	ite	ls
 8004d1a:	4607      	movls	r7, r0
 8004d1c:	9f01      	ldrhi	r7, [sp, #4]
 8004d1e:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004d22:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004d24:	bf88      	it	hi
 8004d26:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004d28:	fa08 fc04 	lsl.w	ip, r8, r4
 8004d2c:	ea25 050c 	bic.w	r5, r5, ip
 8004d30:	fa0b f404 	lsl.w	r4, fp, r4
 8004d34:	4325      	orrs	r5, r4
 8004d36:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8004d38:	68c4      	ldr	r4, [r0, #12]
 8004d3a:	4034      	ands	r4, r6
 8004d3c:	60c4      	str	r4, [r0, #12]
    position++;
 8004d3e:	3201      	adds	r2, #1
 8004d40:	e7a9      	b.n	8004c96 <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004d42:	2500      	movs	r5, #0
 8004d44:	e7d1      	b.n	8004cea <HAL_GPIO_DeInit+0x6e>
 8004d46:	2501      	movs	r5, #1
 8004d48:	e7cf      	b.n	8004cea <HAL_GPIO_DeInit+0x6e>
 8004d4a:	2502      	movs	r5, #2
 8004d4c:	e7cd      	b.n	8004cea <HAL_GPIO_DeInit+0x6e>
 8004d4e:	bf00      	nop
 8004d50:	40010400 	.word	0x40010400
 8004d54:	40010800 	.word	0x40010800

08004d58 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d58:	6883      	ldr	r3, [r0, #8]
 8004d5a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004d5c:	bf14      	ite	ne
 8004d5e:	2001      	movne	r0, #1
 8004d60:	2000      	moveq	r0, #0
 8004d62:	4770      	bx	lr

08004d64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d64:	b10a      	cbz	r2, 8004d6a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d66:	6101      	str	r1, [r0, #16]
  }
}
 8004d68:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d6a:	0409      	lsls	r1, r1, #16
 8004d6c:	e7fb      	b.n	8004d66 <HAL_GPIO_WritePin+0x2>

08004d6e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d6e:	6801      	ldr	r1, [r0, #0]
 8004d70:	2200      	movs	r2, #0
 8004d72:	694b      	ldr	r3, [r1, #20]
 8004d74:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8004d78:	d010      	beq.n	8004d9c <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d7a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8004d7e:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d80:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d82:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d84:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d88:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d8c:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d8e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d92:	f043 0304 	orr.w	r3, r3, #4
 8004d96:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8004d98:	2001      	movs	r0, #1
 8004d9a:	4770      	bx	lr
  }
  return HAL_OK;
 8004d9c:	4618      	mov	r0, r3
}
 8004d9e:	4770      	bx	lr

08004da0 <I2C_WaitOnFlagUntilTimeout>:
{
 8004da0:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8004da4:	4606      	mov	r6, r0
 8004da6:	460f      	mov	r7, r1
 8004da8:	4691      	mov	r9, r2
 8004daa:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004db0:	6833      	ldr	r3, [r6, #0]
 8004db2:	f1ba 0f01 	cmp.w	sl, #1
 8004db6:	bf0c      	ite	eq
 8004db8:	695c      	ldreq	r4, [r3, #20]
 8004dba:	699c      	ldrne	r4, [r3, #24]
 8004dbc:	ea27 0404 	bic.w	r4, r7, r4
 8004dc0:	b2a4      	uxth	r4, r4
 8004dc2:	fab4 f484 	clz	r4, r4
 8004dc6:	0964      	lsrs	r4, r4, #5
 8004dc8:	45a1      	cmp	r9, r4
 8004dca:	d001      	beq.n	8004dd0 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8004dcc:	2000      	movs	r0, #0
 8004dce:	e025      	b.n	8004e1c <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8004dd0:	1c6a      	adds	r2, r5, #1
 8004dd2:	d0ee      	beq.n	8004db2 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd4:	f7ff fa40 	bl	8004258 <HAL_GetTick>
 8004dd8:	9b08      	ldr	r3, [sp, #32]
 8004dda:	1ac0      	subs	r0, r0, r3
 8004ddc:	42a8      	cmp	r0, r5
 8004dde:	d801      	bhi.n	8004de4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004de0:	2d00      	cmp	r5, #0
 8004de2:	d1e5      	bne.n	8004db0 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004de4:	6833      	ldr	r3, [r6, #0]
 8004de6:	f1ba 0f01 	cmp.w	sl, #1
 8004dea:	bf0c      	ite	eq
 8004dec:	695b      	ldreq	r3, [r3, #20]
 8004dee:	699b      	ldrne	r3, [r3, #24]
 8004df0:	ea27 0303 	bic.w	r3, r7, r3
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	fab3 f383 	clz	r3, r3
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	4599      	cmp	r9, r3
 8004dfe:	d1d7      	bne.n	8004db0 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e00:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e02:	2220      	movs	r2, #32
          return HAL_ERROR;
 8004e04:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e06:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e08:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e0c:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e10:	6c32      	ldr	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8004e12:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e16:	f042 0220 	orr.w	r2, r2, #32
 8004e1a:	6432      	str	r2, [r6, #64]	; 0x40
}
 8004e1c:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08004e20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e24:	4604      	mov	r4, r0
 8004e26:	460f      	mov	r7, r1
 8004e28:	4616      	mov	r6, r2
 8004e2a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e2c:	6825      	ldr	r5, [r4, #0]
 8004e2e:	6968      	ldr	r0, [r5, #20]
 8004e30:	ea27 0000 	bic.w	r0, r7, r0
 8004e34:	b280      	uxth	r0, r0
 8004e36:	b1b8      	cbz	r0, 8004e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e38:	696b      	ldr	r3, [r5, #20]
 8004e3a:	055a      	lsls	r2, r3, #21
 8004e3c:	d516      	bpl.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3e:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e40:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e46:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e48:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8004e4c:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e52:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e5c:	f042 0204 	orr.w	r2, r2, #4
          return HAL_ERROR;
 8004e60:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e62:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8004e64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004e6c:	1c73      	adds	r3, r6, #1
 8004e6e:	d0de      	beq.n	8004e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e70:	f7ff f9f2 	bl	8004258 <HAL_GetTick>
 8004e74:	eba0 0008 	sub.w	r0, r0, r8
 8004e78:	42b0      	cmp	r0, r6
 8004e7a:	d801      	bhi.n	8004e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8004e7c:	2e00      	cmp	r6, #0
 8004e7e:	d1d5      	bne.n	8004e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	695a      	ldr	r2, [r3, #20]
 8004e84:	ea27 0202 	bic.w	r2, r7, r2
 8004e88:	b292      	uxth	r2, r2
 8004e8a:	2a00      	cmp	r2, #0
 8004e8c:	d0ce      	beq.n	8004e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8e:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e90:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e92:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e94:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e98:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e9e:	f042 0220 	orr.w	r2, r2, #32
 8004ea2:	e7dd      	b.n	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08004ea4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	460d      	mov	r5, r1
 8004eaa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	061b      	lsls	r3, r3, #24
 8004eb2:	d501      	bpl.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8004eb4:	2000      	movs	r0, #0
}
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f7ff ff58 	bl	8004d6e <I2C_IsAcknowledgeFailed>
 8004ebe:	b9c8      	cbnz	r0, 8004ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004ec0:	1c6a      	adds	r2, r5, #1
 8004ec2:	d0f3      	beq.n	8004eac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec4:	f7ff f9c8 	bl	8004258 <HAL_GetTick>
 8004ec8:	1b80      	subs	r0, r0, r6
 8004eca:	42a8      	cmp	r0, r5
 8004ecc:	d801      	bhi.n	8004ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8004ece:	2d00      	cmp	r5, #0
 8004ed0:	d1ec      	bne.n	8004eac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8004eda:	d1e7      	bne.n	8004eac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8004edc:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ede:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ee0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ee8:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8004eea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eee:	f042 0220 	orr.w	r2, r2, #32
 8004ef2:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	e7de      	b.n	8004eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08004ef8 <I2C_RequestMemoryWrite>:
{
 8004ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004efc:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004efe:	6802      	ldr	r2, [r0, #0]
{
 8004f00:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f02:	6813      	ldr	r3, [r2, #0]
{
 8004f04:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f0a:	6013      	str	r3, [r2, #0]
{
 8004f0c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8004f10:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f12:	463b      	mov	r3, r7
 8004f14:	2200      	movs	r2, #0
 8004f16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f1a:	f8cd 8000 	str.w	r8, [sp]
{
 8004f1e:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f20:	f7ff ff3e 	bl	8004da0 <I2C_WaitOnFlagUntilTimeout>
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	b138      	cbz	r0, 8004f38 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	05db      	lsls	r3, r3, #23
 8004f2c:	d502      	bpl.n	8004f34 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f32:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004f34:	2003      	movs	r0, #3
 8004f36:	e00a      	b.n	8004f4e <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f38:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8004f3c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f3e:	463a      	mov	r2, r7
 8004f40:	4643      	mov	r3, r8
 8004f42:	4620      	mov	r0, r4
 8004f44:	4917      	ldr	r1, [pc, #92]	; (8004fa4 <I2C_RequestMemoryWrite+0xac>)
 8004f46:	f7ff ff6b 	bl	8004e20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f4a:	b118      	cbz	r0, 8004f54 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8004f4c:	2001      	movs	r0, #1
}
 8004f4e:	b005      	add	sp, #20
 8004f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	9003      	str	r0, [sp, #12]
 8004f58:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5a:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5c:	9203      	str	r2, [sp, #12]
 8004f5e:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f60:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f62:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f64:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f66:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f68:	f7ff ff9c 	bl	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f6c:	b140      	cbz	r0, 8004f80 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f70:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f72:	bf01      	itttt	eq
 8004f74:	6822      	ldreq	r2, [r4, #0]
 8004f76:	6813      	ldreq	r3, [r2, #0]
 8004f78:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8004f7c:	6013      	streq	r3, [r2, #0]
 8004f7e:	e7e5      	b.n	8004f4c <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f80:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f84:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f86:	d102      	bne.n	8004f8e <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f88:	b2ed      	uxtb	r5, r5
 8004f8a:	611d      	str	r5, [r3, #16]
 8004f8c:	e7df      	b.n	8004f4e <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f8e:	0a2a      	lsrs	r2, r5, #8
 8004f90:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f92:	4639      	mov	r1, r7
 8004f94:	4642      	mov	r2, r8
 8004f96:	4620      	mov	r0, r4
 8004f98:	f7ff ff84 	bl	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d1e6      	bne.n	8004f6e <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	e7f1      	b.n	8004f88 <I2C_RequestMemoryWrite+0x90>
 8004fa4:	00010002 	.word	0x00010002

08004fa8 <I2C_RequestMemoryRead>:
{
 8004fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fac:	469a      	mov	sl, r3
 8004fae:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb2:	6803      	ldr	r3, [r0, #0]
{
 8004fb4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb6:	681a      	ldr	r2, [r3, #0]
{
 8004fb8:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fbe:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fc0:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fca:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fcc:	463b      	mov	r3, r7
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8cd 8000 	str.w	r8, [sp]
{
 8004fd4:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fd6:	f7ff fee3 	bl	8004da0 <I2C_WaitOnFlagUntilTimeout>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	b148      	cbz	r0, 8004ff2 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fde:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fe0:	05db      	lsls	r3, r3, #23
 8004fe2:	d502      	bpl.n	8004fea <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fe8:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004fea:	2003      	movs	r0, #3
}
 8004fec:	b004      	add	sp, #16
 8004fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ff2:	fa5f f986 	uxtb.w	r9, r6
 8004ff6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8004ffa:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ffc:	463a      	mov	r2, r7
 8004ffe:	4643      	mov	r3, r8
 8005000:	4620      	mov	r0, r4
 8005002:	4929      	ldr	r1, [pc, #164]	; (80050a8 <I2C_RequestMemoryRead+0x100>)
 8005004:	f7ff ff0c 	bl	8004e20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005008:	b108      	cbz	r0, 800500e <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 800500a:	2001      	movs	r0, #1
 800500c:	e7ee      	b.n	8004fec <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	9003      	str	r0, [sp, #12]
 8005012:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005014:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005016:	9203      	str	r2, [sp, #12]
 8005018:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800501a:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800501c:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800501e:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005020:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005022:	f7ff ff3f 	bl	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005026:	b140      	cbz	r0, 800503a <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005028:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800502a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502c:	bf01      	itttt	eq
 800502e:	6822      	ldreq	r2, [r4, #0]
 8005030:	6813      	ldreq	r3, [r2, #0]
 8005032:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8005036:	6013      	streq	r3, [r2, #0]
 8005038:	e7e7      	b.n	800500a <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800503a:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005040:	d11a      	bne.n	8005078 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005042:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005044:	4642      	mov	r2, r8
 8005046:	4639      	mov	r1, r7
 8005048:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800504a:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504c:	f7ff ff2a 	bl	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005050:	4602      	mov	r2, r0
 8005052:	2800      	cmp	r0, #0
 8005054:	d1e8      	bne.n	8005028 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005056:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005058:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800505a:	680b      	ldr	r3, [r1, #0]
 800505c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005060:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005062:	463b      	mov	r3, r7
 8005064:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005068:	f8cd 8000 	str.w	r8, [sp]
 800506c:	f7ff fe98 	bl	8004da0 <I2C_WaitOnFlagUntilTimeout>
 8005070:	6822      	ldr	r2, [r4, #0]
 8005072:	b160      	cbz	r0, 800508e <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005074:	6813      	ldr	r3, [r2, #0]
 8005076:	e7b3      	b.n	8004fe0 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005078:	0a2a      	lsrs	r2, r5, #8
 800507a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800507c:	4639      	mov	r1, r7
 800507e:	4642      	mov	r2, r8
 8005080:	4620      	mov	r0, r4
 8005082:	f7ff ff0f 	bl	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005086:	2800      	cmp	r0, #0
 8005088:	d1ce      	bne.n	8005028 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	e7d9      	b.n	8005042 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800508e:	f049 0301 	orr.w	r3, r9, #1
 8005092:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005094:	4620      	mov	r0, r4
 8005096:	4643      	mov	r3, r8
 8005098:	463a      	mov	r2, r7
 800509a:	4903      	ldr	r1, [pc, #12]	; (80050a8 <I2C_RequestMemoryRead+0x100>)
 800509c:	f7ff fec0 	bl	8004e20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 80050a0:	3800      	subs	r0, #0
 80050a2:	bf18      	it	ne
 80050a4:	2001      	movne	r0, #1
 80050a6:	e7a1      	b.n	8004fec <I2C_RequestMemoryRead+0x44>
 80050a8:	00010002 	.word	0x00010002

080050ac <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80050ac:	b570      	push	{r4, r5, r6, lr}
 80050ae:	4604      	mov	r4, r0
 80050b0:	460d      	mov	r5, r1
 80050b2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	075b      	lsls	r3, r3, #29
 80050ba:	d501      	bpl.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80050bc:	2000      	movs	r0, #0
}
 80050be:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050c0:	4620      	mov	r0, r4
 80050c2:	f7ff fe54 	bl	8004d6e <I2C_IsAcknowledgeFailed>
 80050c6:	b9c8      	cbnz	r0, 80050fc <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80050c8:	1c6a      	adds	r2, r5, #1
 80050ca:	d0f3      	beq.n	80050b4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050cc:	f7ff f8c4 	bl	8004258 <HAL_GetTick>
 80050d0:	1b80      	subs	r0, r0, r6
 80050d2:	42a8      	cmp	r0, r5
 80050d4:	d801      	bhi.n	80050da <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80050d6:	2d00      	cmp	r5, #0
 80050d8:	d1ec      	bne.n	80050b4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f013 0304 	ands.w	r3, r3, #4
 80050e2:	d1e7      	bne.n	80050b4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80050e4:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050e6:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80050f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f6:	f042 0220 	orr.w	r2, r2, #32
 80050fa:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80050fc:	2001      	movs	r0, #1
 80050fe:	e7de      	b.n	80050be <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08005100 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005100:	b570      	push	{r4, r5, r6, lr}
 8005102:	4604      	mov	r4, r0
 8005104:	460d      	mov	r5, r1
 8005106:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005108:	6821      	ldr	r1, [r4, #0]
 800510a:	694b      	ldr	r3, [r1, #20]
 800510c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005110:	d001      	beq.n	8005116 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8005112:	2000      	movs	r0, #0
 8005114:	e010      	b.n	8005138 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005116:	694a      	ldr	r2, [r1, #20]
 8005118:	06d2      	lsls	r2, r2, #27
 800511a:	d50e      	bpl.n	800513a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800511c:	f06f 0210 	mvn.w	r2, #16
 8005120:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005122:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005124:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005126:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800512a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800512e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005130:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005132:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005134:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005138:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513a:	f7ff f88d 	bl	8004258 <HAL_GetTick>
 800513e:	1b80      	subs	r0, r0, r6
 8005140:	42a8      	cmp	r0, r5
 8005142:	d801      	bhi.n	8005148 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8005144:	2d00      	cmp	r5, #0
 8005146:	d1df      	bne.n	8005108 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005150:	d1da      	bne.n	8005108 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8005152:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005154:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005156:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800515a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800515e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005160:	f042 0220 	orr.w	r2, r2, #32
 8005164:	e7e4      	b.n	8005130 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08005168 <HAL_I2C_Init>:
{
 8005168:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800516a:	4604      	mov	r4, r0
 800516c:	b908      	cbnz	r0, 8005172 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800516e:	2001      	movs	r0, #1
}
 8005170:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005172:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005176:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800517a:	b91b      	cbnz	r3, 8005184 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800517c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005180:	f7fd fd7a 	bl	8002c78 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005184:	2324      	movs	r3, #36	; 0x24
 8005186:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	f022 0201 	bic.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800519a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051a2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051a4:	f000 fd6a 	bl	8005c7c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051a8:	4b3f      	ldr	r3, [pc, #252]	; (80052a8 <HAL_I2C_Init+0x140>)
 80051aa:	6865      	ldr	r5, [r4, #4]
 80051ac:	429d      	cmp	r5, r3
 80051ae:	bf94      	ite	ls
 80051b0:	4b3e      	ldrls	r3, [pc, #248]	; (80052ac <HAL_I2C_Init+0x144>)
 80051b2:	4b3f      	ldrhi	r3, [pc, #252]	; (80052b0 <HAL_I2C_Init+0x148>)
 80051b4:	4298      	cmp	r0, r3
 80051b6:	bf8c      	ite	hi
 80051b8:	2300      	movhi	r3, #0
 80051ba:	2301      	movls	r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1d6      	bne.n	800516e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051c0:	4e39      	ldr	r6, [pc, #228]	; (80052a8 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 80051c2:	4b3c      	ldr	r3, [pc, #240]	; (80052b4 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051c4:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 80051c6:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051ca:	bf88      	it	hi
 80051cc:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051d0:	6822      	ldr	r2, [r4, #0]
 80051d2:	6851      	ldr	r1, [r2, #4]
 80051d4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80051d8:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051dc:	bf82      	ittt	hi
 80051de:	4373      	mulhi	r3, r6
 80051e0:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80051e4:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051e8:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051ea:	6a11      	ldr	r1, [r2, #32]
 80051ec:	3301      	adds	r3, #1
 80051ee:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80051f2:	430b      	orrs	r3, r1
 80051f4:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051f6:	69d1      	ldr	r1, [r2, #28]
 80051f8:	1e43      	subs	r3, r0, #1
 80051fa:	482b      	ldr	r0, [pc, #172]	; (80052a8 <HAL_I2C_Init+0x140>)
 80051fc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8005200:	4285      	cmp	r5, r0
 8005202:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005206:	d832      	bhi.n	800526e <HAL_I2C_Init+0x106>
 8005208:	006d      	lsls	r5, r5, #1
 800520a:	fbb3 f3f5 	udiv	r3, r3, r5
 800520e:	f640 70fc 	movw	r0, #4092	; 0xffc
 8005212:	3301      	adds	r3, #1
 8005214:	4203      	tst	r3, r0
 8005216:	d042      	beq.n	800529e <HAL_I2C_Init+0x136>
 8005218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800521c:	4319      	orrs	r1, r3
 800521e:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005220:	6811      	ldr	r1, [r2, #0]
 8005222:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8005226:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800522a:	4303      	orrs	r3, r0
 800522c:	430b      	orrs	r3, r1
 800522e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005230:	6891      	ldr	r1, [r2, #8]
 8005232:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8005236:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800523a:	4303      	orrs	r3, r0
 800523c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005240:	430b      	orrs	r3, r1
 8005242:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005244:	68d1      	ldr	r1, [r2, #12]
 8005246:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800524a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800524e:	4303      	orrs	r3, r0
 8005250:	430b      	orrs	r3, r1
 8005252:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005254:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005256:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800525e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005260:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005262:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005266:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005268:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800526c:	e780      	b.n	8005170 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800526e:	68a0      	ldr	r0, [r4, #8]
 8005270:	b950      	cbnz	r0, 8005288 <HAL_I2C_Init+0x120>
 8005272:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005276:	fbb3 f3f5 	udiv	r3, r3, r5
 800527a:	3301      	adds	r3, #1
 800527c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005280:	b17b      	cbz	r3, 80052a2 <HAL_I2C_Init+0x13a>
 8005282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005286:	e7c9      	b.n	800521c <HAL_I2C_Init+0xb4>
 8005288:	2019      	movs	r0, #25
 800528a:	4368      	muls	r0, r5
 800528c:	fbb3 f3f0 	udiv	r3, r3, r0
 8005290:	3301      	adds	r3, #1
 8005292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005296:	b123      	cbz	r3, 80052a2 <HAL_I2C_Init+0x13a>
 8005298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800529c:	e7be      	b.n	800521c <HAL_I2C_Init+0xb4>
 800529e:	2304      	movs	r3, #4
 80052a0:	e7bc      	b.n	800521c <HAL_I2C_Init+0xb4>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e7ba      	b.n	800521c <HAL_I2C_Init+0xb4>
 80052a6:	bf00      	nop
 80052a8:	000186a0 	.word	0x000186a0
 80052ac:	001e847f 	.word	0x001e847f
 80052b0:	003d08ff 	.word	0x003d08ff
 80052b4:	000f4240 	.word	0x000f4240

080052b8 <HAL_I2C_Mem_Write>:
{
 80052b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80052bc:	4604      	mov	r4, r0
 80052be:	4699      	mov	r9, r3
 80052c0:	460f      	mov	r7, r1
 80052c2:	4690      	mov	r8, r2
 80052c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80052c6:	f7fe ffc7 	bl	8004258 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80052ce:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d003      	beq.n	80052dc <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80052d4:	2002      	movs	r0, #2
}
 80052d6:	b003      	add	sp, #12
 80052d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052dc:	9000      	str	r0, [sp, #0]
 80052de:	2319      	movs	r3, #25
 80052e0:	2201      	movs	r2, #1
 80052e2:	4620      	mov	r0, r4
 80052e4:	493a      	ldr	r1, [pc, #232]	; (80053d0 <HAL_I2C_Mem_Write+0x118>)
 80052e6:	f7ff fd5b 	bl	8004da0 <I2C_WaitOnFlagUntilTimeout>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d1f2      	bne.n	80052d4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80052ee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d0ee      	beq.n	80052d4 <HAL_I2C_Mem_Write+0x1c>
 80052f6:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052f8:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80052fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052fe:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005300:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005302:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8005304:	bf58      	it	pl
 8005306:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005308:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 800530a:	bf5c      	itt	pl
 800530c:	f043 0301 	orrpl.w	r3, r3, #1
 8005310:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005312:	6803      	ldr	r3, [r0, #0]
 8005314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005318:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800531a:	2321      	movs	r3, #33	; 0x21
 800531c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005320:	2340      	movs	r3, #64	; 0x40
 8005322:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005326:	2300      	movs	r3, #0
 8005328:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800532a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800532c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 800532e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005330:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005334:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 8005338:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800533a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800533c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800533e:	4b25      	ldr	r3, [pc, #148]	; (80053d4 <HAL_I2C_Mem_Write+0x11c>)
 8005340:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005342:	464b      	mov	r3, r9
 8005344:	f7ff fdd8 	bl	8004ef8 <I2C_RequestMemoryWrite>
 8005348:	2800      	cmp	r0, #0
 800534a:	d02a      	beq.n	80053a2 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 800534c:	2001      	movs	r0, #1
 800534e:	e7c2      	b.n	80052d6 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005350:	f7ff fda8 	bl	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005354:	b140      	cbz	r0, 8005368 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005358:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535a:	bf01      	itttt	eq
 800535c:	6822      	ldreq	r2, [r4, #0]
 800535e:	6813      	ldreq	r3, [r2, #0]
 8005360:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8005364:	6013      	streq	r3, [r2, #0]
 8005366:	e7f1      	b.n	800534c <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800536a:	6827      	ldr	r7, [r4, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005372:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8005374:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005376:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005378:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800537a:	3a01      	subs	r2, #1
 800537c:	b292      	uxth	r2, r2
 800537e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005380:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8005382:	1e48      	subs	r0, r1, #1
 8005384:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005386:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8005388:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800538a:	d50a      	bpl.n	80053a2 <HAL_I2C_Mem_Write+0xea>
 800538c:	b148      	cbz	r0, 80053a2 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800538e:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8005390:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005392:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8005394:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005396:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005398:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800539a:	3b01      	subs	r3, #1
 800539c:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800539e:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80053a0:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053a4:	462a      	mov	r2, r5
 80053a6:	4631      	mov	r1, r6
 80053a8:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1d0      	bne.n	8005350 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ae:	f7ff fe7d 	bl	80050ac <I2C_WaitOnBTFFlagUntilTimeout>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d1cf      	bne.n	8005356 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	6813      	ldr	r3, [r2, #0]
 80053ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053be:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80053c0:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80053c2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80053c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ca:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80053ce:	e782      	b.n	80052d6 <HAL_I2C_Mem_Write+0x1e>
 80053d0:	00100002 	.word	0x00100002
 80053d4:	ffff0000 	.word	0xffff0000

080053d8 <HAL_I2C_Mem_Read>:
{
 80053d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053dc:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 80053de:	2300      	movs	r3, #0
{
 80053e0:	4604      	mov	r4, r0
 80053e2:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 80053e4:	9303      	str	r3, [sp, #12]
{
 80053e6:	460d      	mov	r5, r1
 80053e8:	4690      	mov	r8, r2
 80053ea:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 80053ec:	f7fe ff34 	bl	8004258 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80053f0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80053f4:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d004      	beq.n	8005404 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 80053fa:	2502      	movs	r5, #2
}
 80053fc:	4628      	mov	r0, r5
 80053fe:	b009      	add	sp, #36	; 0x24
 8005400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005404:	9000      	str	r0, [sp, #0]
 8005406:	2319      	movs	r3, #25
 8005408:	2201      	movs	r2, #1
 800540a:	4620      	mov	r0, r4
 800540c:	498d      	ldr	r1, [pc, #564]	; (8005644 <HAL_I2C_Mem_Read+0x26c>)
 800540e:	f7ff fcc7 	bl	8004da0 <I2C_WaitOnFlagUntilTimeout>
 8005412:	2800      	cmp	r0, #0
 8005414:	d1f1      	bne.n	80053fa <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8005416:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800541a:	2b01      	cmp	r3, #1
 800541c:	d0ed      	beq.n	80053fa <HAL_I2C_Mem_Read+0x22>
 800541e:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005420:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005422:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005426:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005428:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800542a:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800542c:	bf58      	it	pl
 800542e:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005430:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8005432:	bf5c      	itt	pl
 8005434:	f043 0301 	orrpl.w	r3, r3, #1
 8005438:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800543a:	6803      	ldr	r3, [r0, #0]
 800543c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005440:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005442:	2322      	movs	r3, #34	; 0x22
 8005444:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005448:	2340      	movs	r3, #64	; 0x40
 800544a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800544e:	2300      	movs	r3, #0
 8005450:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005452:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005454:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8005456:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005458:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800545c:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 8005460:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005462:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005464:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005466:	4b78      	ldr	r3, [pc, #480]	; (8005648 <HAL_I2C_Mem_Read+0x270>)
 8005468:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800546a:	464b      	mov	r3, r9
 800546c:	f7ff fd9c 	bl	8004fa8 <I2C_RequestMemoryRead>
 8005470:	4605      	mov	r5, r0
 8005472:	b108      	cbz	r0, 8005478 <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 8005474:	2501      	movs	r5, #1
 8005476:	e7c1      	b.n	80053fc <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8005478:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800547a:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800547c:	b9c2      	cbnz	r2, 80054b0 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800547e:	9004      	str	r0, [sp, #16]
 8005480:	695a      	ldr	r2, [r3, #20]
 8005482:	9204      	str	r2, [sp, #16]
 8005484:	699a      	ldr	r2, [r3, #24]
 8005486:	9204      	str	r2, [sp, #16]
 8005488:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005490:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005492:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800564c <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005496:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8005650 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 800549a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800549c:	2b00      	cmp	r3, #0
 800549e:	d137      	bne.n	8005510 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 80054a0:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80054a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80054a6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80054ae:	e7a5      	b.n	80053fc <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 80054b0:	2a01      	cmp	r2, #1
 80054b2:	d111      	bne.n	80054d8 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80054bc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	9005      	str	r0, [sp, #20]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	9205      	str	r2, [sp, #20]
 80054c6:	699a      	ldr	r2, [r3, #24]
 80054c8:	9205      	str	r2, [sp, #20]
 80054ca:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80054d4:	b662      	cpsie	i
}
 80054d6:	e7dc      	b.n	8005492 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 80054d8:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054da:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80054dc:	d10e      	bne.n	80054fc <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80054e4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	9006      	str	r0, [sp, #24]
 80054ea:	695a      	ldr	r2, [r3, #20]
 80054ec:	9206      	str	r2, [sp, #24]
 80054ee:	699a      	ldr	r2, [r3, #24]
 80054f0:	9206      	str	r2, [sp, #24]
 80054f2:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054fa:	e7ea      	b.n	80054d2 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005500:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005502:	9007      	str	r0, [sp, #28]
 8005504:	695a      	ldr	r2, [r3, #20]
 8005506:	9207      	str	r2, [sp, #28]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	9307      	str	r3, [sp, #28]
 800550c:	9b07      	ldr	r3, [sp, #28]
 800550e:	e7c0      	b.n	8005492 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8005510:	2b03      	cmp	r3, #3
 8005512:	d878      	bhi.n	8005606 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8005514:	2b01      	cmp	r3, #1
 8005516:	d115      	bne.n	8005544 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005518:	4632      	mov	r2, r6
 800551a:	4639      	mov	r1, r7
 800551c:	4620      	mov	r0, r4
 800551e:	f7ff fdef 	bl	8005100 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005522:	2800      	cmp	r0, #0
 8005524:	d1a6      	bne.n	8005474 <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800552c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800552e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005530:	3301      	adds	r3, #1
 8005532:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005534:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005536:	3b01      	subs	r3, #1
 8005538:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800553a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800553c:	3b01      	subs	r3, #1
 800553e:	b29b      	uxth	r3, r3
 8005540:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005542:	e7aa      	b.n	800549a <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8005544:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	463b      	mov	r3, r7
 800554c:	4641      	mov	r1, r8
 800554e:	4620      	mov	r0, r4
 8005550:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8005552:	d118      	bne.n	8005586 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005554:	f7ff fc24 	bl	8004da0 <I2C_WaitOnFlagUntilTimeout>
 8005558:	2800      	cmp	r0, #0
 800555a:	d18b      	bne.n	8005474 <HAL_I2C_Mem_Read+0x9c>
 800555c:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005566:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800556c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800556e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005570:	3301      	adds	r3, #1
 8005572:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005574:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005576:	3b01      	subs	r3, #1
 8005578:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800557a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800557c:	3b01      	subs	r3, #1
 800557e:	b29b      	uxth	r3, r3
 8005580:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005582:	b662      	cpsie	i
 8005584:	e7cf      	b.n	8005526 <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005586:	f7ff fc0b 	bl	8004da0 <I2C_WaitOnFlagUntilTimeout>
 800558a:	2800      	cmp	r0, #0
 800558c:	f47f af72 	bne.w	8005474 <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005590:	6822      	ldr	r2, [r4, #0]
 8005592:	6813      	ldr	r3, [r2, #0]
 8005594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005598:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800559a:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800559c:	f246 11a8 	movw	r1, #25000	; 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055a6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80055a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80055aa:	1c53      	adds	r3, r2, #1
 80055ac:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80055ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80055b0:	3b01      	subs	r3, #1
 80055b2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80055b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80055bc:	f8d9 3000 	ldr.w	r3, [r9]
 80055c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80055c4:	2123      	movs	r1, #35	; 0x23
 80055c6:	434b      	muls	r3, r1
 80055c8:	9303      	str	r3, [sp, #12]
            count--;
 80055ca:	9b03      	ldr	r3, [sp, #12]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 80055d0:	9b03      	ldr	r3, [sp, #12]
 80055d2:	b96b      	cbnz	r3, 80055f0 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 80055d4:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80055d6:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80055d8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80055e2:	f042 0220 	orr.w	r2, r2, #32
 80055e6:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80055e8:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80055ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80055ee:	e741      	b.n	8005474 <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	6959      	ldr	r1, [r3, #20]
 80055f4:	0748      	lsls	r0, r1, #29
 80055f6:	d5e8      	bpl.n	80055ca <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f8:	6819      	ldr	r1, [r3, #0]
 80055fa:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80055fe:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	7053      	strb	r3, [r2, #1]
 8005604:	e7b3      	b.n	800556e <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005606:	4632      	mov	r2, r6
 8005608:	4639      	mov	r1, r7
 800560a:	4620      	mov	r0, r4
 800560c:	f7ff fd78 	bl	8005100 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005610:	2800      	cmp	r0, #0
 8005612:	f47f af2f 	bne.w	8005474 <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800561c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800561e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005620:	1c53      	adds	r3, r2, #1
 8005622:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005624:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005626:	3b01      	subs	r3, #1
 8005628:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800562a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800562c:	3b01      	subs	r3, #1
 800562e:	b29b      	uxth	r3, r3
 8005630:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	6959      	ldr	r1, [r3, #20]
 8005636:	0749      	lsls	r1, r1, #29
 8005638:	f57f af2f 	bpl.w	800549a <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	7053      	strb	r3, [r2, #1]
 8005640:	e775      	b.n	800552e <HAL_I2C_Mem_Read+0x156>
 8005642:	bf00      	nop
 8005644:	00100002 	.word	0x00100002
 8005648:	ffff0000 	.word	0xffff0000
 800564c:	00010004 	.word	0x00010004
 8005650:	20000000 	.word	0x20000000

08005654 <HAL_I2C_IsDeviceReady>:
{
 8005654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005658:	4604      	mov	r4, r0
 800565a:	b085      	sub	sp, #20
 800565c:	461f      	mov	r7, r3
 800565e:	4688      	mov	r8, r1
 8005660:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8005662:	f7fe fdf9 	bl	8004258 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005666:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 800566a:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800566c:	2b20      	cmp	r3, #32
 800566e:	d003      	beq.n	8005678 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8005670:	2002      	movs	r0, #2
}
 8005672:	b005      	add	sp, #20
 8005674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005678:	9000      	str	r0, [sp, #0]
 800567a:	2319      	movs	r3, #25
 800567c:	2201      	movs	r2, #1
 800567e:	4620      	mov	r0, r4
 8005680:	494a      	ldr	r1, [pc, #296]	; (80057ac <HAL_I2C_IsDeviceReady+0x158>)
 8005682:	f7ff fb8d 	bl	8004da0 <I2C_WaitOnFlagUntilTimeout>
 8005686:	2800      	cmp	r0, #0
 8005688:	d1f2      	bne.n	8005670 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 800568a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800568e:	2b01      	cmp	r3, #1
 8005690:	d0ee      	beq.n	8005670 <HAL_I2C_IsDeviceReady+0x1c>
 8005692:	2301      	movs	r3, #1
 8005694:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005698:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800569a:	2600      	movs	r6, #0
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800569c:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800569e:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80057ac <HAL_I2C_IsDeviceReady+0x158>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056a2:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80056a4:	bf58      	it	pl
 80056a6:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056a8:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 80056ac:	bf5c      	itt	pl
 80056ae:	f042 0201 	orrpl.w	r2, r2, #1
 80056b2:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056ba:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80056bc:	2324      	movs	r3, #36	; 0x24
 80056be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056c2:	4b3b      	ldr	r3, [pc, #236]	; (80057b0 <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c4:	6426      	str	r6, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056c6:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056c8:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80056ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ce:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80056d0:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d6:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80056d8:	463b      	mov	r3, r7
 80056da:	2200      	movs	r2, #0
 80056dc:	9500      	str	r5, [sp, #0]
 80056de:	f7ff fb5f 	bl	8004da0 <I2C_WaitOnFlagUntilTimeout>
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	b138      	cbz	r0, 80056f6 <HAL_I2C_IsDeviceReady+0xa2>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	05db      	lsls	r3, r3, #23
 80056ea:	d502      	bpl.n	80056f2 <HAL_I2C_IsDeviceReady+0x9e>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056f0:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80056f2:	2003      	movs	r0, #3
 80056f4:	e7bd      	b.n	8005672 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056f6:	f8c3 8010 	str.w	r8, [r3, #16]
      tickstart = HAL_GetTick();
 80056fa:	f7fe fdad 	bl	8004258 <HAL_GetTick>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80056fe:	f04f 09a0 	mov.w	r9, #160	; 0xa0
      tickstart = HAL_GetTick();
 8005702:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005708:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800570a:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800570e:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005712:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8005716:	29a0      	cmp	r1, #160	; 0xa0
 8005718:	d001      	beq.n	800571e <HAL_I2C_IsDeviceReady+0xca>
 800571a:	4313      	orrs	r3, r2
 800571c:	d01d      	beq.n	800575a <HAL_I2C_IsDeviceReady+0x106>
      hi2c->State = HAL_I2C_STATE_READY;
 800571e:	f04f 0920 	mov.w	r9, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005722:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8005724:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005728:	695a      	ldr	r2, [r3, #20]
 800572a:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005734:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005736:	d025      	beq.n	8005784 <HAL_I2C_IsDeviceReady+0x130>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005738:	2200      	movs	r2, #0
 800573a:	9203      	str	r2, [sp, #12]
 800573c:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800573e:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005740:	9203      	str	r2, [sp, #12]
 8005742:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005744:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005746:	9303      	str	r3, [sp, #12]
 8005748:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800574a:	4918      	ldr	r1, [pc, #96]	; (80057ac <HAL_I2C_IsDeviceReady+0x158>)
 800574c:	2319      	movs	r3, #25
 800574e:	9500      	str	r5, [sp, #0]
 8005750:	f7ff fb26 	bl	8004da0 <I2C_WaitOnFlagUntilTimeout>
 8005754:	b188      	cbz	r0, 800577a <HAL_I2C_IsDeviceReady+0x126>
    return HAL_ERROR;
 8005756:	2001      	movs	r0, #1
 8005758:	e78b      	b.n	8005672 <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800575a:	f7fe fd7d 	bl	8004258 <HAL_GetTick>
 800575e:	1b40      	subs	r0, r0, r5
 8005760:	42b8      	cmp	r0, r7
 8005762:	d800      	bhi.n	8005766 <HAL_I2C_IsDeviceReady+0x112>
 8005764:	b90f      	cbnz	r7, 800576a <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005766:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800576e:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005770:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005774:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8005778:	e7cb      	b.n	8005712 <HAL_I2C_IsDeviceReady+0xbe>
        hi2c->State = HAL_I2C_STATE_READY;
 800577a:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800577e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8005782:	e776      	b.n	8005672 <HAL_I2C_IsDeviceReady+0x1e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005784:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005788:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800578a:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800578c:	4620      	mov	r0, r4
 800578e:	2319      	movs	r3, #25
 8005790:	2201      	movs	r2, #1
 8005792:	9500      	str	r5, [sp, #0]
 8005794:	f7ff fb04 	bl	8004da0 <I2C_WaitOnFlagUntilTimeout>
 8005798:	2800      	cmp	r0, #0
 800579a:	d1dc      	bne.n	8005756 <HAL_I2C_IsDeviceReady+0x102>
      I2C_Trials++;
 800579c:	3601      	adds	r6, #1
    while (I2C_Trials < Trials);
 800579e:	4556      	cmp	r6, sl
 80057a0:	d392      	bcc.n	80056c8 <HAL_I2C_IsDeviceReady+0x74>
    hi2c->State = HAL_I2C_STATE_READY;
 80057a2:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80057a6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80057aa:	e7d4      	b.n	8005756 <HAL_I2C_IsDeviceReady+0x102>
 80057ac:	00100002 	.word	0x00100002
 80057b0:	ffff0000 	.word	0xffff0000

080057b4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80057b4:	2201      	movs	r2, #1
 80057b6:	4b01      	ldr	r3, [pc, #4]	; (80057bc <HAL_PWR_EnableBkUpAccess+0x8>)
 80057b8:	621a      	str	r2, [r3, #32]
}
 80057ba:	4770      	bx	lr
 80057bc:	420e0000 	.word	0x420e0000

080057c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057c4:	4605      	mov	r5, r0
 80057c6:	b338      	cbz	r0, 8005818 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057c8:	6803      	ldr	r3, [r0, #0]
 80057ca:	07db      	lsls	r3, r3, #31
 80057cc:	d410      	bmi.n	80057f0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ce:	682b      	ldr	r3, [r5, #0]
 80057d0:	079f      	lsls	r7, r3, #30
 80057d2:	d45e      	bmi.n	8005892 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	0719      	lsls	r1, r3, #28
 80057d8:	f100 8095 	bmi.w	8005906 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057dc:	682b      	ldr	r3, [r5, #0]
 80057de:	075a      	lsls	r2, r3, #29
 80057e0:	f100 80c1 	bmi.w	8005966 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057e4:	69e8      	ldr	r0, [r5, #28]
 80057e6:	2800      	cmp	r0, #0
 80057e8:	f040 812c 	bne.w	8005a44 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80057ec:	2000      	movs	r0, #0
 80057ee:	e029      	b.n	8005844 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057f0:	4c90      	ldr	r4, [pc, #576]	; (8005a34 <HAL_RCC_OscConfig+0x274>)
 80057f2:	6863      	ldr	r3, [r4, #4]
 80057f4:	f003 030c 	and.w	r3, r3, #12
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d007      	beq.n	800580c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80057fc:	6863      	ldr	r3, [r4, #4]
 80057fe:	f003 030c 	and.w	r3, r3, #12
 8005802:	2b08      	cmp	r3, #8
 8005804:	d10a      	bne.n	800581c <HAL_RCC_OscConfig+0x5c>
 8005806:	6863      	ldr	r3, [r4, #4]
 8005808:	03de      	lsls	r6, r3, #15
 800580a:	d507      	bpl.n	800581c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	039c      	lsls	r4, r3, #14
 8005810:	d5dd      	bpl.n	80057ce <HAL_RCC_OscConfig+0xe>
 8005812:	686b      	ldr	r3, [r5, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1da      	bne.n	80057ce <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8005818:	2001      	movs	r0, #1
 800581a:	e013      	b.n	8005844 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800581c:	686b      	ldr	r3, [r5, #4]
 800581e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005822:	d112      	bne.n	800584a <HAL_RCC_OscConfig+0x8a>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800582a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800582c:	f7fe fd14 	bl	8004258 <HAL_GetTick>
 8005830:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	0398      	lsls	r0, r3, #14
 8005836:	d4ca      	bmi.n	80057ce <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005838:	f7fe fd0e 	bl	8004258 <HAL_GetTick>
 800583c:	1b80      	subs	r0, r0, r6
 800583e:	2864      	cmp	r0, #100	; 0x64
 8005840:	d9f7      	bls.n	8005832 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8005842:	2003      	movs	r0, #3
}
 8005844:	b002      	add	sp, #8
 8005846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800584a:	b99b      	cbnz	r3, 8005874 <HAL_RCC_OscConfig+0xb4>
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005852:	6023      	str	r3, [r4, #0]
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800585a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800585c:	f7fe fcfc 	bl	8004258 <HAL_GetTick>
 8005860:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	0399      	lsls	r1, r3, #14
 8005866:	d5b2      	bpl.n	80057ce <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005868:	f7fe fcf6 	bl	8004258 <HAL_GetTick>
 800586c:	1b80      	subs	r0, r0, r6
 800586e:	2864      	cmp	r0, #100	; 0x64
 8005870:	d9f7      	bls.n	8005862 <HAL_RCC_OscConfig+0xa2>
 8005872:	e7e6      	b.n	8005842 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	d103      	bne.n	8005884 <HAL_RCC_OscConfig+0xc4>
 800587c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	e7cf      	b.n	8005824 <HAL_RCC_OscConfig+0x64>
 8005884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005888:	6023      	str	r3, [r4, #0]
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005890:	e7cb      	b.n	800582a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005892:	4c68      	ldr	r4, [pc, #416]	; (8005a34 <HAL_RCC_OscConfig+0x274>)
 8005894:	6863      	ldr	r3, [r4, #4]
 8005896:	f013 0f0c 	tst.w	r3, #12
 800589a:	d007      	beq.n	80058ac <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800589c:	6863      	ldr	r3, [r4, #4]
 800589e:	f003 030c 	and.w	r3, r3, #12
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d110      	bne.n	80058c8 <HAL_RCC_OscConfig+0x108>
 80058a6:	6863      	ldr	r3, [r4, #4]
 80058a8:	03da      	lsls	r2, r3, #15
 80058aa:	d40d      	bmi.n	80058c8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	079b      	lsls	r3, r3, #30
 80058b0:	d502      	bpl.n	80058b8 <HAL_RCC_OscConfig+0xf8>
 80058b2:	692b      	ldr	r3, [r5, #16]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d1af      	bne.n	8005818 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	696a      	ldr	r2, [r5, #20]
 80058bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80058c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	e785      	b.n	80057d4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058c8:	692a      	ldr	r2, [r5, #16]
 80058ca:	4b5b      	ldr	r3, [pc, #364]	; (8005a38 <HAL_RCC_OscConfig+0x278>)
 80058cc:	b16a      	cbz	r2, 80058ea <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80058ce:	2201      	movs	r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80058d2:	f7fe fcc1 	bl	8004258 <HAL_GetTick>
 80058d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	079f      	lsls	r7, r3, #30
 80058dc:	d4ec      	bmi.n	80058b8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058de:	f7fe fcbb 	bl	8004258 <HAL_GetTick>
 80058e2:	1b80      	subs	r0, r0, r6
 80058e4:	2802      	cmp	r0, #2
 80058e6:	d9f7      	bls.n	80058d8 <HAL_RCC_OscConfig+0x118>
 80058e8:	e7ab      	b.n	8005842 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80058ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80058ec:	f7fe fcb4 	bl	8004258 <HAL_GetTick>
 80058f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	0798      	lsls	r0, r3, #30
 80058f6:	f57f af6d 	bpl.w	80057d4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058fa:	f7fe fcad 	bl	8004258 <HAL_GetTick>
 80058fe:	1b80      	subs	r0, r0, r6
 8005900:	2802      	cmp	r0, #2
 8005902:	d9f6      	bls.n	80058f2 <HAL_RCC_OscConfig+0x132>
 8005904:	e79d      	b.n	8005842 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005906:	69aa      	ldr	r2, [r5, #24]
 8005908:	4e4a      	ldr	r6, [pc, #296]	; (8005a34 <HAL_RCC_OscConfig+0x274>)
 800590a:	4b4b      	ldr	r3, [pc, #300]	; (8005a38 <HAL_RCC_OscConfig+0x278>)
 800590c:	b1e2      	cbz	r2, 8005948 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800590e:	2201      	movs	r2, #1
 8005910:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8005914:	f7fe fca0 	bl	8004258 <HAL_GetTick>
 8005918:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800591a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800591c:	079b      	lsls	r3, r3, #30
 800591e:	d50d      	bpl.n	800593c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005920:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005924:	4b45      	ldr	r3, [pc, #276]	; (8005a3c <HAL_RCC_OscConfig+0x27c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	fbb3 f3f2 	udiv	r3, r3, r2
 800592c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800592e:	bf00      	nop
  }
  while (Delay --);
 8005930:	9b01      	ldr	r3, [sp, #4]
 8005932:	1e5a      	subs	r2, r3, #1
 8005934:	9201      	str	r2, [sp, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f9      	bne.n	800592e <HAL_RCC_OscConfig+0x16e>
 800593a:	e74f      	b.n	80057dc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800593c:	f7fe fc8c 	bl	8004258 <HAL_GetTick>
 8005940:	1b00      	subs	r0, r0, r4
 8005942:	2802      	cmp	r0, #2
 8005944:	d9e9      	bls.n	800591a <HAL_RCC_OscConfig+0x15a>
 8005946:	e77c      	b.n	8005842 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8005948:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800594c:	f7fe fc84 	bl	8004258 <HAL_GetTick>
 8005950:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005952:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005954:	079f      	lsls	r7, r3, #30
 8005956:	f57f af41 	bpl.w	80057dc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800595a:	f7fe fc7d 	bl	8004258 <HAL_GetTick>
 800595e:	1b00      	subs	r0, r0, r4
 8005960:	2802      	cmp	r0, #2
 8005962:	d9f6      	bls.n	8005952 <HAL_RCC_OscConfig+0x192>
 8005964:	e76d      	b.n	8005842 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005966:	4c33      	ldr	r4, [pc, #204]	; (8005a34 <HAL_RCC_OscConfig+0x274>)
 8005968:	69e3      	ldr	r3, [r4, #28]
 800596a:	00d8      	lsls	r0, r3, #3
 800596c:	d424      	bmi.n	80059b8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800596e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005970:	69e3      	ldr	r3, [r4, #28]
 8005972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005976:	61e3      	str	r3, [r4, #28]
 8005978:	69e3      	ldr	r3, [r4, #28]
 800597a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005982:	4e2f      	ldr	r6, [pc, #188]	; (8005a40 <HAL_RCC_OscConfig+0x280>)
 8005984:	6833      	ldr	r3, [r6, #0]
 8005986:	05d9      	lsls	r1, r3, #23
 8005988:	d518      	bpl.n	80059bc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800598a:	68eb      	ldr	r3, [r5, #12]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d126      	bne.n	80059de <HAL_RCC_OscConfig+0x21e>
 8005990:	6a23      	ldr	r3, [r4, #32]
 8005992:	f043 0301 	orr.w	r3, r3, #1
 8005996:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005998:	f7fe fc5e 	bl	8004258 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800599c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80059a0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a2:	6a23      	ldr	r3, [r4, #32]
 80059a4:	079b      	lsls	r3, r3, #30
 80059a6:	d53f      	bpl.n	8005a28 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80059a8:	2f00      	cmp	r7, #0
 80059aa:	f43f af1b 	beq.w	80057e4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ae:	69e3      	ldr	r3, [r4, #28]
 80059b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059b4:	61e3      	str	r3, [r4, #28]
 80059b6:	e715      	b.n	80057e4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80059b8:	2700      	movs	r7, #0
 80059ba:	e7e2      	b.n	8005982 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059bc:	6833      	ldr	r3, [r6, #0]
 80059be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059c2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80059c4:	f7fe fc48 	bl	8004258 <HAL_GetTick>
 80059c8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ca:	6833      	ldr	r3, [r6, #0]
 80059cc:	05da      	lsls	r2, r3, #23
 80059ce:	d4dc      	bmi.n	800598a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d0:	f7fe fc42 	bl	8004258 <HAL_GetTick>
 80059d4:	eba0 0008 	sub.w	r0, r0, r8
 80059d8:	2864      	cmp	r0, #100	; 0x64
 80059da:	d9f6      	bls.n	80059ca <HAL_RCC_OscConfig+0x20a>
 80059dc:	e731      	b.n	8005842 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059de:	b9ab      	cbnz	r3, 8005a0c <HAL_RCC_OscConfig+0x24c>
 80059e0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059e6:	f023 0301 	bic.w	r3, r3, #1
 80059ea:	6223      	str	r3, [r4, #32]
 80059ec:	6a23      	ldr	r3, [r4, #32]
 80059ee:	f023 0304 	bic.w	r3, r3, #4
 80059f2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80059f4:	f7fe fc30 	bl	8004258 <HAL_GetTick>
 80059f8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059fa:	6a23      	ldr	r3, [r4, #32]
 80059fc:	0798      	lsls	r0, r3, #30
 80059fe:	d5d3      	bpl.n	80059a8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a00:	f7fe fc2a 	bl	8004258 <HAL_GetTick>
 8005a04:	1b80      	subs	r0, r0, r6
 8005a06:	4540      	cmp	r0, r8
 8005a08:	d9f7      	bls.n	80059fa <HAL_RCC_OscConfig+0x23a>
 8005a0a:	e71a      	b.n	8005842 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a0c:	2b05      	cmp	r3, #5
 8005a0e:	6a23      	ldr	r3, [r4, #32]
 8005a10:	d103      	bne.n	8005a1a <HAL_RCC_OscConfig+0x25a>
 8005a12:	f043 0304 	orr.w	r3, r3, #4
 8005a16:	6223      	str	r3, [r4, #32]
 8005a18:	e7ba      	b.n	8005990 <HAL_RCC_OscConfig+0x1d0>
 8005a1a:	f023 0301 	bic.w	r3, r3, #1
 8005a1e:	6223      	str	r3, [r4, #32]
 8005a20:	6a23      	ldr	r3, [r4, #32]
 8005a22:	f023 0304 	bic.w	r3, r3, #4
 8005a26:	e7b6      	b.n	8005996 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a28:	f7fe fc16 	bl	8004258 <HAL_GetTick>
 8005a2c:	1b80      	subs	r0, r0, r6
 8005a2e:	4540      	cmp	r0, r8
 8005a30:	d9b7      	bls.n	80059a2 <HAL_RCC_OscConfig+0x1e2>
 8005a32:	e706      	b.n	8005842 <HAL_RCC_OscConfig+0x82>
 8005a34:	40021000 	.word	0x40021000
 8005a38:	42420000 	.word	0x42420000
 8005a3c:	20000000 	.word	0x20000000
 8005a40:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a44:	4c2a      	ldr	r4, [pc, #168]	; (8005af0 <HAL_RCC_OscConfig+0x330>)
 8005a46:	6863      	ldr	r3, [r4, #4]
 8005a48:	f003 030c 	and.w	r3, r3, #12
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d03e      	beq.n	8005ace <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a50:	2200      	movs	r2, #0
 8005a52:	4b28      	ldr	r3, [pc, #160]	; (8005af4 <HAL_RCC_OscConfig+0x334>)
 8005a54:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005a56:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a58:	d12c      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8005a5a:	f7fe fbfd 	bl	8004258 <HAL_GetTick>
 8005a5e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	0199      	lsls	r1, r3, #6
 8005a64:	d420      	bmi.n	8005aa8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a66:	6a2b      	ldr	r3, [r5, #32]
 8005a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6c:	d105      	bne.n	8005a7a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a6e:	6862      	ldr	r2, [r4, #4]
 8005a70:	68a9      	ldr	r1, [r5, #8]
 8005a72:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005a76:	430a      	orrs	r2, r1
 8005a78:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a7a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8005a7c:	6862      	ldr	r2, [r4, #4]
 8005a7e:	430b      	orrs	r3, r1
 8005a80:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8005a84:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8005a86:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a88:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8005a8a:	4b1a      	ldr	r3, [pc, #104]	; (8005af4 <HAL_RCC_OscConfig+0x334>)
 8005a8c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005a8e:	f7fe fbe3 	bl	8004258 <HAL_GetTick>
 8005a92:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	019a      	lsls	r2, r3, #6
 8005a98:	f53f aea8 	bmi.w	80057ec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a9c:	f7fe fbdc 	bl	8004258 <HAL_GetTick>
 8005aa0:	1b40      	subs	r0, r0, r5
 8005aa2:	2802      	cmp	r0, #2
 8005aa4:	d9f6      	bls.n	8005a94 <HAL_RCC_OscConfig+0x2d4>
 8005aa6:	e6cc      	b.n	8005842 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aa8:	f7fe fbd6 	bl	8004258 <HAL_GetTick>
 8005aac:	1b80      	subs	r0, r0, r6
 8005aae:	2802      	cmp	r0, #2
 8005ab0:	d9d6      	bls.n	8005a60 <HAL_RCC_OscConfig+0x2a0>
 8005ab2:	e6c6      	b.n	8005842 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8005ab4:	f7fe fbd0 	bl	8004258 <HAL_GetTick>
 8005ab8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	019b      	lsls	r3, r3, #6
 8005abe:	f57f ae95 	bpl.w	80057ec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac2:	f7fe fbc9 	bl	8004258 <HAL_GetTick>
 8005ac6:	1b40      	subs	r0, r0, r5
 8005ac8:	2802      	cmp	r0, #2
 8005aca:	d9f6      	bls.n	8005aba <HAL_RCC_OscConfig+0x2fa>
 8005acc:	e6b9      	b.n	8005842 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ace:	2801      	cmp	r0, #1
 8005ad0:	f43f aeb8 	beq.w	8005844 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8005ad4:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ad6:	6a2a      	ldr	r2, [r5, #32]
 8005ad8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8005adc:	4291      	cmp	r1, r2
 8005ade:	f47f ae9b 	bne.w	8005818 <HAL_RCC_OscConfig+0x58>
 8005ae2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ae4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	f43f ae7f 	beq.w	80057ec <HAL_RCC_OscConfig+0x2c>
 8005aee:	e693      	b.n	8005818 <HAL_RCC_OscConfig+0x58>
 8005af0:	40021000 	.word	0x40021000
 8005af4:	42420000 	.word	0x42420000

08005af8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8005af8:	4a0d      	ldr	r2, [pc, #52]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x38>)
 8005afa:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005afc:	f003 010c 	and.w	r1, r3, #12
 8005b00:	2908      	cmp	r1, #8
 8005b02:	d112      	bne.n	8005b2a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b04:	480b      	ldr	r0, [pc, #44]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005b06:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b0a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b0c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b0e:	d509      	bpl.n	8005b24 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b10:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b12:	4a09      	ldr	r2, [pc, #36]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b14:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b18:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b1a:	4a08      	ldr	r2, [pc, #32]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x44>)
 8005b1c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005b22:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b24:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x48>)
 8005b26:	4358      	muls	r0, r3
 8005b28:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8005b2a:	4803      	ldr	r0, [pc, #12]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40021000 	.word	0x40021000
 8005b34:	0800a568 	.word	0x0800a568
 8005b38:	007a1200 	.word	0x007a1200
 8005b3c:	0800a578 	.word	0x0800a578
 8005b40:	003d0900 	.word	0x003d0900

08005b44 <HAL_RCC_ClockConfig>:
{
 8005b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b48:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	b910      	cbnz	r0, 8005b54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005b4e:	2001      	movs	r0, #1
}
 8005b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b54:	4a44      	ldr	r2, [pc, #272]	; (8005c68 <HAL_RCC_ClockConfig+0x124>)
 8005b56:	6813      	ldr	r3, [r2, #0]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	428b      	cmp	r3, r1
 8005b5e:	d328      	bcc.n	8005bb2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b60:	6821      	ldr	r1, [r4, #0]
 8005b62:	078e      	lsls	r6, r1, #30
 8005b64:	d430      	bmi.n	8005bc8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b66:	07ca      	lsls	r2, r1, #31
 8005b68:	d443      	bmi.n	8005bf2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b6a:	4a3f      	ldr	r2, [pc, #252]	; (8005c68 <HAL_RCC_ClockConfig+0x124>)
 8005b6c:	6813      	ldr	r3, [r2, #0]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	42ab      	cmp	r3, r5
 8005b74:	d865      	bhi.n	8005c42 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b76:	6822      	ldr	r2, [r4, #0]
 8005b78:	4d3c      	ldr	r5, [pc, #240]	; (8005c6c <HAL_RCC_ClockConfig+0x128>)
 8005b7a:	f012 0f04 	tst.w	r2, #4
 8005b7e:	d16c      	bne.n	8005c5a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b80:	0713      	lsls	r3, r2, #28
 8005b82:	d506      	bpl.n	8005b92 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b84:	686b      	ldr	r3, [r5, #4]
 8005b86:	6922      	ldr	r2, [r4, #16]
 8005b88:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005b8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005b90:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b92:	f7ff ffb1 	bl	8005af8 <HAL_RCC_GetSysClockFreq>
 8005b96:	686b      	ldr	r3, [r5, #4]
 8005b98:	4a35      	ldr	r2, [pc, #212]	; (8005c70 <HAL_RCC_ClockConfig+0x12c>)
 8005b9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005b9e:	5cd3      	ldrb	r3, [r2, r3]
 8005ba0:	40d8      	lsrs	r0, r3
 8005ba2:	4b34      	ldr	r3, [pc, #208]	; (8005c74 <HAL_RCC_ClockConfig+0x130>)
 8005ba4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005ba6:	4b34      	ldr	r3, [pc, #208]	; (8005c78 <HAL_RCC_ClockConfig+0x134>)
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	f7fd fa1b 	bl	8002fe4 <HAL_InitTick>
  return HAL_OK;
 8005bae:	2000      	movs	r0, #0
 8005bb0:	e7ce      	b.n	8005b50 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	f023 0307 	bic.w	r3, r3, #7
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bbc:	6813      	ldr	r3, [r2, #0]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	428b      	cmp	r3, r1
 8005bc4:	d1c3      	bne.n	8005b4e <HAL_RCC_ClockConfig+0xa>
 8005bc6:	e7cb      	b.n	8005b60 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc8:	4b28      	ldr	r3, [pc, #160]	; (8005c6c <HAL_RCC_ClockConfig+0x128>)
 8005bca:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bce:	bf1e      	ittt	ne
 8005bd0:	685a      	ldrne	r2, [r3, #4]
 8005bd2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8005bd6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bd8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bda:	bf42      	ittt	mi
 8005bdc:	685a      	ldrmi	r2, [r3, #4]
 8005bde:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8005be2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	68a0      	ldr	r0, [r4, #8]
 8005be8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005bec:	4302      	orrs	r2, r0
 8005bee:	605a      	str	r2, [r3, #4]
 8005bf0:	e7b9      	b.n	8005b66 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bf2:	6862      	ldr	r2, [r4, #4]
 8005bf4:	4e1d      	ldr	r6, [pc, #116]	; (8005c6c <HAL_RCC_ClockConfig+0x128>)
 8005bf6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bfa:	d11a      	bne.n	8005c32 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c00:	d0a5      	beq.n	8005b4e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c02:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c04:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c08:	f023 0303 	bic.w	r3, r3, #3
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005c10:	f7fe fb22 	bl	8004258 <HAL_GetTick>
 8005c14:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c16:	6873      	ldr	r3, [r6, #4]
 8005c18:	6862      	ldr	r2, [r4, #4]
 8005c1a:	f003 030c 	and.w	r3, r3, #12
 8005c1e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005c22:	d0a2      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c24:	f7fe fb18 	bl	8004258 <HAL_GetTick>
 8005c28:	1bc0      	subs	r0, r0, r7
 8005c2a:	4540      	cmp	r0, r8
 8005c2c:	d9f3      	bls.n	8005c16 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8005c2e:	2003      	movs	r0, #3
 8005c30:	e78e      	b.n	8005b50 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c32:	2a02      	cmp	r2, #2
 8005c34:	d102      	bne.n	8005c3c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c36:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005c3a:	e7e1      	b.n	8005c00 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c3c:	f013 0f02 	tst.w	r3, #2
 8005c40:	e7de      	b.n	8005c00 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c42:	6813      	ldr	r3, [r2, #0]
 8005c44:	f023 0307 	bic.w	r3, r3, #7
 8005c48:	432b      	orrs	r3, r5
 8005c4a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c4c:	6813      	ldr	r3, [r2, #0]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	42ab      	cmp	r3, r5
 8005c54:	f47f af7b 	bne.w	8005b4e <HAL_RCC_ClockConfig+0xa>
 8005c58:	e78d      	b.n	8005b76 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c5a:	686b      	ldr	r3, [r5, #4]
 8005c5c:	68e1      	ldr	r1, [r4, #12]
 8005c5e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005c62:	430b      	orrs	r3, r1
 8005c64:	606b      	str	r3, [r5, #4]
 8005c66:	e78b      	b.n	8005b80 <HAL_RCC_ClockConfig+0x3c>
 8005c68:	40022000 	.word	0x40022000
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	0800a34b 	.word	0x0800a34b
 8005c74:	20000000 	.word	0x20000000
 8005c78:	20000008 	.word	0x20000008

08005c7c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c7c:	4b04      	ldr	r3, [pc, #16]	; (8005c90 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005c7e:	4a05      	ldr	r2, [pc, #20]	; (8005c94 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005c86:	5cd3      	ldrb	r3, [r2, r3]
 8005c88:	4a03      	ldr	r2, [pc, #12]	; (8005c98 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005c8a:	6810      	ldr	r0, [r2, #0]
}
 8005c8c:	40d8      	lsrs	r0, r3
 8005c8e:	4770      	bx	lr
 8005c90:	40021000 	.word	0x40021000
 8005c94:	0800a35b 	.word	0x0800a35b
 8005c98:	20000000 	.word	0x20000000

08005c9c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c9c:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8005c9e:	4a05      	ldr	r2, [pc, #20]	; (8005cb4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005ca6:	5cd3      	ldrb	r3, [r2, r3]
 8005ca8:	4a03      	ldr	r2, [pc, #12]	; (8005cb8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005caa:	6810      	ldr	r0, [r2, #0]
}
 8005cac:	40d8      	lsrs	r0, r3
 8005cae:	4770      	bx	lr
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	0800a35b 	.word	0x0800a35b
 8005cb8:	20000000 	.word	0x20000000

08005cbc <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cbc:	230f      	movs	r3, #15
 8005cbe:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <HAL_RCC_GetClockConfig+0x34>)
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	f002 0203 	and.w	r2, r2, #3
 8005cc8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005cd0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005cd8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	08db      	lsrs	r3, r3, #3
 8005cde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ce2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ce4:	4b03      	ldr	r3, [pc, #12]	; (8005cf4 <HAL_RCC_GetClockConfig+0x38>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	600b      	str	r3, [r1, #0]
}
 8005cee:	4770      	bx	lr
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	40022000 	.word	0x40022000

08005cf8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005cf8:	6803      	ldr	r3, [r0, #0]
{
 8005cfa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005cfe:	07d9      	lsls	r1, r3, #31
{
 8005d00:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d02:	d521      	bpl.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d04:	4c36      	ldr	r4, [pc, #216]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d06:	69e3      	ldr	r3, [r4, #28]
 8005d08:	00da      	lsls	r2, r3, #3
 8005d0a:	d433      	bmi.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8005d0c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d0e:	69e3      	ldr	r3, [r4, #28]
 8005d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d14:	61e3      	str	r3, [r4, #28]
 8005d16:	69e3      	ldr	r3, [r4, #28]
 8005d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d20:	4f30      	ldr	r7, [pc, #192]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	05db      	lsls	r3, r3, #23
 8005d26:	d527      	bpl.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d28:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d2a:	686a      	ldr	r2, [r5, #4]
 8005d2c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005d30:	d136      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d32:	6a23      	ldr	r3, [r4, #32]
 8005d34:	686a      	ldr	r2, [r5, #4]
 8005d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d3e:	b11e      	cbz	r6, 8005d48 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d40:	69e3      	ldr	r3, [r4, #28]
 8005d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d46:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d48:	6828      	ldr	r0, [r5, #0]
 8005d4a:	0783      	lsls	r3, r0, #30
 8005d4c:	d506      	bpl.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d4e:	4924      	ldr	r1, [pc, #144]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d50:	68ab      	ldr	r3, [r5, #8]
 8005d52:	684a      	ldr	r2, [r1, #4]
 8005d54:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d5c:	f010 0010 	ands.w	r0, r0, #16
 8005d60:	d01b      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d62:	4a1f      	ldr	r2, [pc, #124]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d64:	68e9      	ldr	r1, [r5, #12]
 8005d66:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005d68:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d6a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	6053      	str	r3, [r2, #4]
 8005d72:	e012      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 8005d74:	2600      	movs	r6, #0
 8005d76:	e7d3      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d7e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005d80:	f7fe fa6a 	bl	8004258 <HAL_GetTick>
 8005d84:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	05d8      	lsls	r0, r3, #23
 8005d8a:	d4cd      	bmi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d8c:	f7fe fa64 	bl	8004258 <HAL_GetTick>
 8005d90:	eba0 0008 	sub.w	r0, r0, r8
 8005d94:	2864      	cmp	r0, #100	; 0x64
 8005d96:	d9f6      	bls.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 8005d98:	2003      	movs	r0, #3
}
 8005d9a:	b002      	add	sp, #8
 8005d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005da0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d0c4      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8005da8:	2001      	movs	r0, #1
 8005daa:	4a0f      	ldr	r2, [pc, #60]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dac:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dae:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005db2:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005db4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005db8:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8005dbc:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005dbe:	07d9      	lsls	r1, r3, #31
 8005dc0:	d5b7      	bpl.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8005dc2:	f7fe fa49 	bl	8004258 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005dca:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dcc:	6a23      	ldr	r3, [r4, #32]
 8005dce:	079a      	lsls	r2, r3, #30
 8005dd0:	d4af      	bmi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dd2:	f7fe fa41 	bl	8004258 <HAL_GetTick>
 8005dd6:	1bc0      	subs	r0, r0, r7
 8005dd8:	4540      	cmp	r0, r8
 8005dda:	d9f7      	bls.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ddc:	e7dc      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005dde:	bf00      	nop
 8005de0:	40021000 	.word	0x40021000
 8005de4:	40007000 	.word	0x40007000
 8005de8:	42420000 	.word	0x42420000

08005dec <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005dec:	2802      	cmp	r0, #2
{
 8005dee:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8005df0:	d044      	beq.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8005df2:	2810      	cmp	r0, #16
 8005df4:	d003      	beq.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8005df6:	2801      	cmp	r0, #1
 8005df8:	d022      	beq.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 8005dfa:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8005dfc:	e034      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 8005dfe:	4b25      	ldr	r3, [pc, #148]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005e00:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8005e08:	d02e      	beq.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e0a:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8005e0e:	4822      	ldr	r0, [pc, #136]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e10:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e12:	bf48      	it	mi
 8005e14:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e16:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e18:	bf41      	itttt	mi
 8005e1a:	4920      	ldrmi	r1, [pc, #128]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e1c:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8005e20:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005e22:	4a1f      	ldrmi	r2, [pc, #124]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005e24:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005e26:	bf4c      	ite	mi
 8005e28:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e2c:	4a1d      	ldrpl	r2, [pc, #116]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005e2e:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e30:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005e34:	d418      	bmi.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 8005e36:	2303      	movs	r3, #3
 8005e38:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005e3a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8005e3e:	e013      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005e40:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8005e44:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005e46:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005e48:	4019      	ands	r1, r3
 8005e4a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8005e4e:	d01e      	beq.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e58:	d107      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 8005e5a:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005e5e:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8005e60:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8005e64:	bf18      	it	ne
 8005e66:	4618      	movne	r0, r3
}
 8005e68:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e6e:	d1c4      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8005e70:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8005e72:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005e76:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005e7a:	e7f3      	b.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005e7c:	f7ff ff0e 	bl	8005c9c <HAL_RCC_GetPCLK2Freq>
 8005e80:	4b04      	ldr	r3, [pc, #16]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8005e88:	3301      	adds	r3, #1
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	e7d5      	b.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 8005e8e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005e92:	e7e9      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005e94:	40021000 	.word	0x40021000
 8005e98:	0800a57a 	.word	0x0800a57a
 8005e9c:	0800a58a 	.word	0x0800a58a
 8005ea0:	007a1200 	.word	0x007a1200
 8005ea4:	003d0900 	.word	0x003d0900

08005ea8 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005ea8:	6803      	ldr	r3, [r0, #0]
{
 8005eaa:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005eac:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005eae:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005eb0:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8005eb2:	b295      	uxth	r5, r2
 8005eb4:	b28c      	uxth	r4, r1
 8005eb6:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005eb8:	bf17      	itett	ne
 8005eba:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005ebc:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005ebe:	b280      	uxthne	r0, r0
 8005ec0:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005ec4:	bf08      	it	eq
 8005ec6:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8005eca:	bd30      	pop	{r4, r5, pc}

08005ecc <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005ecc:	6803      	ldr	r3, [r0, #0]
 8005ece:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8005ed2:	b29b      	uxth	r3, r3
}
 8005ed4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8005ed8:	4770      	bx	lr

08005eda <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8005eda:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005edc:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8005ede:	f000 000f 	and.w	r0, r0, #15
 8005ee2:	fb02 0003 	mla	r0, r2, r3, r0
}
 8005ee6:	b2c0      	uxtb	r0, r0
 8005ee8:	4770      	bx	lr

08005eea <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005eea:	b530      	push	{r4, r5, lr}
  year = 2000U + nYear;

  if (nMonth < 3U)
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005eec:	2517      	movs	r5, #23
 8005eee:	2309      	movs	r3, #9
 8005ef0:	434d      	muls	r5, r1
  if (nMonth < 3U)
 8005ef2:	2902      	cmp	r1, #2
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005ef4:	fbb5 f5f3 	udiv	r5, r5, r3
  year = 2000U + nYear;
 8005ef8:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
  if (nMonth < 3U)
 8005efc:	d817      	bhi.n	8005f2e <RTC_WeekDayNum+0x44>
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005efe:	f200 73cf 	addw	r3, r0, #1999	; 0x7cf
 8005f02:	1d10      	adds	r0, r2, #4
 8005f04:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005f08:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f0c:	4420      	add	r0, r4
 8005f0e:	4428      	add	r0, r5
 8005f10:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 8005f14:	4410      	add	r0, r2
 8005f16:	2264      	movs	r2, #100	; 0x64
 8005f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f1c:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005f1e:	2307      	movs	r3, #7
 8005f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f24:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005f28:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8005f2a:	b2c0      	uxtb	r0, r0
 8005f2c:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005f2e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005f32:	fbb4 f3f3 	udiv	r3, r4, r3
 8005f36:	1c90      	adds	r0, r2, #2
 8005f38:	4420      	add	r0, r4
 8005f3a:	4428      	add	r0, r5
 8005f3c:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8005f40:	4418      	add	r0, r3
 8005f42:	2364      	movs	r3, #100	; 0x64
 8005f44:	fbb4 f4f3 	udiv	r4, r4, r3
 8005f48:	1b00      	subs	r0, r0, r4
 8005f4a:	e7e8      	b.n	8005f1e <RTC_WeekDayNum+0x34>

08005f4c <RTC_EnterInitMode>:
{
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8005f50:	f7fe f982 	bl	8004258 <HAL_GetTick>
 8005f54:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	0692      	lsls	r2, r2, #26
 8005f5c:	d505      	bpl.n	8005f6a <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 8005f5e:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	f042 0210 	orr.w	r2, r2, #16
 8005f66:	605a      	str	r2, [r3, #4]
}
 8005f68:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005f6a:	f7fe f975 	bl	8004258 <HAL_GetTick>
 8005f6e:	1b40      	subs	r0, r0, r5
 8005f70:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005f74:	d9ef      	bls.n	8005f56 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8005f76:	2003      	movs	r0, #3
 8005f78:	e7f6      	b.n	8005f68 <RTC_EnterInitMode+0x1c>

08005f7a <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f7a:	6802      	ldr	r2, [r0, #0]
{
 8005f7c:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f7e:	6853      	ldr	r3, [r2, #4]
{
 8005f80:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f82:	f023 0310 	bic.w	r3, r3, #16
 8005f86:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8005f88:	f7fe f966 	bl	8004258 <HAL_GetTick>
 8005f8c:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	069b      	lsls	r3, r3, #26
 8005f94:	d501      	bpl.n	8005f9a <RTC_ExitInitMode+0x20>
  return HAL_OK;
 8005f96:	2000      	movs	r0, #0
}
 8005f98:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005f9a:	f7fe f95d 	bl	8004258 <HAL_GetTick>
 8005f9e:	1b40      	subs	r0, r0, r5
 8005fa0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005fa4:	d9f3      	bls.n	8005f8e <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8005fa6:	2003      	movs	r0, #3
 8005fa8:	e7f6      	b.n	8005f98 <RTC_ExitInitMode+0x1e>

08005faa <RTC_WriteTimeCounter>:
{
 8005faa:	b538      	push	{r3, r4, r5, lr}
 8005fac:	4605      	mov	r5, r0
 8005fae:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fb0:	f7ff ffcc 	bl	8005f4c <RTC_EnterInitMode>
 8005fb4:	b958      	cbnz	r0, 8005fce <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005fb6:	682b      	ldr	r3, [r5, #0]
 8005fb8:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005fba:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005fbc:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005fbe:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005fc0:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005fc2:	f7ff ffda 	bl	8005f7a <RTC_ExitInitMode>
    status = HAL_ERROR;
 8005fc6:	3800      	subs	r0, #0
 8005fc8:	bf18      	it	ne
 8005fca:	2001      	movne	r0, #1
}
 8005fcc:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8005fce:	2001      	movs	r0, #1
 8005fd0:	e7fc      	b.n	8005fcc <RTC_WriteTimeCounter+0x22>

08005fd2 <RTC_WriteAlarmCounter>:
{
 8005fd2:	b538      	push	{r3, r4, r5, lr}
 8005fd4:	4605      	mov	r5, r0
 8005fd6:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fd8:	f7ff ffb8 	bl	8005f4c <RTC_EnterInitMode>
 8005fdc:	b958      	cbnz	r0, 8005ff6 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005fde:	682b      	ldr	r3, [r5, #0]
 8005fe0:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005fe2:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005fe4:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005fe6:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005fe8:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005fea:	f7ff ffc6 	bl	8005f7a <RTC_ExitInitMode>
    status = HAL_ERROR;
 8005fee:	3800      	subs	r0, #0
 8005ff0:	bf18      	it	ne
 8005ff2:	2001      	movne	r0, #1
}
 8005ff4:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8005ff6:	2001      	movs	r0, #1
 8005ff8:	e7fc      	b.n	8005ff4 <RTC_WriteAlarmCounter+0x22>

08005ffa <HAL_RTC_SetTime>:
{
 8005ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	b1e0      	cbz	r0, 800603a <HAL_RTC_SetTime+0x40>
 8006000:	b1d9      	cbz	r1, 800603a <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8006002:	7c03      	ldrb	r3, [r0, #16]
 8006004:	2502      	movs	r5, #2
 8006006:	2b01      	cmp	r3, #1
 8006008:	d045      	beq.n	8006096 <HAL_RTC_SetTime+0x9c>
 800600a:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800600c:	7445      	strb	r5, [r0, #17]
  __HAL_LOCK(hrtc);
 800600e:	7403      	strb	r3, [r0, #16]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006010:	7808      	ldrb	r0, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006012:	784e      	ldrb	r6, [r1, #1]
                              ((uint32_t)sTime->Seconds));
 8006014:	788f      	ldrb	r7, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 8006016:	b992      	cbnz	r2, 800603e <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006018:	233c      	movs	r3, #60	; 0x3c
 800601a:	435e      	muls	r6, r3
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800601c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006020:	fb03 6600 	mla	r6, r3, r0, r6
 8006024:	443e      	add	r6, r7
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006026:	4631      	mov	r1, r6
 8006028:	4620      	mov	r0, r4
 800602a:	f7ff ffbe 	bl	8005faa <RTC_WriteTimeCounter>
 800602e:	4605      	mov	r5, r0
 8006030:	b1b8      	cbz	r0, 8006062 <HAL_RTC_SetTime+0x68>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006032:	2304      	movs	r3, #4
 8006034:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8006036:	2300      	movs	r3, #0
 8006038:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 800603a:	2501      	movs	r5, #1
 800603c:	e02b      	b.n	8006096 <HAL_RTC_SetTime+0x9c>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800603e:	f7ff ff4c 	bl	8005eda <RTC_Bcd2ToByte>
 8006042:	4605      	mov	r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006044:	4630      	mov	r0, r6
 8006046:	f7ff ff48 	bl	8005eda <RTC_Bcd2ToByte>
 800604a:	233c      	movs	r3, #60	; 0x3c
 800604c:	fb03 f100 	mul.w	r1, r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006050:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006054:	4638      	mov	r0, r7
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006056:	fb03 1105 	mla	r1, r3, r5, r1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800605a:	f7ff ff3e 	bl	8005eda <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800605e:	1846      	adds	r6, r0, r1
 8006060:	e7e1      	b.n	8006026 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006062:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006064:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006066:	6853      	ldr	r3, [r2, #4]
 8006068:	f023 0305 	bic.w	r3, r3, #5
 800606c:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800606e:	f7ff ff2d 	bl	8005ecc <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 8006072:	4286      	cmp	r6, r0
 8006074:	d90b      	bls.n	800608e <HAL_RTC_SetTime+0x94>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006076:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 800607a:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800607e:	4620      	mov	r0, r4
 8006080:	f7ff ffa7 	bl	8005fd2 <RTC_WriteAlarmCounter>
 8006084:	b118      	cbz	r0, 800608e <HAL_RTC_SetTime+0x94>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006086:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8006088:	7425      	strb	r5, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 800608a:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 800608c:	e7d5      	b.n	800603a <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 800608e:	2301      	movs	r3, #1
 8006090:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8006092:	2300      	movs	r3, #0
 8006094:	7423      	strb	r3, [r4, #16]
}
 8006096:	4628      	mov	r0, r5
 8006098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800609c <HAL_RTC_SetDate>:
{
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 80060a0:	4604      	mov	r4, r0
 80060a2:	b348      	cbz	r0, 80060f8 <HAL_RTC_SetDate+0x5c>
 80060a4:	b341      	cbz	r1, 80060f8 <HAL_RTC_SetDate+0x5c>
  __HAL_LOCK(hrtc);
 80060a6:	7c03      	ldrb	r3, [r0, #16]
 80060a8:	2002      	movs	r0, #2
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d047      	beq.n	800613e <HAL_RTC_SetDate+0xa2>
 80060ae:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80060b0:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 80060b2:	7423      	strb	r3, [r4, #16]
  if (Format == RTC_FORMAT_BIN)
 80060b4:	78c8      	ldrb	r0, [r1, #3]
 80060b6:	bb0a      	cbnz	r2, 80060fc <HAL_RTC_SetDate+0x60>
    hrtc->DateToUpdate.Year  = sDate->Year;
 80060b8:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80060ba:	784b      	ldrb	r3, [r1, #1]
 80060bc:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80060be:	788a      	ldrb	r2, [r1, #2]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80060c0:	7b61      	ldrb	r1, [r4, #13]
 80060c2:	7be0      	ldrb	r0, [r4, #15]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80060c4:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80060c6:	f7ff ff10 	bl	8005eea <RTC_WeekDayNum>
 80060ca:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80060cc:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 80060ce:	4620      	mov	r0, r4
 80060d0:	f7ff feea 	bl	8005ea8 <RTC_ReadTimeCounter>
  if (hours > 24U)
 80060d4:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <HAL_RTC_SetDate+0xa4>)
 80060d6:	4298      	cmp	r0, r3
 80060d8:	d92d      	bls.n	8006136 <HAL_RTC_SetDate+0x9a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80060da:	4d1a      	ldr	r5, [pc, #104]	; (8006144 <HAL_RTC_SetDate+0xa8>)
 80060dc:	fbb0 f2f5 	udiv	r2, r0, r5
 80060e0:	fb05 0512 	mls	r5, r5, r2, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80060e4:	4620      	mov	r0, r4
 80060e6:	4629      	mov	r1, r5
 80060e8:	f7ff ff5f 	bl	8005faa <RTC_WriteTimeCounter>
 80060ec:	4606      	mov	r6, r0
 80060ee:	b188      	cbz	r0, 8006114 <HAL_RTC_SetDate+0x78>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80060f0:	2304      	movs	r3, #4
 80060f2:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 80060f4:	2300      	movs	r3, #0
 80060f6:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 80060f8:	2001      	movs	r0, #1
 80060fa:	e020      	b.n	800613e <HAL_RTC_SetDate+0xa2>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80060fc:	f7ff feed 	bl	8005eda <RTC_Bcd2ToByte>
 8006100:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006102:	7848      	ldrb	r0, [r1, #1]
 8006104:	f7ff fee9 	bl	8005eda <RTC_Bcd2ToByte>
 8006108:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800610a:	7888      	ldrb	r0, [r1, #2]
 800610c:	f7ff fee5 	bl	8005eda <RTC_Bcd2ToByte>
 8006110:	4602      	mov	r2, r0
 8006112:	e7d5      	b.n	80060c0 <HAL_RTC_SetDate+0x24>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006114:	4620      	mov	r0, r4
 8006116:	f7ff fed9 	bl	8005ecc <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 800611a:	4285      	cmp	r5, r0
 800611c:	d90b      	bls.n	8006136 <HAL_RTC_SetDate+0x9a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800611e:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8006122:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8006126:	4620      	mov	r0, r4
 8006128:	f7ff ff53 	bl	8005fd2 <RTC_WriteAlarmCounter>
 800612c:	b118      	cbz	r0, 8006136 <HAL_RTC_SetDate+0x9a>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800612e:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8006130:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006132:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8006134:	e7e0      	b.n	80060f8 <HAL_RTC_SetDate+0x5c>
  hrtc->State = HAL_RTC_STATE_READY ;
 8006136:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8006138:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 800613a:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 800613c:	7420      	strb	r0, [r4, #16]
}
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	00015f8f 	.word	0x00015f8f
 8006144:	00015180 	.word	0x00015180

08006148 <HAL_RTC_WaitForSynchro>:
{
 8006148:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 800614a:	4604      	mov	r4, r0
 800614c:	b1a8      	cbz	r0, 800617a <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800614e:	6802      	ldr	r2, [r0, #0]
 8006150:	6853      	ldr	r3, [r2, #4]
 8006152:	f023 0308 	bic.w	r3, r3, #8
 8006156:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8006158:	f7fe f87e 	bl	8004258 <HAL_GetTick>
 800615c:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	071b      	lsls	r3, r3, #28
 8006164:	d501      	bpl.n	800616a <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8006166:	2000      	movs	r0, #0
}
 8006168:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800616a:	f7fe f875 	bl	8004258 <HAL_GetTick>
 800616e:	1b40      	subs	r0, r0, r5
 8006170:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006174:	d9f3      	bls.n	800615e <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8006176:	2003      	movs	r0, #3
 8006178:	e7f6      	b.n	8006168 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 800617a:	2001      	movs	r0, #1
 800617c:	e7f4      	b.n	8006168 <HAL_RTC_WaitForSynchro+0x20>
	...

08006180 <HAL_RTC_Init>:
{
 8006180:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8006182:	4604      	mov	r4, r0
 8006184:	b170      	cbz	r0, 80061a4 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006186:	7c43      	ldrb	r3, [r0, #17]
 8006188:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800618c:	b913      	cbnz	r3, 8006194 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800618e:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8006190:	f7fc fdae 	bl	8002cf0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006194:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006196:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006198:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800619a:	f7ff ffd5 	bl	8006148 <HAL_RTC_WaitForSynchro>
 800619e:	b118      	cbz	r0, 80061a8 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80061a0:	2304      	movs	r3, #4
 80061a2:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80061a4:	2001      	movs	r0, #1
 80061a6:	e02f      	b.n	8006208 <HAL_RTC_Init+0x88>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80061a8:	4620      	mov	r0, r4
 80061aa:	f7ff fecf 	bl	8005f4c <RTC_EnterInitMode>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d1f6      	bne.n	80061a0 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80061b2:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80061b4:	68a1      	ldr	r1, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80061b6:	6853      	ldr	r3, [r2, #4]
 80061b8:	f023 0307 	bic.w	r3, r3, #7
 80061bc:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80061be:	4a13      	ldr	r2, [pc, #76]	; (800620c <HAL_RTC_Init+0x8c>)
 80061c0:	b119      	cbz	r1, 80061ca <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80061c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80061c4:	f023 0301 	bic.w	r3, r3, #1
 80061c8:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80061ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80061cc:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80061d0:	430b      	orrs	r3, r1
 80061d2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80061d4:	6860      	ldr	r0, [r4, #4]
 80061d6:	1c43      	adds	r3, r0, #1
 80061d8:	d105      	bne.n	80061e6 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80061da:	2001      	movs	r0, #1
 80061dc:	f7ff fe06 	bl	8005dec <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d0dd      	beq.n	80061a0 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 80061e4:	3801      	subs	r0, #1
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	f3c0 4203 	ubfx	r2, r0, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80061ec:	b280      	uxth	r0, r0
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80061ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80061f0:	60d8      	str	r0, [r3, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80061f2:	4620      	mov	r0, r4
 80061f4:	f7ff fec1 	bl	8005f7a <RTC_ExitInitMode>
 80061f8:	2301      	movs	r3, #1
 80061fa:	b110      	cbz	r0, 8006202 <HAL_RTC_Init+0x82>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80061fc:	2204      	movs	r2, #4
 80061fe:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8006200:	e7d0      	b.n	80061a4 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006202:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006204:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8006206:	7463      	strb	r3, [r4, #17]
}
 8006208:	bd10      	pop	{r4, pc}
 800620a:	bf00      	nop
 800620c:	40006c00 	.word	0x40006c00

08006210 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006210:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006212:	6a02      	ldr	r2, [r0, #32]
{
 8006214:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006216:	f022 0201 	bic.w	r2, r2, #1
 800621a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800621c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800621e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006220:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006222:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006226:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006228:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800622a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800622e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006230:	4d0a      	ldr	r5, [pc, #40]	; (800625c <TIM_OC1_SetConfig+0x4c>)
 8006232:	42a8      	cmp	r0, r5
 8006234:	d10b      	bne.n	800624e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006236:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006238:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800623c:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800623e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006242:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006246:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8006248:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800624c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800624e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006250:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006252:	684a      	ldr	r2, [r1, #4]
 8006254:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006256:	6203      	str	r3, [r0, #32]
}
 8006258:	bd70      	pop	{r4, r5, r6, pc}
 800625a:	bf00      	nop
 800625c:	40012c00 	.word	0x40012c00

08006260 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006260:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006262:	6a02      	ldr	r2, [r0, #32]
{
 8006264:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006266:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800626a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800626c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800626e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006270:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006272:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006276:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006278:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800627a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800627e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006282:	4d0b      	ldr	r5, [pc, #44]	; (80062b0 <TIM_OC3_SetConfig+0x50>)
 8006284:	42a8      	cmp	r0, r5
 8006286:	d10d      	bne.n	80062a4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006288:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800628a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800628e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006292:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006296:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800629a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800629c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062a0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062a6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062a8:	684a      	ldr	r2, [r1, #4]
 80062aa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ac:	6203      	str	r3, [r0, #32]
}
 80062ae:	bd70      	pop	{r4, r5, r6, pc}
 80062b0:	40012c00 	.word	0x40012c00

080062b4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b4:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062b6:	6a02      	ldr	r2, [r0, #32]
{
 80062b8:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062be:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062c2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062c6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062ce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80062d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062d4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d8:	4d06      	ldr	r5, [pc, #24]	; (80062f4 <TIM_OC4_SetConfig+0x40>)
 80062da:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062dc:	bf02      	ittt	eq
 80062de:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062e0:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062e4:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062ec:	684a      	ldr	r2, [r1, #4]
 80062ee:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f0:	6203      	str	r3, [r0, #32]
}
 80062f2:	bd30      	pop	{r4, r5, pc}
 80062f4:	40012c00 	.word	0x40012c00

080062f8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80062f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d120      	bne.n	8006342 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	2302      	movs	r3, #2
 8006302:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006306:	6803      	ldr	r3, [r0, #0]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	f042 0201 	orr.w	r2, r2, #1
 800630e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006310:	4a0d      	ldr	r2, [pc, #52]	; (8006348 <HAL_TIM_Base_Start_IT+0x50>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00a      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x34>
 8006316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631a:	d007      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x34>
 800631c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x34>
 8006324:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006328:	4293      	cmp	r3, r2
 800632a:	d104      	bne.n	8006336 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800632c:	689a      	ldr	r2, [r3, #8]
 800632e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006332:	2a06      	cmp	r2, #6
 8006334:	d003      	beq.n	800633e <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	f042 0201 	orr.w	r2, r2, #1
 800633c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800633e:	2000      	movs	r0, #0
}
 8006340:	4770      	bx	lr
    return HAL_ERROR;
 8006342:	2001      	movs	r0, #1
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40012c00 	.word	0x40012c00

0800634c <HAL_TIM_PWM_MspInit>:
 800634c:	4770      	bx	lr

0800634e <HAL_TIM_OC_DelayElapsedCallback>:
 800634e:	4770      	bx	lr

08006350 <HAL_TIM_IC_CaptureCallback>:
 8006350:	4770      	bx	lr

08006352 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006352:	4770      	bx	lr

08006354 <HAL_TIM_TriggerCallback>:
 8006354:	4770      	bx	lr

08006356 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006356:	6803      	ldr	r3, [r0, #0]
{
 8006358:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800635a:	691a      	ldr	r2, [r3, #16]
{
 800635c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800635e:	0791      	lsls	r1, r2, #30
 8006360:	d50e      	bpl.n	8006380 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	0792      	lsls	r2, r2, #30
 8006366:	d50b      	bpl.n	8006380 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006368:	f06f 0202 	mvn.w	r2, #2
 800636c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800636e:	2201      	movs	r2, #1
 8006370:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	079b      	lsls	r3, r3, #30
 8006376:	d077      	beq.n	8006468 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8006378:	f7ff ffea 	bl	8006350 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637c:	2300      	movs	r3, #0
 800637e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	0750      	lsls	r0, r2, #29
 8006386:	d510      	bpl.n	80063aa <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	0751      	lsls	r1, r2, #29
 800638c:	d50d      	bpl.n	80063aa <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800638e:	f06f 0204 	mvn.w	r2, #4
 8006392:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006394:	2202      	movs	r2, #2
 8006396:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006398:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800639a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800639c:	f413 7f40 	tst.w	r3, #768	; 0x300
 80063a0:	d068      	beq.n	8006474 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80063a2:	f7ff ffd5 	bl	8006350 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a6:	2300      	movs	r3, #0
 80063a8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	691a      	ldr	r2, [r3, #16]
 80063ae:	0712      	lsls	r2, r2, #28
 80063b0:	d50f      	bpl.n	80063d2 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	0710      	lsls	r0, r2, #28
 80063b6:	d50c      	bpl.n	80063d2 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063b8:	f06f 0208 	mvn.w	r2, #8
 80063bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063be:	2204      	movs	r2, #4
 80063c0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063c2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80063c4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063c6:	0799      	lsls	r1, r3, #30
 80063c8:	d05a      	beq.n	8006480 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80063ca:	f7ff ffc1 	bl	8006350 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ce:	2300      	movs	r3, #0
 80063d0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	691a      	ldr	r2, [r3, #16]
 80063d6:	06d2      	lsls	r2, r2, #27
 80063d8:	d510      	bpl.n	80063fc <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	06d0      	lsls	r0, r2, #27
 80063de:	d50d      	bpl.n	80063fc <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063e0:	f06f 0210 	mvn.w	r2, #16
 80063e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063e6:	2208      	movs	r2, #8
 80063e8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063ea:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80063ec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063ee:	f413 7f40 	tst.w	r3, #768	; 0x300
 80063f2:	d04b      	beq.n	800648c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80063f4:	f7ff ffac 	bl	8006350 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f8:	2300      	movs	r3, #0
 80063fa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	07d1      	lsls	r1, r2, #31
 8006402:	d508      	bpl.n	8006416 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	07d2      	lsls	r2, r2, #31
 8006408:	d505      	bpl.n	8006416 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800640a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800640e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006410:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006412:	f7fc f99b 	bl	800274c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	0610      	lsls	r0, r2, #24
 800641c:	d508      	bpl.n	8006430 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	0611      	lsls	r1, r2, #24
 8006422:	d505      	bpl.n	8006430 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006424:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8006428:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800642a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800642c:	f000 fab9 	bl	80069a2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	0652      	lsls	r2, r2, #25
 8006436:	d508      	bpl.n	800644a <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	0650      	lsls	r0, r2, #25
 800643c:	d505      	bpl.n	800644a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800643e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8006442:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006444:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006446:	f7ff ff85 	bl	8006354 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	0691      	lsls	r1, r2, #26
 8006450:	d522      	bpl.n	8006498 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	0692      	lsls	r2, r2, #26
 8006456:	d51f      	bpl.n	8006498 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006458:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800645c:	4620      	mov	r0, r4
}
 800645e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006462:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006464:	f000 ba9c 	b.w	80069a0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006468:	f7ff ff71 	bl	800634e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800646c:	4620      	mov	r0, r4
 800646e:	f7ff ff70 	bl	8006352 <HAL_TIM_PWM_PulseFinishedCallback>
 8006472:	e783      	b.n	800637c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006474:	f7ff ff6b 	bl	800634e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006478:	4620      	mov	r0, r4
 800647a:	f7ff ff6a 	bl	8006352 <HAL_TIM_PWM_PulseFinishedCallback>
 800647e:	e792      	b.n	80063a6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006480:	f7ff ff65 	bl	800634e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006484:	4620      	mov	r0, r4
 8006486:	f7ff ff64 	bl	8006352 <HAL_TIM_PWM_PulseFinishedCallback>
 800648a:	e7a0      	b.n	80063ce <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648c:	f7ff ff5f 	bl	800634e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006490:	4620      	mov	r0, r4
 8006492:	f7ff ff5e 	bl	8006352 <HAL_TIM_PWM_PulseFinishedCallback>
 8006496:	e7af      	b.n	80063f8 <HAL_TIM_IRQHandler+0xa2>
}
 8006498:	bd10      	pop	{r4, pc}
	...

0800649c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800649c:	4a1a      	ldr	r2, [pc, #104]	; (8006508 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800649e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064a0:	4290      	cmp	r0, r2
 80064a2:	d00a      	beq.n	80064ba <TIM_Base_SetConfig+0x1e>
 80064a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80064a8:	d007      	beq.n	80064ba <TIM_Base_SetConfig+0x1e>
 80064aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80064ae:	4290      	cmp	r0, r2
 80064b0:	d003      	beq.n	80064ba <TIM_Base_SetConfig+0x1e>
 80064b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064b6:	4290      	cmp	r0, r2
 80064b8:	d115      	bne.n	80064e6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80064ba:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80064c0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064c2:	4a11      	ldr	r2, [pc, #68]	; (8006508 <TIM_Base_SetConfig+0x6c>)
 80064c4:	4290      	cmp	r0, r2
 80064c6:	d00a      	beq.n	80064de <TIM_Base_SetConfig+0x42>
 80064c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80064cc:	d007      	beq.n	80064de <TIM_Base_SetConfig+0x42>
 80064ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80064d2:	4290      	cmp	r0, r2
 80064d4:	d003      	beq.n	80064de <TIM_Base_SetConfig+0x42>
 80064d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064da:	4290      	cmp	r0, r2
 80064dc:	d103      	bne.n	80064e6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064de:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80064e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e6:	694a      	ldr	r2, [r1, #20]
 80064e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80064ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f0:	688b      	ldr	r3, [r1, #8]
 80064f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80064f4:	680b      	ldr	r3, [r1, #0]
 80064f6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064f8:	4b03      	ldr	r3, [pc, #12]	; (8006508 <TIM_Base_SetConfig+0x6c>)
 80064fa:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80064fc:	bf04      	itt	eq
 80064fe:	690b      	ldreq	r3, [r1, #16]
 8006500:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006502:	2301      	movs	r3, #1
 8006504:	6143      	str	r3, [r0, #20]
}
 8006506:	4770      	bx	lr
 8006508:	40012c00 	.word	0x40012c00

0800650c <HAL_TIM_Base_Init>:
{
 800650c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800650e:	4604      	mov	r4, r0
 8006510:	b330      	cbz	r0, 8006560 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006512:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006516:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800651a:	b91b      	cbnz	r3, 8006524 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800651c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006520:	f7fc fc04 	bl	8002d2c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006524:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006526:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006528:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800652c:	1d21      	adds	r1, r4, #4
 800652e:	f7ff ffb5 	bl	800649c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006532:	2301      	movs	r3, #1
  return HAL_OK;
 8006534:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006536:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800653a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800653e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006542:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006546:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800654a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800654e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006552:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800655a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800655e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006560:	2001      	movs	r0, #1
 8006562:	e7fc      	b.n	800655e <HAL_TIM_Base_Init+0x52>

08006564 <HAL_TIM_PWM_Init>:
{
 8006564:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006566:	4604      	mov	r4, r0
 8006568:	b330      	cbz	r0, 80065b8 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800656a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800656e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006572:	b91b      	cbnz	r3, 800657c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006574:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006578:	f7ff fee8 	bl	800634c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800657e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006584:	1d21      	adds	r1, r4, #4
 8006586:	f7ff ff89 	bl	800649c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800658a:	2301      	movs	r3, #1
  return HAL_OK;
 800658c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800658e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006592:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006596:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800659a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800659e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80065ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80065b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80065b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80065b8:	2001      	movs	r0, #1
 80065ba:	e7fc      	b.n	80065b6 <HAL_TIM_PWM_Init+0x52>

080065bc <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80065bc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065be:	6a02      	ldr	r2, [r0, #32]
{
 80065c0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065c2:	f022 0210 	bic.w	r2, r2, #16
 80065c6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80065c8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80065ca:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065ce:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065d6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80065d8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065e0:	4d0b      	ldr	r5, [pc, #44]	; (8006610 <TIM_OC2_SetConfig+0x54>)
 80065e2:	42a8      	cmp	r0, r5
 80065e4:	d10d      	bne.n	8006602 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065e6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80065e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065f0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065f4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80065f8:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80065fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065fe:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8006602:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006604:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006606:	684a      	ldr	r2, [r1, #4]
 8006608:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800660a:	6203      	str	r3, [r0, #32]
}
 800660c:	bd70      	pop	{r4, r5, r6, pc}
 800660e:	bf00      	nop
 8006610:	40012c00 	.word	0x40012c00

08006614 <HAL_TIM_PWM_ConfigChannel>:
{
 8006614:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8006616:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800661a:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 800661c:	2b01      	cmp	r3, #1
 800661e:	d050      	beq.n	80066c2 <HAL_TIM_PWM_ConfigChannel+0xae>
 8006620:	2301      	movs	r3, #1
  switch (Channel)
 8006622:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8006624:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006628:	d03b      	beq.n	80066a2 <HAL_TIM_PWM_ConfigChannel+0x8e>
 800662a:	d807      	bhi.n	800663c <HAL_TIM_PWM_ConfigChannel+0x28>
 800662c:	b1c2      	cbz	r2, 8006660 <HAL_TIM_PWM_ConfigChannel+0x4c>
 800662e:	2a04      	cmp	r2, #4
 8006630:	d027      	beq.n	8006682 <HAL_TIM_PWM_ConfigChannel+0x6e>
 8006632:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8006634:	2300      	movs	r3, #0
 8006636:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800663a:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800663c:	2a0c      	cmp	r2, #12
 800663e:	d1f8      	bne.n	8006632 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006640:	6800      	ldr	r0, [r0, #0]
 8006642:	f7ff fe37 	bl	80062b4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006646:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006648:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800664a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800664e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006650:	69c3      	ldr	r3, [r0, #28]
 8006652:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006656:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006658:	69c3      	ldr	r3, [r0, #28]
 800665a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800665e:	e02e      	b.n	80066be <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006660:	6800      	ldr	r0, [r0, #0]
 8006662:	f7ff fdd5 	bl	8006210 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006666:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006668:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800666a:	f043 0308 	orr.w	r3, r3, #8
 800666e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006670:	6983      	ldr	r3, [r0, #24]
 8006672:	f023 0304 	bic.w	r3, r3, #4
 8006676:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006678:	6983      	ldr	r3, [r0, #24]
 800667a:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800667c:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800667e:	2000      	movs	r0, #0
      break;
 8006680:	e7d8      	b.n	8006634 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006682:	6800      	ldr	r0, [r0, #0]
 8006684:	f7ff ff9a 	bl	80065bc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006688:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800668a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800668c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006690:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006692:	6983      	ldr	r3, [r0, #24]
 8006694:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006698:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800669a:	6983      	ldr	r3, [r0, #24]
 800669c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80066a0:	e7ec      	b.n	800667c <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066a2:	6800      	ldr	r0, [r0, #0]
 80066a4:	f7ff fddc 	bl	8006260 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066a8:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066aa:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066ac:	f043 0308 	orr.w	r3, r3, #8
 80066b0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066b2:	69c3      	ldr	r3, [r0, #28]
 80066b4:	f023 0304 	bic.w	r3, r3, #4
 80066b8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066ba:	69c3      	ldr	r3, [r0, #28]
 80066bc:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066be:	61c3      	str	r3, [r0, #28]
 80066c0:	e7dd      	b.n	800667e <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 80066c2:	2002      	movs	r0, #2
 80066c4:	e7b9      	b.n	800663a <HAL_TIM_PWM_ConfigChannel+0x26>

080066c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066c6:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066c8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066ca:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066cc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066d0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80066d4:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066d6:	6082      	str	r2, [r0, #8]
}
 80066d8:	bd10      	pop	{r4, pc}

080066da <HAL_TIM_ConfigClockSource>:
{
 80066da:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80066dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80066e0:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	f04f 0002 	mov.w	r0, #2
 80066e8:	f000 808e 	beq.w	8006808 <HAL_TIM_ConfigClockSource+0x12e>
 80066ec:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80066ee:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80066f2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80066f4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80066f8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8006702:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006704:	680b      	ldr	r3, [r1, #0]
 8006706:	2b60      	cmp	r3, #96	; 0x60
 8006708:	d04f      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0xd0>
 800670a:	d832      	bhi.n	8006772 <HAL_TIM_ConfigClockSource+0x98>
 800670c:	2b40      	cmp	r3, #64	; 0x40
 800670e:	d064      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x100>
 8006710:	d816      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x66>
 8006712:	2b20      	cmp	r3, #32
 8006714:	d00d      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x58>
 8006716:	d80a      	bhi.n	800672e <HAL_TIM_ConfigClockSource+0x54>
 8006718:	f033 0110 	bics.w	r1, r3, #16
 800671c:	d009      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 800671e:	2301      	movs	r3, #1
 8006720:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006724:	2300      	movs	r3, #0
 8006726:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800672a:	4610      	mov	r0, r2
 800672c:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800672e:	2b30      	cmp	r3, #48	; 0x30
 8006730:	d1f5      	bne.n	800671e <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8006732:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006734:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006738:	4313      	orrs	r3, r2
 800673a:	f043 0307 	orr.w	r3, r3, #7
 800673e:	e028      	b.n	8006792 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8006740:	2b50      	cmp	r3, #80	; 0x50
 8006742:	d1ec      	bne.n	800671e <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8006744:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006746:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006748:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800674a:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800674c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006756:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8006758:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800675a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800675e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006762:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006764:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006766:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800676c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8006770:	e00f      	b.n	8006792 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8006772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006776:	d00d      	beq.n	8006794 <HAL_TIM_ConfigClockSource+0xba>
 8006778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800677c:	d00c      	beq.n	8006798 <HAL_TIM_ConfigClockSource+0xbe>
 800677e:	2b70      	cmp	r3, #112	; 0x70
 8006780:	d1cd      	bne.n	800671e <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8006782:	68cb      	ldr	r3, [r1, #12]
 8006784:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8006788:	f7ff ff9d 	bl	80066c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800678c:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800678e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8006792:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006794:	2200      	movs	r2, #0
 8006796:	e7c2      	b.n	800671e <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8006798:	68cb      	ldr	r3, [r1, #12]
 800679a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800679e:	f7ff ff92 	bl	80066c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067a2:	6883      	ldr	r3, [r0, #8]
 80067a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067a8:	e7f3      	b.n	8006792 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 80067aa:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ac:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80067ae:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067b0:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 80067b4:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067b6:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b8:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067be:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80067c2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067c6:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80067ca:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80067cc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80067ce:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80067d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067d4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80067d8:	e7db      	b.n	8006792 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 80067da:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80067dc:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80067de:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067e0:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067e2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067e6:	f023 0301 	bic.w	r3, r3, #1
 80067ea:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ec:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80067ee:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80067f8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80067fa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80067fc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80067fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006802:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8006806:	e7c4      	b.n	8006792 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8006808:	4602      	mov	r2, r0
 800680a:	e78e      	b.n	800672a <HAL_TIM_ConfigClockSource+0x50>

0800680c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800680c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800680e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006810:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006812:	f001 011f 	and.w	r1, r1, #31
 8006816:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8006818:	ea23 0304 	bic.w	r3, r3, r4
 800681c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800681e:	6a03      	ldr	r3, [r0, #32]
 8006820:	408a      	lsls	r2, r1
 8006822:	431a      	orrs	r2, r3
 8006824:	6202      	str	r2, [r0, #32]
}
 8006826:	bd10      	pop	{r4, pc}

08006828 <HAL_TIM_OC_Start>:
{
 8006828:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800682a:	b929      	cbnz	r1, 8006838 <HAL_TIM_OC_Start+0x10>
 800682c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006830:	2b01      	cmp	r3, #1
 8006832:	d021      	beq.n	8006878 <HAL_TIM_OC_Start+0x50>
    return HAL_ERROR;
 8006834:	2001      	movs	r0, #1
}
 8006836:	bd08      	pop	{r3, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006838:	2904      	cmp	r1, #4
 800683a:	d107      	bne.n	800684c <HAL_TIM_OC_Start+0x24>
 800683c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8006840:	2b01      	cmp	r3, #1
 8006842:	d1f7      	bne.n	8006834 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006844:	2302      	movs	r3, #2
 8006846:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800684a:	e018      	b.n	800687e <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800684c:	2908      	cmp	r1, #8
 800684e:	d107      	bne.n	8006860 <HAL_TIM_OC_Start+0x38>
 8006850:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006854:	2b01      	cmp	r3, #1
 8006856:	d1ed      	bne.n	8006834 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006858:	2302      	movs	r3, #2
 800685a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800685e:	e00e      	b.n	800687e <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006860:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006864:	2b01      	cmp	r3, #1
 8006866:	d1e5      	bne.n	8006834 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006868:	2904      	cmp	r1, #4
 800686a:	d0eb      	beq.n	8006844 <HAL_TIM_OC_Start+0x1c>
 800686c:	2908      	cmp	r1, #8
 800686e:	d0f3      	beq.n	8006858 <HAL_TIM_OC_Start+0x30>
 8006870:	2302      	movs	r3, #2
 8006872:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8006876:	e002      	b.n	800687e <HAL_TIM_OC_Start+0x56>
 8006878:	2302      	movs	r3, #2
 800687a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800687e:	6800      	ldr	r0, [r0, #0]
 8006880:	2201      	movs	r2, #1
 8006882:	f7ff ffc3 	bl	800680c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006886:	4b0e      	ldr	r3, [pc, #56]	; (80068c0 <HAL_TIM_OC_Start+0x98>)
 8006888:	4298      	cmp	r0, r3
 800688a:	d10a      	bne.n	80068a2 <HAL_TIM_OC_Start+0x7a>
    __HAL_TIM_MOE_ENABLE(htim);
 800688c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800688e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006892:	6443      	str	r3, [r0, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006894:	6883      	ldr	r3, [r0, #8]
 8006896:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800689a:	2b06      	cmp	r3, #6
 800689c:	d10b      	bne.n	80068b6 <HAL_TIM_OC_Start+0x8e>
  return HAL_OK;
 800689e:	2000      	movs	r0, #0
 80068a0:	e7c9      	b.n	8006836 <HAL_TIM_OC_Start+0xe>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80068a6:	d0f5      	beq.n	8006894 <HAL_TIM_OC_Start+0x6c>
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <HAL_TIM_OC_Start+0x9c>)
 80068aa:	4298      	cmp	r0, r3
 80068ac:	d0f2      	beq.n	8006894 <HAL_TIM_OC_Start+0x6c>
 80068ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068b2:	4298      	cmp	r0, r3
 80068b4:	d0ee      	beq.n	8006894 <HAL_TIM_OC_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 80068b6:	6803      	ldr	r3, [r0, #0]
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	6003      	str	r3, [r0, #0]
 80068be:	e7ee      	b.n	800689e <HAL_TIM_OC_Start+0x76>
 80068c0:	40012c00 	.word	0x40012c00
 80068c4:	40000400 	.word	0x40000400

080068c8 <HAL_TIM_PWM_Start>:
 80068c8:	f7ff bfae 	b.w	8006828 <HAL_TIM_OC_Start>

080068cc <HAL_TIM_OC_Stop>:
{
 80068cc:	b538      	push	{r3, r4, r5, lr}
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80068ce:	2200      	movs	r2, #0
{
 80068d0:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80068d2:	6800      	ldr	r0, [r0, #0]
{
 80068d4:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80068d6:	f7ff ff99 	bl	800680c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068da:	4b18      	ldr	r3, [pc, #96]	; (800693c <HAL_TIM_OC_Stop+0x70>)
 80068dc:	4298      	cmp	r0, r3
 80068de:	d10d      	bne.n	80068fc <HAL_TIM_OC_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 80068e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80068e4:	6a02      	ldr	r2, [r0, #32]
 80068e6:	421a      	tst	r2, r3
 80068e8:	d108      	bne.n	80068fc <HAL_TIM_OC_Stop+0x30>
 80068ea:	f240 4344 	movw	r3, #1092	; 0x444
 80068ee:	6a02      	ldr	r2, [r0, #32]
 80068f0:	421a      	tst	r2, r3
 80068f2:	bf02      	ittt	eq
 80068f4:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 80068f6:	f423 4300 	biceq.w	r3, r3, #32768	; 0x8000
 80068fa:	6443      	streq	r3, [r0, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80068fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006900:	6a02      	ldr	r2, [r0, #32]
 8006902:	421a      	tst	r2, r3
 8006904:	d108      	bne.n	8006918 <HAL_TIM_OC_Stop+0x4c>
 8006906:	f240 4344 	movw	r3, #1092	; 0x444
 800690a:	6a02      	ldr	r2, [r0, #32]
 800690c:	421a      	tst	r2, r3
 800690e:	bf02      	ittt	eq
 8006910:	6803      	ldreq	r3, [r0, #0]
 8006912:	f023 0301 	biceq.w	r3, r3, #1
 8006916:	6003      	streq	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006918:	2301      	movs	r3, #1
 800691a:	b91d      	cbnz	r5, 8006924 <HAL_TIM_OC_Stop+0x58>
 800691c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8006920:	2000      	movs	r0, #0
 8006922:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006924:	2d04      	cmp	r5, #4
 8006926:	d102      	bne.n	800692e <HAL_TIM_OC_Stop+0x62>
 8006928:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800692c:	e7f8      	b.n	8006920 <HAL_TIM_OC_Stop+0x54>
 800692e:	2d08      	cmp	r5, #8
 8006930:	bf0c      	ite	eq
 8006932:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8006936:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 800693a:	e7f1      	b.n	8006920 <HAL_TIM_OC_Stop+0x54>
 800693c:	40012c00 	.word	0x40012c00

08006940 <HAL_TIM_PWM_Stop>:
 8006940:	f7ff bfc4 	b.w	80068cc <HAL_TIM_OC_Stop>

08006944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006944:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006946:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800694a:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800694c:	2b01      	cmp	r3, #1
 800694e:	f04f 0002 	mov.w	r0, #2
 8006952:	d022      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006954:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006956:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800695a:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800695c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800695e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006962:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8006964:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006966:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006968:	4c0c      	ldr	r4, [pc, #48]	; (800699c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800696a:	42a3      	cmp	r3, r4
 800696c:	d00a      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800696e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006972:	d007      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8006974:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8006978:	42a3      	cmp	r3, r4
 800697a:	d003      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800697c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006980:	42a3      	cmp	r3, r4
 8006982:	d104      	bne.n	800698e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006984:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006986:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800698a:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800698c:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800698e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8006990:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006992:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006996:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 800699a:	bd30      	pop	{r4, r5, pc}
 800699c:	40012c00 	.word	0x40012c00

080069a0 <HAL_TIMEx_CommutCallback>:
 80069a0:	4770      	bx	lr

080069a2 <HAL_TIMEx_BreakCallback>:
 80069a2:	4770      	bx	lr

080069a4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069a4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a6:	f102 030c 	add.w	r3, r2, #12
 80069aa:	e853 3f00 	ldrex	r3, [r3]
 80069ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	320c      	adds	r2, #12
 80069b4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80069b8:	6802      	ldr	r2, [r0, #0]
 80069ba:	2900      	cmp	r1, #0
 80069bc:	d1f2      	bne.n	80069a4 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	f102 0314 	add.w	r3, r2, #20
 80069c2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	f102 0c14 	add.w	ip, r2, #20
 80069ce:	e84c 3100 	strex	r1, r3, [ip]
 80069d2:	2900      	cmp	r1, #0
 80069d4:	d1f3      	bne.n	80069be <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d10b      	bne.n	80069f4 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069dc:	f102 030c 	add.w	r3, r2, #12
 80069e0:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	f102 0c0c 	add.w	ip, r2, #12
 80069ec:	e84c 3100 	strex	r1, r3, [ip]
 80069f0:	2900      	cmp	r1, #0
 80069f2:	d1f3      	bne.n	80069dc <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069f4:	2320      	movs	r3, #32
 80069f6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fa:	2300      	movs	r3, #0
 80069fc:	6303      	str	r3, [r0, #48]	; 0x30
}
 80069fe:	4770      	bx	lr

08006a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a00:	b510      	push	{r4, lr}
 8006a02:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a04:	6803      	ldr	r3, [r0, #0]
 8006a06:	68c1      	ldr	r1, [r0, #12]
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006a12:	6882      	ldr	r2, [r0, #8]
 8006a14:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8006a16:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006a18:	4302      	orrs	r2, r0
 8006a1a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8006a1c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8006a20:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006a24:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8006a26:	430a      	orrs	r2, r1
 8006a28:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a2a:	695a      	ldr	r2, [r3, #20]
 8006a2c:	69a1      	ldr	r1, [r4, #24]
 8006a2e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006a32:	430a      	orrs	r2, r1
 8006a34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006a36:	4a0e      	ldr	r2, [pc, #56]	; (8006a70 <UART_SetConfig+0x70>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d115      	bne.n	8006a68 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006a3c:	f7ff f92e 	bl	8005c9c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a40:	2319      	movs	r3, #25
 8006a42:	4343      	muls	r3, r0
 8006a44:	6862      	ldr	r2, [r4, #4]
 8006a46:	6820      	ldr	r0, [r4, #0]
 8006a48:	0092      	lsls	r2, r2, #2
 8006a4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a4e:	2264      	movs	r2, #100	; 0x64
 8006a50:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a54:	fb02 3311 	mls	r3, r2, r1, r3
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	3332      	adds	r3, #50	; 0x32
 8006a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a60:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8006a64:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a66:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8006a68:	f7ff f908 	bl	8005c7c <HAL_RCC_GetPCLK1Freq>
 8006a6c:	e7e8      	b.n	8006a40 <UART_SetConfig+0x40>
 8006a6e:	bf00      	nop
 8006a70:	40013800 	.word	0x40013800

08006a74 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	4604      	mov	r4, r0
 8006a78:	460e      	mov	r6, r1
 8006a7a:	4617      	mov	r7, r2
 8006a7c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7e:	6822      	ldr	r2, [r4, #0]
 8006a80:	6813      	ldr	r3, [r2, #0]
 8006a82:	ea36 0303 	bics.w	r3, r6, r3
 8006a86:	d101      	bne.n	8006a8c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8006a88:	2000      	movs	r0, #0
 8006a8a:	e028      	b.n	8006ade <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8006a8c:	1c6b      	adds	r3, r5, #1
 8006a8e:	d0f7      	beq.n	8006a80 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a90:	b125      	cbz	r5, 8006a9c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8006a92:	f7fd fbe1 	bl	8004258 <HAL_GetTick>
 8006a96:	1bc0      	subs	r0, r0, r7
 8006a98:	4285      	cmp	r5, r0
 8006a9a:	d2f0      	bcs.n	8006a7e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a9c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9e:	f102 030c 	add.w	r3, r2, #12
 8006aa2:	e853 3f00 	ldrex	r3, [r3]
 8006aa6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	320c      	adds	r2, #12
 8006aac:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8006ab0:	6821      	ldr	r1, [r4, #0]
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d1f2      	bne.n	8006a9c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	f101 0314 	add.w	r3, r1, #20
 8006aba:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006abe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	f101 0014 	add.w	r0, r1, #20
 8006ac6:	e840 3200 	strex	r2, r3, [r0]
 8006aca:	2a00      	cmp	r2, #0
 8006acc:	d1f3      	bne.n	8006ab6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8006ace:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8006ad0:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8006ad2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 8006ad6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 8006ada:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8006ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ae0 <HAL_UART_Init>:
{
 8006ae0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	b348      	cbz	r0, 8006b3a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006ae6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006aea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006aee:	b91b      	cbnz	r3, 8006af8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006af0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8006af4:	f7fc f99c 	bl	8002e30 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8006af8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006afa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006afc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8006b00:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8006b02:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8006b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b08:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006b0a:	f7ff ff79 	bl	8006a00 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b0e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b10:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b12:	691a      	ldr	r2, [r3, #16]
 8006b14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b1a:	695a      	ldr	r2, [r3, #20]
 8006b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b20:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006b22:	68da      	ldr	r2, [r3, #12]
 8006b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b28:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006b2a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2c:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b36:	6360      	str	r0, [r4, #52]	; 0x34
}
 8006b38:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	e7fc      	b.n	8006b38 <HAL_UART_Init+0x58>

08006b3e <HAL_UART_DeInit>:
{
 8006b3e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006b40:	4604      	mov	r4, r0
 8006b42:	b1a0      	cbz	r0, 8006b6e <HAL_UART_DeInit+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 8006b44:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006b46:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006b48:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8006b4c:	68d3      	ldr	r3, [r2, #12]
 8006b4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b52:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8006b54:	f7fc fa10 	bl	8002f78 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b58:	2000      	movs	r0, #0
 8006b5a:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(huart);
 8006b5c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8006b60:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8006b64:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b68:	6320      	str	r0, [r4, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b6a:	6360      	str	r0, [r4, #52]	; 0x34
}
 8006b6c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006b6e:	2001      	movs	r0, #1
 8006b70:	e7fc      	b.n	8006b6c <HAL_UART_DeInit+0x2e>

08006b72 <HAL_UART_Transmit>:
{
 8006b72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b76:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006b78:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8006b7c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8006b7e:	2b20      	cmp	r3, #32
{
 8006b80:	460e      	mov	r6, r1
 8006b82:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006b84:	d13c      	bne.n	8006c00 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8006b86:	2900      	cmp	r1, #0
 8006b88:	d03c      	beq.n	8006c04 <HAL_UART_Transmit+0x92>
 8006b8a:	2a00      	cmp	r2, #0
 8006b8c:	d03a      	beq.n	8006c04 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b8e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b90:	2500      	movs	r5, #0
 8006b92:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b94:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8006b98:	f7fd fb5e 	bl	8004258 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b9c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8006b9e:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8006ba4:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ba6:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ba8:	d103      	bne.n	8006bb2 <HAL_UART_Transmit+0x40>
 8006baa:	6923      	ldr	r3, [r4, #16]
 8006bac:	b90b      	cbnz	r3, 8006bb2 <HAL_UART_Transmit+0x40>
 8006bae:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8006bb0:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8006bb2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	b953      	cbnz	r3, 8006bce <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bb8:	464b      	mov	r3, r9
 8006bba:	4642      	mov	r2, r8
 8006bbc:	2140      	movs	r1, #64	; 0x40
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f7ff ff58 	bl	8006a74 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8006bc4:	b950      	cbnz	r0, 8006bdc <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8006bc6:	2320      	movs	r3, #32
 8006bc8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8006bcc:	e007      	b.n	8006bde <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bce:	464b      	mov	r3, r9
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	2180      	movs	r1, #128	; 0x80
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f7ff ff4d 	bl	8006a74 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8006bda:	b110      	cbz	r0, 8006be2 <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8006bdc:	2003      	movs	r0, #3
}
 8006bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006be2:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8006be4:	b94e      	cbnz	r6, 8006bfa <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006be6:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bee:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8006bf0:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8006bf2:	3901      	subs	r1, #1
 8006bf4:	b289      	uxth	r1, r1
 8006bf6:	84e1      	strh	r1, [r4, #38]	; 0x26
 8006bf8:	e7db      	b.n	8006bb2 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bfa:	f816 3b01 	ldrb.w	r3, [r6], #1
 8006bfe:	e7f6      	b.n	8006bee <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8006c00:	2002      	movs	r0, #2
 8006c02:	e7ec      	b.n	8006bde <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8006c04:	2001      	movs	r0, #1
 8006c06:	e7ea      	b.n	8006bde <HAL_UART_Transmit+0x6c>

08006c08 <HAL_UART_TxCpltCallback>:
 8006c08:	4770      	bx	lr

08006c0a <HAL_UART_RxCpltCallback>:
 8006c0a:	4770      	bx	lr

08006c0c <HAL_UART_RxHalfCpltCallback>:
 8006c0c:	4770      	bx	lr

08006c0e <HAL_UART_ErrorCallback>:
 8006c0e:	4770      	bx	lr

08006c10 <UART_DMAError>:
{
 8006c10:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c12:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c14:	6803      	ldr	r3, [r0, #0]
 8006c16:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c18:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8006c1c:	2921      	cmp	r1, #33	; 0x21
 8006c1e:	d112      	bne.n	8006c46 <UART_DMAError+0x36>
 8006c20:	0612      	lsls	r2, r2, #24
 8006c22:	d510      	bpl.n	8006c46 <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 8006c24:	2200      	movs	r2, #0
 8006c26:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	f103 020c 	add.w	r2, r3, #12
 8006c2c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c30:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	f103 0c0c 	add.w	ip, r3, #12
 8006c38:	e84c 2100 	strex	r1, r2, [ip]
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	d1f3      	bne.n	8006c28 <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 8006c40:	2220      	movs	r2, #32
 8006c42:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c46:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c48:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8006c4c:	2a22      	cmp	r2, #34	; 0x22
 8006c4e:	d105      	bne.n	8006c5c <UART_DMAError+0x4c>
 8006c50:	065b      	lsls	r3, r3, #25
 8006c52:	d503      	bpl.n	8006c5c <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006c58:	f7ff fea4 	bl	80069a4 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c5c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006c5e:	f043 0310 	orr.w	r3, r3, #16
 8006c62:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_UART_ErrorCallback(huart);
 8006c64:	f7ff ffd3 	bl	8006c0e <HAL_UART_ErrorCallback>
}
 8006c68:	bd08      	pop	{r3, pc}

08006c6a <UART_DMAAbortOnError>:
{
 8006c6a:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8006c6c:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c6e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8006c70:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c72:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8006c74:	f7ff ffcb 	bl	8006c0e <HAL_UART_ErrorCallback>
}
 8006c78:	bd08      	pop	{r3, pc}

08006c7a <HAL_UART_AbortCpltCallback>:
 8006c7a:	4770      	bx	lr

08006c7c <HAL_UART_Abort_IT>:
{
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c80:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	f102 030c 	add.w	r3, r2, #12
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	320c      	adds	r2, #12
 8006c90:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	2900      	cmp	r1, #0
 8006c98:	d1f2      	bne.n	8006c80 <HAL_UART_Abort_IT+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9a:	f103 0214 	add.w	r2, r3, #20
 8006c9e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	f103 0014 	add.w	r0, r3, #20
 8006caa:	e840 2100 	strex	r1, r2, [r0]
 8006cae:	2900      	cmp	r1, #0
 8006cb0:	d1f3      	bne.n	8006c9a <HAL_UART_Abort_IT+0x1e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006cb4:	2a01      	cmp	r2, #1
 8006cb6:	d035      	beq.n	8006d24 <HAL_UART_Abort_IT+0xa8>
  if (huart->hdmatx != NULL)
 8006cb8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d13f      	bne.n	8006d3e <HAL_UART_Abort_IT+0xc2>
  if (huart->hdmarx != NULL)
 8006cbe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006cc0:	b129      	cbz	r1, 8006cce <HAL_UART_Abort_IT+0x52>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc2:	695a      	ldr	r2, [r3, #20]
 8006cc4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8006cc8:	bf18      	it	ne
 8006cca:	4a2d      	ldrne	r2, [pc, #180]	; (8006d80 <HAL_UART_Abort_IT+0x104>)
      huart->hdmarx->XferAbortCallback = NULL;
 8006ccc:	634a      	str	r2, [r1, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006cce:	695a      	ldr	r2, [r3, #20]
 8006cd0:	0612      	lsls	r2, r2, #24
 8006cd2:	d43b      	bmi.n	8006d4c <HAL_UART_Abort_IT+0xd0>
  uint32_t AbortCplt = 0x01U;
 8006cd4:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd6:	6822      	ldr	r2, [r4, #0]
 8006cd8:	6953      	ldr	r3, [r2, #20]
 8006cda:	065b      	lsls	r3, r3, #25
 8006cdc:	d54b      	bpl.n	8006d76 <HAL_UART_Abort_IT+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	f102 0314 	add.w	r3, r2, #20
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	f102 0114 	add.w	r1, r2, #20
 8006cee:	e841 3600 	strex	r6, r3, [r1]
 8006cf2:	2e00      	cmp	r6, #0
 8006cf4:	d1f3      	bne.n	8006cde <HAL_UART_Abort_IT+0x62>
    if (huart->hdmarx != NULL)
 8006cf6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d03c      	beq.n	8006d76 <HAL_UART_Abort_IT+0xfa>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cfc:	f7fd fe08 	bl	8004910 <HAL_DMA_Abort_IT>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d03a      	beq.n	8006d7a <HAL_UART_Abort_IT+0xfe>
        huart->hdmarx->XferAbortCallback = NULL;
 8006d04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d06:	635e      	str	r6, [r3, #52]	; 0x34
    huart->TxXferCount = 0x00U;
 8006d08:	2300      	movs	r3, #0
    huart->gState  = HAL_UART_STATE_READY;
 8006d0a:	2220      	movs	r2, #32
    huart->TxXferCount = 0x00U;
 8006d0c:	84e3      	strh	r3, [r4, #38]	; 0x26
    HAL_UART_AbortCpltCallback(huart);
 8006d0e:	4620      	mov	r0, r4
    huart->RxXferCount = 0x00U;
 8006d10:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d12:	6463      	str	r3, [r4, #68]	; 0x44
    huart->gState  = HAL_UART_STATE_READY;
 8006d14:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8006d18:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1c:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_UART_AbortCpltCallback(huart);
 8006d1e:	f7ff ffac 	bl	8006c7a <HAL_UART_AbortCpltCallback>
 8006d22:	e02a      	b.n	8006d7a <HAL_UART_Abort_IT+0xfe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	f103 020c 	add.w	r2, r3, #12
 8006d28:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006d2c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d30:	f103 000c 	add.w	r0, r3, #12
 8006d34:	e840 2100 	strex	r1, r2, [r0]
 8006d38:	2900      	cmp	r1, #0
 8006d3a:	d1f3      	bne.n	8006d24 <HAL_UART_Abort_IT+0xa8>
 8006d3c:	e7bc      	b.n	8006cb8 <HAL_UART_Abort_IT+0x3c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006d3e:	695a      	ldr	r2, [r3, #20]
 8006d40:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8006d44:	bf18      	it	ne
 8006d46:	4a0f      	ldrne	r2, [pc, #60]	; (8006d84 <HAL_UART_Abort_IT+0x108>)
      huart->hdmatx->XferAbortCallback = NULL;
 8006d48:	6342      	str	r2, [r0, #52]	; 0x34
 8006d4a:	e7b8      	b.n	8006cbe <HAL_UART_Abort_IT+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4c:	f103 0214 	add.w	r2, r3, #20
 8006d50:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	f103 0114 	add.w	r1, r3, #20
 8006d5c:	e841 2500 	strex	r5, r2, [r1]
 8006d60:	2d00      	cmp	r5, #0
 8006d62:	d1f3      	bne.n	8006d4c <HAL_UART_Abort_IT+0xd0>
    if (huart->hdmatx != NULL)
 8006d64:	2800      	cmp	r0, #0
 8006d66:	d0b5      	beq.n	8006cd4 <HAL_UART_Abort_IT+0x58>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8006d68:	f7fd fdd2 	bl	8004910 <HAL_DMA_Abort_IT>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d0b2      	beq.n	8006cd6 <HAL_UART_Abort_IT+0x5a>
        huart->hdmatx->XferAbortCallback = NULL;
 8006d70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d72:	635d      	str	r5, [r3, #52]	; 0x34
 8006d74:	e7ae      	b.n	8006cd4 <HAL_UART_Abort_IT+0x58>
  if (AbortCplt == 0x01U)
 8006d76:	2d01      	cmp	r5, #1
 8006d78:	d0c6      	beq.n	8006d08 <HAL_UART_Abort_IT+0x8c>
}
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	bd70      	pop	{r4, r5, r6, pc}
 8006d7e:	bf00      	nop
 8006d80:	08006d89 	.word	0x08006d89
 8006d84:	08006db3 	.word	0x08006db3

08006d88 <UART_DMARxAbortCallback>:
{
 8006d88:	b508      	push	{r3, lr}
  huart->hdmarx->XferAbortCallback = NULL;
 8006d8a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmarx->XferAbortCallback = NULL;
 8006d8e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006d90:	6353      	str	r3, [r2, #52]	; 0x34
  if (huart->hdmatx != NULL)
 8006d92:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006d94:	b10a      	cbz	r2, 8006d9a <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 8006d96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d98:	b952      	cbnz	r2, 8006db0 <UART_DMARxAbortCallback+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 8006d9a:	2220      	movs	r2, #32
  huart->TxXferCount = 0x00U;
 8006d9c:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8006d9e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da0:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 8006da2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006da6:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006daa:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 8006dac:	f7ff ff65 	bl	8006c7a <HAL_UART_AbortCpltCallback>
}
 8006db0:	bd08      	pop	{r3, pc}

08006db2 <UART_DMATxAbortCallback>:
{
 8006db2:	b508      	push	{r3, lr}
  huart->hdmatx->XferAbortCallback = NULL;
 8006db4:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006db6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmatx->XferAbortCallback = NULL;
 8006db8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006dba:	6353      	str	r3, [r2, #52]	; 0x34
  if (huart->hdmarx != NULL)
 8006dbc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006dbe:	b10a      	cbz	r2, 8006dc4 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8006dc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006dc2:	b952      	cbnz	r2, 8006dda <UART_DMATxAbortCallback+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 8006dc4:	2220      	movs	r2, #32
  huart->TxXferCount = 0x00U;
 8006dc6:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8006dc8:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dca:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 8006dcc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006dd0:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd4:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 8006dd6:	f7ff ff50 	bl	8006c7a <HAL_UART_AbortCpltCallback>
}
 8006dda:	bd08      	pop	{r3, pc}

08006ddc <HAL_UARTEx_RxEventCallback>:
}
 8006ddc:	4770      	bx	lr

08006dde <UART_DMARxHalfCplt>:
{
 8006dde:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006de0:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006de2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006de4:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d104      	bne.n	8006df6 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006dec:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8006dee:	0849      	lsrs	r1, r1, #1
 8006df0:	f7ff fff4 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
}
 8006df4:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8006df6:	f7ff ff09 	bl	8006c0c <HAL_UART_RxHalfCpltCallback>
}
 8006dfa:	e7fb      	b.n	8006df4 <UART_DMARxHalfCplt+0x16>

08006dfc <UART_DMAReceiveCplt>:
{
 8006dfc:	b508      	push	{r3, lr}
 8006dfe:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e00:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e02:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f013 0320 	ands.w	r3, r3, #32
 8006e0a:	d137      	bne.n	8006e7c <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 8006e0c:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e0e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	f102 030c 	add.w	r3, r2, #12
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1c:	320c      	adds	r2, #12
 8006e1e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006e22:	6803      	ldr	r3, [r0, #0]
 8006e24:	2900      	cmp	r1, #0
 8006e26:	d1f2      	bne.n	8006e0e <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	f103 0214 	add.w	r2, r3, #20
 8006e2c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e30:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	f103 0c14 	add.w	ip, r3, #20
 8006e38:	e84c 2100 	strex	r1, r2, [ip]
 8006e3c:	2900      	cmp	r1, #0
 8006e3e:	d1f3      	bne.n	8006e28 <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	f103 0214 	add.w	r2, r3, #20
 8006e44:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	f103 0c14 	add.w	ip, r3, #20
 8006e50:	e84c 2100 	strex	r1, r2, [ip]
 8006e54:	2900      	cmp	r1, #0
 8006e56:	d1f3      	bne.n	8006e40 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e5e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006e60:	2a01      	cmp	r2, #1
 8006e62:	d10b      	bne.n	8006e7c <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	f103 020c 	add.w	r2, r3, #12
 8006e68:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e6c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	f103 0c0c 	add.w	ip, r3, #12
 8006e74:	e84c 2100 	strex	r1, r2, [ip]
 8006e78:	2900      	cmp	r1, #0
 8006e7a:	d1f3      	bne.n	8006e64 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d103      	bne.n	8006e8e <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e86:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8006e88:	f7ff ffa8 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
}
 8006e8c:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8006e8e:	f7ff febc 	bl	8006c0a <HAL_UART_RxCpltCallback>
}
 8006e92:	e7fb      	b.n	8006e8c <UART_DMAReceiveCplt+0x90>

08006e94 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e94:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8006e98:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e9a:	2b22      	cmp	r3, #34	; 0x22
 8006e9c:	d142      	bne.n	8006f24 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e9e:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ea0:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ea6:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea8:	d13f      	bne.n	8006f2a <UART_Receive_IT.isra.0+0x96>
 8006eaa:	6901      	ldr	r1, [r0, #16]
 8006eac:	2900      	cmp	r1, #0
 8006eae:	d13f      	bne.n	8006f30 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006eb0:	6852      	ldr	r2, [r2, #4]
 8006eb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb6:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8006eba:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8006ebc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d12d      	bne.n	8006f24 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ec8:	6802      	ldr	r2, [r0, #0]
 8006eca:	68d1      	ldr	r1, [r2, #12]
 8006ecc:	f021 0120 	bic.w	r1, r1, #32
 8006ed0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ed2:	68d1      	ldr	r1, [r2, #12]
 8006ed4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006ed8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006eda:	6951      	ldr	r1, [r2, #20]
 8006edc:	f021 0101 	bic.w	r1, r1, #1
 8006ee0:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ee8:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eea:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006eec:	2a01      	cmp	r2, #1
 8006eee:	6802      	ldr	r2, [r0, #0]
 8006ef0:	d128      	bne.n	8006f44 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef2:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	f102 030c 	add.w	r3, r2, #12
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006efc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	f102 0c0c 	add.w	ip, r2, #12
 8006f04:	e84c 3100 	strex	r1, r3, [ip]
 8006f08:	2900      	cmp	r1, #0
 8006f0a:	d1f3      	bne.n	8006ef4 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f0c:	6813      	ldr	r3, [r2, #0]
 8006f0e:	06db      	lsls	r3, r3, #27
 8006f10:	d505      	bpl.n	8006f1e <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f12:	9101      	str	r1, [sp, #4]
 8006f14:	6813      	ldr	r3, [r2, #0]
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	6853      	ldr	r3, [r2, #4]
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f1e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8006f20:	f7ff ff5c 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
}
 8006f24:	b003      	add	sp, #12
 8006f26:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f2a:	b939      	cbnz	r1, 8006f3c <UART_Receive_IT.isra.0+0xa8>
 8006f2c:	6901      	ldr	r1, [r0, #16]
 8006f2e:	b929      	cbnz	r1, 8006f3c <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f30:	6852      	ldr	r2, [r2, #4]
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8006f36:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f38:	3301      	adds	r3, #1
 8006f3a:	e7be      	b.n	8006eba <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f3c:	6852      	ldr	r2, [r2, #4]
 8006f3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f42:	e7f7      	b.n	8006f34 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8006f44:	f7ff fe61 	bl	8006c0a <HAL_UART_RxCpltCallback>
 8006f48:	e7ec      	b.n	8006f24 <UART_Receive_IT.isra.0+0x90>
	...

08006f4c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f4c:	6803      	ldr	r3, [r0, #0]
{
 8006f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f50:	681a      	ldr	r2, [r3, #0]
{
 8006f52:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8006f54:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f56:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f58:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8006f5a:	d108      	bne.n	8006f6e <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f5c:	0696      	lsls	r6, r2, #26
 8006f5e:	d568      	bpl.n	8007032 <HAL_UART_IRQHandler+0xe6>
 8006f60:	068d      	lsls	r5, r1, #26
 8006f62:	d566      	bpl.n	8007032 <HAL_UART_IRQHandler+0xe6>
}
 8006f64:	b002      	add	sp, #8
 8006f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8006f6a:	f7ff bf93 	b.w	8006e94 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f6e:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f72:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8006f76:	4305      	orrs	r5, r0
 8006f78:	d05b      	beq.n	8007032 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f7a:	07d6      	lsls	r6, r2, #31
 8006f7c:	d505      	bpl.n	8006f8a <HAL_UART_IRQHandler+0x3e>
 8006f7e:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f80:	bf42      	ittt	mi
 8006f82:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8006f84:	f043 0301 	orrmi.w	r3, r3, #1
 8006f88:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f8a:	0753      	lsls	r3, r2, #29
 8006f8c:	d504      	bpl.n	8006f98 <HAL_UART_IRQHandler+0x4c>
 8006f8e:	b118      	cbz	r0, 8006f98 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f92:	f043 0302 	orr.w	r3, r3, #2
 8006f96:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f98:	0796      	lsls	r6, r2, #30
 8006f9a:	d504      	bpl.n	8006fa6 <HAL_UART_IRQHandler+0x5a>
 8006f9c:	b118      	cbz	r0, 8006fa6 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006fa0:	f043 0304 	orr.w	r3, r3, #4
 8006fa4:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006fa6:	0715      	lsls	r5, r2, #28
 8006fa8:	d507      	bpl.n	8006fba <HAL_UART_IRQHandler+0x6e>
 8006faa:	f001 0320 	and.w	r3, r1, #32
 8006fae:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fb0:	bf1e      	ittt	ne
 8006fb2:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8006fb4:	f043 0308 	orrne.w	r3, r3, #8
 8006fb8:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d032      	beq.n	8007026 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fc0:	0692      	lsls	r2, r2, #26
 8006fc2:	d504      	bpl.n	8006fce <HAL_UART_IRQHandler+0x82>
 8006fc4:	068b      	lsls	r3, r1, #26
 8006fc6:	d502      	bpl.n	8006fce <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f7ff ff63 	bl	8006e94 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fce:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8006fd0:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd2:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fd4:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fda:	f002 0208 	and.w	r2, r2, #8
 8006fde:	ea53 0502 	orrs.w	r5, r3, r2
 8006fe2:	d022      	beq.n	800702a <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8006fe4:	f7ff fcde 	bl	80069a4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe8:	6973      	ldr	r3, [r6, #20]
 8006fea:	065e      	lsls	r6, r3, #25
 8006fec:	d518      	bpl.n	8007020 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	f102 0314 	add.w	r3, r2, #20
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	3214      	adds	r2, #20
 8006ffe:	e842 3100 	strex	r1, r3, [r2]
 8007002:	2900      	cmp	r1, #0
 8007004:	d1f3      	bne.n	8006fee <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8007006:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007008:	b150      	cbz	r0, 8007020 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800700a:	4b74      	ldr	r3, [pc, #464]	; (80071dc <HAL_UART_IRQHandler+0x290>)
 800700c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800700e:	f7fd fc7f 	bl	8004910 <HAL_DMA_Abort_IT>
 8007012:	b140      	cbz	r0, 8007026 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007014:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007016:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8007018:	b002      	add	sp, #8
 800701a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800701e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8007020:	4620      	mov	r0, r4
 8007022:	f7ff fdf4 	bl	8006c0e <HAL_UART_ErrorCallback>
}
 8007026:	b002      	add	sp, #8
 8007028:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800702a:	f7ff fdf0 	bl	8006c0e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702e:	6465      	str	r5, [r4, #68]	; 0x44
 8007030:	e7f9      	b.n	8007026 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007032:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007034:	2801      	cmp	r0, #1
 8007036:	f040 8094 	bne.w	8007162 <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800703a:	06d5      	lsls	r5, r2, #27
 800703c:	f140 8091 	bpl.w	8007162 <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007040:	06c8      	lsls	r0, r1, #27
 8007042:	f140 808e 	bpl.w	8007162 <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007046:	2200      	movs	r2, #0
 8007048:	9201      	str	r2, [sp, #4]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	9201      	str	r2, [sp, #4]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	9201      	str	r2, [sp, #4]
 8007052:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007054:	695a      	ldr	r2, [r3, #20]
 8007056:	0652      	lsls	r2, r2, #25
 8007058:	d54d      	bpl.n	80070f6 <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800705a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800705c:	680a      	ldr	r2, [r1, #0]
 800705e:	6852      	ldr	r2, [r2, #4]
 8007060:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8007062:	2a00      	cmp	r2, #0
 8007064:	d0df      	beq.n	8007026 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007066:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8007068:	4290      	cmp	r0, r2
 800706a:	d9dc      	bls.n	8007026 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 800706c:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800706e:	698a      	ldr	r2, [r1, #24]
 8007070:	2a20      	cmp	r2, #32
 8007072:	d036      	beq.n	80070e2 <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	f103 020c 	add.w	r2, r3, #12
 8007078:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800707c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	f103 000c 	add.w	r0, r3, #12
 8007084:	e840 2100 	strex	r1, r2, [r0]
 8007088:	2900      	cmp	r1, #0
 800708a:	d1f3      	bne.n	8007074 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	f103 0214 	add.w	r2, r3, #20
 8007090:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007094:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	f103 0014 	add.w	r0, r3, #20
 800709c:	e840 2100 	strex	r1, r2, [r0]
 80070a0:	2900      	cmp	r1, #0
 80070a2:	d1f3      	bne.n	800708c <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	f103 0214 	add.w	r2, r3, #20
 80070a8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	f103 0014 	add.w	r0, r3, #20
 80070b4:	e840 2100 	strex	r1, r2, [r0]
 80070b8:	2900      	cmp	r1, #0
 80070ba:	d1f3      	bne.n	80070a4 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 80070bc:	2220      	movs	r2, #32
 80070be:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c2:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c4:	f103 020c 	add.w	r2, r3, #12
 80070c8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070cc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	f103 000c 	add.w	r0, r3, #12
 80070d4:	e840 2100 	strex	r1, r2, [r0]
 80070d8:	2900      	cmp	r1, #0
 80070da:	d1f3      	bne.n	80070c4 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070dc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80070de:	f7fd fbf8 	bl	80048d2 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070e2:	2302      	movs	r3, #2
 80070e4:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070e6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80070e8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80070ea:	1ac9      	subs	r1, r1, r3
 80070ec:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070ee:	4620      	mov	r0, r4
 80070f0:	f7ff fe74 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
 80070f4:	e797      	b.n	8007026 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070f6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 80070f8:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070fa:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 80070fc:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070fe:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8007100:	2800      	cmp	r0, #0
 8007102:	d090      	beq.n	8007026 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007104:	1a89      	subs	r1, r1, r2
 8007106:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8007108:	2900      	cmp	r1, #0
 800710a:	d08c      	beq.n	8007026 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	f103 020c 	add.w	r2, r3, #12
 8007110:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007114:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007118:	f103 050c 	add.w	r5, r3, #12
 800711c:	e845 2000 	strex	r0, r2, [r5]
 8007120:	2800      	cmp	r0, #0
 8007122:	d1f3      	bne.n	800710c <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	f103 0214 	add.w	r2, r3, #20
 8007128:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	f103 0514 	add.w	r5, r3, #20
 8007134:	e845 2000 	strex	r0, r2, [r5]
 8007138:	2800      	cmp	r0, #0
 800713a:	d1f3      	bne.n	8007124 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 800713c:	2220      	movs	r2, #32
 800713e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007142:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	f103 020c 	add.w	r2, r3, #12
 8007148:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	f103 050c 	add.w	r5, r3, #12
 8007154:	e845 2000 	strex	r0, r2, [r5]
 8007158:	2800      	cmp	r0, #0
 800715a:	d1f3      	bne.n	8007144 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800715c:	2302      	movs	r3, #2
 800715e:	6363      	str	r3, [r4, #52]	; 0x34
 8007160:	e7c5      	b.n	80070ee <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007162:	0616      	lsls	r6, r2, #24
 8007164:	d528      	bpl.n	80071b8 <HAL_UART_IRQHandler+0x26c>
 8007166:	060d      	lsls	r5, r1, #24
 8007168:	d526      	bpl.n	80071b8 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800716a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800716e:	2a21      	cmp	r2, #33	; 0x21
 8007170:	f47f af59 	bne.w	8007026 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007174:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007176:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007178:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800717c:	d117      	bne.n	80071ae <HAL_UART_IRQHandler+0x262>
 800717e:	6921      	ldr	r1, [r4, #16]
 8007180:	b9a9      	cbnz	r1, 80071ae <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007182:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007186:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800718a:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800718c:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800718e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8007190:	3a01      	subs	r2, #1
 8007192:	b292      	uxth	r2, r2
 8007194:	84e2      	strh	r2, [r4, #38]	; 0x26
 8007196:	2a00      	cmp	r2, #0
 8007198:	f47f af45 	bne.w	8007026 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071a2:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071aa:	60da      	str	r2, [r3, #12]
 80071ac:	e73b      	b.n	8007026 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071ae:	1c51      	adds	r1, r2, #1
 80071b0:	6221      	str	r1, [r4, #32]
 80071b2:	7812      	ldrb	r2, [r2, #0]
 80071b4:	605a      	str	r2, [r3, #4]
 80071b6:	e7ea      	b.n	800718e <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071b8:	0650      	lsls	r0, r2, #25
 80071ba:	f57f af34 	bpl.w	8007026 <HAL_UART_IRQHandler+0xda>
 80071be:	064a      	lsls	r2, r1, #25
 80071c0:	f57f af31 	bpl.w	8007026 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071c4:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80071c6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071cc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80071ce:	2320      	movs	r3, #32
 80071d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 80071d4:	f7ff fd18 	bl	8006c08 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80071d8:	e725      	b.n	8007026 <HAL_UART_IRQHandler+0xda>
 80071da:	bf00      	nop
 80071dc:	08006c6b 	.word	0x08006c6b

080071e0 <UART_Start_Receive_DMA>:
{
 80071e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071e2:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 80071e4:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e6:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071e8:	2222      	movs	r2, #34	; 0x22
{
 80071ea:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 80071ec:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ee:	6445      	str	r5, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071f0:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80071f4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80071f6:	4a1d      	ldr	r2, [pc, #116]	; (800726c <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80071f8:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80071fa:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80071fc:	4a1c      	ldr	r2, [pc, #112]	; (8007270 <UART_Start_Receive_DMA+0x90>)
 80071fe:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007200:	4a1c      	ldr	r2, [pc, #112]	; (8007274 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 8007202:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007206:	460a      	mov	r2, r1
 8007208:	1d31      	adds	r1, r6, #4
 800720a:	f7fd fb23 	bl	8004854 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	9501      	str	r5, [sp, #4]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	9201      	str	r2, [sp, #4]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	9201      	str	r2, [sp, #4]
 800721a:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800721c:	6922      	ldr	r2, [r4, #16]
 800721e:	b15a      	cbz	r2, 8007238 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007220:	f103 020c 	add.w	r2, r3, #12
 8007224:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722c:	f103 000c 	add.w	r0, r3, #12
 8007230:	e840 2100 	strex	r1, r2, [r0]
 8007234:	2900      	cmp	r1, #0
 8007236:	d1f3      	bne.n	8007220 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	f103 0214 	add.w	r2, r3, #20
 800723c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007240:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	f103 0014 	add.w	r0, r3, #20
 8007248:	e840 2100 	strex	r1, r2, [r0]
 800724c:	2900      	cmp	r1, #0
 800724e:	d1f3      	bne.n	8007238 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	f103 0214 	add.w	r2, r3, #20
 8007254:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	f103 0114 	add.w	r1, r3, #20
 8007260:	e841 2000 	strex	r0, r2, [r1]
 8007264:	2800      	cmp	r0, #0
 8007266:	d1f3      	bne.n	8007250 <UART_Start_Receive_DMA+0x70>
}
 8007268:	b002      	add	sp, #8
 800726a:	bd70      	pop	{r4, r5, r6, pc}
 800726c:	08006dfd 	.word	0x08006dfd
 8007270:	08006ddf 	.word	0x08006ddf
 8007274:	08006c11 	.word	0x08006c11

08007278 <HAL_UART_Receive_DMA>:
{
 8007278:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 800727a:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 800727e:	2e20      	cmp	r6, #32
 8007280:	d106      	bne.n	8007290 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8007282:	b141      	cbz	r1, 8007296 <HAL_UART_Receive_DMA+0x1e>
 8007284:	b13a      	cbz	r2, 8007296 <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007286:	2400      	movs	r4, #0
 8007288:	6304      	str	r4, [r0, #48]	; 0x30
}
 800728a:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800728c:	f7ff bfa8 	b.w	80071e0 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8007290:	2002      	movs	r0, #2
}
 8007292:	bc70      	pop	{r4, r5, r6}
 8007294:	4770      	bx	lr
      return HAL_ERROR;
 8007296:	2001      	movs	r0, #1
 8007298:	e7fb      	b.n	8007292 <HAL_UART_Receive_DMA+0x1a>

0800729a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800729a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800729c:	f000 ffbc 	bl	8008218 <vTaskStartScheduler>
  
  return osOK;
}
 80072a0:	2000      	movs	r0, #0
 80072a2:	bd08      	pop	{r3, pc}

080072a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80072a8:	6946      	ldr	r6, [r0, #20]
{
 80072aa:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072ac:	e9d0 1000 	ldrd	r1, r0, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072b0:	692a      	ldr	r2, [r5, #16]
 80072b2:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 80072b6:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80072b8:	b176      	cbz	r6, 80072d8 <osThreadCreate+0x34>
 80072ba:	69ad      	ldr	r5, [r5, #24]
 80072bc:	b165      	cbz	r5, 80072d8 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 80072be:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80072c0:	bf0c      	ite	eq
 80072c2:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 80072c4:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072c6:	e9cd 6501 	strd	r6, r5, [sp, #4]
 80072ca:	9400      	str	r4, [sp, #0]
 80072cc:	f000 feae 	bl	800802c <xTaskCreateStatic>
 80072d0:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80072d2:	9805      	ldr	r0, [sp, #20]
}
 80072d4:	b006      	add	sp, #24
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80072d8:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80072da:	bf0c      	ite	eq
 80072dc:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 80072de:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072e0:	ad05      	add	r5, sp, #20
 80072e2:	e9cd 4500 	strd	r4, r5, [sp]
 80072e6:	b292      	uxth	r2, r2
 80072e8:	f000 fed7 	bl	800809a <xTaskCreate>
 80072ec:	2801      	cmp	r0, #1
 80072ee:	d0f0      	beq.n	80072d2 <osThreadCreate+0x2e>
      return NULL;
 80072f0:	2000      	movs	r0, #0
 80072f2:	e7ef      	b.n	80072d4 <osThreadCreate+0x30>

080072f4 <osThreadYield>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
  taskYIELD();
 80072f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80072f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	f3bf 8f6f 	isb	sy
  
  return osOK;
}
 8007308:	2000      	movs	r0, #0
 800730a:	4770      	bx	lr

0800730c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800730c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800730e:	2801      	cmp	r0, #1
 8007310:	bf38      	it	cc
 8007312:	2001      	movcc	r0, #1
 8007314:	f001 f930 	bl	8008578 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007318:	2000      	movs	r0, #0
 800731a:	bd08      	pop	{r3, pc}

0800731c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800731c:	b513      	push	{r0, r1, r4, lr}
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800731e:	c811      	ldmia	r0, {r0, r4}
    return xTimerCreateStatic((const char *)"",
 8007320:	3901      	subs	r1, #1
{
 8007322:	4613      	mov	r3, r2
    return xTimerCreateStatic((const char *)"",
 8007324:	424a      	negs	r2, r1
 8007326:	414a      	adcs	r2, r1
  if(timer_def->controlblock != NULL) {
 8007328:	b13c      	cbz	r4, 800733a <osTimerCreate+0x1e>
    return xTimerCreateStatic((const char *)"",
 800732a:	e9cd 0400 	strd	r0, r4, [sp]
 800732e:	2101      	movs	r1, #1
 8007330:	4805      	ldr	r0, [pc, #20]	; (8007348 <osTimerCreate+0x2c>)
 8007332:	f001 fd04 	bl	8008d3e <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8007336:	b002      	add	sp, #8
 8007338:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 800733a:	9000      	str	r0, [sp, #0]
 800733c:	2101      	movs	r1, #1
 800733e:	4802      	ldr	r0, [pc, #8]	; (8007348 <osTimerCreate+0x2c>)
 8007340:	f001 fcd6 	bl	8008cf0 <xTimerCreate>
 8007344:	e7f7      	b.n	8007336 <osTimerCreate+0x1a>
 8007346:	bf00      	nop
 8007348:	0800a5a3 	.word	0x0800a5a3

0800734c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800734c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800734e:	2400      	movs	r4, #0
 8007350:	2901      	cmp	r1, #1
 8007352:	460a      	mov	r2, r1
 8007354:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8007356:	bf38      	it	cc
 8007358:	2201      	movcc	r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800735a:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 800735e:	b1b3      	cbz	r3, 800738e <osTimerStart+0x42>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8007360:	2109      	movs	r1, #9
 8007362:	9400      	str	r4, [sp, #0]
 8007364:	ab03      	add	r3, sp, #12
 8007366:	f001 fd27 	bl	8008db8 <xTimerGenericCommand>
 800736a:	2801      	cmp	r0, #1
 800736c:	d115      	bne.n	800739a <osTimerStart+0x4e>
    {
      result = osErrorOS;
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	b913      	cbnz	r3, 8007378 <osTimerStart+0x2c>
  osStatus result = osOK;
 8007372:	2000      	movs	r0, #0

#else 
  result = osErrorOS;
#endif
  return result;
}
 8007374:	b004      	add	sp, #16
 8007376:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8007378:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800737c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007380:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	e7f1      	b.n	8007372 <osTimerStart+0x26>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800738e:	2104      	movs	r1, #4
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	f001 fd11 	bl	8008db8 <xTimerGenericCommand>
 8007396:	2801      	cmp	r0, #1
 8007398:	d0eb      	beq.n	8007372 <osTimerStart+0x26>
      result = osErrorOS;
 800739a:	20ff      	movs	r0, #255	; 0xff
  return result;
 800739c:	e7ea      	b.n	8007374 <osTimerStart+0x28>

0800739e <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800739e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80073a0:	2300      	movs	r3, #0
  uint32_t ulPreviousNotificationValue = 0;
 80073a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80073a6:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode())
 80073aa:	b1d3      	cbz	r3, 80073e2 <osSignalSet+0x44>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80073ac:	ab02      	add	r3, sp, #8
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	2201      	movs	r2, #1
 80073b2:	ab03      	add	r3, sp, #12
 80073b4:	f001 fb94 	bl	8008ae0 <xTaskGenericNotifyFromISR>
 80073b8:	2801      	cmp	r0, #1
 80073ba:	d004      	beq.n	80073c6 <osSignalSet+0x28>
      return 0x80000000;
 80073bc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80073c0:	b005      	add	sp, #20
 80073c2:	f85d fb04 	ldr.w	pc, [sp], #4
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80073c6:	9b02      	ldr	r3, [sp, #8]
 80073c8:	b14b      	cbz	r3, 80073de <osSignalSet+0x40>
 80073ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80073ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073d2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	f3bf 8f6f 	isb	sy
  return ulPreviousNotificationValue;
 80073de:	9803      	ldr	r0, [sp, #12]
 80073e0:	e7ee      	b.n	80073c0 <osSignalSet+0x22>
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80073e2:	2201      	movs	r2, #1
 80073e4:	ab03      	add	r3, sp, #12
 80073e6:	f001 fb0d 	bl	8008a04 <xTaskGenericNotify>
 80073ea:	2801      	cmp	r0, #1
 80073ec:	d0f7      	beq.n	80073de <osSignalSet+0x40>
 80073ee:	e7e5      	b.n	80073bc <osSignalSet+0x1e>

080073f0 <osSignalWait>:

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80073f0:	2300      	movs	r3, #0
{
 80073f2:	b530      	push	{r4, r5, lr}
 80073f4:	b085      	sub	sp, #20
 80073f6:	4605      	mov	r5, r0
 80073f8:	4614      	mov	r4, r2
  ret.value.signals = 0;  
 80073fa:	9302      	str	r3, [sp, #8]
 80073fc:	f3ef 8005 	mrs	r0, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 8007400:	b9c0      	cbnz	r0, 8007434 <osSignalWait+0x44>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8007402:	4613      	mov	r3, r2
 8007404:	aa02      	add	r2, sp, #8
 8007406:	f001 fab3 	bl	8008970 <xTaskNotifyWait>
 800740a:	2801      	cmp	r0, #1
 800740c:	d00c      	beq.n	8007428 <osSignalWait+0x38>
    {
      if(ticks == 0)  ret.status = osOK;
 800740e:	1e23      	subs	r3, r4, #0
 8007410:	bf18      	it	ne
 8007412:	2301      	movne	r3, #1
 8007414:	019b      	lsls	r3, r3, #6
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8007416:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8007418:	ab04      	add	r3, sp, #16
 800741a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800741e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8007422:	4628      	mov	r0, r5
 8007424:	b005      	add	sp, #20
 8007426:	bd30      	pop	{r4, r5, pc}
    else if(ret.value.signals < 0)
 8007428:	9b02      	ldr	r3, [sp, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	bfac      	ite	ge
 800742e:	2308      	movge	r3, #8
 8007430:	2386      	movlt	r3, #134	; 0x86
 8007432:	e7f0      	b.n	8007416 <osSignalWait+0x26>
 8007434:	2382      	movs	r3, #130	; 0x82
 8007436:	e7ee      	b.n	8007416 <osSignalWait+0x26>

08007438 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007438:	4603      	mov	r3, r0
 800743a:	b513      	push	{r0, r1, r4, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800743c:	685c      	ldr	r4, [r3, #4]
{ 
 800743e:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 8007440:	b164      	cbz	r4, 800745c <osSemaphoreCreate+0x24>
    if (count == 1) {
 8007442:	2901      	cmp	r1, #1
 8007444:	d119      	bne.n	800747a <osSemaphoreCreate+0x42>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007446:	2303      	movs	r3, #3
 8007448:	2200      	movs	r2, #0
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	4611      	mov	r1, r2
 800744e:	4623      	mov	r3, r4
 8007450:	f000 f9b9 	bl	80077c6 <xQueueGenericCreateStatic>
 8007454:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007456:	4620      	mov	r0, r4
 8007458:	b002      	add	sp, #8
 800745a:	bd10      	pop	{r4, pc}
    if (count == 1) {
 800745c:	2901      	cmp	r1, #1
 800745e:	d1fa      	bne.n	8007456 <osSemaphoreCreate+0x1e>
      vSemaphoreCreateBinary(sema);
 8007460:	4621      	mov	r1, r4
 8007462:	2203      	movs	r2, #3
 8007464:	f000 f9f8 	bl	8007858 <xQueueGenericCreate>
 8007468:	4604      	mov	r4, r0
 800746a:	2800      	cmp	r0, #0
 800746c:	d0f3      	beq.n	8007456 <osSemaphoreCreate+0x1e>
 800746e:	2300      	movs	r3, #0
 8007470:	461a      	mov	r2, r3
 8007472:	4619      	mov	r1, r3
 8007474:	f000 fa14 	bl	80078a0 <xQueueGenericSend>
 8007478:	e7ed      	b.n	8007456 <osSemaphoreCreate+0x1e>
      return NULL;
 800747a:	2400      	movs	r4, #0
 800747c:	e7eb      	b.n	8007456 <osSemaphoreCreate+0x1e>

0800747e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800747e:	4603      	mov	r3, r0
 8007480:	b513      	push	{r0, r1, r4, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007482:	c807      	ldmia	r0, {r0, r1, r2}
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007484:	b10a      	cbz	r2, 800748a <osMessageCreate+0xc>
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	b92b      	cbnz	r3, 8007496 <osMessageCreate+0x18>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800748a:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800748c:	b002      	add	sp, #8
 800748e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007492:	f000 b9e1 	b.w	8007858 <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007496:	2400      	movs	r4, #0
 8007498:	9400      	str	r4, [sp, #0]
 800749a:	f000 f994 	bl	80077c6 <xQueueGenericCreateStatic>
}
 800749e:	b002      	add	sp, #8
 80074a0:	bd10      	pop	{r4, pc}

080074a2 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80074a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80074a4:	2400      	movs	r4, #0
{
 80074a6:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80074a8:	9403      	str	r4, [sp, #12]
 80074aa:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 80074ae:	b1b3      	cbz	r3, 80074de <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80074b0:	4623      	mov	r3, r4
 80074b2:	aa03      	add	r2, sp, #12
 80074b4:	a901      	add	r1, sp, #4
 80074b6:	f000 faa6 	bl	8007a06 <xQueueGenericSendFromISR>
 80074ba:	2801      	cmp	r0, #1
 80074bc:	d117      	bne.n	80074ee <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80074be:	9b03      	ldr	r3, [sp, #12]
 80074c0:	b913      	cbnz	r3, 80074c8 <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80074c2:	2000      	movs	r0, #0
}
 80074c4:	b004      	add	sp, #16
 80074c6:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80074c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80074cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	e7f1      	b.n	80074c2 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80074de:	2a01      	cmp	r2, #1
 80074e0:	bf38      	it	cc
 80074e2:	2201      	movcc	r2, #1
 80074e4:	a901      	add	r1, sp, #4
 80074e6:	f000 f9db 	bl	80078a0 <xQueueGenericSend>
 80074ea:	2801      	cmp	r0, #1
 80074ec:	d0e9      	beq.n	80074c2 <osMessagePut+0x20>
      return osErrorOS;
 80074ee:	20ff      	movs	r0, #255	; 0xff
 80074f0:	e7e8      	b.n	80074c4 <osMessagePut+0x22>

080074f2 <osMessageGet>:
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80074f2:	2300      	movs	r3, #0
{
 80074f4:	b530      	push	{r4, r5, lr}
 80074f6:	b085      	sub	sp, #20
 80074f8:	4605      	mov	r5, r0
 80074fa:	4614      	mov	r4, r2
 80074fc:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 80074fe:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8007500:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8007502:	b911      	cbnz	r1, 800750a <osMessageGet+0x18>
    event.status = osErrorParameter;
 8007504:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8007506:	9301      	str	r3, [sp, #4]
 8007508:	e018      	b.n	800753c <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8007510:	b1e3      	cbz	r3, 800754c <osMessageGet+0x5a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007512:	466a      	mov	r2, sp
 8007514:	a902      	add	r1, sp, #8
 8007516:	f000 fb76 	bl	8007c06 <xQueueReceiveFromISR>
 800751a:	1e43      	subs	r3, r0, #1
 800751c:	4258      	negs	r0, r3
 800751e:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 8007520:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007522:	0100      	lsls	r0, r0, #4
 8007524:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8007526:	b14b      	cbz	r3, 800753c <osMessageGet+0x4a>
 8007528:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800752c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007530:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	f3bf 8f6f 	isb	sy
    return event;
 800753c:	ab04      	add	r3, sp, #16
 800753e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007542:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 8007546:	4628      	mov	r0, r5
 8007548:	b005      	add	sp, #20
 800754a:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800754c:	a902      	add	r1, sp, #8
 800754e:	f000 fabb 	bl	8007ac8 <xQueueReceive>
 8007552:	2801      	cmp	r0, #1
 8007554:	d101      	bne.n	800755a <osMessageGet+0x68>
      event.status = osEventMessage;
 8007556:	2310      	movs	r3, #16
 8007558:	e7d5      	b.n	8007506 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800755a:	3c00      	subs	r4, #0
 800755c:	bf18      	it	ne
 800755e:	2401      	movne	r4, #1
 8007560:	01a4      	lsls	r4, r4, #6
 8007562:	9401      	str	r4, [sp, #4]
  return event;
 8007564:	e7ea      	b.n	800753c <osMessageGet+0x4a>

08007566 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8007566:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8007568:	f001 f86c 	bl	8008644 <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 800756c:	2000      	movs	r0, #0
 800756e:	bd08      	pop	{r3, pc}

08007570 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8007570:	b508      	push	{r3, lr}
 8007572:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8007576:	b17b      	cbz	r3, 8007598 <osThreadResume+0x28>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8007578:	f000 fdfe 	bl	8008178 <xTaskResumeFromISR>
 800757c:	2801      	cmp	r0, #1
 800757e:	d109      	bne.n	8007594 <osThreadResume+0x24>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8007580:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007588:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	f3bf 8f6f 	isb	sy
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 8007594:	2000      	movs	r0, #0
 8007596:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 8007598:	f000 fdac 	bl	80080f4 <vTaskResume>
 800759c:	e7fa      	b.n	8007594 <osThreadResume+0x24>

0800759e <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800759e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80075a0:	2901      	cmp	r1, #1
 80075a2:	bf38      	it	cc
 80075a4:	2101      	movcc	r1, #1
 80075a6:	f000 ff9d 	bl	80084e4 <vTaskDelayUntil>
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80075aa:	2000      	movs	r0, #0
 80075ac:	bd08      	pop	{r3, pc}

080075ae <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075ae:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075b2:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075b6:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075ba:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075bc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80075be:	2300      	movs	r3, #0
 80075c0:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80075c2:	4770      	bx	lr

080075c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80075c4:	2300      	movs	r3, #0
 80075c6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075c8:	4770      	bx	lr

080075ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80075ca:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075cc:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80075ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075d0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075d6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80075d8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80075da:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80075dc:	3301      	adds	r3, #1
 80075de:	6003      	str	r3, [r0, #0]
}
 80075e0:	4770      	bx	lr

080075e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075e2:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075e4:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80075e6:	1c63      	adds	r3, r4, #1
 80075e8:	d10a      	bne.n	8007600 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80075ea:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075f0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075f2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80075f4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80075f6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80075f8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80075fa:	3301      	adds	r3, #1
 80075fc:	6003      	str	r3, [r0, #0]
}
 80075fe:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007600:	f100 0208 	add.w	r2, r0, #8
 8007604:	4613      	mov	r3, r2
 8007606:	6852      	ldr	r2, [r2, #4]
 8007608:	6815      	ldr	r5, [r2, #0]
 800760a:	42a5      	cmp	r5, r4
 800760c:	d9fa      	bls.n	8007604 <vListInsert+0x22>
 800760e:	e7ed      	b.n	80075ec <vListInsert+0xa>

08007610 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007610:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007612:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007616:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007618:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800761a:	6859      	ldr	r1, [r3, #4]
 800761c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800761e:	bf08      	it	eq
 8007620:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007622:	2200      	movs	r2, #0
 8007624:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	3a01      	subs	r2, #1
 800762a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800762c:	6818      	ldr	r0, [r3, #0]
}
 800762e:	4770      	bx	lr

08007630 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007630:	b510      	push	{r4, lr}
 8007632:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007634:	f001 fd66 	bl	8009104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007638:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800763a:	f001 fd83 	bl	8009144 <vPortExitCritical>

	return xReturn;
}
 800763e:	fab4 f084 	clz	r0, r4
 8007642:	0940      	lsrs	r0, r0, #5
 8007644:	bd10      	pop	{r4, pc}

08007646 <prvCopyDataToQueue>:
{
 8007646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007648:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800764a:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800764c:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800764e:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007650:	b952      	cbnz	r2, 8007668 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007652:	6807      	ldr	r7, [r0, #0]
 8007654:	bb47      	cbnz	r7, 80076a8 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007656:	6840      	ldr	r0, [r0, #4]
 8007658:	f001 f93a 	bl	80088d0 <xTaskPriorityDisinherit>
 800765c:	4605      	mov	r5, r0
				pxQueue->pxMutexHolder = NULL;
 800765e:	6067      	str	r7, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007660:	3601      	adds	r6, #1
}
 8007662:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007664:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007668:	b965      	cbnz	r5, 8007684 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800766a:	6880      	ldr	r0, [r0, #8]
 800766c:	f002 f8e4 	bl	8009838 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007670:	68a3      	ldr	r3, [r4, #8]
 8007672:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007674:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007676:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007678:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800767a:	4293      	cmp	r3, r2
 800767c:	d3f0      	bcc.n	8007660 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	60a3      	str	r3, [r4, #8]
 8007682:	e7ed      	b.n	8007660 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007684:	68c0      	ldr	r0, [r0, #12]
 8007686:	f002 f8d7 	bl	8009838 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800768a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800768c:	68e3      	ldr	r3, [r4, #12]
 800768e:	4251      	negs	r1, r2
 8007690:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007692:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007694:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007696:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007698:	bf3e      	ittt	cc
 800769a:	6863      	ldrcc	r3, [r4, #4]
 800769c:	185b      	addcc	r3, r3, r1
 800769e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80076a0:	2d02      	cmp	r5, #2
 80076a2:	d101      	bne.n	80076a8 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076a4:	b116      	cbz	r6, 80076ac <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 80076a6:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80076a8:	2500      	movs	r5, #0
 80076aa:	e7d9      	b.n	8007660 <prvCopyDataToQueue+0x1a>
 80076ac:	4635      	mov	r5, r6
 80076ae:	e7d7      	b.n	8007660 <prvCopyDataToQueue+0x1a>

080076b0 <prvCopyDataFromQueue>:
{
 80076b0:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80076b4:	4608      	mov	r0, r1
 80076b6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076b8:	b162      	cbz	r2, 80076d4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80076ba:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076bc:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80076be:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076c0:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80076c2:	bf28      	it	cs
 80076c4:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80076c6:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80076c8:	bf28      	it	cs
 80076ca:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80076cc:	68d9      	ldr	r1, [r3, #12]
}
 80076ce:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80076d0:	f002 b8b2 	b.w	8009838 <memcpy>
}
 80076d4:	bc10      	pop	{r4}
 80076d6:	4770      	bx	lr

080076d8 <prvUnlockQueue>:
{
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80076dc:	f001 fd12 	bl	8009104 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80076e0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076e4:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80076e8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076ea:	2d00      	cmp	r5, #0
 80076ec:	dc14      	bgt.n	8007718 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80076ee:	23ff      	movs	r3, #255	; 0xff
 80076f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80076f4:	f001 fd26 	bl	8009144 <vPortExitCritical>
	taskENTER_CRITICAL();
 80076f8:	f001 fd04 	bl	8009104 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80076fc:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007700:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8007704:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007706:	2d00      	cmp	r5, #0
 8007708:	dc12      	bgt.n	8007730 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800770a:	23ff      	movs	r3, #255	; 0xff
 800770c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8007710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007714:	f001 bd16 	b.w	8009144 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0e7      	beq.n	80076ee <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800771e:	4630      	mov	r0, r6
 8007720:	f001 f836 	bl	8008790 <xTaskRemoveFromEventList>
 8007724:	b108      	cbz	r0, 800772a <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007726:	f001 f8bd 	bl	80088a4 <vTaskMissedYield>
			--cTxLock;
 800772a:	3d01      	subs	r5, #1
 800772c:	b26d      	sxtb	r5, r5
 800772e:	e7dc      	b.n	80076ea <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0e9      	beq.n	800770a <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007736:	4630      	mov	r0, r6
 8007738:	f001 f82a 	bl	8008790 <xTaskRemoveFromEventList>
 800773c:	b108      	cbz	r0, 8007742 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800773e:	f001 f8b1 	bl	80088a4 <vTaskMissedYield>
				--cRxLock;
 8007742:	3d01      	subs	r5, #1
 8007744:	b26d      	sxtb	r5, r5
 8007746:	e7de      	b.n	8007706 <prvUnlockQueue+0x2e>

08007748 <xQueueGenericReset>:
{
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800774c:	4604      	mov	r4, r0
 800774e:	b940      	cbnz	r0, 8007762 <xQueueGenericReset+0x1a>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	e7fe      	b.n	8007760 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8007762:	f001 fccf 	bl	8009104 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007766:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 800776a:	434b      	muls	r3, r1
 800776c:	6822      	ldr	r2, [r4, #0]
 800776e:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007770:	1a5b      	subs	r3, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007772:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007774:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007776:	2000      	movs	r0, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007778:	441a      	add	r2, r3
		pxQueue->cRxLock = queueUNLOCKED;
 800777a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800777c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800777e:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007780:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007784:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007788:	b9a5      	cbnz	r5, 80077b4 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800778a:	6923      	ldr	r3, [r4, #16]
 800778c:	b173      	cbz	r3, 80077ac <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800778e:	f104 0010 	add.w	r0, r4, #16
 8007792:	f000 fffd 	bl	8008790 <xTaskRemoveFromEventList>
 8007796:	b148      	cbz	r0, 80077ac <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8007798:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800779c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80077ac:	f001 fcca 	bl	8009144 <vPortExitCritical>
}
 80077b0:	2001      	movs	r0, #1
 80077b2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077b4:	f104 0010 	add.w	r0, r4, #16
 80077b8:	f7ff fef9 	bl	80075ae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80077c0:	f7ff fef5 	bl	80075ae <vListInitialise>
 80077c4:	e7f2      	b.n	80077ac <xQueueGenericReset+0x64>

080077c6 <xQueueGenericCreateStatic>:
	{
 80077c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077c8:	460d      	mov	r5, r1
 80077ca:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077cc:	b940      	cbnz	r0, 80077e0 <xQueueGenericCreateStatic+0x1a>
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	e7fe      	b.n	80077de <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 80077e0:	b943      	cbnz	r3, 80077f4 <xQueueGenericCreateStatic+0x2e>
 80077e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	e7fe      	b.n	80077f2 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077f4:	b14a      	cbz	r2, 800780a <xQueueGenericCreateStatic+0x44>
 80077f6:	b991      	cbnz	r1, 800781e <xQueueGenericCreateStatic+0x58>
 80077f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	e7fe      	b.n	8007808 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800780a:	b141      	cbz	r1, 800781e <xQueueGenericCreateStatic+0x58>
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	e7fe      	b.n	800781c <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800781e:	2348      	movs	r3, #72	; 0x48
 8007820:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007822:	9b01      	ldr	r3, [sp, #4]
 8007824:	2b48      	cmp	r3, #72	; 0x48
 8007826:	d008      	beq.n	800783a <xQueueGenericCreateStatic+0x74>
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	e7fe      	b.n	8007838 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800783a:	2101      	movs	r1, #1
	if( uxItemSize == ( UBaseType_t ) 0 )
 800783c:	2d00      	cmp	r5, #0
 800783e:	bf08      	it	eq
 8007840:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8007842:	e9c4 050f 	strd	r0, r5, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007846:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800784a:	4620      	mov	r0, r4
 800784c:	6022      	str	r2, [r4, #0]
 800784e:	f7ff ff7b 	bl	8007748 <xQueueGenericReset>
	}
 8007852:	4620      	mov	r0, r4
 8007854:	b003      	add	sp, #12
 8007856:	bd30      	pop	{r4, r5, pc}

08007858 <xQueueGenericCreate>:
	{
 8007858:	b570      	push	{r4, r5, r6, lr}
 800785a:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800785c:	4606      	mov	r6, r0
 800785e:	b940      	cbnz	r0, 8007872 <xQueueGenericCreate+0x1a>
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	e7fe      	b.n	8007870 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007872:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007874:	3048      	adds	r0, #72	; 0x48
 8007876:	f001 fd75 	bl	8009364 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800787a:	4604      	mov	r4, r0
 800787c:	b160      	cbz	r0, 8007898 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800787e:	2300      	movs	r3, #0
 8007880:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007884:	b155      	cbz	r5, 800789c <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007886:	f100 0348 	add.w	r3, r0, #72	; 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800788a:	2101      	movs	r1, #1
 800788c:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800788e:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 8007892:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007894:	f7ff ff58 	bl	8007748 <xQueueGenericReset>
	}
 8007898:	4620      	mov	r0, r4
 800789a:	bd70      	pop	{r4, r5, r6, pc}
 800789c:	4603      	mov	r3, r0
 800789e:	e7f4      	b.n	800788a <xQueueGenericCreate+0x32>

080078a0 <xQueueGenericSend>:
{
 80078a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078a4:	b085      	sub	sp, #20
 80078a6:	4688      	mov	r8, r1
 80078a8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80078aa:	4604      	mov	r4, r0
{
 80078ac:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80078ae:	b940      	cbnz	r0, 80078c2 <xQueueGenericSend+0x22>
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	e7fe      	b.n	80078c0 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078c2:	b951      	cbnz	r1, 80078da <xQueueGenericSend+0x3a>
 80078c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80078c6:	b143      	cbz	r3, 80078da <xQueueGenericSend+0x3a>
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	e7fe      	b.n	80078d8 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078da:	2f02      	cmp	r7, #2
 80078dc:	d10b      	bne.n	80078f6 <xQueueGenericSend+0x56>
 80078de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d008      	beq.n	80078f6 <xQueueGenericSend+0x56>
 80078e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	e7fe      	b.n	80078f4 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078f6:	f000 ffdb 	bl	80088b0 <xTaskGetSchedulerState>
 80078fa:	4606      	mov	r6, r0
 80078fc:	b950      	cbnz	r0, 8007914 <xQueueGenericSend+0x74>
 80078fe:	9b01      	ldr	r3, [sp, #4]
 8007900:	b14b      	cbz	r3, 8007916 <xQueueGenericSend+0x76>
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	e7fe      	b.n	8007912 <xQueueGenericSend+0x72>
 8007914:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007916:	f04f 0900 	mov.w	r9, #0
 800791a:	e037      	b.n	800798c <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800791c:	9d01      	ldr	r5, [sp, #4]
 800791e:	b91d      	cbnz	r5, 8007928 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8007920:	f001 fc10 	bl	8009144 <vPortExitCritical>
			return errQUEUE_FULL;
 8007924:	2000      	movs	r0, #0
 8007926:	e052      	b.n	80079ce <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 8007928:	b916      	cbnz	r6, 8007930 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800792a:	a802      	add	r0, sp, #8
 800792c:	f000 ff72 	bl	8008814 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007930:	f001 fc08 	bl	8009144 <vPortExitCritical>
		vTaskSuspendAll();
 8007934:	f000 fcc0 	bl	80082b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007938:	f001 fbe4 	bl	8009104 <vPortEnterCritical>
 800793c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007940:	2bff      	cmp	r3, #255	; 0xff
 8007942:	bf08      	it	eq
 8007944:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8007948:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800794c:	2bff      	cmp	r3, #255	; 0xff
 800794e:	bf08      	it	eq
 8007950:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8007954:	f001 fbf6 	bl	8009144 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007958:	a901      	add	r1, sp, #4
 800795a:	a802      	add	r0, sp, #8
 800795c:	f000 ff66 	bl	800882c <xTaskCheckForTimeOut>
 8007960:	2800      	cmp	r0, #0
 8007962:	d14a      	bne.n	80079fa <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007964:	f001 fbce 	bl	8009104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007968:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800796a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800796c:	429a      	cmp	r2, r3
 800796e:	d131      	bne.n	80079d4 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007970:	f001 fbe8 	bl	8009144 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007974:	9901      	ldr	r1, [sp, #4]
 8007976:	f104 0010 	add.w	r0, r4, #16
 800797a:	f000 fecf 	bl	800871c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800797e:	4620      	mov	r0, r4
 8007980:	f7ff feaa 	bl	80076d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007984:	f000 fd38 	bl	80083f8 <xTaskResumeAll>
 8007988:	b360      	cbz	r0, 80079e4 <xQueueGenericSend+0x144>
 800798a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800798c:	f001 fbba 	bl	8009104 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007990:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007992:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007994:	429a      	cmp	r2, r3
 8007996:	d301      	bcc.n	800799c <xQueueGenericSend+0xfc>
 8007998:	2f02      	cmp	r7, #2
 800799a:	d1bf      	bne.n	800791c <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800799c:	463a      	mov	r2, r7
 800799e:	4641      	mov	r1, r8
 80079a0:	4620      	mov	r0, r4
 80079a2:	f7ff fe50 	bl	8007646 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079a8:	b11b      	cbz	r3, 80079b2 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80079ae:	f000 feef 	bl	8008790 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80079b2:	b148      	cbz	r0, 80079c8 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 80079b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80079b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80079c8:	f001 fbbc 	bl	8009144 <vPortExitCritical>
				return pdPASS;
 80079cc:	2001      	movs	r0, #1
}
 80079ce:	b005      	add	sp, #20
 80079d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 80079d4:	f001 fbb6 	bl	8009144 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80079d8:	4620      	mov	r0, r4
 80079da:	f7ff fe7d 	bl	80076d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079de:	f000 fd0b 	bl	80083f8 <xTaskResumeAll>
 80079e2:	e7d2      	b.n	800798a <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 80079e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80079e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	e7c7      	b.n	800798a <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 80079fa:	4620      	mov	r0, r4
 80079fc:	f7ff fe6c 	bl	80076d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a00:	f000 fcfa 	bl	80083f8 <xTaskResumeAll>
 8007a04:	e78e      	b.n	8007924 <xQueueGenericSend+0x84>

08007a06 <xQueueGenericSendFromISR>:
{
 8007a06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a0a:	4689      	mov	r9, r1
 8007a0c:	4690      	mov	r8, r2
 8007a0e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007a10:	4604      	mov	r4, r0
 8007a12:	b940      	cbnz	r0, 8007a26 <xQueueGenericSendFromISR+0x20>
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	e7fe      	b.n	8007a24 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a26:	b951      	cbnz	r1, 8007a3e <xQueueGenericSendFromISR+0x38>
 8007a28:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007a2a:	b143      	cbz	r3, 8007a3e <xQueueGenericSendFromISR+0x38>
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	e7fe      	b.n	8007a3c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a3e:	2f02      	cmp	r7, #2
 8007a40:	d10b      	bne.n	8007a5a <xQueueGenericSendFromISR+0x54>
 8007a42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d008      	beq.n	8007a5a <xQueueGenericSendFromISR+0x54>
 8007a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	e7fe      	b.n	8007a58 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a5a:	f001 fc2f 	bl	80092bc <vPortValidateInterruptPriority>
	__asm volatile
 8007a5e:	f3ef 8611 	mrs	r6, BASEPRI
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007a74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d301      	bcc.n	8007a7e <xQueueGenericSendFromISR+0x78>
 8007a7a:	2f02      	cmp	r7, #2
 8007a7c:	d122      	bne.n	8007ac4 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a7e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a82:	463a      	mov	r2, r7
 8007a84:	4649      	mov	r1, r9
 8007a86:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a88:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a8a:	f7ff fddc 	bl	8007646 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007a8e:	1c6b      	adds	r3, r5, #1
 8007a90:	d113      	bne.n	8007aba <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a94:	b90b      	cbnz	r3, 8007a9a <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 8007a96:	2001      	movs	r0, #1
 8007a98:	e00b      	b.n	8007ab2 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a9a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007a9e:	f000 fe77 	bl	8008790 <xTaskRemoveFromEventList>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d0f7      	beq.n	8007a96 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 8007aa6:	f1b8 0f00 	cmp.w	r8, #0
 8007aaa:	d0f4      	beq.n	8007a96 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007aac:	2001      	movs	r0, #1
 8007aae:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8007ab2:	f386 8811 	msr	BASEPRI, r6
}
 8007ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007aba:	3501      	adds	r5, #1
 8007abc:	b26d      	sxtb	r5, r5
 8007abe:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8007ac2:	e7e8      	b.n	8007a96 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	e7f4      	b.n	8007ab2 <xQueueGenericSendFromISR+0xac>

08007ac8 <xQueueReceive>:
{
 8007ac8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007acc:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8007ace:	4604      	mov	r4, r0
{
 8007ad0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007ad2:	b940      	cbnz	r0, 8007ae6 <xQueueReceive+0x1e>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	e7fe      	b.n	8007ae4 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ae6:	b951      	cbnz	r1, 8007afe <xQueueReceive+0x36>
 8007ae8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007aea:	b143      	cbz	r3, 8007afe <xQueueReceive+0x36>
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	e7fe      	b.n	8007afc <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007afe:	f000 fed7 	bl	80088b0 <xTaskGetSchedulerState>
 8007b02:	4606      	mov	r6, r0
 8007b04:	b950      	cbnz	r0, 8007b1c <xQueueReceive+0x54>
 8007b06:	9b01      	ldr	r3, [sp, #4]
 8007b08:	b14b      	cbz	r3, 8007b1e <xQueueReceive+0x56>
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	e7fe      	b.n	8007b1a <xQueueReceive+0x52>
 8007b1c:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007b1e:	f04f 0800 	mov.w	r8, #0
 8007b22:	e03d      	b.n	8007ba0 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b24:	9d01      	ldr	r5, [sp, #4]
 8007b26:	b91d      	cbnz	r5, 8007b30 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 8007b28:	f001 fb0c 	bl	8009144 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	e056      	b.n	8007bde <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 8007b30:	b916      	cbnz	r6, 8007b38 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b32:	a802      	add	r0, sp, #8
 8007b34:	f000 fe6e 	bl	8008814 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007b38:	f001 fb04 	bl	8009144 <vPortExitCritical>
		vTaskSuspendAll();
 8007b3c:	f000 fbbc 	bl	80082b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b40:	f001 fae0 	bl	8009104 <vPortEnterCritical>
 8007b44:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007b48:	2bff      	cmp	r3, #255	; 0xff
 8007b4a:	bf08      	it	eq
 8007b4c:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8007b50:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007b54:	2bff      	cmp	r3, #255	; 0xff
 8007b56:	bf08      	it	eq
 8007b58:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8007b5c:	f001 faf2 	bl	8009144 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b60:	a901      	add	r1, sp, #4
 8007b62:	a802      	add	r0, sp, #8
 8007b64:	f000 fe62 	bl	800882c <xTaskCheckForTimeOut>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d141      	bne.n	8007bf0 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f7ff fd5f 	bl	8007630 <prvIsQueueEmpty>
 8007b72:	b3b8      	cbz	r0, 8007be4 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b74:	9901      	ldr	r1, [sp, #4]
 8007b76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007b7a:	f000 fdcf 	bl	800871c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f7ff fdaa 	bl	80076d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b84:	f000 fc38 	bl	80083f8 <xTaskResumeAll>
 8007b88:	b948      	cbnz	r0, 8007b9e <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8007b8a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b92:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007ba0:	f001 fab0 	bl	8009104 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ba4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ba6:	2d00      	cmp	r5, #0
 8007ba8:	d0bc      	beq.n	8007b24 <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007baa:	4639      	mov	r1, r7
 8007bac:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bae:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bb0:	f7ff fd7e 	bl	80076b0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bb4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bb6:	6923      	ldr	r3, [r4, #16]
 8007bb8:	b173      	cbz	r3, 8007bd8 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bba:	f104 0010 	add.w	r0, r4, #16
 8007bbe:	f000 fde7 	bl	8008790 <xTaskRemoveFromEventList>
 8007bc2:	b148      	cbz	r0, 8007bd8 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8007bc4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bcc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007bd8:	f001 fab4 	bl	8009144 <vPortExitCritical>
				return pdPASS;
 8007bdc:	2001      	movs	r0, #1
}
 8007bde:	b004      	add	sp, #16
 8007be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8007be4:	4620      	mov	r0, r4
 8007be6:	f7ff fd77 	bl	80076d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bea:	f000 fc05 	bl	80083f8 <xTaskResumeAll>
 8007bee:	e7d6      	b.n	8007b9e <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f7ff fd71 	bl	80076d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bf6:	f000 fbff 	bl	80083f8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f7ff fd18 	bl	8007630 <prvIsQueueEmpty>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d0cc      	beq.n	8007b9e <xQueueReceive+0xd6>
 8007c04:	e792      	b.n	8007b2c <xQueueReceive+0x64>

08007c06 <xQueueReceiveFromISR>:
{
 8007c06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c0a:	4689      	mov	r9, r1
 8007c0c:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8007c0e:	4605      	mov	r5, r0
 8007c10:	b940      	cbnz	r0, 8007c24 <xQueueReceiveFromISR+0x1e>
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	e7fe      	b.n	8007c22 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c24:	b951      	cbnz	r1, 8007c3c <xQueueReceiveFromISR+0x36>
 8007c26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007c28:	b143      	cbz	r3, 8007c3c <xQueueReceiveFromISR+0x36>
 8007c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	e7fe      	b.n	8007c3a <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c3c:	f001 fb3e 	bl	80092bc <vPortValidateInterruptPriority>
	__asm volatile
 8007c40:	f3ef 8711 	mrs	r7, BASEPRI
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c54:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c56:	b31c      	cbz	r4, 8007ca0 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c58:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	4628      	mov	r0, r5
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c60:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c62:	f7ff fd25 	bl	80076b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c66:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8007c68:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c6a:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8007c6c:	d113      	bne.n	8007c96 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c6e:	692b      	ldr	r3, [r5, #16]
 8007c70:	b90b      	cbnz	r3, 8007c76 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8007c72:	2001      	movs	r0, #1
 8007c74:	e00b      	b.n	8007c8e <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c76:	f105 0010 	add.w	r0, r5, #16
 8007c7a:	f000 fd89 	bl	8008790 <xTaskRemoveFromEventList>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	d0f7      	beq.n	8007c72 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8007c82:	f1b8 0f00 	cmp.w	r8, #0
 8007c86:	d0f4      	beq.n	8007c72 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c88:	2001      	movs	r0, #1
 8007c8a:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8007c8e:	f387 8811 	msr	BASEPRI, r7
}
 8007c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c96:	3601      	adds	r6, #1
 8007c98:	b276      	sxtb	r6, r6
 8007c9a:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8007c9e:	e7e8      	b.n	8007c72 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	e7f4      	b.n	8007c8e <xQueueReceiveFromISR+0x88>

08007ca4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ca4:	2300      	movs	r3, #0
	{
 8007ca6:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ca8:	4a06      	ldr	r2, [pc, #24]	; (8007cc4 <vQueueAddToRegistry+0x20>)
 8007caa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8007cae:	b92c      	cbnz	r4, 8007cbc <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007cb0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007cb4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007cb8:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007cba:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	2b08      	cmp	r3, #8
 8007cc0:	d1f3      	bne.n	8007caa <vQueueAddToRegistry+0x6>
 8007cc2:	e7fa      	b.n	8007cba <vQueueAddToRegistry+0x16>
 8007cc4:	20001858 	.word	0x20001858

08007cc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	4604      	mov	r4, r0
 8007ccc:	460d      	mov	r5, r1
 8007cce:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007cd0:	f001 fa18 	bl	8009104 <vPortEnterCritical>
 8007cd4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007cd8:	2bff      	cmp	r3, #255	; 0xff
 8007cda:	bf04      	itt	eq
 8007cdc:	2300      	moveq	r3, #0
 8007cde:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8007ce2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007ce6:	2bff      	cmp	r3, #255	; 0xff
 8007ce8:	bf04      	itt	eq
 8007cea:	2300      	moveq	r3, #0
 8007cec:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8007cf0:	f001 fa28 	bl	8009144 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007cf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007cf6:	b92b      	cbnz	r3, 8007d04 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007cf8:	4632      	mov	r2, r6
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007d00:	f000 fd26 	bl	8008750 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d04:	4620      	mov	r0, r4
	}
 8007d06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007d0a:	f7ff bce5 	b.w	80076d8 <prvUnlockQueue>
	...

08007d10 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d14:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d16:	f001 f9f5 	bl	8009104 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d1a:	4b2f      	ldr	r3, [pc, #188]	; (8007dd8 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8007d1c:	4e2f      	ldr	r6, [pc, #188]	; (8007ddc <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	4f2f      	ldr	r7, [pc, #188]	; (8007de0 <prvAddNewTaskToReadyList+0xd0>)
 8007d22:	3201      	adds	r2, #1
 8007d24:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007d26:	6835      	ldr	r5, [r6, #0]
 8007d28:	2d00      	cmp	r5, #0
 8007d2a:	d14a      	bne.n	8007dc2 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d2c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d11f      	bne.n	8007d74 <prvAddNewTaskToReadyList+0x64>
 8007d34:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d36:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d38:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d3a:	f7ff fc38 	bl	80075ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d3e:	2d07      	cmp	r5, #7
 8007d40:	f108 0814 	add.w	r8, r8, #20
 8007d44:	d1f7      	bne.n	8007d36 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d46:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8007de4 <prvAddNewTaskToReadyList+0xd4>
	vListInitialise( &xDelayedTaskList2 );
 8007d4a:	4d27      	ldr	r5, [pc, #156]	; (8007de8 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	f7ff fc2e 	bl	80075ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d52:	4628      	mov	r0, r5
 8007d54:	f7ff fc2b 	bl	80075ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d58:	4824      	ldr	r0, [pc, #144]	; (8007dec <prvAddNewTaskToReadyList+0xdc>)
 8007d5a:	f7ff fc28 	bl	80075ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d5e:	4824      	ldr	r0, [pc, #144]	; (8007df0 <prvAddNewTaskToReadyList+0xe0>)
 8007d60:	f7ff fc25 	bl	80075ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d64:	4823      	ldr	r0, [pc, #140]	; (8007df4 <prvAddNewTaskToReadyList+0xe4>)
 8007d66:	f7ff fc22 	bl	80075ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d6a:	4b23      	ldr	r3, [pc, #140]	; (8007df8 <prvAddNewTaskToReadyList+0xe8>)
 8007d6c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d70:	4b22      	ldr	r3, [pc, #136]	; (8007dfc <prvAddNewTaskToReadyList+0xec>)
 8007d72:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8007d74:	4a22      	ldr	r2, [pc, #136]	; (8007e00 <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 8007d76:	4923      	ldr	r1, [pc, #140]	; (8007e04 <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 8007d78:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007d7a:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007d80:	2301      	movs	r3, #1
 8007d82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007d84:	4093      	lsls	r3, r2
 8007d86:	4303      	orrs	r3, r0
 8007d88:	2014      	movs	r0, #20
 8007d8a:	600b      	str	r3, [r1, #0]
 8007d8c:	fb00 7002 	mla	r0, r0, r2, r7
 8007d90:	1d21      	adds	r1, r4, #4
 8007d92:	f7ff fc1a 	bl	80075ca <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007d96:	f001 f9d5 	bl	8009144 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007d9a:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <prvAddNewTaskToReadyList+0xf8>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	b173      	cbz	r3, 8007dbe <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007da0:	6833      	ldr	r3, [r6, #0]
 8007da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d209      	bcs.n	8007dbe <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8007daa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	f3bf 8f6f 	isb	sy
}
 8007dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8007dc2:	4b11      	ldr	r3, [pc, #68]	; (8007e08 <prvAddNewTaskToReadyList+0xf8>)
 8007dc4:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if( xSchedulerRunning == pdFALSE )
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	d1d3      	bne.n	8007d74 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dcc:	6832      	ldr	r2, [r6, #0]
 8007dce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007dd0:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8007dd2:	bf98      	it	ls
 8007dd4:	6034      	strls	r4, [r6, #0]
 8007dd6:	e7cd      	b.n	8007d74 <prvAddNewTaskToReadyList+0x64>
 8007dd8:	20001930 	.word	0x20001930
 8007ddc:	20001898 	.word	0x20001898
 8007de0:	200018a4 	.word	0x200018a4
 8007de4:	20001948 	.word	0x20001948
 8007de8:	2000195c 	.word	0x2000195c
 8007dec:	20001978 	.word	0x20001978
 8007df0:	200019a4 	.word	0x200019a4
 8007df4:	20001990 	.word	0x20001990
 8007df8:	2000189c 	.word	0x2000189c
 8007dfc:	200018a0 	.word	0x200018a0
 8007e00:	20001940 	.word	0x20001940
 8007e04:	20001944 	.word	0x20001944
 8007e08:	2000198c 	.word	0x2000198c

08007e0c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e0e:	4b1a      	ldr	r3, [pc, #104]	; (8007e78 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e10:	4d1a      	ldr	r5, [pc, #104]	; (8007e7c <prvAddCurrentTaskToDelayedList+0x70>)
{
 8007e12:	4606      	mov	r6, r0
const TickType_t xConstTickCount = xTickCount;
 8007e14:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e16:	6828      	ldr	r0, [r5, #0]
{
 8007e18:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e1a:	3004      	adds	r0, #4
 8007e1c:	f7ff fbf8 	bl	8007610 <uxListRemove>
 8007e20:	b940      	cbnz	r0, 8007e34 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007e22:	682a      	ldr	r2, [r5, #0]
 8007e24:	4916      	ldr	r1, [pc, #88]	; (8007e80 <prvAddCurrentTaskToDelayedList+0x74>)
 8007e26:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8007e28:	2201      	movs	r2, #1
 8007e2a:	680b      	ldr	r3, [r1, #0]
 8007e2c:	4082      	lsls	r2, r0
 8007e2e:	ea23 0302 	bic.w	r3, r3, r2
 8007e32:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e34:	1c73      	adds	r3, r6, #1
 8007e36:	d107      	bne.n	8007e48 <prvAddCurrentTaskToDelayedList+0x3c>
 8007e38:	b137      	cbz	r7, 8007e48 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e3a:	6829      	ldr	r1, [r5, #0]
 8007e3c:	4811      	ldr	r0, [pc, #68]	; (8007e84 <prvAddCurrentTaskToDelayedList+0x78>)
 8007e3e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e44:	f7ff bbc1 	b.w	80075ca <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	19a4      	adds	r4, r4, r6
 8007e4c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e4e:	d307      	bcc.n	8007e60 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e50:	4b0d      	ldr	r3, [pc, #52]	; (8007e88 <prvAddCurrentTaskToDelayedList+0x7c>)
 8007e52:	6818      	ldr	r0, [r3, #0]
 8007e54:	6829      	ldr	r1, [r5, #0]
}
 8007e56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e5a:	3104      	adds	r1, #4
 8007e5c:	f7ff bbc1 	b.w	80075e2 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e60:	4b0a      	ldr	r3, [pc, #40]	; (8007e8c <prvAddCurrentTaskToDelayedList+0x80>)
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	6829      	ldr	r1, [r5, #0]
 8007e66:	3104      	adds	r1, #4
 8007e68:	f7ff fbbb 	bl	80075e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e6c:	4b08      	ldr	r3, [pc, #32]	; (8007e90 <prvAddCurrentTaskToDelayedList+0x84>)
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8007e72:	bf88      	it	hi
 8007e74:	601c      	strhi	r4, [r3, #0]
}
 8007e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e78:	200019b8 	.word	0x200019b8
 8007e7c:	20001898 	.word	0x20001898
 8007e80:	20001944 	.word	0x20001944
 8007e84:	20001990 	.word	0x20001990
 8007e88:	200018a0 	.word	0x200018a0
 8007e8c:	2000189c 	.word	0x2000189c
 8007e90:	20001970 	.word	0x20001970

08007e94 <prvTaskIsTaskSuspended>:
		configASSERT( xTask );
 8007e94:	b940      	cbnz	r0, 8007ea8 <prvTaskIsTaskSuspended+0x14>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	e7fe      	b.n	8007ea6 <prvTaskIsTaskSuspended+0x12>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ea8:	6942      	ldr	r2, [r0, #20]
 8007eaa:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <prvTaskIsTaskSuspended+0x30>)
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d107      	bne.n	8007ec0 <prvTaskIsTaskSuspended+0x2c>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007eb0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007eb2:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <prvTaskIsTaskSuspended+0x34>)
 8007eb4:	4298      	cmp	r0, r3
 8007eb6:	d003      	beq.n	8007ec0 <prvTaskIsTaskSuspended+0x2c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007eb8:	fab0 f080 	clz	r0, r0
 8007ebc:	0940      	lsrs	r0, r0, #5
 8007ebe:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8007ec0:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007ec2:	4770      	bx	lr
 8007ec4:	20001990 	.word	0x20001990
 8007ec8:	20001978 	.word	0x20001978

08007ecc <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ecc:	4a06      	ldr	r2, [pc, #24]	; (8007ee8 <prvResetNextTaskUnblockTime+0x1c>)
 8007ece:	6813      	ldr	r3, [r2, #0]
 8007ed0:	6819      	ldr	r1, [r3, #0]
 8007ed2:	4b06      	ldr	r3, [pc, #24]	; (8007eec <prvResetNextTaskUnblockTime+0x20>)
 8007ed4:	b919      	cbnz	r1, 8007ede <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ed6:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007eda:	601a      	str	r2, [r3, #0]
}
 8007edc:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ede:	6812      	ldr	r2, [r2, #0]
 8007ee0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ee2:	68d2      	ldr	r2, [r2, #12]
 8007ee4:	6852      	ldr	r2, [r2, #4]
 8007ee6:	e7f8      	b.n	8007eda <prvResetNextTaskUnblockTime+0xe>
 8007ee8:	2000189c 	.word	0x2000189c
 8007eec:	20001970 	.word	0x20001970

08007ef0 <prvDeleteTCB>:
	{
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ef4:	304c      	adds	r0, #76	; 0x4c
 8007ef6:	f001 fc05 	bl	8009704 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007efa:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 8007efe:	b93b      	cbnz	r3, 8007f10 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8007f00:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007f02:	f001 fac1 	bl	8009488 <vPortFree>
				vPortFree( pxTCB );
 8007f06:	4620      	mov	r0, r4
	}
 8007f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8007f0c:	f001 babc 	b.w	8009488 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d0f8      	beq.n	8007f06 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d008      	beq.n	8007f2a <prvDeleteTCB+0x3a>
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	e7fe      	b.n	8007f28 <prvDeleteTCB+0x38>
	}
 8007f2a:	bd10      	pop	{r4, pc}

08007f2c <prvIdleTask>:
{
 8007f2c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f2e:	4c13      	ldr	r4, [pc, #76]	; (8007f7c <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007f30:	4f13      	ldr	r7, [pc, #76]	; (8007f80 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8007f32:	4d14      	ldr	r5, [pc, #80]	; (8007f84 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	b973      	cbnz	r3, 8007f56 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f38:	4b13      	ldr	r3, [pc, #76]	; (8007f88 <prvIdleTask+0x5c>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d9f8      	bls.n	8007f32 <prvIdleTask+0x6>
				taskYIELD();
 8007f40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	e7ed      	b.n	8007f32 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8007f56:	f001 f8d5 	bl	8009104 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f5e:	1d30      	adds	r0, r6, #4
 8007f60:	f7ff fb56 	bl	8007610 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f64:	682b      	ldr	r3, [r5, #0]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8007f70:	f001 f8e8 	bl	8009144 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007f74:	4630      	mov	r0, r6
 8007f76:	f7ff ffbb 	bl	8007ef0 <prvDeleteTCB>
 8007f7a:	e7db      	b.n	8007f34 <prvIdleTask+0x8>
 8007f7c:	20001934 	.word	0x20001934
 8007f80:	200019a4 	.word	0x200019a4
 8007f84:	20001930 	.word	0x20001930
 8007f88:	200018a4 	.word	0x200018a4

08007f8c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f90:	4607      	mov	r7, r0
 8007f92:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007f96:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007f9a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8007f9c:	3a01      	subs	r2, #1
 8007f9e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007fa2:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007fa4:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fa8:	1e4b      	subs	r3, r1, #1
 8007faa:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8007fae:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007fb0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8007fb4:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8007fb8:	b108      	cbz	r0, 8007fbe <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fba:	428b      	cmp	r3, r1
 8007fbc:	d1f8      	bne.n	8007fb0 <prvInitialiseNewTask.constprop.0+0x24>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fbe:	9d08      	ldr	r5, [sp, #32]
 8007fc0:	f04f 0a00 	mov.w	sl, #0
 8007fc4:	2d06      	cmp	r5, #6
 8007fc6:	bf28      	it	cs
 8007fc8:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fca:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8007fcc:	e9c4 5a11 	strd	r5, sl, [r4, #68]	; 0x44
	pxNewTCB->uxPriority = uxPriority;
 8007fd0:	62e5      	str	r5, [r4, #44]	; 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fd2:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fd6:	f7ff faf5 	bl	80075c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007fda:	f104 0018 	add.w	r0, r4, #24
 8007fde:	f7ff faf1 	bl	80075c4 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007fe2:	224c      	movs	r2, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fe4:	f1c5 0507 	rsb	r5, r5, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007fe8:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 8007fea:	f8c4 a098 	str.w	sl, [r4, #152]	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007fee:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ff0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ff2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ff4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ff6:	f884 a09c 	strb.w	sl, [r4, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ffa:	f001 fb65 	bl	80096c8 <memset>
 8007ffe:	4b0a      	ldr	r3, [pc, #40]	; (8008028 <prvInitialiseNewTask.constprop.0+0x9c>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008000:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008002:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008006:	6523      	str	r3, [r4, #80]	; 0x50
 8008008:	33d0      	adds	r3, #208	; 0xd0
 800800a:	6562      	str	r2, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800800c:	4630      	mov	r0, r6
 800800e:	464a      	mov	r2, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008010:	65a3      	str	r3, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008012:	f001 f853 	bl	80090bc <pxPortInitialiseStack>
 8008016:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008018:	f1b8 0f00 	cmp.w	r8, #0
 800801c:	d001      	beq.n	8008022 <prvInitialiseNewTask.constprop.0+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800801e:	f8c8 4000 	str.w	r4, [r8]
}
 8008022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008026:	bf00      	nop
 8008028:	20002ee4 	.word	0x20002ee4

0800802c <xTaskCreateStatic>:
	{
 800802c:	b570      	push	{r4, r5, r6, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008034:	b945      	cbnz	r5, 8008048 <xTaskCreateStatic+0x1c>
 8008036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	e7fe      	b.n	8008046 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008048:	b944      	cbnz	r4, 800805c <xTaskCreateStatic+0x30>
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	e7fe      	b.n	800805a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800805c:	26a0      	movs	r6, #160	; 0xa0
 800805e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008060:	9e05      	ldr	r6, [sp, #20]
 8008062:	2ea0      	cmp	r6, #160	; 0xa0
 8008064:	d008      	beq.n	8008078 <xTaskCreateStatic+0x4c>
 8008066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	e7fe      	b.n	8008076 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008078:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800807a:	2502      	movs	r5, #2
 800807c:	f884 509d 	strb.w	r5, [r4, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008080:	ad04      	add	r5, sp, #16
 8008082:	9501      	str	r5, [sp, #4]
 8008084:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008086:	9402      	str	r4, [sp, #8]
 8008088:	9500      	str	r5, [sp, #0]
 800808a:	f7ff ff7f 	bl	8007f8c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800808e:	4620      	mov	r0, r4
 8008090:	f7ff fe3e 	bl	8007d10 <prvAddNewTaskToReadyList>
	}
 8008094:	9804      	ldr	r0, [sp, #16]
 8008096:	b006      	add	sp, #24
 8008098:	bd70      	pop	{r4, r5, r6, pc}

0800809a <xTaskCreate>:
	{
 800809a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800809e:	4607      	mov	r7, r0
 80080a0:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a2:	0090      	lsls	r0, r2, #2
	{
 80080a4:	4688      	mov	r8, r1
 80080a6:	4616      	mov	r6, r2
 80080a8:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080aa:	f001 f95b 	bl	8009364 <pvPortMalloc>
			if( pxStack != NULL )
 80080ae:	4605      	mov	r5, r0
 80080b0:	b1e8      	cbz	r0, 80080ee <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80080b2:	20a0      	movs	r0, #160	; 0xa0
 80080b4:	f001 f956 	bl	8009364 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80080b8:	4604      	mov	r4, r0
 80080ba:	b1a8      	cbz	r0, 80080e8 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080bc:	2300      	movs	r3, #0
 80080be:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80080c4:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080ca:	4632      	mov	r2, r6
 80080cc:	4641      	mov	r1, r8
 80080ce:	9002      	str	r0, [sp, #8]
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	4638      	mov	r0, r7
 80080d4:	464b      	mov	r3, r9
 80080d6:	f7ff ff59 	bl	8007f8c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080da:	4620      	mov	r0, r4
 80080dc:	f7ff fe18 	bl	8007d10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080e0:	2001      	movs	r0, #1
	}
 80080e2:	b005      	add	sp, #20
 80080e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80080e8:	4628      	mov	r0, r5
 80080ea:	f001 f9cd 	bl	8009488 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080ee:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80080f2:	e7f6      	b.n	80080e2 <xTaskCreate+0x48>

080080f4 <vTaskResume>:
	{
 80080f4:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 80080f6:	4604      	mov	r4, r0
 80080f8:	b940      	cbnz	r0, 800810c <vTaskResume+0x18>
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	e7fe      	b.n	800810a <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800810c:	4d17      	ldr	r5, [pc, #92]	; (800816c <vTaskResume+0x78>)
 800810e:	682b      	ldr	r3, [r5, #0]
 8008110:	4283      	cmp	r3, r0
 8008112:	d02a      	beq.n	800816a <vTaskResume+0x76>
			taskENTER_CRITICAL();
 8008114:	f000 fff6 	bl	8009104 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008118:	4620      	mov	r0, r4
 800811a:	f7ff febb 	bl	8007e94 <prvTaskIsTaskSuspended>
 800811e:	b300      	cbz	r0, 8008162 <vTaskResume+0x6e>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008120:	1d26      	adds	r6, r4, #4
 8008122:	4630      	mov	r0, r6
 8008124:	f7ff fa74 	bl	8007610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008128:	2301      	movs	r3, #1
 800812a:	4911      	ldr	r1, [pc, #68]	; (8008170 <vTaskResume+0x7c>)
 800812c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800812e:	6808      	ldr	r0, [r1, #0]
 8008130:	4093      	lsls	r3, r2
 8008132:	4303      	orrs	r3, r0
 8008134:	2014      	movs	r0, #20
 8008136:	600b      	str	r3, [r1, #0]
 8008138:	4b0e      	ldr	r3, [pc, #56]	; (8008174 <vTaskResume+0x80>)
 800813a:	4631      	mov	r1, r6
 800813c:	fb00 3002 	mla	r0, r0, r2, r3
 8008140:	f7ff fa43 	bl	80075ca <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814a:	429a      	cmp	r2, r3
 800814c:	d309      	bcc.n	8008162 <vTaskResume+0x6e>
						taskYIELD_IF_USING_PREEMPTION();
 800814e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008156:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	f3bf 8f6f 	isb	sy
	}
 8008162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8008166:	f000 bfed 	b.w	8009144 <vPortExitCritical>
	}
 800816a:	bd70      	pop	{r4, r5, r6, pc}
 800816c:	20001898 	.word	0x20001898
 8008170:	20001944 	.word	0x20001944
 8008174:	200018a4 	.word	0x200018a4

08008178 <xTaskResumeFromISR>:
	{
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 800817a:	4605      	mov	r5, r0
 800817c:	b940      	cbnz	r0, 8008190 <xTaskResumeFromISR+0x18>
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	e7fe      	b.n	800818e <xTaskResumeFromISR+0x16>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008190:	f001 f894 	bl	80092bc <vPortValidateInterruptPriority>
	__asm volatile
 8008194:	f3ef 8711 	mrs	r7, BASEPRI
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80081a8:	4628      	mov	r0, r5
 80081aa:	f7ff fe73 	bl	8007e94 <prvTaskIsTaskSuspended>
 80081ae:	4604      	mov	r4, r0
 80081b0:	b1e0      	cbz	r0, 80081ec <xTaskResumeFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081b2:	4b14      	ldr	r3, [pc, #80]	; (8008204 <xTaskResumeFromISR+0x8c>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	b9eb      	cbnz	r3, 80081f4 <xTaskResumeFromISR+0x7c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081b8:	4b13      	ldr	r3, [pc, #76]	; (8008208 <xTaskResumeFromISR+0x90>)
 80081ba:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80081bc:	681b      	ldr	r3, [r3, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081be:	1d2e      	adds	r6, r5, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081c2:	4630      	mov	r0, r6
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081c4:	429c      	cmp	r4, r3
 80081c6:	bf34      	ite	cc
 80081c8:	2400      	movcc	r4, #0
 80081ca:	2401      	movcs	r4, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081cc:	f7ff fa20 	bl	8007610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081d0:	2301      	movs	r3, #1
 80081d2:	490e      	ldr	r1, [pc, #56]	; (800820c <xTaskResumeFromISR+0x94>)
 80081d4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80081d6:	6808      	ldr	r0, [r1, #0]
 80081d8:	4093      	lsls	r3, r2
 80081da:	4303      	orrs	r3, r0
 80081dc:	2014      	movs	r0, #20
 80081de:	600b      	str	r3, [r1, #0]
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <xTaskResumeFromISR+0x98>)
 80081e2:	4631      	mov	r1, r6
 80081e4:	fb00 3002 	mla	r0, r0, r2, r3
 80081e8:	f7ff f9ef 	bl	80075ca <vListInsertEnd>
	__asm volatile
 80081ec:	f387 8811 	msr	BASEPRI, r7
	}
 80081f0:	4620      	mov	r0, r4
 80081f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80081f4:	4807      	ldr	r0, [pc, #28]	; (8008214 <xTaskResumeFromISR+0x9c>)
 80081f6:	f105 0118 	add.w	r1, r5, #24
 80081fa:	f7ff f9e6 	bl	80075ca <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 80081fe:	2400      	movs	r4, #0
 8008200:	e7f4      	b.n	80081ec <xTaskResumeFromISR+0x74>
 8008202:	bf00      	nop
 8008204:	2000193c 	.word	0x2000193c
 8008208:	20001898 	.word	0x20001898
 800820c:	20001944 	.word	0x20001944
 8008210:	200018a4 	.word	0x200018a4
 8008214:	20001978 	.word	0x20001978

08008218 <vTaskStartScheduler>:
{
 8008218:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800821a:	2400      	movs	r4, #0
{
 800821c:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800821e:	aa07      	add	r2, sp, #28
 8008220:	a906      	add	r1, sp, #24
 8008222:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008224:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008228:	f7f9 fdb0 	bl	8001d8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800822c:	9b05      	ldr	r3, [sp, #20]
 800822e:	9a07      	ldr	r2, [sp, #28]
 8008230:	9302      	str	r3, [sp, #8]
 8008232:	9b06      	ldr	r3, [sp, #24]
 8008234:	4919      	ldr	r1, [pc, #100]	; (800829c <vTaskStartScheduler+0x84>)
 8008236:	e9cd 4300 	strd	r4, r3, [sp]
 800823a:	4819      	ldr	r0, [pc, #100]	; (80082a0 <vTaskStartScheduler+0x88>)
 800823c:	4623      	mov	r3, r4
 800823e:	f7ff fef5 	bl	800802c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008242:	b340      	cbz	r0, 8008296 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8008244:	f000 fd22 	bl	8008c8c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008248:	2801      	cmp	r0, #1
 800824a:	d119      	bne.n	8008280 <vTaskStartScheduler+0x68>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800825c:	4b11      	ldr	r3, [pc, #68]	; (80082a4 <vTaskStartScheduler+0x8c>)
 800825e:	4a12      	ldr	r2, [pc, #72]	; (80082a8 <vTaskStartScheduler+0x90>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	334c      	adds	r3, #76	; 0x4c
 8008264:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8008266:	f04f 32ff 	mov.w	r2, #4294967295
 800826a:	4b10      	ldr	r3, [pc, #64]	; (80082ac <vTaskStartScheduler+0x94>)
 800826c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800826e:	4b10      	ldr	r3, [pc, #64]	; (80082b0 <vTaskStartScheduler+0x98>)
 8008270:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008272:	4b10      	ldr	r3, [pc, #64]	; (80082b4 <vTaskStartScheduler+0x9c>)
 8008274:	601c      	str	r4, [r3, #0]
}
 8008276:	b008      	add	sp, #32
 8008278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800827c:	f000 bfc2 	b.w	8009204 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008280:	3001      	adds	r0, #1
 8008282:	d108      	bne.n	8008296 <vTaskStartScheduler+0x7e>
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	e7fe      	b.n	8008294 <vTaskStartScheduler+0x7c>
}
 8008296:	b008      	add	sp, #32
 8008298:	bd10      	pop	{r4, pc}
 800829a:	bf00      	nop
 800829c:	0800a58c 	.word	0x0800a58c
 80082a0:	08007f2d 	.word	0x08007f2d
 80082a4:	20001898 	.word	0x20001898
 80082a8:	2000005c 	.word	0x2000005c
 80082ac:	20001970 	.word	0x20001970
 80082b0:	2000198c 	.word	0x2000198c
 80082b4:	200019b8 	.word	0x200019b8

080082b8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80082b8:	4a02      	ldr	r2, [pc, #8]	; (80082c4 <vTaskSuspendAll+0xc>)
 80082ba:	6813      	ldr	r3, [r2, #0]
 80082bc:	3301      	adds	r3, #1
 80082be:	6013      	str	r3, [r2, #0]
}
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	2000193c 	.word	0x2000193c

080082c8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80082c8:	4b01      	ldr	r3, [pc, #4]	; (80082d0 <xTaskGetTickCount+0x8>)
 80082ca:	6818      	ldr	r0, [r3, #0]
}
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	200019b8 	.word	0x200019b8

080082d4 <xTaskIncrementTick>:
{
 80082d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082d8:	4b3c      	ldr	r3, [pc, #240]	; (80083cc <xTaskIncrementTick+0xf8>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d16e      	bne.n	80083be <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082e0:	4b3b      	ldr	r3, [pc, #236]	; (80083d0 <xTaskIncrementTick+0xfc>)
 80082e2:	681d      	ldr	r5, [r3, #0]
 80082e4:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80082e6:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082e8:	b9bd      	cbnz	r5, 800831a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80082ea:	4b3a      	ldr	r3, [pc, #232]	; (80083d4 <xTaskIncrementTick+0x100>)
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	6812      	ldr	r2, [r2, #0]
 80082f0:	b142      	cbz	r2, 8008304 <xTaskIncrementTick+0x30>
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	e7fe      	b.n	8008302 <xTaskIncrementTick+0x2e>
 8008304:	4a34      	ldr	r2, [pc, #208]	; (80083d8 <xTaskIncrementTick+0x104>)
 8008306:	6819      	ldr	r1, [r3, #0]
 8008308:	6810      	ldr	r0, [r2, #0]
 800830a:	6018      	str	r0, [r3, #0]
 800830c:	6011      	str	r1, [r2, #0]
 800830e:	4a33      	ldr	r2, [pc, #204]	; (80083dc <xTaskIncrementTick+0x108>)
 8008310:	6813      	ldr	r3, [r2, #0]
 8008312:	3301      	adds	r3, #1
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	f7ff fdd9 	bl	8007ecc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800831a:	4e31      	ldr	r6, [pc, #196]	; (80083e0 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800831c:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800831e:	6833      	ldr	r3, [r6, #0]
 8008320:	4f30      	ldr	r7, [pc, #192]	; (80083e4 <xTaskIncrementTick+0x110>)
 8008322:	42ab      	cmp	r3, r5
 8008324:	d910      	bls.n	8008348 <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008326:	2214      	movs	r2, #20
 8008328:	4b2f      	ldr	r3, [pc, #188]	; (80083e8 <xTaskIncrementTick+0x114>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832e:	4353      	muls	r3, r2
 8008330:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008332:	2b02      	cmp	r3, #2
 8008334:	bf28      	it	cs
 8008336:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8008338:	4b2c      	ldr	r3, [pc, #176]	; (80083ec <xTaskIncrementTick+0x118>)
 800833a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800833c:	2b00      	cmp	r3, #0
}
 800833e:	bf0c      	ite	eq
 8008340:	4620      	moveq	r0, r4
 8008342:	2001      	movne	r0, #1
 8008344:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008348:	f8df a088 	ldr.w	sl, [pc, #136]	; 80083d4 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800834c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80083f0 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008350:	f8da 3000 	ldr.w	r3, [sl]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	b91b      	cbnz	r3, 8008360 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008358:	f04f 33ff 	mov.w	r3, #4294967295
 800835c:	6033      	str	r3, [r6, #0]
					break;
 800835e:	e7e2      	b.n	8008326 <xTaskIncrementTick+0x52>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008360:	f8da 3000 	ldr.w	r3, [sl]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800836a:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800836e:	4295      	cmp	r5, r2
 8008370:	d201      	bcs.n	8008376 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8008372:	6032      	str	r2, [r6, #0]
						break;
 8008374:	e7d7      	b.n	8008326 <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008376:	f10b 0804 	add.w	r8, fp, #4
 800837a:	4640      	mov	r0, r8
 800837c:	f7ff f948 	bl	8007610 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008380:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8008384:	b11a      	cbz	r2, 800838e <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008386:	f10b 0018 	add.w	r0, fp, #24
 800838a:	f7ff f941 	bl	8007610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800838e:	2201      	movs	r2, #1
 8008390:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8008394:	f8d9 3000 	ldr.w	r3, [r9]
 8008398:	4082      	lsls	r2, r0
 800839a:	431a      	orrs	r2, r3
 800839c:	f8c9 2000 	str.w	r2, [r9]
 80083a0:	2214      	movs	r2, #20
 80083a2:	4641      	mov	r1, r8
 80083a4:	fb02 7000 	mla	r0, r2, r0, r7
 80083a8:	f7ff f90f 	bl	80075ca <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083ac:	4b0e      	ldr	r3, [pc, #56]	; (80083e8 <xTaskIncrementTick+0x114>)
 80083ae:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80083b2:	6819      	ldr	r1, [r3, #0]
 80083b4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80083b6:	429a      	cmp	r2, r3
 80083b8:	bf28      	it	cs
 80083ba:	2401      	movcs	r4, #1
 80083bc:	e7c8      	b.n	8008350 <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 80083be:	4a0d      	ldr	r2, [pc, #52]	; (80083f4 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 80083c0:	2400      	movs	r4, #0
		++uxPendedTicks;
 80083c2:	6813      	ldr	r3, [r2, #0]
 80083c4:	3301      	adds	r3, #1
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	e7b6      	b.n	8008338 <xTaskIncrementTick+0x64>
 80083ca:	bf00      	nop
 80083cc:	2000193c 	.word	0x2000193c
 80083d0:	200019b8 	.word	0x200019b8
 80083d4:	2000189c 	.word	0x2000189c
 80083d8:	200018a0 	.word	0x200018a0
 80083dc:	20001974 	.word	0x20001974
 80083e0:	20001970 	.word	0x20001970
 80083e4:	200018a4 	.word	0x200018a4
 80083e8:	20001898 	.word	0x20001898
 80083ec:	200019bc 	.word	0x200019bc
 80083f0:	20001944 	.word	0x20001944
 80083f4:	20001938 	.word	0x20001938

080083f8 <xTaskResumeAll>:
{
 80083f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80083fc:	4c31      	ldr	r4, [pc, #196]	; (80084c4 <xTaskResumeAll+0xcc>)
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	b943      	cbnz	r3, 8008414 <xTaskResumeAll+0x1c>
 8008402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	e7fe      	b.n	8008412 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008414:	f000 fe76 	bl	8009104 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	3b01      	subs	r3, #1
 800841c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800841e:	6824      	ldr	r4, [r4, #0]
 8008420:	b12c      	cbz	r4, 800842e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008422:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008424:	f000 fe8e 	bl	8009144 <vPortExitCritical>
}
 8008428:	4620      	mov	r0, r4
 800842a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800842e:	4b26      	ldr	r3, [pc, #152]	; (80084c8 <xTaskResumeAll+0xd0>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d0f5      	beq.n	8008422 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008436:	4d25      	ldr	r5, [pc, #148]	; (80084cc <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8008438:	4e25      	ldr	r6, [pc, #148]	; (80084d0 <xTaskResumeAll+0xd8>)
 800843a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80084d4 <xTaskResumeAll+0xdc>
 800843e:	e01f      	b.n	8008480 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008440:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 8008442:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008444:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008446:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800844a:	f104 0018 	add.w	r0, r4, #24
 800844e:	f7ff f8df 	bl	8007610 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008452:	4648      	mov	r0, r9
 8008454:	f7ff f8dc 	bl	8007610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008458:	2014      	movs	r0, #20
 800845a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800845c:	6831      	ldr	r1, [r6, #0]
 800845e:	fa07 f302 	lsl.w	r3, r7, r2
 8008462:	430b      	orrs	r3, r1
 8008464:	fb00 8002 	mla	r0, r0, r2, r8
 8008468:	4649      	mov	r1, r9
 800846a:	6033      	str	r3, [r6, #0]
 800846c:	f7ff f8ad 	bl	80075ca <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008470:	4b19      	ldr	r3, [pc, #100]	; (80084d8 <xTaskResumeAll+0xe0>)
 8008472:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008478:	429a      	cmp	r2, r3
 800847a:	d301      	bcc.n	8008480 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 800847c:	4b17      	ldr	r3, [pc, #92]	; (80084dc <xTaskResumeAll+0xe4>)
 800847e:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1dc      	bne.n	8008440 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008486:	b10c      	cbz	r4, 800848c <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8008488:	f7ff fd20 	bl	8007ecc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800848c:	4d14      	ldr	r5, [pc, #80]	; (80084e0 <xTaskResumeAll+0xe8>)
 800848e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008490:	b144      	cbz	r4, 80084a4 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8008492:	2701      	movs	r7, #1
 8008494:	4e11      	ldr	r6, [pc, #68]	; (80084dc <xTaskResumeAll+0xe4>)
							if( xTaskIncrementTick() != pdFALSE )
 8008496:	f7ff ff1d 	bl	80082d4 <xTaskIncrementTick>
 800849a:	b100      	cbz	r0, 800849e <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800849c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800849e:	3c01      	subs	r4, #1
 80084a0:	d1f9      	bne.n	8008496 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 80084a2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80084a4:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <xTaskResumeAll+0xe4>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d0ba      	beq.n	8008422 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80084ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80084b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80084c0:	2401      	movs	r4, #1
 80084c2:	e7af      	b.n	8008424 <xTaskResumeAll+0x2c>
 80084c4:	2000193c 	.word	0x2000193c
 80084c8:	20001930 	.word	0x20001930
 80084cc:	20001978 	.word	0x20001978
 80084d0:	20001944 	.word	0x20001944
 80084d4:	200018a4 	.word	0x200018a4
 80084d8:	20001898 	.word	0x20001898
 80084dc:	200019bc 	.word	0x200019bc
 80084e0:	20001938 	.word	0x20001938

080084e4 <vTaskDelayUntil>:
	{
 80084e4:	b510      	push	{r4, lr}
		configASSERT( pxPreviousWakeTime );
 80084e6:	b940      	cbnz	r0, 80084fa <vTaskDelayUntil+0x16>
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	e7fe      	b.n	80084f8 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 80084fa:	b941      	cbnz	r1, 800850e <vTaskDelayUntil+0x2a>
 80084fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	e7fe      	b.n	800850c <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 800850e:	4b18      	ldr	r3, [pc, #96]	; (8008570 <vTaskDelayUntil+0x8c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	b143      	cbz	r3, 8008526 <vTaskDelayUntil+0x42>
 8008514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	e7fe      	b.n	8008524 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 8008526:	f7ff fec7 	bl	80082b8 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 800852a:	4b12      	ldr	r3, [pc, #72]	; (8008574 <vTaskDelayUntil+0x90>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800852c:	6804      	ldr	r4, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 800852e:	681a      	ldr	r2, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008530:	1863      	adds	r3, r4, r1
 8008532:	bf2c      	ite	cs
 8008534:	2101      	movcs	r1, #1
 8008536:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8008538:	4294      	cmp	r4, r2
 800853a:	d90f      	bls.n	800855c <vTaskDelayUntil+0x78>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800853c:	b979      	cbnz	r1, 800855e <vTaskDelayUntil+0x7a>
			*pxPreviousWakeTime = xTimeToWake;
 800853e:	6003      	str	r3, [r0, #0]
		xAlreadyYielded = xTaskResumeAll();
 8008540:	f7ff ff5a 	bl	80083f8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008544:	b948      	cbnz	r0, 800855a <vTaskDelayUntil+0x76>
			portYIELD_WITHIN_API();
 8008546:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800854a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	f3bf 8f6f 	isb	sy
	}
 800855a:	bd10      	pop	{r4, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800855c:	b909      	cbnz	r1, 8008562 <vTaskDelayUntil+0x7e>
 800855e:	429a      	cmp	r2, r3
 8008560:	d2ed      	bcs.n	800853e <vTaskDelayUntil+0x5a>
			*pxPreviousWakeTime = xTimeToWake;
 8008562:	6003      	str	r3, [r0, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008564:	2100      	movs	r1, #0
 8008566:	1a98      	subs	r0, r3, r2
 8008568:	f7ff fc50 	bl	8007e0c <prvAddCurrentTaskToDelayedList>
 800856c:	e7e8      	b.n	8008540 <vTaskDelayUntil+0x5c>
 800856e:	bf00      	nop
 8008570:	2000193c 	.word	0x2000193c
 8008574:	200019b8 	.word	0x200019b8

08008578 <vTaskDelay>:
	{
 8008578:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800857a:	b950      	cbnz	r0, 8008592 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800857c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008584:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	f3bf 8f6f 	isb	sy
	}
 8008590:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008592:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <vTaskDelay+0x44>)
 8008594:	6819      	ldr	r1, [r3, #0]
 8008596:	b141      	cbz	r1, 80085aa <vTaskDelay+0x32>
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	e7fe      	b.n	80085a8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80085aa:	f7ff fe85 	bl	80082b8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085ae:	f7ff fc2d 	bl	8007e0c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80085b2:	f7ff ff21 	bl	80083f8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80085b6:	2800      	cmp	r0, #0
 80085b8:	d0e0      	beq.n	800857c <vTaskDelay+0x4>
 80085ba:	e7e9      	b.n	8008590 <vTaskDelay+0x18>
 80085bc:	2000193c 	.word	0x2000193c

080085c0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80085c0:	4b1a      	ldr	r3, [pc, #104]	; (800862c <vTaskSwitchContext+0x6c>)
{
 80085c2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	4b1a      	ldr	r3, [pc, #104]	; (8008630 <vTaskSwitchContext+0x70>)
 80085c8:	b112      	cbz	r2, 80085d0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80085ca:	2201      	movs	r2, #1
 80085cc:	601a      	str	r2, [r3, #0]
}
 80085ce:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80085d0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80085d2:	4b18      	ldr	r3, [pc, #96]	; (8008634 <vTaskSwitchContext+0x74>)
 80085d4:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80085d6:	fab2 f282 	clz	r2, r2
 80085da:	2314      	movs	r3, #20
 80085dc:	b2d2      	uxtb	r2, r2
 80085de:	f1c2 021f 	rsb	r2, r2, #31
 80085e2:	4353      	muls	r3, r2
 80085e4:	4914      	ldr	r1, [pc, #80]	; (8008638 <vTaskSwitchContext+0x78>)
 80085e6:	58cc      	ldr	r4, [r1, r3]
 80085e8:	18c8      	adds	r0, r1, r3
 80085ea:	b944      	cbnz	r4, 80085fe <vTaskSwitchContext+0x3e>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	e7fe      	b.n	80085fc <vTaskSwitchContext+0x3c>
 80085fe:	6844      	ldr	r4, [r0, #4]
 8008600:	3308      	adds	r3, #8
 8008602:	6864      	ldr	r4, [r4, #4]
 8008604:	440b      	add	r3, r1
 8008606:	429c      	cmp	r4, r3
 8008608:	bf08      	it	eq
 800860a:	6863      	ldreq	r3, [r4, #4]
 800860c:	6044      	str	r4, [r0, #4]
 800860e:	bf08      	it	eq
 8008610:	6043      	streq	r3, [r0, #4]
 8008612:	2314      	movs	r3, #20
 8008614:	fb03 1102 	mla	r1, r3, r2, r1
 8008618:	684b      	ldr	r3, [r1, #4]
 800861a:	68da      	ldr	r2, [r3, #12]
 800861c:	4b07      	ldr	r3, [pc, #28]	; (800863c <vTaskSwitchContext+0x7c>)
 800861e:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a07      	ldr	r2, [pc, #28]	; (8008640 <vTaskSwitchContext+0x80>)
 8008624:	334c      	adds	r3, #76	; 0x4c
 8008626:	6013      	str	r3, [r2, #0]
}
 8008628:	e7d1      	b.n	80085ce <vTaskSwitchContext+0xe>
 800862a:	bf00      	nop
 800862c:	2000193c 	.word	0x2000193c
 8008630:	200019bc 	.word	0x200019bc
 8008634:	20001944 	.word	0x20001944
 8008638:	200018a4 	.word	0x200018a4
 800863c:	20001898 	.word	0x20001898
 8008640:	2000005c 	.word	0x2000005c

08008644 <vTaskSuspend>:
	{
 8008644:	b570      	push	{r4, r5, r6, lr}
 8008646:	4604      	mov	r4, r0
 8008648:	4d2d      	ldr	r5, [pc, #180]	; (8008700 <vTaskSuspend+0xbc>)
		taskENTER_CRITICAL();
 800864a:	f000 fd5b 	bl	8009104 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800864e:	b904      	cbnz	r4, 8008652 <vTaskSuspend+0xe>
 8008650:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008652:	1d26      	adds	r6, r4, #4
 8008654:	4630      	mov	r0, r6
 8008656:	f7fe ffdb 	bl	8007610 <uxListRemove>
 800865a:	b960      	cbnz	r0, 8008676 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800865c:	2314      	movs	r3, #20
 800865e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008660:	4a28      	ldr	r2, [pc, #160]	; (8008704 <vTaskSuspend+0xc0>)
 8008662:	4343      	muls	r3, r0
 8008664:	58d3      	ldr	r3, [r2, r3]
 8008666:	b933      	cbnz	r3, 8008676 <vTaskSuspend+0x32>
 8008668:	2201      	movs	r2, #1
 800866a:	4927      	ldr	r1, [pc, #156]	; (8008708 <vTaskSuspend+0xc4>)
 800866c:	4082      	lsls	r2, r0
 800866e:	680b      	ldr	r3, [r1, #0]
 8008670:	ea23 0302 	bic.w	r3, r3, r2
 8008674:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008676:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008678:	b11b      	cbz	r3, 8008682 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800867a:	f104 0018 	add.w	r0, r4, #24
 800867e:	f7fe ffc7 	bl	8007610 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008682:	4631      	mov	r1, r6
 8008684:	4821      	ldr	r0, [pc, #132]	; (800870c <vTaskSuspend+0xc8>)
 8008686:	f7fe ffa0 	bl	80075ca <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800868a:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
		if( xSchedulerRunning != pdFALSE )
 800868e:	4e20      	ldr	r6, [pc, #128]	; (8008710 <vTaskSuspend+0xcc>)
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008690:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008692:	bf04      	itt	eq
 8008694:	2300      	moveq	r3, #0
 8008696:	f884 309c 	strbeq.w	r3, [r4, #156]	; 0x9c
		taskEXIT_CRITICAL();
 800869a:	f000 fd53 	bl	8009144 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800869e:	6833      	ldr	r3, [r6, #0]
 80086a0:	b12b      	cbz	r3, 80086ae <vTaskSuspend+0x6a>
			taskENTER_CRITICAL();
 80086a2:	f000 fd2f 	bl	8009104 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 80086a6:	f7ff fc11 	bl	8007ecc <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 80086aa:	f000 fd4b 	bl	8009144 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 80086ae:	682b      	ldr	r3, [r5, #0]
 80086b0:	42a3      	cmp	r3, r4
 80086b2:	d117      	bne.n	80086e4 <vTaskSuspend+0xa0>
			if( xSchedulerRunning != pdFALSE )
 80086b4:	6833      	ldr	r3, [r6, #0]
 80086b6:	b1b3      	cbz	r3, 80086e6 <vTaskSuspend+0xa2>
				configASSERT( uxSchedulerSuspended == 0 );
 80086b8:	4b16      	ldr	r3, [pc, #88]	; (8008714 <vTaskSuspend+0xd0>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	b143      	cbz	r3, 80086d0 <vTaskSuspend+0x8c>
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	e7fe      	b.n	80086ce <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
 80086d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80086d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	f3bf 8f6f 	isb	sy
	}
 80086e4:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80086e6:	4a09      	ldr	r2, [pc, #36]	; (800870c <vTaskSuspend+0xc8>)
 80086e8:	6811      	ldr	r1, [r2, #0]
 80086ea:	4a0b      	ldr	r2, [pc, #44]	; (8008718 <vTaskSuspend+0xd4>)
 80086ec:	6812      	ldr	r2, [r2, #0]
 80086ee:	4291      	cmp	r1, r2
 80086f0:	d101      	bne.n	80086f6 <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
 80086f2:	602b      	str	r3, [r5, #0]
 80086f4:	e7f6      	b.n	80086e4 <vTaskSuspend+0xa0>
	}
 80086f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 80086fa:	f7ff bf61 	b.w	80085c0 <vTaskSwitchContext>
 80086fe:	bf00      	nop
 8008700:	20001898 	.word	0x20001898
 8008704:	200018a4 	.word	0x200018a4
 8008708:	20001944 	.word	0x20001944
 800870c:	20001990 	.word	0x20001990
 8008710:	2000198c 	.word	0x2000198c
 8008714:	2000193c 	.word	0x2000193c
 8008718:	20001930 	.word	0x20001930

0800871c <vTaskPlaceOnEventList>:
{
 800871c:	b510      	push	{r4, lr}
 800871e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008720:	b940      	cbnz	r0, 8008734 <vTaskPlaceOnEventList+0x18>
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	e7fe      	b.n	8008732 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008734:	4b05      	ldr	r3, [pc, #20]	; (800874c <vTaskPlaceOnEventList+0x30>)
 8008736:	6819      	ldr	r1, [r3, #0]
 8008738:	3118      	adds	r1, #24
 800873a:	f7fe ff52 	bl	80075e2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800873e:	4620      	mov	r0, r4
}
 8008740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008744:	2101      	movs	r1, #1
 8008746:	f7ff bb61 	b.w	8007e0c <prvAddCurrentTaskToDelayedList>
 800874a:	bf00      	nop
 800874c:	20001898 	.word	0x20001898

08008750 <vTaskPlaceOnEventListRestricted>:
	{
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	460d      	mov	r5, r1
 8008754:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8008756:	b940      	cbnz	r0, 800876a <vTaskPlaceOnEventListRestricted+0x1a>
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	e7fe      	b.n	8008768 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800876a:	4b08      	ldr	r3, [pc, #32]	; (800878c <vTaskPlaceOnEventListRestricted+0x3c>)
 800876c:	6819      	ldr	r1, [r3, #0]
 800876e:	3118      	adds	r1, #24
 8008770:	f7fe ff2b 	bl	80075ca <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008774:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008776:	4621      	mov	r1, r4
 8008778:	bf08      	it	eq
 800877a:	4628      	moveq	r0, r5
	}
 800877c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008780:	bf18      	it	ne
 8008782:	f04f 30ff 	movne.w	r0, #4294967295
 8008786:	f7ff bb41 	b.w	8007e0c <prvAddCurrentTaskToDelayedList>
 800878a:	bf00      	nop
 800878c:	20001898 	.word	0x20001898

08008790 <xTaskRemoveFromEventList>:
{
 8008790:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008792:	68c3      	ldr	r3, [r0, #12]
 8008794:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008796:	b944      	cbnz	r4, 80087aa <xTaskRemoveFromEventList+0x1a>
 8008798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879c:	f383 8811 	msr	BASEPRI, r3
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	e7fe      	b.n	80087a8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80087aa:	f104 0518 	add.w	r5, r4, #24
 80087ae:	4628      	mov	r0, r5
 80087b0:	f7fe ff2e 	bl	8007610 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087b4:	4b11      	ldr	r3, [pc, #68]	; (80087fc <xTaskRemoveFromEventList+0x6c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	b9e3      	cbnz	r3, 80087f4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087ba:	1d25      	adds	r5, r4, #4
 80087bc:	4628      	mov	r0, r5
 80087be:	f7fe ff27 	bl	8007610 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087c2:	2301      	movs	r3, #1
 80087c4:	490e      	ldr	r1, [pc, #56]	; (8008800 <xTaskRemoveFromEventList+0x70>)
 80087c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80087c8:	6808      	ldr	r0, [r1, #0]
 80087ca:	4093      	lsls	r3, r2
 80087cc:	4303      	orrs	r3, r0
 80087ce:	2014      	movs	r0, #20
 80087d0:	600b      	str	r3, [r1, #0]
 80087d2:	4629      	mov	r1, r5
 80087d4:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <xTaskRemoveFromEventList+0x74>)
 80087d6:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087da:	f7fe fef6 	bl	80075ca <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087de:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <xTaskRemoveFromEventList+0x78>)
 80087e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80087e8:	bf85      	ittet	hi
 80087ea:	2001      	movhi	r0, #1
 80087ec:	4b07      	ldrhi	r3, [pc, #28]	; (800880c <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 80087ee:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 80087f0:	6018      	strhi	r0, [r3, #0]
}
 80087f2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087f4:	4629      	mov	r1, r5
 80087f6:	4806      	ldr	r0, [pc, #24]	; (8008810 <xTaskRemoveFromEventList+0x80>)
 80087f8:	e7ef      	b.n	80087da <xTaskRemoveFromEventList+0x4a>
 80087fa:	bf00      	nop
 80087fc:	2000193c 	.word	0x2000193c
 8008800:	20001944 	.word	0x20001944
 8008804:	200018a4 	.word	0x200018a4
 8008808:	20001898 	.word	0x20001898
 800880c:	200019bc 	.word	0x200019bc
 8008810:	20001978 	.word	0x20001978

08008814 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008814:	4b03      	ldr	r3, [pc, #12]	; (8008824 <vTaskInternalSetTimeOutState+0x10>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800881a:	4b03      	ldr	r3, [pc, #12]	; (8008828 <vTaskInternalSetTimeOutState+0x14>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6043      	str	r3, [r0, #4]
}
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	20001974 	.word	0x20001974
 8008828:	200019b8 	.word	0x200019b8

0800882c <xTaskCheckForTimeOut>:
{
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008830:	4605      	mov	r5, r0
 8008832:	b940      	cbnz	r0, 8008846 <xTaskCheckForTimeOut+0x1a>
 8008834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008838:	f383 8811 	msr	BASEPRI, r3
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	e7fe      	b.n	8008844 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8008846:	b941      	cbnz	r1, 800885a <xTaskCheckForTimeOut+0x2e>
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	e7fe      	b.n	8008858 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800885a:	f000 fc53 	bl	8009104 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800885e:	4b0f      	ldr	r3, [pc, #60]	; (800889c <xTaskCheckForTimeOut+0x70>)
 8008860:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	d010      	beq.n	800888a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008868:	480d      	ldr	r0, [pc, #52]	; (80088a0 <xTaskCheckForTimeOut+0x74>)
 800886a:	682e      	ldr	r6, [r5, #0]
 800886c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800886e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008870:	4286      	cmp	r6, r0
 8008872:	d001      	beq.n	8008878 <xTaskCheckForTimeOut+0x4c>
 8008874:	428a      	cmp	r2, r1
 8008876:	d90f      	bls.n	8008898 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008878:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800887a:	4283      	cmp	r3, r0
 800887c:	d90a      	bls.n	8008894 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800887e:	1a5b      	subs	r3, r3, r1
 8008880:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008882:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8008884:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008886:	f7ff ffc5 	bl	8008814 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800888a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800888c:	f000 fc5a 	bl	8009144 <vPortExitCritical>
}
 8008890:	4620      	mov	r0, r4
 8008892:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008898:	2401      	movs	r4, #1
 800889a:	e7f7      	b.n	800888c <xTaskCheckForTimeOut+0x60>
 800889c:	200019b8 	.word	0x200019b8
 80088a0:	20001974 	.word	0x20001974

080088a4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80088a4:	2201      	movs	r2, #1
 80088a6:	4b01      	ldr	r3, [pc, #4]	; (80088ac <vTaskMissedYield+0x8>)
 80088a8:	601a      	str	r2, [r3, #0]
}
 80088aa:	4770      	bx	lr
 80088ac:	200019bc 	.word	0x200019bc

080088b0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80088b0:	4b05      	ldr	r3, [pc, #20]	; (80088c8 <xTaskGetSchedulerState+0x18>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	b133      	cbz	r3, 80088c4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088b6:	4b05      	ldr	r3, [pc, #20]	; (80088cc <xTaskGetSchedulerState+0x1c>)
 80088b8:	6818      	ldr	r0, [r3, #0]
 80088ba:	fab0 f080 	clz	r0, r0
 80088be:	0940      	lsrs	r0, r0, #5
 80088c0:	0040      	lsls	r0, r0, #1
 80088c2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088c4:	2001      	movs	r0, #1
	}
 80088c6:	4770      	bx	lr
 80088c8:	2000198c 	.word	0x2000198c
 80088cc:	2000193c 	.word	0x2000193c

080088d0 <xTaskPriorityDisinherit>:
	{
 80088d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80088d2:	4604      	mov	r4, r0
 80088d4:	b908      	cbnz	r0, 80088da <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80088d6:	2000      	movs	r0, #0
	}
 80088d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80088da:	4b22      	ldr	r3, [pc, #136]	; (8008964 <xTaskPriorityDisinherit+0x94>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4283      	cmp	r3, r0
 80088e0:	d008      	beq.n	80088f4 <xTaskPriorityDisinherit+0x24>
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	e7fe      	b.n	80088f2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80088f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088f6:	b943      	cbnz	r3, 800890a <xTaskPriorityDisinherit+0x3a>
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	e7fe      	b.n	8008908 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800890a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800890c:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800890e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008910:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8008912:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008914:	d0df      	beq.n	80088d6 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1dd      	bne.n	80088d6 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800891a:	1d06      	adds	r6, r0, #4
 800891c:	4630      	mov	r0, r6
 800891e:	f7fe fe77 	bl	8007610 <uxListRemove>
 8008922:	4f11      	ldr	r7, [pc, #68]	; (8008968 <xTaskPriorityDisinherit+0x98>)
 8008924:	4a11      	ldr	r2, [pc, #68]	; (800896c <xTaskPriorityDisinherit+0x9c>)
 8008926:	b950      	cbnz	r0, 800893e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008928:	2314      	movs	r3, #20
 800892a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800892c:	434b      	muls	r3, r1
 800892e:	58fb      	ldr	r3, [r7, r3]
 8008930:	b92b      	cbnz	r3, 800893e <xTaskPriorityDisinherit+0x6e>
 8008932:	2501      	movs	r5, #1
 8008934:	6813      	ldr	r3, [r2, #0]
 8008936:	408d      	lsls	r5, r1
 8008938:	ea23 0305 	bic.w	r3, r3, r5
 800893c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800893e:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8008940:	2014      	movs	r0, #20
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008942:	f1c3 0107 	rsb	r1, r3, #7
 8008946:	61a1      	str	r1, [r4, #24]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008948:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800894a:	2401      	movs	r4, #1
 800894c:	6811      	ldr	r1, [r2, #0]
 800894e:	fa04 f503 	lsl.w	r5, r4, r3
 8008952:	fb00 7003 	mla	r0, r0, r3, r7
 8008956:	430d      	orrs	r5, r1
 8008958:	4631      	mov	r1, r6
 800895a:	6015      	str	r5, [r2, #0]
 800895c:	f7fe fe35 	bl	80075ca <vListInsertEnd>
					xReturn = pdTRUE;
 8008960:	4620      	mov	r0, r4
		return xReturn;
 8008962:	e7b9      	b.n	80088d8 <xTaskPriorityDisinherit+0x8>
 8008964:	20001898 	.word	0x20001898
 8008968:	200018a4 	.word	0x200018a4
 800896c:	20001944 	.word	0x20001944

08008970 <xTaskNotifyWait>:
	{
 8008970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008974:	4c22      	ldr	r4, [pc, #136]	; (8008a00 <xTaskNotifyWait+0x90>)
	{
 8008976:	461e      	mov	r6, r3
 8008978:	4680      	mov	r8, r0
 800897a:	460f      	mov	r7, r1
 800897c:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 800897e:	f000 fbc1 	bl	8009104 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8008988:	2b02      	cmp	r3, #2
 800898a:	d018      	beq.n	80089be <xTaskNotifyWait+0x4e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800898c:	2101      	movs	r1, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800898e:	6822      	ldr	r2, [r4, #0]
 8008990:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8008994:	ea23 0308 	bic.w	r3, r3, r8
 8008998:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
				if( xTicksToWait > ( TickType_t ) 0 )
 80089a2:	b166      	cbz	r6, 80089be <xTaskNotifyWait+0x4e>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089a4:	4630      	mov	r0, r6
 80089a6:	f7ff fa31 	bl	8007e0c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80089aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80089ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 80089be:	f000 fbc1 	bl	8009144 <vPortExitCritical>
		taskENTER_CRITICAL();
 80089c2:	f000 fb9f 	bl	8009104 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 80089c6:	b11d      	cbz	r5, 80089d0 <xTaskNotifyWait+0x60>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80089c8:	6823      	ldr	r3, [r4, #0]
 80089ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089ce:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80089d6:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80089d8:	bf03      	ittte	eq
 80089da:	6822      	ldreq	r2, [r4, #0]
				xReturn = pdTRUE;
 80089dc:	2501      	moveq	r5, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80089de:	f8d2 3098 	ldreq.w	r3, [r2, #152]	; 0x98
				xReturn = pdFALSE;
 80089e2:	2500      	movne	r5, #0
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80089e4:	bf04      	itt	eq
 80089e6:	43bb      	biceq	r3, r7
 80089e8:	f8c2 3098 	streq.w	r3, [r2, #152]	; 0x98
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80089ec:	2200      	movs	r2, #0
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		taskEXIT_CRITICAL();
 80089f4:	f000 fba6 	bl	8009144 <vPortExitCritical>
	}
 80089f8:	4628      	mov	r0, r5
 80089fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089fe:	bf00      	nop
 8008a00:	20001898 	.word	0x20001898

08008a04 <xTaskGenericNotify>:
	{
 8008a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a06:	460f      	mov	r7, r1
 8008a08:	4616      	mov	r6, r2
 8008a0a:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	b940      	cbnz	r0, 8008a22 <xTaskGenericNotify+0x1e>
 8008a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	e7fe      	b.n	8008a20 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 8008a22:	f000 fb6f 	bl	8009104 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8008a26:	b115      	cbz	r5, 8008a2e <xTaskGenericNotify+0x2a>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008a28:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008a2c:	602b      	str	r3, [r5, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008a2e:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008a30:	f894 509c 	ldrb.w	r5, [r4, #156]	; 0x9c
			switch( eAction )
 8008a34:	1e72      	subs	r2, r6, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008a36:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008a38:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
			switch( eAction )
 8008a3c:	2a03      	cmp	r2, #3
 8008a3e:	d808      	bhi.n	8008a52 <xTaskGenericNotify+0x4e>
 8008a40:	e8df f002 	tbb	[pc, r2]
 8008a44:	12140e02 	.word	0x12140e02
					pxTCB->ulNotifiedValue |= ulValue;
 8008a48:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008a4c:	433b      	orrs	r3, r7
					( pxTCB->ulNotifiedValue )++;
 8008a4e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008a52:	2d01      	cmp	r5, #1
 8008a54:	d00d      	beq.n	8008a72 <xTaskGenericNotify+0x6e>
	{
 8008a56:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8008a58:	f000 fb74 	bl	8009144 <vPortExitCritical>
	}
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 8008a60:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008a64:	3301      	adds	r3, #1
 8008a66:	e7f2      	b.n	8008a4e <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008a68:	2d02      	cmp	r5, #2
 8008a6a:	d030      	beq.n	8008ace <xTaskGenericNotify+0xca>
						pxTCB->ulNotifiedValue = ulValue;
 8008a6c:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
 8008a70:	e7ef      	b.n	8008a52 <xTaskGenericNotify+0x4e>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a72:	1d26      	adds	r6, r4, #4
 8008a74:	4630      	mov	r0, r6
 8008a76:	f7fe fdcb 	bl	8007610 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008a7a:	4916      	ldr	r1, [pc, #88]	; (8008ad4 <xTaskGenericNotify+0xd0>)
 8008a7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008a7e:	6808      	ldr	r0, [r1, #0]
 8008a80:	fa05 f302 	lsl.w	r3, r5, r2
 8008a84:	4303      	orrs	r3, r0
 8008a86:	2014      	movs	r0, #20
 8008a88:	600b      	str	r3, [r1, #0]
 8008a8a:	4b13      	ldr	r3, [pc, #76]	; (8008ad8 <xTaskGenericNotify+0xd4>)
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	fb00 3002 	mla	r0, r0, r2, r3
 8008a92:	f7fe fd9a 	bl	80075ca <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008a96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a98:	b143      	cbz	r3, 8008aac <xTaskGenericNotify+0xa8>
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	e7fe      	b.n	8008aaa <xTaskGenericNotify+0xa6>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008aac:	4b0b      	ldr	r3, [pc, #44]	; (8008adc <xTaskGenericNotify+0xd8>)
 8008aae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d9ce      	bls.n	8008a56 <xTaskGenericNotify+0x52>
					taskYIELD_IF_USING_PREEMPTION();
 8008ab8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	e7c4      	b.n	8008a58 <xTaskGenericNotify+0x54>
						xReturn = pdFAIL;
 8008ace:	2500      	movs	r5, #0
 8008ad0:	e7c2      	b.n	8008a58 <xTaskGenericNotify+0x54>
 8008ad2:	bf00      	nop
 8008ad4:	20001944 	.word	0x20001944
 8008ad8:	200018a4 	.word	0x200018a4
 8008adc:	20001898 	.word	0x20001898

08008ae0 <xTaskGenericNotifyFromISR>:
	{
 8008ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ae4:	9f08      	ldr	r7, [sp, #32]
 8008ae6:	4689      	mov	r9, r1
 8008ae8:	4690      	mov	r8, r2
 8008aea:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8008aec:	4604      	mov	r4, r0
 8008aee:	b940      	cbnz	r0, 8008b02 <xTaskGenericNotifyFromISR+0x22>
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	e7fe      	b.n	8008b00 <xTaskGenericNotifyFromISR+0x20>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b02:	f000 fbdb 	bl	80092bc <vPortValidateInterruptPriority>
	__asm volatile
 8008b06:	f3ef 8611 	mrs	r6, BASEPRI
 8008b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8008b1a:	b115      	cbz	r5, 8008b22 <xTaskGenericNotifyFromISR+0x42>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008b1c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008b20:	602b      	str	r3, [r5, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008b22:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008b24:	f894 509c 	ldrb.w	r5, [r4, #156]	; 0x9c
			switch( eAction )
 8008b28:	f108 32ff 	add.w	r2, r8, #4294967295
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008b2c:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008b2e:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
			switch( eAction )
 8008b32:	2a03      	cmp	r2, #3
 8008b34:	d809      	bhi.n	8008b4a <xTaskGenericNotifyFromISR+0x6a>
 8008b36:	e8df f002 	tbb	[pc, r2]
 8008b3a:	0f02      	.short	0x0f02
 8008b3c:	1315      	.short	0x1315
					pxTCB->ulNotifiedValue |= ulValue;
 8008b3e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008b42:	ea43 0309 	orr.w	r3, r3, r9
					( pxTCB->ulNotifiedValue )++;
 8008b46:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008b4a:	2d01      	cmp	r5, #1
 8008b4c:	d00d      	beq.n	8008b6a <xTaskGenericNotifyFromISR+0x8a>
	{
 8008b4e:	2001      	movs	r0, #1
	__asm volatile
 8008b50:	f386 8811 	msr	BASEPRI, r6
	}
 8008b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 8008b58:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	e7f2      	b.n	8008b46 <xTaskGenericNotifyFromISR+0x66>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008b60:	2d02      	cmp	r5, #2
 8008b62:	d033      	beq.n	8008bcc <xTaskGenericNotifyFromISR+0xec>
						pxTCB->ulNotifiedValue = ulValue;
 8008b64:	f8c4 9098 	str.w	r9, [r4, #152]	; 0x98
 8008b68:	e7ef      	b.n	8008b4a <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008b6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b6c:	b143      	cbz	r3, 8008b80 <xTaskGenericNotifyFromISR+0xa0>
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	e7fe      	b.n	8008b7e <xTaskGenericNotifyFromISR+0x9e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b80:	4b13      	ldr	r3, [pc, #76]	; (8008bd0 <xTaskGenericNotifyFromISR+0xf0>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	b9db      	cbnz	r3, 8008bbe <xTaskGenericNotifyFromISR+0xde>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b86:	f104 0804 	add.w	r8, r4, #4
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	f7fe fd40 	bl	8007610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b90:	4a10      	ldr	r2, [pc, #64]	; (8008bd4 <xTaskGenericNotifyFromISR+0xf4>)
 8008b92:	2014      	movs	r0, #20
 8008b94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b96:	6811      	ldr	r1, [r2, #0]
 8008b98:	409d      	lsls	r5, r3
 8008b9a:	430d      	orrs	r5, r1
 8008b9c:	4641      	mov	r1, r8
 8008b9e:	6015      	str	r5, [r2, #0]
 8008ba0:	4a0d      	ldr	r2, [pc, #52]	; (8008bd8 <xTaskGenericNotifyFromISR+0xf8>)
 8008ba2:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008ba6:	f7fe fd10 	bl	80075ca <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008baa:	4b0c      	ldr	r3, [pc, #48]	; (8008bdc <xTaskGenericNotifyFromISR+0xfc>)
 8008bac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d9cb      	bls.n	8008b4e <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 8008bb6:	2001      	movs	r0, #1
 8008bb8:	b12f      	cbz	r7, 8008bc6 <xTaskGenericNotifyFromISR+0xe6>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008bba:	6038      	str	r0, [r7, #0]
 8008bbc:	e7c8      	b.n	8008b50 <xTaskGenericNotifyFromISR+0x70>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008bbe:	4808      	ldr	r0, [pc, #32]	; (8008be0 <xTaskGenericNotifyFromISR+0x100>)
 8008bc0:	f104 0118 	add.w	r1, r4, #24
 8008bc4:	e7ef      	b.n	8008ba6 <xTaskGenericNotifyFromISR+0xc6>
						xYieldPending = pdTRUE;
 8008bc6:	4b07      	ldr	r3, [pc, #28]	; (8008be4 <xTaskGenericNotifyFromISR+0x104>)
 8008bc8:	6018      	str	r0, [r3, #0]
 8008bca:	e7c1      	b.n	8008b50 <xTaskGenericNotifyFromISR+0x70>
						xReturn = pdFAIL;
 8008bcc:	2000      	movs	r0, #0
 8008bce:	e7bf      	b.n	8008b50 <xTaskGenericNotifyFromISR+0x70>
 8008bd0:	2000193c 	.word	0x2000193c
 8008bd4:	20001944 	.word	0x20001944
 8008bd8:	200018a4 	.word	0x200018a4
 8008bdc:	20001898 	.word	0x20001898
 8008be0:	20001978 	.word	0x20001978
 8008be4:	200019bc 	.word	0x200019bc

08008be8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008bea:	4c11      	ldr	r4, [pc, #68]	; (8008c30 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8008bec:	f000 fa8a 	bl	8009104 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008bf0:	6825      	ldr	r5, [r4, #0]
 8008bf2:	b9bd      	cbnz	r5, 8008c24 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008bf4:	4f0f      	ldr	r7, [pc, #60]	; (8008c34 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8008bf6:	4e10      	ldr	r6, [pc, #64]	; (8008c38 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	f7fe fcd8 	bl	80075ae <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f7fe fcd5 	bl	80075ae <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c04:	4b0d      	ldr	r3, [pc, #52]	; (8008c3c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c06:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 8008c08:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c0a:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c0c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8008c0e:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c10:	4a0c      	ldr	r2, [pc, #48]	; (8008c44 <prvCheckForValidListAndQueue+0x5c>)
 8008c12:	4b0d      	ldr	r3, [pc, #52]	; (8008c48 <prvCheckForValidListAndQueue+0x60>)
 8008c14:	9500      	str	r5, [sp, #0]
 8008c16:	f7fe fdd6 	bl	80077c6 <xQueueGenericCreateStatic>
 8008c1a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c1c:	b110      	cbz	r0, 8008c24 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c1e:	490b      	ldr	r1, [pc, #44]	; (8008c4c <prvCheckForValidListAndQueue+0x64>)
 8008c20:	f7ff f840 	bl	8007ca4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008c24:	b003      	add	sp, #12
 8008c26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8008c2a:	f000 ba8b 	b.w	8009144 <vPortExitCritical>
 8008c2e:	bf00      	nop
 8008c30:	20001ab4 	.word	0x20001ab4
 8008c34:	20001a40 	.word	0x20001a40
 8008c38:	20001a54 	.word	0x20001a54
 8008c3c:	200019c0 	.word	0x200019c0
 8008c40:	200019c4 	.word	0x200019c4
 8008c44:	200019c8 	.word	0x200019c8
 8008c48:	20001a6c 	.word	0x20001a6c
 8008c4c:	0800a591 	.word	0x0800a591

08008c50 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8008c50:	4291      	cmp	r1, r2
{
 8008c52:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c54:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c56:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008c58:	d80a      	bhi.n	8008c70 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c5a:	1ad2      	subs	r2, r2, r3
 8008c5c:	6983      	ldr	r3, [r0, #24]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d20d      	bcs.n	8008c7e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c62:	4b08      	ldr	r3, [pc, #32]	; (8008c84 <prvInsertTimerInActiveList+0x34>)
 8008c64:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c66:	6818      	ldr	r0, [r3, #0]
 8008c68:	f7fe fcbb 	bl	80075e2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008c6c:	2000      	movs	r0, #0
}
 8008c6e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d201      	bcs.n	8008c78 <prvInsertTimerInActiveList+0x28>
 8008c74:	4299      	cmp	r1, r3
 8008c76:	d202      	bcs.n	8008c7e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c78:	4b03      	ldr	r3, [pc, #12]	; (8008c88 <prvInsertTimerInActiveList+0x38>)
 8008c7a:	1d01      	adds	r1, r0, #4
 8008c7c:	e7f3      	b.n	8008c66 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8008c7e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008c80:	e7f5      	b.n	8008c6e <prvInsertTimerInActiveList+0x1e>
 8008c82:	bf00      	nop
 8008c84:	200019c4 	.word	0x200019c4
 8008c88:	200019c0 	.word	0x200019c0

08008c8c <xTimerCreateTimerTask>:
{
 8008c8c:	b510      	push	{r4, lr}
 8008c8e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8008c90:	f7ff ffaa 	bl	8008be8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008c94:	4b12      	ldr	r3, [pc, #72]	; (8008ce0 <xTimerCreateTimerTask+0x54>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	b1b3      	cbz	r3, 8008cc8 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c9a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c9c:	aa07      	add	r2, sp, #28
 8008c9e:	a906      	add	r1, sp, #24
 8008ca0:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008ca2:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008ca6:	f7f9 f87d 	bl	8001da4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008caa:	9b05      	ldr	r3, [sp, #20]
 8008cac:	9a07      	ldr	r2, [sp, #28]
 8008cae:	9302      	str	r3, [sp, #8]
 8008cb0:	9b06      	ldr	r3, [sp, #24]
 8008cb2:	490c      	ldr	r1, [pc, #48]	; (8008ce4 <xTimerCreateTimerTask+0x58>)
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	480b      	ldr	r0, [pc, #44]	; (8008ce8 <xTimerCreateTimerTask+0x5c>)
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	4623      	mov	r3, r4
 8008cbe:	f7ff f9b5 	bl	800802c <xTaskCreateStatic>
 8008cc2:	4b0a      	ldr	r3, [pc, #40]	; (8008cec <xTimerCreateTimerTask+0x60>)
 8008cc4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008cc6:	b940      	cbnz	r0, 8008cda <xTimerCreateTimerTask+0x4e>
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8008cd8:	e7fe      	b.n	8008cd8 <xTimerCreateTimerTask+0x4c>
}
 8008cda:	2001      	movs	r0, #1
 8008cdc:	b008      	add	sp, #32
 8008cde:	bd10      	pop	{r4, pc}
 8008ce0:	20001ab4 	.word	0x20001ab4
 8008ce4:	0800a596 	.word	0x0800a596
 8008ce8:	08008eb5 	.word	0x08008eb5
 8008cec:	20001ab8 	.word	0x20001ab8

08008cf0 <xTimerCreate>:
	{
 8008cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf4:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8008cf6:	202c      	movs	r0, #44	; 0x2c
	{
 8008cf8:	460d      	mov	r5, r1
 8008cfa:	4617      	mov	r7, r2
 8008cfc:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8008cfe:	f000 fb31 	bl	8009364 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8008d02:	4604      	mov	r4, r0
 8008d04:	b1c0      	cbz	r0, 8008d38 <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008d06:	b945      	cbnz	r5, 8008d1a <xTimerCreate+0x2a>
 8008d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0c:	f383 8811 	msr	BASEPRI, r3
 8008d10:	f3bf 8f6f 	isb	sy
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	e7fe      	b.n	8008d18 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 8008d1a:	f7ff ff65 	bl	8008be8 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008d1e:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008d20:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008d24:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 8008d26:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8008d2a:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008d2c:	1d20      	adds	r0, r4, #4
 8008d2e:	f7fe fc49 	bl	80075c4 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8008d32:	2300      	movs	r3, #0
 8008d34:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 8008d38:	4620      	mov	r0, r4
 8008d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008d3e <xTimerCreateStatic>:
	{
 8008d3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008d42:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008d44:	232c      	movs	r3, #44	; 0x2c
 8008d46:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008d48:	9b01      	ldr	r3, [sp, #4]
	{
 8008d4a:	4680      	mov	r8, r0
			configASSERT( xSize == sizeof( Timer_t ) );
 8008d4c:	2b2c      	cmp	r3, #44	; 0x2c
	{
 8008d4e:	460d      	mov	r5, r1
 8008d50:	4617      	mov	r7, r2
 8008d52:	9c09      	ldr	r4, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 8008d54:	d008      	beq.n	8008d68 <xTimerCreateStatic+0x2a>
 8008d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	e7fe      	b.n	8008d66 <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 8008d68:	b944      	cbnz	r4, 8008d7c <xTimerCreateStatic+0x3e>
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	e7fe      	b.n	8008d7a <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008d7c:	b941      	cbnz	r1, 8008d90 <xTimerCreateStatic+0x52>
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	e7fe      	b.n	8008d8e <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 8008d90:	f7ff ff2a 	bl	8008be8 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008d94:	9b08      	ldr	r3, [sp, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008d96:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008d98:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008d9a:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 8008d9e:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8008da2:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008da4:	f7fe fc0e 	bl	80075c4 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8008da8:	2301      	movs	r3, #1
	}
 8008daa:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8008dac:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 8008db0:	b002      	add	sp, #8
 8008db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008db8 <xTimerGenericCommand>:
{
 8008db8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008dba:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8008dbc:	4604      	mov	r4, r0
{
 8008dbe:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8008dc0:	b940      	cbnz	r0, 8008dd4 <xTimerGenericCommand+0x1c>
 8008dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	e7fe      	b.n	8008dd2 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8008dd4:	4d0c      	ldr	r5, [pc, #48]	; (8008e08 <xTimerGenericCommand+0x50>)
 8008dd6:	6828      	ldr	r0, [r5, #0]
 8008dd8:	b178      	cbz	r0, 8008dfa <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008dda:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ddc:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008de0:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008de2:	dc0c      	bgt.n	8008dfe <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008de4:	f7ff fd64 	bl	80088b0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008de8:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008dea:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008dec:	bf14      	ite	ne
 8008dee:	461a      	movne	r2, r3
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008df0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008df2:	6828      	ldr	r0, [r5, #0]
 8008df4:	a901      	add	r1, sp, #4
 8008df6:	f7fe fd53 	bl	80078a0 <xQueueGenericSend>
}
 8008dfa:	b004      	add	sp, #16
 8008dfc:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008dfe:	2300      	movs	r3, #0
 8008e00:	a901      	add	r1, sp, #4
 8008e02:	f7fe fe00 	bl	8007a06 <xQueueGenericSendFromISR>
 8008e06:	e7f8      	b.n	8008dfa <xTimerGenericCommand+0x42>
 8008e08:	20001ab4 	.word	0x20001ab4

08008e0c <prvSampleTimeNow>:
{
 8008e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e10:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8008e12:	f7ff fa59 	bl	80082c8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008e16:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8008ea8 <prvSampleTimeNow+0x9c>
	xTimeNow = xTaskGetTickCount();
 8008e1a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8008e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e20:	4283      	cmp	r3, r0
 8008e22:	d90b      	bls.n	8008e3c <prvSampleTimeNow+0x30>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e24:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e28:	4f20      	ldr	r7, [pc, #128]	; (8008eac <prvSampleTimeNow+0xa0>)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	b96a      	cbnz	r2, 8008e4c <prvSampleTimeNow+0x40>
	pxCurrentTimerList = pxOverflowTimerList;
 8008e30:	4a1f      	ldr	r2, [pc, #124]	; (8008eb0 <prvSampleTimeNow+0xa4>)
 8008e32:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008e34:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8008e36:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e000      	b.n	8008e3e <prvSampleTimeNow+0x32>
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8008e40:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8008e42:	f8c8 5000 	str.w	r5, [r8]
}
 8008e46:	b003      	add	sp, #12
 8008e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e4c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e4e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e50:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e54:	f104 0b04 	add.w	fp, r4, #4
 8008e58:	4658      	mov	r0, fp
 8008e5a:	f7fe fbd9 	bl	8007610 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e60:	4620      	mov	r0, r4
 8008e62:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008e64:	69e3      	ldr	r3, [r4, #28]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d1df      	bne.n	8008e2a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e6a:	69a3      	ldr	r3, [r4, #24]
 8008e6c:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8008e6e:	459a      	cmp	sl, r3
 8008e70:	d206      	bcs.n	8008e80 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e72:	4659      	mov	r1, fp
 8008e74:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e76:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e78:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e7a:	f7fe fbb2 	bl	80075e2 <vListInsert>
 8008e7e:	e7d4      	b.n	8008e2a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e80:	2300      	movs	r3, #0
 8008e82:	4652      	mov	r2, sl
 8008e84:	4619      	mov	r1, r3
 8008e86:	4620      	mov	r0, r4
 8008e88:	f8cd 9000 	str.w	r9, [sp]
 8008e8c:	f7ff ff94 	bl	8008db8 <xTimerGenericCommand>
				configASSERT( xResult );
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d1ca      	bne.n	8008e2a <prvSampleTimeNow+0x1e>
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	e7fe      	b.n	8008ea4 <prvSampleTimeNow+0x98>
 8008ea6:	bf00      	nop
 8008ea8:	20001a68 	.word	0x20001a68
 8008eac:	200019c0 	.word	0x200019c0
 8008eb0:	200019c4 	.word	0x200019c4

08008eb4 <prvTimerTask>:
{
 8008eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008eb8:	4e65      	ldr	r6, [pc, #404]	; (8009050 <prvTimerTask+0x19c>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008eba:	4f66      	ldr	r7, [pc, #408]	; (8009054 <prvTimerTask+0x1a0>)
{
 8008ebc:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ebe:	6833      	ldr	r3, [r6, #0]
 8008ec0:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ec2:	2d00      	cmp	r5, #0
 8008ec4:	d033      	beq.n	8008f2e <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8008ecc:	f7ff f9f4 	bl	80082b8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ed0:	a803      	add	r0, sp, #12
 8008ed2:	f7ff ff9b 	bl	8008e0c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8008ed6:	9c03      	ldr	r4, [sp, #12]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ed8:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8008eda:	2c00      	cmp	r4, #0
 8008edc:	d177      	bne.n	8008fce <prvTimerTask+0x11a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ede:	2d00      	cmp	r5, #0
 8008ee0:	d05a      	beq.n	8008f98 <prvTimerTask+0xe4>
 8008ee2:	4540      	cmp	r0, r8
 8008ee4:	d35e      	bcc.n	8008fa4 <prvTimerTask+0xf0>
				( void ) xTaskResumeAll();
 8008ee6:	f7ff fa87 	bl	80083f8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008eea:	6833      	ldr	r3, [r6, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ef0:	1d28      	adds	r0, r5, #4
 8008ef2:	f7fe fb8d 	bl	8007610 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008ef6:	69eb      	ldr	r3, [r5, #28]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d11a      	bne.n	8008f32 <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008efc:	69a9      	ldr	r1, [r5, #24]
 8008efe:	4643      	mov	r3, r8
 8008f00:	464a      	mov	r2, r9
 8008f02:	4628      	mov	r0, r5
 8008f04:	4441      	add	r1, r8
 8008f06:	f7ff fea3 	bl	8008c50 <prvInsertTimerInActiveList>
 8008f0a:	b190      	cbz	r0, 8008f32 <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f0c:	4623      	mov	r3, r4
 8008f0e:	4642      	mov	r2, r8
 8008f10:	4621      	mov	r1, r4
 8008f12:	4628      	mov	r0, r5
 8008f14:	9400      	str	r4, [sp, #0]
 8008f16:	f7ff ff4f 	bl	8008db8 <xTimerGenericCommand>
			configASSERT( xResult );
 8008f1a:	b950      	cbnz	r0, 8008f32 <prvTimerTask+0x7e>
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	e7fe      	b.n	8008f2c <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 8008f2e:	46a8      	mov	r8, r5
 8008f30:	e7cc      	b.n	8008ecc <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f32:	4628      	mov	r0, r5
 8008f34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f36:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f38:	2500      	movs	r5, #0
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	6838      	ldr	r0, [r7, #0]
 8008f3e:	a903      	add	r1, sp, #12
 8008f40:	f7fe fdc2 	bl	8007ac8 <xQueueReceive>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d0ba      	beq.n	8008ebe <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f48:	9b03      	ldr	r3, [sp, #12]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	dbf5      	blt.n	8008f3a <prvTimerTask+0x86>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f4e:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f50:	6963      	ldr	r3, [r4, #20]
 8008f52:	b113      	cbz	r3, 8008f5a <prvTimerTask+0xa6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f54:	1d20      	adds	r0, r4, #4
 8008f56:	f7fe fb5b 	bl	8007610 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f5a:	a802      	add	r0, sp, #8
 8008f5c:	f7ff ff56 	bl	8008e0c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8008f60:	9b03      	ldr	r3, [sp, #12]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f62:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8008f64:	2b09      	cmp	r3, #9
 8008f66:	d8e8      	bhi.n	8008f3a <prvTimerTask+0x86>
 8008f68:	a101      	add	r1, pc, #4	; (adr r1, 8008f70 <prvTimerTask+0xbc>)
 8008f6a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f6e:	bf00      	nop
 8008f70:	08008fd5 	.word	0x08008fd5
 8008f74:	08008fd5 	.word	0x08008fd5
 8008f78:	08008fd5 	.word	0x08008fd5
 8008f7c:	08008f3b 	.word	0x08008f3b
 8008f80:	08009019 	.word	0x08009019
 8008f84:	0800903d 	.word	0x0800903d
 8008f88:	08008fd5 	.word	0x08008fd5
 8008f8c:	08008fd5 	.word	0x08008fd5
 8008f90:	08008f3b 	.word	0x08008f3b
 8008f94:	08009019 	.word	0x08009019
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f98:	4b2f      	ldr	r3, [pc, #188]	; (8009058 <prvTimerTask+0x1a4>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681c      	ldr	r4, [r3, #0]
 8008f9e:	fab4 f484 	clz	r4, r4
 8008fa2:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	6838      	ldr	r0, [r7, #0]
 8008fa8:	eba8 0109 	sub.w	r1, r8, r9
 8008fac:	f7fe fe8c 	bl	8007cc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008fb0:	f7ff fa22 	bl	80083f8 <xTaskResumeAll>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d1bf      	bne.n	8008f38 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 8008fb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	e7b4      	b.n	8008f38 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 8008fce:	f7ff fa13 	bl	80083f8 <xTaskResumeAll>
 8008fd2:	e7b1      	b.n	8008f38 <prvTimerTask+0x84>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008fd4:	69a1      	ldr	r1, [r4, #24]
 8008fd6:	9b04      	ldr	r3, [sp, #16]
 8008fd8:	4620      	mov	r0, r4
 8008fda:	4419      	add	r1, r3
 8008fdc:	f7ff fe38 	bl	8008c50 <prvInsertTimerInActiveList>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d0aa      	beq.n	8008f3a <prvTimerTask+0x86>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008fea:	69e3      	ldr	r3, [r4, #28]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d1a4      	bne.n	8008f3a <prvTimerTask+0x86>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	69a2      	ldr	r2, [r4, #24]
 8008ff4:	9904      	ldr	r1, [sp, #16]
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	440a      	add	r2, r1
 8008ffa:	9500      	str	r5, [sp, #0]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	f7ff fedb 	bl	8008db8 <xTimerGenericCommand>
							configASSERT( xResult );
 8009002:	2800      	cmp	r0, #0
 8009004:	d199      	bne.n	8008f3a <prvTimerTask+0x86>
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	e7fe      	b.n	8009016 <prvTimerTask+0x162>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009018:	9904      	ldr	r1, [sp, #16]
 800901a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800901c:	b941      	cbnz	r1, 8009030 <prvTimerTask+0x17c>
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	e7fe      	b.n	800902e <prvTimerTask+0x17a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009030:	4603      	mov	r3, r0
 8009032:	4401      	add	r1, r0
 8009034:	4620      	mov	r0, r4
 8009036:	f7ff fe0b 	bl	8008c50 <prvInsertTimerInActiveList>
					break;
 800903a:	e77e      	b.n	8008f3a <prvTimerTask+0x86>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800903c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009040:	2b00      	cmp	r3, #0
 8009042:	f47f af7a 	bne.w	8008f3a <prvTimerTask+0x86>
							vPortFree( pxTimer );
 8009046:	4620      	mov	r0, r4
 8009048:	f000 fa1e 	bl	8009488 <vPortFree>
 800904c:	e775      	b.n	8008f3a <prvTimerTask+0x86>
 800904e:	bf00      	nop
 8009050:	200019c0 	.word	0x200019c0
 8009054:	20001ab4 	.word	0x20001ab4
 8009058:	200019c4 	.word	0x200019c4

0800905c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800905c:	4806      	ldr	r0, [pc, #24]	; (8009078 <prvPortStartFirstTask+0x1c>)
 800905e:	6800      	ldr	r0, [r0, #0]
 8009060:	6800      	ldr	r0, [r0, #0]
 8009062:	f380 8808 	msr	MSP, r0
 8009066:	b662      	cpsie	i
 8009068:	b661      	cpsie	f
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	df00      	svc	0
 8009074:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009076:	0000      	.short	0x0000
 8009078:	e000ed08 	.word	0xe000ed08

0800907c <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 800907c:	2300      	movs	r3, #0
{
 800907e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8009080:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009082:	4b0d      	ldr	r3, [pc, #52]	; (80090b8 <prvTaskExitError+0x3c>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3301      	adds	r3, #1
 8009088:	d008      	beq.n	800909c <prvTaskExitError+0x20>
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	e7fe      	b.n	800909a <prvTaskExitError+0x1e>
 800909c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80090ac:	9b01      	ldr	r3, [sp, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0fc      	beq.n	80090ac <prvTaskExitError+0x30>
}
 80090b2:	b002      	add	sp, #8
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	2000000c 	.word	0x2000000c

080090bc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090c0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090c4:	4b05      	ldr	r3, [pc, #20]	; (80090dc <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090c6:	f021 0101 	bic.w	r1, r1, #1
 80090ca:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090ce:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090d2:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80090d6:	3840      	subs	r0, #64	; 0x40
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	0800907d 	.word	0x0800907d

080090e0 <SVC_Handler>:
	__asm volatile (
 80090e0:	4b07      	ldr	r3, [pc, #28]	; (8009100 <pxCurrentTCBConst2>)
 80090e2:	6819      	ldr	r1, [r3, #0]
 80090e4:	6808      	ldr	r0, [r1, #0]
 80090e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090ea:	f380 8809 	msr	PSP, r0
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f04f 0000 	mov.w	r0, #0
 80090f6:	f380 8811 	msr	BASEPRI, r0
 80090fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80090fe:	4770      	bx	lr

08009100 <pxCurrentTCBConst2>:
 8009100:	20001898 	.word	0x20001898

08009104 <vPortEnterCritical>:
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009114:	4a0a      	ldr	r2, [pc, #40]	; (8009140 <vPortEnterCritical+0x3c>)
 8009116:	6813      	ldr	r3, [r2, #0]
 8009118:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800911a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800911c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800911e:	d10e      	bne.n	800913e <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009120:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009124:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009128:	b2db      	uxtb	r3, r3
 800912a:	b143      	cbz	r3, 800913e <vPortEnterCritical+0x3a>
 800912c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009130:	f383 8811 	msr	BASEPRI, r3
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	e7fe      	b.n	800913c <vPortEnterCritical+0x38>
	}
}
 800913e:	4770      	bx	lr
 8009140:	2000000c 	.word	0x2000000c

08009144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8009144:	4a08      	ldr	r2, [pc, #32]	; (8009168 <vPortExitCritical+0x24>)
 8009146:	6813      	ldr	r3, [r2, #0]
 8009148:	b943      	cbnz	r3, 800915c <vPortExitCritical+0x18>
 800914a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	e7fe      	b.n	800915a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800915c:	3b01      	subs	r3, #1
 800915e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009160:	b90b      	cbnz	r3, 8009166 <vPortExitCritical+0x22>
	__asm volatile
 8009162:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009166:	4770      	bx	lr
 8009168:	2000000c 	.word	0x2000000c
 800916c:	00000000 	.word	0x00000000

08009170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009170:	f3ef 8009 	mrs	r0, PSP
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	4b0d      	ldr	r3, [pc, #52]	; (80091b0 <pxCurrentTCBConst>)
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009180:	6010      	str	r0, [r2, #0]
 8009182:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009186:	f04f 0050 	mov.w	r0, #80	; 0x50
 800918a:	f380 8811 	msr	BASEPRI, r0
 800918e:	f7ff fa17 	bl	80085c0 <vTaskSwitchContext>
 8009192:	f04f 0000 	mov.w	r0, #0
 8009196:	f380 8811 	msr	BASEPRI, r0
 800919a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800919e:	6819      	ldr	r1, [r3, #0]
 80091a0:	6808      	ldr	r0, [r1, #0]
 80091a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80091a6:	f380 8809 	msr	PSP, r0
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	4770      	bx	lr

080091b0 <pxCurrentTCBConst>:
 80091b0:	20001898 	.word	0x20001898

080091b4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091b4:	b508      	push	{r3, lr}
	__asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091c6:	f7ff f885 	bl	80082d4 <xTaskIncrementTick>
 80091ca:	b128      	cbz	r0, 80091d8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80091d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80091d8:	2300      	movs	r3, #0
 80091da:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80091de:	bd08      	pop	{r3, pc}

080091e0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091e0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80091e4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091ea:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091ec:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091ee:	4b04      	ldr	r3, [pc, #16]	; (8009200 <vPortSetupTimerInterrupt+0x20>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80091f6:	3b01      	subs	r3, #1
 80091f8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091fa:	2307      	movs	r3, #7
 80091fc:	6113      	str	r3, [r2, #16]
}
 80091fe:	4770      	bx	lr
 8009200:	20000000 	.word	0x20000000

08009204 <xPortStartScheduler>:
{
 8009204:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009206:	4b29      	ldr	r3, [pc, #164]	; (80092ac <xPortStartScheduler+0xa8>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009208:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800920a:	781a      	ldrb	r2, [r3, #0]
 800920c:	b2d2      	uxtb	r2, r2
 800920e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009210:	22ff      	movs	r2, #255	; 0xff
 8009212:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009214:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009216:	4a26      	ldr	r2, [pc, #152]	; (80092b0 <xPortStartScheduler+0xac>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009218:	b2db      	uxtb	r3, r3
 800921a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800921e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009222:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009226:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009228:	2307      	movs	r3, #7
 800922a:	4a22      	ldr	r2, [pc, #136]	; (80092b4 <xPortStartScheduler+0xb0>)
 800922c:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800922e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009232:	1e5c      	subs	r4, r3, #1
 8009234:	0600      	lsls	r0, r0, #24
 8009236:	d40c      	bmi.n	8009252 <xPortStartScheduler+0x4e>
 8009238:	b111      	cbz	r1, 8009240 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800923a:	2b03      	cmp	r3, #3
 800923c:	6013      	str	r3, [r2, #0]
 800923e:	d011      	beq.n	8009264 <xPortStartScheduler+0x60>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	e7fe      	b.n	8009250 <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009252:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009256:	2101      	movs	r1, #1
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	b2db      	uxtb	r3, r3
 800925c:	f88d 3003 	strb.w	r3, [sp, #3]
 8009260:	4623      	mov	r3, r4
 8009262:	e7e4      	b.n	800922e <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009264:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009268:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800926a:	9b01      	ldr	r3, [sp, #4]
 800926c:	4a0f      	ldr	r2, [pc, #60]	; (80092ac <xPortStartScheduler+0xa8>)
 800926e:	b2db      	uxtb	r3, r3
 8009270:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009272:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8009276:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009278:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800927c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009280:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009284:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8009288:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800928c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8009290:	f7ff ffa6 	bl	80091e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009294:	4b08      	ldr	r3, [pc, #32]	; (80092b8 <xPortStartScheduler+0xb4>)
 8009296:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8009298:	f7ff fee0 	bl	800905c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800929c:	f7ff f990 	bl	80085c0 <vTaskSwitchContext>
}
 80092a0:	4620      	mov	r0, r4
	prvTaskExitError();
 80092a2:	f7ff feeb 	bl	800907c <prvTaskExitError>
}
 80092a6:	b002      	add	sp, #8
 80092a8:	bd10      	pop	{r4, pc}
 80092aa:	bf00      	nop
 80092ac:	e000e400 	.word	0xe000e400
 80092b0:	20001abc 	.word	0x20001abc
 80092b4:	20001ac0 	.word	0x20001ac0
 80092b8:	2000000c 	.word	0x2000000c

080092bc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80092bc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80092c0:	2b0f      	cmp	r3, #15
 80092c2:	d90e      	bls.n	80092e2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80092c4:	4a11      	ldr	r2, [pc, #68]	; (800930c <vPortValidateInterruptPriority+0x50>)
 80092c6:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80092c8:	4a11      	ldr	r2, [pc, #68]	; (8009310 <vPortValidateInterruptPriority+0x54>)
 80092ca:	7812      	ldrb	r2, [r2, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d908      	bls.n	80092e2 <vPortValidateInterruptPriority+0x26>
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	e7fe      	b.n	80092e0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80092e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80092e6:	4a0b      	ldr	r2, [pc, #44]	; (8009314 <vPortValidateInterruptPriority+0x58>)
 80092e8:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80092ec:	6812      	ldr	r2, [r2, #0]
 80092ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d908      	bls.n	8009308 <vPortValidateInterruptPriority+0x4c>
 80092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	e7fe      	b.n	8009306 <vPortValidateInterruptPriority+0x4a>
	}
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	e000e3f0 	.word	0xe000e3f0
 8009310:	20001abc 	.word	0x20001abc
 8009314:	20001ac0 	.word	0x20001ac0

08009318 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009318:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800931a:	4b10      	ldr	r3, [pc, #64]	; (800935c <prvInsertBlockIntoFreeList+0x44>)
 800931c:	461a      	mov	r2, r3
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4283      	cmp	r3, r0
 8009322:	d3fb      	bcc.n	800931c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009324:	6854      	ldr	r4, [r2, #4]
 8009326:	1911      	adds	r1, r2, r4
 8009328:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800932a:	bf01      	itttt	eq
 800932c:	6841      	ldreq	r1, [r0, #4]
 800932e:	4610      	moveq	r0, r2
 8009330:	1909      	addeq	r1, r1, r4
 8009332:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009334:	6844      	ldr	r4, [r0, #4]
 8009336:	1901      	adds	r1, r0, r4
 8009338:	428b      	cmp	r3, r1
 800933a:	d10c      	bne.n	8009356 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800933c:	4908      	ldr	r1, [pc, #32]	; (8009360 <prvInsertBlockIntoFreeList+0x48>)
 800933e:	6809      	ldr	r1, [r1, #0]
 8009340:	428b      	cmp	r3, r1
 8009342:	d003      	beq.n	800934c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009344:	6859      	ldr	r1, [r3, #4]
 8009346:	4421      	add	r1, r4
 8009348:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800934a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800934c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800934e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009350:	bf18      	it	ne
 8009352:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009354:	bd10      	pop	{r4, pc}
 8009356:	4619      	mov	r1, r3
 8009358:	e7f8      	b.n	800934c <prvInsertBlockIntoFreeList+0x34>
 800935a:	bf00      	nop
 800935c:	20002ed4 	.word	0x20002ed4
 8009360:	20001ac4 	.word	0x20001ac4

08009364 <pvPortMalloc>:
{
 8009364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009368:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800936a:	f7fe ffa5 	bl	80082b8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800936e:	4940      	ldr	r1, [pc, #256]	; (8009470 <pvPortMalloc+0x10c>)
 8009370:	4d40      	ldr	r5, [pc, #256]	; (8009474 <pvPortMalloc+0x110>)
 8009372:	680b      	ldr	r3, [r1, #0]
 8009374:	bb0b      	cbnz	r3, 80093ba <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8009376:	4a40      	ldr	r2, [pc, #256]	; (8009478 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009378:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800937a:	bf1f      	itttt	ne
 800937c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800937e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009382:	f502 52a0 	addne.w	r2, r2, #5120	; 0x1400
 8009386:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009388:	bf0c      	ite	eq
 800938a:	f44f 53a0 	moveq.w	r3, #5120	; 0x1400
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800938e:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 8009390:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009392:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009394:	4e39      	ldr	r6, [pc, #228]	; (800947c <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 8009396:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009398:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800939c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800939e:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80093a0:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093a4:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093a6:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 80093aa:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093ac:	4b34      	ldr	r3, [pc, #208]	; (8009480 <pvPortMalloc+0x11c>)
 80093ae:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093b0:	4b34      	ldr	r3, [pc, #208]	; (8009484 <pvPortMalloc+0x120>)
 80093b2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093b8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80093ba:	682e      	ldr	r6, [r5, #0]
 80093bc:	4226      	tst	r6, r4
 80093be:	d151      	bne.n	8009464 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 80093c0:	2c00      	cmp	r4, #0
 80093c2:	d042      	beq.n	800944a <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 80093c4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80093c8:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80093ca:	bf1c      	itt	ne
 80093cc:	f023 0307 	bicne.w	r3, r3, #7
 80093d0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d046      	beq.n	8009464 <pvPortMalloc+0x100>
 80093d6:	4f2b      	ldr	r7, [pc, #172]	; (8009484 <pvPortMalloc+0x120>)
 80093d8:	683c      	ldr	r4, [r7, #0]
 80093da:	429c      	cmp	r4, r3
 80093dc:	d342      	bcc.n	8009464 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 80093de:	4a27      	ldr	r2, [pc, #156]	; (800947c <pvPortMalloc+0x118>)
 80093e0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093e2:	6868      	ldr	r0, [r5, #4]
 80093e4:	4298      	cmp	r0, r3
 80093e6:	d204      	bcs.n	80093f2 <pvPortMalloc+0x8e>
 80093e8:	f8d5 c000 	ldr.w	ip, [r5]
 80093ec:	f1bc 0f00 	cmp.w	ip, #0
 80093f0:	d115      	bne.n	800941e <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 80093f2:	6809      	ldr	r1, [r1, #0]
 80093f4:	42a9      	cmp	r1, r5
 80093f6:	d035      	beq.n	8009464 <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093f8:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093fa:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093fe:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009400:	1ac2      	subs	r2, r0, r3
 8009402:	2a10      	cmp	r2, #16
 8009404:	d912      	bls.n	800942c <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009406:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009408:	0741      	lsls	r1, r0, #29
 800940a:	d00b      	beq.n	8009424 <pvPortMalloc+0xc0>
 800940c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	e7fe      	b.n	800941c <pvPortMalloc+0xb8>
 800941e:	462a      	mov	r2, r5
 8009420:	4665      	mov	r5, ip
 8009422:	e7de      	b.n	80093e2 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009424:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009426:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009428:	f7ff ff76 	bl	8009318 <prvInsertBlockIntoFreeList>
					pxBlock->pxNextFreeBlock = NULL;
 800942c:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800942e:	4914      	ldr	r1, [pc, #80]	; (8009480 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009430:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009432:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009434:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009436:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009438:	ea46 0602 	orr.w	r6, r6, r2
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800943c:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800943e:	bf38      	it	cc
 8009440:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009442:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009444:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8009448:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800944a:	f7fe ffd5 	bl	80083f8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800944e:	0763      	lsls	r3, r4, #29
 8009450:	d00a      	beq.n	8009468 <pvPortMalloc+0x104>
 8009452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	e7fe      	b.n	8009462 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 8009464:	2400      	movs	r4, #0
 8009466:	e7f0      	b.n	800944a <pvPortMalloc+0xe6>
}
 8009468:	4620      	mov	r0, r4
 800946a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800946e:	bf00      	nop
 8009470:	20001ac4 	.word	0x20001ac4
 8009474:	20002ec8 	.word	0x20002ec8
 8009478:	20001ac8 	.word	0x20001ac8
 800947c:	20002ed4 	.word	0x20002ed4
 8009480:	20002ed0 	.word	0x20002ed0
 8009484:	20002ecc 	.word	0x20002ecc

08009488 <vPortFree>:
{
 8009488:	b510      	push	{r4, lr}
	if( pv != NULL )
 800948a:	4604      	mov	r4, r0
 800948c:	b370      	cbz	r0, 80094ec <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800948e:	4a18      	ldr	r2, [pc, #96]	; (80094f0 <vPortFree+0x68>)
 8009490:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009494:	6812      	ldr	r2, [r2, #0]
 8009496:	4213      	tst	r3, r2
 8009498:	d108      	bne.n	80094ac <vPortFree+0x24>
 800949a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	e7fe      	b.n	80094aa <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094ac:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80094b0:	b141      	cbz	r1, 80094c4 <vPortFree+0x3c>
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	e7fe      	b.n	80094c2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094c4:	ea23 0302 	bic.w	r3, r3, r2
 80094c8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80094cc:	f7fe fef4 	bl	80082b8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094d0:	4a08      	ldr	r2, [pc, #32]	; (80094f4 <vPortFree+0x6c>)
 80094d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80094d6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094d8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094dc:	440b      	add	r3, r1
 80094de:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094e0:	f7ff ff1a 	bl	8009318 <prvInsertBlockIntoFreeList>
}
 80094e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80094e8:	f7fe bf86 	b.w	80083f8 <xTaskResumeAll>
}
 80094ec:	bd10      	pop	{r4, pc}
 80094ee:	bf00      	nop
 80094f0:	20002ec8 	.word	0x20002ec8
 80094f4:	20002ecc 	.word	0x20002ecc

080094f8 <malloc>:
 80094f8:	4b02      	ldr	r3, [pc, #8]	; (8009504 <malloc+0xc>)
 80094fa:	4601      	mov	r1, r0
 80094fc:	6818      	ldr	r0, [r3, #0]
 80094fe:	f000 b823 	b.w	8009548 <_malloc_r>
 8009502:	bf00      	nop
 8009504:	2000005c 	.word	0x2000005c

08009508 <sbrk_aligned>:
 8009508:	b570      	push	{r4, r5, r6, lr}
 800950a:	4e0e      	ldr	r6, [pc, #56]	; (8009544 <sbrk_aligned+0x3c>)
 800950c:	460c      	mov	r4, r1
 800950e:	6831      	ldr	r1, [r6, #0]
 8009510:	4605      	mov	r5, r0
 8009512:	b911      	cbnz	r1, 800951a <sbrk_aligned+0x12>
 8009514:	f000 f94c 	bl	80097b0 <_sbrk_r>
 8009518:	6030      	str	r0, [r6, #0]
 800951a:	4621      	mov	r1, r4
 800951c:	4628      	mov	r0, r5
 800951e:	f000 f947 	bl	80097b0 <_sbrk_r>
 8009522:	1c43      	adds	r3, r0, #1
 8009524:	d00a      	beq.n	800953c <sbrk_aligned+0x34>
 8009526:	1cc4      	adds	r4, r0, #3
 8009528:	f024 0403 	bic.w	r4, r4, #3
 800952c:	42a0      	cmp	r0, r4
 800952e:	d007      	beq.n	8009540 <sbrk_aligned+0x38>
 8009530:	1a21      	subs	r1, r4, r0
 8009532:	4628      	mov	r0, r5
 8009534:	f000 f93c 	bl	80097b0 <_sbrk_r>
 8009538:	3001      	adds	r0, #1
 800953a:	d101      	bne.n	8009540 <sbrk_aligned+0x38>
 800953c:	f04f 34ff 	mov.w	r4, #4294967295
 8009540:	4620      	mov	r0, r4
 8009542:	bd70      	pop	{r4, r5, r6, pc}
 8009544:	20002ee0 	.word	0x20002ee0

08009548 <_malloc_r>:
 8009548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800954c:	1ccd      	adds	r5, r1, #3
 800954e:	f025 0503 	bic.w	r5, r5, #3
 8009552:	3508      	adds	r5, #8
 8009554:	2d0c      	cmp	r5, #12
 8009556:	bf38      	it	cc
 8009558:	250c      	movcc	r5, #12
 800955a:	2d00      	cmp	r5, #0
 800955c:	4607      	mov	r7, r0
 800955e:	db01      	blt.n	8009564 <_malloc_r+0x1c>
 8009560:	42a9      	cmp	r1, r5
 8009562:	d905      	bls.n	8009570 <_malloc_r+0x28>
 8009564:	230c      	movs	r3, #12
 8009566:	2600      	movs	r6, #0
 8009568:	603b      	str	r3, [r7, #0]
 800956a:	4630      	mov	r0, r6
 800956c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009570:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009644 <_malloc_r+0xfc>
 8009574:	f000 f868 	bl	8009648 <__malloc_lock>
 8009578:	f8d8 3000 	ldr.w	r3, [r8]
 800957c:	461c      	mov	r4, r3
 800957e:	bb5c      	cbnz	r4, 80095d8 <_malloc_r+0x90>
 8009580:	4629      	mov	r1, r5
 8009582:	4638      	mov	r0, r7
 8009584:	f7ff ffc0 	bl	8009508 <sbrk_aligned>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	4604      	mov	r4, r0
 800958c:	d155      	bne.n	800963a <_malloc_r+0xf2>
 800958e:	f8d8 4000 	ldr.w	r4, [r8]
 8009592:	4626      	mov	r6, r4
 8009594:	2e00      	cmp	r6, #0
 8009596:	d145      	bne.n	8009624 <_malloc_r+0xdc>
 8009598:	2c00      	cmp	r4, #0
 800959a:	d048      	beq.n	800962e <_malloc_r+0xe6>
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	4631      	mov	r1, r6
 80095a0:	4638      	mov	r0, r7
 80095a2:	eb04 0903 	add.w	r9, r4, r3
 80095a6:	f000 f903 	bl	80097b0 <_sbrk_r>
 80095aa:	4581      	cmp	r9, r0
 80095ac:	d13f      	bne.n	800962e <_malloc_r+0xe6>
 80095ae:	6821      	ldr	r1, [r4, #0]
 80095b0:	4638      	mov	r0, r7
 80095b2:	1a6d      	subs	r5, r5, r1
 80095b4:	4629      	mov	r1, r5
 80095b6:	f7ff ffa7 	bl	8009508 <sbrk_aligned>
 80095ba:	3001      	adds	r0, #1
 80095bc:	d037      	beq.n	800962e <_malloc_r+0xe6>
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	442b      	add	r3, r5
 80095c2:	6023      	str	r3, [r4, #0]
 80095c4:	f8d8 3000 	ldr.w	r3, [r8]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d038      	beq.n	800963e <_malloc_r+0xf6>
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	42a2      	cmp	r2, r4
 80095d0:	d12b      	bne.n	800962a <_malloc_r+0xe2>
 80095d2:	2200      	movs	r2, #0
 80095d4:	605a      	str	r2, [r3, #4]
 80095d6:	e00f      	b.n	80095f8 <_malloc_r+0xb0>
 80095d8:	6822      	ldr	r2, [r4, #0]
 80095da:	1b52      	subs	r2, r2, r5
 80095dc:	d41f      	bmi.n	800961e <_malloc_r+0xd6>
 80095de:	2a0b      	cmp	r2, #11
 80095e0:	d917      	bls.n	8009612 <_malloc_r+0xca>
 80095e2:	1961      	adds	r1, r4, r5
 80095e4:	42a3      	cmp	r3, r4
 80095e6:	6025      	str	r5, [r4, #0]
 80095e8:	bf18      	it	ne
 80095ea:	6059      	strne	r1, [r3, #4]
 80095ec:	6863      	ldr	r3, [r4, #4]
 80095ee:	bf08      	it	eq
 80095f0:	f8c8 1000 	streq.w	r1, [r8]
 80095f4:	5162      	str	r2, [r4, r5]
 80095f6:	604b      	str	r3, [r1, #4]
 80095f8:	4638      	mov	r0, r7
 80095fa:	f104 060b 	add.w	r6, r4, #11
 80095fe:	f000 f829 	bl	8009654 <__malloc_unlock>
 8009602:	f026 0607 	bic.w	r6, r6, #7
 8009606:	1d23      	adds	r3, r4, #4
 8009608:	1af2      	subs	r2, r6, r3
 800960a:	d0ae      	beq.n	800956a <_malloc_r+0x22>
 800960c:	1b9b      	subs	r3, r3, r6
 800960e:	50a3      	str	r3, [r4, r2]
 8009610:	e7ab      	b.n	800956a <_malloc_r+0x22>
 8009612:	42a3      	cmp	r3, r4
 8009614:	6862      	ldr	r2, [r4, #4]
 8009616:	d1dd      	bne.n	80095d4 <_malloc_r+0x8c>
 8009618:	f8c8 2000 	str.w	r2, [r8]
 800961c:	e7ec      	b.n	80095f8 <_malloc_r+0xb0>
 800961e:	4623      	mov	r3, r4
 8009620:	6864      	ldr	r4, [r4, #4]
 8009622:	e7ac      	b.n	800957e <_malloc_r+0x36>
 8009624:	4634      	mov	r4, r6
 8009626:	6876      	ldr	r6, [r6, #4]
 8009628:	e7b4      	b.n	8009594 <_malloc_r+0x4c>
 800962a:	4613      	mov	r3, r2
 800962c:	e7cc      	b.n	80095c8 <_malloc_r+0x80>
 800962e:	230c      	movs	r3, #12
 8009630:	4638      	mov	r0, r7
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	f000 f80e 	bl	8009654 <__malloc_unlock>
 8009638:	e797      	b.n	800956a <_malloc_r+0x22>
 800963a:	6025      	str	r5, [r4, #0]
 800963c:	e7dc      	b.n	80095f8 <_malloc_r+0xb0>
 800963e:	605b      	str	r3, [r3, #4]
 8009640:	deff      	udf	#255	; 0xff
 8009642:	bf00      	nop
 8009644:	20002edc 	.word	0x20002edc

08009648 <__malloc_lock>:
 8009648:	4801      	ldr	r0, [pc, #4]	; (8009650 <__malloc_lock+0x8>)
 800964a:	f000 b8eb 	b.w	8009824 <__retarget_lock_acquire_recursive>
 800964e:	bf00      	nop
 8009650:	20003020 	.word	0x20003020

08009654 <__malloc_unlock>:
 8009654:	4801      	ldr	r0, [pc, #4]	; (800965c <__malloc_unlock+0x8>)
 8009656:	f000 b8e6 	b.w	8009826 <__retarget_lock_release_recursive>
 800965a:	bf00      	nop
 800965c:	20003020 	.word	0x20003020

08009660 <sniprintf>:
 8009660:	b40c      	push	{r2, r3}
 8009662:	b530      	push	{r4, r5, lr}
 8009664:	4b17      	ldr	r3, [pc, #92]	; (80096c4 <sniprintf+0x64>)
 8009666:	1e0c      	subs	r4, r1, #0
 8009668:	681d      	ldr	r5, [r3, #0]
 800966a:	b09d      	sub	sp, #116	; 0x74
 800966c:	da08      	bge.n	8009680 <sniprintf+0x20>
 800966e:	238b      	movs	r3, #139	; 0x8b
 8009670:	f04f 30ff 	mov.w	r0, #4294967295
 8009674:	602b      	str	r3, [r5, #0]
 8009676:	b01d      	add	sp, #116	; 0x74
 8009678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800967c:	b002      	add	sp, #8
 800967e:	4770      	bx	lr
 8009680:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009684:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009688:	bf0c      	ite	eq
 800968a:	4623      	moveq	r3, r4
 800968c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	9307      	str	r3, [sp, #28]
 8009694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009698:	9002      	str	r0, [sp, #8]
 800969a:	9006      	str	r0, [sp, #24]
 800969c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80096a0:	4628      	mov	r0, r5
 80096a2:	ab21      	add	r3, sp, #132	; 0x84
 80096a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80096a6:	a902      	add	r1, sp, #8
 80096a8:	9301      	str	r3, [sp, #4]
 80096aa:	f000 f975 	bl	8009998 <_svfiprintf_r>
 80096ae:	1c43      	adds	r3, r0, #1
 80096b0:	bfbc      	itt	lt
 80096b2:	238b      	movlt	r3, #139	; 0x8b
 80096b4:	602b      	strlt	r3, [r5, #0]
 80096b6:	2c00      	cmp	r4, #0
 80096b8:	d0dd      	beq.n	8009676 <sniprintf+0x16>
 80096ba:	2200      	movs	r2, #0
 80096bc:	9b02      	ldr	r3, [sp, #8]
 80096be:	701a      	strb	r2, [r3, #0]
 80096c0:	e7d9      	b.n	8009676 <sniprintf+0x16>
 80096c2:	bf00      	nop
 80096c4:	2000005c 	.word	0x2000005c

080096c8 <memset>:
 80096c8:	4603      	mov	r3, r0
 80096ca:	4402      	add	r2, r0
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d100      	bne.n	80096d2 <memset+0xa>
 80096d0:	4770      	bx	lr
 80096d2:	f803 1b01 	strb.w	r1, [r3], #1
 80096d6:	e7f9      	b.n	80096cc <memset+0x4>

080096d8 <strstr>:
 80096d8:	780a      	ldrb	r2, [r1, #0]
 80096da:	b570      	push	{r4, r5, r6, lr}
 80096dc:	b96a      	cbnz	r2, 80096fa <strstr+0x22>
 80096de:	bd70      	pop	{r4, r5, r6, pc}
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d109      	bne.n	80096f8 <strstr+0x20>
 80096e4:	460c      	mov	r4, r1
 80096e6:	4605      	mov	r5, r0
 80096e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d0f6      	beq.n	80096de <strstr+0x6>
 80096f0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80096f4:	429e      	cmp	r6, r3
 80096f6:	d0f7      	beq.n	80096e8 <strstr+0x10>
 80096f8:	3001      	adds	r0, #1
 80096fa:	7803      	ldrb	r3, [r0, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1ef      	bne.n	80096e0 <strstr+0x8>
 8009700:	4618      	mov	r0, r3
 8009702:	e7ec      	b.n	80096de <strstr+0x6>

08009704 <_reclaim_reent>:
 8009704:	4b29      	ldr	r3, [pc, #164]	; (80097ac <_reclaim_reent+0xa8>)
 8009706:	b570      	push	{r4, r5, r6, lr}
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4604      	mov	r4, r0
 800970c:	4283      	cmp	r3, r0
 800970e:	d04b      	beq.n	80097a8 <_reclaim_reent+0xa4>
 8009710:	69c3      	ldr	r3, [r0, #28]
 8009712:	b143      	cbz	r3, 8009726 <_reclaim_reent+0x22>
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d144      	bne.n	80097a4 <_reclaim_reent+0xa0>
 800971a:	69e3      	ldr	r3, [r4, #28]
 800971c:	6819      	ldr	r1, [r3, #0]
 800971e:	b111      	cbz	r1, 8009726 <_reclaim_reent+0x22>
 8009720:	4620      	mov	r0, r4
 8009722:	f000 f897 	bl	8009854 <_free_r>
 8009726:	6961      	ldr	r1, [r4, #20]
 8009728:	b111      	cbz	r1, 8009730 <_reclaim_reent+0x2c>
 800972a:	4620      	mov	r0, r4
 800972c:	f000 f892 	bl	8009854 <_free_r>
 8009730:	69e1      	ldr	r1, [r4, #28]
 8009732:	b111      	cbz	r1, 800973a <_reclaim_reent+0x36>
 8009734:	4620      	mov	r0, r4
 8009736:	f000 f88d 	bl	8009854 <_free_r>
 800973a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800973c:	b111      	cbz	r1, 8009744 <_reclaim_reent+0x40>
 800973e:	4620      	mov	r0, r4
 8009740:	f000 f888 	bl	8009854 <_free_r>
 8009744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009746:	b111      	cbz	r1, 800974e <_reclaim_reent+0x4a>
 8009748:	4620      	mov	r0, r4
 800974a:	f000 f883 	bl	8009854 <_free_r>
 800974e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009750:	b111      	cbz	r1, 8009758 <_reclaim_reent+0x54>
 8009752:	4620      	mov	r0, r4
 8009754:	f000 f87e 	bl	8009854 <_free_r>
 8009758:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800975a:	b111      	cbz	r1, 8009762 <_reclaim_reent+0x5e>
 800975c:	4620      	mov	r0, r4
 800975e:	f000 f879 	bl	8009854 <_free_r>
 8009762:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009764:	b111      	cbz	r1, 800976c <_reclaim_reent+0x68>
 8009766:	4620      	mov	r0, r4
 8009768:	f000 f874 	bl	8009854 <_free_r>
 800976c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800976e:	b111      	cbz	r1, 8009776 <_reclaim_reent+0x72>
 8009770:	4620      	mov	r0, r4
 8009772:	f000 f86f 	bl	8009854 <_free_r>
 8009776:	6a23      	ldr	r3, [r4, #32]
 8009778:	b1b3      	cbz	r3, 80097a8 <_reclaim_reent+0xa4>
 800977a:	4620      	mov	r0, r4
 800977c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009780:	4718      	bx	r3
 8009782:	5949      	ldr	r1, [r1, r5]
 8009784:	b941      	cbnz	r1, 8009798 <_reclaim_reent+0x94>
 8009786:	3504      	adds	r5, #4
 8009788:	69e3      	ldr	r3, [r4, #28]
 800978a:	2d80      	cmp	r5, #128	; 0x80
 800978c:	68d9      	ldr	r1, [r3, #12]
 800978e:	d1f8      	bne.n	8009782 <_reclaim_reent+0x7e>
 8009790:	4620      	mov	r0, r4
 8009792:	f000 f85f 	bl	8009854 <_free_r>
 8009796:	e7c0      	b.n	800971a <_reclaim_reent+0x16>
 8009798:	680e      	ldr	r6, [r1, #0]
 800979a:	4620      	mov	r0, r4
 800979c:	f000 f85a 	bl	8009854 <_free_r>
 80097a0:	4631      	mov	r1, r6
 80097a2:	e7ef      	b.n	8009784 <_reclaim_reent+0x80>
 80097a4:	2500      	movs	r5, #0
 80097a6:	e7ef      	b.n	8009788 <_reclaim_reent+0x84>
 80097a8:	bd70      	pop	{r4, r5, r6, pc}
 80097aa:	bf00      	nop
 80097ac:	2000005c 	.word	0x2000005c

080097b0 <_sbrk_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	2300      	movs	r3, #0
 80097b4:	4d05      	ldr	r5, [pc, #20]	; (80097cc <_sbrk_r+0x1c>)
 80097b6:	4604      	mov	r4, r0
 80097b8:	4608      	mov	r0, r1
 80097ba:	602b      	str	r3, [r5, #0]
 80097bc:	f7f9 fc94 	bl	80030e8 <_sbrk>
 80097c0:	1c43      	adds	r3, r0, #1
 80097c2:	d102      	bne.n	80097ca <_sbrk_r+0x1a>
 80097c4:	682b      	ldr	r3, [r5, #0]
 80097c6:	b103      	cbz	r3, 80097ca <_sbrk_r+0x1a>
 80097c8:	6023      	str	r3, [r4, #0]
 80097ca:	bd38      	pop	{r3, r4, r5, pc}
 80097cc:	2000301c 	.word	0x2000301c

080097d0 <__errno>:
 80097d0:	4b01      	ldr	r3, [pc, #4]	; (80097d8 <__errno+0x8>)
 80097d2:	6818      	ldr	r0, [r3, #0]
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	2000005c 	.word	0x2000005c

080097dc <__libc_init_array>:
 80097dc:	b570      	push	{r4, r5, r6, lr}
 80097de:	2600      	movs	r6, #0
 80097e0:	4d0c      	ldr	r5, [pc, #48]	; (8009814 <__libc_init_array+0x38>)
 80097e2:	4c0d      	ldr	r4, [pc, #52]	; (8009818 <__libc_init_array+0x3c>)
 80097e4:	1b64      	subs	r4, r4, r5
 80097e6:	10a4      	asrs	r4, r4, #2
 80097e8:	42a6      	cmp	r6, r4
 80097ea:	d109      	bne.n	8009800 <__libc_init_array+0x24>
 80097ec:	f000 fbc6 	bl	8009f7c <_init>
 80097f0:	2600      	movs	r6, #0
 80097f2:	4d0a      	ldr	r5, [pc, #40]	; (800981c <__libc_init_array+0x40>)
 80097f4:	4c0a      	ldr	r4, [pc, #40]	; (8009820 <__libc_init_array+0x44>)
 80097f6:	1b64      	subs	r4, r4, r5
 80097f8:	10a4      	asrs	r4, r4, #2
 80097fa:	42a6      	cmp	r6, r4
 80097fc:	d105      	bne.n	800980a <__libc_init_array+0x2e>
 80097fe:	bd70      	pop	{r4, r5, r6, pc}
 8009800:	f855 3b04 	ldr.w	r3, [r5], #4
 8009804:	4798      	blx	r3
 8009806:	3601      	adds	r6, #1
 8009808:	e7ee      	b.n	80097e8 <__libc_init_array+0xc>
 800980a:	f855 3b04 	ldr.w	r3, [r5], #4
 800980e:	4798      	blx	r3
 8009810:	3601      	adds	r6, #1
 8009812:	e7f2      	b.n	80097fa <__libc_init_array+0x1e>
 8009814:	0800a5d4 	.word	0x0800a5d4
 8009818:	0800a5d4 	.word	0x0800a5d4
 800981c:	0800a5d4 	.word	0x0800a5d4
 8009820:	0800a5d8 	.word	0x0800a5d8

08009824 <__retarget_lock_acquire_recursive>:
 8009824:	4770      	bx	lr

08009826 <__retarget_lock_release_recursive>:
 8009826:	4770      	bx	lr

08009828 <strcpy>:
 8009828:	4603      	mov	r3, r0
 800982a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800982e:	f803 2b01 	strb.w	r2, [r3], #1
 8009832:	2a00      	cmp	r2, #0
 8009834:	d1f9      	bne.n	800982a <strcpy+0x2>
 8009836:	4770      	bx	lr

08009838 <memcpy>:
 8009838:	440a      	add	r2, r1
 800983a:	4291      	cmp	r1, r2
 800983c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009840:	d100      	bne.n	8009844 <memcpy+0xc>
 8009842:	4770      	bx	lr
 8009844:	b510      	push	{r4, lr}
 8009846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800984a:	4291      	cmp	r1, r2
 800984c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009850:	d1f9      	bne.n	8009846 <memcpy+0xe>
 8009852:	bd10      	pop	{r4, pc}

08009854 <_free_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4605      	mov	r5, r0
 8009858:	2900      	cmp	r1, #0
 800985a:	d040      	beq.n	80098de <_free_r+0x8a>
 800985c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009860:	1f0c      	subs	r4, r1, #4
 8009862:	2b00      	cmp	r3, #0
 8009864:	bfb8      	it	lt
 8009866:	18e4      	addlt	r4, r4, r3
 8009868:	f7ff feee 	bl	8009648 <__malloc_lock>
 800986c:	4a1c      	ldr	r2, [pc, #112]	; (80098e0 <_free_r+0x8c>)
 800986e:	6813      	ldr	r3, [r2, #0]
 8009870:	b933      	cbnz	r3, 8009880 <_free_r+0x2c>
 8009872:	6063      	str	r3, [r4, #4]
 8009874:	6014      	str	r4, [r2, #0]
 8009876:	4628      	mov	r0, r5
 8009878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800987c:	f7ff beea 	b.w	8009654 <__malloc_unlock>
 8009880:	42a3      	cmp	r3, r4
 8009882:	d908      	bls.n	8009896 <_free_r+0x42>
 8009884:	6820      	ldr	r0, [r4, #0]
 8009886:	1821      	adds	r1, r4, r0
 8009888:	428b      	cmp	r3, r1
 800988a:	bf01      	itttt	eq
 800988c:	6819      	ldreq	r1, [r3, #0]
 800988e:	685b      	ldreq	r3, [r3, #4]
 8009890:	1809      	addeq	r1, r1, r0
 8009892:	6021      	streq	r1, [r4, #0]
 8009894:	e7ed      	b.n	8009872 <_free_r+0x1e>
 8009896:	461a      	mov	r2, r3
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	b10b      	cbz	r3, 80098a0 <_free_r+0x4c>
 800989c:	42a3      	cmp	r3, r4
 800989e:	d9fa      	bls.n	8009896 <_free_r+0x42>
 80098a0:	6811      	ldr	r1, [r2, #0]
 80098a2:	1850      	adds	r0, r2, r1
 80098a4:	42a0      	cmp	r0, r4
 80098a6:	d10b      	bne.n	80098c0 <_free_r+0x6c>
 80098a8:	6820      	ldr	r0, [r4, #0]
 80098aa:	4401      	add	r1, r0
 80098ac:	1850      	adds	r0, r2, r1
 80098ae:	4283      	cmp	r3, r0
 80098b0:	6011      	str	r1, [r2, #0]
 80098b2:	d1e0      	bne.n	8009876 <_free_r+0x22>
 80098b4:	6818      	ldr	r0, [r3, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	4408      	add	r0, r1
 80098ba:	6010      	str	r0, [r2, #0]
 80098bc:	6053      	str	r3, [r2, #4]
 80098be:	e7da      	b.n	8009876 <_free_r+0x22>
 80098c0:	d902      	bls.n	80098c8 <_free_r+0x74>
 80098c2:	230c      	movs	r3, #12
 80098c4:	602b      	str	r3, [r5, #0]
 80098c6:	e7d6      	b.n	8009876 <_free_r+0x22>
 80098c8:	6820      	ldr	r0, [r4, #0]
 80098ca:	1821      	adds	r1, r4, r0
 80098cc:	428b      	cmp	r3, r1
 80098ce:	bf01      	itttt	eq
 80098d0:	6819      	ldreq	r1, [r3, #0]
 80098d2:	685b      	ldreq	r3, [r3, #4]
 80098d4:	1809      	addeq	r1, r1, r0
 80098d6:	6021      	streq	r1, [r4, #0]
 80098d8:	6063      	str	r3, [r4, #4]
 80098da:	6054      	str	r4, [r2, #4]
 80098dc:	e7cb      	b.n	8009876 <_free_r+0x22>
 80098de:	bd38      	pop	{r3, r4, r5, pc}
 80098e0:	20002edc 	.word	0x20002edc

080098e4 <__ssputs_r>:
 80098e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e8:	461f      	mov	r7, r3
 80098ea:	688e      	ldr	r6, [r1, #8]
 80098ec:	4682      	mov	sl, r0
 80098ee:	42be      	cmp	r6, r7
 80098f0:	460c      	mov	r4, r1
 80098f2:	4690      	mov	r8, r2
 80098f4:	680b      	ldr	r3, [r1, #0]
 80098f6:	d82c      	bhi.n	8009952 <__ssputs_r+0x6e>
 80098f8:	898a      	ldrh	r2, [r1, #12]
 80098fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098fe:	d026      	beq.n	800994e <__ssputs_r+0x6a>
 8009900:	6965      	ldr	r5, [r4, #20]
 8009902:	6909      	ldr	r1, [r1, #16]
 8009904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009908:	eba3 0901 	sub.w	r9, r3, r1
 800990c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009910:	1c7b      	adds	r3, r7, #1
 8009912:	444b      	add	r3, r9
 8009914:	106d      	asrs	r5, r5, #1
 8009916:	429d      	cmp	r5, r3
 8009918:	bf38      	it	cc
 800991a:	461d      	movcc	r5, r3
 800991c:	0553      	lsls	r3, r2, #21
 800991e:	d527      	bpl.n	8009970 <__ssputs_r+0x8c>
 8009920:	4629      	mov	r1, r5
 8009922:	f7ff fe11 	bl	8009548 <_malloc_r>
 8009926:	4606      	mov	r6, r0
 8009928:	b360      	cbz	r0, 8009984 <__ssputs_r+0xa0>
 800992a:	464a      	mov	r2, r9
 800992c:	6921      	ldr	r1, [r4, #16]
 800992e:	f7ff ff83 	bl	8009838 <memcpy>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800993c:	81a3      	strh	r3, [r4, #12]
 800993e:	6126      	str	r6, [r4, #16]
 8009940:	444e      	add	r6, r9
 8009942:	6026      	str	r6, [r4, #0]
 8009944:	463e      	mov	r6, r7
 8009946:	6165      	str	r5, [r4, #20]
 8009948:	eba5 0509 	sub.w	r5, r5, r9
 800994c:	60a5      	str	r5, [r4, #8]
 800994e:	42be      	cmp	r6, r7
 8009950:	d900      	bls.n	8009954 <__ssputs_r+0x70>
 8009952:	463e      	mov	r6, r7
 8009954:	4632      	mov	r2, r6
 8009956:	4641      	mov	r1, r8
 8009958:	6820      	ldr	r0, [r4, #0]
 800995a:	f000 faaf 	bl	8009ebc <memmove>
 800995e:	2000      	movs	r0, #0
 8009960:	68a3      	ldr	r3, [r4, #8]
 8009962:	1b9b      	subs	r3, r3, r6
 8009964:	60a3      	str	r3, [r4, #8]
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	4433      	add	r3, r6
 800996a:	6023      	str	r3, [r4, #0]
 800996c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009970:	462a      	mov	r2, r5
 8009972:	f000 facb 	bl	8009f0c <_realloc_r>
 8009976:	4606      	mov	r6, r0
 8009978:	2800      	cmp	r0, #0
 800997a:	d1e0      	bne.n	800993e <__ssputs_r+0x5a>
 800997c:	4650      	mov	r0, sl
 800997e:	6921      	ldr	r1, [r4, #16]
 8009980:	f7ff ff68 	bl	8009854 <_free_r>
 8009984:	230c      	movs	r3, #12
 8009986:	f8ca 3000 	str.w	r3, [sl]
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	f04f 30ff 	mov.w	r0, #4294967295
 8009990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009994:	81a3      	strh	r3, [r4, #12]
 8009996:	e7e9      	b.n	800996c <__ssputs_r+0x88>

08009998 <_svfiprintf_r>:
 8009998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	4698      	mov	r8, r3
 800999e:	898b      	ldrh	r3, [r1, #12]
 80099a0:	4607      	mov	r7, r0
 80099a2:	061b      	lsls	r3, r3, #24
 80099a4:	460d      	mov	r5, r1
 80099a6:	4614      	mov	r4, r2
 80099a8:	b09d      	sub	sp, #116	; 0x74
 80099aa:	d50e      	bpl.n	80099ca <_svfiprintf_r+0x32>
 80099ac:	690b      	ldr	r3, [r1, #16]
 80099ae:	b963      	cbnz	r3, 80099ca <_svfiprintf_r+0x32>
 80099b0:	2140      	movs	r1, #64	; 0x40
 80099b2:	f7ff fdc9 	bl	8009548 <_malloc_r>
 80099b6:	6028      	str	r0, [r5, #0]
 80099b8:	6128      	str	r0, [r5, #16]
 80099ba:	b920      	cbnz	r0, 80099c6 <_svfiprintf_r+0x2e>
 80099bc:	230c      	movs	r3, #12
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	f04f 30ff 	mov.w	r0, #4294967295
 80099c4:	e0d0      	b.n	8009b68 <_svfiprintf_r+0x1d0>
 80099c6:	2340      	movs	r3, #64	; 0x40
 80099c8:	616b      	str	r3, [r5, #20]
 80099ca:	2300      	movs	r3, #0
 80099cc:	9309      	str	r3, [sp, #36]	; 0x24
 80099ce:	2320      	movs	r3, #32
 80099d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099d4:	2330      	movs	r3, #48	; 0x30
 80099d6:	f04f 0901 	mov.w	r9, #1
 80099da:	f8cd 800c 	str.w	r8, [sp, #12]
 80099de:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009b80 <_svfiprintf_r+0x1e8>
 80099e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099e6:	4623      	mov	r3, r4
 80099e8:	469a      	mov	sl, r3
 80099ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ee:	b10a      	cbz	r2, 80099f4 <_svfiprintf_r+0x5c>
 80099f0:	2a25      	cmp	r2, #37	; 0x25
 80099f2:	d1f9      	bne.n	80099e8 <_svfiprintf_r+0x50>
 80099f4:	ebba 0b04 	subs.w	fp, sl, r4
 80099f8:	d00b      	beq.n	8009a12 <_svfiprintf_r+0x7a>
 80099fa:	465b      	mov	r3, fp
 80099fc:	4622      	mov	r2, r4
 80099fe:	4629      	mov	r1, r5
 8009a00:	4638      	mov	r0, r7
 8009a02:	f7ff ff6f 	bl	80098e4 <__ssputs_r>
 8009a06:	3001      	adds	r0, #1
 8009a08:	f000 80a9 	beq.w	8009b5e <_svfiprintf_r+0x1c6>
 8009a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a0e:	445a      	add	r2, fp
 8009a10:	9209      	str	r2, [sp, #36]	; 0x24
 8009a12:	f89a 3000 	ldrb.w	r3, [sl]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 80a1 	beq.w	8009b5e <_svfiprintf_r+0x1c6>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a26:	f10a 0a01 	add.w	sl, sl, #1
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	9307      	str	r3, [sp, #28]
 8009a2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a32:	931a      	str	r3, [sp, #104]	; 0x68
 8009a34:	4654      	mov	r4, sl
 8009a36:	2205      	movs	r2, #5
 8009a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a3c:	4850      	ldr	r0, [pc, #320]	; (8009b80 <_svfiprintf_r+0x1e8>)
 8009a3e:	f000 fa57 	bl	8009ef0 <memchr>
 8009a42:	9a04      	ldr	r2, [sp, #16]
 8009a44:	b9d8      	cbnz	r0, 8009a7e <_svfiprintf_r+0xe6>
 8009a46:	06d0      	lsls	r0, r2, #27
 8009a48:	bf44      	itt	mi
 8009a4a:	2320      	movmi	r3, #32
 8009a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a50:	0711      	lsls	r1, r2, #28
 8009a52:	bf44      	itt	mi
 8009a54:	232b      	movmi	r3, #43	; 0x2b
 8009a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a60:	d015      	beq.n	8009a8e <_svfiprintf_r+0xf6>
 8009a62:	4654      	mov	r4, sl
 8009a64:	2000      	movs	r0, #0
 8009a66:	f04f 0c0a 	mov.w	ip, #10
 8009a6a:	9a07      	ldr	r2, [sp, #28]
 8009a6c:	4621      	mov	r1, r4
 8009a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a72:	3b30      	subs	r3, #48	; 0x30
 8009a74:	2b09      	cmp	r3, #9
 8009a76:	d94d      	bls.n	8009b14 <_svfiprintf_r+0x17c>
 8009a78:	b1b0      	cbz	r0, 8009aa8 <_svfiprintf_r+0x110>
 8009a7a:	9207      	str	r2, [sp, #28]
 8009a7c:	e014      	b.n	8009aa8 <_svfiprintf_r+0x110>
 8009a7e:	eba0 0308 	sub.w	r3, r0, r8
 8009a82:	fa09 f303 	lsl.w	r3, r9, r3
 8009a86:	4313      	orrs	r3, r2
 8009a88:	46a2      	mov	sl, r4
 8009a8a:	9304      	str	r3, [sp, #16]
 8009a8c:	e7d2      	b.n	8009a34 <_svfiprintf_r+0x9c>
 8009a8e:	9b03      	ldr	r3, [sp, #12]
 8009a90:	1d19      	adds	r1, r3, #4
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	9103      	str	r1, [sp, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	bfbb      	ittet	lt
 8009a9a:	425b      	neglt	r3, r3
 8009a9c:	f042 0202 	orrlt.w	r2, r2, #2
 8009aa0:	9307      	strge	r3, [sp, #28]
 8009aa2:	9307      	strlt	r3, [sp, #28]
 8009aa4:	bfb8      	it	lt
 8009aa6:	9204      	strlt	r2, [sp, #16]
 8009aa8:	7823      	ldrb	r3, [r4, #0]
 8009aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8009aac:	d10c      	bne.n	8009ac8 <_svfiprintf_r+0x130>
 8009aae:	7863      	ldrb	r3, [r4, #1]
 8009ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ab2:	d134      	bne.n	8009b1e <_svfiprintf_r+0x186>
 8009ab4:	9b03      	ldr	r3, [sp, #12]
 8009ab6:	3402      	adds	r4, #2
 8009ab8:	1d1a      	adds	r2, r3, #4
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	9203      	str	r2, [sp, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	bfb8      	it	lt
 8009ac2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ac6:	9305      	str	r3, [sp, #20]
 8009ac8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009b84 <_svfiprintf_r+0x1ec>
 8009acc:	2203      	movs	r2, #3
 8009ace:	4650      	mov	r0, sl
 8009ad0:	7821      	ldrb	r1, [r4, #0]
 8009ad2:	f000 fa0d 	bl	8009ef0 <memchr>
 8009ad6:	b138      	cbz	r0, 8009ae8 <_svfiprintf_r+0x150>
 8009ad8:	2240      	movs	r2, #64	; 0x40
 8009ada:	9b04      	ldr	r3, [sp, #16]
 8009adc:	eba0 000a 	sub.w	r0, r0, sl
 8009ae0:	4082      	lsls	r2, r0
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	3401      	adds	r4, #1
 8009ae6:	9304      	str	r3, [sp, #16]
 8009ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aec:	2206      	movs	r2, #6
 8009aee:	4826      	ldr	r0, [pc, #152]	; (8009b88 <_svfiprintf_r+0x1f0>)
 8009af0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009af4:	f000 f9fc 	bl	8009ef0 <memchr>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d038      	beq.n	8009b6e <_svfiprintf_r+0x1d6>
 8009afc:	4b23      	ldr	r3, [pc, #140]	; (8009b8c <_svfiprintf_r+0x1f4>)
 8009afe:	bb1b      	cbnz	r3, 8009b48 <_svfiprintf_r+0x1b0>
 8009b00:	9b03      	ldr	r3, [sp, #12]
 8009b02:	3307      	adds	r3, #7
 8009b04:	f023 0307 	bic.w	r3, r3, #7
 8009b08:	3308      	adds	r3, #8
 8009b0a:	9303      	str	r3, [sp, #12]
 8009b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0e:	4433      	add	r3, r6
 8009b10:	9309      	str	r3, [sp, #36]	; 0x24
 8009b12:	e768      	b.n	80099e6 <_svfiprintf_r+0x4e>
 8009b14:	460c      	mov	r4, r1
 8009b16:	2001      	movs	r0, #1
 8009b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b1c:	e7a6      	b.n	8009a6c <_svfiprintf_r+0xd4>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f04f 0c0a 	mov.w	ip, #10
 8009b24:	4619      	mov	r1, r3
 8009b26:	3401      	adds	r4, #1
 8009b28:	9305      	str	r3, [sp, #20]
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b30:	3a30      	subs	r2, #48	; 0x30
 8009b32:	2a09      	cmp	r2, #9
 8009b34:	d903      	bls.n	8009b3e <_svfiprintf_r+0x1a6>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d0c6      	beq.n	8009ac8 <_svfiprintf_r+0x130>
 8009b3a:	9105      	str	r1, [sp, #20]
 8009b3c:	e7c4      	b.n	8009ac8 <_svfiprintf_r+0x130>
 8009b3e:	4604      	mov	r4, r0
 8009b40:	2301      	movs	r3, #1
 8009b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b46:	e7f0      	b.n	8009b2a <_svfiprintf_r+0x192>
 8009b48:	ab03      	add	r3, sp, #12
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	462a      	mov	r2, r5
 8009b4e:	4638      	mov	r0, r7
 8009b50:	4b0f      	ldr	r3, [pc, #60]	; (8009b90 <_svfiprintf_r+0x1f8>)
 8009b52:	a904      	add	r1, sp, #16
 8009b54:	f3af 8000 	nop.w
 8009b58:	1c42      	adds	r2, r0, #1
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	d1d6      	bne.n	8009b0c <_svfiprintf_r+0x174>
 8009b5e:	89ab      	ldrh	r3, [r5, #12]
 8009b60:	065b      	lsls	r3, r3, #25
 8009b62:	f53f af2d 	bmi.w	80099c0 <_svfiprintf_r+0x28>
 8009b66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b68:	b01d      	add	sp, #116	; 0x74
 8009b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6e:	ab03      	add	r3, sp, #12
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	462a      	mov	r2, r5
 8009b74:	4638      	mov	r0, r7
 8009b76:	4b06      	ldr	r3, [pc, #24]	; (8009b90 <_svfiprintf_r+0x1f8>)
 8009b78:	a904      	add	r1, sp, #16
 8009b7a:	f000 f87d 	bl	8009c78 <_printf_i>
 8009b7e:	e7eb      	b.n	8009b58 <_svfiprintf_r+0x1c0>
 8009b80:	0800a59e 	.word	0x0800a59e
 8009b84:	0800a5a4 	.word	0x0800a5a4
 8009b88:	0800a5a8 	.word	0x0800a5a8
 8009b8c:	00000000 	.word	0x00000000
 8009b90:	080098e5 	.word	0x080098e5

08009b94 <_printf_common>:
 8009b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b98:	4616      	mov	r6, r2
 8009b9a:	4699      	mov	r9, r3
 8009b9c:	688a      	ldr	r2, [r1, #8]
 8009b9e:	690b      	ldr	r3, [r1, #16]
 8009ba0:	4607      	mov	r7, r0
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	bfb8      	it	lt
 8009ba6:	4613      	movlt	r3, r2
 8009ba8:	6033      	str	r3, [r6, #0]
 8009baa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bae:	460c      	mov	r4, r1
 8009bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bb4:	b10a      	cbz	r2, 8009bba <_printf_common+0x26>
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	6033      	str	r3, [r6, #0]
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	0699      	lsls	r1, r3, #26
 8009bbe:	bf42      	ittt	mi
 8009bc0:	6833      	ldrmi	r3, [r6, #0]
 8009bc2:	3302      	addmi	r3, #2
 8009bc4:	6033      	strmi	r3, [r6, #0]
 8009bc6:	6825      	ldr	r5, [r4, #0]
 8009bc8:	f015 0506 	ands.w	r5, r5, #6
 8009bcc:	d106      	bne.n	8009bdc <_printf_common+0x48>
 8009bce:	f104 0a19 	add.w	sl, r4, #25
 8009bd2:	68e3      	ldr	r3, [r4, #12]
 8009bd4:	6832      	ldr	r2, [r6, #0]
 8009bd6:	1a9b      	subs	r3, r3, r2
 8009bd8:	42ab      	cmp	r3, r5
 8009bda:	dc2b      	bgt.n	8009c34 <_printf_common+0xa0>
 8009bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009be0:	1e13      	subs	r3, r2, #0
 8009be2:	6822      	ldr	r2, [r4, #0]
 8009be4:	bf18      	it	ne
 8009be6:	2301      	movne	r3, #1
 8009be8:	0692      	lsls	r2, r2, #26
 8009bea:	d430      	bmi.n	8009c4e <_printf_common+0xba>
 8009bec:	4649      	mov	r1, r9
 8009bee:	4638      	mov	r0, r7
 8009bf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bf4:	47c0      	blx	r8
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	d023      	beq.n	8009c42 <_printf_common+0xae>
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	6922      	ldr	r2, [r4, #16]
 8009bfe:	f003 0306 	and.w	r3, r3, #6
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	bf14      	ite	ne
 8009c06:	2500      	movne	r5, #0
 8009c08:	6833      	ldreq	r3, [r6, #0]
 8009c0a:	f04f 0600 	mov.w	r6, #0
 8009c0e:	bf08      	it	eq
 8009c10:	68e5      	ldreq	r5, [r4, #12]
 8009c12:	f104 041a 	add.w	r4, r4, #26
 8009c16:	bf08      	it	eq
 8009c18:	1aed      	subeq	r5, r5, r3
 8009c1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009c1e:	bf08      	it	eq
 8009c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c24:	4293      	cmp	r3, r2
 8009c26:	bfc4      	itt	gt
 8009c28:	1a9b      	subgt	r3, r3, r2
 8009c2a:	18ed      	addgt	r5, r5, r3
 8009c2c:	42b5      	cmp	r5, r6
 8009c2e:	d11a      	bne.n	8009c66 <_printf_common+0xd2>
 8009c30:	2000      	movs	r0, #0
 8009c32:	e008      	b.n	8009c46 <_printf_common+0xb2>
 8009c34:	2301      	movs	r3, #1
 8009c36:	4652      	mov	r2, sl
 8009c38:	4649      	mov	r1, r9
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	47c0      	blx	r8
 8009c3e:	3001      	adds	r0, #1
 8009c40:	d103      	bne.n	8009c4a <_printf_common+0xb6>
 8009c42:	f04f 30ff 	mov.w	r0, #4294967295
 8009c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c4a:	3501      	adds	r5, #1
 8009c4c:	e7c1      	b.n	8009bd2 <_printf_common+0x3e>
 8009c4e:	2030      	movs	r0, #48	; 0x30
 8009c50:	18e1      	adds	r1, r4, r3
 8009c52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c5c:	4422      	add	r2, r4
 8009c5e:	3302      	adds	r3, #2
 8009c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c64:	e7c2      	b.n	8009bec <_printf_common+0x58>
 8009c66:	2301      	movs	r3, #1
 8009c68:	4622      	mov	r2, r4
 8009c6a:	4649      	mov	r1, r9
 8009c6c:	4638      	mov	r0, r7
 8009c6e:	47c0      	blx	r8
 8009c70:	3001      	adds	r0, #1
 8009c72:	d0e6      	beq.n	8009c42 <_printf_common+0xae>
 8009c74:	3601      	adds	r6, #1
 8009c76:	e7d9      	b.n	8009c2c <_printf_common+0x98>

08009c78 <_printf_i>:
 8009c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c7c:	7e0f      	ldrb	r7, [r1, #24]
 8009c7e:	4691      	mov	r9, r2
 8009c80:	2f78      	cmp	r7, #120	; 0x78
 8009c82:	4680      	mov	r8, r0
 8009c84:	460c      	mov	r4, r1
 8009c86:	469a      	mov	sl, r3
 8009c88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c8e:	d807      	bhi.n	8009ca0 <_printf_i+0x28>
 8009c90:	2f62      	cmp	r7, #98	; 0x62
 8009c92:	d80a      	bhi.n	8009caa <_printf_i+0x32>
 8009c94:	2f00      	cmp	r7, #0
 8009c96:	f000 80d5 	beq.w	8009e44 <_printf_i+0x1cc>
 8009c9a:	2f58      	cmp	r7, #88	; 0x58
 8009c9c:	f000 80c1 	beq.w	8009e22 <_printf_i+0x1aa>
 8009ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ca4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ca8:	e03a      	b.n	8009d20 <_printf_i+0xa8>
 8009caa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cae:	2b15      	cmp	r3, #21
 8009cb0:	d8f6      	bhi.n	8009ca0 <_printf_i+0x28>
 8009cb2:	a101      	add	r1, pc, #4	; (adr r1, 8009cb8 <_printf_i+0x40>)
 8009cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cb8:	08009d11 	.word	0x08009d11
 8009cbc:	08009d25 	.word	0x08009d25
 8009cc0:	08009ca1 	.word	0x08009ca1
 8009cc4:	08009ca1 	.word	0x08009ca1
 8009cc8:	08009ca1 	.word	0x08009ca1
 8009ccc:	08009ca1 	.word	0x08009ca1
 8009cd0:	08009d25 	.word	0x08009d25
 8009cd4:	08009ca1 	.word	0x08009ca1
 8009cd8:	08009ca1 	.word	0x08009ca1
 8009cdc:	08009ca1 	.word	0x08009ca1
 8009ce0:	08009ca1 	.word	0x08009ca1
 8009ce4:	08009e2b 	.word	0x08009e2b
 8009ce8:	08009d51 	.word	0x08009d51
 8009cec:	08009de5 	.word	0x08009de5
 8009cf0:	08009ca1 	.word	0x08009ca1
 8009cf4:	08009ca1 	.word	0x08009ca1
 8009cf8:	08009e4d 	.word	0x08009e4d
 8009cfc:	08009ca1 	.word	0x08009ca1
 8009d00:	08009d51 	.word	0x08009d51
 8009d04:	08009ca1 	.word	0x08009ca1
 8009d08:	08009ca1 	.word	0x08009ca1
 8009d0c:	08009ded 	.word	0x08009ded
 8009d10:	682b      	ldr	r3, [r5, #0]
 8009d12:	1d1a      	adds	r2, r3, #4
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	602a      	str	r2, [r5, #0]
 8009d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d20:	2301      	movs	r3, #1
 8009d22:	e0a0      	b.n	8009e66 <_printf_i+0x1ee>
 8009d24:	6820      	ldr	r0, [r4, #0]
 8009d26:	682b      	ldr	r3, [r5, #0]
 8009d28:	0607      	lsls	r7, r0, #24
 8009d2a:	f103 0104 	add.w	r1, r3, #4
 8009d2e:	6029      	str	r1, [r5, #0]
 8009d30:	d501      	bpl.n	8009d36 <_printf_i+0xbe>
 8009d32:	681e      	ldr	r6, [r3, #0]
 8009d34:	e003      	b.n	8009d3e <_printf_i+0xc6>
 8009d36:	0646      	lsls	r6, r0, #25
 8009d38:	d5fb      	bpl.n	8009d32 <_printf_i+0xba>
 8009d3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009d3e:	2e00      	cmp	r6, #0
 8009d40:	da03      	bge.n	8009d4a <_printf_i+0xd2>
 8009d42:	232d      	movs	r3, #45	; 0x2d
 8009d44:	4276      	negs	r6, r6
 8009d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d4a:	230a      	movs	r3, #10
 8009d4c:	4859      	ldr	r0, [pc, #356]	; (8009eb4 <_printf_i+0x23c>)
 8009d4e:	e012      	b.n	8009d76 <_printf_i+0xfe>
 8009d50:	682b      	ldr	r3, [r5, #0]
 8009d52:	6820      	ldr	r0, [r4, #0]
 8009d54:	1d19      	adds	r1, r3, #4
 8009d56:	6029      	str	r1, [r5, #0]
 8009d58:	0605      	lsls	r5, r0, #24
 8009d5a:	d501      	bpl.n	8009d60 <_printf_i+0xe8>
 8009d5c:	681e      	ldr	r6, [r3, #0]
 8009d5e:	e002      	b.n	8009d66 <_printf_i+0xee>
 8009d60:	0641      	lsls	r1, r0, #25
 8009d62:	d5fb      	bpl.n	8009d5c <_printf_i+0xe4>
 8009d64:	881e      	ldrh	r6, [r3, #0]
 8009d66:	2f6f      	cmp	r7, #111	; 0x6f
 8009d68:	bf0c      	ite	eq
 8009d6a:	2308      	moveq	r3, #8
 8009d6c:	230a      	movne	r3, #10
 8009d6e:	4851      	ldr	r0, [pc, #324]	; (8009eb4 <_printf_i+0x23c>)
 8009d70:	2100      	movs	r1, #0
 8009d72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d76:	6865      	ldr	r5, [r4, #4]
 8009d78:	2d00      	cmp	r5, #0
 8009d7a:	bfa8      	it	ge
 8009d7c:	6821      	ldrge	r1, [r4, #0]
 8009d7e:	60a5      	str	r5, [r4, #8]
 8009d80:	bfa4      	itt	ge
 8009d82:	f021 0104 	bicge.w	r1, r1, #4
 8009d86:	6021      	strge	r1, [r4, #0]
 8009d88:	b90e      	cbnz	r6, 8009d8e <_printf_i+0x116>
 8009d8a:	2d00      	cmp	r5, #0
 8009d8c:	d04b      	beq.n	8009e26 <_printf_i+0x1ae>
 8009d8e:	4615      	mov	r5, r2
 8009d90:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d94:	fb03 6711 	mls	r7, r3, r1, r6
 8009d98:	5dc7      	ldrb	r7, [r0, r7]
 8009d9a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d9e:	4637      	mov	r7, r6
 8009da0:	42bb      	cmp	r3, r7
 8009da2:	460e      	mov	r6, r1
 8009da4:	d9f4      	bls.n	8009d90 <_printf_i+0x118>
 8009da6:	2b08      	cmp	r3, #8
 8009da8:	d10b      	bne.n	8009dc2 <_printf_i+0x14a>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	07de      	lsls	r6, r3, #31
 8009dae:	d508      	bpl.n	8009dc2 <_printf_i+0x14a>
 8009db0:	6923      	ldr	r3, [r4, #16]
 8009db2:	6861      	ldr	r1, [r4, #4]
 8009db4:	4299      	cmp	r1, r3
 8009db6:	bfde      	ittt	le
 8009db8:	2330      	movle	r3, #48	; 0x30
 8009dba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dbe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009dc2:	1b52      	subs	r2, r2, r5
 8009dc4:	6122      	str	r2, [r4, #16]
 8009dc6:	464b      	mov	r3, r9
 8009dc8:	4621      	mov	r1, r4
 8009dca:	4640      	mov	r0, r8
 8009dcc:	f8cd a000 	str.w	sl, [sp]
 8009dd0:	aa03      	add	r2, sp, #12
 8009dd2:	f7ff fedf 	bl	8009b94 <_printf_common>
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	d14a      	bne.n	8009e70 <_printf_i+0x1f8>
 8009dda:	f04f 30ff 	mov.w	r0, #4294967295
 8009dde:	b004      	add	sp, #16
 8009de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de4:	6823      	ldr	r3, [r4, #0]
 8009de6:	f043 0320 	orr.w	r3, r3, #32
 8009dea:	6023      	str	r3, [r4, #0]
 8009dec:	2778      	movs	r7, #120	; 0x78
 8009dee:	4832      	ldr	r0, [pc, #200]	; (8009eb8 <_printf_i+0x240>)
 8009df0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009df4:	6823      	ldr	r3, [r4, #0]
 8009df6:	6829      	ldr	r1, [r5, #0]
 8009df8:	061f      	lsls	r7, r3, #24
 8009dfa:	f851 6b04 	ldr.w	r6, [r1], #4
 8009dfe:	d402      	bmi.n	8009e06 <_printf_i+0x18e>
 8009e00:	065f      	lsls	r7, r3, #25
 8009e02:	bf48      	it	mi
 8009e04:	b2b6      	uxthmi	r6, r6
 8009e06:	07df      	lsls	r7, r3, #31
 8009e08:	bf48      	it	mi
 8009e0a:	f043 0320 	orrmi.w	r3, r3, #32
 8009e0e:	6029      	str	r1, [r5, #0]
 8009e10:	bf48      	it	mi
 8009e12:	6023      	strmi	r3, [r4, #0]
 8009e14:	b91e      	cbnz	r6, 8009e1e <_printf_i+0x1a6>
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	f023 0320 	bic.w	r3, r3, #32
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	2310      	movs	r3, #16
 8009e20:	e7a6      	b.n	8009d70 <_printf_i+0xf8>
 8009e22:	4824      	ldr	r0, [pc, #144]	; (8009eb4 <_printf_i+0x23c>)
 8009e24:	e7e4      	b.n	8009df0 <_printf_i+0x178>
 8009e26:	4615      	mov	r5, r2
 8009e28:	e7bd      	b.n	8009da6 <_printf_i+0x12e>
 8009e2a:	682b      	ldr	r3, [r5, #0]
 8009e2c:	6826      	ldr	r6, [r4, #0]
 8009e2e:	1d18      	adds	r0, r3, #4
 8009e30:	6961      	ldr	r1, [r4, #20]
 8009e32:	6028      	str	r0, [r5, #0]
 8009e34:	0635      	lsls	r5, r6, #24
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	d501      	bpl.n	8009e3e <_printf_i+0x1c6>
 8009e3a:	6019      	str	r1, [r3, #0]
 8009e3c:	e002      	b.n	8009e44 <_printf_i+0x1cc>
 8009e3e:	0670      	lsls	r0, r6, #25
 8009e40:	d5fb      	bpl.n	8009e3a <_printf_i+0x1c2>
 8009e42:	8019      	strh	r1, [r3, #0]
 8009e44:	2300      	movs	r3, #0
 8009e46:	4615      	mov	r5, r2
 8009e48:	6123      	str	r3, [r4, #16]
 8009e4a:	e7bc      	b.n	8009dc6 <_printf_i+0x14e>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	2100      	movs	r1, #0
 8009e50:	1d1a      	adds	r2, r3, #4
 8009e52:	602a      	str	r2, [r5, #0]
 8009e54:	681d      	ldr	r5, [r3, #0]
 8009e56:	6862      	ldr	r2, [r4, #4]
 8009e58:	4628      	mov	r0, r5
 8009e5a:	f000 f849 	bl	8009ef0 <memchr>
 8009e5e:	b108      	cbz	r0, 8009e64 <_printf_i+0x1ec>
 8009e60:	1b40      	subs	r0, r0, r5
 8009e62:	6060      	str	r0, [r4, #4]
 8009e64:	6863      	ldr	r3, [r4, #4]
 8009e66:	6123      	str	r3, [r4, #16]
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e6e:	e7aa      	b.n	8009dc6 <_printf_i+0x14e>
 8009e70:	462a      	mov	r2, r5
 8009e72:	4649      	mov	r1, r9
 8009e74:	4640      	mov	r0, r8
 8009e76:	6923      	ldr	r3, [r4, #16]
 8009e78:	47d0      	blx	sl
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	d0ad      	beq.n	8009dda <_printf_i+0x162>
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	079b      	lsls	r3, r3, #30
 8009e82:	d413      	bmi.n	8009eac <_printf_i+0x234>
 8009e84:	68e0      	ldr	r0, [r4, #12]
 8009e86:	9b03      	ldr	r3, [sp, #12]
 8009e88:	4298      	cmp	r0, r3
 8009e8a:	bfb8      	it	lt
 8009e8c:	4618      	movlt	r0, r3
 8009e8e:	e7a6      	b.n	8009dde <_printf_i+0x166>
 8009e90:	2301      	movs	r3, #1
 8009e92:	4632      	mov	r2, r6
 8009e94:	4649      	mov	r1, r9
 8009e96:	4640      	mov	r0, r8
 8009e98:	47d0      	blx	sl
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	d09d      	beq.n	8009dda <_printf_i+0x162>
 8009e9e:	3501      	adds	r5, #1
 8009ea0:	68e3      	ldr	r3, [r4, #12]
 8009ea2:	9903      	ldr	r1, [sp, #12]
 8009ea4:	1a5b      	subs	r3, r3, r1
 8009ea6:	42ab      	cmp	r3, r5
 8009ea8:	dcf2      	bgt.n	8009e90 <_printf_i+0x218>
 8009eaa:	e7eb      	b.n	8009e84 <_printf_i+0x20c>
 8009eac:	2500      	movs	r5, #0
 8009eae:	f104 0619 	add.w	r6, r4, #25
 8009eb2:	e7f5      	b.n	8009ea0 <_printf_i+0x228>
 8009eb4:	0800a5af 	.word	0x0800a5af
 8009eb8:	0800a5c0 	.word	0x0800a5c0

08009ebc <memmove>:
 8009ebc:	4288      	cmp	r0, r1
 8009ebe:	b510      	push	{r4, lr}
 8009ec0:	eb01 0402 	add.w	r4, r1, r2
 8009ec4:	d902      	bls.n	8009ecc <memmove+0x10>
 8009ec6:	4284      	cmp	r4, r0
 8009ec8:	4623      	mov	r3, r4
 8009eca:	d807      	bhi.n	8009edc <memmove+0x20>
 8009ecc:	1e43      	subs	r3, r0, #1
 8009ece:	42a1      	cmp	r1, r4
 8009ed0:	d008      	beq.n	8009ee4 <memmove+0x28>
 8009ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009eda:	e7f8      	b.n	8009ece <memmove+0x12>
 8009edc:	4601      	mov	r1, r0
 8009ede:	4402      	add	r2, r0
 8009ee0:	428a      	cmp	r2, r1
 8009ee2:	d100      	bne.n	8009ee6 <memmove+0x2a>
 8009ee4:	bd10      	pop	{r4, pc}
 8009ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eee:	e7f7      	b.n	8009ee0 <memmove+0x24>

08009ef0 <memchr>:
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	b510      	push	{r4, lr}
 8009ef4:	b2c9      	uxtb	r1, r1
 8009ef6:	4402      	add	r2, r0
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	4618      	mov	r0, r3
 8009efc:	d101      	bne.n	8009f02 <memchr+0x12>
 8009efe:	2000      	movs	r0, #0
 8009f00:	e003      	b.n	8009f0a <memchr+0x1a>
 8009f02:	7804      	ldrb	r4, [r0, #0]
 8009f04:	3301      	adds	r3, #1
 8009f06:	428c      	cmp	r4, r1
 8009f08:	d1f6      	bne.n	8009ef8 <memchr+0x8>
 8009f0a:	bd10      	pop	{r4, pc}

08009f0c <_realloc_r>:
 8009f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f10:	4680      	mov	r8, r0
 8009f12:	4614      	mov	r4, r2
 8009f14:	460e      	mov	r6, r1
 8009f16:	b921      	cbnz	r1, 8009f22 <_realloc_r+0x16>
 8009f18:	4611      	mov	r1, r2
 8009f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1e:	f7ff bb13 	b.w	8009548 <_malloc_r>
 8009f22:	b92a      	cbnz	r2, 8009f30 <_realloc_r+0x24>
 8009f24:	f7ff fc96 	bl	8009854 <_free_r>
 8009f28:	4625      	mov	r5, r4
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f30:	f000 f81b 	bl	8009f6a <_malloc_usable_size_r>
 8009f34:	4284      	cmp	r4, r0
 8009f36:	4607      	mov	r7, r0
 8009f38:	d802      	bhi.n	8009f40 <_realloc_r+0x34>
 8009f3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f3e:	d812      	bhi.n	8009f66 <_realloc_r+0x5a>
 8009f40:	4621      	mov	r1, r4
 8009f42:	4640      	mov	r0, r8
 8009f44:	f7ff fb00 	bl	8009548 <_malloc_r>
 8009f48:	4605      	mov	r5, r0
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d0ed      	beq.n	8009f2a <_realloc_r+0x1e>
 8009f4e:	42bc      	cmp	r4, r7
 8009f50:	4622      	mov	r2, r4
 8009f52:	4631      	mov	r1, r6
 8009f54:	bf28      	it	cs
 8009f56:	463a      	movcs	r2, r7
 8009f58:	f7ff fc6e 	bl	8009838 <memcpy>
 8009f5c:	4631      	mov	r1, r6
 8009f5e:	4640      	mov	r0, r8
 8009f60:	f7ff fc78 	bl	8009854 <_free_r>
 8009f64:	e7e1      	b.n	8009f2a <_realloc_r+0x1e>
 8009f66:	4635      	mov	r5, r6
 8009f68:	e7df      	b.n	8009f2a <_realloc_r+0x1e>

08009f6a <_malloc_usable_size_r>:
 8009f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f6e:	1f18      	subs	r0, r3, #4
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	bfbc      	itt	lt
 8009f74:	580b      	ldrlt	r3, [r1, r0]
 8009f76:	18c0      	addlt	r0, r0, r3
 8009f78:	4770      	bx	lr
	...

08009f7c <_init>:
 8009f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7e:	bf00      	nop
 8009f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f82:	bc08      	pop	{r3}
 8009f84:	469e      	mov	lr, r3
 8009f86:	4770      	bx	lr

08009f88 <_fini>:
 8009f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f8a:	bf00      	nop
 8009f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f8e:	bc08      	pop	{r3}
 8009f90:	469e      	mov	lr, r3
 8009f92:	4770      	bx	lr
