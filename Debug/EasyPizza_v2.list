
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080066b8  080066b8  000166b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006768  08006768  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006768  08006768  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006768  08006768  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006768  08006768  00016768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800676c  0800676c  0001676c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016e8  20000060  080067d0  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001748  080067d0  00021748  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150b7  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035ff  00000000  00000000  00035183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  00038788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f46  00000000  00000000  00039b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aabd  00000000  00000000  0003aa7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018174  00000000  00000000  0005553b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009831e  00000000  00000000  0006d6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056b4  00000000  00000000  001059d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0010b084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080066a0 	.word	0x080066a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080066a0 	.word	0x080066a0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_frsub>:
 8000a3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a40:	e002      	b.n	8000a48 <__addsf3>
 8000a42:	bf00      	nop

08000a44 <__aeabi_fsub>:
 8000a44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a48 <__addsf3>:
 8000a48:	0042      	lsls	r2, r0, #1
 8000a4a:	bf1f      	itttt	ne
 8000a4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a50:	ea92 0f03 	teqne	r2, r3
 8000a54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a5c:	d06a      	beq.n	8000b34 <__addsf3+0xec>
 8000a5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a66:	bfc1      	itttt	gt
 8000a68:	18d2      	addgt	r2, r2, r3
 8000a6a:	4041      	eorgt	r1, r0
 8000a6c:	4048      	eorgt	r0, r1
 8000a6e:	4041      	eorgt	r1, r0
 8000a70:	bfb8      	it	lt
 8000a72:	425b      	neglt	r3, r3
 8000a74:	2b19      	cmp	r3, #25
 8000a76:	bf88      	it	hi
 8000a78:	4770      	bxhi	lr
 8000a7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a96:	bf18      	it	ne
 8000a98:	4249      	negne	r1, r1
 8000a9a:	ea92 0f03 	teq	r2, r3
 8000a9e:	d03f      	beq.n	8000b20 <__addsf3+0xd8>
 8000aa0:	f1a2 0201 	sub.w	r2, r2, #1
 8000aa4:	fa41 fc03 	asr.w	ip, r1, r3
 8000aa8:	eb10 000c 	adds.w	r0, r0, ip
 8000aac:	f1c3 0320 	rsb	r3, r3, #32
 8000ab0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ab4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ab8:	d502      	bpl.n	8000ac0 <__addsf3+0x78>
 8000aba:	4249      	negs	r1, r1
 8000abc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ac0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ac4:	d313      	bcc.n	8000aee <__addsf3+0xa6>
 8000ac6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aca:	d306      	bcc.n	8000ada <__addsf3+0x92>
 8000acc:	0840      	lsrs	r0, r0, #1
 8000ace:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ad2:	f102 0201 	add.w	r2, r2, #1
 8000ad6:	2afe      	cmp	r2, #254	; 0xfe
 8000ad8:	d251      	bcs.n	8000b7e <__addsf3+0x136>
 8000ada:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ade:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ae2:	bf08      	it	eq
 8000ae4:	f020 0001 	biceq.w	r0, r0, #1
 8000ae8:	ea40 0003 	orr.w	r0, r0, r3
 8000aec:	4770      	bx	lr
 8000aee:	0049      	lsls	r1, r1, #1
 8000af0:	eb40 0000 	adc.w	r0, r0, r0
 8000af4:	3a01      	subs	r2, #1
 8000af6:	bf28      	it	cs
 8000af8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000afc:	d2ed      	bcs.n	8000ada <__addsf3+0x92>
 8000afe:	fab0 fc80 	clz	ip, r0
 8000b02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b06:	ebb2 020c 	subs.w	r2, r2, ip
 8000b0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b0e:	bfaa      	itet	ge
 8000b10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b14:	4252      	neglt	r2, r2
 8000b16:	4318      	orrge	r0, r3
 8000b18:	bfbc      	itt	lt
 8000b1a:	40d0      	lsrlt	r0, r2
 8000b1c:	4318      	orrlt	r0, r3
 8000b1e:	4770      	bx	lr
 8000b20:	f092 0f00 	teq	r2, #0
 8000b24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b28:	bf06      	itte	eq
 8000b2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b2e:	3201      	addeq	r2, #1
 8000b30:	3b01      	subne	r3, #1
 8000b32:	e7b5      	b.n	8000aa0 <__addsf3+0x58>
 8000b34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b3c:	bf18      	it	ne
 8000b3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b42:	d021      	beq.n	8000b88 <__addsf3+0x140>
 8000b44:	ea92 0f03 	teq	r2, r3
 8000b48:	d004      	beq.n	8000b54 <__addsf3+0x10c>
 8000b4a:	f092 0f00 	teq	r2, #0
 8000b4e:	bf08      	it	eq
 8000b50:	4608      	moveq	r0, r1
 8000b52:	4770      	bx	lr
 8000b54:	ea90 0f01 	teq	r0, r1
 8000b58:	bf1c      	itt	ne
 8000b5a:	2000      	movne	r0, #0
 8000b5c:	4770      	bxne	lr
 8000b5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b62:	d104      	bne.n	8000b6e <__addsf3+0x126>
 8000b64:	0040      	lsls	r0, r0, #1
 8000b66:	bf28      	it	cs
 8000b68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	4770      	bx	lr
 8000b6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b72:	bf3c      	itt	cc
 8000b74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bxcc	lr
 8000b7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b86:	4770      	bx	lr
 8000b88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b8c:	bf16      	itet	ne
 8000b8e:	4608      	movne	r0, r1
 8000b90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b94:	4601      	movne	r1, r0
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	bf06      	itte	eq
 8000b9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b9e:	ea90 0f01 	teqeq	r0, r1
 8000ba2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_ui2f>:
 8000ba8:	f04f 0300 	mov.w	r3, #0
 8000bac:	e004      	b.n	8000bb8 <__aeabi_i2f+0x8>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_i2f>:
 8000bb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bb4:	bf48      	it	mi
 8000bb6:	4240      	negmi	r0, r0
 8000bb8:	ea5f 0c00 	movs.w	ip, r0
 8000bbc:	bf08      	it	eq
 8000bbe:	4770      	bxeq	lr
 8000bc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bc4:	4601      	mov	r1, r0
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	e01c      	b.n	8000c06 <__aeabi_l2f+0x2a>

08000bcc <__aeabi_ul2f>:
 8000bcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd0:	bf08      	it	eq
 8000bd2:	4770      	bxeq	lr
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	e00a      	b.n	8000bf0 <__aeabi_l2f+0x14>
 8000bda:	bf00      	nop

08000bdc <__aeabi_l2f>:
 8000bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000be8:	d502      	bpl.n	8000bf0 <__aeabi_l2f+0x14>
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	ea5f 0c01 	movs.w	ip, r1
 8000bf4:	bf02      	ittt	eq
 8000bf6:	4684      	moveq	ip, r0
 8000bf8:	4601      	moveq	r1, r0
 8000bfa:	2000      	moveq	r0, #0
 8000bfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c00:	bf08      	it	eq
 8000c02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c0a:	fabc f28c 	clz	r2, ip
 8000c0e:	3a08      	subs	r2, #8
 8000c10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c14:	db10      	blt.n	8000c38 <__aeabi_l2f+0x5c>
 8000c16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c20:	f1c2 0220 	rsb	r2, r2, #32
 8000c24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c28:	fa20 f202 	lsr.w	r2, r0, r2
 8000c2c:	eb43 0002 	adc.w	r0, r3, r2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f102 0220 	add.w	r2, r2, #32
 8000c3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c40:	f1c2 0220 	rsb	r2, r2, #32
 8000c44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c48:	fa21 f202 	lsr.w	r2, r1, r2
 8000c4c:	eb43 0002 	adc.w	r0, r3, r2
 8000c50:	bf08      	it	eq
 8000c52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_fmul>:
 8000c58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c60:	bf1e      	ittt	ne
 8000c62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c66:	ea92 0f0c 	teqne	r2, ip
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d06f      	beq.n	8000d50 <__aeabi_fmul+0xf8>
 8000c70:	441a      	add	r2, r3
 8000c72:	ea80 0c01 	eor.w	ip, r0, r1
 8000c76:	0240      	lsls	r0, r0, #9
 8000c78:	bf18      	it	ne
 8000c7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c7e:	d01e      	beq.n	8000cbe <__aeabi_fmul+0x66>
 8000c80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c98:	bf3e      	ittt	cc
 8000c9a:	0049      	lslcc	r1, r1, #1
 8000c9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ca0:	005b      	lslcc	r3, r3, #1
 8000ca2:	ea40 0001 	orr.w	r0, r0, r1
 8000ca6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000caa:	2afd      	cmp	r2, #253	; 0xfd
 8000cac:	d81d      	bhi.n	8000cea <__aeabi_fmul+0x92>
 8000cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cb6:	bf08      	it	eq
 8000cb8:	f020 0001 	biceq.w	r0, r0, #1
 8000cbc:	4770      	bx	lr
 8000cbe:	f090 0f00 	teq	r0, #0
 8000cc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cc6:	bf08      	it	eq
 8000cc8:	0249      	lsleq	r1, r1, #9
 8000cca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cd2:	3a7f      	subs	r2, #127	; 0x7f
 8000cd4:	bfc2      	ittt	gt
 8000cd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cde:	4770      	bxgt	lr
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	dc5d      	bgt.n	8000da8 <__aeabi_fmul+0x150>
 8000cec:	f112 0f19 	cmn.w	r2, #25
 8000cf0:	bfdc      	itt	le
 8000cf2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cf6:	4770      	bxle	lr
 8000cf8:	f1c2 0200 	rsb	r2, r2, #0
 8000cfc:	0041      	lsls	r1, r0, #1
 8000cfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000d02:	f1c2 0220 	rsb	r2, r2, #32
 8000d06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d0e:	f140 0000 	adc.w	r0, r0, #0
 8000d12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d16:	bf08      	it	eq
 8000d18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d1c:	4770      	bx	lr
 8000d1e:	f092 0f00 	teq	r2, #0
 8000d22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d26:	bf02      	ittt	eq
 8000d28:	0040      	lsleq	r0, r0, #1
 8000d2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d2e:	3a01      	subeq	r2, #1
 8000d30:	d0f9      	beq.n	8000d26 <__aeabi_fmul+0xce>
 8000d32:	ea40 000c 	orr.w	r0, r0, ip
 8000d36:	f093 0f00 	teq	r3, #0
 8000d3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d3e:	bf02      	ittt	eq
 8000d40:	0049      	lsleq	r1, r1, #1
 8000d42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d46:	3b01      	subeq	r3, #1
 8000d48:	d0f9      	beq.n	8000d3e <__aeabi_fmul+0xe6>
 8000d4a:	ea41 010c 	orr.w	r1, r1, ip
 8000d4e:	e78f      	b.n	8000c70 <__aeabi_fmul+0x18>
 8000d50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d54:	ea92 0f0c 	teq	r2, ip
 8000d58:	bf18      	it	ne
 8000d5a:	ea93 0f0c 	teqne	r3, ip
 8000d5e:	d00a      	beq.n	8000d76 <__aeabi_fmul+0x11e>
 8000d60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d64:	bf18      	it	ne
 8000d66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d6a:	d1d8      	bne.n	8000d1e <__aeabi_fmul+0xc6>
 8000d6c:	ea80 0001 	eor.w	r0, r0, r1
 8000d70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d74:	4770      	bx	lr
 8000d76:	f090 0f00 	teq	r0, #0
 8000d7a:	bf17      	itett	ne
 8000d7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d80:	4608      	moveq	r0, r1
 8000d82:	f091 0f00 	teqne	r1, #0
 8000d86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d8a:	d014      	beq.n	8000db6 <__aeabi_fmul+0x15e>
 8000d8c:	ea92 0f0c 	teq	r2, ip
 8000d90:	d101      	bne.n	8000d96 <__aeabi_fmul+0x13e>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d10f      	bne.n	8000db6 <__aeabi_fmul+0x15e>
 8000d96:	ea93 0f0c 	teq	r3, ip
 8000d9a:	d103      	bne.n	8000da4 <__aeabi_fmul+0x14c>
 8000d9c:	024b      	lsls	r3, r1, #9
 8000d9e:	bf18      	it	ne
 8000da0:	4608      	movne	r0, r1
 8000da2:	d108      	bne.n	8000db6 <__aeabi_fmul+0x15e>
 8000da4:	ea80 0001 	eor.w	r0, r0, r1
 8000da8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000db0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db4:	4770      	bx	lr
 8000db6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_fdiv>:
 8000dc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc8:	bf1e      	ittt	ne
 8000dca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dce:	ea92 0f0c 	teqne	r2, ip
 8000dd2:	ea93 0f0c 	teqne	r3, ip
 8000dd6:	d069      	beq.n	8000eac <__aeabi_fdiv+0xec>
 8000dd8:	eba2 0203 	sub.w	r2, r2, r3
 8000ddc:	ea80 0c01 	eor.w	ip, r0, r1
 8000de0:	0249      	lsls	r1, r1, #9
 8000de2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000de6:	d037      	beq.n	8000e58 <__aeabi_fdiv+0x98>
 8000de8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000df0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	bf38      	it	cc
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e06:	428b      	cmp	r3, r1
 8000e08:	bf24      	itt	cs
 8000e0a:	1a5b      	subcs	r3, r3, r1
 8000e0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e14:	bf24      	itt	cs
 8000e16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e22:	bf24      	itt	cs
 8000e24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e30:	bf24      	itt	cs
 8000e32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e42:	d1e0      	bne.n	8000e06 <__aeabi_fdiv+0x46>
 8000e44:	2afd      	cmp	r2, #253	; 0xfd
 8000e46:	f63f af50 	bhi.w	8000cea <__aeabi_fmul+0x92>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e60:	327f      	adds	r2, #127	; 0x7f
 8000e62:	bfc2      	ittt	gt
 8000e64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e6c:	4770      	bxgt	lr
 8000e6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	3a01      	subs	r2, #1
 8000e78:	e737      	b.n	8000cea <__aeabi_fmul+0x92>
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fdiv+0xc2>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fdiv+0xda>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e795      	b.n	8000dd8 <__aeabi_fdiv+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d108      	bne.n	8000ec8 <__aeabi_fdiv+0x108>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	f47f af7d 	bne.w	8000db6 <__aeabi_fmul+0x15e>
 8000ebc:	ea93 0f0c 	teq	r3, ip
 8000ec0:	f47f af70 	bne.w	8000da4 <__aeabi_fmul+0x14c>
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	e776      	b.n	8000db6 <__aeabi_fmul+0x15e>
 8000ec8:	ea93 0f0c 	teq	r3, ip
 8000ecc:	d104      	bne.n	8000ed8 <__aeabi_fdiv+0x118>
 8000ece:	024b      	lsls	r3, r1, #9
 8000ed0:	f43f af4c 	beq.w	8000d6c <__aeabi_fmul+0x114>
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e76e      	b.n	8000db6 <__aeabi_fmul+0x15e>
 8000ed8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000edc:	bf18      	it	ne
 8000ede:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ee2:	d1ca      	bne.n	8000e7a <__aeabi_fdiv+0xba>
 8000ee4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ee8:	f47f af5c 	bne.w	8000da4 <__aeabi_fmul+0x14c>
 8000eec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ef0:	f47f af3c 	bne.w	8000d6c <__aeabi_fmul+0x114>
 8000ef4:	e75f      	b.n	8000db6 <__aeabi_fmul+0x15e>
 8000ef6:	bf00      	nop

08000ef8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <vApplicationGetIdleTaskMemory+0x28>)
 8000f08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	2000007c 	.word	0x2000007c
 8000f24:	2000011c 	.word	0x2000011c

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b096      	sub	sp, #88	; 0x58
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2e:	f001 f9c1 	bl	80022b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f32:	f000 f865 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f36:	f000 fa43 	bl	80013c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f3a:	f000 fa23 	bl	8001384 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f3e:	f000 f8b5 	bl	80010ac <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f42:	f000 f901 	bl	8001148 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f46:	f000 f985 	bl	8001254 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f4a:	f000 f92b 	bl	80011a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 2);// ADC_DMA
 8000f4e:	2202      	movs	r2, #2
 8000f50:	4922      	ldr	r1, [pc, #136]	; (8000fdc <main+0xb4>)
 8000f52:	4823      	ldr	r0, [pc, #140]	; (8000fe0 <main+0xb8>)
 8000f54:	f001 fadc 	bl	8002510 <HAL_ADC_Start_DMA>

  	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_3);
 8000f58:	2108      	movs	r1, #8
 8000f5a:	4822      	ldr	r0, [pc, #136]	; (8000fe4 <main+0xbc>)
 8000f5c:	f003 f958 	bl	8004210 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_4);
 8000f60:	210c      	movs	r1, #12
 8000f62:	4820      	ldr	r0, [pc, #128]	; (8000fe4 <main+0xbc>)
 8000f64:	f003 f954 	bl	8004210 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <main+0xc0>)
 8000f6a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000f6e:	461d      	mov	r5, r3
 8000f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 f832 	bl	8004fec <osThreadCreate>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a18      	ldr	r2, [pc, #96]	; (8000fec <main+0xc4>)
 8000f8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTemperatura */
  osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <main+0xc8>)
 8000f90:	f107 0420 	add.w	r4, r7, #32
 8000f94:	461d      	mov	r5, r3
 8000f96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f004 f81f 	bl	8004fec <osThreadCreate>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <main+0xcc>)
 8000fb2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskBuzzer */
  osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <main+0xd0>)
 8000fb6:	1d3c      	adds	r4, r7, #4
 8000fb8:	461d      	mov	r5, r3
 8000fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f004 f80e 	bl	8004fec <osThreadCreate>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <main+0xd4>)
 8000fd4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fd6:	f004 f802 	bl	8004fde <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <main+0xb2>
 8000fdc:	20000720 	.word	0x20000720
 8000fe0:	2000031c 	.word	0x2000031c
 8000fe4:	2000042c 	.word	0x2000042c
 8000fe8:	080066c4 	.word	0x080066c4
 8000fec:	20000474 	.word	0x20000474
 8000ff0:	080066f0 	.word	0x080066f0
 8000ff4:	20000478 	.word	0x20000478
 8000ff8:	08006718 	.word	0x08006718
 8000ffc:	2000047c 	.word	0x2000047c

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	; 0x50
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100a:	2228      	movs	r2, #40	; 0x28
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f005 fa6e 	bl	80064f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001030:	2302      	movs	r3, #2
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001034:	2301      	movs	r3, #1
 8001036:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001038:	2310      	movs	r3, #16
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	2302      	movs	r3, #2
 800103e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001040:	2300      	movs	r3, #0
 8001042:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001044:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001048:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800104e:	4618      	mov	r0, r3
 8001050:	f002 faf6 	bl	8003640 <HAL_RCC_OscConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800105a:	f000 faa3 	bl	80015a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105e:	230f      	movs	r3, #15
 8001060:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001062:	2302      	movs	r3, #2
 8001064:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	2101      	movs	r1, #1
 8001078:	4618      	mov	r0, r3
 800107a:	f002 fd63 	bl	8003b44 <HAL_RCC_ClockConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001084:	f000 fa8e 	bl	80015a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001088:	2302      	movs	r3, #2
 800108a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800108c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001090:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	4618      	mov	r0, r3
 8001096:	f002 ff13 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010a0:	f000 fa80 	bl	80015a4 <Error_Handler>
  }
}
 80010a4:	bf00      	nop
 80010a6:	3750      	adds	r7, #80	; 0x50
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <MX_ADC1_Init+0x94>)
 80010be:	4a21      	ldr	r2, [pc, #132]	; (8001144 <MX_ADC1_Init+0x98>)
 80010c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <MX_ADC1_Init+0x94>)
 80010c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_ADC1_Init+0x94>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_ADC1_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_ADC1_Init+0x94>)
 80010d8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_ADC1_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_ADC1_Init+0x94>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ea:	4815      	ldr	r0, [pc, #84]	; (8001140 <MX_ADC1_Init+0x94>)
 80010ec:	f001 f938 	bl	8002360 <HAL_ADC_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80010f6:	f000 fa55 	bl	80015a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010fe:	2301      	movs	r3, #1
 8001100:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001102:	2307      	movs	r3, #7
 8001104:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_ADC1_Init+0x94>)
 800110c:	f001 faf0 	bl	80026f0 <HAL_ADC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001116:	f000 fa45 	bl	80015a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800111a:	2301      	movs	r3, #1
 800111c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800111e:	2302      	movs	r3, #2
 8001120:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_ADC1_Init+0x94>)
 8001128:	f001 fae2 	bl	80026f0 <HAL_ADC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001132:	f000 fa37 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000031c 	.word	0x2000031c
 8001144:	40012400 	.word	0x40012400

08001148 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_I2C1_Init+0x50>)
 800114e:	4a13      	ldr	r2, [pc, #76]	; (800119c <MX_I2C1_Init+0x54>)
 8001150:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_I2C1_Init+0x50>)
 8001154:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <MX_I2C1_Init+0x58>)
 8001156:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_I2C1_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_I2C1_Init+0x50>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_I2C1_Init+0x50>)
 8001166:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800116a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <MX_I2C1_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_I2C1_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_I2C1_Init+0x50>)
 8001186:	f002 f917 	bl	80033b8 <HAL_I2C_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001190:	f000 fa08 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000390 	.word	0x20000390
 800119c:	40005400 	.word	0x40005400
 80011a0:	000186a0 	.word	0x000186a0

080011a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011aa:	f107 0320 	add.w	r3, r7, #32
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]
 80011c2:	615a      	str	r2, [r3, #20]
 80011c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c6:	4b22      	ldr	r3, [pc, #136]	; (8001250 <MX_TIM2_Init+0xac>)
 80011c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1800-1;
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <MX_TIM2_Init+0xac>)
 80011d0:	f240 7207 	movw	r2, #1799	; 0x707
 80011d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <MX_TIM2_Init+0xac>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_TIM2_Init+0xac>)
 80011de:	2263      	movs	r2, #99	; 0x63
 80011e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_TIM2_Init+0xac>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_TIM2_Init+0xac>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011ee:	4818      	ldr	r0, [pc, #96]	; (8001250 <MX_TIM2_Init+0xac>)
 80011f0:	f002 ffbe 	bl	8004170 <HAL_TIM_PWM_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011fa:	f000 f9d3 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	4619      	mov	r1, r3
 800120c:	4810      	ldr	r0, [pc, #64]	; (8001250 <MX_TIM2_Init+0xac>)
 800120e:	f003 fe5f 	bl	8004ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001218:	f000 f9c4 	bl	80015a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121c:	2360      	movs	r3, #96	; 0x60
 800121e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	220c      	movs	r2, #12
 8001230:	4619      	mov	r1, r3
 8001232:	4807      	ldr	r0, [pc, #28]	; (8001250 <MX_TIM2_Init+0xac>)
 8001234:	f003 f9fa 	bl	800462c <HAL_TIM_PWM_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800123e:	f000 f9b1 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <MX_TIM2_Init+0xac>)
 8001244:	f000 fdfe 	bl	8001e44 <HAL_TIM_MspPostInit>

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200003e4 	.word	0x200003e4

08001254 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	; 0x38
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	f107 0320 	add.w	r3, r7, #32
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	615a      	str	r2, [r3, #20]
 8001282:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001284:	4b3d      	ldr	r3, [pc, #244]	; (800137c <MX_TIM3_Init+0x128>)
 8001286:	4a3e      	ldr	r2, [pc, #248]	; (8001380 <MX_TIM3_Init+0x12c>)
 8001288:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3600-1;
 800128a:	4b3c      	ldr	r3, [pc, #240]	; (800137c <MX_TIM3_Init+0x128>)
 800128c:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001290:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b3a      	ldr	r3, [pc, #232]	; (800137c <MX_TIM3_Init+0x128>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001298:	4b38      	ldr	r3, [pc, #224]	; (800137c <MX_TIM3_Init+0x128>)
 800129a:	2263      	movs	r2, #99	; 0x63
 800129c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b37      	ldr	r3, [pc, #220]	; (800137c <MX_TIM3_Init+0x128>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b35      	ldr	r3, [pc, #212]	; (800137c <MX_TIM3_Init+0x128>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012aa:	4834      	ldr	r0, [pc, #208]	; (800137c <MX_TIM3_Init+0x128>)
 80012ac:	f002 febe 	bl	800402c <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012b6:	f000 f975 	bl	80015a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c4:	4619      	mov	r1, r3
 80012c6:	482d      	ldr	r0, [pc, #180]	; (800137c <MX_TIM3_Init+0x128>)
 80012c8:	f003 fa72 	bl	80047b0 <HAL_TIM_ConfigClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012d2:	f000 f967 	bl	80015a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012d6:	4829      	ldr	r0, [pc, #164]	; (800137c <MX_TIM3_Init+0x128>)
 80012d8:	f002 ff4a 	bl	8004170 <HAL_TIM_PWM_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012e2:	f000 f95f 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	4619      	mov	r1, r3
 80012f4:	4821      	ldr	r0, [pc, #132]	; (800137c <MX_TIM3_Init+0x128>)
 80012f6:	f003 fdeb 	bl	8004ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001300:	f000 f950 	bl	80015a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001304:	2360      	movs	r3, #96	; 0x60
 8001306:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001310:	2304      	movs	r3, #4
 8001312:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	4619      	mov	r1, r3
 800131a:	4818      	ldr	r0, [pc, #96]	; (800137c <MX_TIM3_Init+0x128>)
 800131c:	f003 f986 	bl	800462c <HAL_TIM_PWM_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001326:	f000 f93d 	bl	80015a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2204      	movs	r2, #4
 800132e:	4619      	mov	r1, r3
 8001330:	4812      	ldr	r0, [pc, #72]	; (800137c <MX_TIM3_Init+0x128>)
 8001332:	f003 f97b 	bl	800462c <HAL_TIM_PWM_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800133c:	f000 f932 	bl	80015a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2208      	movs	r2, #8
 8001344:	4619      	mov	r1, r3
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <MX_TIM3_Init+0x128>)
 8001348:	f003 f970 	bl	800462c <HAL_TIM_PWM_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001352:	f000 f927 	bl	80015a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	220c      	movs	r2, #12
 800135a:	4619      	mov	r1, r3
 800135c:	4807      	ldr	r0, [pc, #28]	; (800137c <MX_TIM3_Init+0x128>)
 800135e:	f003 f965 	bl	800462c <HAL_TIM_PWM_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001368:	f000 f91c 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800136c:	4803      	ldr	r0, [pc, #12]	; (800137c <MX_TIM3_Init+0x128>)
 800136e:	f000 fd69 	bl	8001e44 <HAL_TIM_MspPostInit>

}
 8001372:	bf00      	nop
 8001374:	3738      	adds	r7, #56	; 0x38
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000042c 	.word	0x2000042c
 8001380:	40000400 	.word	0x40000400

08001384 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_DMA_Init+0x38>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <MX_DMA_Init+0x38>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6153      	str	r3, [r2, #20]
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_DMA_Init+0x38>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2105      	movs	r1, #5
 80013a6:	200b      	movs	r0, #11
 80013a8:	f001 fc51 	bl	8002c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013ac:	200b      	movs	r0, #11
 80013ae:	f001 fc6a 	bl	8002c86 <HAL_NVIC_EnableIRQ>

}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000

080013c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <MX_GPIO_Init+0x9c>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a20      	ldr	r2, [pc, #128]	; (800145c <MX_GPIO_Init+0x9c>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <MX_GPIO_Init+0x9c>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_GPIO_Init+0x9c>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a1a      	ldr	r2, [pc, #104]	; (800145c <MX_GPIO_Init+0x9c>)
 80013f2:	f043 0308 	orr.w	r3, r3, #8
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_GPIO_Init+0x9c>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800140a:	4815      	ldr	r0, [pc, #84]	; (8001460 <MX_GPIO_Init+0xa0>)
 800140c:	f001 ffbc 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	2178      	movs	r1, #120	; 0x78
 8001414:	4813      	ldr	r0, [pc, #76]	; (8001464 <MX_GPIO_Init+0xa4>)
 8001416:	f001 ffb7 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RELE_1_Pin */
  GPIO_InitStruct.Pin = RELE_1_Pin;
 800141a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800141e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2302      	movs	r3, #2
 800142a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	4619      	mov	r1, r3
 8001432:	480b      	ldr	r0, [pc, #44]	; (8001460 <MX_GPIO_Init+0xa0>)
 8001434:	f001 fe24 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELE_2_Pin RELE_3_Pin RELE_4_Pin RELE_5_Pin */
  GPIO_InitStruct.Pin = RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin;
 8001438:	2378      	movs	r3, #120	; 0x78
 800143a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2302      	movs	r3, #2
 8001446:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	4619      	mov	r1, r3
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_GPIO_Init+0xa4>)
 8001450:	f001 fe16 	bl	8003080 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40021000 	.word	0x40021000
 8001460:	40010800 	.word	0x40010800
 8001464:	40010c00 	.word	0x40010c00

08001468 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	float 	Temp1,Temp2;
	double TempTeto, TempLastro;
	static long somatorio1,somatorio2;
	static uint16_t i = 0;

	if(i<TAM){
 8001470:	4b38      	ldr	r3, [pc, #224]	; (8001554 <HAL_ADC_ConvCpltCallback+0xec>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001478:	d216      	bcs.n	80014a8 <HAL_ADC_ConvCpltCallback+0x40>
		somatorio1+=buffer_ADC[1]; // somatorio
 800147a:	4b37      	ldr	r3, [pc, #220]	; (8001558 <HAL_ADC_ConvCpltCallback+0xf0>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4a37      	ldr	r2, [pc, #220]	; (800155c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	4413      	add	r3, r2
 8001484:	461a      	mov	r2, r3
 8001486:	4b35      	ldr	r3, [pc, #212]	; (800155c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001488:	601a      	str	r2, [r3, #0]
		somatorio2+=buffer_ADC[0]; // somatorio
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <HAL_ADC_ConvCpltCallback+0xf0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a34      	ldr	r2, [pc, #208]	; (8001560 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	4413      	add	r3, r2
 8001494:	461a      	mov	r2, r3
 8001496:	4b32      	ldr	r3, [pc, #200]	; (8001560 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001498:	601a      	str	r2, [r3, #0]
		i++;
 800149a:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <HAL_ADC_ConvCpltCallback+0xec>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <HAL_ADC_ConvCpltCallback+0xec>)
 80014a4:	801a      	strh	r2, [r3, #0]
//	// Handles the IRQ of ADC1. EOC flag is cleared by reading data register
//	static uint32_t temp = 0;
//	temp = ADC1->DR;
//	TempInterna = (temp-V25)/(AVG_SLOPE)+25;

}
 80014a6:	e050      	b.n	800154a <HAL_ADC_ConvCpltCallback+0xe2>
		somatorio1 = somatorio1 / TAM; //calc media
 80014a8:	4b2c      	ldr	r3, [pc, #176]	; (800155c <HAL_ADC_ConvCpltCallback+0xf4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a2d      	ldr	r2, [pc, #180]	; (8001564 <HAL_ADC_ConvCpltCallback+0xfc>)
 80014ae:	fb82 1203 	smull	r1, r2, r2, r3
 80014b2:	1152      	asrs	r2, r2, #5
 80014b4:	17db      	asrs	r3, r3, #31
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	4a28      	ldr	r2, [pc, #160]	; (800155c <HAL_ADC_ConvCpltCallback+0xf4>)
 80014ba:	6013      	str	r3, [r2, #0]
		somatorio2 = somatorio2 / TAM; //calc media
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a28      	ldr	r2, [pc, #160]	; (8001564 <HAL_ADC_ConvCpltCallback+0xfc>)
 80014c2:	fb82 1203 	smull	r1, r2, r2, r3
 80014c6:	1152      	asrs	r2, r2, #5
 80014c8:	17db      	asrs	r3, r3, #31
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	4a24      	ldr	r2, [pc, #144]	; (8001560 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014ce:	6013      	str	r3, [r2, #0]
		Temp1 = somatorio1*16; //calc valor final
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_ADC_ConvCpltCallback+0xf4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fb6a 	bl	8000bb0 <__aeabi_i2f>
 80014dc:	4603      	mov	r3, r0
 80014de:	61fb      	str	r3, [r7, #28]
		Temp1 = Temp1/100;
 80014e0:	4921      	ldr	r1, [pc, #132]	; (8001568 <HAL_ADC_ConvCpltCallback+0x100>)
 80014e2:	69f8      	ldr	r0, [r7, #28]
 80014e4:	f7ff fc6c 	bl	8000dc0 <__aeabi_fdiv>
 80014e8:	4603      	mov	r3, r0
 80014ea:	61fb      	str	r3, [r7, #28]
		somatorio1 = 0; 		//zera somatorio
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_ADC_ConvCpltCallback+0xf4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
		Temp2 = somatorio2*16; 	//calc valor final
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fb59 	bl	8000bb0 <__aeabi_i2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	61bb      	str	r3, [r7, #24]
		Temp2 = Temp2/100;
 8001502:	4919      	ldr	r1, [pc, #100]	; (8001568 <HAL_ADC_ConvCpltCallback+0x100>)
 8001504:	69b8      	ldr	r0, [r7, #24]
 8001506:	f7ff fc5b 	bl	8000dc0 <__aeabi_fdiv>
 800150a:	4603      	mov	r3, r0
 800150c:	61bb      	str	r3, [r7, #24]
		somatorio2 = 0; 		//zera somatorio
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
		TempLastro=(double)Temp1;
 8001514:	69f8      	ldr	r0, [r7, #28]
 8001516:	f7fe ff7f 	bl	8000418 <__aeabi_f2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TempTeto=(double)Temp2;
 8001522:	69b8      	ldr	r0, [r7, #24]
 8001524:	f7fe ff78 	bl	8000418 <__aeabi_f2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		PrimitiveStates.RealtimeTeto = TempTeto;
 8001530:	490e      	ldr	r1, [pc, #56]	; (800156c <HAL_ADC_ConvCpltCallback+0x104>)
 8001532:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001536:	e9c1 2302 	strd	r2, r3, [r1, #8]
		PrimitiveStates.RealtimeLastro = TempLastro;
 800153a:	490c      	ldr	r1, [pc, #48]	; (800156c <HAL_ADC_ConvCpltCallback+0x104>)
 800153c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001540:	e9c1 2304 	strd	r2, r3, [r1, #16]
		i=0;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_ADC_ConvCpltCallback+0xec>)
 8001546:	2200      	movs	r2, #0
 8001548:	801a      	strh	r2, [r3, #0]
}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000760 	.word	0x20000760
 8001558:	20000720 	.word	0x20000720
 800155c:	20000764 	.word	0x20000764
 8001560:	20000768 	.word	0x20000768
 8001564:	10624dd3 	.word	0x10624dd3
 8001568:	42c80000 	.word	0x42c80000
 800156c:	20000730 	.word	0x20000730

08001570 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001578:	2001      	movs	r0, #1
 800157a:	f003 fd83 	bl	8005084 <osDelay>
 800157e:	e7fb      	b.n	8001578 <StartDefaultTask+0x8>

08001580 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001592:	f000 fea5 	bl	80022e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40012c00 	.word	0x40012c00

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ac:	e7fe      	b.n	80015ac <Error_Handler+0x8>

080015ae <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80015de:	f7ff fa03 	bl	80009e8 <__aeabi_dcmpgt>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 80015f4:	e011      	b.n	800161a <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001602:	f7ff f9d3 	bl	80009ac <__aeabi_dcmplt>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d100      	bne.n	800160e <PID_Init+0x60>
}
 800160c:	e005      	b.n	800161a <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	0000      	movs	r0, r0
 8001624:	0000      	movs	r0, r0
	...

08001628 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af06      	add	r7, sp, #24
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800164e:	a318      	add	r3, pc, #96	; (adr r3, 80016b0 <PID+0x88>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	e9cd 2300 	strd	r2, r3, [sp]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 f931 	bl	80018c8 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2264      	movs	r2, #100	; 0x64
 800166a:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 800166c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001670:	4619      	mov	r1, r3
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 fa38 	bl	8001ae8 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8001678:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800167c:	9304      	str	r3, [sp, #16]
 800167e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001682:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800168a:	e9cd 2300 	strd	r2, r3, [sp]
 800168e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 f984 	bl	80019a0 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8001698:	f000 fe34 	bl	8002304 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	1ad2      	subs	r2, r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	605a      	str	r2, [r3, #4]
	
}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	00000000 	.word	0x00000000
 80016b4:	406fe000 	.word	0x406fe000

080016b8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80016b8:	b5b0      	push	{r4, r5, r7, lr}
 80016ba:	b08c      	sub	sp, #48	; 0x30
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	785b      	ldrb	r3, [r3, #1]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <PID_Compute+0x14>
	{
		return _FALSE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e0db      	b.n	8001884 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80016cc:	f000 fe1a 	bl	8002304 <HAL_GetTick>
 80016d0:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	6a3a      	ldr	r2, [r7, #32]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	f0c0 80cd 	bcc.w	8001882 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001700:	f7fe fd2a 	bl	8000158 <__aeabi_dsub>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001712:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001716:	f7fe fd1f 	bl	8000158 <__aeabi_dsub>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800172e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001732:	f7fe fec9 	bl	80004c8 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7fe fd0d 	bl	800015c <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d114      	bne.n	800177e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001760:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001764:	f7fe feb0 	bl	80004c8 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4620      	mov	r0, r4
 800176e:	4629      	mov	r1, r5
 8001770:	f7fe fcf2 	bl	8000158 <__aeabi_dsub>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800178a:	f7ff f92d 	bl	80009e8 <__aeabi_dcmpgt>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80017a0:	e010      	b.n	80017c4 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80017ae:	f7ff f8fd 	bl	80009ac <__aeabi_dcmplt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00b      	beq.n	80017e4 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80017d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017d6:	f7fe fe77 	bl	80004c8 <__aeabi_dmul>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80017e2:	e005      	b.n	80017f0 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80017fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001800:	f7fe fe62 	bl	80004c8 <__aeabi_dmul>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4620      	mov	r0, r4
 800180a:	4629      	mov	r1, r5
 800180c:	f7fe fca4 	bl	8000158 <__aeabi_dsub>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001818:	f7fe fca0 	bl	800015c <__adddf3>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800182a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800182e:	f7ff f8db 	bl	80009e8 <__aeabi_dcmpgt>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800183e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001842:	e00e      	b.n	8001862 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800184a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800184e:	f7ff f8ad 	bl	80009ac <__aeabi_dcmplt>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d004      	beq.n	8001862 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800185e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001866:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800186a:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001874:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187c:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8001882:	2300      	movs	r3, #0
	}
	
}
 8001884:	4618      	mov	r0, r3
 8001886:	3730      	adds	r7, #48	; 0x30
 8001888:	46bd      	mov	sp, r7
 800188a:	bdb0      	pop	{r4, r5, r7, pc}

0800188c <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	2b01      	cmp	r3, #1
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <PID_SetMode+0x2e>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	785b      	ldrb	r3, [r3, #1]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fe7a 	bl	80015ae <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	705a      	strb	r2, [r3, #1]
	
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80018d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018dc:	f7ff f87a 	bl	80009d4 <__aeabi_dcmpge>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d158      	bne.n	8001998 <PID_SetOutputLimits+0xd0>
	{
		return;
	}
	
	uPID->OutMin = Min;
 80018e6:	68f9      	ldr	r1, [r7, #12]
 80018e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018ec:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 80018f0:	68f9      	ldr	r1, [r7, #12]
 80018f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018f6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	785b      	ldrb	r3, [r3, #1]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d04b      	beq.n	800199a <PID_SetOutputLimits+0xd2>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	e9d3 0100 	ldrd	r0, r1, [r3]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001910:	f7ff f86a 	bl	80009e8 <__aeabi_dcmpgt>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001924:	e9c1 2300 	strd	r2, r3, [r1]
 8001928:	e012      	b.n	8001950 <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001938:	f7ff f838 	bl	80009ac <__aeabi_dcmplt>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800194c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800195c:	f7ff f844 	bl	80009e8 <__aeabi_dcmpgt>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800196c:	68f9      	ldr	r1, [r7, #12]
 800196e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001972:	e012      	b.n	800199a <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001980:	f7ff f814 	bl	80009ac <__aeabi_dcmplt>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001990:	68f9      	ldr	r1, [r7, #12]
 8001992:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001996:	e000      	b.n	800199a <PID_SetOutputLimits+0xd2>
		return;
 8001998:	bf00      	nop
		}
		else { }
		
	}
	
}
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	e9c7 2300 	strd	r2, r3, [r7]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019b8:	f7fe fff8 	bl	80009ac <__aeabi_dcmplt>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f040 808b 	bne.w	8001ada <PID_SetTunings2+0x13a>
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019d0:	f7fe ffec 	bl	80009ac <__aeabi_dcmplt>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d17f      	bne.n	8001ada <PID_SetTunings2+0x13a>
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019e6:	f7fe ffe1 	bl	80009ac <__aeabi_dcmplt>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d174      	bne.n	8001ada <PID_SetTunings2+0x13a>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80019f6:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80019f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001a0c:	68f9      	ldr	r1, [r7, #12]
 8001a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a12:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001a16:	68f9      	ldr	r1, [r7, #12]
 8001a18:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a1c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001a20:	68f9      	ldr	r1, [r7, #12]
 8001a22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a26:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fcd0 	bl	80003d4 <__aeabi_ui2d>
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <PID_SetTunings2+0x144>)
 8001a3a:	f7fe fe6f 	bl	800071c <__aeabi_ddiv>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	e9c7 2304 	strd	r2, r3, [r7, #16]
	
	uPID->Kp = Kp;
 8001a46:	68f9      	ldr	r1, [r7, #12]
 8001a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a4c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001a50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a54:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a58:	f7fe fd36 	bl	80004c8 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	68f9      	ldr	r1, [r7, #12]
 8001a62:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001a66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a6e:	f7fe fe55 	bl	800071c <__aeabi_ddiv>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	68f9      	ldr	r1, [r7, #12]
 8001a78:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	78db      	ldrb	r3, [r3, #3]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d12b      	bne.n	8001adc <PID_SetTunings2+0x13c>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a8a:	f04f 0000 	mov.w	r0, #0
 8001a8e:	f04f 0100 	mov.w	r1, #0
 8001a92:	f7fe fb61 	bl	8000158 <__aeabi_dsub>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	68f9      	ldr	r1, [r7, #12]
 8001a9c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	f7fe fb53 	bl	8000158 <__aeabi_dsub>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	68f9      	ldr	r1, [r7, #12]
 8001ab8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001ac2:	f04f 0000 	mov.w	r0, #0
 8001ac6:	f04f 0100 	mov.w	r1, #0
 8001aca:	f7fe fb45 	bl	8000158 <__aeabi_dsub>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	68f9      	ldr	r1, [r7, #12]
 8001ad4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001ad8:	e000      	b.n	8001adc <PID_SetTunings2+0x13c>
		return;
 8001ada:	bf00      	nop
		
	}
	
}
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	408f4000 	.word	0x408f4000

08001ae8 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	785b      	ldrb	r3, [r3, #1]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d02e      	beq.n	8001b5a <PID_SetControllerDirection+0x72>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	78db      	ldrb	r3, [r3, #3]
 8001b00:	78fa      	ldrb	r2, [r7, #3]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d029      	beq.n	8001b5a <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b0c:	f04f 0000 	mov.w	r0, #0
 8001b10:	f04f 0100 	mov.w	r1, #0
 8001b14:	f7fe fb20 	bl	8000158 <__aeabi_dsub>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001b28:	f04f 0000 	mov.w	r0, #0
 8001b2c:	f04f 0100 	mov.w	r1, #0
 8001b30:	f7fe fb12 	bl	8000158 <__aeabi_dsub>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001b44:	f04f 0000 	mov.w	r0, #0
 8001b48:	f04f 0100 	mov.w	r1, #0
 8001b4c:	f7fe fb04 	bl	8000158 <__aeabi_dsub>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	78fa      	ldrb	r2, [r7, #3]
 8001b5e:	70da      	strb	r2, [r3, #3]
	
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001b68:	b5b0      	push	{r4, r5, r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	dd2e      	ble.n	8001bd6 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001b78:	6838      	ldr	r0, [r7, #0]
 8001b7a:	f7fe fc3b 	bl	80003f4 <__aeabi_i2d>
 8001b7e:	4604      	mov	r4, r0
 8001b80:	460d      	mov	r5, r1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fc24 	bl	80003d4 <__aeabi_ui2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4620      	mov	r0, r4
 8001b92:	4629      	mov	r1, r5
 8001b94:	f7fe fdc2 	bl	800071c <__aeabi_ddiv>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001baa:	f7fe fc8d 	bl	80004c8 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001bbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bc2:	f7fe fdab 	bl	800071c <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001be0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_MspInit+0x68>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <HAL_MspInit+0x68>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6193      	str	r3, [r2, #24]
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_MspInit+0x68>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_MspInit+0x68>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <HAL_MspInit+0x68>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c08:	61d3      	str	r3, [r2, #28]
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_MspInit+0x68>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	210f      	movs	r1, #15
 8001c1a:	f06f 0001 	mvn.w	r0, #1
 8001c1e:	f001 f816 	bl	8002c4e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_MspInit+0x6c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_MspInit+0x6c>)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010000 	.word	0x40010000

08001c50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <HAL_ADC_MspInit+0xbc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d149      	bne.n	8001d04 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c70:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a26      	ldr	r2, [pc, #152]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	4a20      	ldr	r2, [pc, #128]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001c8e:	f043 0304 	orr.w	r3, r3, #4
 8001c92:	6193      	str	r3, [r2, #24]
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4619      	mov	r1, r3
 8001cae:	4819      	ldr	r0, [pc, #100]	; (8001d14 <HAL_ADC_MspInit+0xc4>)
 8001cb0:	f001 f9e6 	bl	8003080 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <HAL_ADC_MspInit+0xc8>)
 8001cb6:	4a19      	ldr	r2, [pc, #100]	; (8001d1c <HAL_ADC_MspInit+0xcc>)
 8001cb8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <HAL_ADC_MspInit+0xc8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <HAL_ADC_MspInit+0xc8>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <HAL_ADC_MspInit+0xc8>)
 8001cc8:	2280      	movs	r2, #128	; 0x80
 8001cca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_ADC_MspInit+0xc8>)
 8001cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cd4:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_ADC_MspInit+0xc8>)
 8001cd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cda:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_ADC_MspInit+0xc8>)
 8001cde:	2220      	movs	r2, #32
 8001ce0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_ADC_MspInit+0xc8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ce8:	480b      	ldr	r0, [pc, #44]	; (8001d18 <HAL_ADC_MspInit+0xc8>)
 8001cea:	f000 ffdb 	bl	8002ca4 <HAL_DMA_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001cf4:	f7ff fc56 	bl	80015a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <HAL_ADC_MspInit+0xc8>)
 8001cfc:	621a      	str	r2, [r3, #32]
 8001cfe:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <HAL_ADC_MspInit+0xc8>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d04:	bf00      	nop
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40012400 	.word	0x40012400
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010800 	.word	0x40010800
 8001d18:	2000034c 	.word	0x2000034c
 8001d1c:	40020008 	.word	0x40020008

08001d20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <HAL_I2C_MspInit+0x90>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d132      	bne.n	8001da6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d40:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <HAL_I2C_MspInit+0x94>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <HAL_I2C_MspInit+0x94>)
 8001d46:	f043 0308 	orr.w	r3, r3, #8
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_I2C_MspInit+0x94>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d5e:	2312      	movs	r3, #18
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4812      	ldr	r0, [pc, #72]	; (8001db8 <HAL_I2C_MspInit+0x98>)
 8001d6e:	f001 f987 	bl	8003080 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_I2C_MspInit+0x9c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	f043 0302 	orr.w	r3, r3, #2
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
 8001d88:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <HAL_I2C_MspInit+0x9c>)
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_I2C_MspInit+0x94>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_I2C_MspInit+0x94>)
 8001d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d98:	61d3      	str	r3, [r2, #28]
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_I2C_MspInit+0x94>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001da6:	bf00      	nop
 8001da8:	3728      	adds	r7, #40	; 0x28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40005400 	.word	0x40005400
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40010c00 	.word	0x40010c00
 8001dbc:	40010000 	.word	0x40010000

08001dc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd0:	d10b      	bne.n	8001dea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_TIM_PWM_MspInit+0x34>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <HAL_TIM_PWM_MspInit+0x34>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	61d3      	str	r3, [r2, #28]
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_TIM_PWM_MspInit+0x34>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	40021000 	.word	0x40021000

08001df8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <HAL_TIM_Base_MspInit+0x44>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d113      	bne.n	8001e32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_TIM_Base_MspInit+0x48>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	4a0c      	ldr	r2, [pc, #48]	; (8001e40 <HAL_TIM_Base_MspInit+0x48>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	61d3      	str	r3, [r2, #28]
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_TIM_Base_MspInit+0x48>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2105      	movs	r1, #5
 8001e26:	201d      	movs	r0, #29
 8001e28:	f000 ff11 	bl	8002c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e2c:	201d      	movs	r0, #29
 8001e2e:	f000 ff2a 	bl	8002c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40021000 	.word	0x40021000

08001e44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0318 	add.w	r3, r7, #24
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e62:	d118      	bne.n	8001e96 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b28      	ldr	r3, [pc, #160]	; (8001f08 <HAL_TIM_MspPostInit+0xc4>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a27      	ldr	r2, [pc, #156]	; (8001f08 <HAL_TIM_MspPostInit+0xc4>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <HAL_TIM_MspPostInit+0xc4>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2302      	movs	r3, #2
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 0318 	add.w	r3, r7, #24
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	481f      	ldr	r0, [pc, #124]	; (8001f0c <HAL_TIM_MspPostInit+0xc8>)
 8001e90:	f001 f8f6 	bl	8003080 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e94:	e034      	b.n	8001f00 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_TIM_MspPostInit+0xcc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d12f      	bne.n	8001f00 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea0:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_TIM_MspPostInit+0xc4>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <HAL_TIM_MspPostInit+0xc4>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	6193      	str	r3, [r2, #24]
 8001eac:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_TIM_MspPostInit+0xc4>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <HAL_TIM_MspPostInit+0xc4>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <HAL_TIM_MspPostInit+0xc4>)
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	6193      	str	r3, [r2, #24]
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_TIM_MspPostInit+0xc4>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ed0:	23c0      	movs	r3, #192	; 0xc0
 8001ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001edc:	f107 0318 	add.w	r3, r7, #24
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	480a      	ldr	r0, [pc, #40]	; (8001f0c <HAL_TIM_MspPostInit+0xc8>)
 8001ee4:	f001 f8cc 	bl	8003080 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 0318 	add.w	r3, r7, #24
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4806      	ldr	r0, [pc, #24]	; (8001f14 <HAL_TIM_MspPostInit+0xd0>)
 8001efc:	f001 f8c0 	bl	8003080 <HAL_GPIO_Init>
}
 8001f00:	bf00      	nop
 8001f02:	3728      	adds	r7, #40	; 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010800 	.word	0x40010800
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40010c00 	.word	0x40010c00

08001f18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08c      	sub	sp, #48	; 0x30
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <HAL_InitTick+0xd0>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	4a2d      	ldr	r2, [pc, #180]	; (8001fe8 <HAL_InitTick+0xd0>)
 8001f34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f38:	6193      	str	r3, [r2, #24]
 8001f3a:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <HAL_InitTick+0xd0>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f46:	f107 020c 	add.w	r2, r7, #12
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 ff67 	bl	8003e24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f56:	f001 ff51 	bl	8003dfc <HAL_RCC_GetPCLK2Freq>
 8001f5a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5e:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_InitTick+0xd4>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	0c9b      	lsrs	r3, r3, #18
 8001f66:	3b01      	subs	r3, #1
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_InitTick+0xd8>)
 8001f6c:	4a21      	ldr	r2, [pc, #132]	; (8001ff4 <HAL_InitTick+0xdc>)
 8001f6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f70:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <HAL_InitTick+0xd8>)
 8001f72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f76:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f78:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <HAL_InitTick+0xd8>)
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <HAL_InitTick+0xd8>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f84:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <HAL_InitTick+0xd8>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8a:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_InitTick+0xd8>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f90:	4817      	ldr	r0, [pc, #92]	; (8001ff0 <HAL_InitTick+0xd8>)
 8001f92:	f002 f84b 	bl	800402c <HAL_TIM_Base_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d11b      	bne.n	8001fdc <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001fa4:	4812      	ldr	r0, [pc, #72]	; (8001ff0 <HAL_InitTick+0xd8>)
 8001fa6:	f002 f891 	bl	80040cc <HAL_TIM_Base_Start_IT>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d111      	bne.n	8001fdc <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001fb8:	2019      	movs	r0, #25
 8001fba:	f000 fe64 	bl	8002c86 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b0f      	cmp	r3, #15
 8001fc2:	d808      	bhi.n	8001fd6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	2019      	movs	r0, #25
 8001fca:	f000 fe40 	bl	8002c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HAL_InitTick+0xe0>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	e002      	b.n	8001fdc <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3730      	adds	r7, #48	; 0x30
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	431bde83 	.word	0x431bde83
 8001ff0:	2000076c 	.word	0x2000076c
 8001ff4:	40012c00 	.word	0x40012c00
 8001ff8:	20000004 	.word	0x20000004

08001ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002000:	e7fe      	b.n	8002000 <NMI_Handler+0x4>

08002002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002006:	e7fe      	b.n	8002006 <HardFault_Handler+0x4>

08002008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800200c:	e7fe      	b.n	800200c <MemManage_Handler+0x4>

0800200e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002012:	e7fe      	b.n	8002012 <BusFault_Handler+0x4>

08002014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <UsageFault_Handler+0x4>

0800201a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
	...

08002028 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <DMA1_Channel1_IRQHandler+0x10>)
 800202e:	f000 fef3 	bl	8002e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2000034c 	.word	0x2000034c

0800203c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <TIM1_UP_IRQHandler+0x10>)
 8002042:	f002 f9eb 	bl	800441c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	2000076c 	.word	0x2000076c

08002050 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <TIM3_IRQHandler+0x10>)
 8002056:	f002 f9e1 	bl	800441c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000042c 	.word	0x2000042c

08002064 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002070:	f7ff fff8 	bl	8002064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002074:	480b      	ldr	r0, [pc, #44]	; (80020a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002076:	490c      	ldr	r1, [pc, #48]	; (80020a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002078:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800207c:	e002      	b.n	8002084 <LoopCopyDataInit>

0800207e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800207e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002082:	3304      	adds	r3, #4

08002084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002088:	d3f9      	bcc.n	800207e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800208a:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800208c:	4c09      	ldr	r4, [pc, #36]	; (80020b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002090:	e001      	b.n	8002096 <LoopFillZerobss>

08002092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002094:	3204      	adds	r2, #4

08002096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002098:	d3fb      	bcc.n	8002092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800209a:	f004 fa87 	bl	80065ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800209e:	f7fe ff43 	bl	8000f28 <main>
  bx lr
 80020a2:	4770      	bx	lr
  ldr r0, =_sdata
 80020a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80020ac:	08006770 	.word	0x08006770
  ldr r2, =_sbss
 80020b0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80020b4:	20001748 	.word	0x20001748

080020b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020b8:	e7fe      	b.n	80020b8 <ADC1_2_IRQHandler>
	...

080020bc <StartBuzzer>:

extern osThreadId TaskBuzzerHandle;
extern TIM_HandleTypeDef htim2;

void StartBuzzer(void const * argument)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskBuzzer */
	//osThreadSuspend(TaskBuzzerHandle);
	/* Infinite loop */
	for(;;)
	{
		sequencia1Buzzer();
 80020c4:	f000 f80c 	bl	80020e0 <sequencia1Buzzer>

		osThreadSuspend(TaskBuzzerHandle);
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <StartBuzzer+0x20>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f002 ffed 	bl	80050ac <osThreadSuspend>

		osDelay(100);
 80020d2:	2064      	movs	r0, #100	; 0x64
 80020d4:	f002 ffd6 	bl	8005084 <osDelay>
		sequencia1Buzzer();
 80020d8:	e7f4      	b.n	80020c4 <StartBuzzer+0x8>
 80020da:	bf00      	nop
 80020dc:	2000047c 	.word	0x2000047c

080020e0 <sequencia1Buzzer>:
	}
	/* USER CODE END StartTaskBuzzer */
}

void sequencia1Buzzer(void){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	M_BUZZER_ON
 80020e4:	210c      	movs	r1, #12
 80020e6:	480d      	ldr	r0, [pc, #52]	; (800211c <sequencia1Buzzer+0x3c>)
 80020e8:	f002 f892 	bl	8004210 <HAL_TIM_PWM_Start>
	HAL_Delay(300);
 80020ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020f0:	f000 f912 	bl	8002318 <HAL_Delay>
	M_BUZZER_OFF
 80020f4:	210c      	movs	r1, #12
 80020f6:	4809      	ldr	r0, [pc, #36]	; (800211c <sequencia1Buzzer+0x3c>)
 80020f8:	f002 f92c 	bl	8004354 <HAL_TIM_PWM_Stop>
	HAL_Delay(50);
 80020fc:	2032      	movs	r0, #50	; 0x32
 80020fe:	f000 f90b 	bl	8002318 <HAL_Delay>
	M_BUZZER_ON
 8002102:	210c      	movs	r1, #12
 8002104:	4805      	ldr	r0, [pc, #20]	; (800211c <sequencia1Buzzer+0x3c>)
 8002106:	f002 f883 	bl	8004210 <HAL_TIM_PWM_Start>
	HAL_Delay(250);
 800210a:	20fa      	movs	r0, #250	; 0xfa
 800210c:	f000 f904 	bl	8002318 <HAL_Delay>
	M_BUZZER_OFF
 8002110:	210c      	movs	r1, #12
 8002112:	4802      	ldr	r0, [pc, #8]	; (800211c <sequencia1Buzzer+0x3c>)
 8002114:	f002 f91e 	bl	8004354 <HAL_TIM_PWM_Stop>
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	200003e4 	.word	0x200003e4

08002120 <StartTemperatura>:
//---variaveis PID
double TempTeto, TempLastro, PIDOutTeto, PIDOutLastro, TempSPTeto, TempSPLastro;
PID_TypeDef TPIDTeto,TPIDLastro;


void StartTemperatura(void const * argument){
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

	initPID();
 8002128:	f000 f80a 	bl	8002140 <initPID>

	//	osThreadSuspend(TaskTemperaturaHandle);
	for(;;)	{

		computaPID();
 800212c:	f000 f898 	bl	8002260 <computaPID>

		osDelay(TIME_PID_CALC);
 8002130:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002134:	f002 ffa6 	bl	8005084 <osDelay>
		computaPID();
 8002138:	e7f8      	b.n	800212c <StartTemperatura+0xc>
 800213a:	0000      	movs	r0, r0
 800213c:	0000      	movs	r0, r0
	...

08002140 <initPID>:

	tmp += (*PIDOut / 1000);

	return tmp;
}
void initPID(void){
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af08      	add	r7, sp, #32

	TempSPTeto 		= 0;
 8002146:	493a      	ldr	r1, [pc, #232]	; (8002230 <initPID+0xf0>)
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9c1 2300 	strd	r2, r3, [r1]
	TempSPLastro 	= 0;
 8002154:	4937      	ldr	r1, [pc, #220]	; (8002234 <initPID+0xf4>)
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	e9c1 2300 	strd	r2, r3, [r1]

	PID(&TPIDTeto, 		&PrimitiveStates.RealtimeTeto, 		&PIDOutTeto, 	&PrimitiveStates.SetPointTeto, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 8002162:	2300      	movs	r3, #0
 8002164:	9307      	str	r3, [sp, #28]
 8002166:	2301      	movs	r3, #1
 8002168:	9306      	str	r3, [sp, #24]
 800216a:	a32d      	add	r3, pc, #180	; (adr r3, 8002220 <initPID+0xe0>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002174:	a32c      	add	r3, pc, #176	; (adr r3, 8002228 <initPID+0xe8>)
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <initPID+0xf8>)
 8002184:	e9cd 2300 	strd	r2, r3, [sp]
 8002188:	4b2c      	ldr	r3, [pc, #176]	; (800223c <initPID+0xfc>)
 800218a:	4a2d      	ldr	r2, [pc, #180]	; (8002240 <initPID+0x100>)
 800218c:	492d      	ldr	r1, [pc, #180]	; (8002244 <initPID+0x104>)
 800218e:	482e      	ldr	r0, [pc, #184]	; (8002248 <initPID+0x108>)
 8002190:	f7ff fa4a 	bl	8001628 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.RealtimeLastro, 	&PIDOutLastro, 	&PrimitiveStates.SetPointLastro, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 8002194:	2300      	movs	r3, #0
 8002196:	9307      	str	r3, [sp, #28]
 8002198:	2301      	movs	r3, #1
 800219a:	9306      	str	r3, [sp, #24]
 800219c:	a320      	add	r3, pc, #128	; (adr r3, 8002220 <initPID+0xe0>)
 800219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80021a6:	a320      	add	r3, pc, #128	; (adr r3, 8002228 <initPID+0xe8>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	4b20      	ldr	r3, [pc, #128]	; (8002238 <initPID+0xf8>)
 80021b6:	e9cd 2300 	strd	r2, r3, [sp]
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <initPID+0x10c>)
 80021bc:	4a24      	ldr	r2, [pc, #144]	; (8002250 <initPID+0x110>)
 80021be:	4925      	ldr	r1, [pc, #148]	; (8002254 <initPID+0x114>)
 80021c0:	4825      	ldr	r0, [pc, #148]	; (8002258 <initPID+0x118>)
 80021c2:	f7ff fa31 	bl	8001628 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 80021c6:	2101      	movs	r1, #1
 80021c8:	481f      	ldr	r0, [pc, #124]	; (8002248 <initPID+0x108>)
 80021ca:	f7ff fb5f 	bl	800188c <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 80021ce:	2101      	movs	r1, #1
 80021d0:	4821      	ldr	r0, [pc, #132]	; (8002258 <initPID+0x118>)
 80021d2:	f7ff fb5b 	bl	800188c <PID_SetMode>

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 80021d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80021da:	481b      	ldr	r0, [pc, #108]	; (8002248 <initPID+0x108>)
 80021dc:	f7ff fcc4 	bl	8001b68 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 80021e0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80021e4:	481c      	ldr	r0, [pc, #112]	; (8002258 <initPID+0x118>)
 80021e6:	f7ff fcbf 	bl	8001b68 <PID_SetSampleTime>

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <initPID+0x11c>)
 80021f0:	e9cd 2300 	strd	r2, r3, [sp]
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	4812      	ldr	r0, [pc, #72]	; (8002248 <initPID+0x108>)
 80021fe:	f7ff fb63 	bl	80018c8 <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <initPID+0x11c>)
 8002208:	e9cd 2300 	strd	r2, r3, [sp]
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	4810      	ldr	r0, [pc, #64]	; (8002258 <initPID+0x118>)
 8002216:	f7ff fb57 	bl	80018c8 <PID_SetOutputLimits>
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	33333333 	.word	0x33333333
 8002224:	3fd33333 	.word	0x3fd33333
 8002228:	47ae147b 	.word	0x47ae147b
 800222c:	3f847ae1 	.word	0x3f847ae1
 8002230:	200007c8 	.word	0x200007c8
 8002234:	200007d0 	.word	0x200007d0
 8002238:	403e0000 	.word	0x403e0000
 800223c:	20000748 	.word	0x20000748
 8002240:	200007b8 	.word	0x200007b8
 8002244:	20000738 	.word	0x20000738
 8002248:	200007d8 	.word	0x200007d8
 800224c:	20000750 	.word	0x20000750
 8002250:	200007c0 	.word	0x200007c0
 8002254:	20000740 	.word	0x20000740
 8002258:	20000848 	.word	0x20000848
 800225c:	40590000 	.word	0x40590000

08002260 <computaPID>:
void computaPID(void){
 8002260:	b598      	push	{r3, r4, r7, lr}
 8002262:	af00      	add	r7, sp, #0

	PID_Compute(&TPIDTeto);
 8002264:	480e      	ldr	r0, [pc, #56]	; (80022a0 <computaPID+0x40>)
 8002266:	f7ff fa27 	bl	80016b8 <PID_Compute>
	PID_Compute(&TPIDLastro);
 800226a:	480e      	ldr	r0, [pc, #56]	; (80022a4 <computaPID+0x44>)
 800226c:	f7ff fa24 	bl	80016b8 <PID_Compute>

	htim3.Instance->CCR3 = PIDOutTeto;
 8002270:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <computaPID+0x48>)
 8002272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002276:	490d      	ldr	r1, [pc, #52]	; (80022ac <computaPID+0x4c>)
 8002278:	680c      	ldr	r4, [r1, #0]
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	f7fe fbbd 	bl	80009fc <__aeabi_d2uiz>
 8002282:	4603      	mov	r3, r0
 8002284:	63e3      	str	r3, [r4, #60]	; 0x3c
	htim3.Instance->CCR4 = PIDOutLastro;
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <computaPID+0x50>)
 8002288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <computaPID+0x4c>)
 800228e:	680c      	ldr	r4, [r1, #0]
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	f7fe fbb2 	bl	80009fc <__aeabi_d2uiz>
 8002298:	4603      	mov	r3, r0
 800229a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800229c:	bf00      	nop
 800229e:	bd98      	pop	{r3, r4, r7, pc}
 80022a0:	200007d8 	.word	0x200007d8
 80022a4:	20000848 	.word	0x20000848
 80022a8:	200007b8 	.word	0x200007b8
 80022ac:	2000042c 	.word	0x2000042c
 80022b0:	200007c0 	.word	0x200007c0

080022b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_Init+0x28>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a07      	ldr	r2, [pc, #28]	; (80022dc <HAL_Init+0x28>)
 80022be:	f043 0310 	orr.w	r3, r3, #16
 80022c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c4:	2003      	movs	r0, #3
 80022c6:	f000 fcb7 	bl	8002c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ca:	200f      	movs	r0, #15
 80022cc:	f7ff fe24 	bl	8001f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d0:	f7ff fc86 	bl	8001be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40022000 	.word	0x40022000

080022e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_IncTick+0x1c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_IncTick+0x20>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	4a03      	ldr	r2, [pc, #12]	; (8002300 <HAL_IncTick+0x20>)
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	20000008 	.word	0x20000008
 8002300:	200008b8 	.word	0x200008b8

08002304 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return uwTick;
 8002308:	4b02      	ldr	r3, [pc, #8]	; (8002314 <HAL_GetTick+0x10>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	200008b8 	.word	0x200008b8

08002318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002320:	f7ff fff0 	bl	8002304 <HAL_GetTick>
 8002324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d005      	beq.n	800233e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_Delay+0x44>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800233e:	bf00      	nop
 8002340:	f7ff ffe0 	bl	8002304 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	429a      	cmp	r2, r3
 800234e:	d8f7      	bhi.n	8002340 <HAL_Delay+0x28>
  {
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000008 	.word	0x20000008

08002360 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e0be      	b.n	8002500 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff fc56 	bl	8001c50 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 faf5 	bl	8002994 <ADC_ConversionStop_Disable>
 80023aa:	4603      	mov	r3, r0
 80023ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 8099 	bne.w	80024ee <HAL_ADC_Init+0x18e>
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 8095 	bne.w	80024ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023cc:	f023 0302 	bic.w	r3, r3, #2
 80023d0:	f043 0202 	orr.w	r2, r3, #2
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7b1b      	ldrb	r3, [r3, #12]
 80023e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f8:	d003      	beq.n	8002402 <HAL_ADC_Init+0xa2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d102      	bne.n	8002408 <HAL_ADC_Init+0xa8>
 8002402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002406:	e000      	b.n	800240a <HAL_ADC_Init+0xaa>
 8002408:	2300      	movs	r3, #0
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7d1b      	ldrb	r3, [r3, #20]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d119      	bne.n	800244c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	7b1b      	ldrb	r3, [r3, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	3b01      	subs	r3, #1
 8002426:	035a      	lsls	r2, r3, #13
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	e00b      	b.n	800244c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	f043 0220 	orr.w	r2, r3, #32
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	f043 0201 	orr.w	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	430a      	orrs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	4b28      	ldr	r3, [pc, #160]	; (8002508 <HAL_ADC_Init+0x1a8>)
 8002468:	4013      	ands	r3, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	430b      	orrs	r3, r1
 8002472:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800247c:	d003      	beq.n	8002486 <HAL_ADC_Init+0x126>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d104      	bne.n	8002490 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	3b01      	subs	r3, #1
 800248c:	051b      	lsls	r3, r3, #20
 800248e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_ADC_Init+0x1ac>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d10b      	bne.n	80024cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	f023 0303 	bic.w	r3, r3, #3
 80024c2:	f043 0201 	orr.w	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024ca:	e018      	b.n	80024fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	f023 0312 	bic.w	r3, r3, #18
 80024d4:	f043 0210 	orr.w	r2, r3, #16
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024ec:	e007      	b.n	80024fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	f043 0210 	orr.w	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	ffe1f7fd 	.word	0xffe1f7fd
 800250c:	ff1f0efe 	.word	0xff1f0efe

08002510 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a64      	ldr	r2, [pc, #400]	; (80026b8 <HAL_ADC_Start_DMA+0x1a8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_ADC_Start_DMA+0x24>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a63      	ldr	r2, [pc, #396]	; (80026bc <HAL_ADC_Start_DMA+0x1ac>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d106      	bne.n	8002542 <HAL_ADC_Start_DMA+0x32>
 8002534:	4b60      	ldr	r3, [pc, #384]	; (80026b8 <HAL_ADC_Start_DMA+0x1a8>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f040 80b3 	bne.w	80026a8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_ADC_Start_DMA+0x40>
 800254c:	2302      	movs	r3, #2
 800254e:	e0ae      	b.n	80026ae <HAL_ADC_Start_DMA+0x19e>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f9c1 	bl	80028e0 <ADC_Enable>
 800255e:	4603      	mov	r3, r0
 8002560:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f040 809a 	bne.w	800269e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a4e      	ldr	r2, [pc, #312]	; (80026bc <HAL_ADC_Start_DMA+0x1ac>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d105      	bne.n	8002594 <HAL_ADC_Start_DMA+0x84>
 8002588:	4b4b      	ldr	r3, [pc, #300]	; (80026b8 <HAL_ADC_Start_DMA+0x1a8>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d115      	bne.n	80025c0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d026      	beq.n	80025fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025be:	e01d      	b.n	80025fc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a39      	ldr	r2, [pc, #228]	; (80026b8 <HAL_ADC_Start_DMA+0x1a8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_ADC_Start_DMA+0xd0>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a38      	ldr	r2, [pc, #224]	; (80026bc <HAL_ADC_Start_DMA+0x1ac>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d10d      	bne.n	80025fc <HAL_ADC_Start_DMA+0xec>
 80025e0:	4b35      	ldr	r3, [pc, #212]	; (80026b8 <HAL_ADC_Start_DMA+0x1a8>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	f023 0206 	bic.w	r2, r3, #6
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	62da      	str	r2, [r3, #44]	; 0x2c
 8002614:	e002      	b.n	800261c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	4a25      	ldr	r2, [pc, #148]	; (80026c0 <HAL_ADC_Start_DMA+0x1b0>)
 800262a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4a24      	ldr	r2, [pc, #144]	; (80026c4 <HAL_ADC_Start_DMA+0x1b4>)
 8002632:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4a23      	ldr	r2, [pc, #140]	; (80026c8 <HAL_ADC_Start_DMA+0x1b8>)
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0202 	mvn.w	r2, #2
 8002644:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002654:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a18      	ldr	r0, [r3, #32]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	334c      	adds	r3, #76	; 0x4c
 8002660:	4619      	mov	r1, r3
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f000 fb77 	bl	8002d58 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002674:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002678:	d108      	bne.n	800268c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002688:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800268a:	e00f      	b.n	80026ac <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800269a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800269c:	e006      	b.n	80026ac <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80026a6:	e001      	b.n	80026ac <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40012400 	.word	0x40012400
 80026bc:	40012800 	.word	0x40012800
 80026c0:	08002a17 	.word	0x08002a17
 80026c4:	08002a93 	.word	0x08002a93
 80026c8:	08002aaf 	.word	0x08002aaf

080026cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x20>
 800270c:	2302      	movs	r3, #2
 800270e:	e0dc      	b.n	80028ca <HAL_ADC_ConfigChannel+0x1da>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b06      	cmp	r3, #6
 800271e:	d81c      	bhi.n	800275a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	3b05      	subs	r3, #5
 8002732:	221f      	movs	r2, #31
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	4019      	ands	r1, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	3b05      	subs	r3, #5
 800274c:	fa00 f203 	lsl.w	r2, r0, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	635a      	str	r2, [r3, #52]	; 0x34
 8002758:	e03c      	b.n	80027d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b0c      	cmp	r3, #12
 8002760:	d81c      	bhi.n	800279c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	3b23      	subs	r3, #35	; 0x23
 8002774:	221f      	movs	r2, #31
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	4019      	ands	r1, r3
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	3b23      	subs	r3, #35	; 0x23
 800278e:	fa00 f203 	lsl.w	r2, r0, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	631a      	str	r2, [r3, #48]	; 0x30
 800279a:	e01b      	b.n	80027d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	3b41      	subs	r3, #65	; 0x41
 80027ae:	221f      	movs	r2, #31
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	4019      	ands	r1, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	3b41      	subs	r3, #65	; 0x41
 80027c8:	fa00 f203 	lsl.w	r2, r0, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b09      	cmp	r3, #9
 80027da:	d91c      	bls.n	8002816 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68d9      	ldr	r1, [r3, #12]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	3b1e      	subs	r3, #30
 80027ee:	2207      	movs	r2, #7
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	4019      	ands	r1, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6898      	ldr	r0, [r3, #8]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	3b1e      	subs	r3, #30
 8002808:	fa00 f203 	lsl.w	r2, r0, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	e019      	b.n	800284a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6919      	ldr	r1, [r3, #16]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4613      	mov	r3, r2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4413      	add	r3, r2
 8002826:	2207      	movs	r2, #7
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	4019      	ands	r1, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6898      	ldr	r0, [r3, #8]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	fa00 f203 	lsl.w	r2, r0, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b10      	cmp	r3, #16
 8002850:	d003      	beq.n	800285a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002856:	2b11      	cmp	r3, #17
 8002858:	d132      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d125      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d126      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002880:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b10      	cmp	r3, #16
 8002888:	d11a      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a13      	ldr	r2, [pc, #76]	; (80028dc <HAL_ADC_ConfigChannel+0x1ec>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	0c9a      	lsrs	r2, r3, #18
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028a0:	e002      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f9      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x1b2>
 80028ae:	e007      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	f043 0220 	orr.w	r2, r3, #32
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	40012400 	.word	0x40012400
 80028d8:	20000000 	.word	0x20000000
 80028dc:	431bde83 	.word	0x431bde83

080028e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d040      	beq.n	8002980 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0201 	orr.w	r2, r2, #1
 800290c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800290e:	4b1f      	ldr	r3, [pc, #124]	; (800298c <ADC_Enable+0xac>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <ADC_Enable+0xb0>)
 8002914:	fba2 2303 	umull	r2, r3, r2, r3
 8002918:	0c9b      	lsrs	r3, r3, #18
 800291a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800291c:	e002      	b.n	8002924 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3b01      	subs	r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f9      	bne.n	800291e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800292a:	f7ff fceb 	bl	8002304 <HAL_GetTick>
 800292e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002930:	e01f      	b.n	8002972 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002932:	f7ff fce7 	bl	8002304 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d918      	bls.n	8002972 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d011      	beq.n	8002972 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	f043 0210 	orr.w	r2, r3, #16
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	f043 0201 	orr.w	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e007      	b.n	8002982 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b01      	cmp	r3, #1
 800297e:	d1d8      	bne.n	8002932 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000000 	.word	0x20000000
 8002990:	431bde83 	.word	0x431bde83

08002994 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d12e      	bne.n	8002a0c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0201 	bic.w	r2, r2, #1
 80029bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029be:	f7ff fca1 	bl	8002304 <HAL_GetTick>
 80029c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029c4:	e01b      	b.n	80029fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029c6:	f7ff fc9d 	bl	8002304 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d914      	bls.n	80029fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d10d      	bne.n	80029fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	f043 0210 	orr.w	r2, r3, #16
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	f043 0201 	orr.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e007      	b.n	8002a0e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d0dc      	beq.n	80029c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d127      	bne.n	8002a80 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a46:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a4a:	d115      	bne.n	8002a78 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d111      	bne.n	8002a78 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d105      	bne.n	8002a78 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	f043 0201 	orr.w	r2, r3, #1
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7fe fcf5 	bl	8001468 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002a7e:	e004      	b.n	8002a8a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	4798      	blx	r3
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f7ff fe13 	bl	80026cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f043 0204 	orr.w	r2, r3, #4
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f7ff fe02 	bl	80026de <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b00:	4013      	ands	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b16:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <__NVIC_GetPriorityGrouping+0x18>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0307 	and.w	r3, r3, #7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	db0b      	blt.n	8002b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4906      	ldr	r1, [pc, #24]	; (8002b7c <__NVIC_EnableIRQ+0x34>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2001      	movs	r0, #1
 8002b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	e000e100 	.word	0xe000e100

08002b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	db0a      	blt.n	8002baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	490c      	ldr	r1, [pc, #48]	; (8002bcc <__NVIC_SetPriority+0x4c>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba8:	e00a      	b.n	8002bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	4908      	ldr	r1, [pc, #32]	; (8002bd0 <__NVIC_SetPriority+0x50>)
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	3b04      	subs	r3, #4
 8002bb8:	0112      	lsls	r2, r2, #4
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	761a      	strb	r2, [r3, #24]
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e100 	.word	0xe000e100
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b089      	sub	sp, #36	; 0x24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f1c3 0307 	rsb	r3, r3, #7
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	bf28      	it	cs
 8002bf2:	2304      	movcs	r3, #4
 8002bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d902      	bls.n	8002c04 <NVIC_EncodePriority+0x30>
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3b03      	subs	r3, #3
 8002c02:	e000      	b.n	8002c06 <NVIC_EncodePriority+0x32>
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	401a      	ands	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	43d9      	mvns	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	4313      	orrs	r3, r2
         );
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3724      	adds	r7, #36	; 0x24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ff4f 	bl	8002ae4 <__NVIC_SetPriorityGrouping>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	4603      	mov	r3, r0
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c60:	f7ff ff64 	bl	8002b2c <__NVIC_GetPriorityGrouping>
 8002c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	6978      	ldr	r0, [r7, #20]
 8002c6c:	f7ff ffb2 	bl	8002bd4 <NVIC_EncodePriority>
 8002c70:	4602      	mov	r2, r0
 8002c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff81 	bl	8002b80 <__NVIC_SetPriority>
}
 8002c7e:	bf00      	nop
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff57 	bl	8002b48 <__NVIC_EnableIRQ>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e043      	b.n	8002d42 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <HAL_DMA_Init+0xa8>)
 8002cc2:	4413      	add	r3, r2
 8002cc4:	4a22      	ldr	r2, [pc, #136]	; (8002d50 <HAL_DMA_Init+0xac>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	009a      	lsls	r2, r3, #2
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a1f      	ldr	r2, [pc, #124]	; (8002d54 <HAL_DMA_Init+0xb0>)
 8002cd6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cf2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	bffdfff8 	.word	0xbffdfff8
 8002d50:	cccccccd 	.word	0xcccccccd
 8002d54:	40020000 	.word	0x40020000

08002d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_DMA_Start_IT+0x20>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e04b      	b.n	8002e10 <HAL_DMA_Start_IT+0xb8>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d13a      	bne.n	8002e02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f937 	bl	8003024 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 020e 	orr.w	r2, r2, #14
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e00f      	b.n	8002df0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0204 	bic.w	r2, r2, #4
 8002dde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 020a 	orr.w	r2, r2, #10
 8002dee:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	e005      	b.n	8002e0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	2204      	movs	r2, #4
 8002e36:	409a      	lsls	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d04f      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0xc8>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d04a      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d107      	bne.n	8002e68 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0204 	bic.w	r2, r2, #4
 8002e66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a66      	ldr	r2, [pc, #408]	; (8003008 <HAL_DMA_IRQHandler+0x1f0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d029      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xae>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a65      	ldr	r2, [pc, #404]	; (800300c <HAL_DMA_IRQHandler+0x1f4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d022      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xaa>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a63      	ldr	r2, [pc, #396]	; (8003010 <HAL_DMA_IRQHandler+0x1f8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d01a      	beq.n	8002ebc <HAL_DMA_IRQHandler+0xa4>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a62      	ldr	r2, [pc, #392]	; (8003014 <HAL_DMA_IRQHandler+0x1fc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d012      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x9e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a60      	ldr	r2, [pc, #384]	; (8003018 <HAL_DMA_IRQHandler+0x200>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00a      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x98>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a5f      	ldr	r2, [pc, #380]	; (800301c <HAL_DMA_IRQHandler+0x204>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d102      	bne.n	8002eaa <HAL_DMA_IRQHandler+0x92>
 8002ea4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ea8:	e00e      	b.n	8002ec8 <HAL_DMA_IRQHandler+0xb0>
 8002eaa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002eae:	e00b      	b.n	8002ec8 <HAL_DMA_IRQHandler+0xb0>
 8002eb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002eb4:	e008      	b.n	8002ec8 <HAL_DMA_IRQHandler+0xb0>
 8002eb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eba:	e005      	b.n	8002ec8 <HAL_DMA_IRQHandler+0xb0>
 8002ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec0:	e002      	b.n	8002ec8 <HAL_DMA_IRQHandler+0xb0>
 8002ec2:	2340      	movs	r3, #64	; 0x40
 8002ec4:	e000      	b.n	8002ec8 <HAL_DMA_IRQHandler+0xb0>
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	4a55      	ldr	r2, [pc, #340]	; (8003020 <HAL_DMA_IRQHandler+0x208>)
 8002eca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8094 	beq.w	8002ffe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ede:	e08e      	b.n	8002ffe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d056      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x186>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d051      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10b      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 020a 	bic.w	r2, r2, #10
 8002f16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a38      	ldr	r2, [pc, #224]	; (8003008 <HAL_DMA_IRQHandler+0x1f0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d029      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x166>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a37      	ldr	r2, [pc, #220]	; (800300c <HAL_DMA_IRQHandler+0x1f4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d022      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x162>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a35      	ldr	r2, [pc, #212]	; (8003010 <HAL_DMA_IRQHandler+0x1f8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d01a      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x15c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a34      	ldr	r2, [pc, #208]	; (8003014 <HAL_DMA_IRQHandler+0x1fc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d012      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x156>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a32      	ldr	r2, [pc, #200]	; (8003018 <HAL_DMA_IRQHandler+0x200>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00a      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x150>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a31      	ldr	r2, [pc, #196]	; (800301c <HAL_DMA_IRQHandler+0x204>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d102      	bne.n	8002f62 <HAL_DMA_IRQHandler+0x14a>
 8002f5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f60:	e00e      	b.n	8002f80 <HAL_DMA_IRQHandler+0x168>
 8002f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f66:	e00b      	b.n	8002f80 <HAL_DMA_IRQHandler+0x168>
 8002f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f6c:	e008      	b.n	8002f80 <HAL_DMA_IRQHandler+0x168>
 8002f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f72:	e005      	b.n	8002f80 <HAL_DMA_IRQHandler+0x168>
 8002f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f78:	e002      	b.n	8002f80 <HAL_DMA_IRQHandler+0x168>
 8002f7a:	2320      	movs	r3, #32
 8002f7c:	e000      	b.n	8002f80 <HAL_DMA_IRQHandler+0x168>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	4a27      	ldr	r2, [pc, #156]	; (8003020 <HAL_DMA_IRQHandler+0x208>)
 8002f82:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d034      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f9c:	e02f      	b.n	8002ffe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d028      	beq.n	8003000 <HAL_DMA_IRQHandler+0x1e8>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d023      	beq.n	8003000 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 020e 	bic.w	r2, r2, #14
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d004      	beq.n	8003000 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	4798      	blx	r3
    }
  }
  return;
 8002ffe:	bf00      	nop
 8003000:	bf00      	nop
}
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40020008 	.word	0x40020008
 800300c:	4002001c 	.word	0x4002001c
 8003010:	40020030 	.word	0x40020030
 8003014:	40020044 	.word	0x40020044
 8003018:	40020058 	.word	0x40020058
 800301c:	4002006c 	.word	0x4002006c
 8003020:	40020000 	.word	0x40020000

08003024 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	2101      	movs	r1, #1
 800303c:	fa01 f202 	lsl.w	r2, r1, r2
 8003040:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b10      	cmp	r3, #16
 8003050:	d108      	bne.n	8003064 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003062:	e007      	b.n	8003074 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	60da      	str	r2, [r3, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
	...

08003080 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003080:	b480      	push	{r7}
 8003082:	b08b      	sub	sp, #44	; 0x2c
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800308e:	2300      	movs	r3, #0
 8003090:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003092:	e169      	b.n	8003368 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003094:	2201      	movs	r2, #1
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	f040 8158 	bne.w	8003362 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4a9a      	ldr	r2, [pc, #616]	; (8003320 <HAL_GPIO_Init+0x2a0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d05e      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030bc:	4a98      	ldr	r2, [pc, #608]	; (8003320 <HAL_GPIO_Init+0x2a0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d875      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030c2:	4a98      	ldr	r2, [pc, #608]	; (8003324 <HAL_GPIO_Init+0x2a4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d058      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030c8:	4a96      	ldr	r2, [pc, #600]	; (8003324 <HAL_GPIO_Init+0x2a4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d86f      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030ce:	4a96      	ldr	r2, [pc, #600]	; (8003328 <HAL_GPIO_Init+0x2a8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d052      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030d4:	4a94      	ldr	r2, [pc, #592]	; (8003328 <HAL_GPIO_Init+0x2a8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d869      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030da:	4a94      	ldr	r2, [pc, #592]	; (800332c <HAL_GPIO_Init+0x2ac>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d04c      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030e0:	4a92      	ldr	r2, [pc, #584]	; (800332c <HAL_GPIO_Init+0x2ac>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d863      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030e6:	4a92      	ldr	r2, [pc, #584]	; (8003330 <HAL_GPIO_Init+0x2b0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d046      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030ec:	4a90      	ldr	r2, [pc, #576]	; (8003330 <HAL_GPIO_Init+0x2b0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d85d      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030f2:	2b12      	cmp	r3, #18
 80030f4:	d82a      	bhi.n	800314c <HAL_GPIO_Init+0xcc>
 80030f6:	2b12      	cmp	r3, #18
 80030f8:	d859      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030fa:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <HAL_GPIO_Init+0x80>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	0800317b 	.word	0x0800317b
 8003104:	08003155 	.word	0x08003155
 8003108:	08003167 	.word	0x08003167
 800310c:	080031a9 	.word	0x080031a9
 8003110:	080031af 	.word	0x080031af
 8003114:	080031af 	.word	0x080031af
 8003118:	080031af 	.word	0x080031af
 800311c:	080031af 	.word	0x080031af
 8003120:	080031af 	.word	0x080031af
 8003124:	080031af 	.word	0x080031af
 8003128:	080031af 	.word	0x080031af
 800312c:	080031af 	.word	0x080031af
 8003130:	080031af 	.word	0x080031af
 8003134:	080031af 	.word	0x080031af
 8003138:	080031af 	.word	0x080031af
 800313c:	080031af 	.word	0x080031af
 8003140:	080031af 	.word	0x080031af
 8003144:	0800315d 	.word	0x0800315d
 8003148:	08003171 	.word	0x08003171
 800314c:	4a79      	ldr	r2, [pc, #484]	; (8003334 <HAL_GPIO_Init+0x2b4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003152:	e02c      	b.n	80031ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	623b      	str	r3, [r7, #32]
          break;
 800315a:	e029      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	3304      	adds	r3, #4
 8003162:	623b      	str	r3, [r7, #32]
          break;
 8003164:	e024      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	3308      	adds	r3, #8
 800316c:	623b      	str	r3, [r7, #32]
          break;
 800316e:	e01f      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	330c      	adds	r3, #12
 8003176:	623b      	str	r3, [r7, #32]
          break;
 8003178:	e01a      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003182:	2304      	movs	r3, #4
 8003184:	623b      	str	r3, [r7, #32]
          break;
 8003186:	e013      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d105      	bne.n	800319c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003190:	2308      	movs	r3, #8
 8003192:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	611a      	str	r2, [r3, #16]
          break;
 800319a:	e009      	b.n	80031b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800319c:	2308      	movs	r3, #8
 800319e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	615a      	str	r2, [r3, #20]
          break;
 80031a6:	e003      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031a8:	2300      	movs	r3, #0
 80031aa:	623b      	str	r3, [r7, #32]
          break;
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          break;
 80031ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2bff      	cmp	r3, #255	; 0xff
 80031b4:	d801      	bhi.n	80031ba <HAL_GPIO_Init+0x13a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	e001      	b.n	80031be <HAL_GPIO_Init+0x13e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3304      	adds	r3, #4
 80031be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2bff      	cmp	r3, #255	; 0xff
 80031c4:	d802      	bhi.n	80031cc <HAL_GPIO_Init+0x14c>
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	e002      	b.n	80031d2 <HAL_GPIO_Init+0x152>
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	3b08      	subs	r3, #8
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	210f      	movs	r1, #15
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	fa01 f303 	lsl.w	r3, r1, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	401a      	ands	r2, r3
 80031e4:	6a39      	ldr	r1, [r7, #32]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	431a      	orrs	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80b1 	beq.w	8003362 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003200:	4b4d      	ldr	r3, [pc, #308]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	4a4c      	ldr	r2, [pc, #304]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6193      	str	r3, [r2, #24]
 800320c:	4b4a      	ldr	r3, [pc, #296]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003218:	4a48      	ldr	r2, [pc, #288]	; (800333c <HAL_GPIO_Init+0x2bc>)
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	3302      	adds	r3, #2
 8003220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003224:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	220f      	movs	r2, #15
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a40      	ldr	r2, [pc, #256]	; (8003340 <HAL_GPIO_Init+0x2c0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d013      	beq.n	800326c <HAL_GPIO_Init+0x1ec>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a3f      	ldr	r2, [pc, #252]	; (8003344 <HAL_GPIO_Init+0x2c4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00d      	beq.n	8003268 <HAL_GPIO_Init+0x1e8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a3e      	ldr	r2, [pc, #248]	; (8003348 <HAL_GPIO_Init+0x2c8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d007      	beq.n	8003264 <HAL_GPIO_Init+0x1e4>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a3d      	ldr	r2, [pc, #244]	; (800334c <HAL_GPIO_Init+0x2cc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d101      	bne.n	8003260 <HAL_GPIO_Init+0x1e0>
 800325c:	2303      	movs	r3, #3
 800325e:	e006      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 8003260:	2304      	movs	r3, #4
 8003262:	e004      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 8003264:	2302      	movs	r3, #2
 8003266:	e002      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 800326c:	2300      	movs	r3, #0
 800326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003270:	f002 0203 	and.w	r2, r2, #3
 8003274:	0092      	lsls	r2, r2, #2
 8003276:	4093      	lsls	r3, r2
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800327e:	492f      	ldr	r1, [pc, #188]	; (800333c <HAL_GPIO_Init+0x2bc>)
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	3302      	adds	r3, #2
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d006      	beq.n	80032a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003298:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	492c      	ldr	r1, [pc, #176]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	608b      	str	r3, [r1, #8]
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032a6:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	4928      	ldr	r1, [pc, #160]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d006      	beq.n	80032ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032c0:	4b23      	ldr	r3, [pc, #140]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	4922      	ldr	r1, [pc, #136]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60cb      	str	r3, [r1, #12]
 80032cc:	e006      	b.n	80032dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	491e      	ldr	r1, [pc, #120]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032d8:	4013      	ands	r3, r2
 80032da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d006      	beq.n	80032f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032e8:	4b19      	ldr	r3, [pc, #100]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	4918      	ldr	r1, [pc, #96]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
 80032f4:	e006      	b.n	8003304 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032f6:	4b16      	ldr	r3, [pc, #88]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	4914      	ldr	r1, [pc, #80]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 8003300:	4013      	ands	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d021      	beq.n	8003354 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	490e      	ldr	r1, [pc, #56]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]
 800331c:	e021      	b.n	8003362 <HAL_GPIO_Init+0x2e2>
 800331e:	bf00      	nop
 8003320:	10320000 	.word	0x10320000
 8003324:	10310000 	.word	0x10310000
 8003328:	10220000 	.word	0x10220000
 800332c:	10210000 	.word	0x10210000
 8003330:	10120000 	.word	0x10120000
 8003334:	10110000 	.word	0x10110000
 8003338:	40021000 	.word	0x40021000
 800333c:	40010000 	.word	0x40010000
 8003340:	40010800 	.word	0x40010800
 8003344:	40010c00 	.word	0x40010c00
 8003348:	40011000 	.word	0x40011000
 800334c:	40011400 	.word	0x40011400
 8003350:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_GPIO_Init+0x304>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	43db      	mvns	r3, r3
 800335c:	4909      	ldr	r1, [pc, #36]	; (8003384 <HAL_GPIO_Init+0x304>)
 800335e:	4013      	ands	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	3301      	adds	r3, #1
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	fa22 f303 	lsr.w	r3, r2, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	f47f ae8e 	bne.w	8003094 <HAL_GPIO_Init+0x14>
  }
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	372c      	adds	r7, #44	; 0x2c
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	40010400 	.word	0x40010400

08003388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	807b      	strh	r3, [r7, #2]
 8003394:	4613      	mov	r3, r2
 8003396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003398:	787b      	ldrb	r3, [r7, #1]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800339e:	887a      	ldrh	r2, [r7, #2]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033a4:	e003      	b.n	80033ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033a6:	887b      	ldrh	r3, [r7, #2]
 80033a8:	041a      	lsls	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	611a      	str	r2, [r3, #16]
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e12b      	b.n	8003622 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fe fc9e 	bl	8001d20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2224      	movs	r2, #36	; 0x24
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800340a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800341a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800341c:	f000 fcda 	bl	8003dd4 <HAL_RCC_GetPCLK1Freq>
 8003420:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4a81      	ldr	r2, [pc, #516]	; (800362c <HAL_I2C_Init+0x274>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d807      	bhi.n	800343c <HAL_I2C_Init+0x84>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4a80      	ldr	r2, [pc, #512]	; (8003630 <HAL_I2C_Init+0x278>)
 8003430:	4293      	cmp	r3, r2
 8003432:	bf94      	ite	ls
 8003434:	2301      	movls	r3, #1
 8003436:	2300      	movhi	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	e006      	b.n	800344a <HAL_I2C_Init+0x92>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4a7d      	ldr	r2, [pc, #500]	; (8003634 <HAL_I2C_Init+0x27c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	bf94      	ite	ls
 8003444:	2301      	movls	r3, #1
 8003446:	2300      	movhi	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e0e7      	b.n	8003622 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a78      	ldr	r2, [pc, #480]	; (8003638 <HAL_I2C_Init+0x280>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	0c9b      	lsrs	r3, r3, #18
 800345c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4a6a      	ldr	r2, [pc, #424]	; (800362c <HAL_I2C_Init+0x274>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d802      	bhi.n	800348c <HAL_I2C_Init+0xd4>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	3301      	adds	r3, #1
 800348a:	e009      	b.n	80034a0 <HAL_I2C_Init+0xe8>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	4a69      	ldr	r2, [pc, #420]	; (800363c <HAL_I2C_Init+0x284>)
 8003498:	fba2 2303 	umull	r2, r3, r2, r3
 800349c:	099b      	lsrs	r3, r3, #6
 800349e:	3301      	adds	r3, #1
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	495c      	ldr	r1, [pc, #368]	; (800362c <HAL_I2C_Init+0x274>)
 80034bc:	428b      	cmp	r3, r1
 80034be:	d819      	bhi.n	80034f4 <HAL_I2C_Init+0x13c>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1e59      	subs	r1, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ce:	1c59      	adds	r1, r3, #1
 80034d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034d4:	400b      	ands	r3, r1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_I2C_Init+0x138>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1e59      	subs	r1, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034e8:	3301      	adds	r3, #1
 80034ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ee:	e051      	b.n	8003594 <HAL_I2C_Init+0x1dc>
 80034f0:	2304      	movs	r3, #4
 80034f2:	e04f      	b.n	8003594 <HAL_I2C_Init+0x1dc>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d111      	bne.n	8003520 <HAL_I2C_Init+0x168>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1e58      	subs	r0, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6859      	ldr	r1, [r3, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	440b      	add	r3, r1
 800350a:	fbb0 f3f3 	udiv	r3, r0, r3
 800350e:	3301      	adds	r3, #1
 8003510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf0c      	ite	eq
 8003518:	2301      	moveq	r3, #1
 800351a:	2300      	movne	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	e012      	b.n	8003546 <HAL_I2C_Init+0x18e>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1e58      	subs	r0, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	0099      	lsls	r1, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	fbb0 f3f3 	udiv	r3, r0, r3
 8003536:	3301      	adds	r3, #1
 8003538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_I2C_Init+0x196>
 800354a:	2301      	movs	r3, #1
 800354c:	e022      	b.n	8003594 <HAL_I2C_Init+0x1dc>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10e      	bne.n	8003574 <HAL_I2C_Init+0x1bc>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1e58      	subs	r0, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6859      	ldr	r1, [r3, #4]
 800355e:	460b      	mov	r3, r1
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	440b      	add	r3, r1
 8003564:	fbb0 f3f3 	udiv	r3, r0, r3
 8003568:	3301      	adds	r3, #1
 800356a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003572:	e00f      	b.n	8003594 <HAL_I2C_Init+0x1dc>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1e58      	subs	r0, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	0099      	lsls	r1, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	fbb0 f3f3 	udiv	r3, r0, r3
 800358a:	3301      	adds	r3, #1
 800358c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	6809      	ldr	r1, [r1, #0]
 8003598:	4313      	orrs	r3, r2
 800359a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69da      	ldr	r2, [r3, #28]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6911      	ldr	r1, [r2, #16]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68d2      	ldr	r2, [r2, #12]
 80035ce:	4311      	orrs	r1, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	000186a0 	.word	0x000186a0
 8003630:	001e847f 	.word	0x001e847f
 8003634:	003d08ff 	.word	0x003d08ff
 8003638:	431bde83 	.word	0x431bde83
 800363c:	10624dd3 	.word	0x10624dd3

08003640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e272      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 8087 	beq.w	800376e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003660:	4b92      	ldr	r3, [pc, #584]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b04      	cmp	r3, #4
 800366a:	d00c      	beq.n	8003686 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800366c:	4b8f      	ldr	r3, [pc, #572]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b08      	cmp	r3, #8
 8003676:	d112      	bne.n	800369e <HAL_RCC_OscConfig+0x5e>
 8003678:	4b8c      	ldr	r3, [pc, #560]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003684:	d10b      	bne.n	800369e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003686:	4b89      	ldr	r3, [pc, #548]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d06c      	beq.n	800376c <HAL_RCC_OscConfig+0x12c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d168      	bne.n	800376c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e24c      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_OscConfig+0x76>
 80036a8:	4b80      	ldr	r3, [pc, #512]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a7f      	ldr	r2, [pc, #508]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 80036ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	e02e      	b.n	8003714 <HAL_RCC_OscConfig+0xd4>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x98>
 80036be:	4b7b      	ldr	r3, [pc, #492]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a7a      	ldr	r2, [pc, #488]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4b78      	ldr	r3, [pc, #480]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a77      	ldr	r2, [pc, #476]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 80036d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e01d      	b.n	8003714 <HAL_RCC_OscConfig+0xd4>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCC_OscConfig+0xbc>
 80036e2:	4b72      	ldr	r3, [pc, #456]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a71      	ldr	r2, [pc, #452]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 80036e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	4b6f      	ldr	r3, [pc, #444]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a6e      	ldr	r2, [pc, #440]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	e00b      	b.n	8003714 <HAL_RCC_OscConfig+0xd4>
 80036fc:	4b6b      	ldr	r3, [pc, #428]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a6a      	ldr	r2, [pc, #424]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 8003702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b68      	ldr	r3, [pc, #416]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a67      	ldr	r2, [pc, #412]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 800370e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003712:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d013      	beq.n	8003744 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe fdf2 	bl	8002304 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003724:	f7fe fdee 	bl	8002304 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e200      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b5d      	ldr	r3, [pc, #372]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0xe4>
 8003742:	e014      	b.n	800376e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe fdde 	bl	8002304 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800374c:	f7fe fdda 	bl	8002304 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	; 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e1ec      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375e:	4b53      	ldr	r3, [pc, #332]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x10c>
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d063      	beq.n	8003842 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800377a:	4b4c      	ldr	r3, [pc, #304]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003786:	4b49      	ldr	r3, [pc, #292]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b08      	cmp	r3, #8
 8003790:	d11c      	bne.n	80037cc <HAL_RCC_OscConfig+0x18c>
 8003792:	4b46      	ldr	r3, [pc, #280]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d116      	bne.n	80037cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379e:	4b43      	ldr	r3, [pc, #268]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_RCC_OscConfig+0x176>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d001      	beq.n	80037b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e1c0      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b6:	4b3d      	ldr	r3, [pc, #244]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4939      	ldr	r1, [pc, #228]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ca:	e03a      	b.n	8003842 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d020      	beq.n	8003816 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d4:	4b36      	ldr	r3, [pc, #216]	; (80038b0 <HAL_RCC_OscConfig+0x270>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037da:	f7fe fd93 	bl	8002304 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e2:	f7fe fd8f 	bl	8002304 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e1a1      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f4:	4b2d      	ldr	r3, [pc, #180]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003800:	4b2a      	ldr	r3, [pc, #168]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4927      	ldr	r1, [pc, #156]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 8003810:	4313      	orrs	r3, r2
 8003812:	600b      	str	r3, [r1, #0]
 8003814:	e015      	b.n	8003842 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003816:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <HAL_RCC_OscConfig+0x270>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe fd72 	bl	8002304 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003824:	f7fe fd6e 	bl	8002304 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e180      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003836:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d03a      	beq.n	80038c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d019      	beq.n	800388a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003856:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 8003858:	2201      	movs	r2, #1
 800385a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385c:	f7fe fd52 	bl	8002304 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003864:	f7fe fd4e 	bl	8002304 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e160      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003876:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <HAL_RCC_OscConfig+0x26c>)
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003882:	2001      	movs	r0, #1
 8003884:	f000 fafe 	bl	8003e84 <RCC_Delay>
 8003888:	e01c      	b.n	80038c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800388a:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <HAL_RCC_OscConfig+0x274>)
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003890:	f7fe fd38 	bl	8002304 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003896:	e00f      	b.n	80038b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003898:	f7fe fd34 	bl	8002304 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d908      	bls.n	80038b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e146      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000
 80038b0:	42420000 	.word	0x42420000
 80038b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b8:	4b92      	ldr	r3, [pc, #584]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e9      	bne.n	8003898 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80a6 	beq.w	8003a1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d2:	2300      	movs	r3, #0
 80038d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d6:	4b8b      	ldr	r3, [pc, #556]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10d      	bne.n	80038fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e2:	4b88      	ldr	r3, [pc, #544]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	4a87      	ldr	r2, [pc, #540]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ec:	61d3      	str	r3, [r2, #28]
 80038ee:	4b85      	ldr	r3, [pc, #532]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038fa:	2301      	movs	r3, #1
 80038fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fe:	4b82      	ldr	r3, [pc, #520]	; (8003b08 <HAL_RCC_OscConfig+0x4c8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	2b00      	cmp	r3, #0
 8003908:	d118      	bne.n	800393c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800390a:	4b7f      	ldr	r3, [pc, #508]	; (8003b08 <HAL_RCC_OscConfig+0x4c8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a7e      	ldr	r2, [pc, #504]	; (8003b08 <HAL_RCC_OscConfig+0x4c8>)
 8003910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003916:	f7fe fcf5 	bl	8002304 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391e:	f7fe fcf1 	bl	8002304 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b64      	cmp	r3, #100	; 0x64
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e103      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	4b75      	ldr	r3, [pc, #468]	; (8003b08 <HAL_RCC_OscConfig+0x4c8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d106      	bne.n	8003952 <HAL_RCC_OscConfig+0x312>
 8003944:	4b6f      	ldr	r3, [pc, #444]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	4a6e      	ldr	r2, [pc, #440]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	6213      	str	r3, [r2, #32]
 8003950:	e02d      	b.n	80039ae <HAL_RCC_OscConfig+0x36e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0x334>
 800395a:	4b6a      	ldr	r3, [pc, #424]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	4a69      	ldr	r2, [pc, #420]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	6213      	str	r3, [r2, #32]
 8003966:	4b67      	ldr	r3, [pc, #412]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	4a66      	ldr	r2, [pc, #408]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	f023 0304 	bic.w	r3, r3, #4
 8003970:	6213      	str	r3, [r2, #32]
 8003972:	e01c      	b.n	80039ae <HAL_RCC_OscConfig+0x36e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b05      	cmp	r3, #5
 800397a:	d10c      	bne.n	8003996 <HAL_RCC_OscConfig+0x356>
 800397c:	4b61      	ldr	r3, [pc, #388]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	4a60      	ldr	r2, [pc, #384]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003982:	f043 0304 	orr.w	r3, r3, #4
 8003986:	6213      	str	r3, [r2, #32]
 8003988:	4b5e      	ldr	r3, [pc, #376]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	4a5d      	ldr	r2, [pc, #372]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6213      	str	r3, [r2, #32]
 8003994:	e00b      	b.n	80039ae <HAL_RCC_OscConfig+0x36e>
 8003996:	4b5b      	ldr	r3, [pc, #364]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	4a5a      	ldr	r2, [pc, #360]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	6213      	str	r3, [r2, #32]
 80039a2:	4b58      	ldr	r3, [pc, #352]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	4a57      	ldr	r2, [pc, #348]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	f023 0304 	bic.w	r3, r3, #4
 80039ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d015      	beq.n	80039e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b6:	f7fe fca5 	bl	8002304 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039bc:	e00a      	b.n	80039d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039be:	f7fe fca1 	bl	8002304 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e0b1      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d4:	4b4b      	ldr	r3, [pc, #300]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0ee      	beq.n	80039be <HAL_RCC_OscConfig+0x37e>
 80039e0:	e014      	b.n	8003a0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e2:	f7fe fc8f 	bl	8002304 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e8:	e00a      	b.n	8003a00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fe fc8b 	bl	8002304 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e09b      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a00:	4b40      	ldr	r3, [pc, #256]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1ee      	bne.n	80039ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d105      	bne.n	8003a1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a12:	4b3c      	ldr	r3, [pc, #240]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	4a3b      	ldr	r2, [pc, #236]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8087 	beq.w	8003b36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a28:	4b36      	ldr	r3, [pc, #216]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 030c 	and.w	r3, r3, #12
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d061      	beq.n	8003af8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d146      	bne.n	8003aca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3c:	4b33      	ldr	r3, [pc, #204]	; (8003b0c <HAL_RCC_OscConfig+0x4cc>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a42:	f7fe fc5f 	bl	8002304 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4a:	f7fe fc5b 	bl	8002304 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e06d      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5c:	4b29      	ldr	r3, [pc, #164]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f0      	bne.n	8003a4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a70:	d108      	bne.n	8003a84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a72:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	4921      	ldr	r1, [pc, #132]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a84:	4b1f      	ldr	r3, [pc, #124]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a19      	ldr	r1, [r3, #32]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	430b      	orrs	r3, r1
 8003a96:	491b      	ldr	r1, [pc, #108]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <HAL_RCC_OscConfig+0x4cc>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa2:	f7fe fc2f 	bl	8002304 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aaa:	f7fe fc2b 	bl	8002304 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e03d      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003abc:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x46a>
 8003ac8:	e035      	b.n	8003b36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aca:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <HAL_RCC_OscConfig+0x4cc>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7fe fc18 	bl	8002304 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fe fc14 	bl	8002304 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e026      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x498>
 8003af6:	e01e      	b.n	8003b36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d107      	bne.n	8003b10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e019      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
 8003b04:	40021000 	.word	0x40021000
 8003b08:	40007000 	.word	0x40007000
 8003b0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCC_OscConfig+0x500>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d106      	bne.n	8003b32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d001      	beq.n	8003b36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000

08003b44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0d0      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b58:	4b6a      	ldr	r3, [pc, #424]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d910      	bls.n	8003b88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b67      	ldr	r3, [pc, #412]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 0207 	bic.w	r2, r3, #7
 8003b6e:	4965      	ldr	r1, [pc, #404]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b63      	ldr	r3, [pc, #396]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0b8      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d020      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba0:	4b59      	ldr	r3, [pc, #356]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4a58      	ldr	r2, [pc, #352]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003baa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb8:	4b53      	ldr	r3, [pc, #332]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4a52      	ldr	r2, [pc, #328]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc4:	4b50      	ldr	r3, [pc, #320]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	494d      	ldr	r1, [pc, #308]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d040      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d107      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	4b47      	ldr	r3, [pc, #284]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d115      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e07f      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c02:	4b41      	ldr	r3, [pc, #260]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e073      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c12:	4b3d      	ldr	r3, [pc, #244]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e06b      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c22:	4b39      	ldr	r3, [pc, #228]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f023 0203 	bic.w	r2, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4936      	ldr	r1, [pc, #216]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c34:	f7fe fb66 	bl	8002304 <HAL_GetTick>
 8003c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c3c:	f7fe fb62 	bl	8002304 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e053      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c52:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 020c 	and.w	r2, r3, #12
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d1eb      	bne.n	8003c3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c64:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d210      	bcs.n	8003c94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 0207 	bic.w	r2, r3, #7
 8003c7a:	4922      	ldr	r1, [pc, #136]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e032      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca0:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4916      	ldr	r1, [pc, #88]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cbe:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	490e      	ldr	r1, [pc, #56]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cd2:	f000 f821 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	490a      	ldr	r1, [pc, #40]	; (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ce4:	5ccb      	ldrb	r3, [r1, r3]
 8003ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cea:	4a09      	ldr	r2, [pc, #36]	; (8003d10 <HAL_RCC_ClockConfig+0x1cc>)
 8003cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <HAL_RCC_ClockConfig+0x1d0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe f910 	bl	8001f18 <HAL_InitTick>

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40022000 	.word	0x40022000
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	0800673c 	.word	0x0800673c
 8003d10:	20000000 	.word	0x20000000
 8003d14:	20000004 	.word	0x20000004

08003d18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d32:	4b1e      	ldr	r3, [pc, #120]	; (8003dac <HAL_RCC_GetSysClockFreq+0x94>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d002      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x30>
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d003      	beq.n	8003d4e <HAL_RCC_GetSysClockFreq+0x36>
 8003d46:	e027      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d48:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d4a:	613b      	str	r3, [r7, #16]
      break;
 8003d4c:	e027      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	0c9b      	lsrs	r3, r3, #18
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d58:	5cd3      	ldrb	r3, [r2, r3]
 8003d5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d010      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <HAL_RCC_GetSysClockFreq+0x94>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	0c5b      	lsrs	r3, r3, #17
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	4a11      	ldr	r2, [pc, #68]	; (8003db8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d72:	5cd3      	ldrb	r3, [r2, r3]
 8003d74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a0d      	ldr	r2, [pc, #52]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d7a:	fb03 f202 	mul.w	r2, r3, r2
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e004      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a0c      	ldr	r2, [pc, #48]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	613b      	str	r3, [r7, #16]
      break;
 8003d96:	e002      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d9a:	613b      	str	r3, [r7, #16]
      break;
 8003d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9e:	693b      	ldr	r3, [r7, #16]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40021000 	.word	0x40021000
 8003db0:	007a1200 	.word	0x007a1200
 8003db4:	08006754 	.word	0x08006754
 8003db8:	08006764 	.word	0x08006764
 8003dbc:	003d0900 	.word	0x003d0900

08003dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc4:	4b02      	ldr	r3, [pc, #8]	; (8003dd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr
 8003dd0:	20000000 	.word	0x20000000

08003dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dd8:	f7ff fff2 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	0a1b      	lsrs	r3, r3, #8
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4903      	ldr	r1, [pc, #12]	; (8003df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	0800674c 	.word	0x0800674c

08003dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e00:	f7ff ffde 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	0adb      	lsrs	r3, r3, #11
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	4903      	ldr	r1, [pc, #12]	; (8003e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e12:	5ccb      	ldrb	r3, [r1, r3]
 8003e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	0800674c 	.word	0x0800674c

08003e24 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	220f      	movs	r2, #15
 8003e32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <HAL_RCC_GetClockConfig+0x58>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 0203 	and.w	r2, r3, #3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e40:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <HAL_RCC_GetClockConfig+0x58>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_RCC_GetClockConfig+0x58>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e58:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <HAL_RCC_GetClockConfig+0x58>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	08db      	lsrs	r3, r3, #3
 8003e5e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCC_GetClockConfig+0x5c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0207 	and.w	r2, r3, #7
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40022000 	.word	0x40022000

08003e84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <RCC_Delay+0x34>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <RCC_Delay+0x38>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	0a5b      	lsrs	r3, r3, #9
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ea0:	bf00      	nop
  }
  while (Delay --);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1e5a      	subs	r2, r3, #1
 8003ea6:	60fa      	str	r2, [r7, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f9      	bne.n	8003ea0 <RCC_Delay+0x1c>
}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr
 8003eb8:	20000000 	.word	0x20000000
 8003ebc:	10624dd3 	.word	0x10624dd3

08003ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d07d      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003edc:	2300      	movs	r3, #0
 8003ede:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee0:	4b4f      	ldr	r3, [pc, #316]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10d      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eec:	4b4c      	ldr	r3, [pc, #304]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	4a4b      	ldr	r2, [pc, #300]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	61d3      	str	r3, [r2, #28]
 8003ef8:	4b49      	ldr	r3, [pc, #292]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f04:	2301      	movs	r3, #1
 8003f06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f08:	4b46      	ldr	r3, [pc, #280]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d118      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f14:	4b43      	ldr	r3, [pc, #268]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a42      	ldr	r2, [pc, #264]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f20:	f7fe f9f0 	bl	8002304 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f26:	e008      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f28:	f7fe f9ec 	bl	8002304 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	; 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e06d      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3a:	4b3a      	ldr	r3, [pc, #232]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f46:	4b36      	ldr	r3, [pc, #216]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d02e      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d027      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f64:	4b2e      	ldr	r3, [pc, #184]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f6e:	4b2e      	ldr	r3, [pc, #184]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f74:	4b2c      	ldr	r3, [pc, #176]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f7a:	4a29      	ldr	r2, [pc, #164]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d014      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fe f9bb 	bl	8002304 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f90:	e00a      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f92:	f7fe f9b7 	bl	8002304 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e036      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa8:	4b1d      	ldr	r3, [pc, #116]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ee      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fb4:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4917      	ldr	r1, [pc, #92]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d105      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fcc:	4b14      	ldr	r3, [pc, #80]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	4a13      	ldr	r2, [pc, #76]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fe4:	4b0e      	ldr	r3, [pc, #56]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	490b      	ldr	r1, [pc, #44]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004002:	4b07      	ldr	r3, [pc, #28]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	4904      	ldr	r1, [pc, #16]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004010:	4313      	orrs	r3, r2
 8004012:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40021000 	.word	0x40021000
 8004024:	40007000 	.word	0x40007000
 8004028:	42420440 	.word	0x42420440

0800402c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e041      	b.n	80040c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d106      	bne.n	8004058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fd fed0 	bl	8001df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3304      	adds	r3, #4
 8004068:	4619      	mov	r1, r3
 800406a:	4610      	mov	r0, r2
 800406c:	f000 fc8c 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d001      	beq.n	80040e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e03a      	b.n	800415a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a18      	ldr	r2, [pc, #96]	; (8004164 <HAL_TIM_Base_Start_IT+0x98>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00e      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x58>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410e:	d009      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x58>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a14      	ldr	r2, [pc, #80]	; (8004168 <HAL_TIM_Base_Start_IT+0x9c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x58>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a13      	ldr	r2, [pc, #76]	; (800416c <HAL_TIM_Base_Start_IT+0xa0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d111      	bne.n	8004148 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b06      	cmp	r3, #6
 8004134:	d010      	beq.n	8004158 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0201 	orr.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004146:	e007      	b.n	8004158 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800

08004170 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e041      	b.n	8004206 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fd fe12 	bl	8001dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4619      	mov	r1, r3
 80041ae:	4610      	mov	r0, r2
 80041b0:	f000 fbea 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <HAL_TIM_PWM_Start+0x24>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	e022      	b.n	800427a <HAL_TIM_PWM_Start+0x6a>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b04      	cmp	r3, #4
 8004238:	d109      	bne.n	800424e <HAL_TIM_PWM_Start+0x3e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b01      	cmp	r3, #1
 8004244:	bf14      	ite	ne
 8004246:	2301      	movne	r3, #1
 8004248:	2300      	moveq	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	e015      	b.n	800427a <HAL_TIM_PWM_Start+0x6a>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d109      	bne.n	8004268 <HAL_TIM_PWM_Start+0x58>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	bf14      	ite	ne
 8004260:	2301      	movne	r3, #1
 8004262:	2300      	moveq	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	e008      	b.n	800427a <HAL_TIM_PWM_Start+0x6a>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e05e      	b.n	8004340 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d104      	bne.n	8004292 <HAL_TIM_PWM_Start+0x82>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004290:	e013      	b.n	80042ba <HAL_TIM_PWM_Start+0xaa>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b04      	cmp	r3, #4
 8004296:	d104      	bne.n	80042a2 <HAL_TIM_PWM_Start+0x92>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a0:	e00b      	b.n	80042ba <HAL_TIM_PWM_Start+0xaa>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d104      	bne.n	80042b2 <HAL_TIM_PWM_Start+0xa2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b0:	e003      	b.n	80042ba <HAL_TIM_PWM_Start+0xaa>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2202      	movs	r2, #2
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2201      	movs	r2, #1
 80042c0:	6839      	ldr	r1, [r7, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fde0 	bl	8004e88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1e      	ldr	r2, [pc, #120]	; (8004348 <HAL_TIM_PWM_Start+0x138>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d107      	bne.n	80042e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a18      	ldr	r2, [pc, #96]	; (8004348 <HAL_TIM_PWM_Start+0x138>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00e      	beq.n	800430a <HAL_TIM_PWM_Start+0xfa>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f4:	d009      	beq.n	800430a <HAL_TIM_PWM_Start+0xfa>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a14      	ldr	r2, [pc, #80]	; (800434c <HAL_TIM_PWM_Start+0x13c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d004      	beq.n	800430a <HAL_TIM_PWM_Start+0xfa>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a12      	ldr	r2, [pc, #72]	; (8004350 <HAL_TIM_PWM_Start+0x140>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d111      	bne.n	800432e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b06      	cmp	r3, #6
 800431a:	d010      	beq.n	800433e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432c:	e007      	b.n	800433e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0201 	orr.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40012c00 	.word	0x40012c00
 800434c:	40000400 	.word	0x40000400
 8004350:	40000800 	.word	0x40000800

08004354 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2200      	movs	r2, #0
 8004364:	6839      	ldr	r1, [r7, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fd8e 	bl	8004e88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a29      	ldr	r2, [pc, #164]	; (8004418 <HAL_TIM_PWM_Stop+0xc4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d117      	bne.n	80043a6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6a1a      	ldr	r2, [r3, #32]
 800437c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004380:	4013      	ands	r3, r2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10f      	bne.n	80043a6 <HAL_TIM_PWM_Stop+0x52>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6a1a      	ldr	r2, [r3, #32]
 800438c:	f240 4344 	movw	r3, #1092	; 0x444
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d107      	bne.n	80043a6 <HAL_TIM_PWM_Stop+0x52>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6a1a      	ldr	r2, [r3, #32]
 80043ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10f      	bne.n	80043d6 <HAL_TIM_PWM_Stop+0x82>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a1a      	ldr	r2, [r3, #32]
 80043bc:	f240 4344 	movw	r3, #1092	; 0x444
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d107      	bne.n	80043d6 <HAL_TIM_PWM_Stop+0x82>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0201 	bic.w	r2, r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <HAL_TIM_PWM_Stop+0x92>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e4:	e013      	b.n	800440e <HAL_TIM_PWM_Stop+0xba>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_PWM_Stop+0xa2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f4:	e00b      	b.n	800440e <HAL_TIM_PWM_Stop+0xba>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_PWM_Stop+0xb2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004404:	e003      	b.n	800440e <HAL_TIM_PWM_Stop+0xba>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40012c00 	.word	0x40012c00

0800441c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b02      	cmp	r3, #2
 8004430:	d122      	bne.n	8004478 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b02      	cmp	r3, #2
 800443e:	d11b      	bne.n	8004478 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0202 	mvn.w	r2, #2
 8004448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fa76 	bl	8004950 <HAL_TIM_IC_CaptureCallback>
 8004464:	e005      	b.n	8004472 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fa69 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fa78 	bl	8004962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b04      	cmp	r3, #4
 8004484:	d122      	bne.n	80044cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b04      	cmp	r3, #4
 8004492:	d11b      	bne.n	80044cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0204 	mvn.w	r2, #4
 800449c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2202      	movs	r2, #2
 80044a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fa4c 	bl	8004950 <HAL_TIM_IC_CaptureCallback>
 80044b8:	e005      	b.n	80044c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fa3f 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fa4e 	bl	8004962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d122      	bne.n	8004520 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d11b      	bne.n	8004520 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0208 	mvn.w	r2, #8
 80044f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2204      	movs	r2, #4
 80044f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa22 	bl	8004950 <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fa15 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fa24 	bl	8004962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b10      	cmp	r3, #16
 800452c:	d122      	bne.n	8004574 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b10      	cmp	r3, #16
 800453a:	d11b      	bne.n	8004574 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0210 	mvn.w	r2, #16
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2208      	movs	r2, #8
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f9f8 	bl	8004950 <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f9eb 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f9fa 	bl	8004962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b01      	cmp	r3, #1
 8004580:	d10e      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b01      	cmp	r3, #1
 800458e:	d107      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0201 	mvn.w	r2, #1
 8004598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fc fff0 	bl	8001580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b80      	cmp	r3, #128	; 0x80
 80045ac:	d10e      	bne.n	80045cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b8:	2b80      	cmp	r3, #128	; 0x80
 80045ba:	d107      	bne.n	80045cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fce9 	bl	8004f9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b40      	cmp	r3, #64	; 0x40
 80045d8:	d10e      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	d107      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f9be 	bl	8004974 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b20      	cmp	r3, #32
 8004604:	d10e      	bne.n	8004624 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b20      	cmp	r3, #32
 8004612:	d107      	bne.n	8004624 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0220 	mvn.w	r2, #32
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fcb4 	bl	8004f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004646:	2302      	movs	r3, #2
 8004648:	e0ae      	b.n	80047a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b0c      	cmp	r3, #12
 8004656:	f200 809f 	bhi.w	8004798 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800465a:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800465c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004660:	08004695 	.word	0x08004695
 8004664:	08004799 	.word	0x08004799
 8004668:	08004799 	.word	0x08004799
 800466c:	08004799 	.word	0x08004799
 8004670:	080046d5 	.word	0x080046d5
 8004674:	08004799 	.word	0x08004799
 8004678:	08004799 	.word	0x08004799
 800467c:	08004799 	.word	0x08004799
 8004680:	08004717 	.word	0x08004717
 8004684:	08004799 	.word	0x08004799
 8004688:	08004799 	.word	0x08004799
 800468c:	08004799 	.word	0x08004799
 8004690:	08004757 	.word	0x08004757
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f9d6 	bl	8004a4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0208 	orr.w	r2, r2, #8
 80046ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0204 	bic.w	r2, r2, #4
 80046be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6999      	ldr	r1, [r3, #24]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	619a      	str	r2, [r3, #24]
      break;
 80046d2:	e064      	b.n	800479e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fa1c 	bl	8004b18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6999      	ldr	r1, [r3, #24]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	021a      	lsls	r2, r3, #8
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	619a      	str	r2, [r3, #24]
      break;
 8004714:	e043      	b.n	800479e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fa65 	bl	8004bec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69da      	ldr	r2, [r3, #28]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0208 	orr.w	r2, r2, #8
 8004730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69da      	ldr	r2, [r3, #28]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0204 	bic.w	r2, r2, #4
 8004740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69d9      	ldr	r1, [r3, #28]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	61da      	str	r2, [r3, #28]
      break;
 8004754:	e023      	b.n	800479e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	4618      	mov	r0, r3
 800475e:	f000 faaf 	bl	8004cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69d9      	ldr	r1, [r3, #28]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	021a      	lsls	r2, r3, #8
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	61da      	str	r2, [r3, #28]
      break;
 8004796:	e002      	b.n	800479e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	75fb      	strb	r3, [r7, #23]
      break;
 800479c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_TIM_ConfigClockSource+0x1c>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e0b4      	b.n	8004936 <HAL_TIM_ConfigClockSource+0x186>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004804:	d03e      	beq.n	8004884 <HAL_TIM_ConfigClockSource+0xd4>
 8004806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480a:	f200 8087 	bhi.w	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004812:	f000 8086 	beq.w	8004922 <HAL_TIM_ConfigClockSource+0x172>
 8004816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481a:	d87f      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800481c:	2b70      	cmp	r3, #112	; 0x70
 800481e:	d01a      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0xa6>
 8004820:	2b70      	cmp	r3, #112	; 0x70
 8004822:	d87b      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 8004824:	2b60      	cmp	r3, #96	; 0x60
 8004826:	d050      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x11a>
 8004828:	2b60      	cmp	r3, #96	; 0x60
 800482a:	d877      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b50      	cmp	r3, #80	; 0x50
 800482e:	d03c      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0xfa>
 8004830:	2b50      	cmp	r3, #80	; 0x50
 8004832:	d873      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d058      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0x13a>
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d86f      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800483c:	2b30      	cmp	r3, #48	; 0x30
 800483e:	d064      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004840:	2b30      	cmp	r3, #48	; 0x30
 8004842:	d86b      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b20      	cmp	r3, #32
 8004846:	d060      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004848:	2b20      	cmp	r3, #32
 800484a:	d867      	bhi.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d05c      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004850:	2b10      	cmp	r3, #16
 8004852:	d05a      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x15a>
 8004854:	e062      	b.n	800491c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004866:	f000 faf0 	bl	8004e4a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004878:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	609a      	str	r2, [r3, #8]
      break;
 8004882:	e04f      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004894:	f000 fad9 	bl	8004e4a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048a6:	609a      	str	r2, [r3, #8]
      break;
 80048a8:	e03c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b6:	461a      	mov	r2, r3
 80048b8:	f000 fa50 	bl	8004d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2150      	movs	r1, #80	; 0x50
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 faa7 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 80048c8:	e02c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048d6:	461a      	mov	r2, r3
 80048d8:	f000 fa6e 	bl	8004db8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2160      	movs	r1, #96	; 0x60
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fa97 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 80048e8:	e01c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f6:	461a      	mov	r2, r3
 80048f8:	f000 fa30 	bl	8004d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2140      	movs	r1, #64	; 0x40
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fa87 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 8004908:	e00c      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f000 fa7e 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 800491a:	e003      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
      break;
 8004920:	e000      	b.n	8004924 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr

08004950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr

08004962 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr
	...

08004988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a29      	ldr	r2, [pc, #164]	; (8004a40 <TIM_Base_SetConfig+0xb8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00b      	beq.n	80049b8 <TIM_Base_SetConfig+0x30>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d007      	beq.n	80049b8 <TIM_Base_SetConfig+0x30>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a26      	ldr	r2, [pc, #152]	; (8004a44 <TIM_Base_SetConfig+0xbc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d003      	beq.n	80049b8 <TIM_Base_SetConfig+0x30>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a25      	ldr	r2, [pc, #148]	; (8004a48 <TIM_Base_SetConfig+0xc0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d108      	bne.n	80049ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1c      	ldr	r2, [pc, #112]	; (8004a40 <TIM_Base_SetConfig+0xb8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00b      	beq.n	80049ea <TIM_Base_SetConfig+0x62>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d8:	d007      	beq.n	80049ea <TIM_Base_SetConfig+0x62>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a19      	ldr	r2, [pc, #100]	; (8004a44 <TIM_Base_SetConfig+0xbc>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d003      	beq.n	80049ea <TIM_Base_SetConfig+0x62>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <TIM_Base_SetConfig+0xc0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d108      	bne.n	80049fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a07      	ldr	r2, [pc, #28]	; (8004a40 <TIM_Base_SetConfig+0xb8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d103      	bne.n	8004a30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	615a      	str	r2, [r3, #20]
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	40012c00 	.word	0x40012c00
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800

08004a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f023 0201 	bic.w	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0303 	bic.w	r3, r3, #3
 8004a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f023 0302 	bic.w	r3, r3, #2
 8004a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a1c      	ldr	r2, [pc, #112]	; (8004b14 <TIM_OC1_SetConfig+0xc8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d10c      	bne.n	8004ac2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f023 0308 	bic.w	r3, r3, #8
 8004aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f023 0304 	bic.w	r3, r3, #4
 8004ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a13      	ldr	r2, [pc, #76]	; (8004b14 <TIM_OC1_SetConfig+0xc8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d111      	bne.n	8004aee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	621a      	str	r2, [r3, #32]
}
 8004b08:	bf00      	nop
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40012c00 	.word	0x40012c00

08004b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f023 0210 	bic.w	r2, r3, #16
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f023 0320 	bic.w	r3, r3, #32
 8004b62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a1d      	ldr	r2, [pc, #116]	; (8004be8 <TIM_OC2_SetConfig+0xd0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d10d      	bne.n	8004b94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a14      	ldr	r2, [pc, #80]	; (8004be8 <TIM_OC2_SetConfig+0xd0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d113      	bne.n	8004bc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004baa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	621a      	str	r2, [r3, #32]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr
 8004be8:	40012c00 	.word	0x40012c00

08004bec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0303 	bic.w	r3, r3, #3
 8004c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	021b      	lsls	r3, r3, #8
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a1d      	ldr	r2, [pc, #116]	; (8004cbc <TIM_OC3_SetConfig+0xd0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d10d      	bne.n	8004c66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a14      	ldr	r2, [pc, #80]	; (8004cbc <TIM_OC3_SetConfig+0xd0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d113      	bne.n	8004c96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	621a      	str	r2, [r3, #32]
}
 8004cb0:	bf00      	nop
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40012c00 	.word	0x40012c00

08004cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	031b      	lsls	r3, r3, #12
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a0f      	ldr	r2, [pc, #60]	; (8004d58 <TIM_OC4_SetConfig+0x98>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d109      	bne.n	8004d34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	019b      	lsls	r3, r3, #6
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	621a      	str	r2, [r3, #32]
}
 8004d4e:	bf00      	nop
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr
 8004d58:	40012c00 	.word	0x40012c00

08004d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f023 030a 	bic.w	r3, r3, #10
 8004d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr

08004db8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f023 0210 	bic.w	r2, r3, #16
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	031b      	lsls	r3, r3, #12
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004df4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	621a      	str	r2, [r3, #32]
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr

08004e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b085      	sub	sp, #20
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f043 0307 	orr.w	r3, r3, #7
 8004e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	609a      	str	r2, [r3, #8]
}
 8004e40:	bf00      	nop
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr

08004e4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b087      	sub	sp, #28
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	607a      	str	r2, [r7, #4]
 8004e56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	021a      	lsls	r2, r3, #8
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	609a      	str	r2, [r3, #8]
}
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr

08004e88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1a      	ldr	r2, [r3, #32]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	401a      	ands	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a1a      	ldr	r2, [r3, #32]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 031f 	and.w	r3, r3, #31
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	621a      	str	r2, [r3, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr

08004ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e046      	b.n	8004f76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a16      	ldr	r2, [pc, #88]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00e      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f34:	d009      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a12      	ldr	r2, [pc, #72]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d004      	beq.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a10      	ldr	r2, [pc, #64]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d10c      	bne.n	8004f64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr
 8004f80:	40012c00 	.word	0x40012c00
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800

08004f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr

08004f9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr

08004fb0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fc2:	2b84      	cmp	r3, #132	; 0x84
 8004fc4:	d005      	beq.n	8004fd2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004fc6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	3303      	adds	r3, #3
 8004fd0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr

08004fde <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004fe2:	f000 fb85 	bl	80056f0 <vTaskStartScheduler>
  
  return osOK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	bd80      	pop	{r7, pc}

08004fec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fee:	b089      	sub	sp, #36	; 0x24
 8004ff0:	af04      	add	r7, sp, #16
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d020      	beq.n	8005040 <osThreadCreate+0x54>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d01c      	beq.n	8005040 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685c      	ldr	r4, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691e      	ldr	r6, [r3, #16]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff ffc9 	bl	8004fb0 <makeFreeRtosPriority>
 800501e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005028:	9202      	str	r2, [sp, #8]
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	9100      	str	r1, [sp, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	4632      	mov	r2, r6
 8005032:	4629      	mov	r1, r5
 8005034:	4620      	mov	r0, r4
 8005036:	f000 f8f4 	bl	8005222 <xTaskCreateStatic>
 800503a:	4603      	mov	r3, r0
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	e01c      	b.n	800507a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685c      	ldr	r4, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800504c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff ffab 	bl	8004fb0 <makeFreeRtosPriority>
 800505a:	4602      	mov	r2, r0
 800505c:	f107 030c 	add.w	r3, r7, #12
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	9200      	str	r2, [sp, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	4632      	mov	r2, r6
 8005068:	4629      	mov	r1, r5
 800506a:	4620      	mov	r0, r4
 800506c:	f000 f935 	bl	80052da <xTaskCreate>
 8005070:	4603      	mov	r3, r0
 8005072:	2b01      	cmp	r3, #1
 8005074:	d001      	beq.n	800507a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005076:	2300      	movs	r3, #0
 8005078:	e000      	b.n	800507c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800507a:	68fb      	ldr	r3, [r7, #12]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005084 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <osDelay+0x16>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	e000      	b.n	800509c <osDelay+0x18>
 800509a:	2301      	movs	r3, #1
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fa61 	bl	8005564 <vTaskDelay>
  
  return osOK;
 80050a2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fa89 	bl	80055cc <vTaskSuspend>
  
  return osOK;
 80050ba:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f103 0208 	add.w	r2, r3, #8
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f04f 32ff 	mov.w	r2, #4294967295
 80050dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f103 0208 	add.w	r2, r3, #8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f103 0208 	add.w	r2, r3, #8
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr

08005102 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr

0800511a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800511a:	b480      	push	{r7}
 800511c:	b085      	sub	sp, #20
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	601a      	str	r2, [r3, #0]
}
 8005156:	bf00      	nop
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr

08005160 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005176:	d103      	bne.n	8005180 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	e00c      	b.n	800519a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3308      	adds	r3, #8
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e002      	b.n	800518e <vListInsert+0x2e>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	d2f6      	bcs.n	8005188 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	601a      	str	r2, [r3, #0]
}
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr

080051d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6892      	ldr	r2, [r2, #8]
 80051e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6852      	ldr	r2, [r2, #4]
 80051f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d103      	bne.n	8005204 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	1e5a      	subs	r2, r3, #1
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr

08005222 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005222:	b580      	push	{r7, lr}
 8005224:	b08e      	sub	sp, #56	; 0x38
 8005226:	af04      	add	r7, sp, #16
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
 800522e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005248:	bf00      	nop
 800524a:	e7fe      	b.n	800524a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <xTaskCreateStatic+0x46>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	61fb      	str	r3, [r7, #28]
}
 8005264:	bf00      	nop
 8005266:	e7fe      	b.n	8005266 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005268:	23a0      	movs	r3, #160	; 0xa0
 800526a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	2ba0      	cmp	r3, #160	; 0xa0
 8005270:	d00a      	beq.n	8005288 <xTaskCreateStatic+0x66>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	61bb      	str	r3, [r7, #24]
}
 8005284:	bf00      	nop
 8005286:	e7fe      	b.n	8005286 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01e      	beq.n	80052cc <xTaskCreateStatic+0xaa>
 800528e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01b      	beq.n	80052cc <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800529c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	2202      	movs	r2, #2
 80052a2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052a6:	2300      	movs	r3, #0
 80052a8:	9303      	str	r3, [sp, #12]
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	9302      	str	r3, [sp, #8]
 80052ae:	f107 0314 	add.w	r3, r7, #20
 80052b2:	9301      	str	r3, [sp, #4]
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f850 	bl	8005364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052c6:	f000 f8e3 	bl	8005490 <prvAddNewTaskToReadyList>
 80052ca:	e001      	b.n	80052d0 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052d0:	697b      	ldr	r3, [r7, #20]
	}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3728      	adds	r7, #40	; 0x28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b08c      	sub	sp, #48	; 0x30
 80052de:	af04      	add	r7, sp, #16
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	4613      	mov	r3, r2
 80052e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 ff26 	bl	8006140 <pvPortMalloc>
 80052f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00e      	beq.n	800531a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80052fc:	20a0      	movs	r0, #160	; 0xa0
 80052fe:	f000 ff1f 	bl	8006140 <pvPortMalloc>
 8005302:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	631a      	str	r2, [r3, #48]	; 0x30
 8005310:	e005      	b.n	800531e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005312:	6978      	ldr	r0, [r7, #20]
 8005314:	f000 ffd8 	bl	80062c8 <vPortFree>
 8005318:	e001      	b.n	800531e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d017      	beq.n	8005354 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800532c:	88fa      	ldrh	r2, [r7, #6]
 800532e:	2300      	movs	r3, #0
 8005330:	9303      	str	r3, [sp, #12]
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	9302      	str	r3, [sp, #8]
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 f80e 	bl	8005364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005348:	69f8      	ldr	r0, [r7, #28]
 800534a:	f000 f8a1 	bl	8005490 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800534e:	2301      	movs	r3, #1
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	e002      	b.n	800535a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005354:	f04f 33ff 	mov.w	r3, #4294967295
 8005358:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800535a:	69bb      	ldr	r3, [r7, #24]
	}
 800535c:	4618      	mov	r0, r3
 800535e:	3720      	adds	r7, #32
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800537c:	3b01      	subs	r3, #1
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	f023 0307 	bic.w	r3, r3, #7
 800538a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <prvInitialiseNewTask+0x48>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	617b      	str	r3, [r7, #20]
}
 80053a8:	bf00      	nop
 80053aa:	e7fe      	b.n	80053aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053ac:	2300      	movs	r3, #0
 80053ae:	61fb      	str	r3, [r7, #28]
 80053b0:	e012      	b.n	80053d8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	4413      	add	r3, r2
 80053b8:	7819      	ldrb	r1, [r3, #0]
 80053ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	3334      	adds	r3, #52	; 0x34
 80053c2:	460a      	mov	r2, r1
 80053c4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d006      	beq.n	80053e0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	3301      	adds	r3, #1
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	2b0f      	cmp	r3, #15
 80053dc:	d9e9      	bls.n	80053b2 <prvInitialiseNewTask+0x4e>
 80053de:	e000      	b.n	80053e2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80053e0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	2b06      	cmp	r3, #6
 80053ee:	d901      	bls.n	80053f4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053f0:	2306      	movs	r3, #6
 80053f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	2200      	movs	r2, #0
 8005404:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	3304      	adds	r3, #4
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff fe79 	bl	8005102 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	3318      	adds	r3, #24
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fe74 	bl	8005102 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	f1c3 0207 	rsb	r2, r3, #7
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	2200      	movs	r2, #0
 8005434:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	2200      	movs	r2, #0
 800543c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005442:	334c      	adds	r3, #76	; 0x4c
 8005444:	224c      	movs	r2, #76	; 0x4c
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f001 f851 	bl	80064f0 <memset>
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	4a0c      	ldr	r2, [pc, #48]	; (8005484 <prvInitialiseNewTask+0x120>)
 8005452:	651a      	str	r2, [r3, #80]	; 0x50
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	4a0c      	ldr	r2, [pc, #48]	; (8005488 <prvInitialiseNewTask+0x124>)
 8005458:	655a      	str	r2, [r3, #84]	; 0x54
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	4a0b      	ldr	r2, [pc, #44]	; (800548c <prvInitialiseNewTask+0x128>)
 800545e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	68f9      	ldr	r1, [r7, #12]
 8005464:	69b8      	ldr	r0, [r7, #24]
 8005466:	f000 fcbb 	bl	8005de0 <pxPortInitialiseStack>
 800546a:	4602      	mov	r2, r0
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800547c:	bf00      	nop
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20001608 	.word	0x20001608
 8005488:	20001670 	.word	0x20001670
 800548c:	200016d8 	.word	0x200016d8

08005490 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005498:	f000 fd90 	bl	8005fbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800549c:	4b2a      	ldr	r3, [pc, #168]	; (8005548 <prvAddNewTaskToReadyList+0xb8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3301      	adds	r3, #1
 80054a2:	4a29      	ldr	r2, [pc, #164]	; (8005548 <prvAddNewTaskToReadyList+0xb8>)
 80054a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054a6:	4b29      	ldr	r3, [pc, #164]	; (800554c <prvAddNewTaskToReadyList+0xbc>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054ae:	4a27      	ldr	r2, [pc, #156]	; (800554c <prvAddNewTaskToReadyList+0xbc>)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054b4:	4b24      	ldr	r3, [pc, #144]	; (8005548 <prvAddNewTaskToReadyList+0xb8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d110      	bne.n	80054de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054bc:	f000 fb64 	bl	8005b88 <prvInitialiseTaskLists>
 80054c0:	e00d      	b.n	80054de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054c2:	4b23      	ldr	r3, [pc, #140]	; (8005550 <prvAddNewTaskToReadyList+0xc0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d109      	bne.n	80054de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054ca:	4b20      	ldr	r3, [pc, #128]	; (800554c <prvAddNewTaskToReadyList+0xbc>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d802      	bhi.n	80054de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054d8:	4a1c      	ldr	r2, [pc, #112]	; (800554c <prvAddNewTaskToReadyList+0xbc>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054de:	4b1d      	ldr	r3, [pc, #116]	; (8005554 <prvAddNewTaskToReadyList+0xc4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3301      	adds	r3, #1
 80054e4:	4a1b      	ldr	r2, [pc, #108]	; (8005554 <prvAddNewTaskToReadyList+0xc4>)
 80054e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	2201      	movs	r2, #1
 80054ee:	409a      	lsls	r2, r3
 80054f0:	4b19      	ldr	r3, [pc, #100]	; (8005558 <prvAddNewTaskToReadyList+0xc8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	4a18      	ldr	r2, [pc, #96]	; (8005558 <prvAddNewTaskToReadyList+0xc8>)
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4a15      	ldr	r2, [pc, #84]	; (800555c <prvAddNewTaskToReadyList+0xcc>)
 8005508:	441a      	add	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3304      	adds	r3, #4
 800550e:	4619      	mov	r1, r3
 8005510:	4610      	mov	r0, r2
 8005512:	f7ff fe02 	bl	800511a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005516:	f000 fd81 	bl	800601c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800551a:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <prvAddNewTaskToReadyList+0xc0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00e      	beq.n	8005540 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005522:	4b0a      	ldr	r3, [pc, #40]	; (800554c <prvAddNewTaskToReadyList+0xbc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	429a      	cmp	r2, r3
 800552e:	d207      	bcs.n	8005540 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <prvAddNewTaskToReadyList+0xd0>)
 8005532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005540:	bf00      	nop
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	200009bc 	.word	0x200009bc
 800554c:	200008bc 	.word	0x200008bc
 8005550:	200009c8 	.word	0x200009c8
 8005554:	200009d8 	.word	0x200009d8
 8005558:	200009c4 	.word	0x200009c4
 800555c:	200008c0 	.word	0x200008c0
 8005560:	e000ed04 	.word	0xe000ed04

08005564 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d017      	beq.n	80055a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005576:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <vTaskDelay+0x60>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <vTaskDelay+0x30>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	60bb      	str	r3, [r7, #8]
}
 8005590:	bf00      	nop
 8005592:	e7fe      	b.n	8005592 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005594:	f000 f916 	bl	80057c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005598:	2100      	movs	r1, #0
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fbba 	bl	8005d14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055a0:	f000 f91e 	bl	80057e0 <xTaskResumeAll>
 80055a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d107      	bne.n	80055bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80055ac:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <vTaskDelay+0x64>)
 80055ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055bc:	bf00      	nop
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	200009e4 	.word	0x200009e4
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80055d4:	f000 fcf2 	bl	8005fbc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d102      	bne.n	80055e4 <vTaskSuspend+0x18>
 80055de:	4b3c      	ldr	r3, [pc, #240]	; (80056d0 <vTaskSuspend+0x104>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	e000      	b.n	80055e6 <vTaskSuspend+0x1a>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	3304      	adds	r3, #4
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff fdef 	bl	80051d0 <uxListRemove>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d115      	bne.n	8005624 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fc:	4935      	ldr	r1, [pc, #212]	; (80056d4 <vTaskSuspend+0x108>)
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10a      	bne.n	8005624 <vTaskSuspend+0x58>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	2201      	movs	r2, #1
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	43da      	mvns	r2, r3
 800561a:	4b2f      	ldr	r3, [pc, #188]	; (80056d8 <vTaskSuspend+0x10c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4013      	ands	r3, r2
 8005620:	4a2d      	ldr	r2, [pc, #180]	; (80056d8 <vTaskSuspend+0x10c>)
 8005622:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	2b00      	cmp	r3, #0
 800562a:	d004      	beq.n	8005636 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	3318      	adds	r3, #24
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fdcd 	bl	80051d0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3304      	adds	r3, #4
 800563a:	4619      	mov	r1, r3
 800563c:	4827      	ldr	r0, [pc, #156]	; (80056dc <vTaskSuspend+0x110>)
 800563e:	f7ff fd6c 	bl	800511a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b01      	cmp	r3, #1
 800564c:	d103      	bne.n	8005656 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005656:	f000 fce1 	bl	800601c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800565a:	4b21      	ldr	r3, [pc, #132]	; (80056e0 <vTaskSuspend+0x114>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005662:	f000 fcab 	bl	8005fbc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005666:	f000 fb31 	bl	8005ccc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800566a:	f000 fcd7 	bl	800601c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800566e:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <vTaskSuspend+0x104>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	429a      	cmp	r2, r3
 8005676:	d127      	bne.n	80056c8 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8005678:	4b19      	ldr	r3, [pc, #100]	; (80056e0 <vTaskSuspend+0x114>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d017      	beq.n	80056b0 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005680:	4b18      	ldr	r3, [pc, #96]	; (80056e4 <vTaskSuspend+0x118>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00a      	beq.n	800569e <vTaskSuspend+0xd2>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	60bb      	str	r3, [r7, #8]
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800569e:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <vTaskSuspend+0x11c>)
 80056a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056ae:	e00b      	b.n	80056c8 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80056b0:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <vTaskSuspend+0x110>)
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <vTaskSuspend+0x120>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d103      	bne.n	80056c4 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <vTaskSuspend+0x104>)
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
	}
 80056c2:	e001      	b.n	80056c8 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80056c4:	f000 f9e6 	bl	8005a94 <vTaskSwitchContext>
	}
 80056c8:	bf00      	nop
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	200008bc 	.word	0x200008bc
 80056d4:	200008c0 	.word	0x200008c0
 80056d8:	200009c4 	.word	0x200009c4
 80056dc:	200009a8 	.word	0x200009a8
 80056e0:	200009c8 	.word	0x200009c8
 80056e4:	200009e4 	.word	0x200009e4
 80056e8:	e000ed04 	.word	0xe000ed04
 80056ec:	200009bc 	.word	0x200009bc

080056f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	; 0x28
 80056f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056fe:	463a      	mov	r2, r7
 8005700:	1d39      	adds	r1, r7, #4
 8005702:	f107 0308 	add.w	r3, r7, #8
 8005706:	4618      	mov	r0, r3
 8005708:	f7fb fbf6 	bl	8000ef8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800570c:	6839      	ldr	r1, [r7, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	9202      	str	r2, [sp, #8]
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	2300      	movs	r3, #0
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	2300      	movs	r3, #0
 800571c:	460a      	mov	r2, r1
 800571e:	4921      	ldr	r1, [pc, #132]	; (80057a4 <vTaskStartScheduler+0xb4>)
 8005720:	4821      	ldr	r0, [pc, #132]	; (80057a8 <vTaskStartScheduler+0xb8>)
 8005722:	f7ff fd7e 	bl	8005222 <xTaskCreateStatic>
 8005726:	4603      	mov	r3, r0
 8005728:	4a20      	ldr	r2, [pc, #128]	; (80057ac <vTaskStartScheduler+0xbc>)
 800572a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800572c:	4b1f      	ldr	r3, [pc, #124]	; (80057ac <vTaskStartScheduler+0xbc>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005734:	2301      	movs	r3, #1
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	e001      	b.n	800573e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d11b      	bne.n	800577c <vTaskStartScheduler+0x8c>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	613b      	str	r3, [r7, #16]
}
 8005756:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005758:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <vTaskStartScheduler+0xc0>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	334c      	adds	r3, #76	; 0x4c
 800575e:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <vTaskStartScheduler+0xc4>)
 8005760:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005762:	4b15      	ldr	r3, [pc, #84]	; (80057b8 <vTaskStartScheduler+0xc8>)
 8005764:	f04f 32ff 	mov.w	r2, #4294967295
 8005768:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800576a:	4b14      	ldr	r3, [pc, #80]	; (80057bc <vTaskStartScheduler+0xcc>)
 800576c:	2201      	movs	r2, #1
 800576e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005770:	4b13      	ldr	r3, [pc, #76]	; (80057c0 <vTaskStartScheduler+0xd0>)
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005776:	f000 fbaf 	bl	8005ed8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800577a:	e00e      	b.n	800579a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d10a      	bne.n	800579a <vTaskStartScheduler+0xaa>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	60fb      	str	r3, [r7, #12]
}
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <vTaskStartScheduler+0xa8>
}
 800579a:	bf00      	nop
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	08006734 	.word	0x08006734
 80057a8:	08005b59 	.word	0x08005b59
 80057ac:	200009e0 	.word	0x200009e0
 80057b0:	200008bc 	.word	0x200008bc
 80057b4:	2000005c 	.word	0x2000005c
 80057b8:	200009dc 	.word	0x200009dc
 80057bc:	200009c8 	.word	0x200009c8
 80057c0:	200009c0 	.word	0x200009c0

080057c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80057c8:	4b04      	ldr	r3, [pc, #16]	; (80057dc <vTaskSuspendAll+0x18>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	4a03      	ldr	r2, [pc, #12]	; (80057dc <vTaskSuspendAll+0x18>)
 80057d0:	6013      	str	r3, [r2, #0]
}
 80057d2:	bf00      	nop
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	200009e4 	.word	0x200009e4

080057e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057ee:	4b41      	ldr	r3, [pc, #260]	; (80058f4 <xTaskResumeAll+0x114>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10a      	bne.n	800580c <xTaskResumeAll+0x2c>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	603b      	str	r3, [r7, #0]
}
 8005808:	bf00      	nop
 800580a:	e7fe      	b.n	800580a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800580c:	f000 fbd6 	bl	8005fbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005810:	4b38      	ldr	r3, [pc, #224]	; (80058f4 <xTaskResumeAll+0x114>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3b01      	subs	r3, #1
 8005816:	4a37      	ldr	r2, [pc, #220]	; (80058f4 <xTaskResumeAll+0x114>)
 8005818:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800581a:	4b36      	ldr	r3, [pc, #216]	; (80058f4 <xTaskResumeAll+0x114>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d161      	bne.n	80058e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005822:	4b35      	ldr	r3, [pc, #212]	; (80058f8 <xTaskResumeAll+0x118>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d05d      	beq.n	80058e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800582a:	e02e      	b.n	800588a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800582c:	4b33      	ldr	r3, [pc, #204]	; (80058fc <xTaskResumeAll+0x11c>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3318      	adds	r3, #24
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fcc9 	bl	80051d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3304      	adds	r3, #4
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff fcc4 	bl	80051d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	2201      	movs	r2, #1
 800584e:	409a      	lsls	r2, r3
 8005850:	4b2b      	ldr	r3, [pc, #172]	; (8005900 <xTaskResumeAll+0x120>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4313      	orrs	r3, r2
 8005856:	4a2a      	ldr	r2, [pc, #168]	; (8005900 <xTaskResumeAll+0x120>)
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4a27      	ldr	r2, [pc, #156]	; (8005904 <xTaskResumeAll+0x124>)
 8005868:	441a      	add	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3304      	adds	r3, #4
 800586e:	4619      	mov	r1, r3
 8005870:	4610      	mov	r0, r2
 8005872:	f7ff fc52 	bl	800511a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587a:	4b23      	ldr	r3, [pc, #140]	; (8005908 <xTaskResumeAll+0x128>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	429a      	cmp	r2, r3
 8005882:	d302      	bcc.n	800588a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005884:	4b21      	ldr	r3, [pc, #132]	; (800590c <xTaskResumeAll+0x12c>)
 8005886:	2201      	movs	r2, #1
 8005888:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800588a:	4b1c      	ldr	r3, [pc, #112]	; (80058fc <xTaskResumeAll+0x11c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1cc      	bne.n	800582c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005898:	f000 fa18 	bl	8005ccc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800589c:	4b1c      	ldr	r3, [pc, #112]	; (8005910 <xTaskResumeAll+0x130>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d010      	beq.n	80058ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058a8:	f000 f836 	bl	8005918 <xTaskIncrementTick>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80058b2:	4b16      	ldr	r3, [pc, #88]	; (800590c <xTaskResumeAll+0x12c>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1f1      	bne.n	80058a8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80058c4:	4b12      	ldr	r3, [pc, #72]	; (8005910 <xTaskResumeAll+0x130>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058ca:	4b10      	ldr	r3, [pc, #64]	; (800590c <xTaskResumeAll+0x12c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058d2:	2301      	movs	r3, #1
 80058d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058d6:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <xTaskResumeAll+0x134>)
 80058d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058e6:	f000 fb99 	bl	800601c <vPortExitCritical>

	return xAlreadyYielded;
 80058ea:	68bb      	ldr	r3, [r7, #8]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	200009e4 	.word	0x200009e4
 80058f8:	200009bc 	.word	0x200009bc
 80058fc:	2000097c 	.word	0x2000097c
 8005900:	200009c4 	.word	0x200009c4
 8005904:	200008c0 	.word	0x200008c0
 8005908:	200008bc 	.word	0x200008bc
 800590c:	200009d0 	.word	0x200009d0
 8005910:	200009cc 	.word	0x200009cc
 8005914:	e000ed04 	.word	0xe000ed04

08005918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005922:	4b51      	ldr	r3, [pc, #324]	; (8005a68 <xTaskIncrementTick+0x150>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f040 808d 	bne.w	8005a46 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800592c:	4b4f      	ldr	r3, [pc, #316]	; (8005a6c <xTaskIncrementTick+0x154>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005934:	4a4d      	ldr	r2, [pc, #308]	; (8005a6c <xTaskIncrementTick+0x154>)
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d120      	bne.n	8005982 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005940:	4b4b      	ldr	r3, [pc, #300]	; (8005a70 <xTaskIncrementTick+0x158>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <xTaskIncrementTick+0x48>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	603b      	str	r3, [r7, #0]
}
 800595c:	bf00      	nop
 800595e:	e7fe      	b.n	800595e <xTaskIncrementTick+0x46>
 8005960:	4b43      	ldr	r3, [pc, #268]	; (8005a70 <xTaskIncrementTick+0x158>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	4b43      	ldr	r3, [pc, #268]	; (8005a74 <xTaskIncrementTick+0x15c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a41      	ldr	r2, [pc, #260]	; (8005a70 <xTaskIncrementTick+0x158>)
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	4a41      	ldr	r2, [pc, #260]	; (8005a74 <xTaskIncrementTick+0x15c>)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	4b40      	ldr	r3, [pc, #256]	; (8005a78 <xTaskIncrementTick+0x160>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3301      	adds	r3, #1
 800597a:	4a3f      	ldr	r2, [pc, #252]	; (8005a78 <xTaskIncrementTick+0x160>)
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	f000 f9a5 	bl	8005ccc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005982:	4b3e      	ldr	r3, [pc, #248]	; (8005a7c <xTaskIncrementTick+0x164>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	429a      	cmp	r2, r3
 800598a:	d34d      	bcc.n	8005a28 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800598c:	4b38      	ldr	r3, [pc, #224]	; (8005a70 <xTaskIncrementTick+0x158>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <xTaskIncrementTick+0x82>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <xTaskIncrementTick+0x84>
 800599a:	2300      	movs	r3, #0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d004      	beq.n	80059aa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a0:	4b36      	ldr	r3, [pc, #216]	; (8005a7c <xTaskIncrementTick+0x164>)
 80059a2:	f04f 32ff 	mov.w	r2, #4294967295
 80059a6:	601a      	str	r2, [r3, #0]
					break;
 80059a8:	e03e      	b.n	8005a28 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059aa:	4b31      	ldr	r3, [pc, #196]	; (8005a70 <xTaskIncrementTick+0x158>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d203      	bcs.n	80059ca <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059c2:	4a2e      	ldr	r2, [pc, #184]	; (8005a7c <xTaskIncrementTick+0x164>)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6013      	str	r3, [r2, #0]
						break;
 80059c8:	e02e      	b.n	8005a28 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff fbfe 	bl	80051d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	3318      	adds	r3, #24
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff fbf5 	bl	80051d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	2201      	movs	r2, #1
 80059ec:	409a      	lsls	r2, r3
 80059ee:	4b24      	ldr	r3, [pc, #144]	; (8005a80 <xTaskIncrementTick+0x168>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	4a22      	ldr	r2, [pc, #136]	; (8005a80 <xTaskIncrementTick+0x168>)
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4a1f      	ldr	r2, [pc, #124]	; (8005a84 <xTaskIncrementTick+0x16c>)
 8005a06:	441a      	add	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	f7ff fb83 	bl	800511a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <xTaskIncrementTick+0x170>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d3b4      	bcc.n	800598c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a22:	2301      	movs	r3, #1
 8005a24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a26:	e7b1      	b.n	800598c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a28:	4b17      	ldr	r3, [pc, #92]	; (8005a88 <xTaskIncrementTick+0x170>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2e:	4915      	ldr	r1, [pc, #84]	; (8005a84 <xTaskIncrementTick+0x16c>)
 8005a30:	4613      	mov	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	440b      	add	r3, r1
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d907      	bls.n	8005a50 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005a40:	2301      	movs	r3, #1
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	e004      	b.n	8005a50 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a46:	4b11      	ldr	r3, [pc, #68]	; (8005a8c <xTaskIncrementTick+0x174>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	4a0f      	ldr	r2, [pc, #60]	; (8005a8c <xTaskIncrementTick+0x174>)
 8005a4e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a50:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <xTaskIncrementTick+0x178>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a5c:	697b      	ldr	r3, [r7, #20]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	200009e4 	.word	0x200009e4
 8005a6c:	200009c0 	.word	0x200009c0
 8005a70:	20000974 	.word	0x20000974
 8005a74:	20000978 	.word	0x20000978
 8005a78:	200009d4 	.word	0x200009d4
 8005a7c:	200009dc 	.word	0x200009dc
 8005a80:	200009c4 	.word	0x200009c4
 8005a84:	200008c0 	.word	0x200008c0
 8005a88:	200008bc 	.word	0x200008bc
 8005a8c:	200009cc 	.word	0x200009cc
 8005a90:	200009d0 	.word	0x200009d0

08005a94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a9a:	4b29      	ldr	r3, [pc, #164]	; (8005b40 <vTaskSwitchContext+0xac>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005aa2:	4b28      	ldr	r3, [pc, #160]	; (8005b44 <vTaskSwitchContext+0xb0>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005aa8:	e044      	b.n	8005b34 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005aaa:	4b26      	ldr	r3, [pc, #152]	; (8005b44 <vTaskSwitchContext+0xb0>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005ab0:	4b25      	ldr	r3, [pc, #148]	; (8005b48 <vTaskSwitchContext+0xb4>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	fab3 f383 	clz	r3, r3
 8005abc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005abe:	7afb      	ldrb	r3, [r7, #11]
 8005ac0:	f1c3 031f 	rsb	r3, r3, #31
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	4921      	ldr	r1, [pc, #132]	; (8005b4c <vTaskSwitchContext+0xb8>)
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10a      	bne.n	8005af0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	607b      	str	r3, [r7, #4]
}
 8005aec:	bf00      	nop
 8005aee:	e7fe      	b.n	8005aee <vTaskSwitchContext+0x5a>
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4a14      	ldr	r2, [pc, #80]	; (8005b4c <vTaskSwitchContext+0xb8>)
 8005afc:	4413      	add	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	605a      	str	r2, [r3, #4]
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	3308      	adds	r3, #8
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d104      	bne.n	8005b20 <vTaskSwitchContext+0x8c>
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	605a      	str	r2, [r3, #4]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	4a0a      	ldr	r2, [pc, #40]	; (8005b50 <vTaskSwitchContext+0xbc>)
 8005b28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <vTaskSwitchContext+0xbc>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	334c      	adds	r3, #76	; 0x4c
 8005b30:	4a08      	ldr	r2, [pc, #32]	; (8005b54 <vTaskSwitchContext+0xc0>)
 8005b32:	6013      	str	r3, [r2, #0]
}
 8005b34:	bf00      	nop
 8005b36:	371c      	adds	r7, #28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	200009e4 	.word	0x200009e4
 8005b44:	200009d0 	.word	0x200009d0
 8005b48:	200009c4 	.word	0x200009c4
 8005b4c:	200008c0 	.word	0x200008c0
 8005b50:	200008bc 	.word	0x200008bc
 8005b54:	2000005c 	.word	0x2000005c

08005b58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b60:	f000 f852 	bl	8005c08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b64:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <prvIdleTask+0x28>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d9f9      	bls.n	8005b60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b6c:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <prvIdleTask+0x2c>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b7c:	e7f0      	b.n	8005b60 <prvIdleTask+0x8>
 8005b7e:	bf00      	nop
 8005b80:	200008c0 	.word	0x200008c0
 8005b84:	e000ed04 	.word	0xe000ed04

08005b88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b8e:	2300      	movs	r3, #0
 8005b90:	607b      	str	r3, [r7, #4]
 8005b92:	e00c      	b.n	8005bae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	4613      	mov	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4a12      	ldr	r2, [pc, #72]	; (8005be8 <prvInitialiseTaskLists+0x60>)
 8005ba0:	4413      	add	r3, r2
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff fa8e 	bl	80050c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3301      	adds	r3, #1
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b06      	cmp	r3, #6
 8005bb2:	d9ef      	bls.n	8005b94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bb4:	480d      	ldr	r0, [pc, #52]	; (8005bec <prvInitialiseTaskLists+0x64>)
 8005bb6:	f7ff fa85 	bl	80050c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bba:	480d      	ldr	r0, [pc, #52]	; (8005bf0 <prvInitialiseTaskLists+0x68>)
 8005bbc:	f7ff fa82 	bl	80050c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bc0:	480c      	ldr	r0, [pc, #48]	; (8005bf4 <prvInitialiseTaskLists+0x6c>)
 8005bc2:	f7ff fa7f 	bl	80050c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bc6:	480c      	ldr	r0, [pc, #48]	; (8005bf8 <prvInitialiseTaskLists+0x70>)
 8005bc8:	f7ff fa7c 	bl	80050c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bcc:	480b      	ldr	r0, [pc, #44]	; (8005bfc <prvInitialiseTaskLists+0x74>)
 8005bce:	f7ff fa79 	bl	80050c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bd2:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <prvInitialiseTaskLists+0x78>)
 8005bd4:	4a05      	ldr	r2, [pc, #20]	; (8005bec <prvInitialiseTaskLists+0x64>)
 8005bd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <prvInitialiseTaskLists+0x7c>)
 8005bda:	4a05      	ldr	r2, [pc, #20]	; (8005bf0 <prvInitialiseTaskLists+0x68>)
 8005bdc:	601a      	str	r2, [r3, #0]
}
 8005bde:	bf00      	nop
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	200008c0 	.word	0x200008c0
 8005bec:	2000094c 	.word	0x2000094c
 8005bf0:	20000960 	.word	0x20000960
 8005bf4:	2000097c 	.word	0x2000097c
 8005bf8:	20000990 	.word	0x20000990
 8005bfc:	200009a8 	.word	0x200009a8
 8005c00:	20000974 	.word	0x20000974
 8005c04:	20000978 	.word	0x20000978

08005c08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c0e:	e019      	b.n	8005c44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c10:	f000 f9d4 	bl	8005fbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005c14:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <prvCheckTasksWaitingTermination+0x50>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff fad5 	bl	80051d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c26:	4b0d      	ldr	r3, [pc, #52]	; (8005c5c <prvCheckTasksWaitingTermination+0x54>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	4a0b      	ldr	r2, [pc, #44]	; (8005c5c <prvCheckTasksWaitingTermination+0x54>)
 8005c2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <prvCheckTasksWaitingTermination+0x58>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	4a0a      	ldr	r2, [pc, #40]	; (8005c60 <prvCheckTasksWaitingTermination+0x58>)
 8005c38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c3a:	f000 f9ef 	bl	800601c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f810 	bl	8005c64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c44:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <prvCheckTasksWaitingTermination+0x58>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e1      	bne.n	8005c10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000990 	.word	0x20000990
 8005c5c:	200009bc 	.word	0x200009bc
 8005c60:	200009a4 	.word	0x200009a4

08005c64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	334c      	adds	r3, #76	; 0x4c
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fc45 	bl	8006500 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d108      	bne.n	8005c92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fb1f 	bl	80062c8 <vPortFree>
				vPortFree( pxTCB );
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fb1c 	bl	80062c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c90:	e018      	b.n	8005cc4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d103      	bne.n	8005ca4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fb13 	bl	80062c8 <vPortFree>
	}
 8005ca2:	e00f      	b.n	8005cc4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d00a      	beq.n	8005cc4 <prvDeleteTCB+0x60>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	60fb      	str	r3, [r7, #12]
}
 8005cc0:	bf00      	nop
 8005cc2:	e7fe      	b.n	8005cc2 <prvDeleteTCB+0x5e>
	}
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cd2:	4b0e      	ldr	r3, [pc, #56]	; (8005d0c <prvResetNextTaskUnblockTime+0x40>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <prvResetNextTaskUnblockTime+0x14>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <prvResetNextTaskUnblockTime+0x16>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ce6:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <prvResetNextTaskUnblockTime+0x44>)
 8005ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cee:	e008      	b.n	8005d02 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005cf0:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <prvResetNextTaskUnblockTime+0x40>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	4a04      	ldr	r2, [pc, #16]	; (8005d10 <prvResetNextTaskUnblockTime+0x44>)
 8005d00:	6013      	str	r3, [r2, #0]
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bc80      	pop	{r7}
 8005d0a:	4770      	bx	lr
 8005d0c:	20000974 	.word	0x20000974
 8005d10:	200009dc 	.word	0x200009dc

08005d14 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d1e:	4b29      	ldr	r3, [pc, #164]	; (8005dc4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d24:	4b28      	ldr	r3, [pc, #160]	; (8005dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7ff fa50 	bl	80051d0 <uxListRemove>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10b      	bne.n	8005d4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005d36:	4b24      	ldr	r3, [pc, #144]	; (8005dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	43da      	mvns	r2, r3
 8005d44:	4b21      	ldr	r3, [pc, #132]	; (8005dcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	4a20      	ldr	r2, [pc, #128]	; (8005dcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d10a      	bne.n	8005d6c <prvAddCurrentTaskToDelayedList+0x58>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d5c:	4b1a      	ldr	r3, [pc, #104]	; (8005dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3304      	adds	r3, #4
 8005d62:	4619      	mov	r1, r3
 8005d64:	481a      	ldr	r0, [pc, #104]	; (8005dd0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d66:	f7ff f9d8 	bl	800511a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d6a:	e026      	b.n	8005dba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4413      	add	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d74:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d209      	bcs.n	8005d98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d84:	4b13      	ldr	r3, [pc, #76]	; (8005dd4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4610      	mov	r0, r2
 8005d92:	f7ff f9e5 	bl	8005160 <vListInsert>
}
 8005d96:	e010      	b.n	8005dba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d98:	4b0f      	ldr	r3, [pc, #60]	; (8005dd8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3304      	adds	r3, #4
 8005da2:	4619      	mov	r1, r3
 8005da4:	4610      	mov	r0, r2
 8005da6:	f7ff f9db 	bl	8005160 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005daa:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d202      	bcs.n	8005dba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005db4:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	6013      	str	r3, [r2, #0]
}
 8005dba:	bf00      	nop
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	200009c0 	.word	0x200009c0
 8005dc8:	200008bc 	.word	0x200008bc
 8005dcc:	200009c4 	.word	0x200009c4
 8005dd0:	200009a8 	.word	0x200009a8
 8005dd4:	20000978 	.word	0x20000978
 8005dd8:	20000974 	.word	0x20000974
 8005ddc:	200009dc 	.word	0x200009dc

08005de0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3b04      	subs	r3, #4
 8005df0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3b04      	subs	r3, #4
 8005dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f023 0201 	bic.w	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3b04      	subs	r3, #4
 8005e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e10:	4a08      	ldr	r2, [pc, #32]	; (8005e34 <pxPortInitialiseStack+0x54>)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3b14      	subs	r3, #20
 8005e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3b20      	subs	r3, #32
 8005e26:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e28:	68fb      	ldr	r3, [r7, #12]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr
 8005e34:	08005e39 	.word	0x08005e39

08005e38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e42:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <prvTaskExitError+0x54>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4a:	d00a      	beq.n	8005e62 <prvTaskExitError+0x2a>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	60fb      	str	r3, [r7, #12]
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <prvTaskExitError+0x28>
	__asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	60bb      	str	r3, [r7, #8]
}
 8005e74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e76:	bf00      	nop
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0fc      	beq.n	8005e78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	2000000c 	.word	0x2000000c

08005e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e90:	4b07      	ldr	r3, [pc, #28]	; (8005eb0 <pxCurrentTCBConst2>)
 8005e92:	6819      	ldr	r1, [r3, #0]
 8005e94:	6808      	ldr	r0, [r1, #0]
 8005e96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e9a:	f380 8809 	msr	PSP, r0
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f04f 0000 	mov.w	r0, #0
 8005ea6:	f380 8811 	msr	BASEPRI, r0
 8005eaa:	f04e 0e0d 	orr.w	lr, lr, #13
 8005eae:	4770      	bx	lr

08005eb0 <pxCurrentTCBConst2>:
 8005eb0:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop

08005eb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005eb8:	4806      	ldr	r0, [pc, #24]	; (8005ed4 <prvPortStartFirstTask+0x1c>)
 8005eba:	6800      	ldr	r0, [r0, #0]
 8005ebc:	6800      	ldr	r0, [r0, #0]
 8005ebe:	f380 8808 	msr	MSP, r0
 8005ec2:	b662      	cpsie	i
 8005ec4:	b661      	cpsie	f
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	df00      	svc	0
 8005ed0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ed2:	bf00      	nop
 8005ed4:	e000ed08 	.word	0xe000ed08

08005ed8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ede:	4b32      	ldr	r3, [pc, #200]	; (8005fa8 <xPortStartScheduler+0xd0>)
 8005ee0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	22ff      	movs	r2, #255	; 0xff
 8005eee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ef8:	78fb      	ldrb	r3, [r7, #3]
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	4b2a      	ldr	r3, [pc, #168]	; (8005fac <xPortStartScheduler+0xd4>)
 8005f04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f06:	4b2a      	ldr	r3, [pc, #168]	; (8005fb0 <xPortStartScheduler+0xd8>)
 8005f08:	2207      	movs	r2, #7
 8005f0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f0c:	e009      	b.n	8005f22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005f0e:	4b28      	ldr	r3, [pc, #160]	; (8005fb0 <xPortStartScheduler+0xd8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	4a26      	ldr	r2, [pc, #152]	; (8005fb0 <xPortStartScheduler+0xd8>)
 8005f16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f22:	78fb      	ldrb	r3, [r7, #3]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2a:	2b80      	cmp	r3, #128	; 0x80
 8005f2c:	d0ef      	beq.n	8005f0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f2e:	4b20      	ldr	r3, [pc, #128]	; (8005fb0 <xPortStartScheduler+0xd8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f1c3 0307 	rsb	r3, r3, #7
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d00a      	beq.n	8005f50 <xPortStartScheduler+0x78>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	60bb      	str	r3, [r7, #8]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f50:	4b17      	ldr	r3, [pc, #92]	; (8005fb0 <xPortStartScheduler+0xd8>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <xPortStartScheduler+0xd8>)
 8005f58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f5a:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <xPortStartScheduler+0xd8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f62:	4a13      	ldr	r2, [pc, #76]	; (8005fb0 <xPortStartScheduler+0xd8>)
 8005f64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f6e:	4b11      	ldr	r3, [pc, #68]	; (8005fb4 <xPortStartScheduler+0xdc>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a10      	ldr	r2, [pc, #64]	; (8005fb4 <xPortStartScheduler+0xdc>)
 8005f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f7a:	4b0e      	ldr	r3, [pc, #56]	; (8005fb4 <xPortStartScheduler+0xdc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a0d      	ldr	r2, [pc, #52]	; (8005fb4 <xPortStartScheduler+0xdc>)
 8005f80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f86:	f000 f8b9 	bl	80060fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f8a:	4b0b      	ldr	r3, [pc, #44]	; (8005fb8 <xPortStartScheduler+0xe0>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f90:	f7ff ff92 	bl	8005eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f94:	f7ff fd7e 	bl	8005a94 <vTaskSwitchContext>
	prvTaskExitError();
 8005f98:	f7ff ff4e 	bl	8005e38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	e000e400 	.word	0xe000e400
 8005fac:	200009e8 	.word	0x200009e8
 8005fb0:	200009ec 	.word	0x200009ec
 8005fb4:	e000ed20 	.word	0xe000ed20
 8005fb8:	2000000c 	.word	0x2000000c

08005fbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	607b      	str	r3, [r7, #4]
}
 8005fd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fd6:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <vPortEnterCritical+0x58>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	4a0d      	ldr	r2, [pc, #52]	; (8006014 <vPortEnterCritical+0x58>)
 8005fde:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fe0:	4b0c      	ldr	r3, [pc, #48]	; (8006014 <vPortEnterCritical+0x58>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d10f      	bne.n	8006008 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fe8:	4b0b      	ldr	r3, [pc, #44]	; (8006018 <vPortEnterCritical+0x5c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00a      	beq.n	8006008 <vPortEnterCritical+0x4c>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	603b      	str	r3, [r7, #0]
}
 8006004:	bf00      	nop
 8006006:	e7fe      	b.n	8006006 <vPortEnterCritical+0x4a>
	}
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	bc80      	pop	{r7}
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	2000000c 	.word	0x2000000c
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006022:	4b11      	ldr	r3, [pc, #68]	; (8006068 <vPortExitCritical+0x4c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <vPortExitCritical+0x24>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	607b      	str	r3, [r7, #4]
}
 800603c:	bf00      	nop
 800603e:	e7fe      	b.n	800603e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <vPortExitCritical+0x4c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3b01      	subs	r3, #1
 8006046:	4a08      	ldr	r2, [pc, #32]	; (8006068 <vPortExitCritical+0x4c>)
 8006048:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800604a:	4b07      	ldr	r3, [pc, #28]	; (8006068 <vPortExitCritical+0x4c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d105      	bne.n	800605e <vPortExitCritical+0x42>
 8006052:	2300      	movs	r3, #0
 8006054:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800605c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	bc80      	pop	{r7}
 8006066:	4770      	bx	lr
 8006068:	2000000c 	.word	0x2000000c
 800606c:	00000000 	.word	0x00000000

08006070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006070:	f3ef 8009 	mrs	r0, PSP
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <pxCurrentTCBConst>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006080:	6010      	str	r0, [r2, #0]
 8006082:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006086:	f04f 0050 	mov.w	r0, #80	; 0x50
 800608a:	f380 8811 	msr	BASEPRI, r0
 800608e:	f7ff fd01 	bl	8005a94 <vTaskSwitchContext>
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f380 8811 	msr	BASEPRI, r0
 800609a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800609e:	6819      	ldr	r1, [r3, #0]
 80060a0:	6808      	ldr	r0, [r1, #0]
 80060a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060a6:	f380 8809 	msr	PSP, r0
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	4770      	bx	lr

080060b0 <pxCurrentTCBConst>:
 80060b0:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop

080060b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	607b      	str	r3, [r7, #4]
}
 80060d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060d2:	f7ff fc21 	bl	8005918 <xTaskIncrementTick>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060dc:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <SysTick_Handler+0x40>)
 80060de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	2300      	movs	r3, #0
 80060e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	f383 8811 	msr	BASEPRI, r3
}
 80060ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	e000ed04 	.word	0xe000ed04

080060fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006100:	4b0a      	ldr	r3, [pc, #40]	; (800612c <vPortSetupTimerInterrupt+0x30>)
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006106:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <vPortSetupTimerInterrupt+0x34>)
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <vPortSetupTimerInterrupt+0x38>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a09      	ldr	r2, [pc, #36]	; (8006138 <vPortSetupTimerInterrupt+0x3c>)
 8006112:	fba2 2303 	umull	r2, r3, r2, r3
 8006116:	099b      	lsrs	r3, r3, #6
 8006118:	4a08      	ldr	r2, [pc, #32]	; (800613c <vPortSetupTimerInterrupt+0x40>)
 800611a:	3b01      	subs	r3, #1
 800611c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800611e:	4b03      	ldr	r3, [pc, #12]	; (800612c <vPortSetupTimerInterrupt+0x30>)
 8006120:	2207      	movs	r2, #7
 8006122:	601a      	str	r2, [r3, #0]
}
 8006124:	bf00      	nop
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr
 800612c:	e000e010 	.word	0xe000e010
 8006130:	e000e018 	.word	0xe000e018
 8006134:	20000000 	.word	0x20000000
 8006138:	10624dd3 	.word	0x10624dd3
 800613c:	e000e014 	.word	0xe000e014

08006140 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08a      	sub	sp, #40	; 0x28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006148:	2300      	movs	r3, #0
 800614a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800614c:	f7ff fb3a 	bl	80057c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006150:	4b58      	ldr	r3, [pc, #352]	; (80062b4 <pvPortMalloc+0x174>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006158:	f000 f910 	bl	800637c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800615c:	4b56      	ldr	r3, [pc, #344]	; (80062b8 <pvPortMalloc+0x178>)
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4013      	ands	r3, r2
 8006164:	2b00      	cmp	r3, #0
 8006166:	f040 808e 	bne.w	8006286 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01d      	beq.n	80061ac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006170:	2208      	movs	r2, #8
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4413      	add	r3, r2
 8006176:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	2b00      	cmp	r3, #0
 8006180:	d014      	beq.n	80061ac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f023 0307 	bic.w	r3, r3, #7
 8006188:	3308      	adds	r3, #8
 800618a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <pvPortMalloc+0x6c>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	617b      	str	r3, [r7, #20]
}
 80061a8:	bf00      	nop
 80061aa:	e7fe      	b.n	80061aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d069      	beq.n	8006286 <pvPortMalloc+0x146>
 80061b2:	4b42      	ldr	r3, [pc, #264]	; (80062bc <pvPortMalloc+0x17c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d864      	bhi.n	8006286 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061bc:	4b40      	ldr	r3, [pc, #256]	; (80062c0 <pvPortMalloc+0x180>)
 80061be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061c0:	4b3f      	ldr	r3, [pc, #252]	; (80062c0 <pvPortMalloc+0x180>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061c6:	e004      	b.n	80061d2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d903      	bls.n	80061e4 <pvPortMalloc+0xa4>
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1f1      	bne.n	80061c8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061e4:	4b33      	ldr	r3, [pc, #204]	; (80062b4 <pvPortMalloc+0x174>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d04b      	beq.n	8006286 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2208      	movs	r2, #8
 80061f4:	4413      	add	r3, r2
 80061f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	1ad2      	subs	r2, r2, r3
 8006208:	2308      	movs	r3, #8
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	429a      	cmp	r2, r3
 800620e:	d91f      	bls.n	8006250 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4413      	add	r3, r2
 8006216:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	f003 0307 	and.w	r3, r3, #7
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <pvPortMalloc+0xf8>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	613b      	str	r3, [r7, #16]
}
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	1ad2      	subs	r2, r2, r3
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800624a:	69b8      	ldr	r0, [r7, #24]
 800624c:	f000 f8f8 	bl	8006440 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006250:	4b1a      	ldr	r3, [pc, #104]	; (80062bc <pvPortMalloc+0x17c>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	4a18      	ldr	r2, [pc, #96]	; (80062bc <pvPortMalloc+0x17c>)
 800625c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800625e:	4b17      	ldr	r3, [pc, #92]	; (80062bc <pvPortMalloc+0x17c>)
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	4b18      	ldr	r3, [pc, #96]	; (80062c4 <pvPortMalloc+0x184>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d203      	bcs.n	8006272 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800626a:	4b14      	ldr	r3, [pc, #80]	; (80062bc <pvPortMalloc+0x17c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a15      	ldr	r2, [pc, #84]	; (80062c4 <pvPortMalloc+0x184>)
 8006270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	4b10      	ldr	r3, [pc, #64]	; (80062b8 <pvPortMalloc+0x178>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	431a      	orrs	r2, r3
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006286:	f7ff faab 	bl	80057e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <pvPortMalloc+0x16a>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	60fb      	str	r3, [r7, #12]
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <pvPortMalloc+0x168>
	return pvReturn;
 80062aa:	69fb      	ldr	r3, [r7, #28]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3728      	adds	r7, #40	; 0x28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	200015f8 	.word	0x200015f8
 80062b8:	20001604 	.word	0x20001604
 80062bc:	200015fc 	.word	0x200015fc
 80062c0:	200015f0 	.word	0x200015f0
 80062c4:	20001600 	.word	0x20001600

080062c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d048      	beq.n	800636c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062da:	2308      	movs	r3, #8
 80062dc:	425b      	negs	r3, r3
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4413      	add	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	4b21      	ldr	r3, [pc, #132]	; (8006374 <vPortFree+0xac>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4013      	ands	r3, r2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <vPortFree+0x44>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	60fb      	str	r3, [r7, #12]
}
 8006308:	bf00      	nop
 800630a:	e7fe      	b.n	800630a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <vPortFree+0x62>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	60bb      	str	r3, [r7, #8]
}
 8006326:	bf00      	nop
 8006328:	e7fe      	b.n	8006328 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	4b11      	ldr	r3, [pc, #68]	; (8006374 <vPortFree+0xac>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4013      	ands	r3, r2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d019      	beq.n	800636c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d115      	bne.n	800636c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <vPortFree+0xac>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	43db      	mvns	r3, r3
 800634a:	401a      	ands	r2, r3
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006350:	f7ff fa38 	bl	80057c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	4b07      	ldr	r3, [pc, #28]	; (8006378 <vPortFree+0xb0>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4413      	add	r3, r2
 800635e:	4a06      	ldr	r2, [pc, #24]	; (8006378 <vPortFree+0xb0>)
 8006360:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006362:	6938      	ldr	r0, [r7, #16]
 8006364:	f000 f86c 	bl	8006440 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006368:	f7ff fa3a 	bl	80057e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800636c:	bf00      	nop
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20001604 	.word	0x20001604
 8006378:	200015fc 	.word	0x200015fc

0800637c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006382:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006386:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006388:	4b27      	ldr	r3, [pc, #156]	; (8006428 <prvHeapInit+0xac>)
 800638a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00c      	beq.n	80063b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3307      	adds	r3, #7
 800639a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 0307 	bic.w	r3, r3, #7
 80063a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <prvHeapInit+0xac>)
 80063ac:	4413      	add	r3, r2
 80063ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063b4:	4a1d      	ldr	r2, [pc, #116]	; (800642c <prvHeapInit+0xb0>)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063ba:	4b1c      	ldr	r3, [pc, #112]	; (800642c <prvHeapInit+0xb0>)
 80063bc:	2200      	movs	r2, #0
 80063be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	4413      	add	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063c8:	2208      	movs	r2, #8
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	1a9b      	subs	r3, r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0307 	bic.w	r3, r3, #7
 80063d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4a15      	ldr	r2, [pc, #84]	; (8006430 <prvHeapInit+0xb4>)
 80063dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063de:	4b14      	ldr	r3, [pc, #80]	; (8006430 <prvHeapInit+0xb4>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2200      	movs	r2, #0
 80063e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063e6:	4b12      	ldr	r3, [pc, #72]	; (8006430 <prvHeapInit+0xb4>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	1ad2      	subs	r2, r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063fc:	4b0c      	ldr	r3, [pc, #48]	; (8006430 <prvHeapInit+0xb4>)
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	4a0a      	ldr	r2, [pc, #40]	; (8006434 <prvHeapInit+0xb8>)
 800640a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	4a09      	ldr	r2, [pc, #36]	; (8006438 <prvHeapInit+0xbc>)
 8006412:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006414:	4b09      	ldr	r3, [pc, #36]	; (800643c <prvHeapInit+0xc0>)
 8006416:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800641a:	601a      	str	r2, [r3, #0]
}
 800641c:	bf00      	nop
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	bc80      	pop	{r7}
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	200009f0 	.word	0x200009f0
 800642c:	200015f0 	.word	0x200015f0
 8006430:	200015f8 	.word	0x200015f8
 8006434:	20001600 	.word	0x20001600
 8006438:	200015fc 	.word	0x200015fc
 800643c:	20001604 	.word	0x20001604

08006440 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006448:	4b27      	ldr	r3, [pc, #156]	; (80064e8 <prvInsertBlockIntoFreeList+0xa8>)
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	e002      	b.n	8006454 <prvInsertBlockIntoFreeList+0x14>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	429a      	cmp	r2, r3
 800645c:	d8f7      	bhi.n	800644e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	4413      	add	r3, r2
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	429a      	cmp	r2, r3
 800646e:	d108      	bne.n	8006482 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	441a      	add	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	441a      	add	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	429a      	cmp	r2, r3
 8006494:	d118      	bne.n	80064c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	4b14      	ldr	r3, [pc, #80]	; (80064ec <prvInsertBlockIntoFreeList+0xac>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d00d      	beq.n	80064be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	441a      	add	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	e008      	b.n	80064d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064be:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <prvInsertBlockIntoFreeList+0xac>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	e003      	b.n	80064d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d002      	beq.n	80064de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064de:	bf00      	nop
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr
 80064e8:	200015f0 	.word	0x200015f0
 80064ec:	200015f8 	.word	0x200015f8

080064f0 <memset>:
 80064f0:	4603      	mov	r3, r0
 80064f2:	4402      	add	r2, r0
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d100      	bne.n	80064fa <memset+0xa>
 80064f8:	4770      	bx	lr
 80064fa:	f803 1b01 	strb.w	r1, [r3], #1
 80064fe:	e7f9      	b.n	80064f4 <memset+0x4>

08006500 <_reclaim_reent>:
 8006500:	4b29      	ldr	r3, [pc, #164]	; (80065a8 <_reclaim_reent+0xa8>)
 8006502:	b570      	push	{r4, r5, r6, lr}
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4604      	mov	r4, r0
 8006508:	4283      	cmp	r3, r0
 800650a:	d04b      	beq.n	80065a4 <_reclaim_reent+0xa4>
 800650c:	69c3      	ldr	r3, [r0, #28]
 800650e:	b143      	cbz	r3, 8006522 <_reclaim_reent+0x22>
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d144      	bne.n	80065a0 <_reclaim_reent+0xa0>
 8006516:	69e3      	ldr	r3, [r4, #28]
 8006518:	6819      	ldr	r1, [r3, #0]
 800651a:	b111      	cbz	r1, 8006522 <_reclaim_reent+0x22>
 800651c:	4620      	mov	r0, r4
 800651e:	f000 f86b 	bl	80065f8 <_free_r>
 8006522:	6961      	ldr	r1, [r4, #20]
 8006524:	b111      	cbz	r1, 800652c <_reclaim_reent+0x2c>
 8006526:	4620      	mov	r0, r4
 8006528:	f000 f866 	bl	80065f8 <_free_r>
 800652c:	69e1      	ldr	r1, [r4, #28]
 800652e:	b111      	cbz	r1, 8006536 <_reclaim_reent+0x36>
 8006530:	4620      	mov	r0, r4
 8006532:	f000 f861 	bl	80065f8 <_free_r>
 8006536:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006538:	b111      	cbz	r1, 8006540 <_reclaim_reent+0x40>
 800653a:	4620      	mov	r0, r4
 800653c:	f000 f85c 	bl	80065f8 <_free_r>
 8006540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006542:	b111      	cbz	r1, 800654a <_reclaim_reent+0x4a>
 8006544:	4620      	mov	r0, r4
 8006546:	f000 f857 	bl	80065f8 <_free_r>
 800654a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800654c:	b111      	cbz	r1, 8006554 <_reclaim_reent+0x54>
 800654e:	4620      	mov	r0, r4
 8006550:	f000 f852 	bl	80065f8 <_free_r>
 8006554:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006556:	b111      	cbz	r1, 800655e <_reclaim_reent+0x5e>
 8006558:	4620      	mov	r0, r4
 800655a:	f000 f84d 	bl	80065f8 <_free_r>
 800655e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006560:	b111      	cbz	r1, 8006568 <_reclaim_reent+0x68>
 8006562:	4620      	mov	r0, r4
 8006564:	f000 f848 	bl	80065f8 <_free_r>
 8006568:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800656a:	b111      	cbz	r1, 8006572 <_reclaim_reent+0x72>
 800656c:	4620      	mov	r0, r4
 800656e:	f000 f843 	bl	80065f8 <_free_r>
 8006572:	6a23      	ldr	r3, [r4, #32]
 8006574:	b1b3      	cbz	r3, 80065a4 <_reclaim_reent+0xa4>
 8006576:	4620      	mov	r0, r4
 8006578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800657c:	4718      	bx	r3
 800657e:	5949      	ldr	r1, [r1, r5]
 8006580:	b941      	cbnz	r1, 8006594 <_reclaim_reent+0x94>
 8006582:	3504      	adds	r5, #4
 8006584:	69e3      	ldr	r3, [r4, #28]
 8006586:	2d80      	cmp	r5, #128	; 0x80
 8006588:	68d9      	ldr	r1, [r3, #12]
 800658a:	d1f8      	bne.n	800657e <_reclaim_reent+0x7e>
 800658c:	4620      	mov	r0, r4
 800658e:	f000 f833 	bl	80065f8 <_free_r>
 8006592:	e7c0      	b.n	8006516 <_reclaim_reent+0x16>
 8006594:	680e      	ldr	r6, [r1, #0]
 8006596:	4620      	mov	r0, r4
 8006598:	f000 f82e 	bl	80065f8 <_free_r>
 800659c:	4631      	mov	r1, r6
 800659e:	e7ef      	b.n	8006580 <_reclaim_reent+0x80>
 80065a0:	2500      	movs	r5, #0
 80065a2:	e7ef      	b.n	8006584 <_reclaim_reent+0x84>
 80065a4:	bd70      	pop	{r4, r5, r6, pc}
 80065a6:	bf00      	nop
 80065a8:	2000005c 	.word	0x2000005c

080065ac <__libc_init_array>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	2600      	movs	r6, #0
 80065b0:	4d0c      	ldr	r5, [pc, #48]	; (80065e4 <__libc_init_array+0x38>)
 80065b2:	4c0d      	ldr	r4, [pc, #52]	; (80065e8 <__libc_init_array+0x3c>)
 80065b4:	1b64      	subs	r4, r4, r5
 80065b6:	10a4      	asrs	r4, r4, #2
 80065b8:	42a6      	cmp	r6, r4
 80065ba:	d109      	bne.n	80065d0 <__libc_init_array+0x24>
 80065bc:	f000 f870 	bl	80066a0 <_init>
 80065c0:	2600      	movs	r6, #0
 80065c2:	4d0a      	ldr	r5, [pc, #40]	; (80065ec <__libc_init_array+0x40>)
 80065c4:	4c0a      	ldr	r4, [pc, #40]	; (80065f0 <__libc_init_array+0x44>)
 80065c6:	1b64      	subs	r4, r4, r5
 80065c8:	10a4      	asrs	r4, r4, #2
 80065ca:	42a6      	cmp	r6, r4
 80065cc:	d105      	bne.n	80065da <__libc_init_array+0x2e>
 80065ce:	bd70      	pop	{r4, r5, r6, pc}
 80065d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d4:	4798      	blx	r3
 80065d6:	3601      	adds	r6, #1
 80065d8:	e7ee      	b.n	80065b8 <__libc_init_array+0xc>
 80065da:	f855 3b04 	ldr.w	r3, [r5], #4
 80065de:	4798      	blx	r3
 80065e0:	3601      	adds	r6, #1
 80065e2:	e7f2      	b.n	80065ca <__libc_init_array+0x1e>
 80065e4:	08006768 	.word	0x08006768
 80065e8:	08006768 	.word	0x08006768
 80065ec:	08006768 	.word	0x08006768
 80065f0:	0800676c 	.word	0x0800676c

080065f4 <__retarget_lock_acquire_recursive>:
 80065f4:	4770      	bx	lr

080065f6 <__retarget_lock_release_recursive>:
 80065f6:	4770      	bx	lr

080065f8 <_free_r>:
 80065f8:	b538      	push	{r3, r4, r5, lr}
 80065fa:	4605      	mov	r5, r0
 80065fc:	2900      	cmp	r1, #0
 80065fe:	d040      	beq.n	8006682 <_free_r+0x8a>
 8006600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006604:	1f0c      	subs	r4, r1, #4
 8006606:	2b00      	cmp	r3, #0
 8006608:	bfb8      	it	lt
 800660a:	18e4      	addlt	r4, r4, r3
 800660c:	f000 f83c 	bl	8006688 <__malloc_lock>
 8006610:	4a1c      	ldr	r2, [pc, #112]	; (8006684 <_free_r+0x8c>)
 8006612:	6813      	ldr	r3, [r2, #0]
 8006614:	b933      	cbnz	r3, 8006624 <_free_r+0x2c>
 8006616:	6063      	str	r3, [r4, #4]
 8006618:	6014      	str	r4, [r2, #0]
 800661a:	4628      	mov	r0, r5
 800661c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006620:	f000 b838 	b.w	8006694 <__malloc_unlock>
 8006624:	42a3      	cmp	r3, r4
 8006626:	d908      	bls.n	800663a <_free_r+0x42>
 8006628:	6820      	ldr	r0, [r4, #0]
 800662a:	1821      	adds	r1, r4, r0
 800662c:	428b      	cmp	r3, r1
 800662e:	bf01      	itttt	eq
 8006630:	6819      	ldreq	r1, [r3, #0]
 8006632:	685b      	ldreq	r3, [r3, #4]
 8006634:	1809      	addeq	r1, r1, r0
 8006636:	6021      	streq	r1, [r4, #0]
 8006638:	e7ed      	b.n	8006616 <_free_r+0x1e>
 800663a:	461a      	mov	r2, r3
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	b10b      	cbz	r3, 8006644 <_free_r+0x4c>
 8006640:	42a3      	cmp	r3, r4
 8006642:	d9fa      	bls.n	800663a <_free_r+0x42>
 8006644:	6811      	ldr	r1, [r2, #0]
 8006646:	1850      	adds	r0, r2, r1
 8006648:	42a0      	cmp	r0, r4
 800664a:	d10b      	bne.n	8006664 <_free_r+0x6c>
 800664c:	6820      	ldr	r0, [r4, #0]
 800664e:	4401      	add	r1, r0
 8006650:	1850      	adds	r0, r2, r1
 8006652:	4283      	cmp	r3, r0
 8006654:	6011      	str	r1, [r2, #0]
 8006656:	d1e0      	bne.n	800661a <_free_r+0x22>
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	4408      	add	r0, r1
 800665e:	6010      	str	r0, [r2, #0]
 8006660:	6053      	str	r3, [r2, #4]
 8006662:	e7da      	b.n	800661a <_free_r+0x22>
 8006664:	d902      	bls.n	800666c <_free_r+0x74>
 8006666:	230c      	movs	r3, #12
 8006668:	602b      	str	r3, [r5, #0]
 800666a:	e7d6      	b.n	800661a <_free_r+0x22>
 800666c:	6820      	ldr	r0, [r4, #0]
 800666e:	1821      	adds	r1, r4, r0
 8006670:	428b      	cmp	r3, r1
 8006672:	bf01      	itttt	eq
 8006674:	6819      	ldreq	r1, [r3, #0]
 8006676:	685b      	ldreq	r3, [r3, #4]
 8006678:	1809      	addeq	r1, r1, r0
 800667a:	6021      	streq	r1, [r4, #0]
 800667c:	6063      	str	r3, [r4, #4]
 800667e:	6054      	str	r4, [r2, #4]
 8006680:	e7cb      	b.n	800661a <_free_r+0x22>
 8006682:	bd38      	pop	{r3, r4, r5, pc}
 8006684:	20001744 	.word	0x20001744

08006688 <__malloc_lock>:
 8006688:	4801      	ldr	r0, [pc, #4]	; (8006690 <__malloc_lock+0x8>)
 800668a:	f7ff bfb3 	b.w	80065f4 <__retarget_lock_acquire_recursive>
 800668e:	bf00      	nop
 8006690:	20001740 	.word	0x20001740

08006694 <__malloc_unlock>:
 8006694:	4801      	ldr	r0, [pc, #4]	; (800669c <__malloc_unlock+0x8>)
 8006696:	f7ff bfae 	b.w	80065f6 <__retarget_lock_release_recursive>
 800669a:	bf00      	nop
 800669c:	20001740 	.word	0x20001740

080066a0 <_init>:
 80066a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a2:	bf00      	nop
 80066a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a6:	bc08      	pop	{r3}
 80066a8:	469e      	mov	lr, r3
 80066aa:	4770      	bx	lr

080066ac <_fini>:
 80066ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ae:	bf00      	nop
 80066b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b2:	bc08      	pop	{r3}
 80066b4:	469e      	mov	lr, r3
 80066b6:	4770      	bx	lr
